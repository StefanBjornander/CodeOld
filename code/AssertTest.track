1:	

assert_testX:	; n = 0
2:		mov word [bp + 6], 0
4:	

assert_testX$1:	; call header integral zero 0 stack zero 0
6:	

assert_testX$2:	; parameter string_Please20write20a20number2028not20620or207293A20#, offset 6
7:		mov word [bp + 14], string_Please20write20a20number2028not20620or207293A20#
9:	

assert_testX$3:	; call function noellipse-ellipse printf, extra 0
10:		mov word [bp + 8], assert_testX$4
11:		mov [bp + 10], bp
12:		add bp, 8
13:		mov di, bp
14:		jmp printf
16:	

assert_testX$4:	; post call
18:	

assert_testX$5:	; call header integral zero 0 stack zero 0
20:	

assert_testX$6:	; parameter string_25i#, offset 6
21:		mov word [bp + 14], string_25i#
23:	

assert_testX$7:	; £temporary3799 = &n
24:		mov t2466, bp
25:		add t2466, 6
27:	

assert_testX$8:	; parameter £temporary3799, offset 8
28:		mov [bp + 16], t2466
30:	

assert_testX$9:	; call function noellipse-ellipse scanf, extra 0
31:		mov word [bp + 8], assert_testX$10
32:		mov [bp + 10], bp
33:		add bp, 8
34:		mov di, bp
35:		add di, 2
36:		jmp scanf
38:	

assert_testX$10:	; post call
40:	

assert_testX$11:	; if n != 6 goto 23
41:		cmp word [bp + 6], 6
42:		jne assert_testX$23
44:	

assert_testX$12:	; call header integral zero 0 stack zero 0
46:	

assert_testX$13:	; parameter stderr, offset 6
47:		mov a2467, [stderr]
48:		mov [bp + 14], a2467
50:	

assert_testX$14:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
51:		mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
53:	

assert_testX$15:	; parameter string_n20213D206#, offset 10
54:		mov word [bp + 18], string_n20213D206#
56:	

assert_testX$16:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#, offset 12
57:		mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#
59:	

assert_testX$17:	; parameter 10, offset 14
60:		mov word [bp + 22], 10
62:	

assert_testX$18:	; call function noellipse-ellipse fprintf, extra 0
63:		mov word [bp + 8], assert_testX$19
64:		mov [bp + 10], bp
65:		add bp, 8
66:		mov di, bp
67:		add di, 6
68:		jmp fprintf
70:	

assert_testX$19:	; post call
72:	

assert_testX$20:	; call header integral zero 0 stack zero 0
74:	

assert_testX$21:	; call function noellipse-noellipse abort
75:		mov word [bp + 8], assert_testX$22
76:		mov [bp + 10], bp
77:		add bp, 8
78:		jmp abort
80:	

assert_testX$22:	; post call
82:	

assert_testX$23:	; call header integral zero 0 stack zero 0
84:	

assert_testX$24:	; parameter n, offset 6
85:		mov a2468, [bp + 6]
86:		mov [bp + 14], a2468
88:	

assert_testX$25:	; call function noellipse-noellipse assert_test2
89:		mov word [bp + 8], assert_testX$26
90:		mov [bp + 10], bp
91:		add bp, 8
92:		jmp assert_test2
94:	

assert_testX$26:	; post call
96:	

assert_testX$27:	; return
97:		mov t2469, [bp]
98:		mov di, [bp + 4]
99:		mov bp, [bp + 2]
100:		jmp t2469
102:	

assert_testX$28:	; function end assert_testX
1:	

assert_test2X:	; if n != 7 goto 12
2:		cmp word [bp + 6], 7
3:		jne assert_test2X$12
5:	

assert_test2X$1:	; call header integral zero 0 stack zero 0
7:	

assert_test2X$2:	; parameter stderr, offset 6
8:		mov a2470, [stderr]
9:		mov [bp + 14], a2470
11:	

assert_test2X$3:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
12:		mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
14:	

assert_test2X$4:	; parameter string_n20213D207#, offset 10
15:		mov word [bp + 18], string_n20213D207#
17:	

assert_test2X$5:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#, offset 12
18:		mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#
20:	

assert_test2X$6:	; parameter 15, offset 14
21:		mov word [bp + 22], 15
23:	

assert_test2X$7:	; call function noellipse-ellipse fprintf, extra 0
24:		mov word [bp + 8], assert_test2X$8
25:		mov [bp + 10], bp
26:		add bp, 8
27:		mov di, bp
28:		add di, 6
29:		jmp fprintf
31:	

assert_test2X$8:	; post call
33:	

assert_test2X$9:	; call header integral zero 0 stack zero 0
35:	

assert_test2X$10:	; call function noellipse-noellipse abort
36:		mov word [bp + 8], assert_test2X$11
37:		mov [bp + 10], bp
38:		add bp, 8
39:		jmp abort
41:	

assert_test2X$11:	; post call
43:	

assert_test2X$12:	; return
44:		mov t2471, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t2471
49:	

assert_test2X$13:	; function end assert_test2X
