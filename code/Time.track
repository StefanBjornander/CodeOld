1:	

clock:	; SetReturnValue -1
2:		mov a1785, -1
4:	

clock$1:	; Return -1
5:		mov t1786, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp t1786
10:	

clock$2:	; FunctionEnd clock
1:	

@7454$isLeapYear:	; SignedModulo £temporary3238 year 4
2:		mov a1787, [bp + 6]
4:		xor dx, dx
5:		idiv word [@7456$int2$4#]
11:	

@7454$isLeapYear$1:	; NotEqual 4 £temporary3238 0
12:		cmp t1789, 0
13:		jne @7454$isLeapYear$4
15:	

@7454$isLeapYear$2:	; SignedModulo £temporary3240 year 100
16:		mov a1790, [bp + 6]
18:		xor dx, dx
19:		idiv word [@7462$int2$100#]
25:	

@7454$isLeapYear$3:	; NotEqual 6 £temporary3240 0
26:		cmp t1792, 0
27:		jne @7454$isLeapYear$6
29:	

@7454$isLeapYear$4:	; SignedModulo £temporary3243 year 400
30:		mov a1793, [bp + 6]
32:		xor dx, dx
33:		idiv word [@7469$int2$400#]
39:	

@7454$isLeapYear$5:	; NotEqual 8 £temporary3243 0
40:		cmp t1795, 0
41:		jne @7454$isLeapYear$8
43:	

@7454$isLeapYear$6:	; Assign £temporary3246 1
44:		mov t1796, 1
46:	

@7454$isLeapYear$7:	; Goto 9
47:		jmp @7454$isLeapYear$9
49:	

@7454$isLeapYear$8:	; Assign £temporary3246 0
50:		mov t1797, 0
52:	

@7454$isLeapYear$9:	; SetReturnValue £temporary3246
54:	

@7454$isLeapYear$10:	; Return £temporary3246
55:		mov t1798, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp t1798
60:	

@7454$isLeapYear$11:	; FunctionEnd isLeapYear
1:	

time:	; AssignRegister ah 42
2:		mov a1799, 42
4:	

time$1:	; Interrupt 33
5:		int 33
7:	

time$2:	; InspectRegister £temporary3248 cx
9:	

time$3:	; BinarySubtract year £temporary3248 1900
10:		sub t1800, 1900
11:		mov [bp + 12], t1800
13:	

time$4:	; InspectRegister £temporary3250 dh
15:	

time$5:	; BinarySubtract month £temporary3250 1
16:		sub t1801, 1
17:		mov [bp + 14], t1801
19:	

time$6:	; InspectRegister £temporary3252 dl
21:	

time$7:	; Assign monthDay £temporary3252
22:		mov [bp + 15], t1802
24:	

time$8:	; AssignRegister ah 44
25:		mov a1803, 44
27:	

time$9:	; Interrupt 33
28:		int 33
30:	

time$10:	; InspectRegister £temporary3254 ch
32:	

time$11:	; Assign hour £temporary3254
33:		mov [bp + 16], t1804
35:	

time$12:	; InspectRegister £temporary3255 cl
37:	

time$13:	; Assign min £temporary3255
38:		mov [bp + 17], t1805
40:	

time$14:	; InspectRegister £temporary3256 dh
42:	

time$15:	; Assign sec £temporary3256
43:		mov [bp + 18], t1806
45:	

time$16:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
47:	

time$17:	; Call 19 localeconv 0
48:		mov word [bp + 19], time$18
49:		mov [bp + 21], bp
50:		add bp, 19
51:		jmp localeconv
53:	

time$18:	; PostCall 19
55:	

time$19:	; GetReturnValue £temporary3257
57:	

time$20:	; Assign localeConvPtr £temporary3257
58:		mov [bp + 19], type1807
60:	

time$21:	; Equal 27 localeConvPtr 0
61:		cmp word [bp + 19], 0
62:		je time$27
64:	

time$22:	; IntegralToIntegral £temporary3260 hour
65:		mov a1808, [bp + 16]
67:		and a1808, 255
69:		cmp a1808, 0
70:		jge time$23
71:		neg a1808
73:		neg a1808
75:	

time$23:	; Deref £temporary3259 -> localeConvPtr localeConvPtr 2
76:		mov a1809, [bp + 19]
78:	

time$24:	; BinarySubtract £temporary3261 £temporary3260 £temporary3259 -> localeConvPtr
79:		sub a1808, [a1809 + 2]
81:	

time$25:	; IntegralToIntegral £temporary3262 £temporary3261
84:		cmp a1808, 0
85:		jge time$26
86:		neg a1808
88:		neg a1808
90:	

time$26:	; Assign hour £temporary3262
91:		mov [bp + 16], a1808
93:	

time$27:	; Assign daysOfMonths[0] 31
94:		mov word [bp + 19], 31
96:	

time$28:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
98:	

time$29:	; Parameter 21 year 6
99:		mov a1810, [bp + 12]
100:		mov [bp + 27], a1810
102:	

time$30:	; Call 21 isLeapYear 0
103:		mov word [bp + 21], time$31
104:		mov [bp + 23], bp
105:		add bp, 21
106:		jmp @7454$isLeapYear
108:	

time$31:	; PostCall 21
110:	

time$32:	; GetReturnValue £temporary3263
112:	

time$33:	; Equal 36 £temporary3263 0
113:		cmp type1811, 0
114:		je time$36
116:	

time$34:	; Assign £temporary3268 29
117:		mov t1812, 29
119:	

time$35:	; Goto 37
120:		jmp time$37
122:	

time$36:	; Assign £temporary3268 28
123:		mov t1813, 28
125:	

time$37:	; Assign daysOfMonths[1] £temporary3268
126:		mov [bp + 21], t1813
128:	

time$38:	; Assign daysOfMonths[2] 31
129:		mov word [bp + 23], 31
131:	

time$39:	; Assign daysOfMonths[3] 30
132:		mov word [bp + 25], 30
134:	

time$40:	; Assign daysOfMonths[4] 31
135:		mov word [bp + 27], 31
137:	

time$41:	; Assign daysOfMonths[5] 30
138:		mov word [bp + 29], 30
140:	

time$42:	; Assign daysOfMonths[6] 31
141:		mov word [bp + 31], 31
143:	

time$43:	; Assign daysOfMonths[7] 31
144:		mov word [bp + 33], 31
146:	

time$44:	; Assign daysOfMonths[8] 30
147:		mov word [bp + 35], 30
149:	

time$45:	; Assign daysOfMonths[9] 31
150:		mov word [bp + 37], 31
152:	

time$46:	; Assign daysOfMonths[10] 30
153:		mov word [bp + 39], 30
155:	

time$47:	; Assign daysOfMonths[11] 31
156:		mov word [bp + 41], 31
158:	

time$48:	; IntegralToIntegral £temporary3281 monthDay
159:		mov a1814, [bp + 15]
161:		and a1814, 255
163:		cmp a1814, 0
164:		jge time$49
165:		neg a1814
167:		neg a1814
169:	

time$49:	; BinarySubtract yearDay £temporary3281 1
170:		sub a1814, 1
171:		mov [bp + 43], a1814
173:	

time$50:	; Assign monthIndex 0
174:		mov word [bp + 45], 0
176:	

time$51:	; IntegralToIntegral £temporary3283 month
177:		mov a1815, [bp + 14]
179:		and a1815, 255
181:		cmp a1815, 0
182:		jge time$52
183:		neg a1815
185:		neg a1815
187:	

time$52:	; SignedGreaterThanEqual 59 monthIndex £temporary3283
188:		cmp [bp + 45], a1815
189:		jge time$59
191:	

time$53:	; SignedMultiply £temporary3287 monthIndex 2
192:		mov a1816, [bp + 45]
194:		xor dx, dx
195:		imul word [@7578$int2$2#]
201:	

time$54:	; BinaryAdd £temporary3288 daysOfMonths £temporary3287
202:		mov a1820, bp
203:		add a1820, 19
204:		add a1820, t1819
206:	

time$55:	; Deref £temporary3286 -> £temporary3288 £temporary3288 0
208:	

time$56:	; BinaryAdd yearDay yearDay £temporary3286 -> £temporary3288
209:		mov t1821, [a1820]
210:		add [bp + 43], t1821
212:	

time$57:	; Increment monthIndex
213:		inc word [bp + 45]
215:	

time$58:	; Goto 51
216:		jmp time$51
218:	

time$59:	; IntegralToIntegral £temporary3291 sec
219:		mov a1822, [bp + 18]
221:		and a1822, 255
223:		cmp a1822, 0
224:		jge time$60
225:		neg a1822
227:		neg a1822
229:	

time$60:	; Assign s$tm_sec £temporary3291
230:		mov [bp + 47], a1822
232:	

time$61:	; IntegralToIntegral £temporary3293 min
233:		mov a1823, [bp + 17]
235:		and a1823, 255
237:		cmp a1823, 0
238:		jge time$62
239:		neg a1823
241:		neg a1823
243:	

time$62:	; Assign s$tm_min £temporary3293
244:		mov [bp + 49], a1823
246:	

time$63:	; IntegralToIntegral £temporary3295 hour
247:		mov a1824, [bp + 16]
249:		and a1824, 255
251:		cmp a1824, 0
252:		jge time$64
253:		neg a1824
255:		neg a1824
257:	

time$64:	; Assign s$tm_hour £temporary3295
258:		mov [bp + 51], a1824
260:	

time$65:	; IntegralToIntegral £temporary3297 monthDay
261:		mov a1825, [bp + 15]
263:		and a1825, 255
265:		cmp a1825, 0
266:		jge time$66
267:		neg a1825
269:		neg a1825
271:	

time$66:	; Assign s$tm_mday £temporary3297
272:		mov [bp + 53], a1825
274:	

time$67:	; IntegralToIntegral £temporary3299 month
275:		mov a1826, [bp + 14]
277:		and a1826, 255
279:		cmp a1826, 0
280:		jge time$68
281:		neg a1826
283:		neg a1826
285:	

time$68:	; Assign s$tm_mon £temporary3299
286:		mov [bp + 55], a1826
288:	

time$69:	; Assign s$tm_year year
289:		mov a1827, [bp + 12]
290:		mov [bp + 57], a1827
292:	

time$70:	; Assign s$tm_wday 0
293:		mov word [bp + 59], 0
295:	

time$71:	; Assign s$tm_yday yearDay
296:		mov a1828, [bp + 43]
297:		mov [bp + 61], a1828
299:	

time$72:	; Assign s$tm_isdst 0
300:		mov word [bp + 63], 0
302:	

time$73:	; CallHeader 65 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
304:	

time$74:	; address £temporary3304 s
305:		mov t1829, bp
306:		add t1829, 47
308:	

time$75:	; Parameter 65 £temporary3304 6
309:		mov [bp + 71], t1829
311:	

time$76:	; Call 65 mktime 0
312:		mov word [bp + 65], time$77
313:		mov [bp + 67], bp
314:		add bp, 65
315:		jmp mktime
317:	

time$77:	; PostCall 65
319:	

time$78:	; GetReturnValue £temporary3305
321:	

time$79:	; Assign time £temporary3305
322:		mov [bp + 8], type1830
324:	

time$80:	; Equal 83 timePtr 0
325:		cmp word [bp + 6], 0
326:		je time$83
328:	

time$81:	; Deref £temporary3307 -> timePtr timePtr 0
329:		mov a1831, [bp + 6]
331:	

time$82:	; Assign £temporary3307 -> timePtr time
332:		mov a1832, [bp + 8]
333:		mov [a1831], a1832
335:	

time$83:	; SetReturnValue time
336:		mov a1833, [bp + 8]
338:	

time$84:	; Return time
339:		mov t1834, [bp]
340:		mov di, [bp + 4]
341:		mov bp, [bp + 2]
342:		jmp t1834
344:	

time$85:	; FunctionEnd time
1:	

mktime:	; Equal 28 tp 0
2:		cmp word [bp + 6], 0
3:		je mktime$28
5:	

mktime$1:	; Deref £temporary3312 -> tp tp 10
6:		mov a1835, [bp + 6]
8:	

mktime$2:	; BinarySubtract £temporary3313 £temporary3312 -> tp 69
9:		mov t1836, [a1835 + 10]
10:		sub t1836, 69
12:	

mktime$3:	; SignedDivide £temporary3314 £temporary3313 4
14:		xor dx, dx
15:		idiv word [@7621$int2$4#]
21:	

mktime$4:	; IntegralToIntegral £temporary3315 £temporary3314
23:		and t1839, 65535
25:		cmp t1839, 0
26:		jge mktime$5
27:		neg t1839
29:		neg t1839
31:	

mktime$5:	; Assign leapDays £temporary3315
32:		mov [bp + 8], t1839
34:	

mktime$6:	; Deref £temporary3316 -> tp tp 10
35:		mov a1840, [bp + 6]
37:	

mktime$7:	; BinarySubtract £temporary3317 £temporary3316 -> tp 70
38:		mov t1841, [a1840 + 10]
39:		sub t1841, 70
41:	

mktime$8:	; SignedMultiply £temporary3318 £temporary3317 365
43:		xor dx, dx
44:		imul word [@7630$int2$365#]
50:	

mktime$9:	; IntegralToIntegral £temporary3319 £temporary3318
52:		and t1844, 65535
54:		cmp t1844, 0
55:		jge mktime$10
56:		neg t1844
58:		neg t1844
60:	

mktime$10:	; BinaryAdd £temporary3320 £temporary3319 leapDays
61:		add t1844, [bp + 8]
63:	

mktime$11:	; Deref £temporary3321 -> tp tp 14
64:		mov a1845, [bp + 6]
66:	

mktime$12:	; IntegralToIntegral £temporary3322 £temporary3321 -> tp
67:		mov t1846, [a1845 + 14]
69:		and t1846, 65535
71:		cmp t1846, 0
72:		jge mktime$13
73:		neg t1846
75:		neg t1846
77:	

mktime$13:	; BinaryAdd totalDays £temporary3320 £temporary3322
78:		add t1844, t1846
79:		mov [bp + 12], t1844
81:	

mktime$14:	; SignedMultiply £temporary3324 totalDays 86400
82:		mov a1847, [bp + 12]
84:		xor edx, edx
85:		imul dword [@7639$int4$86400#]
91:		mov t1853, t1850
93:	

mktime$15:	; Deref £temporary3325 -> tp tp 4
94:		mov a1851, [bp + 6]
96:	

mktime$16:	; IntegralToIntegral £temporary3326 £temporary3325 -> tp
97:		mov t1852, [a1851 + 4]
99:		and t1852, 65535
101:		cmp t1852, 0
102:		jge mktime$17
103:		neg t1852
105:		neg t1852
107:	

mktime$17:	; SignedMultiply £temporary3327 £temporary3326 3600
109:		xor edx, edx
110:		imul dword [@7643$int4$3600#]
116:	

mktime$18:	; BinaryAdd £temporary3328 £temporary3324 £temporary3327
117:		add t1853, t1856
119:	

mktime$19:	; Deref £temporary3329 -> tp tp 2
120:		mov a1857, [bp + 6]
122:	

mktime$20:	; IntegralToIntegral £temporary3330 £temporary3329 -> tp
123:		mov t1858, [a1857 + 2]
125:		and t1858, 65535
127:		cmp t1858, 0
128:		jge mktime$21
129:		neg t1858
131:		neg t1858
133:	

mktime$21:	; SignedMultiply £temporary3331 £temporary3330 60
135:		xor edx, edx
136:		imul dword [@7649$int4$60#]
142:	

mktime$22:	; BinaryAdd £temporary3332 £temporary3328 £temporary3331
143:		add t1853, t1861
145:	

mktime$23:	; Deref £temporary3333 -> tp tp 0
146:		mov a1862, [bp + 6]
148:	

mktime$24:	; IntegralToIntegral £temporary3334 £temporary3333 -> tp
149:		mov t1863, [a1862]
151:		and t1863, 65535
153:		cmp t1863, 0
154:		jge mktime$25
155:		neg t1863
157:		neg t1863
159:	

mktime$25:	; BinaryAdd £temporary3335 £temporary3332 £temporary3334
160:		add t1853, t1863
162:	

mktime$26:	; SetReturnValue £temporary3335
164:	

mktime$27:	; Return £temporary3335
165:		mov t1864, [bp]
166:		mov di, [bp + 4]
167:		mov bp, [bp + 2]
168:		jmp t1864
170:	

mktime$28:	; SetReturnValue 0
171:		mov a1865, 0
173:	

mktime$29:	; Return 0
174:		mov t1866, [bp]
175:		mov di, [bp + 4]
176:		mov bp, [bp + 2]
177:		jmp t1866
179:	

mktime$30:	; FunctionEnd mktime
1:	

gmtime:	; Equal 89 timePtr 0
2:		cmp word [bp + 6], 0
3:		je gmtime$89
5:	

gmtime$1:	; Deref £temporary3337 -> timePtr timePtr 0
6:		mov a1867, [bp + 6]
8:	

gmtime$2:	; Assign time £temporary3337 -> timePtr
9:		mov t1868, [a1867]
10:		mov [bp + 8], t1868
12:	

gmtime$3:	; SignedModulo secondsOfDay time 86400
13:		mov a1869, [bp + 8]
15:		xor edx, edx
16:		idiv dword [@7667$int4$86400#]
17:		mov [bp + 12], edx
19:	

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
20:		mov a1871, [bp + 12]
22:		xor edx, edx
23:		idiv dword [@7671$int4$3600#]
24:		mov [bp + 16], edx
26:	

gmtime$5:	; SignedDivide £temporary3341 secondsOfDay 3600
27:		mov a1873, [bp + 12]
29:		xor edx, edx
30:		idiv dword [@7676$int4$3600#]
36:	

gmtime$6:	; IntegralToIntegral £temporary3342 £temporary3341
39:		cmp t1876, 0
40:		jge gmtime$7
41:		neg t1876
43:		neg t1876
45:	

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3342
46:		mov [@7659$g_timeStruct + 4], t1876
48:	

gmtime$8:	; SignedDivide £temporary3344 secondsOfHour 60
49:		mov a1877, [bp + 16]
51:		xor edx, edx
52:		idiv dword [@7681$int4$60#]
58:	

gmtime$9:	; IntegralToIntegral £temporary3345 £temporary3344
61:		cmp t1880, 0
62:		jge gmtime$10
63:		neg t1880
65:		neg t1880
67:	

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3345
68:		mov [@7659$g_timeStruct + 2], t1880
70:	

gmtime$11:	; SignedModulo £temporary3347 secondsOfHour 60
71:		mov a1881, [bp + 16]
73:		xor edx, edx
74:		idiv dword [@7686$int4$60#]
80:	

gmtime$12:	; IntegralToIntegral £temporary3348 £temporary3347
83:		cmp t1883, 0
84:		jge gmtime$13
85:		neg t1883
87:		neg t1883
89:	

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3348
90:		mov [@7659$g_timeStruct], t1883
92:	

gmtime$14:	; SignedDivide totalDays time 86400
93:		mov a1884, [bp + 8]
95:		xor edx, edx
96:		idiv dword [@7690$int4$86400#]
97:		mov [bp + 20], eax
99:	

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
100:		cmp dword [bp + 20], 3
101:		jge gmtime$20
103:	

gmtime$16:	; BinaryAdd £temporary3352 totalDays 4
104:		mov a1887, [bp + 20]
105:		add a1887, 4
107:	

gmtime$17:	; IntegralToIntegral £temporary3353 £temporary3352
110:		cmp a1887, 0
111:		jge gmtime$18
112:		neg a1887
114:		neg a1887
116:	

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3353
117:		mov [@7659$g_timeStruct + 12], a1887
119:	

gmtime$19:	; Goto 24
120:		jmp gmtime$24
122:	

gmtime$20:	; BinarySubtract £temporary3355 totalDays 3
123:		mov a1888, [bp + 20]
124:		sub a1888, 3
126:	

gmtime$21:	; SignedModulo £temporary3356 £temporary3355 7
128:		xor edx, edx
129:		idiv dword [@7706$int4$7#]
135:	

gmtime$22:	; IntegralToIntegral £temporary3357 £temporary3356
138:		cmp t1890, 0
139:		jge gmtime$23
140:		neg t1890
142:		neg t1890
144:	

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3357
145:		mov [@7659$g_timeStruct + 12], t1890
147:	

gmtime$24:	; SignedDivide £temporary3358 totalDays 365
148:		mov a1891, [bp + 20]
150:		xor edx, edx
151:		idiv dword [@7711$int4$365#]
157:	

gmtime$25:	; BinaryAdd £temporary3359 £temporary3358 1970
158:		add t1894, 1970
160:	

gmtime$26:	; IntegralToIntegral £temporary3360 £temporary3359
163:		cmp t1894, 0
164:		jge gmtime$27
165:		neg t1894
167:		neg t1894
169:	

gmtime$27:	; Assign year £temporary3360
170:		mov [bp + 24], t1894
172:	

gmtime$28:	; BinarySubtract £temporary3361 year 1969
173:		mov a1895, [bp + 24]
174:		sub a1895, 1969
176:	

gmtime$29:	; SignedDivide leapDays £temporary3361 4
178:		xor dx, dx
179:		idiv word [@7721$int2$4#]
180:		mov [bp + 26], ax
182:	

gmtime$30:	; SignedModulo totalDays totalDays 365
183:		mov a1898, [bp + 20]
185:		xor edx, edx
186:		idiv dword [@7725$int4$365#]
187:		mov [bp + 20], edx
189:	

gmtime$31:	; IntegralToIntegral £temporary3364 leapDays
190:		mov a1900, [bp + 26]
192:		and a1900, 65535
194:		cmp a1900, 0
195:		jge gmtime$32
196:		neg a1900
198:		neg a1900
200:	

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3364
201:		sub [bp + 20], a1900
203:	

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
204:		cmp dword [bp + 20], 0
205:		jge gmtime$44
207:	

gmtime$34:	; Decrement year
208:		dec word [bp + 24]
210:	

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
212:	

gmtime$36:	; Parameter 28 year 6
213:		mov a1901, [bp + 24]
214:		mov [bp + 34], a1901
216:	

gmtime$37:	; Call 28 isLeapYear 0
217:		mov word [bp + 28], gmtime$38
218:		mov [bp + 30], bp
219:		add bp, 28
220:		jmp @7454$isLeapYear
222:	

gmtime$38:	; PostCall 28
224:	

gmtime$39:	; GetReturnValue £temporary3368
226:	

gmtime$40:	; Equal 43 £temporary3368 0
227:		cmp type1902, 0
228:		je gmtime$43
230:	

gmtime$41:	; BinaryAdd totalDays totalDays 366
231:		add dword [bp + 20], 366
233:	

gmtime$42:	; Goto 44
234:		jmp gmtime$44
236:	

gmtime$43:	; BinaryAdd totalDays totalDays 365
237:		add dword [bp + 20], 365
239:	

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
240:		mov a1903, [bp + 24]
241:		sub a1903, 1900
242:		mov [@7659$g_timeStruct + 10], a1903
244:	

gmtime$45:	; IntegralToIntegral £temporary3375 totalDays
245:		mov a1904, [bp + 20]
248:		cmp a1904, 0
249:		jge gmtime$46
250:		neg a1904
252:		neg a1904
254:	

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3375
255:		mov [@7659$g_timeStruct + 14], a1904
257:	

gmtime$47:	; Assign daysOfMonths[0] 31
258:		mov word [bp + 28], 31
260:	

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
262:	

gmtime$49:	; Parameter 30 year 6
263:		mov a1905, [bp + 24]
264:		mov [bp + 36], a1905
266:	

gmtime$50:	; Call 30 isLeapYear 0
267:		mov word [bp + 30], gmtime$51
268:		mov [bp + 32], bp
269:		add bp, 30
270:		jmp @7454$isLeapYear
272:	

gmtime$51:	; PostCall 30
274:	

gmtime$52:	; GetReturnValue £temporary3376
276:	

gmtime$53:	; Equal 56 £temporary3376 0
277:		cmp type1906, 0
278:		je gmtime$56
280:	

gmtime$54:	; Assign £temporary3381 29
281:		mov t1907, 29
283:	

gmtime$55:	; Goto 57
284:		jmp gmtime$57
286:	

gmtime$56:	; Assign £temporary3381 28
287:		mov t1908, 28
289:	

gmtime$57:	; Assign daysOfMonths[1] £temporary3381
290:		mov [bp + 30], t1908
292:	

gmtime$58:	; Assign daysOfMonths[2] 31
293:		mov word [bp + 32], 31
295:	

gmtime$59:	; Assign daysOfMonths[3] 30
296:		mov word [bp + 34], 30
298:	

gmtime$60:	; Assign daysOfMonths[4] 31
299:		mov word [bp + 36], 31
301:	

gmtime$61:	; Assign daysOfMonths[5] 30
302:		mov word [bp + 38], 30
304:	

gmtime$62:	; Assign daysOfMonths[6] 31
305:		mov word [bp + 40], 31
307:	

gmtime$63:	; Assign daysOfMonths[7] 31
308:		mov word [bp + 42], 31
310:	

gmtime$64:	; Assign daysOfMonths[8] 30
311:		mov word [bp + 44], 30
313:	

gmtime$65:	; Assign daysOfMonths[9] 31
314:		mov word [bp + 46], 31
316:	

gmtime$66:	; Assign daysOfMonths[10] 30
317:		mov word [bp + 48], 30
319:	

gmtime$67:	; Assign daysOfMonths[11] 31
320:		mov word [bp + 50], 31
322:	

gmtime$68:	; Assign month 0
323:		mov word [bp + 52], 0
325:	

gmtime$69:	; SignedMultiply £temporary3395 month 2
326:		mov a1909, [bp + 52]
328:		xor dx, dx
329:		imul word [@7802$int2$2#]
335:	

gmtime$70:	; BinaryAdd £temporary3396 daysOfMonths £temporary3395
336:		mov a1913, bp
337:		add a1913, 28
338:		add a1913, t1912
340:	

gmtime$71:	; Deref £temporary3394 -> £temporary3396 £temporary3396 0
342:	

gmtime$72:	; IntegralToIntegral £temporary3397 £temporary3394 -> £temporary3396
343:		mov t1914, [a1913]
345:		and t1914, 65535
347:		cmp t1914, 0
348:		jge gmtime$73
349:		neg t1914
351:		neg t1914
353:	

gmtime$73:	; SignedLessThan 82 totalDays £temporary3397
354:		cmp [bp + 20], t1914
355:		jl gmtime$82
357:	

gmtime$74:	; Assign £temporary3399 month
358:		mov t1915, [bp + 52]
360:	

gmtime$75:	; Increment month
361:		inc word [bp + 52]
363:	

gmtime$76:	; SignedMultiply £temporary3402 £temporary3399 2
365:		xor dx, dx
366:		imul word [@7812$int2$2#]
372:	

gmtime$77:	; BinaryAdd £temporary3403 daysOfMonths £temporary3402
373:		mov a1919, bp
374:		add a1919, 28
375:		add a1919, t1918
377:	

gmtime$78:	; Deref £temporary3401 -> £temporary3403 £temporary3403 0
379:	

gmtime$79:	; IntegralToIntegral £temporary3404 £temporary3401 -> £temporary3403
380:		mov t1920, [a1919]
382:		and t1920, 65535
384:		cmp t1920, 0
385:		jge gmtime$80
386:		neg t1920
388:		neg t1920
390:	

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3404
391:		sub [bp + 20], t1920
393:	

gmtime$81:	; Goto 69
394:		jmp gmtime$69
396:	

gmtime$82:	; Assign g_timeStruct$tm_mon month
397:		mov a1921, [bp + 52]
398:		mov [@7659$g_timeStruct + 8], a1921
400:	

gmtime$83:	; BinaryAdd £temporary3408 totalDays 1
401:		mov a1922, [bp + 20]
402:		add a1922, 1
404:	

gmtime$84:	; IntegralToIntegral £temporary3409 £temporary3408
407:		cmp a1922, 0
408:		jge gmtime$85
409:		neg a1922
411:		neg a1922
413:	

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3409
414:		mov [@7659$g_timeStruct + 6], a1922
416:	

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
417:		mov word [@7659$g_timeStruct + 16], -1
419:	

gmtime$87:	; SetReturnValue (@7659$g_timeStruct,0)
420:		mov a1923, @7659$g_timeStruct
422:	

gmtime$88:	; Return (@7659$g_timeStruct,0)
423:		mov t1924, [bp]
424:		mov di, [bp + 4]
425:		mov bp, [bp + 2]
426:		jmp t1924
428:	

gmtime$89:	; SetReturnValue 0
429:		mov a1925, 0
431:	

gmtime$90:	; Return 0
432:		mov t1926, [bp]
433:		mov di, [bp + 4]
434:		mov bp, [bp + 2]
435:		jmp t1926
437:	

gmtime$91:	; FunctionEnd gmtime
1:	

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

localtime$1:	; Parameter 8 timePtr 6
4:		mov a1927, [bp + 6]
5:		mov [bp + 14], a1927
7:	

localtime$2:	; Call 8 gmtime 0
8:		mov word [bp + 8], localtime$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp gmtime
13:	

localtime$3:	; PostCall 8
15:	

localtime$4:	; GetReturnValue £temporary3413
17:	

localtime$5:	; Assign tmPtr £temporary3413
18:		mov [bp + 8], type1928
20:	

localtime$6:	; Deref £temporary3414 -> timePtr timePtr 0
21:		mov a1929, [bp + 6]
23:	

localtime$7:	; Assign t £temporary3414 -> timePtr
24:		mov t1930, [a1929]
25:		mov [bp + 10], t1930
27:	

localtime$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
29:	

localtime$9:	; Call 14 localeconv 0
30:		mov word [bp + 14], localtime$10
31:		mov [bp + 16], bp
32:		add bp, 14
33:		jmp localeconv
35:	

localtime$10:	; PostCall 14
37:	

localtime$11:	; GetReturnValue £temporary3415
39:	

localtime$12:	; Assign localeConvPtr £temporary3415
40:		mov [bp + 14], type1931
42:	

localtime$13:	; Equal 25 localeConvPtr 0
43:		cmp word [bp + 14], 0
44:		je localtime$25
46:	

localtime$14:	; Deref £temporary3417 -> tmPtr tmPtr 16
47:		mov a1932, [bp + 8]
49:	

localtime$15:	; NotEqual 19 £temporary3417 -> tmPtr 1
50:		cmp word [a1932 + 16], 1
51:		jne localtime$19
53:	

localtime$16:	; Deref £temporary3419 -> localeConvPtr localeConvPtr 0
54:		mov a1933, [bp + 14]
56:	

localtime$17:	; Assign £temporary3424 £temporary3419 -> localeConvPtr
57:		mov t1934, [a1933]
59:	

localtime$18:	; Goto 21
60:		jmp localtime$21
62:	

localtime$19:	; Deref £temporary3420 -> localeConvPtr localeConvPtr 2
63:		mov a1935, [bp + 14]
65:	

localtime$20:	; Assign £temporary3424 £temporary3420 -> localeConvPtr
66:		mov t1936, [a1935 + 2]
68:	

localtime$21:	; Assign timeZone £temporary3424
69:		mov [bp + 16], t1936
71:	

localtime$22:	; IntegralToIntegral £temporary3425 timeZone
72:		mov a1937, [bp + 16]
74:		and a1937, 65535
76:		cmp a1937, 0
77:		jge localtime$23
78:		neg a1937
80:		neg a1937
82:	

localtime$23:	; SignedMultiply £temporary3426 £temporary3425 3600
84:		xor edx, edx
85:		imul dword [@7857$int4$3600#]
91:	

localtime$24:	; BinaryAdd t t £temporary3426
92:		add [bp + 10], t1940
94:	

localtime$25:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
96:	

localtime$26:	; address £temporary3428 t
97:		mov t1941, bp
98:		add t1941, 10
100:	

localtime$27:	; Parameter 16 £temporary3428 6
101:		mov [bp + 22], t1941
103:	

localtime$28:	; Call 16 gmtime 0
104:		mov word [bp + 16], localtime$29
105:		mov [bp + 18], bp
106:		add bp, 16
107:		jmp gmtime
109:	

localtime$29:	; PostCall 16
111:	

localtime$30:	; GetReturnValue £temporary3429
113:	

localtime$31:	; SetReturnValue £temporary3429
115:	

localtime$32:	; Return £temporary3429
116:		mov t1943, [bp]
117:		mov di, [bp + 4]
118:		mov bp, [bp + 2]
119:		jmp t1943
121:	

localtime$33:	; FunctionEnd localtime
1:	

difftime:	; BinarySubtract £temporary3433 time2 time1
2:		mov a1944, [bp + 10]
3:		sub a1944, [bp + 6]
5:	

difftime$1:	; IntegralToFloating £temporary3434 £temporary3433
6:		mov [container4bytes#], a1944
7:		fild dword [container4bytes#]
9:	

difftime$2:	; SetReturnValue £temporary3434
11:	

difftime$3:	; Return £temporary3434
12:		mov t1945, [bp]
13:		mov di, [bp + 4]
14:		mov bp, [bp + 2]
15:		jmp t1945
17:	

difftime$4:	; FunctionEnd difftime
1:	

asctime:	; Assign localeConvPtr 0
2:		mov word [bp + 8], 0
4:	

asctime$1:	; Equal 7 localeConvPtr 0
5:		cmp word [bp + 8], 0
6:		je asctime$7
8:	

asctime$2:	; Deref £temporary3436 -> localeConvPtr localeConvPtr 4
9:		mov a1946, [bp + 8]
11:	

asctime$3:	; Equal 7 £temporary3436 -> localeConvPtr 0
12:		cmp word [a1946 + 4], 0
13:		je asctime$7
15:	

asctime$4:	; Deref £temporary3439 -> localeConvPtr localeConvPtr 4
16:		mov a1947, [bp + 8]
18:	

asctime$5:	; Assign shortDayList £temporary3439 -> localeConvPtr
19:		mov t1948, [a1947 + 4]
20:		mov [bp + 10], t1948
22:	

asctime$6:	; Goto 8
23:		jmp asctime$8
25:	

asctime$7:	; Assign shortDayList g_shortDayList
26:		mov word [bp + 10], @7880$g_shortDayList
28:	

asctime$8:	; Equal 14 localeConvPtr 0
29:		cmp word [bp + 8], 0
30:		je asctime$14
32:	

asctime$9:	; Deref £temporary3441 -> localeConvPtr localeConvPtr 8
33:		mov a1949, [bp + 8]
35:	

asctime$10:	; Equal 14 £temporary3441 -> localeConvPtr 0
36:		cmp word [a1949 + 8], 0
37:		je asctime$14
39:	

asctime$11:	; Deref £temporary3444 -> localeConvPtr localeConvPtr 8
40:		mov a1950, [bp + 8]
42:	

asctime$12:	; Assign shortMonthList £temporary3444 -> localeConvPtr
43:		mov t1951, [a1950 + 8]
44:		mov [bp + 12], t1951
46:	

asctime$13:	; Goto 15
47:		jmp asctime$15
49:	

asctime$14:	; Assign shortMonthList g_shortMonthList
50:		mov word [bp + 12], @7901$g_shortMonthList
52:	

asctime$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
54:	

asctime$16:	; Parameter 14 g_timeString 6
55:		mov word [bp + 20], @7872$g_timeString
57:	

asctime$17:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
58:		mov word [bp + 22], @7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#
60:	

asctime$18:	; Deref £temporary3445 -> tp tp 12
61:		mov a1952, [bp + 6]
63:	

asctime$19:	; SignedMultiply £temporary3447 £temporary3445 -> tp 2
64:		mov t1953, [a1952 + 12]
66:		xor dx, dx
67:		imul word [@7946$int2$2#]
73:	

asctime$20:	; BinaryAdd £temporary3448 shortDayList £temporary3447
74:		mov a1957, [bp + 10]
75:		add a1957, t1956
77:	

asctime$21:	; Deref £temporary3446 -> £temporary3448 £temporary3448 0
79:	

asctime$22:	; Parameter 14 £temporary3446 -> £temporary3448 10
80:		mov t1958, [a1957]
81:		mov [bp + 24], t1958
83:	

asctime$23:	; Deref £temporary3449 -> tp tp 8
84:		mov a1959, [bp + 6]
86:	

asctime$24:	; SignedMultiply £temporary3451 £temporary3449 -> tp 2
87:		mov t1960, [a1959 + 8]
89:		xor dx, dx
90:		imul word [@7951$int2$2#]
96:	

asctime$25:	; BinaryAdd £temporary3452 shortMonthList £temporary3451
97:		mov a1964, [bp + 12]
98:		add a1964, t1963
100:	

asctime$26:	; Deref £temporary3450 -> £temporary3452 £temporary3452 0
102:	

asctime$27:	; Parameter 14 £temporary3450 -> £temporary3452 12
103:		mov t1965, [a1964]
104:		mov [bp + 26], t1965
106:	

asctime$28:	; Deref £temporary3453 -> tp tp 6
107:		mov a1966, [bp + 6]
109:	

asctime$29:	; Parameter 14 £temporary3453 -> tp 14
110:		mov t1967, [a1966 + 6]
111:		mov [bp + 28], t1967
113:	

asctime$30:	; Deref £temporary3454 -> tp tp 4
114:		mov a1968, [bp + 6]
116:	

asctime$31:	; Parameter 14 £temporary3454 -> tp 16
117:		mov t1969, [a1968 + 4]
118:		mov [bp + 30], t1969
120:	

asctime$32:	; Deref £temporary3455 -> tp tp 2
121:		mov a1970, [bp + 6]
123:	

asctime$33:	; Parameter 14 £temporary3455 -> tp 18
124:		mov t1971, [a1970 + 2]
125:		mov [bp + 32], t1971
127:	

asctime$34:	; Deref £temporary3456 -> tp tp 0
128:		mov a1972, [bp + 6]
130:	

asctime$35:	; Parameter 14 £temporary3456 -> tp 20
131:		mov t1973, [a1972]
132:		mov [bp + 34], t1973
134:	

asctime$36:	; Deref £temporary3457 -> tp tp 10
135:		mov a1974, [bp + 6]
137:	

asctime$37:	; BinaryAdd £temporary3458 £temporary3457 -> tp 1900
138:		mov t1975, [a1974 + 10]
139:		add t1975, 1900
141:	

asctime$38:	; Parameter 14 £temporary3458 22
142:		mov [bp + 36], t1975
144:	

asctime$39:	; Call 14 sprintf 0
145:		mov word [bp + 14], asctime$40
146:		mov [bp + 16], bp
147:		add bp, 14
148:		mov di, bp
149:		add di, 14
150:		jmp sprintf
152:	

asctime$40:	; PostCall 14
154:	

asctime$41:	; SetReturnValue g_timeString
155:		mov a1977, @7872$g_timeString
157:	

asctime$42:	; Return g_timeString
158:		mov t1978, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp t1978
163:	

asctime$43:	; FunctionEnd asctime
1:	

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
5:	

ctime$2:	; Parameter 8 time 6
6:		mov a1979, [bp + 6]
7:		mov [bp + 14], a1979
9:	

ctime$3:	; Call 8 localtime 0
10:		mov word [bp + 8], ctime$4
11:		mov [bp + 10], bp
12:		add bp, 8
13:		jmp localtime
15:	

ctime$4:	; PostCall 8
17:	

ctime$5:	; GetReturnValue £temporary3469
19:	

ctime$6:	; Parameter 8 £temporary3469 6
20:		mov [bp + 14], type1980
22:	

ctime$7:	; Call 8 asctime 0
23:		mov word [bp + 8], ctime$8
24:		mov [bp + 10], bp
25:		add bp, 8
26:		jmp asctime
28:	

ctime$8:	; PostCall 8
30:	

ctime$9:	; GetReturnValue £temporary3470
32:	

ctime$10:	; SetReturnValue £temporary3470
34:	

ctime$11:	; Return £temporary3470
35:		mov t1982, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t1982
40:	

ctime$12:	; FunctionEnd ctime
1:	

getWeekNumber:	; Deref £temporary3473 -> tp tp 10
2:		mov a1983, [bp + 6]
4:	

getWeekNumber$1:	; BinarySubtract £temporary3474 £temporary3473 -> tp 69
5:		mov t1984, [a1983 + 10]
6:		sub t1984, 69
8:	

getWeekNumber$2:	; SignedDivide £temporary3475 £temporary3474 4
10:		xor dx, dx
11:		idiv word [@7983$int2$4#]
17:	

getWeekNumber$3:	; IntegralToIntegral £temporary3476 £temporary3475
19:		and t1987, 65535
21:		cmp t1987, 0
22:		jge getWeekNumber$4
23:		neg t1987
25:		neg t1987
27:	

getWeekNumber$4:	; Assign leapDays £temporary3476
28:		mov [bp + 8], t1987
30:	

getWeekNumber$5:	; Deref £temporary3477 -> tp tp 10
31:		mov a1988, [bp + 6]
33:	

getWeekNumber$6:	; BinarySubtract £temporary3478 £temporary3477 -> tp 70
34:		mov t1989, [a1988 + 10]
35:		sub t1989, 70
37:	

getWeekNumber$7:	; SignedMultiply £temporary3479 £temporary3478 365
39:		xor dx, dx
40:		imul word [@7992$int2$365#]
46:	

getWeekNumber$8:	; IntegralToIntegral £temporary3480 £temporary3479
48:		and t1992, 65535
50:		cmp t1992, 0
51:		jge getWeekNumber$9
52:		neg t1992
54:		neg t1992
56:	

getWeekNumber$9:	; BinaryAdd £temporary3481 £temporary3480 leapDays
57:		add t1992, [bp + 8]
59:	

getWeekNumber$10:	; IntegralToIntegral £temporary3482 £temporary3481
62:		cmp t1992, 0
63:		jge getWeekNumber$11
64:		neg t1992
66:		neg t1992
68:	

getWeekNumber$11:	; Assign totalDays £temporary3482
69:		mov [bp + 12], t1992
71:	

getWeekNumber$12:	; SignedGreaterThanEqual 15 totalDays 3
72:		cmp word [bp + 12], 3
73:		jge getWeekNumber$15
75:	

getWeekNumber$13:	; BinaryAdd weekDayJanuaryFirst totalDays 4
76:		mov a1993, [bp + 12]
77:		add a1993, 4
78:		mov [bp + 14], a1993
80:	

getWeekNumber$14:	; Goto 17
81:		jmp getWeekNumber$17
83:	

getWeekNumber$15:	; BinarySubtract £temporary3485 totalDays 3
84:		mov a1994, [bp + 12]
85:		sub a1994, 3
87:	

getWeekNumber$16:	; SignedModulo weekDayJanuaryFirst £temporary3485 7
89:		xor dx, dx
90:		idiv word [@8009$int2$7#]
91:		mov [bp + 14], dx
93:	

getWeekNumber$17:	; BinarySubtract firstWeekSize 7 weekDayJanuaryFirst
94:		mov a1996, 7
95:		sub a1996, [bp + 14]
96:		mov [bp + 16], a1996
98:	

getWeekNumber$18:	; Deref £temporary3488 -> tp tp 14
99:		mov a1997, [bp + 6]
101:	

getWeekNumber$19:	; SignedGreaterThanEqual 22 £temporary3488 -> tp firstWeekSize
102:		mov a1998, [bp + 16]
103:		cmp [a1997 + 14], a1998
104:		jge getWeekNumber$22
106:	

getWeekNumber$20:	; SetReturnValue 0
107:		mov a1999, 0
109:	

getWeekNumber$21:	; Return 0
110:		mov t2000, [bp]
111:		mov di, [bp + 4]
112:		mov bp, [bp + 2]
113:		jmp t2000
115:	

getWeekNumber$22:	; Deref £temporary3490 -> tp tp 14
116:		mov a2001, [bp + 6]
118:	

getWeekNumber$23:	; BinarySubtract £temporary3491 £temporary3490 -> tp firstWeekSize
119:		mov t2002, [a2001 + 14]
120:		sub t2002, [bp + 16]
122:	

getWeekNumber$24:	; SignedDivide £temporary3492 £temporary3491 7
124:		xor dx, dx
125:		idiv word [@8022$int2$7#]
131:	

getWeekNumber$25:	; BinaryAdd £temporary3493 £temporary3492 1
132:		add t2005, 1
134:	

getWeekNumber$26:	; SetReturnValue £temporary3493
135:		mov t2006, t2005
137:	

getWeekNumber$27:	; Return £temporary3493
138:		mov t2007, [bp]
139:		mov di, [bp + 4]
140:		mov bp, [bp + 2]
141:		jmp t2007
143:	

getWeekNumber$28:	; FunctionEnd getWeekNumber
1:	

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strftime$1:	; Call 14 localeconv 0
4:		mov word [bp + 14], strftime$2
5:		mov [bp + 16], bp
6:		add bp, 14
7:		jmp localeconv
9:	

strftime$2:	; PostCall 14
11:	

strftime$3:	; GetReturnValue £temporary3494
13:	

strftime$4:	; Assign localeConvPtr £temporary3494
14:		mov [bp + 14], type2008
16:	

strftime$5:	; Equal 11 localeConvPtr 0
17:		cmp word [bp + 14], 0
18:		je strftime$11
20:	

strftime$6:	; Deref £temporary3496 -> localeConvPtr localeConvPtr 4
21:		mov a2009, [bp + 14]
23:	

strftime$7:	; Equal 11 £temporary3496 -> localeConvPtr 0
24:		cmp word [a2009 + 4], 0
25:		je strftime$11
27:	

strftime$8:	; Deref £temporary3499 -> localeConvPtr localeConvPtr 4
28:		mov a2010, [bp + 14]
30:	

strftime$9:	; Assign shortDayList £temporary3499 -> localeConvPtr
31:		mov t2011, [a2010 + 4]
32:		mov [bp + 16], t2011
34:	

strftime$10:	; Goto 12
35:		jmp strftime$12
37:	

strftime$11:	; Assign shortDayList g_shortDayList
38:		mov word [bp + 16], @7880$g_shortDayList
40:	

strftime$12:	; Equal 18 localeConvPtr 0
41:		cmp word [bp + 14], 0
42:		je strftime$18
44:	

strftime$13:	; Deref £temporary3501 -> localeConvPtr localeConvPtr 6
45:		mov a2012, [bp + 14]
47:	

strftime$14:	; Equal 18 £temporary3501 -> localeConvPtr 0
48:		cmp word [a2012 + 6], 0
49:		je strftime$18
51:	

strftime$15:	; Deref £temporary3504 -> localeConvPtr localeConvPtr 6
52:		mov a2013, [bp + 14]
54:	

strftime$16:	; Assign longDayList £temporary3504 -> localeConvPtr
55:		mov t2014, [a2013 + 6]
56:		mov [bp + 20], t2014
58:	

strftime$17:	; Goto 19
59:		jmp strftime$19
61:	

strftime$18:	; Assign longDayList g_longDayList
62:		mov word [bp + 20], @7888$g_longDayList
64:	

strftime$19:	; Equal 25 localeConvPtr 0
65:		cmp word [bp + 14], 0
66:		je strftime$25
68:	

strftime$20:	; Deref £temporary3506 -> localeConvPtr localeConvPtr 8
69:		mov a2015, [bp + 14]
71:	

strftime$21:	; Equal 25 £temporary3506 -> localeConvPtr 0
72:		cmp word [a2015 + 8], 0
73:		je strftime$25
75:	

strftime$22:	; Deref £temporary3509 -> localeConvPtr localeConvPtr 8
76:		mov a2016, [bp + 14]
78:	

strftime$23:	; Assign shortMonthList £temporary3509 -> localeConvPtr
79:		mov t2017, [a2016 + 8]
80:		mov [bp + 18], t2017
82:	

strftime$24:	; Goto 26
83:		jmp strftime$26
85:	

strftime$25:	; Assign shortMonthList g_shortMonthList
86:		mov word [bp + 18], @7901$g_shortMonthList
88:	

strftime$26:	; Equal 32 localeConvPtr 0
89:		cmp word [bp + 14], 0
90:		je strftime$32
92:	

strftime$27:	; Deref £temporary3511 -> localeConvPtr localeConvPtr 10
93:		mov a2018, [bp + 14]
95:	

strftime$28:	; Equal 32 £temporary3511 -> localeConvPtr 0
96:		cmp word [a2018 + 10], 0
97:		je strftime$32
99:	

strftime$29:	; Deref £temporary3514 -> localeConvPtr localeConvPtr 10
100:		mov a2019, [bp + 14]
102:	

strftime$30:	; Assign longMonthList £temporary3514 -> localeConvPtr
103:		mov t2020, [a2019 + 10]
104:		mov [bp + 22], t2020
106:	

strftime$31:	; Goto 33
107:		jmp strftime$33
109:	

strftime$32:	; Assign longMonthList g_longMonthList
110:		mov word [bp + 22], @7914$g_longMonthList
112:	

strftime$33:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
114:	

strftime$34:	; Parameter 24 result 6
115:		mov a2021, [bp + 6]
116:		mov [bp + 30], a2021
118:	

strftime$35:	; Parameter 24 string_# 8
119:		mov word [bp + 32], @8078$string_#
121:	

strftime$36:	; Call 24 strcpy 0
122:		mov word [bp + 24], strftime$37
123:		mov [bp + 26], bp
124:		add bp, 24
125:		jmp strcpy
127:	

strftime$37:	; PostCall 24
129:	

strftime$38:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
131:	

strftime$39:	; Parameter 26 tp 6
132:		mov a2023, [bp + 12]
133:		mov [bp + 32], a2023
135:	

strftime$40:	; Call 26 getWeekNumber 0
136:		mov word [bp + 26], strftime$41
137:		mov [bp + 28], bp
138:		add bp, 26
139:		jmp getWeekNumber
141:	

strftime$41:	; PostCall 26
143:	

strftime$42:	; GetReturnValue £temporary3516
145:	

strftime$43:	; Assign weekNumberStartSunday £temporary3516
146:		mov [bp + 26], type2024
148:	

strftime$44:	; Assign weekNumberStartMonday weekNumberStartSunday
149:		mov a2025, [bp + 26]
150:		mov [bp + 28], a2025
152:	

strftime$45:	; Deref £temporary3517 -> tp tp 6
153:		mov a2026, [bp + 12]
155:	

strftime$46:	; NotEqual 48 £temporary3517 -> tp 0
156:		cmp word [a2026 + 6], 0
157:		jne strftime$48
159:	

strftime$47:	; Decrement weekNumberStartMonday
160:		dec word [bp + 28]
162:	

strftime$48:	; Assign index 0
163:		mov word [bp + 24], 0
165:	

strftime$49:	; BinaryAdd £temporary3521 format index
166:		mov a2027, [bp + 10]
167:		add a2027, [bp + 24]
169:	

strftime$50:	; Deref £temporary3520 -> £temporary3521 £temporary3521 0
171:	

strftime$51:	; Equal 322 £temporary3520 -> £temporary3521 0
172:		cmp byte [a2027], 0
173:		je strftime$322
175:	

strftime$52:	; BinaryAdd £temporary3525 format index
176:		mov a2028, [bp + 10]
177:		add a2028, [bp + 24]
179:	

strftime$53:	; Deref £temporary3524 -> £temporary3525 £temporary3525 0
181:	

strftime$54:	; NotEqual 297 £temporary3524 -> £temporary3525 37
182:		cmp byte [a2028], 37
183:		jne strftime$297
185:	

strftime$55:	; Increment index
186:		inc word [bp + 24]
188:	

strftime$56:	; BinaryAdd £temporary3529 format index
189:		mov a2029, [bp + 10]
190:		add a2029, [bp + 24]
192:	

strftime$57:	; Deref £temporary3528 -> £temporary3529 £temporary3529 0
194:	

strftime$58:	; Case 82 £temporary3528 -> £temporary3529 97
195:		mov t2030, [a2029]
196:		cmp t2030, 97
197:		je strftime$82
199:	

strftime$59:	; Case 92 £temporary3528 -> £temporary3529 65
200:		cmp t2030, 65
201:		je strftime$92
203:	

strftime$60:	; Case 102 £temporary3528 -> £temporary3529 98
204:		cmp t2030, 98
205:		je strftime$102
207:	

strftime$61:	; Case 112 £temporary3528 -> £temporary3529 66
208:		cmp t2030, 66
209:		je strftime$112
211:	

strftime$62:	; Case 122 £temporary3528 -> £temporary3529 99
212:		cmp t2030, 99
213:		je strftime$122
215:	

strftime$63:	; Case 142 £temporary3528 -> £temporary3529 100
216:		cmp t2030, 100
217:		je strftime$142
219:	

strftime$64:	; Case 150 £temporary3528 -> £temporary3529 72
220:		cmp t2030, 72
221:		je strftime$150
223:	

strftime$65:	; Case 158 £temporary3528 -> £temporary3529 73
224:		cmp t2030, 73
225:		je strftime$158
227:	

strftime$66:	; Case 167 £temporary3528 -> £temporary3529 106
228:		cmp t2030, 106
229:		je strftime$167
231:	

strftime$67:	; Case 175 £temporary3528 -> £temporary3529 109
232:		cmp t2030, 109
233:		je strftime$175
235:	

strftime$68:	; Case 184 £temporary3528 -> £temporary3529 77
236:		cmp t2030, 77
237:		je strftime$184
239:	

strftime$69:	; Case 192 £temporary3528 -> £temporary3529 112
240:		cmp t2030, 112
241:		je strftime$192
243:	

strftime$70:	; Case 203 £temporary3528 -> £temporary3529 83
244:		cmp t2030, 83
245:		je strftime$203
247:	

strftime$71:	; Case 211 £temporary3528 -> £temporary3529 85
248:		cmp t2030, 85
249:		je strftime$211
251:	

strftime$72:	; Case 218 £temporary3528 -> £temporary3529 119
252:		cmp t2030, 119
253:		je strftime$218
255:	

strftime$73:	; Case 226 £temporary3528 -> £temporary3529 87
256:		cmp t2030, 87
257:		je strftime$226
259:	

strftime$74:	; Case 233 £temporary3528 -> £temporary3529 120
260:		cmp t2030, 120
261:		je strftime$233
263:	

strftime$75:	; Case 245 £temporary3528 -> £temporary3529 88
264:		cmp t2030, 88
265:		je strftime$245
267:	

strftime$76:	; Case 257 £temporary3528 -> £temporary3529 121
268:		cmp t2030, 121
269:		je strftime$257
271:	

strftime$77:	; Case 266 £temporary3528 -> £temporary3529 89
272:		cmp t2030, 89
273:		je strftime$266
275:	

strftime$78:	; Case 275 £temporary3528 -> £temporary3529 90
276:		cmp t2030, 90
277:		je strftime$275
279:	

strftime$79:	; Case 286 £temporary3528 -> £temporary3529 37
280:		cmp t2030, 37
281:		je strftime$286
283:	

strftime$80:	; CaseEnd £temporary3528 -> £temporary3529
285:	

strftime$81:	; Goto 291
286:		jmp strftime$291
288:	

strftime$82:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
290:	

strftime$83:	; Parameter 50 add 6
291:		mov [bp + 56], bp
292:		add word [bp + 56], 30
294:	

strftime$84:	; Deref £temporary3530 -> tp tp 12
295:		mov a2031, [bp + 12]
297:	

strftime$85:	; SignedMultiply £temporary3532 £temporary3530 -> tp 2
298:		mov t2032, [a2031 + 12]
300:		xor dx, dx
301:		imul word [@8118$int2$2#]
307:	

strftime$86:	; BinaryAdd £temporary3533 shortDayList £temporary3532
308:		mov a2036, [bp + 16]
309:		add a2036, t2035
311:	

strftime$87:	; Deref £temporary3531 -> £temporary3533 £temporary3533 0
313:	

strftime$88:	; Parameter 50 £temporary3531 -> £temporary3533 8
314:		mov t2037, [a2036]
315:		mov [bp + 58], t2037
317:	

strftime$89:	; Call 50 strcpy 0
318:		mov word [bp + 50], strftime$90
319:		mov [bp + 52], bp
320:		add bp, 50
321:		jmp strcpy
323:	

strftime$90:	; PostCall 50
325:	

strftime$91:	; Goto 303
326:		jmp strftime$303
328:	

strftime$92:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
330:	

strftime$93:	; Parameter 50 add 6
331:		mov [bp + 56], bp
332:		add word [bp + 56], 30
334:	

strftime$94:	; Deref £temporary3535 -> tp tp 12
335:		mov a2039, [bp + 12]
337:	

strftime$95:	; SignedMultiply £temporary3537 £temporary3535 -> tp 2
338:		mov t2040, [a2039 + 12]
340:		xor dx, dx
341:		imul word [@8126$int2$2#]
347:	

strftime$96:	; BinaryAdd £temporary3538 longDayList £temporary3537
348:		mov a2044, [bp + 20]
349:		add a2044, t2043
351:	

strftime$97:	; Deref £temporary3536 -> £temporary3538 £temporary3538 0
353:	

strftime$98:	; Parameter 50 £temporary3536 -> £temporary3538 8
354:		mov t2045, [a2044]
355:		mov [bp + 58], t2045
357:	

strftime$99:	; Call 50 strcpy 0
358:		mov word [bp + 50], strftime$100
359:		mov [bp + 52], bp
360:		add bp, 50
361:		jmp strcpy
363:	

strftime$100:	; PostCall 50
365:	

strftime$101:	; Goto 303
366:		jmp strftime$303
368:	

strftime$102:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
370:	

strftime$103:	; Parameter 50 add 6
371:		mov [bp + 56], bp
372:		add word [bp + 56], 30
374:	

strftime$104:	; Deref £temporary3540 -> tp tp 8
375:		mov a2047, [bp + 12]
377:	

strftime$105:	; SignedMultiply £temporary3542 £temporary3540 -> tp 2
378:		mov t2048, [a2047 + 8]
380:		xor dx, dx
381:		imul word [@8134$int2$2#]
387:	

strftime$106:	; BinaryAdd £temporary3543 shortMonthList £temporary3542
388:		mov a2052, [bp + 18]
389:		add a2052, t2051
391:	

strftime$107:	; Deref £temporary3541 -> £temporary3543 £temporary3543 0
393:	

strftime$108:	; Parameter 50 £temporary3541 -> £temporary3543 8
394:		mov t2053, [a2052]
395:		mov [bp + 58], t2053
397:	

strftime$109:	; Call 50 strcpy 0
398:		mov word [bp + 50], strftime$110
399:		mov [bp + 52], bp
400:		add bp, 50
401:		jmp strcpy
403:	

strftime$110:	; PostCall 50
405:	

strftime$111:	; Goto 303
406:		jmp strftime$303
408:	

strftime$112:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
410:	

strftime$113:	; Parameter 50 add 6
411:		mov [bp + 56], bp
412:		add word [bp + 56], 30
414:	

strftime$114:	; Deref £temporary3545 -> tp tp 8
415:		mov a2055, [bp + 12]
417:	

strftime$115:	; SignedMultiply £temporary3547 £temporary3545 -> tp 2
418:		mov t2056, [a2055 + 8]
420:		xor dx, dx
421:		imul word [@8142$int2$2#]
427:	

strftime$116:	; BinaryAdd £temporary3548 longMonthList £temporary3547
428:		mov a2060, [bp + 22]
429:		add a2060, t2059
431:	

strftime$117:	; Deref £temporary3546 -> £temporary3548 £temporary3548 0
433:	

strftime$118:	; Parameter 50 £temporary3546 -> £temporary3548 8
434:		mov t2061, [a2060]
435:		mov [bp + 58], t2061
437:	

strftime$119:	; Call 50 strcpy 0
438:		mov word [bp + 50], strftime$120
439:		mov [bp + 52], bp
440:		add bp, 50
441:		jmp strcpy
443:	

strftime$120:	; PostCall 50
445:	

strftime$121:	; Goto 303
446:		jmp strftime$303
448:	

strftime$122:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
450:	

strftime$123:	; Parameter 50 add 6
451:		mov [bp + 56], bp
452:		add word [bp + 56], 30
454:	

strftime$124:	; Parameter 50 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
455:		mov word [bp + 58], @8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#
457:	

strftime$125:	; Deref £temporary3550 -> tp tp 10
458:		mov a2063, [bp + 12]
460:	

strftime$126:	; BinaryAdd £temporary3551 £temporary3550 -> tp 1900
461:		mov t2064, [a2063 + 10]
462:		add t2064, 1900
464:	

strftime$127:	; Parameter 50 £temporary3551 10
465:		mov [bp + 60], t2064
467:	

strftime$128:	; Deref £temporary3552 -> tp tp 8
468:		mov a2065, [bp + 12]
470:	

strftime$129:	; BinaryAdd £temporary3553 £temporary3552 -> tp 1
471:		mov t2066, [a2065 + 8]
472:		add t2066, 1
474:	

strftime$130:	; Parameter 50 £temporary3553 12
475:		mov [bp + 62], t2066
477:	

strftime$131:	; Deref £temporary3554 -> tp tp 6
478:		mov a2067, [bp + 12]
480:	

strftime$132:	; Parameter 50 £temporary3554 -> tp 14
481:		mov t2068, [a2067 + 6]
482:		mov [bp + 64], t2068
484:	

strftime$133:	; Deref £temporary3555 -> tp tp 4
485:		mov a2069, [bp + 12]
487:	

strftime$134:	; Parameter 50 £temporary3555 -> tp 16
488:		mov t2070, [a2069 + 4]
489:		mov [bp + 66], t2070
491:	

strftime$135:	; Deref £temporary3556 -> tp tp 2
492:		mov a2071, [bp + 12]
494:	

strftime$136:	; Parameter 50 £temporary3556 -> tp 18
495:		mov t2072, [a2071 + 2]
496:		mov [bp + 68], t2072
498:	

strftime$137:	; Deref £temporary3557 -> tp tp 0
499:		mov a2073, [bp + 12]
501:	

strftime$138:	; Parameter 50 £temporary3557 -> tp 20
502:		mov t2074, [a2073]
503:		mov [bp + 70], t2074
505:	

strftime$139:	; Call 50 sprintf 0
506:		mov word [bp + 50], strftime$140
507:		mov [bp + 52], bp
508:		add bp, 50
509:		mov di, bp
510:		add di, 12
511:		jmp sprintf
513:	

strftime$140:	; PostCall 50
515:	

strftime$141:	; Goto 303
516:		jmp strftime$303
518:	

strftime$142:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
520:	

strftime$143:	; Parameter 50 add 6
521:		mov [bp + 56], bp
522:		add word [bp + 56], 30
524:	

strftime$144:	; Parameter 50 string_2502i# 8
525:		mov word [bp + 58], @8164$string_2502i#
527:	

strftime$145:	; Deref £temporary3559 -> tp tp 6
528:		mov a2076, [bp + 12]
530:	

strftime$146:	; Parameter 50 £temporary3559 -> tp 10
531:		mov t2077, [a2076 + 6]
532:		mov [bp + 60], t2077
534:	

strftime$147:	; Call 50 sprintf 0
535:		mov word [bp + 50], strftime$148
536:		mov [bp + 52], bp
537:		add bp, 50
538:		mov di, bp
539:		add di, 2
540:		jmp sprintf
542:	

strftime$148:	; PostCall 50
544:	

strftime$149:	; Goto 303
545:		jmp strftime$303
547:	

strftime$150:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
549:	

strftime$151:	; Parameter 50 add 6
550:		mov [bp + 56], bp
551:		add word [bp + 56], 30
553:	

strftime$152:	; Parameter 50 string_2502i# 8
554:		mov word [bp + 58], @8169$string_2502i#
556:	

strftime$153:	; Deref £temporary3561 -> tp tp 4
557:		mov a2079, [bp + 12]
559:	

strftime$154:	; Parameter 50 £temporary3561 -> tp 10
560:		mov t2080, [a2079 + 4]
561:		mov [bp + 60], t2080
563:	

strftime$155:	; Call 50 sprintf 0
564:		mov word [bp + 50], strftime$156
565:		mov [bp + 52], bp
566:		add bp, 50
567:		mov di, bp
568:		add di, 2
569:		jmp sprintf
571:	

strftime$156:	; PostCall 50
573:	

strftime$157:	; Goto 303
574:		jmp strftime$303
576:	

strftime$158:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
578:	

strftime$159:	; Parameter 50 add 6
579:		mov [bp + 56], bp
580:		add word [bp + 56], 30
582:	

strftime$160:	; Parameter 50 string_2502i# 8
583:		mov word [bp + 58], @8174$string_2502i#
585:	

strftime$161:	; Deref £temporary3563 -> tp tp 4
586:		mov a2082, [bp + 12]
588:	

strftime$162:	; SignedModulo £temporary3564 £temporary3563 -> tp 12
589:		mov t2083, [a2082 + 4]
591:		xor dx, dx
592:		idiv word [@8177$int2$12#]
598:	

strftime$163:	; Parameter 50 £temporary3564 10
599:		mov [bp + 60], t2085
601:	

strftime$164:	; Call 50 sprintf 0
602:		mov word [bp + 50], strftime$165
603:		mov [bp + 52], bp
604:		add bp, 50
605:		mov di, bp
606:		add di, 2
607:		jmp sprintf
609:	

strftime$165:	; PostCall 50
611:	

strftime$166:	; Goto 303
612:		jmp strftime$303
614:	

strftime$167:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
616:	

strftime$168:	; Parameter 50 add 6
617:		mov [bp + 56], bp
618:		add word [bp + 56], 30
620:	

strftime$169:	; Parameter 50 string_2503i# 8
621:		mov word [bp + 58], @8182$string_2503i#
623:	

strftime$170:	; Deref £temporary3566 -> tp tp 14
624:		mov a2087, [bp + 12]
626:	

strftime$171:	; Parameter 50 £temporary3566 -> tp 10
627:		mov t2088, [a2087 + 14]
628:		mov [bp + 60], t2088
630:	

strftime$172:	; Call 50 sprintf 0
631:		mov word [bp + 50], strftime$173
632:		mov [bp + 52], bp
633:		add bp, 50
634:		mov di, bp
635:		add di, 2
636:		jmp sprintf
638:	

strftime$173:	; PostCall 50
640:	

strftime$174:	; Goto 303
641:		jmp strftime$303
643:	

strftime$175:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
645:	

strftime$176:	; Parameter 50 add 6
646:		mov [bp + 56], bp
647:		add word [bp + 56], 30
649:	

strftime$177:	; Parameter 50 string_2502i# 8
650:		mov word [bp + 58], @8187$string_2502i#
652:	

strftime$178:	; Deref £temporary3568 -> tp tp 8
653:		mov a2090, [bp + 12]
655:	

strftime$179:	; BinaryAdd £temporary3569 £temporary3568 -> tp 1
656:		mov t2091, [a2090 + 8]
657:		add t2091, 1
659:	

strftime$180:	; Parameter 50 £temporary3569 10
660:		mov [bp + 60], t2091
662:	

strftime$181:	; Call 50 sprintf 0
663:		mov word [bp + 50], strftime$182
664:		mov [bp + 52], bp
665:		add bp, 50
666:		mov di, bp
667:		add di, 2
668:		jmp sprintf
670:	

strftime$182:	; PostCall 50
672:	

strftime$183:	; Goto 303
673:		jmp strftime$303
675:	

strftime$184:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
677:	

strftime$185:	; Parameter 50 add 6
678:		mov [bp + 56], bp
679:		add word [bp + 56], 30
681:	

strftime$186:	; Parameter 50 string_2502i# 8
682:		mov word [bp + 58], @8195$string_2502i#
684:	

strftime$187:	; Deref £temporary3571 -> tp tp 2
685:		mov a2093, [bp + 12]
687:	

strftime$188:	; Parameter 50 £temporary3571 -> tp 10
688:		mov t2094, [a2093 + 2]
689:		mov [bp + 60], t2094
691:	

strftime$189:	; Call 50 sprintf 0
692:		mov word [bp + 50], strftime$190
693:		mov [bp + 52], bp
694:		add bp, 50
695:		mov di, bp
696:		add di, 2
697:		jmp sprintf
699:	

strftime$190:	; PostCall 50
701:	

strftime$191:	; Goto 303
702:		jmp strftime$303
704:	

strftime$192:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
706:	

strftime$193:	; Parameter 50 add 6
707:		mov [bp + 56], bp
708:		add word [bp + 56], 30
710:	

strftime$194:	; Parameter 50 string_25s# 8
711:		mov word [bp + 58], @8200$string_25s#
713:	

strftime$195:	; Equal 198 index 0
714:		cmp word [bp + 24], 0
715:		je strftime$198
717:	

strftime$196:	; Assign £temporary3577 string_AM#
718:		mov t2096, @8201$string_AM#
720:	

strftime$197:	; Goto 199
721:		jmp strftime$199
723:	

strftime$198:	; Assign £temporary3577 string_PM#
724:		mov t2097, @8202$string_PM#
726:	

strftime$199:	; Parameter 50 £temporary3577 10
727:		mov [bp + 60], t2097
729:	

strftime$200:	; Call 50 sprintf 0
730:		mov word [bp + 50], strftime$201
731:		mov [bp + 52], bp
732:		add bp, 50
733:		mov di, bp
734:		add di, 2
735:		jmp sprintf
737:	

strftime$201:	; PostCall 50
739:	

strftime$202:	; Goto 303
740:		jmp strftime$303
742:	

strftime$203:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
744:	

strftime$204:	; Parameter 50 add 6
745:		mov [bp + 56], bp
746:		add word [bp + 56], 30
748:	

strftime$205:	; Parameter 50 string_2502i# 8
749:		mov word [bp + 58], @8214$string_2502i#
751:	

strftime$206:	; Deref £temporary3579 -> tp tp 0
752:		mov a2099, [bp + 12]
754:	

strftime$207:	; Parameter 50 £temporary3579 -> tp 10
755:		mov t2100, [a2099]
756:		mov [bp + 60], t2100
758:	

strftime$208:	; Call 50 sprintf 0
759:		mov word [bp + 50], strftime$209
760:		mov [bp + 52], bp
761:		add bp, 50
762:		mov di, bp
763:		add di, 2
764:		jmp sprintf
766:	

strftime$209:	; PostCall 50
768:	

strftime$210:	; Goto 303
769:		jmp strftime$303
771:	

strftime$211:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
773:	

strftime$212:	; Parameter 50 add 6
774:		mov [bp + 56], bp
775:		add word [bp + 56], 30
777:	

strftime$213:	; Parameter 50 string_2502i# 8
778:		mov word [bp + 58], @8219$string_2502i#
780:	

strftime$214:	; Parameter 50 weekNumberStartSunday 10
781:		mov a2102, [bp + 26]
782:		mov [bp + 60], a2102
784:	

strftime$215:	; Call 50 sprintf 0
785:		mov word [bp + 50], strftime$216
786:		mov [bp + 52], bp
787:		add bp, 50
788:		mov di, bp
789:		add di, 2
790:		jmp sprintf
792:	

strftime$216:	; PostCall 50
794:	

strftime$217:	; Goto 303
795:		jmp strftime$303
797:	

strftime$218:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
799:	

strftime$219:	; Parameter 50 add 6
800:		mov [bp + 56], bp
801:		add word [bp + 56], 30
803:	

strftime$220:	; Parameter 50 string_2502i# 8
804:		mov word [bp + 58], @8223$string_2502i#
806:	

strftime$221:	; Deref £temporary3582 -> tp tp 12
807:		mov a2104, [bp + 12]
809:	

strftime$222:	; Parameter 50 £temporary3582 -> tp 10
810:		mov t2105, [a2104 + 12]
811:		mov [bp + 60], t2105
813:	

strftime$223:	; Call 50 sprintf 0
814:		mov word [bp + 50], strftime$224
815:		mov [bp + 52], bp
816:		add bp, 50
817:		mov di, bp
818:		add di, 2
819:		jmp sprintf
821:	

strftime$224:	; PostCall 50
823:	

strftime$225:	; Goto 303
824:		jmp strftime$303
826:	

strftime$226:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
828:	

strftime$227:	; Parameter 50 add 6
829:		mov [bp + 56], bp
830:		add word [bp + 56], 30
832:	

strftime$228:	; Parameter 50 string_2502i# 8
833:		mov word [bp + 58], @8228$string_2502i#
835:	

strftime$229:	; Parameter 50 weekNumberStartMonday 10
836:		mov a2107, [bp + 28]
837:		mov [bp + 60], a2107
839:	

strftime$230:	; Call 50 sprintf 0
840:		mov word [bp + 50], strftime$231
841:		mov [bp + 52], bp
842:		add bp, 50
843:		mov di, bp
844:		add di, 2
845:		jmp sprintf
847:	

strftime$231:	; PostCall 50
849:	

strftime$232:	; Goto 303
850:		jmp strftime$303
852:	

strftime$233:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
854:	

strftime$234:	; Parameter 50 add 6
855:		mov [bp + 56], bp
856:		add word [bp + 56], 30
858:	

strftime$235:	; Parameter 50 string_2502i3A2502i3A2502i# 8
859:		mov word [bp + 58], @8232$string_2502i3A2502i3A2502i#
861:	

strftime$236:	; Deref £temporary3585 -> tp tp 4
862:		mov a2109, [bp + 12]
864:	

strftime$237:	; Parameter 50 £temporary3585 -> tp 10
865:		mov t2110, [a2109 + 4]
866:		mov [bp + 60], t2110
868:	

strftime$238:	; Deref £temporary3586 -> tp tp 2
869:		mov a2111, [bp + 12]
871:	

strftime$239:	; Parameter 50 £temporary3586 -> tp 12
872:		mov t2112, [a2111 + 2]
873:		mov [bp + 62], t2112
875:	

strftime$240:	; Deref £temporary3587 -> tp tp 0
876:		mov a2113, [bp + 12]
878:	

strftime$241:	; Parameter 50 £temporary3587 -> tp 14
879:		mov t2114, [a2113]
880:		mov [bp + 64], t2114
882:	

strftime$242:	; Call 50 sprintf 0
883:		mov word [bp + 50], strftime$243
884:		mov [bp + 52], bp
885:		add bp, 50
886:		mov di, bp
887:		add di, 6
888:		jmp sprintf
890:	

strftime$243:	; PostCall 50
892:	

strftime$244:	; Goto 303
893:		jmp strftime$303
895:	

strftime$245:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
897:	

strftime$246:	; Parameter 50 add 6
898:		mov [bp + 56], bp
899:		add word [bp + 56], 30
901:	

strftime$247:	; Parameter 50 string_2502i3A2502i3A2502i# 8
902:		mov word [bp + 58], @8239$string_2502i3A2502i3A2502i#
904:	

strftime$248:	; Deref £temporary3589 -> tp tp 4
905:		mov a2116, [bp + 12]
907:	

strftime$249:	; Parameter 50 £temporary3589 -> tp 10
908:		mov t2117, [a2116 + 4]
909:		mov [bp + 60], t2117
911:	

strftime$250:	; Deref £temporary3590 -> tp tp 2
912:		mov a2118, [bp + 12]
914:	

strftime$251:	; Parameter 50 £temporary3590 -> tp 12
915:		mov t2119, [a2118 + 2]
916:		mov [bp + 62], t2119
918:	

strftime$252:	; Deref £temporary3591 -> tp tp 0
919:		mov a2120, [bp + 12]
921:	

strftime$253:	; Parameter 50 £temporary3591 -> tp 14
922:		mov t2121, [a2120]
923:		mov [bp + 64], t2121
925:	

strftime$254:	; Call 50 sprintf 0
926:		mov word [bp + 50], strftime$255
927:		mov [bp + 52], bp
928:		add bp, 50
929:		mov di, bp
930:		add di, 6
931:		jmp sprintf
933:	

strftime$255:	; PostCall 50
935:	

strftime$256:	; Goto 303
936:		jmp strftime$303
938:	

strftime$257:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
940:	

strftime$258:	; Parameter 50 add 6
941:		mov [bp + 56], bp
942:		add word [bp + 56], 30
944:	

strftime$259:	; Parameter 50 string_2502i# 8
945:		mov word [bp + 58], @8246$string_2502i#
947:	

strftime$260:	; Deref £temporary3593 -> tp tp 10
948:		mov a2123, [bp + 12]
950:	

strftime$261:	; SignedModulo £temporary3594 £temporary3593 -> tp 100
951:		mov t2124, [a2123 + 10]
953:		xor dx, dx
954:		idiv word [@8249$int2$100#]
960:	

strftime$262:	; Parameter 50 £temporary3594 10
961:		mov [bp + 60], t2126
963:	

strftime$263:	; Call 50 sprintf 0
964:		mov word [bp + 50], strftime$264
965:		mov [bp + 52], bp
966:		add bp, 50
967:		mov di, bp
968:		add di, 2
969:		jmp sprintf
971:	

strftime$264:	; PostCall 50
973:	

strftime$265:	; Goto 303
974:		jmp strftime$303
976:	

strftime$266:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
978:	

strftime$267:	; Parameter 50 add 6
979:		mov [bp + 56], bp
980:		add word [bp + 56], 30
982:	

strftime$268:	; Parameter 50 string_2502i# 8
983:		mov word [bp + 58], @8254$string_2502i#
985:	

strftime$269:	; Deref £temporary3596 -> tp tp 10
986:		mov a2128, [bp + 12]
988:	

strftime$270:	; BinaryAdd £temporary3597 £temporary3596 -> tp 1900
989:		mov t2129, [a2128 + 10]
990:		add t2129, 1900
992:	

strftime$271:	; Parameter 50 £temporary3597 10
993:		mov [bp + 60], t2129
995:	

strftime$272:	; Call 50 sprintf 0
996:		mov word [bp + 50], strftime$273
997:		mov [bp + 52], bp
998:		add bp, 50
999:		mov di, bp
1000:		add di, 2
1001:		jmp sprintf
1003:	

strftime$273:	; PostCall 50
1005:	

strftime$274:	; Goto 303
1006:		jmp strftime$303
1008:	

strftime$275:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1010:	

strftime$276:	; Parameter 50 add 6
1011:		mov [bp + 56], bp
1012:		add word [bp + 56], 30
1014:	

strftime$277:	; Deref £temporary3599 -> tp tp 16
1015:		mov a2131, [bp + 12]
1017:	

strftime$278:	; Equal 281 £temporary3599 -> tp 0
1018:		cmp word [a2131 + 16], 0
1019:		je strftime$281
1021:	

strftime$279:	; Assign £temporary3604 string_summer#
1022:		mov t2132, @8263$string_summer#
1024:	

strftime$280:	; Goto 282
1025:		jmp strftime$282
1027:	

strftime$281:	; Assign £temporary3604 string_winter#
1028:		mov t2133, @8264$string_winter#
1030:	

strftime$282:	; Parameter 50 £temporary3604 8
1031:		mov [bp + 58], t2133
1033:	

strftime$283:	; Call 50 strcpy 0
1034:		mov word [bp + 50], strftime$284
1035:		mov [bp + 52], bp
1036:		add bp, 50
1037:		jmp strcpy
1039:	

strftime$284:	; PostCall 50
1041:	

strftime$285:	; Goto 303
1042:		jmp strftime$303
1044:	

strftime$286:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1046:	

strftime$287:	; Parameter 50 add 6
1047:		mov [bp + 56], bp
1048:		add word [bp + 56], 30
1050:	

strftime$288:	; Parameter 50 string_25# 8
1051:		mov word [bp + 58], @8276$string_25#
1053:	

strftime$289:	; Call 50 strcpy 0
1054:		mov word [bp + 50], strftime$290
1055:		mov [bp + 52], bp
1056:		add bp, 50
1057:		jmp strcpy
1059:	

strftime$290:	; PostCall 50
1061:	

strftime$291:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1063:	

strftime$292:	; Parameter 50 add 6
1064:		mov [bp + 56], bp
1065:		add word [bp + 56], 30
1067:	

strftime$293:	; Parameter 50 string_# 8
1068:		mov word [bp + 58], @8278$string_#
1070:	

strftime$294:	; Call 50 strcpy 0
1071:		mov word [bp + 50], strftime$295
1072:		mov [bp + 52], bp
1073:		add bp, 50
1074:		jmp strcpy
1076:	

strftime$295:	; PostCall 50
1078:	

strftime$296:	; Goto 303
1079:		jmp strftime$303
1081:	

strftime$297:	; Deref £temporary3608 -> add add 0
1082:		mov a2137, bp
1083:		add a2137, 30
1085:	

strftime$298:	; BinaryAdd £temporary3610 format index
1086:		mov a2138, [bp + 10]
1087:		add a2138, [bp + 24]
1089:	

strftime$299:	; Deref £temporary3609 -> £temporary3610 £temporary3610 0
1091:	

strftime$300:	; Assign £temporary3608 -> add £temporary3609 -> £temporary3610
1092:		mov t2139, [a2138]
1093:		mov [a2137], t2139
1095:	

strftime$301:	; Deref £temporary3611 -> add add 1
1096:		mov a2140, bp
1097:		add a2140, 30
1099:	

strftime$302:	; Assign £temporary3611 -> add 0
1100:		mov byte [a2140 + 1], 0
1102:	

strftime$303:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1104:	

strftime$304:	; Parameter 50 result 6
1105:		mov a2141, [bp + 6]
1106:		mov [bp + 56], a2141
1108:	

strftime$305:	; Call 50 strlen 0
1109:		mov word [bp + 50], strftime$306
1110:		mov [bp + 52], bp
1111:		add bp, 50
1112:		jmp strlen
1114:	

strftime$306:	; PostCall 50
1116:	

strftime$307:	; GetReturnValue £temporary3612
1118:	

strftime$308:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1119:		mov [bp + 50], type2142
1121:	

strftime$309:	; Parameter 50 add 6
1122:		mov [bp + 58], bp
1123:		add word [bp + 58], 30
1125:	

strftime$310:	; Call 50 strlen 0
1126:		mov word [bp + 52], strftime$311
1127:		mov [bp + 54], bp
1128:		add bp, 52
1129:		jmp strlen
1131:	

strftime$311:	; PostCall 50
1132:		mov type2143, bx
1133:		mov type2142, [bp + 50]
1135:	

strftime$312:	; GetReturnValue £temporary3613
1137:	

strftime$313:	; BinaryAdd £temporary3614 £temporary3612 £temporary3613
1138:		add type2142, type2143
1140:	

strftime$314:	; SignedGreaterThanEqual 322 £temporary3614 maxSize
1141:		cmp type2142, [bp + 8]
1142:		jge strftime$322
1144:	

strftime$315:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1146:	

strftime$316:	; Parameter 50 result 6
1147:		mov a2144, [bp + 6]
1148:		mov [bp + 56], a2144
1150:	

strftime$317:	; Parameter 50 add 8
1151:		mov [bp + 58], bp
1152:		add word [bp + 58], 30
1154:	

strftime$318:	; Call 50 strcat 0
1155:		mov word [bp + 50], strftime$319
1156:		mov [bp + 52], bp
1157:		add bp, 50
1158:		jmp strcat
1160:	

strftime$319:	; PostCall 50
1162:	

strftime$320:	; Increment index
1163:		inc word [bp + 24]
1165:	

strftime$321:	; Goto 49
1166:		jmp strftime$49
1168:	

strftime$322:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1170:	

strftime$323:	; Parameter 24 result 6
1171:		mov a2146, [bp + 6]
1172:		mov [bp + 30], a2146
1174:	

strftime$324:	; Call 24 strlen 0
1175:		mov word [bp + 24], strftime$325
1176:		mov [bp + 26], bp
1177:		add bp, 24
1178:		jmp strlen
1180:	

strftime$325:	; PostCall 24
1182:	

strftime$326:	; GetReturnValue £temporary3617
1184:	

strftime$327:	; SetReturnValue £temporary3617
1186:	

strftime$328:	; Return £temporary3617
1187:		mov t2148, [bp]
1188:		mov di, [bp + 4]
1189:		mov bp, [bp + 2]
1190:		jmp t2148
1192:	

strftime$329:	; FunctionEnd strftime
