1:	

clock:	; return_value = -1
2:		mov a2033, -1
4:	

clock$1:	; return
5:		mov t2034, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp t2034
10:	

clock$2:	; function end clock
1:	

time:	; ah = 42
2:		mov a2035, 42
4:	

time$1:	; interrupt 33
5:		int 33
7:	

time$2:	; £temporary3471 = cx
9:	

time$3:	; year = £temporary3471 - 1900
10:		sub t2036, 1900
11:		mov [bp + 12], t2036
13:	

time$4:	; £temporary3473 = dh
15:	

time$5:	; month = £temporary3473 - 1
16:		sub t2037, 1
17:		mov [bp + 14], t2037
19:	

time$6:	; £temporary3475 = dl
21:	

time$7:	; monthDay = £temporary3475
22:		mov [bp + 15], t2038
24:	

time$8:	; ah = 44
25:		mov a2039, 44
27:	

time$9:	; interrupt 33
28:		int 33
30:	

time$10:	; £temporary3477 = ch
32:	

time$11:	; hour = £temporary3477
33:		mov [bp + 16], t2040
35:	

time$12:	; £temporary3478 = cl
37:	

time$13:	; min = £temporary3478
38:		mov [bp + 17], t2041
40:	

time$14:	; £temporary3479 = dh
42:	

time$15:	; sec = £temporary3479
43:		mov [bp + 18], t2042
45:	

time$16:	; £temporary3480 = year % 4
46:		mov a2043, [bp + 12]
48:		xor dx, dx
49:		idiv word [int2$4#]
55:	

time$17:	; if £temporary3480 != 0 goto 20
56:		cmp t2045, 0
57:		jne time$20
59:	

time$18:	; £temporary3482 = 1
60:		mov t2046, 1
62:	

time$19:	; goto 21
63:		jmp time$21
65:	

time$20:	; £temporary3482 = 0
66:		mov t2047, 0
68:	

time$21:	; leapYear = £temporary3482
69:		mov [bp + 19], t2047
71:	

time$22:	; daysOfMonths[0] = 31
72:		mov word [bp + 21], 31
74:	

time$23:	; if leapYear == 0 goto 26
75:		cmp word [bp + 19], 0
76:		je time$26
78:	

time$24:	; £temporary3487 = 29
79:		mov t2048, 29
81:	

time$25:	; goto 27
82:		jmp time$27
84:	

time$26:	; £temporary3487 = 28
85:		mov t2049, 28
87:	

time$27:	; daysOfMonths[1] = £temporary3487
88:		mov [bp + 23], t2049
90:	

time$28:	; daysOfMonths[2] = 31
91:		mov word [bp + 25], 31
93:	

time$29:	; daysOfMonths[3] = 30
94:		mov word [bp + 27], 30
96:	

time$30:	; daysOfMonths[4] = 31
97:		mov word [bp + 29], 31
99:	

time$31:	; daysOfMonths[5] = 30
100:		mov word [bp + 31], 30
102:	

time$32:	; daysOfMonths[6] = 30
103:		mov word [bp + 33], 30
105:	

time$33:	; daysOfMonths[7] = 31
106:		mov word [bp + 35], 31
108:	

time$34:	; daysOfMonths[8] = 30
109:		mov word [bp + 37], 30
111:	

time$35:	; daysOfMonths[9] = 31
112:		mov word [bp + 39], 31
114:	

time$36:	; daysOfMonths[10] = 30
115:		mov word [bp + 41], 30
117:	

time$37:	; daysOfMonths[11] = 31
118:		mov word [bp + 43], 31
120:	

time$38:	; £temporary3500 = int_to_int monthDay (Signed_Short_Int -> Signed_Int)
121:		mov a2050, [bp + 15]
123:		and a2050, 255
125:		cmp a2050, 0
126:		jge time$39
127:		neg a2050
129:		neg a2050
131:	

time$39:	; yearDay = £temporary3500 - 1
132:		sub a2050, 1
133:		mov [bp + 45], a2050
135:	

time$40:	; mon = 0
136:		mov word [bp + 47], 0
138:	

time$41:	; £temporary3502 = int_to_int month (Signed_Short_Int -> Signed_Int)
139:		mov a2051, [bp + 14]
141:		and a2051, 255
143:		cmp a2051, 0
144:		jge time$42
145:		neg a2051
147:		neg a2051
149:	

time$42:	; if mon >= £temporary3502 goto 49
150:		cmp [bp + 47], a2051
151:		jge time$49
153:	

time$43:	; £temporary3506 = mon * 2
154:		mov a2052, [bp + 47]
156:		xor dx, dx
157:		mul word [int2$2#]
163:	

time$44:	; £temporary3507 = daysOfMonths + £temporary3506
164:		mov a2056, bp
165:		add a2056, 21
166:		add a2056, t2055
168:	

time$45:	; £temporary3505 -> £temporary3507 = *£temporary3507
170:	

time$46:	; yearDay = yearDay + £temporary3505 -> £temporary3507
171:		mov t2057, [a2056]
172:		add [bp + 45], t2057
174:	

time$47:	; ++mon
175:		inc word [bp + 47]
177:	

time$48:	; goto 41
178:		jmp time$41
180:	

time$49:	; £temporary3510 = int_to_int sec (Signed_Short_Int -> Signed_Int)
181:		mov a2058, [bp + 18]
183:		and a2058, 255
185:		cmp a2058, 0
186:		jge time$50
187:		neg a2058
189:		neg a2058
191:	

time$50:	; s$tm_sec = £temporary3510
192:		mov [bp + 49], a2058
194:	

time$51:	; £temporary3512 = int_to_int min (Signed_Short_Int -> Signed_Int)
195:		mov a2059, [bp + 17]
197:		and a2059, 255
199:		cmp a2059, 0
200:		jge time$52
201:		neg a2059
203:		neg a2059
205:	

time$52:	; s$tm_min = £temporary3512
206:		mov [bp + 51], a2059
208:	

time$53:	; £temporary3514 = int_to_int hour (Signed_Short_Int -> Signed_Int)
209:		mov a2060, [bp + 16]
211:		and a2060, 255
213:		cmp a2060, 0
214:		jge time$54
215:		neg a2060
217:		neg a2060
219:	

time$54:	; s$tm_hour = £temporary3514
220:		mov [bp + 53], a2060
222:	

time$55:	; £temporary3516 = int_to_int monthDay (Signed_Short_Int -> Signed_Int)
223:		mov a2061, [bp + 15]
225:		and a2061, 255
227:		cmp a2061, 0
228:		jge time$56
229:		neg a2061
231:		neg a2061
233:	

time$56:	; s$tm_mday = £temporary3516
234:		mov [bp + 55], a2061
236:	

time$57:	; £temporary3518 = int_to_int month (Signed_Short_Int -> Signed_Int)
237:		mov a2062, [bp + 14]
239:		and a2062, 255
241:		cmp a2062, 0
242:		jge time$58
243:		neg a2062
245:		neg a2062
247:	

time$58:	; s$tm_mon = £temporary3518
248:		mov [bp + 57], a2062
250:	

time$59:	; s$tm_year = year
251:		mov a2063, [bp + 12]
252:		mov [bp + 59], a2063
254:	

time$60:	; s$tm_wday = 0
255:		mov word [bp + 61], 0
257:	

time$61:	; s$tm_yday = yearDay
258:		mov a2064, [bp + 45]
259:		mov [bp + 63], a2064
261:	

time$62:	; s$tm_isdst = 0
262:		mov word [bp + 65], 0
264:	

time$63:	; call header integral zero 0 stack zero 0
266:	

time$64:	; £temporary3523 = &s
267:		mov t2065, bp
268:		add t2065, 49
270:	

time$65:	; parameter £temporary3523, offset 6
271:		mov [bp + 73], t2065
273:	

time$66:	; call function noellipse-noellipse mktime
274:		mov word [bp + 67], time$67
275:		mov [bp + 69], bp
276:		add bp, 67
277:		jmp mktime
279:	

time$67:	; post call
281:	

time$68:	; £temporary3524 = return_value
286:	

time$69:	; time = £temporary3524
287:		mov [bp + 8], t2067
289:	

time$70:	; if timePtr == 0 goto 73
290:		cmp word [bp + 6], 0
291:		je time$73
293:	

time$71:	; £temporary3526 -> timePtr = *timePtr
294:		mov a2068, [bp + 6]
296:	

time$72:	; £temporary3526 -> timePtr = time
297:		mov a2069, [bp + 8]
298:		mov [a2068], a2069
300:	

time$73:	; return_value = time
301:		mov a2070, [bp + 8]
303:	

time$74:	; return
304:		mov t2071, [bp]
305:		mov di, [bp + 4]
306:		mov bp, [bp + 2]
307:		jmp t2071
309:	

time$75:	; function end time
1:	

mktime:	; if tp == 0 goto 28
2:		cmp word [bp + 6], 0
3:		je mktime$28
5:	

mktime$1:	; £temporary3530 -> tp = *tp, offset 10
6:		mov a2072, [bp + 6]
8:	

mktime$2:	; £temporary3531 = £temporary3530 -> tp - 69
9:		mov t2073, [a2072 + 10]
10:		sub t2073, 69
12:	

mktime$3:	; £temporary3532 = £temporary3531 / 4
14:		xor dx, dx
15:		idiv word [int2$4#]
21:	

mktime$4:	; £temporary3533 = int_to_int £temporary3532 (Signed_Int -> Signed_Long_Int)
23:		and t2076, 65535
25:		cmp t2076, 0
26:		jge mktime$5
27:		neg t2076
29:		neg t2076
31:	

mktime$5:	; leapDays = £temporary3533
32:		mov [bp + 8], t2076
34:	

mktime$6:	; £temporary3534 -> tp = *tp, offset 10
35:		mov a2077, [bp + 6]
37:	

mktime$7:	; £temporary3535 = £temporary3534 -> tp - 70
38:		mov t2078, [a2077 + 10]
39:		sub t2078, 70
41:	

mktime$8:	; £temporary3536 = £temporary3535 * 365
43:		xor dx, dx
44:		imul word [int2$365#]
50:	

mktime$9:	; £temporary3537 = int_to_int £temporary3536 (Signed_Int -> Signed_Long_Int)
52:		and t2081, 65535
54:		cmp t2081, 0
55:		jge mktime$10
56:		neg t2081
58:		neg t2081
60:	

mktime$10:	; £temporary3538 = £temporary3537 + leapDays
61:		add t2081, [bp + 8]
63:	

mktime$11:	; £temporary3539 -> tp = *tp, offset 14
64:		mov a2082, [bp + 6]
66:	

mktime$12:	; £temporary3540 = int_to_int £temporary3539 -> tp (Signed_Int -> Signed_Long_Int)
67:		mov t2083, [a2082 + 14]
69:		and t2083, 65535
71:		cmp t2083, 0
72:		jge mktime$13
73:		neg t2083
75:		neg t2083
77:	

mktime$13:	; totalDays = £temporary3538 + £temporary3540
78:		add t2081, t2083
79:		mov [bp + 12], t2081
81:	

mktime$14:	; £temporary3542 = totalDays * 86400
82:		mov a2084, [bp + 12]
84:		xor edx, edx
85:		imul dword [int4$86400#]
91:		mov t2090, t2087
93:	

mktime$15:	; £temporary3543 -> tp = *tp, offset 4
94:		mov a2088, [bp + 6]
96:	

mktime$16:	; £temporary3544 = int_to_int £temporary3543 -> tp (Signed_Int -> Signed_Long_Int)
97:		mov t2089, [a2088 + 4]
99:		and t2089, 65535
101:		cmp t2089, 0
102:		jge mktime$17
103:		neg t2089
105:		neg t2089
107:	

mktime$17:	; £temporary3545 = £temporary3544 * 3600
109:		xor edx, edx
110:		imul dword [int4$3600#]
116:	

mktime$18:	; £temporary3546 = £temporary3542 + £temporary3545
117:		add t2090, t2093
119:	

mktime$19:	; £temporary3547 -> tp = *tp, offset 2
120:		mov a2094, [bp + 6]
122:	

mktime$20:	; £temporary3548 = int_to_int £temporary3547 -> tp (Signed_Int -> Signed_Long_Int)
123:		mov t2095, [a2094 + 2]
125:		and t2095, 65535
127:		cmp t2095, 0
128:		jge mktime$21
129:		neg t2095
131:		neg t2095
133:	

mktime$21:	; £temporary3549 = £temporary3548 * 60
135:		xor edx, edx
136:		imul dword [int4$60#]
142:	

mktime$22:	; £temporary3550 = £temporary3546 + £temporary3549
143:		add t2090, t2098
145:	

mktime$23:	; £temporary3551 -> tp = *tp
146:		mov a2099, [bp + 6]
148:	

mktime$24:	; £temporary3552 = int_to_int £temporary3551 -> tp (Signed_Int -> Signed_Long_Int)
149:		mov t2100, [a2099]
151:		and t2100, 65535
153:		cmp t2100, 0
154:		jge mktime$25
155:		neg t2100
157:		neg t2100
159:	

mktime$25:	; £temporary3553 = £temporary3550 + £temporary3552
160:		add t2090, t2100
162:	

mktime$26:	; return_value = £temporary3553
164:	

mktime$27:	; return
165:		mov t2101, [bp]
166:		mov di, [bp + 4]
167:		mov bp, [bp + 2]
168:		jmp t2101
170:	

mktime$28:	; return_value = 0
171:		mov a2102, 0
173:	

mktime$29:	; return
174:		mov t2103, [bp]
175:		mov di, [bp + 4]
176:		mov bp, [bp + 2]
177:		jmp t2103
179:	

mktime$30:	; function end mktime
1:	

gmtime:	; year = 1970
2:		mov word [bp + 8], 1970
4:	

gmtime$1:	; if timePtr == 0 goto 86
5:		cmp word [bp + 6], 0
6:		je gmtime$86
8:	

gmtime$2:	; £temporary3555 -> timePtr = *timePtr
9:		mov a2104, [bp + 6]
11:	

gmtime$3:	; time = £temporary3555 -> timePtr
12:		mov t2105, [a2104]
13:		mov [bp + 10], t2105
15:	

gmtime$4:	; secondsOfDay = time % 86400
16:		mov a2106, [bp + 10]
18:		xor edx, edx
19:		idiv dword [int4$86400#]
20:		mov [bp + 14], edx
22:	

gmtime$5:	; £temporary3558 = secondsOfDay / 3600
23:		mov a2108, [bp + 14]
25:		xor edx, edx
26:		idiv dword [int4$3600#]
32:	

gmtime$6:	; £temporary3559 = int_to_int £temporary3558 (Signed_Long_Int -> Signed_Int)
35:		cmp t2111, 0
36:		jge gmtime$7
37:		neg t2111
39:		neg t2111
41:	

gmtime$7:	; g_timeStruct$tm_hour = £temporary3559
42:		mov [@29$g_timeStruct + 4], t2111
44:	

gmtime$8:	; £temporary3561 = secondsOfDay % 3600
45:		mov a2112, [bp + 14]
47:		xor edx, edx
48:		idiv dword [int4$3600#]
54:	

gmtime$9:	; £temporary3562 = £temporary3561 / 60
55:		mov t2115, t2114
57:		xor edx, edx
58:		idiv dword [int4$60#]
64:	

gmtime$10:	; £temporary3563 = int_to_int £temporary3562 (Signed_Long_Int -> Signed_Int)
67:		cmp t2118, 0
68:		jge gmtime$11
69:		neg t2118
71:		neg t2118
73:	

gmtime$11:	; g_timeStruct$tm_min = £temporary3563
74:		mov [@29$g_timeStruct + 2], t2118
76:	

gmtime$12:	; £temporary3565 = secondsOfDay % 3600
77:		mov a2119, [bp + 14]
79:		xor edx, edx
80:		idiv dword [int4$3600#]
86:	

gmtime$13:	; £temporary3566 = £temporary3565 % 60
87:		mov t2122, t2121
89:		xor edx, edx
90:		idiv dword [int4$60#]
96:	

gmtime$14:	; £temporary3567 = int_to_int £temporary3566 (Signed_Long_Int -> Signed_Int)
99:		cmp t2124, 0
100:		jge gmtime$15
101:		neg t2124
103:		neg t2124
105:	

gmtime$15:	; g_timeStruct$tm_sec = £temporary3567
106:		mov [@29$g_timeStruct], t2124
108:	

gmtime$16:	; totalDays = time / 86400
109:		mov a2125, [bp + 10]
111:		xor edx, edx
112:		idiv dword [int4$86400#]
113:		mov [bp + 18], eax
115:	

gmtime$17:	; if totalDays >= 3 goto 22
116:		cmp dword [bp + 18], 3
117:		jge gmtime$22
119:	

gmtime$18:	; £temporary3571 = totalDays + 4
120:		mov a2128, [bp + 18]
121:		add a2128, 4
123:	

gmtime$19:	; £temporary3572 = int_to_int £temporary3571 (Signed_Long_Int -> Signed_Int)
126:		cmp a2128, 0
127:		jge gmtime$20
128:		neg a2128
130:		neg a2128
132:	

gmtime$20:	; g_timeStruct$tm_wday = £temporary3572
133:		mov [@29$g_timeStruct + 12], a2128
135:	

gmtime$21:	; goto 26
136:		jmp gmtime$26
138:	

gmtime$22:	; £temporary3574 = totalDays - 3
139:		mov a2129, [bp + 18]
140:		sub a2129, 3
142:	

gmtime$23:	; £temporary3575 = £temporary3574 % 7
144:		xor edx, edx
145:		idiv dword [int4$7#]
151:	

gmtime$24:	; £temporary3576 = int_to_int £temporary3575 (Signed_Long_Int -> Signed_Int)
154:		cmp t2131, 0
155:		jge gmtime$25
156:		neg t2131
158:		neg t2131
160:	

gmtime$25:	; g_timeStruct$tm_wday = £temporary3576
161:		mov [@29$g_timeStruct + 12], t2131
163:	

gmtime$26:	; £temporary3577 = year % 4
164:		mov a2132, [bp + 8]
166:		xor dx, dx
167:		idiv word [int2$4#]
173:	

gmtime$27:	; if £temporary3577 != 0 goto 30
174:		cmp t2134, 0
175:		jne gmtime$30
177:	

gmtime$28:	; £temporary3579 = year % 100
178:		mov a2135, [bp + 8]
180:		xor dx, dx
181:		idiv word [int2$100#]
187:	

gmtime$29:	; if £temporary3579 != 0 goto 32
188:		cmp t2137, 0
189:		jne gmtime$32
191:	

gmtime$30:	; £temporary3582 = year % 400
192:		mov a2138, [bp + 8]
194:		xor dx, dx
195:		idiv word [int2$400#]
201:	

gmtime$31:	; if £temporary3582 != 0 goto 34
202:		cmp t2140, 0
203:		jne gmtime$34
205:	

gmtime$32:	; £temporary3585 = 1
206:		mov t2141, 1
208:	

gmtime$33:	; goto 35
209:		jmp gmtime$35
211:	

gmtime$34:	; £temporary3585 = 0
212:		mov t2142, 0
214:	

gmtime$35:	; leapYear = £temporary3585
215:		mov [bp + 22], t2142
217:	

gmtime$36:	; if leapYear == 0 goto 39
218:		cmp word [bp + 22], 0
219:		je gmtime$39
221:	

gmtime$37:	; £temporary3590 = 366
222:		mov t2143, 366
224:	

gmtime$38:	; goto 40
225:		jmp gmtime$40
227:	

gmtime$39:	; £temporary3590 = 365
228:		mov t2144, 365
230:	

gmtime$40:	; daysOfYear = £temporary3590
231:		mov [bp + 24], t2144
233:	

gmtime$41:	; £temporary3591 = int_to_int daysOfYear (Signed_Int -> Signed_Long_Int)
234:		mov a2145, [bp + 24]
236:		and a2145, 65535
238:		cmp a2145, 0
239:		jge gmtime$42
240:		neg a2145
242:		neg a2145
244:	

gmtime$42:	; if totalDays >= £temporary3591 goto 82
245:		cmp [bp + 18], a2145
246:		jge gmtime$82
248:	

gmtime$43:	; g_timeStruct$tm_year = year - 1900
249:		mov a2146, [bp + 8]
250:		sub a2146, 1900
251:		mov [@29$g_timeStruct], a2146
253:	

gmtime$44:	; £temporary3596 = int_to_int totalDays (Signed_Long_Int -> Signed_Int)
254:		mov a2147, [bp + 18]
257:		cmp a2147, 0
258:		jge gmtime$45
259:		neg a2147
261:		neg a2147
263:	

gmtime$45:	; g_timeStruct$tm_yday = £temporary3596
264:		mov [@29$g_timeStruct + 14], a2147
266:	

gmtime$46:	; daysOfMonths[0] = 31
267:		mov word [bp + 26], 31
269:	

gmtime$47:	; if leapYear == 0 goto 50
270:		cmp word [bp + 22], 0
271:		je gmtime$50
273:	

gmtime$48:	; £temporary3601 = 29
274:		mov t2148, 29
276:	

gmtime$49:	; goto 51
277:		jmp gmtime$51
279:	

gmtime$50:	; £temporary3601 = 28
280:		mov t2149, 28
282:	

gmtime$51:	; daysOfMonths[1] = £temporary3601
283:		mov [bp + 28], t2149
285:	

gmtime$52:	; daysOfMonths[2] = 31
286:		mov word [bp + 30], 31
288:	

gmtime$53:	; daysOfMonths[3] = 30
289:		mov word [bp + 32], 30
291:	

gmtime$54:	; daysOfMonths[4] = 31
292:		mov word [bp + 34], 31
294:	

gmtime$55:	; daysOfMonths[5] = 30
295:		mov word [bp + 36], 30
297:	

gmtime$56:	; daysOfMonths[6] = 30
298:		mov word [bp + 38], 30
300:	

gmtime$57:	; daysOfMonths[7] = 31
301:		mov word [bp + 40], 31
303:	

gmtime$58:	; daysOfMonths[8] = 30
304:		mov word [bp + 42], 30
306:	

gmtime$59:	; daysOfMonths[9] = 31
307:		mov word [bp + 44], 31
309:	

gmtime$60:	; daysOfMonths[10] = 30
310:		mov word [bp + 46], 30
312:	

gmtime$61:	; daysOfMonths[11] = 31
313:		mov word [bp + 48], 31
315:	

gmtime$62:	; month = 0
316:		mov word [bp + 50], 0
318:	

gmtime$63:	; £temporary3615 = month * 2
319:		mov a2150, [bp + 50]
321:		xor dx, dx
322:		mul word [int2$2#]
328:	

gmtime$64:	; £temporary3616 = daysOfMonths + £temporary3615
329:		mov a2154, bp
330:		add a2154, 26
331:		add a2154, t2153
333:	

gmtime$65:	; £temporary3614 -> £temporary3616 = *£temporary3616
335:	

gmtime$66:	; £temporary3617 = int_to_int £temporary3614 -> £temporary3616 (Signed_Int -> Signed_Long_Int)
336:		mov t2155, [a2154]
338:		and t2155, 65535
340:		cmp t2155, 0
341:		jge gmtime$67
342:		neg t2155
344:		neg t2155
346:	

gmtime$67:	; if totalDays < £temporary3617 goto 75
347:		cmp [bp + 18], t2155
348:		jl gmtime$75
350:	

gmtime$68:	; £temporary3620 = month * 2
351:		mov a2156, [bp + 50]
353:		xor dx, dx
354:		mul word [int2$2#]
360:	

gmtime$69:	; £temporary3621 = daysOfMonths + £temporary3620
361:		mov a2160, bp
362:		add a2160, 26
363:		add a2160, t2159
365:	

gmtime$70:	; £temporary3619 -> £temporary3621 = *£temporary3621
367:	

gmtime$71:	; £temporary3622 = int_to_int £temporary3619 -> £temporary3621 (Signed_Int -> Signed_Long_Int)
368:		mov t2161, [a2160]
370:		and t2161, 65535
372:		cmp t2161, 0
373:		jge gmtime$72
374:		neg t2161
376:		neg t2161
378:	

gmtime$72:	; totalDays = totalDays - £temporary3622
379:		sub [bp + 18], t2161
381:	

gmtime$73:	; ++month
382:		inc word [bp + 50]
384:	

gmtime$74:	; goto 63
385:		jmp gmtime$63
387:	

gmtime$75:	; g_timeStruct$tm_mon = month
388:		mov a2162, [bp + 50]
389:		mov [@29$g_timeStruct + 8], a2162
391:	

gmtime$76:	; £temporary3627 = totalDays + 1
392:		mov a2163, [bp + 18]
393:		add a2163, 1
395:	

gmtime$77:	; £temporary3628 = int_to_int £temporary3627 (Signed_Long_Int -> Signed_Int)
398:		cmp a2163, 0
399:		jge gmtime$78
400:		neg a2163
402:		neg a2163
404:	

gmtime$78:	; g_timeStruct$tm_mday = £temporary3628
405:		mov [@29$g_timeStruct + 6], a2163
407:	

gmtime$79:	; g_timeStruct$tm_isdst = -1
408:		mov word [@29$g_timeStruct + 16], -1
410:	

gmtime$80:	; return_value = (@29$g_timeStruct,0)
411:		mov a2164, @29$g_timeStruct
413:	

gmtime$81:	; return
414:		mov t2165, [bp]
415:		mov di, [bp + 4]
416:		mov bp, [bp + 2]
417:		jmp t2165
419:	

gmtime$82:	; ++year
420:		inc word [bp + 8]
422:	

gmtime$83:	; £temporary3631 = int_to_int daysOfYear (Signed_Int -> Signed_Long_Int)
423:		mov a2166, [bp + 24]
425:		and a2166, 65535
427:		cmp a2166, 0
428:		jge gmtime$84
429:		neg a2166
431:		neg a2166
433:	

gmtime$84:	; totalDays = totalDays - £temporary3631
434:		sub [bp + 18], a2166
436:	

gmtime$85:	; goto 26
437:		jmp gmtime$26
439:	

gmtime$86:	; return_value = 0
440:		mov a2167, 0
442:	

gmtime$87:	; return
443:		mov t2168, [bp]
444:		mov di, [bp + 4]
445:		mov bp, [bp + 2]
446:		jmp t2168
448:	

gmtime$88:	; function end gmtime
1:	

difftime:	; £temporary3634 = time2 - time1
2:		mov a2169, [bp + 10]
3:		sub a2169, [bp + 6]
5:	

difftime$1:	; £temporary3635 = int_to_float £temporary3634 (Unsigned_Long_Int -> Double)
6:		mov [container4bytes#], a2169
7:		fild dword [container4bytes#]
9:	

difftime$2:	; return_value = £temporary3635
11:	

difftime$3:	; return
12:		mov t2170, [bp]
13:		mov di, [bp + 4]
14:		mov bp, [bp + 2]
15:		jmp t2170
17:	

difftime$4:	; function end difftime
1:	

asctime:	; localeConvPtr = 0
2:		mov word [bp + 8], 0
4:	

asctime$1:	; if localeConvPtr == 0 goto 5
5:		cmp word [bp + 8], 0
6:		je asctime$5
8:	

asctime$2:	; £temporary3637 -> localeConvPtr = *localeConvPtr, offset 4
9:		mov a2171, [bp + 8]
11:	

asctime$3:	; £temporary3641 = £temporary3637 -> localeConvPtr
12:		mov t2172, [a2171 + 4]
14:	

asctime$4:	; goto 6
15:		jmp asctime$6
17:	

asctime$5:	; £temporary3641 = 0
18:		mov t2173, 0
20:	

asctime$6:	; shortDayList = £temporary3641
21:		mov [bp + 10], t2173
23:	

asctime$7:	; if localeConvPtr == 0 goto 11
24:		cmp word [bp + 8], 0
25:		je asctime$11
27:	

asctime$8:	; £temporary3643 -> localeConvPtr = *localeConvPtr, offset 8
28:		mov a2174, [bp + 8]
30:	

asctime$9:	; £temporary3647 = £temporary3643 -> localeConvPtr
31:		mov t2175, [a2174 + 8]
33:	

asctime$10:	; goto 12
34:		jmp asctime$12
36:	

asctime$11:	; £temporary3647 = 0
37:		mov t2176, 0
39:	

asctime$12:	; shortMonthList = £temporary3647
40:		mov [bp + 12], t2176
42:	

asctime$13:	; if shortDayList == 0 goto 16
43:		cmp word [bp + 10], 0
44:		je asctime$16
46:	

asctime$14:	; £temporary3652 = shortDayList
47:		mov t2177, [bp + 10]
49:	

asctime$15:	; goto 17
50:		jmp asctime$17
52:	

asctime$16:	; £temporary3652 = g_defaultShortDayList
53:		mov t2178, @31$g_defaultShortDayList
55:	

asctime$17:	; shortDayList = £temporary3652
56:		mov [bp + 10], t2178
58:	

asctime$18:	; if shortMonthList == 0 goto 21
59:		cmp word [bp + 12], 0
60:		je asctime$21
62:	

asctime$19:	; £temporary3657 = shortMonthList
63:		mov t2179, [bp + 12]
65:	

asctime$20:	; goto 22
66:		jmp asctime$22
68:	

asctime$21:	; £temporary3657 = g_defaultShortMonthList
69:		mov t2180, @33$g_defaultShortMonthList
71:	

asctime$22:	; shortMonthList = £temporary3657
72:		mov [bp + 12], t2180
74:	

asctime$23:	; call header integral zero 0 stack zero 0
76:	

asctime$24:	; parameter g_timeString, offset 6
77:		mov word [bp + 20], @30$g_timeString
79:	

asctime$25:	; parameter string_25s2025s20252i202502i3A2502i3A2502i202504i#, offset 8
80:		mov word [bp + 22], string_25s2025s20252i202502i3A2502i3A2502i202504i#
82:	

asctime$26:	; £temporary3658 -> tp = *tp, offset 12
83:		mov a2181, [bp + 6]
85:	

asctime$27:	; £temporary3660 = £temporary3658 -> tp * 2
86:		mov t2182, [a2181 + 12]
88:		xor dx, dx
89:		mul word [int2$2#]
95:	

asctime$28:	; £temporary3661 = shortDayList + £temporary3660
96:		mov a2186, [bp + 10]
97:		add a2186, t2185
99:	

asctime$29:	; £temporary3659 -> £temporary3661 = *£temporary3661
101:	

asctime$30:	; parameter £temporary3659 -> £temporary3661, offset 10
102:		mov t2187, [a2186]
103:		mov [bp + 24], t2187
105:	

asctime$31:	; £temporary3662 -> tp = *tp, offset 8
106:		mov a2188, [bp + 6]
108:	

asctime$32:	; £temporary3664 = £temporary3662 -> tp * 2
109:		mov t2189, [a2188 + 8]
111:		xor dx, dx
112:		mul word [int2$2#]
118:	

asctime$33:	; £temporary3665 = shortMonthList + £temporary3664
119:		mov a2193, [bp + 12]
120:		add a2193, t2192
122:	

asctime$34:	; £temporary3663 -> £temporary3665 = *£temporary3665
124:	

asctime$35:	; parameter £temporary3663 -> £temporary3665, offset 12
125:		mov t2194, [a2193]
126:		mov [bp + 26], t2194
128:	

asctime$36:	; £temporary3666 -> tp = *tp, offset 6
129:		mov a2195, [bp + 6]
131:	

asctime$37:	; parameter £temporary3666 -> tp, offset 14
132:		mov t2196, [a2195 + 6]
133:		mov [bp + 28], t2196
135:	

asctime$38:	; £temporary3667 -> tp = *tp, offset 4
136:		mov a2197, [bp + 6]
138:	

asctime$39:	; parameter £temporary3667 -> tp, offset 16
139:		mov t2198, [a2197 + 4]
140:		mov [bp + 30], t2198
142:	

asctime$40:	; £temporary3668 -> tp = *tp, offset 2
143:		mov a2199, [bp + 6]
145:	

asctime$41:	; parameter £temporary3668 -> tp, offset 18
146:		mov t2200, [a2199 + 2]
147:		mov [bp + 32], t2200
149:	

asctime$42:	; £temporary3669 -> tp = *tp
150:		mov a2201, [bp + 6]
152:	

asctime$43:	; parameter £temporary3669 -> tp, offset 20
153:		mov t2202, [a2201]
154:		mov [bp + 34], t2202
156:	

asctime$44:	; £temporary3670 -> tp = *tp, offset 10
157:		mov a2203, [bp + 6]
159:	

asctime$45:	; £temporary3671 = £temporary3670 -> tp + 1900
160:		mov t2204, [a2203 + 10]
161:		add t2204, 1900
163:	

asctime$46:	; parameter £temporary3671, offset 22
164:		mov [bp + 36], t2204
166:	

asctime$47:	; call function noellipse-ellipse sprintf, extra 0
167:		mov word [bp + 14], asctime$48
168:		mov [bp + 16], bp
169:		add bp, 14
170:		mov di, bp
171:		add di, 14
172:		jmp sprintf
174:	

asctime$48:	; post call
176:	

asctime$49:	; return_value = g_timeString
177:		mov a2205, @30$g_timeString
179:	

asctime$50:	; return
180:		mov t2206, [bp]
181:		mov di, [bp + 4]
182:		mov bp, [bp + 2]
183:		jmp t2206
185:	

asctime$51:	; function end asctime
1:	

ctime:	; call header integral zero 0 stack zero 0
3:	

ctime$1:	; call header integral zero 0 stack zero 0
5:	

ctime$2:	; parameter time, offset 6
6:		mov a2207, [bp + 6]
7:		mov [bp + 14], a2207
9:	

ctime$3:	; call function noellipse-noellipse localtime
10:		mov word [bp + 8], ctime$4
11:		mov [bp + 10], bp
12:		add bp, 8
13:		jmp localtime
15:	

ctime$4:	; post call
17:	

ctime$5:	; £temporary3682 = return_value
22:	

ctime$6:	; parameter £temporary3682, offset 6
23:		mov [bp + 14], t2209
25:	

ctime$7:	; call function noellipse-noellipse asctime
26:		mov word [bp + 8], ctime$8
27:		mov [bp + 10], bp
28:		add bp, 8
29:		jmp asctime
31:	

ctime$8:	; post call
33:	

ctime$9:	; £temporary3683 = return_value
38:	

ctime$10:	; return_value = £temporary3683
40:	

ctime$11:	; return
41:		mov t2212, [bp]
42:		mov di, [bp + 4]
43:		mov bp, [bp + 2]
44:		jmp t2212
46:	

ctime$12:	; function end ctime
1:	

localtime:	; call header integral zero 0 stack zero 0
3:	

localtime$1:	; parameter timePtr, offset 6
4:		mov a2213, [bp + 6]
5:		mov [bp + 14], a2213
7:	

localtime$2:	; call function noellipse-noellipse gmtime
8:		mov word [bp + 8], localtime$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp gmtime
13:	

localtime$3:	; post call
15:	

localtime$4:	; £temporary3686 = return_value
20:	

localtime$5:	; tmPtr = £temporary3686
21:		mov [bp + 8], t2215
23:	

localtime$6:	; call header integral zero 0 stack zero 0
25:	

localtime$7:	; call function noellipse-noellipse localeconv
26:		mov word [bp + 10], localtime$8
27:		mov [bp + 12], bp
28:		add bp, 10
29:		jmp localeconv
31:	

localtime$8:	; post call
33:	

localtime$9:	; £temporary3687 = return_value
38:	

localtime$10:	; localeConvPtr = £temporary3687
39:		mov [bp + 10], t2217
41:	

localtime$11:	; timeZone = 0
42:		mov word [bp + 12], 0
44:	

localtime$12:	; if localeConvPtr == 0 goto 21
45:		cmp word [bp + 10], 0
46:		je localtime$21
48:	

localtime$13:	; £temporary3689 -> tmPtr = *tmPtr, offset 16
49:		mov a2218, [bp + 8]
51:	

localtime$14:	; if £temporary3689 -> tmPtr == 0 goto 18
52:		cmp word [a2218 + 16], 0
53:		je localtime$18
55:	

localtime$15:	; £temporary3690 -> localeConvPtr = *localeConvPtr
56:		mov a2219, [bp + 10]
58:	

localtime$16:	; £temporary3696 = £temporary3690 -> localeConvPtr
59:		mov t2220, [a2219]
61:	

localtime$17:	; goto 20
62:		jmp localtime$20
64:	

localtime$18:	; £temporary3691 -> localeConvPtr = *localeConvPtr, offset 2
65:		mov a2221, [bp + 10]
67:	

localtime$19:	; £temporary3696 = £temporary3691 -> localeConvPtr
68:		mov t2222, [a2221 + 2]
70:	

localtime$20:	; timeZone = £temporary3696
71:		mov [bp + 12], t2222
73:	

localtime$21:	; £temporary3697 -> timePtr = *timePtr
74:		mov a2223, [bp + 6]
76:	

localtime$22:	; £temporary3698 = timeZone * 3600
77:		mov a2224, [bp + 12]
79:		xor dx, dx
80:		imul word [int2$3600#]
86:	

localtime$23:	; £temporary3699 = int_to_int £temporary3698 (Signed_Int -> Unsigned_Long_Int)
88:		and t2227, 65535
90:	

localtime$24:	; time = £temporary3697 -> timePtr + £temporary3699
91:		mov t2228, [a2223]
92:		add t2228, t2227
93:		mov [bp + 14], t2228
95:	

localtime$25:	; call header integral zero 0 stack zero 0
97:	

localtime$26:	; £temporary3701 = &time
98:		mov t2229, bp
99:		add t2229, 14
101:	

localtime$27:	; parameter £temporary3701, offset 6
102:		mov [bp + 24], t2229
104:	

localtime$28:	; call function noellipse-noellipse gmtime
105:		mov word [bp + 18], localtime$29
106:		mov [bp + 20], bp
107:		add bp, 18
108:		jmp gmtime
110:	

localtime$29:	; post call
112:	

localtime$30:	; £temporary3702 = return_value
117:	

localtime$31:	; return_value = £temporary3702
119:	

localtime$32:	; return
120:		mov t2232, [bp]
121:		mov di, [bp + 4]
122:		mov bp, [bp + 2]
123:		jmp t2232
125:	

localtime$33:	; function end localtime
1:	

strftime:	; call header integral zero 0 stack zero 0
3:	

strftime$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 14], strftime$2
5:		mov [bp + 16], bp
6:		add bp, 14
7:		jmp localeconv
9:	

strftime$2:	; post call
11:	

strftime$3:	; £temporary3706 = return_value
16:	

strftime$4:	; localeConvPtr = £temporary3706
17:		mov [bp + 14], t2234
19:	

strftime$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 14], 0
21:		je strftime$9
23:	

strftime$6:	; £temporary3708 -> localeConvPtr = *localeConvPtr, offset 4
24:		mov a2235, [bp + 14]
26:	

strftime$7:	; £temporary3712 = £temporary3708 -> localeConvPtr
27:		mov t2236, [a2235 + 4]
29:	

strftime$8:	; goto 10
30:		jmp strftime$10
32:	

strftime$9:	; £temporary3712 = 0
33:		mov t2237, 0
35:	

strftime$10:	; shortDayList = £temporary3712
36:		mov [bp + 16], t2237
38:	

strftime$11:	; if localeConvPtr == 0 goto 15
39:		cmp word [bp + 14], 0
40:		je strftime$15
42:	

strftime$12:	; £temporary3714 -> localeConvPtr = *localeConvPtr, offset 8
43:		mov a2238, [bp + 14]
45:	

strftime$13:	; £temporary3718 = £temporary3714 -> localeConvPtr
46:		mov t2239, [a2238 + 8]
48:	

strftime$14:	; goto 16
49:		jmp strftime$16
51:	

strftime$15:	; £temporary3718 = 0
52:		mov t2240, 0
54:	

strftime$16:	; shortMonthList = £temporary3718
55:		mov [bp + 18], t2240
57:	

strftime$17:	; if localeConvPtr == 0 goto 21
58:		cmp word [bp + 14], 0
59:		je strftime$21
61:	

strftime$18:	; £temporary3720 -> localeConvPtr = *localeConvPtr, offset 6
62:		mov a2241, [bp + 14]
64:	

strftime$19:	; £temporary3724 = £temporary3720 -> localeConvPtr
65:		mov t2242, [a2241 + 6]
67:	

strftime$20:	; goto 22
68:		jmp strftime$22
70:	

strftime$21:	; £temporary3724 = 0
71:		mov t2243, 0
73:	

strftime$22:	; longDayList = £temporary3724
74:		mov [bp + 20], t2243
76:	

strftime$23:	; if localeConvPtr == 0 goto 27
77:		cmp word [bp + 14], 0
78:		je strftime$27
80:	

strftime$24:	; £temporary3726 -> localeConvPtr = *localeConvPtr, offset 10
81:		mov a2244, [bp + 14]
83:	

strftime$25:	; £temporary3730 = £temporary3726 -> localeConvPtr
84:		mov t2245, [a2244 + 10]
86:	

strftime$26:	; goto 28
87:		jmp strftime$28
89:	

strftime$27:	; £temporary3730 = 0
90:		mov t2246, 0
92:	

strftime$28:	; longMonthList = £temporary3730
93:		mov [bp + 22], t2246
95:	

strftime$29:	; call header integral zero 0 stack zero 0
97:	

strftime$30:	; parameter s, offset 6
98:		mov a2247, [bp + 6]
99:		mov [bp + 30], a2247
101:	

strftime$31:	; parameter string_#, offset 8
102:		mov word [bp + 32], string_#
104:	

strftime$32:	; call function noellipse-noellipse strcpy
105:		mov word [bp + 24], strftime$33
106:		mov [bp + 26], bp
107:		add bp, 24
108:		jmp strcpy
110:	

strftime$33:	; post call
112:	

strftime$34:	; if shortDayList == 0 goto 37
113:		cmp word [bp + 16], 0
114:		je strftime$37
116:	

strftime$35:	; £temporary3736 = shortDayList
117:		mov t2248, [bp + 16]
119:	

strftime$36:	; goto 38
120:		jmp strftime$38
122:	

strftime$37:	; £temporary3736 = g_defaultShortDayList
123:		mov t2249, @31$g_defaultShortDayList
125:	

strftime$38:	; shortDayList = £temporary3736
126:		mov [bp + 16], t2249
128:	

strftime$39:	; if longDayList == 0 goto 42
129:		cmp word [bp + 20], 0
130:		je strftime$42
132:	

strftime$40:	; £temporary3741 = longDayList
133:		mov t2250, [bp + 20]
135:	

strftime$41:	; goto 43
136:		jmp strftime$43
138:	

strftime$42:	; £temporary3741 = g_defaultLongDayList
139:		mov t2251, @32$g_defaultLongDayList
141:	

strftime$43:	; longDayList = £temporary3741
142:		mov [bp + 20], t2251
144:	

strftime$44:	; if shortMonthList == 0 goto 47
145:		cmp word [bp + 18], 0
146:		je strftime$47
148:	

strftime$45:	; £temporary3746 = shortMonthList
149:		mov t2252, [bp + 18]
151:	

strftime$46:	; goto 48
152:		jmp strftime$48
154:	

strftime$47:	; £temporary3746 = g_defaultShortMonthList
155:		mov t2253, @33$g_defaultShortMonthList
157:	

strftime$48:	; shortMonthList = £temporary3746
158:		mov [bp + 18], t2253
160:	

strftime$49:	; if longMonthList == 0 goto 52
161:		cmp word [bp + 22], 0
162:		je strftime$52
164:	

strftime$50:	; £temporary3751 = longMonthList
165:		mov t2254, [bp + 22]
167:	

strftime$51:	; goto 53
168:		jmp strftime$53
170:	

strftime$52:	; £temporary3751 = g_defaultLongMonthList
171:		mov t2255, @34$g_defaultLongMonthList
173:	

strftime$53:	; longMonthList = £temporary3751
174:		mov [bp + 22], t2255
176:	

strftime$54:	; £temporary3752 -> tp = *tp, offset 10
177:		mov a2256, [bp + 12]
179:	

strftime$55:	; £temporary3753 = £temporary3752 -> tp - 69
180:		mov t2257, [a2256 + 10]
181:		sub t2257, 69
183:	

strftime$56:	; leapDays = £temporary3753 / 4
185:		xor dx, dx
186:		idiv word [int2$4#]
187:		mov [bp + 24], ax
189:	

strftime$57:	; £temporary3755 -> tp = *tp, offset 10
190:		mov a2260, [bp + 12]
192:	

strftime$58:	; £temporary3756 = £temporary3755 -> tp - 70
193:		mov t2261, [a2260 + 10]
194:		sub t2261, 70
196:	

strftime$59:	; £temporary3757 = £temporary3756 * 365
198:		xor dx, dx
199:		imul word [int2$365#]
205:	

strftime$60:	; £temporary3758 = £temporary3757 + leapDays
206:		add t2264, [bp + 24]
208:	

strftime$61:	; £temporary3759 -> tp = *tp, offset 14
209:		mov a2265, [bp + 12]
211:	

strftime$62:	; £temporary3760 = £temporary3758 + £temporary3759 -> tp
212:		add t2264, [a2265 + 14]
214:	

strftime$63:	; £temporary3761 = int_to_int £temporary3760 (Signed_Int -> Signed_Long_Int)
216:		and t2264, 65535
218:		cmp t2264, 0
219:		jge strftime$64
220:		neg t2264
222:		neg t2264
224:	

strftime$64:	; totalDays = £temporary3761
225:		mov [bp + 26], t2264
227:	

strftime$65:	; if totalDays >= 3 goto 70
228:		cmp dword [bp + 26], 3
229:		jge strftime$70
231:	

strftime$66:	; £temporary3763 = totalDays + 4
232:		mov a2266, [bp + 26]
233:		add a2266, 4
235:	

strftime$67:	; £temporary3764 = int_to_int £temporary3763 (Signed_Long_Int -> Signed_Int)
238:		cmp a2266, 0
239:		jge strftime$68
240:		neg a2266
242:		neg a2266
244:	

strftime$68:	; yearDaySunday = £temporary3764
245:		mov [bp + 30], a2266
247:	

strftime$69:	; goto 74
248:		jmp strftime$74
250:	

strftime$70:	; £temporary3765 = totalDays - 3
251:		mov a2267, [bp + 26]
252:		sub a2267, 3
254:	

strftime$71:	; £temporary3766 = £temporary3765 % 7
256:		xor edx, edx
257:		idiv dword [int4$7#]
263:	

strftime$72:	; £temporary3767 = int_to_int £temporary3766 (Signed_Long_Int -> Signed_Int)
266:		cmp t2269, 0
267:		jge strftime$73
268:		neg t2269
270:		neg t2269
272:	

strftime$73:	; yearDaySunday = £temporary3767
273:		mov [bp + 30], t2269
275:	

strftime$74:	; if totalDays >= 4 goto 79
276:		cmp dword [bp + 26], 4
277:		jge strftime$79
279:	

strftime$75:	; £temporary3769 = totalDays + 3
280:		mov a2270, [bp + 26]
281:		add a2270, 3
283:	

strftime$76:	; £temporary3770 = int_to_int £temporary3769 (Signed_Long_Int -> Signed_Int)
286:		cmp a2270, 0
287:		jge strftime$77
288:		neg a2270
290:		neg a2270
292:	

strftime$77:	; yearDayMonday = £temporary3770
293:		mov [bp + 32], a2270
295:	

strftime$78:	; goto 83
296:		jmp strftime$83
298:	

strftime$79:	; £temporary3771 = totalDays - 4
299:		mov a2271, [bp + 26]
300:		sub a2271, 4
302:	

strftime$80:	; £temporary3772 = £temporary3771 % 7
304:		xor edx, edx
305:		idiv dword [int4$7#]
311:	

strftime$81:	; £temporary3773 = int_to_int £temporary3772 (Signed_Long_Int -> Signed_Int)
314:		cmp t2273, 0
315:		jge strftime$82
316:		neg t2273
318:		neg t2273
320:	

strftime$82:	; yearDayMonday = £temporary3773
321:		mov [bp + 32], t2273
323:	

strftime$83:	; index = 0
324:		mov word [bp + 34], 0
326:	

strftime$84:	; £temporary3775 = fmt + index
327:		mov a2274, [bp + 10]
328:		add a2274, [bp + 34]
330:	

strftime$85:	; £temporary3774 -> £temporary3775 = *£temporary3775
332:	

strftime$86:	; if £temporary3774 -> £temporary3775 == 0 goto 350
333:		cmp byte [a2274], 0
334:		je strftime$350
336:	

strftime$87:	; £temporary3779 = fmt + index
337:		mov a2275, [bp + 10]
338:		add a2275, [bp + 34]
340:	

strftime$88:	; £temporary3778 -> £temporary3779 = *£temporary3779
342:	

strftime$89:	; if £temporary3778 -> £temporary3779 != 37 goto 325
343:		cmp byte [a2275], 37
344:		jne strftime$325
346:	

strftime$90:	; £temporary3781 = index + 1
347:		mov a2276, [bp + 34]
348:		add a2276, 1
350:	

strftime$91:	; £temporary3783 = fmt + £temporary3781
351:		mov a2277, [bp + 10]
352:		add a2277, a2276
354:	

strftime$92:	; £temporary3782 -> £temporary3783 = *£temporary3783
355:		mov t2278, [a2277]
356:		mov [bp + 56], t2278
358:	

strftime$93:	; case £temporary3782 -> £temporary3783 == 97 goto 117
359:		mov t2279, [bp + 56]
360:		cmp t2279, 97
361:		je strftime$117
363:	

strftime$94:	; case £temporary3782 -> £temporary3783 == 65 goto 127
364:		cmp t2279, 65
365:		je strftime$127
367:	

strftime$95:	; case £temporary3782 -> £temporary3783 == 98 goto 137
368:		cmp t2279, 98
369:		je strftime$137
371:	

strftime$96:	; case £temporary3782 -> £temporary3783 == 66 goto 147
372:		cmp t2279, 66
373:		je strftime$147
375:	

strftime$97:	; case £temporary3782 -> £temporary3783 == 99 goto 157
376:		cmp t2279, 99
377:		je strftime$157
379:	

strftime$98:	; case £temporary3782 -> £temporary3783 == 100 goto 177
380:		cmp t2279, 100
381:		je strftime$177
383:	

strftime$99:	; case £temporary3782 -> £temporary3783 == 72 goto 185
384:		cmp t2279, 72
385:		je strftime$185
387:	

strftime$100:	; case £temporary3782 -> £temporary3783 == 73 goto 193
388:		cmp t2279, 73
389:		je strftime$193
391:	

strftime$101:	; case £temporary3782 -> £temporary3783 == 106 goto 202
392:		cmp t2279, 106
393:		je strftime$202
395:	

strftime$102:	; case £temporary3782 -> £temporary3783 == 109 goto 210
396:		cmp t2279, 109
397:		je strftime$210
399:	

strftime$103:	; case £temporary3782 -> £temporary3783 == 77 goto 219
400:		cmp t2279, 77
401:		je strftime$219
403:	

strftime$104:	; case £temporary3782 -> £temporary3783 == 112 goto 227
404:		cmp t2279, 112
405:		je strftime$227
407:	

strftime$105:	; case £temporary3782 -> £temporary3783 == 83 goto 239
408:		cmp t2279, 83
409:		je strftime$239
411:	

strftime$106:	; case £temporary3782 -> £temporary3783 == 85 goto 247
412:		cmp t2279, 85
413:		je strftime$247
415:	

strftime$107:	; case £temporary3782 -> £temporary3783 == 119 goto 254
416:		cmp t2279, 119
417:		je strftime$254
419:	

strftime$108:	; case £temporary3782 -> £temporary3783 == 87 goto 262
420:		cmp t2279, 87
421:		je strftime$262
423:	

strftime$109:	; case £temporary3782 -> £temporary3783 == 120 goto 269
424:		cmp t2279, 120
425:		je strftime$269
427:	

strftime$110:	; case £temporary3782 -> £temporary3783 == 88 goto 283
428:		cmp t2279, 88
429:		je strftime$283
431:	

strftime$111:	; case £temporary3782 -> £temporary3783 == 121 goto 295
432:		cmp t2279, 121
433:		je strftime$295
435:	

strftime$112:	; case £temporary3782 -> £temporary3783 == 89 goto 304
436:		cmp t2279, 89
437:		je strftime$304
439:	

strftime$113:	; case £temporary3782 -> £temporary3783 == 90 goto 313
440:		cmp t2279, 90
441:		je strftime$313
443:	

strftime$114:	; case £temporary3782 -> £temporary3783 == 37 goto 319
444:		cmp t2279, 37
445:		je strftime$319
447:	

strftime$115:	; case end £temporary3782 -> £temporary3783
449:	

strftime$116:	; goto 331
450:		jmp strftime$331
452:	

strftime$117:	; call header integral zero 0 stack zero 0
454:	

strftime$118:	; parameter add, offset 6
455:		mov [bp + 62], bp
456:		add word [bp + 62], 36
458:	

strftime$119:	; £temporary3784 -> tp = *tp, offset 12
459:		mov a2280, [bp + 12]
461:	

strftime$120:	; £temporary3786 = £temporary3784 -> tp * 2
462:		mov t2281, [a2280 + 12]
464:		xor dx, dx
465:		mul word [int2$2#]
471:	

strftime$121:	; £temporary3787 = shortDayList + £temporary3786
472:		mov a2285, [bp + 16]
473:		add a2285, t2284
475:	

strftime$122:	; £temporary3785 -> £temporary3787 = *£temporary3787
477:	

strftime$123:	; parameter £temporary3785 -> £temporary3787, offset 8
478:		mov t2286, [a2285]
479:		mov [bp + 64], t2286
481:	

strftime$124:	; call function noellipse-noellipse strcpy
482:		mov word [bp + 56], strftime$125
483:		mov [bp + 58], bp
484:		add bp, 56
485:		jmp strcpy
487:	

strftime$125:	; post call
489:	

strftime$126:	; goto 331
490:		jmp strftime$331
492:	

strftime$127:	; call header integral zero 0 stack zero 0
494:	

strftime$128:	; parameter add, offset 6
495:		mov [bp + 62], bp
496:		add word [bp + 62], 36
498:	

strftime$129:	; £temporary3789 -> tp = *tp, offset 12
499:		mov a2287, [bp + 12]
501:	

strftime$130:	; £temporary3791 = £temporary3789 -> tp * 2
502:		mov t2288, [a2287 + 12]
504:		xor dx, dx
505:		mul word [int2$2#]
511:	

strftime$131:	; £temporary3792 = longDayList + £temporary3791
512:		mov a2292, [bp + 20]
513:		add a2292, t2291
515:	

strftime$132:	; £temporary3790 -> £temporary3792 = *£temporary3792
517:	

strftime$133:	; parameter £temporary3790 -> £temporary3792, offset 8
518:		mov t2293, [a2292]
519:		mov [bp + 64], t2293
521:	

strftime$134:	; call function noellipse-noellipse strcpy
522:		mov word [bp + 56], strftime$135
523:		mov [bp + 58], bp
524:		add bp, 56
525:		jmp strcpy
527:	

strftime$135:	; post call
529:	

strftime$136:	; goto 331
530:		jmp strftime$331
532:	

strftime$137:	; call header integral zero 0 stack zero 0
534:	

strftime$138:	; parameter add, offset 6
535:		mov [bp + 62], bp
536:		add word [bp + 62], 36
538:	

strftime$139:	; £temporary3794 -> tp = *tp, offset 8
539:		mov a2294, [bp + 12]
541:	

strftime$140:	; £temporary3796 = £temporary3794 -> tp * 2
542:		mov t2295, [a2294 + 8]
544:		xor dx, dx
545:		mul word [int2$2#]
551:	

strftime$141:	; £temporary3797 = shortMonthList + £temporary3796
552:		mov a2299, [bp + 18]
553:		add a2299, t2298
555:	

strftime$142:	; £temporary3795 -> £temporary3797 = *£temporary3797
557:	

strftime$143:	; parameter £temporary3795 -> £temporary3797, offset 8
558:		mov t2300, [a2299]
559:		mov [bp + 64], t2300
561:	

strftime$144:	; call function noellipse-noellipse strcpy
562:		mov word [bp + 56], strftime$145
563:		mov [bp + 58], bp
564:		add bp, 56
565:		jmp strcpy
567:	

strftime$145:	; post call
569:	

strftime$146:	; goto 331
570:		jmp strftime$331
572:	

strftime$147:	; call header integral zero 0 stack zero 0
574:	

strftime$148:	; parameter add, offset 6
575:		mov [bp + 62], bp
576:		add word [bp + 62], 36
578:	

strftime$149:	; £temporary3799 -> tp = *tp, offset 8
579:		mov a2301, [bp + 12]
581:	

strftime$150:	; £temporary3801 = £temporary3799 -> tp * 2
582:		mov t2302, [a2301 + 8]
584:		xor dx, dx
585:		mul word [int2$2#]
591:	

strftime$151:	; £temporary3802 = longMonthList + £temporary3801
592:		mov a2306, [bp + 22]
593:		add a2306, t2305
595:	

strftime$152:	; £temporary3800 -> £temporary3802 = *£temporary3802
597:	

strftime$153:	; parameter £temporary3800 -> £temporary3802, offset 8
598:		mov t2307, [a2306]
599:		mov [bp + 64], t2307
601:	

strftime$154:	; call function noellipse-noellipse strcpy
602:		mov word [bp + 56], strftime$155
603:		mov [bp + 58], bp
604:		add bp, 56
605:		jmp strcpy
607:	

strftime$155:	; post call
609:	

strftime$156:	; goto 331
610:		jmp strftime$331
612:	

strftime$157:	; call header integral zero 0 stack zero 0
614:	

strftime$158:	; parameter add, offset 6
615:		mov [bp + 62], bp
616:		add word [bp + 62], 36
618:	

strftime$159:	; parameter string_2504d2D2502d2D2502d202502d3A2502d3A2502d#, offset 8
619:		mov word [bp + 64], string_2504d2D2502d2D2502d202502d3A2502d3A2502d#
621:	

strftime$160:	; £temporary3804 -> tp = *tp, offset 10
622:		mov a2308, [bp + 12]
624:	

strftime$161:	; £temporary3805 = £temporary3804 -> tp + 1900
625:		mov t2309, [a2308 + 10]
626:		add t2309, 1900
628:	

strftime$162:	; parameter £temporary3805, offset 10
629:		mov [bp + 66], t2309
631:	

strftime$163:	; £temporary3806 -> tp = *tp, offset 8
632:		mov a2310, [bp + 12]
634:	

strftime$164:	; £temporary3807 = £temporary3806 -> tp + 1
635:		mov t2311, [a2310 + 8]
636:		add t2311, 1
638:	

strftime$165:	; parameter £temporary3807, offset 12
639:		mov [bp + 68], t2311
641:	

strftime$166:	; £temporary3808 -> tp = *tp, offset 6
642:		mov a2312, [bp + 12]
644:	

strftime$167:	; parameter £temporary3808 -> tp, offset 14
645:		mov t2313, [a2312 + 6]
646:		mov [bp + 70], t2313
648:	

strftime$168:	; £temporary3809 -> tp = *tp, offset 4
649:		mov a2314, [bp + 12]
651:	

strftime$169:	; parameter £temporary3809 -> tp, offset 16
652:		mov t2315, [a2314 + 4]
653:		mov [bp + 72], t2315
655:	

strftime$170:	; £temporary3810 -> tp = *tp, offset 2
656:		mov a2316, [bp + 12]
658:	

strftime$171:	; parameter £temporary3810 -> tp, offset 18
659:		mov t2317, [a2316 + 2]
660:		mov [bp + 74], t2317
662:	

strftime$172:	; £temporary3811 -> tp = *tp
663:		mov a2318, [bp + 12]
665:	

strftime$173:	; parameter £temporary3811 -> tp, offset 20
666:		mov t2319, [a2318]
667:		mov [bp + 76], t2319
669:	

strftime$174:	; call function noellipse-ellipse sprintf, extra 0
670:		mov word [bp + 56], strftime$175
671:		mov [bp + 58], bp
672:		add bp, 56
673:		mov di, bp
674:		add di, 12
675:		jmp sprintf
677:	

strftime$175:	; post call
679:	

strftime$176:	; goto 331
680:		jmp strftime$331
682:	

strftime$177:	; call header integral zero 0 stack zero 0
684:	

strftime$178:	; parameter add, offset 6
685:		mov [bp + 62], bp
686:		add word [bp + 62], 36
688:	

strftime$179:	; parameter string_2502d#, offset 8
689:		mov word [bp + 64], string_2502d#
691:	

strftime$180:	; £temporary3813 -> tp = *tp, offset 6
692:		mov a2320, [bp + 12]
694:	

strftime$181:	; parameter £temporary3813 -> tp, offset 10
695:		mov t2321, [a2320 + 6]
696:		mov [bp + 66], t2321
698:	

strftime$182:	; call function noellipse-ellipse sprintf, extra 0
699:		mov word [bp + 56], strftime$183
700:		mov [bp + 58], bp
701:		add bp, 56
702:		mov di, bp
703:		add di, 2
704:		jmp sprintf
706:	

strftime$183:	; post call
708:	

strftime$184:	; goto 331
709:		jmp strftime$331
711:	

strftime$185:	; call header integral zero 0 stack zero 0
713:	

strftime$186:	; parameter add, offset 6
714:		mov [bp + 62], bp
715:		add word [bp + 62], 36
717:	

strftime$187:	; parameter string_2502d#, offset 8
718:		mov word [bp + 64], string_2502d#
720:	

strftime$188:	; £temporary3815 -> tp = *tp, offset 4
721:		mov a2322, [bp + 12]
723:	

strftime$189:	; parameter £temporary3815 -> tp, offset 10
724:		mov t2323, [a2322 + 4]
725:		mov [bp + 66], t2323
727:	

strftime$190:	; call function noellipse-ellipse sprintf, extra 0
728:		mov word [bp + 56], strftime$191
729:		mov [bp + 58], bp
730:		add bp, 56
731:		mov di, bp
732:		add di, 2
733:		jmp sprintf
735:	

strftime$191:	; post call
737:	

strftime$192:	; goto 331
738:		jmp strftime$331
740:	

strftime$193:	; call header integral zero 0 stack zero 0
742:	

strftime$194:	; parameter add, offset 6
743:		mov [bp + 62], bp
744:		add word [bp + 62], 36
746:	

strftime$195:	; parameter string_2502d#, offset 8
747:		mov word [bp + 64], string_2502d#
749:	

strftime$196:	; £temporary3817 -> tp = *tp, offset 4
750:		mov a2324, [bp + 12]
752:	

strftime$197:	; £temporary3818 = £temporary3817 -> tp % 12
753:		mov t2325, [a2324 + 4]
755:		xor dx, dx
756:		idiv word [int2$12#]
762:	

strftime$198:	; parameter £temporary3818, offset 10
763:		mov [bp + 66], t2327
765:	

strftime$199:	; call function noellipse-ellipse sprintf, extra 0
766:		mov word [bp + 56], strftime$200
767:		mov [bp + 58], bp
768:		add bp, 56
769:		mov di, bp
770:		add di, 2
771:		jmp sprintf
773:	

strftime$200:	; post call
775:	

strftime$201:	; goto 331
776:		jmp strftime$331
778:	

strftime$202:	; call header integral zero 0 stack zero 0
780:	

strftime$203:	; parameter add, offset 6
781:		mov [bp + 62], bp
782:		add word [bp + 62], 36
784:	

strftime$204:	; parameter string_2503d#, offset 8
785:		mov word [bp + 64], string_2503d#
787:	

strftime$205:	; £temporary3820 -> tp = *tp, offset 14
788:		mov a2328, [bp + 12]
790:	

strftime$206:	; parameter £temporary3820 -> tp, offset 10
791:		mov t2329, [a2328 + 14]
792:		mov [bp + 66], t2329
794:	

strftime$207:	; call function noellipse-ellipse sprintf, extra 0
795:		mov word [bp + 56], strftime$208
796:		mov [bp + 58], bp
797:		add bp, 56
798:		mov di, bp
799:		add di, 2
800:		jmp sprintf
802:	

strftime$208:	; post call
804:	

strftime$209:	; goto 331
805:		jmp strftime$331
807:	

strftime$210:	; call header integral zero 0 stack zero 0
809:	

strftime$211:	; parameter add, offset 6
810:		mov [bp + 62], bp
811:		add word [bp + 62], 36
813:	

strftime$212:	; parameter string_2502d#, offset 8
814:		mov word [bp + 64], string_2502d#
816:	

strftime$213:	; £temporary3822 -> tp = *tp, offset 8
817:		mov a2330, [bp + 12]
819:	

strftime$214:	; £temporary3823 = £temporary3822 -> tp + 1
820:		mov t2331, [a2330 + 8]
821:		add t2331, 1
823:	

strftime$215:	; parameter £temporary3823, offset 10
824:		mov [bp + 66], t2331
826:	

strftime$216:	; call function noellipse-ellipse sprintf, extra 0
827:		mov word [bp + 56], strftime$217
828:		mov [bp + 58], bp
829:		add bp, 56
830:		mov di, bp
831:		add di, 2
832:		jmp sprintf
834:	

strftime$217:	; post call
836:	

strftime$218:	; goto 331
837:		jmp strftime$331
839:	

strftime$219:	; call header integral zero 0 stack zero 0
841:	

strftime$220:	; parameter add, offset 6
842:		mov [bp + 62], bp
843:		add word [bp + 62], 36
845:	

strftime$221:	; parameter string_2502d#, offset 8
846:		mov word [bp + 64], string_2502d#
848:	

strftime$222:	; £temporary3825 -> tp = *tp, offset 2
849:		mov a2332, [bp + 12]
851:	

strftime$223:	; parameter £temporary3825 -> tp, offset 10
852:		mov t2333, [a2332 + 2]
853:		mov [bp + 66], t2333
855:	

strftime$224:	; call function noellipse-ellipse sprintf, extra 0
856:		mov word [bp + 56], strftime$225
857:		mov [bp + 58], bp
858:		add bp, 56
859:		mov di, bp
860:		add di, 2
861:		jmp sprintf
863:	

strftime$225:	; post call
865:	

strftime$226:	; goto 331
866:		jmp strftime$331
868:	

strftime$227:	; call header integral zero 0 stack zero 0
870:	

strftime$228:	; parameter add, offset 6
871:		mov [bp + 62], bp
872:		add word [bp + 62], 36
874:	

strftime$229:	; parameter string_25s#, offset 8
875:		mov word [bp + 64], string_25s#
877:	

strftime$230:	; £temporary3827 -> tp = *tp, offset 4
878:		mov a2334, [bp + 12]
880:	

strftime$231:	; if £temporary3827 -> tp >= 12 goto 234
881:		cmp word [a2334 + 4], 12
882:		jge strftime$234
884:	

strftime$232:	; £temporary3832 = string_AM#
885:		mov t2335, string_AM#
887:	

strftime$233:	; goto 235
888:		jmp strftime$235
890:	

strftime$234:	; £temporary3832 = string_PM#
891:		mov t2336, string_PM#
893:	

strftime$235:	; parameter £temporary3832, offset 10
894:		mov [bp + 66], t2336
896:	

strftime$236:	; call function noellipse-ellipse sprintf, extra 0
897:		mov word [bp + 56], strftime$237
898:		mov [bp + 58], bp
899:		add bp, 56
900:		mov di, bp
901:		add di, 2
902:		jmp sprintf
904:	

strftime$237:	; post call
906:	

strftime$238:	; goto 331
907:		jmp strftime$331
909:	

strftime$239:	; call header integral zero 0 stack zero 0
911:	

strftime$240:	; parameter add, offset 6
912:		mov [bp + 62], bp
913:		add word [bp + 62], 36
915:	

strftime$241:	; parameter string_2502d#, offset 8
916:		mov word [bp + 64], string_2502d#
918:	

strftime$242:	; £temporary3834 -> tp = *tp
919:		mov a2337, [bp + 12]
921:	

strftime$243:	; parameter £temporary3834 -> tp, offset 10
922:		mov t2338, [a2337]
923:		mov [bp + 66], t2338
925:	

strftime$244:	; call function noellipse-ellipse sprintf, extra 0
926:		mov word [bp + 56], strftime$245
927:		mov [bp + 58], bp
928:		add bp, 56
929:		mov di, bp
930:		add di, 2
931:		jmp sprintf
933:	

strftime$245:	; post call
935:	

strftime$246:	; goto 331
936:		jmp strftime$331
938:	

strftime$247:	; call header integral zero 0 stack zero 0
940:	

strftime$248:	; parameter add, offset 6
941:		mov [bp + 62], bp
942:		add word [bp + 62], 36
944:	

strftime$249:	; parameter string_2502d#, offset 8
945:		mov word [bp + 64], string_2502d#
947:	

strftime$250:	; parameter yearDaySunday, offset 10
948:		mov a2339, [bp + 30]
949:		mov [bp + 66], a2339
951:	

strftime$251:	; call function noellipse-ellipse sprintf, extra 0
952:		mov word [bp + 56], strftime$252
953:		mov [bp + 58], bp
954:		add bp, 56
955:		mov di, bp
956:		add di, 2
957:		jmp sprintf
959:	

strftime$252:	; post call
961:	

strftime$253:	; goto 331
962:		jmp strftime$331
964:	

strftime$254:	; call header integral zero 0 stack zero 0
966:	

strftime$255:	; parameter add, offset 6
967:		mov [bp + 62], bp
968:		add word [bp + 62], 36
970:	

strftime$256:	; parameter string_2502d#, offset 8
971:		mov word [bp + 64], string_2502d#
973:	

strftime$257:	; £temporary3837 -> tp = *tp, offset 12
974:		mov a2340, [bp + 12]
976:	

strftime$258:	; parameter £temporary3837 -> tp, offset 10
977:		mov t2341, [a2340 + 12]
978:		mov [bp + 66], t2341
980:	

strftime$259:	; call function noellipse-ellipse sprintf, extra 0
981:		mov word [bp + 56], strftime$260
982:		mov [bp + 58], bp
983:		add bp, 56
984:		mov di, bp
985:		add di, 2
986:		jmp sprintf
988:	

strftime$260:	; post call
990:	

strftime$261:	; goto 331
991:		jmp strftime$331
993:	

strftime$262:	; call header integral zero 0 stack zero 0
995:	

strftime$263:	; parameter add, offset 6
996:		mov [bp + 62], bp
997:		add word [bp + 62], 36
999:	

strftime$264:	; parameter string_2502d#, offset 8
1000:		mov word [bp + 64], string_2502d#
1002:	

strftime$265:	; parameter yearDayMonday, offset 10
1003:		mov a2342, [bp + 32]
1004:		mov [bp + 66], a2342
1006:	

strftime$266:	; call function noellipse-ellipse sprintf, extra 0
1007:		mov word [bp + 56], strftime$267
1008:		mov [bp + 58], bp
1009:		add bp, 56
1010:		mov di, bp
1011:		add di, 2
1012:		jmp sprintf
1014:	

strftime$267:	; post call
1016:	

strftime$268:	; goto 331
1017:		jmp strftime$331
1019:	

strftime$269:	; call header integral zero 0 stack zero 0
1021:	

strftime$270:	; parameter add, offset 6
1022:		mov [bp + 62], bp
1023:		add word [bp + 62], 36
1025:	

strftime$271:	; parameter string_2504d2D2502d2D2502d#, offset 8
1026:		mov word [bp + 64], string_2504d2D2502d2D2502d#
1028:	

strftime$272:	; £temporary3840 -> tp = *tp, offset 10
1029:		mov a2343, [bp + 12]
1031:	

strftime$273:	; £temporary3841 = £temporary3840 -> tp + 1900
1032:		mov t2344, [a2343 + 10]
1033:		add t2344, 1900
1035:	

strftime$274:	; parameter £temporary3841, offset 10
1036:		mov [bp + 66], t2344
1038:	

strftime$275:	; £temporary3842 -> tp = *tp, offset 8
1039:		mov a2345, [bp + 12]
1041:	

strftime$276:	; £temporary3843 = £temporary3842 -> tp + 1
1042:		mov t2346, [a2345 + 8]
1043:		add t2346, 1
1045:	

strftime$277:	; parameter £temporary3843, offset 12
1046:		mov [bp + 68], t2346
1048:	

strftime$278:	; £temporary3844 -> tp = *tp, offset 6
1049:		mov a2347, [bp + 12]
1051:	

strftime$279:	; parameter £temporary3844 -> tp, offset 14
1052:		mov t2348, [a2347 + 6]
1053:		mov [bp + 70], t2348
1055:	

strftime$280:	; call function noellipse-ellipse sprintf, extra 0
1056:		mov word [bp + 56], strftime$281
1057:		mov [bp + 58], bp
1058:		add bp, 56
1059:		mov di, bp
1060:		add di, 6
1061:		jmp sprintf
1063:	

strftime$281:	; post call
1065:	

strftime$282:	; goto 331
1066:		jmp strftime$331
1068:	

strftime$283:	; call header integral zero 0 stack zero 0
1070:	

strftime$284:	; parameter add, offset 6
1071:		mov [bp + 62], bp
1072:		add word [bp + 62], 36
1074:	

strftime$285:	; parameter string_2502d3A2502d3A2502d#, offset 8
1075:		mov word [bp + 64], string_2502d3A2502d3A2502d#
1077:	

strftime$286:	; £temporary3846 -> tp = *tp, offset 4
1078:		mov a2349, [bp + 12]
1080:	

strftime$287:	; parameter £temporary3846 -> tp, offset 10
1081:		mov t2350, [a2349 + 4]
1082:		mov [bp + 66], t2350
1084:	

strftime$288:	; £temporary3847 -> tp = *tp, offset 2
1085:		mov a2351, [bp + 12]
1087:	

strftime$289:	; parameter £temporary3847 -> tp, offset 12
1088:		mov t2352, [a2351 + 2]
1089:		mov [bp + 68], t2352
1091:	

strftime$290:	; £temporary3848 -> tp = *tp
1092:		mov a2353, [bp + 12]
1094:	

strftime$291:	; parameter £temporary3848 -> tp, offset 14
1095:		mov t2354, [a2353]
1096:		mov [bp + 70], t2354
1098:	

strftime$292:	; call function noellipse-ellipse sprintf, extra 0
1099:		mov word [bp + 56], strftime$293
1100:		mov [bp + 58], bp
1101:		add bp, 56
1102:		mov di, bp
1103:		add di, 6
1104:		jmp sprintf
1106:	

strftime$293:	; post call
1108:	

strftime$294:	; goto 331
1109:		jmp strftime$331
1111:	

strftime$295:	; call header integral zero 0 stack zero 0
1113:	

strftime$296:	; parameter add, offset 6
1114:		mov [bp + 62], bp
1115:		add word [bp + 62], 36
1117:	

strftime$297:	; parameter string_2502d#, offset 8
1118:		mov word [bp + 64], string_2502d#
1120:	

strftime$298:	; £temporary3850 -> tp = *tp, offset 10
1121:		mov a2355, [bp + 12]
1123:	

strftime$299:	; £temporary3851 = £temporary3850 -> tp % 100
1124:		mov t2356, [a2355 + 10]
1126:		xor dx, dx
1127:		idiv word [int2$100#]
1133:	

strftime$300:	; parameter £temporary3851, offset 10
1134:		mov [bp + 66], t2358
1136:	

strftime$301:	; call function noellipse-ellipse sprintf, extra 0
1137:		mov word [bp + 56], strftime$302
1138:		mov [bp + 58], bp
1139:		add bp, 56
1140:		mov di, bp
1141:		add di, 2
1142:		jmp sprintf
1144:	

strftime$302:	; post call
1146:	

strftime$303:	; goto 331
1147:		jmp strftime$331
1149:	

strftime$304:	; call header integral zero 0 stack zero 0
1151:	

strftime$305:	; parameter add, offset 6
1152:		mov [bp + 62], bp
1153:		add word [bp + 62], 36
1155:	

strftime$306:	; parameter string_2504d#, offset 8
1156:		mov word [bp + 64], string_2504d#
1158:	

strftime$307:	; £temporary3853 -> tp = *tp, offset 10
1159:		mov a2359, [bp + 12]
1161:	

strftime$308:	; £temporary3854 = £temporary3853 -> tp + 1900
1162:		mov t2360, [a2359 + 10]
1163:		add t2360, 1900
1165:	

strftime$309:	; parameter £temporary3854, offset 10
1166:		mov [bp + 66], t2360
1168:	

strftime$310:	; call function noellipse-ellipse sprintf, extra 0
1169:		mov word [bp + 56], strftime$311
1170:		mov [bp + 58], bp
1171:		add bp, 56
1172:		mov di, bp
1173:		add di, 2
1174:		jmp sprintf
1176:	

strftime$311:	; post call
1178:	

strftime$312:	; goto 331
1179:		jmp strftime$331
1181:	

strftime$313:	; call header integral zero 0 stack zero 0
1183:	

strftime$314:	; parameter add, offset 6
1184:		mov [bp + 62], bp
1185:		add word [bp + 62], 36
1187:	

strftime$315:	; parameter string_#, offset 8
1188:		mov word [bp + 64], string_#
1190:	

strftime$316:	; call function noellipse-noellipse strcpy
1191:		mov word [bp + 56], strftime$317
1192:		mov [bp + 58], bp
1193:		add bp, 56
1194:		jmp strcpy
1196:	

strftime$317:	; post call
1198:	

strftime$318:	; goto 331
1199:		jmp strftime$331
1201:	

strftime$319:	; call header integral zero 0 stack zero 0
1203:	

strftime$320:	; parameter add, offset 6
1204:		mov [bp + 62], bp
1205:		add word [bp + 62], 36
1207:	

strftime$321:	; parameter string_25#, offset 8
1208:		mov word [bp + 64], string_25#
1210:	

strftime$322:	; call function noellipse-noellipse strcpy
1211:		mov word [bp + 56], strftime$323
1212:		mov [bp + 58], bp
1213:		add bp, 56
1214:		jmp strcpy
1216:	

strftime$323:	; post call
1218:	

strftime$324:	; goto 331
1219:		jmp strftime$331
1221:	

strftime$325:	; £temporary3858 -> add = *add
1222:		mov a2361, bp
1223:		add a2361, 36
1225:	

strftime$326:	; £temporary3860 = fmt + index
1226:		mov a2362, [bp + 10]
1227:		add a2362, [bp + 34]
1229:	

strftime$327:	; £temporary3859 -> £temporary3860 = *£temporary3860
1231:	

strftime$328:	; £temporary3858 -> add = £temporary3859 -> £temporary3860
1232:		mov t2363, [a2362]
1233:		mov [a2361], t2363
1235:	

strftime$329:	; £temporary3861 -> add = *add, offset 1
1236:		mov a2364, bp
1237:		add a2364, 36
1239:	

strftime$330:	; £temporary3861 -> add = 0
1240:		mov byte [a2364 + 1], 0
1242:	

strftime$331:	; call header integral zero 0 stack zero 0
1244:	

strftime$332:	; parameter s, offset 6
1245:		mov a2365, [bp + 6]
1246:		mov [bp + 62], a2365
1248:	

strftime$333:	; call function noellipse-noellipse strlen
1249:		mov word [bp + 56], strftime$334
1250:		mov [bp + 58], bp
1251:		add bp, 56
1252:		jmp strlen
1254:	

strftime$334:	; post call
1256:	

strftime$335:	; £temporary3862 = return_value
1261:	

strftime$336:	; call header integral no zero 1 stack zero 0
1262:		mov [bp + 56], t2367
1264:	

strftime$337:	; parameter add, offset 6
1265:		mov [bp + 64], bp
1266:		add word [bp + 64], 36
1268:	

strftime$338:	; call function noellipse-noellipse strlen
1269:		mov word [bp + 58], strftime$339
1270:		mov [bp + 60], bp
1271:		add bp, 58
1272:		jmp strlen
1274:	

strftime$339:	; post call
1275:		mov t2367, [bp + 56]
1277:		mov t2368, t2367
1279:	

strftime$340:	; £temporary3863 = return_value
1284:	

strftime$341:	; £temporary3864 = £temporary3862 + £temporary3863
1285:		add t2368, t2370
1287:	

strftime$342:	; if £temporary3864 >= smax goto 350
1288:		cmp t2368, [bp + 8]
1289:		jge strftime$350
1291:	

strftime$343:	; call header integral zero 0 stack zero 0
1293:	

strftime$344:	; parameter s, offset 6
1294:		mov a2371, [bp + 6]
1295:		mov [bp + 62], a2371
1297:	

strftime$345:	; parameter add, offset 8
1298:		mov [bp + 64], bp
1299:		add word [bp + 64], 36
1301:	

strftime$346:	; call function noellipse-noellipse strcat
1302:		mov word [bp + 56], strftime$347
1303:		mov [bp + 58], bp
1304:		add bp, 56
1305:		jmp strcat
1307:	

strftime$347:	; post call
1309:	

strftime$348:	; ++index
1310:		inc word [bp + 34]
1312:	

strftime$349:	; goto 84
1313:		jmp strftime$84
1315:	

strftime$350:	; call header integral zero 0 stack zero 0
1317:	

strftime$351:	; parameter s, offset 6
1318:		mov a2372, [bp + 6]
1319:		mov [bp + 42], a2372
1321:	

strftime$352:	; call function noellipse-noellipse strlen
1322:		mov word [bp + 36], strftime$353
1323:		mov [bp + 38], bp
1324:		add bp, 36
1325:		jmp strlen
1327:	

strftime$353:	; post call
1329:	

strftime$354:	; £temporary3867 = return_value
1334:	

strftime$355:	; return_value = £temporary3867
1336:	

strftime$356:	; return
1337:		mov t2375, [bp]
1338:		mov di, [bp + 4]
1339:		mov bp, [bp + 2]
1340:		jmp t2375
1342:	

strftime$357:	; function end strftime
