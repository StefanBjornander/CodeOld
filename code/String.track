1:	

strcpy:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; BinaryAdd £temporary3698 source index
5:		mov a2149, [bp + 8]
6:		add a2149, [bp + 10]
8:	

strcpy$2:	; Deref £temporary3697 -> £temporary3698 £temporary3698 0
10:	

strcpy$3:	; Equal 11 £temporary3697 -> £temporary3698 0
11:		cmp byte [a2149], 0
12:		je strcpy$11
14:	

strcpy$4:	; BinaryAdd £temporary3702 target index
15:		mov a2150, [bp + 6]
16:		add a2150, [bp + 10]
18:	

strcpy$5:	; Deref £temporary3701 -> £temporary3702 £temporary3702 0
20:	

strcpy$6:	; BinaryAdd £temporary3704 source index
21:		mov a2151, [bp + 8]
22:		add a2151, [bp + 10]
24:	

strcpy$7:	; Deref £temporary3703 -> £temporary3704 £temporary3704 0
26:	

strcpy$8:	; Assign £temporary3701 -> £temporary3702 £temporary3703 -> £temporary3704
27:		mov t2152, [a2151]
28:		mov [a2150], t2152
30:	

strcpy$9:	; Increment index
31:		inc word [bp + 10]
33:	

strcpy$10:	; Goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; BinaryAdd £temporary3706 target index
37:		mov a2153, [bp + 6]
38:		add a2153, [bp + 10]
40:	

strcpy$12:	; Deref £temporary3705 -> £temporary3706 £temporary3706 0
42:	

strcpy$13:	; Assign £temporary3705 -> £temporary3706 0
43:		mov byte [a2153], 0
45:	

strcpy$14:	; SetReturnValue target
46:		mov a2154, [bp + 6]
48:	

strcpy$15:	; Return target
49:		mov t2155, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2155
54:	

strcpy$16:	; FunctionEnd strcpy
1:	

strncpy:	; Assign index 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; SignedGreaterThanEqual 12 index size
5:		mov a2156, [bp + 10]
6:		cmp [bp + 12], a2156
7:		jge strncpy$12
9:	

strncpy$2:	; BinaryAdd £temporary3709 source index
10:		mov a2157, [bp + 8]
11:		add a2157, [bp + 12]
13:	

strncpy$3:	; Deref £temporary3708 -> £temporary3709 £temporary3709 0
15:	

strncpy$4:	; Equal 12 £temporary3708 -> £temporary3709 0
16:		cmp byte [a2157], 0
17:		je strncpy$12
19:	

strncpy$5:	; BinaryAdd £temporary3714 target index
20:		mov a2158, [bp + 6]
21:		add a2158, [bp + 12]
23:	

strncpy$6:	; Deref £temporary3713 -> £temporary3714 £temporary3714 0
25:	

strncpy$7:	; BinaryAdd £temporary3716 source index
26:		mov a2159, [bp + 8]
27:		add a2159, [bp + 12]
29:	

strncpy$8:	; Deref £temporary3715 -> £temporary3716 £temporary3716 0
31:	

strncpy$9:	; Assign £temporary3713 -> £temporary3714 £temporary3715 -> £temporary3716
32:		mov t2160, [a2159]
33:		mov [a2158], t2160
35:	

strncpy$10:	; Increment index
36:		inc word [bp + 12]
38:	

strncpy$11:	; Goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; SignedGreaterThanEqual 18 index size
42:		mov a2161, [bp + 10]
43:		cmp [bp + 12], a2161
44:		jge strncpy$18
46:	

strncpy$13:	; BinaryAdd £temporary3720 target index
47:		mov a2162, [bp + 6]
48:		add a2162, [bp + 12]
50:	

strncpy$14:	; Deref £temporary3719 -> £temporary3720 £temporary3720 0
52:	

strncpy$15:	; Assign £temporary3719 -> £temporary3720 0
53:		mov byte [a2162], 0
55:	

strncpy$16:	; Increment index
56:		inc word [bp + 12]
58:	

strncpy$17:	; Goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; SetReturnValue target
62:		mov a2163, [bp + 6]
64:	

strncpy$19:	; Return target
65:		mov t2164, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t2164
70:	

strncpy$20:	; FunctionEnd strncpy
1:	

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strcat$1:	; Parameter 12 target 6
4:		mov a2165, [bp + 6]
5:		mov [bp + 18], a2165
7:	

strcat$2:	; Call 12 strlen 0
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; PostCall 12
15:	

strcat$4:	; GetReturnValue £temporary3721
17:	

strcat$5:	; Assign targetLength £temporary3721
18:		mov [bp + 12], type2166
20:	

strcat$6:	; Assign index 0
21:		mov word [bp + 10], 0
23:	

strcat$7:	; BinaryAdd £temporary3723 source index
24:		mov a2167, [bp + 8]
25:		add a2167, [bp + 10]
27:	

strcat$8:	; Deref £temporary3722 -> £temporary3723 £temporary3723 0
29:	

strcat$9:	; Equal 18 £temporary3722 -> £temporary3723 0
30:		cmp byte [a2167], 0
31:		je strcat$18
33:	

strcat$10:	; BinaryAdd £temporary3726 targetLength index
34:		mov a2168, [bp + 12]
35:		add a2168, [bp + 10]
37:	

strcat$11:	; BinaryAdd £temporary3728 target £temporary3726
38:		mov a2169, [bp + 6]
39:		add a2169, a2168
41:	

strcat$12:	; Deref £temporary3727 -> £temporary3728 £temporary3728 0
43:	

strcat$13:	; BinaryAdd £temporary3730 source index
44:		mov a2170, [bp + 8]
45:		add a2170, [bp + 10]
47:	

strcat$14:	; Deref £temporary3729 -> £temporary3730 £temporary3730 0
49:	

strcat$15:	; Assign £temporary3727 -> £temporary3728 £temporary3729 -> £temporary3730
50:		mov t2171, [a2170]
51:		mov [a2169], t2171
53:	

strcat$16:	; Increment index
54:		inc word [bp + 10]
56:	

strcat$17:	; Goto 7
57:		jmp strcat$7
59:	

strcat$18:	; BinaryAdd £temporary3731 targetLength index
60:		mov a2172, [bp + 12]
61:		add a2172, [bp + 10]
63:	

strcat$19:	; BinaryAdd £temporary3733 target £temporary3731
64:		mov a2173, [bp + 6]
65:		add a2173, a2172
67:	

strcat$20:	; Deref £temporary3732 -> £temporary3733 £temporary3733 0
69:	

strcat$21:	; Assign £temporary3732 -> £temporary3733 0
70:		mov byte [a2173], 0
72:	

strcat$22:	; SetReturnValue target
73:		mov a2174, [bp + 6]
75:	

strcat$23:	; Return target
76:		mov t2175, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2175
81:	

strcat$24:	; FunctionEnd strcat
1:	

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strncat$1:	; Parameter 14 target 6
4:		mov a2176, [bp + 6]
5:		mov [bp + 20], a2176
7:	

strncat$2:	; Call 14 strlen 0
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; PostCall 14
15:	

strncat$4:	; GetReturnValue £temporary3735
17:	

strncat$5:	; Assign targetLength £temporary3735
18:		mov [bp + 14], type2177
20:	

strncat$6:	; Assign index 0
21:		mov word [bp + 12], 0
23:	

strncat$7:	; BinarySubtract £temporary3736 size 1
24:		mov a2178, [bp + 10]
25:		sub a2178, 1
27:	

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3736
28:		cmp [bp + 12], a2178
29:		jge strncat$20
31:	

strncat$9:	; BinaryAdd £temporary3739 source index
32:		mov a2179, [bp + 8]
33:		add a2179, [bp + 12]
35:	

strncat$10:	; Deref £temporary3738 -> £temporary3739 £temporary3739 0
37:	

strncat$11:	; Equal 20 £temporary3738 -> £temporary3739 0
38:		cmp byte [a2179], 0
39:		je strncat$20
41:	

strncat$12:	; BinaryAdd £temporary3743 targetLength index
42:		mov a2180, [bp + 14]
43:		add a2180, [bp + 12]
45:	

strncat$13:	; BinaryAdd £temporary3745 target £temporary3743
46:		mov a2181, [bp + 6]
47:		add a2181, a2180
49:	

strncat$14:	; Deref £temporary3744 -> £temporary3745 £temporary3745 0
51:	

strncat$15:	; BinaryAdd £temporary3747 source index
52:		mov a2182, [bp + 8]
53:		add a2182, [bp + 12]
55:	

strncat$16:	; Deref £temporary3746 -> £temporary3747 £temporary3747 0
57:	

strncat$17:	; Assign £temporary3744 -> £temporary3745 £temporary3746 -> £temporary3747
58:		mov t2183, [a2182]
59:		mov [a2181], t2183
61:	

strncat$18:	; Increment index
62:		inc word [bp + 12]
64:	

strncat$19:	; Goto 7
65:		jmp strncat$7
67:	

strncat$20:	; BinaryAdd £temporary3748 targetLength size
68:		mov a2184, [bp + 14]
69:		add a2184, [bp + 10]
71:	

strncat$21:	; BinarySubtract £temporary3749 £temporary3748 1
72:		sub a2184, 1
74:	

strncat$22:	; BinaryAdd £temporary3751 target £temporary3749
75:		mov a2185, [bp + 6]
76:		add a2185, a2184
78:	

strncat$23:	; Deref £temporary3750 -> £temporary3751 £temporary3751 0
80:	

strncat$24:	; Assign £temporary3750 -> £temporary3751 0
81:		mov byte [a2185], 0
83:	

strncat$25:	; SetReturnValue target
84:		mov a2186, [bp + 6]
86:	

strncat$26:	; Return target
87:		mov t2187, [bp]
88:		mov di, [bp + 4]
89:		mov bp, [bp + 2]
90:		jmp t2187
92:	

strncat$27:	; FunctionEnd strncat
1:	

strcmp:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; BinaryAdd £temporary3755 left index
5:		mov a2188, [bp + 6]
6:		add a2188, [bp + 10]
8:	

strcmp$2:	; Deref £temporary3754 -> £temporary3755 £temporary3755 0
10:	

strcmp$3:	; NotEqual 9 £temporary3754 -> £temporary3755 0
11:		cmp byte [a2188], 0
12:		jne strcmp$9
14:	

strcmp$4:	; BinaryAdd £temporary3758 right index
15:		mov a2189, [bp + 8]
16:		add a2189, [bp + 10]
18:	

strcmp$5:	; Deref £temporary3757 -> £temporary3758 £temporary3758 0
20:	

strcmp$6:	; NotEqual 9 £temporary3757 -> £temporary3758 0
21:		cmp byte [a2189], 0
22:		jne strcmp$9
24:	

strcmp$7:	; SetReturnValue 0
25:		mov a2190, 0
27:	

strcmp$8:	; Return 0
28:		mov t2191, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp t2191
33:	

strcmp$9:	; BinaryAdd £temporary3762 left index
34:		mov a2192, [bp + 6]
35:		add a2192, [bp + 10]
37:	

strcmp$10:	; Deref £temporary3761 -> £temporary3762 £temporary3762 0
39:	

strcmp$11:	; BinaryAdd £temporary3764 right index
40:		mov a2193, [bp + 8]
41:		add a2193, [bp + 10]
43:	

strcmp$12:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0
45:	

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3761 -> £temporary3762 £temporary3763 -> £temporary3764
46:		mov t2194, [a2193]
47:		cmp [a2192], t2194
48:		jge strcmp$16
50:	

strcmp$14:	; SetReturnValue -1
51:		mov a2195, -1
53:	

strcmp$15:	; Return -1
54:		mov t2196, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp t2196
59:	

strcmp$16:	; BinaryAdd £temporary3767 left index
60:		mov a2197, [bp + 6]
61:		add a2197, [bp + 10]
63:	

strcmp$17:	; Deref £temporary3766 -> £temporary3767 £temporary3767 0
65:	

strcmp$18:	; BinaryAdd £temporary3769 right index
66:		mov a2198, [bp + 8]
67:		add a2198, [bp + 10]
69:	

strcmp$19:	; Deref £temporary3768 -> £temporary3769 £temporary3769 0
71:	

strcmp$20:	; SignedLessThanEqual 23 £temporary3766 -> £temporary3767 £temporary3768 -> £temporary3769
72:		mov t2199, [a2198]
73:		cmp [a2197], t2199
74:		jle strcmp$23
76:	

strcmp$21:	; SetReturnValue 1
77:		mov a2200, 1
79:	

strcmp$22:	; Return 1
80:		mov t2201, [bp]
81:		mov di, [bp + 4]
82:		mov bp, [bp + 2]
83:		jmp t2201
85:	

strcmp$23:	; Increment index
86:		inc word [bp + 10]
88:	

strcmp$24:	; Goto 1
89:		jmp strcmp$1
91:	

strcmp$25:	; FunctionEnd strcmp
1:	

strncmp:	; Assign index 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; SignedGreaterThanEqual 26 index size
5:		mov a2202, [bp + 10]
6:		cmp [bp + 12], a2202
7:		jge strncmp$26
9:	

strncmp$2:	; BinaryAdd £temporary3775 left index
10:		mov a2203, [bp + 6]
11:		add a2203, [bp + 12]
13:	

strncmp$3:	; Deref £temporary3774 -> £temporary3775 £temporary3775 0
15:	

strncmp$4:	; NotEqual 10 £temporary3774 -> £temporary3775 0
16:		cmp byte [a2203], 0
17:		jne strncmp$10
19:	

strncmp$5:	; BinaryAdd £temporary3778 right index
20:		mov a2204, [bp + 8]
21:		add a2204, [bp + 12]
23:	

strncmp$6:	; Deref £temporary3777 -> £temporary3778 £temporary3778 0
25:	

strncmp$7:	; NotEqual 10 £temporary3777 -> £temporary3778 0
26:		cmp byte [a2204], 0
27:		jne strncmp$10
29:	

strncmp$8:	; SetReturnValue 0
30:		mov a2205, 0
32:	

strncmp$9:	; Return 0
33:		mov t2206, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp t2206
38:	

strncmp$10:	; BinaryAdd £temporary3782 left index
39:		mov a2207, [bp + 6]
40:		add a2207, [bp + 12]
42:	

strncmp$11:	; Deref £temporary3781 -> £temporary3782 £temporary3782 0
44:	

strncmp$12:	; BinaryAdd £temporary3784 right index
45:		mov a2208, [bp + 8]
46:		add a2208, [bp + 12]
48:	

strncmp$13:	; Deref £temporary3783 -> £temporary3784 £temporary3784 0
50:	

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3781 -> £temporary3782 £temporary3783 -> £temporary3784
51:		mov t2209, [a2208]
52:		cmp [a2207], t2209
53:		jge strncmp$17
55:	

strncmp$15:	; SetReturnValue -1
56:		mov a2210, -1
58:	

strncmp$16:	; Return -1
59:		mov t2211, [bp]
60:		mov di, [bp + 4]
61:		mov bp, [bp + 2]
62:		jmp t2211
64:	

strncmp$17:	; BinaryAdd £temporary3787 left index
65:		mov a2212, [bp + 6]
66:		add a2212, [bp + 12]
68:	

strncmp$18:	; Deref £temporary3786 -> £temporary3787 £temporary3787 0
70:	

strncmp$19:	; BinaryAdd £temporary3789 right index
71:		mov a2213, [bp + 8]
72:		add a2213, [bp + 12]
74:	

strncmp$20:	; Deref £temporary3788 -> £temporary3789 £temporary3789 0
76:	

strncmp$21:	; SignedLessThanEqual 24 £temporary3786 -> £temporary3787 £temporary3788 -> £temporary3789
77:		mov t2214, [a2213]
78:		cmp [a2212], t2214
79:		jle strncmp$24
81:	

strncmp$22:	; SetReturnValue 1
82:		mov a2215, 1
84:	

strncmp$23:	; Return 1
85:		mov t2216, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp t2216
90:	

strncmp$24:	; Increment index
91:		inc word [bp + 12]
93:	

strncmp$25:	; Goto 1
94:		jmp strncmp$1
96:	

strncmp$26:	; SetReturnValue 0
97:		mov a2217, 0
99:	

strncmp$27:	; Return 0
100:		mov t2218, [bp]
101:		mov di, [bp + 4]
102:		mov bp, [bp + 2]
103:		jmp t2218
105:	

strncmp$28:	; FunctionEnd strncmp
1:	

strchr:	; IntegralToIntegral £temporary3791 i
2:		mov a2219, [bp + 8]
5:		cmp a2219, 0
6:		jge strchr$1
7:		neg a2219
9:		neg a2219
11:	

strchr$1:	; Assign c £temporary3791
12:		mov [bp + 12], a2219
14:	

strchr$2:	; Assign index 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; BinaryAdd £temporary3793 text index
18:		mov a2220, [bp + 6]
19:		add a2220, [bp + 10]
21:	

strchr$4:	; Deref £temporary3792 -> £temporary3793 £temporary3793 0
23:	

strchr$5:	; Equal 16 £temporary3792 -> £temporary3793 0
24:		cmp byte [a2220], 0
25:		je strchr$16
27:	

strchr$6:	; BinaryAdd £temporary3797 text index
28:		mov a2221, [bp + 6]
29:		add a2221, [bp + 10]
31:	

strchr$7:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0
33:	

strchr$8:	; NotEqual 14 £temporary3796 -> £temporary3797 c
34:		mov a2222, [bp + 12]
35:		cmp [a2221], a2222
36:		jne strchr$14
38:	

strchr$9:	; BinaryAdd £temporary3800 text index
39:		mov a2223, [bp + 6]
40:		add a2223, [bp + 10]
42:	

strchr$10:	; Deref £temporary3799 -> £temporary3800 £temporary3800 0
44:	

strchr$11:	; address £temporary3801 £temporary3799 -> £temporary3800
46:	

strchr$12:	; SetReturnValue £temporary3801
48:	

strchr$13:	; Return £temporary3801
49:		mov t2224, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2224
54:	

strchr$14:	; Increment index
55:		inc word [bp + 10]
57:	

strchr$15:	; Goto 3
58:		jmp strchr$3
60:	

strchr$16:	; SetReturnValue 0
61:		mov a2225, 0
63:	

strchr$17:	; Return 0
64:		mov t2226, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp t2226
69:	

strchr$18:	; FunctionEnd strchr
1:	

strrchr:	; Assign result 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; IntegralToIntegral £temporary3802 i
5:		mov a2227, [bp + 8]
8:		cmp a2227, 0
9:		jge strrchr$2
10:		neg a2227
12:		neg a2227
14:	

strrchr$2:	; Assign c £temporary3802
15:		mov [bp + 14], a2227
17:	

strrchr$3:	; Assign index 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; BinaryAdd £temporary3804 text index
21:		mov a2228, [bp + 6]
22:		add a2228, [bp + 10]
24:	

strrchr$5:	; Deref £temporary3803 -> £temporary3804 £temporary3804 0
26:	

strrchr$6:	; Equal 16 £temporary3803 -> £temporary3804 0
27:		cmp byte [a2228], 0
28:		je strrchr$16
30:	

strrchr$7:	; BinaryAdd £temporary3808 text index
31:		mov a2229, [bp + 6]
32:		add a2229, [bp + 10]
34:	

strrchr$8:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0
36:	

strrchr$9:	; NotEqual 14 £temporary3807 -> £temporary3808 c
37:		mov a2230, [bp + 14]
38:		cmp [a2229], a2230
39:		jne strrchr$14
41:	

strrchr$10:	; BinaryAdd £temporary3811 text index
42:		mov a2231, [bp + 6]
43:		add a2231, [bp + 10]
45:	

strrchr$11:	; Deref £temporary3810 -> £temporary3811 £temporary3811 0
47:	

strrchr$12:	; address £temporary3812 £temporary3810 -> £temporary3811
49:	

strrchr$13:	; Assign result £temporary3812
50:		mov [bp + 12], a2231
52:	

strrchr$14:	; Increment index
53:		inc word [bp + 10]
55:	

strrchr$15:	; Goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; SetReturnValue result
59:		mov a2232, [bp + 12]
61:	

strrchr$17:	; Return result
62:		mov t2233, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp t2233
67:	

strrchr$18:	; FunctionEnd strrchr
1:	

strspn:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; BinaryAdd £temporary3814 mainString index
5:		mov a2234, [bp + 6]
6:		add a2234, [bp + 10]
8:	

strspn$2:	; Deref £temporary3813 -> £temporary3814 £temporary3814 0
10:	

strspn$3:	; Equal 18 £temporary3813 -> £temporary3814 0
11:		cmp byte [a2234], 0
12:		je strspn$18
14:	

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strspn$5:	; Parameter 12 charSet 6
17:		mov a2235, [bp + 8]
18:		mov [bp + 18], a2235
20:	

strspn$6:	; BinaryAdd £temporary3818 mainString index
21:		mov a2236, [bp + 6]
22:		add a2236, [bp + 10]
24:	

strspn$7:	; Deref £temporary3817 -> £temporary3818 £temporary3818 0
26:	

strspn$8:	; IntegralToIntegral £temporary3819 £temporary3817 -> £temporary3818
27:		mov t2237, [a2236]
29:		and t2237, 255
31:		cmp t2237, 0
32:		jge strspn$9
33:		neg t2237
35:		neg t2237
37:	

strspn$9:	; Parameter 12 £temporary3819 8
38:		mov [bp + 20], t2237
40:	

strspn$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; PostCall 12
48:	

strspn$12:	; GetReturnValue £temporary3820
50:	

strspn$13:	; NotEqual 16 £temporary3820 0
51:		cmp type2238, 0
52:		jne strspn$16
54:	

strspn$14:	; SetReturnValue index
55:		mov a2239, [bp + 10]
57:	

strspn$15:	; Return index
58:		mov t2240, [bp]
59:		mov di, [bp + 4]
60:		mov bp, [bp + 2]
61:		jmp t2240
63:	

strspn$16:	; Increment index
64:		inc word [bp + 10]
66:	

strspn$17:	; Goto 1
67:		jmp strspn$1
69:	

strspn$18:	; SetReturnValue -1
70:		mov a2241, -1
72:	

strspn$19:	; Return -1
73:		mov t2242, [bp]
74:		mov di, [bp + 4]
75:		mov bp, [bp + 2]
76:		jmp t2242
78:	

strspn$20:	; FunctionEnd strspn
1:	

strcspn:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; BinaryAdd £temporary3825 mainString index
5:		mov a2243, [bp + 6]
6:		add a2243, [bp + 10]
8:	

strcspn$2:	; Deref £temporary3824 -> £temporary3825 £temporary3825 0
10:	

strcspn$3:	; Equal 18 £temporary3824 -> £temporary3825 0
11:		cmp byte [a2243], 0
12:		je strcspn$18
14:	

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strcspn$5:	; Parameter 12 charSet 6
17:		mov a2244, [bp + 8]
18:		mov [bp + 18], a2244
20:	

strcspn$6:	; BinaryAdd £temporary3829 mainString index
21:		mov a2245, [bp + 6]
22:		add a2245, [bp + 10]
24:	

strcspn$7:	; Deref £temporary3828 -> £temporary3829 £temporary3829 0
26:	

strcspn$8:	; IntegralToIntegral £temporary3830 £temporary3828 -> £temporary3829
27:		mov t2246, [a2245]
29:		and t2246, 255
31:		cmp t2246, 0
32:		jge strcspn$9
33:		neg t2246
35:		neg t2246
37:	

strcspn$9:	; Parameter 12 £temporary3830 8
38:		mov [bp + 20], t2246
40:	

strcspn$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; PostCall 12
48:	

strcspn$12:	; GetReturnValue £temporary3831
50:	

strcspn$13:	; Equal 16 £temporary3831 0
51:		cmp type2247, 0
52:		je strcspn$16
54:	

strcspn$14:	; SetReturnValue index
55:		mov a2248, [bp + 10]
57:	

strcspn$15:	; Return index
58:		mov t2249, [bp]
59:		mov di, [bp + 4]
60:		mov bp, [bp + 2]
61:		jmp t2249
63:	

strcspn$16:	; Increment index
64:		inc word [bp + 10]
66:	

strcspn$17:	; Goto 1
67:		jmp strcspn$1
69:	

strcspn$18:	; SetReturnValue -1
70:		mov a2250, -1
72:	

strcspn$19:	; Return -1
73:		mov t2251, [bp]
74:		mov di, [bp + 4]
75:		mov bp, [bp + 2]
76:		jmp t2251
78:	

strcspn$20:	; FunctionEnd strcspn
1:	

strpbrk:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; BinaryAdd £temporary3836 mainString index
5:		mov a2252, [bp + 6]
6:		add a2252, [bp + 10]
8:	

strpbrk$2:	; Deref £temporary3835 -> £temporary3836 £temporary3836 0
10:	

strpbrk$3:	; Equal 21 £temporary3835 -> £temporary3836 0
11:		cmp byte [a2252], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strpbrk$5:	; Parameter 12 charSet 6
17:		mov a2253, [bp + 8]
18:		mov [bp + 18], a2253
20:	

strpbrk$6:	; BinaryAdd £temporary3840 mainString index
21:		mov a2254, [bp + 6]
22:		add a2254, [bp + 10]
24:	

strpbrk$7:	; Deref £temporary3839 -> £temporary3840 £temporary3840 0
26:	

strpbrk$8:	; IntegralToIntegral £temporary3841 £temporary3839 -> £temporary3840
27:		mov t2255, [a2254]
29:		and t2255, 255
31:		cmp t2255, 0
32:		jge strpbrk$9
33:		neg t2255
35:		neg t2255
37:	

strpbrk$9:	; Parameter 12 £temporary3841 8
38:		mov [bp + 20], t2255
40:	

strpbrk$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; PostCall 12
48:	

strpbrk$12:	; GetReturnValue £temporary3842
50:	

strpbrk$13:	; Equal 19 £temporary3842 0
51:		cmp type2256, 0
52:		je strpbrk$19
54:	

strpbrk$14:	; BinaryAdd £temporary3845 mainString index
55:		mov a2257, [bp + 6]
56:		add a2257, [bp + 10]
58:	

strpbrk$15:	; Deref £temporary3844 -> £temporary3845 £temporary3845 0
60:	

strpbrk$16:	; address £temporary3846 £temporary3844 -> £temporary3845
62:	

strpbrk$17:	; SetReturnValue £temporary3846
64:	

strpbrk$18:	; Return £temporary3846
65:		mov t2258, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t2258
70:	

strpbrk$19:	; Increment index
71:		inc word [bp + 10]
73:	

strpbrk$20:	; Goto 1
74:		jmp strpbrk$1
76:	

strpbrk$21:	; SetReturnValue 0
77:		mov a2259, 0
79:	

strpbrk$22:	; Return 0
80:		mov t2260, [bp]
81:		mov di, [bp + 4]
82:		mov bp, [bp + 2]
83:		jmp t2260
85:	

strpbrk$23:	; FunctionEnd strpbrk
1:	

strstr:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strstr$1:	; Parameter 12 subString 6
4:		mov a2261, [bp + 8]
5:		mov [bp + 18], a2261
7:	

strstr$2:	; Call 12 strlen 0
8:		mov word [bp + 12], strstr$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strstr$3:	; PostCall 12
15:	

strstr$4:	; GetReturnValue £temporary3849
17:	

strstr$5:	; Assign subStringSize £temporary3849
18:		mov [bp + 12], type2262
20:	

strstr$6:	; Assign index 0
21:		mov word [bp + 10], 0
23:	

strstr$7:	; BinaryAdd £temporary3851 mainString index
24:		mov a2263, [bp + 6]
25:		add a2263, [bp + 10]
27:	

strstr$8:	; Deref £temporary3850 -> £temporary3851 £temporary3851 0
29:	

strstr$9:	; Equal 26 £temporary3850 -> £temporary3851 0
30:		cmp byte [a2263], 0
31:		je strstr$26
33:	

strstr$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
35:	

strstr$11:	; BinaryAdd £temporary3854 mainString index
36:		mov a2264, [bp + 6]
37:		add a2264, [bp + 10]
39:	

strstr$12:	; Parameter 14 £temporary3854 6
40:		mov [bp + 20], a2264
42:	

strstr$13:	; Parameter 14 subString 8
43:		mov a2265, [bp + 8]
44:		mov [bp + 22], a2265
46:	

strstr$14:	; Parameter 14 subStringSize 10
47:		mov a2266, [bp + 12]
48:		mov [bp + 24], a2266
50:	

strstr$15:	; Call 14 strncmp 0
51:		mov word [bp + 14], strstr$16
52:		mov [bp + 16], bp
53:		add bp, 14
54:		jmp strncmp
56:	

strstr$16:	; PostCall 14
58:	

strstr$17:	; GetReturnValue £temporary3855
60:	

strstr$18:	; NotEqual 24 £temporary3855 0
61:		cmp type2267, 0
62:		jne strstr$24
64:	

strstr$19:	; BinaryAdd £temporary3858 mainString index
65:		mov a2268, [bp + 6]
66:		add a2268, [bp + 10]
68:	

strstr$20:	; Deref £temporary3857 -> £temporary3858 £temporary3858 0
70:	

strstr$21:	; address £temporary3859 £temporary3857 -> £temporary3858
72:	

strstr$22:	; SetReturnValue £temporary3859
74:	

strstr$23:	; Return £temporary3859
75:		mov t2269, [bp]
76:		mov di, [bp + 4]
77:		mov bp, [bp + 2]
78:		jmp t2269
80:	

strstr$24:	; Increment index
81:		inc word [bp + 10]
83:	

strstr$25:	; Goto 7
84:		jmp strstr$7
86:	

strstr$26:	; SetReturnValue 0
87:		mov a2270, 0
89:	

strstr$27:	; Return 0
90:		mov t2271, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp t2271
95:	

strstr$28:	; FunctionEnd strstr
1:	

strlen:	; Assign index 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; BinaryAdd £temporary3865 string index
5:		mov a2272, [bp + 6]
6:		add a2272, [bp + 8]
8:	

strlen$2:	; Deref £temporary3864 -> £temporary3865 £temporary3865 0
10:	

strlen$3:	; Equal 6 £temporary3864 -> £temporary3865 0
11:		cmp byte [a2272], 0
12:		je strlen$6
14:	

strlen$4:	; Increment index
15:		inc word [bp + 8]
17:	

strlen$5:	; Goto 1
18:		jmp strlen$1
20:	

strlen$6:	; SetReturnValue index
21:		mov a2273, [bp + 8]
23:	

strlen$7:	; Return index
24:		mov t2274, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp t2274
29:	

strlen$8:	; FunctionEnd strlen
1:	

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strerror$1:	; Call 8 localeconv 0
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; PostCall 8
11:	

strerror$3:	; GetReturnValue £temporary3868
13:	

strerror$4:	; Assign localeConvPtr £temporary3868
14:		mov [bp + 8], type2275
16:	

strerror$5:	; Equal 14 localeConvPtr 0
17:		cmp word [bp + 8], 0
18:		je strerror$14
20:	

strerror$6:	; Deref £temporary3870 -> localeConvPtr localeConvPtr 16
21:		mov a2276, [bp + 8]
23:	

strerror$7:	; Assign messageList £temporary3870 -> localeConvPtr
24:		mov t2277, [a2276 + 16]
25:		mov [bp + 10], t2277
27:	

strerror$8:	; Equal 14 messageList 0
28:		cmp word [bp + 10], 0
29:		je strerror$14
31:	

strerror$9:	; SignedMultiply £temporary3873 errno 2
32:		mov a2278, [bp + 6]
34:		xor dx, dx
35:		imul word [@8772$int2$2#]
41:	

strerror$10:	; BinaryAdd £temporary3874 messageList £temporary3873
42:		mov a2282, [bp + 10]
43:		add a2282, t2281
45:	

strerror$11:	; Deref £temporary3872 -> £temporary3874 £temporary3874 0
47:	

strerror$12:	; SetReturnValue £temporary3872 -> £temporary3874
48:		mov t2283, [a2282]
50:	

strerror$13:	; Return £temporary3872 -> £temporary3874
51:		mov t2284, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t2284
56:	

strerror$14:	; SetReturnValue 0
57:		mov a2285, 0
59:	

strerror$15:	; Return 0
60:		mov t2286, [bp]
61:		mov di, [bp + 4]
62:		mov bp, [bp + 2]
63:		jmp t2286
65:	

strerror$16:	; FunctionEnd strerror
1:	

strtok:	; Equal 37 string 0
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; Deref £temporary3876 -> string string 0
6:		mov a2287, [bp + 6]
8:	

strtok$2:	; NotEqual 5 £temporary3876 -> string 0
9:		cmp byte [a2287], 0
10:		jne strtok$5
12:	

strtok$3:	; SetReturnValue 0
13:		mov a2288, 0
15:	

strtok$4:	; Return 0
16:		mov t2289, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t2289
21:	

strtok$5:	; Assign index 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; BinaryAdd £temporary3879 string index
25:		mov a2290, [bp + 6]
26:		add a2290, [bp + 10]
28:	

strtok$7:	; Deref £temporary3878 -> £temporary3879 £temporary3879 0
30:	

strtok$8:	; Equal 31 £temporary3878 -> £temporary3879 0
31:		cmp byte [a2290], 0
32:		je strtok$31
34:	

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
36:	

strtok$10:	; Parameter 14 charSet 6
37:		mov a2291, [bp + 8]
38:		mov [bp + 20], a2291
40:	

strtok$11:	; BinaryAdd £temporary3883 string index
41:		mov a2292, [bp + 6]
42:		add a2292, [bp + 10]
44:	

strtok$12:	; Deref £temporary3882 -> £temporary3883 £temporary3883 0
46:	

strtok$13:	; IntegralToIntegral £temporary3884 £temporary3882 -> £temporary3883
47:		mov t2293, [a2292]
49:		and t2293, 255
51:		cmp t2293, 0
52:		jge strtok$14
53:		neg t2293
55:		neg t2293
57:	

strtok$14:	; Parameter 14 £temporary3884 8
58:		mov [bp + 22], t2293
60:	

strtok$15:	; Call 14 strchr 0
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; PostCall 14
68:	

strtok$17:	; GetReturnValue £temporary3885
70:	

strtok$18:	; Equal 29 £temporary3885 0
71:		cmp type2294, 0
72:		je strtok$29
74:	

strtok$19:	; BinaryAdd £temporary3888 string index
75:		mov a2295, [bp + 6]
76:		add a2295, [bp + 10]
78:	

strtok$20:	; Deref £temporary3887 -> £temporary3888 £temporary3888 0
80:	

strtok$21:	; Assign £temporary3887 -> £temporary3888 0
81:		mov byte [a2295], 0
83:	

strtok$22:	; BinaryAdd £temporary3889 index 1
84:		mov a2296, [bp + 10]
85:		add a2296, 1
87:	

strtok$23:	; BinaryAdd £temporary3891 string £temporary3889
88:		mov a2297, [bp + 6]
89:		add a2297, a2296
91:	

strtok$24:	; Deref £temporary3890 -> £temporary3891 £temporary3891 0
93:	

strtok$25:	; address £temporary3892 £temporary3890 -> £temporary3891
95:	

strtok$26:	; Assign token £temporary3892
96:		mov [@8781$token], a2297
98:	

strtok$27:	; SetReturnValue string
99:		mov a2298, [bp + 6]
101:	

strtok$28:	; Return string
102:		mov t2299, [bp]
103:		mov di, [bp + 4]
104:		mov bp, [bp + 2]
105:		jmp t2299
107:	

strtok$29:	; Increment index
108:		inc word [bp + 10]
110:	

strtok$30:	; Goto 6
111:		jmp strtok$6
113:	

strtok$31:	; BinaryAdd £temporary3894 string index
114:		mov a2300, [bp + 6]
115:		add a2300, [bp + 10]
117:	

strtok$32:	; Deref £temporary3893 -> £temporary3894 £temporary3894 0
119:	

strtok$33:	; address £temporary3895 £temporary3893 -> £temporary3894
121:	

strtok$34:	; Assign token £temporary3895
122:		mov [@8781$token], a2300
124:	

strtok$35:	; SetReturnValue string
125:		mov a2301, [bp + 6]
127:	

strtok$36:	; Return string
128:		mov t2302, [bp]
129:		mov di, [bp + 4]
130:		mov bp, [bp + 2]
131:		jmp t2302
133:	

strtok$37:	; NotEqual 40 token 0
134:		cmp word [@8781$token], 0
135:		jne strtok$40
137:	

strtok$38:	; SetReturnValue 0
138:		mov a2303, 0
140:	

strtok$39:	; Return 0
141:		mov t2304, [bp]
142:		mov di, [bp + 4]
143:		mov bp, [bp + 2]
144:		jmp t2304
146:	

strtok$40:	; NotEqual 43 (@8781$token,0) 0
147:		mov a2305, [@8781$token]
148:		cmp byte [a2305], 0
149:		jne strtok$43
151:	

strtok$41:	; SetReturnValue 0
152:		mov a2306, 0
154:	

strtok$42:	; Return 0
155:		mov t2307, [bp]
156:		mov di, [bp + 4]
157:		mov bp, [bp + 2]
158:		jmp t2307
160:	

strtok$43:	; Assign index 0
161:		mov word [bp + 10], 0
163:	

strtok$44:	; BinaryAdd £temporary3900 token index
164:		mov a2308, [@8781$token]
165:		add a2308, [bp + 10]
167:	

strtok$45:	; Deref £temporary3899 -> £temporary3900 £temporary3900 0
169:	

strtok$46:	; Equal 70 £temporary3899 -> £temporary3900 0
170:		cmp byte [a2308], 0
171:		je strtok$70
173:	

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
175:	

strtok$48:	; Parameter 14 charSet 6
176:		mov a2309, [bp + 8]
177:		mov [bp + 20], a2309
179:	

strtok$49:	; BinaryAdd £temporary3904 token index
180:		mov a2310, [@8781$token]
181:		add a2310, [bp + 10]
183:	

strtok$50:	; Deref £temporary3903 -> £temporary3904 £temporary3904 0
185:	

strtok$51:	; IntegralToIntegral £temporary3905 £temporary3903 -> £temporary3904
186:		mov t2311, [a2310]
188:		and t2311, 255
190:		cmp t2311, 0
191:		jge strtok$52
192:		neg t2311
194:		neg t2311
196:	

strtok$52:	; Parameter 14 £temporary3905 8
197:		mov [bp + 22], t2311
199:	

strtok$53:	; Call 14 strchr 0
200:		mov word [bp + 14], strtok$54
201:		mov [bp + 16], bp
202:		add bp, 14
203:		jmp strchr
205:	

strtok$54:	; PostCall 14
207:	

strtok$55:	; GetReturnValue £temporary3906
209:	

strtok$56:	; Equal 68 £temporary3906 0
210:		cmp type2312, 0
211:		je strtok$68
213:	

strtok$57:	; Assign tokenStart2 token
214:		mov a2313, [@8781$token]
215:		mov [bp + 14], a2313
217:	

strtok$58:	; BinaryAdd £temporary3909 token index
218:		mov a2314, [@8781$token]
219:		add a2314, [bp + 10]
221:	

strtok$59:	; Deref £temporary3908 -> £temporary3909 £temporary3909 0
223:	

strtok$60:	; Assign £temporary3908 -> £temporary3909 0
224:		mov byte [a2314], 0
226:	

strtok$61:	; BinaryAdd £temporary3910 index 1
227:		mov a2315, [bp + 10]
228:		add a2315, 1
230:	

strtok$62:	; BinaryAdd £temporary3912 token £temporary3910
231:		mov a2316, [@8781$token]
232:		add a2316, a2315
234:	

strtok$63:	; Deref £temporary3911 -> £temporary3912 £temporary3912 0
236:	

strtok$64:	; address £temporary3913 £temporary3911 -> £temporary3912
238:	

strtok$65:	; Assign token £temporary3913
239:		mov [@8781$token], a2316
241:	

strtok$66:	; SetReturnValue tokenStart2
242:		mov a2317, [bp + 14]
244:	

strtok$67:	; Return tokenStart2
245:		mov t2318, [bp]
246:		mov di, [bp + 4]
247:		mov bp, [bp + 2]
248:		jmp t2318
250:	

strtok$68:	; Increment index
251:		inc word [bp + 10]
253:	

strtok$69:	; Goto 44
254:		jmp strtok$44
256:	

strtok$70:	; Assign tokenStart token
257:		mov a2319, [@8781$token]
258:		mov [bp + 12], a2319
260:	

strtok$71:	; BinaryAdd £temporary3915 token index
261:		mov a2320, [@8781$token]
262:		add a2320, [bp + 10]
264:	

strtok$72:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0
266:	

strtok$73:	; address £temporary3916 £temporary3914 -> £temporary3915
268:	

strtok$74:	; Assign token £temporary3916
269:		mov [@8781$token], a2320
271:	

strtok$75:	; SetReturnValue tokenStart
272:		mov a2321, [bp + 12]
274:	

strtok$76:	; Return tokenStart
275:		mov t2322, [bp]
276:		mov di, [bp + 4]
277:		mov bp, [bp + 2]
278:		jmp t2322
280:	

strtok$77:	; FunctionEnd strtok
1:	

memcpy:	; IntegralToIntegral £temporary3921 target
2:		mov a2323, [bp + 6]
5:	

memcpy$1:	; Assign charTarget £temporary3921
6:		mov [bp + 12], a2323
8:	

memcpy$2:	; IntegralToIntegral £temporary3922 source
9:		mov a2324, [bp + 8]
12:	

memcpy$3:	; Assign charSource £temporary3922
13:		mov [bp + 14], a2324
15:	

memcpy$4:	; Assign index 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; SignedGreaterThanEqual 13 index size
19:		mov a2325, [bp + 10]
20:		cmp [bp + 16], a2325
21:		jge memcpy$13
23:	

memcpy$6:	; BinaryAdd £temporary3926 charTarget index
24:		mov a2326, [bp + 12]
25:		add a2326, [bp + 16]
27:	

memcpy$7:	; Deref £temporary3925 -> £temporary3926 £temporary3926 0
29:	

memcpy$8:	; BinaryAdd £temporary3928 charSource index
30:		mov a2327, [bp + 14]
31:		add a2327, [bp + 16]
33:	

memcpy$9:	; Deref £temporary3927 -> £temporary3928 £temporary3928 0
35:	

memcpy$10:	; Assign £temporary3925 -> £temporary3926 £temporary3927 -> £temporary3928
36:		mov t2328, [a2327]
37:		mov [a2326], t2328
39:	

memcpy$11:	; Increment index
40:		inc word [bp + 16]
42:	

memcpy$12:	; Goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; IntegralToIntegral £temporary3929 target
46:		mov a2329, [bp + 6]
49:	

memcpy$14:	; SetReturnValue £temporary3929
51:	

memcpy$15:	; Return £temporary3929
52:		mov t2330, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2330
57:	

memcpy$16:	; FunctionEnd memcpy
1:	

memmove:	; IntegralToIntegral £temporary3930 target
2:		mov a2331, [bp + 6]
5:	

memmove$1:	; Assign charTarget £temporary3930
6:		mov [bp + 12], a2331
8:	

memmove$2:	; IntegralToIntegral £temporary3931 source
9:		mov a2332, [bp + 8]
12:	

memmove$3:	; Assign charSource £temporary3931
13:		mov [bp + 14], a2332
15:	

memmove$4:	; SignedGreaterThanEqual 14 source target
16:		mov a2333, [bp + 6]
17:		cmp [bp + 8], a2333
18:		jge memmove$14
20:	

memmove$5:	; BinarySubtract index size 1
21:		mov a2334, [bp + 10]
22:		sub a2334, 1
23:		mov [bp + 16], a2334
25:	

memmove$6:	; SignedLessThan 23 index 0
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; BinaryAdd £temporary3937 charTarget index
30:		mov a2335, [bp + 12]
31:		add a2335, [bp + 16]
33:	

memmove$8:	; Deref £temporary3936 -> £temporary3937 £temporary3937 0
35:	

memmove$9:	; BinaryAdd £temporary3939 charSource index
36:		mov a2336, [bp + 14]
37:		add a2336, [bp + 16]
39:	

memmove$10:	; Deref £temporary3938 -> £temporary3939 £temporary3939 0
41:	

memmove$11:	; Assign £temporary3936 -> £temporary3937 £temporary3938 -> £temporary3939
42:		mov t2337, [a2336]
43:		mov [a2335], t2337
45:	

memmove$12:	; Decrement index
46:		dec word [bp + 16]
48:	

memmove$13:	; Goto 6
49:		jmp memmove$6
51:	

memmove$14:	; Assign index 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; SignedGreaterThanEqual 23 index size
55:		mov a2338, [bp + 10]
56:		cmp [bp + 16], a2338
57:		jge memmove$23
59:	

memmove$16:	; BinaryAdd £temporary3943 charTarget index
60:		mov a2339, [bp + 12]
61:		add a2339, [bp + 16]
63:	

memmove$17:	; Deref £temporary3942 -> £temporary3943 £temporary3943 0
65:	

memmove$18:	; BinaryAdd £temporary3945 charSource index
66:		mov a2340, [bp + 14]
67:		add a2340, [bp + 16]
69:	

memmove$19:	; Deref £temporary3944 -> £temporary3945 £temporary3945 0
71:	

memmove$20:	; Assign £temporary3942 -> £temporary3943 £temporary3944 -> £temporary3945
72:		mov t2341, [a2340]
73:		mov [a2339], t2341
75:	

memmove$21:	; Increment index
76:		inc word [bp + 16]
78:	

memmove$22:	; Goto 15
79:		jmp memmove$15
81:	

memmove$23:	; IntegralToIntegral £temporary3946 target
82:		mov a2342, [bp + 6]
85:	

memmove$24:	; SetReturnValue £temporary3946
87:	

memmove$25:	; Return £temporary3946
88:		mov t2343, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp t2343
93:	

memmove$26:	; FunctionEnd memmove
1:	

memcmp:	; IntegralToIntegral £temporary3947 left
2:		mov a2344, [bp + 6]
5:	

memcmp$1:	; Assign charLeft £temporary3947
6:		mov [bp + 12], a2344
8:	

memcmp$2:	; IntegralToIntegral £temporary3948 right
9:		mov a2345, [bp + 8]
12:	

memcmp$3:	; Assign charRight £temporary3948
13:		mov [bp + 14], a2345
15:	

memcmp$4:	; Assign index 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; SignedGreaterThanEqual 22 index size
19:		mov a2346, [bp + 10]
20:		cmp [bp + 16], a2346
21:		jge memcmp$22
23:	

memcmp$6:	; BinaryAdd £temporary3952 charLeft index
24:		mov a2347, [bp + 12]
25:		add a2347, [bp + 16]
27:	

memcmp$7:	; Deref £temporary3951 -> £temporary3952 £temporary3952 0
29:	

memcmp$8:	; BinaryAdd £temporary3954 charRight index
30:		mov a2348, [bp + 14]
31:		add a2348, [bp + 16]
33:	

memcmp$9:	; Deref £temporary3953 -> £temporary3954 £temporary3954 0
35:	

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3951 -> £temporary3952 £temporary3953 -> £temporary3954
36:		mov t2349, [a2348]
37:		cmp [a2347], t2349
38:		jge memcmp$13
40:	

memcmp$11:	; SetReturnValue -1
41:		mov a2350, -1
43:	

memcmp$12:	; Return -1
44:		mov t2351, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t2351
49:	

memcmp$13:	; BinaryAdd £temporary3957 charLeft index
50:		mov a2352, [bp + 12]
51:		add a2352, [bp + 16]
53:	

memcmp$14:	; Deref £temporary3956 -> £temporary3957 £temporary3957 0
55:	

memcmp$15:	; BinaryAdd £temporary3959 charRight index
56:		mov a2353, [bp + 14]
57:		add a2353, [bp + 16]
59:	

memcmp$16:	; Deref £temporary3958 -> £temporary3959 £temporary3959 0
61:	

memcmp$17:	; SignedLessThanEqual 20 £temporary3956 -> £temporary3957 £temporary3958 -> £temporary3959
62:		mov t2354, [a2353]
63:		cmp [a2352], t2354
64:		jle memcmp$20
66:	

memcmp$18:	; SetReturnValue 1
67:		mov a2355, 1
69:	

memcmp$19:	; Return 1
70:		mov t2356, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2356
75:	

memcmp$20:	; Increment index
76:		inc word [bp + 16]
78:	

memcmp$21:	; Goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; SetReturnValue 0
82:		mov a2357, 0
84:	

memcmp$23:	; Return 0
85:		mov t2358, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp t2358
90:	

memcmp$24:	; FunctionEnd memcmp
1:	

memchr:	; IntegralToIntegral £temporary3961 block
2:		mov a2359, [bp + 6]
5:	

memchr$1:	; Assign charBlock £temporary3961
6:		mov [bp + 14], a2359
8:	

memchr$2:	; IntegralToIntegral £temporary3962 i
9:		mov a2360, [bp + 8]
12:		cmp a2360, 0
13:		jge memchr$3
14:		neg a2360
16:		neg a2360
18:	

memchr$3:	; Assign c £temporary3962
19:		mov [bp + 16], a2360
21:	

memchr$4:	; Assign index 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; SignedGreaterThanEqual 17 index size
25:		mov a2361, [bp + 10]
26:		cmp [bp + 12], a2361
27:		jge memchr$17
29:	

memchr$6:	; BinaryAdd £temporary3966 charBlock index
30:		mov a2362, [bp + 14]
31:		add a2362, [bp + 12]
33:	

memchr$7:	; Deref £temporary3965 -> £temporary3966 £temporary3966 0
35:	

memchr$8:	; NotEqual 15 £temporary3965 -> £temporary3966 c
36:		mov a2363, [bp + 16]
37:		cmp [a2362], a2363
38:		jne memchr$15
40:	

memchr$9:	; BinaryAdd £temporary3969 charBlock index
41:		mov a2364, [bp + 14]
42:		add a2364, [bp + 12]
44:	

memchr$10:	; Deref £temporary3968 -> £temporary3969 £temporary3969 0
46:	

memchr$11:	; address £temporary3970 £temporary3968 -> £temporary3969
48:	

memchr$12:	; IntegralToIntegral £temporary3971 £temporary3970
51:	

memchr$13:	; SetReturnValue £temporary3971
53:	

memchr$14:	; Return £temporary3971
54:		mov t2365, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp t2365
59:	

memchr$15:	; Increment index
60:		inc word [bp + 12]
62:	

memchr$16:	; Goto 5
63:		jmp memchr$5
65:	

memchr$17:	; SetReturnValue 0
66:		mov a2366, 0
68:	

memchr$18:	; Return 0
69:		mov t2367, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp t2367
74:	

memchr$19:	; FunctionEnd memchr
1:	

memset:	; IntegralToIntegral £temporary3972 block
2:		mov a2368, [bp + 6]
5:	

memset$1:	; Assign charBlock £temporary3972
6:		mov [bp + 12], a2368
8:	

memset$2:	; IntegralToIntegral £temporary3973 i
9:		mov a2369, [bp + 8]
12:		cmp a2369, 0
13:		jge memset$3
14:		neg a2369
16:		neg a2369
18:	

memset$3:	; Assign c £temporary3973
19:		mov [bp + 14], a2369
21:	

memset$4:	; Assign index 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; SignedGreaterThanEqual 11 index size
25:		mov a2370, [bp + 10]
26:		cmp [bp + 15], a2370
27:		jge memset$11
29:	

memset$6:	; BinaryAdd £temporary3977 charBlock index
30:		mov a2371, [bp + 12]
31:		add a2371, [bp + 15]
33:	

memset$7:	; Deref £temporary3976 -> £temporary3977 £temporary3977 0
35:	

memset$8:	; Assign £temporary3976 -> £temporary3977 c
36:		mov a2372, [bp + 14]
37:		mov [a2371], a2372
39:	

memset$9:	; Increment index
40:		inc word [bp + 15]
42:	

memset$10:	; Goto 5
43:		jmp memset$5
45:	

memset$11:	; SetReturnValue block
46:		mov a2373, [bp + 6]
48:	

memset$12:	; Return block
49:		mov t2374, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2374
54:	

memset$13:	; FunctionEnd memset
