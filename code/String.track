1:	

strcpy:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; £temporary3097 = source + index
5:		mov a2115, [bp + 8]
6:		add a2115, [bp + 10]
8:	

strcpy$2:	; £temporary3096 -> £temporary3097 = *£temporary3097
10:	

strcpy$3:	; if £temporary3096 -> £temporary3097 == 0 goto 11
11:		cmp byte [a2115], 0
12:		je strcpy$11
14:	

strcpy$4:	; £temporary3101 = target + index
15:		mov a2116, [bp + 6]
16:		add a2116, [bp + 10]
18:	

strcpy$5:	; £temporary3100 -> £temporary3101 = *£temporary3101
20:	

strcpy$6:	; £temporary3103 = source + index
21:		mov a2117, [bp + 8]
22:		add a2117, [bp + 10]
24:	

strcpy$7:	; £temporary3102 -> £temporary3103 = *£temporary3103
26:	

strcpy$8:	; £temporary3100 -> £temporary3101 = £temporary3102 -> £temporary3103
27:		mov t2118, [a2117]
28:		mov [a2116], t2118
30:	

strcpy$9:	; ++index
31:		inc word [bp + 10]
33:	

strcpy$10:	; goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; £temporary3105 = target + index
37:		mov a2119, [bp + 6]
38:		add a2119, [bp + 10]
40:	

strcpy$12:	; £temporary3104 -> £temporary3105 = *£temporary3105
42:	

strcpy$13:	; £temporary3104 -> £temporary3105 = 0
43:		mov byte [a2119], 0
45:	

strcpy$14:	; return_value = target
46:		mov a2120, [bp + 6]
48:	

strcpy$15:	; return
49:		mov t2121, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2121
54:	

strcpy$16:	; function end strcpy
1:	

strncpy:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; if index >= size goto 12
5:		mov a2122, [bp + 10]
6:		cmp [bp + 12], a2122
7:		jge strncpy$12
9:	

strncpy$2:	; £temporary3108 = source + index
10:		mov a2123, [bp + 8]
11:		add a2123, [bp + 12]
13:	

strncpy$3:	; £temporary3107 -> £temporary3108 = *£temporary3108
15:	

strncpy$4:	; if £temporary3107 -> £temporary3108 == 0 goto 12
16:		cmp byte [a2123], 0
17:		je strncpy$12
19:	

strncpy$5:	; £temporary3113 = target + index
20:		mov a2124, [bp + 6]
21:		add a2124, [bp + 12]
23:	

strncpy$6:	; £temporary3112 -> £temporary3113 = *£temporary3113
25:	

strncpy$7:	; £temporary3115 = source + index
26:		mov a2125, [bp + 8]
27:		add a2125, [bp + 12]
29:	

strncpy$8:	; £temporary3114 -> £temporary3115 = *£temporary3115
31:	

strncpy$9:	; £temporary3112 -> £temporary3113 = £temporary3114 -> £temporary3115
32:		mov t2126, [a2125]
33:		mov [a2124], t2126
35:	

strncpy$10:	; ++index
36:		inc word [bp + 12]
38:	

strncpy$11:	; goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; if index >= size goto 18
42:		mov a2127, [bp + 10]
43:		cmp [bp + 12], a2127
44:		jge strncpy$18
46:	

strncpy$13:	; £temporary3119 = target + index
47:		mov a2128, [bp + 6]
48:		add a2128, [bp + 12]
50:	

strncpy$14:	; £temporary3118 -> £temporary3119 = *£temporary3119
52:	

strncpy$15:	; £temporary3118 -> £temporary3119 = 0
53:		mov byte [a2128], 0
55:	

strncpy$16:	; ++index
56:		inc word [bp + 12]
58:	

strncpy$17:	; goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; return_value = target
62:		mov a2129, [bp + 6]
64:	

strncpy$19:	; return
65:		mov t2130, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t2130
70:	

strncpy$20:	; function end strncpy
1:	

strcat:	; call header integral zero 0 stack zero 0
3:	

strcat$1:	; parameter target, offset 6
4:		mov a2131, [bp + 6]
5:		mov [bp + 18], a2131
7:	

strcat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; post call
15:	

strcat$4:	; £temporary3120 = return_value
20:	

strcat$5:	; targetLength = £temporary3120
21:		mov [bp + 12], t2133
23:	

strcat$6:	; index = 0
24:		mov word [bp + 10], 0
26:	

strcat$7:	; £temporary3122 = source + index
27:		mov a2134, [bp + 8]
28:		add a2134, [bp + 10]
30:	

strcat$8:	; £temporary3121 -> £temporary3122 = *£temporary3122
32:	

strcat$9:	; if £temporary3121 -> £temporary3122 == 0 goto 18
33:		cmp byte [a2134], 0
34:		je strcat$18
36:	

strcat$10:	; £temporary3125 = targetLength + index
37:		mov a2135, [bp + 12]
38:		add a2135, [bp + 10]
40:	

strcat$11:	; £temporary3127 = target + £temporary3125
41:		mov a2136, [bp + 6]
42:		add a2136, a2135
44:	

strcat$12:	; £temporary3126 -> £temporary3127 = *£temporary3127
46:	

strcat$13:	; £temporary3129 = source + index
47:		mov a2137, [bp + 8]
48:		add a2137, [bp + 10]
50:	

strcat$14:	; £temporary3128 -> £temporary3129 = *£temporary3129
52:	

strcat$15:	; £temporary3126 -> £temporary3127 = £temporary3128 -> £temporary3129
53:		mov t2138, [a2137]
54:		mov [a2136], t2138
56:	

strcat$16:	; ++index
57:		inc word [bp + 10]
59:	

strcat$17:	; goto 7
60:		jmp strcat$7
62:	

strcat$18:	; £temporary3130 = targetLength + index
63:		mov a2139, [bp + 12]
64:		add a2139, [bp + 10]
66:	

strcat$19:	; £temporary3132 = target + £temporary3130
67:		mov a2140, [bp + 6]
68:		add a2140, a2139
70:	

strcat$20:	; £temporary3131 -> £temporary3132 = *£temporary3132
72:	

strcat$21:	; £temporary3131 -> £temporary3132 = 0
73:		mov byte [a2140], 0
75:	

strcat$22:	; return_value = target
76:		mov a2141, [bp + 6]
78:	

strcat$23:	; return
79:		mov t2142, [bp]
80:		mov di, [bp + 4]
81:		mov bp, [bp + 2]
82:		jmp t2142
84:	

strcat$24:	; function end strcat
1:	

strncat:	; call header integral zero 0 stack zero 0
3:	

strncat$1:	; parameter target, offset 6
4:		mov a2143, [bp + 6]
5:		mov [bp + 20], a2143
7:	

strncat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; post call
15:	

strncat$4:	; £temporary3134 = return_value
20:	

strncat$5:	; targetLength = £temporary3134
21:		mov [bp + 14], t2145
23:	

strncat$6:	; index = 0
24:		mov word [bp + 12], 0
26:	

strncat$7:	; £temporary3135 = size - 1
27:		mov a2146, [bp + 10]
28:		sub a2146, 1
30:	

strncat$8:	; if index >= £temporary3135 goto 20
31:		cmp [bp + 12], a2146
32:		jge strncat$20
34:	

strncat$9:	; £temporary3138 = source + index
35:		mov a2147, [bp + 8]
36:		add a2147, [bp + 12]
38:	

strncat$10:	; £temporary3137 -> £temporary3138 = *£temporary3138
40:	

strncat$11:	; if £temporary3137 -> £temporary3138 == 0 goto 20
41:		cmp byte [a2147], 0
42:		je strncat$20
44:	

strncat$12:	; £temporary3142 = targetLength + index
45:		mov a2148, [bp + 14]
46:		add a2148, [bp + 12]
48:	

strncat$13:	; £temporary3144 = target + £temporary3142
49:		mov a2149, [bp + 6]
50:		add a2149, a2148
52:	

strncat$14:	; £temporary3143 -> £temporary3144 = *£temporary3144
54:	

strncat$15:	; £temporary3146 = source + index
55:		mov a2150, [bp + 8]
56:		add a2150, [bp + 12]
58:	

strncat$16:	; £temporary3145 -> £temporary3146 = *£temporary3146
60:	

strncat$17:	; £temporary3143 -> £temporary3144 = £temporary3145 -> £temporary3146
61:		mov t2151, [a2150]
62:		mov [a2149], t2151
64:	

strncat$18:	; ++index
65:		inc word [bp + 12]
67:	

strncat$19:	; goto 7
68:		jmp strncat$7
70:	

strncat$20:	; £temporary3147 = targetLength + size
71:		mov a2152, [bp + 14]
72:		add a2152, [bp + 10]
74:	

strncat$21:	; £temporary3148 = £temporary3147 - 1
75:		sub a2152, 1
77:	

strncat$22:	; £temporary3150 = target + £temporary3148
78:		mov a2153, [bp + 6]
79:		add a2153, a2152
81:	

strncat$23:	; £temporary3149 -> £temporary3150 = *£temporary3150
83:	

strncat$24:	; £temporary3149 -> £temporary3150 = 0
84:		mov byte [a2153], 0
86:	

strncat$25:	; return_value = target
87:		mov a2154, [bp + 6]
89:	

strncat$26:	; return
90:		mov t2155, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp t2155
95:	

strncat$27:	; function end strncat
1:	

strcmp:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; £temporary3154 = left + index
5:		mov a2156, [bp + 6]
6:		add a2156, [bp + 10]
8:	

strcmp$2:	; £temporary3153 -> £temporary3154 = *£temporary3154
10:	

strcmp$3:	; if £temporary3153 -> £temporary3154 != 0 goto 9
11:		cmp byte [a2156], 0
12:		jne strcmp$9
14:	

strcmp$4:	; £temporary3157 = right + index
15:		mov a2157, [bp + 8]
16:		add a2157, [bp + 10]
18:	

strcmp$5:	; £temporary3156 -> £temporary3157 = *£temporary3157
20:	

strcmp$6:	; if £temporary3156 -> £temporary3157 != 0 goto 9
21:		cmp byte [a2157], 0
22:		jne strcmp$9
24:	

strcmp$7:	; return_value = 0
25:		mov a2158, 0
27:	

strcmp$8:	; return
28:		mov t2159, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp t2159
33:	

strcmp$9:	; £temporary3161 = left + index
34:		mov a2160, [bp + 6]
35:		add a2160, [bp + 10]
37:	

strcmp$10:	; £temporary3160 -> £temporary3161 = *£temporary3161
39:	

strcmp$11:	; if £temporary3160 -> £temporary3161 != 0 goto 14
40:		cmp byte [a2160], 0
41:		jne strcmp$14
43:	

strcmp$12:	; return_value = -1
44:		mov a2161, -1
46:	

strcmp$13:	; return
47:		mov t2162, [bp]
48:		mov di, [bp + 4]
49:		mov bp, [bp + 2]
50:		jmp t2162
52:	

strcmp$14:	; £temporary3164 = right + index
53:		mov a2163, [bp + 8]
54:		add a2163, [bp + 10]
56:	

strcmp$15:	; £temporary3163 -> £temporary3164 = *£temporary3164
58:	

strcmp$16:	; if £temporary3163 -> £temporary3164 != 0 goto 19
59:		cmp byte [a2163], 0
60:		jne strcmp$19
62:	

strcmp$17:	; return_value = 1
63:		mov a2164, 1
65:	

strcmp$18:	; return
66:		mov t2165, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp t2165
71:	

strcmp$19:	; £temporary3167 = left + index
72:		mov a2166, [bp + 6]
73:		add a2166, [bp + 10]
75:	

strcmp$20:	; £temporary3166 -> £temporary3167 = *£temporary3167
77:	

strcmp$21:	; £temporary3169 = right + index
78:		mov a2167, [bp + 8]
79:		add a2167, [bp + 10]
81:	

strcmp$22:	; £temporary3168 -> £temporary3169 = *£temporary3169
83:	

strcmp$23:	; if £temporary3166 -> £temporary3167 >= £temporary3168 -> £temporary3169 goto 26
84:		mov t2168, [a2167]
85:		cmp [a2166], t2168
86:		jge strcmp$26
88:	

strcmp$24:	; return_value = -1
89:		mov a2169, -1
91:	

strcmp$25:	; return
92:		mov t2170, [bp]
93:		mov di, [bp + 4]
94:		mov bp, [bp + 2]
95:		jmp t2170
97:	

strcmp$26:	; £temporary3172 = left + index
98:		mov a2171, [bp + 6]
99:		add a2171, [bp + 10]
101:	

strcmp$27:	; £temporary3171 -> £temporary3172 = *£temporary3172
103:	

strcmp$28:	; £temporary3174 = right + index
104:		mov a2172, [bp + 8]
105:		add a2172, [bp + 10]
107:	

strcmp$29:	; £temporary3173 -> £temporary3174 = *£temporary3174
109:	

strcmp$30:	; if £temporary3171 -> £temporary3172 <= £temporary3173 -> £temporary3174 goto 33
110:		mov t2173, [a2172]
111:		cmp [a2171], t2173
112:		jle strcmp$33
114:	

strcmp$31:	; return_value = 1
115:		mov a2174, 1
117:	

strcmp$32:	; return
118:		mov t2175, [bp]
119:		mov di, [bp + 4]
120:		mov bp, [bp + 2]
121:		jmp t2175
123:	

strcmp$33:	; ++index
124:		inc word [bp + 10]
126:	

strcmp$34:	; goto 1
127:		jmp strcmp$1
129:	

strcmp$35:	; function end strcmp
1:	

strncmp:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; if index >= size goto 36
5:		mov a2176, [bp + 10]
6:		cmp [bp + 12], a2176
7:		jge strncmp$36
9:	

strncmp$2:	; £temporary3180 = left + index
10:		mov a2177, [bp + 6]
11:		add a2177, [bp + 12]
13:	

strncmp$3:	; £temporary3179 -> £temporary3180 = *£temporary3180
15:	

strncmp$4:	; if £temporary3179 -> £temporary3180 != 0 goto 10
16:		cmp byte [a2177], 0
17:		jne strncmp$10
19:	

strncmp$5:	; £temporary3183 = right + index
20:		mov a2178, [bp + 8]
21:		add a2178, [bp + 12]
23:	

strncmp$6:	; £temporary3182 -> £temporary3183 = *£temporary3183
25:	

strncmp$7:	; if £temporary3182 -> £temporary3183 != 0 goto 10
26:		cmp byte [a2178], 0
27:		jne strncmp$10
29:	

strncmp$8:	; return_value = 0
30:		mov a2179, 0
32:	

strncmp$9:	; return
33:		mov t2180, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp t2180
38:	

strncmp$10:	; £temporary3187 = left + index
39:		mov a2181, [bp + 6]
40:		add a2181, [bp + 12]
42:	

strncmp$11:	; £temporary3186 -> £temporary3187 = *£temporary3187
44:	

strncmp$12:	; if £temporary3186 -> £temporary3187 != 0 goto 15
45:		cmp byte [a2181], 0
46:		jne strncmp$15
48:	

strncmp$13:	; return_value = -1
49:		mov a2182, -1
51:	

strncmp$14:	; return
52:		mov t2183, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2183
57:	

strncmp$15:	; £temporary3190 = right + index
58:		mov a2184, [bp + 8]
59:		add a2184, [bp + 12]
61:	

strncmp$16:	; £temporary3189 -> £temporary3190 = *£temporary3190
63:	

strncmp$17:	; if £temporary3189 -> £temporary3190 != 0 goto 20
64:		cmp byte [a2184], 0
65:		jne strncmp$20
67:	

strncmp$18:	; return_value = 1
68:		mov a2185, 1
70:	

strncmp$19:	; return
71:		mov t2186, [bp]
72:		mov di, [bp + 4]
73:		mov bp, [bp + 2]
74:		jmp t2186
76:	

strncmp$20:	; £temporary3193 = left + index
77:		mov a2187, [bp + 6]
78:		add a2187, [bp + 12]
80:	

strncmp$21:	; £temporary3192 -> £temporary3193 = *£temporary3193
82:	

strncmp$22:	; £temporary3195 = right + index
83:		mov a2188, [bp + 8]
84:		add a2188, [bp + 12]
86:	

strncmp$23:	; £temporary3194 -> £temporary3195 = *£temporary3195
88:	

strncmp$24:	; if £temporary3192 -> £temporary3193 >= £temporary3194 -> £temporary3195 goto 27
89:		mov t2189, [a2188]
90:		cmp [a2187], t2189
91:		jge strncmp$27
93:	

strncmp$25:	; return_value = -1
94:		mov a2190, -1
96:	

strncmp$26:	; return
97:		mov t2191, [bp]
98:		mov di, [bp + 4]
99:		mov bp, [bp + 2]
100:		jmp t2191
102:	

strncmp$27:	; £temporary3198 = left + index
103:		mov a2192, [bp + 6]
104:		add a2192, [bp + 12]
106:	

strncmp$28:	; £temporary3197 -> £temporary3198 = *£temporary3198
108:	

strncmp$29:	; £temporary3200 = right + index
109:		mov a2193, [bp + 8]
110:		add a2193, [bp + 12]
112:	

strncmp$30:	; £temporary3199 -> £temporary3200 = *£temporary3200
114:	

strncmp$31:	; if £temporary3197 -> £temporary3198 <= £temporary3199 -> £temporary3200 goto 34
115:		mov t2194, [a2193]
116:		cmp [a2192], t2194
117:		jle strncmp$34
119:	

strncmp$32:	; return_value = 1
120:		mov a2195, 1
122:	

strncmp$33:	; return
123:		mov t2196, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp t2196
128:	

strncmp$34:	; ++index
129:		inc word [bp + 12]
131:	

strncmp$35:	; goto 1
132:		jmp strncmp$1
134:	

strncmp$36:	; return_value = 0
135:		mov a2197, 0
137:	

strncmp$37:	; return
138:		mov t2198, [bp]
139:		mov di, [bp + 4]
140:		mov bp, [bp + 2]
141:		jmp t2198
143:	

strncmp$38:	; function end strncmp
1:	

strchr:	; £temporary3202 = int_to_int i (Signed_Int -> Signed_Char)
2:		mov a2199, [bp + 8]
5:		cmp a2199, 0
6:		jge strchr$1
7:		neg a2199
9:		neg a2199
11:	

strchr$1:	; c = £temporary3202
12:		mov [bp + 12], a2199
14:	

strchr$2:	; index = 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; £temporary3204 = text + index
18:		mov a2200, [bp + 6]
19:		add a2200, [bp + 10]
21:	

strchr$4:	; £temporary3203 -> £temporary3204 = *£temporary3204
23:	

strchr$5:	; if £temporary3203 -> £temporary3204 == 0 goto 16
24:		cmp byte [a2200], 0
25:		je strchr$16
27:	

strchr$6:	; £temporary3208 = text + index
28:		mov a2201, [bp + 6]
29:		add a2201, [bp + 10]
31:	

strchr$7:	; £temporary3207 -> £temporary3208 = *£temporary3208
33:	

strchr$8:	; if £temporary3207 -> £temporary3208 != c goto 14
34:		mov a2202, [bp + 12]
35:		cmp [a2201], a2202
36:		jne strchr$14
38:	

strchr$9:	; £temporary3211 = text + index
39:		mov a2203, [bp + 6]
40:		add a2203, [bp + 10]
42:	

strchr$10:	; £temporary3210 -> £temporary3211 = *£temporary3211
44:	

strchr$11:	; £temporary3212 = &£temporary3210 -> £temporary3211
46:	

strchr$12:	; return_value = £temporary3212
48:	

strchr$13:	; return
49:		mov t2204, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2204
54:	

strchr$14:	; ++index
55:		inc word [bp + 10]
57:	

strchr$15:	; goto 3
58:		jmp strchr$3
60:	

strchr$16:	; return_value = 0
61:		mov a2205, 0
63:	

strchr$17:	; return
64:		mov t2206, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp t2206
69:	

strchr$18:	; function end strchr
1:	

strrchr:	; result = 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; £temporary3213 = int_to_int i (Signed_Int -> Signed_Char)
5:		mov a2207, [bp + 8]
8:		cmp a2207, 0
9:		jge strrchr$2
10:		neg a2207
12:		neg a2207
14:	

strrchr$2:	; c = £temporary3213
15:		mov [bp + 14], a2207
17:	

strrchr$3:	; index = 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; £temporary3215 = text + index
21:		mov a2208, [bp + 6]
22:		add a2208, [bp + 10]
24:	

strrchr$5:	; £temporary3214 -> £temporary3215 = *£temporary3215
26:	

strrchr$6:	; if £temporary3214 -> £temporary3215 == 0 goto 16
27:		cmp byte [a2208], 0
28:		je strrchr$16
30:	

strrchr$7:	; £temporary3219 = text + index
31:		mov a2209, [bp + 6]
32:		add a2209, [bp + 10]
34:	

strrchr$8:	; £temporary3218 -> £temporary3219 = *£temporary3219
36:	

strrchr$9:	; if £temporary3218 -> £temporary3219 != c goto 14
37:		mov a2210, [bp + 14]
38:		cmp [a2209], a2210
39:		jne strrchr$14
41:	

strrchr$10:	; £temporary3222 = text + index
42:		mov a2211, [bp + 6]
43:		add a2211, [bp + 10]
45:	

strrchr$11:	; £temporary3221 -> £temporary3222 = *£temporary3222
47:	

strrchr$12:	; £temporary3223 = &£temporary3221 -> £temporary3222
49:	

strrchr$13:	; result = £temporary3223
50:		mov [bp + 12], a2211
52:	

strrchr$14:	; ++index
53:		inc word [bp + 10]
55:	

strrchr$15:	; goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; return_value = result
59:		mov a2212, [bp + 12]
61:	

strrchr$17:	; return
62:		mov t2213, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp t2213
67:	

strrchr$18:	; function end strrchr
1:	

strspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; £temporary3225 = mainString + index
5:		mov a2214, [bp + 6]
6:		add a2214, [bp + 10]
8:	

strspn$2:	; £temporary3224 -> £temporary3225 = *£temporary3225
10:	

strspn$3:	; if £temporary3224 -> £temporary3225 == 0 goto 18
11:		cmp byte [a2214], 0
12:		je strspn$18
14:	

strspn$4:	; call header integral zero 0 stack zero 0
16:	

strspn$5:	; parameter charSet, offset 6
17:		mov a2215, [bp + 8]
18:		mov [bp + 18], a2215
20:	

strspn$6:	; £temporary3229 = mainString + index
21:		mov a2216, [bp + 6]
22:		add a2216, [bp + 10]
24:	

strspn$7:	; £temporary3228 -> £temporary3229 = *£temporary3229
26:	

strspn$8:	; £temporary3230 = int_to_int £temporary3228 -> £temporary3229 (Signed_Char -> Signed_Int)
27:		mov t2217, [a2216]
29:		and t2217, 255
31:		cmp t2217, 0
32:		jge strspn$9
33:		neg t2217
35:		neg t2217
37:	

strspn$9:	; parameter £temporary3230, offset 8
38:		mov [bp + 20], t2217
40:	

strspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; post call
48:	

strspn$12:	; £temporary3231 = return_value
53:	

strspn$13:	; if £temporary3231 != 0 goto 16
54:		cmp t2219, 0
55:		jne strspn$16
57:	

strspn$14:	; return_value = index
58:		mov a2220, [bp + 10]
60:	

strspn$15:	; return
61:		mov t2221, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t2221
66:	

strspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strspn$17:	; goto 1
70:		jmp strspn$1
72:	

strspn$18:	; return_value = -1
73:		mov a2222, -1
75:	

strspn$19:	; return
76:		mov t2223, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2223
81:	

strspn$20:	; function end strspn
1:	

strcspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; £temporary3236 = mainString + index
5:		mov a2224, [bp + 6]
6:		add a2224, [bp + 10]
8:	

strcspn$2:	; £temporary3235 -> £temporary3236 = *£temporary3236
10:	

strcspn$3:	; if £temporary3235 -> £temporary3236 == 0 goto 18
11:		cmp byte [a2224], 0
12:		je strcspn$18
14:	

strcspn$4:	; call header integral zero 0 stack zero 0
16:	

strcspn$5:	; parameter charSet, offset 6
17:		mov a2225, [bp + 8]
18:		mov [bp + 18], a2225
20:	

strcspn$6:	; £temporary3240 = mainString + index
21:		mov a2226, [bp + 6]
22:		add a2226, [bp + 10]
24:	

strcspn$7:	; £temporary3239 -> £temporary3240 = *£temporary3240
26:	

strcspn$8:	; £temporary3241 = int_to_int £temporary3239 -> £temporary3240 (Signed_Char -> Signed_Int)
27:		mov t2227, [a2226]
29:		and t2227, 255
31:		cmp t2227, 0
32:		jge strcspn$9
33:		neg t2227
35:		neg t2227
37:	

strcspn$9:	; parameter £temporary3241, offset 8
38:		mov [bp + 20], t2227
40:	

strcspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; post call
48:	

strcspn$12:	; £temporary3242 = return_value
53:	

strcspn$13:	; if £temporary3242 == 0 goto 16
54:		cmp t2229, 0
55:		je strcspn$16
57:	

strcspn$14:	; return_value = index
58:		mov a2230, [bp + 10]
60:	

strcspn$15:	; return
61:		mov t2231, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t2231
66:	

strcspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strcspn$17:	; goto 1
70:		jmp strcspn$1
72:	

strcspn$18:	; return_value = -1
73:		mov a2232, -1
75:	

strcspn$19:	; return
76:		mov t2233, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2233
81:	

strcspn$20:	; function end strcspn
1:	

strpbrk:	; index = 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; £temporary3247 = mainString + index
5:		mov a2234, [bp + 6]
6:		add a2234, [bp + 10]
8:	

strpbrk$2:	; £temporary3246 -> £temporary3247 = *£temporary3247
10:	

strpbrk$3:	; if £temporary3246 -> £temporary3247 == 0 goto 21
11:		cmp byte [a2234], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; call header integral zero 0 stack zero 0
16:	

strpbrk$5:	; parameter charSet, offset 6
17:		mov a2235, [bp + 8]
18:		mov [bp + 18], a2235
20:	

strpbrk$6:	; £temporary3251 = mainString + index
21:		mov a2236, [bp + 6]
22:		add a2236, [bp + 10]
24:	

strpbrk$7:	; £temporary3250 -> £temporary3251 = *£temporary3251
26:	

strpbrk$8:	; £temporary3252 = int_to_int £temporary3250 -> £temporary3251 (Signed_Char -> Signed_Int)
27:		mov t2237, [a2236]
29:		and t2237, 255
31:		cmp t2237, 0
32:		jge strpbrk$9
33:		neg t2237
35:		neg t2237
37:	

strpbrk$9:	; parameter £temporary3252, offset 8
38:		mov [bp + 20], t2237
40:	

strpbrk$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; post call
48:	

strpbrk$12:	; £temporary3253 = return_value
53:	

strpbrk$13:	; if £temporary3253 == 0 goto 19
54:		cmp t2239, 0
55:		je strpbrk$19
57:	

strpbrk$14:	; £temporary3256 = mainString + index
58:		mov a2240, [bp + 6]
59:		add a2240, [bp + 10]
61:	

strpbrk$15:	; £temporary3255 -> £temporary3256 = *£temporary3256
63:	

strpbrk$16:	; £temporary3257 = &£temporary3255 -> £temporary3256
65:	

strpbrk$17:	; return_value = £temporary3257
67:	

strpbrk$18:	; return
68:		mov t2241, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp t2241
73:	

strpbrk$19:	; ++index
74:		inc word [bp + 10]
76:	

strpbrk$20:	; goto 1
77:		jmp strpbrk$1
79:	

strpbrk$21:	; return_value = 0
80:		mov a2242, 0
82:	

strpbrk$22:	; return
83:		mov t2243, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp t2243
88:	

strpbrk$23:	; function end strpbrk
1:	

strstr:	; index = 0
2:		mov word [bp + 10], 0
4:	

strstr$1:	; £temporary3261 = mainString + index
5:		mov a2244, [bp + 6]
6:		add a2244, [bp + 10]
8:	

strstr$2:	; £temporary3260 -> £temporary3261 = *£temporary3261
10:	

strstr$3:	; if £temporary3260 -> £temporary3261 == 0 goto 19
11:		cmp byte [a2244], 0
12:		je strstr$19
14:	

strstr$4:	; call header integral zero 0 stack zero 0
16:	

strstr$5:	; £temporary3264 = mainString + index
17:		mov a2245, [bp + 6]
18:		add a2245, [bp + 10]
20:	

strstr$6:	; parameter £temporary3264, offset 6
21:		mov [bp + 18], a2245
23:	

strstr$7:	; parameter subString, offset 8
24:		mov a2246, [bp + 8]
25:		mov [bp + 20], a2246
27:	

strstr$8:	; call function noellipse-noellipse strcmp
28:		mov word [bp + 12], strstr$9
29:		mov [bp + 14], bp
30:		add bp, 12
31:		jmp strcmp
33:	

strstr$9:	; post call
35:	

strstr$10:	; £temporary3265 = return_value
40:	

strstr$11:	; if £temporary3265 != 0 goto 17
41:		cmp t2248, 0
42:		jne strstr$17
44:	

strstr$12:	; £temporary3268 = mainString + index
45:		mov a2249, [bp + 6]
46:		add a2249, [bp + 10]
48:	

strstr$13:	; £temporary3267 -> £temporary3268 = *£temporary3268
50:	

strstr$14:	; £temporary3269 = &£temporary3267 -> £temporary3268
52:	

strstr$15:	; return_value = £temporary3269
54:	

strstr$16:	; return
55:		mov t2250, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp t2250
60:	

strstr$17:	; ++index
61:		inc word [bp + 10]
63:	

strstr$18:	; goto 1
64:		jmp strstr$1
66:	

strstr$19:	; return_value = 0
67:		mov a2251, 0
69:	

strstr$20:	; return
70:		mov t2252, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2252
75:	

strstr$21:	; function end strstr
1:	

strlen:	; index = 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; £temporary3273 = string + index
5:		mov a2253, [bp + 6]
6:		add a2253, [bp + 8]
8:	

strlen$2:	; £temporary3272 -> £temporary3273 = *£temporary3273
10:	

strlen$3:	; if £temporary3272 -> £temporary3273 == 0 goto 6
11:		cmp byte [a2253], 0
12:		je strlen$6
14:	

strlen$4:	; ++index
15:		inc word [bp + 8]
17:	

strlen$5:	; goto 1
18:		jmp strlen$1
20:	

strlen$6:	; return_value = index
21:		mov a2254, [bp + 8]
23:	

strlen$7:	; return
24:		mov t2255, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp t2255
29:	

strlen$8:	; function end strlen
1:	

strerror:	; call header integral zero 0 stack zero 0
3:	

strerror$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; post call
11:	

strerror$3:	; £temporary3276 = return_value
16:	

strerror$4:	; localeConvPtr = £temporary3276
17:		mov [bp + 8], t2257
19:	

strerror$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 8], 0
21:		je strerror$9
23:	

strerror$6:	; £temporary3278 -> localeConvPtr = *localeConvPtr, offset 16
24:		mov a2258, [bp + 8]
26:	

strerror$7:	; £temporary3282 = £temporary3278 -> localeConvPtr
27:		mov t2259, [a2258 + 16]
29:	

strerror$8:	; goto 10
30:		jmp strerror$10
32:	

strerror$9:	; £temporary3282 = 0
33:		mov t2260, 0
35:	

strerror$10:	; messageList = £temporary3282
36:		mov [bp + 10], t2260
38:	

strerror$11:	; if messageList == 0 goto 14
39:		cmp word [bp + 10], 0
40:		je strerror$14
42:	

strerror$12:	; £temporary3287 = messageList
43:		mov t2261, [bp + 10]
45:	

strerror$13:	; goto 15
46:		jmp strerror$15
48:	

strerror$14:	; £temporary3287 = enMessageList
49:		mov t2262, enMessageList
51:	

strerror$15:	; messageList = £temporary3287
52:		mov [bp + 10], t2262
54:	

strerror$16:	; £temporary3289 = errno * 2
55:		mov a2263, [bp + 6]
57:		xor dx, dx
58:		mul word [int2$2#]
64:	

strerror$17:	; £temporary3290 = messageList + £temporary3289
65:		mov a2267, [bp + 10]
66:		add a2267, t2266
68:	

strerror$18:	; £temporary3288 -> £temporary3290 = *£temporary3290
70:	

strerror$19:	; return_value = £temporary3288 -> £temporary3290
71:		mov t2268, [a2267]
73:	

strerror$20:	; return
74:		mov t2269, [bp]
75:		mov di, [bp + 4]
76:		mov bp, [bp + 2]
77:		jmp t2269
79:	

strerror$21:	; function end strerror
1:	

strtok:	; if string == 0 goto 37
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; £temporary3292 -> string = *string
6:		mov a2270, [bp + 6]
8:	

strtok$2:	; if £temporary3292 -> string != 0 goto 5
9:		cmp byte [a2270], 0
10:		jne strtok$5
12:	

strtok$3:	; return_value = 0
13:		mov a2271, 0
15:	

strtok$4:	; return
16:		mov t2272, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t2272
21:	

strtok$5:	; index = 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; £temporary3295 = string + index
25:		mov a2273, [bp + 6]
26:		add a2273, [bp + 10]
28:	

strtok$7:	; £temporary3294 -> £temporary3295 = *£temporary3295
30:	

strtok$8:	; if £temporary3294 -> £temporary3295 == 0 goto 31
31:		cmp byte [a2273], 0
32:		je strtok$31
34:	

strtok$9:	; call header integral zero 0 stack zero 0
36:	

strtok$10:	; parameter charSet, offset 6
37:		mov a2274, [bp + 8]
38:		mov [bp + 20], a2274
40:	

strtok$11:	; £temporary3299 = string + index
41:		mov a2275, [bp + 6]
42:		add a2275, [bp + 10]
44:	

strtok$12:	; £temporary3298 -> £temporary3299 = *£temporary3299
46:	

strtok$13:	; £temporary3300 = int_to_int £temporary3298 -> £temporary3299 (Signed_Char -> Signed_Int)
47:		mov t2276, [a2275]
49:		and t2276, 255
51:		cmp t2276, 0
52:		jge strtok$14
53:		neg t2276
55:		neg t2276
57:	

strtok$14:	; parameter £temporary3300, offset 8
58:		mov [bp + 22], t2276
60:	

strtok$15:	; call function noellipse-noellipse strchr
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; post call
68:	

strtok$17:	; £temporary3301 = return_value
73:	

strtok$18:	; if £temporary3301 == 0 goto 29
74:		cmp t2278, 0
75:		je strtok$29
77:	

strtok$19:	; £temporary3304 = string + index
78:		mov a2279, [bp + 6]
79:		add a2279, [bp + 10]
81:	

strtok$20:	; £temporary3303 -> £temporary3304 = *£temporary3304
83:	

strtok$21:	; £temporary3303 -> £temporary3304 = 0
84:		mov byte [a2279], 0
86:	

strtok$22:	; £temporary3305 = index + 1
87:		mov a2280, [bp + 10]
88:		add a2280, 1
90:	

strtok$23:	; £temporary3307 = string + £temporary3305
91:		mov a2281, [bp + 6]
92:		add a2281, a2280
94:	

strtok$24:	; £temporary3306 -> £temporary3307 = *£temporary3307
96:	

strtok$25:	; £temporary3308 = &£temporary3306 -> £temporary3307
98:	

strtok$26:	; token = £temporary3308
99:		mov [token], a2281
101:	

strtok$27:	; return_value = string
102:		mov a2282, [bp + 6]
104:	

strtok$28:	; return
105:		mov t2283, [bp]
106:		mov di, [bp + 4]
107:		mov bp, [bp + 2]
108:		jmp t2283
110:	

strtok$29:	; ++index
111:		inc word [bp + 10]
113:	

strtok$30:	; goto 6
114:		jmp strtok$6
116:	

strtok$31:	; £temporary3310 = string + index
117:		mov a2284, [bp + 6]
118:		add a2284, [bp + 10]
120:	

strtok$32:	; £temporary3309 -> £temporary3310 = *£temporary3310
122:	

strtok$33:	; £temporary3311 = &£temporary3309 -> £temporary3310
124:	

strtok$34:	; token = £temporary3311
125:		mov [token], a2284
127:	

strtok$35:	; return_value = string
128:		mov a2285, [bp + 6]
130:	

strtok$36:	; return
131:		mov t2286, [bp]
132:		mov di, [bp + 4]
133:		mov bp, [bp + 2]
134:		jmp t2286
136:	

strtok$37:	; if token != 0 goto 40
137:		cmp word [token], 0
138:		jne strtok$40
140:	

strtok$38:	; return_value = 0
141:		mov a2287, 0
143:	

strtok$39:	; return
144:		mov t2288, [bp]
145:		mov di, [bp + 4]
146:		mov bp, [bp + 2]
147:		jmp t2288
149:	

strtok$40:	; if (token,0) != 0 goto 43
150:		mov a2289, [token]
151:		cmp byte [a2289], 0
152:		jne strtok$43
154:	

strtok$41:	; return_value = 0
155:		mov a2290, 0
157:	

strtok$42:	; return
158:		mov t2291, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp t2291
163:	

strtok$43:	; index = 0
164:		mov word [bp + 10], 0
166:	

strtok$44:	; £temporary3316 = token + index
167:		mov a2292, [token]
168:		add a2292, [bp + 10]
170:	

strtok$45:	; £temporary3315 -> £temporary3316 = *£temporary3316
172:	

strtok$46:	; if £temporary3315 -> £temporary3316 == 0 goto 70
173:		cmp byte [a2292], 0
174:		je strtok$70
176:	

strtok$47:	; call header integral zero 0 stack zero 0
178:	

strtok$48:	; parameter charSet, offset 6
179:		mov a2293, [bp + 8]
180:		mov [bp + 20], a2293
182:	

strtok$49:	; £temporary3320 = token + index
183:		mov a2294, [token]
184:		add a2294, [bp + 10]
186:	

strtok$50:	; £temporary3319 -> £temporary3320 = *£temporary3320
188:	

strtok$51:	; £temporary3321 = int_to_int £temporary3319 -> £temporary3320 (Signed_Char -> Signed_Int)
189:		mov t2295, [a2294]
191:		and t2295, 255
193:		cmp t2295, 0
194:		jge strtok$52
195:		neg t2295
197:		neg t2295
199:	

strtok$52:	; parameter £temporary3321, offset 8
200:		mov [bp + 22], t2295
202:	

strtok$53:	; call function noellipse-noellipse strchr
203:		mov word [bp + 14], strtok$54
204:		mov [bp + 16], bp
205:		add bp, 14
206:		jmp strchr
208:	

strtok$54:	; post call
210:	

strtok$55:	; £temporary3322 = return_value
215:	

strtok$56:	; if £temporary3322 == 0 goto 68
216:		cmp t2297, 0
217:		je strtok$68
219:	

strtok$57:	; tokenStart2 = token
220:		mov a2298, [token]
221:		mov [bp + 14], a2298
223:	

strtok$58:	; £temporary3325 = token + index
224:		mov a2299, [token]
225:		add a2299, [bp + 10]
227:	

strtok$59:	; £temporary3324 -> £temporary3325 = *£temporary3325
229:	

strtok$60:	; £temporary3324 -> £temporary3325 = 0
230:		mov byte [a2299], 0
232:	

strtok$61:	; £temporary3326 = index + 1
233:		mov a2300, [bp + 10]
234:		add a2300, 1
236:	

strtok$62:	; £temporary3328 = token + £temporary3326
237:		mov a2301, [token]
238:		add a2301, a2300
240:	

strtok$63:	; £temporary3327 -> £temporary3328 = *£temporary3328
242:	

strtok$64:	; £temporary3329 = &£temporary3327 -> £temporary3328
244:	

strtok$65:	; token = £temporary3329
245:		mov [token], a2301
247:	

strtok$66:	; return_value = tokenStart2
248:		mov a2302, [bp + 14]
250:	

strtok$67:	; return
251:		mov t2303, [bp]
252:		mov di, [bp + 4]
253:		mov bp, [bp + 2]
254:		jmp t2303
256:	

strtok$68:	; ++index
257:		inc word [bp + 10]
259:	

strtok$69:	; goto 44
260:		jmp strtok$44
262:	

strtok$70:	; tokenStart = token
263:		mov a2304, [token]
264:		mov [bp + 12], a2304
266:	

strtok$71:	; £temporary3331 = token + index
267:		mov a2305, [token]
268:		add a2305, [bp + 10]
270:	

strtok$72:	; £temporary3330 -> £temporary3331 = *£temporary3331
272:	

strtok$73:	; £temporary3332 = &£temporary3330 -> £temporary3331
274:	

strtok$74:	; token = £temporary3332
275:		mov [token], a2305
277:	

strtok$75:	; return_value = tokenStart
278:		mov a2306, [bp + 12]
280:	

strtok$76:	; return
281:		mov t2307, [bp]
282:		mov di, [bp + 4]
283:		mov bp, [bp + 2]
284:		jmp t2307
286:	

strtok$77:	; function end strtok
1:	

memcpy:	; £temporary3337 = int_to_int target (Pointer -> Pointer)
2:		mov a2308, [bp + 6]
5:	

memcpy$1:	; charTarget = £temporary3337
6:		mov [bp + 12], a2308
8:	

memcpy$2:	; £temporary3338 = int_to_int source (Pointer -> Pointer)
9:		mov a2309, [bp + 8]
12:	

memcpy$3:	; charSource = £temporary3338
13:		mov [bp + 14], a2309
15:	

memcpy$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; if index >= size goto 13
19:		mov a2310, [bp + 10]
20:		cmp [bp + 16], a2310
21:		jge memcpy$13
23:	

memcpy$6:	; £temporary3342 = charTarget + index
24:		mov a2311, [bp + 12]
25:		add a2311, [bp + 16]
27:	

memcpy$7:	; £temporary3341 -> £temporary3342 = *£temporary3342
29:	

memcpy$8:	; £temporary3344 = charSource + index
30:		mov a2312, [bp + 14]
31:		add a2312, [bp + 16]
33:	

memcpy$9:	; £temporary3343 -> £temporary3344 = *£temporary3344
35:	

memcpy$10:	; £temporary3341 -> £temporary3342 = £temporary3343 -> £temporary3344
36:		mov t2313, [a2312]
37:		mov [a2311], t2313
39:	

memcpy$11:	; ++index
40:		inc word [bp + 16]
42:	

memcpy$12:	; goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; £temporary3345 = int_to_int target (Pointer -> Pointer)
46:		mov a2314, [bp + 6]
49:	

memcpy$14:	; return_value = £temporary3345
51:	

memcpy$15:	; return
52:		mov t2315, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2315
57:	

memcpy$16:	; function end memcpy
1:	

memmove:	; £temporary3346 = int_to_int target (Pointer -> Pointer)
2:		mov a2316, [bp + 6]
5:	

memmove$1:	; charTarget = £temporary3346
6:		mov [bp + 12], a2316
8:	

memmove$2:	; £temporary3347 = int_to_int source (Pointer -> Pointer)
9:		mov a2317, [bp + 8]
12:	

memmove$3:	; charSource = £temporary3347
13:		mov [bp + 14], a2317
15:	

memmove$4:	; if source >= target goto 14
16:		mov a2318, [bp + 6]
17:		cmp [bp + 8], a2318
18:		jge memmove$14
20:	

memmove$5:	; index = size - 1
21:		mov a2319, [bp + 10]
22:		sub a2319, 1
23:		mov [bp + 16], a2319
25:	

memmove$6:	; if index < 0 goto 23
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; £temporary3353 = charTarget + index
30:		mov a2320, [bp + 12]
31:		add a2320, [bp + 16]
33:	

memmove$8:	; £temporary3352 -> £temporary3353 = *£temporary3353
35:	

memmove$9:	; £temporary3355 = charSource + index
36:		mov a2321, [bp + 14]
37:		add a2321, [bp + 16]
39:	

memmove$10:	; £temporary3354 -> £temporary3355 = *£temporary3355
41:	

memmove$11:	; £temporary3352 -> £temporary3353 = £temporary3354 -> £temporary3355
42:		mov t2322, [a2321]
43:		mov [a2320], t2322
45:	

memmove$12:	; --index
46:		dec word [bp + 16]
48:	

memmove$13:	; goto 6
49:		jmp memmove$6
51:	

memmove$14:	; index = 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; if index >= size goto 23
55:		mov a2323, [bp + 10]
56:		cmp [bp + 16], a2323
57:		jge memmove$23
59:	

memmove$16:	; £temporary3359 = charTarget + index
60:		mov a2324, [bp + 12]
61:		add a2324, [bp + 16]
63:	

memmove$17:	; £temporary3358 -> £temporary3359 = *£temporary3359
65:	

memmove$18:	; £temporary3361 = charSource + index
66:		mov a2325, [bp + 14]
67:		add a2325, [bp + 16]
69:	

memmove$19:	; £temporary3360 -> £temporary3361 = *£temporary3361
71:	

memmove$20:	; £temporary3358 -> £temporary3359 = £temporary3360 -> £temporary3361
72:		mov t2326, [a2325]
73:		mov [a2324], t2326
75:	

memmove$21:	; ++index
76:		inc word [bp + 16]
78:	

memmove$22:	; goto 15
79:		jmp memmove$15
81:	

memmove$23:	; £temporary3362 = int_to_int target (Pointer -> Pointer)
82:		mov a2327, [bp + 6]
85:	

memmove$24:	; return_value = £temporary3362
87:	

memmove$25:	; return
88:		mov t2328, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp t2328
93:	

memmove$26:	; function end memmove
1:	

memcmp:	; £temporary3363 = int_to_int left (Pointer -> Pointer)
2:		mov a2329, [bp + 6]
5:	

memcmp$1:	; charLeft = £temporary3363
6:		mov [bp + 12], a2329
8:	

memcmp$2:	; £temporary3364 = int_to_int right (Pointer -> Pointer)
9:		mov a2330, [bp + 8]
12:	

memcmp$3:	; charRight = £temporary3364
13:		mov [bp + 14], a2330
15:	

memcmp$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; if index >= size goto 22
19:		mov a2331, [bp + 10]
20:		cmp [bp + 16], a2331
21:		jge memcmp$22
23:	

memcmp$6:	; £temporary3368 = charLeft + index
24:		mov a2332, [bp + 12]
25:		add a2332, [bp + 16]
27:	

memcmp$7:	; £temporary3367 -> £temporary3368 = *£temporary3368
29:	

memcmp$8:	; £temporary3370 = charRight + index
30:		mov a2333, [bp + 14]
31:		add a2333, [bp + 16]
33:	

memcmp$9:	; £temporary3369 -> £temporary3370 = *£temporary3370
35:	

memcmp$10:	; if £temporary3367 -> £temporary3368 >= £temporary3369 -> £temporary3370 goto 13
36:		mov t2334, [a2333]
37:		cmp [a2332], t2334
38:		jge memcmp$13
40:	

memcmp$11:	; return_value = -1
41:		mov a2335, -1
43:	

memcmp$12:	; return
44:		mov t2336, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t2336
49:	

memcmp$13:	; £temporary3373 = charLeft + index
50:		mov a2337, [bp + 12]
51:		add a2337, [bp + 16]
53:	

memcmp$14:	; £temporary3372 -> £temporary3373 = *£temporary3373
55:	

memcmp$15:	; £temporary3375 = charRight + index
56:		mov a2338, [bp + 14]
57:		add a2338, [bp + 16]
59:	

memcmp$16:	; £temporary3374 -> £temporary3375 = *£temporary3375
61:	

memcmp$17:	; if £temporary3372 -> £temporary3373 <= £temporary3374 -> £temporary3375 goto 20
62:		mov t2339, [a2338]
63:		cmp [a2337], t2339
64:		jle memcmp$20
66:	

memcmp$18:	; return_value = 1
67:		mov a2340, 1
69:	

memcmp$19:	; return
70:		mov t2341, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2341
75:	

memcmp$20:	; ++index
76:		inc word [bp + 16]
78:	

memcmp$21:	; goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; return_value = 0
82:		mov a2342, 0
84:	

memcmp$23:	; return
85:		mov t2343, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp t2343
90:	

memcmp$24:	; function end memcmp
1:	

memchr:	; £temporary3377 = int_to_int block (Pointer -> Pointer)
2:		mov a2344, [bp + 6]
5:	

memchr$1:	; charBlock = £temporary3377
6:		mov [bp + 14], a2344
8:	

memchr$2:	; £temporary3378 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov a2345, [bp + 8]
12:		cmp a2345, 0
13:		jge memchr$3
14:		neg a2345
16:		neg a2345
18:	

memchr$3:	; c = £temporary3378
19:		mov [bp + 16], a2345
21:	

memchr$4:	; index = 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; if index >= size goto 17
25:		mov a2346, [bp + 10]
26:		cmp [bp + 12], a2346
27:		jge memchr$17
29:	

memchr$6:	; £temporary3382 = charBlock + index
30:		mov a2347, [bp + 14]
31:		add a2347, [bp + 12]
33:	

memchr$7:	; £temporary3381 -> £temporary3382 = *£temporary3382
35:	

memchr$8:	; if £temporary3381 -> £temporary3382 != c goto 15
36:		mov a2348, [bp + 16]
37:		cmp [a2347], a2348
38:		jne memchr$15
40:	

memchr$9:	; £temporary3385 = charBlock + index
41:		mov a2349, [bp + 14]
42:		add a2349, [bp + 12]
44:	

memchr$10:	; £temporary3384 -> £temporary3385 = *£temporary3385
46:	

memchr$11:	; £temporary3386 = &£temporary3384 -> £temporary3385
48:	

memchr$12:	; £temporary3387 = int_to_int £temporary3386 (Pointer -> Pointer)
51:	

memchr$13:	; return_value = £temporary3387
53:	

memchr$14:	; return
54:		mov t2350, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp t2350
59:	

memchr$15:	; ++index
60:		inc word [bp + 12]
62:	

memchr$16:	; goto 5
63:		jmp memchr$5
65:	

memchr$17:	; return_value = 0
66:		mov a2351, 0
68:	

memchr$18:	; return
69:		mov t2352, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp t2352
74:	

memchr$19:	; function end memchr
1:	

memset:	; £temporary3388 = int_to_int block (Pointer -> Pointer)
2:		mov a2353, [bp + 6]
5:	

memset$1:	; charBlock = £temporary3388
6:		mov [bp + 12], a2353
8:	

memset$2:	; £temporary3389 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov a2354, [bp + 8]
12:		cmp a2354, 0
13:		jge memset$3
14:		neg a2354
16:		neg a2354
18:	

memset$3:	; c = £temporary3389
19:		mov [bp + 14], a2354
21:	

memset$4:	; index = 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; if index >= size goto 11
25:		mov a2355, [bp + 10]
26:		cmp [bp + 15], a2355
27:		jge memset$11
29:	

memset$6:	; £temporary3393 = charBlock + index
30:		mov a2356, [bp + 12]
31:		add a2356, [bp + 15]
33:	

memset$7:	; £temporary3392 -> £temporary3393 = *£temporary3393
35:	

memset$8:	; £temporary3392 -> £temporary3393 = c
36:		mov a2357, [bp + 14]
37:		mov [a2356], a2357
39:	

memset$9:	; ++index
40:		inc word [bp + 15]
42:	

memset$10:	; goto 5
43:		jmp memset$5
45:	

memset$11:	; return_value = block
46:		mov a2358, [bp + 6]
48:	

memset$12:	; return
49:		mov t2359, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2359
54:	

memset$13:	; function end memset
