1:	

strcpy:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; £temporary3895 = source + index
5:		mov a2342, [bp + 8]
6:		add a2342, [bp + 10]
8:	

strcpy$2:	; £temporary3894 -> £temporary3895 = *£temporary3895
10:	

strcpy$3:	; if £temporary3894 -> £temporary3895 == 0 goto 11
11:		cmp byte [a2342], 0
12:		je strcpy$11
14:	

strcpy$4:	; £temporary3899 = target + index
15:		mov a2343, [bp + 6]
16:		add a2343, [bp + 10]
18:	

strcpy$5:	; £temporary3898 -> £temporary3899 = *£temporary3899
20:	

strcpy$6:	; £temporary3901 = source + index
21:		mov a2344, [bp + 8]
22:		add a2344, [bp + 10]
24:	

strcpy$7:	; £temporary3900 -> £temporary3901 = *£temporary3901
26:	

strcpy$8:	; £temporary3898 -> £temporary3899 = £temporary3900 -> £temporary3901
27:		mov t2345, [a2344]
28:		mov [a2343], t2345
30:	

strcpy$9:	; ++index
31:		inc word [bp + 10]
33:	

strcpy$10:	; goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; £temporary3903 = target + index
37:		mov a2346, [bp + 6]
38:		add a2346, [bp + 10]
40:	

strcpy$12:	; £temporary3902 -> £temporary3903 = *£temporary3903
42:	

strcpy$13:	; £temporary3902 -> £temporary3903 = 0
43:		mov byte [a2346], 0
45:	

strcpy$14:	; return_value = target
46:		mov a2347, [bp + 6]
48:	

strcpy$15:	; return
49:		mov t2348, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2348
54:	

strcpy$16:	; function end strcpy
1:	

strncpy:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; if index >= size goto 12
5:		mov a2349, [bp + 10]
6:		cmp [bp + 12], a2349
7:		jge strncpy$12
9:	

strncpy$2:	; £temporary3906 = source + index
10:		mov a2350, [bp + 8]
11:		add a2350, [bp + 12]
13:	

strncpy$3:	; £temporary3905 -> £temporary3906 = *£temporary3906
15:	

strncpy$4:	; if £temporary3905 -> £temporary3906 == 0 goto 12
16:		cmp byte [a2350], 0
17:		je strncpy$12
19:	

strncpy$5:	; £temporary3911 = target + index
20:		mov a2351, [bp + 6]
21:		add a2351, [bp + 12]
23:	

strncpy$6:	; £temporary3910 -> £temporary3911 = *£temporary3911
25:	

strncpy$7:	; £temporary3913 = source + index
26:		mov a2352, [bp + 8]
27:		add a2352, [bp + 12]
29:	

strncpy$8:	; £temporary3912 -> £temporary3913 = *£temporary3913
31:	

strncpy$9:	; £temporary3910 -> £temporary3911 = £temporary3912 -> £temporary3913
32:		mov t2353, [a2352]
33:		mov [a2351], t2353
35:	

strncpy$10:	; ++index
36:		inc word [bp + 12]
38:	

strncpy$11:	; goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; if index >= size goto 18
42:		mov a2354, [bp + 10]
43:		cmp [bp + 12], a2354
44:		jge strncpy$18
46:	

strncpy$13:	; £temporary3917 = target + index
47:		mov a2355, [bp + 6]
48:		add a2355, [bp + 12]
50:	

strncpy$14:	; £temporary3916 -> £temporary3917 = *£temporary3917
52:	

strncpy$15:	; £temporary3916 -> £temporary3917 = 0
53:		mov byte [a2355], 0
55:	

strncpy$16:	; ++index
56:		inc word [bp + 12]
58:	

strncpy$17:	; goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; return_value = target
62:		mov a2356, [bp + 6]
64:	

strncpy$19:	; return
65:		mov t2357, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t2357
70:	

strncpy$20:	; function end strncpy
1:	

strcat:	; call header integral zero 0 stack zero 0
3:	

strcat$1:	; parameter target, offset 6
4:		mov a2358, [bp + 6]
5:		mov [bp + 18], a2358
7:	

strcat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; post call
15:	

strcat$4:	; £temporary3918 = return_value
20:	

strcat$5:	; targetLength = £temporary3918
21:		mov [bp + 12], t2360
23:	

strcat$6:	; index = 0
24:		mov word [bp + 10], 0
26:	

strcat$7:	; £temporary3920 = source + index
27:		mov a2361, [bp + 8]
28:		add a2361, [bp + 10]
30:	

strcat$8:	; £temporary3919 -> £temporary3920 = *£temporary3920
32:	

strcat$9:	; if £temporary3919 -> £temporary3920 == 0 goto 18
33:		cmp byte [a2361], 0
34:		je strcat$18
36:	

strcat$10:	; £temporary3923 = targetLength + index
37:		mov a2362, [bp + 12]
38:		add a2362, [bp + 10]
40:	

strcat$11:	; £temporary3925 = target + £temporary3923
41:		mov a2363, [bp + 6]
42:		add a2363, a2362
44:	

strcat$12:	; £temporary3924 -> £temporary3925 = *£temporary3925
46:	

strcat$13:	; £temporary3927 = source + index
47:		mov a2364, [bp + 8]
48:		add a2364, [bp + 10]
50:	

strcat$14:	; £temporary3926 -> £temporary3927 = *£temporary3927
52:	

strcat$15:	; £temporary3924 -> £temporary3925 = £temporary3926 -> £temporary3927
53:		mov t2365, [a2364]
54:		mov [a2363], t2365
56:	

strcat$16:	; ++index
57:		inc word [bp + 10]
59:	

strcat$17:	; goto 7
60:		jmp strcat$7
62:	

strcat$18:	; £temporary3928 = targetLength + index
63:		mov a2366, [bp + 12]
64:		add a2366, [bp + 10]
66:	

strcat$19:	; £temporary3930 = target + £temporary3928
67:		mov a2367, [bp + 6]
68:		add a2367, a2366
70:	

strcat$20:	; £temporary3929 -> £temporary3930 = *£temporary3930
72:	

strcat$21:	; £temporary3929 -> £temporary3930 = 0
73:		mov byte [a2367], 0
75:	

strcat$22:	; return_value = target
76:		mov a2368, [bp + 6]
78:	

strcat$23:	; return
79:		mov t2369, [bp]
80:		mov di, [bp + 4]
81:		mov bp, [bp + 2]
82:		jmp t2369
84:	

strcat$24:	; function end strcat
1:	

strncat:	; call header integral zero 0 stack zero 0
3:	

strncat$1:	; parameter target, offset 6
4:		mov a2370, [bp + 6]
5:		mov [bp + 20], a2370
7:	

strncat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; post call
15:	

strncat$4:	; £temporary3932 = return_value
20:	

strncat$5:	; targetLength = £temporary3932
21:		mov [bp + 14], t2372
23:	

strncat$6:	; index = 0
24:		mov word [bp + 12], 0
26:	

strncat$7:	; £temporary3933 = size - 1
27:		mov a2373, [bp + 10]
28:		sub a2373, 1
30:	

strncat$8:	; if index >= £temporary3933 goto 20
31:		cmp [bp + 12], a2373
32:		jge strncat$20
34:	

strncat$9:	; £temporary3936 = source + index
35:		mov a2374, [bp + 8]
36:		add a2374, [bp + 12]
38:	

strncat$10:	; £temporary3935 -> £temporary3936 = *£temporary3936
40:	

strncat$11:	; if £temporary3935 -> £temporary3936 == 0 goto 20
41:		cmp byte [a2374], 0
42:		je strncat$20
44:	

strncat$12:	; £temporary3940 = targetLength + index
45:		mov a2375, [bp + 14]
46:		add a2375, [bp + 12]
48:	

strncat$13:	; £temporary3942 = target + £temporary3940
49:		mov a2376, [bp + 6]
50:		add a2376, a2375
52:	

strncat$14:	; £temporary3941 -> £temporary3942 = *£temporary3942
54:	

strncat$15:	; £temporary3944 = source + index
55:		mov a2377, [bp + 8]
56:		add a2377, [bp + 12]
58:	

strncat$16:	; £temporary3943 -> £temporary3944 = *£temporary3944
60:	

strncat$17:	; £temporary3941 -> £temporary3942 = £temporary3943 -> £temporary3944
61:		mov t2378, [a2377]
62:		mov [a2376], t2378
64:	

strncat$18:	; ++index
65:		inc word [bp + 12]
67:	

strncat$19:	; goto 7
68:		jmp strncat$7
70:	

strncat$20:	; £temporary3945 = targetLength + size
71:		mov a2379, [bp + 14]
72:		add a2379, [bp + 10]
74:	

strncat$21:	; £temporary3946 = £temporary3945 - 1
75:		sub a2379, 1
77:	

strncat$22:	; £temporary3948 = target + £temporary3946
78:		mov a2380, [bp + 6]
79:		add a2380, a2379
81:	

strncat$23:	; £temporary3947 -> £temporary3948 = *£temporary3948
83:	

strncat$24:	; £temporary3947 -> £temporary3948 = 0
84:		mov byte [a2380], 0
86:	

strncat$25:	; return_value = target
87:		mov a2381, [bp + 6]
89:	

strncat$26:	; return
90:		mov t2382, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp t2382
95:	

strncat$27:	; function end strncat
1:	

strcmp:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; £temporary3952 = left + index
5:		mov a2383, [bp + 6]
6:		add a2383, [bp + 10]
8:	

strcmp$2:	; £temporary3951 -> £temporary3952 = *£temporary3952
10:	

strcmp$3:	; if £temporary3951 -> £temporary3952 != 0 goto 9
11:		cmp byte [a2383], 0
12:		jne strcmp$9
14:	

strcmp$4:	; £temporary3955 = right + index
15:		mov a2384, [bp + 8]
16:		add a2384, [bp + 10]
18:	

strcmp$5:	; £temporary3954 -> £temporary3955 = *£temporary3955
20:	

strcmp$6:	; if £temporary3954 -> £temporary3955 != 0 goto 9
21:		cmp byte [a2384], 0
22:		jne strcmp$9
24:	

strcmp$7:	; return_value = 0
25:		mov a2385, 0
27:	

strcmp$8:	; return
28:		mov t2386, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp t2386
33:	

strcmp$9:	; £temporary3959 = left + index
34:		mov a2387, [bp + 6]
35:		add a2387, [bp + 10]
37:	

strcmp$10:	; £temporary3958 -> £temporary3959 = *£temporary3959
39:	

strcmp$11:	; if £temporary3958 -> £temporary3959 != 0 goto 14
40:		cmp byte [a2387], 0
41:		jne strcmp$14
43:	

strcmp$12:	; return_value = -1
44:		mov a2388, -1
46:	

strcmp$13:	; return
47:		mov t2389, [bp]
48:		mov di, [bp + 4]
49:		mov bp, [bp + 2]
50:		jmp t2389
52:	

strcmp$14:	; £temporary3962 = right + index
53:		mov a2390, [bp + 8]
54:		add a2390, [bp + 10]
56:	

strcmp$15:	; £temporary3961 -> £temporary3962 = *£temporary3962
58:	

strcmp$16:	; if £temporary3961 -> £temporary3962 != 0 goto 19
59:		cmp byte [a2390], 0
60:		jne strcmp$19
62:	

strcmp$17:	; return_value = 1
63:		mov a2391, 1
65:	

strcmp$18:	; return
66:		mov t2392, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp t2392
71:	

strcmp$19:	; £temporary3965 = left + index
72:		mov a2393, [bp + 6]
73:		add a2393, [bp + 10]
75:	

strcmp$20:	; £temporary3964 -> £temporary3965 = *£temporary3965
77:	

strcmp$21:	; £temporary3967 = right + index
78:		mov a2394, [bp + 8]
79:		add a2394, [bp + 10]
81:	

strcmp$22:	; £temporary3966 -> £temporary3967 = *£temporary3967
83:	

strcmp$23:	; if £temporary3964 -> £temporary3965 >= £temporary3966 -> £temporary3967 goto 26
84:		mov t2395, [a2394]
85:		cmp [a2393], t2395
86:		jge strcmp$26
88:	

strcmp$24:	; return_value = -1
89:		mov a2396, -1
91:	

strcmp$25:	; return
92:		mov t2397, [bp]
93:		mov di, [bp + 4]
94:		mov bp, [bp + 2]
95:		jmp t2397
97:	

strcmp$26:	; £temporary3970 = left + index
98:		mov a2398, [bp + 6]
99:		add a2398, [bp + 10]
101:	

strcmp$27:	; £temporary3969 -> £temporary3970 = *£temporary3970
103:	

strcmp$28:	; £temporary3972 = right + index
104:		mov a2399, [bp + 8]
105:		add a2399, [bp + 10]
107:	

strcmp$29:	; £temporary3971 -> £temporary3972 = *£temporary3972
109:	

strcmp$30:	; if £temporary3969 -> £temporary3970 <= £temporary3971 -> £temporary3972 goto 33
110:		mov t2400, [a2399]
111:		cmp [a2398], t2400
112:		jle strcmp$33
114:	

strcmp$31:	; return_value = 1
115:		mov a2401, 1
117:	

strcmp$32:	; return
118:		mov t2402, [bp]
119:		mov di, [bp + 4]
120:		mov bp, [bp + 2]
121:		jmp t2402
123:	

strcmp$33:	; ++index
124:		inc word [bp + 10]
126:	

strcmp$34:	; goto 1
127:		jmp strcmp$1
129:	

strcmp$35:	; function end strcmp
1:	

strncmp:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; if index >= size goto 36
5:		mov a2403, [bp + 10]
6:		cmp [bp + 12], a2403
7:		jge strncmp$36
9:	

strncmp$2:	; £temporary3978 = left + index
10:		mov a2404, [bp + 6]
11:		add a2404, [bp + 12]
13:	

strncmp$3:	; £temporary3977 -> £temporary3978 = *£temporary3978
15:	

strncmp$4:	; if £temporary3977 -> £temporary3978 != 0 goto 10
16:		cmp byte [a2404], 0
17:		jne strncmp$10
19:	

strncmp$5:	; £temporary3981 = right + index
20:		mov a2405, [bp + 8]
21:		add a2405, [bp + 12]
23:	

strncmp$6:	; £temporary3980 -> £temporary3981 = *£temporary3981
25:	

strncmp$7:	; if £temporary3980 -> £temporary3981 != 0 goto 10
26:		cmp byte [a2405], 0
27:		jne strncmp$10
29:	

strncmp$8:	; return_value = 0
30:		mov a2406, 0
32:	

strncmp$9:	; return
33:		mov t2407, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp t2407
38:	

strncmp$10:	; £temporary3985 = left + index
39:		mov a2408, [bp + 6]
40:		add a2408, [bp + 12]
42:	

strncmp$11:	; £temporary3984 -> £temporary3985 = *£temporary3985
44:	

strncmp$12:	; if £temporary3984 -> £temporary3985 != 0 goto 15
45:		cmp byte [a2408], 0
46:		jne strncmp$15
48:	

strncmp$13:	; return_value = -1
49:		mov a2409, -1
51:	

strncmp$14:	; return
52:		mov t2410, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2410
57:	

strncmp$15:	; £temporary3988 = right + index
58:		mov a2411, [bp + 8]
59:		add a2411, [bp + 12]
61:	

strncmp$16:	; £temporary3987 -> £temporary3988 = *£temporary3988
63:	

strncmp$17:	; if £temporary3987 -> £temporary3988 != 0 goto 20
64:		cmp byte [a2411], 0
65:		jne strncmp$20
67:	

strncmp$18:	; return_value = 1
68:		mov a2412, 1
70:	

strncmp$19:	; return
71:		mov t2413, [bp]
72:		mov di, [bp + 4]
73:		mov bp, [bp + 2]
74:		jmp t2413
76:	

strncmp$20:	; £temporary3991 = left + index
77:		mov a2414, [bp + 6]
78:		add a2414, [bp + 12]
80:	

strncmp$21:	; £temporary3990 -> £temporary3991 = *£temporary3991
82:	

strncmp$22:	; £temporary3993 = right + index
83:		mov a2415, [bp + 8]
84:		add a2415, [bp + 12]
86:	

strncmp$23:	; £temporary3992 -> £temporary3993 = *£temporary3993
88:	

strncmp$24:	; if £temporary3990 -> £temporary3991 >= £temporary3992 -> £temporary3993 goto 27
89:		mov t2416, [a2415]
90:		cmp [a2414], t2416
91:		jge strncmp$27
93:	

strncmp$25:	; return_value = -1
94:		mov a2417, -1
96:	

strncmp$26:	; return
97:		mov t2418, [bp]
98:		mov di, [bp + 4]
99:		mov bp, [bp + 2]
100:		jmp t2418
102:	

strncmp$27:	; £temporary3996 = left + index
103:		mov a2419, [bp + 6]
104:		add a2419, [bp + 12]
106:	

strncmp$28:	; £temporary3995 -> £temporary3996 = *£temporary3996
108:	

strncmp$29:	; £temporary3998 = right + index
109:		mov a2420, [bp + 8]
110:		add a2420, [bp + 12]
112:	

strncmp$30:	; £temporary3997 -> £temporary3998 = *£temporary3998
114:	

strncmp$31:	; if £temporary3995 -> £temporary3996 <= £temporary3997 -> £temporary3998 goto 34
115:		mov t2421, [a2420]
116:		cmp [a2419], t2421
117:		jle strncmp$34
119:	

strncmp$32:	; return_value = 1
120:		mov a2422, 1
122:	

strncmp$33:	; return
123:		mov t2423, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp t2423
128:	

strncmp$34:	; ++index
129:		inc word [bp + 12]
131:	

strncmp$35:	; goto 1
132:		jmp strncmp$1
134:	

strncmp$36:	; return_value = 0
135:		mov a2424, 0
137:	

strncmp$37:	; return
138:		mov t2425, [bp]
139:		mov di, [bp + 4]
140:		mov bp, [bp + 2]
141:		jmp t2425
143:	

strncmp$38:	; function end strncmp
1:	

strchr:	; £temporary4000 = int_to_int i (Signed_Int -> Signed_Char)
2:		mov a2426, [bp + 8]
5:		cmp a2426, 0
6:		jge strchr$1
7:		neg a2426
9:		neg a2426
11:	

strchr$1:	; c = £temporary4000
12:		mov [bp + 12], a2426
14:	

strchr$2:	; index = 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; £temporary4002 = text + index
18:		mov a2427, [bp + 6]
19:		add a2427, [bp + 10]
21:	

strchr$4:	; £temporary4001 -> £temporary4002 = *£temporary4002
23:	

strchr$5:	; if £temporary4001 -> £temporary4002 == 0 goto 16
24:		cmp byte [a2427], 0
25:		je strchr$16
27:	

strchr$6:	; £temporary4006 = text + index
28:		mov a2428, [bp + 6]
29:		add a2428, [bp + 10]
31:	

strchr$7:	; £temporary4005 -> £temporary4006 = *£temporary4006
33:	

strchr$8:	; if £temporary4005 -> £temporary4006 != c goto 14
34:		mov a2429, [bp + 12]
35:		cmp [a2428], a2429
36:		jne strchr$14
38:	

strchr$9:	; £temporary4009 = text + index
39:		mov a2430, [bp + 6]
40:		add a2430, [bp + 10]
42:	

strchr$10:	; £temporary4008 -> £temporary4009 = *£temporary4009
44:	

strchr$11:	; £temporary4010 = &£temporary4008 -> £temporary4009
46:	

strchr$12:	; return_value = £temporary4010
48:	

strchr$13:	; return
49:		mov t2431, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2431
54:	

strchr$14:	; ++index
55:		inc word [bp + 10]
57:	

strchr$15:	; goto 3
58:		jmp strchr$3
60:	

strchr$16:	; return_value = 0
61:		mov a2432, 0
63:	

strchr$17:	; return
64:		mov t2433, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp t2433
69:	

strchr$18:	; function end strchr
1:	

strrchr:	; result = 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; £temporary4011 = int_to_int i (Signed_Int -> Signed_Char)
5:		mov a2434, [bp + 8]
8:		cmp a2434, 0
9:		jge strrchr$2
10:		neg a2434
12:		neg a2434
14:	

strrchr$2:	; c = £temporary4011
15:		mov [bp + 14], a2434
17:	

strrchr$3:	; index = 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; £temporary4013 = text + index
21:		mov a2435, [bp + 6]
22:		add a2435, [bp + 10]
24:	

strrchr$5:	; £temporary4012 -> £temporary4013 = *£temporary4013
26:	

strrchr$6:	; if £temporary4012 -> £temporary4013 == 0 goto 16
27:		cmp byte [a2435], 0
28:		je strrchr$16
30:	

strrchr$7:	; £temporary4017 = text + index
31:		mov a2436, [bp + 6]
32:		add a2436, [bp + 10]
34:	

strrchr$8:	; £temporary4016 -> £temporary4017 = *£temporary4017
36:	

strrchr$9:	; if £temporary4016 -> £temporary4017 != c goto 14
37:		mov a2437, [bp + 14]
38:		cmp [a2436], a2437
39:		jne strrchr$14
41:	

strrchr$10:	; £temporary4020 = text + index
42:		mov a2438, [bp + 6]
43:		add a2438, [bp + 10]
45:	

strrchr$11:	; £temporary4019 -> £temporary4020 = *£temporary4020
47:	

strrchr$12:	; £temporary4021 = &£temporary4019 -> £temporary4020
49:	

strrchr$13:	; result = £temporary4021
50:		mov [bp + 12], a2438
52:	

strrchr$14:	; ++index
53:		inc word [bp + 10]
55:	

strrchr$15:	; goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; return_value = result
59:		mov a2439, [bp + 12]
61:	

strrchr$17:	; return
62:		mov t2440, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp t2440
67:	

strrchr$18:	; function end strrchr
1:	

strspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; £temporary4023 = mainString + index
5:		mov a2441, [bp + 6]
6:		add a2441, [bp + 10]
8:	

strspn$2:	; £temporary4022 -> £temporary4023 = *£temporary4023
10:	

strspn$3:	; if £temporary4022 -> £temporary4023 == 0 goto 18
11:		cmp byte [a2441], 0
12:		je strspn$18
14:	

strspn$4:	; call header integral zero 0 stack zero 0
16:	

strspn$5:	; parameter charSet, offset 6
17:		mov a2442, [bp + 8]
18:		mov [bp + 18], a2442
20:	

strspn$6:	; £temporary4027 = mainString + index
21:		mov a2443, [bp + 6]
22:		add a2443, [bp + 10]
24:	

strspn$7:	; £temporary4026 -> £temporary4027 = *£temporary4027
26:	

strspn$8:	; £temporary4028 = int_to_int £temporary4026 -> £temporary4027 (Signed_Char -> Signed_Int)
27:		mov t2444, [a2443]
29:		and t2444, 255
31:		cmp t2444, 0
32:		jge strspn$9
33:		neg t2444
35:		neg t2444
37:	

strspn$9:	; parameter £temporary4028, offset 8
38:		mov [bp + 20], t2444
40:	

strspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; post call
48:	

strspn$12:	; £temporary4029 = return_value
53:	

strspn$13:	; if £temporary4029 != 0 goto 16
54:		cmp t2446, 0
55:		jne strspn$16
57:	

strspn$14:	; return_value = index
58:		mov a2447, [bp + 10]
60:	

strspn$15:	; return
61:		mov t2448, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t2448
66:	

strspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strspn$17:	; goto 1
70:		jmp strspn$1
72:	

strspn$18:	; return_value = -1
73:		mov a2449, -1
75:	

strspn$19:	; return
76:		mov t2450, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2450
81:	

strspn$20:	; function end strspn
1:	

strcspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; £temporary4034 = mainString + index
5:		mov a2451, [bp + 6]
6:		add a2451, [bp + 10]
8:	

strcspn$2:	; £temporary4033 -> £temporary4034 = *£temporary4034
10:	

strcspn$3:	; if £temporary4033 -> £temporary4034 == 0 goto 18
11:		cmp byte [a2451], 0
12:		je strcspn$18
14:	

strcspn$4:	; call header integral zero 0 stack zero 0
16:	

strcspn$5:	; parameter charSet, offset 6
17:		mov a2452, [bp + 8]
18:		mov [bp + 18], a2452
20:	

strcspn$6:	; £temporary4038 = mainString + index
21:		mov a2453, [bp + 6]
22:		add a2453, [bp + 10]
24:	

strcspn$7:	; £temporary4037 -> £temporary4038 = *£temporary4038
26:	

strcspn$8:	; £temporary4039 = int_to_int £temporary4037 -> £temporary4038 (Signed_Char -> Signed_Int)
27:		mov t2454, [a2453]
29:		and t2454, 255
31:		cmp t2454, 0
32:		jge strcspn$9
33:		neg t2454
35:		neg t2454
37:	

strcspn$9:	; parameter £temporary4039, offset 8
38:		mov [bp + 20], t2454
40:	

strcspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; post call
48:	

strcspn$12:	; £temporary4040 = return_value
53:	

strcspn$13:	; if £temporary4040 == 0 goto 16
54:		cmp t2456, 0
55:		je strcspn$16
57:	

strcspn$14:	; return_value = index
58:		mov a2457, [bp + 10]
60:	

strcspn$15:	; return
61:		mov t2458, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t2458
66:	

strcspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strcspn$17:	; goto 1
70:		jmp strcspn$1
72:	

strcspn$18:	; return_value = -1
73:		mov a2459, -1
75:	

strcspn$19:	; return
76:		mov t2460, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2460
81:	

strcspn$20:	; function end strcspn
1:	

strpbrk:	; index = 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; £temporary4045 = mainString + index
5:		mov a2461, [bp + 6]
6:		add a2461, [bp + 10]
8:	

strpbrk$2:	; £temporary4044 -> £temporary4045 = *£temporary4045
10:	

strpbrk$3:	; if £temporary4044 -> £temporary4045 == 0 goto 21
11:		cmp byte [a2461], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; call header integral zero 0 stack zero 0
16:	

strpbrk$5:	; parameter charSet, offset 6
17:		mov a2462, [bp + 8]
18:		mov [bp + 18], a2462
20:	

strpbrk$6:	; £temporary4049 = mainString + index
21:		mov a2463, [bp + 6]
22:		add a2463, [bp + 10]
24:	

strpbrk$7:	; £temporary4048 -> £temporary4049 = *£temporary4049
26:	

strpbrk$8:	; £temporary4050 = int_to_int £temporary4048 -> £temporary4049 (Signed_Char -> Signed_Int)
27:		mov t2464, [a2463]
29:		and t2464, 255
31:		cmp t2464, 0
32:		jge strpbrk$9
33:		neg t2464
35:		neg t2464
37:	

strpbrk$9:	; parameter £temporary4050, offset 8
38:		mov [bp + 20], t2464
40:	

strpbrk$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; post call
48:	

strpbrk$12:	; £temporary4051 = return_value
53:	

strpbrk$13:	; if £temporary4051 == 0 goto 19
54:		cmp t2466, 0
55:		je strpbrk$19
57:	

strpbrk$14:	; £temporary4054 = mainString + index
58:		mov a2467, [bp + 6]
59:		add a2467, [bp + 10]
61:	

strpbrk$15:	; £temporary4053 -> £temporary4054 = *£temporary4054
63:	

strpbrk$16:	; £temporary4055 = &£temporary4053 -> £temporary4054
65:	

strpbrk$17:	; return_value = £temporary4055
67:	

strpbrk$18:	; return
68:		mov t2468, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp t2468
73:	

strpbrk$19:	; ++index
74:		inc word [bp + 10]
76:	

strpbrk$20:	; goto 1
77:		jmp strpbrk$1
79:	

strpbrk$21:	; return_value = 0
80:		mov a2469, 0
82:	

strpbrk$22:	; return
83:		mov t2470, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp t2470
88:	

strpbrk$23:	; function end strpbrk
1:	

strstr:	; index = 0
2:		mov word [bp + 10], 0
4:	

strstr$1:	; £temporary4059 = mainString + index
5:		mov a2471, [bp + 6]
6:		add a2471, [bp + 10]
8:	

strstr$2:	; £temporary4058 -> £temporary4059 = *£temporary4059
10:	

strstr$3:	; if £temporary4058 -> £temporary4059 == 0 goto 19
11:		cmp byte [a2471], 0
12:		je strstr$19
14:	

strstr$4:	; call header integral zero 0 stack zero 0
16:	

strstr$5:	; £temporary4062 = mainString + index
17:		mov a2472, [bp + 6]
18:		add a2472, [bp + 10]
20:	

strstr$6:	; parameter £temporary4062, offset 6
21:		mov [bp + 18], a2472
23:	

strstr$7:	; parameter subString, offset 8
24:		mov a2473, [bp + 8]
25:		mov [bp + 20], a2473
27:	

strstr$8:	; call function noellipse-noellipse strcmp
28:		mov word [bp + 12], strstr$9
29:		mov [bp + 14], bp
30:		add bp, 12
31:		jmp strcmp
33:	

strstr$9:	; post call
35:	

strstr$10:	; £temporary4063 = return_value
40:	

strstr$11:	; if £temporary4063 != 0 goto 17
41:		cmp t2475, 0
42:		jne strstr$17
44:	

strstr$12:	; £temporary4066 = mainString + index
45:		mov a2476, [bp + 6]
46:		add a2476, [bp + 10]
48:	

strstr$13:	; £temporary4065 -> £temporary4066 = *£temporary4066
50:	

strstr$14:	; £temporary4067 = &£temporary4065 -> £temporary4066
52:	

strstr$15:	; return_value = £temporary4067
54:	

strstr$16:	; return
55:		mov t2477, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp t2477
60:	

strstr$17:	; ++index
61:		inc word [bp + 10]
63:	

strstr$18:	; goto 1
64:		jmp strstr$1
66:	

strstr$19:	; return_value = 0
67:		mov a2478, 0
69:	

strstr$20:	; return
70:		mov t2479, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2479
75:	

strstr$21:	; function end strstr
1:	

strlen:	; index = 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; £temporary4071 = string + index
5:		mov a2480, [bp + 6]
6:		add a2480, [bp + 8]
8:	

strlen$2:	; £temporary4070 -> £temporary4071 = *£temporary4071
10:	

strlen$3:	; if £temporary4070 -> £temporary4071 == 0 goto 6
11:		cmp byte [a2480], 0
12:		je strlen$6
14:	

strlen$4:	; ++index
15:		inc word [bp + 8]
17:	

strlen$5:	; goto 1
18:		jmp strlen$1
20:	

strlen$6:	; return_value = index
21:		mov a2481, [bp + 8]
23:	

strlen$7:	; return
24:		mov t2482, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp t2482
29:	

strlen$8:	; function end strlen
1:	

strerror:	; call header integral zero 0 stack zero 0
3:	

strerror$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; post call
11:	

strerror$3:	; £temporary4074 = return_value
16:	

strerror$4:	; localeConvPtr = £temporary4074
17:		mov [bp + 8], t2484
19:	

strerror$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 8], 0
21:		je strerror$9
23:	

strerror$6:	; £temporary4076 -> localeConvPtr = *localeConvPtr, offset 16
24:		mov a2485, [bp + 8]
26:	

strerror$7:	; £temporary4080 = £temporary4076 -> localeConvPtr
27:		mov t2486, [a2485 + 16]
29:	

strerror$8:	; goto 10
30:		jmp strerror$10
32:	

strerror$9:	; £temporary4080 = 0
33:		mov t2487, 0
35:	

strerror$10:	; messageList = £temporary4080
36:		mov [bp + 10], t2487
38:	

strerror$11:	; if messageList == 0 goto 14
39:		cmp word [bp + 10], 0
40:		je strerror$14
42:	

strerror$12:	; £temporary4085 = messageList
43:		mov t2488, [bp + 10]
45:	

strerror$13:	; goto 15
46:		jmp strerror$15
48:	

strerror$14:	; £temporary4085 = enMessageList
49:		mov t2489, enMessageList
51:	

strerror$15:	; messageList = £temporary4085
52:		mov [bp + 10], t2489
54:	

strerror$16:	; £temporary4087 = errno * 2
55:		mov a2490, [bp + 6]
57:		xor dx, dx
58:		mul word [int2$2#]
64:	

strerror$17:	; £temporary4088 = messageList + £temporary4087
65:		mov a2494, [bp + 10]
66:		add a2494, t2493
68:	

strerror$18:	; £temporary4086 -> £temporary4088 = *£temporary4088
70:	

strerror$19:	; return_value = £temporary4086 -> £temporary4088
71:		mov t2495, [a2494]
73:	

strerror$20:	; return
74:		mov t2496, [bp]
75:		mov di, [bp + 4]
76:		mov bp, [bp + 2]
77:		jmp t2496
79:	

strerror$21:	; function end strerror
1:	

strtok:	; if string == 0 goto 37
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; £temporary4090 -> string = *string
6:		mov a2497, [bp + 6]
8:	

strtok$2:	; if £temporary4090 -> string != 0 goto 5
9:		cmp byte [a2497], 0
10:		jne strtok$5
12:	

strtok$3:	; return_value = 0
13:		mov a2498, 0
15:	

strtok$4:	; return
16:		mov t2499, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t2499
21:	

strtok$5:	; index = 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; £temporary4093 = string + index
25:		mov a2500, [bp + 6]
26:		add a2500, [bp + 10]
28:	

strtok$7:	; £temporary4092 -> £temporary4093 = *£temporary4093
30:	

strtok$8:	; if £temporary4092 -> £temporary4093 == 0 goto 31
31:		cmp byte [a2500], 0
32:		je strtok$31
34:	

strtok$9:	; call header integral zero 0 stack zero 0
36:	

strtok$10:	; parameter charSet, offset 6
37:		mov a2501, [bp + 8]
38:		mov [bp + 20], a2501
40:	

strtok$11:	; £temporary4097 = string + index
41:		mov a2502, [bp + 6]
42:		add a2502, [bp + 10]
44:	

strtok$12:	; £temporary4096 -> £temporary4097 = *£temporary4097
46:	

strtok$13:	; £temporary4098 = int_to_int £temporary4096 -> £temporary4097 (Signed_Char -> Signed_Int)
47:		mov t2503, [a2502]
49:		and t2503, 255
51:		cmp t2503, 0
52:		jge strtok$14
53:		neg t2503
55:		neg t2503
57:	

strtok$14:	; parameter £temporary4098, offset 8
58:		mov [bp + 22], t2503
60:	

strtok$15:	; call function noellipse-noellipse strchr
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; post call
68:	

strtok$17:	; £temporary4099 = return_value
73:	

strtok$18:	; if £temporary4099 == 0 goto 29
74:		cmp t2505, 0
75:		je strtok$29
77:	

strtok$19:	; £temporary4102 = string + index
78:		mov a2506, [bp + 6]
79:		add a2506, [bp + 10]
81:	

strtok$20:	; £temporary4101 -> £temporary4102 = *£temporary4102
83:	

strtok$21:	; £temporary4101 -> £temporary4102 = 0
84:		mov byte [a2506], 0
86:	

strtok$22:	; £temporary4103 = index + 1
87:		mov a2507, [bp + 10]
88:		add a2507, 1
90:	

strtok$23:	; £temporary4105 = string + £temporary4103
91:		mov a2508, [bp + 6]
92:		add a2508, a2507
94:	

strtok$24:	; £temporary4104 -> £temporary4105 = *£temporary4105
96:	

strtok$25:	; £temporary4106 = &£temporary4104 -> £temporary4105
98:	

strtok$26:	; token = £temporary4106
99:		mov [token], a2508
101:	

strtok$27:	; return_value = string
102:		mov a2509, [bp + 6]
104:	

strtok$28:	; return
105:		mov t2510, [bp]
106:		mov di, [bp + 4]
107:		mov bp, [bp + 2]
108:		jmp t2510
110:	

strtok$29:	; ++index
111:		inc word [bp + 10]
113:	

strtok$30:	; goto 6
114:		jmp strtok$6
116:	

strtok$31:	; £temporary4108 = string + index
117:		mov a2511, [bp + 6]
118:		add a2511, [bp + 10]
120:	

strtok$32:	; £temporary4107 -> £temporary4108 = *£temporary4108
122:	

strtok$33:	; £temporary4109 = &£temporary4107 -> £temporary4108
124:	

strtok$34:	; token = £temporary4109
125:		mov [token], a2511
127:	

strtok$35:	; return_value = string
128:		mov a2512, [bp + 6]
130:	

strtok$36:	; return
131:		mov t2513, [bp]
132:		mov di, [bp + 4]
133:		mov bp, [bp + 2]
134:		jmp t2513
136:	

strtok$37:	; if token != 0 goto 40
137:		cmp word [token], 0
138:		jne strtok$40
140:	

strtok$38:	; return_value = 0
141:		mov a2514, 0
143:	

strtok$39:	; return
144:		mov t2515, [bp]
145:		mov di, [bp + 4]
146:		mov bp, [bp + 2]
147:		jmp t2515
149:	

strtok$40:	; if (token,0) != 0 goto 43
150:		mov a2516, [token]
151:		cmp byte [a2516], 0
152:		jne strtok$43
154:	

strtok$41:	; return_value = 0
155:		mov a2517, 0
157:	

strtok$42:	; return
158:		mov t2518, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp t2518
163:	

strtok$43:	; index = 0
164:		mov word [bp + 10], 0
166:	

strtok$44:	; £temporary4114 = token + index
167:		mov a2519, [token]
168:		add a2519, [bp + 10]
170:	

strtok$45:	; £temporary4113 -> £temporary4114 = *£temporary4114
172:	

strtok$46:	; if £temporary4113 -> £temporary4114 == 0 goto 70
173:		cmp byte [a2519], 0
174:		je strtok$70
176:	

strtok$47:	; call header integral zero 0 stack zero 0
178:	

strtok$48:	; parameter charSet, offset 6
179:		mov a2520, [bp + 8]
180:		mov [bp + 20], a2520
182:	

strtok$49:	; £temporary4118 = token + index
183:		mov a2521, [token]
184:		add a2521, [bp + 10]
186:	

strtok$50:	; £temporary4117 -> £temporary4118 = *£temporary4118
188:	

strtok$51:	; £temporary4119 = int_to_int £temporary4117 -> £temporary4118 (Signed_Char -> Signed_Int)
189:		mov t2522, [a2521]
191:		and t2522, 255
193:		cmp t2522, 0
194:		jge strtok$52
195:		neg t2522
197:		neg t2522
199:	

strtok$52:	; parameter £temporary4119, offset 8
200:		mov [bp + 22], t2522
202:	

strtok$53:	; call function noellipse-noellipse strchr
203:		mov word [bp + 14], strtok$54
204:		mov [bp + 16], bp
205:		add bp, 14
206:		jmp strchr
208:	

strtok$54:	; post call
210:	

strtok$55:	; £temporary4120 = return_value
215:	

strtok$56:	; if £temporary4120 == 0 goto 68
216:		cmp t2524, 0
217:		je strtok$68
219:	

strtok$57:	; tokenStart2 = token
220:		mov a2525, [token]
221:		mov [bp + 14], a2525
223:	

strtok$58:	; £temporary4123 = token + index
224:		mov a2526, [token]
225:		add a2526, [bp + 10]
227:	

strtok$59:	; £temporary4122 -> £temporary4123 = *£temporary4123
229:	

strtok$60:	; £temporary4122 -> £temporary4123 = 0
230:		mov byte [a2526], 0
232:	

strtok$61:	; £temporary4124 = index + 1
233:		mov a2527, [bp + 10]
234:		add a2527, 1
236:	

strtok$62:	; £temporary4126 = token + £temporary4124
237:		mov a2528, [token]
238:		add a2528, a2527
240:	

strtok$63:	; £temporary4125 -> £temporary4126 = *£temporary4126
242:	

strtok$64:	; £temporary4127 = &£temporary4125 -> £temporary4126
244:	

strtok$65:	; token = £temporary4127
245:		mov [token], a2528
247:	

strtok$66:	; return_value = tokenStart2
248:		mov a2529, [bp + 14]
250:	

strtok$67:	; return
251:		mov t2530, [bp]
252:		mov di, [bp + 4]
253:		mov bp, [bp + 2]
254:		jmp t2530
256:	

strtok$68:	; ++index
257:		inc word [bp + 10]
259:	

strtok$69:	; goto 44
260:		jmp strtok$44
262:	

strtok$70:	; tokenStart = token
263:		mov a2531, [token]
264:		mov [bp + 12], a2531
266:	

strtok$71:	; £temporary4129 = token + index
267:		mov a2532, [token]
268:		add a2532, [bp + 10]
270:	

strtok$72:	; £temporary4128 -> £temporary4129 = *£temporary4129
272:	

strtok$73:	; £temporary4130 = &£temporary4128 -> £temporary4129
274:	

strtok$74:	; token = £temporary4130
275:		mov [token], a2532
277:	

strtok$75:	; return_value = tokenStart
278:		mov a2533, [bp + 12]
280:	

strtok$76:	; return
281:		mov t2534, [bp]
282:		mov di, [bp + 4]
283:		mov bp, [bp + 2]
284:		jmp t2534
286:	

strtok$77:	; function end strtok
1:	

memcpy:	; £temporary4135 = int_to_int target (Pointer -> Pointer)
2:		mov a2535, [bp + 6]
5:	

memcpy$1:	; charTarget = £temporary4135
6:		mov [bp + 12], a2535
8:	

memcpy$2:	; £temporary4136 = int_to_int source (Pointer -> Pointer)
9:		mov a2536, [bp + 8]
12:	

memcpy$3:	; charSource = £temporary4136
13:		mov [bp + 14], a2536
15:	

memcpy$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; if index >= size goto 13
19:		mov a2537, [bp + 10]
20:		cmp [bp + 16], a2537
21:		jge memcpy$13
23:	

memcpy$6:	; £temporary4140 = charTarget + index
24:		mov a2538, [bp + 12]
25:		add a2538, [bp + 16]
27:	

memcpy$7:	; £temporary4139 -> £temporary4140 = *£temporary4140
29:	

memcpy$8:	; £temporary4142 = charSource + index
30:		mov a2539, [bp + 14]
31:		add a2539, [bp + 16]
33:	

memcpy$9:	; £temporary4141 -> £temporary4142 = *£temporary4142
35:	

memcpy$10:	; £temporary4139 -> £temporary4140 = £temporary4141 -> £temporary4142
36:		mov t2540, [a2539]
37:		mov [a2538], t2540
39:	

memcpy$11:	; ++index
40:		inc word [bp + 16]
42:	

memcpy$12:	; goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; £temporary4143 = int_to_int target (Pointer -> Pointer)
46:		mov a2541, [bp + 6]
49:	

memcpy$14:	; return_value = £temporary4143
51:	

memcpy$15:	; return
52:		mov t2542, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2542
57:	

memcpy$16:	; function end memcpy
1:	

memmove:	; £temporary4144 = int_to_int target (Pointer -> Pointer)
2:		mov a2543, [bp + 6]
5:	

memmove$1:	; charTarget = £temporary4144
6:		mov [bp + 12], a2543
8:	

memmove$2:	; £temporary4145 = int_to_int source (Pointer -> Pointer)
9:		mov a2544, [bp + 8]
12:	

memmove$3:	; charSource = £temporary4145
13:		mov [bp + 14], a2544
15:	

memmove$4:	; if source >= target goto 14
16:		mov a2545, [bp + 6]
17:		cmp [bp + 8], a2545
18:		jge memmove$14
20:	

memmove$5:	; index = size - 1
21:		mov a2546, [bp + 10]
22:		sub a2546, 1
23:		mov [bp + 16], a2546
25:	

memmove$6:	; if index < 0 goto 23
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; £temporary4151 = charTarget + index
30:		mov a2547, [bp + 12]
31:		add a2547, [bp + 16]
33:	

memmove$8:	; £temporary4150 -> £temporary4151 = *£temporary4151
35:	

memmove$9:	; £temporary4153 = charSource + index
36:		mov a2548, [bp + 14]
37:		add a2548, [bp + 16]
39:	

memmove$10:	; £temporary4152 -> £temporary4153 = *£temporary4153
41:	

memmove$11:	; £temporary4150 -> £temporary4151 = £temporary4152 -> £temporary4153
42:		mov t2549, [a2548]
43:		mov [a2547], t2549
45:	

memmove$12:	; --index
46:		dec word [bp + 16]
48:	

memmove$13:	; goto 6
49:		jmp memmove$6
51:	

memmove$14:	; index = 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; if index >= size goto 23
55:		mov a2550, [bp + 10]
56:		cmp [bp + 16], a2550
57:		jge memmove$23
59:	

memmove$16:	; £temporary4157 = charTarget + index
60:		mov a2551, [bp + 12]
61:		add a2551, [bp + 16]
63:	

memmove$17:	; £temporary4156 -> £temporary4157 = *£temporary4157
65:	

memmove$18:	; £temporary4159 = charSource + index
66:		mov a2552, [bp + 14]
67:		add a2552, [bp + 16]
69:	

memmove$19:	; £temporary4158 -> £temporary4159 = *£temporary4159
71:	

memmove$20:	; £temporary4156 -> £temporary4157 = £temporary4158 -> £temporary4159
72:		mov t2553, [a2552]
73:		mov [a2551], t2553
75:	

memmove$21:	; ++index
76:		inc word [bp + 16]
78:	

memmove$22:	; goto 15
79:		jmp memmove$15
81:	

memmove$23:	; £temporary4160 = int_to_int target (Pointer -> Pointer)
82:		mov a2554, [bp + 6]
85:	

memmove$24:	; return_value = £temporary4160
87:	

memmove$25:	; return
88:		mov t2555, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp t2555
93:	

memmove$26:	; function end memmove
1:	

memcmp:	; £temporary4161 = int_to_int left (Pointer -> Pointer)
2:		mov a2556, [bp + 6]
5:	

memcmp$1:	; charLeft = £temporary4161
6:		mov [bp + 12], a2556
8:	

memcmp$2:	; £temporary4162 = int_to_int right (Pointer -> Pointer)
9:		mov a2557, [bp + 8]
12:	

memcmp$3:	; charRight = £temporary4162
13:		mov [bp + 14], a2557
15:	

memcmp$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; if index >= size goto 22
19:		mov a2558, [bp + 10]
20:		cmp [bp + 16], a2558
21:		jge memcmp$22
23:	

memcmp$6:	; £temporary4166 = charLeft + index
24:		mov a2559, [bp + 12]
25:		add a2559, [bp + 16]
27:	

memcmp$7:	; £temporary4165 -> £temporary4166 = *£temporary4166
29:	

memcmp$8:	; £temporary4168 = charRight + index
30:		mov a2560, [bp + 14]
31:		add a2560, [bp + 16]
33:	

memcmp$9:	; £temporary4167 -> £temporary4168 = *£temporary4168
35:	

memcmp$10:	; if £temporary4165 -> £temporary4166 >= £temporary4167 -> £temporary4168 goto 13
36:		mov t2561, [a2560]
37:		cmp [a2559], t2561
38:		jge memcmp$13
40:	

memcmp$11:	; return_value = -1
41:		mov a2562, -1
43:	

memcmp$12:	; return
44:		mov t2563, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t2563
49:	

memcmp$13:	; £temporary4171 = charLeft + index
50:		mov a2564, [bp + 12]
51:		add a2564, [bp + 16]
53:	

memcmp$14:	; £temporary4170 -> £temporary4171 = *£temporary4171
55:	

memcmp$15:	; £temporary4173 = charRight + index
56:		mov a2565, [bp + 14]
57:		add a2565, [bp + 16]
59:	

memcmp$16:	; £temporary4172 -> £temporary4173 = *£temporary4173
61:	

memcmp$17:	; if £temporary4170 -> £temporary4171 <= £temporary4172 -> £temporary4173 goto 20
62:		mov t2566, [a2565]
63:		cmp [a2564], t2566
64:		jle memcmp$20
66:	

memcmp$18:	; return_value = 1
67:		mov a2567, 1
69:	

memcmp$19:	; return
70:		mov t2568, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2568
75:	

memcmp$20:	; ++index
76:		inc word [bp + 16]
78:	

memcmp$21:	; goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; return_value = 0
82:		mov a2569, 0
84:	

memcmp$23:	; return
85:		mov t2570, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp t2570
90:	

memcmp$24:	; function end memcmp
1:	

memchr:	; £temporary4175 = int_to_int block (Pointer -> Pointer)
2:		mov a2571, [bp + 6]
5:	

memchr$1:	; charBlock = £temporary4175
6:		mov [bp + 14], a2571
8:	

memchr$2:	; £temporary4176 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov a2572, [bp + 8]
12:		cmp a2572, 0
13:		jge memchr$3
14:		neg a2572
16:		neg a2572
18:	

memchr$3:	; c = £temporary4176
19:		mov [bp + 16], a2572
21:	

memchr$4:	; index = 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; if index >= size goto 17
25:		mov a2573, [bp + 10]
26:		cmp [bp + 12], a2573
27:		jge memchr$17
29:	

memchr$6:	; £temporary4180 = charBlock + index
30:		mov a2574, [bp + 14]
31:		add a2574, [bp + 12]
33:	

memchr$7:	; £temporary4179 -> £temporary4180 = *£temporary4180
35:	

memchr$8:	; if £temporary4179 -> £temporary4180 != c goto 15
36:		mov a2575, [bp + 16]
37:		cmp [a2574], a2575
38:		jne memchr$15
40:	

memchr$9:	; £temporary4183 = charBlock + index
41:		mov a2576, [bp + 14]
42:		add a2576, [bp + 12]
44:	

memchr$10:	; £temporary4182 -> £temporary4183 = *£temporary4183
46:	

memchr$11:	; £temporary4184 = &£temporary4182 -> £temporary4183
48:	

memchr$12:	; £temporary4185 = int_to_int £temporary4184 (Pointer -> Pointer)
51:	

memchr$13:	; return_value = £temporary4185
53:	

memchr$14:	; return
54:		mov t2577, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp t2577
59:	

memchr$15:	; ++index
60:		inc word [bp + 12]
62:	

memchr$16:	; goto 5
63:		jmp memchr$5
65:	

memchr$17:	; return_value = 0
66:		mov a2578, 0
68:	

memchr$18:	; return
69:		mov t2579, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp t2579
74:	

memchr$19:	; function end memchr
1:	

memset:	; £temporary4186 = int_to_int block (Pointer -> Pointer)
2:		mov a2580, [bp + 6]
5:	

memset$1:	; charBlock = £temporary4186
6:		mov [bp + 12], a2580
8:	

memset$2:	; £temporary4187 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov a2581, [bp + 8]
12:		cmp a2581, 0
13:		jge memset$3
14:		neg a2581
16:		neg a2581
18:	

memset$3:	; c = £temporary4187
19:		mov [bp + 14], a2581
21:	

memset$4:	; index = 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; if index >= size goto 11
25:		mov a2582, [bp + 10]
26:		cmp [bp + 15], a2582
27:		jge memset$11
29:	

memset$6:	; £temporary4191 = charBlock + index
30:		mov a2583, [bp + 12]
31:		add a2583, [bp + 15]
33:	

memset$7:	; £temporary4190 -> £temporary4191 = *£temporary4191
35:	

memset$8:	; £temporary4190 -> £temporary4191 = c
36:		mov a2584, [bp + 14]
37:		mov [a2583], a2584
39:	

memset$9:	; ++index
40:		inc word [bp + 15]
42:	

memset$10:	; goto 5
43:		jmp memset$5
45:	

memset$11:	; return_value = block
46:		mov a2585, [bp + 6]
48:	

memset$12:	; return
49:		mov t2586, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2586
54:	

memset$13:	; function end memset
