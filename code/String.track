1:	

strcpy:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; £temporary3199 = source + index
5:		mov a2119, [bp + 8]
6:		add a2119, [bp + 10]
8:	

strcpy$2:	; £temporary3198 -> £temporary3199 = *£temporary3199
10:	

strcpy$3:	; if £temporary3198 -> £temporary3199 == 0 goto 11
11:		cmp byte [a2119], 0
12:		je strcpy$11
14:	

strcpy$4:	; £temporary3203 = target + index
15:		mov a2120, [bp + 6]
16:		add a2120, [bp + 10]
18:	

strcpy$5:	; £temporary3202 -> £temporary3203 = *£temporary3203
20:	

strcpy$6:	; £temporary3205 = source + index
21:		mov a2121, [bp + 8]
22:		add a2121, [bp + 10]
24:	

strcpy$7:	; £temporary3204 -> £temporary3205 = *£temporary3205
26:	

strcpy$8:	; £temporary3202 -> £temporary3203 = £temporary3204 -> £temporary3205
27:		mov t2122, [a2121]
28:		mov [a2120], t2122
30:	

strcpy$9:	; ++index
31:		inc word [bp + 10]
33:	

strcpy$10:	; goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; £temporary3207 = target + index
37:		mov a2123, [bp + 6]
38:		add a2123, [bp + 10]
40:	

strcpy$12:	; £temporary3206 -> £temporary3207 = *£temporary3207
42:	

strcpy$13:	; £temporary3206 -> £temporary3207 = 0
43:		mov byte [a2123], 0
45:	

strcpy$14:	; return_value = target
46:		mov a2124, [bp + 6]
48:	

strcpy$15:	; return
49:		mov t2125, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2125
54:	

strcpy$16:	; function end strcpy
1:	

strncpy:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; if index >= size goto 12
5:		mov a2126, [bp + 10]
6:		cmp [bp + 12], a2126
7:		jge strncpy$12
9:	

strncpy$2:	; £temporary3210 = source + index
10:		mov a2127, [bp + 8]
11:		add a2127, [bp + 12]
13:	

strncpy$3:	; £temporary3209 -> £temporary3210 = *£temporary3210
15:	

strncpy$4:	; if £temporary3209 -> £temporary3210 == 0 goto 12
16:		cmp byte [a2127], 0
17:		je strncpy$12
19:	

strncpy$5:	; £temporary3215 = target + index
20:		mov a2128, [bp + 6]
21:		add a2128, [bp + 12]
23:	

strncpy$6:	; £temporary3214 -> £temporary3215 = *£temporary3215
25:	

strncpy$7:	; £temporary3217 = source + index
26:		mov a2129, [bp + 8]
27:		add a2129, [bp + 12]
29:	

strncpy$8:	; £temporary3216 -> £temporary3217 = *£temporary3217
31:	

strncpy$9:	; £temporary3214 -> £temporary3215 = £temporary3216 -> £temporary3217
32:		mov t2130, [a2129]
33:		mov [a2128], t2130
35:	

strncpy$10:	; ++index
36:		inc word [bp + 12]
38:	

strncpy$11:	; goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; if index >= size goto 18
42:		mov a2131, [bp + 10]
43:		cmp [bp + 12], a2131
44:		jge strncpy$18
46:	

strncpy$13:	; £temporary3221 = target + index
47:		mov a2132, [bp + 6]
48:		add a2132, [bp + 12]
50:	

strncpy$14:	; £temporary3220 -> £temporary3221 = *£temporary3221
52:	

strncpy$15:	; £temporary3220 -> £temporary3221 = 0
53:		mov byte [a2132], 0
55:	

strncpy$16:	; ++index
56:		inc word [bp + 12]
58:	

strncpy$17:	; goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; return_value = target
62:		mov a2133, [bp + 6]
64:	

strncpy$19:	; return
65:		mov t2134, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t2134
70:	

strncpy$20:	; function end strncpy
1:	

strcat:	; call header integral zero 0 stack zero 0
3:	

strcat$1:	; parameter target, offset 6
4:		mov a2135, [bp + 6]
5:		mov [bp + 18], a2135
7:	

strcat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; post call
15:	

strcat$4:	; £temporary3222 = return_value
20:	

strcat$5:	; targetLength = £temporary3222
21:		mov [bp + 12], t2137
23:	

strcat$6:	; index = 0
24:		mov word [bp + 10], 0
26:	

strcat$7:	; £temporary3224 = source + index
27:		mov a2138, [bp + 8]
28:		add a2138, [bp + 10]
30:	

strcat$8:	; £temporary3223 -> £temporary3224 = *£temporary3224
32:	

strcat$9:	; if £temporary3223 -> £temporary3224 == 0 goto 18
33:		cmp byte [a2138], 0
34:		je strcat$18
36:	

strcat$10:	; £temporary3227 = targetLength + index
37:		mov a2139, [bp + 12]
38:		add a2139, [bp + 10]
40:	

strcat$11:	; £temporary3229 = target + £temporary3227
41:		mov a2140, [bp + 6]
42:		add a2140, a2139
44:	

strcat$12:	; £temporary3228 -> £temporary3229 = *£temporary3229
46:	

strcat$13:	; £temporary3231 = source + index
47:		mov a2141, [bp + 8]
48:		add a2141, [bp + 10]
50:	

strcat$14:	; £temporary3230 -> £temporary3231 = *£temporary3231
52:	

strcat$15:	; £temporary3228 -> £temporary3229 = £temporary3230 -> £temporary3231
53:		mov t2142, [a2141]
54:		mov [a2140], t2142
56:	

strcat$16:	; ++index
57:		inc word [bp + 10]
59:	

strcat$17:	; goto 7
60:		jmp strcat$7
62:	

strcat$18:	; £temporary3232 = targetLength + index
63:		mov a2143, [bp + 12]
64:		add a2143, [bp + 10]
66:	

strcat$19:	; £temporary3234 = target + £temporary3232
67:		mov a2144, [bp + 6]
68:		add a2144, a2143
70:	

strcat$20:	; £temporary3233 -> £temporary3234 = *£temporary3234
72:	

strcat$21:	; £temporary3233 -> £temporary3234 = 0
73:		mov byte [a2144], 0
75:	

strcat$22:	; return_value = target
76:		mov a2145, [bp + 6]
78:	

strcat$23:	; return
79:		mov t2146, [bp]
80:		mov di, [bp + 4]
81:		mov bp, [bp + 2]
82:		jmp t2146
84:	

strcat$24:	; function end strcat
1:	

strncat:	; call header integral zero 0 stack zero 0
3:	

strncat$1:	; parameter target, offset 6
4:		mov a2147, [bp + 6]
5:		mov [bp + 20], a2147
7:	

strncat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; post call
15:	

strncat$4:	; £temporary3236 = return_value
20:	

strncat$5:	; targetLength = £temporary3236
21:		mov [bp + 14], t2149
23:	

strncat$6:	; index = 0
24:		mov word [bp + 12], 0
26:	

strncat$7:	; £temporary3237 = size - 1
27:		mov a2150, [bp + 10]
28:		sub a2150, 1
30:	

strncat$8:	; if index >= £temporary3237 goto 20
31:		cmp [bp + 12], a2150
32:		jge strncat$20
34:	

strncat$9:	; £temporary3240 = source + index
35:		mov a2151, [bp + 8]
36:		add a2151, [bp + 12]
38:	

strncat$10:	; £temporary3239 -> £temporary3240 = *£temporary3240
40:	

strncat$11:	; if £temporary3239 -> £temporary3240 == 0 goto 20
41:		cmp byte [a2151], 0
42:		je strncat$20
44:	

strncat$12:	; £temporary3244 = targetLength + index
45:		mov a2152, [bp + 14]
46:		add a2152, [bp + 12]
48:	

strncat$13:	; £temporary3246 = target + £temporary3244
49:		mov a2153, [bp + 6]
50:		add a2153, a2152
52:	

strncat$14:	; £temporary3245 -> £temporary3246 = *£temporary3246
54:	

strncat$15:	; £temporary3248 = source + index
55:		mov a2154, [bp + 8]
56:		add a2154, [bp + 12]
58:	

strncat$16:	; £temporary3247 -> £temporary3248 = *£temporary3248
60:	

strncat$17:	; £temporary3245 -> £temporary3246 = £temporary3247 -> £temporary3248
61:		mov t2155, [a2154]
62:		mov [a2153], t2155
64:	

strncat$18:	; ++index
65:		inc word [bp + 12]
67:	

strncat$19:	; goto 7
68:		jmp strncat$7
70:	

strncat$20:	; £temporary3249 = targetLength + size
71:		mov a2156, [bp + 14]
72:		add a2156, [bp + 10]
74:	

strncat$21:	; £temporary3250 = £temporary3249 - 1
75:		sub a2156, 1
77:	

strncat$22:	; £temporary3252 = target + £temporary3250
78:		mov a2157, [bp + 6]
79:		add a2157, a2156
81:	

strncat$23:	; £temporary3251 -> £temporary3252 = *£temporary3252
83:	

strncat$24:	; £temporary3251 -> £temporary3252 = 0
84:		mov byte [a2157], 0
86:	

strncat$25:	; return_value = target
87:		mov a2158, [bp + 6]
89:	

strncat$26:	; return
90:		mov t2159, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp t2159
95:	

strncat$27:	; function end strncat
1:	

strcmp:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; £temporary3256 = left + index
5:		mov a2160, [bp + 6]
6:		add a2160, [bp + 10]
8:	

strcmp$2:	; £temporary3255 -> £temporary3256 = *£temporary3256
10:	

strcmp$3:	; if £temporary3255 -> £temporary3256 != 0 goto 9
11:		cmp byte [a2160], 0
12:		jne strcmp$9
14:	

strcmp$4:	; £temporary3259 = right + index
15:		mov a2161, [bp + 8]
16:		add a2161, [bp + 10]
18:	

strcmp$5:	; £temporary3258 -> £temporary3259 = *£temporary3259
20:	

strcmp$6:	; if £temporary3258 -> £temporary3259 != 0 goto 9
21:		cmp byte [a2161], 0
22:		jne strcmp$9
24:	

strcmp$7:	; return_value = 0
25:		mov a2162, 0
27:	

strcmp$8:	; return
28:		mov t2163, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp t2163
33:	

strcmp$9:	; £temporary3263 = left + index
34:		mov a2164, [bp + 6]
35:		add a2164, [bp + 10]
37:	

strcmp$10:	; £temporary3262 -> £temporary3263 = *£temporary3263
39:	

strcmp$11:	; if £temporary3262 -> £temporary3263 != 0 goto 14
40:		cmp byte [a2164], 0
41:		jne strcmp$14
43:	

strcmp$12:	; return_value = -1
44:		mov a2165, -1
46:	

strcmp$13:	; return
47:		mov t2166, [bp]
48:		mov di, [bp + 4]
49:		mov bp, [bp + 2]
50:		jmp t2166
52:	

strcmp$14:	; £temporary3266 = right + index
53:		mov a2167, [bp + 8]
54:		add a2167, [bp + 10]
56:	

strcmp$15:	; £temporary3265 -> £temporary3266 = *£temporary3266
58:	

strcmp$16:	; if £temporary3265 -> £temporary3266 != 0 goto 19
59:		cmp byte [a2167], 0
60:		jne strcmp$19
62:	

strcmp$17:	; return_value = 1
63:		mov a2168, 1
65:	

strcmp$18:	; return
66:		mov t2169, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp t2169
71:	

strcmp$19:	; £temporary3269 = left + index
72:		mov a2170, [bp + 6]
73:		add a2170, [bp + 10]
75:	

strcmp$20:	; £temporary3268 -> £temporary3269 = *£temporary3269
77:	

strcmp$21:	; £temporary3271 = right + index
78:		mov a2171, [bp + 8]
79:		add a2171, [bp + 10]
81:	

strcmp$22:	; £temporary3270 -> £temporary3271 = *£temporary3271
83:	

strcmp$23:	; if £temporary3268 -> £temporary3269 >= £temporary3270 -> £temporary3271 goto 26
84:		mov t2172, [a2171]
85:		cmp [a2170], t2172
86:		jge strcmp$26
88:	

strcmp$24:	; return_value = -1
89:		mov a2173, -1
91:	

strcmp$25:	; return
92:		mov t2174, [bp]
93:		mov di, [bp + 4]
94:		mov bp, [bp + 2]
95:		jmp t2174
97:	

strcmp$26:	; £temporary3274 = left + index
98:		mov a2175, [bp + 6]
99:		add a2175, [bp + 10]
101:	

strcmp$27:	; £temporary3273 -> £temporary3274 = *£temporary3274
103:	

strcmp$28:	; £temporary3276 = right + index
104:		mov a2176, [bp + 8]
105:		add a2176, [bp + 10]
107:	

strcmp$29:	; £temporary3275 -> £temporary3276 = *£temporary3276
109:	

strcmp$30:	; if £temporary3273 -> £temporary3274 <= £temporary3275 -> £temporary3276 goto 33
110:		mov t2177, [a2176]
111:		cmp [a2175], t2177
112:		jle strcmp$33
114:	

strcmp$31:	; return_value = 1
115:		mov a2178, 1
117:	

strcmp$32:	; return
118:		mov t2179, [bp]
119:		mov di, [bp + 4]
120:		mov bp, [bp + 2]
121:		jmp t2179
123:	

strcmp$33:	; ++index
124:		inc word [bp + 10]
126:	

strcmp$34:	; goto 1
127:		jmp strcmp$1
129:	

strcmp$35:	; function end strcmp
1:	

strncmp:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; if index >= size goto 36
5:		mov a2180, [bp + 10]
6:		cmp [bp + 12], a2180
7:		jge strncmp$36
9:	

strncmp$2:	; £temporary3282 = left + index
10:		mov a2181, [bp + 6]
11:		add a2181, [bp + 12]
13:	

strncmp$3:	; £temporary3281 -> £temporary3282 = *£temporary3282
15:	

strncmp$4:	; if £temporary3281 -> £temporary3282 != 0 goto 10
16:		cmp byte [a2181], 0
17:		jne strncmp$10
19:	

strncmp$5:	; £temporary3285 = right + index
20:		mov a2182, [bp + 8]
21:		add a2182, [bp + 12]
23:	

strncmp$6:	; £temporary3284 -> £temporary3285 = *£temporary3285
25:	

strncmp$7:	; if £temporary3284 -> £temporary3285 != 0 goto 10
26:		cmp byte [a2182], 0
27:		jne strncmp$10
29:	

strncmp$8:	; return_value = 0
30:		mov a2183, 0
32:	

strncmp$9:	; return
33:		mov t2184, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp t2184
38:	

strncmp$10:	; £temporary3289 = left + index
39:		mov a2185, [bp + 6]
40:		add a2185, [bp + 12]
42:	

strncmp$11:	; £temporary3288 -> £temporary3289 = *£temporary3289
44:	

strncmp$12:	; if £temporary3288 -> £temporary3289 != 0 goto 15
45:		cmp byte [a2185], 0
46:		jne strncmp$15
48:	

strncmp$13:	; return_value = -1
49:		mov a2186, -1
51:	

strncmp$14:	; return
52:		mov t2187, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2187
57:	

strncmp$15:	; £temporary3292 = right + index
58:		mov a2188, [bp + 8]
59:		add a2188, [bp + 12]
61:	

strncmp$16:	; £temporary3291 -> £temporary3292 = *£temporary3292
63:	

strncmp$17:	; if £temporary3291 -> £temporary3292 != 0 goto 20
64:		cmp byte [a2188], 0
65:		jne strncmp$20
67:	

strncmp$18:	; return_value = 1
68:		mov a2189, 1
70:	

strncmp$19:	; return
71:		mov t2190, [bp]
72:		mov di, [bp + 4]
73:		mov bp, [bp + 2]
74:		jmp t2190
76:	

strncmp$20:	; £temporary3295 = left + index
77:		mov a2191, [bp + 6]
78:		add a2191, [bp + 12]
80:	

strncmp$21:	; £temporary3294 -> £temporary3295 = *£temporary3295
82:	

strncmp$22:	; £temporary3297 = right + index
83:		mov a2192, [bp + 8]
84:		add a2192, [bp + 12]
86:	

strncmp$23:	; £temporary3296 -> £temporary3297 = *£temporary3297
88:	

strncmp$24:	; if £temporary3294 -> £temporary3295 >= £temporary3296 -> £temporary3297 goto 27
89:		mov t2193, [a2192]
90:		cmp [a2191], t2193
91:		jge strncmp$27
93:	

strncmp$25:	; return_value = -1
94:		mov a2194, -1
96:	

strncmp$26:	; return
97:		mov t2195, [bp]
98:		mov di, [bp + 4]
99:		mov bp, [bp + 2]
100:		jmp t2195
102:	

strncmp$27:	; £temporary3300 = left + index
103:		mov a2196, [bp + 6]
104:		add a2196, [bp + 12]
106:	

strncmp$28:	; £temporary3299 -> £temporary3300 = *£temporary3300
108:	

strncmp$29:	; £temporary3302 = right + index
109:		mov a2197, [bp + 8]
110:		add a2197, [bp + 12]
112:	

strncmp$30:	; £temporary3301 -> £temporary3302 = *£temporary3302
114:	

strncmp$31:	; if £temporary3299 -> £temporary3300 <= £temporary3301 -> £temporary3302 goto 34
115:		mov t2198, [a2197]
116:		cmp [a2196], t2198
117:		jle strncmp$34
119:	

strncmp$32:	; return_value = 1
120:		mov a2199, 1
122:	

strncmp$33:	; return
123:		mov t2200, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp t2200
128:	

strncmp$34:	; ++index
129:		inc word [bp + 12]
131:	

strncmp$35:	; goto 1
132:		jmp strncmp$1
134:	

strncmp$36:	; return_value = 0
135:		mov a2201, 0
137:	

strncmp$37:	; return
138:		mov t2202, [bp]
139:		mov di, [bp + 4]
140:		mov bp, [bp + 2]
141:		jmp t2202
143:	

strncmp$38:	; function end strncmp
1:	

strchr:	; £temporary3304 = int_to_int i (Signed_Int -> Signed_Char)
2:		mov a2203, [bp + 8]
5:		cmp a2203, 0
6:		jge strchr$1
7:		neg a2203
9:		neg a2203
11:	

strchr$1:	; c = £temporary3304
12:		mov [bp + 12], a2203
14:	

strchr$2:	; index = 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; £temporary3306 = text + index
18:		mov a2204, [bp + 6]
19:		add a2204, [bp + 10]
21:	

strchr$4:	; £temporary3305 -> £temporary3306 = *£temporary3306
23:	

strchr$5:	; if £temporary3305 -> £temporary3306 == 0 goto 16
24:		cmp byte [a2204], 0
25:		je strchr$16
27:	

strchr$6:	; £temporary3310 = text + index
28:		mov a2205, [bp + 6]
29:		add a2205, [bp + 10]
31:	

strchr$7:	; £temporary3309 -> £temporary3310 = *£temporary3310
33:	

strchr$8:	; if £temporary3309 -> £temporary3310 != c goto 14
34:		mov a2206, [bp + 12]
35:		cmp [a2205], a2206
36:		jne strchr$14
38:	

strchr$9:	; £temporary3313 = text + index
39:		mov a2207, [bp + 6]
40:		add a2207, [bp + 10]
42:	

strchr$10:	; £temporary3312 -> £temporary3313 = *£temporary3313
44:	

strchr$11:	; £temporary3314 = &£temporary3312 -> £temporary3313
46:	

strchr$12:	; return_value = £temporary3314
48:	

strchr$13:	; return
49:		mov t2208, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2208
54:	

strchr$14:	; ++index
55:		inc word [bp + 10]
57:	

strchr$15:	; goto 3
58:		jmp strchr$3
60:	

strchr$16:	; return_value = 0
61:		mov a2209, 0
63:	

strchr$17:	; return
64:		mov t2210, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp t2210
69:	

strchr$18:	; function end strchr
1:	

strrchr:	; result = 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; £temporary3315 = int_to_int i (Signed_Int -> Signed_Char)
5:		mov a2211, [bp + 8]
8:		cmp a2211, 0
9:		jge strrchr$2
10:		neg a2211
12:		neg a2211
14:	

strrchr$2:	; c = £temporary3315
15:		mov [bp + 14], a2211
17:	

strrchr$3:	; index = 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; £temporary3317 = text + index
21:		mov a2212, [bp + 6]
22:		add a2212, [bp + 10]
24:	

strrchr$5:	; £temporary3316 -> £temporary3317 = *£temporary3317
26:	

strrchr$6:	; if £temporary3316 -> £temporary3317 == 0 goto 16
27:		cmp byte [a2212], 0
28:		je strrchr$16
30:	

strrchr$7:	; £temporary3321 = text + index
31:		mov a2213, [bp + 6]
32:		add a2213, [bp + 10]
34:	

strrchr$8:	; £temporary3320 -> £temporary3321 = *£temporary3321
36:	

strrchr$9:	; if £temporary3320 -> £temporary3321 != c goto 14
37:		mov a2214, [bp + 14]
38:		cmp [a2213], a2214
39:		jne strrchr$14
41:	

strrchr$10:	; £temporary3324 = text + index
42:		mov a2215, [bp + 6]
43:		add a2215, [bp + 10]
45:	

strrchr$11:	; £temporary3323 -> £temporary3324 = *£temporary3324
47:	

strrchr$12:	; £temporary3325 = &£temporary3323 -> £temporary3324
49:	

strrchr$13:	; result = £temporary3325
50:		mov [bp + 12], a2215
52:	

strrchr$14:	; ++index
53:		inc word [bp + 10]
55:	

strrchr$15:	; goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; return_value = result
59:		mov a2216, [bp + 12]
61:	

strrchr$17:	; return
62:		mov t2217, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp t2217
67:	

strrchr$18:	; function end strrchr
1:	

strspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; £temporary3327 = mainString + index
5:		mov a2218, [bp + 6]
6:		add a2218, [bp + 10]
8:	

strspn$2:	; £temporary3326 -> £temporary3327 = *£temporary3327
10:	

strspn$3:	; if £temporary3326 -> £temporary3327 == 0 goto 18
11:		cmp byte [a2218], 0
12:		je strspn$18
14:	

strspn$4:	; call header integral zero 0 stack zero 0
16:	

strspn$5:	; parameter charSet, offset 6
17:		mov a2219, [bp + 8]
18:		mov [bp + 18], a2219
20:	

strspn$6:	; £temporary3331 = mainString + index
21:		mov a2220, [bp + 6]
22:		add a2220, [bp + 10]
24:	

strspn$7:	; £temporary3330 -> £temporary3331 = *£temporary3331
26:	

strspn$8:	; £temporary3332 = int_to_int £temporary3330 -> £temporary3331 (Signed_Char -> Signed_Int)
27:		mov t2221, [a2220]
29:		and t2221, 255
31:		cmp t2221, 0
32:		jge strspn$9
33:		neg t2221
35:		neg t2221
37:	

strspn$9:	; parameter £temporary3332, offset 8
38:		mov [bp + 20], t2221
40:	

strspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; post call
48:	

strspn$12:	; £temporary3333 = return_value
53:	

strspn$13:	; if £temporary3333 != 0 goto 16
54:		cmp t2223, 0
55:		jne strspn$16
57:	

strspn$14:	; return_value = index
58:		mov a2224, [bp + 10]
60:	

strspn$15:	; return
61:		mov t2225, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t2225
66:	

strspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strspn$17:	; goto 1
70:		jmp strspn$1
72:	

strspn$18:	; return_value = -1
73:		mov a2226, -1
75:	

strspn$19:	; return
76:		mov t2227, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2227
81:	

strspn$20:	; function end strspn
1:	

strcspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; £temporary3338 = mainString + index
5:		mov a2228, [bp + 6]
6:		add a2228, [bp + 10]
8:	

strcspn$2:	; £temporary3337 -> £temporary3338 = *£temporary3338
10:	

strcspn$3:	; if £temporary3337 -> £temporary3338 == 0 goto 18
11:		cmp byte [a2228], 0
12:		je strcspn$18
14:	

strcspn$4:	; call header integral zero 0 stack zero 0
16:	

strcspn$5:	; parameter charSet, offset 6
17:		mov a2229, [bp + 8]
18:		mov [bp + 18], a2229
20:	

strcspn$6:	; £temporary3342 = mainString + index
21:		mov a2230, [bp + 6]
22:		add a2230, [bp + 10]
24:	

strcspn$7:	; £temporary3341 -> £temporary3342 = *£temporary3342
26:	

strcspn$8:	; £temporary3343 = int_to_int £temporary3341 -> £temporary3342 (Signed_Char -> Signed_Int)
27:		mov t2231, [a2230]
29:		and t2231, 255
31:		cmp t2231, 0
32:		jge strcspn$9
33:		neg t2231
35:		neg t2231
37:	

strcspn$9:	; parameter £temporary3343, offset 8
38:		mov [bp + 20], t2231
40:	

strcspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; post call
48:	

strcspn$12:	; £temporary3344 = return_value
53:	

strcspn$13:	; if £temporary3344 == 0 goto 16
54:		cmp t2233, 0
55:		je strcspn$16
57:	

strcspn$14:	; return_value = index
58:		mov a2234, [bp + 10]
60:	

strcspn$15:	; return
61:		mov t2235, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t2235
66:	

strcspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strcspn$17:	; goto 1
70:		jmp strcspn$1
72:	

strcspn$18:	; return_value = -1
73:		mov a2236, -1
75:	

strcspn$19:	; return
76:		mov t2237, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2237
81:	

strcspn$20:	; function end strcspn
1:	

strpbrk:	; index = 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; £temporary3349 = mainString + index
5:		mov a2238, [bp + 6]
6:		add a2238, [bp + 10]
8:	

strpbrk$2:	; £temporary3348 -> £temporary3349 = *£temporary3349
10:	

strpbrk$3:	; if £temporary3348 -> £temporary3349 == 0 goto 21
11:		cmp byte [a2238], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; call header integral zero 0 stack zero 0
16:	

strpbrk$5:	; parameter charSet, offset 6
17:		mov a2239, [bp + 8]
18:		mov [bp + 18], a2239
20:	

strpbrk$6:	; £temporary3353 = mainString + index
21:		mov a2240, [bp + 6]
22:		add a2240, [bp + 10]
24:	

strpbrk$7:	; £temporary3352 -> £temporary3353 = *£temporary3353
26:	

strpbrk$8:	; £temporary3354 = int_to_int £temporary3352 -> £temporary3353 (Signed_Char -> Signed_Int)
27:		mov t2241, [a2240]
29:		and t2241, 255
31:		cmp t2241, 0
32:		jge strpbrk$9
33:		neg t2241
35:		neg t2241
37:	

strpbrk$9:	; parameter £temporary3354, offset 8
38:		mov [bp + 20], t2241
40:	

strpbrk$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; post call
48:	

strpbrk$12:	; £temporary3355 = return_value
53:	

strpbrk$13:	; if £temporary3355 == 0 goto 19
54:		cmp t2243, 0
55:		je strpbrk$19
57:	

strpbrk$14:	; £temporary3358 = mainString + index
58:		mov a2244, [bp + 6]
59:		add a2244, [bp + 10]
61:	

strpbrk$15:	; £temporary3357 -> £temporary3358 = *£temporary3358
63:	

strpbrk$16:	; £temporary3359 = &£temporary3357 -> £temporary3358
65:	

strpbrk$17:	; return_value = £temporary3359
67:	

strpbrk$18:	; return
68:		mov t2245, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp t2245
73:	

strpbrk$19:	; ++index
74:		inc word [bp + 10]
76:	

strpbrk$20:	; goto 1
77:		jmp strpbrk$1
79:	

strpbrk$21:	; return_value = 0
80:		mov a2246, 0
82:	

strpbrk$22:	; return
83:		mov t2247, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp t2247
88:	

strpbrk$23:	; function end strpbrk
1:	

strstr:	; index = 0
2:		mov word [bp + 10], 0
4:	

strstr$1:	; £temporary3363 = mainString + index
5:		mov a2248, [bp + 6]
6:		add a2248, [bp + 10]
8:	

strstr$2:	; £temporary3362 -> £temporary3363 = *£temporary3363
10:	

strstr$3:	; if £temporary3362 -> £temporary3363 == 0 goto 19
11:		cmp byte [a2248], 0
12:		je strstr$19
14:	

strstr$4:	; call header integral zero 0 stack zero 0
16:	

strstr$5:	; £temporary3366 = mainString + index
17:		mov a2249, [bp + 6]
18:		add a2249, [bp + 10]
20:	

strstr$6:	; parameter £temporary3366, offset 6
21:		mov [bp + 18], a2249
23:	

strstr$7:	; parameter subString, offset 8
24:		mov a2250, [bp + 8]
25:		mov [bp + 20], a2250
27:	

strstr$8:	; call function noellipse-noellipse strcmp
28:		mov word [bp + 12], strstr$9
29:		mov [bp + 14], bp
30:		add bp, 12
31:		jmp strcmp
33:	

strstr$9:	; post call
35:	

strstr$10:	; £temporary3367 = return_value
40:	

strstr$11:	; if £temporary3367 != 0 goto 17
41:		cmp t2252, 0
42:		jne strstr$17
44:	

strstr$12:	; £temporary3370 = mainString + index
45:		mov a2253, [bp + 6]
46:		add a2253, [bp + 10]
48:	

strstr$13:	; £temporary3369 -> £temporary3370 = *£temporary3370
50:	

strstr$14:	; £temporary3371 = &£temporary3369 -> £temporary3370
52:	

strstr$15:	; return_value = £temporary3371
54:	

strstr$16:	; return
55:		mov t2254, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp t2254
60:	

strstr$17:	; ++index
61:		inc word [bp + 10]
63:	

strstr$18:	; goto 1
64:		jmp strstr$1
66:	

strstr$19:	; return_value = 0
67:		mov a2255, 0
69:	

strstr$20:	; return
70:		mov t2256, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2256
75:	

strstr$21:	; function end strstr
1:	

strlen:	; index = 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; £temporary3375 = string + index
5:		mov a2257, [bp + 6]
6:		add a2257, [bp + 8]
8:	

strlen$2:	; £temporary3374 -> £temporary3375 = *£temporary3375
10:	

strlen$3:	; if £temporary3374 -> £temporary3375 == 0 goto 6
11:		cmp byte [a2257], 0
12:		je strlen$6
14:	

strlen$4:	; ++index
15:		inc word [bp + 8]
17:	

strlen$5:	; goto 1
18:		jmp strlen$1
20:	

strlen$6:	; return_value = index
21:		mov a2258, [bp + 8]
23:	

strlen$7:	; return
24:		mov t2259, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp t2259
29:	

strlen$8:	; function end strlen
1:	

strerror:	; call header integral zero 0 stack zero 0
3:	

strerror$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; post call
11:	

strerror$3:	; £temporary3378 = return_value
16:	

strerror$4:	; localeConvPtr = £temporary3378
17:		mov [bp + 8], t2261
19:	

strerror$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 8], 0
21:		je strerror$9
23:	

strerror$6:	; £temporary3380 -> localeConvPtr = *localeConvPtr, offset 16
24:		mov a2262, [bp + 8]
26:	

strerror$7:	; £temporary3384 = £temporary3380 -> localeConvPtr
27:		mov t2263, [a2262 + 16]
29:	

strerror$8:	; goto 10
30:		jmp strerror$10
32:	

strerror$9:	; £temporary3384 = 0
33:		mov t2264, 0
35:	

strerror$10:	; messageList = £temporary3384
36:		mov [bp + 10], t2264
38:	

strerror$11:	; if messageList == 0 goto 14
39:		cmp word [bp + 10], 0
40:		je strerror$14
42:	

strerror$12:	; £temporary3389 = messageList
43:		mov t2265, [bp + 10]
45:	

strerror$13:	; goto 15
46:		jmp strerror$15
48:	

strerror$14:	; £temporary3389 = enMessageList
49:		mov t2266, enMessageList
51:	

strerror$15:	; messageList = £temporary3389
52:		mov [bp + 10], t2266
54:	

strerror$16:	; £temporary3391 = errno * 2
55:		mov a2267, [bp + 6]
57:		xor dx, dx
58:		mul word [int2$2#]
64:	

strerror$17:	; £temporary3392 = messageList + £temporary3391
65:		mov a2271, [bp + 10]
66:		add a2271, t2270
68:	

strerror$18:	; £temporary3390 -> £temporary3392 = *£temporary3392
70:	

strerror$19:	; return_value = £temporary3390 -> £temporary3392
71:		mov t2272, [a2271]
73:	

strerror$20:	; return
74:		mov t2273, [bp]
75:		mov di, [bp + 4]
76:		mov bp, [bp + 2]
77:		jmp t2273
79:	

strerror$21:	; function end strerror
1:	

strtok:	; if string == 0 goto 37
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; £temporary3394 -> string = *string
6:		mov a2274, [bp + 6]
8:	

strtok$2:	; if £temporary3394 -> string != 0 goto 5
9:		cmp byte [a2274], 0
10:		jne strtok$5
12:	

strtok$3:	; return_value = 0
13:		mov a2275, 0
15:	

strtok$4:	; return
16:		mov t2276, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t2276
21:	

strtok$5:	; index = 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; £temporary3397 = string + index
25:		mov a2277, [bp + 6]
26:		add a2277, [bp + 10]
28:	

strtok$7:	; £temporary3396 -> £temporary3397 = *£temporary3397
30:	

strtok$8:	; if £temporary3396 -> £temporary3397 == 0 goto 31
31:		cmp byte [a2277], 0
32:		je strtok$31
34:	

strtok$9:	; call header integral zero 0 stack zero 0
36:	

strtok$10:	; parameter charSet, offset 6
37:		mov a2278, [bp + 8]
38:		mov [bp + 20], a2278
40:	

strtok$11:	; £temporary3401 = string + index
41:		mov a2279, [bp + 6]
42:		add a2279, [bp + 10]
44:	

strtok$12:	; £temporary3400 -> £temporary3401 = *£temporary3401
46:	

strtok$13:	; £temporary3402 = int_to_int £temporary3400 -> £temporary3401 (Signed_Char -> Signed_Int)
47:		mov t2280, [a2279]
49:		and t2280, 255
51:		cmp t2280, 0
52:		jge strtok$14
53:		neg t2280
55:		neg t2280
57:	

strtok$14:	; parameter £temporary3402, offset 8
58:		mov [bp + 22], t2280
60:	

strtok$15:	; call function noellipse-noellipse strchr
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; post call
68:	

strtok$17:	; £temporary3403 = return_value
73:	

strtok$18:	; if £temporary3403 == 0 goto 29
74:		cmp t2282, 0
75:		je strtok$29
77:	

strtok$19:	; £temporary3406 = string + index
78:		mov a2283, [bp + 6]
79:		add a2283, [bp + 10]
81:	

strtok$20:	; £temporary3405 -> £temporary3406 = *£temporary3406
83:	

strtok$21:	; £temporary3405 -> £temporary3406 = 0
84:		mov byte [a2283], 0
86:	

strtok$22:	; £temporary3407 = index + 1
87:		mov a2284, [bp + 10]
88:		add a2284, 1
90:	

strtok$23:	; £temporary3409 = string + £temporary3407
91:		mov a2285, [bp + 6]
92:		add a2285, a2284
94:	

strtok$24:	; £temporary3408 -> £temporary3409 = *£temporary3409
96:	

strtok$25:	; £temporary3410 = &£temporary3408 -> £temporary3409
98:	

strtok$26:	; token = £temporary3410
99:		mov [token], a2285
101:	

strtok$27:	; return_value = string
102:		mov a2286, [bp + 6]
104:	

strtok$28:	; return
105:		mov t2287, [bp]
106:		mov di, [bp + 4]
107:		mov bp, [bp + 2]
108:		jmp t2287
110:	

strtok$29:	; ++index
111:		inc word [bp + 10]
113:	

strtok$30:	; goto 6
114:		jmp strtok$6
116:	

strtok$31:	; £temporary3412 = string + index
117:		mov a2288, [bp + 6]
118:		add a2288, [bp + 10]
120:	

strtok$32:	; £temporary3411 -> £temporary3412 = *£temporary3412
122:	

strtok$33:	; £temporary3413 = &£temporary3411 -> £temporary3412
124:	

strtok$34:	; token = £temporary3413
125:		mov [token], a2288
127:	

strtok$35:	; return_value = string
128:		mov a2289, [bp + 6]
130:	

strtok$36:	; return
131:		mov t2290, [bp]
132:		mov di, [bp + 4]
133:		mov bp, [bp + 2]
134:		jmp t2290
136:	

strtok$37:	; if token != 0 goto 40
137:		cmp word [token], 0
138:		jne strtok$40
140:	

strtok$38:	; return_value = 0
141:		mov a2291, 0
143:	

strtok$39:	; return
144:		mov t2292, [bp]
145:		mov di, [bp + 4]
146:		mov bp, [bp + 2]
147:		jmp t2292
149:	

strtok$40:	; if (token,0) != 0 goto 43
150:		mov a2293, [token]
151:		cmp byte [a2293], 0
152:		jne strtok$43
154:	

strtok$41:	; return_value = 0
155:		mov a2294, 0
157:	

strtok$42:	; return
158:		mov t2295, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp t2295
163:	

strtok$43:	; index = 0
164:		mov word [bp + 10], 0
166:	

strtok$44:	; £temporary3418 = token + index
167:		mov a2296, [token]
168:		add a2296, [bp + 10]
170:	

strtok$45:	; £temporary3417 -> £temporary3418 = *£temporary3418
172:	

strtok$46:	; if £temporary3417 -> £temporary3418 == 0 goto 70
173:		cmp byte [a2296], 0
174:		je strtok$70
176:	

strtok$47:	; call header integral zero 0 stack zero 0
178:	

strtok$48:	; parameter charSet, offset 6
179:		mov a2297, [bp + 8]
180:		mov [bp + 20], a2297
182:	

strtok$49:	; £temporary3422 = token + index
183:		mov a2298, [token]
184:		add a2298, [bp + 10]
186:	

strtok$50:	; £temporary3421 -> £temporary3422 = *£temporary3422
188:	

strtok$51:	; £temporary3423 = int_to_int £temporary3421 -> £temporary3422 (Signed_Char -> Signed_Int)
189:		mov t2299, [a2298]
191:		and t2299, 255
193:		cmp t2299, 0
194:		jge strtok$52
195:		neg t2299
197:		neg t2299
199:	

strtok$52:	; parameter £temporary3423, offset 8
200:		mov [bp + 22], t2299
202:	

strtok$53:	; call function noellipse-noellipse strchr
203:		mov word [bp + 14], strtok$54
204:		mov [bp + 16], bp
205:		add bp, 14
206:		jmp strchr
208:	

strtok$54:	; post call
210:	

strtok$55:	; £temporary3424 = return_value
215:	

strtok$56:	; if £temporary3424 == 0 goto 68
216:		cmp t2301, 0
217:		je strtok$68
219:	

strtok$57:	; tokenStart2 = token
220:		mov a2302, [token]
221:		mov [bp + 14], a2302
223:	

strtok$58:	; £temporary3427 = token + index
224:		mov a2303, [token]
225:		add a2303, [bp + 10]
227:	

strtok$59:	; £temporary3426 -> £temporary3427 = *£temporary3427
229:	

strtok$60:	; £temporary3426 -> £temporary3427 = 0
230:		mov byte [a2303], 0
232:	

strtok$61:	; £temporary3428 = index + 1
233:		mov a2304, [bp + 10]
234:		add a2304, 1
236:	

strtok$62:	; £temporary3430 = token + £temporary3428
237:		mov a2305, [token]
238:		add a2305, a2304
240:	

strtok$63:	; £temporary3429 -> £temporary3430 = *£temporary3430
242:	

strtok$64:	; £temporary3431 = &£temporary3429 -> £temporary3430
244:	

strtok$65:	; token = £temporary3431
245:		mov [token], a2305
247:	

strtok$66:	; return_value = tokenStart2
248:		mov a2306, [bp + 14]
250:	

strtok$67:	; return
251:		mov t2307, [bp]
252:		mov di, [bp + 4]
253:		mov bp, [bp + 2]
254:		jmp t2307
256:	

strtok$68:	; ++index
257:		inc word [bp + 10]
259:	

strtok$69:	; goto 44
260:		jmp strtok$44
262:	

strtok$70:	; tokenStart = token
263:		mov a2308, [token]
264:		mov [bp + 12], a2308
266:	

strtok$71:	; £temporary3433 = token + index
267:		mov a2309, [token]
268:		add a2309, [bp + 10]
270:	

strtok$72:	; £temporary3432 -> £temporary3433 = *£temporary3433
272:	

strtok$73:	; £temporary3434 = &£temporary3432 -> £temporary3433
274:	

strtok$74:	; token = £temporary3434
275:		mov [token], a2309
277:	

strtok$75:	; return_value = tokenStart
278:		mov a2310, [bp + 12]
280:	

strtok$76:	; return
281:		mov t2311, [bp]
282:		mov di, [bp + 4]
283:		mov bp, [bp + 2]
284:		jmp t2311
286:	

strtok$77:	; function end strtok
1:	

memcpy:	; £temporary3439 = int_to_int target (Pointer -> Pointer)
2:		mov a2312, [bp + 6]
5:	

memcpy$1:	; charTarget = £temporary3439
6:		mov [bp + 12], a2312
8:	

memcpy$2:	; £temporary3440 = int_to_int source (Pointer -> Pointer)
9:		mov a2313, [bp + 8]
12:	

memcpy$3:	; charSource = £temporary3440
13:		mov [bp + 14], a2313
15:	

memcpy$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; if index >= size goto 13
19:		mov a2314, [bp + 10]
20:		cmp [bp + 16], a2314
21:		jge memcpy$13
23:	

memcpy$6:	; £temporary3444 = charTarget + index
24:		mov a2315, [bp + 12]
25:		add a2315, [bp + 16]
27:	

memcpy$7:	; £temporary3443 -> £temporary3444 = *£temporary3444
29:	

memcpy$8:	; £temporary3446 = charSource + index
30:		mov a2316, [bp + 14]
31:		add a2316, [bp + 16]
33:	

memcpy$9:	; £temporary3445 -> £temporary3446 = *£temporary3446
35:	

memcpy$10:	; £temporary3443 -> £temporary3444 = £temporary3445 -> £temporary3446
36:		mov t2317, [a2316]
37:		mov [a2315], t2317
39:	

memcpy$11:	; ++index
40:		inc word [bp + 16]
42:	

memcpy$12:	; goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; £temporary3447 = int_to_int target (Pointer -> Pointer)
46:		mov a2318, [bp + 6]
49:	

memcpy$14:	; return_value = £temporary3447
51:	

memcpy$15:	; return
52:		mov t2319, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2319
57:	

memcpy$16:	; function end memcpy
1:	

memmove:	; £temporary3448 = int_to_int target (Pointer -> Pointer)
2:		mov a2320, [bp + 6]
5:	

memmove$1:	; charTarget = £temporary3448
6:		mov [bp + 12], a2320
8:	

memmove$2:	; £temporary3449 = int_to_int source (Pointer -> Pointer)
9:		mov a2321, [bp + 8]
12:	

memmove$3:	; charSource = £temporary3449
13:		mov [bp + 14], a2321
15:	

memmove$4:	; if source >= target goto 14
16:		mov a2322, [bp + 6]
17:		cmp [bp + 8], a2322
18:		jge memmove$14
20:	

memmove$5:	; index = size - 1
21:		mov a2323, [bp + 10]
22:		sub a2323, 1
23:		mov [bp + 16], a2323
25:	

memmove$6:	; if index < 0 goto 23
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; £temporary3455 = charTarget + index
30:		mov a2324, [bp + 12]
31:		add a2324, [bp + 16]
33:	

memmove$8:	; £temporary3454 -> £temporary3455 = *£temporary3455
35:	

memmove$9:	; £temporary3457 = charSource + index
36:		mov a2325, [bp + 14]
37:		add a2325, [bp + 16]
39:	

memmove$10:	; £temporary3456 -> £temporary3457 = *£temporary3457
41:	

memmove$11:	; £temporary3454 -> £temporary3455 = £temporary3456 -> £temporary3457
42:		mov t2326, [a2325]
43:		mov [a2324], t2326
45:	

memmove$12:	; --index
46:		dec word [bp + 16]
48:	

memmove$13:	; goto 6
49:		jmp memmove$6
51:	

memmove$14:	; index = 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; if index >= size goto 23
55:		mov a2327, [bp + 10]
56:		cmp [bp + 16], a2327
57:		jge memmove$23
59:	

memmove$16:	; £temporary3461 = charTarget + index
60:		mov a2328, [bp + 12]
61:		add a2328, [bp + 16]
63:	

memmove$17:	; £temporary3460 -> £temporary3461 = *£temporary3461
65:	

memmove$18:	; £temporary3463 = charSource + index
66:		mov a2329, [bp + 14]
67:		add a2329, [bp + 16]
69:	

memmove$19:	; £temporary3462 -> £temporary3463 = *£temporary3463
71:	

memmove$20:	; £temporary3460 -> £temporary3461 = £temporary3462 -> £temporary3463
72:		mov t2330, [a2329]
73:		mov [a2328], t2330
75:	

memmove$21:	; ++index
76:		inc word [bp + 16]
78:	

memmove$22:	; goto 15
79:		jmp memmove$15
81:	

memmove$23:	; £temporary3464 = int_to_int target (Pointer -> Pointer)
82:		mov a2331, [bp + 6]
85:	

memmove$24:	; return_value = £temporary3464
87:	

memmove$25:	; return
88:		mov t2332, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp t2332
93:	

memmove$26:	; function end memmove
1:	

memcmp:	; £temporary3465 = int_to_int left (Pointer -> Pointer)
2:		mov a2333, [bp + 6]
5:	

memcmp$1:	; charLeft = £temporary3465
6:		mov [bp + 12], a2333
8:	

memcmp$2:	; £temporary3466 = int_to_int right (Pointer -> Pointer)
9:		mov a2334, [bp + 8]
12:	

memcmp$3:	; charRight = £temporary3466
13:		mov [bp + 14], a2334
15:	

memcmp$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; if index >= size goto 22
19:		mov a2335, [bp + 10]
20:		cmp [bp + 16], a2335
21:		jge memcmp$22
23:	

memcmp$6:	; £temporary3470 = charLeft + index
24:		mov a2336, [bp + 12]
25:		add a2336, [bp + 16]
27:	

memcmp$7:	; £temporary3469 -> £temporary3470 = *£temporary3470
29:	

memcmp$8:	; £temporary3472 = charRight + index
30:		mov a2337, [bp + 14]
31:		add a2337, [bp + 16]
33:	

memcmp$9:	; £temporary3471 -> £temporary3472 = *£temporary3472
35:	

memcmp$10:	; if £temporary3469 -> £temporary3470 >= £temporary3471 -> £temporary3472 goto 13
36:		mov t2338, [a2337]
37:		cmp [a2336], t2338
38:		jge memcmp$13
40:	

memcmp$11:	; return_value = -1
41:		mov a2339, -1
43:	

memcmp$12:	; return
44:		mov t2340, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t2340
49:	

memcmp$13:	; £temporary3475 = charLeft + index
50:		mov a2341, [bp + 12]
51:		add a2341, [bp + 16]
53:	

memcmp$14:	; £temporary3474 -> £temporary3475 = *£temporary3475
55:	

memcmp$15:	; £temporary3477 = charRight + index
56:		mov a2342, [bp + 14]
57:		add a2342, [bp + 16]
59:	

memcmp$16:	; £temporary3476 -> £temporary3477 = *£temporary3477
61:	

memcmp$17:	; if £temporary3474 -> £temporary3475 <= £temporary3476 -> £temporary3477 goto 20
62:		mov t2343, [a2342]
63:		cmp [a2341], t2343
64:		jle memcmp$20
66:	

memcmp$18:	; return_value = 1
67:		mov a2344, 1
69:	

memcmp$19:	; return
70:		mov t2345, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2345
75:	

memcmp$20:	; ++index
76:		inc word [bp + 16]
78:	

memcmp$21:	; goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; return_value = 0
82:		mov a2346, 0
84:	

memcmp$23:	; return
85:		mov t2347, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp t2347
90:	

memcmp$24:	; function end memcmp
1:	

memchr:	; £temporary3479 = int_to_int block (Pointer -> Pointer)
2:		mov a2348, [bp + 6]
5:	

memchr$1:	; charBlock = £temporary3479
6:		mov [bp + 14], a2348
8:	

memchr$2:	; £temporary3480 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov a2349, [bp + 8]
12:		cmp a2349, 0
13:		jge memchr$3
14:		neg a2349
16:		neg a2349
18:	

memchr$3:	; c = £temporary3480
19:		mov [bp + 16], a2349
21:	

memchr$4:	; index = 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; if index >= size goto 17
25:		mov a2350, [bp + 10]
26:		cmp [bp + 12], a2350
27:		jge memchr$17
29:	

memchr$6:	; £temporary3484 = charBlock + index
30:		mov a2351, [bp + 14]
31:		add a2351, [bp + 12]
33:	

memchr$7:	; £temporary3483 -> £temporary3484 = *£temporary3484
35:	

memchr$8:	; if £temporary3483 -> £temporary3484 != c goto 15
36:		mov a2352, [bp + 16]
37:		cmp [a2351], a2352
38:		jne memchr$15
40:	

memchr$9:	; £temporary3487 = charBlock + index
41:		mov a2353, [bp + 14]
42:		add a2353, [bp + 12]
44:	

memchr$10:	; £temporary3486 -> £temporary3487 = *£temporary3487
46:	

memchr$11:	; £temporary3488 = &£temporary3486 -> £temporary3487
48:	

memchr$12:	; £temporary3489 = int_to_int £temporary3488 (Pointer -> Pointer)
51:	

memchr$13:	; return_value = £temporary3489
53:	

memchr$14:	; return
54:		mov t2354, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp t2354
59:	

memchr$15:	; ++index
60:		inc word [bp + 12]
62:	

memchr$16:	; goto 5
63:		jmp memchr$5
65:	

memchr$17:	; return_value = 0
66:		mov a2355, 0
68:	

memchr$18:	; return
69:		mov t2356, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp t2356
74:	

memchr$19:	; function end memchr
1:	

memset:	; £temporary3490 = int_to_int block (Pointer -> Pointer)
2:		mov a2357, [bp + 6]
5:	

memset$1:	; charBlock = £temporary3490
6:		mov [bp + 12], a2357
8:	

memset$2:	; £temporary3491 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov a2358, [bp + 8]
12:		cmp a2358, 0
13:		jge memset$3
14:		neg a2358
16:		neg a2358
18:	

memset$3:	; c = £temporary3491
19:		mov [bp + 14], a2358
21:	

memset$4:	; index = 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; if index >= size goto 11
25:		mov a2359, [bp + 10]
26:		cmp [bp + 15], a2359
27:		jge memset$11
29:	

memset$6:	; £temporary3495 = charBlock + index
30:		mov a2360, [bp + 12]
31:		add a2360, [bp + 15]
33:	

memset$7:	; £temporary3494 -> £temporary3495 = *£temporary3495
35:	

memset$8:	; £temporary3494 -> £temporary3495 = c
36:		mov a2361, [bp + 14]
37:		mov [a2360], a2361
39:	

memset$9:	; ++index
40:		inc word [bp + 15]
42:	

memset$10:	; goto 5
43:		jmp memset$5
45:	

memset$11:	; return_value = block
46:		mov a2362, [bp + 6]
48:	

memset$12:	; return
49:		mov t2363, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2363
54:	

memset$13:	; function end memset
