1:	

filecreate:	; AssignRegister ah 60
2:		mov ah, 60
4:	

filecreate$1:	; AssignRegister cx 0
5:		mov cx, 0
7:	

filecreate$2:	; AssignRegister dx name
8:		mov dx, [bp + 6]
10:	

filecreate$3:	; Interrupt 33
11:		int 33
13:	

filecreate$4:	; InspectRegister £temporary673 ax
15:	

filecreate$5:	; Assign handle £temporary673
16:		mov [bp + 8], ax
18:	

filecreate$6:	; NotCarry 10
19:		jnc filecreate$10
21:	

filecreate$7:	; Assign errno 9
22:		mov word [errno], 9
24:	

filecreate$8:	; SetReturnValue -1
25:		mov bx, -1
27:	

filecreate$9:	; Return -1
28:		mov ax, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp ax
33:	

filecreate$10:	; SetReturnValue handle
34:		mov bx, [bp + 8]
36:	

filecreate$11:	; Return handle
37:		mov ax, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp ax
42:	

filecreate$12:	; FunctionEnd filecreate
1:	

fileexistsX:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

fileexistsX$1:	; Parameter 8 name 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

fileexistsX$2:	; Parameter 8 string_r# 8
8:		mov word [bp + 16], @1660$string_r#
10:	

fileexistsX$3:	; Call 8 fopen 0
11:		mov word [bp + 8], fileexistsX$4
12:		mov [bp + 10], bp
13:		add bp, 8
14:		jmp fopen
16:	

fileexistsX$4:	; PostCall 8
18:	

fileexistsX$5:	; GetReturnValue £temporary675
20:	

fileexistsX$6:	; Assign filePtr £temporary675
21:		mov [bp + 8], bx
23:	

fileexistsX$7:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
25:	

fileexistsX$8:	; Parameter 10 string_0Afileexists2025s2025p0A# 6
26:		mov word [bp + 16], @1663$string_0Afileexists2025s2025p0A#
28:	

fileexistsX$9:	; Parameter 10 name 8
29:		mov ax, [bp + 6]
30:		mov [bp + 18], ax
32:	

fileexistsX$10:	; Parameter 10 filePtr 10
33:		mov ax, [bp + 8]
34:		mov [bp + 20], ax
36:	

fileexistsX$11:	; Call 10 printf 0
37:		mov word [bp + 10], fileexistsX$12
38:		mov [bp + 12], bp
39:		add bp, 10
40:		mov di, bp
41:		add di, 4
42:		jmp printf
44:	

fileexistsX$12:	; PostCall 10
46:	

fileexistsX$13:	; Equal 20 filePtr 0
47:		cmp word [bp + 8], 0
48:		je fileexistsX$20
50:	

fileexistsX$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
52:	

fileexistsX$15:	; Parameter 10 filePtr 6
53:		mov ax, [bp + 8]
54:		mov [bp + 16], ax
56:	

fileexistsX$16:	; Call 10 fclose 0
57:		mov word [bp + 10], fileexistsX$17
58:		mov [bp + 12], bp
59:		add bp, 10
60:		jmp fclose
62:	

fileexistsX$17:	; PostCall 10
64:	

fileexistsX$18:	; SetReturnValue 1
65:		mov bx, 1
67:	

fileexistsX$19:	; Return 1
68:		mov ax, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp ax
73:	

fileexistsX$20:	; SetReturnValue 0
74:		mov bx, 0
76:	

fileexistsX$21:	; Return 0
77:		mov ax, [bp]
78:		mov di, [bp + 4]
79:		mov bp, [bp + 2]
80:		jmp ax
82:	

fileexistsX$22:	; FunctionEnd fileexistsX
1:	

fileexists:	; AssignRegister ah 67
2:		mov ah, 67
4:	

fileexists$1:	; AssignRegister al 0
5:		mov al, 0
7:	

fileexists$2:	; AssignRegister dx name
8:		mov dx, [bp + 6]
10:	

fileexists$3:	; Interrupt 33
11:		int 33
13:	

fileexists$4:	; Carry 7
14:		jc fileexists$7
16:	

fileexists$5:	; Assign £temporary690 1
17:		mov bx, 1
19:	

fileexists$6:	; Goto 8
20:		jmp fileexists$8
22:	

fileexists$7:	; Assign £temporary690 0
23:		mov bx, 0
25:	

fileexists$8:	; SetReturnValue £temporary690
27:	

fileexists$9:	; Return £temporary690
28:		mov ax, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp ax
33:	

fileexists$10:	; FunctionEnd fileexists
1:	

@1694$fileopen:	; AssignRegister ah 61
2:		mov ah, 61
4:	

@1694$fileopen$1:	; AssignRegister al mode
5:		mov al, [bp + 8]
7:	

@1694$fileopen$2:	; AssignRegister dx name
8:		mov dx, [bp + 6]
10:	

@1694$fileopen$3:	; Interrupt 33
11:		int 33
13:	

@1694$fileopen$4:	; NotCarry 8
14:		jnc @1694$fileopen$8
16:	

@1694$fileopen$5:	; Assign errno 9
17:		mov word [errno], 9
19:	

@1694$fileopen$6:	; SetReturnValue -1
20:		mov bx, -1
22:	

@1694$fileopen$7:	; Return -1
23:		mov ax, [bp]
24:		mov di, [bp + 4]
25:		mov bp, [bp + 2]
26:		jmp ax
28:	

@1694$fileopen$8:	; InspectRegister £temporary695 ax
30:	

@1694$fileopen$9:	; SetReturnValue £temporary695
31:		mov bx, ax
33:	

@1694$fileopen$10:	; Return £temporary695
34:		mov ax, [bp]
35:		mov di, [bp + 4]
36:		mov bp, [bp + 2]
37:		jmp ax
39:	

@1694$fileopen$11:	; FunctionEnd fileopen
1:	

fopen:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

fopen$1:	; SignedGreaterThanEqual 21 index 20
5:		cmp word [bp + 10], 20
6:		jge fopen$21
8:	

fopen$2:	; SignedMultiply £temporary699 index 29
9:		mov ax, [bp + 10]
11:		xor dx, dx
12:		imul word [@1716$int2$29#]
18:	

fopen$3:	; BinaryAdd £temporary700 g_fileArray £temporary699
19:		mov si, g_fileArray
20:		add si, ax
22:	

fopen$4:	; Deref £temporary698 -> £temporary700 £temporary700 0
24:	

fopen$5:	; NotEqual 19 £temporary698.open$0 -> £temporary700 0
25:		cmp word [si], 0
26:		jne fopen$19
28:	

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
30:	

fopen$7:	; Parameter 12 name 6
31:		mov ax, [bp + 6]
32:		mov [bp + 18], ax
34:	

fopen$8:	; Parameter 12 mode 8
35:		mov ax, [bp + 8]
36:		mov [bp + 20], ax
38:	

fopen$9:	; SignedMultiply £temporary704 index 29
39:		mov ax, [bp + 10]
41:		xor dx, dx
42:		imul word [@1724$int2$29#]
48:	

fopen$10:	; BinaryAdd £temporary705 g_fileArray £temporary704
49:		mov si, g_fileArray
50:		add si, ax
52:	

fopen$11:	; Deref £temporary703 -> £temporary705 £temporary705 0
54:	

fopen$12:	; address £temporary706 £temporary703 -> £temporary705
56:	

fopen$13:	; Parameter 12 £temporary706 10
57:		mov [bp + 22], si
59:	

fopen$14:	; Call 12 freopen 0
60:		mov word [bp + 12], fopen$15
61:		mov [bp + 14], bp
62:		add bp, 12
63:		jmp freopen
65:	

fopen$15:	; PostCall 12
67:	

fopen$16:	; GetReturnValue £temporary707
69:	

fopen$17:	; SetReturnValue £temporary707
71:	

fopen$18:	; Return £temporary707
72:		mov ax, [bp]
73:		mov di, [bp + 4]
74:		mov bp, [bp + 2]
75:		jmp ax
77:	

fopen$19:	; Increment index
78:		inc word [bp + 10]
80:	

fopen$20:	; Goto 1
81:		jmp fopen$1
83:	

fopen$21:	; SetReturnValue 0
84:		mov bx, 0
86:	

fopen$22:	; Return 0
87:		mov ax, [bp]
88:		mov di, [bp + 4]
89:		mov bp, [bp + 2]
90:		jmp ax
92:	

fopen$23:	; FunctionEnd fopen
1:	

freopen:	; Assign handle -1
2:		mov word [bp + 12], -1
4:	

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
6:	

freopen$2:	; Parameter 14 mode 6
7:		mov ax, [bp + 8]
8:		mov [bp + 20], ax
10:	

freopen$3:	; Parameter 14 string_r# 8
11:		mov word [bp + 22], @1739$string_r#
13:	

freopen$4:	; Call 14 strcmp 0
14:		mov word [bp + 14], freopen$5
15:		mov [bp + 16], bp
16:		add bp, 14
17:		jmp strcmp
19:	

freopen$5:	; PostCall 14
21:	

freopen$6:	; GetReturnValue £temporary711
23:	

freopen$7:	; NotEqual 16 £temporary711 0
24:		cmp bx, 0
25:		jne freopen$16
27:	

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
29:	

freopen$9:	; Parameter 14 name 6
30:		mov ax, [bp + 6]
31:		mov [bp + 20], ax
33:	

freopen$10:	; Parameter 14 64 8
34:		mov byte [bp + 22], 64
36:	

freopen$11:	; Call 14 fileopen 0
37:		mov word [bp + 14], freopen$12
38:		mov [bp + 16], bp
39:		add bp, 14
40:		jmp @1694$fileopen
42:	

freopen$12:	; PostCall 14
44:	

freopen$13:	; GetReturnValue £temporary713
46:	

freopen$14:	; Assign handle £temporary713
47:		mov [bp + 12], bx
49:	

freopen$15:	; Goto 130
50:		jmp freopen$130
52:	

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
54:	

freopen$17:	; Parameter 14 mode 6
55:		mov ax, [bp + 8]
56:		mov [bp + 20], ax
58:	

freopen$18:	; Parameter 14 string_w# 8
59:		mov word [bp + 22], @1748$string_w#
61:	

freopen$19:	; Call 14 strcmp 0
62:		mov word [bp + 14], freopen$20
63:		mov [bp + 16], bp
64:		add bp, 14
65:		jmp strcmp
67:	

freopen$20:	; PostCall 14
69:	

freopen$21:	; GetReturnValue £temporary714
71:	

freopen$22:	; NotEqual 30 £temporary714 0
72:		cmp bx, 0
73:		jne freopen$30
75:	

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
77:	

freopen$24:	; Parameter 14 name 6
78:		mov ax, [bp + 6]
79:		mov [bp + 20], ax
81:	

freopen$25:	; Call 14 filecreate 0
82:		mov word [bp + 14], freopen$26
83:		mov [bp + 16], bp
84:		add bp, 14
85:		jmp filecreate
87:	

freopen$26:	; PostCall 14
89:	

freopen$27:	; GetReturnValue £temporary716
91:	

freopen$28:	; Assign handle £temporary716
92:		mov [bp + 12], bx
94:	

freopen$29:	; Goto 130
95:		jmp freopen$130
97:	

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
99:	

freopen$31:	; Parameter 14 mode 6
100:		mov ax, [bp + 8]
101:		mov [bp + 20], ax
103:	

freopen$32:	; Parameter 14 string_a# 8
104:		mov word [bp + 22], @1754$string_a#
106:	

freopen$33:	; Call 14 strcmp 0
107:		mov word [bp + 14], freopen$34
108:		mov [bp + 16], bp
109:		add bp, 14
110:		jmp strcmp
112:	

freopen$34:	; PostCall 14
114:	

freopen$35:	; GetReturnValue £temporary717
116:	

freopen$36:	; NotEqual 59 £temporary717 0
117:		cmp bx, 0
118:		jne freopen$59
120:	

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
122:	

freopen$38:	; Parameter 14 name 6
123:		mov ax, [bp + 6]
124:		mov [bp + 20], ax
126:	

freopen$39:	; Parameter 14 65 8
127:		mov byte [bp + 22], 65
129:	

freopen$40:	; Call 14 fileopen 0
130:		mov word [bp + 14], freopen$41
131:		mov [bp + 16], bp
132:		add bp, 14
133:		jmp @1694$fileopen
135:	

freopen$41:	; PostCall 14
137:	

freopen$42:	; GetReturnValue £temporary719
139:	

freopen$43:	; Assign handle £temporary719
140:		mov [bp + 12], bx
142:	

freopen$44:	; Equal 52 handle -1
143:		cmp word [bp + 12], -1
144:		je freopen$52
146:	

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
148:	

freopen$46:	; Parameter 14 stream 6
149:		mov ax, [bp + 10]
150:		mov [bp + 20], ax
152:	

freopen$47:	; Parameter 14 0 8
153:		mov word [bp + 22], 0
155:	

freopen$48:	; Parameter 14 2 10
156:		mov word [bp + 24], 2
158:	

freopen$49:	; Call 14 fseek 0
159:		mov word [bp + 14], freopen$50
160:		mov [bp + 16], bp
161:		add bp, 14
162:		jmp fseek
164:	

freopen$50:	; PostCall 14
166:	

freopen$51:	; Goto 130
167:		jmp freopen$130
169:	

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
171:	

freopen$53:	; Parameter 14 name 6
172:		mov ax, [bp + 6]
173:		mov [bp + 20], ax
175:	

freopen$54:	; Call 14 filecreate 0
176:		mov word [bp + 14], freopen$55
177:		mov [bp + 16], bp
178:		add bp, 14
179:		jmp filecreate
181:	

freopen$55:	; PostCall 14
183:	

freopen$56:	; GetReturnValue £temporary722
185:	

freopen$57:	; Assign handle £temporary722
186:		mov [bp + 12], bx
188:	

freopen$58:	; Goto 130
189:		jmp freopen$130
191:	

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
193:	

freopen$60:	; Parameter 14 mode 6
194:		mov ax, [bp + 8]
195:		mov [bp + 20], ax
197:	

freopen$61:	; Parameter 14 string_r2B# 8
198:		mov word [bp + 22], @1774$string_r2B#
200:	

freopen$62:	; Call 14 strcmp 0
201:		mov word [bp + 14], freopen$63
202:		mov [bp + 16], bp
203:		add bp, 14
204:		jmp strcmp
206:	

freopen$63:	; PostCall 14
208:	

freopen$64:	; GetReturnValue £temporary723
210:	

freopen$65:	; NotEqual 74 £temporary723 0
211:		cmp bx, 0
212:		jne freopen$74
214:	

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
216:	

freopen$67:	; Parameter 14 name 6
217:		mov ax, [bp + 6]
218:		mov [bp + 20], ax
220:	

freopen$68:	; Parameter 14 66 8
221:		mov byte [bp + 22], 66
223:	

freopen$69:	; Call 14 fileopen 0
224:		mov word [bp + 14], freopen$70
225:		mov [bp + 16], bp
226:		add bp, 14
227:		jmp @1694$fileopen
229:	

freopen$70:	; PostCall 14
231:	

freopen$71:	; GetReturnValue £temporary725
233:	

freopen$72:	; Assign handle £temporary725
234:		mov [bp + 12], bx
236:	

freopen$73:	; Goto 130
237:		jmp freopen$130
239:	

freopen$74:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
241:	

freopen$75:	; Parameter 14 mode 6
242:		mov ax, [bp + 8]
243:		mov [bp + 20], ax
245:	

freopen$76:	; Parameter 14 string_w2B# 8
246:		mov word [bp + 22], @1783$string_w2B#
248:	

freopen$77:	; Call 14 strcmp 0
249:		mov word [bp + 14], freopen$78
250:		mov [bp + 16], bp
251:		add bp, 14
252:		jmp strcmp
254:	

freopen$78:	; PostCall 14
256:	

freopen$79:	; GetReturnValue £temporary726
258:	

freopen$80:	; NotEqual 102 £temporary726 0
259:		cmp bx, 0
260:		jne freopen$102
262:	

freopen$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
264:	

freopen$82:	; Parameter 14 name 6
265:		mov ax, [bp + 6]
266:		mov [bp + 20], ax
268:	

freopen$83:	; Call 14 fileexists 0
269:		mov word [bp + 14], freopen$84
270:		mov [bp + 16], bp
271:		add bp, 14
272:		jmp fileexists
274:	

freopen$84:	; PostCall 14
276:	

freopen$85:	; GetReturnValue £temporary728
278:	

freopen$86:	; Equal 95 £temporary728 0
279:		cmp bx, 0
280:		je freopen$95
282:	

freopen$87:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
284:	

freopen$88:	; Parameter 14 name 6
285:		mov ax, [bp + 6]
286:		mov [bp + 20], ax
288:	

freopen$89:	; Parameter 14 66 8
289:		mov byte [bp + 22], 66
291:	

freopen$90:	; Call 14 fileopen 0
292:		mov word [bp + 14], freopen$91
293:		mov [bp + 16], bp
294:		add bp, 14
295:		jmp @1694$fileopen
297:	

freopen$91:	; PostCall 14
299:	

freopen$92:	; GetReturnValue £temporary729
301:	

freopen$93:	; Assign handle £temporary729
302:		mov [bp + 12], bx
304:	

freopen$94:	; Goto 130
305:		jmp freopen$130
307:	

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
309:	

freopen$96:	; Parameter 14 name 6
310:		mov ax, [bp + 6]
311:		mov [bp + 20], ax
313:	

freopen$97:	; Call 14 filecreate 0
314:		mov word [bp + 14], freopen$98
315:		mov [bp + 16], bp
316:		add bp, 14
317:		jmp filecreate
319:	

freopen$98:	; PostCall 14
321:	

freopen$99:	; GetReturnValue £temporary730
323:	

freopen$100:	; Assign handle £temporary730
324:		mov [bp + 12], bx
326:	

freopen$101:	; Goto 130
327:		jmp freopen$130
329:	

freopen$102:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
331:	

freopen$103:	; Parameter 14 mode 6
332:		mov ax, [bp + 8]
333:		mov [bp + 20], ax
335:	

freopen$104:	; Parameter 14 string_a2B# 8
336:		mov word [bp + 22], @1796$string_a2B#
338:	

freopen$105:	; Call 14 strcmp 0
339:		mov word [bp + 14], freopen$106
340:		mov [bp + 16], bp
341:		add bp, 14
342:		jmp strcmp
344:	

freopen$106:	; PostCall 14
346:	

freopen$107:	; GetReturnValue £temporary732
348:	

freopen$108:	; NotEqual 130 £temporary732 0
349:		cmp bx, 0
350:		jne freopen$130
352:	

freopen$109:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
354:	

freopen$110:	; Parameter 14 name 6
355:		mov ax, [bp + 6]
356:		mov [bp + 20], ax
358:	

freopen$111:	; Parameter 14 66 8
359:		mov byte [bp + 22], 66
361:	

freopen$112:	; Call 14 fileopen 0
362:		mov word [bp + 14], freopen$113
363:		mov [bp + 16], bp
364:		add bp, 14
365:		jmp @1694$fileopen
367:	

freopen$113:	; PostCall 14
369:	

freopen$114:	; GetReturnValue £temporary734
371:	

freopen$115:	; Assign handle £temporary734
372:		mov [bp + 12], bx
374:	

freopen$116:	; Equal 124 handle -1
375:		cmp word [bp + 12], -1
376:		je freopen$124
378:	

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
380:	

freopen$118:	; Parameter 14 stream 6
381:		mov ax, [bp + 10]
382:		mov [bp + 20], ax
384:	

freopen$119:	; Parameter 14 0 8
385:		mov word [bp + 22], 0
387:	

freopen$120:	; Parameter 14 2 10
388:		mov word [bp + 24], 2
390:	

freopen$121:	; Call 14 fseek 0
391:		mov word [bp + 14], freopen$122
392:		mov [bp + 16], bp
393:		add bp, 14
394:		jmp fseek
396:	

freopen$122:	; PostCall 14
398:	

freopen$123:	; Goto 130
399:		jmp freopen$130
401:	

freopen$124:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
403:	

freopen$125:	; Parameter 14 name 6
404:		mov ax, [bp + 6]
405:		mov [bp + 20], ax
407:	

freopen$126:	; Call 14 filecreate 0
408:		mov word [bp + 14], freopen$127
409:		mov [bp + 16], bp
410:		add bp, 14
411:		jmp filecreate
413:	

freopen$127:	; PostCall 14
415:	

freopen$128:	; GetReturnValue £temporary737
417:	

freopen$129:	; Assign handle £temporary737
418:		mov [bp + 12], bx
420:	

freopen$130:	; Equal 147 handle -1
421:		cmp word [bp + 12], -1
422:		je freopen$147
424:	

freopen$131:	; Deref £temporary739 -> stream stream 0
425:		mov si, [bp + 10]
427:	

freopen$132:	; Assign £temporary739 -> stream 1
428:		mov word [si], 1
430:	

freopen$133:	; Deref £temporary740 -> stream stream 2
431:		mov si, [bp + 10]
433:	

freopen$134:	; Assign £temporary740 -> stream handle
434:		mov ax, [bp + 12]
435:		mov [si + 2], ax
437:	

freopen$135:	; Deref £temporary741 -> stream stream 25
438:		mov si, [bp + 10]
440:	

freopen$136:	; Assign £temporary741 -> stream 0
441:		mov word [si + 25], 0
443:	

freopen$137:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
445:	

freopen$138:	; Deref £temporary742 -> stream stream 4
446:		mov si, [bp + 10]
448:	

freopen$139:	; Parameter 14 £temporary742 -> stream 6
449:		mov [bp + 20], si
450:		add word [bp + 20], 4
452:	

freopen$140:	; Parameter 14 name 8
453:		mov ax, [bp + 6]
454:		mov [bp + 22], ax
456:	

freopen$141:	; Call 14 strcpy 0
457:		mov word [bp + 14], freopen$142
458:		mov [bp + 16], bp
459:		add bp, 14
460:		jmp strcpy
462:	

freopen$142:	; PostCall 14
464:	

freopen$143:	; Deref £temporary744 -> stream stream 27
465:		mov si, [bp + 10]
467:	

freopen$144:	; Assign £temporary744 -> stream 0
468:		mov word [si + 27], 0
470:	

freopen$145:	; SetReturnValue stream
471:		mov bx, [bp + 10]
473:	

freopen$146:	; Return stream
474:		mov ax, [bp]
475:		mov di, [bp + 4]
476:		mov bp, [bp + 2]
477:		jmp ax
479:	

freopen$147:	; Deref £temporary745 -> stream stream 0
480:		mov si, [bp + 10]
482:	

freopen$148:	; Assign £temporary745 -> stream 0
483:		mov word [si], 0
485:	

freopen$149:	; SetReturnValue 0
486:		mov bx, 0
488:	

freopen$150:	; Return 0
489:		mov ax, [bp]
490:		mov di, [bp + 4]
491:		mov bp, [bp + 2]
492:		jmp ax
494:	

freopen$151:	; FunctionEnd freopen
1:	

fflush:	; NotEqual 21 stream 0
2:		cmp word [bp + 6], 0
3:		jne fflush$21
5:	

fflush$1:	; Assign index 0
6:		mov word [bp + 8], 0
8:	

fflush$2:	; SignedGreaterThanEqual 21 index 20
9:		cmp word [bp + 8], 20
10:		jge fflush$21
12:	

fflush$3:	; SignedMultiply £temporary785 index 29
13:		mov ax, [bp + 8]
15:		xor dx, dx
16:		imul word [@1886$int2$29#]
22:	

fflush$4:	; BinaryAdd £temporary786 g_fileArray £temporary785
23:		mov si, g_fileArray
24:		add si, ax
26:	

fflush$5:	; Deref £temporary784 -> £temporary786 £temporary786 0
28:	

fflush$6:	; Equal 19 £temporary784.open$0 -> £temporary786 0
29:		cmp word [si], 0
30:		je fflush$19
32:	

fflush$7:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
34:	

fflush$8:	; SignedMultiply £temporary788 index 29
35:		mov ax, [bp + 8]
37:		xor dx, dx
38:		imul word [@1891$int2$29#]
44:	

fflush$9:	; BinaryAdd £temporary789 g_fileArray £temporary788
45:		mov si, g_fileArray
46:		add si, ax
48:	

fflush$10:	; Deref £temporary787 -> £temporary789 £temporary789 0
50:	

fflush$11:	; address £temporary790 £temporary787 -> £temporary789
52:	

fflush$12:	; Parameter 10 £temporary790 6
53:		mov [bp + 16], si
55:	

fflush$13:	; Call 10 fflush 0
56:		mov word [bp + 10], fflush$14
57:		mov [bp + 12], bp
58:		add bp, 10
59:		jmp fflush
61:	

fflush$14:	; PostCall 10
63:	

fflush$15:	; GetReturnValue £temporary791
65:	

fflush$16:	; NotEqual 19 £temporary791 -1
66:		cmp bx, -1
67:		jne fflush$19
69:	

fflush$17:	; SetReturnValue -1
70:		mov bx, -1
72:	

fflush$18:	; Return -1
73:		mov ax, [bp]
74:		mov di, [bp + 4]
75:		mov bp, [bp + 2]
76:		jmp ax
78:	

fflush$19:	; Increment index
79:		inc word [bp + 8]
81:	

fflush$20:	; Goto 2
82:		jmp fflush$2
84:	

fflush$21:	; SetReturnValue 0
85:		mov bx, 0
87:	

fflush$22:	; Return 0
88:		mov ax, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp ax
93:	

fflush$23:	; FunctionEnd fflush
1:	

fclose:	; Equal 20 stream 0
2:		cmp word [bp + 6], 0
3:		je fclose$20
5:	

fclose$1:	; AssignRegister ah 62
6:		mov ah, 62
8:	

fclose$2:	; Deref £temporary798 -> stream stream 2
9:		mov si, [bp + 6]
11:	

fclose$3:	; AssignRegister bx £temporary798 -> stream
12:		mov bx, [si + 2]
14:	

fclose$4:	; Interrupt 33
15:		int 33
17:	

fclose$5:	; NotCarry 9
18:		jnc fclose$9
20:	

fclose$6:	; Assign errno 11
21:		mov word [errno], 11
23:	

fclose$7:	; SetReturnValue -1
24:		mov bx, -1
26:	

fclose$8:	; Return -1
27:		mov ax, [bp]
28:		mov di, [bp + 4]
29:		mov bp, [bp + 2]
30:		jmp ax
32:	

fclose$9:	; Deref £temporary800 -> stream stream 27
33:		mov si, [bp + 6]
35:	

fclose$10:	; Equal 16 £temporary800 -> stream 0
36:		cmp word [si + 27], 0
37:		je fclose$16
39:	

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
41:	

fclose$12:	; Deref £temporary801 -> stream stream 4
42:		mov si, [bp + 6]
44:	

fclose$13:	; Parameter 8 £temporary801 -> stream 6
45:		mov [bp + 14], si
46:		add word [bp + 14], 4
48:	

fclose$14:	; Call 8 remove 0
49:		mov word [bp + 8], fclose$15
50:		mov [bp + 10], bp
51:		add bp, 8
52:		jmp remove
54:	

fclose$15:	; PostCall 8
56:	

fclose$16:	; Deref £temporary804 -> stream stream 0
57:		mov si, [bp + 6]
59:	

fclose$17:	; Assign £temporary804 -> stream 0
60:		mov word [si], 0
62:	

fclose$18:	; SetReturnValue 0
63:		mov bx, 0
65:	

fclose$19:	; Return 0
66:		mov ax, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp ax
71:	

fclose$20:	; Assign index 0
72:		mov word [bp + 8], 0
74:	

fclose$21:	; SignedGreaterThanEqual 40 index 20
75:		cmp word [bp + 8], 20
76:		jge fclose$40
78:	

fclose$22:	; SignedMultiply £temporary808 index 29
79:		mov ax, [bp + 8]
81:		xor dx, dx
82:		imul word [@1940$int2$29#]
88:	

fclose$23:	; BinaryAdd £temporary809 g_fileArray £temporary808
89:		mov si, g_fileArray
90:		add si, ax
92:	

fclose$24:	; Deref £temporary807 -> £temporary809 £temporary809 0
94:	

fclose$25:	; Equal 38 £temporary807.open$0 -> £temporary809 0
95:		cmp word [si], 0
96:		je fclose$38
98:	

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
100:	

fclose$27:	; SignedMultiply £temporary811 index 29
101:		mov ax, [bp + 8]
103:		xor dx, dx
104:		imul word [@1945$int2$29#]
110:	

fclose$28:	; BinaryAdd £temporary812 g_fileArray £temporary811
111:		mov si, g_fileArray
112:		add si, ax
114:	

fclose$29:	; Deref £temporary810 -> £temporary812 £temporary812 0
116:	

fclose$30:	; address £temporary813 £temporary810 -> £temporary812
118:	

fclose$31:	; Parameter 10 £temporary813 6
119:		mov [bp + 16], si
121:	

fclose$32:	; Call 10 fclose 0
122:		mov word [bp + 10], fclose$33
123:		mov [bp + 12], bp
124:		add bp, 10
125:		jmp fclose
127:	

fclose$33:	; PostCall 10
129:	

fclose$34:	; GetReturnValue £temporary814
131:	

fclose$35:	; NotEqual 38 £temporary814 -1
132:		cmp bx, -1
133:		jne fclose$38
135:	

fclose$36:	; SetReturnValue -1
136:		mov bx, -1
138:	

fclose$37:	; Return -1
139:		mov ax, [bp]
140:		mov di, [bp + 4]
141:		mov bp, [bp + 2]
142:		jmp ax
144:	

fclose$38:	; Increment index
145:		inc word [bp + 8]
147:	

fclose$39:	; Goto 21
148:		jmp fclose$21
150:	

fclose$40:	; SetReturnValue 0
151:		mov bx, 0
153:	

fclose$41:	; Return 0
154:		mov ax, [bp]
155:		mov di, [bp + 4]
156:		mov bp, [bp + 2]
157:		jmp ax
159:	

fclose$42:	; FunctionEnd fclose
1:	

remove:	; AssignRegister ah 65
2:		mov ah, 65
4:	

remove$1:	; AssignRegister cl 0
5:		mov cl, 0
7:	

remove$2:	; AssignRegister dx name
8:		mov dx, [bp + 6]
10:	

remove$3:	; Interrupt 33
11:		int 33
13:	

remove$4:	; Carry 7
14:		jc remove$7
16:	

remove$5:	; SetReturnValue 0
17:		mov bx, 0
19:	

remove$6:	; Return 0
20:		mov ax, [bp]
21:		mov di, [bp + 4]
22:		mov bp, [bp + 2]
23:		jmp ax
25:	

remove$7:	; Assign errno 18
26:		mov word [errno], 18
28:	

remove$8:	; SetReturnValue -1
29:		mov bx, -1
31:	

remove$9:	; Return -1
32:		mov ax, [bp]
33:		mov di, [bp + 4]
34:		mov bp, [bp + 2]
35:		jmp ax
37:	

remove$10:	; FunctionEnd remove
1:	

rename:	; AssignRegister ah 86
2:		mov ah, 86
4:	

rename$1:	; AssignRegister cl 0
5:		mov cl, 0
7:	

rename$2:	; AssignRegister dx oldName
8:		mov dx, [bp + 6]
10:	

rename$3:	; AssignRegister di newName
11:		mov di, [bp + 8]
13:	

rename$4:	; Interrupt 33
14:		int 33
16:	

rename$5:	; Carry 8
17:		jc rename$8
19:	

rename$6:	; SetReturnValue 0
20:		mov bx, 0
22:	

rename$7:	; Return 0
23:		mov ax, [bp]
24:		mov di, [bp + 4]
25:		mov bp, [bp + 2]
26:		jmp ax
28:	

rename$8:	; Assign errno 19
29:		mov word [errno], 19
31:	

rename$9:	; SetReturnValue -1
32:		mov bx, -1
34:	

rename$10:	; Return -1
35:		mov ax, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp ax
40:	

rename$11:	; FunctionEnd rename
1:	

setvbuf:	; SetReturnValue 0
2:		mov bx, 0
4:	

setvbuf$1:	; Return 0
5:		mov ax, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp ax
10:	

setvbuf$2:	; FunctionEnd setvbuf
1:	

setbuf:	; Empty
3:	

setbuf$1:	; Return 0
4:		mov ax, [bp]
5:		mov di, [bp + 4]
6:		mov bp, [bp + 2]
7:		jmp ax
9:	

setbuf$2:	; FunctionEnd setbuf
1:	

fgetc:	; Assign c 0
2:		mov byte [bp + 8], 0
4:	

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
6:	

fgetc$2:	; address £temporary830 c
7:		mov si, bp
8:		add si, 8
10:	

fgetc$3:	; Parameter 9 £temporary830 6
11:		mov [bp + 15], si
13:	

fgetc$4:	; Parameter 9 1 8
14:		mov word [bp + 17], 1
16:	

fgetc$5:	; Parameter 9 1 10
17:		mov word [bp + 19], 1
19:	

fgetc$6:	; Parameter 9 stream 12
20:		mov ax, [bp + 6]
21:		mov [bp + 21], ax
23:	

fgetc$7:	; Call 9 fread 0
24:		mov word [bp + 9], fgetc$8
25:		mov [bp + 11], bp
26:		add bp, 9
27:		jmp fread
29:	

fgetc$8:	; PostCall 9
31:	

fgetc$9:	; GetReturnValue £temporary831
33:	

fgetc$10:	; SignedLessThanEqual 14 £temporary831 0
34:		cmp bx, 0
35:		jle fgetc$14
37:	

fgetc$11:	; IntegralToIntegral £temporary833 c
38:		mov bl, [bp + 8]
40:		and bx, 255
42:		cmp bl, 0
43:		jge fgetc$12
44:		neg bl
46:		neg bx
48:	

fgetc$12:	; SetReturnValue £temporary833
50:	

fgetc$13:	; Return £temporary833
51:		mov ax, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp ax
56:	

fgetc$14:	; SetReturnValue -1
57:		mov bx, -1
59:	

fgetc$15:	; Return -1
60:		mov ax, [bp]
61:		mov di, [bp + 4]
62:		mov bp, [bp + 2]
63:		jmp ax
65:	

fgetc$16:	; FunctionEnd fgetc
1:	

fgets:	; Assign count 0
2:		mov word [bp + 12], 0
4:	

fgets$1:	; Assign prevChar 0
5:		mov byte [bp + 14], 0
7:	

fgets$2:	; BinarySubtract £temporary839 size 1
8:		mov ax, [bp + 8]
9:		sub ax, 1
11:	

fgets$3:	; SignedGreaterThanEqual 33 count £temporary839
12:		cmp [bp + 12], ax
13:		jge fgets$33
15:	

fgets$4:	; Assign currChar 0
16:		mov byte [bp + 15], 0
18:	

fgets$5:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
20:	

fgets$6:	; Parameter 16 stream 6
21:		mov ax, [bp + 10]
22:		mov [bp + 22], ax
24:	

fgets$7:	; Parameter 16 string_25c# 8
25:		mov word [bp + 24], @2033$string_25c#
27:	

fgets$8:	; address £temporary841 currChar
28:		mov si, bp
29:		add si, 15
31:	

fgets$9:	; Parameter 16 £temporary841 10
32:		mov [bp + 26], si
34:	

fgets$10:	; Call 16 fscanf 0
35:		mov word [bp + 16], fgets$11
36:		mov [bp + 18], bp
37:		add bp, 16
38:		mov di, bp
39:		add di, 2
40:		jmp fscanf
42:	

fgets$11:	; PostCall 16
44:	

fgets$12:	; NotEqual 18 prevChar 13
45:		cmp byte [bp + 14], 13
46:		jne fgets$18
48:	

fgets$13:	; NotEqual 18 currChar 10
49:		cmp byte [bp + 15], 10
50:		jne fgets$18
52:	

fgets$14:	; BinaryAdd £temporary847 text count
53:		mov si, [bp + 6]
54:		add si, [bp + 12]
56:	

fgets$15:	; Deref £temporary846 -> £temporary847 £temporary847 0
58:	

fgets$16:	; Assign £temporary846 -> £temporary847 0
59:		mov byte [si], 0
61:	

fgets$17:	; Goto 33
62:		jmp fgets$33
64:	

fgets$18:	; IntegralToIntegral £temporary848 currChar
65:		mov al, [bp + 15]
67:		and ax, 255
69:		cmp al, 0
70:		jge fgets$19
71:		neg al
73:		neg ax
75:	

fgets$19:	; NotEqual 24 £temporary848 -1
76:		cmp ax, -1
77:		jne fgets$24
79:	

fgets$20:	; BinaryAdd £temporary851 text count
80:		mov si, [bp + 6]
81:		add si, [bp + 12]
83:	

fgets$21:	; Deref £temporary850 -> £temporary851 £temporary851 0
85:	

fgets$22:	; Assign £temporary850 -> £temporary851 0
86:		mov byte [si], 0
88:	

fgets$23:	; Goto 33
89:		jmp fgets$33
91:	

fgets$24:	; Equal 31 currChar 13
92:		cmp byte [bp + 15], 13
93:		je fgets$31
95:	

fgets$25:	; Equal 31 currChar 10
96:		cmp byte [bp + 15], 10
97:		je fgets$31
99:	

fgets$26:	; Assign £temporary855 count
100:		mov ax, [bp + 12]
102:	

fgets$27:	; Increment count
103:		inc word [bp + 12]
105:	

fgets$28:	; BinaryAdd £temporary857 text £temporary855
106:		mov si, [bp + 6]
107:		add si, ax
109:	

fgets$29:	; Deref £temporary856 -> £temporary857 £temporary857 0
111:	

fgets$30:	; Assign £temporary856 -> £temporary857 currChar
112:		mov al, [bp + 15]
113:		mov [si], al
115:	

fgets$31:	; Assign prevChar currChar
116:		mov al, [bp + 15]
117:		mov [bp + 14], al
119:	

fgets$32:	; Goto 2
120:		jmp fgets$2
122:	

fgets$33:	; SetReturnValue text
123:		mov bx, [bp + 6]
125:	

fgets$34:	; Return text
126:		mov ax, [bp]
127:		mov di, [bp + 4]
128:		mov bp, [bp + 2]
129:		jmp ax
131:	

fgets$35:	; FunctionEnd fgets
1:	

fputs:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

fputs$1:	; Parameter 10 s 6
4:		mov ax, [bp + 6]
5:		mov [bp + 16], ax
7:	

fputs$2:	; Call 10 strlen 0
8:		mov word [bp + 10], fputs$3
9:		mov [bp + 12], bp
10:		add bp, 10
11:		jmp strlen
13:	

fputs$3:	; PostCall 10
15:	

fputs$4:	; GetReturnValue £temporary862
17:	

fputs$5:	; BinaryAdd £temporary863 £temporary862 1
18:		add bx, 1
20:	

fputs$6:	; SignedMultiply size £temporary863 1
21:		mov ax, bx
23:		xor dx, dx
24:		imul word [@2076$int2$1#]
25:		mov [bp + 10], ax
27:	

fputs$7:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
29:	

fputs$8:	; Parameter 12 s 6
30:		mov ax, [bp + 6]
31:		mov [bp + 18], ax
33:	

fputs$9:	; Parameter 12 size 8
34:		mov ax, [bp + 10]
35:		mov [bp + 20], ax
37:	

fputs$10:	; Parameter 12 1 10
38:		mov word [bp + 22], 1
40:	

fputs$11:	; Parameter 12 stream 12
41:		mov ax, [bp + 8]
42:		mov [bp + 24], ax
44:	

fputs$12:	; Call 12 fwrite 0
45:		mov word [bp + 12], fputs$13
46:		mov [bp + 14], bp
47:		add bp, 12
48:		jmp fwrite
50:	

fputs$13:	; PostCall 12
52:	

fputs$14:	; GetReturnValue £temporary865
54:	

fputs$15:	; NotEqual 18 £temporary865 size
55:		cmp bx, [bp + 10]
56:		jne fputs$18
58:	

fputs$16:	; Assign £temporary870 0
59:		mov bx, 0
61:	

fputs$17:	; Goto 19
62:		jmp fputs$19
64:	

fputs$18:	; Assign £temporary870 -1
65:		mov bx, -1
67:	

fputs$19:	; SetReturnValue £temporary870
69:	

fputs$20:	; Return £temporary870
70:		mov ax, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp ax
75:	

fputs$21:	; FunctionEnd fputs
1:	

getchar:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

getchar$1:	; Parameter 6 stdin 6
4:		mov ax, [stdin]
5:		mov [bp + 12], ax
7:	

getchar$2:	; Call 6 fgetc 0
8:		mov word [bp + 6], getchar$3
9:		mov [bp + 8], bp
10:		add bp, 6
11:		jmp fgetc
13:	

getchar$3:	; PostCall 6
15:	

getchar$4:	; GetReturnValue £temporary876
17:	

getchar$5:	; SetReturnValue £temporary876
19:	

getchar$6:	; Return £temporary876
20:		mov ax, [bp]
21:		mov di, [bp + 4]
22:		mov bp, [bp + 2]
23:		jmp ax
25:	

getchar$7:	; FunctionEnd getchar
1:	

gets:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

gets$1:	; Parameter 8 s 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

gets$2:	; Parameter 8 -1 8
8:		mov word [bp + 16], -1
10:	

gets$3:	; Parameter 8 stdin 10
11:		mov ax, [stdin]
12:		mov [bp + 18], ax
14:	

gets$4:	; Call 8 fgets 0
15:		mov word [bp + 8], gets$5
16:		mov [bp + 10], bp
17:		add bp, 8
18:		jmp fgets
20:	

gets$5:	; PostCall 8
22:	

gets$6:	; GetReturnValue £temporary878
24:	

gets$7:	; Equal 21 £temporary878 0
25:		cmp bx, 0
26:		je gets$21
28:	

gets$8:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
30:	

gets$9:	; Parameter 8 s 6
31:		mov ax, [bp + 6]
32:		mov [bp + 14], ax
34:	

gets$10:	; Call 8 strlen 0
35:		mov word [bp + 8], gets$11
36:		mov [bp + 10], bp
37:		add bp, 8
38:		jmp strlen
40:	

gets$11:	; PostCall 8
42:	

gets$12:	; GetReturnValue £temporary880
44:	

gets$13:	; Assign size £temporary880
45:		mov [bp + 8], bx
47:	

gets$14:	; SignedLessThanEqual 19 size 0
48:		cmp word [bp + 8], 0
49:		jle gets$19
51:	

gets$15:	; BinarySubtract £temporary882 size 1
52:		mov ax, [bp + 8]
53:		sub ax, 1
55:	

gets$16:	; BinaryAdd £temporary884 s £temporary882
56:		mov si, [bp + 6]
57:		add si, ax
59:	

gets$17:	; Deref £temporary883 -> £temporary884 £temporary884 0
61:	

gets$18:	; Assign £temporary883 -> £temporary884 0
62:		mov byte [si], 0
64:	

gets$19:	; SetReturnValue s
65:		mov bx, [bp + 6]
67:	

gets$20:	; Return s
68:		mov ax, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp ax
73:	

gets$21:	; SetReturnValue 0
74:		mov bx, 0
76:	

gets$22:	; Return 0
77:		mov ax, [bp]
78:		mov di, [bp + 4]
79:		mov bp, [bp + 2]
80:		jmp ax
82:	

gets$23:	; FunctionEnd gets
1:	

puts:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

puts$1:	; Parameter 8 s 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

puts$2:	; Parameter 8 stdout 8
8:		mov ax, [stdout]
9:		mov [bp + 16], ax
11:	

puts$3:	; Call 8 fputs 0
12:		mov word [bp + 8], puts$4
13:		mov [bp + 10], bp
14:		add bp, 8
15:		jmp fputs
17:	

puts$4:	; PostCall 8
19:	

puts$5:	; GetReturnValue £temporary889
21:	

puts$6:	; Equal 15 £temporary889 0
22:		cmp bx, 0
23:		je puts$15
25:	

puts$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
27:	

puts$8:	; Parameter 8 10 6
28:		mov word [bp + 14], 10
30:	

puts$9:	; Parameter 8 stdout 8
31:		mov ax, [stdout]
32:		mov [bp + 16], ax
34:	

puts$10:	; Call 8 fputc 0
35:		mov word [bp + 8], puts$11
36:		mov [bp + 10], bp
37:		add bp, 8
38:		jmp fputc
40:	

puts$11:	; PostCall 8
42:	

puts$12:	; GetReturnValue £temporary891
44:	

puts$13:	; SetReturnValue £temporary891
46:	

puts$14:	; Return £temporary891
47:		mov ax, [bp]
48:		mov di, [bp + 4]
49:		mov bp, [bp + 2]
50:		jmp ax
52:	

puts$15:	; SetReturnValue -1
53:		mov bx, -1
55:	

puts$16:	; Return -1
56:		mov ax, [bp]
57:		mov di, [bp + 4]
58:		mov bp, [bp + 2]
59:		jmp ax
61:	

puts$17:	; FunctionEnd puts
1:	

ungetc:	; Deref £temporary896 -> stream stream 20
2:		mov si, [bp + 8]
4:	

ungetc$1:	; IntegralToIntegral £temporary897 £temporary896 -> stream
5:		mov al, [si + 20]
7:		and ax, 255
9:		cmp al, 0
10:		jge ungetc$2
11:		neg al
13:		neg ax
15:	

ungetc$2:	; Equal 6 £temporary897 -1
16:		cmp ax, -1
17:		je ungetc$6
19:	

ungetc$3:	; Deref £temporary899 -> stream stream 20
20:		mov si, [bp + 8]
22:	

ungetc$4:	; IntegralToIntegral £temporary900 c
23:		mov ax, [bp + 6]
26:		cmp ax, 0
27:		jge ungetc$5
28:		neg ax
30:		neg al
32:	

ungetc$5:	; Assign £temporary899 -> stream £temporary900
33:		mov [si + 20], al
35:	

ungetc$6:	; SetReturnValue c
36:		mov bx, [bp + 6]
38:	

ungetc$7:	; Return c
39:		mov ax, [bp]
40:		mov di, [bp + 4]
41:		mov bp, [bp + 2]
42:		jmp ax
44:	

ungetc$8:	; FunctionEnd ungetc
1:	

fread:	; Deref £temporary902 -> stream stream 2
2:		mov si, [bp + 12]
4:	

fread$1:	; AssignRegister bx £temporary902 -> stream
5:		mov bx, [si + 2]
7:	

fread$2:	; SignedMultiply £temporary904 size nobj
8:		mov ax, [bp + 8]
10:		xor dx, dx
11:		imul word [bp + 10]
17:	

fread$3:	; AssignRegister cx £temporary904
18:		mov cx, ax
20:	

fread$4:	; AssignRegister ah 63
21:		mov ah, 63
23:	

fread$5:	; AssignRegister dx ptr
24:		mov dx, [bp + 6]
26:	

fread$6:	; Interrupt 33
27:		int 33
29:	

fread$7:	; NotCarry 13
30:		jnc fread$13
32:	

fread$8:	; Deref £temporary908 -> stream stream 21
33:		mov si, [bp + 12]
35:	

fread$9:	; Assign errno 14
36:		mov word [errno], 14
38:	

fread$10:	; Assign £temporary908 -> stream errno
39:		mov ax, [errno]
40:		mov [si + 21], ax
42:	

fread$11:	; SetReturnValue 0
43:		mov bx, 0
45:	

fread$12:	; Return 0
46:		mov ax, [bp]
47:		mov di, [bp + 4]
48:		mov bp, [bp + 2]
49:		jmp ax
51:	

fread$13:	; InspectRegister £temporary909 ax
53:	

fread$14:	; SetReturnValue £temporary909
54:		mov bx, ax
56:	

fread$15:	; Return £temporary909
57:		mov ax, [bp]
58:		mov di, [bp + 4]
59:		mov bp, [bp + 2]
60:		jmp ax
62:	

fread$16:	; FunctionEnd fread
1:	

fwrite:	; Deref £temporary911 -> stream stream 2
2:		mov si, [bp + 12]
4:	

fwrite$1:	; AssignRegister bx £temporary911 -> stream
5:		mov bx, [si + 2]
7:	

fwrite$2:	; SignedMultiply £temporary913 size nobj
8:		mov ax, [bp + 8]
10:		xor dx, dx
11:		imul word [bp + 10]
17:	

fwrite$3:	; AssignRegister cx £temporary913
18:		mov cx, ax
20:	

fwrite$4:	; AssignRegister ah 64
21:		mov ah, 64
23:	

fwrite$5:	; AssignRegister dx ptr
24:		mov dx, [bp + 6]
26:	

fwrite$6:	; Interrupt 33
27:		int 33
29:	

fwrite$7:	; NotCarry 13
30:		jnc fwrite$13
32:	

fwrite$8:	; Deref £temporary917 -> stream stream 21
33:		mov si, [bp + 12]
35:	

fwrite$9:	; Assign errno 13
36:		mov word [errno], 13
38:	

fwrite$10:	; Assign £temporary917 -> stream errno
39:		mov ax, [errno]
40:		mov [si + 21], ax
42:	

fwrite$11:	; SetReturnValue 0
43:		mov bx, 0
45:	

fwrite$12:	; Return 0
46:		mov ax, [bp]
47:		mov di, [bp + 4]
48:		mov bp, [bp + 2]
49:		jmp ax
51:	

fwrite$13:	; InspectRegister £temporary918 ax
53:	

fwrite$14:	; SetReturnValue £temporary918
54:		mov bx, ax
56:	

fwrite$15:	; Return £temporary918
57:		mov ax, [bp]
58:		mov di, [bp + 4]
59:		mov bp, [bp + 2]
60:		jmp ax
62:	

fwrite$16:	; FunctionEnd fwrite
1:	

fseek:	; IntegralToIntegral £temporary920 origin
2:		mov ax, [bp + 10]
5:		cmp ax, 0
6:		jge fseek$1
7:		neg ax
9:		neg al
11:	

fseek$1:	; AssignRegister al £temporary920
13:	

fseek$2:	; AssignRegister ah 66
14:		mov ah, 66
16:	

fseek$3:	; Deref £temporary923 -> stream stream 2
17:		mov si, [bp + 6]
19:	

fseek$4:	; AssignRegister bx £temporary923 -> stream
20:		mov bx, [si + 2]
22:	

fseek$5:	; AssignRegister cx 0
23:		mov cx, 0
25:	

fseek$6:	; IntegralToIntegral £temporary926 offset
26:		mov dx, [bp + 8]
29:	

fseek$7:	; AssignRegister dx £temporary926
31:	

fseek$8:	; Interrupt 33
32:		int 33
34:	

fseek$9:	; Carry 16
35:		jc fseek$16
37:	

fseek$10:	; Deref £temporary929 -> stream stream 23
38:		mov si, [bp + 6]
40:	

fseek$11:	; InspectRegister £temporary930 ax
42:	

fseek$12:	; Assign £temporary929 -> stream £temporary930
43:		mov [si + 23], ax
45:	

fseek$13:	; Deref £temporary931 -> stream stream 23
46:		mov si, [bp + 6]
48:	

fseek$14:	; SetReturnValue £temporary931 -> stream
49:		mov bx, [si + 23]
51:	

fseek$15:	; Return £temporary931 -> stream
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

fseek$16:	; Deref £temporary932 -> stream stream 21
58:		mov si, [bp + 6]
60:	

fseek$17:	; Assign £temporary932 -> stream 15
61:		mov word [si + 21], 15
63:	

fseek$18:	; SetReturnValue -1
64:		mov bx, -1
66:	

fseek$19:	; Return -1
67:		mov ax, [bp]
68:		mov di, [bp + 4]
69:		mov bp, [bp + 2]
70:		jmp ax
72:	

fseek$20:	; FunctionEnd fseek
1:	

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

ftell$1:	; Parameter 8 stream 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

ftell$2:	; Parameter 8 0 8
8:		mov word [bp + 16], 0
10:	

ftell$3:	; Parameter 8 1 10
11:		mov word [bp + 18], 1
13:	

ftell$4:	; Call 8 fseek 0
14:		mov word [bp + 8], ftell$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		jmp fseek
19:	

ftell$5:	; PostCall 8
21:	

ftell$6:	; GetReturnValue £temporary933
23:	

ftell$7:	; SetReturnValue £temporary933
25:	

ftell$8:	; Return £temporary933
26:		mov ax, [bp]
27:		mov di, [bp + 4]
28:		mov bp, [bp + 2]
29:		jmp ax
31:	

ftell$9:	; FunctionEnd ftell
1:	

rewind:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

rewind$1:	; Parameter 8 stream 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

rewind$2:	; Parameter 8 0 8
8:		mov word [bp + 16], 0
10:	

rewind$3:	; Parameter 8 0 10
11:		mov word [bp + 18], 0
13:	

rewind$4:	; Call 8 fseek 0
14:		mov word [bp + 8], rewind$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		jmp fseek
19:	

rewind$5:	; PostCall 8
21:	

rewind$6:	; Return 0
22:		mov ax, [bp]
23:		mov di, [bp + 4]
24:		mov bp, [bp + 2]
25:		jmp ax
27:	

rewind$7:	; FunctionEnd rewind
1:	

fgetpos:	; Deref £temporary942 -> ptr ptr 0
2:		mov si, [bp + 8]
4:	

fgetpos$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
5:		mov [bp + 10], si
7:	

fgetpos$2:	; Parameter 10 stream 6
8:		mov ax, [bp + 6]
9:		mov [bp + 18], ax
11:	

fgetpos$3:	; Call 10 ftell 0
12:		mov word [bp + 12], fgetpos$4
13:		mov [bp + 14], bp
14:		add bp, 12
15:		jmp ftell
17:	

fgetpos$4:	; PostCall 10
18:		mov si, [bp + 10]
20:	

fgetpos$5:	; GetReturnValue £temporary943
22:	

fgetpos$6:	; IntegralToIntegral £temporary944 £temporary943
25:	

fgetpos$7:	; Assign £temporary942 -> ptr £temporary944
26:		mov [si], bx
28:	

fgetpos$8:	; SetReturnValue 0
29:		mov bx, 0
31:	

fgetpos$9:	; Return 0
32:		mov ax, [bp]
33:		mov di, [bp + 4]
34:		mov bp, [bp + 2]
35:		jmp ax
37:	

fgetpos$10:	; FunctionEnd fgetpos
1:	

fsetpos:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

fsetpos$1:	; Parameter 10 stream 6
4:		mov ax, [bp + 6]
5:		mov [bp + 16], ax
7:	

fsetpos$2:	; Deref £temporary946 -> ptr ptr 0
8:		mov si, [bp + 8]
10:	

fsetpos$3:	; Parameter 10 £temporary946 -> ptr 8
11:		mov ax, [si]
12:		mov [bp + 18], ax
14:	

fsetpos$4:	; Parameter 10 0 10
15:		mov word [bp + 20], 0
17:	

fsetpos$5:	; Call 10 fseek 0
18:		mov word [bp + 10], fsetpos$6
19:		mov [bp + 12], bp
20:		add bp, 10
21:		jmp fseek
23:	

fsetpos$6:	; PostCall 10
25:	

fsetpos$7:	; GetReturnValue £temporary947
27:	

fsetpos$8:	; IntegralToIntegral £temporary948 £temporary947
30:	

fsetpos$9:	; SetReturnValue £temporary948
32:	

fsetpos$10:	; Return £temporary948
33:		mov ax, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp ax
38:	

fsetpos$11:	; FunctionEnd fsetpos
1:	

clearerr:	; Deref £temporary952 -> stream stream 21
2:		mov si, [bp + 6]
4:	

clearerr$1:	; Assign errno 0
5:		mov word [errno], 0
7:	

clearerr$2:	; Assign £temporary952 -> stream errno
8:		mov ax, [errno]
9:		mov [si + 21], ax
11:	

clearerr$3:	; Return 0
12:		mov ax, [bp]
13:		mov di, [bp + 4]
14:		mov bp, [bp + 2]
15:		jmp ax
17:	

clearerr$4:	; FunctionEnd clearerr
1:	

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

feof$1:	; Parameter 8 stream 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

feof$2:	; Parameter 8 0 8
8:		mov word [bp + 16], 0
10:	

feof$3:	; Parameter 8 1 10
11:		mov word [bp + 18], 1
13:	

feof$4:	; Call 8 fseek 0
14:		mov word [bp + 8], feof$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		jmp fseek
19:	

feof$5:	; PostCall 8
21:	

feof$6:	; GetReturnValue £temporary953
23:	

feof$7:	; IntegralToIntegral £temporary954 £temporary953
25:		and ebx, 65535
27:	

feof$8:	; Assign currPosition £temporary954
28:		mov [bp + 8], ebx
30:	

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
32:	

feof$10:	; Parameter 12 stream 6
33:		mov ax, [bp + 6]
34:		mov [bp + 18], ax
36:	

feof$11:	; Parameter 12 0 8
37:		mov word [bp + 20], 0
39:	

feof$12:	; Parameter 12 2 10
40:		mov word [bp + 22], 2
42:	

feof$13:	; Call 12 fseek 0
43:		mov word [bp + 12], feof$14
44:		mov [bp + 14], bp
45:		add bp, 12
46:		jmp fseek
48:	

feof$14:	; PostCall 12
50:	

feof$15:	; GetReturnValue £temporary955
52:	

feof$16:	; IntegralToIntegral £temporary956 £temporary955
54:		and ebx, 65535
56:	

feof$17:	; Assign lastPosition £temporary956
57:		mov [bp + 12], ebx
59:	

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
61:	

feof$19:	; Parameter 16 stream 6
62:		mov ax, [bp + 6]
63:		mov [bp + 22], ax
65:	

feof$20:	; IntegralToIntegral £temporary957 currPosition
66:		mov eax, [bp + 8]
69:	

feof$21:	; Parameter 16 £temporary957 8
70:		mov [bp + 24], ax
72:	

feof$22:	; Parameter 16 0 10
73:		mov word [bp + 26], 0
75:	

feof$23:	; Call 16 fseek 0
76:		mov word [bp + 16], feof$24
77:		mov [bp + 18], bp
78:		add bp, 16
79:		jmp fseek
81:	

feof$24:	; PostCall 16
83:	

feof$25:	; NotEqual 28 currPosition lastPosition
84:		mov eax, [bp + 12]
85:		cmp [bp + 8], eax
86:		jne feof$28
88:	

feof$26:	; Assign £temporary960 1
89:		mov ax, 1
91:	

feof$27:	; Goto 29
92:		jmp feof$29
94:	

feof$28:	; Assign £temporary960 0
95:		mov ax, 0
97:	

feof$29:	; Assign endOfFile £temporary960
98:		mov [bp + 16], ax
100:	

feof$30:	; SetReturnValue endOfFile
101:		mov bx, [bp + 16]
103:	

feof$31:	; Return endOfFile
104:		mov ax, [bp]
105:		mov di, [bp + 4]
106:		mov bp, [bp + 2]
107:		jmp ax
109:	

feof$32:	; FunctionEnd feof
1:	

ferror:	; Deref £temporary970 -> stream stream 21
2:		mov si, [bp + 6]
4:	

ferror$1:	; SetReturnValue £temporary970 -> stream
5:		mov bx, [si + 21]
7:	

ferror$2:	; Return £temporary970 -> stream
8:		mov ax, [bp]
9:		mov di, [bp + 4]
10:		mov bp, [bp + 2]
11:		jmp ax
13:	

ferror$3:	; FunctionEnd ferror
1:	

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
4:		mov word [bp + 14], @2290$string_25s3A2025s2E0A#
6:	

perror$2:	; Parameter 8 s 8
7:		mov ax, [bp + 6]
8:		mov [bp + 16], ax
10:	

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
12:	

perror$4:	; Parameter 8 errno 16
13:		mov ax, [errno]
14:		mov [bp + 24], ax
16:	

perror$5:	; Call 8 strerror 10
17:		mov word [bp + 18], perror$6
18:		mov [bp + 20], bp
19:		add bp, 18
20:		jmp strerror
22:	

perror$6:	; PostCall 8
24:	

perror$7:	; GetReturnValue £temporary971
26:	

perror$8:	; Parameter 8 £temporary971 10
27:		mov [bp + 18], bx
29:	

perror$9:	; Call 8 printf 0
30:		mov word [bp + 8], perror$10
31:		mov [bp + 10], bp
32:		add bp, 8
33:		mov di, bp
34:		add di, 4
35:		jmp printf
37:	

perror$10:	; PostCall 8
39:	

perror$11:	; Return 0
40:		mov ax, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp ax
45:	

perror$12:	; FunctionEnd perror
