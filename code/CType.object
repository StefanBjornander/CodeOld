1:	

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

islower$1:	; Call 8 localeconv 0
4:		mov word [bp + 8], islower$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

islower$2:	; PostCall 8
11:	

islower$3:	; GetReturnValue £temporary373
16:	

islower$4:	; Assign localeConvPtr £temporary373
17:		mov [bp + 8], bx
19:	

islower$5:	; Equal 19 localeConvPtr 0
20:		cmp word [bp + 8], 0
21:		je islower$19
23:	

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
25:	

islower$7:	; Deref £temporary375 -> localeConvPtr localeConvPtr 12
26:		mov si, [bp + 8]
28:	

islower$8:	; Parameter 10 £temporary375 -> localeConvPtr 6
29:		mov ax, [si + 12]
30:		mov [bp + 16], ax
32:	

islower$9:	; Parameter 10 c 8
33:		mov ax, [bp + 6]
34:		mov [bp + 18], ax
36:	

islower$10:	; Call 10 strchr 0
37:		mov word [bp + 10], islower$11
38:		mov [bp + 12], bp
39:		add bp, 10
40:		jmp strchr
42:	

islower$11:	; PostCall 10
44:	

islower$12:	; GetReturnValue £temporary376
49:	

islower$13:	; Equal 16 £temporary376 0
50:		cmp bx, 0
51:		je islower$16
53:	

islower$14:	; Assign £temporary378 1
54:		mov bx, 1
56:	

islower$15:	; Goto 17
57:		jmp islower$17
59:	

islower$16:	; Assign £temporary378 0
60:		mov bx, 0
62:	

islower$17:	; SetReturnValue £temporary378
64:	

islower$18:	; Return £temporary378
65:		mov ax, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp ax
70:	

islower$19:	; SignedLessThan 23 c 97
71:		cmp word [bp + 6], 97
72:		jl islower$23
74:	

islower$20:	; SignedGreaterThan 23 c 122
75:		cmp word [bp + 6], 122
76:		jg islower$23
78:	

islower$21:	; Assign £temporary382 1
79:		mov bx, 1
81:	

islower$22:	; Goto 24
82:		jmp islower$24
84:	

islower$23:	; Assign £temporary382 0
85:		mov bx, 0
87:	

islower$24:	; SetReturnValue £temporary382
89:	

islower$25:	; Return £temporary382
90:		mov ax, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp ax
95:	

islower$26:	; FunctionEnd islower
1:	

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

isupper$1:	; Call 8 localeconv 0
4:		mov word [bp + 8], isupper$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

isupper$2:	; PostCall 8
11:	

isupper$3:	; GetReturnValue £temporary385
16:	

isupper$4:	; Assign localeConvPtr £temporary385
17:		mov [bp + 8], bx
19:	

isupper$5:	; Equal 19 localeConvPtr 0
20:		cmp word [bp + 8], 0
21:		je isupper$19
23:	

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
25:	

isupper$7:	; Deref £temporary387 -> localeConvPtr localeConvPtr 14
26:		mov si, [bp + 8]
28:	

isupper$8:	; Parameter 10 £temporary387 -> localeConvPtr 6
29:		mov ax, [si + 14]
30:		mov [bp + 16], ax
32:	

isupper$9:	; Parameter 10 c 8
33:		mov ax, [bp + 6]
34:		mov [bp + 18], ax
36:	

isupper$10:	; Call 10 strchr 0
37:		mov word [bp + 10], isupper$11
38:		mov [bp + 12], bp
39:		add bp, 10
40:		jmp strchr
42:	

isupper$11:	; PostCall 10
44:	

isupper$12:	; GetReturnValue £temporary388
49:	

isupper$13:	; Equal 16 £temporary388 0
50:		cmp bx, 0
51:		je isupper$16
53:	

isupper$14:	; Assign £temporary390 1
54:		mov bx, 1
56:	

isupper$15:	; Goto 17
57:		jmp isupper$17
59:	

isupper$16:	; Assign £temporary390 0
60:		mov bx, 0
62:	

isupper$17:	; SetReturnValue £temporary390
64:	

isupper$18:	; Return £temporary390
65:		mov ax, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp ax
70:	

isupper$19:	; SignedLessThan 23 c 65
71:		cmp word [bp + 6], 65
72:		jl isupper$23
74:	

isupper$20:	; SignedGreaterThan 23 c 90
75:		cmp word [bp + 6], 90
76:		jg isupper$23
78:	

isupper$21:	; Assign £temporary394 1
79:		mov bx, 1
81:	

isupper$22:	; Goto 24
82:		jmp isupper$24
84:	

isupper$23:	; Assign £temporary394 0
85:		mov bx, 0
87:	

isupper$24:	; SetReturnValue £temporary394
89:	

isupper$25:	; Return £temporary394
90:		mov ax, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp ax
95:	

isupper$26:	; FunctionEnd isupper
1:	

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

isalpha$1:	; Parameter 8 c 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

isalpha$2:	; Call 8 islower 0
8:		mov word [bp + 8], isalpha$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp islower
13:	

isalpha$3:	; PostCall 8
15:	

isalpha$4:	; GetReturnValue £temporary397
20:	

isalpha$5:	; NotEqual 12 £temporary397 0
21:		cmp bx, 0
22:		jne isalpha$12
24:	

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
26:	

isalpha$7:	; Parameter 8 c 6
27:		mov ax, [bp + 6]
28:		mov [bp + 14], ax
30:	

isalpha$8:	; Call 8 isupper 0
31:		mov word [bp + 8], isalpha$9
32:		mov [bp + 10], bp
33:		add bp, 8
34:		jmp isupper
36:	

isalpha$9:	; PostCall 8
38:	

isalpha$10:	; GetReturnValue £temporary398
43:	

isalpha$11:	; Equal 14 £temporary398 0
44:		cmp bx, 0
45:		je isalpha$14
47:	

isalpha$12:	; Assign £temporary402 1
48:		mov bx, 1
50:	

isalpha$13:	; Goto 15
51:		jmp isalpha$15
53:	

isalpha$14:	; Assign £temporary402 0
54:		mov bx, 0
56:	

isalpha$15:	; SetReturnValue £temporary402
58:	

isalpha$16:	; Return £temporary402
59:		mov ax, [bp]
60:		mov di, [bp + 4]
61:		mov bp, [bp + 2]
62:		jmp ax
64:	

isalpha$17:	; FunctionEnd isalpha
1:	

isdigit:	; SignedLessThan 4 c 48
2:		cmp word [bp + 6], 48
3:		jl isdigit$4
5:	

isdigit$1:	; SignedGreaterThan 4 c 57
6:		cmp word [bp + 6], 57
7:		jg isdigit$4
9:	

isdigit$2:	; Assign £temporary408 1
10:		mov bx, 1
12:	

isdigit$3:	; Goto 5
13:		jmp isdigit$5
15:	

isdigit$4:	; Assign £temporary408 0
16:		mov bx, 0
18:	

isdigit$5:	; SetReturnValue £temporary408
20:	

isdigit$6:	; Return £temporary408
21:		mov ax, [bp]
22:		mov di, [bp + 4]
23:		mov bp, [bp + 2]
24:		jmp ax
26:	

isdigit$7:	; FunctionEnd isdigit
1:	

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

isalnum$1:	; Parameter 8 c 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

isalnum$2:	; Call 8 isalpha 0
8:		mov word [bp + 8], isalnum$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp isalpha
13:	

isalnum$3:	; PostCall 8
15:	

isalnum$4:	; GetReturnValue £temporary409
20:	

isalnum$5:	; NotEqual 12 £temporary409 0
21:		cmp bx, 0
22:		jne isalnum$12
24:	

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
26:	

isalnum$7:	; Parameter 8 c 6
27:		mov ax, [bp + 6]
28:		mov [bp + 14], ax
30:	

isalnum$8:	; Call 8 isdigit 0
31:		mov word [bp + 8], isalnum$9
32:		mov [bp + 10], bp
33:		add bp, 8
34:		jmp isdigit
36:	

isalnum$9:	; PostCall 8
38:	

isalnum$10:	; GetReturnValue £temporary410
43:	

isalnum$11:	; Equal 14 £temporary410 0
44:		cmp bx, 0
45:		je isalnum$14
47:	

isalnum$12:	; Assign £temporary414 1
48:		mov bx, 1
50:	

isalnum$13:	; Goto 15
51:		jmp isalnum$15
53:	

isalnum$14:	; Assign £temporary414 0
54:		mov bx, 0
56:	

isalnum$15:	; SetReturnValue £temporary414
58:	

isalnum$16:	; Return £temporary414
59:		mov ax, [bp]
60:		mov di, [bp + 4]
61:		mov bp, [bp + 2]
62:		jmp ax
64:	

isalnum$17:	; FunctionEnd isalnum
1:	

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

isxdigit$1:	; Parameter 8 c 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

isxdigit$2:	; Call 8 isdigit 0
8:		mov word [bp + 8], isxdigit$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp isdigit
13:	

isxdigit$3:	; PostCall 8
15:	

isxdigit$4:	; GetReturnValue £temporary417
20:	

isxdigit$5:	; NotEqual 10 £temporary417 0
21:		cmp bx, 0
22:		jne isxdigit$10
24:	

isxdigit$6:	; SignedLessThan 8 c 97
25:		cmp word [bp + 6], 97
26:		jl isxdigit$8
28:	

isxdigit$7:	; SignedLessThanEqual 10 c 102
29:		cmp word [bp + 6], 102
30:		jle isxdigit$10
32:	

isxdigit$8:	; SignedLessThan 12 c 65
33:		cmp word [bp + 6], 65
34:		jl isxdigit$12
36:	

isxdigit$9:	; SignedGreaterThan 12 c 70
37:		cmp word [bp + 6], 70
38:		jg isxdigit$12
40:	

isxdigit$10:	; Assign £temporary427 1
41:		mov bx, 1
43:	

isxdigit$11:	; Goto 13
44:		jmp isxdigit$13
46:	

isxdigit$12:	; Assign £temporary427 0
47:		mov bx, 0
49:	

isxdigit$13:	; SetReturnValue £temporary427
51:	

isxdigit$14:	; Return £temporary427
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

isxdigit$15:	; FunctionEnd isxdigit
1:	

isgraph:	; SignedLessThan 4 c 32
2:		cmp word [bp + 6], 32
3:		jl isgraph$4
5:	

isgraph$1:	; SignedGreaterThan 4 c 126
6:		cmp word [bp + 6], 126
7:		jg isgraph$4
9:	

isgraph$2:	; Assign £temporary432 1
10:		mov bx, 1
12:	

isgraph$3:	; Goto 5
13:		jmp isgraph$5
15:	

isgraph$4:	; Assign £temporary432 0
16:		mov bx, 0
18:	

isgraph$5:	; SetReturnValue £temporary432
20:	

isgraph$6:	; Return £temporary432
21:		mov ax, [bp]
22:		mov di, [bp + 4]
23:		mov bp, [bp + 2]
24:		jmp ax
26:	

isgraph$7:	; FunctionEnd isgraph
1:	

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

isprint$1:	; Parameter 8 c 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

isprint$2:	; Call 8 isgraph 0
8:		mov word [bp + 8], isprint$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp isgraph
13:	

isprint$3:	; PostCall 8
15:	

isprint$4:	; GetReturnValue £temporary433
20:	

isprint$5:	; Equal 9 £temporary433 0
21:		cmp bx, 0
22:		je isprint$9
24:	

isprint$6:	; Equal 9 c 32
25:		cmp word [bp + 6], 32
26:		je isprint$9
28:	

isprint$7:	; Assign £temporary437 1
29:		mov bx, 1
31:	

isprint$8:	; Goto 10
32:		jmp isprint$10
34:	

isprint$9:	; Assign £temporary437 0
35:		mov bx, 0
37:	

isprint$10:	; SetReturnValue £temporary437
39:	

isprint$11:	; Return £temporary437
40:		mov ax, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp ax
45:	

isprint$12:	; FunctionEnd isprint
1:	

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

ispunct$1:	; Parameter 8 c 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

ispunct$2:	; Call 8 isgraph 0
8:		mov word [bp + 8], ispunct$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp isgraph
13:	

ispunct$3:	; PostCall 8
15:	

ispunct$4:	; GetReturnValue £temporary439
20:	

ispunct$5:	; Equal 14 £temporary439 0
21:		cmp bx, 0
22:		je ispunct$14
24:	

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
26:	

ispunct$7:	; Parameter 8 c 6
27:		mov ax, [bp + 6]
28:		mov [bp + 14], ax
30:	

ispunct$8:	; Call 8 isalnum 0
31:		mov word [bp + 8], ispunct$9
32:		mov [bp + 10], bp
33:		add bp, 8
34:		jmp isalnum
36:	

ispunct$9:	; PostCall 8
38:	

ispunct$10:	; GetReturnValue £temporary440
43:	

ispunct$11:	; NotEqual 14 £temporary440 0
44:		cmp bx, 0
45:		jne ispunct$14
47:	

ispunct$12:	; Assign £temporary445 1
48:		mov bx, 1
50:	

ispunct$13:	; Goto 15
51:		jmp ispunct$15
53:	

ispunct$14:	; Assign £temporary445 0
54:		mov bx, 0
56:	

ispunct$15:	; SetReturnValue £temporary445
58:	

ispunct$16:	; Return £temporary445
59:		mov ax, [bp]
60:		mov di, [bp + 4]
61:		mov bp, [bp + 2]
62:		jmp ax
64:	

ispunct$17:	; FunctionEnd ispunct
1:	

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

iscntrl$1:	; Parameter 8 c 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

iscntrl$2:	; Call 8 isprint 0
8:		mov word [bp + 8], iscntrl$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp isprint
13:	

iscntrl$3:	; PostCall 8
15:	

iscntrl$4:	; GetReturnValue £temporary448
20:	

iscntrl$5:	; NotEqual 8 £temporary448 0
21:		cmp bx, 0
22:		jne iscntrl$8
24:	

iscntrl$6:	; Assign £temporary451 1
25:		mov bx, 1
27:	

iscntrl$7:	; Goto 9
28:		jmp iscntrl$9
30:	

iscntrl$8:	; Assign £temporary451 0
31:		mov bx, 0
33:	

iscntrl$9:	; SetReturnValue £temporary451
35:	

iscntrl$10:	; Return £temporary451
36:		mov ax, [bp]
37:		mov di, [bp + 4]
38:		mov bp, [bp + 2]
39:		jmp ax
41:	

iscntrl$11:	; FunctionEnd iscntrl
1:	

isspace:	; Equal 6 c 32
2:		cmp word [bp + 6], 32
3:		je isspace$6
5:	

isspace$1:	; Equal 6 c 12
6:		cmp word [bp + 6], 12
7:		je isspace$6
9:	

isspace$2:	; Equal 6 c 10
10:		cmp word [bp + 6], 10
11:		je isspace$6
13:	

isspace$3:	; Equal 6 c 13
14:		cmp word [bp + 6], 13
15:		je isspace$6
17:	

isspace$4:	; Equal 6 c 9
18:		cmp word [bp + 6], 9
19:		je isspace$6
21:	

isspace$5:	; NotEqual 8 c 11
22:		cmp word [bp + 6], 11
23:		jne isspace$8
25:	

isspace$6:	; Assign £temporary464 1
26:		mov bx, 1
28:	

isspace$7:	; Goto 9
29:		jmp isspace$9
31:	

isspace$8:	; Assign £temporary464 0
32:		mov bx, 0
34:	

isspace$9:	; SetReturnValue £temporary464
36:	

isspace$10:	; Return £temporary464
37:		mov ax, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp ax
42:	

isspace$11:	; FunctionEnd isspace
1:	

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

tolower$1:	; Parameter 8 c 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

tolower$2:	; Call 8 isupper 0
8:		mov word [bp + 8], tolower$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp isupper
13:	

tolower$3:	; PostCall 8
15:	

tolower$4:	; GetReturnValue £temporary465
20:	

tolower$5:	; Equal 31 £temporary465 0
21:		cmp bx, 0
22:		je tolower$31
24:	

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
26:	

tolower$7:	; Call 8 localeconv 0
27:		mov word [bp + 8], tolower$8
28:		mov [bp + 10], bp
29:		add bp, 8
30:		jmp localeconv
32:	

tolower$8:	; PostCall 8
34:	

tolower$9:	; GetReturnValue £temporary466
39:	

tolower$10:	; Assign localeConvPtr £temporary466
40:		mov [bp + 8], bx
42:	

tolower$11:	; Equal 28 localeConvPtr 0
43:		cmp word [bp + 8], 0
44:		je tolower$28
46:	

tolower$12:	; Deref £temporary468 -> localeConvPtr localeConvPtr 12
47:		mov si, [bp + 8]
49:	

tolower$13:	; Assign lowerCase £temporary468 -> localeConvPtr
50:		mov ax, [si + 12]
51:		mov [bp + 10], ax
53:	

tolower$14:	; Deref £temporary469 -> localeConvPtr localeConvPtr 14
54:		mov si, [bp + 8]
56:	

tolower$15:	; Assign upperCase £temporary469 -> localeConvPtr
57:		mov ax, [si + 14]
58:		mov [bp + 12], ax
60:	

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
62:	

tolower$17:	; Parameter 14 upperCase 6
63:		mov ax, [bp + 12]
64:		mov [bp + 20], ax
66:	

tolower$18:	; Parameter 14 c 8
67:		mov ax, [bp + 6]
68:		mov [bp + 22], ax
70:	

tolower$19:	; Call 14 strchr 0
71:		mov word [bp + 14], tolower$20
72:		mov [bp + 16], bp
73:		add bp, 14
74:		jmp strchr
76:	

tolower$20:	; PostCall 14
78:	

tolower$21:	; GetReturnValue £temporary470
83:	

tolower$22:	; BinarySubtract index £temporary470 upperCase
84:		sub bx, [bp + 12]
85:		mov [bp + 14], bx
87:	

tolower$23:	; BinaryAdd £temporary473 lowerCase index
88:		mov si, [bp + 10]
89:		add si, [bp + 14]
91:	

tolower$24:	; Deref £temporary472 -> £temporary473 £temporary473 0
93:	

tolower$25:	; IntegralToIntegral £temporary474 £temporary472 -> £temporary473
94:		mov bl, [si]
96:		and bx, 255
98:		cmp bl, 0
99:		jge tolower$26
100:		neg bl
102:		neg bx
104:	

tolower$26:	; SetReturnValue £temporary474
106:	

tolower$27:	; Return £temporary474
107:		mov ax, [bp]
108:		mov di, [bp + 4]
109:		mov bp, [bp + 2]
110:		jmp ax
112:	

tolower$28:	; BinaryAdd £temporary475 c 32
113:		mov bx, [bp + 6]
114:		add bx, 32
116:	

tolower$29:	; SetReturnValue £temporary475
118:	

tolower$30:	; Return £temporary475
119:		mov ax, [bp]
120:		mov di, [bp + 4]
121:		mov bp, [bp + 2]
122:		jmp ax
124:	

tolower$31:	; SetReturnValue c
125:		mov bx, [bp + 6]
127:	

tolower$32:	; Return c
128:		mov ax, [bp]
129:		mov di, [bp + 4]
130:		mov bp, [bp + 2]
131:		jmp ax
133:	

tolower$33:	; FunctionEnd tolower
1:	

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

toupper$1:	; Parameter 8 c 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

toupper$2:	; Call 8 islower 0
8:		mov word [bp + 8], toupper$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp islower
13:	

toupper$3:	; PostCall 8
15:	

toupper$4:	; GetReturnValue £temporary480
20:	

toupper$5:	; Equal 31 £temporary480 0
21:		cmp bx, 0
22:		je toupper$31
24:	

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
26:	

toupper$7:	; Call 8 localeconv 0
27:		mov word [bp + 8], toupper$8
28:		mov [bp + 10], bp
29:		add bp, 8
30:		jmp localeconv
32:	

toupper$8:	; PostCall 8
34:	

toupper$9:	; GetReturnValue £temporary481
39:	

toupper$10:	; Assign localeConvPtr £temporary481
40:		mov [bp + 8], bx
42:	

toupper$11:	; Equal 28 localeConvPtr 0
43:		cmp word [bp + 8], 0
44:		je toupper$28
46:	

toupper$12:	; Deref £temporary483 -> localeConvPtr localeConvPtr 12
47:		mov si, [bp + 8]
49:	

toupper$13:	; Assign lowerCase £temporary483 -> localeConvPtr
50:		mov ax, [si + 12]
51:		mov [bp + 10], ax
53:	

toupper$14:	; Deref £temporary484 -> localeConvPtr localeConvPtr 14
54:		mov si, [bp + 8]
56:	

toupper$15:	; Assign upperCase £temporary484 -> localeConvPtr
57:		mov ax, [si + 14]
58:		mov [bp + 12], ax
60:	

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
62:	

toupper$17:	; Parameter 14 lowerCase 6
63:		mov ax, [bp + 10]
64:		mov [bp + 20], ax
66:	

toupper$18:	; Parameter 14 c 8
67:		mov ax, [bp + 6]
68:		mov [bp + 22], ax
70:	

toupper$19:	; Call 14 strchr 0
71:		mov word [bp + 14], toupper$20
72:		mov [bp + 16], bp
73:		add bp, 14
74:		jmp strchr
76:	

toupper$20:	; PostCall 14
78:	

toupper$21:	; GetReturnValue £temporary485
83:	

toupper$22:	; BinarySubtract index £temporary485 lowerCase
84:		sub bx, [bp + 10]
85:		mov [bp + 14], bx
87:	

toupper$23:	; BinaryAdd £temporary488 upperCase index
88:		mov si, [bp + 12]
89:		add si, [bp + 14]
91:	

toupper$24:	; Deref £temporary487 -> £temporary488 £temporary488 0
93:	

toupper$25:	; IntegralToIntegral £temporary489 £temporary487 -> £temporary488
94:		mov bl, [si]
96:		and bx, 255
98:		cmp bl, 0
99:		jge toupper$26
100:		neg bl
102:		neg bx
104:	

toupper$26:	; SetReturnValue £temporary489
106:	

toupper$27:	; Return £temporary489
107:		mov ax, [bp]
108:		mov di, [bp + 4]
109:		mov bp, [bp + 2]
110:		jmp ax
112:	

toupper$28:	; BinarySubtract £temporary490 c 32
113:		mov bx, [bp + 6]
114:		sub bx, 32
116:	

toupper$29:	; SetReturnValue £temporary490
118:	

toupper$30:	; Return £temporary490
119:		mov ax, [bp]
120:		mov di, [bp + 4]
121:		mov bp, [bp + 2]
122:		jmp ax
124:	

toupper$31:	; SetReturnValue c
125:		mov bx, [bp + 6]
127:	

toupper$32:	; Return c
128:		mov ax, [bp]
129:		mov di, [bp + 4]
130:		mov bp, [bp + 2]
131:		jmp ax
133:	

toupper$33:	; FunctionEnd toupper
