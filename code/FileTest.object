1:	

file_test:	; call header integral zero 0 stack zero 0
3:	

file_test$1:	; parameter inFilePtrName, offset 6
4:		mov ax, [bp + 6]
5:		mov [bp + 16], ax
7:	

file_test$2:	; parameter string_r#, offset 8
8:		mov word [bp + 18], string_r#
10:	

file_test$3:	; call function noellipse-noellipse fopen
11:		mov word [bp + 10], file_test$4
12:		mov [bp + 12], bp
13:		add bp, 10
14:		jmp fopen
16:	

file_test$4:	; post call
18:	

file_test$5:	; £temporary4369 = return_value
23:	

file_test$6:	; inFilePtrPtr = £temporary4369
24:		mov [bp + 10], bx
26:	

file_test$7:	; if inFilePtrPtr != 0 goto 19
27:		cmp word [bp + 10], 0
28:		jne file_test$19
30:	

file_test$8:	; call header integral zero 0 stack zero 0
32:	

file_test$9:	; parameter stderr, offset 6
33:		mov ax, [stderr]
34:		mov [bp + 18], ax
36:	

file_test$10:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
37:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
39:	

file_test$11:	; parameter string_inFilePtrPtr20213D20NULL#, offset 10
40:		mov word [bp + 22], string_inFilePtrPtr20213D20NULL#
42:	

file_test$12:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
43:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
45:	

file_test$13:	; parameter 10, offset 14
46:		mov word [bp + 26], 10
48:	

file_test$14:	; call function noellipse-ellipse fprintf, extra 0
49:		mov word [bp + 12], file_test$15
50:		mov [bp + 14], bp
51:		add bp, 12
52:		mov di, bp
53:		add di, 6
54:		jmp fprintf
56:	

file_test$15:	; post call
58:	

file_test$16:	; call header integral zero 0 stack zero 0
60:	

file_test$17:	; call function noellipse-noellipse abort
61:		mov word [bp + 12], file_test$18
62:		mov [bp + 14], bp
63:		add bp, 12
64:		jmp abort
66:	

file_test$18:	; post call
68:	

file_test$19:	; call header integral zero 0 stack zero 0
70:	

file_test$20:	; parameter outFilePtrName, offset 6
71:		mov ax, [bp + 8]
72:		mov [bp + 18], ax
74:	

file_test$21:	; parameter string_w#, offset 8
75:		mov word [bp + 20], string_w#
77:	

file_test$22:	; call function noellipse-noellipse fopen
78:		mov word [bp + 12], file_test$23
79:		mov [bp + 14], bp
80:		add bp, 12
81:		jmp fopen
83:	

file_test$23:	; post call
85:	

file_test$24:	; £temporary4374 = return_value
90:	

file_test$25:	; outFilePtrPtr = £temporary4374
91:		mov [bp + 12], bx
93:	

file_test$26:	; if outFilePtrPtr != 0 goto 38
94:		cmp word [bp + 12], 0
95:		jne file_test$38
97:	

file_test$27:	; call header integral zero 0 stack zero 0
99:	

file_test$28:	; parameter stderr, offset 6
100:		mov ax, [stderr]
101:		mov [bp + 20], ax
103:	

file_test$29:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
104:		mov word [bp + 22], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
106:	

file_test$30:	; parameter string_outFilePtrPtr20213D20NULL#, offset 10
107:		mov word [bp + 24], string_outFilePtrPtr20213D20NULL#
109:	

file_test$31:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
110:		mov word [bp + 26], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
112:	

file_test$32:	; parameter 12, offset 14
113:		mov word [bp + 28], 12
115:	

file_test$33:	; call function noellipse-ellipse fprintf, extra 0
116:		mov word [bp + 14], file_test$34
117:		mov [bp + 16], bp
118:		add bp, 14
119:		mov di, bp
120:		add di, 6
121:		jmp fprintf
123:	

file_test$34:	; post call
125:	

file_test$35:	; call header integral zero 0 stack zero 0
127:	

file_test$36:	; call function noellipse-noellipse abort
128:		mov word [bp + 14], file_test$37
129:		mov [bp + 16], bp
130:		add bp, 14
131:		jmp abort
133:	

file_test$37:	; post call
135:	

file_test$38:	; size = 0
136:		mov word [bp + 14], 0
138:	

file_test$39:	; call header integral zero 0 stack zero 0
140:	

file_test$40:	; parameter inFilePtrPtr, offset 6
141:		mov ax, [bp + 10]
142:		mov [bp + 24], ax
144:	

file_test$41:	; parameter string_25i#, offset 8
145:		mov word [bp + 26], string_25i#
147:	

file_test$42:	; £temporary4379 = &size
148:		mov si, bp
149:		add si, 14
151:	

file_test$43:	; parameter £temporary4379, offset 10
152:		mov [bp + 28], si
154:	

file_test$44:	; call function noellipse-ellipse fscanf, extra 0
155:		mov word [bp + 18], file_test$45
156:		mov [bp + 20], bp
157:		add bp, 18
158:		mov di, bp
159:		add di, 2
160:		jmp fscanf
162:	

file_test$45:	; post call
164:	

file_test$46:	; index = 0
165:		mov word [bp + 16], 0
167:	

file_test$47:	; if index >= size goto 73
168:		mov ax, [bp + 16]
169:		cmp ax, [bp + 14]
170:		jge file_test$73
172:	

file_test$48:	; push 0
173:		fldz
175:	

file_test$49:	; pop float inValue
176:		fstp qword [bp + 18]
178:	

file_test$50:	; call header integral zero 0 stack zero 0
180:	

file_test$51:	; parameter inFilePtrPtr, offset 6
181:		mov ax, [bp + 10]
182:		mov [bp + 32], ax
184:	

file_test$52:	; parameter string_25lf#, offset 8
185:		mov word [bp + 34], string_25lf#
187:	

file_test$53:	; £temporary4383 = &inValue
188:		mov si, bp
189:		add si, 18
191:	

file_test$54:	; parameter £temporary4383, offset 10
192:		mov [bp + 36], si
194:	

file_test$55:	; call function noellipse-ellipse fscanf, extra 0
195:		mov word [bp + 26], file_test$56
196:		mov [bp + 28], bp
197:		add bp, 26
198:		mov di, bp
199:		add di, 2
200:		jmp fscanf
202:	

file_test$56:	; post call
204:	

file_test$57:	; call header integral zero 0 stack zero 0
206:	

file_test$58:	; push float inValue
207:		fld qword [bp + 18]
209:	

file_test$59:	; parameter £temporary4385, offset 6
210:		fstp qword [bp + 32]
212:	

file_test$60:	; call function noellipse-noellipse sqrt
213:		mov word [bp + 26], file_test$61
214:		mov [bp + 28], bp
215:		add bp, 26
216:		jmp sqrt
218:	

file_test$61:	; post call
220:	

file_test$62:	; £temporary4386 = return_value
222:	

file_test$63:	; pop float outValue
223:		fstp qword [bp + 26]
225:	

file_test$64:	; call header integral zero 0 stack zero 0
227:	

file_test$65:	; parameter outFilePtrPtr, offset 6
228:		mov ax, [bp + 12]
229:		mov [bp + 40], ax
231:	

file_test$66:	; parameter string_25f0A#, offset 8
232:		mov word [bp + 42], string_25f0A#
234:	

file_test$67:	; push float outValue
235:		fld qword [bp + 26]
237:	

file_test$68:	; parameter outValue, offset 10
238:		fstp qword [bp + 44]
240:	

file_test$69:	; call function noellipse-ellipse fprintf, extra 0
241:		mov word [bp + 34], file_test$70
242:		mov [bp + 36], bp
243:		add bp, 34
244:		mov di, bp
245:		add di, 8
246:		jmp fprintf
248:	

file_test$70:	; post call
250:	

file_test$71:	; ++index
251:		inc word [bp + 16]
253:	

file_test$72:	; goto 47
254:		jmp file_test$47
256:	

file_test$73:	; call header integral zero 0 stack zero 0
258:	

file_test$74:	; parameter inFilePtrPtr, offset 6
259:		mov ax, [bp + 10]
260:		mov [bp + 24], ax
262:	

file_test$75:	; call function noellipse-noellipse fclose
263:		mov word [bp + 18], file_test$76
264:		mov [bp + 20], bp
265:		add bp, 18
266:		jmp fclose
268:	

file_test$76:	; post call
270:	

file_test$77:	; call header integral zero 0 stack zero 0
272:	

file_test$78:	; parameter outFilePtrPtr, offset 6
273:		mov ax, [bp + 12]
274:		mov [bp + 24], ax
276:	

file_test$79:	; call function noellipse-noellipse fclose
277:		mov word [bp + 18], file_test$80
278:		mov [bp + 20], bp
279:		add bp, 18
280:		jmp fclose
282:	

file_test$80:	; post call
284:	

file_test$81:	; sourceFilePtr = string_X#
285:		mov word [bp + 10], string_X#
287:	

file_test$82:	; targetFilePtr = string_Y#
288:		mov word [bp + 12], string_Y#
290:	

file_test$83:	; call header integral zero 0 stack zero 0
292:	

file_test$84:	; parameter sourceFilePtr, offset 6
293:		mov ax, [bp + 10]
294:		mov [bp + 20], ax
296:	

file_test$85:	; parameter targetFilePtr, offset 8
297:		mov ax, [bp + 12]
298:		mov [bp + 22], ax
300:	

file_test$86:	; call function noellipse-noellipse rename
301:		mov word [bp + 14], file_test$87
302:		mov [bp + 16], bp
303:		add bp, 14
304:		jmp rename
306:	

file_test$87:	; post call
308:	

file_test$88:	; £temporary4390 = return_value
313:	

file_test$89:	; if £temporary4390 != 0 goto 97
314:		cmp bx, 0
315:		jne file_test$97
317:	

file_test$90:	; call header integral zero 0 stack zero 0
319:	

file_test$91:	; parameter string_2225s2220has20been20renamed20to202225s222E0A#, offset 6
320:		mov word [bp + 20], string_2225s2220has20been20renamed20to202225s222E0A#
322:	

file_test$92:	; parameter sourceFilePtr, offset 8
323:		mov ax, [bp + 10]
324:		mov [bp + 22], ax
326:	

file_test$93:	; parameter targetFilePtr, offset 10
327:		mov ax, [bp + 12]
328:		mov [bp + 24], ax
330:	

file_test$94:	; call function noellipse-ellipse printf, extra 0
331:		mov word [bp + 14], file_test$95
332:		mov [bp + 16], bp
333:		add bp, 14
334:		mov di, bp
335:		add di, 4
336:		jmp printf
338:	

file_test$95:	; post call
340:	

file_test$96:	; goto 108
341:		jmp file_test$108
343:	

file_test$97:	; call header integral zero 0 stack zero 0
345:	

file_test$98:	; parameter string_Error2025i3A2025s2E0A#, offset 6
346:		mov word [bp + 20], string_Error2025i3A2025s2E0A#
348:	

file_test$99:	; parameter errno, offset 8
349:		mov ax, [errno]
350:		mov [bp + 22], ax
352:	

file_test$100:	; call header integral zero 0 stack zero 0
354:	

file_test$101:	; parameter errno, offset 16
355:		mov ax, [errno]
356:		mov [bp + 30], ax
358:	

file_test$102:	; call function noellipse-noellipse strerror
359:		mov word [bp + 24], file_test$103
360:		mov [bp + 26], bp
361:		add bp, 24
362:		jmp strerror
364:	

file_test$103:	; post call
366:	

file_test$104:	; £temporary4393 = return_value
371:	

file_test$105:	; parameter £temporary4393, offset 10
372:		mov [bp + 24], bx
374:	

file_test$106:	; call function noellipse-ellipse printf, extra 0
375:		mov word [bp + 14], file_test$107
376:		mov [bp + 16], bp
377:		add bp, 14
378:		mov di, bp
379:		add di, 4
380:		jmp printf
382:	

file_test$107:	; post call
384:	

file_test$108:	; targetFilePtr = string_Z#
385:		mov word [bp + 10], string_Z#
387:	

file_test$109:	; call header integral zero 0 stack zero 0
389:	

file_test$110:	; parameter targetFilePtr, offset 6
390:		mov ax, [bp + 10]
391:		mov [bp + 18], ax
393:	

file_test$111:	; call function noellipse-noellipse remove
394:		mov word [bp + 12], file_test$112
395:		mov [bp + 14], bp
396:		add bp, 12
397:		jmp remove
399:	

file_test$112:	; post call
401:	

file_test$113:	; £temporary4395 = return_value
406:	

file_test$114:	; if £temporary4395 != 0 goto 121
407:		cmp bx, 0
408:		jne file_test$121
410:	

file_test$115:	; call header integral zero 0 stack zero 0
412:	

file_test$116:	; parameter string_2225s2220has20been20removed2E0A#, offset 6
413:		mov word [bp + 18], string_2225s2220has20been20removed2E0A#
415:	

file_test$117:	; parameter targetFilePtr, offset 8
416:		mov ax, [bp + 10]
417:		mov [bp + 20], ax
419:	

file_test$118:	; call function noellipse-ellipse printf, extra 0
420:		mov word [bp + 12], file_test$119
421:		mov [bp + 14], bp
422:		add bp, 12
423:		mov di, bp
424:		add di, 2
425:		jmp printf
427:	

file_test$119:	; post call
429:	

file_test$120:	; goto 132
430:		jmp file_test$132
432:	

file_test$121:	; call header integral zero 0 stack zero 0
434:	

file_test$122:	; parameter string_Error2025i3A2025s2E0A#, offset 6
435:		mov word [bp + 18], string_Error2025i3A2025s2E0A#
437:	

file_test$123:	; parameter errno, offset 8
438:		mov ax, [errno]
439:		mov [bp + 20], ax
441:	

file_test$124:	; call header integral zero 0 stack zero 0
443:	

file_test$125:	; parameter errno, offset 16
444:		mov ax, [errno]
445:		mov [bp + 28], ax
447:	

file_test$126:	; call function noellipse-noellipse strerror
448:		mov word [bp + 22], file_test$127
449:		mov [bp + 24], bp
450:		add bp, 22
451:		jmp strerror
453:	

file_test$127:	; post call
455:	

file_test$128:	; £temporary4398 = return_value
460:	

file_test$129:	; parameter £temporary4398, offset 10
461:		mov [bp + 22], bx
463:	

file_test$130:	; call function noellipse-ellipse printf, extra 0
464:		mov word [bp + 12], file_test$131
465:		mov [bp + 14], bp
466:		add bp, 12
467:		mov di, bp
468:		add di, 4
469:		jmp printf
471:	

file_test$131:	; post call
473:	

file_test$132:	; call header integral zero 0 stack zero 0
475:	

file_test$133:	; parameter string_PBook2Etxt#, offset 6
476:		mov word [bp + 16], string_PBook2Etxt#
478:	

file_test$134:	; parameter string_r#, offset 8
479:		mov word [bp + 18], string_r#
481:	

file_test$135:	; call function noellipse-noellipse fopen
482:		mov word [bp + 10], file_test$136
483:		mov [bp + 12], bp
484:		add bp, 10
485:		jmp fopen
487:	

file_test$136:	; post call
489:	

file_test$137:	; £temporary4400 = return_value
494:	

file_test$138:	; inFilePtr = £temporary4400
495:		mov [bp + 10], bx
497:	

file_test$139:	; if inFilePtr != 0 goto 151
498:		cmp word [bp + 10], 0
499:		jne file_test$151
501:	

file_test$140:	; call header integral zero 0 stack zero 0
503:	

file_test$141:	; parameter stderr, offset 6
504:		mov ax, [stderr]
505:		mov [bp + 18], ax
507:	

file_test$142:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
508:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
510:	

file_test$143:	; parameter string_inFilePtr20213D20NULL#, offset 10
511:		mov word [bp + 22], string_inFilePtr20213D20NULL#
513:	

file_test$144:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
514:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
516:	

file_test$145:	; parameter 50, offset 14
517:		mov word [bp + 26], 50
519:	

file_test$146:	; call function noellipse-ellipse fprintf, extra 0
520:		mov word [bp + 12], file_test$147
521:		mov [bp + 14], bp
522:		add bp, 12
523:		mov di, bp
524:		add di, 6
525:		jmp fprintf
527:	

file_test$147:	; post call
529:	

file_test$148:	; call header integral zero 0 stack zero 0
531:	

file_test$149:	; call function noellipse-noellipse abort
532:		mov word [bp + 12], file_test$150
533:		mov [bp + 14], bp
534:		add bp, 12
535:		jmp abort
537:	

file_test$150:	; post call
539:	

file_test$151:	; call header integral zero 0 stack zero 0
541:	

file_test$152:	; parameter string_0A252D24s20252D24s0A#, offset 6
542:		mov word [bp + 18], string_0A252D24s20252D24s0A#
544:	

file_test$153:	; parameter string_Name#, offset 8
545:		mov word [bp + 20], string_Name#
547:	

file_test$154:	; parameter string_Phone#, offset 10
548:		mov word [bp + 22], string_Phone#
550:	

file_test$155:	; call function noellipse-ellipse printf, extra 0
551:		mov word [bp + 12], file_test$156
552:		mov [bp + 14], bp
553:		add bp, 12
554:		mov di, bp
555:		add di, 4
556:		jmp printf
558:	

file_test$156:	; post call
560:	

file_test$157:	; call header integral zero 0 stack zero 0
562:	

file_test$158:	; parameter string_252D24s20252D24s0A#, offset 6
563:		mov word [bp + 18], string_252D24s20252D24s0A#
565:	

file_test$159:	; parameter string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#, offset 8
566:		mov word [bp + 20], string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#
568:	

file_test$160:	; parameter string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#, offset 10
569:		mov word [bp + 22], string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#
571:	

file_test$161:	; call function noellipse-ellipse printf, extra 0
572:		mov word [bp + 12], file_test$162
573:		mov [bp + 14], bp
574:		add bp, 12
575:		mov di, bp
576:		add di, 4
577:		jmp printf
579:	

file_test$162:	; post call
581:	

file_test$163:	; call header integral zero 0 stack zero 0
583:	

file_test$164:	; parameter inFilePtr, offset 6
584:		mov ax, [bp + 10]
585:		mov [bp + 22], ax
587:	

file_test$165:	; parameter string_25i#, offset 8
588:		mov word [bp + 24], string_25i#
590:	

file_test$166:	; £temporary4407 = &size
591:		mov si, bp
592:		add si, 14
594:	

file_test$167:	; parameter £temporary4407, offset 10
595:		mov [bp + 26], si
597:	

file_test$168:	; call function noellipse-ellipse fscanf, extra 0
598:		mov word [bp + 16], file_test$169
599:		mov [bp + 18], bp
600:		add bp, 16
601:		mov di, bp
602:		add di, 2
603:		jmp fscanf
605:	

file_test$169:	; post call
607:	

file_test$170:	; count = 0
608:		mov word [bp + 12], 0
610:	

file_test$171:	; if count >= size goto 187
611:		mov ax, [bp + 12]
612:		cmp ax, [bp + 14]
613:		jge file_test$187
615:	

file_test$172:	; call header integral zero 0 stack zero 0
617:	

file_test$173:	; parameter inFilePtr, offset 6
618:		mov ax, [bp + 10]
619:		mov [bp + 62], ax
621:	

file_test$174:	; parameter string_25s25s#, offset 8
622:		mov word [bp + 64], string_25s25s#
624:	

file_test$175:	; parameter name, offset 10
625:		mov [bp + 66], bp
626:		add word [bp + 66], 16
628:	

file_test$176:	; parameter phone, offset 12
629:		mov [bp + 68], bp
630:		add word [bp + 68], 36
632:	

file_test$177:	; call function noellipse-ellipse fscanf, extra 0
633:		mov word [bp + 56], file_test$178
634:		mov [bp + 58], bp
635:		add bp, 56
636:		mov di, bp
637:		add di, 4
638:		jmp fscanf
640:	

file_test$178:	; post call
642:	

file_test$179:	; call header integral zero 0 stack zero 0
644:	

file_test$180:	; parameter string_252D24s20252D24s0A#, offset 6
645:		mov word [bp + 62], string_252D24s20252D24s0A#
647:	

file_test$181:	; parameter name, offset 8
648:		mov [bp + 64], bp
649:		add word [bp + 64], 16
651:	

file_test$182:	; parameter phone, offset 10
652:		mov [bp + 66], bp
653:		add word [bp + 66], 36
655:	

file_test$183:	; call function noellipse-ellipse printf, extra 0
656:		mov word [bp + 56], file_test$184
657:		mov [bp + 58], bp
658:		add bp, 56
659:		mov di, bp
660:		add di, 4
661:		jmp printf
663:	

file_test$184:	; post call
665:	

file_test$185:	; ++count
666:		inc word [bp + 12]
668:	

file_test$186:	; goto 171
669:		jmp file_test$171
671:	

file_test$187:	; call header integral zero 0 stack zero 0
673:	

file_test$188:	; parameter string_0A#, offset 6
674:		mov word [bp + 22], string_0A#
676:	

file_test$189:	; call function noellipse-ellipse printf, extra 0
677:		mov word [bp + 16], file_test$190
678:		mov [bp + 18], bp
679:		add bp, 16
680:		mov di, bp
681:		jmp printf
683:	

file_test$190:	; post call
685:	

file_test$191:	; call header integral zero 0 stack zero 0
687:	

file_test$192:	; parameter inFilePtr, offset 6
688:		mov ax, [bp + 10]
689:		mov [bp + 22], ax
691:	

file_test$193:	; call function noellipse-noellipse fclose
692:		mov word [bp + 16], file_test$194
693:		mov [bp + 18], bp
694:		add bp, 16
695:		jmp fclose
697:	

file_test$194:	; post call
699:	

file_test$195:	; sourceFilePtr = string_Flow12Etxt#
700:		mov word [bp + 10], string_Flow12Etxt#
702:	

file_test$196:	; targetFilePtr = string_Flow22Etxt#
703:		mov word [bp + 12], string_Flow22Etxt#
705:	

file_test$197:	; call header integral zero 0 stack zero 0
707:	

file_test$198:	; parameter sourceFilePtr, offset 6
708:		mov ax, [bp + 10]
709:		mov [bp + 20], ax
711:	

file_test$199:	; parameter string_r#, offset 8
712:		mov word [bp + 22], string_r#
714:	

file_test$200:	; call function noellipse-noellipse fopen
715:		mov word [bp + 14], file_test$201
716:		mov [bp + 16], bp
717:		add bp, 14
718:		jmp fopen
720:	

file_test$201:	; post call
722:	

file_test$202:	; £temporary4415 = return_value
727:	

file_test$203:	; inFilePtr = £temporary4415
728:		mov [bp + 14], bx
730:	

file_test$204:	; if inFilePtr != 0 goto 216
731:		cmp word [bp + 14], 0
732:		jne file_test$216
734:	

file_test$205:	; call header integral zero 0 stack zero 0
736:	

file_test$206:	; parameter stderr, offset 6
737:		mov ax, [stderr]
738:		mov [bp + 22], ax
740:	

file_test$207:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
741:		mov word [bp + 24], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
743:	

file_test$208:	; parameter string_inFilePtr20213D20NULL#, offset 10
744:		mov word [bp + 26], string_inFilePtr20213D20NULL#
746:	

file_test$209:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
747:		mov word [bp + 28], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
749:	

file_test$210:	; parameter 76, offset 14
750:		mov word [bp + 30], 76
752:	

file_test$211:	; call function noellipse-ellipse fprintf, extra 0
753:		mov word [bp + 16], file_test$212
754:		mov [bp + 18], bp
755:		add bp, 16
756:		mov di, bp
757:		add di, 6
758:		jmp fprintf
760:	

file_test$212:	; post call
762:	

file_test$213:	; call header integral zero 0 stack zero 0
764:	

file_test$214:	; call function noellipse-noellipse abort
765:		mov word [bp + 16], file_test$215
766:		mov [bp + 18], bp
767:		add bp, 16
768:		jmp abort
770:	

file_test$215:	; post call
772:	

file_test$216:	; call header integral zero 0 stack zero 0
774:	

file_test$217:	; parameter targetFilePtr, offset 6
775:		mov ax, [bp + 12]
776:		mov [bp + 22], ax
778:	

file_test$218:	; parameter string_w#, offset 8
779:		mov word [bp + 24], string_w#
781:	

file_test$219:	; call function noellipse-noellipse fopen
782:		mov word [bp + 16], file_test$220
783:		mov [bp + 18], bp
784:		add bp, 16
785:		jmp fopen
787:	

file_test$220:	; post call
789:	

file_test$221:	; £temporary4420 = return_value
794:	

file_test$222:	; outFilePtr = £temporary4420
795:		mov [bp + 16], bx
797:	

file_test$223:	; if outFilePtr != 0 goto 235
798:		cmp word [bp + 16], 0
799:		jne file_test$235
801:	

file_test$224:	; call header integral zero 0 stack zero 0
803:	

file_test$225:	; parameter stderr, offset 6
804:		mov ax, [stderr]
805:		mov [bp + 24], ax
807:	

file_test$226:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
808:		mov word [bp + 26], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
810:	

file_test$227:	; parameter string_outFilePtr20213D20NULL#, offset 10
811:		mov word [bp + 28], string_outFilePtr20213D20NULL#
813:	

file_test$228:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
814:		mov word [bp + 30], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
816:	

file_test$229:	; parameter 79, offset 14
817:		mov word [bp + 32], 79
819:	

file_test$230:	; call function noellipse-ellipse fprintf, extra 0
820:		mov word [bp + 18], file_test$231
821:		mov [bp + 20], bp
822:		add bp, 18
823:		mov di, bp
824:		add di, 6
825:		jmp fprintf
827:	

file_test$231:	; post call
829:	

file_test$232:	; call header integral zero 0 stack zero 0
831:	

file_test$233:	; call function noellipse-noellipse abort
832:		mov word [bp + 18], file_test$234
833:		mov [bp + 20], bp
834:		add bp, 18
835:		jmp abort
837:	

file_test$234:	; post call
839:	

file_test$235:	; call header integral zero 0 stack zero 0
841:	

file_test$236:	; parameter inFilePtr, offset 6
842:		mov ax, [bp + 14]
843:		mov [bp + 24], ax
845:	

file_test$237:	; call function noellipse-noellipse fgetc
846:		mov word [bp + 18], file_test$238
847:		mov [bp + 20], bp
848:		add bp, 18
849:		jmp fgetc
851:	

file_test$238:	; post call
853:	

file_test$239:	; £temporary4425 = return_value
858:	

file_test$240:	; £temporary4426 = int_to_int £temporary4425 (Signed_Int -> Signed_Char)
861:		cmp bx, 0
862:		jge file_test$241
863:		neg bx
865:		neg bl
867:	

file_test$241:	; c = £temporary4426
868:		mov [bp + 18], bl
870:	

file_test$242:	; £temporary4427 = int_to_int c (Signed_Char -> Signed_Int)
871:		mov al, [bp + 18]
873:		and ax, 255
875:		cmp al, 0
876:		jge file_test$243
877:		neg al
879:		neg ax
881:	

file_test$243:	; if £temporary4427 == -1 goto 257
882:		cmp ax, -1
883:		je file_test$257
885:	

file_test$244:	; call header integral zero 0 stack zero 0
887:	

file_test$245:	; £temporary4429 = int_to_int c (Signed_Char -> Signed_Int)
888:		mov al, [bp + 18]
890:		and ax, 255
892:		cmp al, 0
893:		jge file_test$246
894:		neg al
896:		neg ax
898:	

file_test$246:	; parameter £temporary4429, offset 6
899:		mov [bp + 25], ax
901:	

file_test$247:	; parameter outFilePtr, offset 8
902:		mov ax, [bp + 16]
903:		mov [bp + 27], ax
905:	

file_test$248:	; call function noellipse-noellipse putc
906:		mov word [bp + 19], file_test$249
907:		mov [bp + 21], bp
908:		add bp, 19
909:		jmp putc
911:	

file_test$249:	; post call
913:	

file_test$250:	; if c != 10 goto 235
914:		cmp byte [bp + 18], 10
915:		jne file_test$235
917:	

file_test$251:	; call header integral zero 0 stack zero 0
919:	

file_test$252:	; parameter 10, offset 6
920:		mov word [bp + 25], 10
922:	

file_test$253:	; parameter outFilePtr, offset 8
923:		mov ax, [bp + 16]
924:		mov [bp + 27], ax
926:	

file_test$254:	; call function noellipse-noellipse putc
927:		mov word [bp + 19], file_test$255
928:		mov [bp + 21], bp
929:		add bp, 19
930:		jmp putc
932:	

file_test$255:	; post call
934:	

file_test$256:	; goto 235
935:		jmp file_test$235
937:	

file_test$257:	; call header integral zero 0 stack zero 0
939:	

file_test$258:	; parameter inFilePtr, offset 6
940:		mov ax, [bp + 14]
941:		mov [bp + 24], ax
943:	

file_test$259:	; call function noellipse-noellipse fclose
944:		mov word [bp + 18], file_test$260
945:		mov [bp + 20], bp
946:		add bp, 18
947:		jmp fclose
949:	

file_test$260:	; post call
951:	

file_test$261:	; call header integral zero 0 stack zero 0
953:	

file_test$262:	; parameter outFilePtr, offset 6
954:		mov ax, [bp + 16]
955:		mov [bp + 24], ax
957:	

file_test$263:	; call function noellipse-noellipse fclose
958:		mov word [bp + 18], file_test$264
959:		mov [bp + 20], bp
960:		add bp, 18
961:		jmp fclose
963:	

file_test$264:	; post call
965:	

file_test$265:	; call header integral zero 0 stack zero 0
967:	

file_test$266:	; parameter string_Test2Ebin#, offset 6
968:		mov word [bp + 16], string_Test2Ebin#
970:	

file_test$267:	; parameter string_w#, offset 8
971:		mov word [bp + 18], string_w#
973:	

file_test$268:	; call function noellipse-noellipse fopen
974:		mov word [bp + 10], file_test$269
975:		mov [bp + 12], bp
976:		add bp, 10
977:		jmp fopen
979:	

file_test$269:	; post call
981:	

file_test$270:	; £temporary4436 = return_value
986:	

file_test$271:	; outFilePtr = £temporary4436
987:		mov [bp + 10], bx
989:	

file_test$272:	; if outFilePtr != 0 goto 284
990:		cmp word [bp + 10], 0
991:		jne file_test$284
993:	

file_test$273:	; call header integral zero 0 stack zero 0
995:	

file_test$274:	; parameter stderr, offset 6
996:		mov ax, [stderr]
997:		mov [bp + 18], ax
999:	

file_test$275:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1000:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1002:	

file_test$276:	; parameter string_outFilePtr20213D20NULL#, offset 10
1003:		mov word [bp + 22], string_outFilePtr20213D20NULL#
1005:	

file_test$277:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1006:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1008:	

file_test$278:	; parameter 100, offset 14
1009:		mov word [bp + 26], 100
1011:	

file_test$279:	; call function noellipse-ellipse fprintf, extra 0
1012:		mov word [bp + 12], file_test$280
1013:		mov [bp + 14], bp
1014:		add bp, 12
1015:		mov di, bp
1016:		add di, 6
1017:		jmp fprintf
1019:	

file_test$280:	; post call
1021:	

file_test$281:	; call header integral zero 0 stack zero 0
1023:	

file_test$282:	; call function noellipse-noellipse abort
1024:		mov word [bp + 12], file_test$283
1025:		mov [bp + 14], bp
1026:		add bp, 12
1027:		jmp abort
1029:	

file_test$283:	; post call
1031:	

file_test$284:	; size = 10
1032:		mov word [bp + 12], 10
1034:	

file_test$285:	; call header integral zero 0 stack zero 0
1036:	

file_test$286:	; £temporary4441 = &size
1037:		mov si, bp
1038:		add si, 12
1040:	

file_test$287:	; parameter £temporary4441, offset 6
1041:		mov [bp + 20], si
1043:	

file_test$288:	; parameter 2, offset 8
1044:		mov word [bp + 22], 2
1046:	

file_test$289:	; parameter 1, offset 10
1047:		mov word [bp + 24], 1
1049:	

file_test$290:	; parameter outFilePtr, offset 12
1050:		mov ax, [bp + 10]
1051:		mov [bp + 26], ax
1053:	

file_test$291:	; call function noellipse-noellipse fwrite
1054:		mov word [bp + 14], file_test$292
1055:		mov [bp + 16], bp
1056:		add bp, 14
1057:		jmp fwrite
1059:	

file_test$292:	; post call
1061:	

file_test$293:	; index = 0
1062:		mov word [bp + 14], 0
1064:	

file_test$294:	; if index >= size goto 308
1065:		mov ax, [bp + 14]
1066:		cmp ax, [bp + 12]
1067:		jge file_test$308
1069:	

file_test$295:	; £temporary4445 = index * index
1070:		mov ax, [bp + 14]
1072:		xor dx, dx
1073:		imul word [bp + 14]
1079:	

file_test$296:	; £temporary4446 = int_to_float £temporary4445 (Signed_Int -> Double)
1080:		mov [$IntegralStorage#], ax
1081:		fild word [$IntegralStorage#]
1083:	

file_test$297:	; pop float value
1084:		fstp qword [bp + 16]
1086:	

file_test$298:	; call header integral zero 0 stack zero 0
1088:	

file_test$299:	; £temporary4447 = &value
1089:		mov si, bp
1090:		add si, 16
1092:	

file_test$300:	; parameter £temporary4447, offset 6
1093:		mov [bp + 30], si
1095:	

file_test$301:	; parameter 8, offset 8
1096:		mov word [bp + 32], 8
1098:	

file_test$302:	; parameter 1, offset 10
1099:		mov word [bp + 34], 1
1101:	

file_test$303:	; parameter outFilePtr, offset 12
1102:		mov ax, [bp + 10]
1103:		mov [bp + 36], ax
1105:	

file_test$304:	; call function noellipse-noellipse fwrite
1106:		mov word [bp + 24], file_test$305
1107:		mov [bp + 26], bp
1108:		add bp, 24
1109:		jmp fwrite
1111:	

file_test$305:	; post call
1113:	

file_test$306:	; ++index
1114:		inc word [bp + 14]
1116:	

file_test$307:	; goto 294
1117:		jmp file_test$294
1119:	

file_test$308:	; call header integral zero 0 stack zero 0
1121:	

file_test$309:	; parameter outFilePtr, offset 6
1122:		mov ax, [bp + 10]
1123:		mov [bp + 22], ax
1125:	

file_test$310:	; call function noellipse-noellipse fclose
1126:		mov word [bp + 16], file_test$311
1127:		mov [bp + 18], bp
1128:		add bp, 16
1129:		jmp fclose
1131:	

file_test$311:	; post call
1133:	

file_test$312:	; call header integral zero 0 stack zero 0
1135:	

file_test$313:	; parameter string_Test2Ebin#, offset 6
1136:		mov word [bp + 16], string_Test2Ebin#
1138:	

file_test$314:	; parameter string_r#, offset 8
1139:		mov word [bp + 18], string_r#
1141:	

file_test$315:	; call function noellipse-noellipse fopen
1142:		mov word [bp + 10], file_test$316
1143:		mov [bp + 12], bp
1144:		add bp, 10
1145:		jmp fopen
1147:	

file_test$316:	; post call
1149:	

file_test$317:	; £temporary4450 = return_value
1154:	

file_test$318:	; inFilePtr = £temporary4450
1155:		mov [bp + 10], bx
1157:	

file_test$319:	; if inFilePtr != 0 goto 331
1158:		cmp word [bp + 10], 0
1159:		jne file_test$331
1161:	

file_test$320:	; call header integral zero 0 stack zero 0
1163:	

file_test$321:	; parameter stderr, offset 6
1164:		mov ax, [stderr]
1165:		mov [bp + 18], ax
1167:	

file_test$322:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1168:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1170:	

file_test$323:	; parameter string_inFilePtr20213D20NULL#, offset 10
1171:		mov word [bp + 22], string_inFilePtr20213D20NULL#
1173:	

file_test$324:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1174:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1176:	

file_test$325:	; parameter 115, offset 14
1177:		mov word [bp + 26], 115
1179:	

file_test$326:	; call function noellipse-ellipse fprintf, extra 0
1180:		mov word [bp + 12], file_test$327
1181:		mov [bp + 14], bp
1182:		add bp, 12
1183:		mov di, bp
1184:		add di, 6
1185:		jmp fprintf
1187:	

file_test$327:	; post call
1189:	

file_test$328:	; call header integral zero 0 stack zero 0
1191:	

file_test$329:	; call function noellipse-noellipse abort
1192:		mov word [bp + 12], file_test$330
1193:		mov [bp + 14], bp
1194:		add bp, 12
1195:		jmp abort
1197:	

file_test$330:	; post call
1199:	

file_test$331:	; call header integral zero 0 stack zero 0
1201:	

file_test$332:	; £temporary4455 = &size
1202:		mov si, bp
1203:		add si, 12
1205:	

file_test$333:	; parameter £temporary4455, offset 6
1206:		mov [bp + 20], si
1208:	

file_test$334:	; parameter 2, offset 8
1209:		mov word [bp + 22], 2
1211:	

file_test$335:	; parameter 1, offset 10
1212:		mov word [bp + 24], 1
1214:	

file_test$336:	; parameter inFilePtr, offset 12
1215:		mov ax, [bp + 10]
1216:		mov [bp + 26], ax
1218:	

file_test$337:	; call function noellipse-noellipse fread
1219:		mov word [bp + 14], file_test$338
1220:		mov [bp + 16], bp
1221:		add bp, 14
1222:		jmp fread
1224:	

file_test$338:	; post call
1226:	

file_test$339:	; call header integral zero 0 stack zero 0
1228:	

file_test$340:	; parameter string_size12025i0A#, offset 6
1229:		mov word [bp + 20], string_size12025i0A#
1231:	

file_test$341:	; parameter size, offset 8
1232:		mov ax, [bp + 12]
1233:		mov [bp + 22], ax
1235:	

file_test$342:	; call function noellipse-ellipse printf, extra 0
1236:		mov word [bp + 14], file_test$343
1237:		mov [bp + 16], bp
1238:		add bp, 14
1239:		mov di, bp
1240:		add di, 2
1241:		jmp printf
1243:	

file_test$343:	; post call
1245:	

file_test$344:	; call header integral zero 0 stack zero 0
1247:	

file_test$345:	; £temporary4458 = &arr
1248:		mov si, bp
1249:		add si, 14
1251:	

file_test$346:	; parameter £temporary4458, offset 6
1252:		mov [bp + 100], si
1254:	

file_test$347:	; parameter 80, offset 8
1255:		mov word [bp + 102], 80
1257:	

file_test$348:	; parameter 1, offset 10
1258:		mov word [bp + 104], 1
1260:	

file_test$349:	; parameter inFilePtr, offset 12
1261:		mov ax, [bp + 10]
1262:		mov [bp + 106], ax
1264:	

file_test$350:	; call function noellipse-noellipse fread
1265:		mov word [bp + 94], file_test$351
1266:		mov [bp + 96], bp
1267:		add bp, 94
1268:		jmp fread
1270:	

file_test$351:	; post call
1272:	

file_test$352:	; call header integral zero 0 stack zero 0
1274:	

file_test$353:	; parameter inFilePtr, offset 6
1275:		mov ax, [bp + 10]
1276:		mov [bp + 100], ax
1278:	

file_test$354:	; call function noellipse-noellipse fclose
1279:		mov word [bp + 94], file_test$355
1280:		mov [bp + 96], bp
1281:		add bp, 94
1282:		jmp fclose
1284:	

file_test$355:	; post call
1286:	

file_test$356:	; index = 0
1287:		mov word [bp + 94], 0
1289:	

file_test$357:	; if index >= 10 goto 370
1290:		cmp word [bp + 94], 10
1291:		jge file_test$370
1293:	

file_test$358:	; call header integral zero 0 stack zero 0
1295:	

file_test$359:	; parameter string_index12025i3A20value2025f0A#, offset 6
1296:		mov word [bp + 102], string_index12025i3A20value2025f0A#
1298:	

file_test$360:	; parameter index, offset 8
1299:		mov ax, [bp + 94]
1300:		mov [bp + 104], ax
1302:	

file_test$361:	; £temporary4464 = index * 8
1303:		mov ax, [bp + 94]
1305:		xor dx, dx
1306:		mul word [int2$8#]
1312:	

file_test$362:	; £temporary4465 = arr + £temporary4464
1313:		mov si, bp
1314:		add si, 14
1315:		add si, ax
1317:	

file_test$363:	; £temporary4463 -> £temporary4465 = *£temporary4465
1319:	

file_test$364:	; push float £temporary4463 -> £temporary4465
1320:		fld qword [si]
1322:	

file_test$365:	; parameter £temporary4463 -> £temporary4465, offset 10
1323:		fstp qword [bp + 106]
1325:	

file_test$366:	; call function noellipse-ellipse printf, extra 0
1326:		mov word [bp + 96], file_test$367
1327:		mov [bp + 98], bp
1328:		add bp, 96
1329:		mov di, bp
1330:		add di, 10
1331:		jmp printf
1333:	

file_test$367:	; post call
1335:	

file_test$368:	; ++index
1336:		inc word [bp + 94]
1338:	

file_test$369:	; goto 357
1339:		jmp file_test$357
1341:	

file_test$370:	; call header integral zero 0 stack zero 0
1343:	

file_test$371:	; parameter string_0A#, offset 6
1344:		mov word [bp + 102], string_0A#
1346:	

file_test$372:	; call function noellipse-ellipse printf, extra 0
1347:		mov word [bp + 96], file_test$373
1348:		mov [bp + 98], bp
1349:		add bp, 96
1350:		mov di, bp
1351:		jmp printf
1353:	

file_test$373:	; post call
1355:	

file_test$374:	; call header integral zero 0 stack zero 0
1357:	

file_test$375:	; parameter string_Test2Ebin#, offset 6
1358:		mov word [bp + 16], string_Test2Ebin#
1360:	

file_test$376:	; parameter string_r#, offset 8
1361:		mov word [bp + 18], string_r#
1363:	

file_test$377:	; call function noellipse-noellipse fopen
1364:		mov word [bp + 10], file_test$378
1365:		mov [bp + 12], bp
1366:		add bp, 10
1367:		jmp fopen
1369:	

file_test$378:	; post call
1371:	

file_test$379:	; £temporary4468 = return_value
1376:	

file_test$380:	; inFilePtr = £temporary4468
1377:		mov [bp + 10], bx
1379:	

file_test$381:	; if inFilePtr != 0 goto 393
1380:		cmp word [bp + 10], 0
1381:		jne file_test$393
1383:	

file_test$382:	; call header integral zero 0 stack zero 0
1385:	

file_test$383:	; parameter stderr, offset 6
1386:		mov ax, [stderr]
1387:		mov [bp + 18], ax
1389:	

file_test$384:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1390:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1392:	

file_test$385:	; parameter string_inFilePtr20213D20NULL#, offset 10
1393:		mov word [bp + 22], string_inFilePtr20213D20NULL#
1395:	

file_test$386:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1396:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1398:	

file_test$387:	; parameter 133, offset 14
1399:		mov word [bp + 26], 133
1401:	

file_test$388:	; call function noellipse-ellipse fprintf, extra 0
1402:		mov word [bp + 12], file_test$389
1403:		mov [bp + 14], bp
1404:		add bp, 12
1405:		mov di, bp
1406:		add di, 6
1407:		jmp fprintf
1409:	

file_test$389:	; post call
1411:	

file_test$390:	; call header integral zero 0 stack zero 0
1413:	

file_test$391:	; call function noellipse-noellipse abort
1414:		mov word [bp + 12], file_test$392
1415:		mov [bp + 14], bp
1416:		add bp, 12
1417:		jmp abort
1419:	

file_test$392:	; post call
1421:	

file_test$393:	; call header integral zero 0 stack zero 0
1423:	

file_test$394:	; £temporary4473 = &size
1424:		mov si, bp
1425:		add si, 12
1427:	

file_test$395:	; parameter £temporary4473, offset 6
1428:		mov [bp + 20], si
1430:	

file_test$396:	; parameter 2, offset 8
1431:		mov word [bp + 22], 2
1433:	

file_test$397:	; parameter 1, offset 10
1434:		mov word [bp + 24], 1
1436:	

file_test$398:	; parameter inFilePtr, offset 12
1437:		mov ax, [bp + 10]
1438:		mov [bp + 26], ax
1440:	

file_test$399:	; call function noellipse-noellipse fread
1441:		mov word [bp + 14], file_test$400
1442:		mov [bp + 16], bp
1443:		add bp, 14
1444:		jmp fread
1446:	

file_test$400:	; post call
1448:	

file_test$401:	; call header integral zero 0 stack zero 0
1450:	

file_test$402:	; parameter string_size22025i0A#, offset 6
1451:		mov word [bp + 20], string_size22025i0A#
1453:	

file_test$403:	; parameter size, offset 8
1454:		mov ax, [bp + 12]
1455:		mov [bp + 22], ax
1457:	

file_test$404:	; call function noellipse-ellipse printf, extra 0
1458:		mov word [bp + 14], file_test$405
1459:		mov [bp + 16], bp
1460:		add bp, 14
1461:		mov di, bp
1462:		add di, 2
1463:		jmp printf
1465:	

file_test$405:	; post call
1467:	

file_test$406:	; index = 0
1468:		mov word [bp + 14], 0
1470:	

file_test$407:	; if index >= size goto 425
1471:		mov ax, [bp + 14]
1472:		cmp ax, [bp + 12]
1473:		jge file_test$425
1475:	

file_test$408:	; call header integral zero 0 stack zero 0
1477:	

file_test$409:	; £temporary4478 = &value
1478:		mov si, bp
1479:		add si, 16
1481:	

file_test$410:	; parameter £temporary4478, offset 6
1482:		mov [bp + 30], si
1484:	

file_test$411:	; parameter 8, offset 8
1485:		mov word [bp + 32], 8
1487:	

file_test$412:	; parameter 1, offset 10
1488:		mov word [bp + 34], 1
1490:	

file_test$413:	; parameter inFilePtr, offset 12
1491:		mov ax, [bp + 10]
1492:		mov [bp + 36], ax
1494:	

file_test$414:	; call function noellipse-noellipse fread
1495:		mov word [bp + 24], file_test$415
1496:		mov [bp + 26], bp
1497:		add bp, 24
1498:		jmp fread
1500:	

file_test$415:	; post call
1502:	

file_test$416:	; call header integral zero 0 stack zero 0
1504:	

file_test$417:	; parameter string_index22025i3A20value2025f0A#, offset 6
1505:		mov word [bp + 30], string_index22025i3A20value2025f0A#
1507:	

file_test$418:	; parameter index, offset 8
1508:		mov ax, [bp + 14]
1509:		mov [bp + 32], ax
1511:	

file_test$419:	; push float value
1512:		fld qword [bp + 16]
1514:	

file_test$420:	; parameter value, offset 10
1515:		fstp qword [bp + 34]
1517:	

file_test$421:	; call function noellipse-ellipse printf, extra 0
1518:		mov word [bp + 24], file_test$422
1519:		mov [bp + 26], bp
1520:		add bp, 24
1521:		mov di, bp
1522:		add di, 10
1523:		jmp printf
1525:	

file_test$422:	; post call
1527:	

file_test$423:	; ++index
1528:		inc word [bp + 14]
1530:	

file_test$424:	; goto 407
1531:		jmp file_test$407
1533:	

file_test$425:	; call header integral zero 0 stack zero 0
1535:	

file_test$426:	; parameter string_0A#, offset 6
1536:		mov word [bp + 22], string_0A#
1538:	

file_test$427:	; call function noellipse-ellipse printf, extra 0
1539:		mov word [bp + 16], file_test$428
1540:		mov [bp + 18], bp
1541:		add bp, 16
1542:		mov di, bp
1543:		jmp printf
1545:	

file_test$428:	; post call
1547:	

file_test$429:	; call header integral zero 0 stack zero 0
1549:	

file_test$430:	; parameter inFilePtr, offset 6
1550:		mov ax, [bp + 10]
1551:		mov [bp + 22], ax
1553:	

file_test$431:	; call function noellipse-noellipse fclose
1554:		mov word [bp + 16], file_test$432
1555:		mov [bp + 18], bp
1556:		add bp, 16
1557:		jmp fclose
1559:	

file_test$432:	; post call
1561:	

file_test$433:	; call header integral zero 0 stack zero 0
1563:	

file_test$434:	; parameter string_Test2Ebin#, offset 6
1564:		mov word [bp + 16], string_Test2Ebin#
1566:	

file_test$435:	; parameter string_r#, offset 8
1567:		mov word [bp + 18], string_r#
1569:	

file_test$436:	; call function noellipse-noellipse fopen
1570:		mov word [bp + 10], file_test$437
1571:		mov [bp + 12], bp
1572:		add bp, 10
1573:		jmp fopen
1575:	

file_test$437:	; post call
1577:	

file_test$438:	; £temporary4483 = return_value
1582:	

file_test$439:	; inFilePtr = £temporary4483
1583:		mov [bp + 10], bx
1585:	

file_test$440:	; if inFilePtr != 0 goto 452
1586:		cmp word [bp + 10], 0
1587:		jne file_test$452
1589:	

file_test$441:	; call header integral zero 0 stack zero 0
1591:	

file_test$442:	; parameter stderr, offset 6
1592:		mov ax, [stderr]
1593:		mov [bp + 18], ax
1595:	

file_test$443:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1596:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1598:	

file_test$444:	; parameter string_inFilePtr20213D20NULL#, offset 10
1599:		mov word [bp + 22], string_inFilePtr20213D20NULL#
1601:	

file_test$445:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1602:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1604:	

file_test$446:	; parameter 151, offset 14
1605:		mov word [bp + 26], 151
1607:	

file_test$447:	; call function noellipse-ellipse fprintf, extra 0
1608:		mov word [bp + 12], file_test$448
1609:		mov [bp + 14], bp
1610:		add bp, 12
1611:		mov di, bp
1612:		add di, 6
1613:		jmp fprintf
1615:	

file_test$448:	; post call
1617:	

file_test$449:	; call header integral zero 0 stack zero 0
1619:	

file_test$450:	; call function noellipse-noellipse abort
1620:		mov word [bp + 12], file_test$451
1621:		mov [bp + 14], bp
1622:		add bp, 12
1623:		jmp abort
1625:	

file_test$451:	; post call
1627:	

file_test$452:	; call header integral zero 0 stack zero 0
1629:	

file_test$453:	; £temporary4488 = &size
1630:		mov si, bp
1631:		add si, 12
1633:	

file_test$454:	; parameter £temporary4488, offset 6
1634:		mov [bp + 20], si
1636:	

file_test$455:	; parameter 2, offset 8
1637:		mov word [bp + 22], 2
1639:	

file_test$456:	; parameter 1, offset 10
1640:		mov word [bp + 24], 1
1642:	

file_test$457:	; parameter inFilePtr, offset 12
1643:		mov ax, [bp + 10]
1644:		mov [bp + 26], ax
1646:	

file_test$458:	; call function noellipse-noellipse fread
1647:		mov word [bp + 14], file_test$459
1648:		mov [bp + 16], bp
1649:		add bp, 14
1650:		jmp fread
1652:	

file_test$459:	; post call
1654:	

file_test$460:	; call header integral zero 0 stack zero 0
1656:	

file_test$461:	; parameter string_size32025i20total2025i0A#, offset 6
1657:		mov word [bp + 20], string_size32025i20total2025i0A#
1659:	

file_test$462:	; parameter size, offset 8
1660:		mov ax, [bp + 12]
1661:		mov [bp + 22], ax
1663:	

file_test$463:	; £temporary4490 = size * 8
1664:		mov ax, [bp + 12]
1666:		xor dx, dx
1667:		imul word [int2$8#]
1673:	

file_test$464:	; parameter £temporary4490, offset 10
1674:		mov [bp + 24], ax
1676:	

file_test$465:	; call function noellipse-ellipse printf, extra 0
1677:		mov word [bp + 14], file_test$466
1678:		mov [bp + 16], bp
1679:		add bp, 14
1680:		mov di, bp
1681:		add di, 4
1682:		jmp printf
1684:	

file_test$466:	; post call
1686:	

file_test$467:	; £temporary4492 = size * 8
1687:		mov ax, [bp + 12]
1689:		xor dx, dx
1690:		imul word [int2$8#]
1696:	

file_test$468:	; total = £temporary4492
1697:		mov [bp + 14], ax
1699:	

file_test$469:	; call header integral zero 0 stack zero 0
1701:	

file_test$470:	; parameter total, offset 6
1702:		mov ax, [bp + 14]
1703:		mov [bp + 22], ax
1705:	

file_test$471:	; call function noellipse-noellipse malloc
1706:		mov word [bp + 16], file_test$472
1707:		mov [bp + 18], bp
1708:		add bp, 16
1709:		jmp malloc
1711:	

file_test$472:	; post call
1713:	

file_test$473:	; £temporary4493 = return_value
1718:	

file_test$474:	; p = £temporary4493
1719:		mov [bp + 16], bx
1721:	

file_test$475:	; if p != 0 goto 487
1722:		cmp word [bp + 16], 0
1723:		jne file_test$487
1725:	

file_test$476:	; call header integral zero 0 stack zero 0
1727:	

file_test$477:	; parameter stderr, offset 6
1728:		mov ax, [stderr]
1729:		mov [bp + 24], ax
1731:	

file_test$478:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1732:		mov word [bp + 26], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1734:	

file_test$479:	; parameter string_p20213D20NULL#, offset 10
1735:		mov word [bp + 28], string_p20213D20NULL#
1737:	

file_test$480:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1738:		mov word [bp + 30], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1740:	

file_test$481:	; parameter 159, offset 14
1741:		mov word [bp + 32], 159
1743:	

file_test$482:	; call function noellipse-ellipse fprintf, extra 0
1744:		mov word [bp + 18], file_test$483
1745:		mov [bp + 20], bp
1746:		add bp, 18
1747:		mov di, bp
1748:		add di, 6
1749:		jmp fprintf
1751:	

file_test$483:	; post call
1753:	

file_test$484:	; call header integral zero 0 stack zero 0
1755:	

file_test$485:	; call function noellipse-noellipse abort
1756:		mov word [bp + 18], file_test$486
1757:		mov [bp + 20], bp
1758:		add bp, 18
1759:		jmp abort
1761:	

file_test$486:	; post call
1763:	

file_test$487:	; £temporary4498 = size * 8
1764:		mov ax, [bp + 12]
1766:		xor dx, dx
1767:		mul word [int2$8#]
1773:	

file_test$488:	; £temporary4499 = p + £temporary4498
1774:		mov bx, [bp + 16]
1775:		add bx, ax
1777:	

file_test$489:	; endPtr = £temporary4499
1778:		mov [bp + 18], bx
1780:	

file_test$490:	; call header integral zero 0 stack zero 0
1782:	

file_test$491:	; parameter string_malloc2025u2025u2025u0A#, offset 6
1783:		mov word [bp + 26], string_malloc2025u2025u2025u0A#
1785:	

file_test$492:	; parameter p, offset 8
1786:		mov ax, [bp + 16]
1787:		mov [bp + 28], ax
1789:	

file_test$493:	; parameter total, offset 10
1790:		mov ax, [bp + 14]
1791:		mov [bp + 30], ax
1793:	

file_test$494:	; parameter endPtr, offset 12
1794:		mov ax, [bp + 18]
1795:		mov [bp + 32], ax
1797:	

file_test$495:	; call function noellipse-ellipse printf, extra 0
1798:		mov word [bp + 20], file_test$496
1799:		mov [bp + 22], bp
1800:		add bp, 20
1801:		mov di, bp
1802:		add di, 6
1803:		jmp printf
1805:	

file_test$496:	; post call
1807:	

file_test$497:	; call header integral zero 0 stack zero 0
1809:	

file_test$498:	; parameter p, offset 6
1810:		mov ax, [bp + 16]
1811:		mov [bp + 26], ax
1813:	

file_test$499:	; parameter total, offset 8
1814:		mov ax, [bp + 14]
1815:		mov [bp + 28], ax
1817:	

file_test$500:	; parameter 1, offset 10
1818:		mov word [bp + 30], 1
1820:	

file_test$501:	; parameter inFilePtr, offset 12
1821:		mov ax, [bp + 10]
1822:		mov [bp + 32], ax
1824:	

file_test$502:	; call function noellipse-noellipse fread
1825:		mov word [bp + 20], file_test$503
1826:		mov [bp + 22], bp
1827:		add bp, 20
1828:		jmp fread
1830:	

file_test$503:	; post call
1832:	

file_test$504:	; index = 0
1833:		mov word [bp + 20], 0
1835:	

file_test$505:	; if index >= size goto 518
1836:		mov ax, [bp + 20]
1837:		cmp ax, [bp + 12]
1838:		jge file_test$518
1840:	

file_test$506:	; call header integral zero 0 stack zero 0
1842:	

file_test$507:	; parameter string_index32025i3A20value2025f0A#, offset 6
1843:		mov word [bp + 28], string_index32025i3A20value2025f0A#
1845:	

file_test$508:	; parameter index, offset 8
1846:		mov ax, [bp + 20]
1847:		mov [bp + 30], ax
1849:	

file_test$509:	; £temporary4505 = index * 8
1850:		mov ax, [bp + 20]
1852:		xor dx, dx
1853:		mul word [int2$8#]
1859:	

file_test$510:	; £temporary4506 = p + £temporary4505
1860:		mov si, [bp + 16]
1861:		add si, ax
1863:	

file_test$511:	; £temporary4504 -> £temporary4506 = *£temporary4506
1865:	

file_test$512:	; push float £temporary4504 -> £temporary4506
1866:		fld qword [si]
1868:	

file_test$513:	; parameter £temporary4504 -> £temporary4506, offset 10
1869:		fstp qword [bp + 32]
1871:	

file_test$514:	; call function noellipse-ellipse printf, extra 0
1872:		mov word [bp + 22], file_test$515
1873:		mov [bp + 24], bp
1874:		add bp, 22
1875:		mov di, bp
1876:		add di, 10
1877:		jmp printf
1879:	

file_test$515:	; post call
1881:	

file_test$516:	; ++index
1882:		inc word [bp + 20]
1884:	

file_test$517:	; goto 505
1885:		jmp file_test$505
1887:	

file_test$518:	; call header integral zero 0 stack zero 0
1889:	

file_test$519:	; parameter string_0A#, offset 6
1890:		mov word [bp + 28], string_0A#
1892:	

file_test$520:	; call function noellipse-ellipse printf, extra 0
1893:		mov word [bp + 22], file_test$521
1894:		mov [bp + 24], bp
1895:		add bp, 22
1896:		mov di, bp
1897:		jmp printf
1899:	

file_test$521:	; post call
1901:	

file_test$522:	; call header integral zero 0 stack zero 0
1903:	

file_test$523:	; parameter p, offset 6
1904:		mov ax, [bp + 16]
1905:		mov [bp + 28], ax
1907:	

file_test$524:	; call function noellipse-noellipse free
1908:		mov word [bp + 22], file_test$525
1909:		mov [bp + 24], bp
1910:		add bp, 22
1911:		jmp free
1913:	

file_test$525:	; post call
1915:	

file_test$526:	; call header integral zero 0 stack zero 0
1917:	

file_test$527:	; parameter inFilePtr, offset 6
1918:		mov ax, [bp + 10]
1919:		mov [bp + 28], ax
1921:	

file_test$528:	; call function noellipse-noellipse fclose
1922:		mov word [bp + 22], file_test$529
1923:		mov [bp + 24], bp
1924:		add bp, 22
1925:		jmp fclose
1927:	

file_test$529:	; post call
1929:	

file_test$530:	; personVector[0]$name[0] = 65
1930:		mov byte [bp + 10], 65
1932:	

file_test$531:	; personVector[0]$name[1] = 100
1933:		mov byte [bp + 11], 100
1935:	

file_test$532:	; personVector[0]$name[2] = 97
1936:		mov byte [bp + 12], 97
1938:	

file_test$533:	; personVector[0]$name[3] = 109
1939:		mov byte [bp + 13], 109
1941:	

file_test$534:	; personVector[0]$name[4] = 32
1942:		mov byte [bp + 14], 32
1944:	

file_test$535:	; personVector[0]$name[5] = 66
1945:		mov byte [bp + 15], 66
1947:	

file_test$536:	; personVector[0]$name[6] = 101
1948:		mov byte [bp + 16], 101
1950:	

file_test$537:	; personVector[0]$name[7] = 114
1951:		mov byte [bp + 17], 114
1953:	

file_test$538:	; personVector[0]$name[8] = 116
1954:		mov byte [bp + 18], 116
1956:	

file_test$539:	; personVector[0]$name[9] = 105
1957:		mov byte [bp + 19], 105
1959:	

file_test$540:	; personVector[0]$name[10] = 108
1960:		mov byte [bp + 20], 108
1962:	

file_test$541:	; personVector[0]$name[11] = 115
1963:		mov byte [bp + 21], 115
1965:	

file_test$542:	; personVector[0]$name[12] = 115
1966:		mov byte [bp + 22], 115
1968:	

file_test$543:	; personVector[0]$name[13] = 111
1969:		mov byte [bp + 23], 111
1971:	

file_test$544:	; personVector[0]$name[14] = 110
1972:		mov byte [bp + 24], 110
1974:	

file_test$545:	; personVector[0]$name[15] = 0
1975:		mov byte [bp + 25], 0
1977:	

file_test$546:	; personVector[0]$phone = 12345
1978:		mov word [bp + 58], 12345
1980:	

file_test$547:	; personVector[1]$name[0] = 66
1981:		mov byte [bp + 60], 66
1983:	

file_test$548:	; personVector[1]$name[1] = 101
1984:		mov byte [bp + 61], 101
1986:	

file_test$549:	; personVector[1]$name[2] = 114
1987:		mov byte [bp + 62], 114
1989:	

file_test$550:	; personVector[1]$name[3] = 116
1990:		mov byte [bp + 63], 116
1992:	

file_test$551:	; personVector[1]$name[4] = 105
1993:		mov byte [bp + 64], 105
1995:	

file_test$552:	; personVector[1]$name[5] = 108
1996:		mov byte [bp + 65], 108
1998:	

file_test$553:	; personVector[1]$name[6] = 32
1999:		mov byte [bp + 66], 32
2001:	

file_test$554:	; personVector[1]$name[7] = 67
2002:		mov byte [bp + 67], 67
2004:	

file_test$555:	; personVector[1]$name[8] = 101
2005:		mov byte [bp + 68], 101
2007:	

file_test$556:	; personVector[1]$name[9] = 97
2008:		mov byte [bp + 69], 97
2010:	

file_test$557:	; personVector[1]$name[10] = 115
2011:		mov byte [bp + 70], 115
2013:	

file_test$558:	; personVector[1]$name[11] = 97
2014:		mov byte [bp + 71], 97
2016:	

file_test$559:	; personVector[1]$name[12] = 114
2017:		mov byte [bp + 72], 114
2019:	

file_test$560:	; personVector[1]$name[13] = 115
2020:		mov byte [bp + 73], 115
2022:	

file_test$561:	; personVector[1]$name[14] = 115
2023:		mov byte [bp + 74], 115
2025:	

file_test$562:	; personVector[1]$name[15] = 111
2026:		mov byte [bp + 75], 111
2028:	

file_test$563:	; personVector[1]$name[16] = 110
2029:		mov byte [bp + 76], 110
2031:	

file_test$564:	; personVector[1]$name[17] = 0
2032:		mov byte [bp + 77], 0
2034:	

file_test$565:	; personVector[1]$phone = 23456
2035:		mov word [bp + 108], 23456
2037:	

file_test$566:	; personVector[2]$name[0] = 67
2038:		mov byte [bp + 110], 67
2040:	

file_test$567:	; personVector[2]$name[1] = 101
2041:		mov byte [bp + 111], 101
2043:	

file_test$568:	; personVector[2]$name[2] = 97
2044:		mov byte [bp + 112], 97
2046:	

file_test$569:	; personVector[2]$name[3] = 115
2047:		mov byte [bp + 113], 115
2049:	

file_test$570:	; personVector[2]$name[4] = 97
2050:		mov byte [bp + 114], 97
2052:	

file_test$571:	; personVector[2]$name[5] = 114
2053:		mov byte [bp + 115], 114
2055:	

file_test$572:	; personVector[2]$name[6] = 32
2056:		mov byte [bp + 116], 32
2058:	

file_test$573:	; personVector[2]$name[7] = 68
2059:		mov byte [bp + 117], 68
2061:	

file_test$574:	; personVector[2]$name[8] = 97
2062:		mov byte [bp + 118], 97
2064:	

file_test$575:	; personVector[2]$name[9] = 118
2065:		mov byte [bp + 119], 118
2067:	

file_test$576:	; personVector[2]$name[10] = 105
2068:		mov byte [bp + 120], 105
2070:	

file_test$577:	; personVector[2]$name[11] = 100
2071:		mov byte [bp + 121], 100
2073:	

file_test$578:	; personVector[2]$name[12] = 115
2074:		mov byte [bp + 122], 115
2076:	

file_test$579:	; personVector[2]$name[13] = 115
2077:		mov byte [bp + 123], 115
2079:	

file_test$580:	; personVector[2]$name[14] = 111
2080:		mov byte [bp + 124], 111
2082:	

file_test$581:	; personVector[2]$name[15] = 110
2083:		mov byte [bp + 125], 110
2085:	

file_test$582:	; personVector[2]$name[16] = 0
2086:		mov byte [bp + 126], 0
2088:	

file_test$583:	; personVector[2]$phone = 24567
2089:		mov word [bp + 158], 24567
2091:	

file_test$584:	; call header integral zero 0 stack zero 0
2093:	

file_test$585:	; parameter string_Block2Ebin#, offset 6
2094:		mov word [bp + 216], string_Block2Ebin#
2096:	

file_test$586:	; parameter string_w#, offset 8
2097:		mov word [bp + 218], string_w#
2099:	

file_test$587:	; call function noellipse-noellipse fopen
2100:		mov word [bp + 210], file_test$588
2101:		mov [bp + 212], bp
2102:		add bp, 210
2103:		jmp fopen
2105:	

file_test$588:	; post call
2107:	

file_test$589:	; £temporary4571 = return_value
2112:	

file_test$590:	; outFilePtr = £temporary4571
2113:		mov [bp + 210], bx
2115:	

file_test$591:	; if outFilePtr != 0 goto 603
2116:		cmp word [bp + 210], 0
2117:		jne file_test$603
2119:	

file_test$592:	; call header integral zero 0 stack zero 0
2121:	

file_test$593:	; parameter stderr, offset 6
2122:		mov ax, [stderr]
2123:		mov [bp + 218], ax
2125:	

file_test$594:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2126:		mov word [bp + 220], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2128:	

file_test$595:	; parameter string_outFilePtr20213D20NULL#, offset 10
2129:		mov word [bp + 222], string_outFilePtr20213D20NULL#
2131:	

file_test$596:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2132:		mov word [bp + 224], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2134:	

file_test$597:	; parameter 185, offset 14
2135:		mov word [bp + 226], 185
2137:	

file_test$598:	; call function noellipse-ellipse fprintf, extra 0
2138:		mov word [bp + 212], file_test$599
2139:		mov [bp + 214], bp
2140:		add bp, 212
2141:		mov di, bp
2142:		add di, 6
2143:		jmp fprintf
2145:	

file_test$599:	; post call
2147:	

file_test$600:	; call header integral zero 0 stack zero 0
2149:	

file_test$601:	; call function noellipse-noellipse abort
2150:		mov word [bp + 212], file_test$602
2151:		mov [bp + 214], bp
2152:		add bp, 212
2153:		jmp abort
2155:	

file_test$602:	; post call
2157:	

file_test$603:	; call header integral zero 0 stack zero 0
2159:	

file_test$604:	; parameter personVector, offset 6
2160:		mov [bp + 218], bp
2161:		add word [bp + 218], 10
2163:	

file_test$605:	; parameter 150, offset 8
2164:		mov word [bp + 220], 150
2166:	

file_test$606:	; parameter 1, offset 10
2167:		mov word [bp + 222], 1
2169:	

file_test$607:	; parameter outFilePtr, offset 12
2170:		mov ax, [bp + 210]
2171:		mov [bp + 224], ax
2173:	

file_test$608:	; call function noellipse-noellipse fwrite
2174:		mov word [bp + 212], file_test$609
2175:		mov [bp + 214], bp
2176:		add bp, 212
2177:		jmp fwrite
2179:	

file_test$609:	; post call
2181:	

file_test$610:	; call header integral zero 0 stack zero 0
2183:	

file_test$611:	; parameter outFilePtr, offset 6
2184:		mov ax, [bp + 210]
2185:		mov [bp + 218], ax
2187:	

file_test$612:	; call function noellipse-noellipse fclose
2188:		mov word [bp + 212], file_test$613
2189:		mov [bp + 214], bp
2190:		add bp, 212
2191:		jmp fclose
2193:	

file_test$613:	; post call
2195:	

file_test$614:	; call header integral zero 0 stack zero 0
2197:	

file_test$615:	; parameter string_Block2Ebin#, offset 6
2198:		mov word [bp + 218], string_Block2Ebin#
2200:	

file_test$616:	; parameter string_r#, offset 8
2201:		mov word [bp + 220], string_r#
2203:	

file_test$617:	; call function noellipse-noellipse fopen
2204:		mov word [bp + 212], file_test$618
2205:		mov [bp + 214], bp
2206:		add bp, 212
2207:		jmp fopen
2209:	

file_test$618:	; post call
2211:	

file_test$619:	; £temporary4578 = return_value
2216:	

file_test$620:	; inFilePtr = £temporary4578
2217:		mov [bp + 212], bx
2219:	

file_test$621:	; if inFilePtr != 0 goto 633
2220:		cmp word [bp + 212], 0
2221:		jne file_test$633
2223:	

file_test$622:	; call header integral zero 0 stack zero 0
2225:	

file_test$623:	; parameter stderr, offset 6
2226:		mov ax, [stderr]
2227:		mov [bp + 220], ax
2229:	

file_test$624:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2230:		mov word [bp + 222], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2232:	

file_test$625:	; parameter string_inFilePtr20213D20NULL#, offset 10
2233:		mov word [bp + 224], string_inFilePtr20213D20NULL#
2235:	

file_test$626:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2236:		mov word [bp + 226], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2238:	

file_test$627:	; parameter 191, offset 14
2239:		mov word [bp + 228], 191
2241:	

file_test$628:	; call function noellipse-ellipse fprintf, extra 0
2242:		mov word [bp + 214], file_test$629
2243:		mov [bp + 216], bp
2244:		add bp, 214
2245:		mov di, bp
2246:		add di, 6
2247:		jmp fprintf
2249:	

file_test$629:	; post call
2251:	

file_test$630:	; call header integral zero 0 stack zero 0
2253:	

file_test$631:	; call function noellipse-noellipse abort
2254:		mov word [bp + 214], file_test$632
2255:		mov [bp + 216], bp
2256:		add bp, 214
2257:		jmp abort
2259:	

file_test$632:	; post call
2261:	

file_test$633:	; call header integral zero 0 stack zero 0
2263:	

file_test$634:	; parameter inFilePtr, offset 6
2264:		mov ax, [bp + 212]
2265:		mov [bp + 220], ax
2267:	

file_test$635:	; call function noellipse-noellipse feof
2268:		mov word [bp + 214], file_test$636
2269:		mov [bp + 216], bp
2270:		add bp, 214
2271:		jmp feof
2273:	

file_test$636:	; post call
2275:	

file_test$637:	; £temporary4583 = return_value
2280:	

file_test$638:	; if £temporary4583 != 0 goto 658
2281:		cmp bx, 0
2282:		jne file_test$658
2284:	

file_test$639:	; call header integral zero 0 stack zero 0
2286:	

file_test$640:	; £temporary4586 = &person
2287:		mov si, bp
2288:		add si, 160
2290:	

file_test$641:	; parameter £temporary4586, offset 6
2291:		mov [bp + 220], si
2293:	

file_test$642:	; parameter 50, offset 8
2294:		mov word [bp + 222], 50
2296:	

file_test$643:	; parameter 1, offset 10
2297:		mov word [bp + 224], 1
2299:	

file_test$644:	; parameter inFilePtr, offset 12
2300:		mov ax, [bp + 212]
2301:		mov [bp + 226], ax
2303:	

file_test$645:	; call function noellipse-noellipse fread
2304:		mov word [bp + 214], file_test$646
2305:		mov [bp + 216], bp
2306:		add bp, 214
2307:		jmp fread
2309:	

file_test$646:	; post call
2311:	

file_test$647:	; call header integral zero 0 stack zero 0
2313:	

file_test$648:	; parameter string_Name20203A2025s0A#, offset 6
2314:		mov word [bp + 220], string_Name20203A2025s0A#
2316:	

file_test$649:	; parameter person$name, offset 8
2317:		mov [bp + 222], bp
2318:		add word [bp + 222], 160
2320:	

file_test$650:	; call function noellipse-ellipse printf, extra 0
2321:		mov word [bp + 214], file_test$651
2322:		mov [bp + 216], bp
2323:		add bp, 214
2324:		mov di, bp
2325:		add di, 2
2326:		jmp printf
2328:	

file_test$651:	; post call
2330:	

file_test$652:	; call header integral zero 0 stack zero 0
2332:	

file_test$653:	; parameter string_Phone203A2025d0A#, offset 6
2333:		mov word [bp + 220], string_Phone203A2025d0A#
2335:	

file_test$654:	; parameter person$phone, offset 8
2336:		mov ax, [bp + 208]
2337:		mov [bp + 222], ax
2339:	

file_test$655:	; call function noellipse-ellipse printf, extra 0
2340:		mov word [bp + 214], file_test$656
2341:		mov [bp + 216], bp
2342:		add bp, 214
2343:		mov di, bp
2344:		add di, 2
2345:		jmp printf
2347:	

file_test$656:	; post call
2349:	

file_test$657:	; goto 633
2350:		jmp file_test$633
2352:	

file_test$658:	; call header integral zero 0 stack zero 0
2354:	

file_test$659:	; parameter inFilePtr, offset 6
2355:		mov ax, [bp + 212]
2356:		mov [bp + 220], ax
2358:	

file_test$660:	; call function noellipse-noellipse fclose
2359:		mov word [bp + 214], file_test$661
2360:		mov [bp + 216], bp
2361:		add bp, 214
2362:		jmp fclose
2364:	

file_test$661:	; post call
2366:	

file_test$662:	; call header integral zero 0 stack zero 0
2368:	

file_test$663:	; parameter string_Test12Etxt#, offset 6
2369:		mov word [bp + 16], string_Test12Etxt#
2371:	

file_test$664:	; parameter string_r#, offset 8
2372:		mov word [bp + 18], string_r#
2374:	

file_test$665:	; call function noellipse-noellipse fopen
2375:		mov word [bp + 10], file_test$666
2376:		mov [bp + 12], bp
2377:		add bp, 10
2378:		jmp fopen
2380:	

file_test$666:	; post call
2382:	

file_test$667:	; £temporary4593 = return_value
2387:	

file_test$668:	; inFilePtr = £temporary4593
2388:		mov [bp + 10], bx
2390:	

file_test$669:	; if inFilePtr != 0 goto 681
2391:		cmp word [bp + 10], 0
2392:		jne file_test$681
2394:	

file_test$670:	; call header integral zero 0 stack zero 0
2396:	

file_test$671:	; parameter stderr, offset 6
2397:		mov ax, [stderr]
2398:		mov [bp + 18], ax
2400:	

file_test$672:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2401:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2403:	

file_test$673:	; parameter string_inFilePtr20213D20NULL#, offset 10
2404:		mov word [bp + 22], string_inFilePtr20213D20NULL#
2406:	

file_test$674:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2407:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2409:	

file_test$675:	; parameter 204, offset 14
2410:		mov word [bp + 26], 204
2412:	

file_test$676:	; call function noellipse-ellipse fprintf, extra 0
2413:		mov word [bp + 12], file_test$677
2414:		mov [bp + 14], bp
2415:		add bp, 12
2416:		mov di, bp
2417:		add di, 6
2418:		jmp fprintf
2420:	

file_test$677:	; post call
2422:	

file_test$678:	; call header integral zero 0 stack zero 0
2424:	

file_test$679:	; call function noellipse-noellipse abort
2425:		mov word [bp + 12], file_test$680
2426:		mov [bp + 14], bp
2427:		add bp, 12
2428:		jmp abort
2430:	

file_test$680:	; post call
2432:	

file_test$681:	; call header integral zero 0 stack zero 0
2434:	

file_test$682:	; parameter inFilePtr, offset 6
2435:		mov ax, [bp + 10]
2436:		mov [bp + 18], ax
2438:	

file_test$683:	; parameter -1, offset 8
2439:		mov word [bp + 20], -1
2441:	

file_test$684:	; parameter 2, offset 10
2442:		mov word [bp + 22], 2
2444:	

file_test$685:	; call function noellipse-noellipse fseek
2445:		mov word [bp + 12], file_test$686
2446:		mov [bp + 14], bp
2447:		add bp, 12
2448:		jmp fseek
2450:	

file_test$686:	; post call
2452:	

file_test$687:	; call header integral zero 0 stack zero 0
2454:	

file_test$688:	; parameter inFilePtr, offset 6
2455:		mov ax, [bp + 10]
2456:		mov [bp + 20], ax
2458:	

file_test$689:	; call function noellipse-noellipse ftell
2459:		mov word [bp + 14], file_test$690
2460:		mov [bp + 16], bp
2461:		add bp, 14
2462:		jmp ftell
2464:	

file_test$690:	; post call
2466:	

file_test$691:	; £temporary4599 = return_value
2471:	

file_test$692:	; £temporary4600 = int_to_int £temporary4599 (Signed_Int -> Unsigned_Int)
2474:	

file_test$693:	; u = £temporary4600
2475:		mov [bp + 12], bx
2477:	

file_test$694:	; if u < 0 goto 715
2478:		cmp word [bp + 12], 0
2479:		jb file_test$715
2481:	

file_test$695:	; call header integral zero 0 stack zero 0
2483:	

file_test$696:	; parameter inFilePtr, offset 6
2484:		mov ax, [bp + 10]
2485:		mov [bp + 20], ax
2487:	

file_test$697:	; call function noellipse-noellipse fgetc
2488:		mov word [bp + 14], file_test$698
2489:		mov [bp + 16], bp
2490:		add bp, 14
2491:		jmp fgetc
2493:	

file_test$698:	; post call
2495:	

file_test$699:	; £temporary4602 = return_value
2500:	

file_test$700:	; £temporary4603 = int_to_int £temporary4602 (Signed_Int -> Signed_Char)
2503:		cmp bx, 0
2504:		jge file_test$701
2505:		neg bx
2507:		neg bl
2509:	

file_test$701:	; c = £temporary4603
2510:		mov [bp + 14], bl
2512:	

file_test$702:	; call header integral zero 0 stack zero 0
2514:	

file_test$703:	; £temporary4604 = int_to_int c (Signed_Char -> Signed_Int)
2515:		mov al, [bp + 14]
2517:		and ax, 255
2519:		cmp al, 0
2520:		jge file_test$704
2521:		neg al
2523:		neg ax
2525:	

file_test$704:	; parameter £temporary4604, offset 6
2526:		mov [bp + 21], ax
2528:	

file_test$705:	; call function noellipse-noellipse putchar
2529:		mov word [bp + 15], file_test$706
2530:		mov [bp + 17], bp
2531:		add bp, 15
2532:		jmp putchar
2534:	

file_test$706:	; post call
2536:	

file_test$707:	; if u == 0 goto 715
2537:		cmp word [bp + 12], 0
2538:		je file_test$715
2540:	

file_test$708:	; call header integral zero 0 stack zero 0
2542:	

file_test$709:	; parameter inFilePtr, offset 6
2543:		mov ax, [bp + 10]
2544:		mov [bp + 21], ax
2546:	

file_test$710:	; parameter -2, offset 8
2547:		mov word [bp + 23], -2
2549:	

file_test$711:	; parameter 1, offset 10
2550:		mov word [bp + 25], 1
2552:	

file_test$712:	; call function noellipse-noellipse fseek
2553:		mov word [bp + 15], file_test$713
2554:		mov [bp + 17], bp
2555:		add bp, 15
2556:		jmp fseek
2558:	

file_test$713:	; post call
2560:	

file_test$714:	; goto 687
2561:		jmp file_test$687
2563:	

file_test$715:	; call header integral zero 0 stack zero 0
2565:	

file_test$716:	; parameter string_0A0A#, offset 6
2566:		mov word [bp + 20], string_0A0A#
2568:	

file_test$717:	; call function noellipse-ellipse printf, extra 0
2569:		mov word [bp + 14], file_test$718
2570:		mov [bp + 16], bp
2571:		add bp, 14
2572:		mov di, bp
2573:		jmp printf
2575:	

file_test$718:	; post call
2577:	

file_test$719:	; call header integral zero 0 stack zero 0
2579:	

file_test$720:	; parameter inFilePtr, offset 6
2580:		mov ax, [bp + 10]
2581:		mov [bp + 20], ax
2583:	

file_test$721:	; call function noellipse-noellipse fclose
2584:		mov word [bp + 14], file_test$722
2585:		mov [bp + 16], bp
2586:		add bp, 14
2587:		jmp fclose
2589:	

file_test$722:	; post call
2591:	

file_test$723:	; call header integral zero 0 stack zero 0
2593:	

file_test$724:	; parameter string_fileexists20X2025s0A#, offset 6
2594:		mov word [bp + 16], string_fileexists20X2025s0A#
2596:	

file_test$725:	; call header integral zero 0 stack zero 0
2598:	

file_test$726:	; parameter string_X#, offset 14
2599:		mov word [bp + 24], string_X#
2601:	

file_test$727:	; call function noellipse-noellipse fileexists
2602:		mov word [bp + 18], file_test$728
2603:		mov [bp + 20], bp
2604:		add bp, 18
2605:		jmp fileexists
2607:	

file_test$728:	; post call
2609:	

file_test$729:	; £temporary4610 = return_value
2614:	

file_test$730:	; if £temporary4610 == 0 goto 733
2615:		cmp bx, 0
2616:		je file_test$733
2618:	

file_test$731:	; £temporary4615 = string_Yes#
2619:		mov ax, string_Yes#
2621:	

file_test$732:	; goto 734
2622:		jmp file_test$734
2624:	

file_test$733:	; £temporary4615 = string_No#
2625:		mov ax, string_No#
2627:	

file_test$734:	; parameter £temporary4615, offset 8
2628:		mov [bp + 18], ax
2630:	

file_test$735:	; call function noellipse-ellipse printf, extra 0
2631:		mov word [bp + 10], file_test$736
2632:		mov [bp + 12], bp
2633:		add bp, 10
2634:		mov di, bp
2635:		add di, 2
2636:		jmp printf
2638:	

file_test$736:	; post call
2640:	

file_test$737:	; call header integral zero 0 stack zero 0
2642:	

file_test$738:	; parameter string_fileexists20Y2025s0A0A#, offset 6
2643:		mov word [bp + 16], string_fileexists20Y2025s0A0A#
2645:	

file_test$739:	; call header integral zero 0 stack zero 0
2647:	

file_test$740:	; parameter string_Y#, offset 14
2648:		mov word [bp + 24], string_Y#
2650:	

file_test$741:	; call function noellipse-noellipse fileexists
2651:		mov word [bp + 18], file_test$742
2652:		mov [bp + 20], bp
2653:		add bp, 18
2654:		jmp fileexists
2656:	

file_test$742:	; post call
2658:	

file_test$743:	; £temporary4617 = return_value
2663:	

file_test$744:	; if £temporary4617 == 0 goto 747
2664:		cmp bx, 0
2665:		je file_test$747
2667:	

file_test$745:	; £temporary4622 = string_Yes#
2668:		mov ax, string_Yes#
2670:	

file_test$746:	; goto 748
2671:		jmp file_test$748
2673:	

file_test$747:	; £temporary4622 = string_No#
2674:		mov ax, string_No#
2676:	

file_test$748:	; parameter £temporary4622, offset 8
2677:		mov [bp + 18], ax
2679:	

file_test$749:	; call function noellipse-ellipse printf, extra 0
2680:		mov word [bp + 10], file_test$750
2681:		mov [bp + 12], bp
2682:		add bp, 10
2683:		mov di, bp
2684:		add di, 2
2685:		jmp printf
2687:	

file_test$750:	; post call
2689:	

file_test$751:	; call header integral zero 0 stack zero 0
2691:	

file_test$752:	; parameter string_PBookX2Etxt#, offset 6
2692:		mov word [bp + 18], string_PBookX2Etxt#
2694:	

file_test$753:	; parameter string_r2B#, offset 8
2695:		mov word [bp + 20], string_r2B#
2697:	

file_test$754:	; call function noellipse-noellipse fopen
2698:		mov word [bp + 12], file_test$755
2699:		mov [bp + 14], bp
2700:		add bp, 12
2701:		jmp fopen
2703:	

file_test$755:	; post call
2705:	

file_test$756:	; £temporary4624 = return_value
2710:	

file_test$757:	; inOutFilePtr = £temporary4624
2711:		mov [bp + 12], bx
2713:	

file_test$758:	; if inOutFilePtr != 0 goto 770
2714:		cmp word [bp + 12], 0
2715:		jne file_test$770
2717:	

file_test$759:	; call header integral zero 0 stack zero 0
2719:	

file_test$760:	; parameter stderr, offset 6
2720:		mov ax, [stderr]
2721:		mov [bp + 20], ax
2723:	

file_test$761:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2724:		mov word [bp + 22], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2726:	

file_test$762:	; parameter string_inOutFilePtr20213D20NULL#, offset 10
2727:		mov word [bp + 24], string_inOutFilePtr20213D20NULL#
2729:	

file_test$763:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2730:		mov word [bp + 26], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2732:	

file_test$764:	; parameter 228, offset 14
2733:		mov word [bp + 28], 228
2735:	

file_test$765:	; call function noellipse-ellipse fprintf, extra 0
2736:		mov word [bp + 14], file_test$766
2737:		mov [bp + 16], bp
2738:		add bp, 14
2739:		mov di, bp
2740:		add di, 6
2741:		jmp fprintf
2743:	

file_test$766:	; post call
2745:	

file_test$767:	; call header integral zero 0 stack zero 0
2747:	

file_test$768:	; call function noellipse-noellipse abort
2748:		mov word [bp + 14], file_test$769
2749:		mov [bp + 16], bp
2750:		add bp, 14
2751:		jmp abort
2753:	

file_test$769:	; post call
2755:	

file_test$770:	; call header integral zero 0 stack zero 0
2757:	

file_test$771:	; call function noellipse-noellipse tmpfile
2758:		mov word [bp + 14], file_test$772
2759:		mov [bp + 16], bp
2760:		add bp, 14
2761:		jmp tmpfile
2763:	

file_test$772:	; post call
2765:	

file_test$773:	; £temporary4629 = return_value
2770:	

file_test$774:	; tempFilePtr = £temporary4629
2771:		mov [bp + 10], bx
2773:	

file_test$775:	; if tempFilePtr != 0 goto 787
2774:		cmp word [bp + 10], 0
2775:		jne file_test$787
2777:	

file_test$776:	; call header integral zero 0 stack zero 0
2779:	

file_test$777:	; parameter stderr, offset 6
2780:		mov ax, [stderr]
2781:		mov [bp + 20], ax
2783:	

file_test$778:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2784:		mov word [bp + 22], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2786:	

file_test$779:	; parameter string_tempFilePtr20213D20NULL#, offset 10
2787:		mov word [bp + 24], string_tempFilePtr20213D20NULL#
2789:	

file_test$780:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2790:		mov word [bp + 26], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2792:	

file_test$781:	; parameter 231, offset 14
2793:		mov word [bp + 28], 231
2795:	

file_test$782:	; call function noellipse-ellipse fprintf, extra 0
2796:		mov word [bp + 14], file_test$783
2797:		mov [bp + 16], bp
2798:		add bp, 14
2799:		mov di, bp
2800:		add di, 6
2801:		jmp fprintf
2803:	

file_test$783:	; post call
2805:	

file_test$784:	; call header integral zero 0 stack zero 0
2807:	

file_test$785:	; call function noellipse-noellipse abort
2808:		mov word [bp + 14], file_test$786
2809:		mov [bp + 16], bp
2810:		add bp, 14
2811:		jmp abort
2813:	

file_test$786:	; post call
2815:	

file_test$787:	; call header integral zero 0 stack zero 0
2817:	

file_test$788:	; parameter inOutFilePtr, offset 6
2818:		mov ax, [bp + 12]
2819:		mov [bp + 20], ax
2821:	

file_test$789:	; call function noellipse-noellipse fgetc
2822:		mov word [bp + 14], file_test$790
2823:		mov [bp + 16], bp
2824:		add bp, 14
2825:		jmp fgetc
2827:	

file_test$790:	; post call
2829:	

file_test$791:	; £temporary4634 = return_value
2834:	

file_test$792:	; £temporary4635 = int_to_int £temporary4634 (Signed_Int -> Signed_Char)
2837:		cmp bx, 0
2838:		jge file_test$793
2839:		neg bx
2841:		neg bl
2843:	

file_test$793:	; c = £temporary4635
2844:		mov [bp + 14], bl
2846:	

file_test$794:	; £temporary4636 = int_to_int c (Signed_Char -> Signed_Int)
2847:		mov al, [bp + 14]
2849:		and ax, 255
2851:		cmp al, 0
2852:		jge file_test$795
2853:		neg al
2855:		neg ax
2857:	

file_test$795:	; if £temporary4636 == -1 goto 808
2858:		cmp ax, -1
2859:		je file_test$808
2861:	

file_test$796:	; call header integral zero 0 stack zero 0
2863:	

file_test$797:	; call header integral zero 0 stack zero 0
2865:	

file_test$798:	; £temporary4638 = int_to_int c (Signed_Char -> Signed_Int)
2866:		mov al, [bp + 14]
2868:		and ax, 255
2870:		cmp al, 0
2871:		jge file_test$799
2872:		neg al
2874:		neg ax
2876:	

file_test$799:	; parameter £temporary4638, offset 6
2877:		mov [bp + 21], ax
2879:	

file_test$800:	; call function noellipse-noellipse toupper
2880:		mov word [bp + 15], file_test$801
2881:		mov [bp + 17], bp
2882:		add bp, 15
2883:		jmp toupper
2885:	

file_test$801:	; post call
2887:	

file_test$802:	; £temporary4639 = return_value
2892:	

file_test$803:	; parameter £temporary4639, offset 6
2893:		mov [bp + 21], bx
2895:	

file_test$804:	; parameter tempFilePtr, offset 8
2896:		mov ax, [bp + 10]
2897:		mov [bp + 23], ax
2899:	

file_test$805:	; call function noellipse-noellipse putc
2900:		mov word [bp + 15], file_test$806
2901:		mov [bp + 17], bp
2902:		add bp, 15
2903:		jmp putc
2905:	

file_test$806:	; post call
2907:	

file_test$807:	; goto 787
2908:		jmp file_test$787
2910:	

file_test$808:	; call header integral zero 0 stack zero 0
2912:	

file_test$809:	; parameter tempFilePtr, offset 6
2913:		mov ax, [bp + 10]
2914:		mov [bp + 20], ax
2916:	

file_test$810:	; call function noellipse-noellipse rewind
2917:		mov word [bp + 14], file_test$811
2918:		mov [bp + 16], bp
2919:		add bp, 14
2920:		jmp rewind
2922:	

file_test$811:	; post call
2924:	

file_test$812:	; call header integral zero 0 stack zero 0
2926:	

file_test$813:	; parameter inOutFilePtr, offset 6
2927:		mov ax, [bp + 12]
2928:		mov [bp + 20], ax
2930:	

file_test$814:	; parameter string_0A2D2D2D2D2D2D2D2D2D2D2D2D0A#, offset 8
2931:		mov word [bp + 22], string_0A2D2D2D2D2D2D2D2D2D2D2D2D0A#
2933:	

file_test$815:	; call function noellipse-ellipse fprintf, extra 0
2934:		mov word [bp + 14], file_test$816
2935:		mov [bp + 16], bp
2936:		add bp, 14
2937:		mov di, bp
2938:		jmp fprintf
2940:	

file_test$816:	; post call
2942:	

file_test$817:	; call header integral zero 0 stack zero 0
2944:	

file_test$818:	; parameter tempFilePtr, offset 6
2945:		mov ax, [bp + 10]
2946:		mov [bp + 20], ax
2948:	

file_test$819:	; call function noellipse-noellipse fgetc
2949:		mov word [bp + 14], file_test$820
2950:		mov [bp + 16], bp
2951:		add bp, 14
2952:		jmp fgetc
2954:	

file_test$820:	; post call
2956:	

file_test$821:	; £temporary4644 = return_value
2961:	

file_test$822:	; £temporary4645 = int_to_int £temporary4644 (Signed_Int -> Signed_Char)
2964:		cmp bx, 0
2965:		jge file_test$823
2966:		neg bx
2968:		neg bl
2970:	

file_test$823:	; c = £temporary4645
2971:		mov [bp + 14], bl
2973:	

file_test$824:	; £temporary4646 = int_to_int c (Signed_Char -> Signed_Int)
2974:		mov al, [bp + 14]
2976:		and ax, 255
2978:		cmp al, 0
2979:		jge file_test$825
2980:		neg al
2982:		neg ax
2984:	

file_test$825:	; if £temporary4646 == -1 goto 833
2985:		cmp ax, -1
2986:		je file_test$833
2988:	

file_test$826:	; call header integral zero 0 stack zero 0
2990:	

file_test$827:	; £temporary4648 = int_to_int c (Signed_Char -> Signed_Int)
2991:		mov al, [bp + 14]
2993:		and ax, 255
2995:		cmp al, 0
2996:		jge file_test$828
2997:		neg al
2999:		neg ax
3001:	

file_test$828:	; parameter £temporary4648, offset 6
3002:		mov [bp + 21], ax
3004:	

file_test$829:	; parameter inOutFilePtr, offset 8
3005:		mov ax, [bp + 12]
3006:		mov [bp + 23], ax
3008:	

file_test$830:	; call function noellipse-noellipse putc
3009:		mov word [bp + 15], file_test$831
3010:		mov [bp + 17], bp
3011:		add bp, 15
3012:		jmp putc
3014:	

file_test$831:	; post call
3016:	

file_test$832:	; goto 817
3017:		jmp file_test$817
3019:	

file_test$833:	; call header integral zero 0 stack zero 0
3021:	

file_test$834:	; parameter inOutFilePtr, offset 6
3022:		mov ax, [bp + 12]
3023:		mov [bp + 20], ax
3025:	

file_test$835:	; call function noellipse-noellipse fclose
3026:		mov word [bp + 14], file_test$836
3027:		mov [bp + 16], bp
3028:		add bp, 14
3029:		jmp fclose
3031:	

file_test$836:	; post call
3033:	

file_test$837:	; call header integral zero 0 stack zero 0
3035:	

file_test$838:	; parameter tempFilePtr, offset 6
3036:		mov ax, [bp + 10]
3037:		mov [bp + 20], ax
3039:	

file_test$839:	; call function noellipse-noellipse fclose
3040:		mov word [bp + 14], file_test$840
3041:		mov [bp + 16], bp
3042:		add bp, 14
3043:		jmp fclose
3045:	

file_test$840:	; post call
3047:	

file_test$841:	; return
3048:		mov ax, [bp]
3049:		mov di, [bp + 4]
3050:		mov bp, [bp + 2]
3051:		jmp ax
3053:	

file_test$842:	; function end file_test
