1:	

math_test_1x:	; call header integral zero 0 stack zero 0
3:	

math_test_1x$1:	; push float -6.2831853071795864769252866
4:		fld qword [float8$minus6.2831853071795864769252866#]
6:	

math_test_1x$2:	; parameter -6.2831853071795864769252866, offset 6
7:		fstp qword [bp + 12]
9:	

math_test_1x$3:	; call function noellipse-noellipse math_test_1
10:		mov word [bp + 6], math_test_1x$4
11:		mov [bp + 8], bp
12:		add bp, 6
13:		jmp math_test_1
15:	

math_test_1x$4:	; post call
17:	

math_test_1x$5:	; call header integral zero 0 stack zero 0
19:	

math_test_1x$6:	; push float -3.1415926535897932384626433
20:		fld qword [float8$minus3.1415926535897932384626433#]
22:	

math_test_1x$7:	; parameter -3.1415926535897932384626433, offset 6
23:		fstp qword [bp + 12]
25:	

math_test_1x$8:	; call function noellipse-noellipse math_test_1
26:		mov word [bp + 6], math_test_1x$9
27:		mov [bp + 8], bp
28:		add bp, 6
29:		jmp math_test_1
31:	

math_test_1x$9:	; post call
33:	

math_test_1x$10:	; call header integral zero 0 stack zero 0
35:	

math_test_1x$11:	; push float -1.57079632679489661923132165
36:		fld qword [float8$minus1.57079632679489661923132165#]
38:	

math_test_1x$12:	; parameter -1.57079632679489661923132165, offset 6
39:		fstp qword [bp + 12]
41:	

math_test_1x$13:	; call function noellipse-noellipse math_test_1
42:		mov word [bp + 6], math_test_1x$14
43:		mov [bp + 8], bp
44:		add bp, 6
45:		jmp math_test_1
47:	

math_test_1x$14:	; post call
49:	

math_test_1x$15:	; call header integral zero 0 stack zero 0
51:	

math_test_1x$16:	; push float -1
52:		fld qword [float8$minus1#]
54:	

math_test_1x$17:	; parameter -1, offset 6
55:		fstp qword [bp + 12]
57:	

math_test_1x$18:	; call function noellipse-noellipse math_test_1
58:		mov word [bp + 6], math_test_1x$19
59:		mov [bp + 8], bp
60:		add bp, 6
61:		jmp math_test_1
63:	

math_test_1x$19:	; post call
65:	

math_test_1x$20:	; call header integral zero 0 stack zero 0
67:	

math_test_1x$21:	; push 0
68:		fldz
70:	

math_test_1x$22:	; parameter 0, offset 6
71:		fstp qword [bp + 12]
73:	

math_test_1x$23:	; call function noellipse-noellipse math_test_1
74:		mov word [bp + 6], math_test_1x$24
75:		mov [bp + 8], bp
76:		add bp, 6
77:		jmp math_test_1
79:	

math_test_1x$24:	; post call
81:	

math_test_1x$25:	; call header integral zero 0 stack zero 0
83:	

math_test_1x$26:	; push 1
84:		fld1
86:	

math_test_1x$27:	; parameter 1, offset 6
87:		fstp qword [bp + 12]
89:	

math_test_1x$28:	; call function noellipse-noellipse math_test_1
90:		mov word [bp + 6], math_test_1x$29
91:		mov [bp + 8], bp
92:		add bp, 6
93:		jmp math_test_1
95:	

math_test_1x$29:	; post call
97:	

math_test_1x$30:	; call header integral zero 0 stack zero 0
99:	

math_test_1x$31:	; push float 1.57079632679489661923132165
100:		fld qword [float8$1.57079632679489661923132165#]
102:	

math_test_1x$32:	; parameter 1.57079632679489661923132165, offset 6
103:		fstp qword [bp + 12]
105:	

math_test_1x$33:	; call function noellipse-noellipse math_test_1
106:		mov word [bp + 6], math_test_1x$34
107:		mov [bp + 8], bp
108:		add bp, 6
109:		jmp math_test_1
111:	

math_test_1x$34:	; post call
113:	

math_test_1x$35:	; call header integral zero 0 stack zero 0
115:	

math_test_1x$36:	; push float 3.1415926535897932384626433
116:		fld qword [float8$3.1415926535897932384626433#]
118:	

math_test_1x$37:	; parameter 3.1415926535897932384626433, offset 6
119:		fstp qword [bp + 12]
121:	

math_test_1x$38:	; call function noellipse-noellipse math_test_1
122:		mov word [bp + 6], math_test_1x$39
123:		mov [bp + 8], bp
124:		add bp, 6
125:		jmp math_test_1
127:	

math_test_1x$39:	; post call
129:	

math_test_1x$40:	; call header integral zero 0 stack zero 0
131:	

math_test_1x$41:	; push float 6.2831853071795864769252866
132:		fld qword [float8$6.2831853071795864769252866#]
134:	

math_test_1x$42:	; parameter 6.2831853071795864769252866, offset 6
135:		fstp qword [bp + 12]
137:	

math_test_1x$43:	; call function noellipse-noellipse math_test_1
138:		mov word [bp + 6], math_test_1x$44
139:		mov [bp + 8], bp
140:		add bp, 6
141:		jmp math_test_1
143:	

math_test_1x$44:	; post call
145:	

math_test_1x$45:	; return
146:		mov t2518, [bp]
147:		mov di, [bp + 4]
148:		mov bp, [bp + 2]
149:		jmp t2518
151:	

math_test_1x$46:	; function end math_test_1x
1:	

acos_test:	; call header integral zero 0 stack zero 0
3:	

acos_test$1:	; parameter string_2020acos2825f29203D2025f2C20errno203D2025i0A#, offset 6
4:		mov word [bp + 20], string_2020acos2825f29203D2025f2C20errno203D2025i0A#
6:	

acos_test$2:	; push float x
7:		fld qword [bp + 6]
9:	

acos_test$3:	; parameter x, offset 8
10:		fstp qword [bp + 22]
12:	

acos_test$4:	; call header integral zero 0 stack zero 0
14:	

acos_test$5:	; push float x
15:		fld qword [bp + 6]
17:	

acos_test$6:	; parameter x, offset 22
18:		fstp qword [bp + 36]
20:	

acos_test$7:	; call function noellipse-noellipse acos
21:		mov word [bp + 30], acos_test$8
22:		mov [bp + 32], bp
23:		add bp, 30
24:		jmp acos
26:	

acos_test$8:	; post call
28:	

acos_test$9:	; £temporary3875 = return_value
30:	

acos_test$10:	; parameter £temporary3875, offset 16
31:		fstp qword [bp + 30]
33:	

acos_test$11:	; parameter errno, offset 24
34:		mov a2519, [errno]
35:		mov [bp + 38], a2519
37:	

acos_test$12:	; call function noellipse-ellipse printf, extra 0
38:		mov word [bp + 14], acos_test$13
39:		mov [bp + 16], bp
40:		add bp, 14
41:		mov di, bp
42:		add di, 18
43:		jmp printf
45:	

acos_test$13:	; post call
47:	

acos_test$14:	; errno = 0
48:		mov word [errno], 0
50:	

acos_test$15:	; return
51:		mov t2520, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t2520
56:	

acos_test$16:	; function end acos_test
1:	

atan_test:	; call header integral zero 0 stack zero 0
3:	

atan_test$1:	; parameter string_2020atan2825f29203D2025f2C20errno203D2025i0A#, offset 6
4:		mov word [bp + 20], string_2020atan2825f29203D2025f2C20errno203D2025i0A#
6:	

atan_test$2:	; push float x
7:		fld qword [bp + 6]
9:	

atan_test$3:	; parameter x, offset 8
10:		fstp qword [bp + 22]
12:	

atan_test$4:	; call header integral zero 0 stack zero 0
14:	

atan_test$5:	; push float x
15:		fld qword [bp + 6]
17:	

atan_test$6:	; parameter x, offset 22
18:		fstp qword [bp + 36]
20:	

atan_test$7:	; call function noellipse-noellipse atan
21:		mov word [bp + 30], atan_test$8
22:		mov [bp + 32], bp
23:		add bp, 30
24:		jmp atan
26:	

atan_test$8:	; post call
28:	

atan_test$9:	; £temporary3882 = return_value
30:	

atan_test$10:	; parameter £temporary3882, offset 16
31:		fstp qword [bp + 30]
33:	

atan_test$11:	; parameter errno, offset 24
34:		mov a2521, [errno]
35:		mov [bp + 38], a2521
37:	

atan_test$12:	; call function noellipse-ellipse printf, extra 0
38:		mov word [bp + 14], atan_test$13
39:		mov [bp + 16], bp
40:		add bp, 14
41:		mov di, bp
42:		add di, 18
43:		jmp printf
45:	

atan_test$13:	; post call
47:	

atan_test$14:	; errno = 0
48:		mov word [errno], 0
50:	

atan_test$15:	; return
51:		mov t2522, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t2522
56:	

atan_test$16:	; function end atan_test
1:	

main_math:	; call header integral zero 0 stack zero 0
3:	

main_math$1:	; push float 1.000010
4:		fld qword [float8$1.000010#]
6:	

main_math$2:	; parameter 1.000010, offset 6
7:		fstp qword [bp + 12]
9:	

main_math$3:	; call function noellipse-noellipse math_test_1
10:		mov word [bp + 6], main_math$4
11:		mov [bp + 8], bp
12:		add bp, 6
13:		jmp math_test_1
15:	

main_math$4:	; post call
17:	

main_math$5:	; call header integral zero 0 stack zero 0
19:	

main_math$6:	; push float 1.0
20:		fld1
22:	

main_math$7:	; parameter 1.0, offset 6
23:		fstp qword [bp + 12]
25:	

main_math$8:	; call function noellipse-noellipse math_test_1
26:		mov word [bp + 6], main_math$9
27:		mov [bp + 8], bp
28:		add bp, 6
29:		jmp math_test_1
31:	

main_math$9:	; post call
33:	

main_math$10:	; call header integral zero 0 stack zero 0
35:	

main_math$11:	; push float 0.999999
36:		fld qword [float8$0.999999#]
38:	

main_math$12:	; parameter 0.999999, offset 6
39:		fstp qword [bp + 12]
41:	

main_math$13:	; call function noellipse-noellipse math_test_1
42:		mov word [bp + 6], main_math$14
43:		mov [bp + 8], bp
44:		add bp, 6
45:		jmp math_test_1
47:	

main_math$14:	; post call
49:	

main_math$15:	; call header integral zero 0 stack zero 0
51:	

main_math$16:	; push float 0.000010
52:		fld qword [float8$0.000010#]
54:	

main_math$17:	; parameter 0.000010, offset 6
55:		fstp qword [bp + 12]
57:	

main_math$18:	; call function noellipse-noellipse math_test_1
58:		mov word [bp + 6], main_math$19
59:		mov [bp + 8], bp
60:		add bp, 6
61:		jmp math_test_1
63:	

main_math$19:	; post call
65:	

main_math$20:	; call header integral zero 0 stack zero 0
67:	

main_math$21:	; push 0
68:		fldz
70:	

main_math$22:	; parameter 0, offset 6
71:		fstp qword [bp + 12]
73:	

main_math$23:	; call function noellipse-noellipse math_test_1
74:		mov word [bp + 6], main_math$24
75:		mov [bp + 8], bp
76:		add bp, 6
77:		jmp math_test_1
79:	

main_math$24:	; post call
81:	

main_math$25:	; call header integral zero 0 stack zero 0
83:	

main_math$26:	; push float -0.000010
84:		fld qword [float8$minus0.000010#]
86:	

main_math$27:	; parameter -0.000010, offset 6
87:		fstp qword [bp + 12]
89:	

main_math$28:	; call function noellipse-noellipse math_test_1
90:		mov word [bp + 6], main_math$29
91:		mov [bp + 8], bp
92:		add bp, 6
93:		jmp math_test_1
95:	

main_math$29:	; post call
97:	

main_math$30:	; call header integral zero 0 stack zero 0
99:	

main_math$31:	; push float -0.999999
100:		fld qword [float8$minus0.999999#]
102:	

main_math$32:	; parameter -0.999999, offset 6
103:		fstp qword [bp + 12]
105:	

main_math$33:	; call function noellipse-noellipse math_test_1
106:		mov word [bp + 6], main_math$34
107:		mov [bp + 8], bp
108:		add bp, 6
109:		jmp math_test_1
111:	

main_math$34:	; post call
113:	

main_math$35:	; call header integral zero 0 stack zero 0
115:	

main_math$36:	; push float -1.0
116:		fld qword [float8$minus1.0#]
118:	

main_math$37:	; parameter -1.0, offset 6
119:		fstp qword [bp + 12]
121:	

main_math$38:	; call function noellipse-noellipse math_test_1
122:		mov word [bp + 6], main_math$39
123:		mov [bp + 8], bp
124:		add bp, 6
125:		jmp math_test_1
127:	

main_math$39:	; post call
129:	

main_math$40:	; call header integral zero 0 stack zero 0
131:	

main_math$41:	; push float -1.000010
132:		fld qword [float8$minus1.000010#]
134:	

main_math$42:	; parameter -1.000010, offset 6
135:		fstp qword [bp + 12]
137:	

main_math$43:	; call function noellipse-noellipse math_test_1
138:		mov word [bp + 6], main_math$44
139:		mov [bp + 8], bp
140:		add bp, 6
141:		jmp math_test_1
143:	

main_math$44:	; post call
145:	

main_math$45:	; call header integral zero 0 stack zero 0
147:	

main_math$46:	; push float 6.2831853071795864769252866
148:		fld qword [float8$6.2831853071795864769252866#]
150:	

main_math$47:	; parameter 6.2831853071795864769252866, offset 6
151:		fstp qword [bp + 12]
153:	

main_math$48:	; call function noellipse-noellipse math_test_1
154:		mov word [bp + 6], main_math$49
155:		mov [bp + 8], bp
156:		add bp, 6
157:		jmp math_test_1
159:	

main_math$49:	; post call
161:	

main_math$50:	; call header integral zero 0 stack zero 0
163:	

main_math$51:	; push float 3.1415926535897932384626433
164:		fld qword [float8$3.1415926535897932384626433#]
166:	

main_math$52:	; parameter 3.1415926535897932384626433, offset 6
167:		fstp qword [bp + 12]
169:	

main_math$53:	; call function noellipse-noellipse math_test_1
170:		mov word [bp + 6], main_math$54
171:		mov [bp + 8], bp
172:		add bp, 6
173:		jmp math_test_1
175:	

main_math$54:	; post call
177:	

main_math$55:	; call header integral zero 0 stack zero 0
179:	

main_math$56:	; push float 1.57079632679489661923132165
180:		fld qword [float8$1.57079632679489661923132165#]
182:	

main_math$57:	; parameter 1.57079632679489661923132165, offset 6
183:		fstp qword [bp + 12]
185:	

main_math$58:	; call function noellipse-noellipse math_test_1
186:		mov word [bp + 6], main_math$59
187:		mov [bp + 8], bp
188:		add bp, 6
189:		jmp math_test_1
191:	

main_math$59:	; post call
193:	

main_math$60:	; call header integral zero 0 stack zero 0
195:	

main_math$61:	; push float -1.57079632679489661923132165
196:		fld qword [float8$minus1.57079632679489661923132165#]
198:	

main_math$62:	; parameter -1.57079632679489661923132165, offset 6
199:		fstp qword [bp + 12]
201:	

main_math$63:	; call function noellipse-noellipse math_test_1
202:		mov word [bp + 6], main_math$64
203:		mov [bp + 8], bp
204:		add bp, 6
205:		jmp math_test_1
207:	

main_math$64:	; post call
209:	

main_math$65:	; call header integral zero 0 stack zero 0
211:	

main_math$66:	; push float -3.1415926535897932384626433
212:		fld qword [float8$minus3.1415926535897932384626433#]
214:	

main_math$67:	; parameter -3.1415926535897932384626433, offset 6
215:		fstp qword [bp + 12]
217:	

main_math$68:	; call function noellipse-noellipse math_test_1
218:		mov word [bp + 6], main_math$69
219:		mov [bp + 8], bp
220:		add bp, 6
221:		jmp math_test_1
223:	

main_math$69:	; post call
225:	

main_math$70:	; call header integral zero 0 stack zero 0
227:	

main_math$71:	; push float -6.2831853071795864769252866
228:		fld qword [float8$minus6.2831853071795864769252866#]
230:	

main_math$72:	; parameter -6.2831853071795864769252866, offset 6
231:		fstp qword [bp + 12]
233:	

main_math$73:	; call function noellipse-noellipse math_test_1
234:		mov word [bp + 6], main_math$74
235:		mov [bp + 8], bp
236:		add bp, 6
237:		jmp math_test_1
239:	

main_math$74:	; post call
241:	

main_math$75:	; call header integral zero 0 stack zero 0
243:	

main_math$76:	; push float 1.0
244:		fld1
246:	

main_math$77:	; parameter 1.0, offset 6
247:		fstp qword [bp + 12]
249:	

main_math$78:	; push float 2.0
250:		fld qword [float8$2.0#]
252:	

main_math$79:	; parameter 2.0, offset 14
253:		fstp qword [bp + 20]
255:	

main_math$80:	; call function noellipse-noellipse math_test_2
256:		mov word [bp + 6], main_math$81
257:		mov [bp + 8], bp
258:		add bp, 6
259:		jmp math_test_2
261:	

main_math$81:	; post call
263:	

main_math$82:	; call header integral zero 0 stack zero 0
265:	

main_math$83:	; push float 3.0
266:		fld qword [float8$3.0#]
268:	

main_math$84:	; parameter 3.0, offset 6
269:		fstp qword [bp + 12]
271:	

main_math$85:	; push float 4.0
272:		fld qword [float8$4.0#]
274:	

main_math$86:	; parameter 4.0, offset 14
275:		fstp qword [bp + 20]
277:	

main_math$87:	; call function noellipse-noellipse math_test_2
278:		mov word [bp + 6], main_math$88
279:		mov [bp + 8], bp
280:		add bp, 6
281:		jmp math_test_2
283:	

main_math$88:	; post call
285:	

main_math$89:	; call header integral zero 0 stack zero 0
287:	

main_math$90:	; push 0
288:		fldz
290:	

main_math$91:	; parameter 0, offset 6
291:		fstp qword [bp + 12]
293:	

main_math$92:	; push float 2.0
294:		fld qword [float8$2.0#]
296:	

main_math$93:	; parameter 2.0, offset 14
297:		fstp qword [bp + 20]
299:	

main_math$94:	; call function noellipse-noellipse math_test_2
300:		mov word [bp + 6], main_math$95
301:		mov [bp + 8], bp
302:		add bp, 6
303:		jmp math_test_2
305:	

main_math$95:	; post call
307:	

main_math$96:	; call header integral zero 0 stack zero 0
309:	

main_math$97:	; push 0
310:		fldz
312:	

main_math$98:	; parameter 0, offset 6
313:		fstp qword [bp + 12]
315:	

main_math$99:	; push float -2.0
316:		fld qword [float8$minus2.0#]
318:	

main_math$100:	; parameter -2.0, offset 14
319:		fstp qword [bp + 20]
321:	

main_math$101:	; call function noellipse-noellipse math_test_2
322:		mov word [bp + 6], main_math$102
323:		mov [bp + 8], bp
324:		add bp, 6
325:		jmp math_test_2
327:	

main_math$102:	; post call
329:	

main_math$103:	; call header integral zero 0 stack zero 0
331:	

main_math$104:	; push 1
332:		fld1
334:	

main_math$105:	; parameter 1, offset 6
335:		fstp qword [bp + 12]
337:	

main_math$106:	; push float 2.0
338:		fld qword [float8$2.0#]
340:	

main_math$107:	; parameter 2.0, offset 14
341:		fstp qword [bp + 20]
343:	

main_math$108:	; call function noellipse-noellipse math_test_2
344:		mov word [bp + 6], main_math$109
345:		mov [bp + 8], bp
346:		add bp, 6
347:		jmp math_test_2
349:	

main_math$109:	; post call
351:	

main_math$110:	; call header integral zero 0 stack zero 0
353:	

main_math$111:	; push 1
354:		fld1
356:	

main_math$112:	; parameter 1, offset 6
357:		fstp qword [bp + 12]
359:	

main_math$113:	; push float -2.0
360:		fld qword [float8$minus2.0#]
362:	

main_math$114:	; parameter -2.0, offset 14
363:		fstp qword [bp + 20]
365:	

main_math$115:	; call function noellipse-noellipse math_test_2
366:		mov word [bp + 6], main_math$116
367:		mov [bp + 8], bp
368:		add bp, 6
369:		jmp math_test_2
371:	

main_math$116:	; post call
373:	

main_math$117:	; call header integral zero 0 stack zero 0
375:	

main_math$118:	; push 0
376:		fldz
378:	

main_math$119:	; parameter 0, offset 6
379:		fstp qword [bp + 12]
381:	

main_math$120:	; push 0
382:		fldz
384:	

main_math$121:	; parameter 0, offset 14
385:		fstp qword [bp + 20]
387:	

main_math$122:	; call function noellipse-noellipse math_test_2
388:		mov word [bp + 6], main_math$123
389:		mov [bp + 8], bp
390:		add bp, 6
391:		jmp math_test_2
393:	

main_math$123:	; post call
395:	

main_math$124:	; call header integral zero 0 stack zero 0
397:	

main_math$125:	; push float 2
398:		fld qword [float8$2#]
400:	

main_math$126:	; parameter 2, offset 6
401:		fstp qword [bp + 12]
403:	

main_math$127:	; push 0
404:		fldz
406:	

main_math$128:	; parameter 0, offset 14
407:		fstp qword [bp + 20]
409:	

main_math$129:	; call function noellipse-noellipse math_test_2
410:		mov word [bp + 6], main_math$130
411:		mov [bp + 8], bp
412:		add bp, 6
413:		jmp math_test_2
415:	

main_math$130:	; post call
417:	

main_math$131:	; call header integral zero 0 stack zero 0
419:	

main_math$132:	; push float -2
420:		fld qword [float8$minus2#]
422:	

main_math$133:	; parameter -2, offset 6
423:		fstp qword [bp + 12]
425:	

main_math$134:	; push 0
426:		fldz
428:	

main_math$135:	; parameter 0, offset 14
429:		fstp qword [bp + 20]
431:	

main_math$136:	; call function noellipse-noellipse math_test_2
432:		mov word [bp + 6], main_math$137
433:		mov [bp + 8], bp
434:		add bp, 6
435:		jmp math_test_2
437:	

main_math$137:	; post call
439:	

main_math$138:	; call header integral zero 0 stack zero 0
441:	

main_math$139:	; push float -1.0
442:		fld qword [float8$minus1.0#]
444:	

main_math$140:	; parameter -1.0, offset 6
445:		fstp qword [bp + 12]
447:	

main_math$141:	; push float -1.0
448:		fld qword [float8$minus1.0#]
450:	

main_math$142:	; parameter -1.0, offset 14
451:		fstp qword [bp + 20]
453:	

main_math$143:	; call function noellipse-noellipse math_test_2
454:		mov word [bp + 6], main_math$144
455:		mov [bp + 8], bp
456:		add bp, 6
457:		jmp math_test_2
459:	

main_math$144:	; post call
461:	

main_math$145:	; call header integral zero 0 stack zero 0
463:	

main_math$146:	; push float -2.0
464:		fld qword [float8$minus2.0#]
466:	

main_math$147:	; parameter -2.0, offset 6
467:		fstp qword [bp + 12]
469:	

main_math$148:	; push float -4.0
470:		fld qword [float8$minus4.0#]
472:	

main_math$149:	; parameter -4.0, offset 14
473:		fstp qword [bp + 20]
475:	

main_math$150:	; call function noellipse-noellipse math_test_2
476:		mov word [bp + 6], main_math$151
477:		mov [bp + 8], bp
478:		add bp, 6
479:		jmp math_test_2
481:	

main_math$151:	; post call
483:	

main_math$152:	; return
484:		mov t2523, [bp]
485:		mov di, [bp + 4]
486:		mov bp, [bp + 2]
487:		jmp t2523
489:	

main_math$153:	; function end main_math
1:	

math_test_1:	; call header integral zero 0 stack zero 0
3:	

math_test_1$1:	; parameter string_3C25f3E0A#, offset 6
4:		mov word [bp + 20], string_3C25f3E0A#
6:	

math_test_1$2:	; push float x
7:		fld qword [bp + 6]
9:	

math_test_1$3:	; parameter x, offset 8
10:		fstp qword [bp + 22]
12:	

math_test_1$4:	; call function noellipse-ellipse printf, extra 0
13:		mov word [bp + 14], math_test_1$5
14:		mov [bp + 16], bp
15:		add bp, 14
16:		mov di, bp
17:		add di, 8
18:		jmp printf
20:	

math_test_1$5:	; post call
22:	

math_test_1$6:	; call header integral zero 0 stack zero 0
24:	

math_test_1$7:	; parameter string_2020sin2825f29203D2025f2C20errno203D2025i0A#, offset 6
25:		mov word [bp + 20], string_2020sin2825f29203D2025f2C20errno203D2025i0A#
27:	

math_test_1$8:	; push float x
28:		fld qword [bp + 6]
30:	

math_test_1$9:	; parameter x, offset 8
31:		fstp qword [bp + 22]
33:	

math_test_1$10:	; call header integral zero 0 stack zero 0
35:	

math_test_1$11:	; push float x
36:		fld qword [bp + 6]
38:	

math_test_1$12:	; parameter x, offset 22
39:		fstp qword [bp + 36]
41:	

math_test_1$13:	; call function noellipse-noellipse sin
42:		mov word [bp + 30], math_test_1$14
43:		mov [bp + 32], bp
44:		add bp, 30
45:		jmp sin
47:	

math_test_1$14:	; post call
49:	

math_test_1$15:	; £temporary3953 = return_value
51:	

math_test_1$16:	; parameter £temporary3953, offset 16
52:		fstp qword [bp + 30]
54:	

math_test_1$17:	; parameter errno, offset 24
55:		mov a2524, [errno]
56:		mov [bp + 38], a2524
58:	

math_test_1$18:	; call function noellipse-ellipse printf, extra 0
59:		mov word [bp + 14], math_test_1$19
60:		mov [bp + 16], bp
61:		add bp, 14
62:		mov di, bp
63:		add di, 18
64:		jmp printf
66:	

math_test_1$19:	; post call
68:	

math_test_1$20:	; errno = 0
69:		mov word [errno], 0
71:	

math_test_1$21:	; call header integral zero 0 stack zero 0
73:	

math_test_1$22:	; parameter string_2020cos2825f29203D2025f2C20errno203D2025i0A#, offset 6
74:		mov word [bp + 20], string_2020cos2825f29203D2025f2C20errno203D2025i0A#
76:	

math_test_1$23:	; push float x
77:		fld qword [bp + 6]
79:	

math_test_1$24:	; parameter x, offset 8
80:		fstp qword [bp + 22]
82:	

math_test_1$25:	; call header integral zero 0 stack zero 0
84:	

math_test_1$26:	; push float x
85:		fld qword [bp + 6]
87:	

math_test_1$27:	; parameter x, offset 22
88:		fstp qword [bp + 36]
90:	

math_test_1$28:	; call function noellipse-noellipse cos
91:		mov word [bp + 30], math_test_1$29
92:		mov [bp + 32], bp
93:		add bp, 30
94:		jmp cos
96:	

math_test_1$29:	; post call
98:	

math_test_1$30:	; £temporary3955 = return_value
100:	

math_test_1$31:	; parameter £temporary3955, offset 16
101:		fstp qword [bp + 30]
103:	

math_test_1$32:	; parameter errno, offset 24
104:		mov a2525, [errno]
105:		mov [bp + 38], a2525
107:	

math_test_1$33:	; call function noellipse-ellipse printf, extra 0
108:		mov word [bp + 14], math_test_1$34
109:		mov [bp + 16], bp
110:		add bp, 14
111:		mov di, bp
112:		add di, 18
113:		jmp printf
115:	

math_test_1$34:	; post call
117:	

math_test_1$35:	; errno = 0
118:		mov word [errno], 0
120:	

math_test_1$36:	; call header integral zero 0 stack zero 0
122:	

math_test_1$37:	; parameter string_2020tan2825f29203D2025f2C20errno203D2025i0A#, offset 6
123:		mov word [bp + 20], string_2020tan2825f29203D2025f2C20errno203D2025i0A#
125:	

math_test_1$38:	; push float x
126:		fld qword [bp + 6]
128:	

math_test_1$39:	; parameter x, offset 8
129:		fstp qword [bp + 22]
131:	

math_test_1$40:	; call header integral zero 0 stack zero 0
133:	

math_test_1$41:	; push float x
134:		fld qword [bp + 6]
136:	

math_test_1$42:	; parameter x, offset 22
137:		fstp qword [bp + 36]
139:	

math_test_1$43:	; call function noellipse-noellipse tan
140:		mov word [bp + 30], math_test_1$44
141:		mov [bp + 32], bp
142:		add bp, 30
143:		jmp tan
145:	

math_test_1$44:	; post call
147:	

math_test_1$45:	; £temporary3957 = return_value
149:	

math_test_1$46:	; parameter £temporary3957, offset 16
150:		fstp qword [bp + 30]
152:	

math_test_1$47:	; parameter errno, offset 24
153:		mov a2526, [errno]
154:		mov [bp + 38], a2526
156:	

math_test_1$48:	; call function noellipse-ellipse printf, extra 0
157:		mov word [bp + 14], math_test_1$49
158:		mov [bp + 16], bp
159:		add bp, 14
160:		mov di, bp
161:		add di, 18
162:		jmp printf
164:	

math_test_1$49:	; post call
166:	

math_test_1$50:	; errno = 0
167:		mov word [errno], 0
169:	

math_test_1$51:	; call header integral zero 0 stack zero 0
171:	

math_test_1$52:	; parameter string_2020asin2825f29203D2025f2C20errno203D2025i0A#, offset 6
172:		mov word [bp + 20], string_2020asin2825f29203D2025f2C20errno203D2025i0A#
174:	

math_test_1$53:	; push float x
175:		fld qword [bp + 6]
177:	

math_test_1$54:	; parameter x, offset 8
178:		fstp qword [bp + 22]
180:	

math_test_1$55:	; call header integral zero 0 stack zero 0
182:	

math_test_1$56:	; push float x
183:		fld qword [bp + 6]
185:	

math_test_1$57:	; parameter x, offset 22
186:		fstp qword [bp + 36]
188:	

math_test_1$58:	; call function noellipse-noellipse asin
189:		mov word [bp + 30], math_test_1$59
190:		mov [bp + 32], bp
191:		add bp, 30
192:		jmp asin
194:	

math_test_1$59:	; post call
196:	

math_test_1$60:	; £temporary3959 = return_value
198:	

math_test_1$61:	; parameter £temporary3959, offset 16
199:		fstp qword [bp + 30]
201:	

math_test_1$62:	; parameter errno, offset 24
202:		mov a2527, [errno]
203:		mov [bp + 38], a2527
205:	

math_test_1$63:	; call function noellipse-ellipse printf, extra 0
206:		mov word [bp + 14], math_test_1$64
207:		mov [bp + 16], bp
208:		add bp, 14
209:		mov di, bp
210:		add di, 18
211:		jmp printf
213:	

math_test_1$64:	; post call
215:	

math_test_1$65:	; errno = 0
216:		mov word [errno], 0
218:	

math_test_1$66:	; call header integral zero 0 stack zero 0
220:	

math_test_1$67:	; parameter string_2020acos2825f29203D2025f2C20errno203D2025i0A#, offset 6
221:		mov word [bp + 20], string_2020acos2825f29203D2025f2C20errno203D2025i0A#
223:	

math_test_1$68:	; push float x
224:		fld qword [bp + 6]
226:	

math_test_1$69:	; parameter x, offset 8
227:		fstp qword [bp + 22]
229:	

math_test_1$70:	; call header integral zero 0 stack zero 0
231:	

math_test_1$71:	; push float x
232:		fld qword [bp + 6]
234:	

math_test_1$72:	; parameter x, offset 22
235:		fstp qword [bp + 36]
237:	

math_test_1$73:	; call function noellipse-noellipse acos
238:		mov word [bp + 30], math_test_1$74
239:		mov [bp + 32], bp
240:		add bp, 30
241:		jmp acos
243:	

math_test_1$74:	; post call
245:	

math_test_1$75:	; £temporary3961 = return_value
247:	

math_test_1$76:	; parameter £temporary3961, offset 16
248:		fstp qword [bp + 30]
250:	

math_test_1$77:	; parameter errno, offset 24
251:		mov a2528, [errno]
252:		mov [bp + 38], a2528
254:	

math_test_1$78:	; call function noellipse-ellipse printf, extra 0
255:		mov word [bp + 14], math_test_1$79
256:		mov [bp + 16], bp
257:		add bp, 14
258:		mov di, bp
259:		add di, 18
260:		jmp printf
262:	

math_test_1$79:	; post call
264:	

math_test_1$80:	; errno = 0
265:		mov word [errno], 0
267:	

math_test_1$81:	; call header integral zero 0 stack zero 0
269:	

math_test_1$82:	; parameter string_2020atan2825f29203D2025f2C20errno203D2025i0A#, offset 6
270:		mov word [bp + 20], string_2020atan2825f29203D2025f2C20errno203D2025i0A#
272:	

math_test_1$83:	; push float x
273:		fld qword [bp + 6]
275:	

math_test_1$84:	; parameter x, offset 8
276:		fstp qword [bp + 22]
278:	

math_test_1$85:	; call header integral zero 0 stack zero 0
280:	

math_test_1$86:	; push float x
281:		fld qword [bp + 6]
283:	

math_test_1$87:	; parameter x, offset 22
284:		fstp qword [bp + 36]
286:	

math_test_1$88:	; call function noellipse-noellipse atan
287:		mov word [bp + 30], math_test_1$89
288:		mov [bp + 32], bp
289:		add bp, 30
290:		jmp atan
292:	

math_test_1$89:	; post call
294:	

math_test_1$90:	; £temporary3963 = return_value
296:	

math_test_1$91:	; parameter £temporary3963, offset 16
297:		fstp qword [bp + 30]
299:	

math_test_1$92:	; parameter errno, offset 24
300:		mov a2529, [errno]
301:		mov [bp + 38], a2529
303:	

math_test_1$93:	; call function noellipse-ellipse printf, extra 0
304:		mov word [bp + 14], math_test_1$94
305:		mov [bp + 16], bp
306:		add bp, 14
307:		mov di, bp
308:		add di, 18
309:		jmp printf
311:	

math_test_1$94:	; post call
313:	

math_test_1$95:	; errno = 0
314:		mov word [errno], 0
316:	

math_test_1$96:	; call header integral zero 0 stack zero 0
318:	

math_test_1$97:	; parameter string_2020exp2825f29203D2025f2C20errno203D2025i0A#, offset 6
319:		mov word [bp + 20], string_2020exp2825f29203D2025f2C20errno203D2025i0A#
321:	

math_test_1$98:	; push float x
322:		fld qword [bp + 6]
324:	

math_test_1$99:	; parameter x, offset 8
325:		fstp qword [bp + 22]
327:	

math_test_1$100:	; call header integral zero 0 stack zero 0
329:	

math_test_1$101:	; push float x
330:		fld qword [bp + 6]
332:	

math_test_1$102:	; parameter x, offset 22
333:		fstp qword [bp + 36]
335:	

math_test_1$103:	; call function noellipse-noellipse exp
336:		mov word [bp + 30], math_test_1$104
337:		mov [bp + 32], bp
338:		add bp, 30
339:		jmp exp
341:	

math_test_1$104:	; post call
343:	

math_test_1$105:	; £temporary3965 = return_value
345:	

math_test_1$106:	; parameter £temporary3965, offset 16
346:		fstp qword [bp + 30]
348:	

math_test_1$107:	; parameter errno, offset 24
349:		mov a2530, [errno]
350:		mov [bp + 38], a2530
352:	

math_test_1$108:	; call function noellipse-ellipse printf, extra 0
353:		mov word [bp + 14], math_test_1$109
354:		mov [bp + 16], bp
355:		add bp, 14
356:		mov di, bp
357:		add di, 18
358:		jmp printf
360:	

math_test_1$109:	; post call
362:	

math_test_1$110:	; errno = 0
363:		mov word [errno], 0
365:	

math_test_1$111:	; call header integral zero 0 stack zero 0
367:	

math_test_1$112:	; parameter string_2020log2825f29203D2025f2C20errno203D2025i0A#, offset 6
368:		mov word [bp + 20], string_2020log2825f29203D2025f2C20errno203D2025i0A#
370:	

math_test_1$113:	; push float x
371:		fld qword [bp + 6]
373:	

math_test_1$114:	; parameter x, offset 8
374:		fstp qword [bp + 22]
376:	

math_test_1$115:	; call header integral zero 0 stack zero 0
378:	

math_test_1$116:	; push float x
379:		fld qword [bp + 6]
381:	

math_test_1$117:	; parameter x, offset 22
382:		fstp qword [bp + 36]
384:	

math_test_1$118:	; call function noellipse-noellipse log
385:		mov word [bp + 30], math_test_1$119
386:		mov [bp + 32], bp
387:		add bp, 30
388:		jmp log
390:	

math_test_1$119:	; post call
392:	

math_test_1$120:	; £temporary3967 = return_value
394:	

math_test_1$121:	; parameter £temporary3967, offset 16
395:		fstp qword [bp + 30]
397:	

math_test_1$122:	; parameter errno, offset 24
398:		mov a2531, [errno]
399:		mov [bp + 38], a2531
401:	

math_test_1$123:	; call function noellipse-ellipse printf, extra 0
402:		mov word [bp + 14], math_test_1$124
403:		mov [bp + 16], bp
404:		add bp, 14
405:		mov di, bp
406:		add di, 18
407:		jmp printf
409:	

math_test_1$124:	; post call
411:	

math_test_1$125:	; errno = 0
412:		mov word [errno], 0
414:	

math_test_1$126:	; call header integral zero 0 stack zero 0
416:	

math_test_1$127:	; parameter string_2020log102825f29203D2025f2C20errno203D2025i0A#, offset 6
417:		mov word [bp + 20], string_2020log102825f29203D2025f2C20errno203D2025i0A#
419:	

math_test_1$128:	; push float x
420:		fld qword [bp + 6]
422:	

math_test_1$129:	; parameter x, offset 8
423:		fstp qword [bp + 22]
425:	

math_test_1$130:	; call header integral zero 0 stack zero 0
427:	

math_test_1$131:	; push float x
428:		fld qword [bp + 6]
430:	

math_test_1$132:	; parameter x, offset 22
431:		fstp qword [bp + 36]
433:	

math_test_1$133:	; call function noellipse-noellipse log10
434:		mov word [bp + 30], math_test_1$134
435:		mov [bp + 32], bp
436:		add bp, 30
437:		jmp log10
439:	

math_test_1$134:	; post call
441:	

math_test_1$135:	; £temporary3969 = return_value
443:	

math_test_1$136:	; parameter £temporary3969, offset 16
444:		fstp qword [bp + 30]
446:	

math_test_1$137:	; parameter errno, offset 24
447:		mov a2532, [errno]
448:		mov [bp + 38], a2532
450:	

math_test_1$138:	; call function noellipse-ellipse printf, extra 0
451:		mov word [bp + 14], math_test_1$139
452:		mov [bp + 16], bp
453:		add bp, 14
454:		mov di, bp
455:		add di, 18
456:		jmp printf
458:	

math_test_1$139:	; post call
460:	

math_test_1$140:	; errno = 0
461:		mov word [errno], 0
463:	

math_test_1$141:	; call header integral zero 0 stack zero 0
465:	

math_test_1$142:	; parameter string_2020sinh2825f29203D2025f2C20errno203D2025i0A#, offset 6
466:		mov word [bp + 20], string_2020sinh2825f29203D2025f2C20errno203D2025i0A#
468:	

math_test_1$143:	; push float x
469:		fld qword [bp + 6]
471:	

math_test_1$144:	; parameter x, offset 8
472:		fstp qword [bp + 22]
474:	

math_test_1$145:	; call header integral zero 0 stack zero 0
476:	

math_test_1$146:	; push float x
477:		fld qword [bp + 6]
479:	

math_test_1$147:	; parameter x, offset 22
480:		fstp qword [bp + 36]
482:	

math_test_1$148:	; call function noellipse-noellipse sinh
483:		mov word [bp + 30], math_test_1$149
484:		mov [bp + 32], bp
485:		add bp, 30
486:		jmp sinh
488:	

math_test_1$149:	; post call
490:	

math_test_1$150:	; £temporary3971 = return_value
492:	

math_test_1$151:	; parameter £temporary3971, offset 16
493:		fstp qword [bp + 30]
495:	

math_test_1$152:	; parameter errno, offset 24
496:		mov a2533, [errno]
497:		mov [bp + 38], a2533
499:	

math_test_1$153:	; call function noellipse-ellipse printf, extra 0
500:		mov word [bp + 14], math_test_1$154
501:		mov [bp + 16], bp
502:		add bp, 14
503:		mov di, bp
504:		add di, 18
505:		jmp printf
507:	

math_test_1$154:	; post call
509:	

math_test_1$155:	; errno = 0
510:		mov word [errno], 0
512:	

math_test_1$156:	; call header integral zero 0 stack zero 0
514:	

math_test_1$157:	; parameter string_2020cosh2825f29203D2025f2C20errno203D2025i0A#, offset 6
515:		mov word [bp + 20], string_2020cosh2825f29203D2025f2C20errno203D2025i0A#
517:	

math_test_1$158:	; push float x
518:		fld qword [bp + 6]
520:	

math_test_1$159:	; parameter x, offset 8
521:		fstp qword [bp + 22]
523:	

math_test_1$160:	; call header integral zero 0 stack zero 0
525:	

math_test_1$161:	; push float x
526:		fld qword [bp + 6]
528:	

math_test_1$162:	; parameter x, offset 22
529:		fstp qword [bp + 36]
531:	

math_test_1$163:	; call function noellipse-noellipse cosh
532:		mov word [bp + 30], math_test_1$164
533:		mov [bp + 32], bp
534:		add bp, 30
535:		jmp cosh
537:	

math_test_1$164:	; post call
539:	

math_test_1$165:	; £temporary3973 = return_value
541:	

math_test_1$166:	; parameter £temporary3973, offset 16
542:		fstp qword [bp + 30]
544:	

math_test_1$167:	; parameter errno, offset 24
545:		mov a2534, [errno]
546:		mov [bp + 38], a2534
548:	

math_test_1$168:	; call function noellipse-ellipse printf, extra 0
549:		mov word [bp + 14], math_test_1$169
550:		mov [bp + 16], bp
551:		add bp, 14
552:		mov di, bp
553:		add di, 18
554:		jmp printf
556:	

math_test_1$169:	; post call
558:	

math_test_1$170:	; errno = 0
559:		mov word [errno], 0
561:	

math_test_1$171:	; call header integral zero 0 stack zero 0
563:	

math_test_1$172:	; parameter string_2020tanh2825f29203D2025f2C20errno203D2025i0A#, offset 6
564:		mov word [bp + 20], string_2020tanh2825f29203D2025f2C20errno203D2025i0A#
566:	

math_test_1$173:	; push float x
567:		fld qword [bp + 6]
569:	

math_test_1$174:	; parameter x, offset 8
570:		fstp qword [bp + 22]
572:	

math_test_1$175:	; call header integral zero 0 stack zero 0
574:	

math_test_1$176:	; push float x
575:		fld qword [bp + 6]
577:	

math_test_1$177:	; parameter x, offset 22
578:		fstp qword [bp + 36]
580:	

math_test_1$178:	; call function noellipse-noellipse tanh
581:		mov word [bp + 30], math_test_1$179
582:		mov [bp + 32], bp
583:		add bp, 30
584:		jmp tanh
586:	

math_test_1$179:	; post call
588:	

math_test_1$180:	; £temporary3975 = return_value
590:	

math_test_1$181:	; parameter £temporary3975, offset 16
591:		fstp qword [bp + 30]
593:	

math_test_1$182:	; parameter errno, offset 24
594:		mov a2535, [errno]
595:		mov [bp + 38], a2535
597:	

math_test_1$183:	; call function noellipse-ellipse printf, extra 0
598:		mov word [bp + 14], math_test_1$184
599:		mov [bp + 16], bp
600:		add bp, 14
601:		mov di, bp
602:		add di, 18
603:		jmp printf
605:	

math_test_1$184:	; post call
607:	

math_test_1$185:	; errno = 0
608:		mov word [errno], 0
610:	

math_test_1$186:	; call header integral zero 0 stack zero 0
612:	

math_test_1$187:	; parameter string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#, offset 6
613:		mov word [bp + 20], string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#
615:	

math_test_1$188:	; push float x
616:		fld qword [bp + 6]
618:	

math_test_1$189:	; parameter x, offset 8
619:		fstp qword [bp + 22]
621:	

math_test_1$190:	; call header integral zero 0 stack zero 0
623:	

math_test_1$191:	; push float x
624:		fld qword [bp + 6]
626:	

math_test_1$192:	; parameter x, offset 22
627:		fstp qword [bp + 36]
629:	

math_test_1$193:	; call function noellipse-noellipse sqrt
630:		mov word [bp + 30], math_test_1$194
631:		mov [bp + 32], bp
632:		add bp, 30
633:		jmp sqrt
635:	

math_test_1$194:	; post call
637:	

math_test_1$195:	; £temporary3977 = return_value
639:	

math_test_1$196:	; parameter £temporary3977, offset 16
640:		fstp qword [bp + 30]
642:	

math_test_1$197:	; parameter errno, offset 24
643:		mov a2536, [errno]
644:		mov [bp + 38], a2536
646:	

math_test_1$198:	; call function noellipse-ellipse printf, extra 0
647:		mov word [bp + 14], math_test_1$199
648:		mov [bp + 16], bp
649:		add bp, 14
650:		mov di, bp
651:		add di, 18
652:		jmp printf
654:	

math_test_1$199:	; post call
656:	

math_test_1$200:	; errno = 0
657:		mov word [errno], 0
659:	

math_test_1$201:	; call header integral zero 0 stack zero 0
661:	

math_test_1$202:	; parameter string_2020floor2825f29203D2025f2C20errno203D2025i0A#, offset 6
662:		mov word [bp + 20], string_2020floor2825f29203D2025f2C20errno203D2025i0A#
664:	

math_test_1$203:	; push float x
665:		fld qword [bp + 6]
667:	

math_test_1$204:	; parameter x, offset 8
668:		fstp qword [bp + 22]
670:	

math_test_1$205:	; call header integral zero 0 stack zero 0
672:	

math_test_1$206:	; push float x
673:		fld qword [bp + 6]
675:	

math_test_1$207:	; parameter x, offset 22
676:		fstp qword [bp + 36]
678:	

math_test_1$208:	; call function noellipse-noellipse floor
679:		mov word [bp + 30], math_test_1$209
680:		mov [bp + 32], bp
681:		add bp, 30
682:		jmp floor
684:	

math_test_1$209:	; post call
686:	

math_test_1$210:	; £temporary3979 = return_value
688:	

math_test_1$211:	; parameter £temporary3979, offset 16
689:		fstp qword [bp + 30]
691:	

math_test_1$212:	; parameter errno, offset 24
692:		mov a2537, [errno]
693:		mov [bp + 38], a2537
695:	

math_test_1$213:	; call function noellipse-ellipse printf, extra 0
696:		mov word [bp + 14], math_test_1$214
697:		mov [bp + 16], bp
698:		add bp, 14
699:		mov di, bp
700:		add di, 18
701:		jmp printf
703:	

math_test_1$214:	; post call
705:	

math_test_1$215:	; errno = 0
706:		mov word [errno], 0
708:	

math_test_1$216:	; call header integral zero 0 stack zero 0
710:	

math_test_1$217:	; parameter string_2020ceil2825f29203D2025f2C20errno203D2025i0A#, offset 6
711:		mov word [bp + 20], string_2020ceil2825f29203D2025f2C20errno203D2025i0A#
713:	

math_test_1$218:	; push float x
714:		fld qword [bp + 6]
716:	

math_test_1$219:	; parameter x, offset 8
717:		fstp qword [bp + 22]
719:	

math_test_1$220:	; call header integral zero 0 stack zero 0
721:	

math_test_1$221:	; push float x
722:		fld qword [bp + 6]
724:	

math_test_1$222:	; parameter x, offset 22
725:		fstp qword [bp + 36]
727:	

math_test_1$223:	; call function noellipse-noellipse ceil
728:		mov word [bp + 30], math_test_1$224
729:		mov [bp + 32], bp
730:		add bp, 30
731:		jmp ceil
733:	

math_test_1$224:	; post call
735:	

math_test_1$225:	; £temporary3981 = return_value
737:	

math_test_1$226:	; parameter £temporary3981, offset 16
738:		fstp qword [bp + 30]
740:	

math_test_1$227:	; parameter errno, offset 24
741:		mov a2538, [errno]
742:		mov [bp + 38], a2538
744:	

math_test_1$228:	; call function noellipse-ellipse printf, extra 0
745:		mov word [bp + 14], math_test_1$229
746:		mov [bp + 16], bp
747:		add bp, 14
748:		mov di, bp
749:		add di, 18
750:		jmp printf
752:	

math_test_1$229:	; post call
754:	

math_test_1$230:	; errno = 0
755:		mov word [errno], 0
757:	

math_test_1$231:	; call header integral zero 0 stack zero 0
759:	

math_test_1$232:	; parameter string_2020fabs2825f29203D2025f2C20errno203D2025i0A#, offset 6
760:		mov word [bp + 20], string_2020fabs2825f29203D2025f2C20errno203D2025i0A#
762:	

math_test_1$233:	; push float x
763:		fld qword [bp + 6]
765:	

math_test_1$234:	; parameter x, offset 8
766:		fstp qword [bp + 22]
768:	

math_test_1$235:	; call header integral zero 0 stack zero 0
770:	

math_test_1$236:	; push float x
771:		fld qword [bp + 6]
773:	

math_test_1$237:	; parameter x, offset 22
774:		fstp qword [bp + 36]
776:	

math_test_1$238:	; call function noellipse-noellipse fabs
777:		mov word [bp + 30], math_test_1$239
778:		mov [bp + 32], bp
779:		add bp, 30
780:		jmp fabs
782:	

math_test_1$239:	; post call
784:	

math_test_1$240:	; £temporary3983 = return_value
786:	

math_test_1$241:	; parameter £temporary3983, offset 16
787:		fstp qword [bp + 30]
789:	

math_test_1$242:	; parameter errno, offset 24
790:		mov a2539, [errno]
791:		mov [bp + 38], a2539
793:	

math_test_1$243:	; call function noellipse-ellipse printf, extra 0
794:		mov word [bp + 14], math_test_1$244
795:		mov [bp + 16], bp
796:		add bp, 14
797:		mov di, bp
798:		add di, 18
799:		jmp printf
801:	

math_test_1$244:	; post call
803:	

math_test_1$245:	; errno = 0
804:		mov word [errno], 0
806:	

math_test_1$246:	; j = 0
807:		mov word [bp + 14], 0
809:	

math_test_1$247:	; call header integral zero 0 stack zero 0
811:	

math_test_1$248:	; push float x
812:		fld qword [bp + 6]
814:	

math_test_1$249:	; parameter x, offset 6
815:		fstp qword [bp + 22]
817:	

math_test_1$250:	; £temporary3985 = &j
818:		mov t2540, bp
819:		add t2540, 14
821:	

math_test_1$251:	; parameter £temporary3985, offset 14
822:		mov [bp + 30], t2540
824:	

math_test_1$252:	; call function noellipse-noellipse frexp
825:		mov word [bp + 16], math_test_1$253
826:		mov [bp + 18], bp
827:		add bp, 16
828:		jmp frexp
830:	

math_test_1$253:	; post call
832:	

math_test_1$254:	; £temporary3986 = return_value
834:	

math_test_1$255:	; pop float z
835:		fstp qword [bp + 16]
837:	

math_test_1$256:	; call header integral zero 0 stack zero 0
839:	

math_test_1$257:	; parameter string_frexp2028z2C20j29203D202825f2C2025i292C20errno203D2025i0A#, offset 6
840:		mov word [bp + 30], string_frexp2028z2C20j29203D202825f2C2025i292C20errno203D2025i0A#
842:	

math_test_1$258:	; push float z
843:		fld qword [bp + 16]
845:	

math_test_1$259:	; parameter z, offset 8
846:		fstp qword [bp + 32]
848:	

math_test_1$260:	; parameter j, offset 16
849:		mov a2541, [bp + 14]
850:		mov [bp + 40], a2541
852:	

math_test_1$261:	; parameter errno, offset 18
853:		mov a2542, [errno]
854:		mov [bp + 42], a2542
856:	

math_test_1$262:	; call function noellipse-ellipse printf, extra 0
857:		mov word [bp + 24], math_test_1$263
858:		mov [bp + 26], bp
859:		add bp, 24
860:		mov di, bp
861:		add di, 12
862:		jmp printf
864:	

math_test_1$263:	; post call
866:	

math_test_1$264:	; if errno == 0 goto 270
867:		cmp word [errno], 0
868:		je math_test_1$270
870:	

math_test_1$265:	; call header integral zero 0 stack zero 0
872:	

math_test_1$266:	; parameter string_Error20message3A#, offset 6
873:		mov word [bp + 30], string_Error20message3A#
875:	

math_test_1$267:	; call function noellipse-noellipse perror
876:		mov word [bp + 24], math_test_1$268
877:		mov [bp + 26], bp
878:		add bp, 24
879:		jmp perror
881:	

math_test_1$268:	; post call
883:	

math_test_1$269:	; errno = 0
884:		mov word [errno], 0
886:	

math_test_1$270:	; push 0
887:		fldz
889:	

math_test_1$271:	; pop float w
890:		fstp qword [bp + 14]
892:	

math_test_1$272:	; call header integral zero 0 stack zero 0
894:	

math_test_1$273:	; push float x
895:		fld qword [bp + 6]
897:	

math_test_1$274:	; parameter x, offset 6
898:		fstp qword [bp + 28]
900:	

math_test_1$275:	; £temporary3990 = &w
901:		mov t2543, bp
902:		add t2543, 14
904:	

math_test_1$276:	; parameter £temporary3990, offset 14
905:		mov [bp + 36], t2543
907:	

math_test_1$277:	; call function noellipse-noellipse modf
908:		mov word [bp + 22], math_test_1$278
909:		mov [bp + 24], bp
910:		add bp, 22
911:		jmp modf
913:	

math_test_1$278:	; post call
915:	

math_test_1$279:	; £temporary3991 = return_value
917:	

math_test_1$280:	; pop float z
918:		fstp qword [bp + 22]
920:	

math_test_1$281:	; call header integral zero 0 stack zero 0
922:	

math_test_1$282:	; parameter string_modf2028z2C20w29203D202825f2C2025f292C20errno203D2025i0A#, offset 6
923:		mov word [bp + 36], string_modf2028z2C20w29203D202825f2C2025f292C20errno203D2025i0A#
925:	

math_test_1$283:	; push float z
926:		fld qword [bp + 22]
928:	

math_test_1$284:	; parameter z, offset 8
929:		fstp qword [bp + 38]
931:	

math_test_1$285:	; push float w
932:		fld qword [bp + 14]
934:	

math_test_1$286:	; parameter w, offset 16
935:		fstp qword [bp + 46]
937:	

math_test_1$287:	; parameter errno, offset 24
938:		mov a2544, [errno]
939:		mov [bp + 54], a2544
941:	

math_test_1$288:	; call function noellipse-ellipse printf, extra 0
942:		mov word [bp + 30], math_test_1$289
943:		mov [bp + 32], bp
944:		add bp, 30
945:		mov di, bp
946:		add di, 18
947:		jmp printf
949:	

math_test_1$289:	; post call
951:	

math_test_1$290:	; if errno == 0 goto 296
952:		cmp word [errno], 0
953:		je math_test_1$296
955:	

math_test_1$291:	; call header integral zero 0 stack zero 0
957:	

math_test_1$292:	; parameter string_Error20message3A#, offset 6
958:		mov word [bp + 36], string_Error20message3A#
960:	

math_test_1$293:	; call function noellipse-noellipse perror
961:		mov word [bp + 30], math_test_1$294
962:		mov [bp + 32], bp
963:		add bp, 30
964:		jmp perror
966:	

math_test_1$294:	; post call
968:	

math_test_1$295:	; errno = 0
969:		mov word [errno], 0
971:	

math_test_1$296:	; call header integral zero 0 stack zero 0
973:	

math_test_1$297:	; parameter string_0A#, offset 6
974:		mov word [bp + 20], string_0A#
976:	

math_test_1$298:	; call function noellipse-ellipse printf, extra 0
977:		mov word [bp + 14], math_test_1$299
978:		mov [bp + 16], bp
979:		add bp, 14
980:		mov di, bp
981:		jmp printf
983:	

math_test_1$299:	; post call
985:	

math_test_1$300:	; return
986:		mov t2545, [bp]
987:		mov di, [bp + 4]
988:		mov bp, [bp + 2]
989:		jmp t2545
991:	

math_test_1$301:	; function end math_test_1
1:	

math_test_2:	; call header integral zero 0 stack zero 0
3:	

math_test_2$1:	; parameter string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#, offset 6
4:		mov word [bp + 28], string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#
6:	

math_test_2$2:	; push float x
7:		fld qword [bp + 6]
9:	

math_test_2$3:	; parameter x, offset 8
10:		fstp qword [bp + 30]
12:	

math_test_2$4:	; push float y
13:		fld qword [bp + 14]
15:	

math_test_2$5:	; parameter y, offset 16
16:		fstp qword [bp + 38]
18:	

math_test_2$6:	; call header integral zero 0 stack zero 0
20:	

math_test_2$7:	; push float x
21:		fld qword [bp + 6]
23:	

math_test_2$8:	; parameter x, offset 30
24:		fstp qword [bp + 52]
26:	

math_test_2$9:	; push float y
27:		fld qword [bp + 14]
29:	

math_test_2$10:	; parameter y, offset 38
30:		fstp qword [bp + 60]
32:	

math_test_2$11:	; call function noellipse-noellipse fmod
33:		mov word [bp + 46], math_test_2$12
34:		mov [bp + 48], bp
35:		add bp, 46
36:		jmp fmod
38:	

math_test_2$12:	; post call
40:	

math_test_2$13:	; £temporary4095 = return_value
42:	

math_test_2$14:	; parameter £temporary4095, offset 24
43:		fstp qword [bp + 46]
45:	

math_test_2$15:	; parameter errno, offset 32
46:		mov a2546, [errno]
47:		mov [bp + 54], a2546
49:	

math_test_2$16:	; call function noellipse-ellipse printf, extra 0
50:		mov word [bp + 22], math_test_2$17
51:		mov [bp + 24], bp
52:		add bp, 22
53:		mov di, bp
54:		add di, 26
55:		jmp printf
57:	

math_test_2$17:	; post call
59:	

math_test_2$18:	; errno = 0
60:		mov word [errno], 0
62:	

math_test_2$19:	; call header integral zero 0 stack zero 0
64:	

math_test_2$20:	; parameter string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#, offset 6
65:		mov word [bp + 28], string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#
67:	

math_test_2$21:	; push float x
68:		fld qword [bp + 6]
70:	

math_test_2$22:	; parameter x, offset 8
71:		fstp qword [bp + 30]
73:	

math_test_2$23:	; push float y
74:		fld qword [bp + 14]
76:	

math_test_2$24:	; parameter y, offset 16
77:		fstp qword [bp + 38]
79:	

math_test_2$25:	; call header integral zero 0 stack zero 0
81:	

math_test_2$26:	; push float x
82:		fld qword [bp + 6]
84:	

math_test_2$27:	; parameter x, offset 30
85:		fstp qword [bp + 52]
87:	

math_test_2$28:	; push float y
88:		fld qword [bp + 14]
90:	

math_test_2$29:	; parameter y, offset 38
91:		fstp qword [bp + 60]
93:	

math_test_2$30:	; call function noellipse-noellipse atan2
94:		mov word [bp + 46], math_test_2$31
95:		mov [bp + 48], bp
96:		add bp, 46
97:		jmp atan2
99:	

math_test_2$31:	; post call
101:	

math_test_2$32:	; £temporary4097 = return_value
103:	

math_test_2$33:	; parameter £temporary4097, offset 24
104:		fstp qword [bp + 46]
106:	

math_test_2$34:	; parameter errno, offset 32
107:		mov a2547, [errno]
108:		mov [bp + 54], a2547
110:	

math_test_2$35:	; call function noellipse-ellipse printf, extra 0
111:		mov word [bp + 22], math_test_2$36
112:		mov [bp + 24], bp
113:		add bp, 22
114:		mov di, bp
115:		add di, 26
116:		jmp printf
118:	

math_test_2$36:	; post call
120:	

math_test_2$37:	; errno = 0
121:		mov word [errno], 0
123:	

math_test_2$38:	; call header integral zero 0 stack zero 0
125:	

math_test_2$39:	; parameter string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#, offset 6
126:		mov word [bp + 28], string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#
128:	

math_test_2$40:	; push float x
129:		fld qword [bp + 6]
131:	

math_test_2$41:	; parameter x, offset 8
132:		fstp qword [bp + 30]
134:	

math_test_2$42:	; push float y
135:		fld qword [bp + 14]
137:	

math_test_2$43:	; parameter y, offset 16
138:		fstp qword [bp + 38]
140:	

math_test_2$44:	; call header integral zero 0 stack zero 0
142:	

math_test_2$45:	; push float x
143:		fld qword [bp + 6]
145:	

math_test_2$46:	; parameter x, offset 30
146:		fstp qword [bp + 52]
148:	

math_test_2$47:	; push float y
149:		fld qword [bp + 14]
151:	

math_test_2$48:	; parameter y, offset 38
152:		fstp qword [bp + 60]
154:	

math_test_2$49:	; call function noellipse-noellipse pow
155:		mov word [bp + 46], math_test_2$50
156:		mov [bp + 48], bp
157:		add bp, 46
158:		jmp pow
160:	

math_test_2$50:	; post call
162:	

math_test_2$51:	; £temporary4099 = return_value
164:	

math_test_2$52:	; parameter £temporary4099, offset 24
165:		fstp qword [bp + 46]
167:	

math_test_2$53:	; parameter errno, offset 32
168:		mov a2548, [errno]
169:		mov [bp + 54], a2548
171:	

math_test_2$54:	; call function noellipse-ellipse printf, extra 0
172:		mov word [bp + 22], math_test_2$55
173:		mov [bp + 24], bp
174:		add bp, 22
175:		mov di, bp
176:		add di, 26
177:		jmp printf
179:	

math_test_2$55:	; post call
181:	

math_test_2$56:	; errno = 0
182:		mov word [errno], 0
184:	

math_test_2$57:	; call header integral zero 0 stack zero 0
186:	

math_test_2$58:	; parameter string_0A#, offset 6
187:		mov word [bp + 28], string_0A#
189:	

math_test_2$59:	; call function noellipse-ellipse printf, extra 0
190:		mov word [bp + 22], math_test_2$60
191:		mov [bp + 24], bp
192:		add bp, 22
193:		mov di, bp
194:		jmp printf
196:	

math_test_2$60:	; post call
198:	

math_test_2$61:	; call header integral zero 0 stack zero 0
200:	

math_test_2$62:	; parameter string_ldexp2825f2C2025i29203D2025f0A0A#, offset 6
201:		mov word [bp + 28], string_ldexp2825f2C2025i29203D2025f0A0A#
203:	

math_test_2$63:	; push float x
204:		fld qword [bp + 6]
206:	

math_test_2$64:	; parameter x, offset 8
207:		fstp qword [bp + 30]
209:	

math_test_2$65:	; push float y
210:		fld qword [bp + 14]
212:	

math_test_2$66:	; £temporary4102 = float_to_int y (Double -> Signed_Int)
213:		fistp word [container2bytes#]
214:		mov t2549, [container2bytes#]
216:	

math_test_2$67:	; parameter £temporary4102, offset 16
217:		mov [bp + 38], t2549
219:	

math_test_2$68:	; call header integral zero 0 stack zero 0
221:	

math_test_2$69:	; push float x
222:		fld qword [bp + 6]
224:	

math_test_2$70:	; parameter x, offset 24
225:		fstp qword [bp + 46]
227:	

math_test_2$71:	; push float y
228:		fld qword [bp + 14]
230:	

math_test_2$72:	; £temporary4103 = float_to_int y (Double -> Signed_Int)
231:		fistp word [container2bytes#]
232:		mov t2550, [container2bytes#]
234:	

math_test_2$73:	; parameter £temporary4103, offset 32
235:		mov [bp + 54], t2550
237:	

math_test_2$74:	; call function noellipse-noellipse ldexp
238:		mov word [bp + 40], math_test_2$75
239:		mov [bp + 42], bp
240:		add bp, 40
241:		jmp ldexp
243:	

math_test_2$75:	; post call
245:	

math_test_2$76:	; £temporary4104 = return_value
247:	

math_test_2$77:	; parameter £temporary4104, offset 18
248:		fstp qword [bp + 40]
250:	

math_test_2$78:	; call function noellipse-ellipse printf, extra 0
251:		mov word [bp + 22], math_test_2$79
252:		mov [bp + 24], bp
253:		add bp, 22
254:		mov di, bp
255:		add di, 18
256:		jmp printf
258:	

math_test_2$79:	; post call
260:	

math_test_2$80:	; return
261:		mov t2551, [bp]
262:		mov di, [bp + 4]
263:		mov bp, [bp + 2]
264:		jmp t2551
266:	

math_test_2$81:	; function end math_test_2
