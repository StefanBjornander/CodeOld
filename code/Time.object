1:	

clock:	; SetReturnValue -1
2:		mov ebx, -1
4:	

clock$1:	; Return -1
5:		mov ax, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp ax
10:	

clock$2:	; FunctionEnd clock
1:	

@7313$isLeapYear:	; SignedModulo £temporary3231 year 4
2:		mov ax, [bp + 6]
4:		xor dx, dx
5:		idiv word [@7315$int2$4#]
11:	

@7313$isLeapYear$1:	; NotEqual 4 £temporary3231 0
12:		cmp dx, 0
13:		jne @7313$isLeapYear$4
15:	

@7313$isLeapYear$2:	; SignedModulo £temporary3233 year 100
16:		mov ax, [bp + 6]
18:		xor dx, dx
19:		idiv word [@7321$int2$100#]
25:	

@7313$isLeapYear$3:	; NotEqual 6 £temporary3233 0
26:		cmp dx, 0
27:		jne @7313$isLeapYear$6
29:	

@7313$isLeapYear$4:	; SignedModulo £temporary3236 year 400
30:		mov ax, [bp + 6]
32:		xor dx, dx
33:		idiv word [@7328$int2$400#]
39:	

@7313$isLeapYear$5:	; NotEqual 8 £temporary3236 0
40:		cmp dx, 0
41:		jne @7313$isLeapYear$8
43:	

@7313$isLeapYear$6:	; Assign £temporary3239 1
44:		mov bx, 1
46:	

@7313$isLeapYear$7:	; Goto 9
47:		jmp @7313$isLeapYear$9
49:	

@7313$isLeapYear$8:	; Assign £temporary3239 0
50:		mov bx, 0
52:	

@7313$isLeapYear$9:	; SetReturnValue £temporary3239
54:	

@7313$isLeapYear$10:	; Return £temporary3239
55:		mov ax, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp ax
60:	

@7313$isLeapYear$11:	; FunctionEnd isLeapYear
1:	

time:	; AssignRegister ah 42
2:		mov ah, 42
4:	

time$1:	; Interrupt 33
5:		int 33
7:	

time$2:	; InspectRegister £temporary3241 cx
9:	

time$3:	; BinarySubtract year £temporary3241 1900
10:		sub cx, 1900
11:		mov [bp + 12], cx
13:	

time$4:	; InspectRegister £temporary3243 dh
15:	

time$5:	; BinarySubtract month £temporary3243 1
16:		sub dh, 1
17:		mov [bp + 14], dh
19:	

time$6:	; InspectRegister £temporary3245 dl
21:	

time$7:	; Assign monthDay £temporary3245
22:		mov [bp + 15], dl
24:	

time$8:	; AssignRegister ah 44
25:		mov ah, 44
27:	

time$9:	; Interrupt 33
28:		int 33
30:	

time$10:	; InspectRegister £temporary3247 ch
32:	

time$11:	; Assign hour £temporary3247
33:		mov [bp + 16], ch
35:	

time$12:	; InspectRegister £temporary3248 cl
37:	

time$13:	; Assign min £temporary3248
38:		mov [bp + 17], cl
40:	

time$14:	; InspectRegister £temporary3249 dh
42:	

time$15:	; Assign sec £temporary3249
43:		mov [bp + 18], dh
45:	

time$16:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
47:	

time$17:	; Call 19 localeconv 0
48:		mov word [bp + 19], time$18
49:		mov [bp + 21], bp
50:		add bp, 19
51:		jmp localeconv
53:	

time$18:	; PostCall 19
55:	

time$19:	; GetReturnValue £temporary3250
60:	

time$20:	; Assign localeConvPtr £temporary3250
61:		mov [bp + 19], bx
63:	

time$21:	; Equal 25 localeConvPtr 0
64:		cmp word [bp + 19], 0
65:		je time$25
67:	

time$22:	; Deref £temporary3252 -> localeConvPtr localeConvPtr 2
68:		mov si, [bp + 19]
70:	

time$23:	; IntegralToIntegral £temporary3253 £temporary3252 -> localeConvPtr
71:		mov ax, [si + 2]
74:		cmp ax, 0
75:		jge time$24
76:		neg ax
78:		neg al
80:	

time$24:	; BinarySubtract hour hour £temporary3253
81:		sub [bp + 16], al
83:	

time$25:	; Assign daysOfMonths[0] 31
84:		mov word [bp + 19], 31
86:	

time$26:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
88:	

time$27:	; Parameter 21 year 6
89:		mov ax, [bp + 12]
90:		mov [bp + 27], ax
92:	

time$28:	; Call 21 isLeapYear 0
93:		mov word [bp + 21], time$29
94:		mov [bp + 23], bp
95:		add bp, 21
96:		jmp @7313$isLeapYear
98:	

time$29:	; PostCall 21
100:	

time$30:	; GetReturnValue £temporary3255
105:	

time$31:	; Equal 34 £temporary3255 0
106:		cmp bx, 0
107:		je time$34
109:	

time$32:	; Assign £temporary3260 29
110:		mov ax, 29
112:	

time$33:	; Goto 35
113:		jmp time$35
115:	

time$34:	; Assign £temporary3260 28
116:		mov ax, 28
118:	

time$35:	; Assign daysOfMonths[1] £temporary3260
119:		mov [bp + 21], ax
121:	

time$36:	; Assign daysOfMonths[2] 31
122:		mov word [bp + 23], 31
124:	

time$37:	; Assign daysOfMonths[3] 30
125:		mov word [bp + 25], 30
127:	

time$38:	; Assign daysOfMonths[4] 31
128:		mov word [bp + 27], 31
130:	

time$39:	; Assign daysOfMonths[5] 30
131:		mov word [bp + 29], 30
133:	

time$40:	; Assign daysOfMonths[6] 31
134:		mov word [bp + 31], 31
136:	

time$41:	; Assign daysOfMonths[7] 31
137:		mov word [bp + 33], 31
139:	

time$42:	; Assign daysOfMonths[8] 30
140:		mov word [bp + 35], 30
142:	

time$43:	; Assign daysOfMonths[9] 31
143:		mov word [bp + 37], 31
145:	

time$44:	; Assign daysOfMonths[10] 30
146:		mov word [bp + 39], 30
148:	

time$45:	; Assign daysOfMonths[11] 31
149:		mov word [bp + 41], 31
151:	

time$46:	; IntegralToIntegral £temporary3273 monthDay
152:		mov al, [bp + 15]
154:		and ax, 255
156:		cmp al, 0
157:		jge time$47
158:		neg al
160:		neg ax
162:	

time$47:	; BinarySubtract yearDay £temporary3273 1
163:		sub ax, 1
164:		mov [bp + 43], ax
166:	

time$48:	; Assign monthIndex 0
167:		mov word [bp + 45], 0
169:	

time$49:	; IntegralToIntegral £temporary3275 month
170:		mov al, [bp + 14]
172:		and ax, 255
174:		cmp al, 0
175:		jge time$50
176:		neg al
178:		neg ax
180:	

time$50:	; SignedGreaterThanEqual 57 monthIndex £temporary3275
181:		cmp [bp + 45], ax
182:		jge time$57
184:	

time$51:	; UnsignedMultiply £temporary3279 monthIndex 2
185:		mov ax, [bp + 45]
187:		xor dx, dx
188:		mul word [@7435$int2$2#]
194:	

time$52:	; BinaryAdd £temporary3280 daysOfMonths £temporary3279
195:		mov si, bp
196:		add si, 19
197:		add si, ax
199:	

time$53:	; Deref £temporary3278 -> £temporary3280 £temporary3280 0
201:	

time$54:	; BinaryAdd yearDay yearDay £temporary3278 -> £temporary3280
202:		mov ax, [si]
203:		add [bp + 43], ax
205:	

time$55:	; Increment monthIndex
206:		inc word [bp + 45]
208:	

time$56:	; Goto 49
209:		jmp time$49
211:	

time$57:	; IntegralToIntegral £temporary3283 sec
212:		mov al, [bp + 18]
214:		and ax, 255
216:		cmp al, 0
217:		jge time$58
218:		neg al
220:		neg ax
222:	

time$58:	; Assign s$tm_sec £temporary3283
223:		mov [bp + 47], ax
225:	

time$59:	; IntegralToIntegral £temporary3285 min
226:		mov al, [bp + 17]
228:		and ax, 255
230:		cmp al, 0
231:		jge time$60
232:		neg al
234:		neg ax
236:	

time$60:	; Assign s$tm_min £temporary3285
237:		mov [bp + 49], ax
239:	

time$61:	; IntegralToIntegral £temporary3287 hour
240:		mov al, [bp + 16]
242:		and ax, 255
244:		cmp al, 0
245:		jge time$62
246:		neg al
248:		neg ax
250:	

time$62:	; Assign s$tm_hour £temporary3287
251:		mov [bp + 51], ax
253:	

time$63:	; IntegralToIntegral £temporary3289 monthDay
254:		mov al, [bp + 15]
256:		and ax, 255
258:		cmp al, 0
259:		jge time$64
260:		neg al
262:		neg ax
264:	

time$64:	; Assign s$tm_mday £temporary3289
265:		mov [bp + 53], ax
267:	

time$65:	; IntegralToIntegral £temporary3291 month
268:		mov al, [bp + 14]
270:		and ax, 255
272:		cmp al, 0
273:		jge time$66
274:		neg al
276:		neg ax
278:	

time$66:	; Assign s$tm_mon £temporary3291
279:		mov [bp + 55], ax
281:	

time$67:	; Assign s$tm_year year
282:		mov ax, [bp + 12]
283:		mov [bp + 57], ax
285:	

time$68:	; Assign s$tm_wday 0
286:		mov word [bp + 59], 0
288:	

time$69:	; Assign s$tm_yday yearDay
289:		mov ax, [bp + 43]
290:		mov [bp + 61], ax
292:	

time$70:	; Assign s$tm_isdst 0
293:		mov word [bp + 63], 0
295:	

time$71:	; CallHeader 65 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
297:	

time$72:	; address £temporary3296 s
298:		mov si, bp
299:		add si, 47
301:	

time$73:	; Parameter 65 £temporary3296 6
302:		mov [bp + 71], si
304:	

time$74:	; Call 65 mktime 0
305:		mov word [bp + 65], time$75
306:		mov [bp + 67], bp
307:		add bp, 65
308:		jmp mktime
310:	

time$75:	; PostCall 65
312:	

time$76:	; GetReturnValue £temporary3297
317:	

time$77:	; Assign time £temporary3297
318:		mov [bp + 8], ebx
320:	

time$78:	; Equal 81 timePtr 0
321:		cmp word [bp + 6], 0
322:		je time$81
324:	

time$79:	; Deref £temporary3299 -> timePtr timePtr 0
325:		mov si, [bp + 6]
327:	

time$80:	; Assign £temporary3299 -> timePtr time
328:		mov eax, [bp + 8]
329:		mov [si], eax
331:	

time$81:	; SetReturnValue time
332:		mov ebx, [bp + 8]
334:	

time$82:	; Return time
335:		mov ax, [bp]
336:		mov di, [bp + 4]
337:		mov bp, [bp + 2]
338:		jmp ax
340:	

time$83:	; FunctionEnd time
1:	

mktime:	; Equal 28 tp 0
2:		cmp word [bp + 6], 0
3:		je mktime$28
5:	

mktime$1:	; Deref £temporary3304 -> tp tp 10
6:		mov si, [bp + 6]
8:	

mktime$2:	; BinarySubtract £temporary3305 £temporary3304 -> tp 69
9:		mov ax, [si + 10]
10:		sub ax, 69
12:	

mktime$3:	; SignedDivide £temporary3306 £temporary3305 4
14:		xor dx, dx
15:		idiv word [@7478$int2$4#]
21:	

mktime$4:	; IntegralToIntegral £temporary3307 £temporary3306
23:		and eax, 65535
25:		cmp ax, 0
26:		jge mktime$5
27:		neg ax
29:		neg eax
31:	

mktime$5:	; Assign leapDays £temporary3307
32:		mov [bp + 8], eax
34:	

mktime$6:	; Deref £temporary3308 -> tp tp 10
35:		mov si, [bp + 6]
37:	

mktime$7:	; BinarySubtract £temporary3309 £temporary3308 -> tp 70
38:		mov ax, [si + 10]
39:		sub ax, 70
41:	

mktime$8:	; SignedMultiply £temporary3310 £temporary3309 365
43:		xor dx, dx
44:		imul word [@7487$int2$365#]
50:	

mktime$9:	; IntegralToIntegral £temporary3311 £temporary3310
52:		and eax, 65535
54:		cmp ax, 0
55:		jge mktime$10
56:		neg ax
58:		neg eax
60:	

mktime$10:	; BinaryAdd £temporary3312 £temporary3311 leapDays
61:		add eax, [bp + 8]
63:	

mktime$11:	; Deref £temporary3313 -> tp tp 14
64:		mov si, [bp + 6]
66:	

mktime$12:	; IntegralToIntegral £temporary3314 £temporary3313 -> tp
67:		mov bx, [si + 14]
69:		and ebx, 65535
71:		cmp bx, 0
72:		jge mktime$13
73:		neg bx
75:		neg ebx
77:	

mktime$13:	; BinaryAdd totalDays £temporary3312 £temporary3314
78:		add eax, ebx
79:		mov [bp + 12], eax
81:	

mktime$14:	; SignedMultiply £temporary3316 totalDays 86400
82:		mov eax, [bp + 12]
84:		xor edx, edx
85:		imul dword [@7496$int4$86400#]
91:		mov ebx, eax
93:	

mktime$15:	; Deref £temporary3317 -> tp tp 4
94:		mov si, [bp + 6]
96:	

mktime$16:	; IntegralToIntegral £temporary3318 £temporary3317 -> tp
97:		mov ax, [si + 4]
99:		and eax, 65535
101:		cmp ax, 0
102:		jge mktime$17
103:		neg ax
105:		neg eax
107:	

mktime$17:	; SignedMultiply £temporary3319 £temporary3318 3600
109:		xor edx, edx
110:		imul dword [@7500$int4$3600#]
116:	

mktime$18:	; BinaryAdd £temporary3320 £temporary3316 £temporary3319
117:		add ebx, eax
119:	

mktime$19:	; Deref £temporary3321 -> tp tp 2
120:		mov si, [bp + 6]
122:	

mktime$20:	; IntegralToIntegral £temporary3322 £temporary3321 -> tp
123:		mov ax, [si + 2]
125:		and eax, 65535
127:		cmp ax, 0
128:		jge mktime$21
129:		neg ax
131:		neg eax
133:	

mktime$21:	; SignedMultiply £temporary3323 £temporary3322 60
135:		xor edx, edx
136:		imul dword [@7506$int4$60#]
142:	

mktime$22:	; BinaryAdd £temporary3324 £temporary3320 £temporary3323
143:		add ebx, eax
145:	

mktime$23:	; Deref £temporary3325 -> tp tp 0
146:		mov si, [bp + 6]
148:	

mktime$24:	; IntegralToIntegral £temporary3326 £temporary3325 -> tp
149:		mov ax, [si]
151:		and eax, 65535
153:		cmp ax, 0
154:		jge mktime$25
155:		neg ax
157:		neg eax
159:	

mktime$25:	; BinaryAdd £temporary3327 £temporary3324 £temporary3326
160:		add ebx, eax
162:	

mktime$26:	; SetReturnValue £temporary3327
164:	

mktime$27:	; Return £temporary3327
165:		mov ax, [bp]
166:		mov di, [bp + 4]
167:		mov bp, [bp + 2]
168:		jmp ax
170:	

mktime$28:	; SetReturnValue 0
171:		mov ebx, 0
173:	

mktime$29:	; Return 0
174:		mov ax, [bp]
175:		mov di, [bp + 4]
176:		mov bp, [bp + 2]
177:		jmp ax
179:	

mktime$30:	; FunctionEnd mktime
1:	

gmtime:	; Equal 89 timePtr 0
2:		cmp word [bp + 6], 0
3:		je gmtime$89
5:	

gmtime$1:	; Deref £temporary3329 -> timePtr timePtr 0
6:		mov si, [bp + 6]
8:	

gmtime$2:	; Assign time £temporary3329 -> timePtr
9:		mov eax, [si]
10:		mov [bp + 8], eax
12:	

gmtime$3:	; SignedModulo secondsOfDay time 86400
13:		mov eax, [bp + 8]
15:		xor edx, edx
16:		idiv dword [@7524$int4$86400#]
17:		mov [bp + 12], edx
19:	

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
20:		mov eax, [bp + 12]
22:		xor edx, edx
23:		idiv dword [@7528$int4$3600#]
24:		mov [bp + 16], edx
26:	

gmtime$5:	; SignedDivide £temporary3333 secondsOfDay 3600
27:		mov eax, [bp + 12]
29:		xor edx, edx
30:		idiv dword [@7533$int4$3600#]
36:	

gmtime$6:	; IntegralToIntegral £temporary3334 £temporary3333
39:		cmp eax, 0
40:		jge gmtime$7
41:		neg eax
43:		neg ax
45:	

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3334
46:		mov [@7516$g_timeStruct + 4], ax
48:	

gmtime$8:	; SignedDivide £temporary3336 secondsOfHour 60
49:		mov eax, [bp + 16]
51:		xor edx, edx
52:		idiv dword [@7538$int4$60#]
58:	

gmtime$9:	; IntegralToIntegral £temporary3337 £temporary3336
61:		cmp eax, 0
62:		jge gmtime$10
63:		neg eax
65:		neg ax
67:	

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3337
68:		mov [@7516$g_timeStruct + 2], ax
70:	

gmtime$11:	; SignedModulo £temporary3339 secondsOfHour 60
71:		mov eax, [bp + 16]
73:		xor edx, edx
74:		idiv dword [@7543$int4$60#]
80:	

gmtime$12:	; IntegralToIntegral £temporary3340 £temporary3339
83:		cmp edx, 0
84:		jge gmtime$13
85:		neg edx
87:		neg dx
89:	

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3340
90:		mov [@7516$g_timeStruct], dx
92:	

gmtime$14:	; SignedDivide totalDays time 86400
93:		mov eax, [bp + 8]
95:		xor edx, edx
96:		idiv dword [@7547$int4$86400#]
97:		mov [bp + 20], eax
99:	

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
100:		cmp dword [bp + 20], 3
101:		jge gmtime$20
103:	

gmtime$16:	; BinaryAdd £temporary3344 totalDays 4
104:		mov eax, [bp + 20]
105:		add eax, 4
107:	

gmtime$17:	; IntegralToIntegral £temporary3345 £temporary3344
110:		cmp eax, 0
111:		jge gmtime$18
112:		neg eax
114:		neg ax
116:	

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3345
117:		mov [@7516$g_timeStruct + 12], ax
119:	

gmtime$19:	; Goto 24
120:		jmp gmtime$24
122:	

gmtime$20:	; BinarySubtract £temporary3347 totalDays 3
123:		mov eax, [bp + 20]
124:		sub eax, 3
126:	

gmtime$21:	; SignedModulo £temporary3348 £temporary3347 7
128:		xor edx, edx
129:		idiv dword [@7563$int4$7#]
135:	

gmtime$22:	; IntegralToIntegral £temporary3349 £temporary3348
138:		cmp edx, 0
139:		jge gmtime$23
140:		neg edx
142:		neg dx
144:	

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3349
145:		mov [@7516$g_timeStruct + 12], dx
147:	

gmtime$24:	; SignedDivide £temporary3350 totalDays 365
148:		mov eax, [bp + 20]
150:		xor edx, edx
151:		idiv dword [@7568$int4$365#]
157:	

gmtime$25:	; BinaryAdd £temporary3351 £temporary3350 1970
158:		add eax, 1970
160:	

gmtime$26:	; IntegralToIntegral £temporary3352 £temporary3351
163:		cmp eax, 0
164:		jge gmtime$27
165:		neg eax
167:		neg ax
169:	

gmtime$27:	; Assign year £temporary3352
170:		mov [bp + 24], ax
172:	

gmtime$28:	; BinarySubtract £temporary3353 year 1969
173:		mov ax, [bp + 24]
174:		sub ax, 1969
176:	

gmtime$29:	; SignedDivide leapDays £temporary3353 4
178:		xor dx, dx
179:		idiv word [@7578$int2$4#]
180:		mov [bp + 26], ax
182:	

gmtime$30:	; SignedModulo totalDays totalDays 365
183:		mov eax, [bp + 20]
185:		xor edx, edx
186:		idiv dword [@7582$int4$365#]
187:		mov [bp + 20], edx
189:	

gmtime$31:	; IntegralToIntegral £temporary3356 leapDays
190:		mov ax, [bp + 26]
192:		and eax, 65535
194:		cmp ax, 0
195:		jge gmtime$32
196:		neg ax
198:		neg eax
200:	

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3356
201:		sub [bp + 20], eax
203:	

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
204:		cmp dword [bp + 20], 0
205:		jge gmtime$44
207:	

gmtime$34:	; Decrement year
208:		dec word [bp + 24]
210:	

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
212:	

gmtime$36:	; Parameter 28 year 6
213:		mov ax, [bp + 24]
214:		mov [bp + 34], ax
216:	

gmtime$37:	; Call 28 isLeapYear 0
217:		mov word [bp + 28], gmtime$38
218:		mov [bp + 30], bp
219:		add bp, 28
220:		jmp @7313$isLeapYear
222:	

gmtime$38:	; PostCall 28
224:	

gmtime$39:	; GetReturnValue £temporary3360
229:	

gmtime$40:	; Equal 43 £temporary3360 0
230:		cmp bx, 0
231:		je gmtime$43
233:	

gmtime$41:	; BinaryAdd totalDays totalDays 366
234:		add dword [bp + 20], 366
236:	

gmtime$42:	; Goto 44
237:		jmp gmtime$44
239:	

gmtime$43:	; BinaryAdd totalDays totalDays 365
240:		add dword [bp + 20], 365
242:	

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
243:		mov ax, [bp + 24]
244:		sub ax, 1900
245:		mov [@7516$g_timeStruct + 10], ax
247:	

gmtime$45:	; IntegralToIntegral £temporary3367 totalDays
248:		mov eax, [bp + 20]
251:		cmp eax, 0
252:		jge gmtime$46
253:		neg eax
255:		neg ax
257:	

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3367
258:		mov [@7516$g_timeStruct + 14], ax
260:	

gmtime$47:	; Assign daysOfMonths[0] 31
261:		mov word [bp + 28], 31
263:	

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
265:	

gmtime$49:	; Parameter 30 year 6
266:		mov ax, [bp + 24]
267:		mov [bp + 36], ax
269:	

gmtime$50:	; Call 30 isLeapYear 0
270:		mov word [bp + 30], gmtime$51
271:		mov [bp + 32], bp
272:		add bp, 30
273:		jmp @7313$isLeapYear
275:	

gmtime$51:	; PostCall 30
277:	

gmtime$52:	; GetReturnValue £temporary3368
282:	

gmtime$53:	; Equal 56 £temporary3368 0
283:		cmp bx, 0
284:		je gmtime$56
286:	

gmtime$54:	; Assign £temporary3373 29
287:		mov ax, 29
289:	

gmtime$55:	; Goto 57
290:		jmp gmtime$57
292:	

gmtime$56:	; Assign £temporary3373 28
293:		mov ax, 28
295:	

gmtime$57:	; Assign daysOfMonths[1] £temporary3373
296:		mov [bp + 30], ax
298:	

gmtime$58:	; Assign daysOfMonths[2] 31
299:		mov word [bp + 32], 31
301:	

gmtime$59:	; Assign daysOfMonths[3] 30
302:		mov word [bp + 34], 30
304:	

gmtime$60:	; Assign daysOfMonths[4] 31
305:		mov word [bp + 36], 31
307:	

gmtime$61:	; Assign daysOfMonths[5] 30
308:		mov word [bp + 38], 30
310:	

gmtime$62:	; Assign daysOfMonths[6] 31
311:		mov word [bp + 40], 31
313:	

gmtime$63:	; Assign daysOfMonths[7] 31
314:		mov word [bp + 42], 31
316:	

gmtime$64:	; Assign daysOfMonths[8] 30
317:		mov word [bp + 44], 30
319:	

gmtime$65:	; Assign daysOfMonths[9] 31
320:		mov word [bp + 46], 31
322:	

gmtime$66:	; Assign daysOfMonths[10] 30
323:		mov word [bp + 48], 30
325:	

gmtime$67:	; Assign daysOfMonths[11] 31
326:		mov word [bp + 50], 31
328:	

gmtime$68:	; Assign month 0
329:		mov word [bp + 52], 0
331:	

gmtime$69:	; UnsignedMultiply £temporary3387 month 2
332:		mov ax, [bp + 52]
334:		xor dx, dx
335:		mul word [@7658$int2$2#]
341:	

gmtime$70:	; BinaryAdd £temporary3388 daysOfMonths £temporary3387
342:		mov si, bp
343:		add si, 28
344:		add si, ax
346:	

gmtime$71:	; Deref £temporary3386 -> £temporary3388 £temporary3388 0
348:	

gmtime$72:	; IntegralToIntegral £temporary3389 £temporary3386 -> £temporary3388
349:		mov ax, [si]
351:		and eax, 65535
353:		cmp ax, 0
354:		jge gmtime$73
355:		neg ax
357:		neg eax
359:	

gmtime$73:	; SignedLessThan 82 totalDays £temporary3389
360:		cmp [bp + 20], eax
361:		jl gmtime$82
363:	

gmtime$74:	; Assign £temporary3391 month
364:		mov ax, [bp + 52]
366:	

gmtime$75:	; Increment month
367:		inc word [bp + 52]
369:	

gmtime$76:	; UnsignedMultiply £temporary3393 £temporary3391 2
371:		xor dx, dx
372:		mul word [@7666$int2$2#]
378:	

gmtime$77:	; BinaryAdd £temporary3394 daysOfMonths £temporary3393
379:		mov si, bp
380:		add si, 28
381:		add si, ax
383:	

gmtime$78:	; Deref £temporary3392 -> £temporary3394 £temporary3394 0
385:	

gmtime$79:	; IntegralToIntegral £temporary3395 £temporary3392 -> £temporary3394
386:		mov ax, [si]
388:		and eax, 65535
390:		cmp ax, 0
391:		jge gmtime$80
392:		neg ax
394:		neg eax
396:	

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3395
397:		sub [bp + 20], eax
399:	

gmtime$81:	; Goto 69
400:		jmp gmtime$69
402:	

gmtime$82:	; Assign g_timeStruct$tm_mon month
403:		mov ax, [bp + 52]
404:		mov [@7516$g_timeStruct + 8], ax
406:	

gmtime$83:	; BinaryAdd £temporary3399 totalDays 1
407:		mov eax, [bp + 20]
408:		add eax, 1
410:	

gmtime$84:	; IntegralToIntegral £temporary3400 £temporary3399
413:		cmp eax, 0
414:		jge gmtime$85
415:		neg eax
417:		neg ax
419:	

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3400
420:		mov [@7516$g_timeStruct + 6], ax
422:	

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
423:		mov word [@7516$g_timeStruct + 16], -1
425:	

gmtime$87:	; SetReturnValue (@7516$g_timeStruct,0)
426:		mov bx, @7516$g_timeStruct
428:	

gmtime$88:	; Return (@7516$g_timeStruct,0)
429:		mov ax, [bp]
430:		mov di, [bp + 4]
431:		mov bp, [bp + 2]
432:		jmp ax
434:	

gmtime$89:	; SetReturnValue 0
435:		mov bx, 0
437:	

gmtime$90:	; Return 0
438:		mov ax, [bp]
439:		mov di, [bp + 4]
440:		mov bp, [bp + 2]
441:		jmp ax
443:	

gmtime$91:	; FunctionEnd gmtime
1:	

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

localtime$1:	; Parameter 8 timePtr 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

localtime$2:	; Call 8 gmtime 0
8:		mov word [bp + 8], localtime$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp gmtime
13:	

localtime$3:	; PostCall 8
15:	

localtime$4:	; GetReturnValue £temporary3404
20:	

localtime$5:	; Assign tmPtr £temporary3404
21:		mov [bp + 8], bx
23:	

localtime$6:	; Deref £temporary3405 -> timePtr timePtr 0
24:		mov si, [bp + 6]
26:	

localtime$7:	; Assign t £temporary3405 -> timePtr
27:		mov eax, [si]
28:		mov [bp + 10], eax
30:	

localtime$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
32:	

localtime$9:	; Call 14 localeconv 0
33:		mov word [bp + 14], localtime$10
34:		mov [bp + 16], bp
35:		add bp, 14
36:		jmp localeconv
38:	

localtime$10:	; PostCall 14
40:	

localtime$11:	; GetReturnValue £temporary3406
45:	

localtime$12:	; Assign localeConvPtr £temporary3406
46:		mov [bp + 14], bx
48:	

localtime$13:	; Equal 25 localeConvPtr 0
49:		cmp word [bp + 14], 0
50:		je localtime$25
52:	

localtime$14:	; Deref £temporary3408 -> tmPtr tmPtr 16
53:		mov si, [bp + 8]
55:	

localtime$15:	; NotEqual 19 £temporary3408 -> tmPtr 1
56:		cmp word [si + 16], 1
57:		jne localtime$19
59:	

localtime$16:	; Deref £temporary3410 -> localeConvPtr localeConvPtr 0
60:		mov si, [bp + 14]
62:	

localtime$17:	; Assign £temporary3415 £temporary3410 -> localeConvPtr
63:		mov ax, [si]
65:	

localtime$18:	; Goto 21
66:		jmp localtime$21
68:	

localtime$19:	; Deref £temporary3411 -> localeConvPtr localeConvPtr 2
69:		mov si, [bp + 14]
71:	

localtime$20:	; Assign £temporary3415 £temporary3411 -> localeConvPtr
72:		mov ax, [si + 2]
74:	

localtime$21:	; Assign timeZone £temporary3415
75:		mov [bp + 16], ax
77:	

localtime$22:	; IntegralToIntegral £temporary3416 timeZone
78:		mov ax, [bp + 16]
80:		and eax, 65535
82:		cmp ax, 0
83:		jge localtime$23
84:		neg ax
86:		neg eax
88:	

localtime$23:	; SignedMultiply £temporary3417 £temporary3416 3600
90:		xor edx, edx
91:		imul dword [@7711$int4$3600#]
97:	

localtime$24:	; BinaryAdd t t £temporary3417
98:		add [bp + 10], eax
100:	

localtime$25:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
102:	

localtime$26:	; address £temporary3419 t
103:		mov si, bp
104:		add si, 10
106:	

localtime$27:	; Parameter 16 £temporary3419 6
107:		mov [bp + 22], si
109:	

localtime$28:	; Call 16 gmtime 0
110:		mov word [bp + 16], localtime$29
111:		mov [bp + 18], bp
112:		add bp, 16
113:		jmp gmtime
115:	

localtime$29:	; PostCall 16
117:	

localtime$30:	; GetReturnValue £temporary3420
122:	

localtime$31:	; SetReturnValue £temporary3420
124:	

localtime$32:	; Return £temporary3420
125:		mov ax, [bp]
126:		mov di, [bp + 4]
127:		mov bp, [bp + 2]
128:		jmp ax
130:	

localtime$33:	; FunctionEnd localtime
1:	

difftime:	; BinarySubtract £temporary3424 time2 time1
2:		mov eax, [bp + 10]
3:		sub eax, [bp + 6]
5:	

difftime$1:	; IntegralToFloating £temporary3425 £temporary3424
6:		mov [container4bytes#], eax
7:		fild dword [container4bytes#]
9:	

difftime$2:	; SetReturnValue £temporary3425
11:	

difftime$3:	; Return £temporary3425
12:		mov ax, [bp]
13:		mov di, [bp + 4]
14:		mov bp, [bp + 2]
15:		jmp ax
17:	

difftime$4:	; FunctionEnd difftime
1:	

asctime:	; Assign localeConvPtr 0
2:		mov word [bp + 8], 0
4:	

asctime$1:	; Equal 7 localeConvPtr 0
5:		cmp word [bp + 8], 0
6:		je asctime$7
8:	

asctime$2:	; Deref £temporary3427 -> localeConvPtr localeConvPtr 4
9:		mov si, [bp + 8]
11:	

asctime$3:	; Equal 7 £temporary3427 -> localeConvPtr 0
12:		cmp word [si + 4], 0
13:		je asctime$7
15:	

asctime$4:	; Deref £temporary3430 -> localeConvPtr localeConvPtr 4
16:		mov si, [bp + 8]
18:	

asctime$5:	; Assign shortDayList £temporary3430 -> localeConvPtr
19:		mov ax, [si + 4]
20:		mov [bp + 10], ax
22:	

asctime$6:	; Goto 8
23:		jmp asctime$8
25:	

asctime$7:	; Assign shortDayList g_shortDayList
26:		mov word [bp + 10], @7734$g_shortDayList
28:	

asctime$8:	; Equal 14 localeConvPtr 0
29:		cmp word [bp + 8], 0
30:		je asctime$14
32:	

asctime$9:	; Deref £temporary3432 -> localeConvPtr localeConvPtr 8
33:		mov si, [bp + 8]
35:	

asctime$10:	; Equal 14 £temporary3432 -> localeConvPtr 0
36:		cmp word [si + 8], 0
37:		je asctime$14
39:	

asctime$11:	; Deref £temporary3435 -> localeConvPtr localeConvPtr 8
40:		mov si, [bp + 8]
42:	

asctime$12:	; Assign shortMonthList £temporary3435 -> localeConvPtr
43:		mov ax, [si + 8]
44:		mov [bp + 12], ax
46:	

asctime$13:	; Goto 15
47:		jmp asctime$15
49:	

asctime$14:	; Assign shortMonthList g_shortMonthList
50:		mov word [bp + 12], @7755$g_shortMonthList
52:	

asctime$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
54:	

asctime$16:	; Parameter 14 g_timeString 6
55:		mov word [bp + 20], @7726$g_timeString
57:	

asctime$17:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
58:		mov word [bp + 22], @7797$string_25s2025s2025i202502i3A2502i3A2502i2025i#
60:	

asctime$18:	; Deref £temporary3436 -> tp tp 12
61:		mov si, [bp + 6]
63:	

asctime$19:	; UnsignedMultiply £temporary3438 £temporary3436 -> tp 2
64:		mov ax, [si + 12]
66:		xor dx, dx
67:		mul word [@7800$int2$2#]
73:	

asctime$20:	; BinaryAdd £temporary3439 shortDayList £temporary3438
74:		mov si, [bp + 10]
75:		add si, ax
77:	

asctime$21:	; Deref £temporary3437 -> £temporary3439 £temporary3439 0
79:	

asctime$22:	; Parameter 14 £temporary3437 -> £temporary3439 10
80:		mov ax, [si]
81:		mov [bp + 24], ax
83:	

asctime$23:	; Deref £temporary3440 -> tp tp 8
84:		mov si, [bp + 6]
86:	

asctime$24:	; UnsignedMultiply £temporary3442 £temporary3440 -> tp 2
87:		mov ax, [si + 8]
89:		xor dx, dx
90:		mul word [@7805$int2$2#]
96:	

asctime$25:	; BinaryAdd £temporary3443 shortMonthList £temporary3442
97:		mov si, [bp + 12]
98:		add si, ax
100:	

asctime$26:	; Deref £temporary3441 -> £temporary3443 £temporary3443 0
102:	

asctime$27:	; Parameter 14 £temporary3441 -> £temporary3443 12
103:		mov ax, [si]
104:		mov [bp + 26], ax
106:	

asctime$28:	; Deref £temporary3444 -> tp tp 6
107:		mov si, [bp + 6]
109:	

asctime$29:	; Parameter 14 £temporary3444 -> tp 14
110:		mov ax, [si + 6]
111:		mov [bp + 28], ax
113:	

asctime$30:	; Deref £temporary3445 -> tp tp 4
114:		mov si, [bp + 6]
116:	

asctime$31:	; Parameter 14 £temporary3445 -> tp 16
117:		mov ax, [si + 4]
118:		mov [bp + 30], ax
120:	

asctime$32:	; Deref £temporary3446 -> tp tp 2
121:		mov si, [bp + 6]
123:	

asctime$33:	; Parameter 14 £temporary3446 -> tp 18
124:		mov ax, [si + 2]
125:		mov [bp + 32], ax
127:	

asctime$34:	; Deref £temporary3447 -> tp tp 0
128:		mov si, [bp + 6]
130:	

asctime$35:	; Parameter 14 £temporary3447 -> tp 20
131:		mov ax, [si]
132:		mov [bp + 34], ax
134:	

asctime$36:	; Deref £temporary3448 -> tp tp 10
135:		mov si, [bp + 6]
137:	

asctime$37:	; BinaryAdd £temporary3449 £temporary3448 -> tp 1900
138:		mov ax, [si + 10]
139:		add ax, 1900
141:	

asctime$38:	; Parameter 14 £temporary3449 22
142:		mov [bp + 36], ax
144:	

asctime$39:	; Call 14 sprintf 0
145:		mov word [bp + 14], asctime$40
146:		mov [bp + 16], bp
147:		add bp, 14
148:		mov di, bp
149:		add di, 14
150:		jmp sprintf
152:	

asctime$40:	; PostCall 14
154:	

asctime$41:	; SetReturnValue g_timeString
155:		mov bx, @7726$g_timeString
157:	

asctime$42:	; Return g_timeString
158:		mov ax, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp ax
163:	

asctime$43:	; FunctionEnd asctime
1:	

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
5:	

ctime$2:	; Parameter 8 time 6
6:		mov ax, [bp + 6]
7:		mov [bp + 14], ax
9:	

ctime$3:	; Call 8 localtime 0
10:		mov word [bp + 8], ctime$4
11:		mov [bp + 10], bp
12:		add bp, 8
13:		jmp localtime
15:	

ctime$4:	; PostCall 8
17:	

ctime$5:	; GetReturnValue £temporary3460
22:	

ctime$6:	; Parameter 8 £temporary3460 6
23:		mov [bp + 14], bx
25:	

ctime$7:	; Call 8 asctime 0
26:		mov word [bp + 8], ctime$8
27:		mov [bp + 10], bp
28:		add bp, 8
29:		jmp asctime
31:	

ctime$8:	; PostCall 8
33:	

ctime$9:	; GetReturnValue £temporary3461
38:	

ctime$10:	; SetReturnValue £temporary3461
40:	

ctime$11:	; Return £temporary3461
41:		mov ax, [bp]
42:		mov di, [bp + 4]
43:		mov bp, [bp + 2]
44:		jmp ax
46:	

ctime$12:	; FunctionEnd ctime
1:	

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strftime$1:	; Call 14 localeconv 0
4:		mov word [bp + 14], strftime$2
5:		mov [bp + 16], bp
6:		add bp, 14
7:		jmp localeconv
9:	

strftime$2:	; PostCall 14
11:	

strftime$3:	; GetReturnValue £temporary3464
16:	

strftime$4:	; Assign localeConvPtr £temporary3464
17:		mov [bp + 14], bx
19:	

strftime$5:	; Equal 11 localeConvPtr 0
20:		cmp word [bp + 14], 0
21:		je strftime$11
23:	

strftime$6:	; Deref £temporary3466 -> localeConvPtr localeConvPtr 4
24:		mov si, [bp + 14]
26:	

strftime$7:	; Equal 11 £temporary3466 -> localeConvPtr 0
27:		cmp word [si + 4], 0
28:		je strftime$11
30:	

strftime$8:	; Deref £temporary3469 -> localeConvPtr localeConvPtr 4
31:		mov si, [bp + 14]
33:	

strftime$9:	; Assign shortDayList £temporary3469 -> localeConvPtr
34:		mov ax, [si + 4]
35:		mov [bp + 16], ax
37:	

strftime$10:	; Goto 12
38:		jmp strftime$12
40:	

strftime$11:	; Assign shortDayList g_shortDayList
41:		mov word [bp + 16], @7734$g_shortDayList
43:	

strftime$12:	; Equal 18 localeConvPtr 0
44:		cmp word [bp + 14], 0
45:		je strftime$18
47:	

strftime$13:	; Deref £temporary3471 -> localeConvPtr localeConvPtr 6
48:		mov si, [bp + 14]
50:	

strftime$14:	; Equal 18 £temporary3471 -> localeConvPtr 0
51:		cmp word [si + 6], 0
52:		je strftime$18
54:	

strftime$15:	; Deref £temporary3474 -> localeConvPtr localeConvPtr 6
55:		mov si, [bp + 14]
57:	

strftime$16:	; Assign longDayList £temporary3474 -> localeConvPtr
58:		mov ax, [si + 6]
59:		mov [bp + 20], ax
61:	

strftime$17:	; Goto 19
62:		jmp strftime$19
64:	

strftime$18:	; Assign longDayList g_longDayList
65:		mov word [bp + 20], @7742$g_longDayList
67:	

strftime$19:	; Equal 25 localeConvPtr 0
68:		cmp word [bp + 14], 0
69:		je strftime$25
71:	

strftime$20:	; Deref £temporary3476 -> localeConvPtr localeConvPtr 8
72:		mov si, [bp + 14]
74:	

strftime$21:	; Equal 25 £temporary3476 -> localeConvPtr 0
75:		cmp word [si + 8], 0
76:		je strftime$25
78:	

strftime$22:	; Deref £temporary3479 -> localeConvPtr localeConvPtr 8
79:		mov si, [bp + 14]
81:	

strftime$23:	; Assign shortMonthList £temporary3479 -> localeConvPtr
82:		mov ax, [si + 8]
83:		mov [bp + 18], ax
85:	

strftime$24:	; Goto 26
86:		jmp strftime$26
88:	

strftime$25:	; Assign shortMonthList g_shortMonthList
89:		mov word [bp + 18], @7755$g_shortMonthList
91:	

strftime$26:	; Equal 32 localeConvPtr 0
92:		cmp word [bp + 14], 0
93:		je strftime$32
95:	

strftime$27:	; Deref £temporary3481 -> localeConvPtr localeConvPtr 10
96:		mov si, [bp + 14]
98:	

strftime$28:	; Equal 32 £temporary3481 -> localeConvPtr 0
99:		cmp word [si + 10], 0
100:		je strftime$32
102:	

strftime$29:	; Deref £temporary3484 -> localeConvPtr localeConvPtr 10
103:		mov si, [bp + 14]
105:	

strftime$30:	; Assign longMonthList £temporary3484 -> localeConvPtr
106:		mov ax, [si + 10]
107:		mov [bp + 22], ax
109:	

strftime$31:	; Goto 33
110:		jmp strftime$33
112:	

strftime$32:	; Assign longMonthList g_longMonthList
113:		mov word [bp + 22], @7768$g_longMonthList
115:	

strftime$33:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
117:	

strftime$34:	; Parameter 24 result 6
118:		mov ax, [bp + 6]
119:		mov [bp + 30], ax
121:	

strftime$35:	; Parameter 24 string_# 8
122:		mov word [bp + 32], @7882$string_#
124:	

strftime$36:	; Call 24 strcpy 0
125:		mov word [bp + 24], strftime$37
126:		mov [bp + 26], bp
127:		add bp, 24
128:		jmp strcpy
130:	

strftime$37:	; PostCall 24
132:	

strftime$38:	; Assign weekNumberStartSunday 0
133:		mov word [bp + 26], 0
135:	

strftime$39:	; Assign weekNumberStartMonday 0
136:		mov word [bp + 28], 0
138:	

strftime$40:	; Assign index 0
139:		mov word [bp + 24], 0
141:	

strftime$41:	; BinaryAdd £temporary3487 format index
142:		mov si, [bp + 10]
143:		add si, [bp + 24]
145:	

strftime$42:	; Deref £temporary3486 -> £temporary3487 £temporary3487 0
147:	

strftime$43:	; Equal 318 £temporary3486 -> £temporary3487 0
148:		cmp byte [si], 0
149:		je strftime$318
151:	

strftime$44:	; BinaryAdd £temporary3491 format index
152:		mov si, [bp + 10]
153:		add si, [bp + 24]
155:	

strftime$45:	; Deref £temporary3490 -> £temporary3491 £temporary3491 0
157:	

strftime$46:	; NotEqual 291 £temporary3490 -> £temporary3491 37
158:		cmp byte [si], 37
159:		jne strftime$291
161:	

strftime$47:	; Increment index
162:		inc word [bp + 24]
164:	

strftime$48:	; Assign £temporary3493 index
165:		mov ax, [bp + 24]
167:	

strftime$49:	; BinaryAdd £temporary3495 format £temporary3493
168:		mov si, [bp + 10]
169:		add si, ax
171:	

strftime$50:	; Deref £temporary3494 -> £temporary3495 £temporary3495 0
173:	

strftime$51:	; Case 75 £temporary3494 -> £temporary3495 97
174:		mov al, [si]
175:		cmp al, 97
176:		je strftime$75
178:	

strftime$52:	; Case 85 £temporary3494 -> £temporary3495 65
179:		cmp al, 65
180:		je strftime$85
182:	

strftime$53:	; Case 95 £temporary3494 -> £temporary3495 98
183:		cmp al, 98
184:		je strftime$95
186:	

strftime$54:	; Case 105 £temporary3494 -> £temporary3495 66
187:		cmp al, 66
188:		je strftime$105
190:	

strftime$55:	; Case 115 £temporary3494 -> £temporary3495 99
191:		cmp al, 99
192:		je strftime$115
194:	

strftime$56:	; Case 135 £temporary3494 -> £temporary3495 100
195:		cmp al, 100
196:		je strftime$135
198:	

strftime$57:	; Case 143 £temporary3494 -> £temporary3495 72
199:		cmp al, 72
200:		je strftime$143
202:	

strftime$58:	; Case 151 £temporary3494 -> £temporary3495 73
203:		cmp al, 73
204:		je strftime$151
206:	

strftime$59:	; Case 160 £temporary3494 -> £temporary3495 106
207:		cmp al, 106
208:		je strftime$160
210:	

strftime$60:	; Case 168 £temporary3494 -> £temporary3495 109
211:		cmp al, 109
212:		je strftime$168
214:	

strftime$61:	; Case 177 £temporary3494 -> £temporary3495 77
215:		cmp al, 77
216:		je strftime$177
218:	

strftime$62:	; Case 185 £temporary3494 -> £temporary3495 112
219:		cmp al, 112
220:		je strftime$185
222:	

strftime$63:	; Case 197 £temporary3494 -> £temporary3495 83
223:		cmp al, 83
224:		je strftime$197
226:	

strftime$64:	; Case 205 £temporary3494 -> £temporary3495 85
227:		cmp al, 85
228:		je strftime$205
230:	

strftime$65:	; Case 212 £temporary3494 -> £temporary3495 119
231:		cmp al, 119
232:		je strftime$212
234:	

strftime$66:	; Case 220 £temporary3494 -> £temporary3495 87
235:		cmp al, 87
236:		je strftime$220
238:	

strftime$67:	; Case 227 £temporary3494 -> £temporary3495 120
239:		cmp al, 120
240:		je strftime$227
242:	

strftime$68:	; Case 239 £temporary3494 -> £temporary3495 88
243:		cmp al, 88
244:		je strftime$239
246:	

strftime$69:	; Case 251 £temporary3494 -> £temporary3495 121
247:		cmp al, 121
248:		je strftime$251
250:	

strftime$70:	; Case 260 £temporary3494 -> £temporary3495 89
251:		cmp al, 89
252:		je strftime$260
254:	

strftime$71:	; Case 269 £temporary3494 -> £temporary3495 90
255:		cmp al, 90
256:		je strftime$269
258:	

strftime$72:	; Case 280 £temporary3494 -> £temporary3495 37
259:		cmp al, 37
260:		je strftime$280
262:	

strftime$73:	; CaseEnd £temporary3494 -> £temporary3495
264:	

strftime$74:	; Goto 285
265:		jmp strftime$285
267:	

strftime$75:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
269:	

strftime$76:	; Parameter 50 add 6
270:		mov [bp + 56], bp
271:		add word [bp + 56], 30
273:	

strftime$77:	; Deref £temporary3496 -> tp tp 12
274:		mov si, [bp + 12]
276:	

strftime$78:	; UnsignedMultiply £temporary3498 £temporary3496 -> tp 2
277:		mov ax, [si + 12]
279:		xor dx, dx
280:		mul word [@7916$int2$2#]
286:	

strftime$79:	; BinaryAdd £temporary3499 shortDayList £temporary3498
287:		mov si, [bp + 16]
288:		add si, ax
290:	

strftime$80:	; Deref £temporary3497 -> £temporary3499 £temporary3499 0
292:	

strftime$81:	; Parameter 50 £temporary3497 -> £temporary3499 8
293:		mov ax, [si]
294:		mov [bp + 58], ax
296:	

strftime$82:	; Call 50 strcpy 0
297:		mov word [bp + 50], strftime$83
298:		mov [bp + 52], bp
299:		add bp, 50
300:		jmp strcpy
302:	

strftime$83:	; PostCall 50
304:	

strftime$84:	; Goto 297
305:		jmp strftime$297
307:	

strftime$85:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
309:	

strftime$86:	; Parameter 50 add 6
310:		mov [bp + 56], bp
311:		add word [bp + 56], 30
313:	

strftime$87:	; Deref £temporary3501 -> tp tp 12
314:		mov si, [bp + 12]
316:	

strftime$88:	; UnsignedMultiply £temporary3503 £temporary3501 -> tp 2
317:		mov ax, [si + 12]
319:		xor dx, dx
320:		mul word [@7924$int2$2#]
326:	

strftime$89:	; BinaryAdd £temporary3504 longDayList £temporary3503
327:		mov si, [bp + 20]
328:		add si, ax
330:	

strftime$90:	; Deref £temporary3502 -> £temporary3504 £temporary3504 0
332:	

strftime$91:	; Parameter 50 £temporary3502 -> £temporary3504 8
333:		mov ax, [si]
334:		mov [bp + 58], ax
336:	

strftime$92:	; Call 50 strcpy 0
337:		mov word [bp + 50], strftime$93
338:		mov [bp + 52], bp
339:		add bp, 50
340:		jmp strcpy
342:	

strftime$93:	; PostCall 50
344:	

strftime$94:	; Goto 297
345:		jmp strftime$297
347:	

strftime$95:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
349:	

strftime$96:	; Parameter 50 add 6
350:		mov [bp + 56], bp
351:		add word [bp + 56], 30
353:	

strftime$97:	; Deref £temporary3506 -> tp tp 8
354:		mov si, [bp + 12]
356:	

strftime$98:	; UnsignedMultiply £temporary3508 £temporary3506 -> tp 2
357:		mov ax, [si + 8]
359:		xor dx, dx
360:		mul word [@7932$int2$2#]
366:	

strftime$99:	; BinaryAdd £temporary3509 shortMonthList £temporary3508
367:		mov si, [bp + 18]
368:		add si, ax
370:	

strftime$100:	; Deref £temporary3507 -> £temporary3509 £temporary3509 0
372:	

strftime$101:	; Parameter 50 £temporary3507 -> £temporary3509 8
373:		mov ax, [si]
374:		mov [bp + 58], ax
376:	

strftime$102:	; Call 50 strcpy 0
377:		mov word [bp + 50], strftime$103
378:		mov [bp + 52], bp
379:		add bp, 50
380:		jmp strcpy
382:	

strftime$103:	; PostCall 50
384:	

strftime$104:	; Goto 297
385:		jmp strftime$297
387:	

strftime$105:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
389:	

strftime$106:	; Parameter 50 add 6
390:		mov [bp + 56], bp
391:		add word [bp + 56], 30
393:	

strftime$107:	; Deref £temporary3511 -> tp tp 8
394:		mov si, [bp + 12]
396:	

strftime$108:	; UnsignedMultiply £temporary3513 £temporary3511 -> tp 2
397:		mov ax, [si + 8]
399:		xor dx, dx
400:		mul word [@7940$int2$2#]
406:	

strftime$109:	; BinaryAdd £temporary3514 longMonthList £temporary3513
407:		mov si, [bp + 22]
408:		add si, ax
410:	

strftime$110:	; Deref £temporary3512 -> £temporary3514 £temporary3514 0
412:	

strftime$111:	; Parameter 50 £temporary3512 -> £temporary3514 8
413:		mov ax, [si]
414:		mov [bp + 58], ax
416:	

strftime$112:	; Call 50 strcpy 0
417:		mov word [bp + 50], strftime$113
418:		mov [bp + 52], bp
419:		add bp, 50
420:		jmp strcpy
422:	

strftime$113:	; PostCall 50
424:	

strftime$114:	; Goto 297
425:		jmp strftime$297
427:	

strftime$115:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
429:	

strftime$116:	; Parameter 50 add 6
430:		mov [bp + 56], bp
431:		add word [bp + 56], 30
433:	

strftime$117:	; Parameter 50 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
434:		mov word [bp + 58], @7946$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#
436:	

strftime$118:	; Deref £temporary3516 -> tp tp 10
437:		mov si, [bp + 12]
439:	

strftime$119:	; BinaryAdd £temporary3517 £temporary3516 -> tp 1900
440:		mov ax, [si + 10]
441:		add ax, 1900
443:	

strftime$120:	; Parameter 50 £temporary3517 10
444:		mov [bp + 60], ax
446:	

strftime$121:	; Deref £temporary3518 -> tp tp 8
447:		mov si, [bp + 12]
449:	

strftime$122:	; BinaryAdd £temporary3519 £temporary3518 -> tp 1
450:		mov ax, [si + 8]
451:		add ax, 1
453:	

strftime$123:	; Parameter 50 £temporary3519 12
454:		mov [bp + 62], ax
456:	

strftime$124:	; Deref £temporary3520 -> tp tp 6
457:		mov si, [bp + 12]
459:	

strftime$125:	; Parameter 50 £temporary3520 -> tp 14
460:		mov ax, [si + 6]
461:		mov [bp + 64], ax
463:	

strftime$126:	; Deref £temporary3521 -> tp tp 4
464:		mov si, [bp + 12]
466:	

strftime$127:	; Parameter 50 £temporary3521 -> tp 16
467:		mov ax, [si + 4]
468:		mov [bp + 66], ax
470:	

strftime$128:	; Deref £temporary3522 -> tp tp 2
471:		mov si, [bp + 12]
473:	

strftime$129:	; Parameter 50 £temporary3522 -> tp 18
474:		mov ax, [si + 2]
475:		mov [bp + 68], ax
477:	

strftime$130:	; Deref £temporary3523 -> tp tp 0
478:		mov si, [bp + 12]
480:	

strftime$131:	; Parameter 50 £temporary3523 -> tp 20
481:		mov ax, [si]
482:		mov [bp + 70], ax
484:	

strftime$132:	; Call 50 sprintf 0
485:		mov word [bp + 50], strftime$133
486:		mov [bp + 52], bp
487:		add bp, 50
488:		mov di, bp
489:		add di, 12
490:		jmp sprintf
492:	

strftime$133:	; PostCall 50
494:	

strftime$134:	; Goto 297
495:		jmp strftime$297
497:	

strftime$135:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
499:	

strftime$136:	; Parameter 50 add 6
500:		mov [bp + 56], bp
501:		add word [bp + 56], 30
503:	

strftime$137:	; Parameter 50 string_2502i# 8
504:		mov word [bp + 58], @7962$string_2502i#
506:	

strftime$138:	; Deref £temporary3525 -> tp tp 6
507:		mov si, [bp + 12]
509:	

strftime$139:	; Parameter 50 £temporary3525 -> tp 10
510:		mov ax, [si + 6]
511:		mov [bp + 60], ax
513:	

strftime$140:	; Call 50 sprintf 0
514:		mov word [bp + 50], strftime$141
515:		mov [bp + 52], bp
516:		add bp, 50
517:		mov di, bp
518:		add di, 2
519:		jmp sprintf
521:	

strftime$141:	; PostCall 50
523:	

strftime$142:	; Goto 297
524:		jmp strftime$297
526:	

strftime$143:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
528:	

strftime$144:	; Parameter 50 add 6
529:		mov [bp + 56], bp
530:		add word [bp + 56], 30
532:	

strftime$145:	; Parameter 50 string_2502i# 8
533:		mov word [bp + 58], @7967$string_2502i#
535:	

strftime$146:	; Deref £temporary3527 -> tp tp 4
536:		mov si, [bp + 12]
538:	

strftime$147:	; Parameter 50 £temporary3527 -> tp 10
539:		mov ax, [si + 4]
540:		mov [bp + 60], ax
542:	

strftime$148:	; Call 50 sprintf 0
543:		mov word [bp + 50], strftime$149
544:		mov [bp + 52], bp
545:		add bp, 50
546:		mov di, bp
547:		add di, 2
548:		jmp sprintf
550:	

strftime$149:	; PostCall 50
552:	

strftime$150:	; Goto 297
553:		jmp strftime$297
555:	

strftime$151:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
557:	

strftime$152:	; Parameter 50 add 6
558:		mov [bp + 56], bp
559:		add word [bp + 56], 30
561:	

strftime$153:	; Parameter 50 string_2502i# 8
562:		mov word [bp + 58], @7972$string_2502i#
564:	

strftime$154:	; Deref £temporary3529 -> tp tp 4
565:		mov si, [bp + 12]
567:	

strftime$155:	; SignedModulo £temporary3530 £temporary3529 -> tp 12
568:		mov ax, [si + 4]
570:		xor dx, dx
571:		idiv word [@7975$int2$12#]
577:	

strftime$156:	; Parameter 50 £temporary3530 10
578:		mov [bp + 60], dx
580:	

strftime$157:	; Call 50 sprintf 0
581:		mov word [bp + 50], strftime$158
582:		mov [bp + 52], bp
583:		add bp, 50
584:		mov di, bp
585:		add di, 2
586:		jmp sprintf
588:	

strftime$158:	; PostCall 50
590:	

strftime$159:	; Goto 297
591:		jmp strftime$297
593:	

strftime$160:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
595:	

strftime$161:	; Parameter 50 add 6
596:		mov [bp + 56], bp
597:		add word [bp + 56], 30
599:	

strftime$162:	; Parameter 50 string_2503i# 8
600:		mov word [bp + 58], @7980$string_2503i#
602:	

strftime$163:	; Deref £temporary3532 -> tp tp 14
603:		mov si, [bp + 12]
605:	

strftime$164:	; Parameter 50 £temporary3532 -> tp 10
606:		mov ax, [si + 14]
607:		mov [bp + 60], ax
609:	

strftime$165:	; Call 50 sprintf 0
610:		mov word [bp + 50], strftime$166
611:		mov [bp + 52], bp
612:		add bp, 50
613:		mov di, bp
614:		add di, 2
615:		jmp sprintf
617:	

strftime$166:	; PostCall 50
619:	

strftime$167:	; Goto 297
620:		jmp strftime$297
622:	

strftime$168:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
624:	

strftime$169:	; Parameter 50 add 6
625:		mov [bp + 56], bp
626:		add word [bp + 56], 30
628:	

strftime$170:	; Parameter 50 string_2502i# 8
629:		mov word [bp + 58], @7985$string_2502i#
631:	

strftime$171:	; Deref £temporary3534 -> tp tp 8
632:		mov si, [bp + 12]
634:	

strftime$172:	; BinaryAdd £temporary3535 £temporary3534 -> tp 1
635:		mov ax, [si + 8]
636:		add ax, 1
638:	

strftime$173:	; Parameter 50 £temporary3535 10
639:		mov [bp + 60], ax
641:	

strftime$174:	; Call 50 sprintf 0
642:		mov word [bp + 50], strftime$175
643:		mov [bp + 52], bp
644:		add bp, 50
645:		mov di, bp
646:		add di, 2
647:		jmp sprintf
649:	

strftime$175:	; PostCall 50
651:	

strftime$176:	; Goto 297
652:		jmp strftime$297
654:	

strftime$177:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
656:	

strftime$178:	; Parameter 50 add 6
657:		mov [bp + 56], bp
658:		add word [bp + 56], 30
660:	

strftime$179:	; Parameter 50 string_2502i# 8
661:		mov word [bp + 58], @7993$string_2502i#
663:	

strftime$180:	; Deref £temporary3537 -> tp tp 2
664:		mov si, [bp + 12]
666:	

strftime$181:	; Parameter 50 £temporary3537 -> tp 10
667:		mov ax, [si + 2]
668:		mov [bp + 60], ax
670:	

strftime$182:	; Call 50 sprintf 0
671:		mov word [bp + 50], strftime$183
672:		mov [bp + 52], bp
673:		add bp, 50
674:		mov di, bp
675:		add di, 2
676:		jmp sprintf
678:	

strftime$183:	; PostCall 50
680:	

strftime$184:	; Goto 297
681:		jmp strftime$297
683:	

strftime$185:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
685:	

strftime$186:	; Parameter 50 add 6
686:		mov [bp + 56], bp
687:		add word [bp + 56], 30
689:	

strftime$187:	; Parameter 50 string_25s# 8
690:		mov word [bp + 58], @7998$string_25s#
692:	

strftime$188:	; Deref £temporary3539 -> tp tp 4
693:		mov si, [bp + 12]
695:	

strftime$189:	; SignedGreaterThanEqual 192 £temporary3539 -> tp 12
696:		cmp word [si + 4], 12
697:		jge strftime$192
699:	

strftime$190:	; Assign £temporary3544 string_AM#
700:		mov ax, @8003$string_AM#
702:	

strftime$191:	; Goto 193
703:		jmp strftime$193
705:	

strftime$192:	; Assign £temporary3544 string_PM#
706:		mov ax, @8004$string_PM#
708:	

strftime$193:	; Parameter 50 £temporary3544 10
709:		mov [bp + 60], ax
711:	

strftime$194:	; Call 50 sprintf 0
712:		mov word [bp + 50], strftime$195
713:		mov [bp + 52], bp
714:		add bp, 50
715:		mov di, bp
716:		add di, 2
717:		jmp sprintf
719:	

strftime$195:	; PostCall 50
721:	

strftime$196:	; Goto 297
722:		jmp strftime$297
724:	

strftime$197:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
726:	

strftime$198:	; Parameter 50 add 6
727:		mov [bp + 56], bp
728:		add word [bp + 56], 30
730:	

strftime$199:	; Parameter 50 string_2502i# 8
731:		mov word [bp + 58], @8014$string_2502i#
733:	

strftime$200:	; Deref £temporary3546 -> tp tp 0
734:		mov si, [bp + 12]
736:	

strftime$201:	; Parameter 50 £temporary3546 -> tp 10
737:		mov ax, [si]
738:		mov [bp + 60], ax
740:	

strftime$202:	; Call 50 sprintf 0
741:		mov word [bp + 50], strftime$203
742:		mov [bp + 52], bp
743:		add bp, 50
744:		mov di, bp
745:		add di, 2
746:		jmp sprintf
748:	

strftime$203:	; PostCall 50
750:	

strftime$204:	; Goto 297
751:		jmp strftime$297
753:	

strftime$205:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
755:	

strftime$206:	; Parameter 50 add 6
756:		mov [bp + 56], bp
757:		add word [bp + 56], 30
759:	

strftime$207:	; Parameter 50 string_2502i# 8
760:		mov word [bp + 58], @8019$string_2502i#
762:	

strftime$208:	; Parameter 50 weekNumberStartSunday 10
763:		mov ax, [bp + 26]
764:		mov [bp + 60], ax
766:	

strftime$209:	; Call 50 sprintf 0
767:		mov word [bp + 50], strftime$210
768:		mov [bp + 52], bp
769:		add bp, 50
770:		mov di, bp
771:		add di, 2
772:		jmp sprintf
774:	

strftime$210:	; PostCall 50
776:	

strftime$211:	; Goto 297
777:		jmp strftime$297
779:	

strftime$212:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
781:	

strftime$213:	; Parameter 50 add 6
782:		mov [bp + 56], bp
783:		add word [bp + 56], 30
785:	

strftime$214:	; Parameter 50 string_2502i# 8
786:		mov word [bp + 58], @8023$string_2502i#
788:	

strftime$215:	; Deref £temporary3549 -> tp tp 12
789:		mov si, [bp + 12]
791:	

strftime$216:	; Parameter 50 £temporary3549 -> tp 10
792:		mov ax, [si + 12]
793:		mov [bp + 60], ax
795:	

strftime$217:	; Call 50 sprintf 0
796:		mov word [bp + 50], strftime$218
797:		mov [bp + 52], bp
798:		add bp, 50
799:		mov di, bp
800:		add di, 2
801:		jmp sprintf
803:	

strftime$218:	; PostCall 50
805:	

strftime$219:	; Goto 297
806:		jmp strftime$297
808:	

strftime$220:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
810:	

strftime$221:	; Parameter 50 add 6
811:		mov [bp + 56], bp
812:		add word [bp + 56], 30
814:	

strftime$222:	; Parameter 50 string_2502i# 8
815:		mov word [bp + 58], @8028$string_2502i#
817:	

strftime$223:	; Parameter 50 weekNumberStartMonday 10
818:		mov ax, [bp + 28]
819:		mov [bp + 60], ax
821:	

strftime$224:	; Call 50 sprintf 0
822:		mov word [bp + 50], strftime$225
823:		mov [bp + 52], bp
824:		add bp, 50
825:		mov di, bp
826:		add di, 2
827:		jmp sprintf
829:	

strftime$225:	; PostCall 50
831:	

strftime$226:	; Goto 297
832:		jmp strftime$297
834:	

strftime$227:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
836:	

strftime$228:	; Parameter 50 add 6
837:		mov [bp + 56], bp
838:		add word [bp + 56], 30
840:	

strftime$229:	; Parameter 50 string_2502i3A2502i3A2502i# 8
841:		mov word [bp + 58], @8032$string_2502i3A2502i3A2502i#
843:	

strftime$230:	; Deref £temporary3552 -> tp tp 4
844:		mov si, [bp + 12]
846:	

strftime$231:	; Parameter 50 £temporary3552 -> tp 10
847:		mov ax, [si + 4]
848:		mov [bp + 60], ax
850:	

strftime$232:	; Deref £temporary3553 -> tp tp 2
851:		mov si, [bp + 12]
853:	

strftime$233:	; Parameter 50 £temporary3553 -> tp 12
854:		mov ax, [si + 2]
855:		mov [bp + 62], ax
857:	

strftime$234:	; Deref £temporary3554 -> tp tp 0
858:		mov si, [bp + 12]
860:	

strftime$235:	; Parameter 50 £temporary3554 -> tp 14
861:		mov ax, [si]
862:		mov [bp + 64], ax
864:	

strftime$236:	; Call 50 sprintf 0
865:		mov word [bp + 50], strftime$237
866:		mov [bp + 52], bp
867:		add bp, 50
868:		mov di, bp
869:		add di, 6
870:		jmp sprintf
872:	

strftime$237:	; PostCall 50
874:	

strftime$238:	; Goto 297
875:		jmp strftime$297
877:	

strftime$239:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
879:	

strftime$240:	; Parameter 50 add 6
880:		mov [bp + 56], bp
881:		add word [bp + 56], 30
883:	

strftime$241:	; Parameter 50 string_2502i3A2502i3A2502i# 8
884:		mov word [bp + 58], @8039$string_2502i3A2502i3A2502i#
886:	

strftime$242:	; Deref £temporary3556 -> tp tp 4
887:		mov si, [bp + 12]
889:	

strftime$243:	; Parameter 50 £temporary3556 -> tp 10
890:		mov ax, [si + 4]
891:		mov [bp + 60], ax
893:	

strftime$244:	; Deref £temporary3557 -> tp tp 2
894:		mov si, [bp + 12]
896:	

strftime$245:	; Parameter 50 £temporary3557 -> tp 12
897:		mov ax, [si + 2]
898:		mov [bp + 62], ax
900:	

strftime$246:	; Deref £temporary3558 -> tp tp 0
901:		mov si, [bp + 12]
903:	

strftime$247:	; Parameter 50 £temporary3558 -> tp 14
904:		mov ax, [si]
905:		mov [bp + 64], ax
907:	

strftime$248:	; Call 50 sprintf 0
908:		mov word [bp + 50], strftime$249
909:		mov [bp + 52], bp
910:		add bp, 50
911:		mov di, bp
912:		add di, 6
913:		jmp sprintf
915:	

strftime$249:	; PostCall 50
917:	

strftime$250:	; Goto 297
918:		jmp strftime$297
920:	

strftime$251:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
922:	

strftime$252:	; Parameter 50 add 6
923:		mov [bp + 56], bp
924:		add word [bp + 56], 30
926:	

strftime$253:	; Parameter 50 string_2502i# 8
927:		mov word [bp + 58], @8046$string_2502i#
929:	

strftime$254:	; Deref £temporary3560 -> tp tp 10
930:		mov si, [bp + 12]
932:	

strftime$255:	; SignedModulo £temporary3561 £temporary3560 -> tp 100
933:		mov ax, [si + 10]
935:		xor dx, dx
936:		idiv word [@8049$int2$100#]
942:	

strftime$256:	; Parameter 50 £temporary3561 10
943:		mov [bp + 60], dx
945:	

strftime$257:	; Call 50 sprintf 0
946:		mov word [bp + 50], strftime$258
947:		mov [bp + 52], bp
948:		add bp, 50
949:		mov di, bp
950:		add di, 2
951:		jmp sprintf
953:	

strftime$258:	; PostCall 50
955:	

strftime$259:	; Goto 297
956:		jmp strftime$297
958:	

strftime$260:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
960:	

strftime$261:	; Parameter 50 add 6
961:		mov [bp + 56], bp
962:		add word [bp + 56], 30
964:	

strftime$262:	; Parameter 50 string_2502i# 8
965:		mov word [bp + 58], @8054$string_2502i#
967:	

strftime$263:	; Deref £temporary3563 -> tp tp 10
968:		mov si, [bp + 12]
970:	

strftime$264:	; BinaryAdd £temporary3564 £temporary3563 -> tp 1900
971:		mov ax, [si + 10]
972:		add ax, 1900
974:	

strftime$265:	; Parameter 50 £temporary3564 10
975:		mov [bp + 60], ax
977:	

strftime$266:	; Call 50 sprintf 0
978:		mov word [bp + 50], strftime$267
979:		mov [bp + 52], bp
980:		add bp, 50
981:		mov di, bp
982:		add di, 2
983:		jmp sprintf
985:	

strftime$267:	; PostCall 50
987:	

strftime$268:	; Goto 297
988:		jmp strftime$297
990:	

strftime$269:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
992:	

strftime$270:	; Parameter 50 add 6
993:		mov [bp + 56], bp
994:		add word [bp + 56], 30
996:	

strftime$271:	; Deref £temporary3566 -> tp tp 16
997:		mov si, [bp + 12]
999:	

strftime$272:	; Equal 275 £temporary3566 -> tp 0
1000:		cmp word [si + 16], 0
1001:		je strftime$275
1003:	

strftime$273:	; Assign £temporary3571 string_summer#
1004:		mov ax, @8063$string_summer#
1006:	

strftime$274:	; Goto 276
1007:		jmp strftime$276
1009:	

strftime$275:	; Assign £temporary3571 string_winter#
1010:		mov ax, @8064$string_winter#
1012:	

strftime$276:	; Parameter 50 £temporary3571 8
1013:		mov [bp + 58], ax
1015:	

strftime$277:	; Call 50 strcpy 0
1016:		mov word [bp + 50], strftime$278
1017:		mov [bp + 52], bp
1018:		add bp, 50
1019:		jmp strcpy
1021:	

strftime$278:	; PostCall 50
1023:	

strftime$279:	; Goto 297
1024:		jmp strftime$297
1026:	

strftime$280:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1028:	

strftime$281:	; Parameter 50 add 6
1029:		mov [bp + 56], bp
1030:		add word [bp + 56], 30
1032:	

strftime$282:	; Parameter 50 string_25# 8
1033:		mov word [bp + 58], @8076$string_25#
1035:	

strftime$283:	; Call 50 strcpy 0
1036:		mov word [bp + 50], strftime$284
1037:		mov [bp + 52], bp
1038:		add bp, 50
1039:		jmp strcpy
1041:	

strftime$284:	; PostCall 50
1043:	

strftime$285:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1045:	

strftime$286:	; Parameter 50 add 6
1046:		mov [bp + 56], bp
1047:		add word [bp + 56], 30
1049:	

strftime$287:	; Parameter 50 string_# 8
1050:		mov word [bp + 58], @8078$string_#
1052:	

strftime$288:	; Call 50 strcpy 0
1053:		mov word [bp + 50], strftime$289
1054:		mov [bp + 52], bp
1055:		add bp, 50
1056:		jmp strcpy
1058:	

strftime$289:	; PostCall 50
1060:	

strftime$290:	; Goto 297
1061:		jmp strftime$297
1063:	

strftime$291:	; Deref £temporary3575 -> add add 0
1064:		mov si, bp
1065:		add si, 30
1067:	

strftime$292:	; BinaryAdd £temporary3577 format index
1068:		mov di, [bp + 10]
1069:		add di, [bp + 24]
1071:	

strftime$293:	; Deref £temporary3576 -> £temporary3577 £temporary3577 0
1073:	

strftime$294:	; Assign £temporary3575 -> add £temporary3576 -> £temporary3577
1074:		mov al, [di]
1075:		mov [si], al
1077:	

strftime$295:	; Deref £temporary3578 -> add add 1
1078:		mov si, bp
1079:		add si, 30
1081:	

strftime$296:	; Assign £temporary3578 -> add 0
1082:		mov byte [si + 1], 0
1084:	

strftime$297:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1086:	

strftime$298:	; Parameter 50 result 6
1087:		mov ax, [bp + 6]
1088:		mov [bp + 56], ax
1090:	

strftime$299:	; Call 50 strlen 0
1091:		mov word [bp + 50], strftime$300
1092:		mov [bp + 52], bp
1093:		add bp, 50
1094:		jmp strlen
1096:	

strftime$300:	; PostCall 50
1098:	

strftime$301:	; GetReturnValue £temporary3579
1103:	

strftime$302:	; Assign x £temporary3579
1104:		mov [bp + 50], bx
1106:	

strftime$303:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1108:	

strftime$304:	; Parameter 52 add 6
1109:		mov [bp + 58], bp
1110:		add word [bp + 58], 30
1112:	

strftime$305:	; Call 52 strlen 0
1113:		mov word [bp + 52], strftime$306
1114:		mov [bp + 54], bp
1115:		add bp, 52
1116:		jmp strlen
1118:	

strftime$306:	; PostCall 52
1120:	

strftime$307:	; GetReturnValue £temporary3580
1125:	

strftime$308:	; Assign y £temporary3580
1126:		mov [bp + 52], bx
1128:	

strftime$309:	; BinaryAdd £temporary3581 x y
1129:		mov ax, [bp + 50]
1130:		add ax, [bp + 52]
1132:	

strftime$310:	; SignedGreaterThanEqual 318 £temporary3581 maxSize
1133:		cmp ax, [bp + 8]
1134:		jge strftime$318
1136:	

strftime$311:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1138:	

strftime$312:	; Parameter 54 result 6
1139:		mov ax, [bp + 6]
1140:		mov [bp + 60], ax
1142:	

strftime$313:	; Parameter 54 add 8
1143:		mov [bp + 62], bp
1144:		add word [bp + 62], 30
1146:	

strftime$314:	; Call 54 strcat 0
1147:		mov word [bp + 54], strftime$315
1148:		mov [bp + 56], bp
1149:		add bp, 54
1150:		jmp strcat
1152:	

strftime$315:	; PostCall 54
1154:	

strftime$316:	; Increment index
1155:		inc word [bp + 24]
1157:	

strftime$317:	; Goto 41
1158:		jmp strftime$41
1160:	

strftime$318:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1162:	

strftime$319:	; Parameter 24 result 6
1163:		mov ax, [bp + 6]
1164:		mov [bp + 30], ax
1166:	

strftime$320:	; Call 24 strlen 0
1167:		mov word [bp + 24], strftime$321
1168:		mov [bp + 26], bp
1169:		add bp, 24
1170:		jmp strlen
1172:	

strftime$321:	; PostCall 24
1174:	

strftime$322:	; GetReturnValue £temporary3584
1179:	

strftime$323:	; SetReturnValue £temporary3584
1181:	

strftime$324:	; Return £temporary3584
1182:		mov ax, [bp]
1183:		mov di, [bp + 4]
1184:		mov bp, [bp + 2]
1185:		jmp ax
1187:	

strftime$325:	; FunctionEnd strftime
