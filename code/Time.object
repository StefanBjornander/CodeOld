1:	

clock:	; return_value = -1
2:		mov ebx, -1
4:	

clock$1:	; return
5:		mov ax, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp ax
10:	

clock$2:	; function end clock
1:	

time:	; ah = 42
2:		mov ah, 42
4:	

time$1:	; interrupt 33
5:		int 33
7:	

time$2:	; £temporary2692 = cx
9:	

time$3:	; year = £temporary2692 - 1900
10:		sub cx, 1900
11:		mov [bp + 12], cx
13:	

time$4:	; £temporary2694 = dh
15:	

time$5:	; month = £temporary2694 - 1
16:		sub dh, 1
17:		mov [bp + 14], dh
19:	

time$6:	; £temporary2696 = dl
21:	

time$7:	; monthDay = £temporary2696
22:		mov [bp + 15], dl
24:	

time$8:	; call header integral zero 0 stack zero 0
26:	

time$9:	; parameter string_25i2D25i2D25i0A#, offset 6
27:		mov word [bp + 22], string_25i2D25i2D25i0A#
29:	

time$10:	; parameter year, offset 8
30:		mov ax, [bp + 12]
31:		mov [bp + 24], ax
33:	

time$11:	; £temporary2697 = int_to_int month (Signed_Short_Int -> Signed_Int)
34:		mov al, [bp + 14]
36:		and ax, 255
38:		cmp al, 0
39:		jge time$12
40:		neg al
42:		neg ax
44:	

time$12:	; parameter £temporary2697, offset 10
45:		mov [bp + 26], ax
47:	

time$13:	; £temporary2698 = int_to_int monthDay (Signed_Short_Int -> Signed_Int)
48:		mov al, [bp + 15]
50:		and ax, 255
52:		cmp al, 0
53:		jge time$14
54:		neg al
56:		neg ax
58:	

time$14:	; parameter £temporary2698, offset 12
59:		mov [bp + 28], ax
61:	

time$15:	; call function noellipse-ellipse printf, extra 0
62:		mov word [bp + 16], time$16
63:		mov [bp + 18], bp
64:		add bp, 16
65:		mov di, bp
66:		add di, 6
67:		jmp printf
69:	

time$16:	; post call
71:	

time$17:	; ah = 44
72:		mov ah, 44
74:	

time$18:	; interrupt 33
75:		int 33
77:	

time$19:	; £temporary2701 = ch
79:	

time$20:	; hour = £temporary2701
80:		mov [bp + 16], ch
82:	

time$21:	; £temporary2702 = cl
84:	

time$22:	; min = £temporary2702
85:		mov [bp + 17], cl
87:	

time$23:	; £temporary2703 = dh
89:	

time$24:	; sec = £temporary2703
90:		mov [bp + 18], dh
92:	

time$25:	; £temporary2704 = year % 4
93:		mov ax, [bp + 12]
95:		xor dx, dx
96:		idiv word [int2$4#]
102:	

time$26:	; if £temporary2704 != 0 goto 29
103:		cmp dx, 0
104:		jne time$29
106:	

time$27:	; £temporary2706 = 1
107:		mov ax, 1
109:	

time$28:	; goto 30
110:		jmp time$30
112:	

time$29:	; £temporary2706 = 0
113:		mov ax, 0
115:	

time$30:	; leapYear = £temporary2706
116:		mov [bp + 19], ax
118:	

time$31:	; daysOfMonths[0] = 31
119:		mov word [bp + 21], 31
121:	

time$32:	; if leapYear == 0 goto 35
122:		cmp word [bp + 19], 0
123:		je time$35
125:	

time$33:	; £temporary2711 = 29
126:		mov ax, 29
128:	

time$34:	; goto 36
129:		jmp time$36
131:	

time$35:	; £temporary2711 = 28
132:		mov ax, 28
134:	

time$36:	; daysOfMonths[1] = £temporary2711
135:		mov [bp + 23], ax
137:	

time$37:	; daysOfMonths[2] = 31
138:		mov word [bp + 25], 31
140:	

time$38:	; daysOfMonths[3] = 30
141:		mov word [bp + 27], 30
143:	

time$39:	; daysOfMonths[4] = 31
144:		mov word [bp + 29], 31
146:	

time$40:	; daysOfMonths[5] = 30
147:		mov word [bp + 31], 30
149:	

time$41:	; daysOfMonths[6] = 30
150:		mov word [bp + 33], 30
152:	

time$42:	; daysOfMonths[7] = 31
153:		mov word [bp + 35], 31
155:	

time$43:	; daysOfMonths[8] = 30
156:		mov word [bp + 37], 30
158:	

time$44:	; daysOfMonths[9] = 31
159:		mov word [bp + 39], 31
161:	

time$45:	; daysOfMonths[10] = 30
162:		mov word [bp + 41], 30
164:	

time$46:	; daysOfMonths[11] = 31
165:		mov word [bp + 43], 31
167:	

time$47:	; £temporary2724 = int_to_int monthDay (Signed_Short_Int -> Signed_Int)
168:		mov al, [bp + 15]
170:		and ax, 255
172:		cmp al, 0
173:		jge time$48
174:		neg al
176:		neg ax
178:	

time$48:	; yearDay = £temporary2724 - 1
179:		sub ax, 1
180:		mov [bp + 45], ax
182:	

time$49:	; mon = 0
183:		mov word [bp + 47], 0
185:	

time$50:	; £temporary2726 = int_to_int month (Signed_Short_Int -> Signed_Int)
186:		mov al, [bp + 14]
188:		and ax, 255
190:		cmp al, 0
191:		jge time$51
192:		neg al
194:		neg ax
196:	

time$51:	; if mon >= £temporary2726 goto 58
197:		cmp [bp + 47], ax
198:		jge time$58
200:	

time$52:	; £temporary2730 = mon * 2
201:		mov ax, [bp + 47]
203:		xor dx, dx
204:		mul word [int2$2#]
210:	

time$53:	; £temporary2731 = daysOfMonths + £temporary2730
211:		mov si, bp
212:		add si, 21
213:		add si, ax
215:	

time$54:	; £temporary2729 -> £temporary2731 = *£temporary2731
217:	

time$55:	; yearDay = yearDay + £temporary2729 -> £temporary2731
218:		mov ax, [si]
219:		add [bp + 45], ax
221:	

time$56:	; ++mon
222:		inc word [bp + 47]
224:	

time$57:	; goto 50
225:		jmp time$50
227:	

time$58:	; call header integral zero 0 stack zero 0
229:	

time$59:	; parameter string_25i2025i0A#, offset 6
230:		mov word [bp + 55], string_25i2025i0A#
232:	

time$60:	; parameter yearDay, offset 8
233:		mov ax, [bp + 45]
234:		mov [bp + 57], ax
236:	

time$61:	; £temporary2733 = int_to_int month (Signed_Short_Int -> Signed_Int)
237:		mov al, [bp + 14]
239:		and ax, 255
241:		cmp al, 0
242:		jge time$62
243:		neg al
245:		neg ax
247:	

time$62:	; parameter £temporary2733, offset 10
248:		mov [bp + 59], ax
250:	

time$63:	; call function noellipse-ellipse printf, extra 0
251:		mov word [bp + 49], time$64
252:		mov [bp + 51], bp
253:		add bp, 49
254:		mov di, bp
255:		add di, 4
256:		jmp printf
258:	

time$64:	; post call
260:	

time$65:	; £temporary2736 = int_to_int sec (Signed_Short_Int -> Signed_Int)
261:		mov al, [bp + 18]
263:		and ax, 255
265:		cmp al, 0
266:		jge time$66
267:		neg al
269:		neg ax
271:	

time$66:	; s$tm_sec = £temporary2736
272:		mov [bp + 49], ax
274:	

time$67:	; £temporary2738 = int_to_int min (Signed_Short_Int -> Signed_Int)
275:		mov al, [bp + 17]
277:		and ax, 255
279:		cmp al, 0
280:		jge time$68
281:		neg al
283:		neg ax
285:	

time$68:	; s$tm_min = £temporary2738
286:		mov [bp + 51], ax
288:	

time$69:	; £temporary2740 = int_to_int hour (Signed_Short_Int -> Signed_Int)
289:		mov al, [bp + 16]
291:		and ax, 255
293:		cmp al, 0
294:		jge time$70
295:		neg al
297:		neg ax
299:	

time$70:	; s$tm_hour = £temporary2740
300:		mov [bp + 53], ax
302:	

time$71:	; £temporary2742 = int_to_int monthDay (Signed_Short_Int -> Signed_Int)
303:		mov al, [bp + 15]
305:		and ax, 255
307:		cmp al, 0
308:		jge time$72
309:		neg al
311:		neg ax
313:	

time$72:	; s$tm_mday = £temporary2742
314:		mov [bp + 55], ax
316:	

time$73:	; £temporary2744 = int_to_int month (Signed_Short_Int -> Signed_Int)
317:		mov al, [bp + 14]
319:		and ax, 255
321:		cmp al, 0
322:		jge time$74
323:		neg al
325:		neg ax
327:	

time$74:	; s$tm_mon = £temporary2744
328:		mov [bp + 57], ax
330:	

time$75:	; s$tm_year = year
331:		mov ax, [bp + 12]
332:		mov [bp + 59], ax
334:	

time$76:	; s$tm_wday = 0
335:		mov word [bp + 61], 0
337:	

time$77:	; s$tm_yday = yearDay
338:		mov ax, [bp + 45]
339:		mov [bp + 63], ax
341:	

time$78:	; s$tm_isdst = 0
342:		mov word [bp + 65], 0
344:	

time$79:	; call header integral zero 0 stack zero 0
346:	

time$80:	; £temporary2749 = &s
347:		mov si, bp
348:		add si, 49
350:	

time$81:	; parameter £temporary2749, offset 6
351:		mov [bp + 73], si
353:	

time$82:	; call function noellipse-noellipse mktime
354:		mov word [bp + 67], time$83
355:		mov [bp + 69], bp
356:		add bp, 67
357:		jmp mktime
359:	

time$83:	; post call
361:	

time$84:	; £temporary2750 = return_value
366:	

time$85:	; time = £temporary2750
367:		mov [bp + 8], ebx
369:	

time$86:	; if timePtr == 0 goto 89
370:		cmp word [bp + 6], 0
371:		je time$89
373:	

time$87:	; £temporary2752 -> timePtr = *timePtr
374:		mov si, [bp + 6]
376:	

time$88:	; £temporary2752 -> timePtr = time
377:		mov eax, [bp + 8]
378:		mov [si], eax
380:	

time$89:	; return_value = time
381:		mov ebx, [bp + 8]
383:	

time$90:	; return
384:		mov ax, [bp]
385:		mov di, [bp + 4]
386:		mov bp, [bp + 2]
387:		jmp ax
389:	

time$91:	; function end time
1:	

mktime:	; if tp == 0 goto 28
2:		cmp word [bp + 6], 0
3:		je mktime$28
5:	

mktime$1:	; £temporary2763 -> tp = *tp, offset 10
6:		mov si, [bp + 6]
8:	

mktime$2:	; £temporary2764 = £temporary2763 -> tp - 69
9:		mov ax, [si + 10]
10:		sub ax, 69
12:	

mktime$3:	; £temporary2765 = £temporary2764 / 4
14:		xor dx, dx
15:		idiv word [int2$4#]
21:	

mktime$4:	; £temporary2766 = int_to_int £temporary2765 (Signed_Int -> Signed_Long_Int)
23:		and eax, 65535
25:		cmp ax, 0
26:		jge mktime$5
27:		neg ax
29:		neg eax
31:	

mktime$5:	; leapDays = £temporary2766
32:		mov [bp + 8], eax
34:	

mktime$6:	; £temporary2767 -> tp = *tp, offset 10
35:		mov si, [bp + 6]
37:	

mktime$7:	; £temporary2768 = £temporary2767 -> tp - 70
38:		mov ax, [si + 10]
39:		sub ax, 70
41:	

mktime$8:	; £temporary2769 = £temporary2768 * 365
43:		xor dx, dx
44:		imul word [int2$365#]
50:	

mktime$9:	; £temporary2770 = int_to_int £temporary2769 (Signed_Int -> Signed_Long_Int)
52:		and eax, 65535
54:		cmp ax, 0
55:		jge mktime$10
56:		neg ax
58:		neg eax
60:	

mktime$10:	; £temporary2771 = £temporary2770 + leapDays
61:		add eax, [bp + 8]
63:	

mktime$11:	; £temporary2772 -> tp = *tp, offset 14
64:		mov si, [bp + 6]
66:	

mktime$12:	; £temporary2773 = int_to_int £temporary2772 -> tp (Signed_Int -> Signed_Long_Int)
67:		mov bx, [si + 14]
69:		and ebx, 65535
71:		cmp bx, 0
72:		jge mktime$13
73:		neg bx
75:		neg ebx
77:	

mktime$13:	; totalDays = £temporary2771 + £temporary2773
78:		add eax, ebx
79:		mov [bp + 12], eax
81:	

mktime$14:	; £temporary2775 = totalDays * 86400
82:		mov eax, [bp + 12]
84:		xor edx, edx
85:		imul dword [int4$86400#]
91:		mov ebx, eax
93:	

mktime$15:	; £temporary2776 -> tp = *tp, offset 4
94:		mov si, [bp + 6]
96:	

mktime$16:	; £temporary2777 = int_to_int £temporary2776 -> tp (Signed_Int -> Signed_Long_Int)
97:		mov ax, [si + 4]
99:		and eax, 65535
101:		cmp ax, 0
102:		jge mktime$17
103:		neg ax
105:		neg eax
107:	

mktime$17:	; £temporary2778 = £temporary2777 * 3600
109:		xor edx, edx
110:		imul dword [int4$3600#]
116:	

mktime$18:	; £temporary2779 = £temporary2775 + £temporary2778
117:		add ebx, eax
119:	

mktime$19:	; £temporary2780 -> tp = *tp, offset 2
120:		mov si, [bp + 6]
122:	

mktime$20:	; £temporary2781 = int_to_int £temporary2780 -> tp (Signed_Int -> Signed_Long_Int)
123:		mov ax, [si + 2]
125:		and eax, 65535
127:		cmp ax, 0
128:		jge mktime$21
129:		neg ax
131:		neg eax
133:	

mktime$21:	; £temporary2782 = £temporary2781 * 60
135:		xor edx, edx
136:		imul dword [int4$60#]
142:	

mktime$22:	; £temporary2783 = £temporary2779 + £temporary2782
143:		add ebx, eax
145:	

mktime$23:	; £temporary2784 -> tp = *tp
146:		mov si, [bp + 6]
148:	

mktime$24:	; £temporary2785 = int_to_int £temporary2784 -> tp (Signed_Int -> Signed_Long_Int)
149:		mov ax, [si]
151:		and eax, 65535
153:		cmp ax, 0
154:		jge mktime$25
155:		neg ax
157:		neg eax
159:	

mktime$25:	; £temporary2786 = £temporary2783 + £temporary2785
160:		add ebx, eax
162:	

mktime$26:	; return_value = £temporary2786
164:	

mktime$27:	; return
165:		mov ax, [bp]
166:		mov di, [bp + 4]
167:		mov bp, [bp + 2]
168:		jmp ax
170:	

mktime$28:	; return_value = 0
171:		mov ebx, 0
173:	

mktime$29:	; return
174:		mov ax, [bp]
175:		mov di, [bp + 4]
176:		mov bp, [bp + 2]
177:		jmp ax
179:	

mktime$30:	; function end mktime
1:	

gmtime:	; year = 1970
2:		mov word [bp + 8], 1970
4:	

gmtime$1:	; if timePtr == 0 goto 86
5:		cmp word [bp + 6], 0
6:		je gmtime$86
8:	

gmtime$2:	; £temporary2788 -> timePtr = *timePtr
9:		mov si, [bp + 6]
11:	

gmtime$3:	; time = £temporary2788 -> timePtr
12:		mov eax, [si]
13:		mov [bp + 10], eax
15:	

gmtime$4:	; secondsOfDay = time % 86400
16:		mov eax, [bp + 10]
18:		xor edx, edx
19:		idiv dword [int4$86400#]
20:		mov [bp + 14], edx
22:	

gmtime$5:	; £temporary2791 = secondsOfDay / 3600
23:		mov eax, [bp + 14]
25:		xor edx, edx
26:		idiv dword [int4$3600#]
32:	

gmtime$6:	; £temporary2792 = int_to_int £temporary2791 (Signed_Long_Int -> Signed_Int)
35:		cmp eax, 0
36:		jge gmtime$7
37:		neg eax
39:		neg ax
41:	

gmtime$7:	; g_timeStruct$tm_hour = £temporary2792
42:		mov [@30$g_timeStruct + 4], ax
44:	

gmtime$8:	; £temporary2794 = secondsOfDay % 3600
45:		mov eax, [bp + 14]
47:		xor edx, edx
48:		idiv dword [int4$3600#]
54:	

gmtime$9:	; £temporary2795 = £temporary2794 / 60
55:		mov eax, edx
57:		xor edx, edx
58:		idiv dword [int4$60#]
64:	

gmtime$10:	; £temporary2796 = int_to_int £temporary2795 (Signed_Long_Int -> Signed_Int)
67:		cmp eax, 0
68:		jge gmtime$11
69:		neg eax
71:		neg ax
73:	

gmtime$11:	; g_timeStruct$tm_min = £temporary2796
74:		mov [@30$g_timeStruct + 2], ax
76:	

gmtime$12:	; £temporary2798 = secondsOfDay % 3600
77:		mov eax, [bp + 14]
79:		xor edx, edx
80:		idiv dword [int4$3600#]
86:	

gmtime$13:	; £temporary2799 = £temporary2798 % 60
87:		mov eax, edx
89:		xor edx, edx
90:		idiv dword [int4$60#]
96:	

gmtime$14:	; £temporary2800 = int_to_int £temporary2799 (Signed_Long_Int -> Signed_Int)
99:		cmp edx, 0
100:		jge gmtime$15
101:		neg edx
103:		neg dx
105:	

gmtime$15:	; g_timeStruct$tm_sec = £temporary2800
106:		mov [@30$g_timeStruct], dx
108:	

gmtime$16:	; totalDays = time / 86400
109:		mov eax, [bp + 10]
111:		xor edx, edx
112:		idiv dword [int4$86400#]
113:		mov [bp + 18], eax
115:	

gmtime$17:	; if totalDays >= 3 goto 22
116:		cmp dword [bp + 18], 3
117:		jge gmtime$22
119:	

gmtime$18:	; £temporary2804 = totalDays + 4
120:		mov eax, [bp + 18]
121:		add eax, 4
123:	

gmtime$19:	; £temporary2805 = int_to_int £temporary2804 (Signed_Long_Int -> Signed_Int)
126:		cmp eax, 0
127:		jge gmtime$20
128:		neg eax
130:		neg ax
132:	

gmtime$20:	; g_timeStruct$tm_wday = £temporary2805
133:		mov [@30$g_timeStruct + 12], ax
135:	

gmtime$21:	; goto 26
136:		jmp gmtime$26
138:	

gmtime$22:	; £temporary2807 = totalDays - 3
139:		mov eax, [bp + 18]
140:		sub eax, 3
142:	

gmtime$23:	; £temporary2808 = £temporary2807 % 7
144:		xor edx, edx
145:		idiv dword [int4$7#]
151:	

gmtime$24:	; £temporary2809 = int_to_int £temporary2808 (Signed_Long_Int -> Signed_Int)
154:		cmp edx, 0
155:		jge gmtime$25
156:		neg edx
158:		neg dx
160:	

gmtime$25:	; g_timeStruct$tm_wday = £temporary2809
161:		mov [@30$g_timeStruct + 12], dx
163:	

gmtime$26:	; £temporary2810 = year % 4
164:		mov ax, [bp + 8]
166:		xor dx, dx
167:		idiv word [int2$4#]
173:	

gmtime$27:	; if £temporary2810 != 0 goto 30
174:		cmp dx, 0
175:		jne gmtime$30
177:	

gmtime$28:	; £temporary2812 = year % 100
178:		mov ax, [bp + 8]
180:		xor dx, dx
181:		idiv word [int2$100#]
187:	

gmtime$29:	; if £temporary2812 != 0 goto 32
188:		cmp dx, 0
189:		jne gmtime$32
191:	

gmtime$30:	; £temporary2815 = year % 400
192:		mov ax, [bp + 8]
194:		xor dx, dx
195:		idiv word [int2$400#]
201:	

gmtime$31:	; if £temporary2815 != 0 goto 34
202:		cmp dx, 0
203:		jne gmtime$34
205:	

gmtime$32:	; £temporary2818 = 1
206:		mov ax, 1
208:	

gmtime$33:	; goto 35
209:		jmp gmtime$35
211:	

gmtime$34:	; £temporary2818 = 0
212:		mov ax, 0
214:	

gmtime$35:	; leapYear = £temporary2818
215:		mov [bp + 22], ax
217:	

gmtime$36:	; if leapYear == 0 goto 39
218:		cmp word [bp + 22], 0
219:		je gmtime$39
221:	

gmtime$37:	; £temporary2823 = 366
222:		mov ax, 366
224:	

gmtime$38:	; goto 40
225:		jmp gmtime$40
227:	

gmtime$39:	; £temporary2823 = 365
228:		mov ax, 365
230:	

gmtime$40:	; daysOfYear = £temporary2823
231:		mov [bp + 24], ax
233:	

gmtime$41:	; £temporary2824 = int_to_int daysOfYear (Signed_Int -> Signed_Long_Int)
234:		mov ax, [bp + 24]
236:		and eax, 65535
238:		cmp ax, 0
239:		jge gmtime$42
240:		neg ax
242:		neg eax
244:	

gmtime$42:	; if totalDays >= £temporary2824 goto 82
245:		cmp [bp + 18], eax
246:		jge gmtime$82
248:	

gmtime$43:	; g_timeStruct$tm_year = year - 1900
249:		mov ax, [bp + 8]
250:		sub ax, 1900
251:		mov [@30$g_timeStruct], ax
253:	

gmtime$44:	; £temporary2829 = int_to_int totalDays (Signed_Long_Int -> Signed_Int)
254:		mov eax, [bp + 18]
257:		cmp eax, 0
258:		jge gmtime$45
259:		neg eax
261:		neg ax
263:	

gmtime$45:	; g_timeStruct$tm_yday = £temporary2829
264:		mov [@30$g_timeStruct + 14], ax
266:	

gmtime$46:	; daysOfMonths[0] = 31
267:		mov word [bp + 26], 31
269:	

gmtime$47:	; if leapYear == 0 goto 50
270:		cmp word [bp + 22], 0
271:		je gmtime$50
273:	

gmtime$48:	; £temporary2834 = 29
274:		mov ax, 29
276:	

gmtime$49:	; goto 51
277:		jmp gmtime$51
279:	

gmtime$50:	; £temporary2834 = 28
280:		mov ax, 28
282:	

gmtime$51:	; daysOfMonths[1] = £temporary2834
283:		mov [bp + 28], ax
285:	

gmtime$52:	; daysOfMonths[2] = 31
286:		mov word [bp + 30], 31
288:	

gmtime$53:	; daysOfMonths[3] = 30
289:		mov word [bp + 32], 30
291:	

gmtime$54:	; daysOfMonths[4] = 31
292:		mov word [bp + 34], 31
294:	

gmtime$55:	; daysOfMonths[5] = 30
295:		mov word [bp + 36], 30
297:	

gmtime$56:	; daysOfMonths[6] = 30
298:		mov word [bp + 38], 30
300:	

gmtime$57:	; daysOfMonths[7] = 31
301:		mov word [bp + 40], 31
303:	

gmtime$58:	; daysOfMonths[8] = 30
304:		mov word [bp + 42], 30
306:	

gmtime$59:	; daysOfMonths[9] = 31
307:		mov word [bp + 44], 31
309:	

gmtime$60:	; daysOfMonths[10] = 30
310:		mov word [bp + 46], 30
312:	

gmtime$61:	; daysOfMonths[11] = 31
313:		mov word [bp + 48], 31
315:	

gmtime$62:	; month = 0
316:		mov word [bp + 50], 0
318:	

gmtime$63:	; £temporary2848 = month * 2
319:		mov ax, [bp + 50]
321:		xor dx, dx
322:		mul word [int2$2#]
328:	

gmtime$64:	; £temporary2849 = daysOfMonths + £temporary2848
329:		mov si, bp
330:		add si, 26
331:		add si, ax
333:	

gmtime$65:	; £temporary2847 -> £temporary2849 = *£temporary2849
335:	

gmtime$66:	; £temporary2850 = int_to_int £temporary2847 -> £temporary2849 (Signed_Int -> Signed_Long_Int)
336:		mov ax, [si]
338:		and eax, 65535
340:		cmp ax, 0
341:		jge gmtime$67
342:		neg ax
344:		neg eax
346:	

gmtime$67:	; if totalDays < £temporary2850 goto 75
347:		cmp [bp + 18], eax
348:		jl gmtime$75
350:	

gmtime$68:	; £temporary2853 = month * 2
351:		mov ax, [bp + 50]
353:		xor dx, dx
354:		mul word [int2$2#]
360:	

gmtime$69:	; £temporary2854 = daysOfMonths + £temporary2853
361:		mov si, bp
362:		add si, 26
363:		add si, ax
365:	

gmtime$70:	; £temporary2852 -> £temporary2854 = *£temporary2854
367:	

gmtime$71:	; £temporary2855 = int_to_int £temporary2852 -> £temporary2854 (Signed_Int -> Signed_Long_Int)
368:		mov ax, [si]
370:		and eax, 65535
372:		cmp ax, 0
373:		jge gmtime$72
374:		neg ax
376:		neg eax
378:	

gmtime$72:	; totalDays = totalDays - £temporary2855
379:		sub [bp + 18], eax
381:	

gmtime$73:	; ++month
382:		inc word [bp + 50]
384:	

gmtime$74:	; goto 63
385:		jmp gmtime$63
387:	

gmtime$75:	; g_timeStruct$tm_mon = month
388:		mov ax, [bp + 50]
389:		mov [@30$g_timeStruct + 8], ax
391:	

gmtime$76:	; £temporary2860 = totalDays + 1
392:		mov eax, [bp + 18]
393:		add eax, 1
395:	

gmtime$77:	; £temporary2861 = int_to_int £temporary2860 (Signed_Long_Int -> Signed_Int)
398:		cmp eax, 0
399:		jge gmtime$78
400:		neg eax
402:		neg ax
404:	

gmtime$78:	; g_timeStruct$tm_mday = £temporary2861
405:		mov [@30$g_timeStruct + 6], ax
407:	

gmtime$79:	; g_timeStruct$tm_isdst = -1
408:		mov word [@30$g_timeStruct + 16], -1
410:	

gmtime$80:	; return_value = (@30$g_timeStruct,0)
411:		mov bx, @30$g_timeStruct
413:	

gmtime$81:	; return
414:		mov ax, [bp]
415:		mov di, [bp + 4]
416:		mov bp, [bp + 2]
417:		jmp ax
419:	

gmtime$82:	; ++year
420:		inc word [bp + 8]
422:	

gmtime$83:	; £temporary2864 = int_to_int daysOfYear (Signed_Int -> Signed_Long_Int)
423:		mov ax, [bp + 24]
425:		and eax, 65535
427:		cmp ax, 0
428:		jge gmtime$84
429:		neg ax
431:		neg eax
433:	

gmtime$84:	; totalDays = totalDays - £temporary2864
434:		sub [bp + 18], eax
436:	

gmtime$85:	; goto 26
437:		jmp gmtime$26
439:	

gmtime$86:	; return_value = 0
440:		mov bx, 0
442:	

gmtime$87:	; return
443:		mov ax, [bp]
444:		mov di, [bp + 4]
445:		mov bp, [bp + 2]
446:		jmp ax
448:	

gmtime$88:	; function end gmtime
1:	

difftime:	; £temporary2867 = time2 - time1
2:		mov eax, [bp + 10]
3:		sub eax, [bp + 6]
5:	

difftime$1:	; £temporary2868 = int_to_float £temporary2867 (Unsigned_Long_Int -> Double)
6:		mov [container4bytes#], eax
7:		fild dword [container4bytes#]
9:	

difftime$2:	; return_value = £temporary2868
11:	

difftime$3:	; return
12:		mov ax, [bp]
13:		mov di, [bp + 4]
14:		mov bp, [bp + 2]
15:		jmp ax
17:	

difftime$4:	; function end difftime
1:	

default_test:	; empty
3:	

default_test$1:	; return
4:		mov ax, [bp]
5:		mov di, [bp + 4]
6:		mov bp, [bp + 2]
7:		jmp ax
9:	

default_test$2:	; function end default_test
1:	

asctime:	; localeConvPtr = 0
2:		mov word [bp + 8], 0
4:	

asctime$1:	; if localeConvPtr == 0 goto 5
5:		cmp word [bp + 8], 0
6:		je asctime$5
8:	

asctime$2:	; £temporary2870 -> localeConvPtr = *localeConvPtr, offset 4
9:		mov si, [bp + 8]
11:	

asctime$3:	; £temporary2874 = £temporary2870 -> localeConvPtr
12:		mov ax, [si + 4]
14:	

asctime$4:	; goto 6
15:		jmp asctime$6
17:	

asctime$5:	; £temporary2874 = 0
18:		mov ax, 0
20:	

asctime$6:	; shortDayList = £temporary2874
21:		mov [bp + 10], ax
23:	

asctime$7:	; if localeConvPtr == 0 goto 11
24:		cmp word [bp + 8], 0
25:		je asctime$11
27:	

asctime$8:	; £temporary2876 -> localeConvPtr = *localeConvPtr, offset 8
28:		mov si, [bp + 8]
30:	

asctime$9:	; £temporary2880 = £temporary2876 -> localeConvPtr
31:		mov ax, [si + 8]
33:	

asctime$10:	; goto 12
34:		jmp asctime$12
36:	

asctime$11:	; £temporary2880 = 0
37:		mov ax, 0
39:	

asctime$12:	; shortMonthList = £temporary2880
40:		mov [bp + 12], ax
42:	

asctime$13:	; if shortDayList == 0 goto 16
43:		cmp word [bp + 10], 0
44:		je asctime$16
46:	

asctime$14:	; £temporary2885 = shortDayList
47:		mov ax, [bp + 10]
49:	

asctime$15:	; goto 17
50:		jmp asctime$17
52:	

asctime$16:	; £temporary2885 = g_defaultShortDayList
53:		mov ax, @32$g_defaultShortDayList
55:	

asctime$17:	; shortDayList = £temporary2885
56:		mov [bp + 10], ax
58:	

asctime$18:	; if shortMonthList == 0 goto 21
59:		cmp word [bp + 12], 0
60:		je asctime$21
62:	

asctime$19:	; £temporary2890 = shortMonthList
63:		mov ax, [bp + 12]
65:	

asctime$20:	; goto 22
66:		jmp asctime$22
68:	

asctime$21:	; £temporary2890 = g_defaultShortMonthList
69:		mov ax, @34$g_defaultShortMonthList
71:	

asctime$22:	; shortMonthList = £temporary2890
72:		mov [bp + 12], ax
74:	

asctime$23:	; call header integral zero 0 stack zero 0
76:	

asctime$24:	; parameter g_timeString, offset 6
77:		mov word [bp + 20], @31$g_timeString
79:	

asctime$25:	; parameter string_25s2025s20252i202502i3A2502i3A2502i202504i#, offset 8
80:		mov word [bp + 22], string_25s2025s20252i202502i3A2502i3A2502i202504i#
82:	

asctime$26:	; £temporary2891 -> tp = *tp, offset 12
83:		mov si, [bp + 6]
85:	

asctime$27:	; £temporary2893 = £temporary2891 -> tp * 2
86:		mov ax, [si + 12]
88:		xor dx, dx
89:		mul word [int2$2#]
95:	

asctime$28:	; £temporary2894 = shortDayList + £temporary2893
96:		mov si, [bp + 10]
97:		add si, ax
99:	

asctime$29:	; £temporary2892 -> £temporary2894 = *£temporary2894
101:	

asctime$30:	; parameter £temporary2892 -> £temporary2894, offset 10
102:		mov ax, [si]
103:		mov [bp + 24], ax
105:	

asctime$31:	; £temporary2895 -> tp = *tp, offset 8
106:		mov si, [bp + 6]
108:	

asctime$32:	; £temporary2897 = £temporary2895 -> tp * 2
109:		mov ax, [si + 8]
111:		xor dx, dx
112:		mul word [int2$2#]
118:	

asctime$33:	; £temporary2898 = shortMonthList + £temporary2897
119:		mov si, [bp + 12]
120:		add si, ax
122:	

asctime$34:	; £temporary2896 -> £temporary2898 = *£temporary2898
124:	

asctime$35:	; parameter £temporary2896 -> £temporary2898, offset 12
125:		mov ax, [si]
126:		mov [bp + 26], ax
128:	

asctime$36:	; £temporary2899 -> tp = *tp, offset 6
129:		mov si, [bp + 6]
131:	

asctime$37:	; parameter £temporary2899 -> tp, offset 14
132:		mov ax, [si + 6]
133:		mov [bp + 28], ax
135:	

asctime$38:	; £temporary2900 -> tp = *tp, offset 4
136:		mov si, [bp + 6]
138:	

asctime$39:	; parameter £temporary2900 -> tp, offset 16
139:		mov ax, [si + 4]
140:		mov [bp + 30], ax
142:	

asctime$40:	; £temporary2901 -> tp = *tp, offset 2
143:		mov si, [bp + 6]
145:	

asctime$41:	; parameter £temporary2901 -> tp, offset 18
146:		mov ax, [si + 2]
147:		mov [bp + 32], ax
149:	

asctime$42:	; £temporary2902 -> tp = *tp
150:		mov si, [bp + 6]
152:	

asctime$43:	; parameter £temporary2902 -> tp, offset 20
153:		mov ax, [si]
154:		mov [bp + 34], ax
156:	

asctime$44:	; £temporary2903 -> tp = *tp, offset 10
157:		mov si, [bp + 6]
159:	

asctime$45:	; £temporary2904 = £temporary2903 -> tp + 1900
160:		mov ax, [si + 10]
161:		add ax, 1900
163:	

asctime$46:	; parameter £temporary2904, offset 22
164:		mov [bp + 36], ax
166:	

asctime$47:	; call function noellipse-ellipse sprintf, extra 0
167:		mov word [bp + 14], asctime$48
168:		mov [bp + 16], bp
169:		add bp, 14
170:		mov di, bp
171:		add di, 14
172:		jmp sprintf
174:	

asctime$48:	; post call
176:	

asctime$49:	; return_value = g_timeString
177:		mov bx, @31$g_timeString
179:	

asctime$50:	; return
180:		mov ax, [bp]
181:		mov di, [bp + 4]
182:		mov bp, [bp + 2]
183:		jmp ax
185:	

asctime$51:	; function end asctime
1:	

ctime:	; call header integral zero 0 stack zero 0
3:	

ctime$1:	; call header integral zero 0 stack zero 0
5:	

ctime$2:	; parameter time, offset 6
6:		mov ax, [bp + 6]
7:		mov [bp + 14], ax
9:	

ctime$3:	; call function noellipse-noellipse localtime
10:		mov word [bp + 8], ctime$4
11:		mov [bp + 10], bp
12:		add bp, 8
13:		jmp localtime
15:	

ctime$4:	; post call
17:	

ctime$5:	; £temporary2915 = return_value
22:	

ctime$6:	; parameter £temporary2915, offset 6
23:		mov [bp + 14], bx
25:	

ctime$7:	; call function noellipse-noellipse asctime
26:		mov word [bp + 8], ctime$8
27:		mov [bp + 10], bp
28:		add bp, 8
29:		jmp asctime
31:	

ctime$8:	; post call
33:	

ctime$9:	; £temporary2916 = return_value
38:	

ctime$10:	; return_value = £temporary2916
40:	

ctime$11:	; return
41:		mov ax, [bp]
42:		mov di, [bp + 4]
43:		mov bp, [bp + 2]
44:		jmp ax
46:	

ctime$12:	; function end ctime
1:	

localtime:	; call header integral zero 0 stack zero 0
3:	

localtime$1:	; parameter timePtr, offset 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

localtime$2:	; call function noellipse-noellipse gmtime
8:		mov word [bp + 8], localtime$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp gmtime
13:	

localtime$3:	; post call
15:	

localtime$4:	; £temporary2919 = return_value
20:	

localtime$5:	; tmPtr = £temporary2919
21:		mov [bp + 8], bx
23:	

localtime$6:	; call header integral zero 0 stack zero 0
25:	

localtime$7:	; call function noellipse-noellipse localeconv
26:		mov word [bp + 10], localtime$8
27:		mov [bp + 12], bp
28:		add bp, 10
29:		jmp localeconv
31:	

localtime$8:	; post call
33:	

localtime$9:	; £temporary2920 = return_value
38:	

localtime$10:	; localeConvPtr = £temporary2920
39:		mov [bp + 10], bx
41:	

localtime$11:	; timeZone = 0
42:		mov word [bp + 12], 0
44:	

localtime$12:	; if localeConvPtr == 0 goto 21
45:		cmp word [bp + 10], 0
46:		je localtime$21
48:	

localtime$13:	; £temporary2922 -> tmPtr = *tmPtr, offset 16
49:		mov si, [bp + 8]
51:	

localtime$14:	; if £temporary2922 -> tmPtr == 0 goto 18
52:		cmp word [si + 16], 0
53:		je localtime$18
55:	

localtime$15:	; £temporary2923 -> localeConvPtr = *localeConvPtr
56:		mov si, [bp + 10]
58:	

localtime$16:	; £temporary2929 = £temporary2923 -> localeConvPtr
59:		mov ax, [si]
61:	

localtime$17:	; goto 20
62:		jmp localtime$20
64:	

localtime$18:	; £temporary2924 -> localeConvPtr = *localeConvPtr, offset 2
65:		mov si, [bp + 10]
67:	

localtime$19:	; £temporary2929 = £temporary2924 -> localeConvPtr
68:		mov ax, [si + 2]
70:	

localtime$20:	; timeZone = £temporary2929
71:		mov [bp + 12], ax
73:	

localtime$21:	; £temporary2930 -> timePtr = *timePtr
74:		mov si, [bp + 6]
76:	

localtime$22:	; £temporary2931 = timeZone * 3600
77:		mov ax, [bp + 12]
79:		xor dx, dx
80:		imul word [int2$3600#]
86:	

localtime$23:	; £temporary2932 = int_to_int £temporary2931 (Signed_Int -> Unsigned_Long_Int)
88:		and eax, 65535
90:	

localtime$24:	; time = £temporary2930 -> timePtr + £temporary2932
91:		mov ebx, [si]
92:		add ebx, eax
93:		mov [bp + 14], ebx
95:	

localtime$25:	; call header integral zero 0 stack zero 0
97:	

localtime$26:	; £temporary2934 = &time
98:		mov si, bp
99:		add si, 14
101:	

localtime$27:	; parameter £temporary2934, offset 6
102:		mov [bp + 24], si
104:	

localtime$28:	; call function noellipse-noellipse gmtime
105:		mov word [bp + 18], localtime$29
106:		mov [bp + 20], bp
107:		add bp, 18
108:		jmp gmtime
110:	

localtime$29:	; post call
112:	

localtime$30:	; £temporary2935 = return_value
117:	

localtime$31:	; return_value = £temporary2935
119:	

localtime$32:	; return
120:		mov ax, [bp]
121:		mov di, [bp + 4]
122:		mov bp, [bp + 2]
123:		jmp ax
125:	

localtime$33:	; function end localtime
1:	

strftime:	; call header integral zero 0 stack zero 0
3:	

strftime$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 14], strftime$2
5:		mov [bp + 16], bp
6:		add bp, 14
7:		jmp localeconv
9:	

strftime$2:	; post call
11:	

strftime$3:	; £temporary2939 = return_value
16:	

strftime$4:	; localeConvPtr = £temporary2939
17:		mov [bp + 14], bx
19:	

strftime$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 14], 0
21:		je strftime$9
23:	

strftime$6:	; £temporary2941 -> localeConvPtr = *localeConvPtr, offset 4
24:		mov si, [bp + 14]
26:	

strftime$7:	; £temporary2945 = £temporary2941 -> localeConvPtr
27:		mov ax, [si + 4]
29:	

strftime$8:	; goto 10
30:		jmp strftime$10
32:	

strftime$9:	; £temporary2945 = 0
33:		mov ax, 0
35:	

strftime$10:	; shortDayList = £temporary2945
36:		mov [bp + 16], ax
38:	

strftime$11:	; if localeConvPtr == 0 goto 15
39:		cmp word [bp + 14], 0
40:		je strftime$15
42:	

strftime$12:	; £temporary2947 -> localeConvPtr = *localeConvPtr, offset 8
43:		mov si, [bp + 14]
45:	

strftime$13:	; £temporary2951 = £temporary2947 -> localeConvPtr
46:		mov ax, [si + 8]
48:	

strftime$14:	; goto 16
49:		jmp strftime$16
51:	

strftime$15:	; £temporary2951 = 0
52:		mov ax, 0
54:	

strftime$16:	; shortMonthList = £temporary2951
55:		mov [bp + 18], ax
57:	

strftime$17:	; if localeConvPtr == 0 goto 21
58:		cmp word [bp + 14], 0
59:		je strftime$21
61:	

strftime$18:	; £temporary2953 -> localeConvPtr = *localeConvPtr, offset 6
62:		mov si, [bp + 14]
64:	

strftime$19:	; £temporary2957 = £temporary2953 -> localeConvPtr
65:		mov ax, [si + 6]
67:	

strftime$20:	; goto 22
68:		jmp strftime$22
70:	

strftime$21:	; £temporary2957 = 0
71:		mov ax, 0
73:	

strftime$22:	; longDayList = £temporary2957
74:		mov [bp + 20], ax
76:	

strftime$23:	; if localeConvPtr == 0 goto 27
77:		cmp word [bp + 14], 0
78:		je strftime$27
80:	

strftime$24:	; £temporary2959 -> localeConvPtr = *localeConvPtr, offset 10
81:		mov si, [bp + 14]
83:	

strftime$25:	; £temporary2963 = £temporary2959 -> localeConvPtr
84:		mov ax, [si + 10]
86:	

strftime$26:	; goto 28
87:		jmp strftime$28
89:	

strftime$27:	; £temporary2963 = 0
90:		mov ax, 0
92:	

strftime$28:	; longMonthList = £temporary2963
93:		mov [bp + 22], ax
95:	

strftime$29:	; call header integral zero 0 stack zero 0
97:	

strftime$30:	; parameter s, offset 6
98:		mov ax, [bp + 6]
99:		mov [bp + 30], ax
101:	

strftime$31:	; parameter string_#, offset 8
102:		mov word [bp + 32], string_#
104:	

strftime$32:	; call function noellipse-noellipse strcpy
105:		mov word [bp + 24], strftime$33
106:		mov [bp + 26], bp
107:		add bp, 24
108:		jmp strcpy
110:	

strftime$33:	; post call
112:	

strftime$34:	; if shortDayList == 0 goto 37
113:		cmp word [bp + 16], 0
114:		je strftime$37
116:	

strftime$35:	; £temporary2969 = shortDayList
117:		mov ax, [bp + 16]
119:	

strftime$36:	; goto 38
120:		jmp strftime$38
122:	

strftime$37:	; £temporary2969 = g_defaultShortDayList
123:		mov ax, @32$g_defaultShortDayList
125:	

strftime$38:	; shortDayList = £temporary2969
126:		mov [bp + 16], ax
128:	

strftime$39:	; if longDayList == 0 goto 42
129:		cmp word [bp + 20], 0
130:		je strftime$42
132:	

strftime$40:	; £temporary2974 = longDayList
133:		mov ax, [bp + 20]
135:	

strftime$41:	; goto 43
136:		jmp strftime$43
138:	

strftime$42:	; £temporary2974 = g_defaultLongDayList
139:		mov ax, @33$g_defaultLongDayList
141:	

strftime$43:	; longDayList = £temporary2974
142:		mov [bp + 20], ax
144:	

strftime$44:	; if shortMonthList == 0 goto 47
145:		cmp word [bp + 18], 0
146:		je strftime$47
148:	

strftime$45:	; £temporary2979 = shortMonthList
149:		mov ax, [bp + 18]
151:	

strftime$46:	; goto 48
152:		jmp strftime$48
154:	

strftime$47:	; £temporary2979 = g_defaultShortMonthList
155:		mov ax, @34$g_defaultShortMonthList
157:	

strftime$48:	; shortMonthList = £temporary2979
158:		mov [bp + 18], ax
160:	

strftime$49:	; if longMonthList == 0 goto 52
161:		cmp word [bp + 22], 0
162:		je strftime$52
164:	

strftime$50:	; £temporary2984 = longMonthList
165:		mov ax, [bp + 22]
167:	

strftime$51:	; goto 53
168:		jmp strftime$53
170:	

strftime$52:	; £temporary2984 = g_defaultLongMonthList
171:		mov ax, @35$g_defaultLongMonthList
173:	

strftime$53:	; longMonthList = £temporary2984
174:		mov [bp + 22], ax
176:	

strftime$54:	; £temporary2985 -> tp = *tp, offset 10
177:		mov si, [bp + 12]
179:	

strftime$55:	; £temporary2986 = £temporary2985 -> tp - 69
180:		mov ax, [si + 10]
181:		sub ax, 69
183:	

strftime$56:	; leapDays = £temporary2986 / 4
185:		xor dx, dx
186:		idiv word [int2$4#]
187:		mov [bp + 24], ax
189:	

strftime$57:	; £temporary2988 -> tp = *tp, offset 10
190:		mov si, [bp + 12]
192:	

strftime$58:	; £temporary2989 = £temporary2988 -> tp - 70
193:		mov ax, [si + 10]
194:		sub ax, 70
196:	

strftime$59:	; £temporary2990 = £temporary2989 * 365
198:		xor dx, dx
199:		imul word [int2$365#]
205:	

strftime$60:	; £temporary2991 = £temporary2990 + leapDays
206:		add ax, [bp + 24]
208:	

strftime$61:	; £temporary2992 -> tp = *tp, offset 14
209:		mov si, [bp + 12]
211:	

strftime$62:	; £temporary2993 = £temporary2991 + £temporary2992 -> tp
212:		add ax, [si + 14]
214:	

strftime$63:	; £temporary2994 = int_to_int £temporary2993 (Signed_Int -> Signed_Long_Int)
216:		and eax, 65535
218:		cmp ax, 0
219:		jge strftime$64
220:		neg ax
222:		neg eax
224:	

strftime$64:	; totalDays = £temporary2994
225:		mov [bp + 26], eax
227:	

strftime$65:	; call header integral zero 0 stack zero 0
229:	

strftime$66:	; parameter string_leap20days2025i2C20total20days2025lu0A#, offset 6
230:		mov word [bp + 36], string_leap20days2025i2C20total20days2025lu0A#
232:	

strftime$67:	; parameter leapDays, offset 8
233:		mov ax, [bp + 24]
234:		mov [bp + 38], ax
236:	

strftime$68:	; parameter totalDays, offset 10
237:		mov eax, [bp + 26]
238:		mov [bp + 40], eax
240:	

strftime$69:	; call function noellipse-ellipse printf, extra 0
241:		mov word [bp + 30], strftime$70
242:		mov [bp + 32], bp
243:		add bp, 30
244:		mov di, bp
245:		add di, 6
246:		jmp printf
248:	

strftime$70:	; post call
250:	

strftime$71:	; if totalDays >= 3 goto 76
251:		cmp dword [bp + 26], 3
252:		jge strftime$76
254:	

strftime$72:	; £temporary2997 = totalDays + 4
255:		mov eax, [bp + 26]
256:		add eax, 4
258:	

strftime$73:	; £temporary2998 = int_to_int £temporary2997 (Signed_Long_Int -> Signed_Int)
261:		cmp eax, 0
262:		jge strftime$74
263:		neg eax
265:		neg ax
267:	

strftime$74:	; yearDaySunday = £temporary2998
268:		mov [bp + 30], ax
270:	

strftime$75:	; goto 80
271:		jmp strftime$80
273:	

strftime$76:	; £temporary2999 = totalDays - 3
274:		mov eax, [bp + 26]
275:		sub eax, 3
277:	

strftime$77:	; £temporary3000 = £temporary2999 % 7
279:		xor edx, edx
280:		idiv dword [int4$7#]
286:	

strftime$78:	; £temporary3001 = int_to_int £temporary3000 (Signed_Long_Int -> Signed_Int)
289:		cmp edx, 0
290:		jge strftime$79
291:		neg edx
293:		neg dx
295:	

strftime$79:	; yearDaySunday = £temporary3001
296:		mov [bp + 30], dx
298:	

strftime$80:	; call header integral zero 0 stack zero 0
300:	

strftime$81:	; parameter string_yearDaySunday2025i0A#, offset 6
301:		mov word [bp + 40], string_yearDaySunday2025i0A#
303:	

strftime$82:	; parameter yearDaySunday, offset 8
304:		mov ax, [bp + 30]
305:		mov [bp + 42], ax
307:	

strftime$83:	; call function noellipse-ellipse printf, extra 0
308:		mov word [bp + 34], strftime$84
309:		mov [bp + 36], bp
310:		add bp, 34
311:		mov di, bp
312:		add di, 2
313:		jmp printf
315:	

strftime$84:	; post call
317:	

strftime$85:	; if totalDays >= 4 goto 90
318:		cmp dword [bp + 26], 4
319:		jge strftime$90
321:	

strftime$86:	; £temporary3004 = totalDays + 3
322:		mov eax, [bp + 26]
323:		add eax, 3
325:	

strftime$87:	; £temporary3005 = int_to_int £temporary3004 (Signed_Long_Int -> Signed_Int)
328:		cmp eax, 0
329:		jge strftime$88
330:		neg eax
332:		neg ax
334:	

strftime$88:	; yearDayMonday = £temporary3005
335:		mov [bp + 32], ax
337:	

strftime$89:	; goto 94
338:		jmp strftime$94
340:	

strftime$90:	; £temporary3006 = totalDays - 4
341:		mov eax, [bp + 26]
342:		sub eax, 4
344:	

strftime$91:	; £temporary3007 = £temporary3006 % 7
346:		xor edx, edx
347:		idiv dword [int4$7#]
353:	

strftime$92:	; £temporary3008 = int_to_int £temporary3007 (Signed_Long_Int -> Signed_Int)
356:		cmp edx, 0
357:		jge strftime$93
358:		neg edx
360:		neg dx
362:	

strftime$93:	; yearDayMonday = £temporary3008
363:		mov [bp + 32], dx
365:	

strftime$94:	; call header integral zero 0 stack zero 0
367:	

strftime$95:	; parameter string_yearDayMonday2025i0A#, offset 6
368:		mov word [bp + 40], string_yearDayMonday2025i0A#
370:	

strftime$96:	; parameter yearDayMonday, offset 8
371:		mov ax, [bp + 32]
372:		mov [bp + 42], ax
374:	

strftime$97:	; call function noellipse-ellipse printf, extra 0
375:		mov word [bp + 34], strftime$98
376:		mov [bp + 36], bp
377:		add bp, 34
378:		mov di, bp
379:		add di, 2
380:		jmp printf
382:	

strftime$98:	; post call
384:	

strftime$99:	; index = 0
385:		mov word [bp + 34], 0
387:	

strftime$100:	; £temporary3011 = fmt + index
388:		mov si, [bp + 10]
389:		add si, [bp + 34]
391:	

strftime$101:	; £temporary3010 -> £temporary3011 = *£temporary3011
393:	

strftime$102:	; if £temporary3010 -> £temporary3011 == 0 goto 366
394:		cmp byte [si], 0
395:		je strftime$366
397:	

strftime$103:	; £temporary3015 = fmt + index
398:		mov si, [bp + 10]
399:		add si, [bp + 34]
401:	

strftime$104:	; £temporary3014 -> £temporary3015 = *£temporary3015
403:	

strftime$105:	; if £temporary3014 -> £temporary3015 != 37 goto 341
404:		cmp byte [si], 37
405:		jne strftime$341
407:	

strftime$106:	; £temporary3017 = index + 1
408:		mov ax, [bp + 34]
409:		add ax, 1
411:	

strftime$107:	; £temporary3019 = fmt + £temporary3017
412:		mov si, [bp + 10]
413:		add si, ax
415:	

strftime$108:	; £temporary3018 -> £temporary3019 = *£temporary3019
416:		mov al, [si]
417:		mov [bp + 56], al
419:	

strftime$109:	; case £temporary3018 -> £temporary3019 == 97 goto 133
420:		mov al, [bp + 56]
421:		cmp al, 97
422:		je strftime$133
424:	

strftime$110:	; case £temporary3018 -> £temporary3019 == 65 goto 143
425:		cmp al, 65
426:		je strftime$143
428:	

strftime$111:	; case £temporary3018 -> £temporary3019 == 98 goto 153
429:		cmp al, 98
430:		je strftime$153
432:	

strftime$112:	; case £temporary3018 -> £temporary3019 == 66 goto 163
433:		cmp al, 66
434:		je strftime$163
436:	

strftime$113:	; case £temporary3018 -> £temporary3019 == 99 goto 173
437:		cmp al, 99
438:		je strftime$173
440:	

strftime$114:	; case £temporary3018 -> £temporary3019 == 100 goto 193
441:		cmp al, 100
442:		je strftime$193
444:	

strftime$115:	; case £temporary3018 -> £temporary3019 == 72 goto 201
445:		cmp al, 72
446:		je strftime$201
448:	

strftime$116:	; case £temporary3018 -> £temporary3019 == 73 goto 209
449:		cmp al, 73
450:		je strftime$209
452:	

strftime$117:	; case £temporary3018 -> £temporary3019 == 106 goto 218
453:		cmp al, 106
454:		je strftime$218
456:	

strftime$118:	; case £temporary3018 -> £temporary3019 == 109 goto 226
457:		cmp al, 109
458:		je strftime$226
460:	

strftime$119:	; case £temporary3018 -> £temporary3019 == 77 goto 235
461:		cmp al, 77
462:		je strftime$235
464:	

strftime$120:	; case £temporary3018 -> £temporary3019 == 112 goto 243
465:		cmp al, 112
466:		je strftime$243
468:	

strftime$121:	; case £temporary3018 -> £temporary3019 == 83 goto 255
469:		cmp al, 83
470:		je strftime$255
472:	

strftime$122:	; case £temporary3018 -> £temporary3019 == 85 goto 263
473:		cmp al, 85
474:		je strftime$263
476:	

strftime$123:	; case £temporary3018 -> £temporary3019 == 119 goto 270
477:		cmp al, 119
478:		je strftime$270
480:	

strftime$124:	; case £temporary3018 -> £temporary3019 == 87 goto 278
481:		cmp al, 87
482:		je strftime$278
484:	

strftime$125:	; case £temporary3018 -> £temporary3019 == 120 goto 285
485:		cmp al, 120
486:		je strftime$285
488:	

strftime$126:	; case £temporary3018 -> £temporary3019 == 88 goto 299
489:		cmp al, 88
490:		je strftime$299
492:	

strftime$127:	; case £temporary3018 -> £temporary3019 == 121 goto 311
493:		cmp al, 121
494:		je strftime$311
496:	

strftime$128:	; case £temporary3018 -> £temporary3019 == 89 goto 320
497:		cmp al, 89
498:		je strftime$320
500:	

strftime$129:	; case £temporary3018 -> £temporary3019 == 90 goto 329
501:		cmp al, 90
502:		je strftime$329
504:	

strftime$130:	; case £temporary3018 -> £temporary3019 == 37 goto 335
505:		cmp al, 37
506:		je strftime$335
508:	

strftime$131:	; case end £temporary3018 -> £temporary3019
510:	

strftime$132:	; goto 347
511:		jmp strftime$347
513:	

strftime$133:	; call header integral zero 0 stack zero 0
515:	

strftime$134:	; parameter add, offset 6
516:		mov [bp + 62], bp
517:		add word [bp + 62], 36
519:	

strftime$135:	; £temporary3020 -> tp = *tp, offset 12
520:		mov si, [bp + 12]
522:	

strftime$136:	; £temporary3022 = £temporary3020 -> tp * 2
523:		mov ax, [si + 12]
525:		xor dx, dx
526:		mul word [int2$2#]
532:	

strftime$137:	; £temporary3023 = shortDayList + £temporary3022
533:		mov si, [bp + 16]
534:		add si, ax
536:	

strftime$138:	; £temporary3021 -> £temporary3023 = *£temporary3023
538:	

strftime$139:	; parameter £temporary3021 -> £temporary3023, offset 8
539:		mov ax, [si]
540:		mov [bp + 64], ax
542:	

strftime$140:	; call function noellipse-noellipse strcpy
543:		mov word [bp + 56], strftime$141
544:		mov [bp + 58], bp
545:		add bp, 56
546:		jmp strcpy
548:	

strftime$141:	; post call
550:	

strftime$142:	; goto 347
551:		jmp strftime$347
553:	

strftime$143:	; call header integral zero 0 stack zero 0
555:	

strftime$144:	; parameter add, offset 6
556:		mov [bp + 62], bp
557:		add word [bp + 62], 36
559:	

strftime$145:	; £temporary3025 -> tp = *tp, offset 12
560:		mov si, [bp + 12]
562:	

strftime$146:	; £temporary3027 = £temporary3025 -> tp * 2
563:		mov ax, [si + 12]
565:		xor dx, dx
566:		mul word [int2$2#]
572:	

strftime$147:	; £temporary3028 = longDayList + £temporary3027
573:		mov si, [bp + 20]
574:		add si, ax
576:	

strftime$148:	; £temporary3026 -> £temporary3028 = *£temporary3028
578:	

strftime$149:	; parameter £temporary3026 -> £temporary3028, offset 8
579:		mov ax, [si]
580:		mov [bp + 64], ax
582:	

strftime$150:	; call function noellipse-noellipse strcpy
583:		mov word [bp + 56], strftime$151
584:		mov [bp + 58], bp
585:		add bp, 56
586:		jmp strcpy
588:	

strftime$151:	; post call
590:	

strftime$152:	; goto 347
591:		jmp strftime$347
593:	

strftime$153:	; call header integral zero 0 stack zero 0
595:	

strftime$154:	; parameter add, offset 6
596:		mov [bp + 62], bp
597:		add word [bp + 62], 36
599:	

strftime$155:	; £temporary3030 -> tp = *tp, offset 8
600:		mov si, [bp + 12]
602:	

strftime$156:	; £temporary3032 = £temporary3030 -> tp * 2
603:		mov ax, [si + 8]
605:		xor dx, dx
606:		mul word [int2$2#]
612:	

strftime$157:	; £temporary3033 = shortMonthList + £temporary3032
613:		mov si, [bp + 18]
614:		add si, ax
616:	

strftime$158:	; £temporary3031 -> £temporary3033 = *£temporary3033
618:	

strftime$159:	; parameter £temporary3031 -> £temporary3033, offset 8
619:		mov ax, [si]
620:		mov [bp + 64], ax
622:	

strftime$160:	; call function noellipse-noellipse strcpy
623:		mov word [bp + 56], strftime$161
624:		mov [bp + 58], bp
625:		add bp, 56
626:		jmp strcpy
628:	

strftime$161:	; post call
630:	

strftime$162:	; goto 347
631:		jmp strftime$347
633:	

strftime$163:	; call header integral zero 0 stack zero 0
635:	

strftime$164:	; parameter add, offset 6
636:		mov [bp + 62], bp
637:		add word [bp + 62], 36
639:	

strftime$165:	; £temporary3035 -> tp = *tp, offset 8
640:		mov si, [bp + 12]
642:	

strftime$166:	; £temporary3037 = £temporary3035 -> tp * 2
643:		mov ax, [si + 8]
645:		xor dx, dx
646:		mul word [int2$2#]
652:	

strftime$167:	; £temporary3038 = longMonthList + £temporary3037
653:		mov si, [bp + 22]
654:		add si, ax
656:	

strftime$168:	; £temporary3036 -> £temporary3038 = *£temporary3038
658:	

strftime$169:	; parameter £temporary3036 -> £temporary3038, offset 8
659:		mov ax, [si]
660:		mov [bp + 64], ax
662:	

strftime$170:	; call function noellipse-noellipse strcpy
663:		mov word [bp + 56], strftime$171
664:		mov [bp + 58], bp
665:		add bp, 56
666:		jmp strcpy
668:	

strftime$171:	; post call
670:	

strftime$172:	; goto 347
671:		jmp strftime$347
673:	

strftime$173:	; call header integral zero 0 stack zero 0
675:	

strftime$174:	; parameter add, offset 6
676:		mov [bp + 62], bp
677:		add word [bp + 62], 36
679:	

strftime$175:	; parameter string_2504d2D2502d2D2502d202502d3A2502d3A2502d#, offset 8
680:		mov word [bp + 64], string_2504d2D2502d2D2502d202502d3A2502d3A2502d#
682:	

strftime$176:	; £temporary3040 -> tp = *tp, offset 10
683:		mov si, [bp + 12]
685:	

strftime$177:	; £temporary3041 = £temporary3040 -> tp + 1900
686:		mov ax, [si + 10]
687:		add ax, 1900
689:	

strftime$178:	; parameter £temporary3041, offset 10
690:		mov [bp + 66], ax
692:	

strftime$179:	; £temporary3042 -> tp = *tp, offset 8
693:		mov si, [bp + 12]
695:	

strftime$180:	; £temporary3043 = £temporary3042 -> tp + 1
696:		mov ax, [si + 8]
697:		add ax, 1
699:	

strftime$181:	; parameter £temporary3043, offset 12
700:		mov [bp + 68], ax
702:	

strftime$182:	; £temporary3044 -> tp = *tp, offset 6
703:		mov si, [bp + 12]
705:	

strftime$183:	; parameter £temporary3044 -> tp, offset 14
706:		mov ax, [si + 6]
707:		mov [bp + 70], ax
709:	

strftime$184:	; £temporary3045 -> tp = *tp, offset 4
710:		mov si, [bp + 12]
712:	

strftime$185:	; parameter £temporary3045 -> tp, offset 16
713:		mov ax, [si + 4]
714:		mov [bp + 72], ax
716:	

strftime$186:	; £temporary3046 -> tp = *tp, offset 2
717:		mov si, [bp + 12]
719:	

strftime$187:	; parameter £temporary3046 -> tp, offset 18
720:		mov ax, [si + 2]
721:		mov [bp + 74], ax
723:	

strftime$188:	; £temporary3047 -> tp = *tp
724:		mov si, [bp + 12]
726:	

strftime$189:	; parameter £temporary3047 -> tp, offset 20
727:		mov ax, [si]
728:		mov [bp + 76], ax
730:	

strftime$190:	; call function noellipse-ellipse sprintf, extra 0
731:		mov word [bp + 56], strftime$191
732:		mov [bp + 58], bp
733:		add bp, 56
734:		mov di, bp
735:		add di, 12
736:		jmp sprintf
738:	

strftime$191:	; post call
740:	

strftime$192:	; goto 347
741:		jmp strftime$347
743:	

strftime$193:	; call header integral zero 0 stack zero 0
745:	

strftime$194:	; parameter add, offset 6
746:		mov [bp + 62], bp
747:		add word [bp + 62], 36
749:	

strftime$195:	; parameter string_2502d#, offset 8
750:		mov word [bp + 64], string_2502d#
752:	

strftime$196:	; £temporary3049 -> tp = *tp, offset 6
753:		mov si, [bp + 12]
755:	

strftime$197:	; parameter £temporary3049 -> tp, offset 10
756:		mov ax, [si + 6]
757:		mov [bp + 66], ax
759:	

strftime$198:	; call function noellipse-ellipse sprintf, extra 0
760:		mov word [bp + 56], strftime$199
761:		mov [bp + 58], bp
762:		add bp, 56
763:		mov di, bp
764:		add di, 2
765:		jmp sprintf
767:	

strftime$199:	; post call
769:	

strftime$200:	; goto 347
770:		jmp strftime$347
772:	

strftime$201:	; call header integral zero 0 stack zero 0
774:	

strftime$202:	; parameter add, offset 6
775:		mov [bp + 62], bp
776:		add word [bp + 62], 36
778:	

strftime$203:	; parameter string_2502d#, offset 8
779:		mov word [bp + 64], string_2502d#
781:	

strftime$204:	; £temporary3051 -> tp = *tp, offset 4
782:		mov si, [bp + 12]
784:	

strftime$205:	; parameter £temporary3051 -> tp, offset 10
785:		mov ax, [si + 4]
786:		mov [bp + 66], ax
788:	

strftime$206:	; call function noellipse-ellipse sprintf, extra 0
789:		mov word [bp + 56], strftime$207
790:		mov [bp + 58], bp
791:		add bp, 56
792:		mov di, bp
793:		add di, 2
794:		jmp sprintf
796:	

strftime$207:	; post call
798:	

strftime$208:	; goto 347
799:		jmp strftime$347
801:	

strftime$209:	; call header integral zero 0 stack zero 0
803:	

strftime$210:	; parameter add, offset 6
804:		mov [bp + 62], bp
805:		add word [bp + 62], 36
807:	

strftime$211:	; parameter string_2502d#, offset 8
808:		mov word [bp + 64], string_2502d#
810:	

strftime$212:	; £temporary3053 -> tp = *tp, offset 4
811:		mov si, [bp + 12]
813:	

strftime$213:	; £temporary3054 = £temporary3053 -> tp % 12
814:		mov ax, [si + 4]
816:		xor dx, dx
817:		idiv word [int2$12#]
823:	

strftime$214:	; parameter £temporary3054, offset 10
824:		mov [bp + 66], dx
826:	

strftime$215:	; call function noellipse-ellipse sprintf, extra 0
827:		mov word [bp + 56], strftime$216
828:		mov [bp + 58], bp
829:		add bp, 56
830:		mov di, bp
831:		add di, 2
832:		jmp sprintf
834:	

strftime$216:	; post call
836:	

strftime$217:	; goto 347
837:		jmp strftime$347
839:	

strftime$218:	; call header integral zero 0 stack zero 0
841:	

strftime$219:	; parameter add, offset 6
842:		mov [bp + 62], bp
843:		add word [bp + 62], 36
845:	

strftime$220:	; parameter string_2503d#, offset 8
846:		mov word [bp + 64], string_2503d#
848:	

strftime$221:	; £temporary3056 -> tp = *tp, offset 14
849:		mov si, [bp + 12]
851:	

strftime$222:	; parameter £temporary3056 -> tp, offset 10
852:		mov ax, [si + 14]
853:		mov [bp + 66], ax
855:	

strftime$223:	; call function noellipse-ellipse sprintf, extra 0
856:		mov word [bp + 56], strftime$224
857:		mov [bp + 58], bp
858:		add bp, 56
859:		mov di, bp
860:		add di, 2
861:		jmp sprintf
863:	

strftime$224:	; post call
865:	

strftime$225:	; goto 347
866:		jmp strftime$347
868:	

strftime$226:	; call header integral zero 0 stack zero 0
870:	

strftime$227:	; parameter add, offset 6
871:		mov [bp + 62], bp
872:		add word [bp + 62], 36
874:	

strftime$228:	; parameter string_2502d#, offset 8
875:		mov word [bp + 64], string_2502d#
877:	

strftime$229:	; £temporary3058 -> tp = *tp, offset 8
878:		mov si, [bp + 12]
880:	

strftime$230:	; £temporary3059 = £temporary3058 -> tp + 1
881:		mov ax, [si + 8]
882:		add ax, 1
884:	

strftime$231:	; parameter £temporary3059, offset 10
885:		mov [bp + 66], ax
887:	

strftime$232:	; call function noellipse-ellipse sprintf, extra 0
888:		mov word [bp + 56], strftime$233
889:		mov [bp + 58], bp
890:		add bp, 56
891:		mov di, bp
892:		add di, 2
893:		jmp sprintf
895:	

strftime$233:	; post call
897:	

strftime$234:	; goto 347
898:		jmp strftime$347
900:	

strftime$235:	; call header integral zero 0 stack zero 0
902:	

strftime$236:	; parameter add, offset 6
903:		mov [bp + 62], bp
904:		add word [bp + 62], 36
906:	

strftime$237:	; parameter string_2502d#, offset 8
907:		mov word [bp + 64], string_2502d#
909:	

strftime$238:	; £temporary3061 -> tp = *tp, offset 2
910:		mov si, [bp + 12]
912:	

strftime$239:	; parameter £temporary3061 -> tp, offset 10
913:		mov ax, [si + 2]
914:		mov [bp + 66], ax
916:	

strftime$240:	; call function noellipse-ellipse sprintf, extra 0
917:		mov word [bp + 56], strftime$241
918:		mov [bp + 58], bp
919:		add bp, 56
920:		mov di, bp
921:		add di, 2
922:		jmp sprintf
924:	

strftime$241:	; post call
926:	

strftime$242:	; goto 347
927:		jmp strftime$347
929:	

strftime$243:	; call header integral zero 0 stack zero 0
931:	

strftime$244:	; parameter add, offset 6
932:		mov [bp + 62], bp
933:		add word [bp + 62], 36
935:	

strftime$245:	; parameter string_25s#, offset 8
936:		mov word [bp + 64], string_25s#
938:	

strftime$246:	; £temporary3063 -> tp = *tp, offset 4
939:		mov si, [bp + 12]
941:	

strftime$247:	; if £temporary3063 -> tp >= 12 goto 250
942:		cmp word [si + 4], 12
943:		jge strftime$250
945:	

strftime$248:	; £temporary3068 = string_AM#
946:		mov ax, string_AM#
948:	

strftime$249:	; goto 251
949:		jmp strftime$251
951:	

strftime$250:	; £temporary3068 = string_PM#
952:		mov ax, string_PM#
954:	

strftime$251:	; parameter £temporary3068, offset 10
955:		mov [bp + 66], ax
957:	

strftime$252:	; call function noellipse-ellipse sprintf, extra 0
958:		mov word [bp + 56], strftime$253
959:		mov [bp + 58], bp
960:		add bp, 56
961:		mov di, bp
962:		add di, 2
963:		jmp sprintf
965:	

strftime$253:	; post call
967:	

strftime$254:	; goto 347
968:		jmp strftime$347
970:	

strftime$255:	; call header integral zero 0 stack zero 0
972:	

strftime$256:	; parameter add, offset 6
973:		mov [bp + 62], bp
974:		add word [bp + 62], 36
976:	

strftime$257:	; parameter string_2502d#, offset 8
977:		mov word [bp + 64], string_2502d#
979:	

strftime$258:	; £temporary3070 -> tp = *tp
980:		mov si, [bp + 12]
982:	

strftime$259:	; parameter £temporary3070 -> tp, offset 10
983:		mov ax, [si]
984:		mov [bp + 66], ax
986:	

strftime$260:	; call function noellipse-ellipse sprintf, extra 0
987:		mov word [bp + 56], strftime$261
988:		mov [bp + 58], bp
989:		add bp, 56
990:		mov di, bp
991:		add di, 2
992:		jmp sprintf
994:	

strftime$261:	; post call
996:	

strftime$262:	; goto 347
997:		jmp strftime$347
999:	

strftime$263:	; call header integral zero 0 stack zero 0
1001:	

strftime$264:	; parameter add, offset 6
1002:		mov [bp + 62], bp
1003:		add word [bp + 62], 36
1005:	

strftime$265:	; parameter string_2502d#, offset 8
1006:		mov word [bp + 64], string_2502d#
1008:	

strftime$266:	; parameter yearDaySunday, offset 10
1009:		mov ax, [bp + 30]
1010:		mov [bp + 66], ax
1012:	

strftime$267:	; call function noellipse-ellipse sprintf, extra 0
1013:		mov word [bp + 56], strftime$268
1014:		mov [bp + 58], bp
1015:		add bp, 56
1016:		mov di, bp
1017:		add di, 2
1018:		jmp sprintf
1020:	

strftime$268:	; post call
1022:	

strftime$269:	; goto 347
1023:		jmp strftime$347
1025:	

strftime$270:	; call header integral zero 0 stack zero 0
1027:	

strftime$271:	; parameter add, offset 6
1028:		mov [bp + 62], bp
1029:		add word [bp + 62], 36
1031:	

strftime$272:	; parameter string_2502d#, offset 8
1032:		mov word [bp + 64], string_2502d#
1034:	

strftime$273:	; £temporary3073 -> tp = *tp, offset 12
1035:		mov si, [bp + 12]
1037:	

strftime$274:	; parameter £temporary3073 -> tp, offset 10
1038:		mov ax, [si + 12]
1039:		mov [bp + 66], ax
1041:	

strftime$275:	; call function noellipse-ellipse sprintf, extra 0
1042:		mov word [bp + 56], strftime$276
1043:		mov [bp + 58], bp
1044:		add bp, 56
1045:		mov di, bp
1046:		add di, 2
1047:		jmp sprintf
1049:	

strftime$276:	; post call
1051:	

strftime$277:	; goto 347
1052:		jmp strftime$347
1054:	

strftime$278:	; call header integral zero 0 stack zero 0
1056:	

strftime$279:	; parameter add, offset 6
1057:		mov [bp + 62], bp
1058:		add word [bp + 62], 36
1060:	

strftime$280:	; parameter string_2502d#, offset 8
1061:		mov word [bp + 64], string_2502d#
1063:	

strftime$281:	; parameter yearDayMonday, offset 10
1064:		mov ax, [bp + 32]
1065:		mov [bp + 66], ax
1067:	

strftime$282:	; call function noellipse-ellipse sprintf, extra 0
1068:		mov word [bp + 56], strftime$283
1069:		mov [bp + 58], bp
1070:		add bp, 56
1071:		mov di, bp
1072:		add di, 2
1073:		jmp sprintf
1075:	

strftime$283:	; post call
1077:	

strftime$284:	; goto 347
1078:		jmp strftime$347
1080:	

strftime$285:	; call header integral zero 0 stack zero 0
1082:	

strftime$286:	; parameter add, offset 6
1083:		mov [bp + 62], bp
1084:		add word [bp + 62], 36
1086:	

strftime$287:	; parameter string_2504d2D2502d2D2502d#, offset 8
1087:		mov word [bp + 64], string_2504d2D2502d2D2502d#
1089:	

strftime$288:	; £temporary3076 -> tp = *tp, offset 10
1090:		mov si, [bp + 12]
1092:	

strftime$289:	; £temporary3077 = £temporary3076 -> tp + 1900
1093:		mov ax, [si + 10]
1094:		add ax, 1900
1096:	

strftime$290:	; parameter £temporary3077, offset 10
1097:		mov [bp + 66], ax
1099:	

strftime$291:	; £temporary3078 -> tp = *tp, offset 8
1100:		mov si, [bp + 12]
1102:	

strftime$292:	; £temporary3079 = £temporary3078 -> tp + 1
1103:		mov ax, [si + 8]
1104:		add ax, 1
1106:	

strftime$293:	; parameter £temporary3079, offset 12
1107:		mov [bp + 68], ax
1109:	

strftime$294:	; £temporary3080 -> tp = *tp, offset 6
1110:		mov si, [bp + 12]
1112:	

strftime$295:	; parameter £temporary3080 -> tp, offset 14
1113:		mov ax, [si + 6]
1114:		mov [bp + 70], ax
1116:	

strftime$296:	; call function noellipse-ellipse sprintf, extra 0
1117:		mov word [bp + 56], strftime$297
1118:		mov [bp + 58], bp
1119:		add bp, 56
1120:		mov di, bp
1121:		add di, 6
1122:		jmp sprintf
1124:	

strftime$297:	; post call
1126:	

strftime$298:	; goto 347
1127:		jmp strftime$347
1129:	

strftime$299:	; call header integral zero 0 stack zero 0
1131:	

strftime$300:	; parameter add, offset 6
1132:		mov [bp + 62], bp
1133:		add word [bp + 62], 36
1135:	

strftime$301:	; parameter string_2502d3A2502d3A2502d#, offset 8
1136:		mov word [bp + 64], string_2502d3A2502d3A2502d#
1138:	

strftime$302:	; £temporary3082 -> tp = *tp, offset 4
1139:		mov si, [bp + 12]
1141:	

strftime$303:	; parameter £temporary3082 -> tp, offset 10
1142:		mov ax, [si + 4]
1143:		mov [bp + 66], ax
1145:	

strftime$304:	; £temporary3083 -> tp = *tp, offset 2
1146:		mov si, [bp + 12]
1148:	

strftime$305:	; parameter £temporary3083 -> tp, offset 12
1149:		mov ax, [si + 2]
1150:		mov [bp + 68], ax
1152:	

strftime$306:	; £temporary3084 -> tp = *tp
1153:		mov si, [bp + 12]
1155:	

strftime$307:	; parameter £temporary3084 -> tp, offset 14
1156:		mov ax, [si]
1157:		mov [bp + 70], ax
1159:	

strftime$308:	; call function noellipse-ellipse sprintf, extra 0
1160:		mov word [bp + 56], strftime$309
1161:		mov [bp + 58], bp
1162:		add bp, 56
1163:		mov di, bp
1164:		add di, 6
1165:		jmp sprintf
1167:	

strftime$309:	; post call
1169:	

strftime$310:	; goto 347
1170:		jmp strftime$347
1172:	

strftime$311:	; call header integral zero 0 stack zero 0
1174:	

strftime$312:	; parameter add, offset 6
1175:		mov [bp + 62], bp
1176:		add word [bp + 62], 36
1178:	

strftime$313:	; parameter string_2502d#, offset 8
1179:		mov word [bp + 64], string_2502d#
1181:	

strftime$314:	; £temporary3086 -> tp = *tp, offset 10
1182:		mov si, [bp + 12]
1184:	

strftime$315:	; £temporary3087 = £temporary3086 -> tp % 100
1185:		mov ax, [si + 10]
1187:		xor dx, dx
1188:		idiv word [int2$100#]
1194:	

strftime$316:	; parameter £temporary3087, offset 10
1195:		mov [bp + 66], dx
1197:	

strftime$317:	; call function noellipse-ellipse sprintf, extra 0
1198:		mov word [bp + 56], strftime$318
1199:		mov [bp + 58], bp
1200:		add bp, 56
1201:		mov di, bp
1202:		add di, 2
1203:		jmp sprintf
1205:	

strftime$318:	; post call
1207:	

strftime$319:	; goto 347
1208:		jmp strftime$347
1210:	

strftime$320:	; call header integral zero 0 stack zero 0
1212:	

strftime$321:	; parameter add, offset 6
1213:		mov [bp + 62], bp
1214:		add word [bp + 62], 36
1216:	

strftime$322:	; parameter string_2504d#, offset 8
1217:		mov word [bp + 64], string_2504d#
1219:	

strftime$323:	; £temporary3089 -> tp = *tp, offset 10
1220:		mov si, [bp + 12]
1222:	

strftime$324:	; £temporary3090 = £temporary3089 -> tp + 1900
1223:		mov ax, [si + 10]
1224:		add ax, 1900
1226:	

strftime$325:	; parameter £temporary3090, offset 10
1227:		mov [bp + 66], ax
1229:	

strftime$326:	; call function noellipse-ellipse sprintf, extra 0
1230:		mov word [bp + 56], strftime$327
1231:		mov [bp + 58], bp
1232:		add bp, 56
1233:		mov di, bp
1234:		add di, 2
1235:		jmp sprintf
1237:	

strftime$327:	; post call
1239:	

strftime$328:	; goto 347
1240:		jmp strftime$347
1242:	

strftime$329:	; call header integral zero 0 stack zero 0
1244:	

strftime$330:	; parameter add, offset 6
1245:		mov [bp + 62], bp
1246:		add word [bp + 62], 36
1248:	

strftime$331:	; parameter string_#, offset 8
1249:		mov word [bp + 64], string_#
1251:	

strftime$332:	; call function noellipse-noellipse strcpy
1252:		mov word [bp + 56], strftime$333
1253:		mov [bp + 58], bp
1254:		add bp, 56
1255:		jmp strcpy
1257:	

strftime$333:	; post call
1259:	

strftime$334:	; goto 347
1260:		jmp strftime$347
1262:	

strftime$335:	; call header integral zero 0 stack zero 0
1264:	

strftime$336:	; parameter add, offset 6
1265:		mov [bp + 62], bp
1266:		add word [bp + 62], 36
1268:	

strftime$337:	; parameter string_25#, offset 8
1269:		mov word [bp + 64], string_25#
1271:	

strftime$338:	; call function noellipse-noellipse strcpy
1272:		mov word [bp + 56], strftime$339
1273:		mov [bp + 58], bp
1274:		add bp, 56
1275:		jmp strcpy
1277:	

strftime$339:	; post call
1279:	

strftime$340:	; goto 347
1280:		jmp strftime$347
1282:	

strftime$341:	; £temporary3094 -> add = *add
1283:		mov si, bp
1284:		add si, 36
1286:	

strftime$342:	; £temporary3096 = fmt + index
1287:		mov di, [bp + 10]
1288:		add di, [bp + 34]
1290:	

strftime$343:	; £temporary3095 -> £temporary3096 = *£temporary3096
1292:	

strftime$344:	; £temporary3094 -> add = £temporary3095 -> £temporary3096
1293:		mov al, [di]
1294:		mov [si], al
1296:	

strftime$345:	; £temporary3097 -> add = *add, offset 1
1297:		mov si, bp
1298:		add si, 36
1300:	

strftime$346:	; £temporary3097 -> add = 0
1301:		mov byte [si + 1], 0
1303:	

strftime$347:	; call header integral zero 0 stack zero 0
1305:	

strftime$348:	; parameter s, offset 6
1306:		mov ax, [bp + 6]
1307:		mov [bp + 62], ax
1309:	

strftime$349:	; call function noellipse-noellipse strlen
1310:		mov word [bp + 56], strftime$350
1311:		mov [bp + 58], bp
1312:		add bp, 56
1313:		jmp strlen
1315:	

strftime$350:	; post call
1317:	

strftime$351:	; £temporary3098 = return_value
1322:	

strftime$352:	; call header integral no zero 1 stack zero 0
1323:		mov [bp + 56], bx
1325:	

strftime$353:	; parameter add, offset 6
1326:		mov [bp + 64], bp
1327:		add word [bp + 64], 36
1329:	

strftime$354:	; call function noellipse-noellipse strlen
1330:		mov word [bp + 58], strftime$355
1331:		mov [bp + 60], bp
1332:		add bp, 58
1333:		jmp strlen
1335:	

strftime$355:	; post call
1336:		mov bx, [bp + 56]
1338:		mov ax, bx
1340:	

strftime$356:	; £temporary3099 = return_value
1345:	

strftime$357:	; £temporary3100 = £temporary3098 + £temporary3099
1346:		add ax, bx
1348:	

strftime$358:	; if £temporary3100 >= smax goto 366
1349:		cmp ax, [bp + 8]
1350:		jge strftime$366
1352:	

strftime$359:	; call header integral zero 0 stack zero 0
1354:	

strftime$360:	; parameter s, offset 6
1355:		mov ax, [bp + 6]
1356:		mov [bp + 62], ax
1358:	

strftime$361:	; parameter add, offset 8
1359:		mov [bp + 64], bp
1360:		add word [bp + 64], 36
1362:	

strftime$362:	; call function noellipse-noellipse strcat
1363:		mov word [bp + 56], strftime$363
1364:		mov [bp + 58], bp
1365:		add bp, 56
1366:		jmp strcat
1368:	

strftime$363:	; post call
1370:	

strftime$364:	; ++index
1371:		inc word [bp + 34]
1373:	

strftime$365:	; goto 100
1374:		jmp strftime$100
1376:	

strftime$366:	; call header integral zero 0 stack zero 0
1378:	

strftime$367:	; parameter s, offset 6
1379:		mov ax, [bp + 6]
1380:		mov [bp + 42], ax
1382:	

strftime$368:	; call function noellipse-noellipse strlen
1383:		mov word [bp + 36], strftime$369
1384:		mov [bp + 38], bp
1385:		add bp, 36
1386:		jmp strlen
1388:	

strftime$369:	; post call
1390:	

strftime$370:	; £temporary3103 = return_value
1395:	

strftime$371:	; return_value = £temporary3103
1397:	

strftime$372:	; return
1398:		mov ax, [bp]
1399:		mov di, [bp + 4]
1400:		mov bp, [bp + 2]
1401:		jmp ax
1403:	

strftime$373:	; function end strftime
