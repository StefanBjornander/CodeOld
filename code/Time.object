1:	

clock:	; return_value = -1
2:		mov ebx, -1
4:	

clock$1:	; return
5:		mov ax, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp ax
10:	

clock$2:	; function end clock
1:	

time:	; call header integral zero 0 stack zero 0
3:	

time$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 19], time$2
5:		mov [bp + 21], bp
6:		add bp, 19
7:		jmp localeconv
9:	

time$2:	; post call
11:	

time$3:	; £temporary3415 = return_value
16:	

time$4:	; localeConvPtr = £temporary3415
17:		mov [bp + 19], bx
19:	

time$5:	; ah = 42
20:		mov ah, 42
22:	

time$6:	; interrupt 33
23:		int 33
25:	

time$7:	; £temporary3417 = cx
27:	

time$8:	; year = £temporary3417 - 1900
28:		sub cx, 1900
29:		mov [bp + 12], cx
31:	

time$9:	; £temporary3419 = dh
33:	

time$10:	; month = £temporary3419 - 1
34:		sub dh, 1
35:		mov [bp + 14], dh
37:	

time$11:	; £temporary3421 = dl
39:	

time$12:	; monthDay = £temporary3421
40:		mov [bp + 15], dl
42:	

time$13:	; ah = 44
43:		mov ah, 44
45:	

time$14:	; interrupt 33
46:		int 33
48:	

time$15:	; £temporary3423 = ch
50:	

time$16:	; hour = £temporary3423
51:		mov [bp + 16], ch
53:	

time$17:	; £temporary3424 = cl
55:	

time$18:	; min = £temporary3424
56:		mov [bp + 17], cl
58:	

time$19:	; £temporary3425 = dh
60:	

time$20:	; sec = £temporary3425
61:		mov [bp + 18], dh
63:	

time$21:	; if localeConvPtr == 0 goto 25
64:		cmp word [bp + 19], 0
65:		je time$25
67:	

time$22:	; £temporary3427 -> localeConvPtr = *localeConvPtr, offset 2
68:		mov si, [bp + 19]
70:	

time$23:	; £temporary3428 = int_to_int £temporary3427 -> localeConvPtr (Signed_Int -> Signed_Short_Int)
71:		mov ax, [si + 2]
74:		cmp ax, 0
75:		jge time$24
76:		neg ax
78:		neg al
80:	

time$24:	; hour = hour - £temporary3428
81:		sub [bp + 16], al
83:	

time$25:	; £temporary3430 = year % 4
84:		mov ax, [bp + 12]
86:		xor dx, dx
87:		idiv word [int2$4#]
93:	

time$26:	; if £temporary3430 != 0 goto 29
94:		cmp dx, 0
95:		jne time$29
97:	

time$27:	; £temporary3432 = 1
98:		mov ax, 1
100:	

time$28:	; goto 30
101:		jmp time$30
103:	

time$29:	; £temporary3432 = 0
104:		mov ax, 0
106:	

time$30:	; leapYear = £temporary3432
107:		mov [bp + 21], ax
109:	

time$31:	; daysOfMonthsX[0] = 31
110:		mov word [bp + 23], 31
112:	

time$32:	; if leapYear == 0 goto 35
113:		cmp word [bp + 21], 0
114:		je time$35
116:	

time$33:	; £temporary3437 = 29
117:		mov ax, 29
119:	

time$34:	; goto 36
120:		jmp time$36
122:	

time$35:	; £temporary3437 = 28
123:		mov ax, 28
125:	

time$36:	; daysOfMonthsX[1] = £temporary3437
126:		mov [bp + 25], ax
128:	

time$37:	; daysOfMonthsX[2] = 31
129:		mov word [bp + 27], 31
131:	

time$38:	; daysOfMonthsX[3] = 30
132:		mov word [bp + 29], 30
134:	

time$39:	; daysOfMonthsX[4] = 31
135:		mov word [bp + 31], 31
137:	

time$40:	; daysOfMonthsX[5] = 30
138:		mov word [bp + 33], 30
140:	

time$41:	; daysOfMonthsX[6] = 31
141:		mov word [bp + 35], 31
143:	

time$42:	; daysOfMonthsX[7] = 31
144:		mov word [bp + 37], 31
146:	

time$43:	; daysOfMonthsX[8] = 30
147:		mov word [bp + 39], 30
149:	

time$44:	; daysOfMonthsX[9] = 31
150:		mov word [bp + 41], 31
152:	

time$45:	; daysOfMonthsX[10] = 30
153:		mov word [bp + 43], 30
155:	

time$46:	; daysOfMonthsX[11] = 31
156:		mov word [bp + 45], 31
158:	

time$47:	; £temporary3450 = int_to_int monthDay (Signed_Short_Int -> Signed_Int)
159:		mov al, [bp + 15]
161:		and ax, 255
163:		cmp al, 0
164:		jge time$48
165:		neg al
167:		neg ax
169:	

time$48:	; yearDay = £temporary3450 - 1
170:		sub ax, 1
171:		mov [bp + 47], ax
173:	

time$49:	; mon = 0
174:		mov word [bp + 49], 0
176:	

time$50:	; £temporary3452 = int_to_int month (Signed_Short_Int -> Signed_Int)
177:		mov al, [bp + 14]
179:		and ax, 255
181:		cmp al, 0
182:		jge time$51
183:		neg al
185:		neg ax
187:	

time$51:	; if mon >= £temporary3452 goto 58
188:		cmp [bp + 49], ax
189:		jge time$58
191:	

time$52:	; £temporary3456 = mon * 2
192:		mov ax, [bp + 49]
194:		xor dx, dx
195:		mul word [int2$2#]
201:	

time$53:	; £temporary3457 = daysOfMonthsX + £temporary3456
202:		mov si, bp
203:		add si, 23
204:		add si, ax
206:	

time$54:	; £temporary3455 -> £temporary3457 = *£temporary3457
208:	

time$55:	; yearDay = yearDay + £temporary3455 -> £temporary3457
209:		mov ax, [si]
210:		add [bp + 47], ax
212:	

time$56:	; ++mon
213:		inc word [bp + 49]
215:	

time$57:	; goto 50
216:		jmp time$50
218:	

time$58:	; £temporary3460 = int_to_int sec (Signed_Short_Int -> Signed_Int)
219:		mov al, [bp + 18]
221:		and ax, 255
223:		cmp al, 0
224:		jge time$59
225:		neg al
227:		neg ax
229:	

time$59:	; s$tm_sec = £temporary3460
230:		mov [bp + 51], ax
232:	

time$60:	; £temporary3462 = int_to_int min (Signed_Short_Int -> Signed_Int)
233:		mov al, [bp + 17]
235:		and ax, 255
237:		cmp al, 0
238:		jge time$61
239:		neg al
241:		neg ax
243:	

time$61:	; s$tm_min = £temporary3462
244:		mov [bp + 53], ax
246:	

time$62:	; £temporary3464 = int_to_int hour (Signed_Short_Int -> Signed_Int)
247:		mov al, [bp + 16]
249:		and ax, 255
251:		cmp al, 0
252:		jge time$63
253:		neg al
255:		neg ax
257:	

time$63:	; s$tm_hour = £temporary3464
258:		mov [bp + 55], ax
260:	

time$64:	; £temporary3466 = int_to_int monthDay (Signed_Short_Int -> Signed_Int)
261:		mov al, [bp + 15]
263:		and ax, 255
265:		cmp al, 0
266:		jge time$65
267:		neg al
269:		neg ax
271:	

time$65:	; s$tm_mday = £temporary3466
272:		mov [bp + 57], ax
274:	

time$66:	; £temporary3468 = int_to_int month (Signed_Short_Int -> Signed_Int)
275:		mov al, [bp + 14]
277:		and ax, 255
279:		cmp al, 0
280:		jge time$67
281:		neg al
283:		neg ax
285:	

time$67:	; s$tm_mon = £temporary3468
286:		mov [bp + 59], ax
288:	

time$68:	; s$tm_year = year
289:		mov ax, [bp + 12]
290:		mov [bp + 61], ax
292:	

time$69:	; s$tm_wday = 0
293:		mov word [bp + 63], 0
295:	

time$70:	; s$tm_yday = yearDay
296:		mov ax, [bp + 47]
297:		mov [bp + 65], ax
299:	

time$71:	; s$tm_isdst = 0
300:		mov word [bp + 67], 0
302:	

time$72:	; call header integral zero 0 stack zero 0
304:	

time$73:	; £temporary3473 = &s
305:		mov si, bp
306:		add si, 51
308:	

time$74:	; parameter £temporary3473, offset 6
309:		mov [bp + 75], si
311:	

time$75:	; call function noellipse-noellipse mktime
312:		mov word [bp + 69], time$76
313:		mov [bp + 71], bp
314:		add bp, 69
315:		jmp mktime
317:	

time$76:	; post call
319:	

time$77:	; £temporary3474 = return_value
324:	

time$78:	; time = £temporary3474
325:		mov [bp + 8], ebx
327:	

time$79:	; if timePtr == 0 goto 82
328:		cmp word [bp + 6], 0
329:		je time$82
331:	

time$80:	; £temporary3476 -> timePtr = *timePtr
332:		mov si, [bp + 6]
334:	

time$81:	; £temporary3476 -> timePtr = time
335:		mov eax, [bp + 8]
336:		mov [si], eax
338:	

time$82:	; return_value = time
339:		mov ebx, [bp + 8]
341:	

time$83:	; return
342:		mov ax, [bp]
343:		mov di, [bp + 4]
344:		mov bp, [bp + 2]
345:		jmp ax
347:	

time$84:	; function end time
1:	

mktime:	; if tp == 0 goto 28
2:		cmp word [bp + 6], 0
3:		je mktime$28
5:	

mktime$1:	; £temporary3480 -> tp = *tp, offset 10
6:		mov si, [bp + 6]
8:	

mktime$2:	; £temporary3481 = £temporary3480 -> tp - 69
9:		mov ax, [si + 10]
10:		sub ax, 69
12:	

mktime$3:	; £temporary3482 = £temporary3481 / 4
14:		xor dx, dx
15:		idiv word [int2$4#]
21:	

mktime$4:	; £temporary3483 = int_to_int £temporary3482 (Signed_Int -> Signed_Long_Int)
23:		and eax, 65535
25:		cmp ax, 0
26:		jge mktime$5
27:		neg ax
29:		neg eax
31:	

mktime$5:	; leapDays = £temporary3483
32:		mov [bp + 8], eax
34:	

mktime$6:	; £temporary3484 -> tp = *tp, offset 10
35:		mov si, [bp + 6]
37:	

mktime$7:	; £temporary3485 = £temporary3484 -> tp - 70
38:		mov ax, [si + 10]
39:		sub ax, 70
41:	

mktime$8:	; £temporary3486 = £temporary3485 * 365
43:		xor dx, dx
44:		imul word [int2$365#]
50:	

mktime$9:	; £temporary3487 = int_to_int £temporary3486 (Signed_Int -> Signed_Long_Int)
52:		and eax, 65535
54:		cmp ax, 0
55:		jge mktime$10
56:		neg ax
58:		neg eax
60:	

mktime$10:	; £temporary3488 = £temporary3487 + leapDays
61:		add eax, [bp + 8]
63:	

mktime$11:	; £temporary3489 -> tp = *tp, offset 14
64:		mov si, [bp + 6]
66:	

mktime$12:	; £temporary3490 = int_to_int £temporary3489 -> tp (Signed_Int -> Signed_Long_Int)
67:		mov bx, [si + 14]
69:		and ebx, 65535
71:		cmp bx, 0
72:		jge mktime$13
73:		neg bx
75:		neg ebx
77:	

mktime$13:	; totalDays = £temporary3488 + £temporary3490
78:		add eax, ebx
79:		mov [bp + 12], eax
81:	

mktime$14:	; £temporary3492 = totalDays * 86400
82:		mov eax, [bp + 12]
84:		xor edx, edx
85:		imul dword [int4$86400#]
91:		mov ebx, eax
93:	

mktime$15:	; £temporary3493 -> tp = *tp, offset 4
94:		mov si, [bp + 6]
96:	

mktime$16:	; £temporary3494 = int_to_int £temporary3493 -> tp (Signed_Int -> Signed_Long_Int)
97:		mov ax, [si + 4]
99:		and eax, 65535
101:		cmp ax, 0
102:		jge mktime$17
103:		neg ax
105:		neg eax
107:	

mktime$17:	; £temporary3495 = £temporary3494 * 3600
109:		xor edx, edx
110:		imul dword [int4$3600#]
116:	

mktime$18:	; £temporary3496 = £temporary3492 + £temporary3495
117:		add ebx, eax
119:	

mktime$19:	; £temporary3497 -> tp = *tp, offset 2
120:		mov si, [bp + 6]
122:	

mktime$20:	; £temporary3498 = int_to_int £temporary3497 -> tp (Signed_Int -> Signed_Long_Int)
123:		mov ax, [si + 2]
125:		and eax, 65535
127:		cmp ax, 0
128:		jge mktime$21
129:		neg ax
131:		neg eax
133:	

mktime$21:	; £temporary3499 = £temporary3498 * 60
135:		xor edx, edx
136:		imul dword [int4$60#]
142:	

mktime$22:	; £temporary3500 = £temporary3496 + £temporary3499
143:		add ebx, eax
145:	

mktime$23:	; £temporary3501 -> tp = *tp
146:		mov si, [bp + 6]
148:	

mktime$24:	; £temporary3502 = int_to_int £temporary3501 -> tp (Signed_Int -> Signed_Long_Int)
149:		mov ax, [si]
151:		and eax, 65535
153:		cmp ax, 0
154:		jge mktime$25
155:		neg ax
157:		neg eax
159:	

mktime$25:	; £temporary3503 = £temporary3500 + £temporary3502
160:		add ebx, eax
162:	

mktime$26:	; return_value = £temporary3503
164:	

mktime$27:	; return
165:		mov ax, [bp]
166:		mov di, [bp + 4]
167:		mov bp, [bp + 2]
168:		jmp ax
170:	

mktime$28:	; return_value = 0
171:		mov ebx, 0
173:	

mktime$29:	; return
174:		mov ax, [bp]
175:		mov di, [bp + 4]
176:		mov bp, [bp + 2]
177:		jmp ax
179:	

mktime$30:	; function end mktime
1:	

@28$isLeapYear:	; £temporary3504 = year % 4
2:		mov ax, [bp + 6]
4:		xor dx, dx
5:		idiv word [int2$4#]
11:	

@28$isLeapYear$1:	; if £temporary3504 != 0 goto 4
12:		cmp dx, 0
13:		jne @28$isLeapYear$4
15:	

@28$isLeapYear$2:	; £temporary3506 = year % 100
16:		mov ax, [bp + 6]
18:		xor dx, dx
19:		idiv word [int2$100#]
25:	

@28$isLeapYear$3:	; if £temporary3506 != 0 goto 6
26:		cmp dx, 0
27:		jne @28$isLeapYear$6
29:	

@28$isLeapYear$4:	; £temporary3509 = year % 400
30:		mov ax, [bp + 6]
32:		xor dx, dx
33:		idiv word [int2$400#]
39:	

@28$isLeapYear$5:	; if £temporary3509 != 0 goto 8
40:		cmp dx, 0
41:		jne @28$isLeapYear$8
43:	

@28$isLeapYear$6:	; £temporary3512 = 1
44:		mov bx, 1
46:	

@28$isLeapYear$7:	; goto 9
47:		jmp @28$isLeapYear$9
49:	

@28$isLeapYear$8:	; £temporary3512 = 0
50:		mov bx, 0
52:	

@28$isLeapYear$9:	; return_value = £temporary3512
54:	

@28$isLeapYear$10:	; return
55:		mov ax, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp ax
60:	

@28$isLeapYear$11:	; function end isLeapYear
1:	

gmtime:	; if timePtr == 0 goto 89
2:		cmp word [bp + 6], 0
3:		je gmtime$89
5:	

gmtime$1:	; £temporary3514 -> timePtr = *timePtr
6:		mov si, [bp + 6]
8:	

gmtime$2:	; time = £temporary3514 -> timePtr
9:		mov eax, [si]
10:		mov [bp + 8], eax
12:	

gmtime$3:	; secondsOfDay = time % 86400
13:		mov eax, [bp + 8]
15:		xor edx, edx
16:		idiv dword [int4$86400#]
17:		mov [bp + 12], edx
19:	

gmtime$4:	; secondsOfHour = secondsOfDay % 3600
20:		mov eax, [bp + 12]
22:		xor edx, edx
23:		idiv dword [int4$3600#]
24:		mov [bp + 16], edx
26:	

gmtime$5:	; £temporary3518 = secondsOfDay / 3600
27:		mov eax, [bp + 12]
29:		xor edx, edx
30:		idiv dword [int4$3600#]
36:	

gmtime$6:	; £temporary3519 = int_to_int £temporary3518 (Signed_Long_Int -> Signed_Int)
39:		cmp eax, 0
40:		jge gmtime$7
41:		neg eax
43:		neg ax
45:	

gmtime$7:	; g_timeStruct$tm_hour = £temporary3519
46:		mov [@27$g_timeStruct + 4], ax
48:	

gmtime$8:	; £temporary3521 = secondsOfHour / 60
49:		mov eax, [bp + 16]
51:		xor edx, edx
52:		idiv dword [int4$60#]
58:	

gmtime$9:	; £temporary3522 = int_to_int £temporary3521 (Signed_Long_Int -> Signed_Int)
61:		cmp eax, 0
62:		jge gmtime$10
63:		neg eax
65:		neg ax
67:	

gmtime$10:	; g_timeStruct$tm_min = £temporary3522
68:		mov [@27$g_timeStruct + 2], ax
70:	

gmtime$11:	; £temporary3524 = secondsOfHour % 60
71:		mov eax, [bp + 16]
73:		xor edx, edx
74:		idiv dword [int4$60#]
80:	

gmtime$12:	; £temporary3525 = int_to_int £temporary3524 (Signed_Long_Int -> Signed_Int)
83:		cmp edx, 0
84:		jge gmtime$13
85:		neg edx
87:		neg dx
89:	

gmtime$13:	; g_timeStruct$tm_sec = £temporary3525
90:		mov [@27$g_timeStruct], dx
92:	

gmtime$14:	; totalDays = time / 86400
93:		mov eax, [bp + 8]
95:		xor edx, edx
96:		idiv dword [int4$86400#]
97:		mov [bp + 20], eax
99:	

gmtime$15:	; if totalDays >= 3 goto 20
100:		cmp dword [bp + 20], 3
101:		jge gmtime$20
103:	

gmtime$16:	; £temporary3529 = totalDays + 4
104:		mov eax, [bp + 20]
105:		add eax, 4
107:	

gmtime$17:	; £temporary3530 = int_to_int £temporary3529 (Signed_Long_Int -> Signed_Int)
110:		cmp eax, 0
111:		jge gmtime$18
112:		neg eax
114:		neg ax
116:	

gmtime$18:	; g_timeStruct$tm_wday = £temporary3530
117:		mov [@27$g_timeStruct + 12], ax
119:	

gmtime$19:	; goto 24
120:		jmp gmtime$24
122:	

gmtime$20:	; £temporary3532 = totalDays - 3
123:		mov eax, [bp + 20]
124:		sub eax, 3
126:	

gmtime$21:	; £temporary3533 = £temporary3532 % 7
128:		xor edx, edx
129:		idiv dword [int4$7#]
135:	

gmtime$22:	; £temporary3534 = int_to_int £temporary3533 (Signed_Long_Int -> Signed_Int)
138:		cmp edx, 0
139:		jge gmtime$23
140:		neg edx
142:		neg dx
144:	

gmtime$23:	; g_timeStruct$tm_wday = £temporary3534
145:		mov [@27$g_timeStruct + 12], dx
147:	

gmtime$24:	; £temporary3535 = totalDays / 365
148:		mov eax, [bp + 20]
150:		xor edx, edx
151:		idiv dword [int4$365#]
157:	

gmtime$25:	; £temporary3536 = £temporary3535 + 1970
158:		add eax, 1970
160:	

gmtime$26:	; £temporary3537 = int_to_int £temporary3536 (Signed_Long_Int -> Signed_Int)
163:		cmp eax, 0
164:		jge gmtime$27
165:		neg eax
167:		neg ax
169:	

gmtime$27:	; year = £temporary3537
170:		mov [bp + 24], ax
172:	

gmtime$28:	; £temporary3538 = year - 1969
173:		mov ax, [bp + 24]
174:		sub ax, 1969
176:	

gmtime$29:	; leapDays = £temporary3538 / 4
178:		xor dx, dx
179:		idiv word [int2$4#]
180:		mov [bp + 26], ax
182:	

gmtime$30:	; totalDays = totalDays % 365
183:		mov eax, [bp + 20]
185:		xor edx, edx
186:		idiv dword [int4$365#]
187:		mov [bp + 20], edx
189:	

gmtime$31:	; £temporary3541 = int_to_int leapDays (Signed_Int -> Signed_Long_Int)
190:		mov ax, [bp + 26]
192:		and eax, 65535
194:		cmp ax, 0
195:		jge gmtime$32
196:		neg ax
198:		neg eax
200:	

gmtime$32:	; totalDays = totalDays - £temporary3541
201:		sub [bp + 20], eax
203:	

gmtime$33:	; if totalDays >= 0 goto 44
204:		cmp dword [bp + 20], 0
205:		jge gmtime$44
207:	

gmtime$34:	; --year
208:		dec word [bp + 24]
210:	

gmtime$35:	; call header integral zero 0 stack zero 0
212:	

gmtime$36:	; parameter year, offset 6
213:		mov ax, [bp + 24]
214:		mov [bp + 34], ax
216:	

gmtime$37:	; call function noellipse-noellipse isLeapYear
217:		mov word [bp + 28], gmtime$38
218:		mov [bp + 30], bp
219:		add bp, 28
220:		jmp @28$isLeapYear
222:	

gmtime$38:	; post call
224:	

gmtime$39:	; £temporary3545 = return_value
229:	

gmtime$40:	; if £temporary3545 == 0 goto 43
230:		cmp bx, 0
231:		je gmtime$43
233:	

gmtime$41:	; totalDays = totalDays + 366
234:		add dword [bp + 20], 366
236:	

gmtime$42:	; goto 44
237:		jmp gmtime$44
239:	

gmtime$43:	; totalDays = totalDays + 365
240:		add dword [bp + 20], 365
242:	

gmtime$44:	; g_timeStruct$tm_year = year - 1900
243:		mov ax, [bp + 24]
244:		sub ax, 1900
245:		mov [@27$g_timeStruct], ax
247:	

gmtime$45:	; £temporary3552 = int_to_int totalDays (Signed_Long_Int -> Signed_Int)
248:		mov eax, [bp + 20]
251:		cmp eax, 0
252:		jge gmtime$46
253:		neg eax
255:		neg ax
257:	

gmtime$46:	; g_timeStruct$tm_yday = £temporary3552
258:		mov [@27$g_timeStruct + 14], ax
260:	

gmtime$47:	; daysOfMonths[0] = 31
261:		mov word [bp + 28], 31
263:	

gmtime$48:	; call header integral zero 0 stack zero 0
265:	

gmtime$49:	; parameter year, offset 6
266:		mov ax, [bp + 24]
267:		mov [bp + 34], ax
269:	

gmtime$50:	; call function noellipse-noellipse isLeapYear
270:		mov word [bp + 28], gmtime$51
271:		mov [bp + 30], bp
272:		add bp, 28
273:		jmp @28$isLeapYear
275:	

gmtime$51:	; post call
277:	

gmtime$52:	; £temporary3553 = return_value
282:	

gmtime$53:	; if £temporary3553 == 0 goto 56
283:		cmp bx, 0
284:		je gmtime$56
286:	

gmtime$54:	; £temporary3558 = 29
287:		mov ax, 29
289:	

gmtime$55:	; goto 57
290:		jmp gmtime$57
292:	

gmtime$56:	; £temporary3558 = 28
293:		mov ax, 28
295:	

gmtime$57:	; daysOfMonths[1] = £temporary3558
296:		mov [bp + 30], ax
298:	

gmtime$58:	; daysOfMonths[2] = 31
299:		mov word [bp + 32], 31
301:	

gmtime$59:	; daysOfMonths[3] = 30
302:		mov word [bp + 34], 30
304:	

gmtime$60:	; daysOfMonths[4] = 31
305:		mov word [bp + 36], 31
307:	

gmtime$61:	; daysOfMonths[5] = 30
308:		mov word [bp + 38], 30
310:	

gmtime$62:	; daysOfMonths[6] = 31
311:		mov word [bp + 40], 31
313:	

gmtime$63:	; daysOfMonths[7] = 31
314:		mov word [bp + 42], 31
316:	

gmtime$64:	; daysOfMonths[8] = 30
317:		mov word [bp + 44], 30
319:	

gmtime$65:	; daysOfMonths[9] = 31
320:		mov word [bp + 46], 31
322:	

gmtime$66:	; daysOfMonths[10] = 30
323:		mov word [bp + 48], 30
325:	

gmtime$67:	; daysOfMonths[11] = 31
326:		mov word [bp + 50], 31
328:	

gmtime$68:	; month = 0
329:		mov word [bp + 52], 0
331:	

gmtime$69:	; £temporary3572 = month * 2
332:		mov ax, [bp + 52]
334:		xor dx, dx
335:		mul word [int2$2#]
341:	

gmtime$70:	; £temporary3573 = daysOfMonths + £temporary3572
342:		mov si, bp
343:		add si, 28
344:		add si, ax
346:	

gmtime$71:	; £temporary3571 -> £temporary3573 = *£temporary3573
348:	

gmtime$72:	; £temporary3574 = int_to_int £temporary3571 -> £temporary3573 (Signed_Int -> Signed_Long_Int)
349:		mov ax, [si]
351:		and eax, 65535
353:		cmp ax, 0
354:		jge gmtime$73
355:		neg ax
357:		neg eax
359:	

gmtime$73:	; if totalDays < £temporary3574 goto 82
360:		cmp [bp + 20], eax
361:		jl gmtime$82
363:	

gmtime$74:	; £temporary3576 = month
364:		mov ax, [bp + 52]
366:	

gmtime$75:	; ++month
367:		inc word [bp + 52]
369:	

gmtime$76:	; £temporary3578 = £temporary3576 * 2
371:		xor dx, dx
372:		mul word [int2$2#]
378:	

gmtime$77:	; £temporary3579 = daysOfMonths + £temporary3578
379:		mov si, bp
380:		add si, 28
381:		add si, ax
383:	

gmtime$78:	; £temporary3577 -> £temporary3579 = *£temporary3579
385:	

gmtime$79:	; £temporary3580 = int_to_int £temporary3577 -> £temporary3579 (Signed_Int -> Signed_Long_Int)
386:		mov ax, [si]
388:		and eax, 65535
390:		cmp ax, 0
391:		jge gmtime$80
392:		neg ax
394:		neg eax
396:	

gmtime$80:	; totalDays = totalDays - £temporary3580
397:		sub [bp + 20], eax
399:	

gmtime$81:	; goto 69
400:		jmp gmtime$69
402:	

gmtime$82:	; g_timeStruct$tm_mon = month
403:		mov ax, [bp + 52]
404:		mov [@27$g_timeStruct + 8], ax
406:	

gmtime$83:	; £temporary3584 = totalDays + 1
407:		mov eax, [bp + 20]
408:		add eax, 1
410:	

gmtime$84:	; £temporary3585 = int_to_int £temporary3584 (Signed_Long_Int -> Signed_Int)
413:		cmp eax, 0
414:		jge gmtime$85
415:		neg eax
417:		neg ax
419:	

gmtime$85:	; g_timeStruct$tm_mday = £temporary3585
420:		mov [@27$g_timeStruct + 6], ax
422:	

gmtime$86:	; g_timeStruct$tm_isdst = -1
423:		mov word [@27$g_timeStruct + 16], -1
425:	

gmtime$87:	; return_value = (@27$g_timeStruct,0)
426:		mov bx, @27$g_timeStruct
428:	

gmtime$88:	; return
429:		mov ax, [bp]
430:		mov di, [bp + 4]
431:		mov bp, [bp + 2]
432:		jmp ax
434:	

gmtime$89:	; return_value = 0
435:		mov bx, 0
437:	

gmtime$90:	; return
438:		mov ax, [bp]
439:		mov di, [bp + 4]
440:		mov bp, [bp + 2]
441:		jmp ax
443:	

gmtime$91:	; function end gmtime
1:	

difftime:	; £temporary3589 = time2 - time1
2:		mov eax, [bp + 10]
3:		sub eax, [bp + 6]
5:	

difftime$1:	; £temporary3590 = int_to_float £temporary3589 (Unsigned_Long_Int -> Double)
6:		mov [container4bytes#], eax
7:		fild dword [container4bytes#]
9:	

difftime$2:	; return_value = £temporary3590
11:	

difftime$3:	; return
12:		mov ax, [bp]
13:		mov di, [bp + 4]
14:		mov bp, [bp + 2]
15:		jmp ax
17:	

difftime$4:	; function end difftime
1:	

asctime:	; localeConvPtr = 0
2:		mov word [bp + 8], 0
4:	

asctime$1:	; if localeConvPtr == 0 goto 5
5:		cmp word [bp + 8], 0
6:		je asctime$5
8:	

asctime$2:	; £temporary3592 -> localeConvPtr = *localeConvPtr, offset 4
9:		mov si, [bp + 8]
11:	

asctime$3:	; £temporary3596 = £temporary3592 -> localeConvPtr
12:		mov ax, [si + 4]
14:	

asctime$4:	; goto 6
15:		jmp asctime$6
17:	

asctime$5:	; £temporary3596 = 0
18:		mov ax, 0
20:	

asctime$6:	; shortDayList = £temporary3596
21:		mov [bp + 10], ax
23:	

asctime$7:	; if localeConvPtr == 0 goto 11
24:		cmp word [bp + 8], 0
25:		je asctime$11
27:	

asctime$8:	; £temporary3598 -> localeConvPtr = *localeConvPtr, offset 8
28:		mov si, [bp + 8]
30:	

asctime$9:	; £temporary3602 = £temporary3598 -> localeConvPtr
31:		mov ax, [si + 8]
33:	

asctime$10:	; goto 12
34:		jmp asctime$12
36:	

asctime$11:	; £temporary3602 = 0
37:		mov ax, 0
39:	

asctime$12:	; shortMonthList = £temporary3602
40:		mov [bp + 12], ax
42:	

asctime$13:	; if shortDayList == 0 goto 16
43:		cmp word [bp + 10], 0
44:		je asctime$16
46:	

asctime$14:	; £temporary3607 = shortDayList
47:		mov ax, [bp + 10]
49:	

asctime$15:	; goto 17
50:		jmp asctime$17
52:	

asctime$16:	; £temporary3607 = g_defaultShortDayList
53:		mov ax, @30$g_defaultShortDayList
55:	

asctime$17:	; shortDayList = £temporary3607
56:		mov [bp + 10], ax
58:	

asctime$18:	; if shortMonthList == 0 goto 21
59:		cmp word [bp + 12], 0
60:		je asctime$21
62:	

asctime$19:	; £temporary3612 = shortMonthList
63:		mov ax, [bp + 12]
65:	

asctime$20:	; goto 22
66:		jmp asctime$22
68:	

asctime$21:	; £temporary3612 = g_defaultShortMonthList
69:		mov ax, @32$g_defaultShortMonthList
71:	

asctime$22:	; shortMonthList = £temporary3612
72:		mov [bp + 12], ax
74:	

asctime$23:	; call header integral zero 0 stack zero 0
76:	

asctime$24:	; parameter g_timeString, offset 6
77:		mov word [bp + 20], @29$g_timeString
79:	

asctime$25:	; parameter string_25s2025s2025i202502i3A2502i3A2502i2025i#, offset 8
80:		mov word [bp + 22], string_25s2025s2025i202502i3A2502i3A2502i2025i#
82:	

asctime$26:	; £temporary3613 -> tp = *tp, offset 12
83:		mov si, [bp + 6]
85:	

asctime$27:	; £temporary3615 = £temporary3613 -> tp * 2
86:		mov ax, [si + 12]
88:		xor dx, dx
89:		mul word [int2$2#]
95:	

asctime$28:	; £temporary3616 = shortDayList + £temporary3615
96:		mov si, [bp + 10]
97:		add si, ax
99:	

asctime$29:	; £temporary3614 -> £temporary3616 = *£temporary3616
101:	

asctime$30:	; parameter £temporary3614 -> £temporary3616, offset 10
102:		mov ax, [si]
103:		mov [bp + 24], ax
105:	

asctime$31:	; £temporary3617 -> tp = *tp, offset 8
106:		mov si, [bp + 6]
108:	

asctime$32:	; £temporary3619 = £temporary3617 -> tp * 2
109:		mov ax, [si + 8]
111:		xor dx, dx
112:		mul word [int2$2#]
118:	

asctime$33:	; £temporary3620 = shortMonthList + £temporary3619
119:		mov si, [bp + 12]
120:		add si, ax
122:	

asctime$34:	; £temporary3618 -> £temporary3620 = *£temporary3620
124:	

asctime$35:	; parameter £temporary3618 -> £temporary3620, offset 12
125:		mov ax, [si]
126:		mov [bp + 26], ax
128:	

asctime$36:	; £temporary3621 -> tp = *tp, offset 6
129:		mov si, [bp + 6]
131:	

asctime$37:	; parameter £temporary3621 -> tp, offset 14
132:		mov ax, [si + 6]
133:		mov [bp + 28], ax
135:	

asctime$38:	; £temporary3622 -> tp = *tp, offset 4
136:		mov si, [bp + 6]
138:	

asctime$39:	; parameter £temporary3622 -> tp, offset 16
139:		mov ax, [si + 4]
140:		mov [bp + 30], ax
142:	

asctime$40:	; £temporary3623 -> tp = *tp, offset 2
143:		mov si, [bp + 6]
145:	

asctime$41:	; parameter £temporary3623 -> tp, offset 18
146:		mov ax, [si + 2]
147:		mov [bp + 32], ax
149:	

asctime$42:	; £temporary3624 -> tp = *tp
150:		mov si, [bp + 6]
152:	

asctime$43:	; parameter £temporary3624 -> tp, offset 20
153:		mov ax, [si]
154:		mov [bp + 34], ax
156:	

asctime$44:	; £temporary3625 -> tp = *tp, offset 10
157:		mov si, [bp + 6]
159:	

asctime$45:	; £temporary3626 = £temporary3625 -> tp + 1900
160:		mov ax, [si + 10]
161:		add ax, 1900
163:	

asctime$46:	; parameter £temporary3626, offset 22
164:		mov [bp + 36], ax
166:	

asctime$47:	; call function noellipse-ellipse sprintf, extra 0
167:		mov word [bp + 14], asctime$48
168:		mov [bp + 16], bp
169:		add bp, 14
170:		mov di, bp
171:		add di, 14
172:		jmp sprintf
174:	

asctime$48:	; post call
176:	

asctime$49:	; return_value = g_timeString
177:		mov bx, @29$g_timeString
179:	

asctime$50:	; return
180:		mov ax, [bp]
181:		mov di, [bp + 4]
182:		mov bp, [bp + 2]
183:		jmp ax
185:	

asctime$51:	; function end asctime
1:	

ctime:	; call header integral zero 0 stack zero 0
3:	

ctime$1:	; call header integral zero 0 stack zero 0
5:	

ctime$2:	; parameter time, offset 6
6:		mov ax, [bp + 6]
7:		mov [bp + 14], ax
9:	

ctime$3:	; call function noellipse-noellipse localtime
10:		mov word [bp + 8], ctime$4
11:		mov [bp + 10], bp
12:		add bp, 8
13:		jmp localtime
15:	

ctime$4:	; post call
17:	

ctime$5:	; £temporary3637 = return_value
22:	

ctime$6:	; parameter £temporary3637, offset 6
23:		mov [bp + 14], bx
25:	

ctime$7:	; call function noellipse-noellipse asctime
26:		mov word [bp + 8], ctime$8
27:		mov [bp + 10], bp
28:		add bp, 8
29:		jmp asctime
31:	

ctime$8:	; post call
33:	

ctime$9:	; £temporary3638 = return_value
38:	

ctime$10:	; return_value = £temporary3638
40:	

ctime$11:	; return
41:		mov ax, [bp]
42:		mov di, [bp + 4]
43:		mov bp, [bp + 2]
44:		jmp ax
46:	

ctime$12:	; function end ctime
1:	

localtime:	; call header integral zero 0 stack zero 0
3:	

localtime$1:	; parameter timePtr, offset 6
4:		mov ax, [bp + 6]
5:		mov [bp + 14], ax
7:	

localtime$2:	; call function noellipse-noellipse gmtime
8:		mov word [bp + 8], localtime$3
9:		mov [bp + 10], bp
10:		add bp, 8
11:		jmp gmtime
13:	

localtime$3:	; post call
15:	

localtime$4:	; £temporary3641 = return_value
20:	

localtime$5:	; tmPtr = £temporary3641
21:		mov [bp + 8], bx
23:	

localtime$6:	; call header integral zero 0 stack zero 0
25:	

localtime$7:	; call function noellipse-noellipse localeconv
26:		mov word [bp + 10], localtime$8
27:		mov [bp + 12], bp
28:		add bp, 10
29:		jmp localeconv
31:	

localtime$8:	; post call
33:	

localtime$9:	; £temporary3642 = return_value
38:	

localtime$10:	; localeConvPtr = £temporary3642
39:		mov [bp + 10], bx
41:	

localtime$11:	; timeZone = 0
42:		mov word [bp + 12], 0
44:	

localtime$12:	; if localeConvPtr == 0 goto 21
45:		cmp word [bp + 10], 0
46:		je localtime$21
48:	

localtime$13:	; £temporary3644 -> tmPtr = *tmPtr, offset 16
49:		mov si, [bp + 8]
51:	

localtime$14:	; if £temporary3644 -> tmPtr != 1 goto 18
52:		cmp word [si + 16], 1
53:		jne localtime$18
55:	

localtime$15:	; £temporary3646 -> localeConvPtr = *localeConvPtr
56:		mov si, [bp + 10]
58:	

localtime$16:	; £temporary3651 = £temporary3646 -> localeConvPtr
59:		mov ax, [si]
61:	

localtime$17:	; goto 20
62:		jmp localtime$20
64:	

localtime$18:	; £temporary3647 -> localeConvPtr = *localeConvPtr, offset 2
65:		mov si, [bp + 10]
67:	

localtime$19:	; £temporary3651 = £temporary3647 -> localeConvPtr
68:		mov ax, [si + 2]
70:	

localtime$20:	; timeZone = £temporary3651
71:		mov [bp + 12], ax
73:	

localtime$21:	; £temporary3652 -> timePtr = *timePtr
74:		mov si, [bp + 6]
76:	

localtime$22:	; £temporary3653 = int_to_int timeZone (Signed_Int -> Signed_Long_Int)
77:		mov ax, [bp + 12]
79:		and eax, 65535
81:		cmp ax, 0
82:		jge localtime$23
83:		neg ax
85:		neg eax
87:	

localtime$23:	; £temporary3654 = £temporary3653 * 3600
89:		xor edx, edx
90:		imul dword [int4$3600#]
96:	

localtime$24:	; t = £temporary3652 -> timePtr + £temporary3654
97:		mov ebx, [si]
98:		add ebx, eax
99:		mov [bp + 14], ebx
101:	

localtime$25:	; call header integral zero 0 stack zero 0
103:	

localtime$26:	; £temporary3656 = &t
104:		mov si, bp
105:		add si, 14
107:	

localtime$27:	; parameter £temporary3656, offset 6
108:		mov [bp + 24], si
110:	

localtime$28:	; call function noellipse-noellipse gmtime
111:		mov word [bp + 18], localtime$29
112:		mov [bp + 20], bp
113:		add bp, 18
114:		jmp gmtime
116:	

localtime$29:	; post call
118:	

localtime$30:	; £temporary3657 = return_value
123:	

localtime$31:	; return_value = £temporary3657
125:	

localtime$32:	; return
126:		mov ax, [bp]
127:		mov di, [bp + 4]
128:		mov bp, [bp + 2]
129:		jmp ax
131:	

localtime$33:	; function end localtime
1:	

strftime:	; call header integral zero 0 stack zero 0
3:	

strftime$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 14], strftime$2
5:		mov [bp + 16], bp
6:		add bp, 14
7:		jmp localeconv
9:	

strftime$2:	; post call
11:	

strftime$3:	; £temporary3661 = return_value
16:	

strftime$4:	; localeConvPtr = £temporary3661
17:		mov [bp + 14], bx
19:	

strftime$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 14], 0
21:		je strftime$9
23:	

strftime$6:	; £temporary3663 -> localeConvPtr = *localeConvPtr, offset 4
24:		mov si, [bp + 14]
26:	

strftime$7:	; £temporary3667 = £temporary3663 -> localeConvPtr
27:		mov ax, [si + 4]
29:	

strftime$8:	; goto 10
30:		jmp strftime$10
32:	

strftime$9:	; £temporary3667 = 0
33:		mov ax, 0
35:	

strftime$10:	; shortDayList = £temporary3667
36:		mov [bp + 16], ax
38:	

strftime$11:	; if localeConvPtr == 0 goto 15
39:		cmp word [bp + 14], 0
40:		je strftime$15
42:	

strftime$12:	; £temporary3669 -> localeConvPtr = *localeConvPtr, offset 8
43:		mov si, [bp + 14]
45:	

strftime$13:	; £temporary3673 = £temporary3669 -> localeConvPtr
46:		mov ax, [si + 8]
48:	

strftime$14:	; goto 16
49:		jmp strftime$16
51:	

strftime$15:	; £temporary3673 = 0
52:		mov ax, 0
54:	

strftime$16:	; shortMonthList = £temporary3673
55:		mov [bp + 18], ax
57:	

strftime$17:	; if localeConvPtr == 0 goto 21
58:		cmp word [bp + 14], 0
59:		je strftime$21
61:	

strftime$18:	; £temporary3675 -> localeConvPtr = *localeConvPtr, offset 6
62:		mov si, [bp + 14]
64:	

strftime$19:	; £temporary3679 = £temporary3675 -> localeConvPtr
65:		mov ax, [si + 6]
67:	

strftime$20:	; goto 22
68:		jmp strftime$22
70:	

strftime$21:	; £temporary3679 = 0
71:		mov ax, 0
73:	

strftime$22:	; longDayList = £temporary3679
74:		mov [bp + 20], ax
76:	

strftime$23:	; if localeConvPtr == 0 goto 27
77:		cmp word [bp + 14], 0
78:		je strftime$27
80:	

strftime$24:	; £temporary3681 -> localeConvPtr = *localeConvPtr, offset 10
81:		mov si, [bp + 14]
83:	

strftime$25:	; £temporary3685 = £temporary3681 -> localeConvPtr
84:		mov ax, [si + 10]
86:	

strftime$26:	; goto 28
87:		jmp strftime$28
89:	

strftime$27:	; £temporary3685 = 0
90:		mov ax, 0
92:	

strftime$28:	; longMonthList = £temporary3685
93:		mov [bp + 22], ax
95:	

strftime$29:	; £temporary3686 -> tp = *tp, offset 10
96:		mov si, [bp + 12]
98:	

strftime$30:	; £temporary3687 = £temporary3686 -> tp - 69
99:		mov ax, [si + 10]
100:		sub ax, 69
102:	

strftime$31:	; leapDays = £temporary3687 / 4
104:		xor dx, dx
105:		idiv word [int2$4#]
106:		mov [bp + 24], ax
108:	

strftime$32:	; £temporary3689 -> tp = *tp, offset 10
109:		mov si, [bp + 12]
111:	

strftime$33:	; £temporary3690 = £temporary3689 -> tp - 70
112:		mov ax, [si + 10]
113:		sub ax, 70
115:	

strftime$34:	; £temporary3691 = £temporary3690 * 365
117:		xor dx, dx
118:		imul word [int2$365#]
124:	

strftime$35:	; £temporary3692 = £temporary3691 + leapDays
125:		add ax, [bp + 24]
127:	

strftime$36:	; £temporary3693 -> tp = *tp, offset 14
128:		mov si, [bp + 12]
130:	

strftime$37:	; £temporary3694 = £temporary3692 + £temporary3693 -> tp
131:		add ax, [si + 14]
133:	

strftime$38:	; £temporary3695 = int_to_int £temporary3694 (Signed_Int -> Signed_Long_Int)
135:		and eax, 65535
137:		cmp ax, 0
138:		jge strftime$39
139:		neg ax
141:		neg eax
143:	

strftime$39:	; totalDays = £temporary3695
144:		mov [bp + 26], eax
146:	

strftime$40:	; call header integral zero 0 stack zero 0
148:	

strftime$41:	; parameter s, offset 6
149:		mov ax, [bp + 6]
150:		mov [bp + 40], ax
152:	

strftime$42:	; parameter string_#, offset 8
153:		mov word [bp + 42], string_#
155:	

strftime$43:	; call function noellipse-noellipse strcpy
156:		mov word [bp + 34], strftime$44
157:		mov [bp + 36], bp
158:		add bp, 34
159:		jmp strcpy
161:	

strftime$44:	; post call
163:	

strftime$45:	; if shortDayList == 0 goto 48
164:		cmp word [bp + 16], 0
165:		je strftime$48
167:	

strftime$46:	; £temporary3701 = shortDayList
168:		mov ax, [bp + 16]
170:	

strftime$47:	; goto 49
171:		jmp strftime$49
173:	

strftime$48:	; £temporary3701 = g_defaultShortDayList
174:		mov ax, @30$g_defaultShortDayList
176:	

strftime$49:	; shortDayList = £temporary3701
177:		mov [bp + 16], ax
179:	

strftime$50:	; if longDayList == 0 goto 53
180:		cmp word [bp + 20], 0
181:		je strftime$53
183:	

strftime$51:	; £temporary3706 = longDayList
184:		mov ax, [bp + 20]
186:	

strftime$52:	; goto 54
187:		jmp strftime$54
189:	

strftime$53:	; £temporary3706 = g_defaultLongDayList
190:		mov ax, @31$g_defaultLongDayList
192:	

strftime$54:	; longDayList = £temporary3706
193:		mov [bp + 20], ax
195:	

strftime$55:	; if shortMonthList == 0 goto 58
196:		cmp word [bp + 18], 0
197:		je strftime$58
199:	

strftime$56:	; £temporary3711 = shortMonthList
200:		mov ax, [bp + 18]
202:	

strftime$57:	; goto 59
203:		jmp strftime$59
205:	

strftime$58:	; £temporary3711 = g_defaultShortMonthList
206:		mov ax, @32$g_defaultShortMonthList
208:	

strftime$59:	; shortMonthList = £temporary3711
209:		mov [bp + 18], ax
211:	

strftime$60:	; if longMonthList == 0 goto 63
212:		cmp word [bp + 22], 0
213:		je strftime$63
215:	

strftime$61:	; £temporary3716 = longMonthList
216:		mov ax, [bp + 22]
218:	

strftime$62:	; goto 64
219:		jmp strftime$64
221:	

strftime$63:	; £temporary3716 = g_defaultLongMonthList
222:		mov ax, @33$g_defaultLongMonthList
224:	

strftime$64:	; longMonthList = £temporary3716
225:		mov [bp + 22], ax
227:	

strftime$65:	; if totalDays >= 3 goto 70
228:		cmp dword [bp + 26], 3
229:		jge strftime$70
231:	

strftime$66:	; £temporary3718 = totalDays + 4
232:		mov eax, [bp + 26]
233:		add eax, 4
235:	

strftime$67:	; £temporary3719 = int_to_int £temporary3718 (Signed_Long_Int -> Signed_Int)
238:		cmp eax, 0
239:		jge strftime$68
240:		neg eax
242:		neg ax
244:	

strftime$68:	; yearDaySunday = £temporary3719
245:		mov [bp + 30], ax
247:	

strftime$69:	; goto 74
248:		jmp strftime$74
250:	

strftime$70:	; £temporary3720 = totalDays - 3
251:		mov eax, [bp + 26]
252:		sub eax, 3
254:	

strftime$71:	; £temporary3721 = £temporary3720 % 7
256:		xor edx, edx
257:		idiv dword [int4$7#]
263:	

strftime$72:	; £temporary3722 = int_to_int £temporary3721 (Signed_Long_Int -> Signed_Int)
266:		cmp edx, 0
267:		jge strftime$73
268:		neg edx
270:		neg dx
272:	

strftime$73:	; yearDaySunday = £temporary3722
273:		mov [bp + 30], dx
275:	

strftime$74:	; if totalDays >= 4 goto 79
276:		cmp dword [bp + 26], 4
277:		jge strftime$79
279:	

strftime$75:	; £temporary3724 = totalDays + 3
280:		mov eax, [bp + 26]
281:		add eax, 3
283:	

strftime$76:	; £temporary3725 = int_to_int £temporary3724 (Signed_Long_Int -> Signed_Int)
286:		cmp eax, 0
287:		jge strftime$77
288:		neg eax
290:		neg ax
292:	

strftime$77:	; yearDayMonday = £temporary3725
293:		mov [bp + 32], ax
295:	

strftime$78:	; goto 83
296:		jmp strftime$83
298:	

strftime$79:	; £temporary3726 = totalDays - 4
299:		mov eax, [bp + 26]
300:		sub eax, 4
302:	

strftime$80:	; £temporary3727 = £temporary3726 % 7
304:		xor edx, edx
305:		idiv dword [int4$7#]
311:	

strftime$81:	; £temporary3728 = int_to_int £temporary3727 (Signed_Long_Int -> Signed_Int)
314:		cmp edx, 0
315:		jge strftime$82
316:		neg edx
318:		neg dx
320:	

strftime$82:	; yearDayMonday = £temporary3728
321:		mov [bp + 32], dx
323:	

strftime$83:	; index = 0
324:		mov word [bp + 34], 0
326:	

strftime$84:	; £temporary3730 = fmt + index
327:		mov si, [bp + 10]
328:		add si, [bp + 34]
330:	

strftime$85:	; £temporary3729 -> £temporary3730 = *£temporary3730
332:	

strftime$86:	; if £temporary3729 -> £temporary3730 == 0 goto 356
333:		cmp byte [si], 0
334:		je strftime$356
336:	

strftime$87:	; £temporary3734 = fmt + index
337:		mov si, [bp + 10]
338:		add si, [bp + 34]
340:	

strftime$88:	; £temporary3733 -> £temporary3734 = *£temporary3734
342:	

strftime$89:	; if £temporary3733 -> £temporary3734 != 37 goto 329
343:		cmp byte [si], 37
344:		jne strftime$329
346:	

strftime$90:	; ++index
347:		inc word [bp + 34]
349:	

strftime$91:	; £temporary3736 = index
350:		mov ax, [bp + 34]
352:	

strftime$92:	; £temporary3738 = fmt + £temporary3736
353:		mov si, [bp + 10]
354:		add si, ax
356:	

strftime$93:	; £temporary3737 -> £temporary3738 = *£temporary3738
357:		mov al, [si]
358:		mov [bp + 56], al
360:	

strftime$94:	; case £temporary3737 -> £temporary3738 == 97 goto 118
361:		mov al, [bp + 56]
362:		cmp al, 97
363:		je strftime$118
365:	

strftime$95:	; case £temporary3737 -> £temporary3738 == 65 goto 128
366:		cmp al, 65
367:		je strftime$128
369:	

strftime$96:	; case £temporary3737 -> £temporary3738 == 98 goto 138
370:		cmp al, 98
371:		je strftime$138
373:	

strftime$97:	; case £temporary3737 -> £temporary3738 == 66 goto 148
374:		cmp al, 66
375:		je strftime$148
377:	

strftime$98:	; case £temporary3737 -> £temporary3738 == 99 goto 158
378:		cmp al, 99
379:		je strftime$158
381:	

strftime$99:	; case £temporary3737 -> £temporary3738 == 100 goto 178
382:		cmp al, 100
383:		je strftime$178
385:	

strftime$100:	; case £temporary3737 -> £temporary3738 == 72 goto 186
386:		cmp al, 72
387:		je strftime$186
389:	

strftime$101:	; case £temporary3737 -> £temporary3738 == 73 goto 194
390:		cmp al, 73
391:		je strftime$194
393:	

strftime$102:	; case £temporary3737 -> £temporary3738 == 106 goto 203
394:		cmp al, 106
395:		je strftime$203
397:	

strftime$103:	; case £temporary3737 -> £temporary3738 == 109 goto 211
398:		cmp al, 109
399:		je strftime$211
401:	

strftime$104:	; case £temporary3737 -> £temporary3738 == 77 goto 220
402:		cmp al, 77
403:		je strftime$220
405:	

strftime$105:	; case £temporary3737 -> £temporary3738 == 112 goto 228
406:		cmp al, 112
407:		je strftime$228
409:	

strftime$106:	; case £temporary3737 -> £temporary3738 == 83 goto 240
410:		cmp al, 83
411:		je strftime$240
413:	

strftime$107:	; case £temporary3737 -> £temporary3738 == 85 goto 248
414:		cmp al, 85
415:		je strftime$248
417:	

strftime$108:	; case £temporary3737 -> £temporary3738 == 119 goto 255
418:		cmp al, 119
419:		je strftime$255
421:	

strftime$109:	; case £temporary3737 -> £temporary3738 == 87 goto 263
422:		cmp al, 87
423:		je strftime$263
425:	

strftime$110:	; case £temporary3737 -> £temporary3738 == 120 goto 270
426:		cmp al, 120
427:		je strftime$270
429:	

strftime$111:	; case £temporary3737 -> £temporary3738 == 88 goto 282
430:		cmp al, 88
431:		je strftime$282
433:	

strftime$112:	; case £temporary3737 -> £temporary3738 == 121 goto 294
434:		cmp al, 121
435:		je strftime$294
437:	

strftime$113:	; case £temporary3737 -> £temporary3738 == 89 goto 303
438:		cmp al, 89
439:		je strftime$303
441:	

strftime$114:	; case £temporary3737 -> £temporary3738 == 90 goto 312
442:		cmp al, 90
443:		je strftime$312
445:	

strftime$115:	; case £temporary3737 -> £temporary3738 == 37 goto 318
446:		cmp al, 37
447:		je strftime$318
449:	

strftime$116:	; case end £temporary3737 -> £temporary3738
451:	

strftime$117:	; goto 323
452:		jmp strftime$323
454:	

strftime$118:	; call header integral zero 0 stack zero 0
456:	

strftime$119:	; parameter add, offset 6
457:		mov [bp + 62], bp
458:		add word [bp + 62], 36
460:	

strftime$120:	; £temporary3739 -> tp = *tp, offset 12
461:		mov si, [bp + 12]
463:	

strftime$121:	; £temporary3741 = £temporary3739 -> tp * 2
464:		mov ax, [si + 12]
466:		xor dx, dx
467:		mul word [int2$2#]
473:	

strftime$122:	; £temporary3742 = shortDayList + £temporary3741
474:		mov si, [bp + 16]
475:		add si, ax
477:	

strftime$123:	; £temporary3740 -> £temporary3742 = *£temporary3742
479:	

strftime$124:	; parameter £temporary3740 -> £temporary3742, offset 8
480:		mov ax, [si]
481:		mov [bp + 64], ax
483:	

strftime$125:	; call function noellipse-noellipse strcpy
484:		mov word [bp + 56], strftime$126
485:		mov [bp + 58], bp
486:		add bp, 56
487:		jmp strcpy
489:	

strftime$126:	; post call
491:	

strftime$127:	; goto 335
492:		jmp strftime$335
494:	

strftime$128:	; call header integral zero 0 stack zero 0
496:	

strftime$129:	; parameter add, offset 6
497:		mov [bp + 62], bp
498:		add word [bp + 62], 36
500:	

strftime$130:	; £temporary3744 -> tp = *tp, offset 12
501:		mov si, [bp + 12]
503:	

strftime$131:	; £temporary3746 = £temporary3744 -> tp * 2
504:		mov ax, [si + 12]
506:		xor dx, dx
507:		mul word [int2$2#]
513:	

strftime$132:	; £temporary3747 = longDayList + £temporary3746
514:		mov si, [bp + 20]
515:		add si, ax
517:	

strftime$133:	; £temporary3745 -> £temporary3747 = *£temporary3747
519:	

strftime$134:	; parameter £temporary3745 -> £temporary3747, offset 8
520:		mov ax, [si]
521:		mov [bp + 64], ax
523:	

strftime$135:	; call function noellipse-noellipse strcpy
524:		mov word [bp + 56], strftime$136
525:		mov [bp + 58], bp
526:		add bp, 56
527:		jmp strcpy
529:	

strftime$136:	; post call
531:	

strftime$137:	; goto 335
532:		jmp strftime$335
534:	

strftime$138:	; call header integral zero 0 stack zero 0
536:	

strftime$139:	; parameter add, offset 6
537:		mov [bp + 62], bp
538:		add word [bp + 62], 36
540:	

strftime$140:	; £temporary3749 -> tp = *tp, offset 8
541:		mov si, [bp + 12]
543:	

strftime$141:	; £temporary3751 = £temporary3749 -> tp * 2
544:		mov ax, [si + 8]
546:		xor dx, dx
547:		mul word [int2$2#]
553:	

strftime$142:	; £temporary3752 = shortMonthList + £temporary3751
554:		mov si, [bp + 18]
555:		add si, ax
557:	

strftime$143:	; £temporary3750 -> £temporary3752 = *£temporary3752
559:	

strftime$144:	; parameter £temporary3750 -> £temporary3752, offset 8
560:		mov ax, [si]
561:		mov [bp + 64], ax
563:	

strftime$145:	; call function noellipse-noellipse strcpy
564:		mov word [bp + 56], strftime$146
565:		mov [bp + 58], bp
566:		add bp, 56
567:		jmp strcpy
569:	

strftime$146:	; post call
571:	

strftime$147:	; goto 335
572:		jmp strftime$335
574:	

strftime$148:	; call header integral zero 0 stack zero 0
576:	

strftime$149:	; parameter add, offset 6
577:		mov [bp + 62], bp
578:		add word [bp + 62], 36
580:	

strftime$150:	; £temporary3754 -> tp = *tp, offset 8
581:		mov si, [bp + 12]
583:	

strftime$151:	; £temporary3756 = £temporary3754 -> tp * 2
584:		mov ax, [si + 8]
586:		xor dx, dx
587:		mul word [int2$2#]
593:	

strftime$152:	; £temporary3757 = longMonthList + £temporary3756
594:		mov si, [bp + 22]
595:		add si, ax
597:	

strftime$153:	; £temporary3755 -> £temporary3757 = *£temporary3757
599:	

strftime$154:	; parameter £temporary3755 -> £temporary3757, offset 8
600:		mov ax, [si]
601:		mov [bp + 64], ax
603:	

strftime$155:	; call function noellipse-noellipse strcpy
604:		mov word [bp + 56], strftime$156
605:		mov [bp + 58], bp
606:		add bp, 56
607:		jmp strcpy
609:	

strftime$156:	; post call
611:	

strftime$157:	; goto 335
612:		jmp strftime$335
614:	

strftime$158:	; call header integral zero 0 stack zero 0
616:	

strftime$159:	; parameter add, offset 6
617:		mov [bp + 62], bp
618:		add word [bp + 62], 36
620:	

strftime$160:	; parameter string_2502i2D2502i2D2502i202502i3A2502i3A2502i#, offset 8
621:		mov word [bp + 64], string_2502i2D2502i2D2502i202502i3A2502i3A2502i#
623:	

strftime$161:	; £temporary3759 -> tp = *tp, offset 10
624:		mov si, [bp + 12]
626:	

strftime$162:	; £temporary3760 = £temporary3759 -> tp + 1900
627:		mov ax, [si + 10]
628:		add ax, 1900
630:	

strftime$163:	; parameter £temporary3760, offset 10
631:		mov [bp + 66], ax
633:	

strftime$164:	; £temporary3761 -> tp = *tp, offset 8
634:		mov si, [bp + 12]
636:	

strftime$165:	; £temporary3762 = £temporary3761 -> tp + 1
637:		mov ax, [si + 8]
638:		add ax, 1
640:	

strftime$166:	; parameter £temporary3762, offset 12
641:		mov [bp + 68], ax
643:	

strftime$167:	; £temporary3763 -> tp = *tp, offset 6
644:		mov si, [bp + 12]
646:	

strftime$168:	; parameter £temporary3763 -> tp, offset 14
647:		mov ax, [si + 6]
648:		mov [bp + 70], ax
650:	

strftime$169:	; £temporary3764 -> tp = *tp, offset 4
651:		mov si, [bp + 12]
653:	

strftime$170:	; parameter £temporary3764 -> tp, offset 16
654:		mov ax, [si + 4]
655:		mov [bp + 72], ax
657:	

strftime$171:	; £temporary3765 -> tp = *tp, offset 2
658:		mov si, [bp + 12]
660:	

strftime$172:	; parameter £temporary3765 -> tp, offset 18
661:		mov ax, [si + 2]
662:		mov [bp + 74], ax
664:	

strftime$173:	; £temporary3766 -> tp = *tp
665:		mov si, [bp + 12]
667:	

strftime$174:	; parameter £temporary3766 -> tp, offset 20
668:		mov ax, [si]
669:		mov [bp + 76], ax
671:	

strftime$175:	; call function noellipse-ellipse sprintf, extra 0
672:		mov word [bp + 56], strftime$176
673:		mov [bp + 58], bp
674:		add bp, 56
675:		mov di, bp
676:		add di, 12
677:		jmp sprintf
679:	

strftime$176:	; post call
681:	

strftime$177:	; goto 335
682:		jmp strftime$335
684:	

strftime$178:	; call header integral zero 0 stack zero 0
686:	

strftime$179:	; parameter add, offset 6
687:		mov [bp + 62], bp
688:		add word [bp + 62], 36
690:	

strftime$180:	; parameter string_25i#, offset 8
691:		mov word [bp + 64], string_25i#
693:	

strftime$181:	; £temporary3768 -> tp = *tp, offset 6
694:		mov si, [bp + 12]
696:	

strftime$182:	; parameter £temporary3768 -> tp, offset 10
697:		mov ax, [si + 6]
698:		mov [bp + 66], ax
700:	

strftime$183:	; call function noellipse-ellipse sprintf, extra 0
701:		mov word [bp + 56], strftime$184
702:		mov [bp + 58], bp
703:		add bp, 56
704:		mov di, bp
705:		add di, 2
706:		jmp sprintf
708:	

strftime$184:	; post call
710:	

strftime$185:	; goto 335
711:		jmp strftime$335
713:	

strftime$186:	; call header integral zero 0 stack zero 0
715:	

strftime$187:	; parameter add, offset 6
716:		mov [bp + 62], bp
717:		add word [bp + 62], 36
719:	

strftime$188:	; parameter string_25i#, offset 8
720:		mov word [bp + 64], string_25i#
722:	

strftime$189:	; £temporary3770 -> tp = *tp, offset 4
723:		mov si, [bp + 12]
725:	

strftime$190:	; parameter £temporary3770 -> tp, offset 10
726:		mov ax, [si + 4]
727:		mov [bp + 66], ax
729:	

strftime$191:	; call function noellipse-ellipse sprintf, extra 0
730:		mov word [bp + 56], strftime$192
731:		mov [bp + 58], bp
732:		add bp, 56
733:		mov di, bp
734:		add di, 2
735:		jmp sprintf
737:	

strftime$192:	; post call
739:	

strftime$193:	; goto 335
740:		jmp strftime$335
742:	

strftime$194:	; call header integral zero 0 stack zero 0
744:	

strftime$195:	; parameter add, offset 6
745:		mov [bp + 62], bp
746:		add word [bp + 62], 36
748:	

strftime$196:	; parameter string_25i#, offset 8
749:		mov word [bp + 64], string_25i#
751:	

strftime$197:	; £temporary3772 -> tp = *tp, offset 4
752:		mov si, [bp + 12]
754:	

strftime$198:	; £temporary3773 = £temporary3772 -> tp % 12
755:		mov ax, [si + 4]
757:		xor dx, dx
758:		idiv word [int2$12#]
764:	

strftime$199:	; parameter £temporary3773, offset 10
765:		mov [bp + 66], dx
767:	

strftime$200:	; call function noellipse-ellipse sprintf, extra 0
768:		mov word [bp + 56], strftime$201
769:		mov [bp + 58], bp
770:		add bp, 56
771:		mov di, bp
772:		add di, 2
773:		jmp sprintf
775:	

strftime$201:	; post call
777:	

strftime$202:	; goto 335
778:		jmp strftime$335
780:	

strftime$203:	; call header integral zero 0 stack zero 0
782:	

strftime$204:	; parameter add, offset 6
783:		mov [bp + 62], bp
784:		add word [bp + 62], 36
786:	

strftime$205:	; parameter string_25i#, offset 8
787:		mov word [bp + 64], string_25i#
789:	

strftime$206:	; £temporary3775 -> tp = *tp, offset 14
790:		mov si, [bp + 12]
792:	

strftime$207:	; parameter £temporary3775 -> tp, offset 10
793:		mov ax, [si + 14]
794:		mov [bp + 66], ax
796:	

strftime$208:	; call function noellipse-ellipse sprintf, extra 0
797:		mov word [bp + 56], strftime$209
798:		mov [bp + 58], bp
799:		add bp, 56
800:		mov di, bp
801:		add di, 2
802:		jmp sprintf
804:	

strftime$209:	; post call
806:	

strftime$210:	; goto 335
807:		jmp strftime$335
809:	

strftime$211:	; call header integral zero 0 stack zero 0
811:	

strftime$212:	; parameter add, offset 6
812:		mov [bp + 62], bp
813:		add word [bp + 62], 36
815:	

strftime$213:	; parameter string_25i#, offset 8
816:		mov word [bp + 64], string_25i#
818:	

strftime$214:	; £temporary3777 -> tp = *tp, offset 8
819:		mov si, [bp + 12]
821:	

strftime$215:	; £temporary3778 = £temporary3777 -> tp + 1
822:		mov ax, [si + 8]
823:		add ax, 1
825:	

strftime$216:	; parameter £temporary3778, offset 10
826:		mov [bp + 66], ax
828:	

strftime$217:	; call function noellipse-ellipse sprintf, extra 0
829:		mov word [bp + 56], strftime$218
830:		mov [bp + 58], bp
831:		add bp, 56
832:		mov di, bp
833:		add di, 2
834:		jmp sprintf
836:	

strftime$218:	; post call
838:	

strftime$219:	; goto 335
839:		jmp strftime$335
841:	

strftime$220:	; call header integral zero 0 stack zero 0
843:	

strftime$221:	; parameter add, offset 6
844:		mov [bp + 62], bp
845:		add word [bp + 62], 36
847:	

strftime$222:	; parameter string_25i#, offset 8
848:		mov word [bp + 64], string_25i#
850:	

strftime$223:	; £temporary3780 -> tp = *tp, offset 2
851:		mov si, [bp + 12]
853:	

strftime$224:	; parameter £temporary3780 -> tp, offset 10
854:		mov ax, [si + 2]
855:		mov [bp + 66], ax
857:	

strftime$225:	; call function noellipse-ellipse sprintf, extra 0
858:		mov word [bp + 56], strftime$226
859:		mov [bp + 58], bp
860:		add bp, 56
861:		mov di, bp
862:		add di, 2
863:		jmp sprintf
865:	

strftime$226:	; post call
867:	

strftime$227:	; goto 335
868:		jmp strftime$335
870:	

strftime$228:	; call header integral zero 0 stack zero 0
872:	

strftime$229:	; parameter add, offset 6
873:		mov [bp + 62], bp
874:		add word [bp + 62], 36
876:	

strftime$230:	; parameter string_25s#, offset 8
877:		mov word [bp + 64], string_25s#
879:	

strftime$231:	; £temporary3782 -> tp = *tp, offset 4
880:		mov si, [bp + 12]
882:	

strftime$232:	; if £temporary3782 -> tp >= 12 goto 235
883:		cmp word [si + 4], 12
884:		jge strftime$235
886:	

strftime$233:	; £temporary3787 = string_AM#
887:		mov ax, string_AM#
889:	

strftime$234:	; goto 236
890:		jmp strftime$236
892:	

strftime$235:	; £temporary3787 = string_PM#
893:		mov ax, string_PM#
895:	

strftime$236:	; parameter £temporary3787, offset 10
896:		mov [bp + 66], ax
898:	

strftime$237:	; call function noellipse-ellipse sprintf, extra 0
899:		mov word [bp + 56], strftime$238
900:		mov [bp + 58], bp
901:		add bp, 56
902:		mov di, bp
903:		add di, 2
904:		jmp sprintf
906:	

strftime$238:	; post call
908:	

strftime$239:	; goto 335
909:		jmp strftime$335
911:	

strftime$240:	; call header integral zero 0 stack zero 0
913:	

strftime$241:	; parameter add, offset 6
914:		mov [bp + 62], bp
915:		add word [bp + 62], 36
917:	

strftime$242:	; parameter string_25i#, offset 8
918:		mov word [bp + 64], string_25i#
920:	

strftime$243:	; £temporary3789 -> tp = *tp
921:		mov si, [bp + 12]
923:	

strftime$244:	; parameter £temporary3789 -> tp, offset 10
924:		mov ax, [si]
925:		mov [bp + 66], ax
927:	

strftime$245:	; call function noellipse-ellipse sprintf, extra 0
928:		mov word [bp + 56], strftime$246
929:		mov [bp + 58], bp
930:		add bp, 56
931:		mov di, bp
932:		add di, 2
933:		jmp sprintf
935:	

strftime$246:	; post call
937:	

strftime$247:	; goto 335
938:		jmp strftime$335
940:	

strftime$248:	; call header integral zero 0 stack zero 0
942:	

strftime$249:	; parameter add, offset 6
943:		mov [bp + 62], bp
944:		add word [bp + 62], 36
946:	

strftime$250:	; parameter string_25i#, offset 8
947:		mov word [bp + 64], string_25i#
949:	

strftime$251:	; parameter yearDaySunday, offset 10
950:		mov ax, [bp + 30]
951:		mov [bp + 66], ax
953:	

strftime$252:	; call function noellipse-ellipse sprintf, extra 0
954:		mov word [bp + 56], strftime$253
955:		mov [bp + 58], bp
956:		add bp, 56
957:		mov di, bp
958:		add di, 2
959:		jmp sprintf
961:	

strftime$253:	; post call
963:	

strftime$254:	; goto 335
964:		jmp strftime$335
966:	

strftime$255:	; call header integral zero 0 stack zero 0
968:	

strftime$256:	; parameter add, offset 6
969:		mov [bp + 62], bp
970:		add word [bp + 62], 36
972:	

strftime$257:	; parameter string_25i#, offset 8
973:		mov word [bp + 64], string_25i#
975:	

strftime$258:	; £temporary3792 -> tp = *tp, offset 12
976:		mov si, [bp + 12]
978:	

strftime$259:	; parameter £temporary3792 -> tp, offset 10
979:		mov ax, [si + 12]
980:		mov [bp + 66], ax
982:	

strftime$260:	; call function noellipse-ellipse sprintf, extra 0
983:		mov word [bp + 56], strftime$261
984:		mov [bp + 58], bp
985:		add bp, 56
986:		mov di, bp
987:		add di, 2
988:		jmp sprintf
990:	

strftime$261:	; post call
992:	

strftime$262:	; goto 335
993:		jmp strftime$335
995:	

strftime$263:	; call header integral zero 0 stack zero 0
997:	

strftime$264:	; parameter add, offset 6
998:		mov [bp + 62], bp
999:		add word [bp + 62], 36
1001:	

strftime$265:	; parameter string_25i#, offset 8
1002:		mov word [bp + 64], string_25i#
1004:	

strftime$266:	; parameter yearDayMonday, offset 10
1005:		mov ax, [bp + 32]
1006:		mov [bp + 66], ax
1008:	

strftime$267:	; call function noellipse-ellipse sprintf, extra 0
1009:		mov word [bp + 56], strftime$268
1010:		mov [bp + 58], bp
1011:		add bp, 56
1012:		mov di, bp
1013:		add di, 2
1014:		jmp sprintf
1016:	

strftime$268:	; post call
1018:	

strftime$269:	; goto 335
1019:		jmp strftime$335
1021:	

strftime$270:	; call header integral zero 0 stack zero 0
1023:	

strftime$271:	; parameter add, offset 6
1024:		mov [bp + 62], bp
1025:		add word [bp + 62], 36
1027:	

strftime$272:	; parameter string_2502i3A2502i3A2502i#, offset 8
1028:		mov word [bp + 64], string_2502i3A2502i3A2502i#
1030:	

strftime$273:	; £temporary3795 -> tp = *tp, offset 4
1031:		mov si, [bp + 12]
1033:	

strftime$274:	; parameter £temporary3795 -> tp, offset 10
1034:		mov ax, [si + 4]
1035:		mov [bp + 66], ax
1037:	

strftime$275:	; £temporary3796 -> tp = *tp, offset 2
1038:		mov si, [bp + 12]
1040:	

strftime$276:	; parameter £temporary3796 -> tp, offset 12
1041:		mov ax, [si + 2]
1042:		mov [bp + 68], ax
1044:	

strftime$277:	; £temporary3797 -> tp = *tp
1045:		mov si, [bp + 12]
1047:	

strftime$278:	; parameter £temporary3797 -> tp, offset 14
1048:		mov ax, [si]
1049:		mov [bp + 70], ax
1051:	

strftime$279:	; call function noellipse-ellipse sprintf, extra 0
1052:		mov word [bp + 56], strftime$280
1053:		mov [bp + 58], bp
1054:		add bp, 56
1055:		mov di, bp
1056:		add di, 6
1057:		jmp sprintf
1059:	

strftime$280:	; post call
1061:	

strftime$281:	; goto 335
1062:		jmp strftime$335
1064:	

strftime$282:	; call header integral zero 0 stack zero 0
1066:	

strftime$283:	; parameter add, offset 6
1067:		mov [bp + 62], bp
1068:		add word [bp + 62], 36
1070:	

strftime$284:	; parameter string_2502i3A2502i3A2502i#, offset 8
1071:		mov word [bp + 64], string_2502i3A2502i3A2502i#
1073:	

strftime$285:	; £temporary3799 -> tp = *tp, offset 4
1074:		mov si, [bp + 12]
1076:	

strftime$286:	; parameter £temporary3799 -> tp, offset 10
1077:		mov ax, [si + 4]
1078:		mov [bp + 66], ax
1080:	

strftime$287:	; £temporary3800 -> tp = *tp, offset 2
1081:		mov si, [bp + 12]
1083:	

strftime$288:	; parameter £temporary3800 -> tp, offset 12
1084:		mov ax, [si + 2]
1085:		mov [bp + 68], ax
1087:	

strftime$289:	; £temporary3801 -> tp = *tp
1088:		mov si, [bp + 12]
1090:	

strftime$290:	; parameter £temporary3801 -> tp, offset 14
1091:		mov ax, [si]
1092:		mov [bp + 70], ax
1094:	

strftime$291:	; call function noellipse-ellipse sprintf, extra 0
1095:		mov word [bp + 56], strftime$292
1096:		mov [bp + 58], bp
1097:		add bp, 56
1098:		mov di, bp
1099:		add di, 6
1100:		jmp sprintf
1102:	

strftime$292:	; post call
1104:	

strftime$293:	; goto 335
1105:		jmp strftime$335
1107:	

strftime$294:	; call header integral zero 0 stack zero 0
1109:	

strftime$295:	; parameter add, offset 6
1110:		mov [bp + 62], bp
1111:		add word [bp + 62], 36
1113:	

strftime$296:	; parameter string_25i#, offset 8
1114:		mov word [bp + 64], string_25i#
1116:	

strftime$297:	; £temporary3803 -> tp = *tp, offset 10
1117:		mov si, [bp + 12]
1119:	

strftime$298:	; £temporary3804 = £temporary3803 -> tp % 100
1120:		mov ax, [si + 10]
1122:		xor dx, dx
1123:		idiv word [int2$100#]
1129:	

strftime$299:	; parameter £temporary3804, offset 10
1130:		mov [bp + 66], dx
1132:	

strftime$300:	; call function noellipse-ellipse sprintf, extra 0
1133:		mov word [bp + 56], strftime$301
1134:		mov [bp + 58], bp
1135:		add bp, 56
1136:		mov di, bp
1137:		add di, 2
1138:		jmp sprintf
1140:	

strftime$301:	; post call
1142:	

strftime$302:	; goto 335
1143:		jmp strftime$335
1145:	

strftime$303:	; call header integral zero 0 stack zero 0
1147:	

strftime$304:	; parameter add, offset 6
1148:		mov [bp + 62], bp
1149:		add word [bp + 62], 36
1151:	

strftime$305:	; parameter string_25i#, offset 8
1152:		mov word [bp + 64], string_25i#
1154:	

strftime$306:	; £temporary3806 -> tp = *tp, offset 10
1155:		mov si, [bp + 12]
1157:	

strftime$307:	; £temporary3807 = £temporary3806 -> tp + 1900
1158:		mov ax, [si + 10]
1159:		add ax, 1900
1161:	

strftime$308:	; parameter £temporary3807, offset 10
1162:		mov [bp + 66], ax
1164:	

strftime$309:	; call function noellipse-ellipse sprintf, extra 0
1165:		mov word [bp + 56], strftime$310
1166:		mov [bp + 58], bp
1167:		add bp, 56
1168:		mov di, bp
1169:		add di, 2
1170:		jmp sprintf
1172:	

strftime$310:	; post call
1174:	

strftime$311:	; goto 335
1175:		jmp strftime$335
1177:	

strftime$312:	; call header integral zero 0 stack zero 0
1179:	

strftime$313:	; parameter add, offset 6
1180:		mov [bp + 62], bp
1181:		add word [bp + 62], 36
1183:	

strftime$314:	; parameter string_#, offset 8
1184:		mov word [bp + 64], string_#
1186:	

strftime$315:	; call function noellipse-noellipse strcpy
1187:		mov word [bp + 56], strftime$316
1188:		mov [bp + 58], bp
1189:		add bp, 56
1190:		jmp strcpy
1192:	

strftime$316:	; post call
1194:	

strftime$317:	; goto 335
1195:		jmp strftime$335
1197:	

strftime$318:	; call header integral zero 0 stack zero 0
1199:	

strftime$319:	; parameter add, offset 6
1200:		mov [bp + 62], bp
1201:		add word [bp + 62], 36
1203:	

strftime$320:	; parameter string_25#, offset 8
1204:		mov word [bp + 64], string_25#
1206:	

strftime$321:	; call function noellipse-noellipse strcpy
1207:		mov word [bp + 56], strftime$322
1208:		mov [bp + 58], bp
1209:		add bp, 56
1210:		jmp strcpy
1212:	

strftime$322:	; post call
1214:	

strftime$323:	; call header integral zero 0 stack zero 0
1216:	

strftime$324:	; parameter add, offset 6
1217:		mov [bp + 62], bp
1218:		add word [bp + 62], 36
1220:	

strftime$325:	; parameter string_#, offset 8
1221:		mov word [bp + 64], string_#
1223:	

strftime$326:	; call function noellipse-noellipse strcpy
1224:		mov word [bp + 56], strftime$327
1225:		mov [bp + 58], bp
1226:		add bp, 56
1227:		jmp strcpy
1229:	

strftime$327:	; post call
1231:	

strftime$328:	; goto 335
1232:		jmp strftime$335
1234:	

strftime$329:	; £temporary3812 -> add = *add
1235:		mov si, bp
1236:		add si, 36
1238:	

strftime$330:	; £temporary3814 = fmt + index
1239:		mov di, [bp + 10]
1240:		add di, [bp + 34]
1242:	

strftime$331:	; £temporary3813 -> £temporary3814 = *£temporary3814
1244:	

strftime$332:	; £temporary3812 -> add = £temporary3813 -> £temporary3814
1245:		mov al, [di]
1246:		mov [si], al
1248:	

strftime$333:	; £temporary3815 -> add = *add, offset 1
1249:		mov si, bp
1250:		add si, 36
1252:	

strftime$334:	; £temporary3815 -> add = 0
1253:		mov byte [si + 1], 0
1255:	

strftime$335:	; call header integral zero 0 stack zero 0
1257:	

strftime$336:	; parameter s, offset 6
1258:		mov ax, [bp + 6]
1259:		mov [bp + 62], ax
1261:	

strftime$337:	; call function noellipse-noellipse strlen
1262:		mov word [bp + 56], strftime$338
1263:		mov [bp + 58], bp
1264:		add bp, 56
1265:		jmp strlen
1267:	

strftime$338:	; post call
1269:	

strftime$339:	; £temporary3816 = return_value
1274:	

strftime$340:	; x = £temporary3816
1275:		mov [bp + 56], bx
1277:	

strftime$341:	; call header integral zero 0 stack zero 0
1279:	

strftime$342:	; parameter add, offset 6
1280:		mov [bp + 64], bp
1281:		add word [bp + 64], 36
1283:	

strftime$343:	; call function noellipse-noellipse strlen
1284:		mov word [bp + 58], strftime$344
1285:		mov [bp + 60], bp
1286:		add bp, 58
1287:		jmp strlen
1289:	

strftime$344:	; post call
1291:	

strftime$345:	; £temporary3817 = return_value
1296:	

strftime$346:	; y = £temporary3817
1297:		mov [bp + 58], bx
1299:	

strftime$347:	; £temporary3818 = x + y
1300:		mov ax, [bp + 56]
1301:		add ax, [bp + 58]
1303:	

strftime$348:	; if £temporary3818 >= smax goto 356
1304:		cmp ax, [bp + 8]
1305:		jge strftime$356
1307:	

strftime$349:	; call header integral zero 0 stack zero 0
1309:	

strftime$350:	; parameter s, offset 6
1310:		mov ax, [bp + 6]
1311:		mov [bp + 66], ax
1313:	

strftime$351:	; parameter add, offset 8
1314:		mov [bp + 68], bp
1315:		add word [bp + 68], 36
1317:	

strftime$352:	; call function noellipse-noellipse strcat
1318:		mov word [bp + 60], strftime$353
1319:		mov [bp + 62], bp
1320:		add bp, 60
1321:		jmp strcat
1323:	

strftime$353:	; post call
1325:	

strftime$354:	; ++index
1326:		inc word [bp + 34]
1328:	

strftime$355:	; goto 84
1329:		jmp strftime$84
1331:	

strftime$356:	; call header integral zero 0 stack zero 0
1333:	

strftime$357:	; parameter s, offset 6
1334:		mov ax, [bp + 6]
1335:		mov [bp + 40], ax
1337:	

strftime$358:	; call function noellipse-noellipse strlen
1338:		mov word [bp + 34], strftime$359
1339:		mov [bp + 36], bp
1340:		add bp, 34
1341:		jmp strlen
1343:	

strftime$359:	; post call
1345:	

strftime$360:	; £temporary3821 = return_value
1350:	

strftime$361:	; return_value = £temporary3821
1352:	

strftime$362:	; return
1353:		mov ax, [bp]
1354:		mov di, [bp + 4]
1355:		mov bp, [bp + 2]
1356:		jmp ax
1358:	

strftime$363:	; function end strftime
