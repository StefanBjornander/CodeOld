1:	

time_test:	; weekdays[0] = string_Sun#
2:		mov word [bp + 6], string_Sun#
4:	

time_test$1:	; weekdays[1] = string_Mon#
5:		mov word [bp + 8], string_Mon#
7:	

time_test$2:	; weekdays[2] = string_Tue#
8:		mov word [bp + 10], string_Tue#
10:	

time_test$3:	; weekdays[3] = string_Wed#
11:		mov word [bp + 12], string_Wed#
13:	

time_test$4:	; weekdays[4] = string_Thu#
14:		mov word [bp + 14], string_Thu#
16:	

time_test$5:	; weekdays[5] = string_Fri#
17:		mov word [bp + 16], string_Fri#
19:	

time_test$6:	; weekdays[6] = string_Sat#
20:		mov word [bp + 18], string_Sat#
22:	

time_test$7:	; call header integral zero 0 stack zero 0
24:	

time_test$8:	; parameter 0, offset 6
25:		mov word [bp + 26], 0
27:	

time_test$9:	; call function noellipse-noellipse time
28:		mov word [bp + 20], time_test$10
29:		mov [bp + 22], bp
30:		add bp, 20
31:		jmp time
33:	

time_test$10:	; post call
35:	

time_test$11:	; £temporary6225 = return_value
40:	

time_test$12:	; now = £temporary6225
41:		mov [bp + 20], t3225
43:	

time_test$13:	; call header integral zero 0 stack zero 0
45:	

time_test$14:	; £temporary6226 = &now
46:		mov t3226, bp
47:		add t3226, 20
49:	

time_test$15:	; parameter £temporary6226, offset 6
50:		mov [bp + 30], t3226
52:	

time_test$16:	; call function noellipse-noellipse gmtime
53:		mov word [bp + 24], time_test$17
54:		mov [bp + 26], bp
55:		add bp, 24
56:		jmp gmtime
58:	

time_test$17:	; post call
60:	

time_test$18:	; £temporary6227 = return_value
65:	

time_test$19:	; p = £temporary6227
66:		mov [bp + 24], t3228
68:	

time_test$20:	; call header integral zero 0 stack zero 0
70:	

time_test$21:	; parameter p, offset 6
71:		mov a3229, [bp + 24]
72:		mov [bp + 32], a3229
74:	

time_test$22:	; call function noellipse-noellipse mktime
75:		mov word [bp + 26], time_test$23
76:		mov [bp + 28], bp
77:		add bp, 26
78:		jmp mktime
80:	

time_test$23:	; post call
82:	

time_test$24:	; £temporary6228 = return_value
87:	

time_test$25:	; now2 = £temporary6228
88:		mov [bp + 26], t3231
90:	

time_test$26:	; call header integral zero 0 stack zero 0
92:	

time_test$27:	; parameter string_now2013A2025lu0A#, offset 6
93:		mov word [bp + 36], string_now2013A2025lu0A#
95:	

time_test$28:	; parameter now, offset 8
96:		mov a3232, [bp + 20]
97:		mov [bp + 38], a3232
99:	

time_test$29:	; call function noellipse-ellipse printf, extra 0
100:		mov word [bp + 30], time_test$30
101:		mov [bp + 32], bp
102:		add bp, 30
103:		mov di, bp
104:		add di, 4
105:		jmp printf
107:	

time_test$30:	; post call
109:	

time_test$31:	; call header integral zero 0 stack zero 0
111:	

time_test$32:	; parameter string_now2023A2025lu0A#, offset 6
112:		mov word [bp + 36], string_now2023A2025lu0A#
114:	

time_test$33:	; parameter now2, offset 8
115:		mov a3233, [bp + 26]
116:		mov [bp + 38], a3233
118:	

time_test$34:	; call function noellipse-ellipse printf, extra 0
119:		mov word [bp + 30], time_test$35
120:		mov [bp + 32], bp
121:		add bp, 30
122:		mov di, bp
123:		add di, 4
124:		jmp printf
126:	

time_test$35:	; post call
128:	

time_test$36:	; £temporary6231 -> p = *p
129:		mov a3234, [bp + 24]
131:	

time_test$37:	; s = £temporary6231 -> p
132:		mov t3235, bp
133:		add t3235, 30
134:		mov t3236, 18
135:	

time_test$37$Loop:
136:		mov t3237, [a3234]
137:		mov [t3235], t3237
138:		inc a3234
139:		inc t3235
140:		dec t3236
141:		cmp t3236, 0
142:		jne time_test$37$Loop
144:	

time_test$38:	; call header integral zero 0 stack zero 0
146:	

time_test$39:	; parameter string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#, offset 6
147:		mov word [bp + 54], string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#
149:	

time_test$40:	; £temporary6234 = s$tm_wday * 2
150:		mov a3238, [bp + 42]
152:		xor dx, dx
153:		mul word [int2$2#]
159:	

time_test$41:	; £temporary6235 = weekdays + £temporary6234
160:		mov a3242, bp
161:		add a3242, 6
162:		add a3242, t3241
164:	

time_test$42:	; £temporary6233 -> £temporary6235 = *£temporary6235
166:	

time_test$43:	; parameter £temporary6233 -> £temporary6235, offset 8
167:		mov t3243, [a3242]
168:		mov [bp + 56], t3243
170:	

time_test$44:	; £temporary6237 = s$tm_year + 1900
171:		mov a3244, [bp + 40]
172:		add a3244, 1900
174:	

time_test$45:	; parameter £temporary6237, offset 10
175:		mov [bp + 58], a3244
177:	

time_test$46:	; £temporary6239 = s$tm_mon + 1
178:		mov a3245, [bp + 38]
179:		add a3245, 1
181:	

time_test$47:	; parameter £temporary6239, offset 12
182:		mov [bp + 60], a3245
184:	

time_test$48:	; parameter s$tm_mday, offset 14
185:		mov a3246, [bp + 36]
186:		mov [bp + 62], a3246
188:	

time_test$49:	; parameter s$tm_hour, offset 16
189:		mov a3247, [bp + 34]
190:		mov [bp + 64], a3247
192:	

time_test$50:	; parameter s$tm_min, offset 18
193:		mov a3248, [bp + 32]
194:		mov [bp + 66], a3248
196:	

time_test$51:	; parameter s$tm_sec, offset 20
197:		mov a3249, [bp + 30]
198:		mov [bp + 68], a3249
200:	

time_test$52:	; parameter s$tm_yday, offset 22
201:		mov a3250, [bp + 44]
202:		mov [bp + 70], a3250
204:	

time_test$53:	; parameter s$tm_wday, offset 24
205:		mov a3251, [bp + 42]
206:		mov [bp + 72], a3251
208:	

time_test$54:	; parameter s$tm_isdst, offset 26
209:		mov a3252, [bp + 46]
210:		mov [bp + 74], a3252
212:	

time_test$55:	; call function noellipse-ellipse printf, extra 0
213:		mov word [bp + 48], time_test$56
214:		mov [bp + 50], bp
215:		add bp, 48
216:		mov di, bp
217:		add di, 20
218:		jmp printf
220:	

time_test$56:	; post call
222:	

time_test$57:	; call header integral zero 0 stack zero 0
224:	

time_test$58:	; £temporary6248 = &now
225:		mov t3253, bp
226:		add t3253, 20
228:	

time_test$59:	; parameter £temporary6248, offset 6
229:		mov [bp + 54], t3253
231:	

time_test$60:	; call function noellipse-noellipse localtime
232:		mov word [bp + 48], time_test$61
233:		mov [bp + 50], bp
234:		add bp, 48
235:		jmp localtime
237:	

time_test$61:	; post call
239:	

time_test$62:	; £temporary6249 = return_value
244:	

time_test$63:	; £temporary6250 -> £temporary6249 = *£temporary6249
246:	

time_test$64:	; s = £temporary6250 -> £temporary6249
247:		mov t3256, bp
248:		add t3256, 30
249:		mov t3257, 18
250:	

time_test$64$Loop:
251:		mov t3258, [t3255]
252:		mov [t3256], t3258
253:		inc t3255
254:		inc t3256
255:		dec t3257
256:		cmp t3257, 0
257:		jne time_test$64$Loop
259:	

time_test$65:	; call header integral zero 0 stack zero 0
261:	

time_test$66:	; parameter string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#, offset 6
262:		mov word [bp + 54], string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#
264:	

time_test$67:	; £temporary6253 = s$tm_wday * 2
265:		mov a3259, [bp + 42]
267:		xor dx, dx
268:		mul word [int2$2#]
274:	

time_test$68:	; £temporary6254 = weekdays + £temporary6253
275:		mov a3263, bp
276:		add a3263, 6
277:		add a3263, t3262
279:	

time_test$69:	; £temporary6252 -> £temporary6254 = *£temporary6254
281:	

time_test$70:	; parameter £temporary6252 -> £temporary6254, offset 8
282:		mov t3264, [a3263]
283:		mov [bp + 56], t3264
285:	

time_test$71:	; £temporary6256 = s$tm_year + 1900
286:		mov a3265, [bp + 40]
287:		add a3265, 1900
289:	

time_test$72:	; parameter £temporary6256, offset 10
290:		mov [bp + 58], a3265
292:	

time_test$73:	; £temporary6258 = s$tm_mon + 1
293:		mov a3266, [bp + 38]
294:		add a3266, 1
296:	

time_test$74:	; parameter £temporary6258, offset 12
297:		mov [bp + 60], a3266
299:	

time_test$75:	; parameter s$tm_mday, offset 14
300:		mov a3267, [bp + 36]
301:		mov [bp + 62], a3267
303:	

time_test$76:	; parameter s$tm_hour, offset 16
304:		mov a3268, [bp + 34]
305:		mov [bp + 64], a3268
307:	

time_test$77:	; parameter s$tm_min, offset 18
308:		mov a3269, [bp + 32]
309:		mov [bp + 66], a3269
311:	

time_test$78:	; parameter s$tm_sec, offset 20
312:		mov a3270, [bp + 30]
313:		mov [bp + 68], a3270
315:	

time_test$79:	; parameter s$tm_yday, offset 22
316:		mov a3271, [bp + 44]
317:		mov [bp + 70], a3271
319:	

time_test$80:	; parameter s$tm_wday, offset 24
320:		mov a3272, [bp + 42]
321:		mov [bp + 72], a3272
323:	

time_test$81:	; parameter s$tm_isdst, offset 26
324:		mov a3273, [bp + 46]
325:		mov [bp + 74], a3273
327:	

time_test$82:	; call function noellipse-ellipse printf, extra 0
328:		mov word [bp + 48], time_test$83
329:		mov [bp + 50], bp
330:		add bp, 48
331:		mov di, bp
332:		add di, 20
333:		jmp printf
335:	

time_test$83:	; post call
337:	

time_test$84:	; call header integral zero 0 stack zero 0
339:	

time_test$85:	; parameter buffer1, offset 6
340:		mov [bp + 254], bp
341:		add word [bp + 254], 48
343:	

time_test$86:	; call header integral zero 0 stack zero 0
345:	

time_test$87:	; £temporary6267 = &s
346:		mov t3274, bp
347:		add t3274, 30
349:	

time_test$88:	; parameter £temporary6267, offset 112
350:		mov [bp + 360], t3274
352:	

time_test$89:	; call function noellipse-noellipse asctime
353:		mov word [bp + 354], time_test$90
354:		mov [bp + 356], bp
355:		add bp, 354
356:		jmp asctime
358:	

time_test$90:	; post call
360:	

time_test$91:	; £temporary6268 = return_value
365:	

time_test$92:	; parameter £temporary6268, offset 8
366:		mov [bp + 256], t3276
368:	

time_test$93:	; call function noellipse-noellipse strcpy
369:		mov word [bp + 248], time_test$94
370:		mov [bp + 250], bp
371:		add bp, 248
372:		jmp strcpy
374:	

time_test$94:	; post call
376:	

time_test$95:	; call header integral zero 0 stack zero 0
378:	

time_test$96:	; parameter buffer2, offset 6
379:		mov [bp + 254], bp
380:		add word [bp + 254], 148
382:	

time_test$97:	; call header integral zero 0 stack zero 0
384:	

time_test$98:	; £temporary6270 = &now
385:		mov t3277, bp
386:		add t3277, 20
388:	

time_test$99:	; parameter £temporary6270, offset 112
389:		mov [bp + 360], t3277
391:	

time_test$100:	; call function noellipse-noellipse ctime
392:		mov word [bp + 354], time_test$101
393:		mov [bp + 356], bp
394:		add bp, 354
395:		jmp ctime
397:	

time_test$101:	; post call
399:	

time_test$102:	; £temporary6271 = return_value
404:	

time_test$103:	; parameter £temporary6271, offset 8
405:		mov [bp + 256], t3279
407:	

time_test$104:	; call function noellipse-noellipse strcpy
408:		mov word [bp + 248], time_test$105
409:		mov [bp + 250], bp
410:		add bp, 248
411:		jmp strcpy
413:	

time_test$105:	; post call
415:	

time_test$106:	; call header integral zero 0 stack zero 0
417:	

time_test$107:	; parameter string_asctime203C25s3E2C20ctime203C25s3E0A#, offset 6
418:		mov word [bp + 254], string_asctime203C25s3E2C20ctime203C25s3E0A#
420:	

time_test$108:	; parameter buffer1, offset 8
421:		mov [bp + 256], bp
422:		add word [bp + 256], 48
424:	

time_test$109:	; parameter buffer2, offset 10
425:		mov [bp + 258], bp
426:		add word [bp + 258], 148
428:	

time_test$110:	; call function noellipse-ellipse printf, extra 0
429:		mov word [bp + 248], time_test$111
430:		mov [bp + 250], bp
431:		add bp, 248
432:		mov di, bp
433:		add di, 4
434:		jmp printf
436:	

time_test$111:	; post call
438:	

time_test$112:	; call header integral zero 0 stack zero 0
440:	

time_test$113:	; parameter buffer, offset 6
441:		mov [bp + 554], bp
442:		add word [bp + 554], 248
444:	

time_test$114:	; parameter 300, offset 8
445:		mov word [bp + 556], 300
447:	

time_test$115:	; parameter string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#, offset 10
448:		mov word [bp + 558], string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#
450:	

time_test$116:	; £temporary6274 = &s
451:		mov t3280, bp
452:		add t3280, 30
454:	

time_test$117:	; parameter £temporary6274, offset 12
455:		mov [bp + 560], t3280
457:	

time_test$118:	; call function noellipse-noellipse strftime
458:		mov word [bp + 548], time_test$119
459:		mov [bp + 550], bp
460:		add bp, 548
461:		jmp strftime
463:	

time_test$119:	; post call
465:	

time_test$120:	; £temporary6275 = return_value
470:	

time_test$121:	; i = £temporary6275
471:		mov [bp + 548], t3282
473:	

time_test$122:	; call header integral zero 0 stack zero 0
475:	

time_test$123:	; parameter string_strftime203C25i3E203C25s3E0A#, offset 6
476:		mov word [bp + 556], string_strftime203C25i3E203C25s3E0A#
478:	

time_test$124:	; parameter i, offset 8
479:		mov a3283, [bp + 548]
480:		mov [bp + 558], a3283
482:	

time_test$125:	; parameter buffer, offset 10
483:		mov [bp + 560], bp
484:		add word [bp + 560], 248
486:	

time_test$126:	; call function noellipse-ellipse printf, extra 0
487:		mov word [bp + 550], time_test$127
488:		mov [bp + 552], bp
489:		add bp, 550
490:		mov di, bp
491:		add di, 4
492:		jmp printf
494:	

time_test$127:	; post call
496:	

time_test$128:	; return
497:		mov t3284, [bp]
498:		mov di, [bp + 4]
499:		mov bp, [bp + 2]
500:		jmp t3284
502:	

time_test$129:	; function end time_test
