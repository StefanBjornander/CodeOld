1:	

@1099$filecreate:	; AssignRegister ah 60
2:		mov a451, 60
4:	

@1099$filecreate$1:	; AssignRegister cx 0
5:		mov a452, 0
7:	

@1099$filecreate$2:	; AssignRegister dx name
8:		mov a453, [bp + 6]
10:	

@1099$filecreate$3:	; Interrupt 33
11:		int 33
13:	

@1099$filecreate$4:	; InspectRegister £temporary888 ax
15:	

@1099$filecreate$5:	; Assign handle £temporary888
16:		mov [bp + 8], t454
18:	

@1099$filecreate$6:	; NotCarry 10
19:		jnc @1099$filecreate$10
21:	

@1099$filecreate$7:	; Assign errno 9
22:		mov word [errno], 9
24:	

@1099$filecreate$8:	; SetReturnValue -1
25:		mov a455, -1
27:	

@1099$filecreate$9:	; Return -1
28:		mov t456, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp t456
33:	

@1099$filecreate$10:	; SetReturnValue handle
34:		mov a457, [bp + 8]
36:	

@1099$filecreate$11:	; Return handle
37:		mov t458, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp t458
42:	

@1099$filecreate$12:	; FunctionEnd filecreate
1:	

fileexists:	; AssignRegister ah 67
2:		mov a459, 67
4:	

fileexists$1:	; AssignRegister al 0
5:		mov a460, 0
7:	

fileexists$2:	; AssignRegister dx name
8:		mov a461, [bp + 6]
10:	

fileexists$3:	; Interrupt 33
11:		int 33
13:	

fileexists$4:	; Carry 7
14:		jc fileexists$7
16:	

fileexists$5:	; Assign £temporary895 1
17:		mov t462, 1
19:	

fileexists$6:	; Goto 8
20:		jmp fileexists$8
22:	

fileexists$7:	; Assign £temporary895 0
23:		mov t463, 0
25:	

fileexists$8:	; SetReturnValue £temporary895
27:	

fileexists$9:	; Return £temporary895
28:		mov t464, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp t464
33:	

fileexists$10:	; FunctionEnd fileexists
1:	

@1112$fileopen:	; AssignRegister ah 61
2:		mov a465, 61
4:	

@1112$fileopen$1:	; AssignRegister al mode
5:		mov a466, [bp + 8]
7:	

@1112$fileopen$2:	; AssignRegister dx name
8:		mov a467, [bp + 6]
10:	

@1112$fileopen$3:	; Interrupt 33
11:		int 33
13:	

@1112$fileopen$4:	; NotCarry 8
14:		jnc @1112$fileopen$8
16:	

@1112$fileopen$5:	; Assign errno 9
17:		mov word [errno], 9
19:	

@1112$fileopen$6:	; SetReturnValue -1
20:		mov a468, -1
22:	

@1112$fileopen$7:	; Return -1
23:		mov t469, [bp]
24:		mov di, [bp + 4]
25:		mov bp, [bp + 2]
26:		jmp t469
28:	

@1112$fileopen$8:	; InspectRegister £temporary900 ax
30:	

@1112$fileopen$9:	; SetReturnValue £temporary900
31:		mov t471, t470
33:	

@1112$fileopen$10:	; Return £temporary900
34:		mov t472, [bp]
35:		mov di, [bp + 4]
36:		mov bp, [bp + 2]
37:		jmp t472
39:	

@1112$fileopen$11:	; FunctionEnd fileopen
1:	

fopen:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

fopen$1:	; SignedGreaterThanEqual 21 index 20
5:		cmp word [bp + 10], 20
6:		jge fopen$21
8:	

fopen$2:	; UnsignedMultiply £temporary904 index 29
9:		mov a473, [bp + 10]
11:		xor dx, dx
12:		mul word [int2$29#]
18:	

fopen$3:	; BinaryAdd £temporary905 g_fileArray £temporary904
19:		mov a477, g_fileArray
20:		add a477, t476
22:	

fopen$4:	; Deref £temporary903 -> £temporary905 £temporary905 0
24:	

fopen$5:	; NotEqual 19 £temporary903.open$0 -> £temporary905 0
25:		cmp word [a477], 0
26:		jne fopen$19
28:	

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
30:	

fopen$7:	; Parameter 12 name 6
31:		mov a478, [bp + 6]
32:		mov [bp + 18], a478
34:	

fopen$8:	; Parameter 12 mode 8
35:		mov a479, [bp + 8]
36:		mov [bp + 20], a479
38:	

fopen$9:	; UnsignedMultiply £temporary909 index 29
39:		mov a480, [bp + 10]
41:		xor dx, dx
42:		mul word [int2$29#]
48:	

fopen$10:	; BinaryAdd £temporary910 g_fileArray £temporary909
49:		mov a484, g_fileArray
50:		add a484, t483
52:	

fopen$11:	; Deref £temporary908 -> £temporary910 £temporary910 0
54:	

fopen$12:	; address £temporary911 £temporary908 -> £temporary910
56:	

fopen$13:	; Parameter 12 £temporary911 10
57:		mov [bp + 22], a484
59:	

fopen$14:	; Call 12 freopen 0
60:		mov word [bp + 12], fopen$15
61:		mov [bp + 14], bp
62:		add bp, 12
63:		jmp freopen
65:	

fopen$15:	; PostCall 12
67:	

fopen$16:	; GetReturnValue £temporary912
72:	

fopen$17:	; SetReturnValue £temporary912
74:	

fopen$18:	; Return £temporary912
75:		mov t487, [bp]
76:		mov di, [bp + 4]
77:		mov bp, [bp + 2]
78:		jmp t487
80:	

fopen$19:	; Increment index
81:		inc word [bp + 10]
83:	

fopen$20:	; Goto 1
84:		jmp fopen$1
86:	

fopen$21:	; SetReturnValue 0
87:		mov a488, 0
89:	

fopen$22:	; Return 0
90:		mov t489, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp t489
95:	

fopen$23:	; FunctionEnd fopen
1:	

freopen:	; Assign handle -1
2:		mov word [bp + 12], -1
4:	

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
6:	

freopen$2:	; Parameter 14 mode 6
7:		mov a490, [bp + 8]
8:		mov [bp + 20], a490
10:	

freopen$3:	; Parameter 14 string_r# 8
11:		mov word [bp + 22], string_r#
13:	

freopen$4:	; Call 14 strcmp 0
14:		mov word [bp + 14], freopen$5
15:		mov [bp + 16], bp
16:		add bp, 14
17:		jmp strcmp
19:	

freopen$5:	; PostCall 14
21:	

freopen$6:	; GetReturnValue £temporary916
26:	

freopen$7:	; NotEqual 16 £temporary916 0
27:		cmp t492, 0
28:		jne freopen$16
30:	

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
32:	

freopen$9:	; Parameter 14 name 6
33:		mov a493, [bp + 6]
34:		mov [bp + 20], a493
36:	

freopen$10:	; Parameter 14 64 8
37:		mov byte [bp + 22], 64
39:	

freopen$11:	; Call 14 fileopen 0
40:		mov word [bp + 14], freopen$12
41:		mov [bp + 16], bp
42:		add bp, 14
43:		jmp @1112$fileopen
45:	

freopen$12:	; PostCall 14
47:	

freopen$13:	; GetReturnValue £temporary918
52:	

freopen$14:	; Assign handle £temporary918
53:		mov [bp + 12], t495
55:	

freopen$15:	; Goto 130
56:		jmp freopen$130
58:	

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
60:	

freopen$17:	; Parameter 14 mode 6
61:		mov a496, [bp + 8]
62:		mov [bp + 20], a496
64:	

freopen$18:	; Parameter 14 string_w# 8
65:		mov word [bp + 22], string_w#
67:	

freopen$19:	; Call 14 strcmp 0
68:		mov word [bp + 14], freopen$20
69:		mov [bp + 16], bp
70:		add bp, 14
71:		jmp strcmp
73:	

freopen$20:	; PostCall 14
75:	

freopen$21:	; GetReturnValue £temporary919
80:	

freopen$22:	; NotEqual 30 £temporary919 0
81:		cmp t498, 0
82:		jne freopen$30
84:	

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
86:	

freopen$24:	; Parameter 14 name 6
87:		mov a499, [bp + 6]
88:		mov [bp + 20], a499
90:	

freopen$25:	; Call 14 filecreate 0
91:		mov word [bp + 14], freopen$26
92:		mov [bp + 16], bp
93:		add bp, 14
94:		jmp @1099$filecreate
96:	

freopen$26:	; PostCall 14
98:	

freopen$27:	; GetReturnValue £temporary921
103:	

freopen$28:	; Assign handle £temporary921
104:		mov [bp + 12], t501
106:	

freopen$29:	; Goto 130
107:		jmp freopen$130
109:	

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
111:	

freopen$31:	; Parameter 14 mode 6
112:		mov a502, [bp + 8]
113:		mov [bp + 20], a502
115:	

freopen$32:	; Parameter 14 string_a# 8
116:		mov word [bp + 22], string_a#
118:	

freopen$33:	; Call 14 strcmp 0
119:		mov word [bp + 14], freopen$34
120:		mov [bp + 16], bp
121:		add bp, 14
122:		jmp strcmp
124:	

freopen$34:	; PostCall 14
126:	

freopen$35:	; GetReturnValue £temporary922
131:	

freopen$36:	; NotEqual 59 £temporary922 0
132:		cmp t504, 0
133:		jne freopen$59
135:	

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
137:	

freopen$38:	; Parameter 14 name 6
138:		mov a505, [bp + 6]
139:		mov [bp + 20], a505
141:	

freopen$39:	; Parameter 14 65 8
142:		mov byte [bp + 22], 65
144:	

freopen$40:	; Call 14 fileopen 0
145:		mov word [bp + 14], freopen$41
146:		mov [bp + 16], bp
147:		add bp, 14
148:		jmp @1112$fileopen
150:	

freopen$41:	; PostCall 14
152:	

freopen$42:	; GetReturnValue £temporary924
157:	

freopen$43:	; Assign handle £temporary924
158:		mov [bp + 12], t507
160:	

freopen$44:	; Equal 52 handle -1
161:		cmp word [bp + 12], -1
162:		je freopen$52
164:	

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
166:	

freopen$46:	; Parameter 14 stream 6
167:		mov a508, [bp + 10]
168:		mov [bp + 20], a508
170:	

freopen$47:	; Parameter 14 0 8
171:		mov word [bp + 22], 0
173:	

freopen$48:	; Parameter 14 2 10
174:		mov word [bp + 24], 2
176:	

freopen$49:	; Call 14 fseek 0
177:		mov word [bp + 14], freopen$50
178:		mov [bp + 16], bp
179:		add bp, 14
180:		jmp fseek
182:	

freopen$50:	; PostCall 14
184:	

freopen$51:	; Goto 130
185:		jmp freopen$130
187:	

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
189:	

freopen$53:	; Parameter 14 name 6
190:		mov a509, [bp + 6]
191:		mov [bp + 20], a509
193:	

freopen$54:	; Call 14 filecreate 0
194:		mov word [bp + 14], freopen$55
195:		mov [bp + 16], bp
196:		add bp, 14
197:		jmp @1099$filecreate
199:	

freopen$55:	; PostCall 14
201:	

freopen$56:	; GetReturnValue £temporary927
206:	

freopen$57:	; Assign handle £temporary927
207:		mov [bp + 12], t511
209:	

freopen$58:	; Goto 130
210:		jmp freopen$130
212:	

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
214:	

freopen$60:	; Parameter 14 mode 6
215:		mov a512, [bp + 8]
216:		mov [bp + 20], a512
218:	

freopen$61:	; Parameter 14 string_r2B# 8
219:		mov word [bp + 22], string_r2B#
221:	

freopen$62:	; Call 14 strcmp 0
222:		mov word [bp + 14], freopen$63
223:		mov [bp + 16], bp
224:		add bp, 14
225:		jmp strcmp
227:	

freopen$63:	; PostCall 14
229:	

freopen$64:	; GetReturnValue £temporary928
234:	

freopen$65:	; NotEqual 74 £temporary928 0
235:		cmp t514, 0
236:		jne freopen$74
238:	

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
240:	

freopen$67:	; Parameter 14 name 6
241:		mov a515, [bp + 6]
242:		mov [bp + 20], a515
244:	

freopen$68:	; Parameter 14 66 8
245:		mov byte [bp + 22], 66
247:	

freopen$69:	; Call 14 fileopen 0
248:		mov word [bp + 14], freopen$70
249:		mov [bp + 16], bp
250:		add bp, 14
251:		jmp @1112$fileopen
253:	

freopen$70:	; PostCall 14
255:	

freopen$71:	; GetReturnValue £temporary930
260:	

freopen$72:	; Assign handle £temporary930
261:		mov [bp + 12], t517
263:	

freopen$73:	; Goto 130
264:		jmp freopen$130
266:	

freopen$74:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
268:	

freopen$75:	; Parameter 14 mode 6
269:		mov a518, [bp + 8]
270:		mov [bp + 20], a518
272:	

freopen$76:	; Parameter 14 string_w2B# 8
273:		mov word [bp + 22], string_w2B#
275:	

freopen$77:	; Call 14 strcmp 0
276:		mov word [bp + 14], freopen$78
277:		mov [bp + 16], bp
278:		add bp, 14
279:		jmp strcmp
281:	

freopen$78:	; PostCall 14
283:	

freopen$79:	; GetReturnValue £temporary931
288:	

freopen$80:	; NotEqual 102 £temporary931 0
289:		cmp t520, 0
290:		jne freopen$102
292:	

freopen$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
294:	

freopen$82:	; Parameter 14 name 6
295:		mov a521, [bp + 6]
296:		mov [bp + 20], a521
298:	

freopen$83:	; Call 14 fileexists 0
299:		mov word [bp + 14], freopen$84
300:		mov [bp + 16], bp
301:		add bp, 14
302:		jmp fileexists
304:	

freopen$84:	; PostCall 14
306:	

freopen$85:	; GetReturnValue £temporary933
311:	

freopen$86:	; Equal 95 £temporary933 0
312:		cmp t523, 0
313:		je freopen$95
315:	

freopen$87:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
317:	

freopen$88:	; Parameter 14 name 6
318:		mov a524, [bp + 6]
319:		mov [bp + 20], a524
321:	

freopen$89:	; Parameter 14 66 8
322:		mov byte [bp + 22], 66
324:	

freopen$90:	; Call 14 fileopen 0
325:		mov word [bp + 14], freopen$91
326:		mov [bp + 16], bp
327:		add bp, 14
328:		jmp @1112$fileopen
330:	

freopen$91:	; PostCall 14
332:	

freopen$92:	; GetReturnValue £temporary934
337:	

freopen$93:	; Assign handle £temporary934
338:		mov [bp + 12], t526
340:	

freopen$94:	; Goto 130
341:		jmp freopen$130
343:	

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
345:	

freopen$96:	; Parameter 14 name 6
346:		mov a527, [bp + 6]
347:		mov [bp + 20], a527
349:	

freopen$97:	; Call 14 filecreate 0
350:		mov word [bp + 14], freopen$98
351:		mov [bp + 16], bp
352:		add bp, 14
353:		jmp @1099$filecreate
355:	

freopen$98:	; PostCall 14
357:	

freopen$99:	; GetReturnValue £temporary935
362:	

freopen$100:	; Assign handle £temporary935
363:		mov [bp + 12], t529
365:	

freopen$101:	; Goto 130
366:		jmp freopen$130
368:	

freopen$102:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
370:	

freopen$103:	; Parameter 14 mode 6
371:		mov a530, [bp + 8]
372:		mov [bp + 20], a530
374:	

freopen$104:	; Parameter 14 string_a2B# 8
375:		mov word [bp + 22], string_a2B#
377:	

freopen$105:	; Call 14 strcmp 0
378:		mov word [bp + 14], freopen$106
379:		mov [bp + 16], bp
380:		add bp, 14
381:		jmp strcmp
383:	

freopen$106:	; PostCall 14
385:	

freopen$107:	; GetReturnValue £temporary937
390:	

freopen$108:	; NotEqual 130 £temporary937 0
391:		cmp t532, 0
392:		jne freopen$130
394:	

freopen$109:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
396:	

freopen$110:	; Parameter 14 name 6
397:		mov a533, [bp + 6]
398:		mov [bp + 20], a533
400:	

freopen$111:	; Parameter 14 66 8
401:		mov byte [bp + 22], 66
403:	

freopen$112:	; Call 14 fileopen 0
404:		mov word [bp + 14], freopen$113
405:		mov [bp + 16], bp
406:		add bp, 14
407:		jmp @1112$fileopen
409:	

freopen$113:	; PostCall 14
411:	

freopen$114:	; GetReturnValue £temporary939
416:	

freopen$115:	; Assign handle £temporary939
417:		mov [bp + 12], t535
419:	

freopen$116:	; Equal 124 handle -1
420:		cmp word [bp + 12], -1
421:		je freopen$124
423:	

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
425:	

freopen$118:	; Parameter 14 stream 6
426:		mov a536, [bp + 10]
427:		mov [bp + 20], a536
429:	

freopen$119:	; Parameter 14 0 8
430:		mov word [bp + 22], 0
432:	

freopen$120:	; Parameter 14 2 10
433:		mov word [bp + 24], 2
435:	

freopen$121:	; Call 14 fseek 0
436:		mov word [bp + 14], freopen$122
437:		mov [bp + 16], bp
438:		add bp, 14
439:		jmp fseek
441:	

freopen$122:	; PostCall 14
443:	

freopen$123:	; Goto 130
444:		jmp freopen$130
446:	

freopen$124:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
448:	

freopen$125:	; Parameter 14 name 6
449:		mov a537, [bp + 6]
450:		mov [bp + 20], a537
452:	

freopen$126:	; Call 14 filecreate 0
453:		mov word [bp + 14], freopen$127
454:		mov [bp + 16], bp
455:		add bp, 14
456:		jmp @1099$filecreate
458:	

freopen$127:	; PostCall 14
460:	

freopen$128:	; GetReturnValue £temporary942
465:	

freopen$129:	; Assign handle £temporary942
466:		mov [bp + 12], t539
468:	

freopen$130:	; Equal 147 handle -1
469:		cmp word [bp + 12], -1
470:		je freopen$147
472:	

freopen$131:	; Deref £temporary944 -> stream stream 0
473:		mov a540, [bp + 10]
475:	

freopen$132:	; Assign £temporary944 -> stream 1
476:		mov word [a540], 1
478:	

freopen$133:	; Deref £temporary945 -> stream stream 2
479:		mov a541, [bp + 10]
481:	

freopen$134:	; Assign £temporary945 -> stream handle
482:		mov a542, [bp + 12]
483:		mov [a541 + 2], a542
485:	

freopen$135:	; Deref £temporary946 -> stream stream 25
486:		mov a543, [bp + 10]
488:	

freopen$136:	; Assign £temporary946 -> stream 0
489:		mov word [a543 + 25], 0
491:	

freopen$137:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
493:	

freopen$138:	; Deref £temporary947 -> stream stream 4
494:		mov a544, [bp + 10]
496:	

freopen$139:	; Parameter 14 £temporary947 -> stream 6
497:		mov [bp + 20], a544
498:		add word [bp + 20], 4
500:	

freopen$140:	; Parameter 14 name 8
501:		mov a545, [bp + 6]
502:		mov [bp + 22], a545
504:	

freopen$141:	; Call 14 strcpy 0
505:		mov word [bp + 14], freopen$142
506:		mov [bp + 16], bp
507:		add bp, 14
508:		jmp strcpy
510:	

freopen$142:	; PostCall 14
512:	

freopen$143:	; Deref £temporary949 -> stream stream 27
513:		mov a546, [bp + 10]
515:	

freopen$144:	; Assign £temporary949 -> stream 0
516:		mov word [a546 + 27], 0
518:	

freopen$145:	; SetReturnValue stream
519:		mov a547, [bp + 10]
521:	

freopen$146:	; Return stream
522:		mov t548, [bp]
523:		mov di, [bp + 4]
524:		mov bp, [bp + 2]
525:		jmp t548
527:	

freopen$147:	; Deref £temporary950 -> stream stream 0
528:		mov a549, [bp + 10]
530:	

freopen$148:	; Assign £temporary950 -> stream 0
531:		mov word [a549], 0
533:	

freopen$149:	; SetReturnValue 0
534:		mov a550, 0
536:	

freopen$150:	; Return 0
537:		mov t551, [bp]
538:		mov di, [bp + 4]
539:		mov bp, [bp + 2]
540:		jmp t551
542:	

freopen$151:	; FunctionEnd freopen
1:	

fflush:	; NotEqual 21 stream 0
2:		cmp word [bp + 6], 0
3:		jne fflush$21
5:	

fflush$1:	; Assign index 0
6:		mov word [bp + 8], 0
8:	

fflush$2:	; SignedGreaterThanEqual 21 index 20
9:		cmp word [bp + 8], 20
10:		jge fflush$21
12:	

fflush$3:	; UnsignedMultiply £temporary990 index 29
13:		mov a552, [bp + 8]
15:		xor dx, dx
16:		mul word [int2$29#]
22:	

fflush$4:	; BinaryAdd £temporary991 g_fileArray £temporary990
23:		mov a556, g_fileArray
24:		add a556, t555
26:	

fflush$5:	; Deref £temporary989 -> £temporary991 £temporary991 0
28:	

fflush$6:	; Equal 19 £temporary989.open$0 -> £temporary991 0
29:		cmp word [a556], 0
30:		je fflush$19
32:	

fflush$7:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
34:	

fflush$8:	; UnsignedMultiply £temporary993 index 29
35:		mov a557, [bp + 8]
37:		xor dx, dx
38:		mul word [int2$29#]
44:	

fflush$9:	; BinaryAdd £temporary994 g_fileArray £temporary993
45:		mov a561, g_fileArray
46:		add a561, t560
48:	

fflush$10:	; Deref £temporary992 -> £temporary994 £temporary994 0
50:	

fflush$11:	; address £temporary995 £temporary992 -> £temporary994
52:	

fflush$12:	; Parameter 10 £temporary995 6
53:		mov [bp + 16], a561
55:	

fflush$13:	; Call 10 fflush 0
56:		mov word [bp + 10], fflush$14
57:		mov [bp + 12], bp
58:		add bp, 10
59:		jmp fflush
61:	

fflush$14:	; PostCall 10
63:	

fflush$15:	; GetReturnValue £temporary996
68:	

fflush$16:	; NotEqual 19 £temporary996 -1
69:		cmp t563, -1
70:		jne fflush$19
72:	

fflush$17:	; SetReturnValue -1
73:		mov a564, -1
75:	

fflush$18:	; Return -1
76:		mov t565, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t565
81:	

fflush$19:	; Increment index
82:		inc word [bp + 8]
84:	

fflush$20:	; Goto 2
85:		jmp fflush$2
87:	

fflush$21:	; SetReturnValue 0
88:		mov a566, 0
90:	

fflush$22:	; Return 0
91:		mov t567, [bp]
92:		mov di, [bp + 4]
93:		mov bp, [bp + 2]
94:		jmp t567
96:	

fflush$23:	; FunctionEnd fflush
1:	

fclose:	; Equal 20 stream 0
2:		cmp word [bp + 6], 0
3:		je fclose$20
5:	

fclose$1:	; AssignRegister ah 62
6:		mov a568, 62
8:	

fclose$2:	; Deref £temporary1003 -> stream stream 2
9:		mov a569, [bp + 6]
11:	

fclose$3:	; AssignRegister bx £temporary1003 -> stream
12:		mov t570, [a569 + 2]
14:	

fclose$4:	; Interrupt 33
15:		int 33
17:	

fclose$5:	; NotCarry 9
18:		jnc fclose$9
20:	

fclose$6:	; Assign errno 11
21:		mov word [errno], 11
23:	

fclose$7:	; SetReturnValue -1
24:		mov a571, -1
26:	

fclose$8:	; Return -1
27:		mov t572, [bp]
28:		mov di, [bp + 4]
29:		mov bp, [bp + 2]
30:		jmp t572
32:	

fclose$9:	; Deref £temporary1005 -> stream stream 27
33:		mov a573, [bp + 6]
35:	

fclose$10:	; Equal 16 £temporary1005 -> stream 0
36:		cmp word [a573 + 27], 0
37:		je fclose$16
39:	

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
41:	

fclose$12:	; Deref £temporary1006 -> stream stream 4
42:		mov a574, [bp + 6]
44:	

fclose$13:	; Parameter 8 £temporary1006 -> stream 6
45:		mov [bp + 14], a574
46:		add word [bp + 14], 4
48:	

fclose$14:	; Call 8 remove 0
49:		mov word [bp + 8], fclose$15
50:		mov [bp + 10], bp
51:		add bp, 8
52:		jmp remove
54:	

fclose$15:	; PostCall 8
56:	

fclose$16:	; Deref £temporary1009 -> stream stream 0
57:		mov a575, [bp + 6]
59:	

fclose$17:	; Assign £temporary1009 -> stream 0
60:		mov word [a575], 0
62:	

fclose$18:	; SetReturnValue 0
63:		mov a576, 0
65:	

fclose$19:	; Return 0
66:		mov t577, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp t577
71:	

fclose$20:	; Assign index 0
72:		mov word [bp + 8], 0
74:	

fclose$21:	; SignedGreaterThanEqual 40 index 20
75:		cmp word [bp + 8], 20
76:		jge fclose$40
78:	

fclose$22:	; UnsignedMultiply £temporary1013 index 29
79:		mov a578, [bp + 8]
81:		xor dx, dx
82:		mul word [int2$29#]
88:	

fclose$23:	; BinaryAdd £temporary1014 g_fileArray £temporary1013
89:		mov a582, g_fileArray
90:		add a582, t581
92:	

fclose$24:	; Deref £temporary1012 -> £temporary1014 £temporary1014 0
94:	

fclose$25:	; Equal 38 £temporary1012.open$0 -> £temporary1014 0
95:		cmp word [a582], 0
96:		je fclose$38
98:	

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
100:	

fclose$27:	; UnsignedMultiply £temporary1016 index 29
101:		mov a583, [bp + 8]
103:		xor dx, dx
104:		mul word [int2$29#]
110:	

fclose$28:	; BinaryAdd £temporary1017 g_fileArray £temporary1016
111:		mov a587, g_fileArray
112:		add a587, t586
114:	

fclose$29:	; Deref £temporary1015 -> £temporary1017 £temporary1017 0
116:	

fclose$30:	; address £temporary1018 £temporary1015 -> £temporary1017
118:	

fclose$31:	; Parameter 10 £temporary1018 6
119:		mov [bp + 16], a587
121:	

fclose$32:	; Call 10 fclose 0
122:		mov word [bp + 10], fclose$33
123:		mov [bp + 12], bp
124:		add bp, 10
125:		jmp fclose
127:	

fclose$33:	; PostCall 10
129:	

fclose$34:	; GetReturnValue £temporary1019
134:	

fclose$35:	; NotEqual 38 £temporary1019 -1
135:		cmp t589, -1
136:		jne fclose$38
138:	

fclose$36:	; SetReturnValue -1
139:		mov a590, -1
141:	

fclose$37:	; Return -1
142:		mov t591, [bp]
143:		mov di, [bp + 4]
144:		mov bp, [bp + 2]
145:		jmp t591
147:	

fclose$38:	; Increment index
148:		inc word [bp + 8]
150:	

fclose$39:	; Goto 21
151:		jmp fclose$21
153:	

fclose$40:	; SetReturnValue 0
154:		mov a592, 0
156:	

fclose$41:	; Return 0
157:		mov t593, [bp]
158:		mov di, [bp + 4]
159:		mov bp, [bp + 2]
160:		jmp t593
162:	

fclose$42:	; FunctionEnd fclose
1:	

remove:	; AssignRegister ah 65
2:		mov a594, 65
4:	

remove$1:	; AssignRegister cl 0
5:		mov a595, 0
7:	

remove$2:	; AssignRegister dx name
8:		mov a596, [bp + 6]
10:	

remove$3:	; Interrupt 33
11:		int 33
13:	

remove$4:	; NotCarry 8
14:		jnc remove$8
16:	

remove$5:	; Assign errno 18
17:		mov word [errno], 18
19:	

remove$6:	; SetReturnValue -1
20:		mov a597, -1
22:	

remove$7:	; Return -1
23:		mov t598, [bp]
24:		mov di, [bp + 4]
25:		mov bp, [bp + 2]
26:		jmp t598
28:	

remove$8:	; SetReturnValue 0
29:		mov a599, 0
31:	

remove$9:	; Return 0
32:		mov t600, [bp]
33:		mov di, [bp + 4]
34:		mov bp, [bp + 2]
35:		jmp t600
37:	

remove$10:	; FunctionEnd remove
1:	

rename:	; AssignRegister ah 86
2:		mov a601, 86
4:	

rename$1:	; AssignRegister cl 0
5:		mov a602, 0
7:	

rename$2:	; AssignRegister dx oldName
8:		mov a603, [bp + 6]
10:	

rename$3:	; AssignRegister di newName
11:		mov a604, [bp + 8]
13:	

rename$4:	; Interrupt 33
14:		int 33
16:	

rename$5:	; NotCarry 9
17:		jnc rename$9
19:	

rename$6:	; Assign errno 19
20:		mov word [errno], 19
22:	

rename$7:	; SetReturnValue -1
23:		mov a605, -1
25:	

rename$8:	; Return -1
26:		mov t606, [bp]
27:		mov di, [bp + 4]
28:		mov bp, [bp + 2]
29:		jmp t606
31:	

rename$9:	; SetReturnValue 0
32:		mov a607, 0
34:	

rename$10:	; Return 0
35:		mov t608, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t608
40:	

rename$11:	; FunctionEnd rename
1:	

setvbuf:	; SetReturnValue 0
2:		mov a609, 0
4:	

setvbuf$1:	; Return 0
5:		mov t610, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp t610
10:	

setvbuf$2:	; FunctionEnd setvbuf
1:	

setbuf:	; Empty
3:	

setbuf$1:	; Return 0
4:		mov t611, [bp]
5:		mov di, [bp + 4]
6:		mov bp, [bp + 2]
7:		jmp t611
9:	

setbuf$2:	; FunctionEnd setbuf
1:	

fgetc:	; Assign c 0
2:		mov byte [bp + 8], 0
4:	

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
6:	

fgetc$2:	; address £temporary1033 c
7:		mov t612, bp
8:		add t612, 8
10:	

fgetc$3:	; Parameter 9 £temporary1033 6
11:		mov [bp + 15], t612
13:	

fgetc$4:	; Parameter 9 1 8
14:		mov word [bp + 17], 1
16:	

fgetc$5:	; Parameter 9 1 10
17:		mov word [bp + 19], 1
19:	

fgetc$6:	; Parameter 9 stream 12
20:		mov a613, [bp + 6]
21:		mov [bp + 21], a613
23:	

fgetc$7:	; Call 9 fread 0
24:		mov word [bp + 9], fgetc$8
25:		mov [bp + 11], bp
26:		add bp, 9
27:		jmp fread
29:	

fgetc$8:	; PostCall 9
31:	

fgetc$9:	; GetReturnValue £temporary1034
36:	

fgetc$10:	; SignedLessThanEqual 14 £temporary1034 0
37:		cmp t615, 0
38:		jle fgetc$14
40:	

fgetc$11:	; IntegralToIntegral £temporary1036 c
41:		mov a616, [bp + 8]
43:		and a616, 255
45:		cmp a616, 0
46:		jge fgetc$12
47:		neg a616
49:		neg a616
51:	

fgetc$12:	; SetReturnValue £temporary1036
53:	

fgetc$13:	; Return £temporary1036
54:		mov t617, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp t617
59:	

fgetc$14:	; SetReturnValue -1
60:		mov a618, -1
62:	

fgetc$15:	; Return -1
63:		mov t619, [bp]
64:		mov di, [bp + 4]
65:		mov bp, [bp + 2]
66:		jmp t619
68:	

fgetc$16:	; FunctionEnd fgetc
1:	

fgets:	; Assign count 0
2:		mov word [bp + 12], 0
4:	

fgets$1:	; Assign prevChar 0
5:		mov byte [bp + 14], 0
7:	

fgets$2:	; BinarySubtract £temporary1042 size 1
8:		mov a620, [bp + 8]
9:		sub a620, 1
11:	

fgets$3:	; SignedGreaterThanEqual 33 count £temporary1042
12:		cmp [bp + 12], a620
13:		jge fgets$33
15:	

fgets$4:	; Assign currChar 0
16:		mov byte [bp + 15], 0
18:	

fgets$5:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
20:	

fgets$6:	; Parameter 16 stream 6
21:		mov a621, [bp + 10]
22:		mov [bp + 22], a621
24:	

fgets$7:	; Parameter 16 string_25c# 8
25:		mov word [bp + 24], string_25c#
27:	

fgets$8:	; address £temporary1044 currChar
28:		mov t622, bp
29:		add t622, 15
31:	

fgets$9:	; Parameter 16 £temporary1044 10
32:		mov [bp + 26], t622
34:	

fgets$10:	; Call 16 fscanf 0
35:		mov word [bp + 16], fgets$11
36:		mov [bp + 18], bp
37:		add bp, 16
38:		mov di, bp
39:		add di, 2
40:		jmp fscanf
42:	

fgets$11:	; PostCall 16
44:	

fgets$12:	; NotEqual 18 prevChar 13
45:		cmp byte [bp + 14], 13
46:		jne fgets$18
48:	

fgets$13:	; NotEqual 18 currChar 10
49:		cmp byte [bp + 15], 10
50:		jne fgets$18
52:	

fgets$14:	; BinaryAdd £temporary1050 text count
53:		mov a623, [bp + 6]
54:		add a623, [bp + 12]
56:	

fgets$15:	; Deref £temporary1049 -> £temporary1050 £temporary1050 0
58:	

fgets$16:	; Assign £temporary1049 -> £temporary1050 0
59:		mov byte [a623], 0
61:	

fgets$17:	; Goto 33
62:		jmp fgets$33
64:	

fgets$18:	; IntegralToIntegral £temporary1051 currChar
65:		mov a624, [bp + 15]
67:		and a624, 255
69:		cmp a624, 0
70:		jge fgets$19
71:		neg a624
73:		neg a624
75:	

fgets$19:	; NotEqual 24 £temporary1051 -1
76:		cmp a624, -1
77:		jne fgets$24
79:	

fgets$20:	; BinaryAdd £temporary1054 text count
80:		mov a625, [bp + 6]
81:		add a625, [bp + 12]
83:	

fgets$21:	; Deref £temporary1053 -> £temporary1054 £temporary1054 0
85:	

fgets$22:	; Assign £temporary1053 -> £temporary1054 0
86:		mov byte [a625], 0
88:	

fgets$23:	; Goto 33
89:		jmp fgets$33
91:	

fgets$24:	; Equal 31 currChar 13
92:		cmp byte [bp + 15], 13
93:		je fgets$31
95:	

fgets$25:	; Equal 31 currChar 10
96:		cmp byte [bp + 15], 10
97:		je fgets$31
99:	

fgets$26:	; Assign £temporary1058 count
100:		mov t626, [bp + 12]
102:	

fgets$27:	; Increment count
103:		inc word [bp + 12]
105:	

fgets$28:	; BinaryAdd £temporary1060 text £temporary1058
106:		mov a627, [bp + 6]
107:		add a627, t626
109:	

fgets$29:	; Deref £temporary1059 -> £temporary1060 £temporary1060 0
111:	

fgets$30:	; Assign £temporary1059 -> £temporary1060 currChar
112:		mov a628, [bp + 15]
113:		mov [a627], a628
115:	

fgets$31:	; Assign prevChar currChar
116:		mov a629, [bp + 15]
117:		mov [bp + 14], a629
119:	

fgets$32:	; Goto 2
120:		jmp fgets$2
122:	

fgets$33:	; SetReturnValue text
123:		mov a630, [bp + 6]
125:	

fgets$34:	; Return text
126:		mov t631, [bp]
127:		mov di, [bp + 4]
128:		mov bp, [bp + 2]
129:		jmp t631
131:	

fgets$35:	; FunctionEnd fgets
1:	

fputs:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

fputs$1:	; Parameter 10 s 6
4:		mov a632, [bp + 6]
5:		mov [bp + 16], a632
7:	

fputs$2:	; Call 10 strlen 0
8:		mov word [bp + 10], fputs$3
9:		mov [bp + 12], bp
10:		add bp, 10
11:		jmp strlen
13:	

fputs$3:	; PostCall 10
15:	

fputs$4:	; GetReturnValue £temporary1065
20:	

fputs$5:	; BinaryAdd £temporary1066 £temporary1065 1
21:		add t634, 1
23:	

fputs$6:	; SignedMultiply size £temporary1066 1
24:		mov t635, t634
26:		xor dx, dx
27:		imul word [int2$1#]
28:		mov [bp + 10], ax
30:	

fputs$7:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
32:	

fputs$8:	; Parameter 12 s 6
33:		mov a638, [bp + 6]
34:		mov [bp + 18], a638
36:	

fputs$9:	; Parameter 12 size 8
37:		mov a639, [bp + 10]
38:		mov [bp + 20], a639
40:	

fputs$10:	; Parameter 12 1 10
41:		mov word [bp + 22], 1
43:	

fputs$11:	; Parameter 12 stream 12
44:		mov a640, [bp + 8]
45:		mov [bp + 24], a640
47:	

fputs$12:	; Call 12 fwrite 0
48:		mov word [bp + 12], fputs$13
49:		mov [bp + 14], bp
50:		add bp, 12
51:		jmp fwrite
53:	

fputs$13:	; PostCall 12
55:	

fputs$14:	; GetReturnValue £temporary1068
60:	

fputs$15:	; NotEqual 18 £temporary1068 size
61:		cmp t642, [bp + 10]
62:		jne fputs$18
64:	

fputs$16:	; Assign £temporary1073 0
65:		mov t643, 0
67:	

fputs$17:	; Goto 19
68:		jmp fputs$19
70:	

fputs$18:	; Assign £temporary1073 -1
71:		mov t644, -1
73:	

fputs$19:	; SetReturnValue £temporary1073
75:	

fputs$20:	; Return £temporary1073
76:		mov t645, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t645
81:	

fputs$21:	; FunctionEnd fputs
1:	

getchar:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

getchar$1:	; Parameter 6 stdin 6
4:		mov a646, [stdin]
5:		mov [bp + 12], a646
7:	

getchar$2:	; Call 6 fgetc 0
8:		mov word [bp + 6], getchar$3
9:		mov [bp + 8], bp
10:		add bp, 6
11:		jmp fgetc
13:	

getchar$3:	; PostCall 6
15:	

getchar$4:	; GetReturnValue £temporary1079
20:	

getchar$5:	; SetReturnValue £temporary1079
22:	

getchar$6:	; Return £temporary1079
23:		mov t649, [bp]
24:		mov di, [bp + 4]
25:		mov bp, [bp + 2]
26:		jmp t649
28:	

getchar$7:	; FunctionEnd getchar
1:	

gets:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

gets$1:	; Parameter 8 s 6
4:		mov a650, [bp + 6]
5:		mov [bp + 14], a650
7:	

gets$2:	; Parameter 8 -1 8
8:		mov word [bp + 16], -1
10:	

gets$3:	; Parameter 8 stdin 10
11:		mov a651, [stdin]
12:		mov [bp + 18], a651
14:	

gets$4:	; Call 8 fgets 0
15:		mov word [bp + 8], gets$5
16:		mov [bp + 10], bp
17:		add bp, 8
18:		jmp fgets
20:	

gets$5:	; PostCall 8
22:	

gets$6:	; GetReturnValue £temporary1081
27:	

gets$7:	; Equal 21 £temporary1081 0
28:		cmp t653, 0
29:		je gets$21
31:	

gets$8:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
33:	

gets$9:	; Parameter 8 s 6
34:		mov a654, [bp + 6]
35:		mov [bp + 14], a654
37:	

gets$10:	; Call 8 strlen 0
38:		mov word [bp + 8], gets$11
39:		mov [bp + 10], bp
40:		add bp, 8
41:		jmp strlen
43:	

gets$11:	; PostCall 8
45:	

gets$12:	; GetReturnValue £temporary1083
50:	

gets$13:	; Assign size £temporary1083
51:		mov [bp + 8], t656
53:	

gets$14:	; SignedLessThanEqual 19 size 0
54:		cmp word [bp + 8], 0
55:		jle gets$19
57:	

gets$15:	; BinarySubtract £temporary1085 size 1
58:		mov a657, [bp + 8]
59:		sub a657, 1
61:	

gets$16:	; BinaryAdd £temporary1087 s £temporary1085
62:		mov a658, [bp + 6]
63:		add a658, a657
65:	

gets$17:	; Deref £temporary1086 -> £temporary1087 £temporary1087 0
67:	

gets$18:	; Assign £temporary1086 -> £temporary1087 0
68:		mov byte [a658], 0
70:	

gets$19:	; SetReturnValue s
71:		mov a659, [bp + 6]
73:	

gets$20:	; Return s
74:		mov t660, [bp]
75:		mov di, [bp + 4]
76:		mov bp, [bp + 2]
77:		jmp t660
79:	

gets$21:	; SetReturnValue 0
80:		mov a661, 0
82:	

gets$22:	; Return 0
83:		mov t662, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp t662
88:	

gets$23:	; FunctionEnd gets
1:	

puts:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

puts$1:	; Parameter 8 s 6
4:		mov a663, [bp + 6]
5:		mov [bp + 14], a663
7:	

puts$2:	; Parameter 8 stdout 8
8:		mov a664, [stdout]
9:		mov [bp + 16], a664
11:	

puts$3:	; Call 8 fputs 0
12:		mov word [bp + 8], puts$4
13:		mov [bp + 10], bp
14:		add bp, 8
15:		jmp fputs
17:	

puts$4:	; PostCall 8
19:	

puts$5:	; GetReturnValue £temporary1092
24:	

puts$6:	; Equal 15 £temporary1092 0
25:		cmp t666, 0
26:		je puts$15
28:	

puts$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
30:	

puts$8:	; Parameter 8 10 6
31:		mov word [bp + 14], 10
33:	

puts$9:	; Parameter 8 stdout 8
34:		mov a667, [stdout]
35:		mov [bp + 16], a667
37:	

puts$10:	; Call 8 fputc 0
38:		mov word [bp + 8], puts$11
39:		mov [bp + 10], bp
40:		add bp, 8
41:		jmp fputc
43:	

puts$11:	; PostCall 8
45:	

puts$12:	; GetReturnValue £temporary1094
50:	

puts$13:	; SetReturnValue £temporary1094
52:	

puts$14:	; Return £temporary1094
53:		mov t670, [bp]
54:		mov di, [bp + 4]
55:		mov bp, [bp + 2]
56:		jmp t670
58:	

puts$15:	; SetReturnValue -1
59:		mov a671, -1
61:	

puts$16:	; Return -1
62:		mov t672, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp t672
67:	

puts$17:	; FunctionEnd puts
1:	

ungetc:	; Deref £temporary1099 -> stream stream 20
2:		mov a673, [bp + 8]
4:	

ungetc$1:	; IntegralToIntegral £temporary1100 £temporary1099 -> stream
5:		mov t674, [a673 + 20]
7:		and t674, 255
9:		cmp t674, 0
10:		jge ungetc$2
11:		neg t674
13:		neg t674
15:	

ungetc$2:	; Equal 6 £temporary1100 -1
16:		cmp t674, -1
17:		je ungetc$6
19:	

ungetc$3:	; Deref £temporary1102 -> stream stream 20
20:		mov a675, [bp + 8]
22:	

ungetc$4:	; IntegralToIntegral £temporary1103 c
23:		mov a676, [bp + 6]
26:		cmp a676, 0
27:		jge ungetc$5
28:		neg a676
30:		neg a676
32:	

ungetc$5:	; Assign £temporary1102 -> stream £temporary1103
33:		mov [a675 + 20], a676
35:	

ungetc$6:	; SetReturnValue c
36:		mov a677, [bp + 6]
38:	

ungetc$7:	; Return c
39:		mov t678, [bp]
40:		mov di, [bp + 4]
41:		mov bp, [bp + 2]
42:		jmp t678
44:	

ungetc$8:	; FunctionEnd ungetc
1:	

fread:	; Deref £temporary1105 -> stream stream 2
2:		mov a679, [bp + 12]
4:	

fread$1:	; AssignRegister bx £temporary1105 -> stream
5:		mov t680, [a679 + 2]
7:	

fread$2:	; SignedMultiply £temporary1107 size nobj
8:		mov a681, [bp + 8]
10:		xor dx, dx
11:		imul word [bp + 10]
17:	

fread$3:	; AssignRegister cx £temporary1107
18:		mov t685, t684
20:	

fread$4:	; AssignRegister ah 63
21:		mov a686, 63
23:	

fread$5:	; AssignRegister dx ptr
24:		mov a687, [bp + 6]
26:	

fread$6:	; Interrupt 33
27:		int 33
29:	

fread$7:	; NotCarry 13
30:		jnc fread$13
32:	

fread$8:	; Deref £temporary1111 -> stream stream 21
33:		mov a688, [bp + 12]
35:	

fread$9:	; Assign errno 14
36:		mov word [errno], 14
38:	

fread$10:	; Assign £temporary1111 -> stream errno
39:		mov a689, [errno]
40:		mov [a688 + 21], a689
42:	

fread$11:	; SetReturnValue 0
43:		mov a690, 0
45:	

fread$12:	; Return 0
46:		mov t691, [bp]
47:		mov di, [bp + 4]
48:		mov bp, [bp + 2]
49:		jmp t691
51:	

fread$13:	; InspectRegister £temporary1112 ax
53:	

fread$14:	; SetReturnValue £temporary1112
54:		mov t693, t692
56:	

fread$15:	; Return £temporary1112
57:		mov t694, [bp]
58:		mov di, [bp + 4]
59:		mov bp, [bp + 2]
60:		jmp t694
62:	

fread$16:	; FunctionEnd fread
1:	

fwrite:	; Deref £temporary1114 -> stream stream 2
2:		mov a695, [bp + 12]
4:	

fwrite$1:	; AssignRegister bx £temporary1114 -> stream
5:		mov t696, [a695 + 2]
7:	

fwrite$2:	; SignedMultiply £temporary1116 size nobj
8:		mov a697, [bp + 8]
10:		xor dx, dx
11:		imul word [bp + 10]
17:	

fwrite$3:	; AssignRegister cx £temporary1116
18:		mov t701, t700
20:	

fwrite$4:	; AssignRegister ah 64
21:		mov a702, 64
23:	

fwrite$5:	; AssignRegister dx ptr
24:		mov a703, [bp + 6]
26:	

fwrite$6:	; Interrupt 33
27:		int 33
29:	

fwrite$7:	; NotCarry 13
30:		jnc fwrite$13
32:	

fwrite$8:	; Deref £temporary1120 -> stream stream 21
33:		mov a704, [bp + 12]
35:	

fwrite$9:	; Assign errno 13
36:		mov word [errno], 13
38:	

fwrite$10:	; Assign £temporary1120 -> stream errno
39:		mov a705, [errno]
40:		mov [a704 + 21], a705
42:	

fwrite$11:	; SetReturnValue 0
43:		mov a706, 0
45:	

fwrite$12:	; Return 0
46:		mov t707, [bp]
47:		mov di, [bp + 4]
48:		mov bp, [bp + 2]
49:		jmp t707
51:	

fwrite$13:	; InspectRegister £temporary1121 ax
53:	

fwrite$14:	; SetReturnValue £temporary1121
54:		mov t709, t708
56:	

fwrite$15:	; Return £temporary1121
57:		mov t710, [bp]
58:		mov di, [bp + 4]
59:		mov bp, [bp + 2]
60:		jmp t710
62:	

fwrite$16:	; FunctionEnd fwrite
1:	

fseek:	; IntegralToIntegral £temporary1123 origin
2:		mov a711, [bp + 10]
5:		cmp a711, 0
6:		jge fseek$1
7:		neg a711
9:		neg a711
11:	

fseek$1:	; AssignRegister al £temporary1123
13:	

fseek$2:	; AssignRegister ah 66
14:		mov a712, 66
16:	

fseek$3:	; Deref £temporary1126 -> stream stream 2
17:		mov a713, [bp + 6]
19:	

fseek$4:	; AssignRegister bx £temporary1126 -> stream
20:		mov t714, [a713 + 2]
22:	

fseek$5:	; AssignRegister cx 0
23:		mov a715, 0
25:	

fseek$6:	; IntegralToIntegral £temporary1129 offset
26:		mov a716, [bp + 8]
29:	

fseek$7:	; AssignRegister dx £temporary1129
31:	

fseek$8:	; Interrupt 33
32:		int 33
34:	

fseek$9:	; Carry 16
35:		jc fseek$16
37:	

fseek$10:	; Deref £temporary1132 -> stream stream 23
38:		mov a717, [bp + 6]
40:	

fseek$11:	; InspectRegister £temporary1133 ax
42:	

fseek$12:	; Assign £temporary1132 -> stream £temporary1133
43:		mov [a717 + 23], t718
45:	

fseek$13:	; Deref £temporary1134 -> stream stream 23
46:		mov a719, [bp + 6]
48:	

fseek$14:	; SetReturnValue £temporary1134 -> stream
49:		mov t720, [a719 + 23]
51:	

fseek$15:	; Return £temporary1134 -> stream
52:		mov t721, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t721
57:	

fseek$16:	; Deref £temporary1135 -> stream stream 21
58:		mov a722, [bp + 6]
60:	

fseek$17:	; Assign £temporary1135 -> stream 15
61:		mov word [a722 + 21], 15
63:	

fseek$18:	; SetReturnValue -1
64:		mov a723, -1
66:	

fseek$19:	; Return -1
67:		mov t724, [bp]
68:		mov di, [bp + 4]
69:		mov bp, [bp + 2]
70:		jmp t724
72:	

fseek$20:	; FunctionEnd fseek
1:	

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

ftell$1:	; Parameter 8 stream 6
4:		mov a725, [bp + 6]
5:		mov [bp + 14], a725
7:	

ftell$2:	; Parameter 8 0 8
8:		mov word [bp + 16], 0
10:	

ftell$3:	; Parameter 8 1 10
11:		mov word [bp + 18], 1
13:	

ftell$4:	; Call 8 fseek 0
14:		mov word [bp + 8], ftell$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		jmp fseek
19:	

ftell$5:	; PostCall 8
21:	

ftell$6:	; GetReturnValue £temporary1136
26:	

ftell$7:	; SetReturnValue £temporary1136
28:	

ftell$8:	; Return £temporary1136
29:		mov t728, [bp]
30:		mov di, [bp + 4]
31:		mov bp, [bp + 2]
32:		jmp t728
34:	

ftell$9:	; FunctionEnd ftell
1:	

rewind:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

rewind$1:	; Parameter 8 stream 6
4:		mov a729, [bp + 6]
5:		mov [bp + 14], a729
7:	

rewind$2:	; Parameter 8 0 8
8:		mov word [bp + 16], 0
10:	

rewind$3:	; Parameter 8 0 10
11:		mov word [bp + 18], 0
13:	

rewind$4:	; Call 8 fseek 0
14:		mov word [bp + 8], rewind$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		jmp fseek
19:	

rewind$5:	; PostCall 8
21:	

rewind$6:	; Return 0
22:		mov t730, [bp]
23:		mov di, [bp + 4]
24:		mov bp, [bp + 2]
25:		jmp t730
27:	

rewind$7:	; FunctionEnd rewind
1:	

fgetpos:	; Deref £temporary1145 -> ptr ptr 0
2:		mov a731, [bp + 8]
4:	

fgetpos$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
5:		mov [bp + 10], a731
7:	

fgetpos$2:	; Parameter 10 stream 6
8:		mov a732, [bp + 6]
9:		mov [bp + 18], a732
11:	

fgetpos$3:	; Call 10 ftell 0
12:		mov word [bp + 12], fgetpos$4
13:		mov [bp + 14], bp
14:		add bp, 12
15:		jmp ftell
17:	

fgetpos$4:	; PostCall 10
18:		mov a731, [bp + 10]
20:	

fgetpos$5:	; GetReturnValue £temporary1146
25:	

fgetpos$6:	; IntegralToIntegral £temporary1147 £temporary1146
28:	

fgetpos$7:	; Assign £temporary1145 -> ptr £temporary1147
29:		mov [a731], t734
31:	

fgetpos$8:	; SetReturnValue 0
32:		mov a735, 0
34:	

fgetpos$9:	; Return 0
35:		mov t736, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t736
40:	

fgetpos$10:	; FunctionEnd fgetpos
1:	

fsetpos:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

fsetpos$1:	; Parameter 10 stream 6
4:		mov a737, [bp + 6]
5:		mov [bp + 16], a737
7:	

fsetpos$2:	; Deref £temporary1149 -> ptr ptr 0
8:		mov a738, [bp + 8]
10:	

fsetpos$3:	; Parameter 10 £temporary1149 -> ptr 8
11:		mov t739, [a738]
12:		mov [bp + 18], t739
14:	

fsetpos$4:	; Parameter 10 0 10
15:		mov word [bp + 20], 0
17:	

fsetpos$5:	; Call 10 fseek 0
18:		mov word [bp + 10], fsetpos$6
19:		mov [bp + 12], bp
20:		add bp, 10
21:		jmp fseek
23:	

fsetpos$6:	; PostCall 10
25:	

fsetpos$7:	; GetReturnValue £temporary1150
30:	

fsetpos$8:	; IntegralToIntegral £temporary1151 £temporary1150
33:	

fsetpos$9:	; SetReturnValue £temporary1151
35:	

fsetpos$10:	; Return £temporary1151
36:		mov t742, [bp]
37:		mov di, [bp + 4]
38:		mov bp, [bp + 2]
39:		jmp t742
41:	

fsetpos$11:	; FunctionEnd fsetpos
1:	

clearerr:	; Deref £temporary1155 -> stream stream 21
2:		mov a743, [bp + 6]
4:	

clearerr$1:	; Assign errno 0
5:		mov word [errno], 0
7:	

clearerr$2:	; Assign £temporary1155 -> stream errno
8:		mov a744, [errno]
9:		mov [a743 + 21], a744
11:	

clearerr$3:	; Return 0
12:		mov t745, [bp]
13:		mov di, [bp + 4]
14:		mov bp, [bp + 2]
15:		jmp t745
17:	

clearerr$4:	; FunctionEnd clearerr
1:	

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

feof$1:	; Parameter 8 stream 6
4:		mov a746, [bp + 6]
5:		mov [bp + 14], a746
7:	

feof$2:	; Parameter 8 0 8
8:		mov word [bp + 16], 0
10:	

feof$3:	; Parameter 8 1 10
11:		mov word [bp + 18], 1
13:	

feof$4:	; Call 8 fseek 0
14:		mov word [bp + 8], feof$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		jmp fseek
19:	

feof$5:	; PostCall 8
21:	

feof$6:	; GetReturnValue £temporary1156
26:	

feof$7:	; IntegralToIntegral £temporary1157 £temporary1156
28:		and t748, 65535
30:	

feof$8:	; Assign currPosition £temporary1157
31:		mov [bp + 8], t748
33:	

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
35:	

feof$10:	; Parameter 12 stream 6
36:		mov a749, [bp + 6]
37:		mov [bp + 18], a749
39:	

feof$11:	; Parameter 12 0 8
40:		mov word [bp + 20], 0
42:	

feof$12:	; Parameter 12 2 10
43:		mov word [bp + 22], 2
45:	

feof$13:	; Call 12 fseek 0
46:		mov word [bp + 12], feof$14
47:		mov [bp + 14], bp
48:		add bp, 12
49:		jmp fseek
51:	

feof$14:	; PostCall 12
53:	

feof$15:	; GetReturnValue £temporary1158
58:	

feof$16:	; IntegralToIntegral £temporary1159 £temporary1158
60:		and t751, 65535
62:	

feof$17:	; Assign lastPosition £temporary1159
63:		mov [bp + 12], t751
65:	

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
67:	

feof$19:	; Parameter 16 stream 6
68:		mov a752, [bp + 6]
69:		mov [bp + 22], a752
71:	

feof$20:	; IntegralToIntegral £temporary1160 currPosition
72:		mov a753, [bp + 8]
75:	

feof$21:	; Parameter 16 £temporary1160 8
76:		mov [bp + 24], a753
78:	

feof$22:	; Parameter 16 0 10
79:		mov word [bp + 26], 0
81:	

feof$23:	; Call 16 fseek 0
82:		mov word [bp + 16], feof$24
83:		mov [bp + 18], bp
84:		add bp, 16
85:		jmp fseek
87:	

feof$24:	; PostCall 16
89:	

feof$25:	; NotEqual 28 currPosition lastPosition
90:		mov a754, [bp + 12]
91:		cmp [bp + 8], a754
92:		jne feof$28
94:	

feof$26:	; Assign £temporary1163 1
95:		mov t755, 1
97:	

feof$27:	; Goto 29
98:		jmp feof$29
100:	

feof$28:	; Assign £temporary1163 0
101:		mov t756, 0
103:	

feof$29:	; Assign endOfFile £temporary1163
104:		mov [bp + 16], t756
106:	

feof$30:	; SetReturnValue endOfFile
107:		mov a757, [bp + 16]
109:	

feof$31:	; Return endOfFile
110:		mov t758, [bp]
111:		mov di, [bp + 4]
112:		mov bp, [bp + 2]
113:		jmp t758
115:	

feof$32:	; FunctionEnd feof
1:	

ferror:	; Deref £temporary1173 -> stream stream 21
2:		mov a759, [bp + 6]
4:	

ferror$1:	; SetReturnValue £temporary1173 -> stream
5:		mov t760, [a759 + 21]
7:	

ferror$2:	; Return £temporary1173 -> stream
8:		mov t761, [bp]
9:		mov di, [bp + 4]
10:		mov bp, [bp + 2]
11:		jmp t761
13:	

ferror$3:	; FunctionEnd ferror
1:	

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
4:		mov word [bp + 14], string_25s3A2025s2E0A#
6:	

perror$2:	; Parameter 8 s 8
7:		mov a762, [bp + 6]
8:		mov [bp + 16], a762
10:	

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
12:	

perror$4:	; Parameter 8 errno 16
13:		mov a763, [errno]
14:		mov [bp + 24], a763
16:	

perror$5:	; Call 8 strerror 10
17:		mov word [bp + 18], perror$6
18:		mov [bp + 20], bp
19:		add bp, 18
20:		jmp strerror
22:	

perror$6:	; PostCall 8
24:	

perror$7:	; GetReturnValue £temporary1174
29:	

perror$8:	; Parameter 8 £temporary1174 10
30:		mov [bp + 18], t765
32:	

perror$9:	; Call 8 printf 0
33:		mov word [bp + 8], perror$10
34:		mov [bp + 10], bp
35:		add bp, 8
36:		mov di, bp
37:		add di, 4
38:		jmp printf
40:	

perror$10:	; PostCall 8
42:	

perror$11:	; Return 0
43:		mov t766, [bp]
44:		mov di, [bp + 4]
45:		mov bp, [bp + 2]
46:		jmp t766
48:	

perror$12:	; FunctionEnd perror
