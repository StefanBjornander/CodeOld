1:	

scanChar:	; Assign c 0
2:		mov byte [bp + 6], 0
4:	

scanChar$1:	; Case 5 g_inStatus 0
5:		mov a763, [g_inStatus]
6:		cmp a763, 0
7:		je scanChar$5
9:	

scanChar$2:	; Case 18 g_inStatus 1
10:		cmp a763, 1
11:		je scanChar$18
13:	

scanChar$3:	; CaseEnd g_inStatus
15:	

scanChar$4:	; Goto 26
16:		jmp scanChar$26
18:	

scanChar$5:	; IntegralToIntegral £temporary1034 g_inDevice
19:		mov a764, [g_inDevice]
22:	

scanChar$6:	; Assign stream £temporary1034
23:		mov [bp + 7], a764
25:	

scanChar$7:	; Deref £temporary1035 -> stream stream 2
26:		mov a765, [bp + 7]
28:	

scanChar$8:	; Assign handle £temporary1035 -> stream
29:		mov t766, [a765 + 2]
30:		mov [bp + 9], t766
32:	

scanChar$9:	; AssignRegister ah 63
33:		mov a767, 63
35:	

scanChar$10:	; AssignRegister bx handle
36:		mov a768, [bp + 9]
38:	

scanChar$11:	; AssignRegister cx 1
39:		mov a769, 1
41:	

scanChar$12:	; address £temporary1040 c
42:		mov t770, bp
43:		add t770, 6
45:	

scanChar$13:	; AssignRegister dx £temporary1040
47:	

scanChar$14:	; Interrupt 33
48:		int 33
50:	

scanChar$15:	; Increment g_inChars
51:		inc word [g_inChars]
53:	

scanChar$16:	; SetReturnValue c
54:		mov a771, [bp + 6]
56:	

scanChar$17:	; Return c
57:		mov t772, [bp]
58:		mov di, [bp + 4]
59:		mov bp, [bp + 2]
60:		jmp t772
62:	

scanChar$18:	; IntegralToIntegral £temporary1042 g_inDevice
63:		mov a773, [g_inDevice]
66:	

scanChar$19:	; Assign inString £temporary1042
67:		mov [bp + 11], a773
69:	

scanChar$20:	; Assign £temporary1043 g_inChars
70:		mov t774, [g_inChars]
72:	

scanChar$21:	; Increment g_inChars
73:		inc word [g_inChars]
75:	

scanChar$22:	; BinaryAdd £temporary1045 inString £temporary1043
76:		mov a775, [bp + 11]
77:		add a775, t774
79:	

scanChar$23:	; Deref £temporary1044 -> £temporary1045 £temporary1045 0
81:	

scanChar$24:	; SetReturnValue £temporary1044 -> £temporary1045
82:		mov t776, [a775]
84:	

scanChar$25:	; Return £temporary1044 -> £temporary1045
85:		mov t777, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp t777
90:	

scanChar$26:	; SetReturnValue 0
91:		mov a778, 0
93:	

scanChar$27:	; Return 0
94:		mov t779, [bp]
95:		mov di, [bp + 4]
96:		mov bp, [bp + 2]
97:		jmp t779
99:	

scanChar$28:	; FunctionEnd scanChar
1:	

unscanChar:	; Case 4 g_inStatus 0
2:		mov a780, [g_inStatus]
3:		cmp a780, 0
4:		je unscanChar$4
6:	

unscanChar$1:	; Case 6 g_inStatus 1
7:		cmp a780, 1
8:		je unscanChar$6
10:	

unscanChar$2:	; CaseEnd g_inStatus
12:	

unscanChar$3:	; Goto 7
13:		jmp unscanChar$7
15:	

unscanChar$4:	; Decrement g_inChars
16:		dec word [g_inChars]
18:	

unscanChar$5:	; Goto 7
19:		jmp unscanChar$7
21:	

unscanChar$6:	; Decrement g_inChars
22:		dec word [g_inChars]
24:	

unscanChar$7:	; Return 0
25:		mov t781, [bp]
26:		mov di, [bp + 4]
27:		mov bp, [bp + 2]
28:		jmp t781
30:	

unscanChar$8:	; FunctionEnd unscanChar
1:	

@2481$strnchr:	; IntegralToIntegral £temporary1049 i
2:		mov a782, [bp + 10]
5:		cmp a782, 0
6:		jge @2481$strnchr$1
7:		neg a782
9:		neg a782
11:	

@2481$strnchr$1:	; Assign c £temporary1049
12:		mov [bp + 14], a782
14:	

@2481$strnchr$2:	; Assign index 0
15:		mov word [bp + 12], 0
17:	

@2481$strnchr$3:	; SignedGreaterThanEqual 14 index size
18:		mov a783, [bp + 8]
19:		cmp [bp + 12], a783
20:		jge @2481$strnchr$14
22:	

@2481$strnchr$4:	; BinaryAdd £temporary1053 text index
23:		mov a784, [bp + 6]
24:		add a784, [bp + 12]
26:	

@2481$strnchr$5:	; Deref £temporary1052 -> £temporary1053 £temporary1053 0
28:	

@2481$strnchr$6:	; NotEqual 12 £temporary1052 -> £temporary1053 c
29:		mov a785, [bp + 14]
30:		cmp [a784], a785
31:		jne @2481$strnchr$12
33:	

@2481$strnchr$7:	; BinaryAdd £temporary1056 text index
34:		mov a786, [bp + 6]
35:		add a786, [bp + 12]
37:	

@2481$strnchr$8:	; Deref £temporary1055 -> £temporary1056 £temporary1056 0
39:	

@2481$strnchr$9:	; address £temporary1057 £temporary1055 -> £temporary1056
41:	

@2481$strnchr$10:	; SetReturnValue £temporary1057
43:	

@2481$strnchr$11:	; Return £temporary1057
44:		mov t787, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t787
49:	

@2481$strnchr$12:	; Increment index
50:		inc word [bp + 12]
52:	

@2481$strnchr$13:	; Goto 3
53:		jmp @2481$strnchr$3
55:	

@2481$strnchr$14:	; SetReturnValue 0
56:		mov a788, 0
58:	

@2481$strnchr$15:	; Return 0
59:		mov t789, [bp]
60:		mov di, [bp + 4]
61:		mov bp, [bp + 2]
62:		jmp t789
64:	

@2481$strnchr$16:	; FunctionEnd strnchr
1:	

scanPattern:	; Assign index 0
2:		mov word [bp + 14], 0
4:	

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
6:	

scanPattern$2:	; Call 16 scanChar 0
7:		mov word [bp + 16], scanPattern$3
8:		mov [bp + 18], bp
9:		add bp, 16
10:		jmp scanChar
12:	

scanPattern$3:	; PostCall 16
14:	

scanPattern$4:	; GetReturnValue £temporary1058
19:	

scanPattern$5:	; Assign input £temporary1058
20:		mov [bp + 16], t791
22:	

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
24:	

scanPattern$7:	; IntegralToIntegral £temporary1059 input
25:		mov a792, [bp + 16]
27:		and a792, 255
29:		cmp a792, 0
30:		jge scanPattern$8
31:		neg a792
33:		neg a792
35:	

scanPattern$8:	; Parameter 17 £temporary1059 6
36:		mov [bp + 23], a792
38:	

scanPattern$9:	; Call 17 isspace 0
39:		mov word [bp + 17], scanPattern$10
40:		mov [bp + 19], bp
41:		add bp, 17
42:		jmp isspace
44:	

scanPattern$10:	; PostCall 17
46:	

scanPattern$11:	; GetReturnValue £temporary1060
51:	

scanPattern$12:	; Equal 19 £temporary1060 0
52:		cmp t794, 0
53:		je scanPattern$19
55:	

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
57:	

scanPattern$14:	; Call 17 scanChar 0
58:		mov word [bp + 17], scanPattern$15
59:		mov [bp + 19], bp
60:		add bp, 17
61:		jmp scanChar
63:	

scanPattern$15:	; PostCall 17
65:	

scanPattern$16:	; GetReturnValue £temporary1061
70:	

scanPattern$17:	; Assign input £temporary1061
71:		mov [bp + 16], t796
73:	

scanPattern$18:	; Goto 6
74:		jmp scanPattern$6
76:	

scanPattern$19:	; Equal 55 string 0
77:		cmp word [bp + 6], 0
78:		je scanPattern$55
80:	

scanPattern$20:	; NotEqual 30 not 0
81:		cmp word [bp + 12], 0
82:		jne scanPattern$30
84:	

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
86:	

scanPattern$22:	; Parameter 17 pattern 6
87:		mov a797, [bp + 8]
88:		mov [bp + 23], a797
90:	

scanPattern$23:	; Parameter 17 size 8
91:		mov a798, [bp + 10]
92:		mov [bp + 25], a798
94:	

scanPattern$24:	; IntegralToIntegral £temporary1066 input
95:		mov a799, [bp + 16]
97:		and a799, 255
99:		cmp a799, 0
100:		jge scanPattern$25
101:		neg a799
103:		neg a799
105:	

scanPattern$25:	; Parameter 17 £temporary1066 10
106:		mov [bp + 27], a799
108:	

scanPattern$26:	; Call 17 strnchr 0
109:		mov word [bp + 17], scanPattern$27
110:		mov [bp + 19], bp
111:		add bp, 17
112:		jmp @2481$strnchr
114:	

scanPattern$27:	; PostCall 17
116:	

scanPattern$28:	; GetReturnValue £temporary1067
121:	

scanPattern$29:	; NotEqual 40 £temporary1067 0
122:		cmp t801, 0
123:		jne scanPattern$40
125:	

scanPattern$30:	; Equal 51 not 0
126:		cmp word [bp + 12], 0
127:		je scanPattern$51
129:	

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
131:	

scanPattern$32:	; Parameter 17 pattern 6
132:		mov a802, [bp + 8]
133:		mov [bp + 23], a802
135:	

scanPattern$33:	; Parameter 17 size 8
136:		mov a803, [bp + 10]
137:		mov [bp + 25], a803
139:	

scanPattern$34:	; IntegralToIntegral £temporary1070 input
140:		mov a804, [bp + 16]
142:		and a804, 255
144:		cmp a804, 0
145:		jge scanPattern$35
146:		neg a804
148:		neg a804
150:	

scanPattern$35:	; Parameter 17 £temporary1070 10
151:		mov [bp + 27], a804
153:	

scanPattern$36:	; Call 17 strnchr 0
154:		mov word [bp + 17], scanPattern$37
155:		mov [bp + 19], bp
156:		add bp, 17
157:		jmp @2481$strnchr
159:	

scanPattern$37:	; PostCall 17
161:	

scanPattern$38:	; GetReturnValue £temporary1071
166:	

scanPattern$39:	; NotEqual 51 £temporary1071 0
167:		cmp t806, 0
168:		jne scanPattern$51
170:	

scanPattern$40:	; Assign £temporary1077 index
171:		mov t807, [bp + 14]
173:	

scanPattern$41:	; Increment index
174:		inc word [bp + 14]
176:	

scanPattern$42:	; BinaryAdd £temporary1079 string £temporary1077
177:		mov a808, [bp + 6]
178:		add a808, t807
180:	

scanPattern$43:	; Deref £temporary1078 -> £temporary1079 £temporary1079 0
182:	

scanPattern$44:	; Assign £temporary1078 -> £temporary1079 input
183:		mov a809, [bp + 16]
184:		mov [a808], a809
186:	

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
188:	

scanPattern$46:	; Call 17 scanChar 0
189:		mov word [bp + 17], scanPattern$47
190:		mov [bp + 19], bp
191:		add bp, 17
192:		jmp scanChar
194:	

scanPattern$47:	; PostCall 17
196:	

scanPattern$48:	; GetReturnValue £temporary1080
201:	

scanPattern$49:	; Assign input £temporary1080
202:		mov [bp + 16], t811
204:	

scanPattern$50:	; Goto 20
205:		jmp scanPattern$20
207:	

scanPattern$51:	; BinaryAdd £temporary1082 string index
208:		mov a812, [bp + 6]
209:		add a812, [bp + 14]
211:	

scanPattern$52:	; Deref £temporary1081 -> £temporary1082 £temporary1082 0
213:	

scanPattern$53:	; Assign £temporary1081 -> £temporary1082 0
214:		mov byte [a812], 0
216:	

scanPattern$54:	; Goto 81
217:		jmp scanPattern$81
219:	

scanPattern$55:	; NotEqual 65 not 0
220:		cmp word [bp + 12], 0
221:		jne scanPattern$65
223:	

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
225:	

scanPattern$57:	; Parameter 17 pattern 6
226:		mov a813, [bp + 8]
227:		mov [bp + 23], a813
229:	

scanPattern$58:	; Parameter 17 size 8
230:		mov a814, [bp + 10]
231:		mov [bp + 25], a814
233:	

scanPattern$59:	; IntegralToIntegral £temporary1085 input
234:		mov a815, [bp + 16]
236:		and a815, 255
238:		cmp a815, 0
239:		jge scanPattern$60
240:		neg a815
242:		neg a815
244:	

scanPattern$60:	; Parameter 17 £temporary1085 10
245:		mov [bp + 27], a815
247:	

scanPattern$61:	; Call 17 strnchr 0
248:		mov word [bp + 17], scanPattern$62
249:		mov [bp + 19], bp
250:		add bp, 17
251:		jmp @2481$strnchr
253:	

scanPattern$62:	; PostCall 17
255:	

scanPattern$63:	; GetReturnValue £temporary1086
260:	

scanPattern$64:	; NotEqual 75 £temporary1086 0
261:		cmp t817, 0
262:		jne scanPattern$75
264:	

scanPattern$65:	; Equal 81 not 0
265:		cmp word [bp + 12], 0
266:		je scanPattern$81
268:	

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
270:	

scanPattern$67:	; Parameter 17 pattern 6
271:		mov a818, [bp + 8]
272:		mov [bp + 23], a818
274:	

scanPattern$68:	; Parameter 17 size 8
275:		mov a819, [bp + 10]
276:		mov [bp + 25], a819
278:	

scanPattern$69:	; IntegralToIntegral £temporary1089 input
279:		mov a820, [bp + 16]
281:		and a820, 255
283:		cmp a820, 0
284:		jge scanPattern$70
285:		neg a820
287:		neg a820
289:	

scanPattern$70:	; Parameter 17 £temporary1089 10
290:		mov [bp + 27], a820
292:	

scanPattern$71:	; Call 17 strnchr 0
293:		mov word [bp + 17], scanPattern$72
294:		mov [bp + 19], bp
295:		add bp, 17
296:		jmp @2481$strnchr
298:	

scanPattern$72:	; PostCall 17
300:	

scanPattern$73:	; GetReturnValue £temporary1090
305:	

scanPattern$74:	; NotEqual 81 £temporary1090 0
306:		cmp t822, 0
307:		jne scanPattern$81
309:	

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
311:	

scanPattern$76:	; Call 17 scanChar 0
312:		mov word [bp + 17], scanPattern$77
313:		mov [bp + 19], bp
314:		add bp, 17
315:		jmp scanChar
317:	

scanPattern$77:	; PostCall 17
319:	

scanPattern$78:	; GetReturnValue £temporary1096
324:	

scanPattern$79:	; Assign input £temporary1096
325:		mov [bp + 16], t824
327:	

scanPattern$80:	; Goto 55
328:		jmp scanPattern$55
330:	

scanPattern$81:	; Return 0
331:		mov t825, [bp]
332:		mov di, [bp + 4]
333:		mov bp, [bp + 2]
334:		jmp t825
336:	

scanPattern$82:	; FunctionEnd scanPattern
1:	

scanString:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
6:	

scanString$2:	; Call 12 scanChar 0
7:		mov word [bp + 12], scanString$3
8:		mov [bp + 14], bp
9:		add bp, 12
10:		jmp scanChar
12:	

scanString$3:	; PostCall 12
14:	

scanString$4:	; GetReturnValue £temporary1110
19:	

scanString$5:	; Assign input £temporary1110
20:		mov [bp + 12], t827
22:	

scanString$6:	; Assign found 0
23:		mov word [bp + 13], 0
25:	

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
27:	

scanString$8:	; IntegralToIntegral £temporary1111 input
28:		mov a828, [bp + 12]
30:		and a828, 255
32:		cmp a828, 0
33:		jge scanString$9
34:		neg a828
36:		neg a828
38:	

scanString$9:	; Parameter 15 £temporary1111 6
39:		mov [bp + 21], a828
41:	

scanString$10:	; Call 15 isspace 0
42:		mov word [bp + 15], scanString$11
43:		mov [bp + 17], bp
44:		add bp, 15
45:		jmp isspace
47:	

scanString$11:	; PostCall 15
49:	

scanString$12:	; GetReturnValue £temporary1112
54:	

scanString$13:	; Equal 20 £temporary1112 0
55:		cmp t830, 0
56:		je scanString$20
58:	

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
60:	

scanString$15:	; Call 15 scanChar 0
61:		mov word [bp + 15], scanString$16
62:		mov [bp + 17], bp
63:		add bp, 15
64:		jmp scanChar
66:	

scanString$16:	; PostCall 15
68:	

scanString$17:	; GetReturnValue £temporary1113
73:	

scanString$18:	; Assign input £temporary1113
74:		mov [bp + 12], t832
76:	

scanString$19:	; Goto 7
77:		jmp scanString$7
79:	

scanString$20:	; Equal 82 string 0
80:		cmp word [bp + 6], 0
81:		je scanString$82
83:	

scanString$21:	; NotEqual 50 precision 0
84:		cmp word [bp + 8], 0
85:		jne scanString$50
87:	

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
89:	

scanString$23:	; IntegralToIntegral £temporary1117 input
90:		mov a833, [bp + 12]
92:		and a833, 255
94:		cmp a833, 0
95:		jge scanString$24
96:		neg a833
98:		neg a833
100:	

scanString$24:	; Parameter 15 £temporary1117 6
101:		mov [bp + 21], a833
103:	

scanString$25:	; Call 15 isspace 0
104:		mov word [bp + 15], scanString$26
105:		mov [bp + 17], bp
106:		add bp, 15
107:		jmp isspace
109:	

scanString$26:	; PostCall 15
111:	

scanString$27:	; GetReturnValue £temporary1118
116:	

scanString$28:	; NotEqual 45 £temporary1118 0
117:		cmp t835, 0
118:		jne scanString$45
120:	

scanString$29:	; IntegralToIntegral £temporary1121 input
121:		mov a836, [bp + 12]
123:		and a836, 255
125:		cmp a836, 0
126:		jge scanString$30
127:		neg a836
129:		neg a836
131:	

scanString$30:	; Equal 45 £temporary1121 -1
132:		cmp a836, -1
133:		je scanString$45
135:	

scanString$31:	; Equal 45 input 10
136:		cmp byte [bp + 12], 10
137:		je scanString$45
139:	

scanString$32:	; Assign £temporary1126 index
140:		mov t837, [bp + 10]
142:	

scanString$33:	; Increment index
143:		inc word [bp + 10]
145:	

scanString$34:	; BinaryAdd £temporary1128 string £temporary1126
146:		mov a838, [bp + 6]
147:		add a838, t837
149:	

scanString$35:	; Deref £temporary1127 -> £temporary1128 £temporary1128 0
151:	

scanString$36:	; Assign £temporary1127 -> £temporary1128 input
152:		mov a839, [bp + 12]
153:		mov [a838], a839
155:	

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
157:	

scanString$38:	; Call 15 scanChar 0
158:		mov word [bp + 15], scanString$39
159:		mov [bp + 17], bp
160:		add bp, 15
161:		jmp scanChar
163:	

scanString$39:	; PostCall 15
165:	

scanString$40:	; GetReturnValue £temporary1129
170:	

scanString$41:	; Assign input £temporary1129
171:		mov [bp + 12], t841
173:	

scanString$42:	; Assign found 1
174:		mov word [bp + 13], 1
176:	

scanString$43:	; Increment g_inChars
177:		inc word [g_inChars]
179:	

scanString$44:	; Goto 22
180:		jmp scanString$22
182:	

scanString$45:	; BinaryAdd £temporary1132 string index
183:		mov a842, [bp + 6]
184:		add a842, [bp + 10]
186:	

scanString$46:	; Deref £temporary1131 -> £temporary1132 £temporary1132 0
188:	

scanString$47:	; Assign £temporary1131 -> £temporary1132 0
189:		mov byte [a842], 0
191:	

scanString$48:	; Increment g_inChars
192:		inc word [g_inChars]
194:	

scanString$49:	; Goto 126
195:		jmp scanString$126
197:	

scanString$50:	; Assign £temporary1134 precision
198:		mov t843, [bp + 8]
200:	

scanString$51:	; Decrement precision
201:		dec word [bp + 8]
203:	

scanString$52:	; SignedLessThanEqual 76 £temporary1134 0
204:		cmp t843, 0
205:		jle scanString$76
207:	

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
209:	

scanString$54:	; IntegralToIntegral £temporary1136 input
210:		mov a844, [bp + 12]
212:		and a844, 255
214:		cmp a844, 0
215:		jge scanString$55
216:		neg a844
218:		neg a844
220:	

scanString$55:	; Parameter 15 £temporary1136 6
221:		mov [bp + 21], a844
223:	

scanString$56:	; Call 15 isspace 0
224:		mov word [bp + 15], scanString$57
225:		mov [bp + 17], bp
226:		add bp, 15
227:		jmp isspace
229:	

scanString$57:	; PostCall 15
231:	

scanString$58:	; GetReturnValue £temporary1137
236:	

scanString$59:	; NotEqual 76 £temporary1137 0
237:		cmp t846, 0
238:		jne scanString$76
240:	

scanString$60:	; IntegralToIntegral £temporary1140 input
241:		mov a847, [bp + 12]
243:		and a847, 255
245:		cmp a847, 0
246:		jge scanString$61
247:		neg a847
249:		neg a847
251:	

scanString$61:	; Equal 76 £temporary1140 -1
252:		cmp a847, -1
253:		je scanString$76
255:	

scanString$62:	; Equal 76 input 10
256:		cmp byte [bp + 12], 10
257:		je scanString$76
259:	

scanString$63:	; Assign £temporary1146 index
260:		mov t848, [bp + 10]
262:	

scanString$64:	; Increment index
263:		inc word [bp + 10]
265:	

scanString$65:	; BinaryAdd £temporary1148 string £temporary1146
266:		mov a849, [bp + 6]
267:		add a849, t848
269:	

scanString$66:	; Deref £temporary1147 -> £temporary1148 £temporary1148 0
271:	

scanString$67:	; Assign £temporary1147 -> £temporary1148 input
272:		mov a850, [bp + 12]
273:		mov [a849], a850
275:	

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
277:	

scanString$69:	; Call 15 scanChar 0
278:		mov word [bp + 15], scanString$70
279:		mov [bp + 17], bp
280:		add bp, 15
281:		jmp scanChar
283:	

scanString$70:	; PostCall 15
285:	

scanString$71:	; GetReturnValue £temporary1149
290:	

scanString$72:	; Assign input £temporary1149
291:		mov [bp + 12], t852
293:	

scanString$73:	; Assign found 1
294:		mov word [bp + 13], 1
296:	

scanString$74:	; Increment g_inChars
297:		inc word [g_inChars]
299:	

scanString$75:	; Goto 50
300:		jmp scanString$50
302:	

scanString$76:	; SignedLessThanEqual 126 precision 0
303:		cmp word [bp + 8], 0
304:		jle scanString$126
306:	

scanString$77:	; BinaryAdd £temporary1153 string index
307:		mov a853, [bp + 6]
308:		add a853, [bp + 10]
310:	

scanString$78:	; Deref £temporary1152 -> £temporary1153 £temporary1153 0
312:	

scanString$79:	; Assign £temporary1152 -> £temporary1153 0
313:		mov byte [a853], 0
315:	

scanString$80:	; Increment g_inChars
316:		inc word [g_inChars]
318:	

scanString$81:	; Goto 126
319:		jmp scanString$126
321:	

scanString$82:	; NotEqual 103 precision 0
322:		cmp word [bp + 8], 0
323:		jne scanString$103
325:	

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
327:	

scanString$84:	; IntegralToIntegral £temporary1156 input
328:		mov a854, [bp + 12]
330:		and a854, 255
332:		cmp a854, 0
333:		jge scanString$85
334:		neg a854
336:		neg a854
338:	

scanString$85:	; Parameter 15 £temporary1156 6
339:		mov [bp + 21], a854
341:	

scanString$86:	; Call 15 isspace 0
342:		mov word [bp + 15], scanString$87
343:		mov [bp + 17], bp
344:		add bp, 15
345:		jmp isspace
347:	

scanString$87:	; PostCall 15
349:	

scanString$88:	; GetReturnValue £temporary1157
354:	

scanString$89:	; NotEqual 101 £temporary1157 0
355:		cmp t856, 0
356:		jne scanString$101
358:	

scanString$90:	; IntegralToIntegral £temporary1160 input
359:		mov a857, [bp + 12]
361:		and a857, 255
363:		cmp a857, 0
364:		jge scanString$91
365:		neg a857
367:		neg a857
369:	

scanString$91:	; Equal 101 £temporary1160 -1
370:		cmp a857, -1
371:		je scanString$101
373:	

scanString$92:	; Equal 101 input 10
374:		cmp byte [bp + 12], 10
375:		je scanString$101
377:	

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
379:	

scanString$94:	; Call 15 scanChar 0
380:		mov word [bp + 15], scanString$95
381:		mov [bp + 17], bp
382:		add bp, 15
383:		jmp scanChar
385:	

scanString$95:	; PostCall 15
387:	

scanString$96:	; GetReturnValue £temporary1165
392:	

scanString$97:	; Assign input £temporary1165
393:		mov [bp + 12], t859
395:	

scanString$98:	; Assign found 1
396:		mov word [bp + 13], 1
398:	

scanString$99:	; Increment g_inChars
399:		inc word [g_inChars]
401:	

scanString$100:	; Goto 83
402:		jmp scanString$83
404:	

scanString$101:	; Increment g_inChars
405:		inc word [g_inChars]
407:	

scanString$102:	; Goto 126
408:		jmp scanString$126
410:	

scanString$103:	; Assign £temporary1168 precision
411:		mov t860, [bp + 8]
413:	

scanString$104:	; Decrement precision
414:		dec word [bp + 8]
416:	

scanString$105:	; SignedLessThanEqual 124 £temporary1168 0
417:		cmp t860, 0
418:		jle scanString$124
420:	

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
422:	

scanString$107:	; IntegralToIntegral £temporary1170 input
423:		mov a861, [bp + 12]
425:		and a861, 255
427:		cmp a861, 0
428:		jge scanString$108
429:		neg a861
431:		neg a861
433:	

scanString$108:	; Parameter 15 £temporary1170 6
434:		mov [bp + 21], a861
436:	

scanString$109:	; Call 15 isspace 0
437:		mov word [bp + 15], scanString$110
438:		mov [bp + 17], bp
439:		add bp, 15
440:		jmp isspace
442:	

scanString$110:	; PostCall 15
444:	

scanString$111:	; GetReturnValue £temporary1171
449:	

scanString$112:	; NotEqual 124 £temporary1171 0
450:		cmp t863, 0
451:		jne scanString$124
453:	

scanString$113:	; IntegralToIntegral £temporary1174 input
454:		mov a864, [bp + 12]
456:		and a864, 255
458:		cmp a864, 0
459:		jge scanString$114
460:		neg a864
462:		neg a864
464:	

scanString$114:	; Equal 124 £temporary1174 -1
465:		cmp a864, -1
466:		je scanString$124
468:	

scanString$115:	; Equal 124 input 10
469:		cmp byte [bp + 12], 10
470:		je scanString$124
472:	

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
474:	

scanString$117:	; Call 15 scanChar 0
475:		mov word [bp + 15], scanString$118
476:		mov [bp + 17], bp
477:		add bp, 15
478:		jmp scanChar
480:	

scanString$118:	; PostCall 15
482:	

scanString$119:	; GetReturnValue £temporary1180
487:	

scanString$120:	; Assign input £temporary1180
488:		mov [bp + 12], t866
490:	

scanString$121:	; Assign found 1
491:		mov word [bp + 13], 1
493:	

scanString$122:	; Increment g_inChars
494:		inc word [g_inChars]
496:	

scanString$123:	; Goto 103
497:		jmp scanString$103
499:	

scanString$124:	; SignedLessThanEqual 126 precision 0
500:		cmp word [bp + 8], 0
501:		jle scanString$126
503:	

scanString$125:	; Increment g_inChars
504:		inc word [g_inChars]
506:	

scanString$126:	; Equal 128 found 0
507:		cmp word [bp + 13], 0
508:		je scanString$128
510:	

scanString$127:	; Increment g_inCount
511:		inc word [g_inCount]
513:	

scanString$128:	; Return 0
514:		mov t867, [bp]
515:		mov di, [bp + 4]
516:		mov bp, [bp + 2]
517:		jmp t867
519:	

scanString$129:	; FunctionEnd scanString
1:	

@2723$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

@2723$isDigitInBase$1:	; IntegralToIntegral £temporary1191 c
4:		mov a868, [bp + 6]
6:		and a868, 255
8:		cmp a868, 0
9:		jge @2723$isDigitInBase$2
10:		neg a868
12:		neg a868
14:	

@2723$isDigitInBase$2:	; Parameter 9 £temporary1191 6
15:		mov [bp + 15], a868
17:	

@2723$isDigitInBase$3:	; Call 9 isdigit 0
18:		mov word [bp + 9], @2723$isDigitInBase$4
19:		mov [bp + 11], bp
20:		add bp, 9
21:		jmp isdigit
23:	

@2723$isDigitInBase$4:	; PostCall 9
25:	

@2723$isDigitInBase$5:	; GetReturnValue £temporary1192
30:	

@2723$isDigitInBase$6:	; Equal 17 £temporary1192 0
31:		cmp t870, 0
32:		je @2723$isDigitInBase$17
34:	

@2723$isDigitInBase$7:	; BinarySubtract £temporary1193 c 48
35:		mov a871, [bp + 6]
36:		sub a871, 48
38:	

@2723$isDigitInBase$8:	; IntegralToIntegral £temporary1194 £temporary1193
40:		and a871, 255
42:		cmp a871, 0
43:		jge @2723$isDigitInBase$9
44:		neg a871
46:		neg a871
48:	

@2723$isDigitInBase$9:	; Assign value £temporary1194
49:		mov [bp + 9], a871
51:	

@2723$isDigitInBase$10:	; SignedLessThan 14 value 0
52:		cmp word [bp + 9], 0
53:		jl @2723$isDigitInBase$14
55:	

@2723$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
56:		mov a872, [bp + 7]
57:		cmp [bp + 9], a872
58:		jge @2723$isDigitInBase$14
60:	

@2723$isDigitInBase$12:	; Assign £temporary1198 1
61:		mov t873, 1
63:	

@2723$isDigitInBase$13:	; Goto 15
64:		jmp @2723$isDigitInBase$15
66:	

@2723$isDigitInBase$14:	; Assign £temporary1198 0
67:		mov t874, 0
69:	

@2723$isDigitInBase$15:	; SetReturnValue £temporary1198
71:	

@2723$isDigitInBase$16:	; Return £temporary1198
72:		mov t875, [bp]
73:		mov di, [bp + 4]
74:		mov bp, [bp + 2]
75:		jmp t875
77:	

@2723$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
79:	

@2723$isDigitInBase$18:	; IntegralToIntegral £temporary1199 c
80:		mov a876, [bp + 6]
82:		and a876, 255
84:		cmp a876, 0
85:		jge @2723$isDigitInBase$19
86:		neg a876
88:		neg a876
90:	

@2723$isDigitInBase$19:	; Parameter 9 £temporary1199 6
91:		mov [bp + 15], a876
93:	

@2723$isDigitInBase$20:	; Call 9 islower 0
94:		mov word [bp + 9], @2723$isDigitInBase$21
95:		mov [bp + 11], bp
96:		add bp, 9
97:		jmp islower
99:	

@2723$isDigitInBase$21:	; PostCall 9
101:	

@2723$isDigitInBase$22:	; GetReturnValue £temporary1200
106:	

@2723$isDigitInBase$23:	; Equal 34 £temporary1200 0
107:		cmp t878, 0
108:		je @2723$isDigitInBase$34
110:	

@2723$isDigitInBase$24:	; BinarySubtract £temporary1201 c 97
111:		mov a879, [bp + 6]
112:		sub a879, 97
114:	

@2723$isDigitInBase$25:	; IntegralToIntegral £temporary1202 £temporary1201
116:		and a879, 255
118:		cmp a879, 0
119:		jge @2723$isDigitInBase$26
120:		neg a879
122:		neg a879
124:	

@2723$isDigitInBase$26:	; BinaryAdd value £temporary1202 10
125:		add a879, 10
126:		mov [bp + 9], a879
128:	

@2723$isDigitInBase$27:	; SignedLessThan 31 value 0
129:		cmp word [bp + 9], 0
130:		jl @2723$isDigitInBase$31
132:	

@2723$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
133:		mov a880, [bp + 7]
134:		cmp [bp + 9], a880
135:		jge @2723$isDigitInBase$31
137:	

@2723$isDigitInBase$29:	; Assign £temporary1207 1
138:		mov t881, 1
140:	

@2723$isDigitInBase$30:	; Goto 32
141:		jmp @2723$isDigitInBase$32
143:	

@2723$isDigitInBase$31:	; Assign £temporary1207 0
144:		mov t882, 0
146:	

@2723$isDigitInBase$32:	; SetReturnValue £temporary1207
148:	

@2723$isDigitInBase$33:	; Return £temporary1207
149:		mov t883, [bp]
150:		mov di, [bp + 4]
151:		mov bp, [bp + 2]
152:		jmp t883
154:	

@2723$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
156:	

@2723$isDigitInBase$35:	; IntegralToIntegral £temporary1208 c
157:		mov a884, [bp + 6]
159:		and a884, 255
161:		cmp a884, 0
162:		jge @2723$isDigitInBase$36
163:		neg a884
165:		neg a884
167:	

@2723$isDigitInBase$36:	; Parameter 9 £temporary1208 6
168:		mov [bp + 15], a884
170:	

@2723$isDigitInBase$37:	; Call 9 isupper 0
171:		mov word [bp + 9], @2723$isDigitInBase$38
172:		mov [bp + 11], bp
173:		add bp, 9
174:		jmp isupper
176:	

@2723$isDigitInBase$38:	; PostCall 9
178:	

@2723$isDigitInBase$39:	; GetReturnValue £temporary1209
183:	

@2723$isDigitInBase$40:	; Equal 51 £temporary1209 0
184:		cmp t886, 0
185:		je @2723$isDigitInBase$51
187:	

@2723$isDigitInBase$41:	; BinarySubtract £temporary1210 c 65
188:		mov a887, [bp + 6]
189:		sub a887, 65
191:	

@2723$isDigitInBase$42:	; IntegralToIntegral £temporary1211 £temporary1210
193:		and a887, 255
195:		cmp a887, 0
196:		jge @2723$isDigitInBase$43
197:		neg a887
199:		neg a887
201:	

@2723$isDigitInBase$43:	; BinaryAdd value £temporary1211 10
202:		add a887, 10
203:		mov [bp + 9], a887
205:	

@2723$isDigitInBase$44:	; SignedLessThan 48 value 0
206:		cmp word [bp + 9], 0
207:		jl @2723$isDigitInBase$48
209:	

@2723$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
210:		mov a888, [bp + 7]
211:		cmp [bp + 9], a888
212:		jge @2723$isDigitInBase$48
214:	

@2723$isDigitInBase$46:	; Assign £temporary1216 1
215:		mov t889, 1
217:	

@2723$isDigitInBase$47:	; Goto 49
218:		jmp @2723$isDigitInBase$49
220:	

@2723$isDigitInBase$48:	; Assign £temporary1216 0
221:		mov t890, 0
223:	

@2723$isDigitInBase$49:	; SetReturnValue £temporary1216
225:	

@2723$isDigitInBase$50:	; Return £temporary1216
226:		mov t891, [bp]
227:		mov di, [bp + 4]
228:		mov bp, [bp + 2]
229:		jmp t891
231:	

@2723$isDigitInBase$51:	; SetReturnValue 0
232:		mov a892, 0
234:	

@2723$isDigitInBase$52:	; Return 0
235:		mov t893, [bp]
236:		mov di, [bp + 4]
237:		mov bp, [bp + 2]
238:		jmp t893
240:	

@2723$isDigitInBase$53:	; FunctionEnd isDigitInBase
1:	

@2787$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

@2787$digitToValue$1:	; IntegralToIntegral £temporary1223 c
4:		mov a894, [bp + 6]
6:		and a894, 255
8:		cmp a894, 0
9:		jge @2787$digitToValue$2
10:		neg a894
12:		neg a894
14:	

@2787$digitToValue$2:	; Parameter 7 £temporary1223 6
15:		mov [bp + 13], a894
17:	

@2787$digitToValue$3:	; Call 7 isdigit 0
18:		mov word [bp + 7], @2787$digitToValue$4
19:		mov [bp + 9], bp
20:		add bp, 7
21:		jmp isdigit
23:	

@2787$digitToValue$4:	; PostCall 7
25:	

@2787$digitToValue$5:	; GetReturnValue £temporary1224
30:	

@2787$digitToValue$6:	; Equal 11 £temporary1224 0
31:		cmp t896, 0
32:		je @2787$digitToValue$11
34:	

@2787$digitToValue$7:	; BinarySubtract £temporary1225 c 48
35:		mov a897, [bp + 6]
36:		sub a897, 48
38:	

@2787$digitToValue$8:	; IntegralToIntegral £temporary1226 £temporary1225
40:		and a897, 255
42:		cmp a897, 0
43:		jge @2787$digitToValue$9
44:		neg a897
46:		neg a897
48:	

@2787$digitToValue$9:	; SetReturnValue £temporary1226
50:	

@2787$digitToValue$10:	; Return £temporary1226
51:		mov t898, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t898
56:	

@2787$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
58:	

@2787$digitToValue$12:	; IntegralToIntegral £temporary1227 c
59:		mov a899, [bp + 6]
61:		and a899, 255
63:		cmp a899, 0
64:		jge @2787$digitToValue$13
65:		neg a899
67:		neg a899
69:	

@2787$digitToValue$13:	; Parameter 7 £temporary1227 6
70:		mov [bp + 13], a899
72:	

@2787$digitToValue$14:	; Call 7 islower 0
73:		mov word [bp + 7], @2787$digitToValue$15
74:		mov [bp + 9], bp
75:		add bp, 7
76:		jmp islower
78:	

@2787$digitToValue$15:	; PostCall 7
80:	

@2787$digitToValue$16:	; GetReturnValue £temporary1228
85:	

@2787$digitToValue$17:	; Equal 23 £temporary1228 0
86:		cmp t901, 0
87:		je @2787$digitToValue$23
89:	

@2787$digitToValue$18:	; BinarySubtract £temporary1229 c 97
90:		mov a902, [bp + 6]
91:		sub a902, 97
93:	

@2787$digitToValue$19:	; IntegralToIntegral £temporary1230 £temporary1229
95:		and a902, 255
97:		cmp a902, 0
98:		jge @2787$digitToValue$20
99:		neg a902
101:		neg a902
103:	

@2787$digitToValue$20:	; BinaryAdd £temporary1231 £temporary1230 10
104:		add a902, 10
106:	

@2787$digitToValue$21:	; SetReturnValue £temporary1231
108:	

@2787$digitToValue$22:	; Return £temporary1231
109:		mov t903, [bp]
110:		mov di, [bp + 4]
111:		mov bp, [bp + 2]
112:		jmp t903
114:	

@2787$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
116:	

@2787$digitToValue$24:	; IntegralToIntegral £temporary1232 c
117:		mov a904, [bp + 6]
119:		and a904, 255
121:		cmp a904, 0
122:		jge @2787$digitToValue$25
123:		neg a904
125:		neg a904
127:	

@2787$digitToValue$25:	; Parameter 7 £temporary1232 6
128:		mov [bp + 13], a904
130:	

@2787$digitToValue$26:	; Call 7 isupper 0
131:		mov word [bp + 7], @2787$digitToValue$27
132:		mov [bp + 9], bp
133:		add bp, 7
134:		jmp isupper
136:	

@2787$digitToValue$27:	; PostCall 7
138:	

@2787$digitToValue$28:	; GetReturnValue £temporary1233
143:	

@2787$digitToValue$29:	; Equal 35 £temporary1233 0
144:		cmp t906, 0
145:		je @2787$digitToValue$35
147:	

@2787$digitToValue$30:	; BinarySubtract £temporary1234 c 65
148:		mov a907, [bp + 6]
149:		sub a907, 65
151:	

@2787$digitToValue$31:	; IntegralToIntegral £temporary1235 £temporary1234
153:		and a907, 255
155:		cmp a907, 0
156:		jge @2787$digitToValue$32
157:		neg a907
159:		neg a907
161:	

@2787$digitToValue$32:	; BinaryAdd £temporary1236 £temporary1235 10
162:		add a907, 10
164:	

@2787$digitToValue$33:	; SetReturnValue £temporary1236
166:	

@2787$digitToValue$34:	; Return £temporary1236
167:		mov t908, [bp]
168:		mov di, [bp + 4]
169:		mov bp, [bp + 2]
170:		jmp t908
172:	

@2787$digitToValue$35:	; SetReturnValue 0
173:		mov a909, 0
175:	

@2787$digitToValue$36:	; Return 0
176:		mov t910, [bp]
177:		mov di, [bp + 4]
178:		mov bp, [bp + 2]
179:		jmp t910
181:	

@2787$digitToValue$37:	; FunctionEnd digitToValue
1:	

scanLongInt:	; Assign longValue 0
2:		mov dword [bp + 8], 0
4:	

scanLongInt$1:	; Assign minus 0
5:		mov word [bp + 12], 0
7:	

scanLongInt$2:	; Assign found 0
8:		mov word [bp + 14], 0
10:	

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
12:	

scanLongInt$4:	; Call 16 scanChar 0
13:		mov word [bp + 16], scanLongInt$5
14:		mov [bp + 18], bp
15:		add bp, 16
16:		jmp scanChar
18:	

scanLongInt$5:	; PostCall 16
20:	

scanLongInt$6:	; GetReturnValue £temporary1243
25:	

scanLongInt$7:	; Assign input £temporary1243
26:		mov [bp + 16], t912
28:	

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
30:	

scanLongInt$9:	; IntegralToIntegral £temporary1244 input
31:		mov a913, [bp + 16]
33:		and a913, 255
35:		cmp a913, 0
36:		jge scanLongInt$10
37:		neg a913
39:		neg a913
41:	

scanLongInt$10:	; Parameter 17 £temporary1244 6
42:		mov [bp + 23], a913
44:	

scanLongInt$11:	; Call 17 isspace 0
45:		mov word [bp + 17], scanLongInt$12
46:		mov [bp + 19], bp
47:		add bp, 17
48:		jmp isspace
50:	

scanLongInt$12:	; PostCall 17
52:	

scanLongInt$13:	; GetReturnValue £temporary1245
57:	

scanLongInt$14:	; Equal 21 £temporary1245 0
58:		cmp t915, 0
59:		je scanLongInt$21
61:	

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
63:	

scanLongInt$16:	; Call 17 scanChar 0
64:		mov word [bp + 17], scanLongInt$17
65:		mov [bp + 19], bp
66:		add bp, 17
67:		jmp scanChar
69:	

scanLongInt$17:	; PostCall 17
71:	

scanLongInt$18:	; GetReturnValue £temporary1246
76:	

scanLongInt$19:	; Assign input £temporary1246
77:		mov [bp + 16], t917
79:	

scanLongInt$20:	; Goto 8
80:		jmp scanLongInt$8
82:	

scanLongInt$21:	; NotEqual 28 input 43
83:		cmp byte [bp + 16], 43
84:		jne scanLongInt$28
86:	

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
88:	

scanLongInt$23:	; Call 17 scanChar 0
89:		mov word [bp + 17], scanLongInt$24
90:		mov [bp + 19], bp
91:		add bp, 17
92:		jmp scanChar
94:	

scanLongInt$24:	; PostCall 17
96:	

scanLongInt$25:	; GetReturnValue £temporary1249
101:	

scanLongInt$26:	; Assign input £temporary1249
102:		mov [bp + 16], t919
104:	

scanLongInt$27:	; Goto 35
105:		jmp scanLongInt$35
107:	

scanLongInt$28:	; NotEqual 35 input 45
108:		cmp byte [bp + 16], 45
109:		jne scanLongInt$35
111:	

scanLongInt$29:	; Assign minus 1
112:		mov word [bp + 12], 1
114:	

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
116:	

scanLongInt$31:	; Call 17 scanChar 0
117:		mov word [bp + 17], scanLongInt$32
118:		mov [bp + 19], bp
119:		add bp, 17
120:		jmp scanChar
122:	

scanLongInt$32:	; PostCall 17
124:	

scanLongInt$33:	; GetReturnValue £temporary1251
129:	

scanLongInt$34:	; Assign input £temporary1251
130:		mov [bp + 16], t921
132:	

scanLongInt$35:	; NotEqual 59 base 0
133:		cmp word [bp + 6], 0
134:		jne scanLongInt$59
136:	

scanLongInt$36:	; NotEqual 58 input 48
137:		cmp byte [bp + 16], 48
138:		jne scanLongInt$58
140:	

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
142:	

scanLongInt$38:	; Call 17 scanChar 0
143:		mov word [bp + 17], scanLongInt$39
144:		mov [bp + 19], bp
145:		add bp, 17
146:		jmp scanChar
148:	

scanLongInt$39:	; PostCall 17
150:	

scanLongInt$40:	; GetReturnValue £temporary1254
155:	

scanLongInt$41:	; Assign input £temporary1254
156:		mov [bp + 16], t923
158:	

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
160:	

scanLongInt$43:	; IntegralToIntegral £temporary1255 input
161:		mov a924, [bp + 16]
163:		and a924, 255
165:		cmp a924, 0
166:		jge scanLongInt$44
167:		neg a924
169:		neg a924
171:	

scanLongInt$44:	; Parameter 17 £temporary1255 6
172:		mov [bp + 23], a924
174:	

scanLongInt$45:	; Call 17 tolower 0
175:		mov word [bp + 17], scanLongInt$46
176:		mov [bp + 19], bp
177:		add bp, 17
178:		jmp tolower
180:	

scanLongInt$46:	; PostCall 17
182:	

scanLongInt$47:	; GetReturnValue £temporary1256
187:	

scanLongInt$48:	; NotEqual 56 £temporary1256 120
188:		cmp t926, 120
189:		jne scanLongInt$56
191:	

scanLongInt$49:	; Assign base 16
192:		mov word [bp + 6], 16
194:	

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
196:	

scanLongInt$51:	; Call 17 scanChar 0
197:		mov word [bp + 17], scanLongInt$52
198:		mov [bp + 19], bp
199:		add bp, 17
200:		jmp scanChar
202:	

scanLongInt$52:	; PostCall 17
204:	

scanLongInt$53:	; GetReturnValue £temporary1258
209:	

scanLongInt$54:	; Assign input £temporary1258
210:		mov [bp + 16], t928
212:	

scanLongInt$55:	; Goto 59
213:		jmp scanLongInt$59
215:	

scanLongInt$56:	; Assign base 8
216:		mov word [bp + 6], 8
218:	

scanLongInt$57:	; Goto 59
219:		jmp scanLongInt$59
221:	

scanLongInt$58:	; Assign base 10
222:		mov word [bp + 6], 10
224:	

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
226:	

scanLongInt$60:	; Parameter 17 input 6
227:		mov a929, [bp + 16]
228:		mov [bp + 23], a929
230:	

scanLongInt$61:	; Parameter 17 base 7
231:		mov a930, [bp + 6]
232:		mov [bp + 24], a930
234:	

scanLongInt$62:	; Call 17 isDigitInBase 0
235:		mov word [bp + 17], scanLongInt$63
236:		mov [bp + 19], bp
237:		add bp, 17
238:		jmp @2723$isDigitInBase
240:	

scanLongInt$63:	; PostCall 17
242:	

scanLongInt$64:	; GetReturnValue £temporary1259
247:	

scanLongInt$65:	; Equal 82 £temporary1259 0
248:		cmp t932, 0
249:		je scanLongInt$82
251:	

scanLongInt$66:	; IntegralToIntegral £temporary1260 base
252:		mov a933, [bp + 6]
254:		and a933, 65535
256:		cmp a933, 0
257:		jge scanLongInt$67
258:		neg a933
260:		neg a933
262:	

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1260
263:		mov a934, [bp + 8]
265:		xor edx, edx
266:		imul a933
267:		mov [bp + 8], eax
269:	

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
271:	

scanLongInt$69:	; Parameter 17 input 6
272:		mov a937, [bp + 16]
273:		mov [bp + 23], a937
275:	

scanLongInt$70:	; Call 17 digitToValue 0
276:		mov word [bp + 17], scanLongInt$71
277:		mov [bp + 19], bp
278:		add bp, 17
279:		jmp @2787$digitToValue
281:	

scanLongInt$71:	; PostCall 17
283:	

scanLongInt$72:	; GetReturnValue £temporary1262
288:	

scanLongInt$73:	; IntegralToIntegral £temporary1263 £temporary1262
290:		and t939, 65535
292:		cmp t939, 0
293:		jge scanLongInt$74
294:		neg t939
296:		neg t939
298:	

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1263
299:		add [bp + 8], t939
301:	

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
303:	

scanLongInt$76:	; Call 17 scanChar 0
304:		mov word [bp + 17], scanLongInt$77
305:		mov [bp + 19], bp
306:		add bp, 17
307:		jmp scanChar
309:	

scanLongInt$77:	; PostCall 17
311:	

scanLongInt$78:	; GetReturnValue £temporary1265
316:	

scanLongInt$79:	; Assign input £temporary1265
317:		mov [bp + 16], t941
319:	

scanLongInt$80:	; Assign found 1
320:		mov word [bp + 14], 1
322:	

scanLongInt$81:	; Goto 59
323:		jmp scanLongInt$59
325:	

scanLongInt$82:	; Equal 85 minus 0
326:		cmp word [bp + 12], 0
327:		je scanLongInt$85
329:	

scanLongInt$83:	; UnarySubtract £temporary1267 longValue
330:		mov a942, [bp + 8]
331:		neg a942
333:	

scanLongInt$84:	; Assign longValue £temporary1267
334:		mov [bp + 8], a942
336:	

scanLongInt$85:	; Equal 87 found 0
337:		cmp word [bp + 14], 0
338:		je scanLongInt$87
340:	

scanLongInt$86:	; Increment g_inCount
341:		inc word [g_inCount]
343:	

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
345:	

scanLongInt$88:	; Parameter 17 input 6
346:		mov a943, [bp + 16]
347:		mov [bp + 23], a943
349:	

scanLongInt$89:	; Call 17 unscanChar 0
350:		mov word [bp + 17], scanLongInt$90
351:		mov [bp + 19], bp
352:		add bp, 17
353:		jmp unscanChar
355:	

scanLongInt$90:	; PostCall 17
357:	

scanLongInt$91:	; SetReturnValue longValue
358:		mov a944, [bp + 8]
360:	

scanLongInt$92:	; Return longValue
361:		mov t945, [bp]
362:		mov di, [bp + 4]
363:		mov bp, [bp + 2]
364:		jmp t945
366:	

scanLongInt$93:	; FunctionEnd scanLongInt
1:	

scanUnsignedLongInt:	; Assign unsignedLongValue 0
2:		mov dword [bp + 8], 0
4:	

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
6:	

scanUnsignedLongInt$2:	; Call 16 scanChar 0
7:		mov word [bp + 16], scanUnsignedLongInt$3
8:		mov [bp + 18], bp
9:		add bp, 16
10:		jmp scanChar
12:	

scanUnsignedLongInt$3:	; PostCall 16
14:	

scanUnsignedLongInt$4:	; GetReturnValue £temporary1278
19:	

scanUnsignedLongInt$5:	; Assign input £temporary1278
20:		mov [bp + 16], t947
22:	

scanUnsignedLongInt$6:	; Assign found 1
23:		mov word [bp + 17], 1
25:	

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
27:	

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1279 input
28:		mov a948, [bp + 16]
30:		and a948, 255
32:		cmp a948, 0
33:		jge scanUnsignedLongInt$9
34:		neg a948
36:		neg a948
38:	

scanUnsignedLongInt$9:	; Parameter 19 £temporary1279 6
39:		mov [bp + 25], a948
41:	

scanUnsignedLongInt$10:	; Call 19 isspace 0
42:		mov word [bp + 19], scanUnsignedLongInt$11
43:		mov [bp + 21], bp
44:		add bp, 19
45:		jmp isspace
47:	

scanUnsignedLongInt$11:	; PostCall 19
49:	

scanUnsignedLongInt$12:	; GetReturnValue £temporary1280
54:	

scanUnsignedLongInt$13:	; Equal 20 £temporary1280 0
55:		cmp t950, 0
56:		je scanUnsignedLongInt$20
58:	

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
60:	

scanUnsignedLongInt$15:	; Call 19 scanChar 0
61:		mov word [bp + 19], scanUnsignedLongInt$16
62:		mov [bp + 21], bp
63:		add bp, 19
64:		jmp scanChar
66:	

scanUnsignedLongInt$16:	; PostCall 19
68:	

scanUnsignedLongInt$17:	; GetReturnValue £temporary1281
73:	

scanUnsignedLongInt$18:	; Assign input £temporary1281
74:		mov [bp + 16], t952
76:	

scanUnsignedLongInt$19:	; Goto 7
77:		jmp scanUnsignedLongInt$7
79:	

scanUnsignedLongInt$20:	; NotEqual 26 input 43
80:		cmp byte [bp + 16], 43
81:		jne scanUnsignedLongInt$26
83:	

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
85:	

scanUnsignedLongInt$22:	; Call 19 scanChar 0
86:		mov word [bp + 19], scanUnsignedLongInt$23
87:		mov [bp + 21], bp
88:		add bp, 19
89:		jmp scanChar
91:	

scanUnsignedLongInt$23:	; PostCall 19
93:	

scanUnsignedLongInt$24:	; GetReturnValue £temporary1284
98:	

scanUnsignedLongInt$25:	; Assign input £temporary1284
99:		mov [bp + 16], t954
101:	

scanUnsignedLongInt$26:	; NotEqual 50 base 0
102:		cmp word [bp + 6], 0
103:		jne scanUnsignedLongInt$50
105:	

scanUnsignedLongInt$27:	; NotEqual 49 input 48
106:		cmp byte [bp + 16], 48
107:		jne scanUnsignedLongInt$49
109:	

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
111:	

scanUnsignedLongInt$29:	; Call 19 scanChar 0
112:		mov word [bp + 19], scanUnsignedLongInt$30
113:		mov [bp + 21], bp
114:		add bp, 19
115:		jmp scanChar
117:	

scanUnsignedLongInt$30:	; PostCall 19
119:	

scanUnsignedLongInt$31:	; GetReturnValue £temporary1287
124:	

scanUnsignedLongInt$32:	; Assign input £temporary1287
125:		mov [bp + 16], t956
127:	

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
129:	

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1288 input
130:		mov a957, [bp + 16]
132:		and a957, 255
134:		cmp a957, 0
135:		jge scanUnsignedLongInt$35
136:		neg a957
138:		neg a957
140:	

scanUnsignedLongInt$35:	; Parameter 19 £temporary1288 6
141:		mov [bp + 25], a957
143:	

scanUnsignedLongInt$36:	; Call 19 tolower 0
144:		mov word [bp + 19], scanUnsignedLongInt$37
145:		mov [bp + 21], bp
146:		add bp, 19
147:		jmp tolower
149:	

scanUnsignedLongInt$37:	; PostCall 19
151:	

scanUnsignedLongInt$38:	; GetReturnValue £temporary1289
156:	

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1289 120
157:		cmp t959, 120
158:		jne scanUnsignedLongInt$47
160:	

scanUnsignedLongInt$40:	; Assign base 16
161:		mov word [bp + 6], 16
163:	

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
165:	

scanUnsignedLongInt$42:	; Call 19 scanChar 0
166:		mov word [bp + 19], scanUnsignedLongInt$43
167:		mov [bp + 21], bp
168:		add bp, 19
169:		jmp scanChar
171:	

scanUnsignedLongInt$43:	; PostCall 19
173:	

scanUnsignedLongInt$44:	; GetReturnValue £temporary1291
178:	

scanUnsignedLongInt$45:	; Assign input £temporary1291
179:		mov [bp + 16], t961
181:	

scanUnsignedLongInt$46:	; Goto 50
182:		jmp scanUnsignedLongInt$50
184:	

scanUnsignedLongInt$47:	; Assign base 8
185:		mov word [bp + 6], 8
187:	

scanUnsignedLongInt$48:	; Goto 50
188:		jmp scanUnsignedLongInt$50
190:	

scanUnsignedLongInt$49:	; Assign base 10
191:		mov word [bp + 6], 10
193:	

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
195:	

scanUnsignedLongInt$51:	; Parameter 19 input 6
196:		mov a962, [bp + 16]
197:		mov [bp + 25], a962
199:	

scanUnsignedLongInt$52:	; Parameter 19 base 7
200:		mov a963, [bp + 6]
201:		mov [bp + 26], a963
203:	

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
204:		mov word [bp + 19], scanUnsignedLongInt$54
205:		mov [bp + 21], bp
206:		add bp, 19
207:		jmp @2723$isDigitInBase
209:	

scanUnsignedLongInt$54:	; PostCall 19
211:	

scanUnsignedLongInt$55:	; GetReturnValue £temporary1292
216:	

scanUnsignedLongInt$56:	; Equal 73 £temporary1292 0
217:		cmp t965, 0
218:		je scanUnsignedLongInt$73
220:	

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1293 base
221:		mov a966, [bp + 6]
223:		and a966, 65535
225:	

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1293
226:		mov a967, [bp + 8]
228:		xor edx, edx
229:		mul a966
230:		mov [bp + 8], eax
232:	

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
234:	

scanUnsignedLongInt$60:	; Parameter 19 input 6
235:		mov a970, [bp + 16]
236:		mov [bp + 25], a970
238:	

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
239:		mov word [bp + 19], scanUnsignedLongInt$62
240:		mov [bp + 21], bp
241:		add bp, 19
242:		jmp @2787$digitToValue
244:	

scanUnsignedLongInt$62:	; PostCall 19
246:	

scanUnsignedLongInt$63:	; GetReturnValue £temporary1295
251:	

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1296 £temporary1295
253:		and t972, 65535
255:	

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1296
256:		add [bp + 8], t972
258:	

scanUnsignedLongInt$66:	; Assign found 1
259:		mov word [bp + 17], 1
261:	

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
263:	

scanUnsignedLongInt$68:	; Call 19 scanChar 0
264:		mov word [bp + 19], scanUnsignedLongInt$69
265:		mov [bp + 21], bp
266:		add bp, 19
267:		jmp scanChar
269:	

scanUnsignedLongInt$69:	; PostCall 19
271:	

scanUnsignedLongInt$70:	; GetReturnValue £temporary1298
276:	

scanUnsignedLongInt$71:	; Assign input £temporary1298
277:		mov [bp + 16], t974
279:	

scanUnsignedLongInt$72:	; Goto 50
280:		jmp scanUnsignedLongInt$50
282:	

scanUnsignedLongInt$73:	; Equal 75 found 0
283:		cmp word [bp + 17], 0
284:		je scanUnsignedLongInt$75
286:	

scanUnsignedLongInt$74:	; Increment g_inCount
287:		inc word [g_inCount]
289:	

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
291:	

scanUnsignedLongInt$76:	; Parameter 19 input 6
292:		mov a975, [bp + 16]
293:		mov [bp + 25], a975
295:	

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
296:		mov word [bp + 19], scanUnsignedLongInt$78
297:		mov [bp + 21], bp
298:		add bp, 19
299:		jmp unscanChar
301:	

scanUnsignedLongInt$78:	; PostCall 19
303:	

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
304:		mov a976, [bp + 8]
306:	

scanUnsignedLongInt$80:	; Return unsignedLongValue
307:		mov t977, [bp]
308:		mov di, [bp + 4]
309:		mov bp, [bp + 2]
310:		jmp t977
312:	

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt
1:	

scanLongDouble:	; Assign minus 0
2:		mov word [bp + 6], 0
4:	

scanLongDouble$1:	; Assign found 0
5:		mov word [bp + 8], 0
7:	

scanLongDouble$2:	; PushFloat 0.0
8:		fldz
10:	

scanLongDouble$3:	; PopFloat value
11:		fstp qword [bp + 10]
13:	

scanLongDouble$4:	; PushFloat 1.0
14:		fld1
16:	

scanLongDouble$5:	; PopFloat factor
17:		fstp qword [bp + 18]
19:	

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
21:	

scanLongDouble$7:	; Call 26 scanChar 0
22:		mov word [bp + 26], scanLongDouble$8
23:		mov [bp + 28], bp
24:		add bp, 26
25:		jmp scanChar
27:	

scanLongDouble$8:	; PostCall 26
29:	

scanLongDouble$9:	; GetReturnValue £temporary1309
34:	

scanLongDouble$10:	; Assign input £temporary1309
35:		mov [bp + 26], t979
37:	

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
39:	

scanLongDouble$12:	; IntegralToIntegral £temporary1310 input
40:		mov a980, [bp + 26]
42:		and a980, 255
44:		cmp a980, 0
45:		jge scanLongDouble$13
46:		neg a980
48:		neg a980
50:	

scanLongDouble$13:	; Parameter 27 £temporary1310 6
51:		mov [bp + 33], a980
53:	

scanLongDouble$14:	; Call 27 isspace 0
54:		mov word [bp + 27], scanLongDouble$15
55:		mov [bp + 29], bp
56:		add bp, 27
57:		jmp isspace
59:	

scanLongDouble$15:	; PostCall 27
61:	

scanLongDouble$16:	; GetReturnValue £temporary1311
66:	

scanLongDouble$17:	; Equal 24 £temporary1311 0
67:		cmp t982, 0
68:		je scanLongDouble$24
70:	

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
72:	

scanLongDouble$19:	; Call 27 scanChar 0
73:		mov word [bp + 27], scanLongDouble$20
74:		mov [bp + 29], bp
75:		add bp, 27
76:		jmp scanChar
78:	

scanLongDouble$20:	; PostCall 27
80:	

scanLongDouble$21:	; GetReturnValue £temporary1312
85:	

scanLongDouble$22:	; Assign input £temporary1312
86:		mov [bp + 26], t984
88:	

scanLongDouble$23:	; Goto 11
89:		jmp scanLongDouble$11
91:	

scanLongDouble$24:	; NotEqual 31 input 43
92:		cmp byte [bp + 26], 43
93:		jne scanLongDouble$31
95:	

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
97:	

scanLongDouble$26:	; Call 27 scanChar 0
98:		mov word [bp + 27], scanLongDouble$27
99:		mov [bp + 29], bp
100:		add bp, 27
101:		jmp scanChar
103:	

scanLongDouble$27:	; PostCall 27
105:	

scanLongDouble$28:	; GetReturnValue £temporary1315
110:	

scanLongDouble$29:	; Assign input £temporary1315
111:		mov [bp + 26], t986
113:	

scanLongDouble$30:	; Goto 38
114:		jmp scanLongDouble$38
116:	

scanLongDouble$31:	; NotEqual 38 input 45
117:		cmp byte [bp + 26], 45
118:		jne scanLongDouble$38
120:	

scanLongDouble$32:	; Assign minus 1
121:		mov word [bp + 6], 1
123:	

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
125:	

scanLongDouble$34:	; Call 27 scanChar 0
126:		mov word [bp + 27], scanLongDouble$35
127:		mov [bp + 29], bp
128:		add bp, 27
129:		jmp scanChar
131:	

scanLongDouble$35:	; PostCall 27
133:	

scanLongDouble$36:	; GetReturnValue £temporary1317
138:	

scanLongDouble$37:	; Assign input £temporary1317
139:		mov [bp + 26], t988
141:	

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
143:	

scanLongDouble$39:	; IntegralToIntegral £temporary1318 input
144:		mov a989, [bp + 26]
146:		and a989, 255
148:		cmp a989, 0
149:		jge scanLongDouble$40
150:		neg a989
152:		neg a989
154:	

scanLongDouble$40:	; Parameter 27 £temporary1318 6
155:		mov [bp + 33], a989
157:	

scanLongDouble$41:	; Call 27 isdigit 0
158:		mov word [bp + 27], scanLongDouble$42
159:		mov [bp + 29], bp
160:		add bp, 27
161:		jmp isdigit
163:	

scanLongDouble$42:	; PostCall 27
165:	

scanLongDouble$43:	; GetReturnValue £temporary1319
170:	

scanLongDouble$44:	; Equal 60 £temporary1319 0
171:		cmp t991, 0
172:		je scanLongDouble$60
174:	

scanLongDouble$45:	; PushFloat 10.0
175:		fld qword [@2986$float8$10.0#]
177:	

scanLongDouble$46:	; PushFloat value
178:		fld qword [bp + 10]
180:	

scanLongDouble$47:	; SignedMultiply £temporary1320 10.0 value
181:		fmul
183:	

scanLongDouble$48:	; BinarySubtract £temporary1321 input 48
184:		mov a992, [bp + 26]
185:		sub a992, 48
187:	

scanLongDouble$49:	; IntegralToIntegral £temporary1323 £temporary1321
189:		and a992, 255
191:		cmp a992, 0
192:		jge scanLongDouble$50
193:		neg a992
195:		neg a992
197:	

scanLongDouble$50:	; IntegralToFloating £temporary1322 £temporary1323
198:		mov [container2bytes#], a992
199:		fild word [container2bytes#]
201:	

scanLongDouble$51:	; BinaryAdd £temporary1324 £temporary1320 £temporary1322
202:		fadd
204:	

scanLongDouble$52:	; PopFloat value
205:		fstp qword [bp + 10]
207:	

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
209:	

scanLongDouble$54:	; Call 27 scanChar 0
210:		mov word [bp + 27], scanLongDouble$55
211:		mov [bp + 29], bp
212:		add bp, 27
213:		jmp scanChar
215:	

scanLongDouble$55:	; PostCall 27
217:	

scanLongDouble$56:	; GetReturnValue £temporary1325
222:	

scanLongDouble$57:	; Assign input £temporary1325
223:		mov [bp + 26], t994
225:	

scanLongDouble$58:	; Assign found 1
226:		mov word [bp + 8], 1
228:	

scanLongDouble$59:	; Goto 38
229:		jmp scanLongDouble$38
231:	

scanLongDouble$60:	; NotEqual 92 input 46
232:		cmp byte [bp + 26], 46
233:		jne scanLongDouble$92
235:	

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
237:	

scanLongDouble$62:	; Call 27 scanChar 0
238:		mov word [bp + 27], scanLongDouble$63
239:		mov [bp + 29], bp
240:		add bp, 27
241:		jmp scanChar
243:	

scanLongDouble$63:	; PostCall 27
245:	

scanLongDouble$64:	; GetReturnValue £temporary1328
250:	

scanLongDouble$65:	; Assign input £temporary1328
251:		mov [bp + 26], t996
253:	

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
255:	

scanLongDouble$67:	; IntegralToIntegral £temporary1329 input
256:		mov a997, [bp + 26]
258:		and a997, 255
260:		cmp a997, 0
261:		jge scanLongDouble$68
262:		neg a997
264:		neg a997
266:	

scanLongDouble$68:	; Parameter 27 £temporary1329 6
267:		mov [bp + 33], a997
269:	

scanLongDouble$69:	; Call 27 isdigit 0
270:		mov word [bp + 27], scanLongDouble$70
271:		mov [bp + 29], bp
272:		add bp, 27
273:		jmp isdigit
275:	

scanLongDouble$70:	; PostCall 27
277:	

scanLongDouble$71:	; GetReturnValue £temporary1330
282:	

scanLongDouble$72:	; Equal 92 £temporary1330 0
283:		cmp t999, 0
284:		je scanLongDouble$92
286:	

scanLongDouble$73:	; PushFloat factor
287:		fld qword [bp + 18]
289:	

scanLongDouble$74:	; PushFloat 10.0
290:		fld qword [@3006$float8$10.0#]
292:	

scanLongDouble$75:	; SignedDivide £temporary1331 factor 10.0
293:		fdiv
295:	

scanLongDouble$76:	; PopFloat factor
296:		fstp qword [bp + 18]
298:	

scanLongDouble$77:	; PushFloat value
299:		fld qword [bp + 10]
301:	

scanLongDouble$78:	; PushFloat factor
302:		fld qword [bp + 18]
304:	

scanLongDouble$79:	; BinarySubtract £temporary1332 input 48
305:		mov a1000, [bp + 26]
306:		sub a1000, 48
308:	

scanLongDouble$80:	; IntegralToIntegral £temporary1334 £temporary1332
310:		and a1000, 255
312:		cmp a1000, 0
313:		jge scanLongDouble$81
314:		neg a1000
316:		neg a1000
318:	

scanLongDouble$81:	; IntegralToFloating £temporary1333 £temporary1334
319:		mov [container2bytes#], a1000
320:		fild word [container2bytes#]
322:	

scanLongDouble$82:	; SignedMultiply £temporary1335 factor £temporary1333
323:		fmul
325:	

scanLongDouble$83:	; BinaryAdd £temporary1336 value £temporary1335
326:		fadd
328:	

scanLongDouble$84:	; PopFloat value
329:		fstp qword [bp + 10]
331:	

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
333:	

scanLongDouble$86:	; Call 27 scanChar 0
334:		mov word [bp + 27], scanLongDouble$87
335:		mov [bp + 29], bp
336:		add bp, 27
337:		jmp scanChar
339:	

scanLongDouble$87:	; PostCall 27
341:	

scanLongDouble$88:	; GetReturnValue £temporary1337
346:	

scanLongDouble$89:	; Assign input £temporary1337
347:		mov [bp + 26], t1002
349:	

scanLongDouble$90:	; Assign found 1
350:		mov word [bp + 8], 1
352:	

scanLongDouble$91:	; Goto 66
353:		jmp scanLongDouble$66
355:	

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
357:	

scanLongDouble$93:	; IntegralToIntegral £temporary1339 input
358:		mov a1003, [bp + 26]
360:		and a1003, 255
362:		cmp a1003, 0
363:		jge scanLongDouble$94
364:		neg a1003
366:		neg a1003
368:	

scanLongDouble$94:	; Parameter 27 £temporary1339 6
369:		mov [bp + 33], a1003
371:	

scanLongDouble$95:	; Call 27 tolower 0
372:		mov word [bp + 27], scanLongDouble$96
373:		mov [bp + 29], bp
374:		add bp, 27
375:		jmp tolower
377:	

scanLongDouble$96:	; PostCall 27
379:	

scanLongDouble$97:	; GetReturnValue £temporary1340
384:	

scanLongDouble$98:	; NotEqual 118 £temporary1340 101
385:		cmp t1005, 101
386:		jne scanLongDouble$118
388:	

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
390:	

scanLongDouble$100:	; Parameter 27 10 6
391:		mov word [bp + 33], 10
393:	

scanLongDouble$101:	; Call 27 scanLongInt 0
394:		mov word [bp + 27], scanLongDouble$102
395:		mov [bp + 29], bp
396:		add bp, 27
397:		jmp scanLongInt
399:	

scanLongDouble$102:	; PostCall 27
401:	

scanLongDouble$103:	; GetReturnValue £temporary1342
406:	

scanLongDouble$104:	; IntegralToFloating £temporary1343 £temporary1342
407:		mov [container4bytes#], t1007
408:		fild dword [container4bytes#]
410:	

scanLongDouble$105:	; PopFloat exponent
411:		fstp qword [bp + 27]
413:	

scanLongDouble$106:	; PushFloat value
414:		fld qword [bp + 10]
416:	

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
417:		fstp qword [bp + 35]
419:	

scanLongDouble$108:	; PushFloat 10.0
420:		fld qword [@3031$float8$10.0#]
422:	

scanLongDouble$109:	; Parameter 35 10.0 6
423:		fstp qword [bp + 49]
425:	

scanLongDouble$110:	; PushFloat exponent
426:		fld qword [bp + 27]
428:	

scanLongDouble$111:	; Parameter 35 exponent 14
429:		fstp qword [bp + 57]
431:	

scanLongDouble$112:	; Call 35 pow 0
432:		mov word [bp + 43], scanLongDouble$113
433:		mov [bp + 45], bp
434:		add bp, 43
435:		jmp pow
437:	

scanLongDouble$113:	; PostCall 35
438:		fstp qword [bp + 43]
439:		fld qword [bp + 35]
440:		fld qword [bp + 43]
442:	

scanLongDouble$114:	; GetReturnValue £temporary1344
444:	

scanLongDouble$115:	; SignedMultiply £temporary1345 value £temporary1344
445:		fmul
447:	

scanLongDouble$116:	; PopFloat value
448:		fstp qword [bp + 10]
450:	

scanLongDouble$117:	; Goto 122
451:		jmp scanLongDouble$122
453:	

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
455:	

scanLongDouble$119:	; Parameter 27 input 6
456:		mov a1008, [bp + 26]
457:		mov [bp + 33], a1008
459:	

scanLongDouble$120:	; Call 27 unscanChar 0
460:		mov word [bp + 27], scanLongDouble$121
461:		mov [bp + 29], bp
462:		add bp, 27
463:		jmp unscanChar
465:	

scanLongDouble$121:	; PostCall 27
467:	

scanLongDouble$122:	; Equal 126 minus 0
468:		cmp word [bp + 6], 0
469:		je scanLongDouble$126
471:	

scanLongDouble$123:	; PushFloat value
472:		fld qword [bp + 10]
474:	

scanLongDouble$124:	; UnarySubtract £temporary1347 value
475:		fchs
477:	

scanLongDouble$125:	; PopFloat value
478:		fstp qword [bp + 10]
480:	

scanLongDouble$126:	; Equal 128 found 0
481:		cmp word [bp + 8], 0
482:		je scanLongDouble$128
484:	

scanLongDouble$127:	; Increment g_inCount
485:		inc word [g_inCount]
487:	

scanLongDouble$128:	; PushFloat value
488:		fld qword [bp + 10]
490:	

scanLongDouble$129:	; SetReturnValue value
492:	

scanLongDouble$130:	; Return value
493:		mov t1009, [bp]
494:		mov di, [bp + 4]
495:		mov bp, [bp + 2]
496:		jmp t1009
498:	

scanLongDouble$131:	; FunctionEnd scanLongDouble
1:	

scanFormat:	; Assign percent 0
2:		mov word [bp + 13], 0
4:	

scanFormat$1:	; Assign shortInt 0
5:		mov word [bp + 15], 0
7:	

scanFormat$2:	; Assign longIntOrDouble 0
8:		mov word [bp + 17], 0
10:	

scanFormat$3:	; Assign longDouble 0
11:		mov word [bp + 19], 0
13:	

scanFormat$4:	; Assign star 0
14:		mov word [bp + 21], 0
16:	

scanFormat$5:	; Assign g_inCount 0
17:		mov word [g_inCount], 0
19:	

scanFormat$6:	; Assign g_inChars 0
20:		mov word [g_inChars], 0
22:	

scanFormat$7:	; Assign index 0
23:		mov word [bp + 31], 0
25:	

scanFormat$8:	; BinaryAdd £temporary1360 format index
26:		mov a1010, [bp + 6]
27:		add a1010, [bp + 31]
29:	

scanFormat$9:	; Deref £temporary1359 -> £temporary1360 £temporary1360 0
31:	

scanFormat$10:	; Equal 329 £temporary1359 -> £temporary1360 0
32:		cmp byte [a1010], 0
33:		je scanFormat$329
35:	

scanFormat$11:	; BinaryAdd £temporary1364 format index
36:		mov a1011, [bp + 6]
37:		add a1011, [bp + 31]
39:	

scanFormat$12:	; Deref £temporary1363 -> £temporary1364 £temporary1364 0
41:	

scanFormat$13:	; Assign c £temporary1363 -> £temporary1364
42:		mov t1012, [a1011]
43:		mov [bp + 10], t1012
45:	

scanFormat$14:	; IntegralToIntegral £temporary1365 c
46:		mov a1013, [bp + 10]
48:		and a1013, 255
50:		cmp a1013, 0
51:		jge scanFormat$15
52:		neg a1013
54:		neg a1013
56:	

scanFormat$15:	; BinaryAdd d £temporary1365 1
57:		add a1013, 1
58:		mov [bp + 55], a1013
60:	

scanFormat$16:	; Equal 321 percent 0
61:		cmp word [bp + 13], 0
62:		je scanFormat$321
64:	

scanFormat$17:	; BinarySubtract £temporary1367 d 1
65:		mov a1014, [bp + 55]
66:		sub a1014, 1
68:	

scanFormat$18:	; Case 36 £temporary1367 104
69:		cmp a1014, 104
70:		je scanFormat$36
72:	

scanFormat$19:	; Case 38 £temporary1367 108
73:		cmp a1014, 108
74:		je scanFormat$38
76:	

scanFormat$20:	; Case 40 £temporary1367 76
77:		cmp a1014, 76
78:		je scanFormat$40
80:	

scanFormat$21:	; Case 42 £temporary1367 42
81:		cmp a1014, 42
82:		je scanFormat$42
84:	

scanFormat$22:	; Case 44 £temporary1367 99
85:		cmp a1014, 99
86:		je scanFormat$44
88:	

scanFormat$23:	; Case 62 £temporary1367 115
89:		cmp a1014, 115
90:		je scanFormat$62
92:	

scanFormat$24:	; Case 81 £temporary1367 100
93:		cmp a1014, 100
94:		je scanFormat$81
96:	

scanFormat$25:	; Case 81 £temporary1367 105
97:		cmp a1014, 105
98:		je scanFormat$81
100:	

scanFormat$26:	; Case 117 £temporary1367 111
101:		cmp a1014, 111
102:		je scanFormat$117
104:	

scanFormat$27:	; Case 153 £temporary1367 120
105:		cmp a1014, 120
106:		je scanFormat$153
108:	

scanFormat$28:	; Case 189 £temporary1367 117
109:		cmp a1014, 117
110:		je scanFormat$189
112:	

scanFormat$29:	; Case 225 £temporary1367 103
113:		cmp a1014, 103
114:		je scanFormat$225
116:	

scanFormat$30:	; Case 225 £temporary1367 102
117:		cmp a1014, 102
118:		je scanFormat$225
120:	

scanFormat$31:	; Case 225 £temporary1367 101
121:		cmp a1014, 101
122:		je scanFormat$225
124:	

scanFormat$32:	; Case 261 £temporary1367 91
125:		cmp a1014, 91
126:		je scanFormat$261
128:	

scanFormat$33:	; Case 312 £temporary1367 110
129:		cmp a1014, 110
130:		je scanFormat$312
132:	

scanFormat$34:	; CaseEnd £temporary1367
134:	

scanFormat$35:	; Goto 327
135:		jmp scanFormat$327
137:	

scanFormat$36:	; Assign shortInt 1
138:		mov word [bp + 15], 1
140:	

scanFormat$37:	; Goto 327
141:		jmp scanFormat$327
143:	

scanFormat$38:	; Assign longIntOrDouble 1
144:		mov word [bp + 17], 1
146:	

scanFormat$39:	; Goto 327
147:		jmp scanFormat$327
149:	

scanFormat$40:	; Assign longDouble 1
150:		mov word [bp + 19], 1
152:	

scanFormat$41:	; Goto 327
153:		jmp scanFormat$327
155:	

scanFormat$42:	; Assign star 1
156:		mov word [bp + 21], 1
158:	

scanFormat$43:	; Goto 327
159:		jmp scanFormat$327
161:	

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
163:	

scanFormat$45:	; Call 57 scanChar 0
164:		mov word [bp + 57], scanFormat$46
165:		mov [bp + 59], bp
166:		add bp, 57
167:		jmp scanChar
169:	

scanFormat$46:	; PostCall 57
171:	

scanFormat$47:	; GetReturnValue £temporary1368
176:	

scanFormat$48:	; Assign charValue £temporary1368
177:		mov [bp + 57], t1016
179:	

scanFormat$49:	; NotEqual 57 star 0
180:		cmp word [bp + 21], 0
181:		jne scanFormat$57
183:	

scanFormat$50:	; BinaryAdd arg_list arg_list 2
184:		add word [bp + 8], 2
186:	

scanFormat$51:	; BinarySubtract £temporary1372 arg_list 2
187:		mov a1017, [bp + 8]
188:		sub a1017, 2
190:	

scanFormat$52:	; IntegralToIntegral £temporary1373 £temporary1372
193:	

scanFormat$53:	; Deref £temporary1374 -> £temporary1373 £temporary1373 0
195:	

scanFormat$54:	; Assign charPtr £temporary1374 -> £temporary1373
196:		mov t1018, [a1017]
197:		mov [bp + 11], t1018
199:	

scanFormat$55:	; Deref £temporary1375 -> charPtr charPtr 0
200:		mov a1019, [bp + 11]
202:	

scanFormat$56:	; Assign £temporary1375 -> charPtr charValue
203:		mov a1020, [bp + 57]
204:		mov [a1019], a1020
206:	

scanFormat$57:	; Assign percent 0
207:		mov word [bp + 13], 0
209:	

scanFormat$58:	; IntegralToIntegral £temporary1376 charValue
210:		mov a1021, [bp + 57]
212:		and a1021, 255
214:		cmp a1021, 0
215:		jge scanFormat$59
216:		neg a1021
218:		neg a1021
220:	

scanFormat$59:	; Equal 327 £temporary1376 -1
221:		cmp a1021, -1
222:		je scanFormat$327
224:	

scanFormat$60:	; Increment g_inCount
225:		inc word [g_inCount]
227:	

scanFormat$61:	; Goto 327
228:		jmp scanFormat$327
230:	

scanFormat$62:	; NotEqual 74 star 0
231:		cmp word [bp + 21], 0
232:		jne scanFormat$74
234:	

scanFormat$63:	; BinaryAdd arg_list arg_list 2
235:		add word [bp + 8], 2
237:	

scanFormat$64:	; BinarySubtract £temporary1382 arg_list 2
238:		mov a1022, [bp + 8]
239:		sub a1022, 2
241:	

scanFormat$65:	; IntegralToIntegral £temporary1383 £temporary1382
244:	

scanFormat$66:	; Deref £temporary1384 -> £temporary1383 £temporary1383 0
246:	

scanFormat$67:	; Assign charPtr £temporary1384 -> £temporary1383
247:		mov t1023, [a1022]
248:		mov [bp + 11], t1023
250:	

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
252:	

scanFormat$69:	; Parameter 57 charPtr 6
253:		mov a1024, [bp + 11]
254:		mov [bp + 63], a1024
256:	

scanFormat$70:	; Parameter 57 0 8
257:		mov word [bp + 65], 0
259:	

scanFormat$71:	; Call 57 scanString 0
260:		mov word [bp + 57], scanFormat$72
261:		mov [bp + 59], bp
262:		add bp, 57
263:		jmp scanString
265:	

scanFormat$72:	; PostCall 57
267:	

scanFormat$73:	; Goto 79
268:		jmp scanFormat$79
270:	

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
272:	

scanFormat$75:	; Parameter 57 0 6
273:		mov word [bp + 63], 0
275:	

scanFormat$76:	; Parameter 57 0 8
276:		mov word [bp + 65], 0
278:	

scanFormat$77:	; Call 57 scanString 0
279:		mov word [bp + 57], scanFormat$78
280:		mov [bp + 59], bp
281:		add bp, 57
282:		jmp scanString
284:	

scanFormat$78:	; PostCall 57
286:	

scanFormat$79:	; Assign percent 0
287:		mov word [bp + 13], 0
289:	

scanFormat$80:	; Goto 327
290:		jmp scanFormat$327
292:	

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
294:	

scanFormat$82:	; Parameter 57 10 6
295:		mov word [bp + 63], 10
297:	

scanFormat$83:	; Call 57 scanLongInt 0
298:		mov word [bp + 57], scanFormat$84
299:		mov [bp + 59], bp
300:		add bp, 57
301:		jmp scanLongInt
303:	

scanFormat$84:	; PostCall 57
305:	

scanFormat$85:	; GetReturnValue £temporary1387
310:	

scanFormat$86:	; Assign longValue £temporary1387
311:		mov [bp + 23], t1026
313:	

scanFormat$87:	; NotEqual 115 star 0
314:		cmp word [bp + 21], 0
315:		jne scanFormat$115
317:	

scanFormat$88:	; Equal 98 shortInt 0
318:		cmp word [bp + 15], 0
319:		je scanFormat$98
321:	

scanFormat$89:	; BinaryAdd arg_list arg_list 2
322:		add word [bp + 8], 2
324:	

scanFormat$90:	; BinarySubtract £temporary1391 arg_list 2
325:		mov a1027, [bp + 8]
326:		sub a1027, 2
328:	

scanFormat$91:	; IntegralToIntegral £temporary1392 £temporary1391
331:	

scanFormat$92:	; Deref £temporary1393 -> £temporary1392 £temporary1392 0
333:	

scanFormat$93:	; Assign shortPtr £temporary1393 -> £temporary1392
334:		mov t1028, [a1027]
335:		mov [bp + 29], t1028
337:	

scanFormat$94:	; Deref £temporary1394 -> shortPtr shortPtr 0
338:		mov a1029, [bp + 29]
340:	

scanFormat$95:	; IntegralToIntegral £temporary1395 longValue
341:		mov a1030, [bp + 23]
344:		cmp a1030, 0
345:		jge scanFormat$96
346:		neg a1030
348:		neg a1030
350:	

scanFormat$96:	; Assign £temporary1394 -> shortPtr £temporary1395
351:		mov [a1029], a1030
353:	

scanFormat$97:	; Goto 115
354:		jmp scanFormat$115
356:	

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
357:		cmp word [bp + 17], 0
358:		jne scanFormat$108
360:	

scanFormat$99:	; BinaryAdd arg_list arg_list 2
361:		add word [bp + 8], 2
363:	

scanFormat$100:	; BinarySubtract £temporary1399 arg_list 2
364:		mov a1031, [bp + 8]
365:		sub a1031, 2
367:	

scanFormat$101:	; IntegralToIntegral £temporary1400 £temporary1399
370:	

scanFormat$102:	; Deref £temporary1401 -> £temporary1400 £temporary1400 0
372:	

scanFormat$103:	; Assign intPtr £temporary1401 -> £temporary1400
373:		mov t1032, [a1031]
374:		mov [bp + 33], t1032
376:	

scanFormat$104:	; Deref £temporary1402 -> intPtr intPtr 0
377:		mov a1033, [bp + 33]
379:	

scanFormat$105:	; IntegralToIntegral £temporary1403 longValue
380:		mov a1034, [bp + 23]
383:		cmp a1034, 0
384:		jge scanFormat$106
385:		neg a1034
387:		neg a1034
389:	

scanFormat$106:	; Assign £temporary1402 -> intPtr £temporary1403
390:		mov [a1033], a1034
392:	

scanFormat$107:	; Goto 115
393:		jmp scanFormat$115
395:	

scanFormat$108:	; BinaryAdd arg_list arg_list 2
396:		add word [bp + 8], 2
398:	

scanFormat$109:	; BinarySubtract £temporary1405 arg_list 2
399:		mov a1035, [bp + 8]
400:		sub a1035, 2
402:	

scanFormat$110:	; IntegralToIntegral £temporary1406 £temporary1405
405:	

scanFormat$111:	; Deref £temporary1407 -> £temporary1406 £temporary1406 0
407:	

scanFormat$112:	; Assign longPtr £temporary1407 -> £temporary1406
408:		mov t1036, [a1035]
409:		mov [bp + 27], t1036
411:	

scanFormat$113:	; Deref £temporary1408 -> longPtr longPtr 0
412:		mov a1037, [bp + 27]
414:	

scanFormat$114:	; Assign £temporary1408 -> longPtr longValue
415:		mov a1038, [bp + 23]
416:		mov [a1037], a1038
418:	

scanFormat$115:	; Assign percent 0
419:		mov word [bp + 13], 0
421:	

scanFormat$116:	; Goto 327
422:		jmp scanFormat$327
424:	

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
426:	

scanFormat$118:	; Parameter 57 8 6
427:		mov word [bp + 63], 8
429:	

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
430:		mov word [bp + 57], scanFormat$120
431:		mov [bp + 59], bp
432:		add bp, 57
433:		jmp scanUnsignedLongInt
435:	

scanFormat$120:	; PostCall 57
437:	

scanFormat$121:	; GetReturnValue £temporary1410
442:	

scanFormat$122:	; Assign unsignedLongValue £temporary1410
443:		mov [bp + 37], t1040
445:	

scanFormat$123:	; NotEqual 151 star 0
446:		cmp word [bp + 21], 0
447:		jne scanFormat$151
449:	

scanFormat$124:	; Equal 134 shortInt 0
450:		cmp word [bp + 15], 0
451:		je scanFormat$134
453:	

scanFormat$125:	; BinaryAdd arg_list arg_list 2
454:		add word [bp + 8], 2
456:	

scanFormat$126:	; BinarySubtract £temporary1414 arg_list 2
457:		mov a1041, [bp + 8]
458:		sub a1041, 2
460:	

scanFormat$127:	; IntegralToIntegral £temporary1415 £temporary1414
463:	

scanFormat$128:	; Deref £temporary1416 -> £temporary1415 £temporary1415 0
465:	

scanFormat$129:	; Assign unsignedShortPtr £temporary1416 -> £temporary1415
466:		mov t1042, [a1041]
467:		mov [bp + 43], t1042
469:	

scanFormat$130:	; Deref £temporary1417 -> unsignedShortPtr unsignedShortPtr 0
470:		mov a1043, [bp + 43]
472:	

scanFormat$131:	; IntegralToIntegral £temporary1418 unsignedLongValue
473:		mov a1044, [bp + 37]
476:	

scanFormat$132:	; Assign £temporary1417 -> unsignedShortPtr £temporary1418
477:		mov [a1043], a1044
479:	

scanFormat$133:	; Goto 151
480:		jmp scanFormat$151
482:	

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
483:		cmp word [bp + 17], 0
484:		jne scanFormat$144
486:	

scanFormat$135:	; BinaryAdd arg_list arg_list 2
487:		add word [bp + 8], 2
489:	

scanFormat$136:	; BinarySubtract £temporary1422 arg_list 2
490:		mov a1045, [bp + 8]
491:		sub a1045, 2
493:	

scanFormat$137:	; IntegralToIntegral £temporary1423 £temporary1422
496:	

scanFormat$138:	; Deref £temporary1424 -> £temporary1423 £temporary1423 0
498:	

scanFormat$139:	; Assign unsignedIntPtr £temporary1424 -> £temporary1423
499:		mov t1046, [a1045]
500:		mov [bp + 45], t1046
502:	

scanFormat$140:	; Deref £temporary1425 -> unsignedIntPtr unsignedIntPtr 0
503:		mov a1047, [bp + 45]
505:	

scanFormat$141:	; IntegralToIntegral £temporary1426 unsignedLongValue
506:		mov a1048, [bp + 37]
509:	

scanFormat$142:	; Assign £temporary1425 -> unsignedIntPtr £temporary1426
510:		mov [a1047], a1048
512:	

scanFormat$143:	; Goto 151
513:		jmp scanFormat$151
515:	

scanFormat$144:	; BinaryAdd arg_list arg_list 2
516:		add word [bp + 8], 2
518:	

scanFormat$145:	; BinarySubtract £temporary1428 arg_list 2
519:		mov a1049, [bp + 8]
520:		sub a1049, 2
522:	

scanFormat$146:	; IntegralToIntegral £temporary1429 £temporary1428
525:	

scanFormat$147:	; Deref £temporary1430 -> £temporary1429 £temporary1429 0
527:	

scanFormat$148:	; Assign unsignedLongPtr £temporary1430 -> £temporary1429
528:		mov t1050, [a1049]
529:		mov [bp + 41], t1050
531:	

scanFormat$149:	; Deref £temporary1431 -> unsignedLongPtr unsignedLongPtr 0
532:		mov a1051, [bp + 41]
534:	

scanFormat$150:	; Assign £temporary1431 -> unsignedLongPtr unsignedLongValue
535:		mov a1052, [bp + 37]
536:		mov [a1051], a1052
538:	

scanFormat$151:	; Assign percent 0
539:		mov word [bp + 13], 0
541:	

scanFormat$152:	; Goto 327
542:		jmp scanFormat$327
544:	

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
546:	

scanFormat$154:	; Parameter 57 16 6
547:		mov word [bp + 63], 16
549:	

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
550:		mov word [bp + 57], scanFormat$156
551:		mov [bp + 59], bp
552:		add bp, 57
553:		jmp scanUnsignedLongInt
555:	

scanFormat$156:	; PostCall 57
557:	

scanFormat$157:	; GetReturnValue £temporary1433
562:	

scanFormat$158:	; Assign unsignedLongValue £temporary1433
563:		mov [bp + 37], t1054
565:	

scanFormat$159:	; NotEqual 187 star 0
566:		cmp word [bp + 21], 0
567:		jne scanFormat$187
569:	

scanFormat$160:	; Equal 170 shortInt 0
570:		cmp word [bp + 15], 0
571:		je scanFormat$170
573:	

scanFormat$161:	; BinaryAdd arg_list arg_list 2
574:		add word [bp + 8], 2
576:	

scanFormat$162:	; BinarySubtract £temporary1437 arg_list 2
577:		mov a1055, [bp + 8]
578:		sub a1055, 2
580:	

scanFormat$163:	; IntegralToIntegral £temporary1438 £temporary1437
583:	

scanFormat$164:	; Deref £temporary1439 -> £temporary1438 £temporary1438 0
585:	

scanFormat$165:	; Assign unsignedShortPtr £temporary1439 -> £temporary1438
586:		mov t1056, [a1055]
587:		mov [bp + 43], t1056
589:	

scanFormat$166:	; Deref £temporary1440 -> unsignedShortPtr unsignedShortPtr 0
590:		mov a1057, [bp + 43]
592:	

scanFormat$167:	; IntegralToIntegral £temporary1441 unsignedLongValue
593:		mov a1058, [bp + 37]
596:	

scanFormat$168:	; Assign £temporary1440 -> unsignedShortPtr £temporary1441
597:		mov [a1057], a1058
599:	

scanFormat$169:	; Goto 187
600:		jmp scanFormat$187
602:	

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
603:		cmp word [bp + 17], 0
604:		jne scanFormat$180
606:	

scanFormat$171:	; BinaryAdd arg_list arg_list 2
607:		add word [bp + 8], 2
609:	

scanFormat$172:	; BinarySubtract £temporary1445 arg_list 2
610:		mov a1059, [bp + 8]
611:		sub a1059, 2
613:	

scanFormat$173:	; IntegralToIntegral £temporary1446 £temporary1445
616:	

scanFormat$174:	; Deref £temporary1447 -> £temporary1446 £temporary1446 0
618:	

scanFormat$175:	; Assign unsignedIntPtr £temporary1447 -> £temporary1446
619:		mov t1060, [a1059]
620:		mov [bp + 45], t1060
622:	

scanFormat$176:	; Deref £temporary1448 -> unsignedIntPtr unsignedIntPtr 0
623:		mov a1061, [bp + 45]
625:	

scanFormat$177:	; IntegralToIntegral £temporary1449 unsignedLongValue
626:		mov a1062, [bp + 37]
629:	

scanFormat$178:	; Assign £temporary1448 -> unsignedIntPtr £temporary1449
630:		mov [a1061], a1062
632:	

scanFormat$179:	; Goto 187
633:		jmp scanFormat$187
635:	

scanFormat$180:	; BinaryAdd arg_list arg_list 2
636:		add word [bp + 8], 2
638:	

scanFormat$181:	; BinarySubtract £temporary1451 arg_list 2
639:		mov a1063, [bp + 8]
640:		sub a1063, 2
642:	

scanFormat$182:	; IntegralToIntegral £temporary1452 £temporary1451
645:	

scanFormat$183:	; Deref £temporary1453 -> £temporary1452 £temporary1452 0
647:	

scanFormat$184:	; Assign unsignedLongPtr £temporary1453 -> £temporary1452
648:		mov t1064, [a1063]
649:		mov [bp + 41], t1064
651:	

scanFormat$185:	; Deref £temporary1454 -> unsignedLongPtr unsignedLongPtr 0
652:		mov a1065, [bp + 41]
654:	

scanFormat$186:	; Assign £temporary1454 -> unsignedLongPtr unsignedLongValue
655:		mov a1066, [bp + 37]
656:		mov [a1065], a1066
658:	

scanFormat$187:	; Assign percent 0
659:		mov word [bp + 13], 0
661:	

scanFormat$188:	; Goto 327
662:		jmp scanFormat$327
664:	

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
666:	

scanFormat$190:	; Parameter 57 0 6
667:		mov word [bp + 63], 0
669:	

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
670:		mov word [bp + 57], scanFormat$192
671:		mov [bp + 59], bp
672:		add bp, 57
673:		jmp scanUnsignedLongInt
675:	

scanFormat$192:	; PostCall 57
677:	

scanFormat$193:	; GetReturnValue £temporary1456
682:	

scanFormat$194:	; Assign unsignedLongValue £temporary1456
683:		mov [bp + 37], t1068
685:	

scanFormat$195:	; NotEqual 223 star 0
686:		cmp word [bp + 21], 0
687:		jne scanFormat$223
689:	

scanFormat$196:	; Equal 206 shortInt 0
690:		cmp word [bp + 15], 0
691:		je scanFormat$206
693:	

scanFormat$197:	; BinaryAdd arg_list arg_list 2
694:		add word [bp + 8], 2
696:	

scanFormat$198:	; BinarySubtract £temporary1460 arg_list 2
697:		mov a1069, [bp + 8]
698:		sub a1069, 2
700:	

scanFormat$199:	; IntegralToIntegral £temporary1461 £temporary1460
703:	

scanFormat$200:	; Deref £temporary1462 -> £temporary1461 £temporary1461 0
705:	

scanFormat$201:	; Assign unsignedShortPtr £temporary1462 -> £temporary1461
706:		mov t1070, [a1069]
707:		mov [bp + 43], t1070
709:	

scanFormat$202:	; Deref £temporary1463 -> unsignedShortPtr unsignedShortPtr 0
710:		mov a1071, [bp + 43]
712:	

scanFormat$203:	; IntegralToIntegral £temporary1464 unsignedLongValue
713:		mov a1072, [bp + 37]
716:	

scanFormat$204:	; Assign £temporary1463 -> unsignedShortPtr £temporary1464
717:		mov [a1071], a1072
719:	

scanFormat$205:	; Goto 223
720:		jmp scanFormat$223
722:	

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
723:		cmp word [bp + 17], 0
724:		jne scanFormat$216
726:	

scanFormat$207:	; BinaryAdd arg_list arg_list 2
727:		add word [bp + 8], 2
729:	

scanFormat$208:	; BinarySubtract £temporary1468 arg_list 2
730:		mov a1073, [bp + 8]
731:		sub a1073, 2
733:	

scanFormat$209:	; IntegralToIntegral £temporary1469 £temporary1468
736:	

scanFormat$210:	; Deref £temporary1470 -> £temporary1469 £temporary1469 0
738:	

scanFormat$211:	; Assign unsignedIntPtr £temporary1470 -> £temporary1469
739:		mov t1074, [a1073]
740:		mov [bp + 45], t1074
742:	

scanFormat$212:	; Deref £temporary1471 -> unsignedIntPtr unsignedIntPtr 0
743:		mov a1075, [bp + 45]
745:	

scanFormat$213:	; IntegralToIntegral £temporary1472 unsignedLongValue
746:		mov a1076, [bp + 37]
749:	

scanFormat$214:	; Assign £temporary1471 -> unsignedIntPtr £temporary1472
750:		mov [a1075], a1076
752:	

scanFormat$215:	; Goto 223
753:		jmp scanFormat$223
755:	

scanFormat$216:	; BinaryAdd arg_list arg_list 2
756:		add word [bp + 8], 2
758:	

scanFormat$217:	; BinarySubtract £temporary1474 arg_list 2
759:		mov a1077, [bp + 8]
760:		sub a1077, 2
762:	

scanFormat$218:	; IntegralToIntegral £temporary1475 £temporary1474
765:	

scanFormat$219:	; Deref £temporary1476 -> £temporary1475 £temporary1475 0
767:	

scanFormat$220:	; Assign unsignedLongPtr £temporary1476 -> £temporary1475
768:		mov t1078, [a1077]
769:		mov [bp + 41], t1078
771:	

scanFormat$221:	; Deref £temporary1477 -> unsignedLongPtr unsignedLongPtr 0
772:		mov a1079, [bp + 41]
774:	

scanFormat$222:	; Assign £temporary1477 -> unsignedLongPtr unsignedLongValue
775:		mov a1080, [bp + 37]
776:		mov [a1079], a1080
778:	

scanFormat$223:	; Assign percent 0
779:		mov word [bp + 13], 0
781:	

scanFormat$224:	; Goto 327
782:		jmp scanFormat$327
784:	

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
786:	

scanFormat$226:	; Call 57 scanLongDouble 0
787:		mov word [bp + 57], scanFormat$227
788:		mov [bp + 59], bp
789:		add bp, 57
790:		jmp scanLongDouble
792:	

scanFormat$227:	; PostCall 57
794:	

scanFormat$228:	; GetReturnValue £temporary1479
796:	

scanFormat$229:	; PopFloat longDoubleValue
797:		fstp qword [bp + 47]
799:	

scanFormat$230:	; NotEqual 259 star 0
800:		cmp word [bp + 21], 0
801:		jne scanFormat$259
803:	

scanFormat$231:	; Equal 241 longIntOrDouble 0
804:		cmp word [bp + 17], 0
805:		je scanFormat$241
807:	

scanFormat$232:	; BinaryAdd arg_list arg_list 2
808:		add word [bp + 8], 2
810:	

scanFormat$233:	; BinarySubtract £temporary1483 arg_list 2
811:		mov a1081, [bp + 8]
812:		sub a1081, 2
814:	

scanFormat$234:	; IntegralToIntegral £temporary1484 £temporary1483
817:	

scanFormat$235:	; Deref £temporary1485 -> £temporary1484 £temporary1484 0
819:	

scanFormat$236:	; Assign doublePtr £temporary1485 -> £temporary1484
820:		mov t1082, [a1081]
821:		mov [bp + 57], t1082
823:	

scanFormat$237:	; Deref £temporary1486 -> doublePtr doublePtr 0
824:		mov a1083, [bp + 57]
826:	

scanFormat$238:	; PushFloat longDoubleValue
827:		fld qword [bp + 47]
829:	

scanFormat$239:	; PopFloat £temporary1486 -> doublePtr
830:		fstp qword [a1083]
832:	

scanFormat$240:	; Goto 259
833:		jmp scanFormat$259
835:	

scanFormat$241:	; Equal 251 longDouble 0
836:		cmp word [bp + 19], 0
837:		je scanFormat$251
839:	

scanFormat$242:	; BinaryAdd arg_list arg_list 2
840:		add word [bp + 8], 2
842:	

scanFormat$243:	; BinarySubtract £temporary1489 arg_list 2
843:		mov a1084, [bp + 8]
844:		sub a1084, 2
846:	

scanFormat$244:	; IntegralToIntegral £temporary1490 £temporary1489
849:	

scanFormat$245:	; Deref £temporary1491 -> £temporary1490 £temporary1490 0
851:	

scanFormat$246:	; Assign longDoublePtr £temporary1491 -> £temporary1490
852:		mov t1085, [a1084]
853:		mov [bp + 57], t1085
855:	

scanFormat$247:	; Deref £temporary1492 -> longDoublePtr longDoublePtr 0
856:		mov a1086, [bp + 57]
858:	

scanFormat$248:	; PushFloat longDoubleValue
859:		fld qword [bp + 47]
861:	

scanFormat$249:	; PopFloat £temporary1492 -> longDoublePtr
862:		fstp qword [a1086]
864:	

scanFormat$250:	; Goto 259
865:		jmp scanFormat$259
867:	

scanFormat$251:	; BinaryAdd arg_list arg_list 2
868:		add word [bp + 8], 2
870:	

scanFormat$252:	; BinarySubtract £temporary1494 arg_list 2
871:		mov a1087, [bp + 8]
872:		sub a1087, 2
874:	

scanFormat$253:	; IntegralToIntegral £temporary1495 £temporary1494
877:	

scanFormat$254:	; Deref £temporary1496 -> £temporary1495 £temporary1495 0
879:	

scanFormat$255:	; Assign floatPtr £temporary1496 -> £temporary1495
880:		mov t1088, [a1087]
881:		mov [bp + 57], t1088
883:	

scanFormat$256:	; Deref £temporary1497 -> floatPtr floatPtr 0
884:		mov a1089, [bp + 57]
886:	

scanFormat$257:	; PushFloat longDoubleValue
887:		fld qword [bp + 47]
889:	

scanFormat$258:	; PopFloat £temporary1497 -> floatPtr
890:		fstp dword [a1089]
892:	

scanFormat$259:	; Assign percent 0
893:		mov word [bp + 13], 0
895:	

scanFormat$260:	; Goto 327
896:		jmp scanFormat$327
898:	

scanFormat$261:	; Assign not 0
899:		mov word [bp + 57], 0
901:	

scanFormat$262:	; Increment index
902:		inc word [bp + 31]
904:	

scanFormat$263:	; BinaryAdd £temporary1503 format index
905:		mov a1090, [bp + 6]
906:		add a1090, [bp + 31]
908:	

scanFormat$264:	; Deref £temporary1502 -> £temporary1503 £temporary1503 0
910:	

scanFormat$265:	; NotEqual 268 £temporary1502 -> £temporary1503 94
911:		cmp byte [a1090], 94
912:		jne scanFormat$268
914:	

scanFormat$266:	; Assign not 1
915:		mov word [bp + 57], 1
917:	

scanFormat$267:	; Increment index
918:		inc word [bp + 31]
920:	

scanFormat$268:	; Assign startIndex index
921:		mov a1091, [bp + 31]
922:		mov [bp + 59], a1091
924:	

scanFormat$269:	; BinaryAdd £temporary1507 format index
925:		mov a1092, [bp + 6]
926:		add a1092, [bp + 31]
928:	

scanFormat$270:	; Deref £temporary1506 -> £temporary1507 £temporary1507 0
930:	

scanFormat$271:	; Equal 274 £temporary1506 -> £temporary1507 93
931:		cmp byte [a1092], 93
932:		je scanFormat$274
934:	

scanFormat$272:	; Increment index
935:		inc word [bp + 31]
937:	

scanFormat$273:	; Goto 269
938:		jmp scanFormat$269
940:	

scanFormat$274:	; BinarySubtract size index startIndex
941:		mov a1093, [bp + 31]
942:		sub a1093, [bp + 59]
943:		mov [bp + 61], a1093
945:	

scanFormat$275:	; BinaryAdd £temporary1512 format index
946:		mov a1094, [bp + 6]
947:		add a1094, [bp + 31]
949:	

scanFormat$276:	; Deref £temporary1511 -> £temporary1512 £temporary1512 0
951:	

scanFormat$277:	; Assign c £temporary1511 -> £temporary1512
952:		mov t1095, [a1094]
953:		mov [bp + 63], t1095
955:	

scanFormat$278:	; BinaryAdd £temporary1514 format index
956:		mov a1096, [bp + 6]
957:		add a1096, [bp + 31]
959:	

scanFormat$279:	; Deref £temporary1513 -> £temporary1514 £temporary1514 0
961:	

scanFormat$280:	; Assign £temporary1513 -> £temporary1514 0
962:		mov byte [a1096], 0
964:	

scanFormat$281:	; NotEqual 298 star 0
965:		cmp word [bp + 21], 0
966:		jne scanFormat$298
968:	

scanFormat$282:	; BinaryAdd arg_list arg_list 2
969:		add word [bp + 8], 2
971:	

scanFormat$283:	; BinarySubtract £temporary1518 arg_list 2
972:		mov a1097, [bp + 8]
973:		sub a1097, 2
975:	

scanFormat$284:	; IntegralToIntegral £temporary1519 £temporary1518
978:	

scanFormat$285:	; Deref £temporary1520 -> £temporary1519 £temporary1519 0
980:	

scanFormat$286:	; Assign string £temporary1520 -> £temporary1519
981:		mov t1098, [a1097]
982:		mov [bp + 64], t1098
984:	

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
986:	

scanFormat$288:	; Parameter 66 string 6
987:		mov a1099, [bp + 64]
988:		mov [bp + 72], a1099
990:	

scanFormat$289:	; BinaryAdd £temporary1522 format startIndex
991:		mov a1100, [bp + 6]
992:		add a1100, [bp + 59]
994:	

scanFormat$290:	; Deref £temporary1521 -> £temporary1522 £temporary1522 0
996:	

scanFormat$291:	; address £temporary1523 £temporary1521 -> £temporary1522
998:	

scanFormat$292:	; Parameter 66 £temporary1523 8
999:		mov [bp + 74], a1100
1001:	

scanFormat$293:	; Parameter 66 size 10
1002:		mov a1101, [bp + 61]
1003:		mov [bp + 76], a1101
1005:	

scanFormat$294:	; Parameter 66 not 12
1006:		mov a1102, [bp + 57]
1007:		mov [bp + 78], a1102
1009:	

scanFormat$295:	; Call 66 scanPattern 0
1010:		mov word [bp + 66], scanFormat$296
1011:		mov [bp + 68], bp
1012:		add bp, 66
1013:		jmp scanPattern
1015:	

scanFormat$296:	; PostCall 66
1017:	

scanFormat$297:	; Goto 308
1018:		jmp scanFormat$308
1020:	

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1022:	

scanFormat$299:	; Parameter 64 0 6
1023:		mov word [bp + 70], 0
1025:	

scanFormat$300:	; BinaryAdd £temporary1526 format startIndex
1026:		mov a1103, [bp + 6]
1027:		add a1103, [bp + 59]
1029:	

scanFormat$301:	; Deref £temporary1525 -> £temporary1526 £temporary1526 0
1031:	

scanFormat$302:	; address £temporary1527 £temporary1525 -> £temporary1526
1033:	

scanFormat$303:	; Parameter 64 £temporary1527 8
1034:		mov [bp + 72], a1103
1036:	

scanFormat$304:	; Parameter 64 size 10
1037:		mov a1104, [bp + 61]
1038:		mov [bp + 74], a1104
1040:	

scanFormat$305:	; Parameter 64 not 12
1041:		mov a1105, [bp + 57]
1042:		mov [bp + 76], a1105
1044:	

scanFormat$306:	; Call 64 scanPattern 0
1045:		mov word [bp + 64], scanFormat$307
1046:		mov [bp + 66], bp
1047:		add bp, 64
1048:		jmp scanPattern
1050:	

scanFormat$307:	; PostCall 64
1052:	

scanFormat$308:	; BinaryAdd £temporary1530 format index
1053:		mov a1106, [bp + 6]
1054:		add a1106, [bp + 31]
1056:	

scanFormat$309:	; Deref £temporary1529 -> £temporary1530 £temporary1530 0
1058:	

scanFormat$310:	; Assign £temporary1529 -> £temporary1530 c
1059:		mov a1107, [bp + 63]
1060:		mov [a1106], a1107
1062:	

scanFormat$311:	; Goto 327
1063:		jmp scanFormat$327
1065:	

scanFormat$312:	; BinaryAdd arg_list arg_list 2
1066:		add word [bp + 8], 2
1068:	

scanFormat$313:	; BinarySubtract £temporary1532 arg_list 2
1069:		mov a1108, [bp + 8]
1070:		sub a1108, 2
1072:	

scanFormat$314:	; IntegralToIntegral £temporary1533 £temporary1532
1075:	

scanFormat$315:	; Deref £temporary1534 -> £temporary1533 £temporary1533 0
1077:	

scanFormat$316:	; Assign charsPtr £temporary1534 -> £temporary1533
1078:		mov t1109, [a1108]
1079:		mov [bp + 35], t1109
1081:	

scanFormat$317:	; Deref £temporary1535 -> charsPtr charsPtr 0
1082:		mov a1110, [bp + 35]
1084:	

scanFormat$318:	; Assign £temporary1535 -> charsPtr g_inChars
1085:		mov a1111, [g_inChars]
1086:		mov [a1110], a1111
1088:	

scanFormat$319:	; Assign percent 0
1089:		mov word [bp + 13], 0
1091:	

scanFormat$320:	; Goto 327
1092:		jmp scanFormat$327
1094:	

scanFormat$321:	; NotEqual 327 c 37
1095:		cmp byte [bp + 10], 37
1096:		jne scanFormat$327
1098:	

scanFormat$322:	; Assign percent 1
1099:		mov word [bp + 13], 1
1101:	

scanFormat$323:	; Assign shortInt 0
1102:		mov word [bp + 15], 0
1104:	

scanFormat$324:	; Assign longIntOrDouble 0
1105:		mov word [bp + 17], 0
1107:	

scanFormat$325:	; Assign longDouble 0
1108:		mov word [bp + 19], 0
1110:	

scanFormat$326:	; Assign star 0
1111:		mov word [bp + 21], 0
1113:	

scanFormat$327:	; Increment index
1114:		inc word [bp + 31]
1116:	

scanFormat$328:	; Goto 8
1117:		jmp scanFormat$8
1119:	

scanFormat$329:	; SetReturnValue g_inCount
1120:		mov a1112, [g_inCount]
1122:	

scanFormat$330:	; Return g_inCount
1123:		mov t1113, [bp]
1124:		mov di, [bp + 4]
1125:		mov bp, [bp + 2]
1126:		jmp t1113
1128:	

scanFormat$331:	; FunctionEnd scanFormat
1:	

scanf:	; address £temporary1554 format
2:		mov t1114, bp
3:		add t1114, 6
5:	

scanf$1:	; IntegralToIntegral £temporary1555 £temporary1554
8:	

scanf$2:	; BinaryAdd arg_list £temporary1555 2
9:		add t1114, 2
10:		mov [di + 8], t1114
12:	

scanf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

scanf$4:	; Parameter 10 format 6
15:		mov a1115, [bp + 6]
16:		mov [di + 16], a1115
18:	

scanf$5:	; Parameter 10 arg_list 8
19:		mov a1116, [di + 8]
20:		mov [di + 18], a1116
22:	

scanf$6:	; Call 10 vscanf 0
23:		mov word [di + 10], scanf$7
24:		mov [di + 12], bp
25:		mov [di + 14], di
26:		add di, 10
27:		mov bp, di
28:		jmp vscanf
30:	

scanf$7:	; PostCall 10
32:	

scanf$8:	; GetReturnValue £temporary1557
37:	

scanf$9:	; SetReturnValue £temporary1557
39:	

scanf$10:	; Return £temporary1557
40:		mov t1119, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp t1119
45:	

scanf$11:	; FunctionEnd scanf
1:	

vscanf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

vscanf$1:	; Parameter 10 stdin 6
4:		mov a1120, [stdin]
5:		mov [bp + 16], a1120
7:	

vscanf$2:	; Parameter 10 format 8
8:		mov a1121, [bp + 6]
9:		mov [bp + 18], a1121
11:	

vscanf$3:	; Parameter 10 arg_list 10
12:		mov a1122, [bp + 8]
13:		mov [bp + 20], a1122
15:	

vscanf$4:	; Call 10 vfscanf 0
16:		mov word [bp + 10], vscanf$5
17:		mov [bp + 12], bp
18:		add bp, 10
19:		jmp vfscanf
21:	

vscanf$5:	; PostCall 10
23:	

vscanf$6:	; GetReturnValue £temporary1561
28:	

vscanf$7:	; SetReturnValue £temporary1561
30:	

vscanf$8:	; Return £temporary1561
31:		mov t1125, [bp]
32:		mov di, [bp + 4]
33:		mov bp, [bp + 2]
34:		jmp t1125
36:	

vscanf$9:	; FunctionEnd vscanf
1:	

fscanf:	; address £temporary1565 format
2:		mov t1126, bp
3:		add t1126, 8
5:	

fscanf$1:	; IntegralToIntegral £temporary1566 £temporary1565
8:	

fscanf$2:	; BinaryAdd arg_list £temporary1566 2
9:		add t1126, 2
10:		mov [di + 10], t1126
12:	

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

fscanf$4:	; Parameter 12 inStream 6
15:		mov a1127, [bp + 6]
16:		mov [di + 18], a1127
18:	

fscanf$5:	; Parameter 12 format 8
19:		mov a1128, [bp + 8]
20:		mov [di + 20], a1128
22:	

fscanf$6:	; Parameter 12 arg_list 10
23:		mov a1129, [di + 10]
24:		mov [di + 22], a1129
26:	

fscanf$7:	; Call 12 vfscanf 0
27:		mov word [di + 12], fscanf$8
28:		mov [di + 14], bp
29:		mov [di + 16], di
30:		add di, 12
31:		mov bp, di
32:		jmp vfscanf
34:	

fscanf$8:	; PostCall 12
36:	

fscanf$9:	; GetReturnValue £temporary1568
41:	

fscanf$10:	; SetReturnValue £temporary1568
43:	

fscanf$11:	; Return £temporary1568
44:		mov t1132, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t1132
49:	

fscanf$12:	; FunctionEnd fscanf
1:	

vfscanf:	; Assign g_inStatus 0
2:		mov word [g_inStatus], 0
4:	

vfscanf$1:	; IntegralToIntegral £temporary1573 inStream
5:		mov a1133, [bp + 6]
8:	

vfscanf$2:	; Assign g_inDevice £temporary1573
9:		mov [g_inDevice], a1133
11:	

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

vfscanf$4:	; Parameter 12 format 6
14:		mov a1134, [bp + 8]
15:		mov [bp + 18], a1134
17:	

vfscanf$5:	; Parameter 12 arg_list 8
18:		mov a1135, [bp + 10]
19:		mov [bp + 20], a1135
21:	

vfscanf$6:	; Call 12 scanFormat 0
22:		mov word [bp + 12], vfscanf$7
23:		mov [bp + 14], bp
24:		add bp, 12
25:		jmp scanFormat
27:	

vfscanf$7:	; PostCall 12
29:	

vfscanf$8:	; GetReturnValue £temporary1574
34:	

vfscanf$9:	; SetReturnValue £temporary1574
36:	

vfscanf$10:	; Return £temporary1574
37:		mov t1138, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp t1138
42:	

vfscanf$11:	; FunctionEnd vfscanf
1:	

sscanf:	; address £temporary1577 format
2:		mov t1139, bp
3:		add t1139, 8
5:	

sscanf$1:	; IntegralToIntegral £temporary1578 £temporary1577
8:	

sscanf$2:	; BinaryAdd arg_list £temporary1578 2
9:		add t1139, 2
10:		mov [di + 10], t1139
12:	

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

sscanf$4:	; Parameter 12 inString 6
15:		mov a1140, [bp + 6]
16:		mov [di + 18], a1140
18:	

sscanf$5:	; Parameter 12 format 8
19:		mov a1141, [bp + 8]
20:		mov [di + 20], a1141
22:	

sscanf$6:	; Parameter 12 arg_list 10
23:		mov a1142, [di + 10]
24:		mov [di + 22], a1142
26:	

sscanf$7:	; Call 12 vsscanf 0
27:		mov word [di + 12], sscanf$8
28:		mov [di + 14], bp
29:		mov [di + 16], di
30:		add di, 12
31:		mov bp, di
32:		jmp vsscanf
34:	

sscanf$8:	; PostCall 12
36:	

sscanf$9:	; GetReturnValue £temporary1580
41:	

sscanf$10:	; SetReturnValue £temporary1580
43:	

sscanf$11:	; Return £temporary1580
44:		mov t1145, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t1145
49:	

sscanf$12:	; FunctionEnd sscanf
1:	

vsscanf:	; Assign g_inStatus 1
2:		mov word [g_inStatus], 1
4:	

vsscanf$1:	; IntegralToIntegral £temporary1585 inString
5:		mov a1146, [bp + 6]
8:	

vsscanf$2:	; Assign g_inDevice £temporary1585
9:		mov [g_inDevice], a1146
11:	

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

vsscanf$4:	; Parameter 12 format 6
14:		mov a1147, [bp + 8]
15:		mov [bp + 18], a1147
17:	

vsscanf$5:	; Parameter 12 arg_list 8
18:		mov a1148, [bp + 10]
19:		mov [bp + 20], a1148
21:	

vsscanf$6:	; Call 12 scanFormat 0
22:		mov word [bp + 12], vsscanf$7
23:		mov [bp + 14], bp
24:		add bp, 12
25:		jmp scanFormat
27:	

vsscanf$7:	; PostCall 12
29:	

vsscanf$8:	; GetReturnValue £temporary1586
34:	

vsscanf$9:	; SetReturnValue £temporary1586
36:	

vsscanf$10:	; Return £temporary1586
37:		mov t1151, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp t1151
42:	

vsscanf$11:	; FunctionEnd vsscanf
