	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 14 229
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 14 229 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 19 55

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 time_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp time_test	; 3: 233 99 117

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 assert_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp assert_test	; 3: 233 59 140

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 malloc_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp malloc_test	; 3: 233 246 140

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 print_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp print_test	; 3: 233 131 145

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 limits_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp limits_test	; 3: 233 216 149

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 float_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp float_test	; 3: 233 132 152

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 setjmp_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp setjmp_test	; 3: 233 129 152

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 stdio_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp stdio_test	; 3: 233 47 154

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 string_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp string_test	; 3: 233 159 169

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 19 154

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 63 183

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 171 194

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 109 206

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 47 218

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 250 226

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [@10215$float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 89 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [@10219$float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 68 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [@10223$float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 47 3

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 28 3

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [@10231$float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 7 3

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [@10235$float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 242 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 223 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [@10243$float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 202 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [@10247$float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 181 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [@10251$float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 160 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [@10255$float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 139 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [@10261$float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 118 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [@10265$float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 97 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [@10271$float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 76 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [@10278$float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 55 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [@10283$float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 34 2

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [@10289$float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 13 2

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [@10295$float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 80 49

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [@10300$float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [@10302$float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 52 49

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [@10309$float8$2.0#]	; 4: 221 6 62 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 26 49

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [@10316$float8$minus2.0#]	; 4: 221 6 70 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 0 49

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [@10323$float8$2.0#]	; 4: 221 6 78 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 230 48

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [@10330$float8$minus2.0#]	; 4: 221 6 86 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 204 48

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 180 48

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [@10343$float8$2#]	; 4: 221 6 94 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 154 48

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [@10350$float8$minus2#]	; 4: 221 6 102 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 128 48

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [@10356$float8$minus1.0#]	; 4: 221 6 110 5

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [@10358$float8$minus1.0#]	; 4: 221 6 118 5

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 100 48

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [@10363$float8$minus2.0#]	; 4: 221 6 126 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [@10365$float8$minus4.0#]	; 4: 221 6 134 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 72 48

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

@10215$float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

@10219$float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

@10223$float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

@10231$float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

@10235$float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

@10243$float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

@10247$float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

@10251$float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10255$float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

@10261$float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@10265$float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@10271$float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@10278$float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

@10283$float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@10289$float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

@10295$float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10300$float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

@10302$float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

@10309$float8$2.0#:
x1342:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10316$float8$minus2.0#:
x1350:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10323$float8$2.0#:
x1358:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10330$float8$minus2.0#:
x1366:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10343$float8$2#:
x1374:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10350$float8$minus2#:
x1382:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10356$float8$minus1.0#:
x1390:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10358$float8$minus1.0#:
x1398:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10363$float8$minus2.0#:
x1406:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10365$float8$minus4.0#:
x1414:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1422:	mov word [bp + 20], @10410$string_3C25f3E0A#	; 5: 199 70 20 196 10

math_test_1$2:	; PushFloat x
x1427:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1430:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1433:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 172 5
x1438:	mov [bp + 16], bp	; 3: 137 110 16
x1441:	add bp, 14	; 3: 131 197 14
x1444:	mov di, bp	; 2: 137 239
x1446:	add di, 8	; 3: 131 199 8
x1449:	jmp printf	; 3: 233 88 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1452:	mov word [bp + 20], @10412$string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 202 10

math_test_1$8:	; PushFloat x
x1457:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1460:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1463:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1466:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1469:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 203 5
x1474:	mov [bp + 32], bp	; 3: 137 110 32
x1477:	add bp, 30	; 3: 131 197 30
x1480:	jmp sin	; 3: 233 192 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4632

math_test_1$16:	; Parameter 14 £temporary4632 16
x1483:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1486:	mov ax, [errno]	; 3: 161 230 10
x1489:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1492:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 231 5
x1497:	mov [bp + 16], bp	; 3: 137 110 16
x1500:	add bp, 14	; 3: 131 197 14
x1503:	mov di, bp	; 2: 137 239
x1505:	add di, 18	; 3: 131 199 18
x1508:	jmp printf	; 3: 233 29 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1511:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1517:	mov word [bp + 20], @10417$string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 232 10

math_test_1$23:	; PushFloat x
x1522:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1525:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1528:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1531:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1534:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 12 6
x1539:	mov [bp + 32], bp	; 3: 137 110 32
x1542:	add bp, 30	; 3: 131 197 30
x1545:	jmp cos	; 3: 233 240 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4634

math_test_1$31:	; Parameter 14 £temporary4634 16
x1548:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1551:	mov ax, [errno]	; 3: 161 230 10
x1554:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1557:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 40 6
x1562:	mov [bp + 16], bp	; 3: 137 110 16
x1565:	add bp, 14	; 3: 131 197 14
x1568:	mov di, bp	; 2: 137 239
x1570:	add di, 18	; 3: 131 199 18
x1573:	jmp printf	; 3: 233 220 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1576:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1582:	mov word [bp + 20], @10422$string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 4 11

math_test_1$38:	; PushFloat x
x1587:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1590:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1593:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1596:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1599:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 77 6
x1604:	mov [bp + 32], bp	; 3: 137 110 32
x1607:	add bp, 30	; 3: 131 197 30
x1610:	jmp tan	; 3: 233 169 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4636

math_test_1$46:	; Parameter 14 £temporary4636 16
x1613:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1616:	mov ax, [errno]	; 3: 161 230 10
x1619:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1622:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 105 6
x1627:	mov [bp + 16], bp	; 3: 137 110 16
x1630:	add bp, 14	; 3: 131 197 14
x1633:	mov di, bp	; 2: 137 239
x1635:	add di, 18	; 3: 131 199 18
x1638:	jmp printf	; 3: 233 155 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1641:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1647:	mov word [bp + 20], @10427$string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 32 11

math_test_1$53:	; PushFloat x
x1652:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1655:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1658:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1661:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1664:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 142 6
x1669:	mov [bp + 32], bp	; 3: 137 110 32
x1672:	add bp, 30	; 3: 131 197 30
x1675:	jmp asin	; 3: 233 195 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4638

math_test_1$61:	; Parameter 14 £temporary4638 16
x1678:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1681:	mov ax, [errno]	; 3: 161 230 10
x1684:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1687:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 170 6
x1692:	mov [bp + 16], bp	; 3: 137 110 16
x1695:	add bp, 14	; 3: 131 197 14
x1698:	mov di, bp	; 2: 137 239
x1700:	add di, 18	; 3: 131 199 18
x1703:	jmp printf	; 3: 233 90 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1706:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1712:	mov word [bp + 20], @10432$string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 61 11

math_test_1$68:	; PushFloat x
x1717:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1720:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1723:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1726:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1729:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 207 6
x1734:	mov [bp + 32], bp	; 3: 137 110 32
x1737:	add bp, 30	; 3: 131 197 30
x1740:	jmp acos	; 3: 233 85 42

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4640

math_test_1$76:	; Parameter 14 £temporary4640 16
x1743:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1746:	mov ax, [errno]	; 3: 161 230 10
x1749:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1752:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 235 6
x1757:	mov [bp + 16], bp	; 3: 137 110 16
x1760:	add bp, 14	; 3: 131 197 14
x1763:	mov di, bp	; 2: 137 239
x1765:	add di, 18	; 3: 131 199 18
x1768:	jmp printf	; 3: 233 25 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1771:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1777:	mov word [bp + 20], @10437$string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 90 11

math_test_1$83:	; PushFloat x
x1782:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1785:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1788:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1791:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1794:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 16 7
x1799:	mov [bp + 32], bp	; 3: 137 110 32
x1802:	add bp, 30	; 3: 131 197 30
x1805:	jmp atan	; 3: 233 131 40

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4642

math_test_1$91:	; Parameter 14 £temporary4642 16
x1808:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1811:	mov ax, [errno]	; 3: 161 230 10
x1814:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1817:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 44 7
x1822:	mov [bp + 16], bp	; 3: 137 110 16
x1825:	add bp, 14	; 3: 131 197 14
x1828:	mov di, bp	; 2: 137 239
x1830:	add di, 18	; 3: 131 199 18
x1833:	jmp printf	; 3: 233 216 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1836:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1842:	mov word [bp + 20], @10442$string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 119 11

math_test_1$98:	; PushFloat x
x1847:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1850:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1853:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1856:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1859:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 81 7
x1864:	mov [bp + 32], bp	; 3: 137 110 32
x1867:	add bp, 30	; 3: 131 197 30
x1870:	jmp exp	; 3: 233 243 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4644

math_test_1$106:	; Parameter 14 £temporary4644 16
x1873:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1876:	mov ax, [errno]	; 3: 161 230 10
x1879:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1882:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 109 7
x1887:	mov [bp + 16], bp	; 3: 137 110 16
x1890:	add bp, 14	; 3: 131 197 14
x1893:	mov di, bp	; 2: 137 239
x1895:	add di, 18	; 3: 131 199 18
x1898:	jmp printf	; 3: 233 151 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1901:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1907:	mov word [bp + 20], @10447$string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 147 11

math_test_1$113:	; PushFloat x
x1912:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1915:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1918:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1921:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1924:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 146 7
x1929:	mov [bp + 32], bp	; 3: 137 110 32
x1932:	add bp, 30	; 3: 131 197 30
x1935:	jmp log	; 3: 233 202 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4646

math_test_1$121:	; Parameter 14 £temporary4646 16
x1938:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1941:	mov ax, [errno]	; 3: 161 230 10
x1944:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1947:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 174 7
x1952:	mov [bp + 16], bp	; 3: 137 110 16
x1955:	add bp, 14	; 3: 131 197 14
x1958:	mov di, bp	; 2: 137 239
x1960:	add di, 18	; 3: 131 199 18
x1963:	jmp printf	; 3: 233 86 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1966:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1972:	mov word [bp + 20], @10452$string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 175 11

math_test_1$128:	; PushFloat x
x1977:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1980:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1983:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1986:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1989:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 211 7
x1994:	mov [bp + 32], bp	; 3: 137 110 32
x1997:	add bp, 30	; 3: 131 197 30
x2000:	jmp log10	; 3: 233 92 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4648

math_test_1$136:	; Parameter 14 £temporary4648 16
x2003:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x2006:	mov ax, [errno]	; 3: 161 230 10
x2009:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x2012:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 239 7
x2017:	mov [bp + 16], bp	; 3: 137 110 16
x2020:	add bp, 14	; 3: 131 197 14
x2023:	mov di, bp	; 2: 137 239
x2025:	add di, 18	; 3: 131 199 18
x2028:	jmp printf	; 3: 233 21 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x2031:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x2037:	mov word [bp + 20], @10457$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 205 11

math_test_1$143:	; PushFloat x
x2042:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x2045:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2048:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2051:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2054:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 20 8
x2059:	mov [bp + 32], bp	; 3: 137 110 32
x2062:	add bp, 30	; 3: 131 197 30
x2065:	jmp sinh	; 3: 233 218 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4650

math_test_1$151:	; Parameter 14 £temporary4650 16
x2068:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2071:	mov ax, [errno]	; 3: 161 230 10
x2074:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2077:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 48 8
x2082:	mov [bp + 16], bp	; 3: 137 110 16
x2085:	add bp, 14	; 3: 131 197 14
x2088:	mov di, bp	; 2: 137 239
x2090:	add di, 18	; 3: 131 199 18
x2093:	jmp printf	; 3: 233 212 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2096:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2102:	mov word [bp + 20], @10462$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 234 11

math_test_1$158:	; PushFloat x
x2107:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2110:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2113:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2116:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2119:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 85 8
x2124:	mov [bp + 32], bp	; 3: 137 110 32
x2127:	add bp, 30	; 3: 131 197 30
x2130:	jmp cosh	; 3: 233 234 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4652

math_test_1$166:	; Parameter 14 £temporary4652 16
x2133:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2136:	mov ax, [errno]	; 3: 161 230 10
x2139:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2142:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 113 8
x2147:	mov [bp + 16], bp	; 3: 137 110 16
x2150:	add bp, 14	; 3: 131 197 14
x2153:	mov di, bp	; 2: 137 239
x2155:	add di, 18	; 3: 131 199 18
x2158:	jmp printf	; 3: 233 147 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2161:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2167:	mov word [bp + 20], @10467$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 7 12

math_test_1$173:	; PushFloat x
x2172:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2175:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2178:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2181:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2184:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 150 8
x2189:	mov [bp + 32], bp	; 3: 137 110 32
x2192:	add bp, 30	; 3: 131 197 30
x2195:	jmp tanh	; 3: 233 250 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4654

math_test_1$181:	; Parameter 14 £temporary4654 16
x2198:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2201:	mov ax, [errno]	; 3: 161 230 10
x2204:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2207:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 178 8
x2212:	mov [bp + 16], bp	; 3: 137 110 16
x2215:	add bp, 14	; 3: 131 197 14
x2218:	mov di, bp	; 2: 137 239
x2220:	add di, 18	; 3: 131 199 18
x2223:	jmp printf	; 3: 233 82 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2226:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2232:	mov word [bp + 20], @10472$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 36 12

math_test_1$188:	; PushFloat x
x2237:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2240:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2243:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2246:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2249:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 215 8
x2254:	mov [bp + 32], bp	; 3: 137 110 32
x2257:	add bp, 30	; 3: 131 197 30
x2260:	jmp sqrt	; 3: 233 56 38

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4656

math_test_1$196:	; Parameter 14 £temporary4656 16
x2263:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2266:	mov ax, [errno]	; 3: 161 230 10
x2269:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2272:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 243 8
x2277:	mov [bp + 16], bp	; 3: 137 110 16
x2280:	add bp, 14	; 3: 131 197 14
x2283:	mov di, bp	; 2: 137 239
x2285:	add di, 18	; 3: 131 199 18
x2288:	jmp printf	; 3: 233 17 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2291:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2297:	mov word [bp + 20], @10477$string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 65 12

math_test_1$203:	; PushFloat x
x2302:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2305:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2308:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2311:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2314:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 24 9
x2319:	mov [bp + 32], bp	; 3: 137 110 32
x2322:	add bp, 30	; 3: 131 197 30
x2325:	jmp floor	; 3: 233 170 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4658

math_test_1$211:	; Parameter 14 £temporary4658 16
x2328:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2331:	mov ax, [errno]	; 3: 161 230 10
x2334:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2337:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 52 9
x2342:	mov [bp + 16], bp	; 3: 137 110 16
x2345:	add bp, 14	; 3: 131 197 14
x2348:	mov di, bp	; 2: 137 239
x2350:	add di, 18	; 3: 131 199 18
x2353:	jmp printf	; 3: 233 208 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2356:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2362:	mov word [bp + 20], @10482$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 95 12

math_test_1$218:	; PushFloat x
x2367:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2370:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2373:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2376:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2379:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 89 9
x2384:	mov [bp + 32], bp	; 3: 137 110 32
x2387:	add bp, 30	; 3: 131 197 30
x2390:	jmp ceil	; 3: 233 183 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4660

math_test_1$226:	; Parameter 14 £temporary4660 16
x2393:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2396:	mov ax, [errno]	; 3: 161 230 10
x2399:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2402:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 117 9
x2407:	mov [bp + 16], bp	; 3: 137 110 16
x2410:	add bp, 14	; 3: 131 197 14
x2413:	mov di, bp	; 2: 137 239
x2415:	add di, 18	; 3: 131 199 18
x2418:	jmp printf	; 3: 233 143 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2421:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2427:	mov word [bp + 20], @10487$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 124 12

math_test_1$233:	; PushFloat x
x2432:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2435:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2438:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2441:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2444:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 154 9
x2449:	mov [bp + 32], bp	; 3: 137 110 32
x2452:	add bp, 30	; 3: 131 197 30
x2455:	jmp fabs	; 3: 233 99 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4662

math_test_1$241:	; Parameter 14 £temporary4662 16
x2458:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2461:	mov ax, [errno]	; 3: 161 230 10
x2464:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2467:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 182 9
x2472:	mov [bp + 16], bp	; 3: 137 110 16
x2475:	add bp, 14	; 3: 131 197 14
x2478:	mov di, bp	; 2: 137 239
x2480:	add di, 18	; 3: 131 199 18
x2483:	jmp printf	; 3: 233 78 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2486:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$246:	; Assign j 0
x2492:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2497:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2500:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4664 j
x2503:	mov si, bp	; 2: 137 238
x2505:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4664 14
x2508:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2511:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 221 9
x2516:	mov [bp + 18], bp	; 3: 137 110 18
x2519:	add bp, 16	; 3: 131 197 16
x2522:	jmp frexp	; 3: 233 244 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4665

math_test_1$255:	; PopFloat z
x2525:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2528:	mov word [bp + 30], @10498$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 153 12

math_test_1$258:	; PushFloat x
x2533:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2536:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2539:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2542:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2545:	mov ax, [bp + 14]	; 3: 139 70 14
x2548:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2551:	mov ax, [errno]	; 3: 161 230 10
x2554:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2557:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 16 10
x2562:	mov [bp + 26], bp	; 3: 137 110 26
x2565:	add bp, 24	; 3: 131 197 24
x2568:	mov di, bp	; 2: 137 239
x2570:	add di, 20	; 3: 131 199 20
x2573:	jmp printf	; 3: 233 244 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2576:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2581:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2583:	mov word [bp + 30], @10503$string_Error20message3A#	; 5: 199 70 30 191 12

math_test_1$269:	; Call 24 perror 0
x2588:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 42 10
x2593:	mov [bp + 26], bp	; 3: 137 110 26
x2596:	add bp, 24	; 3: 131 197 24
x2599:	jmp perror	; 3: 233 171 41

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2602:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$272:	; PushZero
x2608:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2610:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2613:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2616:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4669 w
x2619:	mov si, bp	; 2: 137 238
x2621:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4669 14
x2624:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2627:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 81 10
x2632:	mov [bp + 24], bp	; 3: 137 110 24
x2635:	add bp, 22	; 3: 131 197 22
x2638:	jmp modf	; 3: 233 30 42

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4670

math_test_1$282:	; PopFloat z
x2641:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2644:	mov word [bp + 36], @10513$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 206 12

math_test_1$285:	; PushFloat x
x2649:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2652:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2655:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2658:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2661:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2664:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2667:	mov ax, [errno]	; 3: 161 230 10
x2670:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2673:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 132 10
x2678:	mov [bp + 32], bp	; 3: 137 110 32
x2681:	add bp, 30	; 3: 131 197 30
x2684:	mov di, bp	; 2: 137 239
x2686:	add di, 26	; 3: 131 199 26
x2689:	jmp printf	; 3: 233 128 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2692:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2697:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2699:	mov word [bp + 36], @10518$string_Error20message3A#	; 5: 199 70 36 243 12

math_test_1$297:	; Call 30 perror 0
x2704:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 158 10
x2709:	mov [bp + 32], bp	; 3: 137 110 32
x2712:	add bp, 30	; 3: 131 197 30
x2715:	jmp perror	; 3: 233 55 41

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2718:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2724:	mov word [bp + 20], @10522$string_0A#	; 5: 199 70 20 2 13

math_test_1$302:	; Call 14 printf 0
x2729:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 185 10
x2734:	mov [bp + 16], bp	; 3: 137 110 16
x2737:	add bp, 14	; 3: 131 197 14
x2740:	mov di, bp	; 2: 137 239
x2742:	jmp printf	; 3: 233 75 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2745:	mov ax, [bp]	; 3: 139 70 0
x2748:	mov di, [bp + 4]	; 3: 139 126 4
x2751:	mov bp, [bp + 2]	; 3: 139 110 2
x2754:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

@10410$string_3C25f3E0A#:
x2756:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

@10412$string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2762:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2790:	dw 0	; 2: 0 0

@10417$string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2792:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10422$string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2820:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10427$string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2848:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10432$string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2877:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10437$string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2906:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10442$string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2935:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10447$string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2963:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10452$string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2991:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10457$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x3021:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10462$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3050:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10467$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3079:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10472$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3108:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10477$string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3137:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10482$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3167:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10487$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3196:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10498$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3225:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10503$string_Error20message3A#:
x3263:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10513$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3278:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10518$string_Error20message3A#:
x3315:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10522$string_0A#:
x3330:	db 10, 0	; 2: 10 0

printf:	; address £temporary2202 format
x3332:	mov si, bp	; 2: 137 238
x3334:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2203 £temporary2202

printf$2:	; BinaryAdd arg_list £temporary2203 2
x3337:	add si, 2	; 3: 131 198 2
x3340:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3343:	mov ax, [bp + 6]	; 3: 139 70 6
x3346:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3349:	mov ax, [di + 8]	; 3: 139 69 8
x3352:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3355:	mov word [di + 10], printf$7	; 5: 199 69 10 46 13
x3360:	mov [di + 12], bp	; 3: 137 109 12
x3363:	mov [di + 14], di	; 3: 137 125 14
x3366:	add di, 10	; 3: 131 199 10
x3369:	mov bp, di	; 2: 137 253
x3371:	nop	; 1: 144
x3372:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2205

printf$9:	; SetReturnValue £temporary2205

printf$10:	; Return £temporary2205
x3374:	mov ax, [bp]	; 3: 139 70 0
x3377:	mov di, [bp + 4]	; 3: 139 126 4
x3380:	mov bp, [bp + 2]	; 3: 139 110 2
x3383:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3385:	mov ax, [stdout]	; 3: 161 100 13
x3388:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3391:	mov ax, [bp + 6]	; 3: 139 70 6
x3394:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3397:	mov ax, [bp + 8]	; 3: 139 70 8
x3400:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3403:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 89 13
x3408:	mov [bp + 12], bp	; 3: 137 110 12
x3411:	add bp, 10	; 3: 131 197 10
x3414:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2209

vprintf$7:	; SetReturnValue £temporary2209

vprintf$8:	; Return £temporary2209
x3417:	mov ax, [bp]	; 3: 139 70 0
x3420:	mov di, [bp + 4]	; 3: 139 126 4
x3423:	mov bp, [bp + 2]	; 3: 139 110 2
x3426:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3428:	dw g_fileArray + 29	; 2: 131 13

g_fileArray:
x3430:	dw 1	; 2: 1 0
x3432:	dw 0	; 2: 0 0
x3434:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3459:	dw 1	; 2: 1 0
x3461:	dw 1	; 2: 1 0
x3463:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3488:	dw 1	; 2: 1 0
x3490:	dw 2	; 2: 2 0
x3492:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3517:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x4010:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2221 outStream
x4016:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2221
x4019:	mov [g_outDevice], ax	; 3: 163 221 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x4022:	mov ax, [bp + 8]	; 3: 139 70 8
x4025:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x4028:	mov ax, [bp + 10]	; 3: 139 70 10
x4031:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x4034:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 208 15
x4039:	mov [bp + 14], bp	; 3: 137 110 14
x4042:	add bp, 12	; 3: 131 197 12
x4045:	nop	; 1: 144
x4046:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2222

vfprintf$9:	; SetReturnValue £temporary2222

vfprintf$10:	; Return £temporary2222
x4048:	mov ax, [bp]	; 3: 139 70 0
x4051:	mov di, [bp + 4]	; 3: 139 126 4
x4054:	mov bp, [bp + 2]	; 3: 139 110 2
x4057:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x4059:	db 0, 0	; 2: 0 0

g_outDevice:
x4061:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4063:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4068:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4073:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4078:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4083:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4088:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4093:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4098:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4103:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4108:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4113:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4118:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4123:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4128:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4133:	mov word [g_outChars], 0	; 6: 199 6 55 21 0 0

printFormat$15:	; Assign index 0
x4139:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2053 format index
x4144:	mov si, [bp + 6]	; 3: 139 118 6
x4147:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2052 -> £temporary2053 £temporary2053 0

printFormat$18:	; Equal 284 £temporary2052 -> £temporary2053 0
x4150:	cmp byte [si], 0	; 3: 128 60 0
x4153:	je printFormat$284	; 4: 15 132 212 4

printFormat$19:	; BinaryAdd £temporary2057 format index
x4157:	mov si, [bp + 6]	; 3: 139 118 6
x4160:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2056 -> £temporary2057 £temporary2057 0

printFormat$21:	; Assign c £temporary2056 -> £temporary2057
x4163:	mov al, [si]	; 2: 138 4
x4165:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 262 percent 0
x4168:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4172:	je printFormat$262	; 4: 15 132 89 4

printFormat$23:	; Case 52 c 43
x4176:	mov al, [bp + 40]	; 3: 138 70 40
x4179:	cmp al, 43	; 2: 60 43
x4181:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4185:	cmp al, 45	; 2: 60 45
x4187:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4191:	cmp al, 32	; 2: 60 32
x4193:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4197:	cmp al, 48	; 2: 60 48
x4199:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4203:	cmp al, 35	; 2: 60 35
x4205:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4209:	cmp al, 46	; 2: 60 46
x4211:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4215:	cmp al, 42	; 2: 60 42
x4217:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4221:	cmp al, 104	; 2: 60 104
x4223:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4227:	cmp al, 108	; 2: 60 108
x4229:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4233:	cmp al, 76	; 2: 60 76
x4235:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4239:	cmp al, 37	; 2: 60 37
x4241:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4245:	cmp al, 110	; 2: 60 110
x4247:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4251:	cmp al, 112	; 2: 60 112
x4253:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4257:	cmp al, 71	; 2: 60 71
x4259:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4263:	cmp al, 103	; 2: 60 103
x4265:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4269:	cmp al, 69	; 2: 60 69
x4271:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4275:	cmp al, 101	; 2: 60 101
x4277:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4281:	cmp al, 102	; 2: 60 102
x4283:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4287:	cmp al, 115	; 2: 60 115
x4289:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4293:	cmp al, 99	; 2: 60 99
x4295:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4297:	cmp al, 88	; 2: 60 88
x4299:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4301:	cmp al, 120	; 2: 60 120
x4303:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4305:	cmp al, 111	; 2: 60 111
x4307:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4309:	cmp al, 98	; 2: 60 98
x4311:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4313:	cmp al, 117	; 2: 60 117
x4315:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4317:	cmp al, 100	; 2: 60 100
x4319:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4321:	cmp al, 105	; 2: 60 105
x4323:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4325:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4328:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 282
x4333:	jmp printFormat$282	; 3: 233 27 4

printFormat$54:	; Assign minus 1
x4336:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 282
x4341:	jmp printFormat$282	; 3: 233 19 4

printFormat$56:	; Assign space 1
x4344:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 282
x4349:	jmp printFormat$282	; 3: 233 11 4

printFormat$58:	; Assign zero 1
x4352:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 282
x4357:	jmp printFormat$282	; 3: 233 3 4

printFormat$60:	; Assign grid 1
x4360:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 282
x4365:	jmp printFormat$282	; 3: 233 251 3

printFormat$62:	; Assign period 1
x4368:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 282
x4373:	jmp printFormat$282	; 3: 233 243 3

printFormat$64:	; NotEqual 67 period 0
x4376:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4380:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4382:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 282
x4387:	jmp printFormat$282	; 3: 233 229 3

printFormat$67:	; Assign precision -1
x4390:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 282
x4395:	jmp printFormat$282	; 3: 233 221 3

printFormat$69:	; Assign shortInt 1
x4398:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 282
x4403:	jmp printFormat$282	; 3: 233 213 3

printFormat$71:	; Assign longInt 1
x4406:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 282
x4411:	jmp printFormat$282	; 3: 233 205 3

printFormat$73:	; Assign longDouble 1
x4414:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 282
x4419:	jmp printFormat$282	; 3: 233 197 3

printFormat$75:	; Equal 107 minus 0
x4422:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4426:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4430:	mov ax, [g_outChars]	; 3: 161 55 21
x4433:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2061 format index
x4436:	mov si, [bp + 6]	; 3: 139 118 6
x4439:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2060 -> £temporary2061 £temporary2061 0

printFormat$80:	; address £temporary2062 £temporary2060 -> £temporary2061

printFormat$81:	; Parameter 43 £temporary2062 6
x4442:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4445:	mov ax, [bp + 8]	; 3: 139 70 8
x4448:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4451:	mov ax, [bp + 18]	; 3: 139 70 18
x4454:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4457:	mov ax, [bp + 22]	; 3: 139 70 22
x4460:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4463:	mov ax, [bp + 26]	; 3: 139 70 26
x4466:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2063 width
x4469:	mov si, bp	; 2: 137 238
x4471:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2063 16
x4474:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4477:	mov ax, [bp + 14]	; 3: 139 70 14
x4480:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4483:	mov ax, [bp + 34]	; 3: 139 70 34
x4486:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4489:	mov ax, [bp + 36]	; 3: 139 70 36
x4492:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4495:	mov ax, [bp + 38]	; 3: 139 70 38
x4498:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4501:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4506:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4511:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 173 17
x4516:	mov [bp + 45], bp	; 3: 137 110 45
x4519:	add bp, 43	; 3: 131 197 43
x4522:	jmp printArgument	; 3: 233 142 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2064

printFormat$97:	; Assign arg_list £temporary2064
x4525:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4528:	mov ax, [g_outChars]	; 3: 161 55 21
x4531:	sub ax, [bp + 41]	; 3: 43 70 41
x4534:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2066 field
x4537:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4540:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2066 width
x4543:	cmp ax, [bp + 12]	; 3: 59 70 12
x4546:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4550:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4554:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 216 17
x4559:	mov [bp + 47], bp	; 3: 137 110 47
x4562:	add bp, 45	; 3: 131 197 45
x4565:	jmp printChar	; 3: 233 118 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4568:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4570:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4574:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4578:	mov ax, [g_outChars]	; 3: 161 55 21
x4581:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4584:	mov ax, [g_outStatus]	; 3: 161 219 15
x4587:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4590:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4595:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2071 format index
x4601:	mov si, [bp + 6]	; 3: 139 118 6
x4604:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2070 -> £temporary2071 £temporary2071 0

printFormat$115:	; address £temporary2072 £temporary2070 -> £temporary2071

printFormat$116:	; Parameter 47 £temporary2072 6
x4607:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4610:	mov ax, [bp + 8]	; 3: 139 70 8
x4613:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4616:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4621:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4626:	mov ax, [bp + 26]	; 3: 139 70 26
x4629:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2073 width
x4632:	mov si, bp	; 2: 137 238
x4634:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2073 16
x4637:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4640:	mov ax, [bp + 14]	; 3: 139 70 14
x4643:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4646:	mov ax, [bp + 34]	; 3: 139 70 34
x4649:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4652:	mov ax, [bp + 36]	; 3: 139 70 36
x4655:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4658:	mov ax, [bp + 38]	; 3: 139 70 38
x4661:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4664:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2074 negative
x4669:	mov si, bp	; 2: 137 238
x4671:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2074 28
x4674:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4677:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 83 18
x4682:	mov [bp + 49], bp	; 3: 137 110 49
x4685:	add bp, 47	; 3: 131 197 47
x4688:	jmp printArgument	; 3: 233 232 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4691:	mov ax, [bp + 43]	; 3: 139 70 43
x4694:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4697:	mov ax, [g_outChars]	; 3: 161 55 21
x4700:	sub ax, [bp + 41]	; 3: 43 70 41
x4703:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4706:	mov ax, [bp + 41]	; 3: 139 70 41
x4709:	mov [g_outChars], ax	; 3: 163 55 21

printFormat$135:	; Equal 142 negative 0
x4712:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4716:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4718:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4722:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 128 18
x4727:	mov [bp + 51], bp	; 3: 137 110 51
x4730:	add bp, 49	; 3: 131 197 49
x4733:	jmp printChar	; 3: 233 206 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4736:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4739:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4741:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4745:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4747:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4751:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 157 18
x4756:	mov [bp + 51], bp	; 3: 137 110 51
x4759:	add bp, 49	; 3: 131 197 49
x4762:	jmp printChar	; 3: 233 177 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4765:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4768:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4770:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4774:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4776:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4780:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 186 18
x4785:	mov [bp + 51], bp	; 3: 137 110 51
x4788:	add bp, 49	; 3: 131 197 49
x4791:	jmp printChar	; 3: 233 148 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4794:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2086 field
x4797:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4800:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2086 width
x4803:	cmp ax, [bp + 12]	; 3: 59 70 12
x4806:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4808:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4812:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 218 18
x4817:	mov [bp + 51], bp	; 3: 137 110 51
x4820:	add bp, 49	; 3: 131 197 49
x4823:	jmp printChar	; 3: 233 116 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4826:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2091 format index
x4828:	mov si, [bp + 6]	; 3: 139 118 6
x4831:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2090 -> £temporary2091 £temporary2091 0

printFormat$166:	; address £temporary2092 £temporary2090 -> £temporary2091

printFormat$167:	; Parameter 49 £temporary2092 6
x4834:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4837:	mov ax, [bp + 8]	; 3: 139 70 8
x4840:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4843:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4848:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4853:	mov ax, [bp + 26]	; 3: 139 70 26
x4856:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4859:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4864:	mov ax, [bp + 14]	; 3: 139 70 14
x4867:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4870:	mov ax, [bp + 34]	; 3: 139 70 34
x4873:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4876:	mov ax, [bp + 36]	; 3: 139 70 36
x4879:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4882:	mov ax, [bp + 38]	; 3: 139 70 38
x4885:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4888:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4893:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4898:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 48 19
x4903:	mov [bp + 51], bp	; 3: 137 110 51
x4906:	add bp, 49	; 3: 131 197 49
x4909:	jmp printArgument	; 3: 233 11 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2093

printFormat$182:	; Assign arg_list £temporary2093
x4912:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4915:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4918:	mov ax, [g_outChars]	; 3: 161 55 21
x4921:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4924:	mov ax, [g_outStatus]	; 3: 161 219 15
x4927:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4930:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2095 format index
x4936:	mov si, [bp + 6]	; 3: 139 118 6
x4939:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2094 -> £temporary2095 £temporary2095 0

printFormat$190:	; address £temporary2096 £temporary2094 -> £temporary2095

printFormat$191:	; Parameter 45 £temporary2096 6
x4942:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4945:	mov ax, [bp + 8]	; 3: 139 70 8
x4948:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4951:	mov ax, [bp + 18]	; 3: 139 70 18
x4954:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4957:	mov ax, [bp + 22]	; 3: 139 70 22
x4960:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4963:	mov ax, [bp + 26]	; 3: 139 70 26
x4966:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2097 width
x4969:	mov si, bp	; 2: 137 238
x4971:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2097 16
x4974:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4977:	mov ax, [bp + 14]	; 3: 139 70 14
x4980:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4983:	mov ax, [bp + 34]	; 3: 139 70 34
x4986:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4989:	mov ax, [bp + 36]	; 3: 139 70 36
x4992:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4995:	mov ax, [bp + 38]	; 3: 139 70 38
x4998:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x5001:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x5006:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x5011:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 161 19
x5016:	mov [bp + 47], bp	; 3: 137 110 47
x5019:	add bp, 45	; 3: 131 197 45
x5022:	jmp printArgument	; 3: 233 154 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x5025:	mov ax, [bp + 43]	; 3: 139 70 43
x5028:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x5031:	mov ax, [g_outChars]	; 3: 161 55 21
x5034:	sub ax, [bp + 41]	; 3: 43 70 41
x5037:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x5040:	mov ax, [bp + 41]	; 3: 139 70 41
x5043:	mov [g_outChars], ax	; 3: 163 55 21

printFormat$209:	; Assign £temporary2100 field
x5046:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x5049:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2100 width
x5052:	cmp ax, [bp + 12]	; 3: 59 70 12
x5055:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x5057:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x5061:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 211 19
x5066:	mov [bp + 49], bp	; 3: 137 110 49
x5069:	add bp, 47	; 3: 131 197 47
x5072:	jmp printChar	; 3: 233 123 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5075:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2105 format index
x5077:	mov si, [bp + 6]	; 3: 139 118 6
x5080:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2104 -> £temporary2105 £temporary2105 0

printFormat$220:	; address £temporary2106 £temporary2104 -> £temporary2105

printFormat$221:	; Parameter 47 £temporary2106 6
x5083:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5086:	mov ax, [bp + 8]	; 3: 139 70 8
x5089:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5092:	mov ax, [bp + 18]	; 3: 139 70 18
x5095:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5098:	mov ax, [bp + 22]	; 3: 139 70 22
x5101:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5104:	mov ax, [bp + 26]	; 3: 139 70 26
x5107:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5110:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5115:	mov ax, [bp + 14]	; 3: 139 70 14
x5118:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5121:	mov ax, [bp + 34]	; 3: 139 70 34
x5124:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5127:	mov ax, [bp + 36]	; 3: 139 70 36
x5130:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5133:	mov ax, [bp + 38]	; 3: 139 70 38
x5136:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5139:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5144:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5149:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 43 20
x5154:	mov [bp + 49], bp	; 3: 137 110 49
x5157:	add bp, 47	; 3: 131 197 47
x5160:	jmp printArgument	; 3: 233 16 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2107

printFormat$236:	; Assign arg_list £temporary2107
x5163:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5166:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 282
x5171:	jmp printFormat$282	; 3: 233 213 0

printFormat$239:	; Assign value 0
x5174:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2110 c
x5179:	mov al, [bp + 40]	; 3: 138 70 40
x5182:	and ax, 255	; 3: 37 255 0
x5185:	cmp al, 0	; 2: 60 0
x5187:	jge printFormat$242	; 2: 125 4
x5189:	neg al	; 2: 246 216
x5191:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2110 6
x5193:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5196:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 90 20
x5201:	mov [bp + 45], bp	; 3: 137 110 45
x5204:	add bp, 43	; 3: 131 197 43
x5207:	jmp isdigit	; 3: 233 18 23

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2111

printFormat$246:	; Equal 256 £temporary2111 0
x5210:	cmp bx, 0	; 3: 131 251 0
x5213:	je printFormat$256	; 2: 116 49

printFormat$247:	; SignedMultiply £temporary2112 value 10
x5215:	mov ax, [bp + 41]	; 3: 139 70 41
x5218:	xor dx, dx	; 2: 49 210
x5220:	imul word [@4839$int2$10#]	; 4: 247 46 57 21

printFormat$248:	; BinarySubtract £temporary2113 c 48
x5224:	mov bl, [bp + 40]	; 3: 138 94 40
x5227:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2114 £temporary2113
x5230:	and bx, 255	; 4: 129 227 255 0
x5234:	cmp bl, 0	; 3: 128 251 0
x5237:	jge printFormat$250	; 2: 125 4
x5239:	neg bl	; 2: 246 219
x5241:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2112 £temporary2114
x5243:	add ax, bx	; 2: 1 216
x5245:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5248:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; BinaryAdd £temporary2118 format index
x5251:	mov si, [bp + 6]	; 3: 139 118 6
x5254:	add si, [bp + 10]	; 3: 3 118 10

printFormat$253:	; Deref £temporary2117 -> £temporary2118 £temporary2118 0

printFormat$254:	; Assign c £temporary2117 -> £temporary2118
x5257:	mov al, [si]	; 2: 138 4
x5259:	mov [bp + 40], al	; 3: 136 70 40

printFormat$255:	; Goto 240
x5262:	jmp printFormat$240	; 2: 235 171

printFormat$256:	; Decrement index
x5264:	dec word [bp + 10]	; 3: 255 78 10

printFormat$257:	; NotEqual 260 period 0
x5267:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5271:	jne printFormat$260	; 2: 117 8

printFormat$258:	; Assign width value
x5273:	mov ax, [bp + 41]	; 3: 139 70 41
x5276:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$259:	; Goto 282
x5279:	jmp printFormat$282	; 2: 235 106

printFormat$260:	; Assign precision value
x5281:	mov ax, [bp + 41]	; 3: 139 70 41
x5284:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$261:	; Goto 282
x5287:	jmp printFormat$282	; 2: 235 98

printFormat$262:	; NotEqual 278 c 37
x5289:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5293:	jne printFormat$278	; 2: 117 72

printFormat$263:	; Assign percent 1
x5295:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$264:	; Assign plus 0
x5300:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$265:	; Assign minus 0
x5305:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$266:	; Assign space 0
x5310:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$267:	; Assign zero 0
x5315:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$268:	; Assign grid 0
x5320:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$269:	; Assign widthStar 0
x5325:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$270:	; Assign period 0
x5330:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$271:	; Assign precisionStar 0
x5335:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$272:	; Assign shortInt 0
x5340:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$273:	; Assign longInt 0
x5345:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$274:	; Assign longDouble 0
x5350:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$275:	; Assign width 0
x5355:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$276:	; Assign precision 0
x5360:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$277:	; Goto 282
x5365:	jmp printFormat$282	; 2: 235 20

printFormat$278:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$279:	; Parameter 41 c 6
x5367:	mov al, [bp + 40]	; 3: 138 70 40
x5370:	mov [bp + 47], al	; 3: 136 70 47

printFormat$280:	; Call 41 printChar 0
x5373:	mov word [bp + 41], printFormat$281	; 5: 199 70 41 11 21
x5378:	mov [bp + 43], bp	; 3: 137 110 43
x5381:	add bp, 41	; 3: 131 197 41
x5384:	jmp printChar	; 3: 233 67 7

printFormat$281:	; PostCall 41

printFormat$282:	; Increment index
x5387:	inc word [bp + 10]	; 3: 255 70 10

printFormat$283:	; Goto 16
x5390:	jmp printFormat$16	; 3: 233 31 251

printFormat$284:	; NotEqual 290 g_outStatus 1
x5393:	cmp word [g_outStatus], 1	; 5: 131 62 219 15 1
x5398:	jne printFormat$290	; 2: 117 16

printFormat$285:	; IntegralToIntegral £temporary2127 g_outDevice
x5400:	mov ax, [g_outDevice]	; 3: 161 221 15

printFormat$286:	; Assign outString £temporary2127
x5403:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$287:	; BinaryAdd £temporary2129 outString g_outChars
x5406:	mov si, [bp + 40]	; 3: 139 118 40
x5409:	add si, [g_outChars]	; 4: 3 54 55 21

printFormat$288:	; Deref £temporary2128 -> £temporary2129 £temporary2129 0

printFormat$289:	; Assign £temporary2128 -> £temporary2129 0
x5413:	mov byte [si], 0	; 3: 198 4 0

printFormat$290:	; SetReturnValue g_outChars
x5416:	mov bx, [g_outChars]	; 4: 139 30 55 21

printFormat$291:	; Return g_outChars
x5420:	mov ax, [bp]	; 3: 139 70 0
x5423:	mov di, [bp + 4]	; 3: 139 126 4
x5426:	mov bp, [bp + 2]	; 3: 139 110 2
x5429:	jmp ax	; 2: 255 224

printFormat$292:	; FunctionEnd printFormat

g_outChars:
x5431:	db 0, 0	; 2: 0 0

@4839$int2$10#:
x5433:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary1825 -> format format 0
x5435:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary1825 -> format
x5438:	mov al, [si]	; 2: 138 4
x5440:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5443:	mov al, [bp + 30]	; 3: 138 70 30
x5446:	cmp al, 100	; 2: 60 100
x5448:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5450:	cmp al, 105	; 2: 60 105
x5452:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5454:	cmp al, 99	; 2: 60 99
x5456:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5460:	cmp al, 115	; 2: 60 115
x5462:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5466:	cmp al, 88	; 2: 60 88
x5468:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5472:	cmp al, 120	; 2: 60 120
x5474:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5478:	cmp al, 98	; 2: 60 98
x5480:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5484:	cmp al, 111	; 2: 60 111
x5486:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5490:	cmp al, 117	; 2: 60 117
x5492:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5496:	cmp al, 71	; 2: 60 71
x5498:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5502:	cmp al, 103	; 2: 60 103
x5504:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5508:	cmp al, 69	; 2: 60 69
x5510:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5514:	cmp al, 101	; 2: 60 101
x5516:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5520:	cmp al, 102	; 2: 60 102
x5522:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5526:	cmp al, 112	; 2: 60 112
x5528:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5532:	cmp al, 110	; 2: 60 110
x5534:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5538:	cmp al, 37	; 2: 60 37
x5540:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5544:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5547:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5551:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5553:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary1827 arg_list 2
x5557:	mov si, [bp + 8]	; 3: 139 118 8
x5560:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary1828 £temporary1827

printArgument$25:	; Deref £temporary1829 -> £temporary1828 £temporary1828 0

printArgument$26:	; IntegralToIntegral £temporary1830 £temporary1829 -> £temporary1828
x5563:	mov ax, [si]	; 2: 139 4
x5565:	cmp ax, 0	; 3: 131 248 0
x5568:	jge printArgument$27	; 2: 125 4
x5570:	neg ax	; 2: 247 216
x5572:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary1831 £temporary1830
x5574:	and eax, 255	; 6: 102 37 255 0 0 0
x5580:	cmp al, 0	; 2: 60 0
x5582:	jge printArgument$28	; 2: 125 5
x5584:	neg al	; 2: 246 216
x5586:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary1831
x5589:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5593:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5595:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5599:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5601:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary1833 arg_list 4
x5605:	mov si, [bp + 8]	; 3: 139 118 8
x5608:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary1834 £temporary1833

printArgument$34:	; Deref £temporary1835 -> £temporary1834 £temporary1834 0

printArgument$35:	; Assign longValue £temporary1835 -> £temporary1834
x5611:	mov eax, [si]	; 3: 102 139 4
x5614:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5618:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5620:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary1837 arg_list 2
x5624:	mov si, [bp + 8]	; 3: 139 118 8
x5627:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary1838 £temporary1837

printArgument$40:	; Deref £temporary1839 -> £temporary1838 £temporary1838 0

printArgument$41:	; IntegralToIntegral £temporary1840 £temporary1839 -> £temporary1838
x5630:	mov ax, [si]	; 2: 139 4
x5632:	and eax, 65535	; 6: 102 37 255 255 0 0
x5638:	cmp ax, 0	; 3: 131 248 0
x5641:	jge printArgument$42	; 2: 125 5
x5643:	neg ax	; 2: 247 216
x5645:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary1840
x5648:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5652:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5656:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary1844 -> negativePtr negativePtr 0
x5658:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5661:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5666:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary1846 1
x5668:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5671:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary1846 0
x5673:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary1844 -> negativePtr £temporary1846
x5676:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5678:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5682:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5684:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5688:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5692:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 74 22
x5697:	mov [bp + 50], bp	; 3: 137 110 50
x5700:	add bp, 48	; 3: 131 197 48
x5703:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary1849

printArgument$56:	; Assign longValue £temporary1849
x5706:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5710:	mov ax, [bp + 8]	; 3: 139 70 8
x5713:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5716:	mov ax, [bp + 16]	; 3: 139 70 16
x5719:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary1850 precision
x5722:	mov si, bp	; 2: 137 238
x5724:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary1850 10
x5727:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5730:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 112 22
x5735:	mov [bp + 50], bp	; 3: 137 110 50
x5738:	add bp, 48	; 3: 131 197 48
x5741:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary1851

printArgument$65:	; Assign arg_list £temporary1851
x5744:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5747:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5751:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5755:	mov ax, [bp + 10]	; 3: 139 70 10
x5758:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5761:	mov ax, [bp + 12]	; 3: 139 70 12
x5764:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5767:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 149 22
x5772:	mov [bp + 50], bp	; 3: 137 110 50
x5775:	add bp, 48	; 3: 131 197 48
x5778:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5781:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5784:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary1854 arg_list 2
x5788:	mov si, [bp + 8]	; 3: 139 118 8
x5791:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary1855 £temporary1854

printArgument$76:	; Deref £temporary1856 -> £temporary1855 £temporary1855 0

printArgument$77:	; IntegralToIntegral £temporary1857 £temporary1856 -> £temporary1855
x5794:	mov ax, [si]	; 2: 139 4
x5796:	cmp ax, 0	; 3: 131 248 0
x5799:	jge printArgument$78	; 2: 125 4
x5801:	neg ax	; 2: 247 216
x5803:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary1857
x5805:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5808:	mov ax, [bp + 8]	; 3: 139 70 8
x5811:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5814:	mov ax, [bp + 16]	; 3: 139 70 16
x5817:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary1858 precision
x5820:	mov si, bp	; 2: 137 238
x5822:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary1858 10
x5825:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5828:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 210 22
x5833:	mov [bp + 46], bp	; 3: 137 110 46
x5836:	add bp, 44	; 3: 131 197 44
x5839:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary1859

printArgument$87:	; Assign arg_list £temporary1859
x5842:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5845:	mov al, [bp + 31]	; 3: 138 70 31
x5848:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5851:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 233 22
x5856:	mov [bp + 46], bp	; 3: 137 110 46
x5859:	add bp, 44	; 3: 131 197 44
x5862:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5865:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5868:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary1862 arg_list 2
x5872:	mov si, [bp + 8]	; 3: 139 118 8
x5875:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary1863 £temporary1862

printArgument$96:	; Deref £temporary1864 -> £temporary1863 £temporary1863 0

printArgument$97:	; Assign stringValue £temporary1864 -> £temporary1863
x5878:	mov ax, [si]	; 2: 139 4
x5880:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5883:	mov ax, [bp + 8]	; 3: 139 70 8
x5886:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5889:	mov ax, [bp + 16]	; 3: 139 70 16
x5892:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary1865 precision
x5895:	mov si, bp	; 2: 137 238
x5897:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary1865 10
x5900:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5903:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 29 23
x5908:	mov [bp + 48], bp	; 3: 137 110 48
x5911:	add bp, 46	; 3: 131 197 46
x5914:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary1866

printArgument$106:	; Assign arg_list £temporary1866
x5917:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5920:	mov ax, [bp + 44]	; 3: 139 70 44
x5923:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5926:	mov ax, [bp + 18]	; 3: 139 70 18
x5929:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5932:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 58 23
x5937:	mov [bp + 48], bp	; 3: 137 110 48
x5940:	add bp, 46	; 3: 131 197 46
x5943:	jmp printString	; 3: 233 227 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5946:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5949:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5953:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary1882 10
x5955:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5961:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5963:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5967:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary1878 8
x5969:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5975:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5977:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5981:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary1874 2
x5983:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5989:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary1874 16
x5991:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary1878 £temporary1874

printArgument$124:	; Assign £temporary1882 £temporary1878

printArgument$125:	; Assign base £temporary1882
x5997:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x6001:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x6005:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x6007:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary1884 arg_list 2
x6011:	mov si, [bp + 8]	; 3: 139 118 8
x6014:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary1885 £temporary1884

printArgument$130:	; Deref £temporary1886 -> £temporary1885 £temporary1885 0

printArgument$131:	; IntegralToIntegral £temporary1887 £temporary1886 -> £temporary1885
x6017:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary1888 £temporary1887
x6019:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary1888
x6025:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x6029:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x6031:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x6035:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x6037:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary1890 arg_list 4
x6041:	mov si, [bp + 8]	; 3: 139 118 8
x6044:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary1891 £temporary1890

printArgument$139:	; Deref £temporary1892 -> £temporary1891 £temporary1891 0

printArgument$140:	; Assign value £temporary1892 -> £temporary1891
x6047:	mov eax, [si]	; 3: 102 139 4
x6050:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x6054:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x6056:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary1894 arg_list 2
x6060:	mov si, [bp + 8]	; 3: 139 118 8
x6063:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary1895 £temporary1894

printArgument$145:	; Deref £temporary1896 -> £temporary1895 £temporary1895 0

printArgument$146:	; IntegralToIntegral £temporary1897 £temporary1896 -> £temporary1895
x6066:	mov ax, [si]	; 2: 139 4
x6068:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary1897
x6074:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6078:	mov ax, [bp + 8]	; 3: 139 70 8
x6081:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6084:	mov ax, [bp + 16]	; 3: 139 70 16
x6087:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary1900 precision
x6090:	mov si, bp	; 2: 137 238
x6092:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary1900 10
x6095:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6098:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 224 23
x6103:	mov [bp + 54], bp	; 3: 137 110 54
x6106:	add bp, 52	; 3: 131 197 52
x6109:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary1901

printArgument$156:	; Assign arg_list £temporary1901
x6112:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6115:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6119:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6123:	mov ax, [bp + 10]	; 3: 139 70 10
x6126:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6129:	mov ax, [bp + 12]	; 3: 139 70 12
x6132:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6135:	mov ax, [bp + 14]	; 3: 139 70 14
x6138:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6141:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6145:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary1902 c
x6149:	mov al, [bp + 30]	; 3: 138 70 30
x6152:	and ax, 255	; 3: 37 255 0
x6155:	cmp al, 0	; 2: 60 0
x6157:	jge printArgument$165	; 2: 125 4
x6159:	neg al	; 2: 246 216
x6161:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary1902 26
x6163:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6166:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 36 24
x6171:	mov [bp + 74], bp	; 3: 137 110 74
x6174:	add bp, 72	; 3: 131 197 72
x6177:	jmp isupper	; 3: 233 233 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary1903

printArgument$169:	; Parameter 52 £temporary1903 20
x6180:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6183:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 53 24
x6188:	mov [bp + 54], bp	; 3: 137 110 54
x6191:	add bp, 52	; 3: 131 197 52
x6194:	jmp printUnsignedLong	; 3: 233 217 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6197:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6200:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6204:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6206:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary1906 arg_list 8
x6210:	mov si, [bp + 8]	; 3: 139 118 8
x6213:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary1907 £temporary1906

printArgument$177:	; Deref £temporary1908 -> £temporary1907 £temporary1907 0

printArgument$178:	; PushFloat £temporary1908 -> £temporary1907
x6216:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6218:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6221:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6224:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6227:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6232:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6237:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6242:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6247:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 117 24
x6252:	mov [bp + 46], bp	; 3: 137 110 46
x6255:	add bp, 44	; 3: 131 197 44
x6258:	jmp printLongDoublePlain	; 3: 233 68 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6261:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6263:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary1911 arg_list 8
x6267:	mov si, [bp + 8]	; 3: 139 118 8
x6270:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary1912 £temporary1911

printArgument$193:	; Deref £temporary1913 -> £temporary1912 £temporary1912 0

printArgument$194:	; PushFloat £temporary1913 -> £temporary1912
x6273:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6275:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6278:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6282:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary1917 -> negativePtr negativePtr 0
x6284:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6287:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6290:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6292:	fcompp	; 2: 222 217
x6294:	fstsw ax	; 3: 155 223 224
x6297:	sahf	; 1: 158
x6298:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary1919 1
x6300:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6303:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary1919 0
x6305:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary1917 -> negativePtr £temporary1919
x6308:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6310:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6314:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6316:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6319:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6322:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 192 24
x6327:	mov [bp + 46], bp	; 3: 137 110 46
x6330:	add bp, 44	; 3: 131 197 44
x6333:	jmp fabs	; 3: 233 61 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary1922

printArgument$212:	; PopFloat longDoubleValue
x6336:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6339:	mov ax, [bp + 8]	; 3: 139 70 8
x6342:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6345:	mov ax, [bp + 16]	; 3: 139 70 16
x6348:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary1923 precision
x6351:	mov si, bp	; 2: 137 238
x6353:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary1923 10
x6356:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6359:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 229 24
x6364:	mov [bp + 46], bp	; 3: 137 110 46
x6367:	add bp, 44	; 3: 131 197 44
x6370:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary1924

printArgument$221:	; Assign arg_list £temporary1924
x6373:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6376:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6380:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6382:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6385:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6388:	mov ax, [bp + 10]	; 3: 139 70 10
x6391:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6394:	mov ax, [bp + 12]	; 3: 139 70 12
x6397:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6400:	mov ax, [bp + 14]	; 3: 139 70 14
x6403:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6406:	mov ax, [bp + 18]	; 3: 139 70 18
x6409:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6412:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 26 25
x6417:	mov [bp + 46], bp	; 3: 137 110 46
x6420:	add bp, 44	; 3: 131 197 44
x6423:	jmp printLongDoublePlain	; 3: 233 159 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6426:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary1927 c
x6429:	mov al, [bp + 30]	; 3: 138 70 30
x6432:	and ax, 255	; 3: 37 255 0
x6435:	cmp al, 0	; 2: 60 0
x6437:	jge printArgument$235	; 2: 125 4
x6439:	neg al	; 2: 246 216
x6441:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary1927 6
x6443:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6446:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 60 25
x6451:	mov [bp + 46], bp	; 3: 137 110 46
x6454:	add bp, 44	; 3: 131 197 44
x6457:	jmp tolower	; 3: 233 227 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary1928

printArgument$239:	; NotEqual 257 £temporary1928 101
x6460:	cmp bx, 101	; 3: 131 251 101
x6463:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6465:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6468:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6471:	mov ax, [bp + 10]	; 3: 139 70 10
x6474:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6477:	mov ax, [bp + 12]	; 3: 139 70 12
x6480:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6483:	mov ax, [bp + 14]	; 3: 139 70 14
x6486:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6489:	mov ax, [bp + 18]	; 3: 139 70 18
x6492:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary1930 c
x6495:	mov al, [bp + 30]	; 3: 138 70 30
x6498:	and ax, 255	; 3: 37 255 0
x6501:	cmp al, 0	; 2: 60 0
x6503:	jge printArgument$249	; 2: 125 4
x6505:	neg al	; 2: 246 216
x6507:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary1930 28
x6509:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6512:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 126 25
x6517:	mov [bp + 68], bp	; 3: 137 110 68
x6520:	add bp, 66	; 3: 131 197 66
x6523:	jmp isupper	; 3: 233 143 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary1931

printArgument$253:	; Parameter 44 £temporary1931 22
x6526:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6529:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 143 25
x6534:	mov [bp + 46], bp	; 3: 137 110 46
x6537:	add bp, 44	; 3: 131 197 44
x6540:	jmp printLongDoubleExpo	; 3: 233 49 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6543:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6546:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6549:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6552:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 166 25
x6557:	mov [bp + 46], bp	; 3: 137 110 46
x6560:	add bp, 44	; 3: 131 197 44
x6563:	jmp fabs	; 3: 233 87 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary1933

printArgument$264:	; Parameter 44 £temporary1933 6
x6566:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6569:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 183 25
x6574:	mov [bp + 46], bp	; 3: 137 110 46
x6577:	add bp, 44	; 3: 131 197 44
x6580:	jmp log10	; 3: 233 120 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary1934

printArgument$268:	; FloatingToIntegral £temporary1935 £temporary1934
x6583:	fistp word [container2bytes#]	; 4: 223 30 77 27
x6587:	mov ax, [container2bytes#]	; 3: 161 77 27

printArgument$269:	; Assign expo £temporary1935
x6590:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6593:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6597:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6599:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6603:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6605:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6608:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6611:	mov ax, [bp + 10]	; 3: 139 70 10
x6614:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6617:	mov ax, [bp + 12]	; 3: 139 70 12
x6620:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6623:	mov ax, [bp + 14]	; 3: 139 70 14
x6626:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6629:	mov ax, [bp + 18]	; 3: 139 70 18
x6632:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6635:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 249 25
x6640:	mov [bp + 48], bp	; 3: 137 110 48
x6643:	add bp, 46	; 3: 131 197 46
x6646:	jmp printLongDoublePlain	; 3: 233 192 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6649:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6652:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6655:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6658:	mov ax, [bp + 10]	; 3: 139 70 10
x6661:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6664:	mov ax, [bp + 12]	; 3: 139 70 12
x6667:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6670:	mov ax, [bp + 14]	; 3: 139 70 14
x6673:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6676:	mov ax, [bp + 18]	; 3: 139 70 18
x6679:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary1940 c
x6682:	mov al, [bp + 30]	; 3: 138 70 30
x6685:	and ax, 255	; 3: 37 255 0
x6688:	cmp al, 0	; 2: 60 0
x6690:	jge printArgument$291	; 2: 125 4
x6692:	neg al	; 2: 246 216
x6694:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary1940 28
x6696:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6699:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 57 26
x6704:	mov [bp + 70], bp	; 3: 137 110 70
x6707:	add bp, 68	; 3: 131 197 68
x6710:	jmp isupper	; 3: 233 212 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary1941

printArgument$295:	; Parameter 46 £temporary1941 22
x6713:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6716:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 74 26
x6721:	mov [bp + 48], bp	; 3: 137 110 48
x6724:	add bp, 46	; 3: 131 197 46
x6727:	jmp printLongDoubleExpo	; 3: 233 118 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6730:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6733:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary1944 arg_list 2
x6737:	mov si, [bp + 8]	; 3: 139 118 8
x6740:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary1945 £temporary1944

printArgument$302:	; Deref £temporary1946 -> £temporary1945 £temporary1945 0

printArgument$303:	; Assign ptrValue £temporary1946 -> £temporary1945
x6743:	mov ax, [si]	; 2: 139 4
x6745:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6748:	mov ax, [bp + 8]	; 3: 139 70 8
x6751:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6754:	mov ax, [bp + 16]	; 3: 139 70 16
x6757:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary1947 precision
x6760:	mov si, bp	; 2: 137 238
x6762:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary1947 10
x6765:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6768:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 126 26
x6773:	mov [bp + 46], bp	; 3: 137 110 46
x6776:	add bp, 44	; 3: 131 197 44
x6779:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary1948

printArgument$312:	; Assign arg_list £temporary1948
x6782:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary1949 ptrValue
x6785:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary1950 £temporary1949
x6788:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary1950 6
x6794:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6798:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6803:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6808:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6813:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6821:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6826:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 184 26
x6831:	mov [bp + 46], bp	; 3: 137 110 46
x6834:	add bp, 44	; 3: 131 197 44
x6837:	jmp printUnsignedLong	; 3: 233 86 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6840:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6843:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary1953 arg_list 2
x6847:	mov si, [bp + 8]	; 3: 139 118 8
x6850:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary1954 £temporary1953

printArgument$328:	; Deref £temporary1955 -> £temporary1954 £temporary1954 0

printArgument$329:	; Assign ptrValue £temporary1955 -> £temporary1954
x6853:	mov ax, [si]	; 2: 139 4
x6855:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6858:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary1957 arg_list 2
x6862:	mov si, [bp + 8]	; 3: 139 118 8
x6865:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary1958 £temporary1957

printArgument$333:	; Deref £temporary1959 -> £temporary1958 £temporary1958 0

printArgument$334:	; Assign intPtr £temporary1959 -> £temporary1958
x6868:	mov ax, [si]	; 2: 139 4
x6870:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6873:	mov ax, [bp + 8]	; 3: 139 70 8
x6876:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6879:	mov ax, [bp + 16]	; 3: 139 70 16
x6882:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary1960 precision
x6885:	mov si, bp	; 2: 137 238
x6887:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary1960 10
x6890:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6893:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 251 26
x6898:	mov [bp + 46], bp	; 3: 137 110 46
x6901:	add bp, 44	; 3: 131 197 44
x6904:	nop	; 1: 144
x6905:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary1961

printArgument$343:	; Assign arg_list £temporary1961
x6907:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary1962 -> intPtr intPtr 0
x6910:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary1962 -> intPtr g_outChars
x6913:	mov ax, [g_outChars]	; 3: 161 55 21
x6916:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6918:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6920:	mov ax, [bp + 8]	; 3: 139 70 8
x6923:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6926:	mov ax, [bp + 16]	; 3: 139 70 16
x6929:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary1963 precision
x6932:	mov si, bp	; 2: 137 238
x6934:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary1963 10
x6937:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6940:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 42 27
x6945:	mov [bp + 46], bp	; 3: 137 110 46
x6948:	add bp, 44	; 3: 131 197 44
x6951:	nop	; 1: 144
x6952:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary1964

printArgument$355:	; Assign arg_list £temporary1964
x6954:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6957:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6961:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 63 27
x6966:	mov [bp + 46], bp	; 3: 137 110 46
x6969:	add bp, 44	; 3: 131 197 44
x6972:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6975:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6978:	mov ax, [bp]	; 3: 139 70 0
x6981:	mov di, [bp + 4]	; 3: 139 126 4
x6984:	mov bp, [bp + 2]	; 3: 139 110 2
x6987:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6989:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6991:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6996:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3215 value
x6998:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x7002:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3219 £temporary3215

labs$3:	; Goto 5
x7005:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3219 value
x7007:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3219

labs$6:	; Return £temporary3219
x7011:	mov ax, [bp]	; 3: 139 70 0
x7014:	mov di, [bp + 4]	; 3: 139 126 4
x7017:	mov bp, [bp + 2]	; 3: 139 110 2
x7020:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x7022:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7026:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1808 -> widthPtr widthPtr 0
x7028:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1808 -> widthPtr -1
x7031:	cmp word [si], -1	; 3: 131 60 255
x7034:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1811 -> widthPtr widthPtr 0
x7036:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x7039:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1813 arg_list 2
x7043:	mov di, [bp + 6]	; 3: 139 126 6
x7046:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1814 £temporary1813

checkWidthAndPrecision$7:	; Deref £temporary1815 -> £temporary1814 £temporary1814 0

checkWidthAndPrecision$8:	; Assign £temporary1811 -> widthPtr £temporary1815 -> £temporary1814
x7049:	mov ax, [di]	; 2: 139 5
x7051:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x7053:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7057:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary1817 -> precisionPtr precisionPtr 0
x7059:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1817 -> precisionPtr -1
x7062:	cmp word [si], -1	; 3: 131 60 255
x7065:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary1820 -> precisionPtr precisionPtr 0
x7067:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7070:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary1822 arg_list 2
x7074:	mov di, [bp + 6]	; 3: 139 126 6
x7077:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1823 £temporary1822

checkWidthAndPrecision$16:	; Deref £temporary1824 -> £temporary1823 £temporary1823 0

checkWidthAndPrecision$17:	; Assign £temporary1820 -> precisionPtr £temporary1824 -> £temporary1823
x7080:	mov ax, [di]	; 2: 139 5
x7082:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7084:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7087:	mov ax, [bp]	; 3: 139 70 0
x7090:	mov di, [bp + 4]	; 3: 139 126 4
x7093:	mov bp, [bp + 2]	; 3: 139 110 2
x7096:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7098:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7103:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1662 longValue
x7105:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7109:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1662
x7112:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7116:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7120:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 222 27
x7125:	mov [bp + 16], bp	; 3: 137 110 16
x7128:	add bp, 14	; 3: 131 197 14
x7131:	nop	; 1: 144
x7132:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7134:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7136:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7140:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7142:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7146:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 248 27
x7151:	mov [bp + 16], bp	; 3: 137 110 16
x7154:	add bp, 14	; 3: 131 197 14
x7157:	nop	; 1: 144
x7158:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7160:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7162:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7166:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7168:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7172:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 18 28
x7177:	mov [bp + 16], bp	; 3: 137 110 16
x7180:	add bp, 14	; 3: 131 197 14
x7183:	nop	; 1: 144
x7184:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7186:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7191:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7193:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7197:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 43 28
x7202:	mov [bp + 16], bp	; 3: 137 110 16
x7205:	add bp, 14	; 3: 131 197 14
x7208:	nop	; 1: 144
x7209:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7211:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7213:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7217:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7221:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 67 28
x7226:	mov [bp + 16], bp	; 3: 137 110 16
x7229:	add bp, 14	; 3: 131 197 14
x7232:	nop	; 1: 144
x7233:	jmp printLongIntRec	; 2: 235 104

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7235:	mov ax, [bp]	; 3: 139 70 0
x7238:	mov di, [bp + 4]	; 3: 139 126 4
x7241:	mov bp, [bp + 2]	; 3: 139 110 2
x7244:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7246:	mov ax, [g_outStatus]	; 3: 161 219 15
x7249:	cmp ax, 0	; 3: 131 248 0
x7252:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7254:	cmp ax, 1	; 3: 131 248 1
x7257:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7259:	cmp ax, 2	; 3: 131 248 2
x7262:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 26
x7264:	jmp printChar$26	; 2: 235 62

printChar$5:	; IntegralToIntegral £temporary1601 g_outDevice
x7266:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$6:	; Assign stream £temporary1601
x7269:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7272:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1604 -> stream stream 2
x7274:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1604 -> stream
x7277:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7280:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1607 c
x7283:	mov dx, bp	; 2: 137 234
x7285:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1607

printChar$13:	; Interrupt 33
x7288:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7290:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$15:	; Goto 26
x7294:	jmp printChar$26	; 2: 235 32

printChar$16:	; IntegralToIntegral £temporary1609 g_outDevice
x7296:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$17:	; Assign outString £temporary1609
x7299:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1610 g_outChars
x7302:	mov ax, [g_outChars]	; 3: 161 55 21

printChar$19:	; Increment g_outChars
x7305:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$20:	; BinaryAdd £temporary1613 outString £temporary1610
x7309:	mov si, [bp + 9]	; 3: 139 118 9
x7312:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1612 -> £temporary1613 £temporary1613 0

printChar$22:	; Assign £temporary1612 -> £temporary1613 c
x7314:	mov al, [bp + 6]	; 3: 138 70 6
x7317:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 26
x7319:	jmp printChar$26	; 2: 235 7

printChar$24:	; Assign £temporary1614 g_outChars
x7321:	mov ax, [g_outChars]	; 3: 161 55 21

printChar$25:	; Increment g_outChars
x7324:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$26:	; Return 0
x7328:	mov ax, [bp]	; 3: 139 70 0
x7331:	mov di, [bp + 4]	; 3: 139 126 4
x7334:	mov bp, [bp + 2]	; 3: 139 110 2
x7337:	jmp ax	; 2: 255 224

printChar$27:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7339:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7344:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1652 longValue 10
x7346:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7350:	xor edx, edx	; 3: 102 49 210
x7353:	idiv dword [@3780$int4$10#]	; 5: 102 247 62 21 29

printLongIntRec$2:	; IntegralToIntegral £temporary1653 £temporary1652
x7358:	cmp edx, 0	; 4: 102 131 250 0
x7362:	jge printLongIntRec$3	; 2: 125 5
x7364:	neg edx	; 3: 102 247 218
x7367:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1653
x7369:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1654 longValue 10
x7372:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7376:	xor edx, edx	; 3: 102 49 210
x7379:	idiv dword [@3785$int4$10#]	; 5: 102 247 62 25 29

printLongIntRec$6:	; Parameter 12 £temporary1654 6
x7384:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7388:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 234 28
x7393:	mov [bp + 14], bp	; 3: 137 110 14
x7396:	add bp, 12	; 3: 131 197 12
x7399:	nop	; 1: 144
x7400:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1656 digit 48
x7402:	mov ax, [bp + 10]	; 3: 139 70 10
x7405:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1657 £temporary1656
x7408:	cmp ax, 0	; 3: 131 248 0
x7411:	jge printLongIntRec$12	; 2: 125 4
x7413:	neg ax	; 2: 247 216
x7415:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1657 6
x7417:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7420:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 10 29
x7425:	mov [bp + 14], bp	; 3: 137 110 14
x7428:	add bp, 12	; 3: 131 197 12
x7431:	jmp printChar	; 3: 233 68 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7434:	mov ax, [bp]	; 3: 139 70 0
x7437:	mov di, [bp + 4]	; 3: 139 126 4
x7440:	mov bp, [bp + 2]	; 3: 139 110 2
x7443:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

@3780$int4$10#:
x7445:	dd 10	; 4: 10 0 0 0

@3785$int4$10#:
x7449:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7453:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7457:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7459:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7463:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7465:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1620 s index
x7470:	mov si, [bp + 6]	; 3: 139 118 6
x7473:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1619 -> £temporary1620 £temporary1620 0

printString$5:	; Equal 53 £temporary1619 -> £temporary1620 0
x7476:	cmp byte [si], 0	; 3: 128 60 0
x7479:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1624 s index
x7483:	mov si, [bp + 6]	; 3: 139 118 6
x7486:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1623 -> £temporary1624 £temporary1624 0

printString$9:	; Parameter 12 £temporary1623 -> £temporary1624 6
x7489:	mov al, [si]	; 2: 138 4
x7491:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7494:	mov word [bp + 12], printString$11	; 5: 199 70 12 84 29
x7499:	mov [bp + 14], bp	; 3: 137 110 14
x7502:	add bp, 12	; 3: 131 197 12
x7505:	jmp printChar	; 3: 233 250 254

printString$11:	; PostCall 12

printString$12:	; Increment index
x7508:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7511:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7513:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1626 precision
x7518:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7521:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1626 0
x7524:	cmp ax, 0	; 3: 131 248 0
x7527:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1630 s index
x7531:	mov si, [bp + 6]	; 3: 139 118 6
x7534:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1629 -> £temporary1630 £temporary1630 0

printString$20:	; Equal 53 £temporary1629 -> £temporary1630 0
x7537:	cmp byte [si], 0	; 3: 128 60 0
x7540:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1635 s index
x7544:	mov si, [bp + 6]	; 3: 139 118 6
x7547:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1634 -> £temporary1635 £temporary1635 0

printString$24:	; Parameter 12 £temporary1634 -> £temporary1635 6
x7550:	mov al, [si]	; 2: 138 4
x7552:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7555:	mov word [bp + 12], printString$26	; 5: 199 70 12 145 29
x7560:	mov [bp + 14], bp	; 3: 137 110 14
x7563:	add bp, 12	; 3: 131 197 12
x7566:	jmp printChar	; 3: 233 189 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7569:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7572:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7574:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7578:	mov word [bp + 10], printString$32	; 5: 199 70 10 168 29
x7583:	mov [bp + 12], bp	; 3: 137 110 12
x7586:	add bp, 10	; 3: 131 197 10
x7589:	jmp printChar	; 3: 233 166 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7592:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7596:	mov word [bp + 10], printString$36	; 5: 199 70 10 186 29
x7601:	mov [bp + 12], bp	; 3: 137 110 12
x7604:	add bp, 10	; 3: 131 197 10
x7607:	jmp printChar	; 3: 233 148 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7610:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7614:	mov word [bp + 10], printString$40	; 5: 199 70 10 204 29
x7619:	mov [bp + 12], bp	; 3: 137 110 12
x7622:	add bp, 10	; 3: 131 197 10
x7625:	jmp printChar	; 3: 233 130 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7628:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7632:	mov word [bp + 10], printString$44	; 5: 199 70 10 222 29
x7637:	mov [bp + 12], bp	; 3: 137 110 12
x7640:	add bp, 10	; 3: 131 197 10
x7643:	jmp printChar	; 3: 233 112 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7646:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7650:	mov word [bp + 10], printString$48	; 5: 199 70 10 240 29
x7655:	mov [bp + 12], bp	; 3: 137 110 12
x7658:	add bp, 10	; 3: 131 197 10
x7661:	jmp printChar	; 3: 233 94 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7664:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7668:	mov word [bp + 10], printString$52	; 5: 199 70 10 2 30
x7673:	mov [bp + 12], bp	; 3: 137 110 12
x7676:	add bp, 10	; 3: 131 197 10
x7679:	jmp printChar	; 3: 233 76 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7682:	mov ax, [bp]	; 3: 139 70 0
x7685:	mov di, [bp + 4]	; 3: 139 126 4
x7688:	mov bp, [bp + 2]	; 3: 139 110 2
x7691:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7693:	mov word [bp + 8], isupper$2	; 5: 199 70 8 27 30
x7698:	mov [bp + 10], bp	; 3: 137 110 10
x7701:	add bp, 8	; 3: 131 197 8
x7704:	nop	; 1: 144
x7705:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary172

isupper$4:	; Assign localeConvPtr £temporary172
x7707:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7710:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7714:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary174 -> localeConvPtr localeConvPtr 14
x7716:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary174 -> localeConvPtr 6
x7719:	mov ax, [si + 14]	; 3: 139 68 14
x7722:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7725:	mov ax, [bp + 6]	; 3: 139 70 6
x7728:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7731:	mov word [bp + 10], isupper$11	; 5: 199 70 10 65 30
x7736:	mov [bp + 12], bp	; 3: 137 110 12
x7739:	add bp, 10	; 3: 131 197 10
x7742:	jmp strchr	; 3: 233 125 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary175

isupper$13:	; Equal 16 £temporary175 0
x7745:	cmp bx, 0	; 3: 131 251 0
x7748:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary177 1
x7750:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7753:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary177 0
x7755:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary177

isupper$18:	; Return £temporary177
x7758:	mov ax, [bp]	; 3: 139 70 0
x7761:	mov di, [bp + 4]	; 3: 139 126 4
x7764:	mov bp, [bp + 2]	; 3: 139 110 2
x7767:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7769:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7773:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7775:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7779:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary181 1
x7781:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7784:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary181 0
x7786:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary181

isupper$25:	; Return £temporary181
x7789:	mov ax, [bp]	; 3: 139 70 0
x7792:	mov di, [bp + 4]	; 3: 139 126 4
x7795:	mov bp, [bp + 2]	; 3: 139 110 2
x7798:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7800:	cmp word [@771$g_currStructPtr], 0	; 5: 131 62 150 30 0
x7805:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary305 -> g_currStructPtr g_currStructPtr 2
x7807:	mov si, [@771$g_currStructPtr]	; 4: 139 54 150 30

localeconv$2:	; Assign £temporary309 £temporary305 -> g_currStructPtr
x7811:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7814:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary309 0
x7816:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary309

localeconv$6:	; Return £temporary309
x7819:	mov ax, [bp]	; 3: 139 70 0
x7822:	mov di, [bp + 4]	; 3: 139 126 4
x7825:	mov bp, [bp + 2]	; 3: 139 110 2
x7828:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@771$g_currStructPtr:
x7830:	dw @762$g_sArray	; 2: 152 30

@762$g_sArray:
x7832:	dw @756$string_# ; 2: 164 30
x7834:	dw @751$en_US_utf8	; 2: 165 30
x7836:	dw @758$string_C# ; 2: 185 33
x7838:	dw @751$en_US_utf8	; 2: 165 30
x7840:	dw @760$string_US# ; 2: 187 33
x7842:	dw @751$en_US_utf8	; 2: 165 30

@756$string_#:
x7844:	db 0	; 1: 0

@751$en_US_utf8:
x7845:	dw 1	; 2: 1 0
x7847:	dw 1	; 2: 1 0
x7849:	dw @692$enShortDayList ; 2: 183 30
x7851:	dw @700$enLongDayList ; 2: 225 30
x7853:	dw @713$enShortMonthList ; 2: 40 31
x7855:	dw @726$enLongMonthList ; 2: 112 31
x7857:	dw @749$string_abcdefghijklmnopqrstuvwxyz# ; 2: 222 31
x7859:	dw @750$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 249 31
x7861:	dw enMessageList ; 2: 20 32

@692$enShortDayList:
x7863:	dw @685$string_Sun# ; 2: 197 30
x7865:	dw @686$string_Mon# ; 2: 201 30
x7867:	dw @687$string_Tue# ; 2: 205 30
x7869:	dw @688$string_Wed# ; 2: 209 30
x7871:	dw @689$string_Thu# ; 2: 213 30
x7873:	dw @690$string_Fri# ; 2: 217 30
x7875:	dw @691$string_Sat# ; 2: 221 30

@685$string_Sun#:
x7877:	db "Sun", 0	; 4: 83 117 110 0

@686$string_Mon#:
x7881:	db "Mon", 0	; 4: 77 111 110 0

@687$string_Tue#:
x7885:	db "Tue", 0	; 4: 84 117 101 0

@688$string_Wed#:
x7889:	db "Wed", 0	; 4: 87 101 100 0

@689$string_Thu#:
x7893:	db "Thu", 0	; 4: 84 104 117 0

@690$string_Fri#:
x7897:	db "Fri", 0	; 4: 70 114 105 0

@691$string_Sat#:
x7901:	db "Sat", 0	; 4: 83 97 116 0

@700$enLongDayList:
x7905:	dw @693$string_Sunday# ; 2: 239 30
x7907:	dw @694$string_Monday# ; 2: 246 30
x7909:	dw @695$string_Tuesday# ; 2: 253 30
x7911:	dw @696$string_Wednesday# ; 2: 5 31
x7913:	dw @697$string_Thursday# ; 2: 15 31
x7915:	dw @698$string_Friday# ; 2: 24 31
x7917:	dw @699$string_Saturday# ; 2: 31 31

@693$string_Sunday#:
x7919:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@694$string_Monday#:
x7926:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@695$string_Tuesday#:
x7933:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@696$string_Wednesday#:
x7941:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@697$string_Thursday#:
x7951:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@698$string_Friday#:
x7960:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@699$string_Saturday#:
x7967:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@713$enShortMonthList:
x7976:	dw @701$string_Jan# ; 2: 64 31
x7978:	dw @702$string_Feb# ; 2: 68 31
x7980:	dw @703$string_Mar# ; 2: 72 31
x7982:	dw @704$string_Apr# ; 2: 76 31
x7984:	dw @705$string_May# ; 2: 80 31
x7986:	dw @706$string_Jun# ; 2: 84 31
x7988:	dw @707$string_Jul# ; 2: 88 31
x7990:	dw @708$string_Aug# ; 2: 92 31
x7992:	dw @709$string_Sep# ; 2: 96 31
x7994:	dw @710$string_Oct# ; 2: 100 31
x7996:	dw @711$string_Nov# ; 2: 104 31
x7998:	dw @712$string_Dec# ; 2: 108 31

@701$string_Jan#:
x8000:	db "Jan", 0	; 4: 74 97 110 0

@702$string_Feb#:
x8004:	db "Feb", 0	; 4: 70 101 98 0

@703$string_Mar#:
x8008:	db "Mar", 0	; 4: 77 97 114 0

@704$string_Apr#:
x8012:	db "Apr", 0	; 4: 65 112 114 0

@705$string_May#:
x8016:	db "May", 0	; 4: 77 97 121 0

@706$string_Jun#:
x8020:	db "Jun", 0	; 4: 74 117 110 0

@707$string_Jul#:
x8024:	db "Jul", 0	; 4: 74 117 108 0

@708$string_Aug#:
x8028:	db "Aug", 0	; 4: 65 117 103 0

@709$string_Sep#:
x8032:	db "Sep", 0	; 4: 83 101 112 0

@710$string_Oct#:
x8036:	db "Oct", 0	; 4: 79 99 116 0

@711$string_Nov#:
x8040:	db "Nov", 0	; 4: 78 111 118 0

@712$string_Dec#:
x8044:	db "Dec", 0	; 4: 68 101 99 0

@726$enLongMonthList:
x8048:	dw @714$string_January# ; 2: 136 31
x8050:	dw @715$string_February# ; 2: 144 31
x8052:	dw @716$string_March# ; 2: 153 31
x8054:	dw @717$string_April# ; 2: 159 31
x8056:	dw @718$string_May# ; 2: 165 31
x8058:	dw @719$string_June# ; 2: 169 31
x8060:	dw @720$string_July# ; 2: 174 31
x8062:	dw @721$string_August# ; 2: 179 31
x8064:	dw @722$string_September# ; 2: 186 31
x8066:	dw @723$string_October# ; 2: 196 31
x8068:	dw @724$string_November# ; 2: 204 31
x8070:	dw @725$string_December# ; 2: 213 31

@714$string_January#:
x8072:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@715$string_February#:
x8080:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@716$string_March#:
x8089:	db "March", 0	; 6: 77 97 114 99 104 0

@717$string_April#:
x8095:	db "April", 0	; 6: 65 112 114 105 108 0

@718$string_May#:
x8101:	db "May", 0	; 4: 77 97 121 0

@719$string_June#:
x8105:	db "June", 0	; 5: 74 117 110 101 0

@720$string_July#:
x8110:	db "July", 0	; 5: 74 117 108 121 0

@721$string_August#:
x8115:	db "August", 0	; 7: 65 117 103 117 115 116 0

@722$string_September#:
x8122:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@723$string_October#:
x8132:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@724$string_November#:
x8140:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@725$string_December#:
x8149:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@749$string_abcdefghijklmnopqrstuvwxyz#:
x8158:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

@750$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8185:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8212:	dw @727$string_no20error# ; 2: 60 32
x8214:	dw @728$string_function20number20invalid# ; 2: 69 32
x8216:	dw @729$string_file20not20found# ; 2: 93 32
x8218:	dw @730$string_path20not20found# ; 2: 108 32
x8220:	dw @731$string_no20handle20available# ; 2: 123 32
x8222:	dw @732$string_access20denied# ; 2: 143 32
x8224:	dw @733$string_out20of20domain# ; 2: 157 32
x8226:	dw @734$string_out20of20range# ; 2: 171 32
x8228:	dw @735$string_invalid20multibyte20sequence# ; 2: 184 32
x8230:	dw @736$string_error20while20opening# ; 2: 211 32
x8232:	dw @737$string_error20while20flushing# ; 2: 231 32
x8234:	dw @738$string_error20while20closing# ; 2: 252 32
x8236:	dw @739$string_open20mode20invalid# ; 2: 16 33
x8238:	dw @740$string_error20while20writing# ; 2: 34 33
x8240:	dw @741$string_error20while20reading# ; 2: 54 33
x8242:	dw @742$string_error20while20seeking# ; 2: 74 33
x8244:	dw @743$string_error20while20telling# ; 2: 94 33
x8246:	dw @744$string_error20while20sizing# ; 2: 114 33
x8248:	dw @745$string_error20while20removing20file# ; 2: 133 33
x8250:	dw @746$string_error20while20renaming20file# ; 2: 159 33

@727$string_no20error#:
x8252:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

@728$string_function20number20invalid#:
x8261:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

@729$string_file20not20found#:
x8285:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

@730$string_path20not20found#:
x8300:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

@731$string_no20handle20available#:
x8315:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

@732$string_access20denied#:
x8335:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

@733$string_out20of20domain#:
x8349:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

@734$string_out20of20range#:
x8363:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

@735$string_invalid20multibyte20sequence#:
x8376:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

@736$string_error20while20opening#:
x8403:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

@737$string_error20while20flushing#:
x8423:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

@738$string_error20while20closing#:
x8444:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

@739$string_open20mode20invalid#:
x8464:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

@740$string_error20while20writing#:
x8482:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

@741$string_error20while20reading#:
x8502:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

@742$string_error20while20seeking#:
x8522:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

@743$string_error20while20telling#:
x8542:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

@744$string_error20while20sizing#:
x8562:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

@745$string_error20while20removing20file#:
x8581:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

@746$string_error20while20renaming20file#:
x8607:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

@758$string_C#:
x8633:	db "C", 0	; 2: 67 0

@760$string_US#:
x8635:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary3791 i
x8638:	mov ax, [bp + 8]	; 3: 139 70 8
x8641:	cmp ax, 0	; 3: 131 248 0
x8644:	jge strchr$1	; 2: 125 4
x8646:	neg ax	; 2: 247 216
x8648:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary3791
x8650:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8653:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary3793 text index
x8658:	mov si, [bp + 6]	; 3: 139 118 6
x8661:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary3792 -> £temporary3793 £temporary3793 0

strchr$5:	; Equal 16 £temporary3792 -> £temporary3793 0
x8664:	cmp byte [si], 0	; 3: 128 60 0
x8667:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary3797 text index
x8669:	mov si, [bp + 6]	; 3: 139 118 6
x8672:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0

strchr$8:	; NotEqual 14 £temporary3796 -> £temporary3797 c
x8675:	mov al, [bp + 12]	; 3: 138 70 12
x8678:	cmp [si], al	; 2: 56 4
x8680:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary3800 text index
x8682:	mov bx, [bp + 6]	; 3: 139 94 6
x8685:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary3799 -> £temporary3800 £temporary3800 0

strchr$11:	; address £temporary3801 £temporary3799 -> £temporary3800

strchr$12:	; SetReturnValue £temporary3801

strchr$13:	; Return £temporary3801
x8688:	mov ax, [bp]	; 3: 139 70 0
x8691:	mov di, [bp + 4]	; 3: 139 126 4
x8694:	mov bp, [bp + 2]	; 3: 139 110 2
x8697:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8699:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8702:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8704:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8707:	mov ax, [bp]	; 3: 139 70 0
x8710:	mov di, [bp + 4]	; 3: 139 126 4
x8713:	mov bp, [bp + 2]	; 3: 139 110 2
x8716:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8718:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8722:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8724:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8728:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 38 34
x8733:	mov [bp + 24], bp	; 3: 137 110 24
x8736:	add bp, 22	; 3: 131 197 22
x8739:	jmp printChar	; 3: 233 40 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8742:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8746:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8748:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8752:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 62 34
x8757:	mov [bp + 24], bp	; 3: 137 110 24
x8760:	add bp, 22	; 3: 131 197 22
x8763:	jmp printChar	; 3: 233 16 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8766:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8770:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8772:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8777:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8779:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8783:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 93 34
x8788:	mov [bp + 24], bp	; 3: 137 110 24
x8791:	add bp, 22	; 3: 131 197 22
x8794:	jmp printChar	; 3: 233 241 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8797:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8802:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8804:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8808:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 118 34
x8813:	mov [bp + 24], bp	; 3: 137 110 24
x8816:	add bp, 22	; 3: 131 197 22
x8819:	jmp printChar	; 3: 233 216 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8822:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8826:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1711 88
x8828:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8830:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1711 120
x8832:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1711 6
x8834:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8837:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 147 34
x8842:	mov [bp + 24], bp	; 3: 137 110 24
x8845:	add bp, 22	; 3: 131 197 22
x8848:	jmp printChar	; 3: 233 187 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8851:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8856:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8858:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8862:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 172 34
x8867:	mov [bp + 24], bp	; 3: 137 110 24
x8870:	add bp, 22	; 3: 131 197 22
x8873:	jmp printChar	; 3: 233 162 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8876:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8878:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8882:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8886:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8890:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8894:	mov ax, [bp + 20]	; 3: 139 70 20
x8897:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8900:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 210 34
x8905:	mov [bp + 24], bp	; 3: 137 110 24
x8908:	add bp, 22	; 3: 131 197 22
x8911:	nop	; 1: 144
x8912:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8914:	mov ax, [bp]	; 3: 139 70 0
x8917:	mov di, [bp + 4]	; 3: 139 126 4
x8920:	mov bp, [bp + 2]	; 3: 139 110 2
x8923:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8925:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8930:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1687 unsignedValue base
x8932:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8936:	xor edx, edx	; 3: 102 49 210
x8939:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1688 £temporary1687

printUnsignedLongRec$3:	; Assign digit £temporary1688
x8943:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1689 unsignedValue base
x8946:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8950:	xor edx, edx	; 3: 102 49 210
x8953:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1689 6
x8957:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8961:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8965:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8969:	mov ax, [bp + 14]	; 3: 139 70 14
x8972:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8975:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 29 35
x8980:	mov [bp + 20], bp	; 3: 137 110 20
x8983:	add bp, 18	; 3: 131 197 18
x8986:	nop	; 1: 144
x8987:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8989:	mov ax, [bp + 16]	; 3: 139 70 16
x8992:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8995:	mov ax, [bp + 14]	; 3: 139 70 14
x8998:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x9001:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 55 35
x9006:	mov [bp + 20], bp	; 3: 137 110 20
x9009:	add bp, 18	; 3: 131 197 18
x9012:	nop	; 1: 144
x9013:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1691

printUnsignedLongRec$17:	; Assign c £temporary1691
x9015:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x9018:	mov al, [bp + 18]	; 3: 138 70 18
x9021:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x9024:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 78 35
x9029:	mov [bp + 21], bp	; 3: 137 110 21
x9032:	add bp, 19	; 3: 131 197 19
x9035:	jmp printChar	; 3: 233 0 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x9038:	mov ax, [bp]	; 3: 139 70 0
x9041:	mov di, [bp + 4]	; 3: 139 126 4
x9044:	mov bp, [bp + 2]	; 3: 139 110 2
x9047:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x9049:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x9053:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1677 digit 48
x9055:	mov bx, [bp + 6]	; 3: 139 94 6
x9058:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1678 £temporary1677
x9061:	cmp bx, 0	; 3: 131 251 0
x9064:	jge digitToChar$3	; 2: 125 4
x9066:	neg bx	; 2: 247 219
x9068:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1678

digitToChar$4:	; Return £temporary1678
x9070:	mov ax, [bp]	; 3: 139 70 0
x9073:	mov di, [bp + 4]	; 3: 139 126 4
x9076:	mov bp, [bp + 2]	; 3: 139 110 2
x9079:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9081:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9085:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1679 digit 10
x9087:	mov bx, [bp + 6]	; 3: 139 94 6
x9090:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1680 £temporary1679 65
x9093:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1681 £temporary1680
x9096:	cmp bx, 0	; 3: 131 251 0
x9099:	jge digitToChar$9	; 2: 125 4
x9101:	neg bx	; 2: 247 219
x9103:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1681

digitToChar$10:	; Return £temporary1681
x9105:	mov ax, [bp]	; 3: 139 70 0
x9108:	mov di, [bp + 4]	; 3: 139 126 4
x9111:	mov bp, [bp + 2]	; 3: 139 110 2
x9114:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1682 digit 10
x9116:	mov bx, [bp + 6]	; 3: 139 94 6
x9119:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1683 £temporary1682 97
x9122:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1684 £temporary1683
x9125:	cmp bx, 0	; 3: 131 251 0
x9128:	jge digitToChar$14	; 2: 125 4
x9130:	neg bx	; 2: 247 219
x9132:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1684

digitToChar$15:	; Return £temporary1684
x9134:	mov ax, [bp]	; 3: 139 70 0
x9137:	mov di, [bp + 4]	; 3: 139 126 4
x9140:	mov bp, [bp + 2]	; 3: 139 110 2
x9143:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9145:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9148:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9150:	fcompp	; 2: 222 217
x9152:	fstsw ax	; 3: 155 223 224
x9155:	sahf	; 1: 158
x9156:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9158:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9162:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 216 35
x9167:	mov [bp + 24], bp	; 3: 137 110 24
x9170:	add bp, 22	; 3: 131 197 22
x9173:	jmp printChar	; 3: 233 118 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9176:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1748 longDoubleValue
x9179:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9181:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9184:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9189:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9194:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1749 longDoubleValue
x9197:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x9201:	mov eax, [container4bytes#]	; 4: 102 161 81 36

printLongDoublePlain$14:	; Assign longValue £temporary1749
x9205:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9209:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9213:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9217:	mov ax, [bp + 14]	; 3: 139 70 14
x9220:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9223:	mov ax, [bp + 16]	; 3: 139 70 16
x9226:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9229:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 27 36
x9234:	mov [bp + 28], bp	; 3: 137 110 28
x9237:	add bp, 26	; 3: 131 197 26
x9240:	jmp printLongInt	; 3: 233 159 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9243:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1751 longValue
x9246:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1752 longDoubleValue £temporary1751
x9249:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9251:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9254:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9257:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9260:	mov ax, [bp + 18]	; 3: 139 70 18
x9263:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9266:	mov ax, [bp + 20]	; 3: 139 70 20
x9269:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9272:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 70 36
x9277:	mov [bp + 28], bp	; 3: 137 110 28
x9280:	add bp, 26	; 3: 131 197 26
x9283:	nop	; 1: 144
x9284:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9286:	mov ax, [bp]	; 3: 139 70 0
x9289:	mov di, [bp + 4]	; 3: 139 126 4
x9292:	mov bp, [bp + 2]	; 3: 139 110 2
x9295:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9297:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9301:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9304:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1726 longDoubleValue
x9307:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x9311:	mov eax, [container4bytes#]	; 4: 102 161 81 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1727 £temporary1726
x9315:	mov [container4bytes#], eax	; 4: 102 163 81 36
x9319:	fild dword [container4bytes#]	; 4: 219 6 81 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1728 longDoubleValue £temporary1727
x9323:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9325:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9328:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9332:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9334:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9339:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9343:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9345:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9349:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9351:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9355:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 153 36
x9360:	mov [bp + 20], bp	; 3: 137 110 20
x9363:	add bp, 18	; 3: 131 197 18
x9366:	jmp printChar	; 3: 233 181 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1734 precision
x9369:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9372:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1734 0
x9375:	cmp ax, 0	; 3: 131 248 0
x9378:	jle printLongDoubleFraction$35	; 2: 126 70

printLongDoubleFraction$17:	; PushFloat 10.0
x9380:	fld qword [@3956$float8$10.0#]	; 4: 221 6 245 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9384:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1737 10.0 longDoubleValue
x9387:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
x9389:	fstp qword [bp + 18]	; 3: 221 94 18

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
x9392:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1738 longDoubleValue10
x9395:	fistp word [container2bytes#]	; 4: 223 30 77 27
x9399:	mov ax, [container2bytes#]	; 3: 161 77 27

printLongDoubleFraction$23:	; Assign digitValue £temporary1738
x9402:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$25:	; BinaryAdd £temporary1739 digitValue 48
x9405:	mov ax, [bp + 26]	; 3: 139 70 26
x9408:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1740 £temporary1739
x9411:	cmp ax, 0	; 3: 131 248 0
x9414:	jge printLongDoubleFraction$27	; 2: 125 4
x9416:	neg ax	; 2: 247 216
x9418:	neg al	; 2: 246 216

printLongDoubleFraction$27:	; Parameter 28 £temporary1740 6
x9420:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$28:	; Call 28 printChar 0
x9423:	mov word [bp + 28], printLongDoubleFraction$29	; 5: 199 70 28 221 36
x9428:	mov [bp + 30], bp	; 3: 137 110 30
x9431:	add bp, 28	; 3: 131 197 28
x9434:	jmp printChar	; 3: 233 113 247

printLongDoubleFraction$29:	; PostCall 28

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
x9437:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$31:	; IntegralToFloating £temporary1742 digitValue
x9440:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$32:	; BinarySubtract £temporary1743 longDoubleValue10 £temporary1742
x9443:	fsub	; 2: 222 233

printLongDoubleFraction$33:	; PopFloat longDoubleValue
x9445:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$34:	; Goto 14
x9448:	jmp printLongDoubleFraction$14	; 2: 235 175

printLongDoubleFraction$35:	; Return 0
x9450:	mov ax, [bp]	; 3: 139 70 0
x9453:	mov di, [bp + 4]	; 3: 139 126 4
x9456:	mov bp, [bp + 2]	; 3: 139 110 2
x9459:	jmp ax	; 2: 255 224

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction

@3956$float8$10.0#:
x9461:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9469:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9472:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9474:	fcompp	; 2: 222 217
x9476:	fstsw ax	; 3: 155 223 224
x9479:	sahf	; 1: 158
x9480:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9482:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary623 x
x9485:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9487:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9489:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary627

fabs$9:	; Return £temporary627
x9492:	mov ax, [bp]	; 3: 139 70 0
x9495:	mov di, [bp + 4]	; 3: 139 126 4
x9498:	mov bp, [bp + 2]	; 3: 139 110 2
x9501:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9503:	mov ax, [bp + 6]	; 3: 139 70 6
x9506:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9509:	mov word [bp + 8], tolower$3	; 5: 199 70 8 51 37
x9514:	mov [bp + 10], bp	; 3: 137 110 10
x9517:	add bp, 8	; 3: 131 197 8
x9520:	jmp isupper	; 3: 233 218 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary252

tolower$5:	; Equal 31 £temporary252 0
x9523:	cmp bx, 0	; 3: 131 251 0
x9526:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9528:	mov word [bp + 8], tolower$8	; 5: 199 70 8 70 37
x9533:	mov [bp + 10], bp	; 3: 137 110 10
x9536:	add bp, 8	; 3: 131 197 8
x9539:	jmp localeconv	; 3: 233 50 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary253

tolower$10:	; Assign localeConvPtr £temporary253
x9542:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9545:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9549:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary255 -> localeConvPtr localeConvPtr 12
x9551:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary255 -> localeConvPtr
x9554:	mov ax, [si + 12]	; 3: 139 68 12
x9557:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary256 -> localeConvPtr localeConvPtr 14
x9560:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary256 -> localeConvPtr
x9563:	mov ax, [si + 14]	; 3: 139 68 14
x9566:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9569:	mov ax, [bp + 12]	; 3: 139 70 12
x9572:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9575:	mov ax, [bp + 6]	; 3: 139 70 6
x9578:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9581:	mov word [bp + 14], tolower$20	; 5: 199 70 14 123 37
x9586:	mov [bp + 16], bp	; 3: 137 110 16
x9589:	add bp, 14	; 3: 131 197 14
x9592:	jmp strchr	; 3: 233 67 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary257

tolower$22:	; BinarySubtract index £temporary257 upperCase
x9595:	sub bx, [bp + 12]	; 3: 43 94 12
x9598:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary260 lowerCase index
x9601:	mov si, [bp + 10]	; 3: 139 118 10
x9604:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary259 -> £temporary260 £temporary260 0

tolower$25:	; IntegralToIntegral £temporary261 £temporary259 -> £temporary260
x9607:	mov bl, [si]	; 2: 138 28
x9609:	and bx, 255	; 4: 129 227 255 0
x9613:	cmp bl, 0	; 3: 128 251 0
x9616:	jge tolower$26	; 2: 125 4
x9618:	neg bl	; 2: 246 219
x9620:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary261

tolower$27:	; Return £temporary261
x9622:	mov ax, [bp]	; 3: 139 70 0
x9625:	mov di, [bp + 4]	; 3: 139 126 4
x9628:	mov bp, [bp + 2]	; 3: 139 110 2
x9631:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary262 c 32
x9633:	mov bx, [bp + 6]	; 3: 139 94 6
x9636:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary262

tolower$30:	; Return £temporary262
x9639:	mov ax, [bp]	; 3: 139 70 0
x9642:	mov di, [bp + 4]	; 3: 139 126 4
x9645:	mov bp, [bp + 2]	; 3: 139 110 2
x9648:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9650:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9653:	mov ax, [bp]	; 3: 139 70 0
x9656:	mov di, [bp + 4]	; 3: 139 126 4
x9659:	mov bp, [bp + 2]	; 3: 139 110 2
x9662:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9664:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9667:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9669:	fcompp	; 2: 222 217
x9671:	fstsw ax	; 3: 155 223 224
x9674:	sahf	; 1: 158
x9675:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9677:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9681:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 223 37
x9686:	mov [bp + 26], bp	; 3: 137 110 26
x9689:	add bp, 24	; 3: 131 197 24
x9692:	jmp printChar	; 3: 233 111 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9695:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9697:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9700:	mov ax, [bp + 20]	; 3: 139 70 20
x9703:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9706:	mov ax, [bp + 18]	; 3: 139 70 18
x9709:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9712:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 254 37
x9717:	mov [bp + 26], bp	; 3: 137 110 26
x9720:	add bp, 24	; 3: 131 197 24
x9723:	jmp printLongDoubleFraction	; 3: 233 87 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9726:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9730:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1768 69
x9732:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9734:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1768 101
x9736:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1768 6
x9738:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9741:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 27 38
x9746:	mov [bp + 26], bp	; 3: 137 110 26
x9749:	add bp, 24	; 3: 131 197 24
x9752:	jmp printChar	; 3: 233 51 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9755:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9759:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 45 38
x9764:	mov [bp + 26], bp	; 3: 137 110 26
x9767:	add bp, 24	; 3: 131 197 24
x9770:	jmp printChar	; 3: 233 33 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9773:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9776:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9779:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9781:	fcompp	; 2: 222 217
x9783:	fstsw ax	; 3: 155 223 224
x9786:	sahf	; 1: 158
x9787:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9789:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9793:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 79 38
x9798:	mov [bp + 26], bp	; 3: 137 110 26
x9801:	add bp, 24	; 3: 131 197 24
x9804:	jmp printChar	; 3: 233 255 245

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9807:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1773 value
x9810:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9812:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9815:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9818:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9821:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 107 38
x9826:	mov [bp + 26], bp	; 3: 137 110 26
x9829:	add bp, 24	; 3: 131 197 24
x9832:	jmp log10	; 3: 233 196 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1774

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1775 £temporary1774
x9835:	fistp word [container2bytes#]	; 4: 223 30 77 27
x9839:	mov ax, [container2bytes#]	; 3: 161 77 27

printLongDoubleExpo$44:	; Assign expo £temporary1775
x9842:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9845:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9848:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9851:	fld qword [@4037$float8$10.0#]	; 4: 221 6 39 39

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9855:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1776 expo
x9858:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1776 14
x9861:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9864:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 150 38
x9869:	mov [bp + 36], bp	; 3: 137 110 36
x9872:	add bp, 34	; 3: 131 197 34
x9875:	jmp pow	; 3: 233 5 2

printLongDoubleExpo$52:	; PostCall 26
x9878:	fstp qword [bp + 34]	; 3: 221 94 34
x9881:	fld qword [bp + 26]	; 3: 221 70 26
x9884:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1777

printLongDoubleExpo$54:	; SignedDivide £temporary1778 value £temporary1777
x9887:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9889:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9892:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9895:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9898:	mov ax, [bp + 14]	; 3: 139 70 14
x9901:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9904:	mov ax, [bp + 16]	; 3: 139 70 16
x9907:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9910:	mov ax, [bp + 18]	; 3: 139 70 18
x9913:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9916:	mov ax, [bp + 20]	; 3: 139 70 20
x9919:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9922:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 208 38
x9927:	mov [bp + 28], bp	; 3: 137 110 28
x9930:	add bp, 26	; 3: 131 197 26
x9933:	jmp printLongDoublePlain	; 3: 233 233 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9936:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9940:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1784 69
x9942:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9944:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1784 101
x9946:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1784 6
x9948:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9951:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 237 38
x9956:	mov [bp + 28], bp	; 3: 137 110 28
x9959:	add bp, 26	; 3: 131 197 26
x9962:	jmp printChar	; 3: 233 97 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1786 expo
x9965:	mov ax, [bp + 24]	; 3: 139 70 24
x9968:	and eax, 65535	; 6: 102 37 255 255 0 0
x9974:	cmp ax, 0	; 3: 131 248 0
x9977:	jge printLongDoubleExpo$75	; 2: 125 5
x9979:	neg ax	; 2: 247 216
x9981:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1786 6
x9984:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9988:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9993:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9998:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 28 39
x10003:	mov [bp + 28], bp	; 3: 137 110 28
x10006:	add bp, 26	; 3: 131 197 26
x10009:	jmp printLongInt	; 3: 233 158 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x10012:	mov ax, [bp]	; 3: 139 70 0
x10015:	mov di, [bp + 4]	; 3: 139 126 4
x10018:	mov bp, [bp + 2]	; 3: 139 110 2
x10021:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

@4037$float8$10.0#:
x10023:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x10031:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x10034:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x10037:	mov word [bp + 14], log10$4	; 5: 199 70 14 67 39
x10042:	mov [bp + 16], bp	; 3: 137 110 16
x10045:	add bp, 14	; 3: 131 197 14
x10048:	nop	; 1: 144
x10049:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary340

log10$6:	; PushFloat 2.30
x10051:	fld qword [@926$float8$2.30#]	; 4: 221 6 84 39

log10$7:	; SignedDivide £temporary341 £temporary340 2.30
x10055:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary341

log10$9:	; Return £temporary341
x10057:	mov ax, [bp]	; 3: 139 70 0
x10060:	mov di, [bp + 4]	; 3: 139 126 4
x10063:	mov bp, [bp + 2]	; 3: 139 110 2
x10066:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

@926$float8$2.30#:
x10068:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x10076:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x10079:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 75 x 0
x10081:	fcompp	; 2: 222 217
x10083:	fstsw ax	; 3: 155 223 224
x10086:	sahf	; 1: 158
x10087:	jae log$75	; 4: 15 131 237 0

log$3:	; Assign n 0
x10091:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10096:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10099:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10101:	fcompp	; 2: 222 217
x10103:	fstsw ax	; 3: 155 223 224
x10106:	sahf	; 1: 158
x10107:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10109:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10112:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10114:	fcompp	; 2: 222 217
x10116:	fstsw ax	; 3: 155 223 224
x10119:	sahf	; 1: 158
x10120:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10122:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10125:	fld qword [@872$float8$2.71#]	; 4: 221 6 107 40

log$12:	; SignedDivide £temporary322 x 2.71
x10129:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10131:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10134:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10137:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10139:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10142:	fld qword [@878$float8$0.368#]	; 4: 221 6 115 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10146:	fcompp	; 2: 222 217
x10148:	fstsw ax	; 3: 155 223 224
x10151:	sahf	; 1: 158
x10152:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10154:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10157:	fld qword [@881$float8$0.368#]	; 4: 221 6 123 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10161:	fcompp	; 2: 222 217
x10163:	fstsw ax	; 3: 155 223 224
x10166:	sahf	; 1: 158
x10167:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10169:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10172:	fld qword [@884$float8$2.71#]	; 4: 221 6 131 40

log$24:	; SignedMultiply £temporary326 x 2.71
x10176:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10178:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10181:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10184:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10186:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10188:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10191:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10193:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10196:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10198:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10201:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10204:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary328 x 1
x10206:	fsub	; 2: 222 233

log$37:	; PopFloat x_minus_1
x10208:	fstp qword [bp + 48]	; 3: 221 94 48

log$38:	; PushFloat x_minus_1
x10211:	fld qword [bp + 48]	; 3: 221 70 48

log$39:	; PopFloat power
x10214:	fstp qword [bp + 56]	; 3: 221 94 56

log$40:	; PushFloat sign
x10217:	fld qword [bp + 40]	; 3: 221 70 40

log$41:	; PushFloat power
x10220:	fld qword [bp + 56]	; 3: 221 70 56

log$42:	; SignedMultiply £temporary329 sign power
x10223:	fmul	; 2: 222 201

log$43:	; PushFloat index
x10225:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushFloat index
x10228:	fld qword [bp + 16]	; 3: 221 70 16

log$45:	; PushOne
x10231:	fld1	; 2: 217 232

log$46:	; BinaryAdd index index 1
x10233:	fadd	; 2: 222 193

log$47:	; PopFloat index
x10235:	fstp qword [bp + 16]	; 3: 221 94 16

log$48:	; SignedDivide £temporary331 £temporary329 £temporary330
x10238:	fdiv	; 2: 222 249

log$49:	; PopFloat term
x10240:	fstp qword [bp + 24]	; 3: 221 94 24

log$50:	; PushFloat sum
x10243:	fld qword [bp + 32]	; 3: 221 70 32

log$51:	; PushFloat term
x10246:	fld qword [bp + 24]	; 3: 221 70 24

log$52:	; BinaryAdd £temporary332 sum term
x10249:	fadd	; 2: 222 193

log$53:	; PopFloat sum
x10251:	fstp qword [bp + 32]	; 3: 221 94 32

log$54:	; PushFloat power
x10254:	fld qword [bp + 56]	; 3: 221 70 56

log$55:	; PushFloat x_minus_1
x10257:	fld qword [bp + 48]	; 3: 221 70 48

log$56:	; SignedMultiply £temporary333 power x_minus_1
x10260:	fmul	; 2: 222 201

log$57:	; PopFloat power
x10262:	fstp qword [bp + 56]	; 3: 221 94 56

log$58:	; PushFloat sign
x10265:	fld qword [bp + 40]	; 3: 221 70 40

log$59:	; PushFloat -1.0
x10268:	fld qword [@911$float8$minus1.0#]	; 4: 221 6 139 40

log$60:	; SignedMultiply £temporary334 sign -1.0
x10272:	fmul	; 2: 222 201

log$61:	; PopFloat sign
x10274:	fstp qword [bp + 40]	; 3: 221 94 40

log$62:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$63:	; PushFloat term
x10277:	fld qword [bp + 24]	; 3: 221 70 24

log$64:	; Parameter 64 term 6
x10280:	fstp qword [bp + 70]	; 3: 221 94 70

log$65:	; Call 64 fabs 0
x10283:	mov word [bp + 64], log$66	; 5: 199 70 64 57 40
x10288:	mov [bp + 66], bp	; 3: 137 110 66
x10291:	add bp, 64	; 3: 131 197 64
x10294:	jmp fabs	; 3: 233 196 252

log$66:	; PostCall 64

log$67:	; GetReturnValue £temporary335

log$68:	; PushFloat 0.000000001
x10297:	fld qword [@915$float8$0.000000001#]	; 4: 221 6 147 40

log$69:	; SignedGreaterThanEqual 40 £temporary335 0.000000001
x10301:	fcompp	; 2: 222 217
x10303:	fstsw ax	; 3: 155 223 224
x10306:	sahf	; 1: 158
x10307:	jbe log$40	; 2: 118 164

log$70:	; PushFloat sum
x10309:	fld qword [bp + 32]	; 3: 221 70 32

log$71:	; IntegralToFloating £temporary337 n
x10312:	fild word [bp + 14]	; 3: 223 70 14

log$72:	; BinaryAdd £temporary338 sum £temporary337
x10315:	fadd	; 2: 222 193

log$73:	; SetReturnValue £temporary338

log$74:	; Return £temporary338
x10317:	mov ax, [bp]	; 3: 139 70 0
x10320:	mov di, [bp + 4]	; 3: 139 126 4
x10323:	mov bp, [bp + 2]	; 3: 139 110 2
x10326:	jmp ax	; 2: 255 224

log$75:	; Assign errno 6
x10328:	mov word [errno], 6	; 6: 199 6 230 10 6 0

log$76:	; PushZero
x10334:	fldz	; 2: 217 238

log$77:	; SetReturnValue 0

log$78:	; Return 0
x10336:	mov ax, [bp]	; 3: 139 70 0
x10339:	mov di, [bp + 4]	; 3: 139 126 4
x10342:	mov bp, [bp + 2]	; 3: 139 110 2
x10345:	jmp ax	; 2: 255 224

log$79:	; FunctionEnd log

@872$float8$2.71#:
x10347:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@878$float8$0.368#:
x10355:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@881$float8$0.368#:
x10363:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@884$float8$2.71#:
x10371:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@911$float8$minus1.0#:
x10379:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@915$float8$0.000000001#:
x10387:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10395:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10398:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10400:	fcompp	; 2: 222 217
x10402:	fstsw ax	; 3: 155 223 224
x10405:	sahf	; 1: 158
x10406:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10408:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10411:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10414:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10417:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10420:	mov word [bp + 30], pow$9	; 5: 199 70 30 194 40
x10425:	mov [bp + 32], bp	; 3: 137 110 32
x10428:	add bp, 30	; 3: 131 197 30
x10431:	jmp log	; 3: 233 154 254

pow$9:	; PostCall 22
x10434:	fstp qword [bp + 30]	; 3: 221 94 30
x10437:	fld qword [bp + 22]	; 3: 221 70 22
x10440:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary344

pow$11:	; SignedMultiply £temporary345 y £temporary344
x10443:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary345 6
x10445:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10448:	mov word [bp + 22], pow$14	; 5: 199 70 22 222 40
x10453:	mov [bp + 24], bp	; 3: 137 110 24
x10456:	add bp, 22	; 3: 131 197 22
x10459:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary346

pow$16:	; SetReturnValue £temporary346

pow$17:	; Return £temporary346
x10462:	mov ax, [bp]	; 3: 139 70 0
x10465:	mov di, [bp + 4]	; 3: 139 126 4
x10468:	mov bp, [bp + 2]	; 3: 139 110 2
x10471:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10473:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10476:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10478:	fcompp	; 2: 222 217
x10480:	fstsw ax	; 3: 155 223 224
x10483:	sahf	; 1: 158
x10484:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10486:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10489:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10491:	fcompp	; 2: 222 217
x10493:	fstsw ax	; 3: 155 223 224
x10496:	sahf	; 1: 158
x10497:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10499:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10501:	mov ax, [bp]	; 3: 139 70 0
x10504:	mov di, [bp + 4]	; 3: 139 126 4
x10507:	mov bp, [bp + 2]	; 3: 139 110 2
x10510:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10512:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10515:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10517:	fcompp	; 2: 222 217
x10519:	fstsw ax	; 3: 155 223 224
x10522:	sahf	; 1: 158
x10523:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10525:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10528:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10530:	fcompp	; 2: 222 217
x10532:	fstsw ax	; 3: 155 223 224
x10535:	sahf	; 1: 158
x10536:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10538:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10540:	mov ax, [bp]	; 3: 139 70 0
x10543:	mov di, [bp + 4]	; 3: 139 126 4
x10546:	mov bp, [bp + 2]	; 3: 139 110 2
x10549:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10551:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10554:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10556:	fcompp	; 2: 222 217
x10558:	fstsw ax	; 3: 155 223 224
x10561:	sahf	; 1: 158
x10562:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10566:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10569:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10572:	mov word [bp + 22], pow$43	; 5: 199 70 22 90 41
x10577:	mov [bp + 24], bp	; 3: 137 110 24
x10580:	add bp, 22	; 3: 131 197 22
x10583:	jmp floor	; 3: 233 104 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary354

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10586:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10589:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10592:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10595:	mov word [bp + 30], pow$49	; 5: 199 70 30 113 41
x10600:	mov [bp + 32], bp	; 3: 137 110 32
x10603:	add bp, 30	; 3: 131 197 30
x10606:	jmp ceil	; 3: 233 159 1

pow$49:	; PostCall 22
x10609:	fstp qword [bp + 30]	; 3: 221 94 30
x10612:	fld qword [bp + 22]	; 3: 221 70 22
x10615:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary355

pow$51:	; NotEqual 90 £temporary354 £temporary355
x10618:	fcompp	; 2: 222 217
x10620:	fstsw ax	; 3: 155 223 224
x10623:	sahf	; 1: 158
x10624:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10628:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary358 y
x10631:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x10635:	mov eax, [container4bytes#]	; 4: 102 161 81 36

pow$54:	; Assign long_y £temporary358
x10639:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary359 long_y 2
x10643:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10647:	xor edx, edx	; 3: 102 49 210
x10650:	idiv dword [@965$int4$2#]	; 5: 102 247 62 64 42

pow$56:	; NotEqual 73 £temporary359 0
x10655:	cmp edx, 0	; 4: 102 131 250 0
x10659:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10661:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10664:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10667:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary361 x
x10670:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary361 6
x10672:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10675:	mov word [bp + 34], pow$64	; 5: 199 70 34 193 41
x10680:	mov [bp + 36], bp	; 3: 137 110 36
x10683:	add bp, 34	; 3: 131 197 34
x10686:	jmp log	; 3: 233 155 253

pow$64:	; PostCall 26
x10689:	fstp qword [bp + 34]	; 3: 221 94 34
x10692:	fld qword [bp + 26]	; 3: 221 70 26
x10695:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary362

pow$66:	; SignedMultiply £temporary363 y £temporary362
x10698:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary363 6
x10700:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10703:	mov word [bp + 26], pow$69	; 5: 199 70 26 221 41
x10708:	mov [bp + 28], bp	; 3: 137 110 28
x10711:	add bp, 26	; 3: 131 197 26
x10714:	nop	; 1: 144
x10715:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary364

pow$71:	; SetReturnValue £temporary364

pow$72:	; Return £temporary364
x10717:	mov ax, [bp]	; 3: 139 70 0
x10720:	mov di, [bp + 4]	; 3: 139 126 4
x10723:	mov bp, [bp + 2]	; 3: 139 110 2
x10726:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10728:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10731:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10734:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary365 x
x10737:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary365 6
x10739:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10742:	mov word [bp + 34], pow$80	; 5: 199 70 34 4 42
x10747:	mov [bp + 36], bp	; 3: 137 110 36
x10750:	add bp, 34	; 3: 131 197 34
x10753:	jmp log	; 3: 233 88 253

pow$80:	; PostCall 26
x10756:	fstp qword [bp + 34]	; 3: 221 94 34
x10759:	fld qword [bp + 26]	; 3: 221 70 26
x10762:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary366

pow$82:	; SignedMultiply £temporary367 y £temporary366
x10765:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary367 6
x10767:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10770:	mov word [bp + 26], pow$85	; 5: 199 70 26 32 42
x10775:	mov [bp + 28], bp	; 3: 137 110 28
x10778:	add bp, 26	; 3: 131 197 26
x10781:	nop	; 1: 144
x10782:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary368

pow$87:	; UnarySubtract £temporary369 £temporary368
x10784:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary369

pow$89:	; Return £temporary369
x10786:	mov ax, [bp]	; 3: 139 70 0
x10789:	mov di, [bp + 4]	; 3: 139 126 4
x10792:	mov bp, [bp + 2]	; 3: 139 110 2
x10795:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10797:	mov word [errno], 6	; 6: 199 6 230 10 6 0

pow$91:	; PushZero
x10803:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10805:	mov ax, [bp]	; 3: 139 70 0
x10808:	mov di, [bp + 4]	; 3: 139 126 4
x10811:	mov bp, [bp + 2]	; 3: 139 110 2
x10814:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

@965$int4$2#:
x10816:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10820:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10822:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10825:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10827:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10830:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10832:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10835:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10838:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10841:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10844:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary310 power faculty
x10847:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10849:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10852:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10855:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary311 sum term
x10858:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10860:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10863:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10866:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary312 power x
x10869:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10871:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10874:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10877:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10880:	fld1	; 2: 217 232

exp$23:	; BinaryAdd £temporary314 index £temporary313
x10882:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10884:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary315 faculty index
x10887:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10889:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10892:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10895:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10898:	mov word [bp + 54], exp$31	; 5: 199 70 54 160 42
x10903:	mov [bp + 56], bp	; 3: 137 110 56
x10906:	add bp, 54	; 3: 131 197 54
x10909:	jmp fabs	; 3: 233 93 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary316

exp$33:	; PushFloat 0.000000001
x10912:	fld qword [@855$float8$0.000000001#]	; 4: 221 6 186 42

exp$34:	; SignedGreaterThanEqual 8 £temporary316 0.000000001
x10916:	fcompp	; 2: 222 217
x10918:	fstsw ax	; 3: 155 223 224
x10921:	sahf	; 1: 158
x10922:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10924:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10927:	mov ax, [bp]	; 3: 139 70 0
x10930:	mov di, [bp + 4]	; 3: 139 126 4
x10933:	mov bp, [bp + 2]	; 3: 139 110 2
x10936:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

@855$float8$0.000000001#:
x10938:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

floor:	; PushFloat x
x10946:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10949:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10951:	fcompp	; 2: 222 217
x10953:	fstsw ax	; 3: 155 223 224
x10956:	sahf	; 1: 158
x10957:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10959:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary599 x
x10962:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary599 6
x10964:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10967:	mov word [bp + 14], floor$8	; 5: 199 70 14 229 42
x10972:	mov [bp + 16], bp	; 3: 137 110 16
x10975:	add bp, 14	; 3: 131 197 14
x10978:	nop	; 1: 144
x10979:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary600

floor$10:	; UnarySubtract £temporary601 £temporary600
x10981:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary601

floor$12:	; Return £temporary601
x10983:	mov ax, [bp]	; 3: 139 70 0
x10986:	mov di, [bp + 4]	; 3: 139 126 4
x10989:	mov bp, [bp + 2]	; 3: 139 110 2
x10992:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10994:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary602 x
x10997:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x11001:	mov eax, [container4bytes#]	; 4: 102 161 81 36

floor$15:	; IntegralToFloating £temporary603 £temporary602
x11005:	mov [container4bytes#], eax	; 4: 102 163 81 36
x11009:	fild dword [container4bytes#]	; 4: 219 6 81 36

floor$16:	; SetReturnValue £temporary603

floor$17:	; Return £temporary603
x11013:	mov ax, [bp]	; 3: 139 70 0
x11016:	mov di, [bp + 4]	; 3: 139 126 4
x11019:	mov bp, [bp + 2]	; 3: 139 110 2
x11022:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x11024:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x11027:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x11029:	fcompp	; 2: 222 217
x11031:	fstsw ax	; 3: 155 223 224
x11034:	sahf	; 1: 158
x11035:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x11037:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary606 x
x11040:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary606 6
x11042:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x11045:	mov word [bp + 14], ceil$8	; 5: 199 70 14 51 43
x11050:	mov [bp + 16], bp	; 3: 137 110 16
x11053:	add bp, 14	; 3: 131 197 14
x11056:	nop	; 1: 144
x11057:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary607

ceil$10:	; UnarySubtract £temporary608 £temporary607
x11059:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary608

ceil$12:	; Return £temporary608
x11061:	mov ax, [bp]	; 3: 139 70 0
x11064:	mov di, [bp + 4]	; 3: 139 126 4
x11067:	mov bp, [bp + 2]	; 3: 139 110 2
x11070:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x11072:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x11075:	fld qword [@1467$float8$0.999999999999#]	; 4: 221 6 100 43

ceil$15:	; BinaryAdd £temporary609 x 0.999999999999
x11079:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary610 £temporary609
x11081:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x11085:	mov eax, [container4bytes#]	; 4: 102 161 81 36

ceil$17:	; IntegralToFloating £temporary611 £temporary610
x11089:	mov [container4bytes#], eax	; 4: 102 163 81 36
x11093:	fild dword [container4bytes#]	; 4: 219 6 81 36

ceil$18:	; SetReturnValue £temporary611

ceil$19:	; Return £temporary611
x11097:	mov ax, [bp]	; 3: 139 70 0
x11100:	mov di, [bp + 4]	; 3: 139 126 4
x11103:	mov bp, [bp + 2]	; 3: 139 110 2
x11106:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

@1467$float8$0.999999999999#:
x11108:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11116:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11120:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11122:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11126:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary195 1
x11128:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11131:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary195 0
x11133:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary195

isdigit$6:	; Return £temporary195
x11136:	mov ax, [bp]	; 3: 139 70 0
x11139:	mov di, [bp + 4]	; 3: 139 126 4
x11142:	mov bp, [bp + 2]	; 3: 139 110 2
x11145:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11147:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11150:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11153:	mov word [bp + 14], sin$4	; 5: 199 70 14 159 43
x11158:	mov [bp + 16], bp	; 3: 137 110 16
x11161:	add bp, 14	; 3: 131 197 14
x11164:	jmp fabs	; 3: 233 94 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary449

sin$6:	; PushFloat 6.28
x11167:	fld qword [@1129$float8$6.28#]	; 4: 221 6 102 44

sin$7:	; SignedLessThanEqual 17 £temporary449 6.28
x11171:	fcompp	; 2: 222 217
x11173:	fstsw ax	; 3: 155 223 224
x11176:	sahf	; 1: 158
x11177:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11179:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11182:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11185:	fld qword [@1134$float8$6.28#]	; 4: 221 6 110 44

sin$12:	; Parameter 14 6.28 14
x11189:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11192:	mov word [bp + 14], sin$14	; 5: 199 70 14 198 43
x11197:	mov [bp + 16], bp	; 3: 137 110 16
x11200:	add bp, 14	; 3: 131 197 14
x11203:	jmp fmod	; 3: 233 192 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary451

sin$16:	; PopFloat x
x11206:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11209:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11211:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11214:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11216:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11219:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11221:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11224:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11227:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11230:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11232:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11235:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11238:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary452 sign power
x11241:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11243:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary453 £temporary452 faculty
x11246:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11248:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11251:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11254:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary454 sum term
x11257:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11259:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11262:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11265:	fld qword [@1156$float8$minus1#]	; 4: 221 6 118 44

sin$39:	; SignedMultiply £temporary455 sign -1
x11269:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11271:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11274:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11277:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11280:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary456 x x
x11283:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary457 power £temporary456
x11285:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11287:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11290:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11293:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11296:	fld1	; 2: 217 232

sin$50:	; BinaryAdd £temporary459 index £temporary458
x11298:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11300:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11303:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11306:	fld1	; 2: 217 232

sin$54:	; BinaryAdd £temporary461 index £temporary460
x11308:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11310:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary462 index index
x11313:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary463 faculty £temporary462
x11315:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11317:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11320:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11323:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11326:	mov word [bp + 62], sin$63	; 5: 199 70 62 76 44
x11331:	mov [bp + 64], bp	; 3: 137 110 64
x11334:	add bp, 62	; 3: 131 197 62
x11337:	jmp fabs	; 3: 233 177 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary464

sin$65:	; PushFloat 0.000000001
x11340:	fld qword [@1167$float8$0.000000001#]	; 4: 221 6 126 44

sin$66:	; SignedGreaterThanEqual 27 £temporary464 0.000000001
x11344:	fcompp	; 2: 222 217
x11346:	fstsw ax	; 3: 155 223 224
x11349:	sahf	; 1: 158
x11350:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11352:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11355:	mov ax, [bp]	; 3: 139 70 0
x11358:	mov di, [bp + 4]	; 3: 139 126 4
x11361:	mov bp, [bp + 2]	; 3: 139 110 2
x11364:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

@1129$float8$6.28#:
x11366:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1134$float8$6.28#:
x11374:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1156$float8$minus1#:
x11382:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1167$float8$0.000000001#:
x11390:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

fmod:	; PushFloat y
x11398:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11401:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11403:	fcompp	; 2: 222 217
x11405:	fstsw ax	; 3: 155 223 224
x11408:	sahf	; 1: 158
x11409:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11411:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11414:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11417:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11420:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary436 x y
x11423:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary437 £temporary436
x11425:	fistp word [container2bytes#]	; 4: 223 30 77 27
x11429:	mov ax, [container2bytes#]	; 3: 161 77 27

fmod$10:	; IntegralToFloating £temporary438 £temporary437
x11432:	mov [container2bytes#], ax	; 3: 163 77 27
x11435:	fild word [container2bytes#]	; 4: 223 6 77 27

fmod$11:	; SignedMultiply £temporary439 y £temporary438
x11439:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary440 x £temporary439
x11441:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary440 6
x11443:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11446:	mov word [bp + 22], fmod$15	; 5: 199 70 22 196 44
x11451:	mov [bp + 24], bp	; 3: 137 110 24
x11454:	add bp, 22	; 3: 131 197 22
x11457:	jmp fabs	; 3: 233 57 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary441

fmod$17:	; PopFloat remainder
x11460:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11463:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11466:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11468:	fcompp	; 2: 222 217
x11470:	fstsw ax	; 3: 155 223 224
x11473:	sahf	; 1: 158
x11474:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11476:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11479:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11481:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary443 remainder
x11484:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary447

fmod$27:	; Return £temporary447
x11486:	mov ax, [bp]	; 3: 139 70 0
x11489:	mov di, [bp + 4]	; 3: 139 126 4
x11492:	mov bp, [bp + 2]	; 3: 139 110 2
x11495:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11497:	mov word [errno], 6	; 6: 199 6 230 10 6 0

fmod$29:	; PushZero
x11503:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11505:	mov ax, [bp]	; 3: 139 70 0
x11508:	mov di, [bp + 4]	; 3: 139 126 4
x11511:	mov bp, [bp + 2]	; 3: 139 110 2
x11514:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11516:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11519:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11522:	mov word [bp + 14], cos$4	; 5: 199 70 14 16 45
x11527:	mov [bp + 16], bp	; 3: 137 110 16
x11530:	add bp, 14	; 3: 131 197 14
x11533:	jmp fabs	; 3: 233 237 247

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary470

cos$6:	; PushFloat 6.28
x11536:	fld qword [@1178$float8$6.28#]	; 4: 221 6 214 45

cos$7:	; SignedLessThanEqual 17 £temporary470 6.28
x11540:	fcompp	; 2: 222 217
x11542:	fstsw ax	; 3: 155 223 224
x11545:	sahf	; 1: 158
x11546:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11548:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11551:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11554:	fld qword [@1183$float8$6.28#]	; 4: 221 6 222 45

cos$12:	; Parameter 14 6.28 14
x11558:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11561:	mov word [bp + 14], cos$14	; 5: 199 70 14 55 45
x11566:	mov [bp + 16], bp	; 3: 137 110 16
x11569:	add bp, 14	; 3: 131 197 14
x11572:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary472

cos$16:	; PopFloat x
x11575:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11578:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11580:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11583:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11585:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11588:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11590:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11593:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11595:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11598:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11600:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11603:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11606:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary473 sign power
x11609:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11611:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary474 £temporary473 faculty
x11614:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11616:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11619:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11622:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary475 sum term
x11625:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11627:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11630:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11633:	fld qword [@1207$float8$minus1#]	; 4: 221 6 230 45

cos$39:	; SignedMultiply £temporary476 sign -1
x11637:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11639:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11642:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11645:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11648:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary477 x x
x11651:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary478 power £temporary477
x11653:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11655:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11658:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11661:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11664:	fld1	; 2: 217 232

cos$50:	; BinaryAdd £temporary480 index £temporary479
x11666:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11668:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11671:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11674:	fld1	; 2: 217 232

cos$54:	; BinaryAdd £temporary482 index £temporary481
x11676:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11678:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary483 index index
x11681:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary484 faculty £temporary483
x11683:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11685:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11688:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11691:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11694:	mov word [bp + 62], cos$63	; 5: 199 70 62 188 45
x11699:	mov [bp + 64], bp	; 3: 137 110 64
x11702:	add bp, 62	; 3: 131 197 62
x11705:	jmp fabs	; 3: 233 65 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary485

cos$65:	; PushFloat 0.000000001
x11708:	fld qword [@1218$float8$0.000000001#]	; 4: 221 6 238 45

cos$66:	; SignedGreaterThanEqual 27 £temporary485 0.000000001
x11712:	fcompp	; 2: 222 217
x11714:	fstsw ax	; 3: 155 223 224
x11717:	sahf	; 1: 158
x11718:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11720:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11723:	mov ax, [bp]	; 3: 139 70 0
x11726:	mov di, [bp + 4]	; 3: 139 126 4
x11729:	mov bp, [bp + 2]	; 3: 139 110 2
x11732:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

@1178$float8$6.28#:
x11734:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1183$float8$6.28#:
x11742:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1207$float8$minus1#:
x11750:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1218$float8$0.000000001#:
x11758:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11766:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11769:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11772:	mov word [bp + 14], tan$4	; 5: 199 70 14 10 46
x11777:	mov [bp + 16], bp	; 3: 137 110 16
x11780:	add bp, 14	; 3: 131 197 14
x11783:	jmp cos	; 3: 233 242 254

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary491

tan$6:	; PopFloat cos_of_x
x11786:	fstp qword [bp + 14]	; 3: 221 94 14

tan$7:	; PushFloat cos_of_x
x11789:	fld qword [bp + 14]	; 3: 221 70 14

tan$8:	; PushZero
x11792:	fldz	; 2: 217 238

tan$9:	; Equal 20 cos_of_x 0
x11794:	fcompp	; 2: 222 217
x11796:	fstsw ax	; 3: 155 223 224
x11799:	sahf	; 1: 158
x11800:	je tan$20	; 2: 116 36

tan$10:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$11:	; PushFloat x
x11802:	fld qword [bp + 6]	; 3: 221 70 6

tan$12:	; Parameter 22 x 6
x11805:	fstp qword [bp + 28]	; 3: 221 94 28

tan$13:	; Call 22 sin 0
x11808:	mov word [bp + 22], tan$14	; 5: 199 70 22 46 46
x11813:	mov [bp + 24], bp	; 3: 137 110 24
x11816:	add bp, 22	; 3: 131 197 22
x11819:	jmp sin	; 3: 233 93 253

tan$14:	; PostCall 22

tan$15:	; GetReturnValue £temporary493

tan$16:	; PushFloat cos_of_x
x11822:	fld qword [bp + 14]	; 3: 221 70 14

tan$17:	; SignedDivide £temporary494 £temporary493 cos_of_x
x11825:	fdiv	; 2: 222 249

tan$18:	; SetReturnValue £temporary494

tan$19:	; Return £temporary494
x11827:	mov ax, [bp]	; 3: 139 70 0
x11830:	mov di, [bp + 4]	; 3: 139 126 4
x11833:	mov bp, [bp + 2]	; 3: 139 110 2
x11836:	jmp ax	; 2: 255 224

tan$20:	; Assign errno 6
x11838:	mov word [errno], 6	; 6: 199 6 230 10 6 0

tan$21:	; PushZero
x11844:	fldz	; 2: 217 238

tan$22:	; SetReturnValue 0

tan$23:	; Return 0
x11846:	mov ax, [bp]	; 3: 139 70 0
x11849:	mov di, [bp + 4]	; 3: 139 126 4
x11852:	mov bp, [bp + 2]	; 3: 139 110 2
x11855:	jmp ax	; 2: 255 224

tan$24:	; FunctionEnd tan

asin:	; PushFloat x
x11857:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11860:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11862:	fcompp	; 2: 222 217
x11864:	fstsw ax	; 3: 155 223 224
x11867:	sahf	; 1: 158
x11868:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11870:	fld qword [@1244$float8$1.57#]	; 4: 221 6 7 47

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11874:	mov ax, [bp]	; 3: 139 70 0
x11877:	mov di, [bp + 4]	; 3: 139 126 4
x11880:	mov bp, [bp + 2]	; 3: 139 110 2
x11883:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11885:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11888:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11890:	fcompp	; 2: 222 217
x11892:	fstsw ax	; 3: 155 223 224
x11895:	sahf	; 1: 158
x11896:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11898:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary499 x
x11901:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary499 6
x11903:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11906:	mov word [bp + 14], asin$14	; 5: 199 70 14 144 46
x11911:	mov [bp + 16], bp	; 3: 137 110 16
x11914:	add bp, 14	; 3: 131 197 14
x11917:	nop	; 1: 144
x11918:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary500

asin$16:	; UnarySubtract £temporary501 £temporary500
x11920:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary501

asin$18:	; Return £temporary501
x11922:	mov ax, [bp]	; 3: 139 70 0
x11925:	mov di, [bp + 4]	; 3: 139 126 4
x11928:	mov bp, [bp + 2]	; 3: 139 110 2
x11931:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11933:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11936:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11938:	fcompp	; 2: 222 217
x11940:	fstsw ax	; 3: 155 223 224
x11943:	sahf	; 1: 158
x11944:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11946:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11949:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11952:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11954:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11957:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary503 x x
x11960:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary504 1 £temporary503
x11962:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary504 6
x11964:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11967:	mov word [bp + 22], asin$32	; 5: 199 70 22 205 46
x11972:	mov [bp + 24], bp	; 3: 137 110 24
x11975:	add bp, 22	; 3: 131 197 22
x11978:	nop	; 1: 144
x11979:	jmp sqrt	; 2: 235 66

asin$32:	; PostCall 14
x11981:	fstp qword [bp + 22]	; 3: 221 94 22
x11984:	fld qword [bp + 14]	; 3: 221 70 14
x11987:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary505

asin$34:	; SignedDivide £temporary506 x £temporary505
x11990:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary506 6
x11992:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11995:	mov word [bp + 14], asin$37	; 5: 199 70 14 233 46
x12000:	mov [bp + 16], bp	; 3: 137 110 16
x12003:	add bp, 14	; 3: 131 197 14
x12006:	jmp atan	; 3: 233 170 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary507

asin$39:	; SetReturnValue £temporary507

asin$40:	; Return £temporary507
x12009:	mov ax, [bp]	; 3: 139 70 0
x12012:	mov di, [bp + 4]	; 3: 139 126 4
x12015:	mov bp, [bp + 2]	; 3: 139 110 2
x12018:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x12020:	mov word [errno], 6	; 6: 199 6 230 10 6 0

asin$42:	; PushZero
x12026:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x12028:	mov ax, [bp]	; 3: 139 70 0
x12031:	mov di, [bp + 4]	; 3: 139 126 4
x12034:	mov bp, [bp + 2]	; 3: 139 110 2
x12037:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

@1244$float8$1.57#:
x12039:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

sqrt:	; PushFloat x
x12047:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x12050:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 28 x 0
x12052:	fcompp	; 2: 222 217
x12054:	fstsw ax	; 3: 155 223 224
x12057:	sahf	; 1: 158
x12058:	ja sqrt$28	; 2: 119 84

sqrt$3:	; PushOne
x12060:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x12062:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x12065:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; PopFloat root_i
x12068:	fstp qword [bp + 14]	; 3: 221 94 14

sqrt$7:	; PushFloat root_i
x12071:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$8:	; PushFloat x
x12074:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$9:	; PushFloat root_i
x12077:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$10:	; SignedDivide £temporary409 x root_i
x12080:	fdiv	; 2: 222 249

sqrt$11:	; BinaryAdd £temporary410 root_i £temporary409
x12082:	fadd	; 2: 222 193

sqrt$12:	; PushFloat 2
x12084:	fld qword [@1061$float8$2#]	; 4: 221 6 131 47

sqrt$13:	; SignedDivide £temporary411 £temporary410 2
x12088:	fdiv	; 2: 222 249

sqrt$14:	; PopFloat root_i_plus_1
x12090:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$15:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$16:	; PushFloat root_i_plus_1
x12093:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$17:	; PushFloat root_i
x12096:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$18:	; BinarySubtract £temporary412 root_i_plus_1 root_i
x12099:	fsub	; 2: 222 233

sqrt$19:	; Parameter 30 £temporary412 6
x12101:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$20:	; Call 30 fabs 0
x12104:	mov word [bp + 30], sqrt$21	; 5: 199 70 30 86 47
x12109:	mov [bp + 32], bp	; 3: 137 110 32
x12112:	add bp, 30	; 3: 131 197 30
x12115:	jmp fabs	; 3: 233 167 245

sqrt$21:	; PostCall 30

sqrt$22:	; GetReturnValue £temporary413

sqrt$23:	; PushFloat 0.000000001
x12118:	fld qword [@1065$float8$0.000000001#]	; 4: 221 6 139 47

sqrt$24:	; SignedGreaterThanEqual 5 £temporary413 0.000000001
x12122:	fcompp	; 2: 222 217
x12124:	fstsw ax	; 3: 155 223 224
x12127:	sahf	; 1: 158
x12128:	jbe sqrt$5	; 2: 118 191

sqrt$25:	; PushFloat root_i_plus_1
x12130:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$26:	; SetReturnValue root_i_plus_1

sqrt$27:	; Return root_i_plus_1
x12133:	mov ax, [bp]	; 3: 139 70 0
x12136:	mov di, [bp + 4]	; 3: 139 126 4
x12139:	mov bp, [bp + 2]	; 3: 139 110 2
x12142:	jmp ax	; 2: 255 224

sqrt$28:	; Assign errno 6
x12144:	mov word [errno], 6	; 6: 199 6 230 10 6 0

sqrt$29:	; PushZero
x12150:	fldz	; 2: 217 238

sqrt$30:	; SetReturnValue 0

sqrt$31:	; Return 0
x12152:	mov ax, [bp]	; 3: 139 70 0
x12155:	mov di, [bp + 4]	; 3: 139 126 4
x12158:	mov bp, [bp + 2]	; 3: 139 110 2
x12161:	jmp ax	; 2: 255 224

sqrt$32:	; FunctionEnd sqrt

@1061$float8$2#:
x12163:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1065$float8$0.000000001#:
x12171:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

atan:	; PushFloat x
x12179:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x12182:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x12184:	fcompp	; 2: 222 217
x12186:	fstsw ax	; 3: 155 223 224
x12189:	sahf	; 1: 158
x12190:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12192:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary526 x
x12195:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary526 6
x12197:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12200:	mov word [bp + 14], atan$8	; 5: 199 70 14 182 47
x12205:	mov [bp + 16], bp	; 3: 137 110 16
x12208:	add bp, 14	; 3: 131 197 14
x12211:	nop	; 1: 144
x12212:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary527

atan$10:	; UnarySubtract £temporary528 £temporary527
x12214:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary528

atan$12:	; Return £temporary528
x12216:	mov ax, [bp]	; 3: 139 70 0
x12219:	mov di, [bp + 4]	; 3: 139 126 4
x12222:	mov bp, [bp + 2]	; 3: 139 110 2
x12225:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12227:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12230:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12232:	fcompp	; 2: 222 217
x12234:	fstsw ax	; 3: 155 223 224
x12237:	sahf	; 1: 158
x12238:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12240:	fld qword [@1312$float8$1.57#]	; 4: 221 6 252 48

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12244:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12247:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12249:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary530 1 x
x12252:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary530 6
x12254:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12257:	mov word [bp + 22], atan$23	; 5: 199 70 22 239 47
x12262:	mov [bp + 24], bp	; 3: 137 110 24
x12265:	add bp, 22	; 3: 131 197 22
x12268:	nop	; 1: 144
x12269:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12271:	fstp qword [bp + 22]	; 3: 221 94 22
x12274:	fld qword [bp + 14]	; 3: 221 70 14
x12277:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary531

atan$25:	; BinarySubtract £temporary532 1.57 £temporary531
x12280:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary532

atan$27:	; Return £temporary532
x12282:	mov ax, [bp]	; 3: 139 70 0
x12285:	mov di, [bp + 4]	; 3: 139 126 4
x12288:	mov bp, [bp + 2]	; 3: 139 110 2
x12291:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12293:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12296:	fld qword [@1319$float8$0.5#]	; 4: 221 6 4 49

atan$30:	; SignedLessThanEqual 54 x 0.5
x12300:	fcompp	; 2: 222 217
x12302:	fstsw ax	; 3: 155 223 224
x12305:	sahf	; 1: 158
x12306:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12308:	fld qword [@1333$float8$2#]	; 4: 221 6 12 49

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12312:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12315:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12318:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12320:	fstp qword [bp + 22]	; 3: 221 94 22
x12323:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12326:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12328:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12331:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary534 x x
x12334:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary535 1 £temporary534
x12336:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary535 14
x12338:	fstp qword [bp + 52]	; 3: 221 94 52

atan$42:	; Call 14 sqrt 0
x12341:	mov word [bp + 46], atan$43	; 5: 199 70 46 67 48
x12346:	mov [bp + 48], bp	; 3: 137 110 48
x12349:	add bp, 46	; 3: 131 197 46
x12352:	jmp sqrt	; 3: 233 204 254

atan$43:	; PostCall 14
x12355:	fstp qword [bp + 38]	; 3: 221 94 38
x12358:	fld qword [bp + 30]	; 3: 221 70 30
x12361:	fld qword [bp + 22]	; 3: 221 70 22
x12364:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary536

atan$45:	; BinaryAdd £temporary537 1 £temporary536
x12367:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary538 x £temporary537
x12369:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary538 6
x12371:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12374:	mov word [bp + 22], atan$49	; 5: 199 70 22 100 48
x12379:	mov [bp + 24], bp	; 3: 137 110 24
x12382:	add bp, 22	; 3: 131 197 22
x12385:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12388:	fstp qword [bp + 22]	; 3: 221 94 22
x12391:	fld qword [bp + 14]	; 3: 221 70 14
x12394:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary539

atan$51:	; SignedMultiply £temporary540 2 £temporary539
x12397:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary540

atan$53:	; Return £temporary540
x12399:	mov ax, [bp]	; 3: 139 70 0
x12402:	mov di, [bp + 4]	; 3: 139 126 4
x12405:	mov bp, [bp + 2]	; 3: 139 110 2
x12408:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12410:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12412:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12415:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12417:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12420:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12422:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12425:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12428:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12431:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12434:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary541 sign product
x12437:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12439:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary542 £temporary541 denominator
x12442:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12444:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12447:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12450:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary543 sum term
x12453:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12455:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12458:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary544 sign
x12461:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12463:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12466:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12469:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12472:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary545 x x
x12475:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary546 product £temporary545
x12477:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12479:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12482:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12485:	fld qword [@1353$float8$2#]	; 4: 221 6 20 49

atan$83:	; BinaryAdd £temporary547 denominator 2
x12489:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12491:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12494:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12497:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12500:	mov word [bp + 54], atan$89	; 5: 199 70 54 226 48
x12505:	mov [bp + 56], bp	; 3: 137 110 56
x12508:	add bp, 54	; 3: 131 197 54
x12511:	jmp fabs	; 3: 233 27 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary548

atan$91:	; PushFloat 0.000000001
x12514:	fld qword [@1356$float8$0.000000001#]	; 4: 221 6 28 49

atan$92:	; SignedGreaterThanEqual 62 £temporary548 0.000000001
x12518:	fcompp	; 2: 222 217
x12520:	fstsw ax	; 3: 155 223 224
x12523:	sahf	; 1: 158
x12524:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12526:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12529:	mov ax, [bp]	; 3: 139 70 0
x12532:	mov di, [bp + 4]	; 3: 139 126 4
x12535:	mov bp, [bp + 2]	; 3: 139 110 2
x12538:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

@1312$float8$1.57#:
x12540:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1319$float8$0.5#:
x12548:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

@1333$float8$2#:
x12556:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1353$float8$2#:
x12564:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1356$float8$0.000000001#:
x12572:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

acos:	; PushFloat x
x12580:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12583:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12585:	fcompp	; 2: 222 217
x12587:	fstsw ax	; 3: 155 223 224
x12590:	sahf	; 1: 158
x12591:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12593:	fld qword [@1274$float8$1.57#]	; 4: 221 6 222 49

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12597:	mov ax, [bp]	; 3: 139 70 0
x12600:	mov di, [bp + 4]	; 3: 139 126 4
x12603:	mov bp, [bp + 2]	; 3: 139 110 2
x12606:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12608:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12611:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12613:	fcompp	; 2: 222 217
x12615:	fstsw ax	; 3: 155 223 224
x12618:	sahf	; 1: 158
x12619:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12621:	fld qword [@1279$float8$3.14#]	; 4: 221 6 230 49

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12625:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12628:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary513 x
x12631:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary513 6
x12633:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12636:	mov word [bp + 22], acos$15	; 5: 199 70 22 106 49
x12641:	mov [bp + 24], bp	; 3: 137 110 24
x12644:	add bp, 22	; 3: 131 197 22
x12647:	nop	; 1: 144
x12648:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12650:	fstp qword [bp + 22]	; 3: 221 94 22
x12653:	fld qword [bp + 14]	; 3: 221 70 14
x12656:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary514

acos$17:	; BinarySubtract £temporary515 3.14 £temporary514
x12659:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary515

acos$19:	; Return £temporary515
x12661:	mov ax, [bp]	; 3: 139 70 0
x12664:	mov di, [bp + 4]	; 3: 139 126 4
x12667:	mov bp, [bp + 2]	; 3: 139 110 2
x12670:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12672:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12675:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12677:	fcompp	; 2: 222 217
x12679:	fstsw ax	; 3: 155 223 224
x12682:	sahf	; 1: 158
x12683:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12685:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12687:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12690:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary517 x x
x12693:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary518 1 £temporary517
x12695:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary518 6
x12697:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12700:	mov word [bp + 14], acos$32	; 5: 199 70 14 170 49
x12705:	mov [bp + 16], bp	; 3: 137 110 16
x12708:	add bp, 14	; 3: 131 197 14
x12711:	jmp sqrt	; 3: 233 101 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary519

acos$34:	; PushFloat x
x12714:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary520 £temporary519 x
x12717:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary520 6
x12719:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12722:	mov word [bp + 14], acos$38	; 5: 199 70 14 192 49
x12727:	mov [bp + 16], bp	; 3: 137 110 16
x12730:	add bp, 14	; 3: 131 197 14
x12733:	jmp atan	; 3: 233 211 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary521

acos$40:	; SetReturnValue £temporary521

acos$41:	; Return £temporary521
x12736:	mov ax, [bp]	; 3: 139 70 0
x12739:	mov di, [bp + 4]	; 3: 139 126 4
x12742:	mov bp, [bp + 2]	; 3: 139 110 2
x12745:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12747:	mov word [errno], 6	; 6: 199 6 230 10 6 0

acos$43:	; PushZero
x12753:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12755:	mov ax, [bp]	; 3: 139 70 0
x12758:	mov di, [bp + 4]	; 3: 139 126 4
x12761:	mov bp, [bp + 2]	; 3: 139 110 2
x12764:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

@1274$float8$1.57#:
x12766:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1279$float8$3.14#:
x12774:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12782:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12785:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12788:	mov word [bp + 14], sinh$4	; 5: 199 70 14 2 50
x12793:	mov [bp + 16], bp	; 3: 137 110 16
x12796:	add bp, 14	; 3: 131 197 14
x12799:	jmp exp	; 3: 233 66 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary579

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12802:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12805:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary580 x
x12808:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary580 6
x12810:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12813:	mov word [bp + 22], sinh$11	; 5: 199 70 22 27 50
x12818:	mov [bp + 24], bp	; 3: 137 110 24
x12821:	add bp, 22	; 3: 131 197 22
x12824:	jmp exp	; 3: 233 41 248

sinh$11:	; PostCall 14
x12827:	fstp qword [bp + 22]	; 3: 221 94 22
x12830:	fld qword [bp + 14]	; 3: 221 70 14
x12833:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary581

sinh$13:	; BinarySubtract £temporary582 £temporary579 £temporary581
x12836:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12838:	fld qword [@1430$float8$2#]	; 4: 221 6 55 50

sinh$15:	; SignedDivide £temporary583 £temporary582 2
x12842:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary583

sinh$17:	; Return £temporary583
x12844:	mov ax, [bp]	; 3: 139 70 0
x12847:	mov di, [bp + 4]	; 3: 139 126 4
x12850:	mov bp, [bp + 2]	; 3: 139 110 2
x12853:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

@1430$float8$2#:
x12855:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12863:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12866:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12869:	mov word [bp + 14], cosh$4	; 5: 199 70 14 83 50
x12874:	mov [bp + 16], bp	; 3: 137 110 16
x12877:	add bp, 14	; 3: 131 197 14
x12880:	jmp exp	; 3: 233 241 247

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary586

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12883:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12886:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary587 x
x12889:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary587 6
x12891:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12894:	mov word [bp + 22], cosh$11	; 5: 199 70 22 108 50
x12899:	mov [bp + 24], bp	; 3: 137 110 24
x12902:	add bp, 22	; 3: 131 197 22
x12905:	jmp exp	; 3: 233 216 247

cosh$11:	; PostCall 14
x12908:	fstp qword [bp + 22]	; 3: 221 94 22
x12911:	fld qword [bp + 14]	; 3: 221 70 14
x12914:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary588

cosh$13:	; BinaryAdd £temporary589 £temporary586 £temporary588
x12917:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12919:	fld qword [@1440$float8$2#]	; 4: 221 6 136 50

cosh$15:	; SignedDivide £temporary590 £temporary589 2
x12923:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary590

cosh$17:	; Return £temporary590
x12925:	mov ax, [bp]	; 3: 139 70 0
x12928:	mov di, [bp + 4]	; 3: 139 126 4
x12931:	mov bp, [bp + 2]	; 3: 139 110 2
x12934:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

@1440$float8$2#:
x12936:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12944:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12947:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12950:	mov word [bp + 14], tanh$4	; 5: 199 70 14 164 50
x12955:	mov [bp + 16], bp	; 3: 137 110 16
x12958:	add bp, 14	; 3: 131 197 14
x12961:	jmp sinh	; 3: 233 74 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary593

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12964:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12967:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12970:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12973:	mov word [bp + 22], tanh$10	; 5: 199 70 22 187 50
x12978:	mov [bp + 24], bp	; 3: 137 110 24
x12981:	add bp, 22	; 3: 131 197 22
x12984:	nop	; 1: 144
x12985:	jmp cosh	; 2: 235 132

tanh$10:	; PostCall 14
x12987:	fstp qword [bp + 22]	; 3: 221 94 22
x12990:	fld qword [bp + 14]	; 3: 221 70 14
x12993:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary594

tanh$12:	; SignedDivide £temporary595 £temporary593 £temporary594
x12996:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary595

tanh$14:	; Return £temporary595
x12998:	mov ax, [bp]	; 3: 139 70 0
x13001:	mov di, [bp + 4]	; 3: 139 126 4
x13004:	mov bp, [bp + 2]	; 3: 139 110 2
x13007:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x13009:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x13012:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x13014:	fcompp	; 2: 222 217
x13016:	fstsw ax	; 3: 155 223 224
x13019:	sahf	; 1: 158
x13020:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x13024:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x13027:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x13030:	mov word [bp + 16], frexp$8	; 5: 199 70 16 244 50
x13035:	mov [bp + 18], bp	; 3: 137 110 18
x13038:	add bp, 16	; 3: 131 197 16
x13041:	jmp fabs	; 3: 233 9 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary388

frexp$10:	; Parameter 16 £temporary388 6
x13044:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x13047:	mov word [bp + 16], frexp$12	; 5: 199 70 16 5 51
x13052:	mov [bp + 18], bp	; 3: 137 110 18
x13055:	add bp, 16	; 3: 131 197 16
x13058:	jmp @1000$log2	; 3: 233 155 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary389

frexp$14:	; IntegralToIntegral £temporary390 £temporary389

frexp$15:	; Assign exponent £temporary390
x13061:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x13064:	fld qword [@1016$float8$2#]	; 4: 221 6 144 51

frexp$18:	; Parameter 18 2 6
x13068:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary391 exponent
x13071:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary391 14
x13074:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x13077:	mov word [bp + 18], frexp$22	; 5: 199 70 18 35 51
x13082:	mov [bp + 20], bp	; 3: 137 110 20
x13085:	add bp, 18	; 3: 131 197 18
x13088:	jmp pow	; 3: 233 120 245

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary392

frexp$24:	; PushFloat x
x13091:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary392 x
x13094:	fcompp	; 2: 222 217
x13096:	fstsw ax	; 3: 155 223 224
x13099:	sahf	; 1: 158
x13100:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x13102:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x13105:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13109:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary396 -> p p 0
x13111:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary396 -> p exponent
x13114:	mov ax, [bp + 16]	; 3: 139 70 16
x13117:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x13119:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13122:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x13125:	fld qword [@1030$float8$2#]	; 4: 221 6 152 51

frexp$33:	; Parameter 18 2 6
x13129:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary397 exponent
x13132:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary397 14
x13135:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x13138:	mov word [bp + 26], frexp$37	; 5: 199 70 26 96 51
x13143:	mov [bp + 28], bp	; 3: 137 110 28
x13146:	add bp, 26	; 3: 131 197 26
x13149:	jmp pow	; 3: 233 59 245

frexp$37:	; PostCall 18
x13152:	fstp qword [bp + 26]	; 3: 221 94 26
x13155:	fld qword [bp + 18]	; 3: 221 70 18
x13158:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary398

frexp$39:	; SignedDivide £temporary399 x £temporary398
x13161:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary399

frexp$41:	; Return £temporary399
x13163:	mov ax, [bp]	; 3: 139 70 0
x13166:	mov di, [bp + 4]	; 3: 139 126 4
x13169:	mov bp, [bp + 2]	; 3: 139 110 2
x13172:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x13174:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13178:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary401 -> p p 0
x13180:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary401 -> p 0
x13183:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x13187:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x13189:	mov ax, [bp]	; 3: 139 70 0
x13192:	mov di, [bp + 4]	; 3: 139 126 4
x13195:	mov bp, [bp + 2]	; 3: 139 110 2
x13198:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@1016$float8$2#:
x13200:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1030$float8$2#:
x13208:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1000$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1000$log2$1:	; PushFloat x
x13216:	fld qword [bp + 6]	; 3: 221 70 6

@1000$log2$2:	; Parameter 14 x 6
x13219:	fstp qword [bp + 20]	; 3: 221 94 20

@1000$log2$3:	; Call 14 log 0
x13222:	mov word [bp + 14], @1000$log2$4	; 5: 199 70 14 180 51
x13227:	mov [bp + 16], bp	; 3: 137 110 16
x13230:	add bp, 14	; 3: 131 197 14
x13233:	jmp log	; 3: 233 168 243

@1000$log2$4:	; PostCall 14

@1000$log2$5:	; GetReturnValue £temporary383

@1000$log2$6:	; PushFloat 0.693
x13236:	fld qword [@1002$float8$0.693#]	; 4: 221 6 205 51

@1000$log2$7:	; SignedDivide £temporary384 £temporary383 0.693
x13240:	fdiv	; 2: 222 249

@1000$log2$8:	; FloatingToIntegral £temporary385 £temporary384
x13242:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13246:	mov bx, [container2bytes#]	; 4: 139 30 77 27

@1000$log2$9:	; SetReturnValue £temporary385

@1000$log2$10:	; Return £temporary385
x13250:	mov ax, [bp]	; 3: 139 70 0
x13253:	mov di, [bp + 4]	; 3: 139 126 4
x13256:	mov bp, [bp + 2]	; 3: 139 110 2
x13259:	jmp ax	; 2: 255 224

@1000$log2$11:	; FunctionEnd log2

@1002$float8$0.693#:
x13261:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x13269:	mov word [bp + 14], @2309$string_25s3A2025s2E0A#	; 5: 199 70 14 21 52

perror$2:	; Parameter 8 s 8
x13274:	mov ax, [bp + 6]	; 3: 139 70 6
x13277:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13280:	mov ax, [errno]	; 3: 161 230 10
x13283:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13286:	mov word [bp + 18], perror$6	; 5: 199 70 18 244 51
x13291:	mov [bp + 20], bp	; 3: 137 110 20
x13294:	add bp, 18	; 3: 131 197 18
x13297:	nop	; 1: 144
x13298:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary983

perror$8:	; Parameter 8 £temporary983 10
x13300:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13303:	mov word [bp + 8], perror$10	; 5: 199 70 8 10 52
x13308:	mov [bp + 10], bp	; 3: 137 110 10
x13311:	add bp, 8	; 3: 131 197 8
x13314:	mov di, bp	; 2: 137 239
x13316:	add di, 4	; 3: 131 199 4
x13319:	jmp printf	; 3: 233 250 216

perror$10:	; PostCall 8

perror$11:	; Return 0
x13322:	mov ax, [bp]	; 3: 139 70 0
x13325:	mov di, [bp + 4]	; 3: 139 126 4
x13328:	mov bp, [bp + 2]	; 3: 139 110 2
x13331:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

@2309$string_25s3A2025s2E0A#:
x13333:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13342:	mov word [bp + 8], strerror$2	; 5: 199 70 8 44 52
x13347:	mov [bp + 10], bp	; 3: 137 110 10
x13350:	add bp, 8	; 3: 131 197 8
x13353:	jmp localeconv	; 3: 233 76 234

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary3868

strerror$4:	; Assign localeConvPtr £temporary3868
x13356:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 14 localeConvPtr 0
x13359:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13363:	je strerror$14	; 2: 116 42

strerror$6:	; Deref £temporary3870 -> localeConvPtr localeConvPtr 16
x13365:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign messageList £temporary3870 -> localeConvPtr
x13368:	mov ax, [si + 16]	; 3: 139 68 16
x13371:	mov [bp + 10], ax	; 3: 137 70 10

strerror$8:	; Equal 14 messageList 0
x13374:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13378:	je strerror$14	; 2: 116 27

strerror$9:	; SignedMultiply £temporary3873 errno 2
x13380:	mov ax, [bp + 6]	; 3: 139 70 6
x13383:	xor dx, dx	; 2: 49 210
x13385:	imul word [@8772$int2$2#]	; 4: 247 46 109 52

strerror$10:	; BinaryAdd £temporary3874 messageList £temporary3873
x13389:	mov si, [bp + 10]	; 3: 139 118 10
x13392:	add si, ax	; 2: 1 198

strerror$11:	; Deref £temporary3872 -> £temporary3874 £temporary3874 0

strerror$12:	; SetReturnValue £temporary3872 -> £temporary3874
x13394:	mov bx, [si]	; 2: 139 28

strerror$13:	; Return £temporary3872 -> £temporary3874
x13396:	mov ax, [bp]	; 3: 139 70 0
x13399:	mov di, [bp + 4]	; 3: 139 126 4
x13402:	mov bp, [bp + 2]	; 3: 139 110 2
x13405:	jmp ax	; 2: 255 224

strerror$14:	; SetReturnValue 0
x13407:	mov bx, 0	; 3: 187 0 0

strerror$15:	; Return 0
x13410:	mov ax, [bp]	; 3: 139 70 0
x13413:	mov di, [bp + 4]	; 3: 139 126 4
x13416:	mov bp, [bp + 2]	; 3: 139 110 2
x13419:	jmp ax	; 2: 255 224

strerror$16:	; FunctionEnd strerror

@8772$int2$2#:
x13421:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13423:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13426:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13429:	mov word [bp + 16], modf$4	; 5: 199 70 16 131 52
x13434:	mov [bp + 18], bp	; 3: 137 110 18
x13437:	add bp, 16	; 3: 131 197 16
x13440:	jmp fabs	; 3: 233 122 240

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary416

modf$6:	; PopFloat abs_x
x13443:	fstp qword [bp + 16]	; 3: 221 94 16

modf$7:	; PushFloat abs_x
x13446:	fld qword [bp + 16]	; 3: 221 70 16

modf$8:	; FloatingToIntegral £temporary417 abs_x
x13449:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x13453:	mov eax, [container4bytes#]	; 4: 102 161 81 36

modf$9:	; IntegralToFloating £temporary418 £temporary417
x13457:	mov [container4bytes#], eax	; 4: 102 163 81 36
x13461:	fild dword [container4bytes#]	; 4: 219 6 81 36

modf$10:	; PopFloat integral
x13465:	fstp qword [bp + 24]	; 3: 221 94 24

modf$11:	; PushFloat abs_x
x13468:	fld qword [bp + 16]	; 3: 221 70 16

modf$12:	; PushFloat integral
x13471:	fld qword [bp + 24]	; 3: 221 70 24

modf$13:	; BinarySubtract £temporary419 abs_x integral
x13474:	fsub	; 2: 222 233

modf$14:	; PopFloat fractional
x13476:	fstp qword [bp + 32]	; 3: 221 94 32

modf$15:	; Equal 26 p 0
x13479:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13483:	je modf$26	; 2: 116 28

modf$16:	; Deref £temporary421 -> p p 0
x13485:	mov si, [bp + 14]	; 3: 139 118 14

modf$17:	; PushFloat x
x13488:	fld qword [bp + 6]	; 3: 221 70 6

modf$18:	; PushZero
x13491:	fldz	; 2: 217 238

modf$19:	; SignedLessThanEqual 23 x 0
x13493:	fcompp	; 2: 222 217
x13495:	fstsw ax	; 3: 155 223 224
x13498:	sahf	; 1: 158
x13499:	jae modf$23	; 2: 115 5

modf$20:	; PushFloat integral
x13501:	fld qword [bp + 24]	; 3: 221 70 24

modf$21:	; DecreaseStack

modf$22:	; Goto 25
x13504:	jmp modf$25	; 2: 235 5

modf$23:	; PushFloat integral
x13506:	fld qword [bp + 24]	; 3: 221 70 24

modf$24:	; UnarySubtract £temporary423 integral
x13509:	fchs	; 2: 217 224

modf$25:	; PopFloat £temporary421 -> p
x13511:	fstp qword [si]	; 2: 221 28

modf$26:	; PushFloat x
x13513:	fld qword [bp + 6]	; 3: 221 70 6

modf$27:	; PushZero
x13516:	fldz	; 2: 217 238

modf$28:	; SignedLessThanEqual 32 x 0
x13518:	fcompp	; 2: 222 217
x13520:	fstsw ax	; 3: 155 223 224
x13523:	sahf	; 1: 158
x13524:	jae modf$32	; 2: 115 5

modf$29:	; PushFloat fractional
x13526:	fld qword [bp + 32]	; 3: 221 70 32

modf$30:	; DecreaseStack

modf$31:	; Goto 34
x13529:	jmp modf$34	; 2: 235 5

modf$32:	; PushFloat fractional
x13531:	fld qword [bp + 32]	; 3: 221 70 32

modf$33:	; UnarySubtract £temporary429 fractional
x13534:	fchs	; 2: 217 224

modf$34:	; SetReturnValue £temporary433

modf$35:	; Return £temporary433
x13536:	mov ax, [bp]	; 3: 139 70 0
x13539:	mov di, [bp + 4]	; 3: 139 126 4
x13542:	mov bp, [bp + 2]	; 3: 139 110 2
x13545:	jmp ax	; 2: 255 224

modf$36:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13547:	mov word [bp + 28], @10626$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 65 54

math_test_2$2:	; PushFloat x
x13552:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13555:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13558:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13561:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13564:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13567:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13570:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13573:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13576:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 22 53
x13581:	mov [bp + 48], bp	; 3: 137 110 48
x13584:	add bp, 46	; 3: 131 197 46
x13587:	jmp fmod	; 3: 233 112 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary4776

math_test_2$14:	; Parameter 22 £temporary4776 24
x13590:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13593:	mov ax, [errno]	; 3: 161 230 10
x13596:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13599:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 50 53
x13604:	mov [bp + 24], bp	; 3: 137 110 24
x13607:	add bp, 22	; 3: 131 197 22
x13610:	mov di, bp	; 2: 137 239
x13612:	add di, 26	; 3: 131 199 26
x13615:	jmp printf	; 3: 233 210 215

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13618:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13624:	mov word [bp + 28], @10631$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 96 54

math_test_2$21:	; PushFloat x
x13629:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13632:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13635:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13638:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13641:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13644:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13647:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13650:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13653:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 99 53
x13658:	mov [bp + 48], bp	; 3: 137 110 48
x13661:	add bp, 46	; 3: 131 197 46
x13664:	jmp atan2	; 3: 233 82 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary4778

math_test_2$33:	; Parameter 22 £temporary4778 24
x13667:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13670:	mov ax, [errno]	; 3: 161 230 10
x13673:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13676:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 127 53
x13681:	mov [bp + 24], bp	; 3: 137 110 24
x13684:	add bp, 22	; 3: 131 197 22
x13687:	mov di, bp	; 2: 137 239
x13689:	add di, 26	; 3: 131 199 26
x13692:	jmp printf	; 3: 233 133 215

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13695:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13701:	mov word [bp + 28], @10636$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 128 54

math_test_2$40:	; PushFloat x
x13706:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13709:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13712:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13715:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13718:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13721:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13724:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13727:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13730:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 176 53
x13735:	mov [bp + 48], bp	; 3: 137 110 48
x13738:	add bp, 46	; 3: 131 197 46
x13741:	jmp pow	; 3: 233 235 242

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary4780

math_test_2$52:	; Parameter 22 £temporary4780 24
x13744:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13747:	mov ax, [errno]	; 3: 161 230 10
x13750:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13753:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 204 53
x13758:	mov [bp + 24], bp	; 3: 137 110 24
x13761:	add bp, 22	; 3: 131 197 22
x13764:	mov di, bp	; 2: 137 239
x13766:	add di, 26	; 3: 131 199 26
x13769:	jmp printf	; 3: 233 56 215

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13772:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13778:	mov word [bp + 28], @10641$string_0A#	; 5: 199 70 28 158 54

math_test_2$59:	; Call 22 printf 0
x13783:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 231 53
x13788:	mov [bp + 24], bp	; 3: 137 110 24
x13791:	add bp, 22	; 3: 131 197 22
x13794:	mov di, bp	; 2: 137 239
x13796:	jmp printf	; 3: 233 29 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13799:	mov word [bp + 28], @10643$string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 160 54

math_test_2$63:	; PushFloat x
x13804:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13807:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13810:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary4783 y
x13813:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13817:	mov ax, [container2bytes#]	; 3: 161 77 27

math_test_2$67:	; Parameter 22 £temporary4783 16
x13820:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13823:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13826:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13829:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary4784 y
x13832:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13836:	mov ax, [container2bytes#]	; 3: 161 77 27

math_test_2$73:	; Parameter 22 £temporary4784 32
x13839:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13842:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 32 54
x13847:	mov [bp + 42], bp	; 3: 137 110 42
x13850:	add bp, 40	; 3: 131 197 40
x13853:	jmp ldexp	; 3: 233 235 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary4785

math_test_2$77:	; Parameter 22 £temporary4785 18
x13856:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13859:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 54 54
x13864:	mov [bp + 24], bp	; 3: 137 110 24
x13867:	add bp, 22	; 3: 131 197 22
x13870:	mov di, bp	; 2: 137 239
x13872:	add di, 18	; 3: 131 199 18
x13875:	jmp printf	; 3: 233 206 214

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13878:	mov ax, [bp]	; 3: 139 70 0
x13881:	mov di, [bp + 4]	; 3: 139 126 4
x13884:	mov bp, [bp + 2]	; 3: 139 110 2
x13887:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

@10626$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13889:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10631$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13920:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10636$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13952:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10641$string_0A#:
x13982:	db 10, 0	; 2: 10 0

@10643$string_ldexp2825f2C2025i29203D2025f0A0A#:
x13984:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x14005:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x14008:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x14010:	fcompp	; 2: 222 217
x14012:	fstsw ax	; 3: 155 223 224
x14015:	sahf	; 1: 158
x14016:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x14018:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x14021:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary556 x y
x14024:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary556 6
x14026:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x14029:	mov word [bp + 22], atan2$9	; 5: 199 70 22 219 54
x14034:	mov [bp + 24], bp	; 3: 137 110 24
x14037:	add bp, 22	; 3: 131 197 22
x14040:	jmp atan	; 3: 233 184 248

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary557

atan2$11:	; SetReturnValue £temporary557

atan2$12:	; Return £temporary557
x14043:	mov ax, [bp]	; 3: 139 70 0
x14046:	mov di, [bp + 4]	; 3: 139 126 4
x14049:	mov bp, [bp + 2]	; 3: 139 110 2
x14052:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x14054:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x14057:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x14059:	fcompp	; 2: 222 217
x14061:	fstsw ax	; 3: 155 223 224
x14064:	sahf	; 1: 158
x14065:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x14067:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x14070:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x14072:	fcompp	; 2: 222 217
x14074:	fstsw ax	; 3: 155 223 224
x14077:	sahf	; 1: 158
x14078:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x14080:	fld qword [@1377$float8$3.14#]	; 4: 221 6 235 55

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14084:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x14087:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x14090:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary561 x y
x14093:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary561 6
x14095:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x14098:	mov word [bp + 30], atan2$26	; 5: 199 70 30 32 55
x14103:	mov [bp + 32], bp	; 3: 137 110 32
x14106:	add bp, 30	; 3: 131 197 30
x14109:	jmp atan	; 3: 233 115 248

atan2$26:	; PostCall 22
x14112:	fstp qword [bp + 30]	; 3: 221 94 30
x14115:	fld qword [bp + 22]	; 3: 221 70 22
x14118:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary562

atan2$28:	; BinaryAdd £temporary563 3.14 £temporary562
x14121:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary563

atan2$30:	; Return £temporary563
x14123:	mov ax, [bp]	; 3: 139 70 0
x14126:	mov di, [bp + 4]	; 3: 139 126 4
x14129:	mov bp, [bp + 2]	; 3: 139 110 2
x14132:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x14134:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x14137:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x14139:	fcompp	; 2: 222 217
x14141:	fstsw ax	; 3: 155 223 224
x14144:	sahf	; 1: 158
x14145:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x14147:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x14150:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x14152:	fcompp	; 2: 222 217
x14154:	fstsw ax	; 3: 155 223 224
x14157:	sahf	; 1: 158
x14158:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x14160:	fld qword [@1390$float8$minus3.14#]	; 4: 221 6 243 55

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14164:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x14167:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x14170:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary567 x y
x14173:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary567 6
x14175:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x14178:	mov word [bp + 30], atan2$44	; 5: 199 70 30 112 55
x14183:	mov [bp + 32], bp	; 3: 137 110 32
x14186:	add bp, 30	; 3: 131 197 30
x14189:	jmp atan	; 3: 233 35 248

atan2$44:	; PostCall 22
x14192:	fstp qword [bp + 30]	; 3: 221 94 30
x14195:	fld qword [bp + 22]	; 3: 221 70 22
x14198:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary568

atan2$46:	; BinaryAdd £temporary569 -3.14 £temporary568
x14201:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary569

atan2$48:	; Return £temporary569
x14203:	mov ax, [bp]	; 3: 139 70 0
x14206:	mov di, [bp + 4]	; 3: 139 126 4
x14209:	mov bp, [bp + 2]	; 3: 139 110 2
x14212:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x14214:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x14217:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x14219:	fcompp	; 2: 222 217
x14221:	fstsw ax	; 3: 155 223 224
x14224:	sahf	; 1: 158
x14225:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x14227:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x14230:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x14232:	fcompp	; 2: 222 217
x14234:	fstsw ax	; 3: 155 223 224
x14237:	sahf	; 1: 158
x14238:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x14240:	fld qword [@1404$float8$1.57#]	; 4: 221 6 251 55

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x14244:	mov ax, [bp]	; 3: 139 70 0
x14247:	mov di, [bp + 4]	; 3: 139 126 4
x14250:	mov bp, [bp + 2]	; 3: 139 110 2
x14253:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x14255:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x14258:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x14260:	fcompp	; 2: 222 217
x14262:	fstsw ax	; 3: 155 223 224
x14265:	sahf	; 1: 158
x14266:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x14268:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14271:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14273:	fcompp	; 2: 222 217
x14275:	fstsw ax	; 3: 155 223 224
x14278:	sahf	; 1: 158
x14279:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14281:	fld qword [@1416$float8$minus1.57#]	; 4: 221 6 3 56

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14285:	mov ax, [bp]	; 3: 139 70 0
x14288:	mov di, [bp + 4]	; 3: 139 126 4
x14291:	mov bp, [bp + 2]	; 3: 139 110 2
x14294:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14296:	mov word [errno], 6	; 6: 199 6 230 10 6 0

atan2$68:	; PushZero
x14302:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14304:	mov ax, [bp]	; 3: 139 70 0
x14307:	mov di, [bp + 4]	; 3: 139 126 4
x14310:	mov bp, [bp + 2]	; 3: 139 110 2
x14313:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

@1377$float8$3.14#:
x14315:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@1390$float8$minus3.14#:
x14323:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@1404$float8$1.57#:
x14331:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1416$float8$minus1.57#:
x14339:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

ldexp:	; PushFloat x
x14347:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14350:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14353:	fld qword [@992$float8$2#]	; 4: 221 6 66 56

ldexp$3:	; Parameter 16 2 6
x14357:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary378 n
x14360:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary378 14
x14363:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14366:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 44 56
x14371:	mov [bp + 26], bp	; 3: 137 110 26
x14374:	add bp, 24	; 3: 131 197 24
x14377:	jmp pow	; 3: 233 111 240

ldexp$7:	; PostCall 16
x14380:	fstp qword [bp + 24]	; 3: 221 94 24
x14383:	fld qword [bp + 16]	; 3: 221 70 16
x14386:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary379

ldexp$9:	; SignedMultiply £temporary380 x £temporary379
x14389:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary380

ldexp$11:	; Return £temporary380
x14391:	mov ax, [bp]	; 3: 139 70 0
x14394:	mov di, [bp + 4]	; 3: 139 126 4
x14397:	mov bp, [bp + 2]	; 3: 139 110 2
x14400:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

@992$float8$2#:
x14402:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14410:	mov word [bp + 12], @10693$string_in2Etxt#	; 5: 199 70 12 119 77

file_test$2:	; Parameter 6 string_r# 8
x14415:	mov word [bp + 14], @10694$string_r#	; 5: 199 70 14 126 77

file_test$3:	; Call 6 fopen 0
x14420:	mov word [bp + 6], file_test$4	; 5: 199 70 6 98 56
x14425:	mov [bp + 8], bp	; 3: 137 110 8
x14428:	add bp, 6	; 3: 131 197 6
x14431:	jmp fopen	; 3: 233 145 33

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary4815

file_test$6:	; Assign inFilePtr £temporary4815
x14434:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14437:	mov word [bp + 14], @10697$string_outX2Etxt#	; 5: 199 70 14 128 77

file_test$9:	; Parameter 8 string_w# 8
x14442:	mov word [bp + 16], @10698$string_w#	; 5: 199 70 16 137 77

file_test$10:	; Call 8 fopen 0
x14447:	mov word [bp + 8], file_test$11	; 5: 199 70 8 125 56
x14452:	mov [bp + 10], bp	; 3: 137 110 10
x14455:	add bp, 8	; 3: 131 197 8
x14458:	jmp fopen	; 3: 233 118 33

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary4816

file_test$13:	; Assign outFilePtr £temporary4816
x14461:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14464:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14468:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14470:	mov ax, [stderr]	; 3: 161 139 77
x14473:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14476:	mov word [bp + 18], @10706$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 141 77

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14481:	mov word [bp + 20], @10707$string_inFilePtr20213D20NULL#	; 5: 199 70 20 187 77

file_test$19:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14486:	mov word [bp + 22], @10708$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 205 77

file_test$20:	; Parameter 10 14 14
x14491:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14496:	mov word [bp + 10], file_test$22	; 5: 199 70 10 179 56
x14501:	mov [bp + 12], bp	; 3: 137 110 12
x14504:	add bp, 10	; 3: 131 197 10
x14507:	mov di, bp	; 2: 137 239
x14509:	add di, 6	; 3: 131 199 6
x14512:	jmp fprintf	; 3: 233 217 37

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14515:	mov word [bp + 10], file_test$25	; 5: 199 70 10 193 56
x14520:	mov [bp + 12], bp	; 3: 137 110 12
x14523:	add bp, 10	; 3: 131 197 10
x14526:	jmp abort	; 3: 233 6 38

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14529:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14533:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14535:	mov ax, [stderr]	; 3: 161 139 77
x14538:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14541:	mov word [bp + 18], @10718$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 14 78

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14546:	mov word [bp + 20], @10719$string_outFilePtr20213D20NULL#	; 5: 199 70 20 60 78

file_test$31:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14551:	mov word [bp + 22], @10720$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 79 78

file_test$32:	; Parameter 10 15 14
x14556:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14561:	mov word [bp + 10], file_test$34	; 5: 199 70 10 244 56
x14566:	mov [bp + 12], bp	; 3: 137 110 12
x14569:	add bp, 10	; 3: 131 197 10
x14572:	mov di, bp	; 2: 137 239
x14574:	add di, 6	; 3: 131 199 6
x14577:	jmp fprintf	; 3: 233 152 37

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14580:	mov word [bp + 10], file_test$37	; 5: 199 70 10 2 57
x14585:	mov [bp + 12], bp	; 3: 137 110 12
x14588:	add bp, 10	; 3: 131 197 10
x14591:	jmp abort	; 3: 233 197 37

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14594:	mov ax, [bp + 6]	; 3: 139 70 6
x14597:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14600:	mov word [bp + 10], file_test$41	; 5: 199 70 10 22 57
x14605:	mov [bp + 12], bp	; 3: 137 110 12
x14608:	add bp, 10	; 3: 131 197 10
x14611:	jmp feof	; 3: 233 194 37

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary4825

file_test$43:	; NotEqual 75 £temporary4825 0
x14614:	cmp bx, 0	; 3: 131 251 0
x14617:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14621:	mov ax, [bp + 6]	; 3: 139 70 6
x14624:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14627:	mov word [bp + 26], @10730$string_25lf#	; 5: 199 70 26 144 78

file_test$47:	; address £temporary4828 value
x14632:	mov si, bp	; 2: 137 238
x14634:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary4828 10
x14637:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14640:	mov word [bp + 18], file_test$50	; 5: 199 70 18 67 57
x14645:	mov [bp + 20], bp	; 3: 137 110 20
x14648:	add bp, 18	; 3: 131 197 18
x14651:	mov di, bp	; 2: 137 239
x14653:	add di, 2	; 3: 131 199 2
x14656:	jmp fscanf	; 3: 233 42 38

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14659:	mov word [bp + 24], @10733$string_X12025f0A#	; 5: 199 70 24 148 78

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14664:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14667:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14670:	mov word [bp + 26], file_test$57	; 5: 199 70 26 92 57
x14675:	mov [bp + 28], bp	; 3: 137 110 28
x14678:	add bp, 26	; 3: 131 197 26
x14681:	jmp sqrt	; 3: 233 179 245

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary4830

file_test$59:	; Parameter 18 £temporary4830 8
x14684:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14687:	mov word [bp + 18], file_test$61	; 5: 199 70 18 114 57
x14692:	mov [bp + 20], bp	; 3: 137 110 20
x14695:	add bp, 18	; 3: 131 197 18
x14698:	mov di, bp	; 2: 137 239
x14700:	add di, 8	; 3: 131 199 8
x14703:	jmp printf	; 3: 233 146 211

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14706:	mov ax, [bp + 8]	; 3: 139 70 8
x14709:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14712:	mov word [bp + 26], @10736$string_X22025f0A#	; 5: 199 70 26 155 78

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14717:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14720:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14723:	mov word [bp + 28], file_test$69	; 5: 199 70 28 145 57
x14728:	mov [bp + 30], bp	; 3: 137 110 30
x14731:	add bp, 28	; 3: 131 197 28
x14734:	jmp sqrt	; 3: 233 126 245

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary4832

file_test$71:	; Parameter 18 £temporary4832 10
x14737:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14740:	mov word [bp + 18], file_test$73	; 5: 199 70 18 167 57
x14745:	mov [bp + 20], bp	; 3: 137 110 20
x14748:	add bp, 18	; 3: 131 197 18
x14751:	mov di, bp	; 2: 137 239
x14753:	add di, 8	; 3: 131 199 8
x14756:	jmp fprintf	; 3: 233 229 36

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14759:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14762:	mov word [bp + 16], @10739$string_0A#	; 5: 199 70 16 162 78

file_test$77:	; Call 10 printf 0
x14767:	mov word [bp + 10], file_test$78	; 5: 199 70 10 191 57
x14772:	mov [bp + 12], bp	; 3: 137 110 12
x14775:	add bp, 10	; 3: 131 197 10
x14778:	mov di, bp	; 2: 137 239
x14780:	jmp printf	; 3: 233 69 211

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14783:	mov ax, [bp + 6]	; 3: 139 70 6
x14786:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14789:	mov word [bp + 10], file_test$82	; 5: 199 70 10 211 57
x14794:	mov [bp + 12], bp	; 3: 137 110 12
x14797:	add bp, 10	; 3: 131 197 10
x14800:	jmp fclose	; 3: 233 201 55

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14803:	mov ax, [bp + 8]	; 3: 139 70 8
x14806:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14809:	mov word [bp + 10], file_test$86	; 5: 199 70 10 231 57
x14814:	mov [bp + 12], bp	; 3: 137 110 12
x14817:	add bp, 10	; 3: 131 197 10
x14820:	jmp fclose	; 3: 233 181 55

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14823:	mov word [bp + 12], @10743$string_in2Etxt#	; 5: 199 70 12 164 78

file_test$89:	; Parameter 6 string_r# 8
x14828:	mov word [bp + 14], @10744$string_r#	; 5: 199 70 14 171 78

file_test$90:	; Call 6 fopen 0
x14833:	mov word [bp + 6], file_test$91	; 5: 199 70 6 255 57
x14838:	mov [bp + 8], bp	; 3: 137 110 8
x14841:	add bp, 6	; 3: 131 197 6
x14844:	jmp fopen	; 3: 233 244 31

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary4837

file_test$93:	; Assign inFilePtr £temporary4837
x14847:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14850:	mov word [bp + 14], @10747$string_outY2Etxt#	; 5: 199 70 14 173 78

file_test$96:	; Parameter 8 string_w# 8
x14855:	mov word [bp + 16], @10748$string_w#	; 5: 199 70 16 182 78

file_test$97:	; Call 8 fopen 0
x14860:	mov word [bp + 8], file_test$98	; 5: 199 70 8 26 58
x14865:	mov [bp + 10], bp	; 3: 137 110 10
x14868:	add bp, 8	; 3: 131 197 8
x14871:	jmp fopen	; 3: 233 217 31

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary4838

file_test$100:	; Assign outFilePtr £temporary4838
x14874:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14877:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14881:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14883:	mov ax, [stderr]	; 3: 161 139 77
x14886:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14889:	mov word [bp + 18], @10756$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 184 78

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14894:	mov word [bp + 20], @10757$string_inFilePtr20213D20NULL#	; 5: 199 70 20 230 78

file_test$106:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14899:	mov word [bp + 22], @10758$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 248 78

file_test$107:	; Parameter 10 34 14
x14904:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14909:	mov word [bp + 10], file_test$109	; 5: 199 70 10 80 58
x14914:	mov [bp + 12], bp	; 3: 137 110 12
x14917:	add bp, 10	; 3: 131 197 10
x14920:	mov di, bp	; 2: 137 239
x14922:	add di, 6	; 3: 131 199 6
x14925:	jmp fprintf	; 3: 233 60 36

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14928:	mov word [bp + 10], file_test$112	; 5: 199 70 10 94 58
x14933:	mov [bp + 12], bp	; 3: 137 110 12
x14936:	add bp, 10	; 3: 131 197 10
x14939:	jmp abort	; 3: 233 105 36

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14942:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14946:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14948:	mov ax, [stderr]	; 3: 161 139 77
x14951:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14954:	mov word [bp + 18], @10768$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 57 79

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14959:	mov word [bp + 20], @10769$string_outFilePtr20213D20NULL#	; 5: 199 70 20 103 79

file_test$118:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14964:	mov word [bp + 22], @10770$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 122 79

file_test$119:	; Parameter 10 35 14
x14969:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14974:	mov word [bp + 10], file_test$121	; 5: 199 70 10 145 58
x14979:	mov [bp + 12], bp	; 3: 137 110 12
x14982:	add bp, 10	; 3: 131 197 10
x14985:	mov di, bp	; 2: 137 239
x14987:	add di, 6	; 3: 131 199 6
x14990:	jmp fprintf	; 3: 233 251 35

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14993:	mov word [bp + 10], file_test$124	; 5: 199 70 10 159 58
x14998:	mov [bp + 12], bp	; 3: 137 110 12
x15001:	add bp, 10	; 3: 131 197 10
x15004:	jmp abort	; 3: 233 40 36

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x15007:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x15012:	mov ax, [bp + 6]	; 3: 139 70 6
x15015:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x15018:	mov word [bp + 22], @10779$string_25i#	; 5: 199 70 22 187 79

file_test$129:	; address £temporary4847 size
x15023:	mov si, bp	; 2: 137 238
x15025:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary4847 10
x15028:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x15031:	mov word [bp + 14], file_test$132	; 5: 199 70 14 202 58
x15036:	mov [bp + 16], bp	; 3: 137 110 16
x15039:	add bp, 14	; 3: 131 197 14
x15042:	mov di, bp	; 2: 137 239
x15044:	add di, 2	; 3: 131 199 2
x15047:	jmp fscanf	; 3: 233 163 36

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x15050:	mov word [bp + 20], @10782$string_size2025i0A#	; 5: 199 70 20 190 79

file_test$135:	; Parameter 14 size 8
x15055:	mov ax, [bp + 10]	; 3: 139 70 10
x15058:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x15061:	mov word [bp + 14], file_test$137	; 5: 199 70 14 232 58
x15066:	mov [bp + 16], bp	; 3: 137 110 16
x15069:	add bp, 14	; 3: 131 197 14
x15072:	mov di, bp	; 2: 137 239
x15074:	add di, 2	; 3: 131 199 2
x15077:	jmp printf	; 3: 233 28 210

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x15080:	mov ax, [bp + 8]	; 3: 139 70 8
x15083:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x15086:	mov word [bp + 22], @10784$string_Y20size2025i0A#	; 5: 199 70 22 199 79

file_test$141:	; Parameter 14 size 10
x15091:	mov ax, [bp + 10]	; 3: 139 70 10
x15094:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x15097:	mov word [bp + 14], file_test$143	; 5: 199 70 14 12 59
x15102:	mov [bp + 16], bp	; 3: 137 110 16
x15105:	add bp, 14	; 3: 131 197 14
x15108:	mov di, bp	; 2: 137 239
x15110:	add di, 2	; 3: 131 199 2
x15113:	jmp fprintf	; 3: 233 128 35

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x15116:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x15121:	mov ax, [bp + 10]	; 3: 139 70 10
x15124:	cmp [bp + 12], ax	; 3: 57 70 12
x15127:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x15131:	mov ax, [bp + 6]	; 3: 139 70 6
x15134:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x15137:	mov word [bp + 30], @10793$string_25lf#	; 5: 199 70 30 210 79

file_test$149:	; address £temporary4853 value
x15142:	mov si, bp	; 2: 137 238
x15144:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary4853 10
x15147:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x15150:	mov word [bp + 22], file_test$152	; 5: 199 70 22 65 59
x15155:	mov [bp + 24], bp	; 3: 137 110 24
x15158:	add bp, 22	; 3: 131 197 22
x15161:	mov di, bp	; 2: 137 239
x15163:	add di, 2	; 3: 131 199 2
x15166:	jmp fscanf	; 3: 233 44 36

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x15169:	mov word [bp + 28], @10796$string_Y12025f0A#	; 5: 199 70 28 214 79

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x15174:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x15177:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x15180:	mov word [bp + 30], file_test$159	; 5: 199 70 30 90 59
x15185:	mov [bp + 32], bp	; 3: 137 110 32
x15188:	add bp, 30	; 3: 131 197 30
x15191:	jmp sqrt	; 3: 233 181 243

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary4855

file_test$161:	; Parameter 22 £temporary4855 8
x15194:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x15197:	mov word [bp + 22], file_test$163	; 5: 199 70 22 112 59
x15202:	mov [bp + 24], bp	; 3: 137 110 24
x15205:	add bp, 22	; 3: 131 197 22
x15208:	mov di, bp	; 2: 137 239
x15210:	add di, 8	; 3: 131 199 8
x15213:	jmp printf	; 3: 233 148 209

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x15216:	mov ax, [bp + 8]	; 3: 139 70 8
x15219:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x15222:	mov word [bp + 30], @10799$string_Y22025f0A#	; 5: 199 70 30 221 79

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x15227:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x15230:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x15233:	mov word [bp + 32], file_test$171	; 5: 199 70 32 143 59
x15238:	mov [bp + 34], bp	; 3: 137 110 34
x15241:	add bp, 32	; 3: 131 197 32
x15244:	jmp sqrt	; 3: 233 128 243

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary4857

file_test$173:	; Parameter 22 £temporary4857 10
x15247:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x15250:	mov word [bp + 22], file_test$175	; 5: 199 70 22 165 59
x15255:	mov [bp + 24], bp	; 3: 137 110 24
x15258:	add bp, 22	; 3: 131 197 22
x15261:	mov di, bp	; 2: 137 239
x15263:	add di, 8	; 3: 131 199 8
x15266:	jmp fprintf	; 3: 233 231 34

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x15269:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x15272:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x15275:	mov word [bp + 20], @10802$string_0A#	; 5: 199 70 20 228 79

file_test$180:	; Call 14 printf 0
x15280:	mov word [bp + 14], file_test$181	; 5: 199 70 14 192 59
x15285:	mov [bp + 16], bp	; 3: 137 110 16
x15288:	add bp, 14	; 3: 131 197 14
x15291:	mov di, bp	; 2: 137 239
x15293:	jmp printf	; 3: 233 68 209

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x15296:	mov ax, [bp + 6]	; 3: 139 70 6
x15299:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x15302:	mov word [bp + 10], file_test$185	; 5: 199 70 10 212 59
x15307:	mov [bp + 12], bp	; 3: 137 110 12
x15310:	add bp, 10	; 3: 131 197 10
x15313:	jmp fclose	; 3: 233 200 53

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15316:	mov ax, [bp + 8]	; 3: 139 70 8
x15319:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15322:	mov word [bp + 10], file_test$189	; 5: 199 70 10 232 59
x15327:	mov [bp + 12], bp	; 3: 137 110 12
x15330:	add bp, 10	; 3: 131 197 10
x15333:	jmp fclose	; 3: 233 180 53

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_Y#
x15336:	mov word [bp + 6], @10806$string_Y#	; 5: 199 70 6 230 79

file_test$191:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$192:	; Parameter 8 sourceFile 6
x15341:	mov ax, [bp + 6]	; 3: 139 70 6
x15344:	mov [bp + 14], ax	; 3: 137 70 14

file_test$193:	; Call 8 remove 0
x15347:	mov word [bp + 8], file_test$194	; 5: 199 70 8 1 60
x15352:	mov [bp + 10], bp	; 3: 137 110 10
x15355:	add bp, 8	; 3: 131 197 8
x15358:	jmp remove	; 3: 233 94 54

file_test$194:	; PostCall 8

file_test$195:	; GetReturnValue £temporary4862

file_test$196:	; NotEqual 203 £temporary4862 0
x15361:	cmp bx, 0	; 3: 131 251 0
x15364:	jne file_test$203	; 2: 117 32

file_test$197:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$198:	; Parameter 8 string_2225s2220has20been20removed0A# 6
x15366:	mov word [bp + 14], @10812$string_2225s2220has20been20removed0A#	; 5: 199 70 14 232 79

file_test$199:	; Parameter 8 sourceFile 8
x15371:	mov ax, [bp + 6]	; 3: 139 70 6
x15374:	mov [bp + 16], ax	; 3: 137 70 16

file_test$200:	; Call 8 printf 0
x15377:	mov word [bp + 8], file_test$201	; 5: 199 70 8 36 60
x15382:	mov [bp + 10], bp	; 3: 137 110 10
x15385:	add bp, 8	; 3: 131 197 8
x15388:	mov di, bp	; 2: 137 239
x15390:	add di, 2	; 3: 131 199 2
x15393:	jmp printf	; 3: 233 224 208

file_test$201:	; PostCall 8

file_test$202:	; Goto 215
x15396:	jmp file_test$215	; 2: 235 59

file_test$203:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$204:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15398:	mov word [bp + 14], @10814$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 255 79

file_test$205:	; Parameter 8 sourceFile 8
x15403:	mov ax, [bp + 6]	; 3: 139 70 6
x15406:	mov [bp + 16], ax	; 3: 137 70 16

file_test$206:	; Parameter 8 errno 10
x15409:	mov ax, [errno]	; 3: 161 230 10
x15412:	mov [bp + 18], ax	; 3: 137 70 18

file_test$207:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$208:	; Parameter 8 errno 18
x15415:	mov ax, [errno]	; 3: 161 230 10
x15418:	mov [bp + 26], ax	; 3: 137 70 26

file_test$209:	; Call 8 strerror 12
x15421:	mov word [bp + 20], file_test$210	; 5: 199 70 20 75 60
x15426:	mov [bp + 22], bp	; 3: 137 110 22
x15429:	add bp, 20	; 3: 131 197 20
x15432:	jmp strerror	; 3: 233 211 247

file_test$210:	; PostCall 8

file_test$211:	; GetReturnValue £temporary4865

file_test$212:	; Parameter 8 £temporary4865 12
x15435:	mov [bp + 20], bx	; 3: 137 94 20

file_test$213:	; Call 8 printf 0
x15438:	mov word [bp + 8], file_test$214	; 5: 199 70 8 97 60
x15443:	mov [bp + 10], bp	; 3: 137 110 10
x15446:	add bp, 8	; 3: 131 197 8
x15449:	mov di, bp	; 2: 137 239
x15451:	add di, 6	; 3: 131 199 6
x15454:	jmp printf	; 3: 233 163 208

file_test$214:	; PostCall 8

file_test$215:	; Assign sourceFile string_X#
x15457:	mov word [bp + 6], @10817$string_X#	; 5: 199 70 6 19 80

file_test$216:	; Assign targetFile string_Y#
x15462:	mov word [bp + 8], @10819$string_Y#	; 5: 199 70 8 21 80

file_test$217:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$218:	; Parameter 10 sourceFile 6
x15467:	mov ax, [bp + 6]	; 3: 139 70 6
x15470:	mov [bp + 16], ax	; 3: 137 70 16

file_test$219:	; Parameter 10 string_w# 8
x15473:	mov word [bp + 18], @10821$string_w#	; 5: 199 70 18 23 80

file_test$220:	; Call 10 fopen 0
x15478:	mov word [bp + 10], file_test$221	; 5: 199 70 10 132 60
x15483:	mov [bp + 12], bp	; 3: 137 110 12
x15486:	add bp, 10	; 3: 131 197 10
x15489:	jmp fopen	; 3: 233 111 29

file_test$221:	; PostCall 10

file_test$222:	; GetReturnValue £temporary4867

file_test$223:	; Assign filePtr £temporary4867
x15492:	mov [bp + 10], bx	; 3: 137 94 10

file_test$224:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$225:	; Parameter 12 filePtr 6
x15495:	mov ax, [bp + 10]	; 3: 139 70 10
x15498:	mov [bp + 18], ax	; 3: 137 70 18

file_test$226:	; Parameter 12 string_Hello20X# 8
x15501:	mov word [bp + 20], @10824$string_Hello20X#	; 5: 199 70 20 25 80

file_test$227:	; Call 12 fprintf 0
x15506:	mov word [bp + 12], file_test$228	; 5: 199 70 12 162 60
x15511:	mov [bp + 14], bp	; 3: 137 110 14
x15514:	add bp, 12	; 3: 131 197 12
x15517:	mov di, bp	; 2: 137 239
x15519:	jmp fprintf	; 3: 233 234 33

file_test$228:	; PostCall 12

file_test$229:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$230:	; Parameter 12 filePtr 6
x15522:	mov ax, [bp + 10]	; 3: 139 70 10
x15525:	mov [bp + 18], ax	; 3: 137 70 18

file_test$231:	; Call 12 fclose 0
x15528:	mov word [bp + 12], file_test$232	; 5: 199 70 12 182 60
x15533:	mov [bp + 14], bp	; 3: 137 110 14
x15536:	add bp, 12	; 3: 131 197 12
x15539:	jmp fclose	; 3: 233 230 52

file_test$232:	; PostCall 12

file_test$233:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$234:	; Parameter 12 sourceFile 6
x15542:	mov ax, [bp + 6]	; 3: 139 70 6
x15545:	mov [bp + 18], ax	; 3: 137 70 18

file_test$235:	; Parameter 12 targetFile 8
x15548:	mov ax, [bp + 8]	; 3: 139 70 8
x15551:	mov [bp + 20], ax	; 3: 137 70 20

file_test$236:	; Call 12 rename 0
x15554:	mov word [bp + 12], file_test$237	; 5: 199 70 12 208 60
x15559:	mov [bp + 14], bp	; 3: 137 110 14
x15562:	add bp, 12	; 3: 131 197 12
x15565:	jmp rename	; 3: 233 188 53

file_test$237:	; PostCall 12

file_test$238:	; GetReturnValue £temporary4870

file_test$239:	; NotEqual 247 £temporary4870 0
x15568:	cmp bx, 0	; 3: 131 251 0
x15571:	jne file_test$247	; 2: 117 38

file_test$240:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$241:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15573:	mov word [bp + 18], @10831$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 33 80

file_test$242:	; Parameter 12 sourceFile 8
x15578:	mov ax, [bp + 6]	; 3: 139 70 6
x15581:	mov [bp + 20], ax	; 3: 137 70 20

file_test$243:	; Parameter 12 targetFile 10
x15584:	mov ax, [bp + 8]	; 3: 139 70 8
x15587:	mov [bp + 22], ax	; 3: 137 70 22

file_test$244:	; Call 12 printf 0
x15590:	mov word [bp + 12], file_test$245	; 5: 199 70 12 249 60
x15595:	mov [bp + 14], bp	; 3: 137 110 14
x15598:	add bp, 12	; 3: 131 197 12
x15601:	mov di, bp	; 2: 137 239
x15603:	add di, 4	; 3: 131 199 4
x15606:	jmp printf	; 3: 233 11 208

file_test$245:	; PostCall 12

file_test$246:	; Goto 260
x15609:	jmp file_test$260	; 2: 235 65

file_test$247:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$248:	; Parameter 12 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15611:	mov word [bp + 18], @10833$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 18 65 80

file_test$249:	; Parameter 12 sourceFile 8
x15616:	mov ax, [bp + 6]	; 3: 139 70 6
x15619:	mov [bp + 20], ax	; 3: 137 70 20

file_test$250:	; Parameter 12 targetFile 10
x15622:	mov ax, [bp + 8]	; 3: 139 70 8
x15625:	mov [bp + 22], ax	; 3: 137 70 22

file_test$251:	; Parameter 12 errno 12
x15628:	mov ax, [errno]	; 3: 161 230 10
x15631:	mov [bp + 24], ax	; 3: 137 70 24

file_test$252:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$253:	; Parameter 12 errno 20
x15634:	mov ax, [errno]	; 3: 161 230 10
x15637:	mov [bp + 32], ax	; 3: 137 70 32

file_test$254:	; Call 12 strerror 14
x15640:	mov word [bp + 26], file_test$255	; 5: 199 70 26 38 61
x15645:	mov [bp + 28], bp	; 3: 137 110 28
x15648:	add bp, 26	; 3: 131 197 26
x15651:	jmp strerror	; 3: 233 248 246

file_test$255:	; PostCall 12

file_test$256:	; GetReturnValue £temporary4873

file_test$257:	; Parameter 12 £temporary4873 14
x15654:	mov [bp + 26], bx	; 3: 137 94 26

file_test$258:	; Call 12 printf 0
x15657:	mov word [bp + 12], file_test$259	; 5: 199 70 12 60 61
x15662:	mov [bp + 14], bp	; 3: 137 110 14
x15665:	add bp, 12	; 3: 131 197 12
x15668:	mov di, bp	; 2: 137 239
x15670:	add di, 8	; 3: 131 199 8
x15673:	jmp printf	; 3: 233 200 207

file_test$259:	; PostCall 12

file_test$260:	; Assign sourceFile string_X2#
x15676:	mov word [bp + 6], @10836$string_X2#	; 5: 199 70 6 90 80

file_test$261:	; Assign targetFile string_Y2#
x15681:	mov word [bp + 8], @10838$string_Y2#	; 5: 199 70 8 93 80

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 sourceFile 6
x15686:	mov ax, [bp + 6]	; 3: 139 70 6
x15689:	mov [bp + 16], ax	; 3: 137 70 16

file_test$264:	; Parameter 10 targetFile 8
x15692:	mov ax, [bp + 8]	; 3: 139 70 8
x15695:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; Call 10 rename 0
x15698:	mov word [bp + 10], file_test$266	; 5: 199 70 10 96 61
x15703:	mov [bp + 12], bp	; 3: 137 110 12
x15706:	add bp, 10	; 3: 131 197 10
x15709:	jmp rename	; 3: 233 44 53

file_test$266:	; PostCall 10

file_test$267:	; GetReturnValue £temporary4875

file_test$268:	; NotEqual 276 £temporary4875 0
x15712:	cmp bx, 0	; 3: 131 251 0
x15715:	jne file_test$276	; 2: 117 38

file_test$269:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$270:	; Parameter 10 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15717:	mov word [bp + 16], @10844$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 16 96 80

file_test$271:	; Parameter 10 sourceFile 8
x15722:	mov ax, [bp + 6]	; 3: 139 70 6
x15725:	mov [bp + 18], ax	; 3: 137 70 18

file_test$272:	; Parameter 10 targetFile 10
x15728:	mov ax, [bp + 8]	; 3: 139 70 8
x15731:	mov [bp + 20], ax	; 3: 137 70 20

file_test$273:	; Call 10 printf 0
x15734:	mov word [bp + 10], file_test$274	; 5: 199 70 10 137 61
x15739:	mov [bp + 12], bp	; 3: 137 110 12
x15742:	add bp, 10	; 3: 131 197 10
x15745:	mov di, bp	; 2: 137 239
x15747:	add di, 4	; 3: 131 199 4
x15750:	jmp printf	; 3: 233 123 207

file_test$274:	; PostCall 10

file_test$275:	; Goto 289
x15753:	jmp file_test$289	; 2: 235 65

file_test$276:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$277:	; Parameter 10 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15755:	mov word [bp + 16], @10846$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 16 128 80

file_test$278:	; Parameter 10 sourceFile 8
x15760:	mov ax, [bp + 6]	; 3: 139 70 6
x15763:	mov [bp + 18], ax	; 3: 137 70 18

file_test$279:	; Parameter 10 targetFile 10
x15766:	mov ax, [bp + 8]	; 3: 139 70 8
x15769:	mov [bp + 20], ax	; 3: 137 70 20

file_test$280:	; Parameter 10 errno 12
x15772:	mov ax, [errno]	; 3: 161 230 10
x15775:	mov [bp + 22], ax	; 3: 137 70 22

file_test$281:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 10 errno 20
x15778:	mov ax, [errno]	; 3: 161 230 10
x15781:	mov [bp + 30], ax	; 3: 137 70 30

file_test$283:	; Call 10 strerror 14
x15784:	mov word [bp + 24], file_test$284	; 5: 199 70 24 182 61
x15789:	mov [bp + 26], bp	; 3: 137 110 26
x15792:	add bp, 24	; 3: 131 197 24
x15795:	jmp strerror	; 3: 233 104 246

file_test$284:	; PostCall 10

file_test$285:	; GetReturnValue £temporary4878

file_test$286:	; Parameter 10 £temporary4878 14
x15798:	mov [bp + 24], bx	; 3: 137 94 24

file_test$287:	; Call 10 printf 0
x15801:	mov word [bp + 10], file_test$288	; 5: 199 70 10 204 61
x15806:	mov [bp + 12], bp	; 3: 137 110 12
x15809:	add bp, 10	; 3: 131 197 10
x15812:	mov di, bp	; 2: 137 239
x15814:	add di, 8	; 3: 131 199 8
x15817:	jmp printf	; 3: 233 56 207

file_test$288:	; PostCall 10

file_test$289:	; Assign targetFile string_Z#
x15820:	mov word [bp + 6], @10849$string_Z#	; 5: 199 70 6 153 80

file_test$290:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$291:	; Parameter 8 targetFile 6
x15825:	mov ax, [bp + 6]	; 3: 139 70 6
x15828:	mov [bp + 14], ax	; 3: 137 70 14

file_test$292:	; Parameter 8 string_w# 8
x15831:	mov word [bp + 16], @10851$string_w#	; 5: 199 70 16 155 80

file_test$293:	; Call 8 fopen 0
x15836:	mov word [bp + 8], file_test$294	; 5: 199 70 8 234 61
x15841:	mov [bp + 10], bp	; 3: 137 110 10
x15844:	add bp, 8	; 3: 131 197 8
x15847:	jmp fopen	; 3: 233 9 28

file_test$294:	; PostCall 8

file_test$295:	; GetReturnValue £temporary4880

file_test$296:	; Assign filePtr £temporary4880
x15850:	mov [bp + 8], bx	; 3: 137 94 8

file_test$297:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$298:	; Parameter 10 filePtr 6
x15853:	mov ax, [bp + 8]	; 3: 139 70 8
x15856:	mov [bp + 16], ax	; 3: 137 70 16

file_test$299:	; Parameter 10 string_Hello20Z# 8
x15859:	mov word [bp + 18], @10854$string_Hello20Z#	; 5: 199 70 18 157 80

file_test$300:	; Call 10 fprintf 0
x15864:	mov word [bp + 10], file_test$301	; 5: 199 70 10 8 62
x15869:	mov [bp + 12], bp	; 3: 137 110 12
x15872:	add bp, 10	; 3: 131 197 10
x15875:	mov di, bp	; 2: 137 239
x15877:	jmp fprintf	; 3: 233 132 32

file_test$301:	; PostCall 10

file_test$302:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$303:	; Parameter 10 filePtr 6
x15880:	mov ax, [bp + 8]	; 3: 139 70 8
x15883:	mov [bp + 16], ax	; 3: 137 70 16

file_test$304:	; Call 10 fclose 0
x15886:	mov word [bp + 10], file_test$305	; 5: 199 70 10 28 62
x15891:	mov [bp + 12], bp	; 3: 137 110 12
x15894:	add bp, 10	; 3: 131 197 10
x15897:	jmp fclose	; 3: 233 128 51

file_test$305:	; PostCall 10

file_test$306:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$307:	; Parameter 10 targetFile 6
x15900:	mov ax, [bp + 6]	; 3: 139 70 6
x15903:	mov [bp + 16], ax	; 3: 137 70 16

file_test$308:	; Call 10 remove 0
x15906:	mov word [bp + 10], file_test$309	; 5: 199 70 10 48 62
x15911:	mov [bp + 12], bp	; 3: 137 110 12
x15914:	add bp, 10	; 3: 131 197 10
x15917:	jmp remove	; 3: 233 47 52

file_test$309:	; PostCall 10

file_test$310:	; GetReturnValue £temporary4883

file_test$311:	; NotEqual 318 £temporary4883 0
x15920:	cmp bx, 0	; 3: 131 251 0
x15923:	jne file_test$318	; 2: 117 32

file_test$312:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$313:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15925:	mov word [bp + 16], @10861$string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 165 80

file_test$314:	; Parameter 10 targetFile 8
x15930:	mov ax, [bp + 6]	; 3: 139 70 6
x15933:	mov [bp + 18], ax	; 3: 137 70 18

file_test$315:	; Call 10 printf 0
x15936:	mov word [bp + 10], file_test$316	; 5: 199 70 10 83 62
x15941:	mov [bp + 12], bp	; 3: 137 110 12
x15944:	add bp, 10	; 3: 131 197 10
x15947:	mov di, bp	; 2: 137 239
x15949:	add di, 2	; 3: 131 199 2
x15952:	jmp printf	; 3: 233 177 206

file_test$316:	; PostCall 10

file_test$317:	; Goto 330
x15955:	jmp file_test$330	; 2: 235 59

file_test$318:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 10 string_Error202225s222025i3A2025s2E0A# 6
x15957:	mov word [bp + 16], @10863$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 16 189 80

file_test$320:	; Parameter 10 targetFile 8
x15962:	mov ax, [bp + 6]	; 3: 139 70 6
x15965:	mov [bp + 18], ax	; 3: 137 70 18

file_test$321:	; Parameter 10 errno 10
x15968:	mov ax, [errno]	; 3: 161 230 10
x15971:	mov [bp + 20], ax	; 3: 137 70 20

file_test$322:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$323:	; Parameter 10 errno 18
x15974:	mov ax, [errno]	; 3: 161 230 10
x15977:	mov [bp + 28], ax	; 3: 137 70 28

file_test$324:	; Call 10 strerror 12
x15980:	mov word [bp + 22], file_test$325	; 5: 199 70 22 122 62
x15985:	mov [bp + 24], bp	; 3: 137 110 24
x15988:	add bp, 22	; 3: 131 197 22
x15991:	jmp strerror	; 3: 233 164 245

file_test$325:	; PostCall 10

file_test$326:	; GetReturnValue £temporary4886

file_test$327:	; Parameter 10 £temporary4886 12
x15994:	mov [bp + 22], bx	; 3: 137 94 22

file_test$328:	; Call 10 printf 0
x15997:	mov word [bp + 10], file_test$329	; 5: 199 70 10 144 62
x16002:	mov [bp + 12], bp	; 3: 137 110 12
x16005:	add bp, 10	; 3: 131 197 10
x16008:	mov di, bp	; 2: 137 239
x16010:	add di, 6	; 3: 131 199 6
x16013:	jmp printf	; 3: 233 116 206

file_test$329:	; PostCall 10

file_test$330:	; Assign targetFile string_Z2#
x16016:	mov word [bp + 6], @10866$string_Z2#	; 5: 199 70 6 209 80

file_test$331:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$332:	; Parameter 8 targetFile 6
x16021:	mov ax, [bp + 6]	; 3: 139 70 6
x16024:	mov [bp + 14], ax	; 3: 137 70 14

file_test$333:	; Call 8 remove 0
x16027:	mov word [bp + 8], file_test$334	; 5: 199 70 8 169 62
x16032:	mov [bp + 10], bp	; 3: 137 110 10
x16035:	add bp, 8	; 3: 131 197 8
x16038:	jmp remove	; 3: 233 182 51

file_test$334:	; PostCall 8

file_test$335:	; GetReturnValue £temporary4888

file_test$336:	; NotEqual 343 £temporary4888 0
x16041:	cmp bx, 0	; 3: 131 251 0
x16044:	jne file_test$343	; 2: 117 32

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 string_2225s2220has20been20removed2E0A# 6
x16046:	mov word [bp + 14], @10872$string_2225s2220has20been20removed2E0A#	; 5: 199 70 14 212 80

file_test$339:	; Parameter 8 targetFile 8
x16051:	mov ax, [bp + 6]	; 3: 139 70 6
x16054:	mov [bp + 16], ax	; 3: 137 70 16

file_test$340:	; Call 8 printf 0
x16057:	mov word [bp + 8], file_test$341	; 5: 199 70 8 204 62
x16062:	mov [bp + 10], bp	; 3: 137 110 10
x16065:	add bp, 8	; 3: 131 197 8
x16068:	mov di, bp	; 2: 137 239
x16070:	add di, 2	; 3: 131 199 2
x16073:	jmp printf	; 3: 233 56 206

file_test$341:	; PostCall 8

file_test$342:	; Goto 355
x16076:	jmp file_test$355	; 2: 235 59

file_test$343:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$344:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x16078:	mov word [bp + 14], @10874$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 236 80

file_test$345:	; Parameter 8 targetFile 8
x16083:	mov ax, [bp + 6]	; 3: 139 70 6
x16086:	mov [bp + 16], ax	; 3: 137 70 16

file_test$346:	; Parameter 8 errno 10
x16089:	mov ax, [errno]	; 3: 161 230 10
x16092:	mov [bp + 18], ax	; 3: 137 70 18

file_test$347:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$348:	; Parameter 8 errno 18
x16095:	mov ax, [errno]	; 3: 161 230 10
x16098:	mov [bp + 26], ax	; 3: 137 70 26

file_test$349:	; Call 8 strerror 12
x16101:	mov word [bp + 20], file_test$350	; 5: 199 70 20 243 62
x16106:	mov [bp + 22], bp	; 3: 137 110 22
x16109:	add bp, 20	; 3: 131 197 20
x16112:	jmp strerror	; 3: 233 43 245

file_test$350:	; PostCall 8

file_test$351:	; GetReturnValue £temporary4891

file_test$352:	; Parameter 8 £temporary4891 12
x16115:	mov [bp + 20], bx	; 3: 137 94 20

file_test$353:	; Call 8 printf 0
x16118:	mov word [bp + 8], file_test$354	; 5: 199 70 8 9 63
x16123:	mov [bp + 10], bp	; 3: 137 110 10
x16126:	add bp, 8	; 3: 131 197 8
x16129:	mov di, bp	; 2: 137 239
x16131:	add di, 6	; 3: 131 199 6
x16134:	jmp printf	; 3: 233 251 205

file_test$354:	; PostCall 8

file_test$355:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$356:	; Parameter 6 string_PBook2Etxt# 6
x16137:	mov word [bp + 12], @10877$string_PBook2Etxt#	; 5: 199 70 12 0 81

file_test$357:	; Parameter 6 string_r# 8
x16142:	mov word [bp + 14], @10878$string_r#	; 5: 199 70 14 10 81

file_test$358:	; Call 6 fopen 0
x16147:	mov word [bp + 6], file_test$359	; 5: 199 70 6 33 63
x16152:	mov [bp + 8], bp	; 3: 137 110 8
x16155:	add bp, 6	; 3: 131 197 6
x16158:	jmp fopen	; 3: 233 210 26

file_test$359:	; PostCall 6

file_test$360:	; GetReturnValue £temporary4893

file_test$361:	; Assign inFilePtr £temporary4893
x16161:	mov [bp + 6], bx	; 3: 137 94 6

file_test$362:	; NotEqual 374 inFilePtr 0
x16164:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16168:	jne file_test$374	; 2: 117 59

file_test$363:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$364:	; Parameter 8 stderr 6
x16170:	mov ax, [stderr]	; 3: 161 139 77
x16173:	mov [bp + 14], ax	; 3: 137 70 14

file_test$365:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16176:	mov word [bp + 16], @10886$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 12 81

file_test$366:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16181:	mov word [bp + 18], @10887$string_inFilePtr20213D20NULL#	; 5: 199 70 18 58 81

file_test$367:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16186:	mov word [bp + 20], @10888$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 76 81

file_test$368:	; Parameter 8 119 14
x16191:	mov word [bp + 22], 119	; 5: 199 70 22 119 0

file_test$369:	; Call 8 fprintf 0
x16196:	mov word [bp + 8], file_test$370	; 5: 199 70 8 87 63
x16201:	mov [bp + 10], bp	; 3: 137 110 10
x16204:	add bp, 8	; 3: 131 197 8
x16207:	mov di, bp	; 2: 137 239
x16209:	add di, 6	; 3: 131 199 6
x16212:	jmp fprintf	; 3: 233 53 31

file_test$370:	; PostCall 8

file_test$371:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$372:	; Call 8 abort 0
x16215:	mov word [bp + 8], file_test$373	; 5: 199 70 8 101 63
x16220:	mov [bp + 10], bp	; 3: 137 110 10
x16223:	add bp, 8	; 3: 131 197 8
x16226:	jmp abort	; 3: 233 98 31

file_test$373:	; PostCall 8

file_test$374:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x16229:	mov word [bp + 14], @10893$string_0A252D24s20252D24s0A#	; 5: 199 70 14 141 81

file_test$376:	; Parameter 8 string_Name# 8
x16234:	mov word [bp + 16], @10894$string_Name#	; 5: 199 70 16 155 81

file_test$377:	; Parameter 8 string_Phone# 10
x16239:	mov word [bp + 18], @10895$string_Phone#	; 5: 199 70 18 160 81

file_test$378:	; Call 8 printf 0
x16244:	mov word [bp + 8], file_test$379	; 5: 199 70 8 135 63
x16249:	mov [bp + 10], bp	; 3: 137 110 10
x16252:	add bp, 8	; 3: 131 197 8
x16255:	mov di, bp	; 2: 137 239
x16257:	add di, 4	; 3: 131 199 4
x16260:	jmp printf	; 3: 233 125 205

file_test$379:	; PostCall 8

file_test$380:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$381:	; Parameter 8 string_252D24s20252D24s0A# 6
x16263:	mov word [bp + 14], @10897$string_252D24s20252D24s0A#	; 5: 199 70 14 166 81

file_test$382:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x16268:	mov word [bp + 16], @10898$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 179 81

file_test$383:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x16273:	mov word [bp + 18], @10899$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 204 81

file_test$384:	; Call 8 printf 0
x16278:	mov word [bp + 8], file_test$385	; 5: 199 70 8 169 63
x16283:	mov [bp + 10], bp	; 3: 137 110 10
x16286:	add bp, 8	; 3: 131 197 8
x16289:	mov di, bp	; 2: 137 239
x16291:	add di, 4	; 3: 131 199 4
x16294:	jmp printf	; 3: 233 91 205

file_test$385:	; PostCall 8

file_test$386:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$387:	; Parameter 12 inFilePtr 6
x16297:	mov ax, [bp + 6]	; 3: 139 70 6
x16300:	mov [bp + 18], ax	; 3: 137 70 18

file_test$388:	; Parameter 12 string_25i# 8
x16303:	mov word [bp + 20], @10903$string_25i#	; 5: 199 70 20 229 81

file_test$389:	; address £temporary4900 size
x16308:	mov si, bp	; 2: 137 238
x16310:	add si, 10	; 3: 131 198 10

file_test$390:	; Parameter 12 £temporary4900 10
x16313:	mov [bp + 22], si	; 3: 137 118 22

file_test$391:	; Call 12 fscanf 0
x16316:	mov word [bp + 12], file_test$392	; 5: 199 70 12 207 63
x16321:	mov [bp + 14], bp	; 3: 137 110 14
x16324:	add bp, 12	; 3: 131 197 12
x16327:	mov di, bp	; 2: 137 239
x16329:	add di, 2	; 3: 131 199 2
x16332:	jmp fscanf	; 3: 233 158 31

file_test$392:	; PostCall 12

file_test$393:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$394:	; Parameter 12 string_size2025i0A# 6
x16335:	mov word [bp + 18], @10906$string_size2025i0A#	; 5: 199 70 18 232 81

file_test$395:	; Parameter 12 size 8
x16340:	mov ax, [bp + 10]	; 3: 139 70 10
x16343:	mov [bp + 20], ax	; 3: 137 70 20

file_test$396:	; Call 12 printf 0
x16346:	mov word [bp + 12], file_test$397	; 5: 199 70 12 237 63
x16351:	mov [bp + 14], bp	; 3: 137 110 14
x16354:	add bp, 12	; 3: 131 197 12
x16357:	mov di, bp	; 2: 137 239
x16359:	add di, 2	; 3: 131 199 2
x16362:	jmp printf	; 3: 233 23 205

file_test$397:	; PostCall 12

file_test$398:	; Assign count 0
x16365:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$399:	; SignedGreaterThanEqual 415 count size
x16370:	mov ax, [bp + 10]	; 3: 139 70 10
x16373:	cmp [bp + 8], ax	; 3: 57 70 8
x16376:	jge file_test$415	; 2: 125 87

file_test$400:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$401:	; Parameter 52 inFilePtr 6
x16378:	mov ax, [bp + 6]	; 3: 139 70 6
x16381:	mov [bp + 58], ax	; 3: 137 70 58

file_test$402:	; Parameter 52 string_25s25s# 8
x16384:	mov word [bp + 60], @10920$string_25s25s#	; 5: 199 70 60 241 81

file_test$403:	; Parameter 52 name 10
x16389:	mov [bp + 62], bp	; 3: 137 110 62
x16392:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$404:	; Parameter 52 phone 12
x16396:	mov [bp + 64], bp	; 3: 137 110 64
x16399:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$405:	; Call 52 fscanf 0
x16403:	mov word [bp + 52], file_test$406	; 5: 199 70 52 38 64
x16408:	mov [bp + 54], bp	; 3: 137 110 54
x16411:	add bp, 52	; 3: 131 197 52
x16414:	mov di, bp	; 2: 137 239
x16416:	add di, 4	; 3: 131 199 4
x16419:	jmp fscanf	; 3: 233 71 31

file_test$406:	; PostCall 52

file_test$407:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; Parameter 52 string_252D24s20252D24s0A# 6
x16422:	mov word [bp + 58], @10922$string_252D24s20252D24s0A#	; 5: 199 70 58 246 81

file_test$409:	; Parameter 52 name 8
x16427:	mov [bp + 60], bp	; 3: 137 110 60
x16430:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$410:	; Parameter 52 phone 10
x16434:	mov [bp + 62], bp	; 3: 137 110 62
x16437:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$411:	; Call 52 printf 0
x16441:	mov word [bp + 52], file_test$412	; 5: 199 70 52 76 64
x16446:	mov [bp + 54], bp	; 3: 137 110 54
x16449:	add bp, 52	; 3: 131 197 52
x16452:	mov di, bp	; 2: 137 239
x16454:	add di, 4	; 3: 131 199 4
x16457:	jmp printf	; 3: 233 184 204

file_test$412:	; PostCall 52

file_test$413:	; Increment count
x16460:	inc word [bp + 8]	; 3: 255 70 8

file_test$414:	; Goto 399
x16463:	jmp file_test$399	; 2: 235 161

file_test$415:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 8 string_0A# 6
x16465:	mov word [bp + 14], @10924$string_0A#	; 5: 199 70 14 3 82

file_test$417:	; Call 8 printf 0
x16470:	mov word [bp + 8], file_test$418	; 5: 199 70 8 102 64
x16475:	mov [bp + 10], bp	; 3: 137 110 10
x16478:	add bp, 8	; 3: 131 197 8
x16481:	mov di, bp	; 2: 137 239
x16483:	jmp printf	; 3: 233 158 204

file_test$418:	; PostCall 8

file_test$419:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$420:	; Parameter 8 inFilePtr 6
x16486:	mov ax, [bp + 6]	; 3: 139 70 6
x16489:	mov [bp + 14], ax	; 3: 137 70 14

file_test$421:	; Call 8 fclose 0
x16492:	mov word [bp + 8], file_test$422	; 5: 199 70 8 122 64
x16497:	mov [bp + 10], bp	; 3: 137 110 10
x16500:	add bp, 8	; 3: 131 197 8
x16503:	jmp fclose	; 3: 233 34 49

file_test$422:	; PostCall 8

file_test$423:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$424:	; Parameter 6 string_TestX2Ebin# 6
x16506:	mov word [bp + 12], @10927$string_TestX2Ebin#	; 5: 199 70 12 5 82

file_test$425:	; Parameter 6 string_w# 8
x16511:	mov word [bp + 14], @10928$string_w#	; 5: 199 70 14 15 82

file_test$426:	; Call 6 fopen 0
x16516:	mov word [bp + 6], file_test$427	; 5: 199 70 6 146 64
x16521:	mov [bp + 8], bp	; 3: 137 110 8
x16524:	add bp, 6	; 3: 131 197 6
x16527:	jmp fopen	; 3: 233 97 25

file_test$427:	; PostCall 6

file_test$428:	; GetReturnValue £temporary4909

file_test$429:	; Assign outFilePtr £temporary4909
x16530:	mov [bp + 6], bx	; 3: 137 94 6

file_test$430:	; NotEqual 442 outFilePtr 0
x16533:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16537:	jne file_test$442	; 2: 117 59

file_test$431:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$432:	; Parameter 8 stderr 6
x16539:	mov ax, [stderr]	; 3: 161 139 77
x16542:	mov [bp + 14], ax	; 3: 137 70 14

file_test$433:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16545:	mov word [bp + 16], @10936$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 17 82

file_test$434:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16550:	mov word [bp + 18], @10937$string_outFilePtr20213D20NULL#	; 5: 199 70 18 63 82

file_test$435:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16555:	mov word [bp + 20], @10938$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 82 82

file_test$436:	; Parameter 8 171 14
x16560:	mov word [bp + 22], 171	; 5: 199 70 22 171 0

file_test$437:	; Call 8 fprintf 0
x16565:	mov word [bp + 8], file_test$438	; 5: 199 70 8 200 64
x16570:	mov [bp + 10], bp	; 3: 137 110 10
x16573:	add bp, 8	; 3: 131 197 8
x16576:	mov di, bp	; 2: 137 239
x16578:	add di, 6	; 3: 131 199 6
x16581:	jmp fprintf	; 3: 233 196 29

file_test$438:	; PostCall 8

file_test$439:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Call 8 abort 0
x16584:	mov word [bp + 8], file_test$441	; 5: 199 70 8 214 64
x16589:	mov [bp + 10], bp	; 3: 137 110 10
x16592:	add bp, 8	; 3: 131 197 8
x16595:	jmp abort	; 3: 233 241 29

file_test$441:	; PostCall 8

file_test$442:	; Assign size 10
x16598:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; address £temporary4914 size
x16603:	mov si, bp	; 2: 137 238
x16605:	add si, 8	; 3: 131 198 8

file_test$445:	; Parameter 12 £temporary4914 6
x16608:	mov [bp + 18], si	; 3: 137 118 18

file_test$446:	; Parameter 12 2 8
x16611:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$447:	; Parameter 12 1 10
x16616:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$448:	; Parameter 12 outFilePtr 12
x16621:	mov ax, [bp + 6]	; 3: 139 70 6
x16624:	mov [bp + 24], ax	; 3: 137 70 24

file_test$449:	; Call 12 fwrite 0
x16627:	mov word [bp + 12], file_test$450	; 5: 199 70 12 1 65
x16632:	mov [bp + 14], bp	; 3: 137 110 14
x16635:	add bp, 12	; 3: 131 197 12
x16638:	jmp fwrite	; 3: 233 187 49

file_test$450:	; PostCall 12

file_test$451:	; Assign index 0
x16641:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$452:	; SignedGreaterThanEqual 466 index size
x16646:	mov ax, [bp + 8]	; 3: 139 70 8
x16649:	cmp [bp + 10], ax	; 3: 57 70 10
x16652:	jge file_test$466	; 2: 125 61

file_test$453:	; SignedMultiply £temporary4918 index index
x16654:	mov ax, [bp + 10]	; 3: 139 70 10
x16657:	xor dx, dx	; 2: 49 210
x16659:	imul word [bp + 10]	; 3: 247 110 10

file_test$454:	; IntegralToFloating £temporary4919 £temporary4918
x16662:	mov [container2bytes#], ax	; 3: 163 77 27
x16665:	fild word [container2bytes#]	; 4: 223 6 77 27

file_test$455:	; PopFloat value
x16669:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$456:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$457:	; address £temporary4920 value
x16672:	mov si, bp	; 2: 137 238
x16674:	add si, 12	; 3: 131 198 12

file_test$458:	; Parameter 20 £temporary4920 6
x16677:	mov [bp + 26], si	; 3: 137 118 26

file_test$459:	; Parameter 20 8 8
x16680:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$460:	; Parameter 20 1 10
x16685:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$461:	; Parameter 20 outFilePtr 12
x16690:	mov ax, [bp + 6]	; 3: 139 70 6
x16693:	mov [bp + 32], ax	; 3: 137 70 32

file_test$462:	; Call 20 fwrite 0
x16696:	mov word [bp + 20], file_test$463	; 5: 199 70 20 70 65
x16701:	mov [bp + 22], bp	; 3: 137 110 22
x16704:	add bp, 20	; 3: 131 197 20
x16707:	jmp fwrite	; 3: 233 118 49

file_test$463:	; PostCall 20

file_test$464:	; Increment index
x16710:	inc word [bp + 10]	; 3: 255 70 10

file_test$465:	; Goto 452
x16713:	jmp file_test$452	; 2: 235 187

file_test$466:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$467:	; Parameter 12 outFilePtr 6
x16715:	mov ax, [bp + 6]	; 3: 139 70 6
x16718:	mov [bp + 18], ax	; 3: 137 70 18

file_test$468:	; Call 12 fclose 0
x16721:	mov word [bp + 12], file_test$469	; 5: 199 70 12 95 65
x16726:	mov [bp + 14], bp	; 3: 137 110 14
x16729:	add bp, 12	; 3: 131 197 12
x16732:	jmp fclose	; 3: 233 61 48

file_test$469:	; PostCall 12

file_test$470:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$471:	; Parameter 6 string_TestX2Ebin# 6
x16735:	mov word [bp + 12], @10973$string_TestX2Ebin#	; 5: 199 70 12 147 82

file_test$472:	; Parameter 6 string_r# 8
x16740:	mov word [bp + 14], @10974$string_r#	; 5: 199 70 14 157 82

file_test$473:	; Call 6 fopen 0
x16745:	mov word [bp + 6], file_test$474	; 5: 199 70 6 119 65
x16750:	mov [bp + 8], bp	; 3: 137 110 8
x16753:	add bp, 6	; 3: 131 197 6
x16756:	jmp fopen	; 3: 233 124 24

file_test$474:	; PostCall 6

file_test$475:	; GetReturnValue £temporary4923

file_test$476:	; Assign inFilePtr £temporary4923
x16759:	mov [bp + 6], bx	; 3: 137 94 6

file_test$477:	; NotEqual 489 inFilePtr 0
x16762:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16766:	jne file_test$489	; 2: 117 59

file_test$478:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$479:	; Parameter 12 stderr 6
x16768:	mov ax, [stderr]	; 3: 161 139 77
x16771:	mov [bp + 18], ax	; 3: 137 70 18

file_test$480:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16774:	mov word [bp + 20], @10984$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 159 82

file_test$481:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16779:	mov word [bp + 22], @10985$string_inFilePtr20213D20NULL#	; 5: 199 70 22 205 82

file_test$482:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16784:	mov word [bp + 24], @10986$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 223 82

file_test$483:	; Parameter 12 188 14
x16789:	mov word [bp + 26], 188	; 5: 199 70 26 188 0

file_test$484:	; Call 12 fprintf 0
x16794:	mov word [bp + 12], file_test$485	; 5: 199 70 12 173 65
x16799:	mov [bp + 14], bp	; 3: 137 110 14
x16802:	add bp, 12	; 3: 131 197 12
x16805:	mov di, bp	; 2: 137 239
x16807:	add di, 6	; 3: 131 199 6
x16810:	jmp fprintf	; 3: 233 223 28

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Call 12 abort 0
x16813:	mov word [bp + 12], file_test$488	; 5: 199 70 12 187 65
x16818:	mov [bp + 14], bp	; 3: 137 110 14
x16821:	add bp, 12	; 3: 131 197 12
x16824:	jmp abort	; 3: 233 12 29

file_test$488:	; PostCall 12

file_test$489:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$490:	; address £temporary4928 size
x16827:	mov si, bp	; 2: 137 238
x16829:	add si, 8	; 3: 131 198 8

file_test$491:	; Parameter 12 £temporary4928 6
x16832:	mov [bp + 18], si	; 3: 137 118 18

file_test$492:	; Parameter 12 2 8
x16835:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$493:	; Parameter 12 1 10
x16840:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$494:	; Parameter 12 inFilePtr 12
x16845:	mov ax, [bp + 6]	; 3: 139 70 6
x16848:	mov [bp + 24], ax	; 3: 137 70 24

file_test$495:	; Call 12 fread 0
x16851:	mov word [bp + 12], file_test$496	; 5: 199 70 12 225 65
x16856:	mov [bp + 14], bp	; 3: 137 110 14
x16859:	add bp, 12	; 3: 131 197 12
x16862:	jmp fread	; 3: 233 30 49

file_test$496:	; PostCall 12

file_test$497:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$498:	; Parameter 12 string_size13A2025i0A# 6
x16865:	mov word [bp + 18], @10999$string_size13A2025i0A#	; 5: 199 70 18 32 83

file_test$499:	; Parameter 12 size 8
x16870:	mov ax, [bp + 8]	; 3: 139 70 8
x16873:	mov [bp + 20], ax	; 3: 137 70 20

file_test$500:	; Call 12 printf 0
x16876:	mov word [bp + 12], file_test$501	; 5: 199 70 12 255 65
x16881:	mov [bp + 14], bp	; 3: 137 110 14
x16884:	add bp, 12	; 3: 131 197 12
x16887:	mov di, bp	; 2: 137 239
x16889:	add di, 2	; 3: 131 199 2
x16892:	jmp printf	; 3: 233 5 203

file_test$501:	; PostCall 12

file_test$502:	; Assign index 0
x16895:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$503:	; SignedGreaterThanEqual 521 index size
x16900:	mov ax, [bp + 8]	; 3: 139 70 8
x16903:	cmp [bp + 10], ax	; 3: 57 70 10
x16906:	jge file_test$521	; 2: 125 79

file_test$504:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$505:	; address £temporary4933 value
x16908:	mov si, bp	; 2: 137 238
x16910:	add si, 12	; 3: 131 198 12

file_test$506:	; Parameter 20 £temporary4933 6
x16913:	mov [bp + 26], si	; 3: 137 118 26

file_test$507:	; Parameter 20 8 8
x16916:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$508:	; Parameter 20 1 10
x16921:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$509:	; Parameter 20 inFilePtr 12
x16926:	mov ax, [bp + 6]	; 3: 139 70 6
x16929:	mov [bp + 32], ax	; 3: 137 70 32

file_test$510:	; Call 20 fread 0
x16932:	mov word [bp + 20], file_test$511	; 5: 199 70 20 50 66
x16937:	mov [bp + 22], bp	; 3: 137 110 22
x16940:	add bp, 20	; 3: 131 197 20
x16943:	jmp fread	; 3: 233 205 48

file_test$511:	; PostCall 20

file_test$512:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$513:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16946:	mov word [bp + 26], @11016$string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 43 83

file_test$514:	; Parameter 20 index 8
x16951:	mov ax, [bp + 10]	; 3: 139 70 10
x16954:	mov [bp + 28], ax	; 3: 137 70 28

file_test$515:	; PushFloat value
x16957:	fld qword [bp + 12]	; 3: 221 70 12

file_test$516:	; Parameter 20 value 10
x16960:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$517:	; Call 20 printf 0
x16963:	mov word [bp + 20], file_test$518	; 5: 199 70 20 86 66
x16968:	mov [bp + 22], bp	; 3: 137 110 22
x16971:	add bp, 20	; 3: 131 197 20
x16974:	mov di, bp	; 2: 137 239
x16976:	add di, 10	; 3: 131 199 10
x16979:	jmp printf	; 3: 233 174 202

file_test$518:	; PostCall 20

file_test$519:	; Increment index
x16982:	inc word [bp + 10]	; 3: 255 70 10

file_test$520:	; Goto 503
x16985:	jmp file_test$503	; 2: 235 169

file_test$521:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$522:	; Parameter 12 string_0A# 6
x16987:	mov word [bp + 18], @11018$string_0A#	; 5: 199 70 18 65 83

file_test$523:	; Call 12 printf 0
x16992:	mov word [bp + 12], file_test$524	; 5: 199 70 12 112 66
x16997:	mov [bp + 14], bp	; 3: 137 110 14
x17000:	add bp, 12	; 3: 131 197 12
x17003:	mov di, bp	; 2: 137 239
x17005:	jmp printf	; 3: 233 148 202

file_test$524:	; PostCall 12

file_test$525:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$526:	; Parameter 12 inFilePtr 6
x17008:	mov ax, [bp + 6]	; 3: 139 70 6
x17011:	mov [bp + 18], ax	; 3: 137 70 18

file_test$527:	; Call 12 fclose 0
x17014:	mov word [bp + 12], file_test$528	; 5: 199 70 12 132 66
x17019:	mov [bp + 14], bp	; 3: 137 110 14
x17022:	add bp, 12	; 3: 131 197 12
x17025:	jmp fclose	; 3: 233 24 47

file_test$528:	; PostCall 12

file_test$529:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$530:	; Parameter 6 string_TestY2Ebin# 6
x17028:	mov word [bp + 12], @11021$string_TestY2Ebin#	; 5: 199 70 12 67 83

file_test$531:	; Parameter 6 string_w# 8
x17033:	mov word [bp + 14], @11022$string_w#	; 5: 199 70 14 77 83

file_test$532:	; Call 6 fopen 0
x17038:	mov word [bp + 6], file_test$533	; 5: 199 70 6 156 66
x17043:	mov [bp + 8], bp	; 3: 137 110 8
x17046:	add bp, 6	; 3: 131 197 6
x17049:	jmp fopen	; 3: 233 87 23

file_test$533:	; PostCall 6

file_test$534:	; GetReturnValue £temporary4938

file_test$535:	; Assign outFilePtr £temporary4938
x17052:	mov [bp + 6], bx	; 3: 137 94 6

file_test$536:	; NotEqual 548 outFilePtr 0
x17055:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17059:	jne file_test$548	; 2: 117 59

file_test$537:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$538:	; Parameter 8 stderr 6
x17061:	mov ax, [stderr]	; 3: 161 139 77
x17064:	mov [bp + 14], ax	; 3: 137 70 14

file_test$539:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17067:	mov word [bp + 16], @11030$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 79 83

file_test$540:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x17072:	mov word [bp + 18], @11031$string_outFilePtr20213D20NULL#	; 5: 199 70 18 125 83

file_test$541:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17077:	mov word [bp + 20], @11032$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 144 83

file_test$542:	; Parameter 8 203 14
x17082:	mov word [bp + 22], 203	; 5: 199 70 22 203 0

file_test$543:	; Call 8 fprintf 0
x17087:	mov word [bp + 8], file_test$544	; 5: 199 70 8 210 66
x17092:	mov [bp + 10], bp	; 3: 137 110 10
x17095:	add bp, 8	; 3: 131 197 8
x17098:	mov di, bp	; 2: 137 239
x17100:	add di, 6	; 3: 131 199 6
x17103:	jmp fprintf	; 3: 233 186 27

file_test$544:	; PostCall 8

file_test$545:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$546:	; Call 8 abort 0
x17106:	mov word [bp + 8], file_test$547	; 5: 199 70 8 224 66
x17111:	mov [bp + 10], bp	; 3: 137 110 10
x17114:	add bp, 8	; 3: 131 197 8
x17117:	jmp abort	; 3: 233 231 27

file_test$547:	; PostCall 8

file_test$548:	; Assign size 10
x17120:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$549:	; Assign index 0
x17125:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$550:	; SignedGreaterThanEqual 564 index size
x17130:	mov ax, [bp + 8]	; 3: 139 70 8
x17133:	cmp [bp + 10], ax	; 3: 57 70 10
x17136:	jge file_test$564	; 2: 125 61

file_test$551:	; SignedMultiply £temporary4945 index index
x17138:	mov ax, [bp + 10]	; 3: 139 70 10
x17141:	xor dx, dx	; 2: 49 210
x17143:	imul word [bp + 10]	; 3: 247 110 10

file_test$552:	; IntegralToFloating £temporary4946 £temporary4945
x17146:	mov [container2bytes#], ax	; 3: 163 77 27
x17149:	fild word [container2bytes#]	; 4: 223 6 77 27

file_test$553:	; PopFloat value
x17153:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$554:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; address £temporary4947 value
x17156:	mov si, bp	; 2: 137 238
x17158:	add si, 12	; 3: 131 198 12

file_test$556:	; Parameter 20 £temporary4947 6
x17161:	mov [bp + 26], si	; 3: 137 118 26

file_test$557:	; Parameter 20 8 8
x17164:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$558:	; Parameter 20 1 10
x17169:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$559:	; Parameter 20 outFilePtr 12
x17174:	mov ax, [bp + 6]	; 3: 139 70 6
x17177:	mov [bp + 32], ax	; 3: 137 70 32

file_test$560:	; Call 20 fwrite 0
x17180:	mov word [bp + 20], file_test$561	; 5: 199 70 20 42 67
x17185:	mov [bp + 22], bp	; 3: 137 110 22
x17188:	add bp, 20	; 3: 131 197 20
x17191:	jmp fwrite	; 3: 233 146 47

file_test$561:	; PostCall 20

file_test$562:	; Increment index
x17194:	inc word [bp + 10]	; 3: 255 70 10

file_test$563:	; Goto 550
x17197:	jmp file_test$550	; 2: 235 187

file_test$564:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$565:	; Parameter 12 outFilePtr 6
x17199:	mov ax, [bp + 6]	; 3: 139 70 6
x17202:	mov [bp + 18], ax	; 3: 137 70 18

file_test$566:	; Call 12 fclose 0
x17205:	mov word [bp + 12], file_test$567	; 5: 199 70 12 67 67
x17210:	mov [bp + 14], bp	; 3: 137 110 14
x17213:	add bp, 12	; 3: 131 197 12
x17216:	jmp fclose	; 3: 233 89 46

file_test$567:	; PostCall 12

file_test$568:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 6 string_TestY2Ebin# 6
x17219:	mov word [bp + 12], @11059$string_TestY2Ebin#	; 5: 199 70 12 209 83

file_test$570:	; Parameter 6 string_r# 8
x17224:	mov word [bp + 14], @11060$string_r#	; 5: 199 70 14 219 83

file_test$571:	; Call 6 fopen 0
x17229:	mov word [bp + 6], file_test$572	; 5: 199 70 6 91 67
x17234:	mov [bp + 8], bp	; 3: 137 110 8
x17237:	add bp, 6	; 3: 131 197 6
x17240:	jmp fopen	; 3: 233 152 22

file_test$572:	; PostCall 6

file_test$573:	; GetReturnValue £temporary4950

file_test$574:	; Assign inFilePtr £temporary4950
x17243:	mov [bp + 6], bx	; 3: 137 94 6

file_test$575:	; NotEqual 587 inFilePtr 0
x17246:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17250:	jne file_test$587	; 2: 117 59

file_test$576:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$577:	; Parameter 8 stderr 6
x17252:	mov ax, [stderr]	; 3: 161 139 77
x17255:	mov [bp + 14], ax	; 3: 137 70 14

file_test$578:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17258:	mov word [bp + 16], @11068$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 221 83

file_test$579:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17263:	mov word [bp + 18], @11069$string_inFilePtr20213D20NULL#	; 5: 199 70 18 11 84

file_test$580:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17268:	mov word [bp + 20], @11070$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 29 84

file_test$581:	; Parameter 8 217 14
x17273:	mov word [bp + 22], 217	; 5: 199 70 22 217 0

file_test$582:	; Call 8 fprintf 0
x17278:	mov word [bp + 8], file_test$583	; 5: 199 70 8 145 67
x17283:	mov [bp + 10], bp	; 3: 137 110 10
x17286:	add bp, 8	; 3: 131 197 8
x17289:	mov di, bp	; 2: 137 239
x17291:	add di, 6	; 3: 131 199 6
x17294:	jmp fprintf	; 3: 233 251 26

file_test$583:	; PostCall 8

file_test$584:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$585:	; Call 8 abort 0
x17297:	mov word [bp + 8], file_test$586	; 5: 199 70 8 159 67
x17302:	mov [bp + 10], bp	; 3: 137 110 10
x17305:	add bp, 8	; 3: 131 197 8
x17308:	jmp abort	; 3: 233 40 27

file_test$586:	; PostCall 8

file_test$587:	; Assign index 0
x17311:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$588:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$589:	; address £temporary4955 value
x17316:	mov si, bp	; 2: 137 238
x17318:	add si, 10	; 3: 131 198 10

file_test$590:	; Parameter 18 £temporary4955 6
x17321:	mov [bp + 24], si	; 3: 137 118 24

file_test$591:	; Parameter 18 8 8
x17324:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$592:	; Parameter 18 1 10
x17329:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$593:	; Parameter 18 inFilePtr 12
x17334:	mov ax, [bp + 6]	; 3: 139 70 6
x17337:	mov [bp + 30], ax	; 3: 137 70 30

file_test$594:	; Call 18 fread 0
x17340:	mov word [bp + 18], file_test$595	; 5: 199 70 18 202 67
x17345:	mov [bp + 20], bp	; 3: 137 110 20
x17348:	add bp, 18	; 3: 131 197 18
x17351:	jmp fread	; 3: 233 53 47

file_test$595:	; PostCall 18

file_test$596:	; GetReturnValue £temporary4956

file_test$597:	; SignedLessThanEqual 608 £temporary4956 0
x17354:	cmp bx, 0	; 3: 131 251 0
x17357:	jle file_test$608	; 2: 126 41

file_test$598:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$599:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x17359:	mov word [bp + 24], @11090$string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 94 84

file_test$600:	; Assign £temporary4958 index
x17364:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$601:	; Increment index
x17367:	inc word [bp + 8]	; 3: 255 70 8

file_test$602:	; Parameter 18 £temporary4958 8
x17370:	mov [bp + 26], ax	; 3: 137 70 26

file_test$603:	; PushFloat value
x17373:	fld qword [bp + 10]	; 3: 221 70 10

file_test$604:	; Parameter 18 value 10
x17376:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$605:	; Call 18 printf 0
x17379:	mov word [bp + 18], file_test$606	; 5: 199 70 18 246 67
x17384:	mov [bp + 20], bp	; 3: 137 110 20
x17387:	add bp, 18	; 3: 131 197 18
x17390:	mov di, bp	; 2: 137 239
x17392:	add di, 10	; 3: 131 199 10
x17395:	jmp printf	; 3: 233 14 201

file_test$606:	; PostCall 18

file_test$607:	; Goto 588
x17398:	jmp file_test$588	; 2: 235 172

file_test$608:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$609:	; Parameter 8 string_0A# 6
x17400:	mov word [bp + 14], @11096$string_0A#	; 5: 199 70 14 116 84

file_test$610:	; Call 8 printf 0
x17405:	mov word [bp + 8], file_test$611	; 5: 199 70 8 13 68
x17410:	mov [bp + 10], bp	; 3: 137 110 10
x17413:	add bp, 8	; 3: 131 197 8
x17416:	mov di, bp	; 2: 137 239
x17418:	jmp printf	; 3: 233 247 200

file_test$611:	; PostCall 8

file_test$612:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$613:	; Parameter 8 inFilePtr 6
x17421:	mov ax, [bp + 6]	; 3: 139 70 6
x17424:	mov [bp + 14], ax	; 3: 137 70 14

file_test$614:	; Call 8 fclose 0
x17427:	mov word [bp + 8], file_test$615	; 5: 199 70 8 33 68
x17432:	mov [bp + 10], bp	; 3: 137 110 10
x17435:	add bp, 8	; 3: 131 197 8
x17438:	jmp fclose	; 3: 233 123 45

file_test$615:	; PostCall 8

file_test$616:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$617:	; Parameter 6 string_TestY2Ebin# 6
x17441:	mov word [bp + 12], @11099$string_TestY2Ebin#	; 5: 199 70 12 118 84

file_test$618:	; Parameter 6 string_r# 8
x17446:	mov word [bp + 14], @11100$string_r#	; 5: 199 70 14 128 84

file_test$619:	; Call 6 fopen 0
x17451:	mov word [bp + 6], file_test$620	; 5: 199 70 6 57 68
x17456:	mov [bp + 8], bp	; 3: 137 110 8
x17459:	add bp, 6	; 3: 131 197 6
x17462:	jmp fopen	; 3: 233 186 21

file_test$620:	; PostCall 6

file_test$621:	; GetReturnValue £temporary4963

file_test$622:	; Assign inFilePtr £temporary4963
x17465:	mov [bp + 6], bx	; 3: 137 94 6

file_test$623:	; NotEqual 635 inFilePtr 0
x17468:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17472:	jne file_test$635	; 2: 117 59

file_test$624:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$625:	; Parameter 8 stderr 6
x17474:	mov ax, [stderr]	; 3: 161 139 77
x17477:	mov [bp + 14], ax	; 3: 137 70 14

file_test$626:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17480:	mov word [bp + 16], @11108$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 130 84

file_test$627:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17485:	mov word [bp + 18], @11109$string_inFilePtr20213D20NULL#	; 5: 199 70 18 176 84

file_test$628:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17490:	mov word [bp + 20], @11110$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 194 84

file_test$629:	; Parameter 8 232 14
x17495:	mov word [bp + 22], 232	; 5: 199 70 22 232 0

file_test$630:	; Call 8 fprintf 0
x17500:	mov word [bp + 8], file_test$631	; 5: 199 70 8 111 68
x17505:	mov [bp + 10], bp	; 3: 137 110 10
x17508:	add bp, 8	; 3: 131 197 8
x17511:	mov di, bp	; 2: 137 239
x17513:	add di, 6	; 3: 131 199 6
x17516:	jmp fprintf	; 3: 233 29 26

file_test$631:	; PostCall 8

file_test$632:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$633:	; Call 8 abort 0
x17519:	mov word [bp + 8], file_test$634	; 5: 199 70 8 125 68
x17524:	mov [bp + 10], bp	; 3: 137 110 10
x17527:	add bp, 8	; 3: 131 197 8
x17530:	jmp abort	; 3: 233 74 26

file_test$634:	; PostCall 8

file_test$635:	; Assign index 0
x17533:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$636:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$637:	; Parameter 10 inFilePtr 6
x17538:	mov ax, [bp + 6]	; 3: 139 70 6
x17541:	mov [bp + 16], ax	; 3: 137 70 16

file_test$638:	; Call 10 feof 0
x17544:	mov word [bp + 10], file_test$639	; 5: 199 70 10 150 68
x17549:	mov [bp + 12], bp	; 3: 137 110 12
x17552:	add bp, 10	; 3: 131 197 10
x17555:	jmp feof	; 3: 233 66 26

file_test$639:	; PostCall 10

file_test$640:	; GetReturnValue £temporary4968

file_test$641:	; NotEqual 660 £temporary4968 0
x17558:	cmp bx, 0	; 3: 131 251 0
x17561:	jne file_test$660	; 2: 117 79

file_test$642:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$643:	; address £temporary4971 value
x17563:	mov si, bp	; 2: 137 238
x17565:	add si, 10	; 3: 131 198 10

file_test$644:	; Parameter 18 £temporary4971 6
x17568:	mov [bp + 24], si	; 3: 137 118 24

file_test$645:	; Parameter 18 8 8
x17571:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$646:	; Parameter 18 1 10
x17576:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$647:	; Parameter 18 inFilePtr 12
x17581:	mov ax, [bp + 6]	; 3: 139 70 6
x17584:	mov [bp + 30], ax	; 3: 137 70 30

file_test$648:	; Call 18 fread 0
x17587:	mov word [bp + 18], file_test$649	; 5: 199 70 18 193 68
x17592:	mov [bp + 20], bp	; 3: 137 110 20
x17595:	add bp, 18	; 3: 131 197 18
x17598:	jmp fread	; 3: 233 62 46

file_test$649:	; PostCall 18

file_test$650:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$651:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x17601:	mov word [bp + 24], @11131$string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 3 85

file_test$652:	; Assign £temporary4973 index
x17606:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$653:	; Increment index
x17609:	inc word [bp + 8]	; 3: 255 70 8

file_test$654:	; Parameter 18 £temporary4973 8
x17612:	mov [bp + 26], ax	; 3: 137 70 26

file_test$655:	; PushFloat value
x17615:	fld qword [bp + 10]	; 3: 221 70 10

file_test$656:	; Parameter 18 value 10
x17618:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$657:	; Call 18 printf 0
x17621:	mov word [bp + 18], file_test$658	; 5: 199 70 18 232 68
x17626:	mov [bp + 20], bp	; 3: 137 110 20
x17629:	add bp, 18	; 3: 131 197 18
x17632:	mov di, bp	; 2: 137 239
x17634:	add di, 10	; 3: 131 199 10
x17637:	jmp printf	; 3: 233 28 200

file_test$658:	; PostCall 18

file_test$659:	; Goto 636
x17640:	jmp file_test$636	; 2: 235 152

file_test$660:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$661:	; Parameter 8 string_0A# 6
x17642:	mov word [bp + 14], @11137$string_0A#	; 5: 199 70 14 25 85

file_test$662:	; Call 8 printf 0
x17647:	mov word [bp + 8], file_test$663	; 5: 199 70 8 255 68
x17652:	mov [bp + 10], bp	; 3: 137 110 10
x17655:	add bp, 8	; 3: 131 197 8
x17658:	mov di, bp	; 2: 137 239
x17660:	jmp printf	; 3: 233 5 200

file_test$663:	; PostCall 8

file_test$664:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$665:	; Parameter 8 inFilePtr 6
x17663:	mov ax, [bp + 6]	; 3: 139 70 6
x17666:	mov [bp + 14], ax	; 3: 137 70 14

file_test$666:	; Call 8 fclose 0
x17669:	mov word [bp + 8], file_test$667	; 5: 199 70 8 19 69
x17674:	mov [bp + 10], bp	; 3: 137 110 10
x17677:	add bp, 8	; 3: 131 197 8
x17680:	jmp fclose	; 3: 233 137 44

file_test$667:	; PostCall 8

file_test$668:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$669:	; Parameter 6 string_TestX2Ebin# 6
x17683:	mov word [bp + 12], @11140$string_TestX2Ebin#	; 5: 199 70 12 27 85

file_test$670:	; Parameter 6 string_r# 8
x17688:	mov word [bp + 14], @11141$string_r#	; 5: 199 70 14 37 85

file_test$671:	; Call 6 fopen 0
x17693:	mov word [bp + 6], file_test$672	; 5: 199 70 6 43 69
x17698:	mov [bp + 8], bp	; 3: 137 110 8
x17701:	add bp, 6	; 3: 131 197 6
x17704:	jmp fopen	; 3: 233 200 20

file_test$672:	; PostCall 6

file_test$673:	; GetReturnValue £temporary4978

file_test$674:	; Assign inFilePtr £temporary4978
x17707:	mov [bp + 6], bx	; 3: 137 94 6

file_test$675:	; NotEqual 687 inFilePtr 0
x17710:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17714:	jne file_test$687	; 2: 117 59

file_test$676:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$677:	; Parameter 10 stderr 6
x17716:	mov ax, [stderr]	; 3: 161 139 77
x17719:	mov [bp + 16], ax	; 3: 137 70 16

file_test$678:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17722:	mov word [bp + 18], @11150$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 39 85

file_test$679:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17727:	mov word [bp + 20], @11151$string_inFilePtr20213D20NULL#	; 5: 199 70 20 85 85

file_test$680:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17732:	mov word [bp + 22], @11152$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 103 85

file_test$681:	; Parameter 10 250 14
x17737:	mov word [bp + 24], 250	; 5: 199 70 24 250 0

file_test$682:	; Call 10 fprintf 0
x17742:	mov word [bp + 10], file_test$683	; 5: 199 70 10 97 69
x17747:	mov [bp + 12], bp	; 3: 137 110 12
x17750:	add bp, 10	; 3: 131 197 10
x17753:	mov di, bp	; 2: 137 239
x17755:	add di, 6	; 3: 131 199 6
x17758:	jmp fprintf	; 3: 233 43 25

file_test$683:	; PostCall 10

file_test$684:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$685:	; Call 10 abort 0
x17761:	mov word [bp + 10], file_test$686	; 5: 199 70 10 111 69
x17766:	mov [bp + 12], bp	; 3: 137 110 12
x17769:	add bp, 10	; 3: 131 197 10
x17772:	jmp abort	; 3: 233 88 25

file_test$686:	; PostCall 10

file_test$687:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$688:	; address £temporary4983 size
x17775:	mov si, bp	; 2: 137 238
x17777:	add si, 8	; 3: 131 198 8

file_test$689:	; Parameter 10 £temporary4983 6
x17780:	mov [bp + 16], si	; 3: 137 118 16

file_test$690:	; Parameter 10 2 8
x17783:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$691:	; Parameter 10 1 10
x17788:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$692:	; Parameter 10 inFilePtr 12
x17793:	mov ax, [bp + 6]	; 3: 139 70 6
x17796:	mov [bp + 22], ax	; 3: 137 70 22

file_test$693:	; Call 10 fread 0
x17799:	mov word [bp + 10], file_test$694	; 5: 199 70 10 149 69
x17804:	mov [bp + 12], bp	; 3: 137 110 12
x17807:	add bp, 10	; 3: 131 197 10
x17810:	jmp fread	; 3: 233 106 45

file_test$694:	; PostCall 10

file_test$695:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$696:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17813:	mov word [bp + 16], @11165$string_size43A2025i20total2025i0A#	; 5: 199 70 16 168 85

file_test$697:	; Parameter 10 size 8
x17818:	mov ax, [bp + 8]	; 3: 139 70 8
x17821:	mov [bp + 18], ax	; 3: 137 70 18

file_test$698:	; SignedMultiply £temporary4985 size 8
x17824:	mov ax, [bp + 8]	; 3: 139 70 8
x17827:	xor dx, dx	; 2: 49 210
x17829:	imul word [@11167$int2$8#]	; 4: 247 46 188 85

file_test$699:	; Parameter 10 £temporary4985 10
x17833:	mov [bp + 20], ax	; 3: 137 70 20

file_test$700:	; Call 10 printf 0
x17836:	mov word [bp + 10], file_test$701	; 5: 199 70 10 191 69
x17841:	mov [bp + 12], bp	; 3: 137 110 12
x17844:	add bp, 10	; 3: 131 197 10
x17847:	mov di, bp	; 2: 137 239
x17849:	add di, 4	; 3: 131 199 4
x17852:	jmp printf	; 3: 233 69 199

file_test$701:	; PostCall 10

file_test$702:	; SignedMultiply total size 8
x17855:	mov ax, [bp + 8]	; 3: 139 70 8
x17858:	xor dx, dx	; 2: 49 210
x17860:	imul word [@11171$int2$8#]	; 4: 247 46 190 85
x17864:	mov [bp + 10], ax	; 3: 137 70 10

file_test$703:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$704:	; Parameter 14 total 6
x17867:	mov ax, [bp + 10]	; 3: 139 70 10
x17870:	mov [bp + 20], ax	; 3: 137 70 20

file_test$705:	; Call 14 malloc 0
x17873:	mov word [bp + 14], file_test$706	; 5: 199 70 14 223 69
x17878:	mov [bp + 16], bp	; 3: 137 110 16
x17881:	add bp, 14	; 3: 131 197 14
x17884:	jmp malloc	; 3: 233 99 45

file_test$706:	; PostCall 14

file_test$707:	; GetReturnValue £temporary4988

file_test$708:	; Assign p £temporary4988
x17887:	mov [bp + 14], bx	; 3: 137 94 14

file_test$709:	; SignedMultiply £temporary4989 size 8
x17890:	mov ax, [bp + 8]	; 3: 139 70 8
x17893:	xor dx, dx	; 2: 49 210
x17895:	imul word [@11178$int2$8#]	; 4: 247 46 192 85

file_test$710:	; BinaryAdd endPtr p £temporary4989
x17899:	mov bx, [bp + 14]	; 3: 139 94 14
x17902:	add bx, ax	; 2: 1 195
x17904:	mov [bp + 16], bx	; 3: 137 94 16

file_test$711:	; NotEqual 723 p 0
x17907:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17911:	jne file_test$723	; 2: 117 59

file_test$712:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$713:	; Parameter 18 stderr 6
x17913:	mov ax, [stderr]	; 3: 161 139 77
x17916:	mov [bp + 24], ax	; 3: 137 70 24

file_test$714:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17919:	mov word [bp + 26], @11186$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 194 85

file_test$715:	; Parameter 18 string_p20213D20NULL# 10
x17924:	mov word [bp + 28], @11187$string_p20213D20NULL#	; 5: 199 70 28 240 85

file_test$716:	; Parameter 18 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17929:	mov word [bp + 30], @11188$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 250 85

file_test$717:	; Parameter 18 257 14
x17934:	mov word [bp + 32], 257	; 5: 199 70 32 1 1

file_test$718:	; Call 18 fprintf 0
x17939:	mov word [bp + 18], file_test$719	; 5: 199 70 18 38 70
x17944:	mov [bp + 20], bp	; 3: 137 110 20
x17947:	add bp, 18	; 3: 131 197 18
x17950:	mov di, bp	; 2: 137 239
x17952:	add di, 6	; 3: 131 199 6
x17955:	jmp fprintf	; 3: 233 102 24

file_test$719:	; PostCall 18

file_test$720:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$721:	; Call 18 abort 0
x17958:	mov word [bp + 18], file_test$722	; 5: 199 70 18 52 70
x17963:	mov [bp + 20], bp	; 3: 137 110 20
x17966:	add bp, 18	; 3: 131 197 18
x17969:	jmp abort	; 3: 233 147 24

file_test$722:	; PostCall 18

file_test$723:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$724:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17972:	mov word [bp + 24], @11193$string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 59 86

file_test$725:	; Parameter 18 p 8
x17977:	mov ax, [bp + 14]	; 3: 139 70 14
x17980:	mov [bp + 26], ax	; 3: 137 70 26

file_test$726:	; Parameter 18 total 10
x17983:	mov ax, [bp + 10]	; 3: 139 70 10
x17986:	mov [bp + 28], ax	; 3: 137 70 28

file_test$727:	; Parameter 18 endPtr 12
x17989:	mov ax, [bp + 16]	; 3: 139 70 16
x17992:	mov [bp + 30], ax	; 3: 137 70 30

file_test$728:	; Call 18 printf 0
x17995:	mov word [bp + 18], file_test$729	; 5: 199 70 18 94 70
x18000:	mov [bp + 20], bp	; 3: 137 110 20
x18003:	add bp, 18	; 3: 131 197 18
x18006:	mov di, bp	; 2: 137 239
x18008:	add di, 6	; 3: 131 199 6
x18011:	jmp printf	; 3: 233 166 198

file_test$729:	; PostCall 18

file_test$730:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$731:	; Parameter 18 p 6
x18014:	mov ax, [bp + 14]	; 3: 139 70 14
x18017:	mov [bp + 24], ax	; 3: 137 70 24

file_test$732:	; Parameter 18 total 8
x18020:	mov ax, [bp + 10]	; 3: 139 70 10
x18023:	mov [bp + 26], ax	; 3: 137 70 26

file_test$733:	; Parameter 18 1 10
x18026:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$734:	; Parameter 18 inFilePtr 12
x18031:	mov ax, [bp + 6]	; 3: 139 70 6
x18034:	mov [bp + 30], ax	; 3: 137 70 30

file_test$735:	; Call 18 fread 0
x18037:	mov word [bp + 18], file_test$736	; 5: 199 70 18 131 70
x18042:	mov [bp + 20], bp	; 3: 137 110 20
x18045:	add bp, 18	; 3: 131 197 18
x18048:	jmp fread	; 3: 233 124 44

file_test$736:	; PostCall 18

file_test$737:	; Assign index 0
x18051:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$738:	; SignedGreaterThanEqual 751 index size
x18056:	mov ax, [bp + 8]	; 3: 139 70 8
x18059:	cmp [bp + 12], ax	; 3: 57 70 12
x18062:	jge file_test$751	; 2: 125 54

file_test$739:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$740:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x18064:	mov word [bp + 24], @11205$string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 78 86

file_test$741:	; Parameter 18 index 8
x18069:	mov ax, [bp + 12]	; 3: 139 70 12
x18072:	mov [bp + 26], ax	; 3: 137 70 26

file_test$742:	; SignedMultiply £temporary5000 index 8
x18075:	mov ax, [bp + 12]	; 3: 139 70 12
x18078:	xor dx, dx	; 2: 49 210
x18080:	imul word [@11207$int2$8#]	; 4: 247 46 100 86

file_test$743:	; BinaryAdd £temporary5001 p £temporary5000
x18084:	mov si, [bp + 14]	; 3: 139 118 14
x18087:	add si, ax	; 2: 1 198

file_test$744:	; Deref £temporary4999 -> £temporary5001 £temporary5001 0

file_test$745:	; PushFloat £temporary4999 -> £temporary5001
x18089:	fld qword [si]	; 2: 221 4

file_test$746:	; Parameter 18 £temporary4999 -> £temporary5001 10
x18091:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$747:	; Call 18 printf 0
x18094:	mov word [bp + 18], file_test$748	; 5: 199 70 18 193 70
x18099:	mov [bp + 20], bp	; 3: 137 110 20
x18102:	add bp, 18	; 3: 131 197 18
x18105:	mov di, bp	; 2: 137 239
x18107:	add di, 10	; 3: 131 199 10
x18110:	jmp printf	; 3: 233 67 198

file_test$748:	; PostCall 18

file_test$749:	; Increment index
x18113:	inc word [bp + 12]	; 3: 255 70 12

file_test$750:	; Goto 738
x18116:	jmp file_test$738	; 2: 235 194

file_test$751:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$752:	; Parameter 18 string_0A# 6
x18118:	mov word [bp + 24], @11211$string_0A#	; 5: 199 70 24 102 86

file_test$753:	; Call 18 printf 0
x18123:	mov word [bp + 18], file_test$754	; 5: 199 70 18 219 70
x18128:	mov [bp + 20], bp	; 3: 137 110 20
x18131:	add bp, 18	; 3: 131 197 18
x18134:	mov di, bp	; 2: 137 239
x18136:	jmp printf	; 3: 233 41 198

file_test$754:	; PostCall 18

file_test$755:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$756:	; Parameter 18 p 6
x18139:	mov ax, [bp + 14]	; 3: 139 70 14
x18142:	mov [bp + 24], ax	; 3: 137 70 24

file_test$757:	; Call 18 free 0
x18145:	mov word [bp + 18], file_test$758	; 5: 199 70 18 239 70
x18150:	mov [bp + 20], bp	; 3: 137 110 20
x18153:	add bp, 18	; 3: 131 197 18
x18156:	jmp free	; 3: 233 96 46

file_test$758:	; PostCall 18

file_test$759:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$760:	; Parameter 10 inFilePtr 6
x18159:	mov ax, [bp + 6]	; 3: 139 70 6
x18162:	mov [bp + 16], ax	; 3: 137 70 16

file_test$761:	; Call 10 fclose 0
x18165:	mov word [bp + 10], file_test$762	; 5: 199 70 10 3 71
x18170:	mov [bp + 12], bp	; 3: 137 110 12
x18173:	add bp, 10	; 3: 131 197 10
x18176:	jmp fclose	; 3: 233 153 42

file_test$762:	; PostCall 10

file_test$763:	; Assign personVector[0]$name[0] 65
x18179:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$764:	; Assign personVector[0]$name[1] 100
x18183:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$765:	; Assign personVector[0]$name[2] 97
x18187:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$766:	; Assign personVector[0]$name[3] 109
x18191:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$767:	; Assign personVector[0]$name[4] 32
x18195:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$768:	; Assign personVector[0]$name[5] 66
x18199:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$769:	; Assign personVector[0]$name[6] 101
x18203:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$770:	; Assign personVector[0]$name[7] 114
x18207:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$771:	; Assign personVector[0]$name[8] 116
x18211:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$772:	; Assign personVector[0]$name[9] 105
x18215:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$773:	; Assign personVector[0]$name[10] 108
x18219:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$774:	; Assign personVector[0]$name[11] 115
x18223:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$775:	; Assign personVector[0]$name[12] 115
x18227:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$776:	; Assign personVector[0]$name[13] 111
x18231:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$777:	; Assign personVector[0]$name[14] 110
x18235:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$778:	; Assign personVector[0]$name[15] 0
x18239:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$779:	; Assign personVector[0]$phone 12345
x18243:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$780:	; Assign personVector[1]$name[0] 66
x18248:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$781:	; Assign personVector[1]$name[1] 101
x18252:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$782:	; Assign personVector[1]$name[2] 114
x18256:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$783:	; Assign personVector[1]$name[3] 116
x18260:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$784:	; Assign personVector[1]$name[4] 105
x18264:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$785:	; Assign personVector[1]$name[5] 108
x18268:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$786:	; Assign personVector[1]$name[6] 32
x18272:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$787:	; Assign personVector[1]$name[7] 67
x18276:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$788:	; Assign personVector[1]$name[8] 101
x18280:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$789:	; Assign personVector[1]$name[9] 97
x18284:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$790:	; Assign personVector[1]$name[10] 115
x18288:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$791:	; Assign personVector[1]$name[11] 97
x18292:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$792:	; Assign personVector[1]$name[12] 114
x18296:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$793:	; Assign personVector[1]$name[13] 115
x18300:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$794:	; Assign personVector[1]$name[14] 115
x18304:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$795:	; Assign personVector[1]$name[15] 111
x18308:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$796:	; Assign personVector[1]$name[16] 110
x18312:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$797:	; Assign personVector[1]$name[17] 0
x18316:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$798:	; Assign personVector[1]$phone 23456
x18320:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$799:	; Assign personVector[2]$name[0] 67
x18325:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$800:	; Assign personVector[2]$name[1] 101
x18329:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$801:	; Assign personVector[2]$name[2] 97
x18333:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$802:	; Assign personVector[2]$name[3] 115
x18337:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$803:	; Assign personVector[2]$name[4] 97
x18341:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$804:	; Assign personVector[2]$name[5] 114
x18345:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$805:	; Assign personVector[2]$name[6] 32
x18349:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$806:	; Assign personVector[2]$name[7] 68
x18353:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$807:	; Assign personVector[2]$name[8] 97
x18357:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$808:	; Assign personVector[2]$name[9] 118
x18361:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$809:	; Assign personVector[2]$name[10] 105
x18365:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$810:	; Assign personVector[2]$name[11] 100
x18369:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$811:	; Assign personVector[2]$name[12] 115
x18373:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$812:	; Assign personVector[2]$name[13] 115
x18377:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$813:	; Assign personVector[2]$name[14] 111
x18381:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$814:	; Assign personVector[2]$name[15] 110
x18385:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$815:	; Assign personVector[2]$name[16] 0
x18389:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$816:	; Assign personVector[2]$phone 24567
x18393:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$817:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$818:	; Parameter 206 string_Block2Ebin# 6
x18399:	mov word [bp + 212], @11392$string_Block2Ebin#	; 6: 199 134 212 0 104 86

file_test$819:	; Parameter 206 string_w# 8
x18405:	mov word [bp + 214], @11393$string_w#	; 6: 199 134 214 0 114 86

file_test$820:	; Call 206 fopen 0
x18411:	mov word [bp + 206], file_test$821	; 6: 199 134 206 0 252 71
x18417:	mov [bp + 208], bp	; 4: 137 174 208 0
x18421:	add bp, 206	; 4: 129 197 206 0
x18425:	jmp fopen	; 3: 233 247 17

file_test$821:	; PostCall 206

file_test$822:	; GetReturnValue £temporary5066

file_test$823:	; Assign outFilePtr £temporary5066
x18428:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$824:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$825:	; Parameter 208 string_Block2Ebin# 6
x18432:	mov word [bp + 214], @11396$string_Block2Ebin#	; 6: 199 134 214 0 116 86

file_test$826:	; Parameter 208 string_r# 8
x18438:	mov word [bp + 216], @11397$string_r#	; 6: 199 134 216 0 126 86

file_test$827:	; Call 208 fopen 0
x18444:	mov word [bp + 208], file_test$828	; 6: 199 134 208 0 29 72
x18450:	mov [bp + 210], bp	; 4: 137 174 210 0
x18454:	add bp, 208	; 4: 129 197 208 0
x18458:	jmp fopen	; 3: 233 214 17

file_test$828:	; PostCall 208

file_test$829:	; GetReturnValue £temporary5067

file_test$830:	; Assign inFilePtr £temporary5067
x18461:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$831:	; NotEqual 843 outFilePtr 0
x18465:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x18470:	jne file_test$843	; 2: 117 70

file_test$832:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 210 stderr 6
x18472:	mov ax, [stderr]	; 3: 161 139 77
x18475:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$834:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18479:	mov word [bp + 218], @11405$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 128 86

file_test$835:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x18485:	mov word [bp + 220], @11406$string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 174 86

file_test$836:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18491:	mov word [bp + 222], @11407$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 193 86

file_test$837:	; Parameter 210 284 14
x18497:	mov word [bp + 224], 284	; 6: 199 134 224 0 28 1

file_test$838:	; Call 210 fprintf 0
x18503:	mov word [bp + 210], file_test$839	; 6: 199 134 210 0 93 72
x18509:	mov [bp + 212], bp	; 4: 137 174 212 0
x18513:	add bp, 210	; 4: 129 197 210 0
x18517:	mov di, bp	; 2: 137 239
x18519:	add di, 6	; 3: 131 199 6
x18522:	jmp fprintf	; 3: 233 47 22

file_test$839:	; PostCall 210

file_test$840:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Call 210 abort 0
x18525:	mov word [bp + 210], file_test$842	; 6: 199 134 210 0 110 72
x18531:	mov [bp + 212], bp	; 4: 137 174 212 0
x18535:	add bp, 210	; 4: 129 197 210 0
x18539:	jmp abort	; 3: 233 89 22

file_test$842:	; PostCall 210

file_test$843:	; NotEqual 855 inFilePtr 0
x18542:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x18547:	jne file_test$855	; 2: 117 70

file_test$844:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$845:	; Parameter 210 stderr 6
x18549:	mov ax, [stderr]	; 3: 161 139 77
x18552:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$846:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18556:	mov word [bp + 218], @11417$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 2 87

file_test$847:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x18562:	mov word [bp + 220], @11418$string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 48 87

file_test$848:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18568:	mov word [bp + 222], @11419$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 66 87

file_test$849:	; Parameter 210 285 14
x18574:	mov word [bp + 224], 285	; 6: 199 134 224 0 29 1

file_test$850:	; Call 210 fprintf 0
x18580:	mov word [bp + 210], file_test$851	; 6: 199 134 210 0 170 72
x18586:	mov [bp + 212], bp	; 4: 137 174 212 0
x18590:	add bp, 210	; 4: 129 197 210 0
x18594:	mov di, bp	; 2: 137 239
x18596:	add di, 6	; 3: 131 199 6
x18599:	jmp fprintf	; 3: 233 226 21

file_test$851:	; PostCall 210

file_test$852:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Call 210 abort 0
x18602:	mov word [bp + 210], file_test$854	; 6: 199 134 210 0 187 72
x18608:	mov [bp + 212], bp	; 4: 137 174 212 0
x18612:	add bp, 210	; 4: 129 197 210 0
x18616:	jmp abort	; 3: 233 12 22

file_test$854:	; PostCall 210

file_test$855:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$856:	; Parameter 210 personVector 6
x18619:	mov [bp + 216], bp	; 4: 137 174 216 0
x18623:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$857:	; Parameter 210 150 8
x18628:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$858:	; Parameter 210 1 10
x18634:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$859:	; Parameter 210 outFilePtr 12
x18640:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18644:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$860:	; Call 210 fwrite 0
x18648:	mov word [bp + 210], file_test$861	; 6: 199 134 210 0 233 72
x18654:	mov [bp + 212], bp	; 4: 137 174 212 0
x18658:	add bp, 210	; 4: 129 197 210 0
x18662:	jmp fwrite	; 3: 233 211 41

file_test$861:	; PostCall 210

file_test$862:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$863:	; Parameter 210 outFilePtr 6
x18665:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18669:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$864:	; Call 210 fclose 0
x18673:	mov word [bp + 210], file_test$865	; 6: 199 134 210 0 2 73
x18679:	mov [bp + 212], bp	; 4: 137 174 212 0
x18683:	add bp, 210	; 4: 129 197 210 0
x18687:	jmp fclose	; 3: 233 154 40

file_test$865:	; PostCall 210

file_test$866:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$867:	; Parameter 210 inFilePtr 6
x18690:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18694:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$868:	; Call 210 feof 0
x18698:	mov word [bp + 210], file_test$869	; 6: 199 134 210 0 27 73
x18704:	mov [bp + 212], bp	; 4: 137 174 212 0
x18708:	add bp, 210	; 4: 129 197 210 0
x18712:	jmp feof	; 3: 233 189 21

file_test$869:	; PostCall 210

file_test$870:	; GetReturnValue £temporary5078

file_test$871:	; NotEqual 891 £temporary5078 0
x18715:	cmp bx, 0	; 3: 131 251 0
x18718:	jne file_test$891	; 2: 117 124

file_test$872:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$873:	; address £temporary5081 person
x18720:	mov si, bp	; 2: 137 238
x18722:	add si, 156	; 4: 129 198 156 0

file_test$874:	; Parameter 210 £temporary5081 6
x18726:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$875:	; Parameter 210 50 8
x18730:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$876:	; Parameter 210 1 10
x18736:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$877:	; Parameter 210 inFilePtr 12
x18742:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18746:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$878:	; Call 210 fread 0
x18750:	mov word [bp + 210], file_test$879	; 6: 199 134 210 0 79 73
x18756:	mov [bp + 212], bp	; 4: 137 174 212 0
x18760:	add bp, 210	; 4: 129 197 210 0
x18764:	jmp fread	; 3: 233 176 41

file_test$879:	; PostCall 210

file_test$880:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$881:	; Parameter 210 string_Name20203A2025s0A# 6
x18767:	mov word [bp + 216], @11444$string_Name20203A2025s0A#	; 6: 199 134 216 0 131 87

file_test$882:	; Parameter 210 person$name 8
x18773:	mov [bp + 218], bp	; 4: 137 174 218 0
x18777:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$883:	; Call 210 printf 0
x18783:	mov word [bp + 210], file_test$884	; 6: 199 134 210 0 117 73
x18789:	mov [bp + 212], bp	; 4: 137 174 212 0
x18793:	add bp, 210	; 4: 129 197 210 0
x18797:	mov di, bp	; 2: 137 239
x18799:	add di, 2	; 3: 131 199 2
x18802:	jmp printf	; 3: 233 143 195

file_test$884:	; PostCall 210

file_test$885:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$886:	; Parameter 210 string_Phone203A2025d0A# 6
x18805:	mov word [bp + 216], @11447$string_Phone203A2025d0A#	; 6: 199 134 216 0 143 87

file_test$887:	; Parameter 210 person$phone 8
x18811:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18815:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$888:	; Call 210 printf 0
x18819:	mov word [bp + 210], file_test$889	; 6: 199 134 210 0 153 73
x18825:	mov [bp + 212], bp	; 4: 137 174 212 0
x18829:	add bp, 210	; 4: 129 197 210 0
x18833:	mov di, bp	; 2: 137 239
x18835:	add di, 2	; 3: 131 199 2
x18838:	jmp printf	; 3: 233 107 195

file_test$889:	; PostCall 210

file_test$890:	; Goto 866
x18841:	jmp file_test$866	; 3: 233 102 255

file_test$891:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 210 inFilePtr 6
x18844:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18848:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$893:	; Call 210 fclose 0
x18852:	mov word [bp + 210], file_test$894	; 6: 199 134 210 0 181 73
x18858:	mov [bp + 212], bp	; 4: 137 174 212 0
x18862:	add bp, 210	; 4: 129 197 210 0
x18866:	jmp fclose	; 3: 233 231 39

file_test$894:	; PostCall 210

file_test$895:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$896:	; Parameter 6 string_outx2Etxt# 6
x18869:	mov word [bp + 12], @11451$string_outx2Etxt#	; 5: 199 70 12 155 87

file_test$897:	; Parameter 6 string_r# 8
x18874:	mov word [bp + 14], @11452$string_r#	; 5: 199 70 14 164 87

file_test$898:	; Call 6 fopen 0
x18879:	mov word [bp + 6], file_test$899	; 5: 199 70 6 205 73
x18884:	mov [bp + 8], bp	; 3: 137 110 8
x18887:	add bp, 6	; 3: 131 197 6
x18890:	jmp fopen	; 3: 233 38 16

file_test$899:	; PostCall 6

file_test$900:	; GetReturnValue £temporary5088

file_test$901:	; Assign inFilePtr £temporary5088
x18893:	mov [bp + 6], bx	; 3: 137 94 6

file_test$902:	; NotEqual 914 inFilePtr 0
x18896:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18900:	jne file_test$914	; 2: 117 59

file_test$903:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$904:	; Parameter 8 stderr 6
x18902:	mov ax, [stderr]	; 3: 161 139 77
x18905:	mov [bp + 14], ax	; 3: 137 70 14

file_test$905:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18908:	mov word [bp + 16], @11460$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 166 87

file_test$906:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x18913:	mov word [bp + 18], @11461$string_inFilePtr20213D20NULL#	; 5: 199 70 18 212 87

file_test$907:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18918:	mov word [bp + 20], @11462$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 230 87

file_test$908:	; Parameter 8 301 14
x18923:	mov word [bp + 22], 301	; 5: 199 70 22 45 1

file_test$909:	; Call 8 fprintf 0
x18928:	mov word [bp + 8], file_test$910	; 5: 199 70 8 3 74
x18933:	mov [bp + 10], bp	; 3: 137 110 10
x18936:	add bp, 8	; 3: 131 197 8
x18939:	mov di, bp	; 2: 137 239
x18941:	add di, 6	; 3: 131 199 6
x18944:	jmp fprintf	; 3: 233 137 20

file_test$910:	; PostCall 8

file_test$911:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$912:	; Call 8 abort 0
x18947:	mov word [bp + 8], file_test$913	; 5: 199 70 8 17 74
x18952:	mov [bp + 10], bp	; 3: 137 110 10
x18955:	add bp, 8	; 3: 131 197 8
x18958:	jmp abort	; 3: 233 182 20

file_test$913:	; PostCall 8

file_test$914:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$915:	; Parameter 8 inFilePtr 6
x18961:	mov ax, [bp + 6]	; 3: 139 70 6
x18964:	mov [bp + 14], ax	; 3: 137 70 14

file_test$916:	; Parameter 8 0 8
x18967:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

file_test$917:	; Parameter 8 2 10
x18972:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$918:	; Call 8 fseek 0
x18977:	mov word [bp + 8], file_test$919	; 5: 199 70 8 47 74
x18982:	mov [bp + 10], bp	; 3: 137 110 10
x18985:	add bp, 8	; 3: 131 197 8
x18988:	jmp fseek	; 3: 233 184 19

file_test$919:	; PostCall 8

file_test$920:	; GetReturnValue £temporary5093

file_test$921:	; Assign size £temporary5093
x18991:	mov [bp + 8], bx	; 3: 137 94 8

file_test$922:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$923:	; Parameter 10 inFilePtr 6
x18994:	mov ax, [bp + 6]	; 3: 139 70 6
x18997:	mov [bp + 16], ax	; 3: 137 70 16

file_test$924:	; Call 10 ftell 0
x19000:	mov word [bp + 10], file_test$925	; 5: 199 70 10 70 74
x19005:	mov [bp + 12], bp	; 3: 137 110 12
x19008:	add bp, 10	; 3: 131 197 10
x19011:	jmp ftell	; 3: 233 170 43

file_test$925:	; PostCall 10

file_test$926:	; GetReturnValue £temporary5094

file_test$927:	; SignedLessThanEqual 945 £temporary5094 1
x19014:	cmp bx, 1	; 3: 131 251 1
x19017:	jle file_test$945	; 2: 126 73

file_test$928:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$929:	; Parameter 10 inFilePtr 6
x19019:	mov ax, [bp + 6]	; 3: 139 70 6
x19022:	mov [bp + 16], ax	; 3: 137 70 16

file_test$930:	; Decrement size
x19025:	dec word [bp + 8]	; 3: 255 78 8

file_test$931:	; Parameter 10 size 8
x19028:	mov ax, [bp + 8]	; 3: 139 70 8
x19031:	mov [bp + 18], ax	; 3: 137 70 18

file_test$932:	; Parameter 10 0 10
x19034:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$933:	; Call 10 fseek 0
x19039:	mov word [bp + 10], file_test$934	; 5: 199 70 10 109 74
x19044:	mov [bp + 12], bp	; 3: 137 110 12
x19047:	add bp, 10	; 3: 131 197 10
x19050:	jmp fseek	; 3: 233 122 19

file_test$934:	; PostCall 10

file_test$935:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$936:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$937:	; Parameter 10 inFilePtr 6
x19053:	mov ax, [bp + 6]	; 3: 139 70 6
x19056:	mov [bp + 16], ax	; 3: 137 70 16

file_test$938:	; Call 10 fgetc 0
x19059:	mov word [bp + 10], file_test$939	; 5: 199 70 10 129 74
x19064:	mov [bp + 12], bp	; 3: 137 110 12
x19067:	add bp, 10	; 3: 131 197 10
x19070:	jmp fgetc	; 3: 233 152 43

file_test$939:	; PostCall 10

file_test$940:	; GetReturnValue £temporary5098

file_test$941:	; Parameter 10 £temporary5098 6
x19073:	mov [bp + 16], bx	; 3: 137 94 16

file_test$942:	; Call 10 putchar 0
x19076:	mov word [bp + 10], file_test$943	; 5: 199 70 10 146 74
x19081:	mov [bp + 12], bp	; 3: 137 110 12
x19084:	add bp, 10	; 3: 131 197 10
x19087:	jmp putchar	; 3: 233 223 43

file_test$943:	; PostCall 10

file_test$944:	; Goto 922
x19090:	jmp file_test$922	; 2: 235 158

file_test$945:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$946:	; Parameter 8 inFilePtr 6
x19092:	mov ax, [bp + 6]	; 3: 139 70 6
x19095:	mov [bp + 14], ax	; 3: 137 70 14

file_test$947:	; Call 8 fclose 0
x19098:	mov word [bp + 8], file_test$948	; 5: 199 70 8 168 74
x19103:	mov [bp + 10], bp	; 3: 137 110 10
x19106:	add bp, 8	; 3: 131 197 8
x19109:	jmp fclose	; 3: 233 244 38

file_test$948:	; PostCall 8

file_test$949:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$950:	; Parameter 6 string_fileexists2022X223A2025s0A# 6
x19112:	mov word [bp + 12], @11487$string_fileexists2022X223A2025s0A#	; 5: 199 70 12 39 88

file_test$951:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$952:	; Parameter 6 string_X# 14
x19117:	mov word [bp + 20], @11488$string_X#	; 5: 199 70 20 59 88

file_test$953:	; Call 6 fileexists 8
x19122:	mov word [bp + 14], file_test$954	; 5: 199 70 14 192 74
x19127:	mov [bp + 16], bp	; 3: 137 110 16
x19130:	add bp, 14	; 3: 131 197 14
x19133:	jmp fileexists	; 3: 233 114 19

file_test$954:	; PostCall 6

file_test$955:	; GetReturnValue £temporary5101

file_test$956:	; Equal 959 £temporary5101 0
x19136:	cmp bx, 0	; 3: 131 251 0
x19139:	je file_test$959	; 2: 116 5

file_test$957:	; Assign £temporary5106 string_Yes#
x19141:	mov ax, @11490$string_Yes#	; 3: 184 61 88

file_test$958:	; Goto 960
x19144:	jmp file_test$960	; 2: 235 3

file_test$959:	; Assign £temporary5106 string_No#
x19146:	mov ax, @11491$string_No#	; 3: 184 65 88

file_test$960:	; Parameter 6 £temporary5106 8
x19149:	mov [bp + 14], ax	; 3: 137 70 14

file_test$961:	; Call 6 printf 0
x19152:	mov word [bp + 6], file_test$962	; 5: 199 70 6 227 74
x19157:	mov [bp + 8], bp	; 3: 137 110 8
x19160:	add bp, 6	; 3: 131 197 6
x19163:	mov di, bp	; 2: 137 239
x19165:	add di, 2	; 3: 131 199 2
x19168:	jmp printf	; 3: 233 33 194

file_test$962:	; PostCall 6

file_test$963:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$964:	; Parameter 6 string_fileexists2022Y223A2025s0A# 6
x19171:	mov word [bp + 12], @11501$string_fileexists2022Y223A2025s0A#	; 5: 199 70 12 68 88

file_test$965:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$966:	; Parameter 6 string_Y# 14
x19176:	mov word [bp + 20], @11502$string_Y#	; 5: 199 70 20 88 88

file_test$967:	; Call 6 fileexists 8
x19181:	mov word [bp + 14], file_test$968	; 5: 199 70 14 251 74
x19186:	mov [bp + 16], bp	; 3: 137 110 16
x19189:	add bp, 14	; 3: 131 197 14
x19192:	jmp fileexists	; 3: 233 55 19

file_test$968:	; PostCall 6

file_test$969:	; GetReturnValue £temporary5108

file_test$970:	; Equal 973 £temporary5108 0
x19195:	cmp bx, 0	; 3: 131 251 0
x19198:	je file_test$973	; 2: 116 5

file_test$971:	; Assign £temporary5113 string_Yes#
x19200:	mov ax, @11504$string_Yes#	; 3: 184 90 88

file_test$972:	; Goto 974
x19203:	jmp file_test$974	; 2: 235 3

file_test$973:	; Assign £temporary5113 string_No#
x19205:	mov ax, @11505$string_No#	; 3: 184 94 88

file_test$974:	; Parameter 6 £temporary5113 8
x19208:	mov [bp + 14], ax	; 3: 137 70 14

file_test$975:	; Call 6 printf 0
x19211:	mov word [bp + 6], file_test$976	; 5: 199 70 6 30 75
x19216:	mov [bp + 8], bp	; 3: 137 110 8
x19219:	add bp, 6	; 3: 131 197 6
x19222:	mov di, bp	; 2: 137 239
x19224:	add di, 2	; 3: 131 199 2
x19227:	jmp printf	; 3: 233 230 193

file_test$976:	; PostCall 6

file_test$977:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$978:	; Parameter 6 string_fileexists2022Main2Easm223A2025s0A# 6
x19230:	mov word [bp + 12], @11515$string_fileexists2022Main2Easm223A2025s0A#	; 5: 199 70 12 97 88

file_test$979:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$980:	; Parameter 6 string_Main2Easm# 14
x19235:	mov word [bp + 20], @11516$string_Main2Easm#	; 5: 199 70 20 124 88

file_test$981:	; Call 6 fileexists 8
x19240:	mov word [bp + 14], file_test$982	; 5: 199 70 14 54 75
x19245:	mov [bp + 16], bp	; 3: 137 110 16
x19248:	add bp, 14	; 3: 131 197 14
x19251:	jmp fileexists	; 3: 233 252 18

file_test$982:	; PostCall 6

file_test$983:	; GetReturnValue £temporary5115

file_test$984:	; Equal 987 £temporary5115 0
x19254:	cmp bx, 0	; 3: 131 251 0
x19257:	je file_test$987	; 2: 116 5

file_test$985:	; Assign £temporary5120 string_Yes#
x19259:	mov ax, @11518$string_Yes#	; 3: 184 133 88

file_test$986:	; Goto 988
x19262:	jmp file_test$988	; 2: 235 3

file_test$987:	; Assign £temporary5120 string_No#
x19264:	mov ax, @11519$string_No#	; 3: 184 137 88

file_test$988:	; Parameter 6 £temporary5120 8
x19267:	mov [bp + 14], ax	; 3: 137 70 14

file_test$989:	; Call 6 printf 0
x19270:	mov word [bp + 6], file_test$990	; 5: 199 70 6 89 75
x19275:	mov [bp + 8], bp	; 3: 137 110 8
x19278:	add bp, 6	; 3: 131 197 6
x19281:	mov di, bp	; 2: 137 239
x19283:	add di, 2	; 3: 131 199 2
x19286:	jmp printf	; 3: 233 171 193

file_test$990:	; PostCall 6

file_test$991:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$992:	; Parameter 6 string_fileexists2022MainX2Easm223A2025s0A# 6
x19289:	mov word [bp + 12], @11529$string_fileexists2022MainX2Easm223A2025s0A#	; 5: 199 70 12 140 88

file_test$993:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$994:	; Parameter 6 string_MainX2Easm# 14
x19294:	mov word [bp + 20], @11530$string_MainX2Easm#	; 5: 199 70 20 168 88

file_test$995:	; Call 6 fileexists 8
x19299:	mov word [bp + 14], file_test$996	; 5: 199 70 14 113 75
x19304:	mov [bp + 16], bp	; 3: 137 110 16
x19307:	add bp, 14	; 3: 131 197 14
x19310:	jmp fileexists	; 3: 233 193 18

file_test$996:	; PostCall 6

file_test$997:	; GetReturnValue £temporary5122

file_test$998:	; Equal 1001 £temporary5122 0
x19313:	cmp bx, 0	; 3: 131 251 0
x19316:	je file_test$1001	; 2: 116 5

file_test$999:	; Assign £temporary5127 string_Yes#
x19318:	mov ax, @11532$string_Yes#	; 3: 184 178 88

file_test$1000:	; Goto 1002
x19321:	jmp file_test$1002	; 2: 235 3

file_test$1001:	; Assign £temporary5127 string_No#
x19323:	mov ax, @11533$string_No#	; 3: 184 182 88

file_test$1002:	; Parameter 6 £temporary5127 8
x19326:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1003:	; Call 6 printf 0
x19329:	mov word [bp + 6], file_test$1004	; 5: 199 70 6 148 75
x19334:	mov [bp + 8], bp	; 3: 137 110 8
x19337:	add bp, 6	; 3: 131 197 6
x19340:	mov di, bp	; 2: 137 239
x19342:	add di, 2	; 3: 131 199 2
x19345:	jmp printf	; 3: 233 112 193

file_test$1004:	; PostCall 6

file_test$1005:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1006:	; Parameter 6 string_fileexists2022Main2Ec223A2025s0A# 6
x19348:	mov word [bp + 12], @11543$string_fileexists2022Main2Ec223A2025s0A#	; 5: 199 70 12 185 88

file_test$1007:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1008:	; Parameter 6 string_Main2Ec# 14
x19353:	mov word [bp + 20], @11544$string_Main2Ec#	; 5: 199 70 20 210 88

file_test$1009:	; Call 6 fileexists 8
x19358:	mov word [bp + 14], file_test$1010	; 5: 199 70 14 172 75
x19363:	mov [bp + 16], bp	; 3: 137 110 16
x19366:	add bp, 14	; 3: 131 197 14
x19369:	jmp fileexists	; 3: 233 134 18

file_test$1010:	; PostCall 6

file_test$1011:	; GetReturnValue £temporary5129

file_test$1012:	; Equal 1015 £temporary5129 0
x19372:	cmp bx, 0	; 3: 131 251 0
x19375:	je file_test$1015	; 2: 116 5

file_test$1013:	; Assign £temporary5134 string_Yes#
x19377:	mov ax, @11546$string_Yes#	; 3: 184 217 88

file_test$1014:	; Goto 1016
x19380:	jmp file_test$1016	; 2: 235 3

file_test$1015:	; Assign £temporary5134 string_No#
x19382:	mov ax, @11547$string_No#	; 3: 184 221 88

file_test$1016:	; Parameter 6 £temporary5134 8
x19385:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1017:	; Call 6 printf 0
x19388:	mov word [bp + 6], file_test$1018	; 5: 199 70 6 207 75
x19393:	mov [bp + 8], bp	; 3: 137 110 8
x19396:	add bp, 6	; 3: 131 197 6
x19399:	mov di, bp	; 2: 137 239
x19401:	add di, 2	; 3: 131 199 2
x19404:	jmp printf	; 3: 233 53 193

file_test$1018:	; PostCall 6

file_test$1019:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1020:	; Parameter 6 string_fileexists2022MainX2Ec223A2025s0A# 6
x19407:	mov word [bp + 12], @11557$string_fileexists2022MainX2Ec223A2025s0A#	; 5: 199 70 12 224 88

file_test$1021:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1022:	; Parameter 6 string_MainX2Ec# 14
x19412:	mov word [bp + 20], @11558$string_MainX2Ec#	; 5: 199 70 20 250 88

file_test$1023:	; Call 6 fileexists 8
x19417:	mov word [bp + 14], file_test$1024	; 5: 199 70 14 231 75
x19422:	mov [bp + 16], bp	; 3: 137 110 16
x19425:	add bp, 14	; 3: 131 197 14
x19428:	jmp fileexists	; 3: 233 75 18

file_test$1024:	; PostCall 6

file_test$1025:	; GetReturnValue £temporary5136

file_test$1026:	; Equal 1029 £temporary5136 0
x19431:	cmp bx, 0	; 3: 131 251 0
x19434:	je file_test$1029	; 2: 116 5

file_test$1027:	; Assign £temporary5141 string_Yes#
x19436:	mov ax, @11560$string_Yes#	; 3: 184 2 89

file_test$1028:	; Goto 1030
x19439:	jmp file_test$1030	; 2: 235 3

file_test$1029:	; Assign £temporary5141 string_No#
x19441:	mov ax, @11561$string_No#	; 3: 184 6 89

file_test$1030:	; Parameter 6 £temporary5141 8
x19444:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1031:	; Call 6 printf 0
x19447:	mov word [bp + 6], file_test$1032	; 5: 199 70 6 10 76
x19452:	mov [bp + 8], bp	; 3: 137 110 8
x19455:	add bp, 6	; 3: 131 197 6
x19458:	mov di, bp	; 2: 137 239
x19460:	add di, 2	; 3: 131 199 2
x19463:	jmp printf	; 3: 233 250 192

file_test$1032:	; PostCall 6

file_test$1033:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1034:	; Parameter 6 string_fileexists2022File2Ec223A2025s0A# 6
x19466:	mov word [bp + 12], @11571$string_fileexists2022File2Ec223A2025s0A#	; 5: 199 70 12 9 89

file_test$1035:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1036:	; Parameter 6 string_File2Ec# 14
x19471:	mov word [bp + 20], @11572$string_File2Ec#	; 5: 199 70 20 34 89

file_test$1037:	; Call 6 fileexists 8
x19476:	mov word [bp + 14], file_test$1038	; 5: 199 70 14 34 76
x19481:	mov [bp + 16], bp	; 3: 137 110 16
x19484:	add bp, 14	; 3: 131 197 14
x19487:	jmp fileexists	; 3: 233 16 18

file_test$1038:	; PostCall 6

file_test$1039:	; GetReturnValue £temporary5143

file_test$1040:	; Equal 1043 £temporary5143 0
x19490:	cmp bx, 0	; 3: 131 251 0
x19493:	je file_test$1043	; 2: 116 5

file_test$1041:	; Assign £temporary5148 string_Yes#
x19495:	mov ax, @11574$string_Yes#	; 3: 184 41 89

file_test$1042:	; Goto 1044
x19498:	jmp file_test$1044	; 2: 235 3

file_test$1043:	; Assign £temporary5148 string_No#
x19500:	mov ax, @11575$string_No#	; 3: 184 45 89

file_test$1044:	; Parameter 6 £temporary5148 8
x19503:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1045:	; Call 6 printf 0
x19506:	mov word [bp + 6], file_test$1046	; 5: 199 70 6 69 76
x19511:	mov [bp + 8], bp	; 3: 137 110 8
x19514:	add bp, 6	; 3: 131 197 6
x19517:	mov di, bp	; 2: 137 239
x19519:	add di, 2	; 3: 131 199 2
x19522:	jmp printf	; 3: 233 191 192

file_test$1046:	; PostCall 6

file_test$1047:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1048:	; Parameter 6 string_fileexists2022File2Ex223A2025s0A# 6
x19525:	mov word [bp + 12], @11585$string_fileexists2022File2Ex223A2025s0A#	; 5: 199 70 12 48 89

file_test$1049:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1050:	; Parameter 6 string_File2Ex# 14
x19530:	mov word [bp + 20], @11586$string_File2Ex#	; 5: 199 70 20 73 89

file_test$1051:	; Call 6 fileexists 8
x19535:	mov word [bp + 14], file_test$1052	; 5: 199 70 14 93 76
x19540:	mov [bp + 16], bp	; 3: 137 110 16
x19543:	add bp, 14	; 3: 131 197 14
x19546:	jmp fileexists	; 3: 233 213 17

file_test$1052:	; PostCall 6

file_test$1053:	; GetReturnValue £temporary5150

file_test$1054:	; Equal 1057 £temporary5150 0
x19549:	cmp bx, 0	; 3: 131 251 0
x19552:	je file_test$1057	; 2: 116 5

file_test$1055:	; Assign £temporary5155 string_Yes#
x19554:	mov ax, @11588$string_Yes#	; 3: 184 80 89

file_test$1056:	; Goto 1058
x19557:	jmp file_test$1058	; 2: 235 3

file_test$1057:	; Assign £temporary5155 string_No#
x19559:	mov ax, @11589$string_No#	; 3: 184 84 89

file_test$1058:	; Parameter 6 £temporary5155 8
x19562:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1059:	; Call 6 printf 0
x19565:	mov word [bp + 6], file_test$1060	; 5: 199 70 6 128 76
x19570:	mov [bp + 8], bp	; 3: 137 110 8
x19573:	add bp, 6	; 3: 131 197 6
x19576:	mov di, bp	; 2: 137 239
x19578:	add di, 2	; 3: 131 199 2
x19581:	jmp printf	; 3: 233 132 192

file_test$1060:	; PostCall 6

file_test$1061:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1062:	; Parameter 6 string_fileexists2022File2Eh223A2025s0A# 6
x19584:	mov word [bp + 12], @11599$string_fileexists2022File2Eh223A2025s0A#	; 5: 199 70 12 87 89

file_test$1063:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1064:	; Parameter 6 string_File2Eh# 14
x19589:	mov word [bp + 20], @11600$string_File2Eh#	; 5: 199 70 20 112 89

file_test$1065:	; Call 6 fileexists 8
x19594:	mov word [bp + 14], file_test$1066	; 5: 199 70 14 152 76
x19599:	mov [bp + 16], bp	; 3: 137 110 16
x19602:	add bp, 14	; 3: 131 197 14
x19605:	jmp fileexists	; 3: 233 154 17

file_test$1066:	; PostCall 6

file_test$1067:	; GetReturnValue £temporary5157

file_test$1068:	; Equal 1071 £temporary5157 0
x19608:	cmp bx, 0	; 3: 131 251 0
x19611:	je file_test$1071	; 2: 116 5

file_test$1069:	; Assign £temporary5162 string_Yes#
x19613:	mov ax, @11602$string_Yes#	; 3: 184 119 89

file_test$1070:	; Goto 1072
x19616:	jmp file_test$1072	; 2: 235 3

file_test$1071:	; Assign £temporary5162 string_No#
x19618:	mov ax, @11603$string_No#	; 3: 184 123 89

file_test$1072:	; Parameter 6 £temporary5162 8
x19621:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1073:	; Call 6 printf 0
x19624:	mov word [bp + 6], file_test$1074	; 5: 199 70 6 187 76
x19629:	mov [bp + 8], bp	; 3: 137 110 8
x19632:	add bp, 6	; 3: 131 197 6
x19635:	mov di, bp	; 2: 137 239
x19637:	add di, 2	; 3: 131 199 2
x19640:	jmp printf	; 3: 233 73 192

file_test$1074:	; PostCall 6

file_test$1075:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1076:	; Parameter 6 string_fileexists2022File2Ey223A2025s0A# 6
x19643:	mov word [bp + 12], @11613$string_fileexists2022File2Ey223A2025s0A#	; 5: 199 70 12 126 89

file_test$1077:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1078:	; Parameter 6 string_File2Ey# 14
x19648:	mov word [bp + 20], @11614$string_File2Ey#	; 5: 199 70 20 151 89

file_test$1079:	; Call 6 fileexists 8
x19653:	mov word [bp + 14], file_test$1080	; 5: 199 70 14 211 76
x19658:	mov [bp + 16], bp	; 3: 137 110 16
x19661:	add bp, 14	; 3: 131 197 14
x19664:	jmp fileexists	; 3: 233 95 17

file_test$1080:	; PostCall 6

file_test$1081:	; GetReturnValue £temporary5164

file_test$1082:	; Equal 1085 £temporary5164 0
x19667:	cmp bx, 0	; 3: 131 251 0
x19670:	je file_test$1085	; 2: 116 5

file_test$1083:	; Assign £temporary5169 string_Yes#
x19672:	mov ax, @11616$string_Yes#	; 3: 184 158 89

file_test$1084:	; Goto 1086
x19675:	jmp file_test$1086	; 2: 235 3

file_test$1085:	; Assign £temporary5169 string_No#
x19677:	mov ax, @11617$string_No#	; 3: 184 162 89

file_test$1086:	; Parameter 6 £temporary5169 8
x19680:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1087:	; Call 6 printf 0
x19683:	mov word [bp + 6], file_test$1088	; 5: 199 70 6 246 76
x19688:	mov [bp + 8], bp	; 3: 137 110 8
x19691:	add bp, 6	; 3: 131 197 6
x19694:	mov di, bp	; 2: 137 239
x19696:	add di, 2	; 3: 131 199 2
x19699:	jmp printf	; 3: 233 14 192

file_test$1088:	; PostCall 6

file_test$1089:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1090:	; Parameter 6 string_fileexists2022File2Ep223A2025s0A# 6
x19702:	mov word [bp + 12], @11627$string_fileexists2022File2Ep223A2025s0A#	; 5: 199 70 12 165 89

file_test$1091:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1092:	; Parameter 6 string_File2Ep# 14
x19707:	mov word [bp + 20], @11628$string_File2Ep#	; 5: 199 70 20 190 89

file_test$1093:	; Call 6 fileexists 8
x19712:	mov word [bp + 14], file_test$1094	; 5: 199 70 14 14 77
x19717:	mov [bp + 16], bp	; 3: 137 110 16
x19720:	add bp, 14	; 3: 131 197 14
x19723:	jmp fileexists	; 3: 233 36 17

file_test$1094:	; PostCall 6

file_test$1095:	; GetReturnValue £temporary5171

file_test$1096:	; Equal 1099 £temporary5171 0
x19726:	cmp bx, 0	; 3: 131 251 0
x19729:	je file_test$1099	; 2: 116 5

file_test$1097:	; Assign £temporary5176 string_Yes#
x19731:	mov ax, @11630$string_Yes#	; 3: 184 197 89

file_test$1098:	; Goto 1100
x19734:	jmp file_test$1100	; 2: 235 3

file_test$1099:	; Assign £temporary5176 string_No#
x19736:	mov ax, @11631$string_No#	; 3: 184 201 89

file_test$1100:	; Parameter 6 £temporary5176 8
x19739:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1101:	; Call 6 printf 0
x19742:	mov word [bp + 6], file_test$1102	; 5: 199 70 6 49 77
x19747:	mov [bp + 8], bp	; 3: 137 110 8
x19750:	add bp, 6	; 3: 131 197 6
x19753:	mov di, bp	; 2: 137 239
x19755:	add di, 2	; 3: 131 199 2
x19758:	jmp printf	; 3: 233 211 191

file_test$1102:	; PostCall 6

file_test$1103:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1104:	; Parameter 6 string_fileexists2022File2Ez223A2025s0A# 6
x19761:	mov word [bp + 12], @11641$string_fileexists2022File2Ez223A2025s0A#	; 5: 199 70 12 204 89

file_test$1105:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1106:	; Parameter 6 string_File2Ez# 14
x19766:	mov word [bp + 20], @11642$string_File2Ez#	; 5: 199 70 20 229 89

file_test$1107:	; Call 6 fileexists 8
x19771:	mov word [bp + 14], file_test$1108	; 5: 199 70 14 73 77
x19776:	mov [bp + 16], bp	; 3: 137 110 16
x19779:	add bp, 14	; 3: 131 197 14
x19782:	jmp fileexists	; 3: 233 233 16

file_test$1108:	; PostCall 6

file_test$1109:	; GetReturnValue £temporary5178

file_test$1110:	; Equal 1113 £temporary5178 0
x19785:	cmp bx, 0	; 3: 131 251 0
x19788:	je file_test$1113	; 2: 116 5

file_test$1111:	; Assign £temporary5183 string_Yes#
x19790:	mov ax, @11644$string_Yes#	; 3: 184 236 89

file_test$1112:	; Goto 1114
x19793:	jmp file_test$1114	; 2: 235 3

file_test$1113:	; Assign £temporary5183 string_No#
x19795:	mov ax, @11645$string_No#	; 3: 184 240 89

file_test$1114:	; Parameter 6 £temporary5183 8
x19798:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1115:	; Call 6 printf 0
x19801:	mov word [bp + 6], file_test$1116	; 5: 199 70 6 108 77
x19806:	mov [bp + 8], bp	; 3: 137 110 8
x19809:	add bp, 6	; 3: 131 197 6
x19812:	mov di, bp	; 2: 137 239
x19814:	add di, 2	; 3: 131 199 2
x19817:	jmp printf	; 3: 233 152 191

file_test$1116:	; PostCall 6

file_test$1117:	; Return 0
x19820:	mov ax, [bp]	; 3: 139 70 0
x19823:	mov di, [bp + 4]	; 3: 139 126 4
x19826:	mov bp, [bp + 2]	; 3: 139 110 2
x19829:	jmp ax	; 2: 255 224

file_test$1118:	; FunctionEnd file_test

@10693$string_in2Etxt#:
x19831:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10694$string_r#:
x19838:	db "r", 0	; 2: 114 0

@10697$string_outX2Etxt#:
x19840:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

@10698$string_w#:
x19849:	db "w", 0	; 2: 119 0

stderr:
x19851:	dw g_fileArray + 58	; 2: 160 13

@10706$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19853:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10707$string_inFilePtr20213D20NULL#:
x19899:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10708$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x19917:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10718$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19982:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10719$string_outFilePtr20213D20NULL#:
x20028:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10720$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20047:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10730$string_25lf#:
x20112:	db "%lf", 0	; 4: 37 108 102 0

@10733$string_X12025f0A#:
x20116:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

@10736$string_X22025f0A#:
x20123:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

@10739$string_0A#:
x20130:	db 10, 0	; 2: 10 0

@10743$string_in2Etxt#:
x20132:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10744$string_r#:
x20139:	db "r", 0	; 2: 114 0

@10747$string_outY2Etxt#:
x20141:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

@10748$string_w#:
x20150:	db "w", 0	; 2: 119 0

@10756$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20152:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10757$string_inFilePtr20213D20NULL#:
x20198:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10758$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20216:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10768$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20281:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10769$string_outFilePtr20213D20NULL#:
x20327:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10770$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20346:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10779$string_25i#:
x20411:	db "%i", 0	; 3: 37 105 0

@10782$string_size2025i0A#:
x20414:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10784$string_Y20size2025i0A#:
x20423:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

@10793$string_25lf#:
x20434:	db "%lf", 0	; 4: 37 108 102 0

@10796$string_Y12025f0A#:
x20438:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

@10799$string_Y22025f0A#:
x20445:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

@10802$string_0A#:
x20452:	db 10, 0	; 2: 10 0

@10806$string_Y#:
x20454:	db "Y", 0	; 2: 89 0

@10812$string_2225s2220has20been20removed0A#:
x20456:	db 34, "%s", 34, " has been removed", 10, 0	; 23: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 10 0

@10814$string_Error202225s222025i3A2025s2E0A#:
x20479:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10817$string_X#:
x20499:	db "X", 0	; 2: 88 0

@10819$string_Y#:
x20501:	db "Y", 0	; 2: 89 0

@10821$string_w#:
x20503:	db "w", 0	; 2: 119 0

@10824$string_Hello20X#:
x20505:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

@10831$string_2225s2220has20been20renamed20to202225s222E0A#:
x20513:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10833$string_Error202225s22202225s222025i3A2025s2E0A#:
x20545:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10836$string_X2#:
x20570:	db "X2", 0	; 3: 88 50 0

@10838$string_Y2#:
x20573:	db "Y2", 0	; 3: 89 50 0

@10844$string_2225s2220has20been20renamed20to202225s222E0A#:
x20576:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10846$string_Error202225s22202225s222025i3A2025s2E0A#:
x20608:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10849$string_Z#:
x20633:	db "Z", 0	; 2: 90 0

@10851$string_w#:
x20635:	db "w", 0	; 2: 119 0

@10854$string_Hello20Z#:
x20637:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

@10861$string_2225s2220has20been20removed2E0A#:
x20645:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10863$string_Error202225s222025i3A2025s2E0A#:
x20669:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10866$string_Z2#:
x20689:	db "Z2", 0	; 3: 90 50 0

@10872$string_2225s2220has20been20removed2E0A#:
x20692:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10874$string_Error202225s222025i3A2025s2E0A#:
x20716:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10877$string_PBook2Etxt#:
x20736:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

@10878$string_r#:
x20746:	db "r", 0	; 2: 114 0

@10886$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20748:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10887$string_inFilePtr20213D20NULL#:
x20794:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10888$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20812:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10893$string_0A252D24s20252D24s0A#:
x20877:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

@10894$string_Name#:
x20891:	db "Name", 0	; 5: 78 97 109 101 0

@10895$string_Phone#:
x20896:	db "Phone", 0	; 6: 80 104 111 110 101 0

@10897$string_252D24s20252D24s0A#:
x20902:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10898$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20915:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10899$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20940:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10903$string_25i#:
x20965:	db "%i", 0	; 3: 37 105 0

@10906$string_size2025i0A#:
x20968:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10920$string_25s25s#:
x20977:	db "%s%s", 0	; 5: 37 115 37 115 0

@10922$string_252D24s20252D24s0A#:
x20982:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10924$string_0A#:
x20995:	db 10, 0	; 2: 10 0

@10927$string_TestX2Ebin#:
x20997:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10928$string_w#:
x21007:	db "w", 0	; 2: 119 0

@10936$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21009:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10937$string_outFilePtr20213D20NULL#:
x21055:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10938$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21074:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10973$string_TestX2Ebin#:
x21139:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10974$string_r#:
x21149:	db "r", 0	; 2: 114 0

@10984$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21151:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10985$string_inFilePtr20213D20NULL#:
x21197:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10986$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21215:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10999$string_size13A2025i0A#:
x21280:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

@11016$string_index13A2025i3A20value2025f0A#:
x21291:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11018$string_0A#:
x21313:	db 10, 0	; 2: 10 0

@11021$string_TestY2Ebin#:
x21315:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11022$string_w#:
x21325:	db "w", 0	; 2: 119 0

@11030$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21327:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11031$string_outFilePtr20213D20NULL#:
x21373:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11032$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21392:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11059$string_TestY2Ebin#:
x21457:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11060$string_r#:
x21467:	db "r", 0	; 2: 114 0

@11068$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21469:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11069$string_inFilePtr20213D20NULL#:
x21515:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11070$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21533:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11090$string_index23A2025i3A20value2025f0A#:
x21598:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11096$string_0A#:
x21620:	db 10, 0	; 2: 10 0

@11099$string_TestY2Ebin#:
x21622:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11100$string_r#:
x21632:	db "r", 0	; 2: 114 0

@11108$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21634:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11109$string_inFilePtr20213D20NULL#:
x21680:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11110$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21698:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11131$string_index33A2025i3A20value2025f0A#:
x21763:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11137$string_0A#:
x21785:	db 10, 0	; 2: 10 0

@11140$string_TestX2Ebin#:
x21787:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@11141$string_r#:
x21797:	db "r", 0	; 2: 114 0

@11150$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21799:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11151$string_inFilePtr20213D20NULL#:
x21845:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11152$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21863:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11165$string_size43A2025i20total2025i0A#:
x21928:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

@11167$int2$8#:
x21948:	dw 8	; 2: 8 0

@11171$int2$8#:
x21950:	dw 8	; 2: 8 0

@11178$int2$8#:
x21952:	dw 8	; 2: 8 0

@11186$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21954:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11187$string_p20213D20NULL#:
x22000:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

@11188$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22010:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11193$string_malloc43A2025u2025u2025u0A#:
x22075:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

@11205$string_index43A2025i3A20value2025f0A#:
x22094:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11207$int2$8#:
x22116:	dw 8	; 2: 8 0

@11211$string_0A#:
x22118:	db 10, 0	; 2: 10 0

@11392$string_Block2Ebin#:
x22120:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11393$string_w#:
x22130:	db "w", 0	; 2: 119 0

@11396$string_Block2Ebin#:
x22132:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11397$string_r#:
x22142:	db "r", 0	; 2: 114 0

@11405$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22144:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11406$string_outFilePtr20213D20NULL#:
x22190:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11407$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22209:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11417$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22274:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11418$string_inFilePtr20213D20NULL#:
x22320:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11419$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22338:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11444$string_Name20203A2025s0A#:
x22403:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

@11447$string_Phone203A2025d0A#:
x22415:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

@11451$string_outx2Etxt#:
x22427:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

@11452$string_r#:
x22436:	db "r", 0	; 2: 114 0

@11460$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22438:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11461$string_inFilePtr20213D20NULL#:
x22484:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11462$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22502:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11487$string_fileexists2022X223A2025s0A#:
x22567:	db "fileexists ", 34, "X", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 88 34 58 32 37 115 10 0

@11488$string_X#:
x22587:	db "X", 0	; 2: 88 0

@11490$string_Yes#:
x22589:	db "Yes", 0	; 4: 89 101 115 0

@11491$string_No#:
x22593:	db "No", 0	; 3: 78 111 0

@11501$string_fileexists2022Y223A2025s0A#:
x22596:	db "fileexists ", 34, "Y", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 89 34 58 32 37 115 10 0

@11502$string_Y#:
x22616:	db "Y", 0	; 2: 89 0

@11504$string_Yes#:
x22618:	db "Yes", 0	; 4: 89 101 115 0

@11505$string_No#:
x22622:	db "No", 0	; 3: 78 111 0

@11515$string_fileexists2022Main2Easm223A2025s0A#:
x22625:	db "fileexists ", 34, "Main.asm", 34, ": %s", 10, 0	; 27: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 97 115 109 34 58 32 37 115 10 0

@11516$string_Main2Easm#:
x22652:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

@11518$string_Yes#:
x22661:	db "Yes", 0	; 4: 89 101 115 0

@11519$string_No#:
x22665:	db "No", 0	; 3: 78 111 0

@11529$string_fileexists2022MainX2Easm223A2025s0A#:
x22668:	db "fileexists ", 34, "MainX.asm", 34, ": %s", 10, 0	; 28: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 97 115 109 34 58 32 37 115 10 0

@11530$string_MainX2Easm#:
x22696:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

@11532$string_Yes#:
x22706:	db "Yes", 0	; 4: 89 101 115 0

@11533$string_No#:
x22710:	db "No", 0	; 3: 78 111 0

@11543$string_fileexists2022Main2Ec223A2025s0A#:
x22713:	db "fileexists ", 34, "Main.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 99 34 58 32 37 115 10 0

@11544$string_Main2Ec#:
x22738:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

@11546$string_Yes#:
x22745:	db "Yes", 0	; 4: 89 101 115 0

@11547$string_No#:
x22749:	db "No", 0	; 3: 78 111 0

@11557$string_fileexists2022MainX2Ec223A2025s0A#:
x22752:	db "fileexists ", 34, "MainX.c", 34, ": %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 99 34 58 32 37 115 10 0

@11558$string_MainX2Ec#:
x22778:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

@11560$string_Yes#:
x22786:	db "Yes", 0	; 4: 89 101 115 0

@11561$string_No#:
x22790:	db "No", 0	; 3: 78 111 0

@11571$string_fileexists2022File2Ec223A2025s0A#:
x22793:	db "fileexists ", 34, "File.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 99 34 58 32 37 115 10 0

@11572$string_File2Ec#:
x22818:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

@11574$string_Yes#:
x22825:	db "Yes", 0	; 4: 89 101 115 0

@11575$string_No#:
x22829:	db "No", 0	; 3: 78 111 0

@11585$string_fileexists2022File2Ex223A2025s0A#:
x22832:	db "fileexists ", 34, "File.x", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 120 34 58 32 37 115 10 0

@11586$string_File2Ex#:
x22857:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

@11588$string_Yes#:
x22864:	db "Yes", 0	; 4: 89 101 115 0

@11589$string_No#:
x22868:	db "No", 0	; 3: 78 111 0

@11599$string_fileexists2022File2Eh223A2025s0A#:
x22871:	db "fileexists ", 34, "File.h", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 104 34 58 32 37 115 10 0

@11600$string_File2Eh#:
x22896:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

@11602$string_Yes#:
x22903:	db "Yes", 0	; 4: 89 101 115 0

@11603$string_No#:
x22907:	db "No", 0	; 3: 78 111 0

@11613$string_fileexists2022File2Ey223A2025s0A#:
x22910:	db "fileexists ", 34, "File.y", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 121 34 58 32 37 115 10 0

@11614$string_File2Ey#:
x22935:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

@11616$string_Yes#:
x22942:	db "Yes", 0	; 4: 89 101 115 0

@11617$string_No#:
x22946:	db "No", 0	; 3: 78 111 0

@11627$string_fileexists2022File2Ep223A2025s0A#:
x22949:	db "fileexists ", 34, "File.p", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 112 34 58 32 37 115 10 0

@11628$string_File2Ep#:
x22974:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

@11630$string_Yes#:
x22981:	db "Yes", 0	; 4: 89 101 115 0

@11631$string_No#:
x22985:	db "No", 0	; 3: 78 111 0

@11641$string_fileexists2022File2Ez223A2025s0A#:
x22988:	db "fileexists ", 34, "File.z", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 122 34 58 32 37 115 10 0

@11642$string_File2Ez#:
x23013:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

@11644$string_Yes#:
x23020:	db "Yes", 0	; 4: 89 101 115 0

@11645$string_No#:
x23024:	db "No", 0	; 3: 78 111 0

fopen:	; Assign index 0
x23027:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x23032:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x23036:	jge fopen$21	; 2: 125 78

fopen$2:	; SignedMultiply £temporary706 index 29
x23038:	mov ax, [bp + 10]	; 3: 139 70 10
x23041:	xor dx, dx	; 2: 49 210
x23043:	imul word [@1725$int2$29#]	; 4: 247 46 90 90

fopen$3:	; BinaryAdd £temporary707 g_fileArray £temporary706
x23047:	mov si, g_fileArray	; 3: 190 102 13
x23050:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary705 -> £temporary707 £temporary707 0

fopen$5:	; NotEqual 19 £temporary705.open$0 -> £temporary707 0
x23052:	cmp word [si], 0	; 3: 131 60 0
x23055:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x23057:	mov ax, [bp + 6]	; 3: 139 70 6
x23060:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x23063:	mov ax, [bp + 8]	; 3: 139 70 8
x23066:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; SignedMultiply £temporary711 index 29
x23069:	mov ax, [bp + 10]	; 3: 139 70 10
x23072:	xor dx, dx	; 2: 49 210
x23074:	imul word [@1733$int2$29#]	; 4: 247 46 92 90

fopen$10:	; BinaryAdd £temporary712 g_fileArray £temporary711
x23078:	mov si, g_fileArray	; 3: 190 102 13
x23081:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary710 -> £temporary712 £temporary712 0

fopen$12:	; address £temporary713 £temporary710 -> £temporary712

fopen$13:	; Parameter 12 £temporary713 10
x23083:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x23086:	mov word [bp + 12], fopen$15	; 5: 199 70 12 60 90
x23091:	mov [bp + 14], bp	; 3: 137 110 14
x23094:	add bp, 12	; 3: 131 197 12
x23097:	nop	; 1: 144
x23098:	jmp freopen	; 2: 235 34

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary714

fopen$17:	; SetReturnValue £temporary714

fopen$18:	; Return £temporary714
x23100:	mov ax, [bp]	; 3: 139 70 0
x23103:	mov di, [bp + 4]	; 3: 139 126 4
x23106:	mov bp, [bp + 2]	; 3: 139 110 2
x23109:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x23111:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x23114:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x23116:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x23119:	mov ax, [bp]	; 3: 139 70 0
x23122:	mov di, [bp + 4]	; 3: 139 126 4
x23125:	mov bp, [bp + 2]	; 3: 139 110 2
x23128:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

@1725$int2$29#:
x23130:	dw 29	; 2: 29 0

@1733$int2$29#:
x23132:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x23134:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x23139:	mov ax, [bp + 8]	; 3: 139 70 8
x23142:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x23145:	mov word [bp + 22], @1748$string_r#	; 5: 199 70 22 2 93

freopen$4:	; Call 14 strcmp 0
x23150:	mov word [bp + 14], freopen$5	; 5: 199 70 14 124 90
x23155:	mov [bp + 16], bp	; 3: 137 110 16
x23158:	add bp, 14	; 3: 131 197 14
x23161:	jmp strcmp	; 3: 233 159 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary718

freopen$7:	; NotEqual 16 £temporary718 0
x23164:	cmp bx, 0	; 3: 131 251 0
x23167:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x23169:	mov ax, [bp + 6]	; 3: 139 70 6
x23172:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x23175:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x23179:	mov word [bp + 14], freopen$12	; 5: 199 70 14 153 90
x23184:	mov [bp + 16], bp	; 3: 137 110 16
x23187:	add bp, 14	; 3: 131 197 14
x23190:	jmp @1702$fileopen	; 3: 233 240 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary720

freopen$14:	; Assign handle £temporary720
x23193:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 138
x23196:	jmp freopen$138	; 3: 233 252 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x23199:	mov ax, [bp + 8]	; 3: 139 70 8
x23202:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x23205:	mov word [bp + 22], @1757$string_w#	; 5: 199 70 22 4 93

freopen$19:	; Call 14 strcmp 0
x23210:	mov word [bp + 14], freopen$20	; 5: 199 70 14 184 90
x23215:	mov [bp + 16], bp	; 3: 137 110 16
x23218:	add bp, 14	; 3: 131 197 14
x23221:	jmp strcmp	; 3: 233 99 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary721

freopen$22:	; NotEqual 30 £temporary721 0
x23224:	cmp bx, 0	; 3: 131 251 0
x23227:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x23229:	mov ax, [bp + 6]	; 3: 139 70 6
x23232:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x23235:	mov word [bp + 14], freopen$26	; 5: 199 70 14 209 90
x23240:	mov [bp + 16], bp	; 3: 137 110 16
x23243:	add bp, 14	; 3: 131 197 14
x23246:	jmp filecreate	; 3: 233 229 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary723

freopen$28:	; Assign handle £temporary723
x23249:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 138
x23252:	jmp freopen$138	; 3: 233 196 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x23255:	mov ax, [bp + 8]	; 3: 139 70 8
x23258:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x23261:	mov word [bp + 22], @1763$string_a#	; 5: 199 70 22 6 93

freopen$33:	; Call 14 strcmp 0
x23266:	mov word [bp + 14], freopen$34	; 5: 199 70 14 240 90
x23271:	mov [bp + 16], bp	; 3: 137 110 16
x23274:	add bp, 14	; 3: 131 197 14
x23277:	jmp strcmp	; 3: 233 43 2

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary724

freopen$36:	; NotEqual 59 £temporary724 0
x23280:	cmp bx, 0	; 3: 131 251 0
x23283:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x23285:	mov ax, [bp + 6]	; 3: 139 70 6
x23288:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x23291:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x23295:	mov word [bp + 14], freopen$41	; 5: 199 70 14 13 91
x23300:	mov [bp + 16], bp	; 3: 137 110 16
x23303:	add bp, 14	; 3: 131 197 14
x23306:	jmp @1702$fileopen	; 3: 233 124 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary726

freopen$43:	; Assign handle £temporary726
x23309:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x23312:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23316:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x23318:	mov ax, [bp + 10]	; 3: 139 70 10
x23321:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x23324:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x23329:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x23334:	mov word [bp + 14], freopen$50	; 5: 199 70 14 52 91
x23339:	mov [bp + 16], bp	; 3: 137 110 16
x23342:	add bp, 14	; 3: 131 197 14
x23345:	jmp fseek	; 3: 233 179 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 138
x23348:	jmp freopen$138	; 3: 233 100 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x23351:	mov ax, [bp + 6]	; 3: 139 70 6
x23354:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x23357:	mov word [bp + 14], freopen$55	; 5: 199 70 14 75 91
x23362:	mov [bp + 16], bp	; 3: 137 110 16
x23365:	add bp, 14	; 3: 131 197 14
x23368:	jmp filecreate	; 3: 233 107 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary729

freopen$57:	; Assign handle £temporary729
x23371:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 138
x23374:	jmp freopen$138	; 3: 233 74 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x23377:	mov ax, [bp + 8]	; 3: 139 70 8
x23380:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x23383:	mov word [bp + 22], @1783$string_r2B#	; 5: 199 70 22 8 93

freopen$62:	; Call 14 strcmp 0
x23388:	mov word [bp + 14], freopen$63	; 5: 199 70 14 106 91
x23393:	mov [bp + 16], bp	; 3: 137 110 16
x23396:	add bp, 14	; 3: 131 197 14
x23399:	jmp strcmp	; 3: 233 177 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary730

freopen$65:	; NotEqual 82 £temporary730 0
x23402:	cmp bx, 0	; 3: 131 251 0
x23405:	jne freopen$82	; 2: 117 72

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 string_r2B10A# 6
x23407:	mov word [bp + 20], @1788$string_r2B10A#	; 5: 199 70 20 11 93

freopen$68:	; Call 14 printf 0
x23412:	mov word [bp + 14], freopen$69	; 5: 199 70 14 132 91
x23417:	mov [bp + 16], bp	; 3: 137 110 16
x23420:	add bp, 14	; 3: 131 197 14
x23423:	mov di, bp	; 2: 137 239
x23425:	jmp printf	; 3: 233 128 177

freopen$69:	; PostCall 14

freopen$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$71:	; Parameter 14 name 6
x23428:	mov ax, [bp + 6]	; 3: 139 70 6
x23431:	mov [bp + 20], ax	; 3: 137 70 20

freopen$72:	; Parameter 14 66 8
x23434:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$73:	; Call 14 fileopen 0
x23438:	mov word [bp + 14], freopen$74	; 5: 199 70 14 156 91
x23443:	mov [bp + 16], bp	; 3: 137 110 16
x23446:	add bp, 14	; 3: 131 197 14
x23449:	jmp @1702$fileopen	; 3: 233 237 1

freopen$74:	; PostCall 14

freopen$75:	; GetReturnValue £temporary733

freopen$76:	; Assign handle £temporary733
x23452:	mov [bp + 12], bx	; 3: 137 94 12

freopen$77:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$78:	; Parameter 14 string_r2B20A# 6
x23455:	mov word [bp + 20], @1794$string_r2B20A#	; 5: 199 70 20 16 93

freopen$79:	; Call 14 printf 0
x23460:	mov word [bp + 14], freopen$80	; 5: 199 70 14 180 91
x23465:	mov [bp + 16], bp	; 3: 137 110 16
x23468:	add bp, 14	; 3: 131 197 14
x23471:	mov di, bp	; 2: 137 239
x23473:	jmp printf	; 3: 233 80 177

freopen$80:	; PostCall 14

freopen$81:	; Goto 138
x23476:	jmp freopen$138	; 3: 233 228 0

freopen$82:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$83:	; Parameter 14 mode 6
x23479:	mov ax, [bp + 8]	; 3: 139 70 8
x23482:	mov [bp + 20], ax	; 3: 137 70 20

freopen$84:	; Parameter 14 string_w2B# 8
x23485:	mov word [bp + 22], @1796$string_w2B#	; 5: 199 70 22 21 93

freopen$85:	; Call 14 strcmp 0
x23490:	mov word [bp + 14], freopen$86	; 5: 199 70 14 208 91
x23495:	mov [bp + 16], bp	; 3: 137 110 16
x23498:	add bp, 14	; 3: 131 197 14
x23501:	jmp strcmp	; 3: 233 75 1

freopen$86:	; PostCall 14

freopen$87:	; GetReturnValue £temporary735

freopen$88:	; NotEqual 110 £temporary735 0
x23504:	cmp bx, 0	; 3: 131 251 0
x23507:	jne freopen$110	; 2: 117 80

freopen$89:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$90:	; Parameter 14 name 6
x23509:	mov ax, [bp + 6]	; 3: 139 70 6
x23512:	mov [bp + 20], ax	; 3: 137 70 20

freopen$91:	; Call 14 fileexists 0
x23515:	mov word [bp + 14], freopen$92	; 5: 199 70 14 233 91
x23520:	mov [bp + 16], bp	; 3: 137 110 16
x23523:	add bp, 14	; 3: 131 197 14
x23526:	jmp fileexists	; 3: 233 73 2

freopen$92:	; PostCall 14

freopen$93:	; GetReturnValue £temporary737

freopen$94:	; Equal 103 £temporary737 0
x23529:	cmp bx, 0	; 3: 131 251 0
x23532:	je freopen$103	; 2: 116 30

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x23534:	mov ax, [bp + 6]	; 3: 139 70 6
x23537:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Parameter 14 66 8
x23540:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$98:	; Call 14 fileopen 0
x23544:	mov word [bp + 14], freopen$99	; 5: 199 70 14 6 92
x23549:	mov [bp + 16], bp	; 3: 137 110 16
x23552:	add bp, 14	; 3: 131 197 14
x23555:	jmp @1702$fileopen	; 3: 233 131 1

freopen$99:	; PostCall 14

freopen$100:	; GetReturnValue £temporary738

freopen$101:	; Assign handle £temporary738
x23558:	mov [bp + 12], bx	; 3: 137 94 12

freopen$102:	; Goto 138
x23561:	jmp freopen$138	; 3: 233 143 0

freopen$103:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$104:	; Parameter 14 name 6
x23564:	mov ax, [bp + 6]	; 3: 139 70 6
x23567:	mov [bp + 20], ax	; 3: 137 70 20

freopen$105:	; Call 14 filecreate 0
x23570:	mov word [bp + 14], freopen$106	; 5: 199 70 14 32 92
x23575:	mov [bp + 16], bp	; 3: 137 110 16
x23578:	add bp, 14	; 3: 131 197 14
x23581:	jmp filecreate	; 3: 233 150 1

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary739

freopen$108:	; Assign handle £temporary739
x23584:	mov [bp + 12], bx	; 3: 137 94 12

freopen$109:	; Goto 138
x23587:	jmp freopen$138	; 2: 235 118

freopen$110:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$111:	; Parameter 14 mode 6
x23589:	mov ax, [bp + 8]	; 3: 139 70 8
x23592:	mov [bp + 20], ax	; 3: 137 70 20

freopen$112:	; Parameter 14 string_a2B# 8
x23595:	mov word [bp + 22], @1809$string_a2B#	; 5: 199 70 22 24 93

freopen$113:	; Call 14 strcmp 0
x23600:	mov word [bp + 14], freopen$114	; 5: 199 70 14 62 92
x23605:	mov [bp + 16], bp	; 3: 137 110 16
x23608:	add bp, 14	; 3: 131 197 14
x23611:	jmp strcmp	; 3: 233 221 0

freopen$114:	; PostCall 14

freopen$115:	; GetReturnValue £temporary741

freopen$116:	; NotEqual 138 £temporary741 0
x23614:	cmp bx, 0	; 3: 131 251 0
x23617:	jne freopen$138	; 2: 117 88

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 name 6
x23619:	mov ax, [bp + 6]	; 3: 139 70 6
x23622:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 66 8
x23625:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$120:	; Call 14 fileopen 0
x23629:	mov word [bp + 14], freopen$121	; 5: 199 70 14 91 92
x23634:	mov [bp + 16], bp	; 3: 137 110 16
x23637:	add bp, 14	; 3: 131 197 14
x23640:	jmp @1702$fileopen	; 3: 233 46 1

freopen$121:	; PostCall 14

freopen$122:	; GetReturnValue £temporary743

freopen$123:	; Assign handle £temporary743
x23643:	mov [bp + 12], bx	; 3: 137 94 12

freopen$124:	; Equal 132 handle -1
x23646:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23650:	je freopen$132	; 2: 116 32

freopen$125:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$126:	; Parameter 14 stream 6
x23652:	mov ax, [bp + 10]	; 3: 139 70 10
x23655:	mov [bp + 20], ax	; 3: 137 70 20

freopen$127:	; Parameter 14 0 8
x23658:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$128:	; Parameter 14 2 10
x23663:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$129:	; Call 14 fseek 0
x23668:	mov word [bp + 14], freopen$130	; 5: 199 70 14 130 92
x23673:	mov [bp + 16], bp	; 3: 137 110 16
x23676:	add bp, 14	; 3: 131 197 14
x23679:	jmp fseek	; 3: 233 101 1

freopen$130:	; PostCall 14

freopen$131:	; Goto 138
x23682:	jmp freopen$138	; 2: 235 23

freopen$132:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$133:	; Parameter 14 name 6
x23684:	mov ax, [bp + 6]	; 3: 139 70 6
x23687:	mov [bp + 20], ax	; 3: 137 70 20

freopen$134:	; Call 14 filecreate 0
x23690:	mov word [bp + 14], freopen$135	; 5: 199 70 14 152 92
x23695:	mov [bp + 16], bp	; 3: 137 110 16
x23698:	add bp, 14	; 3: 131 197 14
x23701:	jmp filecreate	; 3: 233 30 1

freopen$135:	; PostCall 14

freopen$136:	; GetReturnValue £temporary746

freopen$137:	; Assign handle £temporary746
x23704:	mov [bp + 12], bx	; 3: 137 94 12

freopen$138:	; Equal 155 handle -1
x23707:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23711:	je freopen$155	; 2: 116 76

freopen$139:	; Deref £temporary748 -> stream stream 0
x23713:	mov si, [bp + 10]	; 3: 139 118 10

freopen$140:	; Assign £temporary748 -> stream 1
x23716:	mov word [si], 1	; 4: 199 4 1 0

freopen$141:	; Deref £temporary749 -> stream stream 2
x23720:	mov si, [bp + 10]	; 3: 139 118 10

freopen$142:	; Assign £temporary749 -> stream handle
x23723:	mov ax, [bp + 12]	; 3: 139 70 12
x23726:	mov [si + 2], ax	; 3: 137 68 2

freopen$143:	; Deref £temporary750 -> stream stream 25
x23729:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary750 -> stream 0
x23732:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$146:	; Deref £temporary751 -> stream stream 4
x23737:	mov si, [bp + 10]	; 3: 139 118 10

freopen$147:	; Parameter 14 £temporary751 -> stream 6
x23740:	mov [bp + 20], si	; 3: 137 118 20
x23743:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$148:	; Parameter 14 name 8
x23747:	mov ax, [bp + 6]	; 3: 139 70 6
x23750:	mov [bp + 22], ax	; 3: 137 70 22

freopen$149:	; Call 14 strcpy 0
x23753:	mov word [bp + 14], freopen$150	; 5: 199 70 14 215 92
x23758:	mov [bp + 16], bp	; 3: 137 110 16
x23761:	add bp, 14	; 3: 131 197 14
x23764:	jmp strcpy	; 3: 233 121 1

freopen$150:	; PostCall 14

freopen$151:	; Deref £temporary753 -> stream stream 27
x23767:	mov si, [bp + 10]	; 3: 139 118 10

freopen$152:	; Assign £temporary753 -> stream 0
x23770:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$153:	; SetReturnValue stream
x23775:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$154:	; Return stream
x23778:	mov ax, [bp]	; 3: 139 70 0
x23781:	mov di, [bp + 4]	; 3: 139 126 4
x23784:	mov bp, [bp + 2]	; 3: 139 110 2
x23787:	jmp ax	; 2: 255 224

freopen$155:	; Deref £temporary754 -> stream stream 0
x23789:	mov si, [bp + 10]	; 3: 139 118 10

freopen$156:	; Assign £temporary754 -> stream 0
x23792:	mov word [si], 0	; 4: 199 4 0 0

freopen$157:	; SetReturnValue 0
x23796:	mov bx, 0	; 3: 187 0 0

freopen$158:	; Return 0
x23799:	mov ax, [bp]	; 3: 139 70 0
x23802:	mov di, [bp + 4]	; 3: 139 126 4
x23805:	mov bp, [bp + 2]	; 3: 139 110 2
x23808:	jmp ax	; 2: 255 224

freopen$159:	; FunctionEnd freopen

@1748$string_r#:
x23810:	db "r", 0	; 2: 114 0

@1757$string_w#:
x23812:	db "w", 0	; 2: 119 0

@1763$string_a#:
x23814:	db "a", 0	; 2: 97 0

@1783$string_r2B#:
x23816:	db "r+", 0	; 3: 114 43 0

@1788$string_r2B10A#:
x23819:	db "r+1", 10, 0	; 5: 114 43 49 10 0

@1794$string_r2B20A#:
x23824:	db "r+2", 10, 0	; 5: 114 43 50 10 0

@1796$string_w2B#:
x23829:	db "w+", 0	; 3: 119 43 0

@1809$string_a2B#:
x23832:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x23835:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3755 left index
x23840:	mov si, [bp + 6]	; 3: 139 118 6
x23843:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3754 -> £temporary3755 £temporary3755 0

strcmp$3:	; NotEqual 9 £temporary3754 -> £temporary3755 0
x23846:	cmp byte [si], 0	; 3: 128 60 0
x23849:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3758 right index
x23851:	mov si, [bp + 8]	; 3: 139 118 8
x23854:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3757 -> £temporary3758 £temporary3758 0

strcmp$6:	; NotEqual 9 £temporary3757 -> £temporary3758 0
x23857:	cmp byte [si], 0	; 3: 128 60 0
x23860:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x23862:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x23865:	mov ax, [bp]	; 3: 139 70 0
x23868:	mov di, [bp + 4]	; 3: 139 126 4
x23871:	mov bp, [bp + 2]	; 3: 139 110 2
x23874:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3762 left index
x23876:	mov si, [bp + 6]	; 3: 139 118 6
x23879:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3761 -> £temporary3762 £temporary3762 0

strcmp$11:	; BinaryAdd £temporary3764 right index
x23882:	mov di, [bp + 8]	; 3: 139 126 8
x23885:	add di, [bp + 10]	; 3: 3 126 10

strcmp$12:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3761 -> £temporary3762 £temporary3763 -> £temporary3764
x23888:	mov al, [di]	; 2: 138 5
x23890:	cmp [si], al	; 2: 56 4
x23892:	jge strcmp$16	; 2: 125 14

strcmp$14:	; SetReturnValue -1
x23894:	mov bx, -1	; 3: 187 255 255

strcmp$15:	; Return -1
x23897:	mov ax, [bp]	; 3: 139 70 0
x23900:	mov di, [bp + 4]	; 3: 139 126 4
x23903:	mov bp, [bp + 2]	; 3: 139 110 2
x23906:	jmp ax	; 2: 255 224

strcmp$16:	; BinaryAdd £temporary3767 left index
x23908:	mov si, [bp + 6]	; 3: 139 118 6
x23911:	add si, [bp + 10]	; 3: 3 118 10

strcmp$17:	; Deref £temporary3766 -> £temporary3767 £temporary3767 0

strcmp$18:	; BinaryAdd £temporary3769 right index
x23914:	mov di, [bp + 8]	; 3: 139 126 8
x23917:	add di, [bp + 10]	; 3: 3 126 10

strcmp$19:	; Deref £temporary3768 -> £temporary3769 £temporary3769 0

strcmp$20:	; SignedLessThanEqual 23 £temporary3766 -> £temporary3767 £temporary3768 -> £temporary3769
x23920:	mov al, [di]	; 2: 138 5
x23922:	cmp [si], al	; 2: 56 4
x23924:	jle strcmp$23	; 2: 126 14

strcmp$21:	; SetReturnValue 1
x23926:	mov bx, 1	; 3: 187 1 0

strcmp$22:	; Return 1
x23929:	mov ax, [bp]	; 3: 139 70 0
x23932:	mov di, [bp + 4]	; 3: 139 126 4
x23935:	mov bp, [bp + 2]	; 3: 139 110 2
x23938:	jmp ax	; 2: 255 224

strcmp$23:	; Increment index
x23940:	inc word [bp + 10]	; 3: 255 70 10

strcmp$24:	; Goto 1
x23943:	jmp strcmp$1	; 2: 235 151

strcmp$25:	; FunctionEnd strcmp

@1702$fileopen:	; AssignRegister ah 61
x23945:	mov ah, 61	; 2: 180 61

@1702$fileopen$1:	; AssignRegister al mode
x23947:	mov al, [bp + 8]	; 3: 138 70 8

@1702$fileopen$2:	; AssignRegister dx name
x23950:	mov dx, [bp + 6]	; 3: 139 86 6

@1702$fileopen$3:	; Interrupt 33
x23953:	int 33	; 2: 205 33

@1702$fileopen$4:	; NotCarry 8
x23955:	jnc @1702$fileopen$8	; 2: 115 20

@1702$fileopen$5:	; Assign errno 9
x23957:	mov word [errno], 9	; 6: 199 6 230 10 9 0

@1702$fileopen$6:	; SetReturnValue -1
x23963:	mov bx, -1	; 3: 187 255 255

@1702$fileopen$7:	; Return -1
x23966:	mov ax, [bp]	; 3: 139 70 0
x23969:	mov di, [bp + 4]	; 3: 139 126 4
x23972:	mov bp, [bp + 2]	; 3: 139 110 2
x23975:	jmp ax	; 2: 255 224

@1702$fileopen$8:	; InspectRegister £temporary702 ax

@1702$fileopen$9:	; SetReturnValue £temporary702
x23977:	mov bx, ax	; 2: 137 195

@1702$fileopen$10:	; Return £temporary702
x23979:	mov ax, [bp]	; 3: 139 70 0
x23982:	mov di, [bp + 4]	; 3: 139 126 4
x23985:	mov bp, [bp + 2]	; 3: 139 110 2
x23988:	jmp ax	; 2: 255 224

@1702$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x23990:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x23992:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x23995:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x23998:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary680 ax

filecreate$5:	; Assign handle £temporary680
x24000:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x24003:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x24005:	mov word [errno], 9	; 6: 199 6 230 10 9 0

filecreate$8:	; SetReturnValue -1
x24011:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x24014:	mov ax, [bp]	; 3: 139 70 0
x24017:	mov di, [bp + 4]	; 3: 139 126 4
x24020:	mov bp, [bp + 2]	; 3: 139 110 2
x24023:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x24025:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x24028:	mov ax, [bp]	; 3: 139 70 0
x24031:	mov di, [bp + 4]	; 3: 139 126 4
x24034:	mov bp, [bp + 2]	; 3: 139 110 2
x24037:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary932 origin
x24039:	mov ax, [bp + 10]	; 3: 139 70 10
x24042:	cmp ax, 0	; 3: 131 248 0
x24045:	jge fseek$1	; 2: 125 4
x24047:	neg ax	; 2: 247 216
x24049:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary932

fseek$2:	; AssignRegister ah 66
x24051:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary935 -> stream stream 2
x24053:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary935 -> stream
x24056:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x24059:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary938 offset
x24062:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary938

fseek$8:	; Interrupt 33
x24065:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x24067:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary941 -> stream stream 23
x24069:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary942 ax

fseek$12:	; Assign £temporary941 -> stream £temporary942
x24072:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary943 -> stream stream 23
x24075:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary943 -> stream
x24078:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary943 -> stream
x24081:	mov ax, [bp]	; 3: 139 70 0
x24084:	mov di, [bp + 4]	; 3: 139 126 4
x24087:	mov bp, [bp + 2]	; 3: 139 110 2
x24090:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary944 -> stream stream 21
x24092:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary944 -> stream 15
x24095:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x24100:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x24103:	mov ax, [bp]	; 3: 139 70 0
x24106:	mov di, [bp + 4]	; 3: 139 126 4
x24109:	mov bp, [bp + 2]	; 3: 139 110 2
x24112:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x24114:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x24116:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x24118:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x24121:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x24123:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary697 1
x24125:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x24128:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary697 0
x24130:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary697

fileexists$9:	; Return £temporary697
x24133:	mov ax, [bp]	; 3: 139 70 0
x24136:	mov di, [bp + 4]	; 3: 139 126 4
x24139:	mov bp, [bp + 2]	; 3: 139 110 2
x24142:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x24144:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3698 source index
x24149:	mov si, [bp + 8]	; 3: 139 118 8
x24152:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3697 -> £temporary3698 £temporary3698 0

strcpy$3:	; Equal 11 £temporary3697 -> £temporary3698 0
x24155:	cmp byte [si], 0	; 3: 128 60 0
x24158:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3702 target index
x24160:	mov si, [bp + 6]	; 3: 139 118 6
x24163:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3701 -> £temporary3702 £temporary3702 0

strcpy$6:	; BinaryAdd £temporary3704 source index
x24166:	mov di, [bp + 8]	; 3: 139 126 8
x24169:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3703 -> £temporary3704 £temporary3704 0

strcpy$8:	; Assign £temporary3701 -> £temporary3702 £temporary3703 -> £temporary3704
x24172:	mov al, [di]	; 2: 138 5
x24174:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x24176:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x24179:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3706 target index
x24181:	mov si, [bp + 6]	; 3: 139 118 6
x24184:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3705 -> £temporary3706 £temporary3706 0

strcpy$13:	; Assign £temporary3705 -> £temporary3706 0
x24187:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x24190:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x24193:	mov ax, [bp]	; 3: 139 70 0
x24196:	mov di, [bp + 4]	; 3: 139 126 4
x24199:	mov bp, [bp + 2]	; 3: 139 110 2
x24202:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2213 format
x24204:	mov si, bp	; 2: 137 238
x24206:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2214 £temporary2213

fprintf$2:	; BinaryAdd arg_list £temporary2214 2
x24209:	add si, 2	; 3: 131 198 2
x24212:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x24215:	mov ax, [bp + 6]	; 3: 139 70 6
x24218:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x24221:	mov ax, [bp + 8]	; 3: 139 70 8
x24224:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x24227:	mov ax, [di + 10]	; 3: 139 69 10
x24230:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x24233:	mov word [di + 12], fprintf$8	; 5: 199 69 12 188 94
x24238:	mov [di + 14], bp	; 3: 137 109 14
x24241:	mov [di + 16], di	; 3: 137 125 16
x24244:	add di, 12	; 3: 131 199 12
x24247:	mov bp, di	; 2: 137 253
x24249:	jmp vfprintf	; 3: 233 238 176

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2216

fprintf$10:	; SetReturnValue £temporary2216

fprintf$11:	; Return £temporary2216
x24252:	mov ax, [bp]	; 3: 139 70 0
x24255:	mov di, [bp + 4]	; 3: 139 126 4
x24258:	mov bp, [bp + 2]	; 3: 139 110 2
x24261:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x24263:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x24265:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x24267:	int 33	; 2: 205 33

abort$3:	; Return 0
x24269:	mov ax, [bp]	; 3: 139 70 0
x24272:	mov di, [bp + 4]	; 3: 139 126 4
x24275:	mov bp, [bp + 2]	; 3: 139 110 2
x24278:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x24280:	mov ax, [bp + 6]	; 3: 139 70 6
x24283:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x24286:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x24291:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x24296:	mov word [bp + 8], feof$5	; 5: 199 70 8 246 94
x24301:	mov [bp + 10], bp	; 3: 137 110 10
x24304:	add bp, 8	; 3: 131 197 8
x24307:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary965

feof$7:	; IntegralToIntegral £temporary966 £temporary965
x24310:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary966
x24317:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x24321:	mov ax, [bp + 6]	; 3: 139 70 6
x24324:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x24327:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x24332:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x24337:	mov word [bp + 12], feof$14	; 5: 199 70 12 31 95
x24342:	mov [bp + 14], bp	; 3: 137 110 14
x24345:	add bp, 12	; 3: 131 197 12
x24348:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary967

feof$16:	; IntegralToIntegral £temporary968 £temporary967
x24351:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary968
x24358:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x24362:	mov ax, [bp + 6]	; 3: 139 70 6
x24365:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary969 currPosition
x24368:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary969 8
x24372:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x24375:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x24380:	mov word [bp + 16], feof$24	; 5: 199 70 16 74 95
x24385:	mov [bp + 18], bp	; 3: 137 110 18
x24388:	add bp, 16	; 3: 131 197 16
x24391:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x24394:	mov eax, [bp + 12]	; 4: 102 139 70 12
x24398:	cmp [bp + 8], eax	; 4: 102 57 70 8
x24402:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary972 1
x24404:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x24407:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary972 0
x24409:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary972
x24412:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x24415:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x24418:	mov ax, [bp]	; 3: 139 70 0
x24421:	mov di, [bp + 4]	; 3: 139 126 4
x24424:	mov bp, [bp + 2]	; 3: 139 110 2
x24427:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1565 format
x24429:	mov si, bp	; 2: 137 238
x24431:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1566 £temporary1565

fscanf$2:	; BinaryAdd arg_list £temporary1566 2
x24434:	add si, 2	; 3: 131 198 2
x24437:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x24440:	mov ax, [bp + 6]	; 3: 139 70 6
x24443:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x24446:	mov ax, [bp + 8]	; 3: 139 70 8
x24449:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x24452:	mov ax, [di + 10]	; 3: 139 69 10
x24455:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x24458:	mov word [di + 12], fscanf$8	; 5: 199 69 12 157 95
x24463:	mov [di + 14], bp	; 3: 137 109 14
x24466:	mov [di + 16], di	; 3: 137 125 16
x24469:	add di, 12	; 3: 131 199 12
x24472:	mov bp, di	; 2: 137 253
x24474:	nop	; 1: 144
x24475:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1568

fscanf$10:	; SetReturnValue £temporary1568

fscanf$11:	; Return £temporary1568
x24477:	mov ax, [bp]	; 3: 139 70 0
x24480:	mov di, [bp + 4]	; 3: 139 126 4
x24483:	mov bp, [bp + 2]	; 3: 139 110 2
x24486:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x24488:	mov word [g_inStatus], 0	; 6: 199 6 217 95 0 0

vfscanf$1:	; IntegralToIntegral £temporary1573 inStream
x24494:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1573
x24497:	mov [g_inDevice], ax	; 3: 163 219 95

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x24500:	mov ax, [bp + 8]	; 3: 139 70 8
x24503:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x24506:	mov ax, [bp + 10]	; 3: 139 70 10
x24509:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x24512:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 206 95
x24517:	mov [bp + 14], bp	; 3: 137 110 14
x24520:	add bp, 12	; 3: 131 197 12
x24523:	nop	; 1: 144
x24524:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1574

vfscanf$9:	; SetReturnValue £temporary1574

vfscanf$10:	; Return £temporary1574
x24526:	mov ax, [bp]	; 3: 139 70 0
x24529:	mov di, [bp + 4]	; 3: 139 126 4
x24532:	mov bp, [bp + 2]	; 3: 139 110 2
x24535:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x24537:	db 0, 0	; 2: 0 0

g_inDevice:
x24539:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x24541:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x24546:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x24551:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x24556:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x24561:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x24566:	mov word [g_inCount], 0	; 6: 199 6 252 100 0 0

scanFormat$6:	; Assign g_inChars 0
x24572:	mov word [g_inChars], 0	; 6: 199 6 254 100 0 0

scanFormat$7:	; Assign index 0
x24578:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1360 format index
x24583:	mov si, [bp + 6]	; 3: 139 118 6
x24586:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1359 -> £temporary1360 £temporary1360 0

scanFormat$10:	; Equal 329 £temporary1359 -> £temporary1360 0
x24589:	cmp byte [si], 0	; 3: 128 60 0
x24592:	je scanFormat$329	; 4: 15 132 217 4

scanFormat$11:	; BinaryAdd £temporary1364 format index
x24596:	mov si, [bp + 6]	; 3: 139 118 6
x24599:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1363 -> £temporary1364 £temporary1364 0

scanFormat$13:	; Assign c £temporary1363 -> £temporary1364
x24602:	mov al, [si]	; 2: 138 4
x24604:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1365 c
x24607:	mov al, [bp + 10]	; 3: 138 70 10
x24610:	and ax, 255	; 3: 37 255 0
x24613:	cmp al, 0	; 2: 60 0
x24615:	jge scanFormat$15	; 2: 125 4
x24617:	neg al	; 2: 246 216
x24619:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1365 1
x24621:	inc ax	; 1: 64
x24622:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 321 percent 0
x24625:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x24629:	je scanFormat$321	; 4: 15 132 143 4

scanFormat$17:	; BinarySubtract £temporary1367 d 1
x24633:	mov ax, [bp + 55]	; 3: 139 70 55
x24636:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1367 104
x24637:	cmp ax, 104	; 3: 131 248 104
x24640:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1367 108
x24642:	cmp ax, 108	; 3: 131 248 108
x24645:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1367 76
x24647:	cmp ax, 76	; 3: 131 248 76
x24650:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1367 42
x24652:	cmp ax, 42	; 3: 131 248 42
x24655:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1367 99
x24657:	cmp ax, 99	; 3: 131 248 99
x24660:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1367 115
x24662:	cmp ax, 115	; 3: 131 248 115
x24665:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1367 100
x24669:	cmp ax, 100	; 3: 131 248 100
x24672:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1367 105
x24676:	cmp ax, 105	; 3: 131 248 105
x24679:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1367 111
x24683:	cmp ax, 111	; 3: 131 248 111
x24686:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1367 120
x24690:	cmp ax, 120	; 3: 131 248 120
x24693:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1367 117
x24697:	cmp ax, 117	; 3: 131 248 117
x24700:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1367 103
x24704:	cmp ax, 103	; 3: 131 248 103
x24707:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1367 102
x24711:	cmp ax, 102	; 3: 131 248 102
x24714:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1367 101
x24718:	cmp ax, 101	; 3: 131 248 101
x24721:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1367 91
x24725:	cmp ax, 91	; 3: 131 248 91
x24728:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 312 £temporary1367 110
x24732:	cmp ax, 110	; 3: 131 248 110
x24735:	je scanFormat$312	; 4: 15 132 7 4

scanFormat$34:	; CaseEnd £temporary1367

scanFormat$35:	; Goto 327
x24739:	jmp scanFormat$327	; 3: 233 65 4

scanFormat$36:	; Assign shortInt 1
x24742:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 327
x24747:	jmp scanFormat$327	; 3: 233 57 4

scanFormat$38:	; Assign longIntOrDouble 1
x24750:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 327
x24755:	jmp scanFormat$327	; 3: 233 49 4

scanFormat$40:	; Assign longDouble 1
x24758:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 327
x24763:	jmp scanFormat$327	; 3: 233 41 4

scanFormat$42:	; Assign star 1
x24766:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 327
x24771:	jmp scanFormat$327	; 3: 233 33 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x24774:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 212 96
x24779:	mov [bp + 59], bp	; 3: 137 110 59
x24782:	add bp, 57	; 3: 131 197 57
x24785:	jmp scanChar	; 3: 233 44 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1368

scanFormat$48:	; Assign charValue £temporary1368
x24788:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x24791:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24795:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x24797:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1372 arg_list 2
x24801:	mov si, [bp + 8]	; 3: 139 118 8
x24804:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1373 £temporary1372

scanFormat$53:	; Deref £temporary1374 -> £temporary1373 £temporary1373 0

scanFormat$54:	; Assign charPtr £temporary1374 -> £temporary1373
x24807:	mov ax, [si]	; 2: 139 4
x24809:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1375 -> charPtr charPtr 0
x24812:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1375 -> charPtr charValue
x24815:	mov al, [bp + 57]	; 3: 138 70 57
x24818:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x24820:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1376 charValue
x24825:	mov al, [bp + 57]	; 3: 138 70 57
x24828:	and ax, 255	; 3: 37 255 0
x24831:	cmp al, 0	; 2: 60 0
x24833:	jge scanFormat$59	; 2: 125 4
x24835:	neg al	; 2: 246 216
x24837:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 327 £temporary1376 -1
x24839:	cmp ax, -1	; 3: 131 248 255
x24842:	je scanFormat$327	; 4: 15 132 217 3

scanFormat$60:	; Increment g_inCount
x24846:	inc word [g_inCount]	; 4: 255 6 252 100

scanFormat$61:	; Goto 327
x24850:	jmp scanFormat$327	; 3: 233 210 3

scanFormat$62:	; NotEqual 74 star 0
x24853:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24857:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x24859:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1382 arg_list 2
x24863:	mov si, [bp + 8]	; 3: 139 118 8
x24866:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1383 £temporary1382

scanFormat$66:	; Deref £temporary1384 -> £temporary1383 £temporary1383 0

scanFormat$67:	; Assign charPtr £temporary1384 -> £temporary1383
x24869:	mov ax, [si]	; 2: 139 4
x24871:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x24874:	mov ax, [bp + 11]	; 3: 139 70 11
x24877:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x24880:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x24885:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 67 97
x24890:	mov [bp + 59], bp	; 3: 137 110 59
x24893:	add bp, 57	; 3: 131 197 57
x24896:	jmp scanString	; 3: 233 44 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x24899:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x24901:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x24906:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x24911:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 93 97
x24916:	mov [bp + 59], bp	; 3: 137 110 59
x24919:	add bp, 57	; 3: 131 197 57
x24922:	jmp scanString	; 3: 233 18 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x24925:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 327
x24930:	jmp scanFormat$327	; 3: 233 130 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x24933:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x24938:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 120 97
x24943:	mov [bp + 59], bp	; 3: 137 110 59
x24946:	add bp, 57	; 3: 131 197 57
x24949:	jmp scanLongInt	; 3: 233 123 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1387

scanFormat$86:	; Assign longValue £temporary1387
x24952:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x24956:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24960:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x24962:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x24966:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x24968:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1391 arg_list 2
x24972:	mov si, [bp + 8]	; 3: 139 118 8
x24975:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1392 £temporary1391

scanFormat$92:	; Deref £temporary1393 -> £temporary1392 £temporary1392 0

scanFormat$93:	; Assign shortPtr £temporary1393 -> £temporary1392
x24978:	mov ax, [si]	; 2: 139 4
x24980:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1394 -> shortPtr shortPtr 0
x24983:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1395 longValue
x24986:	mov eax, [bp + 23]	; 4: 102 139 70 23
x24990:	cmp eax, 0	; 4: 102 131 248 0
x24994:	jge scanFormat$96	; 2: 125 5
x24996:	neg eax	; 3: 102 247 216
x24999:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1394 -> shortPtr £temporary1395
x25001:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x25003:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x25005:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25009:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x25011:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1399 arg_list 2
x25015:	mov si, [bp + 8]	; 3: 139 118 8
x25018:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1400 £temporary1399

scanFormat$102:	; Deref £temporary1401 -> £temporary1400 £temporary1400 0

scanFormat$103:	; Assign intPtr £temporary1401 -> £temporary1400
x25021:	mov ax, [si]	; 2: 139 4
x25023:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1402 -> intPtr intPtr 0
x25026:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1403 longValue
x25029:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25033:	cmp eax, 0	; 4: 102 131 248 0
x25037:	jge scanFormat$106	; 2: 125 5
x25039:	neg eax	; 3: 102 247 216
x25042:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1402 -> intPtr £temporary1403
x25044:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x25046:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x25048:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1405 arg_list 2
x25052:	mov si, [bp + 8]	; 3: 139 118 8
x25055:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1406 £temporary1405

scanFormat$111:	; Deref £temporary1407 -> £temporary1406 £temporary1406 0

scanFormat$112:	; Assign longPtr £temporary1407 -> £temporary1406
x25058:	mov ax, [si]	; 2: 139 4
x25060:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1408 -> longPtr longPtr 0
x25063:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1408 -> longPtr longValue
x25066:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25070:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x25073:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 327
x25078:	jmp scanFormat$327	; 3: 233 238 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x25081:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x25086:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 12 98
x25091:	mov [bp + 59], bp	; 3: 137 110 59
x25094:	add bp, 57	; 3: 131 197 57
x25097:	jmp scanUnsignedLongInt	; 3: 233 33 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1410

scanFormat$122:	; Assign unsignedLongValue £temporary1410
x25100:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x25104:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25108:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x25110:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25114:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x25116:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1414 arg_list 2
x25120:	mov si, [bp + 8]	; 3: 139 118 8
x25123:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1415 £temporary1414

scanFormat$128:	; Deref £temporary1416 -> £temporary1415 £temporary1415 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1416 -> £temporary1415
x25126:	mov ax, [si]	; 2: 139 4
x25128:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1417 -> unsignedShortPtr unsignedShortPtr 0
x25131:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1418 unsignedLongValue
x25134:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1417 -> unsignedShortPtr £temporary1418
x25138:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x25140:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x25142:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25146:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x25148:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1422 arg_list 2
x25152:	mov si, [bp + 8]	; 3: 139 118 8
x25155:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1423 £temporary1422

scanFormat$138:	; Deref £temporary1424 -> £temporary1423 £temporary1423 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1424 -> £temporary1423
x25158:	mov ax, [si]	; 2: 139 4
x25160:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1425 -> unsignedIntPtr unsignedIntPtr 0
x25163:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1426 unsignedLongValue
x25166:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1425 -> unsignedIntPtr £temporary1426
x25170:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x25172:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x25174:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1428 arg_list 2
x25178:	mov si, [bp + 8]	; 3: 139 118 8
x25181:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1429 £temporary1428

scanFormat$147:	; Deref £temporary1430 -> £temporary1429 £temporary1429 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1430 -> £temporary1429
x25184:	mov ax, [si]	; 2: 139 4
x25186:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1431 -> unsignedLongPtr unsignedLongPtr 0
x25189:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1431 -> unsignedLongPtr unsignedLongValue
x25192:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25196:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x25199:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 327
x25204:	jmp scanFormat$327	; 3: 233 112 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x25207:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x25212:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 138 98
x25217:	mov [bp + 59], bp	; 3: 137 110 59
x25220:	add bp, 57	; 3: 131 197 57
x25223:	jmp scanUnsignedLongInt	; 3: 233 163 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1433

scanFormat$158:	; Assign unsignedLongValue £temporary1433
x25226:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x25230:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25234:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x25236:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25240:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x25242:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1437 arg_list 2
x25246:	mov si, [bp + 8]	; 3: 139 118 8
x25249:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1438 £temporary1437

scanFormat$164:	; Deref £temporary1439 -> £temporary1438 £temporary1438 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1439 -> £temporary1438
x25252:	mov ax, [si]	; 2: 139 4
x25254:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1440 -> unsignedShortPtr unsignedShortPtr 0
x25257:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1441 unsignedLongValue
x25260:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1440 -> unsignedShortPtr £temporary1441
x25264:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x25266:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x25268:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25272:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x25274:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1445 arg_list 2
x25278:	mov si, [bp + 8]	; 3: 139 118 8
x25281:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1446 £temporary1445

scanFormat$174:	; Deref £temporary1447 -> £temporary1446 £temporary1446 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1447 -> £temporary1446
x25284:	mov ax, [si]	; 2: 139 4
x25286:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1448 -> unsignedIntPtr unsignedIntPtr 0
x25289:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1449 unsignedLongValue
x25292:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1448 -> unsignedIntPtr £temporary1449
x25296:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x25298:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x25300:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1451 arg_list 2
x25304:	mov si, [bp + 8]	; 3: 139 118 8
x25307:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1452 £temporary1451

scanFormat$183:	; Deref £temporary1453 -> £temporary1452 £temporary1452 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1453 -> £temporary1452
x25310:	mov ax, [si]	; 2: 139 4
x25312:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1454 -> unsignedLongPtr unsignedLongPtr 0
x25315:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1454 -> unsignedLongPtr unsignedLongValue
x25318:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25322:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x25325:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 327
x25330:	jmp scanFormat$327	; 3: 233 242 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x25333:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x25338:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 8 99
x25343:	mov [bp + 59], bp	; 3: 137 110 59
x25346:	add bp, 57	; 3: 131 197 57
x25349:	jmp scanUnsignedLongInt	; 3: 233 37 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1456

scanFormat$194:	; Assign unsignedLongValue £temporary1456
x25352:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x25356:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25360:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x25362:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25366:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x25368:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1460 arg_list 2
x25372:	mov si, [bp + 8]	; 3: 139 118 8
x25375:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1461 £temporary1460

scanFormat$200:	; Deref £temporary1462 -> £temporary1461 £temporary1461 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1462 -> £temporary1461
x25378:	mov ax, [si]	; 2: 139 4
x25380:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1463 -> unsignedShortPtr unsignedShortPtr 0
x25383:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1464 unsignedLongValue
x25386:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1463 -> unsignedShortPtr £temporary1464
x25390:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x25392:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x25394:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25398:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x25400:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1468 arg_list 2
x25404:	mov si, [bp + 8]	; 3: 139 118 8
x25407:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1469 £temporary1468

scanFormat$210:	; Deref £temporary1470 -> £temporary1469 £temporary1469 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1470 -> £temporary1469
x25410:	mov ax, [si]	; 2: 139 4
x25412:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1471 -> unsignedIntPtr unsignedIntPtr 0
x25415:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1472 unsignedLongValue
x25418:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1471 -> unsignedIntPtr £temporary1472
x25422:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x25424:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x25426:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1474 arg_list 2
x25430:	mov si, [bp + 8]	; 3: 139 118 8
x25433:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1475 £temporary1474

scanFormat$219:	; Deref £temporary1476 -> £temporary1475 £temporary1475 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1476 -> £temporary1475
x25436:	mov ax, [si]	; 2: 139 4
x25438:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1477 -> unsignedLongPtr unsignedLongPtr 0
x25441:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1477 -> unsignedLongPtr unsignedLongValue
x25444:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25448:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x25451:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 327
x25456:	jmp scanFormat$327	; 3: 233 116 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x25459:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 129 99
x25464:	mov [bp + 59], bp	; 3: 137 110 59
x25467:	add bp, 57	; 3: 131 197 57
x25470:	jmp scanLongDouble	; 3: 233 24 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1479

scanFormat$229:	; PopFloat longDoubleValue
x25473:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x25476:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25480:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x25482:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25486:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x25488:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1483 arg_list 2
x25492:	mov si, [bp + 8]	; 3: 139 118 8
x25495:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1484 £temporary1483

scanFormat$235:	; Deref £temporary1485 -> £temporary1484 £temporary1484 0

scanFormat$236:	; Assign doublePtr £temporary1485 -> £temporary1484
x25498:	mov ax, [si]	; 2: 139 4
x25500:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1486 -> doublePtr doublePtr 0
x25503:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x25506:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1486 -> doublePtr
x25509:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x25511:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x25513:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x25517:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x25519:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1489 arg_list 2
x25523:	mov si, [bp + 8]	; 3: 139 118 8
x25526:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1490 £temporary1489

scanFormat$245:	; Deref £temporary1491 -> £temporary1490 £temporary1490 0

scanFormat$246:	; Assign longDoublePtr £temporary1491 -> £temporary1490
x25529:	mov ax, [si]	; 2: 139 4
x25531:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1492 -> longDoublePtr longDoublePtr 0
x25534:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x25537:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1492 -> longDoublePtr
x25540:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x25542:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x25544:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1494 arg_list 2
x25548:	mov si, [bp + 8]	; 3: 139 118 8
x25551:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1495 £temporary1494

scanFormat$254:	; Deref £temporary1496 -> £temporary1495 £temporary1495 0

scanFormat$255:	; Assign floatPtr £temporary1496 -> £temporary1495
x25554:	mov ax, [si]	; 2: 139 4
x25556:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1497 -> floatPtr floatPtr 0
x25559:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x25562:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1497 -> floatPtr
x25565:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x25567:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 327
x25572:	jmp scanFormat$327	; 3: 233 0 1

scanFormat$261:	; Assign not 0
x25575:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x25580:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1503 format index
x25583:	mov si, [bp + 6]	; 3: 139 118 6
x25586:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1502 -> £temporary1503 £temporary1503 0

scanFormat$265:	; NotEqual 268 £temporary1502 -> £temporary1503 94
x25589:	cmp byte [si], 94	; 3: 128 60 94
x25592:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x25594:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x25599:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x25602:	mov ax, [bp + 31]	; 3: 139 70 31
x25605:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1507 format index
x25608:	mov si, [bp + 6]	; 3: 139 118 6
x25611:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1506 -> £temporary1507 £temporary1507 0

scanFormat$271:	; Equal 274 £temporary1506 -> £temporary1507 93
x25614:	cmp byte [si], 93	; 3: 128 60 93
x25617:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x25619:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x25622:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinarySubtract size index startIndex
x25624:	mov ax, [bp + 31]	; 3: 139 70 31
x25627:	sub ax, [bp + 59]	; 3: 43 70 59
x25630:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$275:	; BinaryAdd £temporary1512 format index
x25633:	mov si, [bp + 6]	; 3: 139 118 6
x25636:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$276:	; Deref £temporary1511 -> £temporary1512 £temporary1512 0

scanFormat$277:	; Assign c £temporary1511 -> £temporary1512
x25639:	mov al, [si]	; 2: 138 4
x25641:	mov [bp + 63], al	; 3: 136 70 63

scanFormat$278:	; BinaryAdd £temporary1514 format index
x25644:	mov si, [bp + 6]	; 3: 139 118 6
x25647:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$279:	; Deref £temporary1513 -> £temporary1514 £temporary1514 0

scanFormat$280:	; Assign £temporary1513 -> £temporary1514 0
x25650:	mov byte [si], 0	; 3: 198 4 0

scanFormat$281:	; NotEqual 298 star 0
x25653:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25657:	jne scanFormat$298	; 2: 117 58

scanFormat$282:	; BinaryAdd arg_list arg_list 2
x25659:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$283:	; BinarySubtract £temporary1518 arg_list 2
x25663:	mov si, [bp + 8]	; 3: 139 118 8
x25666:	sub si, 2	; 3: 131 238 2

scanFormat$284:	; IntegralToIntegral £temporary1519 £temporary1518

scanFormat$285:	; Deref £temporary1520 -> £temporary1519 £temporary1519 0

scanFormat$286:	; Assign string £temporary1520 -> £temporary1519
x25669:	mov ax, [si]	; 2: 139 4
x25671:	mov [bp + 64], ax	; 3: 137 70 64

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$288:	; Parameter 66 string 6
x25674:	mov ax, [bp + 64]	; 3: 139 70 64
x25677:	mov [bp + 72], ax	; 3: 137 70 72

scanFormat$289:	; BinaryAdd £temporary1522 format startIndex
x25680:	mov si, [bp + 6]	; 3: 139 118 6
x25683:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$290:	; Deref £temporary1521 -> £temporary1522 £temporary1522 0

scanFormat$291:	; address £temporary1523 £temporary1521 -> £temporary1522

scanFormat$292:	; Parameter 66 £temporary1523 8
x25686:	mov [bp + 74], si	; 3: 137 118 74

scanFormat$293:	; Parameter 66 size 10
x25689:	mov ax, [bp + 61]	; 3: 139 70 61
x25692:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$294:	; Parameter 66 not 12
x25695:	mov ax, [bp + 57]	; 3: 139 70 57
x25698:	mov [bp + 78], ax	; 3: 137 70 78

scanFormat$295:	; Call 66 scanPattern 0
x25701:	mov word [bp + 66], scanFormat$296	; 5: 199 70 66 115 100
x25706:	mov [bp + 68], bp	; 3: 137 110 68
x25709:	add bp, 66	; 3: 131 197 66
x25712:	jmp scanPattern	; 3: 233 97 11

scanFormat$296:	; PostCall 66

scanFormat$297:	; Goto 308
x25715:	jmp scanFormat$308	; 2: 235 40

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$299:	; Parameter 64 0 6
x25717:	mov word [bp + 70], 0	; 5: 199 70 70 0 0

scanFormat$300:	; BinaryAdd £temporary1526 format startIndex
x25722:	mov si, [bp + 6]	; 3: 139 118 6
x25725:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$301:	; Deref £temporary1525 -> £temporary1526 £temporary1526 0

scanFormat$302:	; address £temporary1527 £temporary1525 -> £temporary1526

scanFormat$303:	; Parameter 64 £temporary1527 8
x25728:	mov [bp + 72], si	; 3: 137 118 72

scanFormat$304:	; Parameter 64 size 10
x25731:	mov ax, [bp + 61]	; 3: 139 70 61
x25734:	mov [bp + 74], ax	; 3: 137 70 74

scanFormat$305:	; Parameter 64 not 12
x25737:	mov ax, [bp + 57]	; 3: 139 70 57
x25740:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$306:	; Call 64 scanPattern 0
x25743:	mov word [bp + 64], scanFormat$307	; 5: 199 70 64 157 100
x25748:	mov [bp + 66], bp	; 3: 137 110 66
x25751:	add bp, 64	; 3: 131 197 64
x25754:	jmp scanPattern	; 3: 233 55 11

scanFormat$307:	; PostCall 64

scanFormat$308:	; BinaryAdd £temporary1530 format index
x25757:	mov si, [bp + 6]	; 3: 139 118 6
x25760:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$309:	; Deref £temporary1529 -> £temporary1530 £temporary1530 0

scanFormat$310:	; Assign £temporary1529 -> £temporary1530 c
x25763:	mov al, [bp + 63]	; 3: 138 70 63
x25766:	mov [si], al	; 2: 136 4

scanFormat$311:	; Goto 327
x25768:	jmp scanFormat$327	; 2: 235 61

scanFormat$312:	; BinaryAdd arg_list arg_list 2
x25770:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$313:	; BinarySubtract £temporary1532 arg_list 2
x25774:	mov si, [bp + 8]	; 3: 139 118 8
x25777:	sub si, 2	; 3: 131 238 2

scanFormat$314:	; IntegralToIntegral £temporary1533 £temporary1532

scanFormat$315:	; Deref £temporary1534 -> £temporary1533 £temporary1533 0

scanFormat$316:	; Assign charsPtr £temporary1534 -> £temporary1533
x25780:	mov ax, [si]	; 2: 139 4
x25782:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$317:	; Deref £temporary1535 -> charsPtr charsPtr 0
x25785:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$318:	; Assign £temporary1535 -> charsPtr g_inChars
x25788:	mov ax, [g_inChars]	; 3: 161 254 100
x25791:	mov [si], ax	; 2: 137 4

scanFormat$319:	; Assign percent 0
x25793:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$320:	; Goto 327
x25798:	jmp scanFormat$327	; 2: 235 31

scanFormat$321:	; NotEqual 327 c 37
x25800:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x25804:	jne scanFormat$327	; 2: 117 25

scanFormat$322:	; Assign percent 1
x25806:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$323:	; Assign shortInt 0
x25811:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$324:	; Assign longIntOrDouble 0
x25816:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$325:	; Assign longDouble 0
x25821:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$326:	; Assign star 0
x25826:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$327:	; Increment index
x25831:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$328:	; Goto 8
x25834:	jmp scanFormat$8	; 3: 233 26 251

scanFormat$329:	; SetReturnValue g_inCount
x25837:	mov bx, [g_inCount]	; 4: 139 30 252 100

scanFormat$330:	; Return g_inCount
x25841:	mov ax, [bp]	; 3: 139 70 0
x25844:	mov di, [bp + 4]	; 3: 139 126 4
x25847:	mov bp, [bp + 2]	; 3: 139 110 2
x25850:	jmp ax	; 2: 255 224

scanFormat$331:	; FunctionEnd scanFormat

g_inCount:
x25852:	db 0, 0	; 2: 0 0

g_inChars:
x25854:	db 0, 0	; 2: 0 0

scanChar:	; Assign c 0
x25856:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x25860:	mov ax, [g_inStatus]	; 3: 161 217 95
x25863:	cmp ax, 0	; 3: 131 248 0
x25866:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x25868:	cmp ax, 1	; 3: 131 248 1
x25871:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x25873:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1028 g_inDevice
x25875:	mov ax, [g_inDevice]	; 3: 161 219 95

scanChar$6:	; Assign stream £temporary1028
x25878:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1029 -> stream stream 2
x25881:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1029 -> stream
x25884:	mov ax, [si + 2]	; 3: 139 68 2
x25887:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x25890:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x25892:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x25895:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1034 c
x25898:	mov dx, bp	; 2: 137 234
x25900:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1034

scanChar$14:	; Interrupt 33
x25903:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x25905:	inc word [g_inChars]	; 4: 255 6 254 100

scanChar$16:	; SetReturnValue c
x25909:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x25912:	mov ax, [bp]	; 3: 139 70 0
x25915:	mov di, [bp + 4]	; 3: 139 126 4
x25918:	mov bp, [bp + 2]	; 3: 139 110 2
x25921:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1036 g_inDevice
x25923:	mov ax, [g_inDevice]	; 3: 161 219 95

scanChar$19:	; Assign inString £temporary1036
x25926:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1037 g_inChars
x25929:	mov ax, [g_inChars]	; 3: 161 254 100

scanChar$21:	; Increment g_inChars
x25932:	inc word [g_inChars]	; 4: 255 6 254 100

scanChar$22:	; BinaryAdd £temporary1040 inString £temporary1037
x25936:	mov si, [bp + 11]	; 3: 139 118 11
x25939:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1039 -> £temporary1040 £temporary1040 0

scanChar$24:	; SetReturnValue £temporary1039 -> £temporary1040
x25941:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1039 -> £temporary1040
x25943:	mov ax, [bp]	; 3: 139 70 0
x25946:	mov di, [bp + 4]	; 3: 139 126 4
x25949:	mov bp, [bp + 2]	; 3: 139 110 2
x25952:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x25954:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x25956:	mov ax, [bp]	; 3: 139 70 0
x25959:	mov di, [bp + 4]	; 3: 139 126 4
x25962:	mov bp, [bp + 2]	; 3: 139 110 2
x25965:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x25967:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x25972:	mov word [bp + 12], scanString$3	; 5: 199 70 12 130 101
x25977:	mov [bp + 14], bp	; 3: 137 110 14
x25980:	add bp, 12	; 3: 131 197 12
x25983:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1106

scanString$5:	; Assign input £temporary1106
x25986:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x25989:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1107 input
x25994:	mov al, [bp + 12]	; 3: 138 70 12
x25997:	and ax, 255	; 3: 37 255 0
x26000:	cmp al, 0	; 2: 60 0
x26002:	jge scanString$9	; 2: 125 4
x26004:	neg al	; 2: 246 216
x26006:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1107 6
x26008:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x26011:	mov word [bp + 15], scanString$11	; 5: 199 70 15 169 101
x26016:	mov [bp + 17], bp	; 3: 137 110 17
x26019:	add bp, 15	; 3: 131 197 15
x26022:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1108

scanString$13:	; Equal 20 £temporary1108 0
x26025:	cmp bx, 0	; 3: 131 251 0
x26028:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x26030:	mov word [bp + 15], scanString$16	; 5: 199 70 15 188 101
x26035:	mov [bp + 17], bp	; 3: 137 110 17
x26038:	add bp, 15	; 3: 131 197 15
x26041:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1109

scanString$18:	; Assign input £temporary1109
x26044:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x26047:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x26049:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26053:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x26057:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26061:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1113 input
x26063:	mov al, [bp + 12]	; 3: 138 70 12
x26066:	and ax, 255	; 3: 37 255 0
x26069:	cmp al, 0	; 2: 60 0
x26071:	jge scanString$24	; 2: 125 4
x26073:	neg al	; 2: 246 216
x26075:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1113 6
x26077:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x26080:	mov word [bp + 15], scanString$26	; 5: 199 70 15 238 101
x26085:	mov [bp + 17], bp	; 3: 137 110 17
x26088:	add bp, 15	; 3: 131 197 15
x26091:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1114

scanString$28:	; NotEqual 45 £temporary1114 0
x26094:	cmp bx, 0	; 3: 131 251 0
x26097:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1117 input
x26099:	mov al, [bp + 12]	; 3: 138 70 12
x26102:	and ax, 255	; 3: 37 255 0
x26105:	cmp al, 0	; 2: 60 0
x26107:	jge scanString$30	; 2: 125 4
x26109:	neg al	; 2: 246 216
x26111:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1117 -1
x26113:	cmp ax, -1	; 3: 131 248 255
x26116:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x26118:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26122:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1122 index
x26124:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x26127:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1125 string £temporary1122
x26130:	mov si, [bp + 6]	; 3: 139 118 6
x26133:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1124 -> £temporary1125 £temporary1125 0

scanString$36:	; Assign £temporary1124 -> £temporary1125 input
x26135:	mov al, [bp + 12]	; 3: 138 70 12
x26138:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x26140:	mov word [bp + 15], scanString$39	; 5: 199 70 15 42 102
x26145:	mov [bp + 17], bp	; 3: 137 110 17
x26148:	add bp, 15	; 3: 131 197 15
x26151:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1126

scanString$41:	; Assign input £temporary1126
x26154:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x26157:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x26162:	inc word [g_inChars]	; 4: 255 6 254 100

scanString$44:	; Goto 22
x26166:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1129 string index
x26168:	mov si, [bp + 6]	; 3: 139 118 6
x26171:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1128 -> £temporary1129 £temporary1129 0

scanString$47:	; Assign £temporary1128 -> £temporary1129 0
x26174:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x26177:	inc word [g_inChars]	; 4: 255 6 254 100

scanString$49:	; Goto 126
x26181:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1131 precision
x26184:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x26187:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1131 0
x26190:	cmp ax, 0	; 3: 131 248 0
x26193:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1134 input
x26195:	mov al, [bp + 12]	; 3: 138 70 12
x26198:	and ax, 255	; 3: 37 255 0
x26201:	cmp al, 0	; 2: 60 0
x26203:	jge scanString$55	; 2: 125 4
x26205:	neg al	; 2: 246 216
x26207:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1134 6
x26209:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x26212:	mov word [bp + 15], scanString$57	; 5: 199 70 15 114 102
x26217:	mov [bp + 17], bp	; 3: 137 110 17
x26220:	add bp, 15	; 3: 131 197 15
x26223:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1135

scanString$59:	; NotEqual 76 £temporary1135 0
x26226:	cmp bx, 0	; 3: 131 251 0
x26229:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1138 input
x26231:	mov al, [bp + 12]	; 3: 138 70 12
x26234:	and ax, 255	; 3: 37 255 0
x26237:	cmp al, 0	; 2: 60 0
x26239:	jge scanString$61	; 2: 125 4
x26241:	neg al	; 2: 246 216
x26243:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1138 -1
x26245:	cmp ax, -1	; 3: 131 248 255
x26248:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x26250:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26254:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1144 index
x26256:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x26259:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1147 string £temporary1144
x26262:	mov si, [bp + 6]	; 3: 139 118 6
x26265:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1146 -> £temporary1147 £temporary1147 0

scanString$67:	; Assign £temporary1146 -> £temporary1147 input
x26267:	mov al, [bp + 12]	; 3: 138 70 12
x26270:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x26272:	mov word [bp + 15], scanString$70	; 5: 199 70 15 174 102
x26277:	mov [bp + 17], bp	; 3: 137 110 17
x26280:	add bp, 15	; 3: 131 197 15
x26283:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1148

scanString$72:	; Assign input £temporary1148
x26286:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x26289:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x26294:	inc word [g_inChars]	; 4: 255 6 254 100

scanString$75:	; Goto 50
x26298:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x26300:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26304:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1152 string index
x26308:	mov si, [bp + 6]	; 3: 139 118 6
x26311:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1151 -> £temporary1152 £temporary1152 0

scanString$79:	; Assign £temporary1151 -> £temporary1152 0
x26314:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x26317:	inc word [g_inChars]	; 4: 255 6 254 100

scanString$81:	; Goto 126
x26321:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x26324:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26328:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1155 input
x26330:	mov al, [bp + 12]	; 3: 138 70 12
x26333:	and ax, 255	; 3: 37 255 0
x26336:	cmp al, 0	; 2: 60 0
x26338:	jge scanString$85	; 2: 125 4
x26340:	neg al	; 2: 246 216
x26342:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1155 6
x26344:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x26347:	mov word [bp + 15], scanString$87	; 5: 199 70 15 249 102
x26352:	mov [bp + 17], bp	; 3: 137 110 17
x26355:	add bp, 15	; 3: 131 197 15
x26358:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1156

scanString$89:	; NotEqual 101 £temporary1156 0
x26361:	cmp bx, 0	; 3: 131 251 0
x26364:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1159 input
x26366:	mov al, [bp + 12]	; 3: 138 70 12
x26369:	and ax, 255	; 3: 37 255 0
x26372:	cmp al, 0	; 2: 60 0
x26374:	jge scanString$91	; 2: 125 4
x26376:	neg al	; 2: 246 216
x26378:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1159 -1
x26380:	cmp ax, -1	; 3: 131 248 255
x26383:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x26385:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26389:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x26391:	mov word [bp + 15], scanString$95	; 5: 199 70 15 37 103
x26396:	mov [bp + 17], bp	; 3: 137 110 17
x26399:	add bp, 15	; 3: 131 197 15
x26402:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1164

scanString$97:	; Assign input £temporary1164
x26405:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x26408:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x26413:	inc word [g_inChars]	; 4: 255 6 254 100

scanString$100:	; Goto 83
x26417:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x26419:	inc word [g_inChars]	; 4: 255 6 254 100

scanString$102:	; Goto 126
x26423:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1167 precision
x26425:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x26428:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1167 0
x26431:	cmp ax, 0	; 3: 131 248 0
x26434:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1170 input
x26436:	mov al, [bp + 12]	; 3: 138 70 12
x26439:	and ax, 255	; 3: 37 255 0
x26442:	cmp al, 0	; 2: 60 0
x26444:	jge scanString$108	; 2: 125 4
x26446:	neg al	; 2: 246 216
x26448:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1170 6
x26450:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x26453:	mov word [bp + 15], scanString$110	; 5: 199 70 15 99 103
x26458:	mov [bp + 17], bp	; 3: 137 110 17
x26461:	add bp, 15	; 3: 131 197 15
x26464:	nop	; 1: 144
x26465:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1171

scanString$112:	; NotEqual 124 £temporary1171 0
x26467:	cmp bx, 0	; 3: 131 251 0
x26470:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1174 input
x26472:	mov al, [bp + 12]	; 3: 138 70 12
x26475:	and ax, 255	; 3: 37 255 0
x26478:	cmp al, 0	; 2: 60 0
x26480:	jge scanString$114	; 2: 125 4
x26482:	neg al	; 2: 246 216
x26484:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1174 -1
x26486:	cmp ax, -1	; 3: 131 248 255
x26489:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x26491:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26495:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x26497:	mov word [bp + 15], scanString$118	; 5: 199 70 15 143 103
x26502:	mov [bp + 17], bp	; 3: 137 110 17
x26505:	add bp, 15	; 3: 131 197 15
x26508:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1180

scanString$120:	; Assign input £temporary1180
x26511:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x26514:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x26519:	inc word [g_inChars]	; 4: 255 6 254 100

scanString$123:	; Goto 103
x26523:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x26525:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26529:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x26531:	inc word [g_inChars]	; 4: 255 6 254 100

scanString$126:	; Equal 128 found 0
x26535:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x26539:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x26541:	inc word [g_inCount]	; 4: 255 6 252 100

scanString$128:	; Return 0
x26545:	mov ax, [bp]	; 3: 139 70 0
x26548:	mov di, [bp + 4]	; 3: 139 126 4
x26551:	mov bp, [bp + 2]	; 3: 139 110 2
x26554:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x26556:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x26560:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x26562:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x26566:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x26568:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x26572:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x26574:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x26578:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x26580:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x26584:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x26586:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x26590:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary251 1
x26592:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x26595:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary251 0
x26597:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary251

isspace$10:	; Return £temporary251
x26600:	mov ax, [bp]	; 3: 139 70 0
x26603:	mov di, [bp + 4]	; 3: 139 126 4
x26606:	mov bp, [bp + 2]	; 3: 139 110 2
x26609:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x26611:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x26619:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x26624:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x26629:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 19 104
x26634:	mov [bp + 18], bp	; 3: 137 110 18
x26637:	add bp, 16	; 3: 131 197 16
x26640:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1243

scanLongInt$7:	; Assign input £temporary1243
x26643:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1244 input
x26646:	mov al, [bp + 16]	; 3: 138 70 16
x26649:	and ax, 255	; 3: 37 255 0
x26652:	cmp al, 0	; 2: 60 0
x26654:	jge scanLongInt$10	; 2: 125 4
x26656:	neg al	; 2: 246 216
x26658:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1244 6
x26660:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x26663:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 53 104
x26668:	mov [bp + 19], bp	; 3: 137 110 19
x26671:	add bp, 17	; 3: 131 197 17
x26674:	nop	; 1: 144
x26675:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1245

scanLongInt$14:	; Equal 21 £temporary1245 0
x26677:	cmp bx, 0	; 3: 131 251 0
x26680:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x26682:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 72 104
x26687:	mov [bp + 19], bp	; 3: 137 110 19
x26690:	add bp, 17	; 3: 131 197 17
x26693:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1246

scanLongInt$19:	; Assign input £temporary1246
x26696:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x26699:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x26701:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x26705:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x26707:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 97 104
x26712:	mov [bp + 19], bp	; 3: 137 110 19
x26715:	add bp, 17	; 3: 131 197 17
x26718:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1249

scanLongInt$26:	; Assign input £temporary1249
x26721:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x26724:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x26726:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x26730:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x26732:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x26737:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 127 104
x26742:	mov [bp + 19], bp	; 3: 137 110 19
x26745:	add bp, 17	; 3: 131 197 17
x26748:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1251

scanLongInt$34:	; Assign input £temporary1251
x26751:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x26754:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26758:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x26760:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x26764:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x26766:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 156 104
x26771:	mov [bp + 19], bp	; 3: 137 110 19
x26774:	add bp, 17	; 3: 131 197 17
x26777:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1254

scanLongInt$41:	; Assign input £temporary1254
x26780:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1255 input
x26783:	mov al, [bp + 16]	; 3: 138 70 16
x26786:	and ax, 255	; 3: 37 255 0
x26789:	cmp al, 0	; 2: 60 0
x26791:	jge scanLongInt$44	; 2: 125 4
x26793:	neg al	; 2: 246 216
x26795:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1255 6
x26797:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x26800:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 190 104
x26805:	mov [bp + 19], bp	; 3: 137 110 19
x26808:	add bp, 17	; 3: 131 197 17
x26811:	jmp tolower	; 3: 233 97 188

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1256

scanLongInt$48:	; NotEqual 56 £temporary1256 120
x26814:	cmp bx, 120	; 3: 131 251 120
x26817:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x26819:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x26824:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 214 104
x26829:	mov [bp + 19], bp	; 3: 137 110 19
x26832:	add bp, 17	; 3: 131 197 17
x26835:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1258

scanLongInt$54:	; Assign input £temporary1258
x26838:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x26841:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x26843:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x26848:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x26850:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x26855:	mov al, [bp + 16]	; 3: 138 70 16
x26858:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x26861:	mov ax, [bp + 6]	; 3: 139 70 6
x26864:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x26867:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 1 105
x26872:	mov [bp + 19], bp	; 3: 137 110 19
x26875:	add bp, 17	; 3: 131 197 17
x26878:	jmp @2758$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1259

scanLongInt$65:	; Equal 82 £temporary1259 0
x26881:	cmp bx, 0	; 3: 131 251 0
x26884:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1260 base
x26886:	mov bx, [bp + 6]	; 3: 139 94 6
x26889:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x26896:	cmp bx, 0	; 3: 131 251 0
x26899:	jge scanLongInt$67	; 2: 125 5
x26901:	neg bx	; 2: 247 219
x26903:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1260
x26906:	mov eax, [bp + 8]	; 4: 102 139 70 8
x26910:	xor edx, edx	; 3: 102 49 210
x26913:	imul ebx	; 3: 102 247 235
x26916:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x26920:	mov al, [bp + 16]	; 3: 138 70 16
x26923:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x26926:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 60 105
x26931:	mov [bp + 19], bp	; 3: 137 110 19
x26934:	add bp, 17	; 3: 131 197 17
x26937:	jmp @2822$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1262

scanLongInt$73:	; IntegralToIntegral £temporary1263 £temporary1262
x26940:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x26947:	cmp bx, 0	; 3: 131 251 0
x26950:	jge scanLongInt$74	; 2: 125 5
x26952:	neg bx	; 2: 247 219
x26954:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1263
x26957:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x26961:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 95 105
x26966:	mov [bp + 19], bp	; 3: 137 110 19
x26969:	add bp, 17	; 3: 131 197 17
x26972:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1265

scanLongInt$79:	; Assign input £temporary1265
x26975:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x26978:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x26983:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x26986:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x26990:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1267 longValue
x26992:	mov eax, [bp + 8]	; 4: 102 139 70 8
x26996:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1267
x26999:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x27003:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x27007:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x27009:	inc word [g_inCount]	; 4: 255 6 252 100

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x27013:	mov al, [bp + 16]	; 3: 138 70 16
x27016:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x27019:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 153 105
x27024:	mov [bp + 19], bp	; 3: 137 110 19
x27027:	add bp, 17	; 3: 131 197 17
x27030:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x27033:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x27037:	mov ax, [bp]	; 3: 139 70 0
x27040:	mov di, [bp + 4]	; 3: 139 126 4
x27043:	mov bp, [bp + 2]	; 3: 139 110 2
x27046:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@2758$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$1:	; IntegralToIntegral £temporary1191 c
x27048:	mov al, [bp + 6]	; 3: 138 70 6
x27051:	and ax, 255	; 3: 37 255 0
x27054:	cmp al, 0	; 2: 60 0
x27056:	jge @2758$isDigitInBase$2	; 2: 125 4
x27058:	neg al	; 2: 246 216
x27060:	neg ax	; 2: 247 216

@2758$isDigitInBase$2:	; Parameter 9 £temporary1191 6
x27062:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$3:	; Call 9 isdigit 0
x27065:	mov word [bp + 9], @2758$isDigitInBase$4	; 5: 199 70 9 199 105
x27070:	mov [bp + 11], bp	; 3: 137 110 11
x27073:	add bp, 9	; 3: 131 197 9
x27076:	jmp isdigit	; 3: 233 165 193

@2758$isDigitInBase$4:	; PostCall 9

@2758$isDigitInBase$5:	; GetReturnValue £temporary1192

@2758$isDigitInBase$6:	; Equal 17 £temporary1192 0
x27079:	cmp bx, 0	; 3: 131 251 0
x27082:	je @2758$isDigitInBase$17	; 2: 116 52

@2758$isDigitInBase$7:	; BinarySubtract £temporary1193 c 48
x27084:	mov al, [bp + 6]	; 3: 138 70 6
x27087:	sub al, 48	; 2: 44 48

@2758$isDigitInBase$8:	; IntegralToIntegral £temporary1194 £temporary1193
x27089:	and ax, 255	; 3: 37 255 0
x27092:	cmp al, 0	; 2: 60 0
x27094:	jge @2758$isDigitInBase$9	; 2: 125 4
x27096:	neg al	; 2: 246 216
x27098:	neg ax	; 2: 247 216

@2758$isDigitInBase$9:	; Assign value £temporary1194
x27100:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$10:	; SignedLessThan 14 value 0
x27103:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27107:	jl @2758$isDigitInBase$14	; 2: 124 13

@2758$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x27109:	mov ax, [bp + 7]	; 3: 139 70 7
x27112:	cmp [bp + 9], ax	; 3: 57 70 9
x27115:	jge @2758$isDigitInBase$14	; 2: 125 5

@2758$isDigitInBase$12:	; Assign £temporary1198 1
x27117:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$13:	; Goto 15
x27120:	jmp @2758$isDigitInBase$15	; 2: 235 3

@2758$isDigitInBase$14:	; Assign £temporary1198 0
x27122:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$15:	; SetReturnValue £temporary1198

@2758$isDigitInBase$16:	; Return £temporary1198
x27125:	mov ax, [bp]	; 3: 139 70 0
x27128:	mov di, [bp + 4]	; 3: 139 126 4
x27131:	mov bp, [bp + 2]	; 3: 139 110 2
x27134:	jmp ax	; 2: 255 224

@2758$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$18:	; IntegralToIntegral £temporary1199 c
x27136:	mov al, [bp + 6]	; 3: 138 70 6
x27139:	and ax, 255	; 3: 37 255 0
x27142:	cmp al, 0	; 2: 60 0
x27144:	jge @2758$isDigitInBase$19	; 2: 125 4
x27146:	neg al	; 2: 246 216
x27148:	neg ax	; 2: 247 216

@2758$isDigitInBase$19:	; Parameter 9 £temporary1199 6
x27150:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$20:	; Call 9 islower 0
x27153:	mov word [bp + 9], @2758$isDigitInBase$21	; 5: 199 70 9 31 106
x27158:	mov [bp + 11], bp	; 3: 137 110 11
x27161:	add bp, 9	; 3: 131 197 9
x27164:	jmp islower	; 3: 233 165 0

@2758$isDigitInBase$21:	; PostCall 9

@2758$isDigitInBase$22:	; GetReturnValue £temporary1200

@2758$isDigitInBase$23:	; Equal 34 £temporary1200 0
x27167:	cmp bx, 0	; 3: 131 251 0
x27170:	je @2758$isDigitInBase$34	; 2: 116 55

@2758$isDigitInBase$24:	; BinarySubtract £temporary1201 c 97
x27172:	mov al, [bp + 6]	; 3: 138 70 6
x27175:	sub al, 97	; 2: 44 97

@2758$isDigitInBase$25:	; IntegralToIntegral £temporary1202 £temporary1201
x27177:	and ax, 255	; 3: 37 255 0
x27180:	cmp al, 0	; 2: 60 0
x27182:	jge @2758$isDigitInBase$26	; 2: 125 4
x27184:	neg al	; 2: 246 216
x27186:	neg ax	; 2: 247 216

@2758$isDigitInBase$26:	; BinaryAdd value £temporary1202 10
x27188:	add ax, 10	; 3: 131 192 10
x27191:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$27:	; SignedLessThan 31 value 0
x27194:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27198:	jl @2758$isDigitInBase$31	; 2: 124 13

@2758$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x27200:	mov ax, [bp + 7]	; 3: 139 70 7
x27203:	cmp [bp + 9], ax	; 3: 57 70 9
x27206:	jge @2758$isDigitInBase$31	; 2: 125 5

@2758$isDigitInBase$29:	; Assign £temporary1207 1
x27208:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$30:	; Goto 32
x27211:	jmp @2758$isDigitInBase$32	; 2: 235 3

@2758$isDigitInBase$31:	; Assign £temporary1207 0
x27213:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$32:	; SetReturnValue £temporary1207

@2758$isDigitInBase$33:	; Return £temporary1207
x27216:	mov ax, [bp]	; 3: 139 70 0
x27219:	mov di, [bp + 4]	; 3: 139 126 4
x27222:	mov bp, [bp + 2]	; 3: 139 110 2
x27225:	jmp ax	; 2: 255 224

@2758$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$35:	; IntegralToIntegral £temporary1208 c
x27227:	mov al, [bp + 6]	; 3: 138 70 6
x27230:	and ax, 255	; 3: 37 255 0
x27233:	cmp al, 0	; 2: 60 0
x27235:	jge @2758$isDigitInBase$36	; 2: 125 4
x27237:	neg al	; 2: 246 216
x27239:	neg ax	; 2: 247 216

@2758$isDigitInBase$36:	; Parameter 9 £temporary1208 6
x27241:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$37:	; Call 9 isupper 0
x27244:	mov word [bp + 9], @2758$isDigitInBase$38	; 5: 199 70 9 122 106
x27249:	mov [bp + 11], bp	; 3: 137 110 11
x27252:	add bp, 9	; 3: 131 197 9
x27255:	jmp isupper	; 3: 233 147 179

@2758$isDigitInBase$38:	; PostCall 9

@2758$isDigitInBase$39:	; GetReturnValue £temporary1209

@2758$isDigitInBase$40:	; Equal 51 £temporary1209 0
x27258:	cmp bx, 0	; 3: 131 251 0
x27261:	je @2758$isDigitInBase$51	; 2: 116 55

@2758$isDigitInBase$41:	; BinarySubtract £temporary1210 c 65
x27263:	mov al, [bp + 6]	; 3: 138 70 6
x27266:	sub al, 65	; 2: 44 65

@2758$isDigitInBase$42:	; IntegralToIntegral £temporary1211 £temporary1210
x27268:	and ax, 255	; 3: 37 255 0
x27271:	cmp al, 0	; 2: 60 0
x27273:	jge @2758$isDigitInBase$43	; 2: 125 4
x27275:	neg al	; 2: 246 216
x27277:	neg ax	; 2: 247 216

@2758$isDigitInBase$43:	; BinaryAdd value £temporary1211 10
x27279:	add ax, 10	; 3: 131 192 10
x27282:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$44:	; SignedLessThan 48 value 0
x27285:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27289:	jl @2758$isDigitInBase$48	; 2: 124 13

@2758$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x27291:	mov ax, [bp + 7]	; 3: 139 70 7
x27294:	cmp [bp + 9], ax	; 3: 57 70 9
x27297:	jge @2758$isDigitInBase$48	; 2: 125 5

@2758$isDigitInBase$46:	; Assign £temporary1216 1
x27299:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$47:	; Goto 49
x27302:	jmp @2758$isDigitInBase$49	; 2: 235 3

@2758$isDigitInBase$48:	; Assign £temporary1216 0
x27304:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$49:	; SetReturnValue £temporary1216

@2758$isDigitInBase$50:	; Return £temporary1216
x27307:	mov ax, [bp]	; 3: 139 70 0
x27310:	mov di, [bp + 4]	; 3: 139 126 4
x27313:	mov bp, [bp + 2]	; 3: 139 110 2
x27316:	jmp ax	; 2: 255 224

@2758$isDigitInBase$51:	; SetReturnValue 0
x27318:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$52:	; Return 0
x27321:	mov ax, [bp]	; 3: 139 70 0
x27324:	mov di, [bp + 4]	; 3: 139 126 4
x27327:	mov bp, [bp + 2]	; 3: 139 110 2
x27330:	jmp ax	; 2: 255 224

@2758$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x27332:	mov word [bp + 8], islower$2	; 5: 199 70 8 210 106
x27337:	mov [bp + 10], bp	; 3: 137 110 10
x27340:	add bp, 8	; 3: 131 197 8
x27343:	jmp localeconv	; 3: 233 166 179

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary160

islower$4:	; Assign localeConvPtr £temporary160
x27346:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x27349:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x27353:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary162 -> localeConvPtr localeConvPtr 12
x27355:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary162 -> localeConvPtr 6
x27358:	mov ax, [si + 12]	; 3: 139 68 12
x27361:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x27364:	mov ax, [bp + 6]	; 3: 139 70 6
x27367:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x27370:	mov word [bp + 10], islower$11	; 5: 199 70 10 248 106
x27375:	mov [bp + 12], bp	; 3: 137 110 12
x27378:	add bp, 10	; 3: 131 197 10
x27381:	jmp strchr	; 3: 233 198 182

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary163

islower$13:	; Equal 16 £temporary163 0
x27384:	cmp bx, 0	; 3: 131 251 0
x27387:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary165 1
x27389:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x27392:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary165 0
x27394:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary165

islower$18:	; Return £temporary165
x27397:	mov ax, [bp]	; 3: 139 70 0
x27400:	mov di, [bp + 4]	; 3: 139 126 4
x27403:	mov bp, [bp + 2]	; 3: 139 110 2
x27406:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x27408:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x27412:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x27414:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x27418:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary169 1
x27420:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x27423:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary169 0
x27425:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary169

islower$25:	; Return £temporary169
x27428:	mov ax, [bp]	; 3: 139 70 0
x27431:	mov di, [bp + 4]	; 3: 139 126 4
x27434:	mov bp, [bp + 2]	; 3: 139 110 2
x27437:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@2822$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$1:	; IntegralToIntegral £temporary1223 c
x27439:	mov al, [bp + 6]	; 3: 138 70 6
x27442:	and ax, 255	; 3: 37 255 0
x27445:	cmp al, 0	; 2: 60 0
x27447:	jge @2822$digitToValue$2	; 2: 125 4
x27449:	neg al	; 2: 246 216
x27451:	neg ax	; 2: 247 216

@2822$digitToValue$2:	; Parameter 7 £temporary1223 6
x27453:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$3:	; Call 7 isdigit 0
x27456:	mov word [bp + 7], @2822$digitToValue$4	; 5: 199 70 7 78 107
x27461:	mov [bp + 9], bp	; 3: 137 110 9
x27464:	add bp, 7	; 3: 131 197 7
x27467:	jmp isdigit	; 3: 233 30 192

@2822$digitToValue$4:	; PostCall 7

@2822$digitToValue$5:	; GetReturnValue £temporary1224

@2822$digitToValue$6:	; Equal 11 £temporary1224 0
x27470:	cmp bx, 0	; 3: 131 251 0
x27473:	je @2822$digitToValue$11	; 2: 116 30

@2822$digitToValue$7:	; BinarySubtract £temporary1225 c 48
x27475:	mov bl, [bp + 6]	; 3: 138 94 6
x27478:	sub bl, 48	; 3: 128 235 48

@2822$digitToValue$8:	; IntegralToIntegral £temporary1226 £temporary1225
x27481:	and bx, 255	; 4: 129 227 255 0
x27485:	cmp bl, 0	; 3: 128 251 0
x27488:	jge @2822$digitToValue$9	; 2: 125 4
x27490:	neg bl	; 2: 246 219
x27492:	neg bx	; 2: 247 219

@2822$digitToValue$9:	; SetReturnValue £temporary1226

@2822$digitToValue$10:	; Return £temporary1226
x27494:	mov ax, [bp]	; 3: 139 70 0
x27497:	mov di, [bp + 4]	; 3: 139 126 4
x27500:	mov bp, [bp + 2]	; 3: 139 110 2
x27503:	jmp ax	; 2: 255 224

@2822$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$12:	; IntegralToIntegral £temporary1227 c
x27505:	mov al, [bp + 6]	; 3: 138 70 6
x27508:	and ax, 255	; 3: 37 255 0
x27511:	cmp al, 0	; 2: 60 0
x27513:	jge @2822$digitToValue$13	; 2: 125 4
x27515:	neg al	; 2: 246 216
x27517:	neg ax	; 2: 247 216

@2822$digitToValue$13:	; Parameter 7 £temporary1227 6
x27519:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$14:	; Call 7 islower 0
x27522:	mov word [bp + 7], @2822$digitToValue$15	; 5: 199 70 7 144 107
x27527:	mov [bp + 9], bp	; 3: 137 110 9
x27530:	add bp, 7	; 3: 131 197 7
x27533:	jmp islower	; 3: 233 52 255

@2822$digitToValue$15:	; PostCall 7

@2822$digitToValue$16:	; GetReturnValue £temporary1228

@2822$digitToValue$17:	; Equal 23 £temporary1228 0
x27536:	cmp bx, 0	; 3: 131 251 0
x27539:	je @2822$digitToValue$23	; 2: 116 33

@2822$digitToValue$18:	; BinarySubtract £temporary1229 c 97
x27541:	mov bl, [bp + 6]	; 3: 138 94 6
x27544:	sub bl, 97	; 3: 128 235 97

@2822$digitToValue$19:	; IntegralToIntegral £temporary1230 £temporary1229
x27547:	and bx, 255	; 4: 129 227 255 0
x27551:	cmp bl, 0	; 3: 128 251 0
x27554:	jge @2822$digitToValue$20	; 2: 125 4
x27556:	neg bl	; 2: 246 219
x27558:	neg bx	; 2: 247 219

@2822$digitToValue$20:	; BinaryAdd £temporary1231 £temporary1230 10
x27560:	add bx, 10	; 3: 131 195 10

@2822$digitToValue$21:	; SetReturnValue £temporary1231

@2822$digitToValue$22:	; Return £temporary1231
x27563:	mov ax, [bp]	; 3: 139 70 0
x27566:	mov di, [bp + 4]	; 3: 139 126 4
x27569:	mov bp, [bp + 2]	; 3: 139 110 2
x27572:	jmp ax	; 2: 255 224

@2822$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$24:	; IntegralToIntegral £temporary1232 c
x27574:	mov al, [bp + 6]	; 3: 138 70 6
x27577:	and ax, 255	; 3: 37 255 0
x27580:	cmp al, 0	; 2: 60 0
x27582:	jge @2822$digitToValue$25	; 2: 125 4
x27584:	neg al	; 2: 246 216
x27586:	neg ax	; 2: 247 216

@2822$digitToValue$25:	; Parameter 7 £temporary1232 6
x27588:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$26:	; Call 7 isupper 0
x27591:	mov word [bp + 7], @2822$digitToValue$27	; 5: 199 70 7 213 107
x27596:	mov [bp + 9], bp	; 3: 137 110 9
x27599:	add bp, 7	; 3: 131 197 7
x27602:	jmp isupper	; 3: 233 56 178

@2822$digitToValue$27:	; PostCall 7

@2822$digitToValue$28:	; GetReturnValue £temporary1233

@2822$digitToValue$29:	; Equal 35 £temporary1233 0
x27605:	cmp bx, 0	; 3: 131 251 0
x27608:	je @2822$digitToValue$35	; 2: 116 33

@2822$digitToValue$30:	; BinarySubtract £temporary1234 c 65
x27610:	mov bl, [bp + 6]	; 3: 138 94 6
x27613:	sub bl, 65	; 3: 128 235 65

@2822$digitToValue$31:	; IntegralToIntegral £temporary1235 £temporary1234
x27616:	and bx, 255	; 4: 129 227 255 0
x27620:	cmp bl, 0	; 3: 128 251 0
x27623:	jge @2822$digitToValue$32	; 2: 125 4
x27625:	neg bl	; 2: 246 219
x27627:	neg bx	; 2: 247 219

@2822$digitToValue$32:	; BinaryAdd £temporary1236 £temporary1235 10
x27629:	add bx, 10	; 3: 131 195 10

@2822$digitToValue$33:	; SetReturnValue £temporary1236

@2822$digitToValue$34:	; Return £temporary1236
x27632:	mov ax, [bp]	; 3: 139 70 0
x27635:	mov di, [bp + 4]	; 3: 139 126 4
x27638:	mov bp, [bp + 2]	; 3: 139 110 2
x27641:	jmp ax	; 2: 255 224

@2822$digitToValue$35:	; SetReturnValue 0
x27643:	mov bx, 0	; 3: 187 0 0

@2822$digitToValue$36:	; Return 0
x27646:	mov ax, [bp]	; 3: 139 70 0
x27649:	mov di, [bp + 4]	; 3: 139 126 4
x27652:	mov bp, [bp + 2]	; 3: 139 110 2
x27655:	jmp ax	; 2: 255 224

@2822$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x27657:	mov ax, [g_inStatus]	; 3: 161 217 95
x27660:	cmp ax, 0	; 3: 131 248 0
x27663:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x27665:	cmp ax, 1	; 3: 131 248 1
x27668:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x27670:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x27672:	dec word [g_inChars]	; 4: 255 14 254 100

unscanChar$5:	; Goto 7
x27676:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x27678:	dec word [g_inChars]	; 4: 255 14 254 100

unscanChar$7:	; Return 0
x27682:	mov ax, [bp]	; 3: 139 70 0
x27685:	mov di, [bp + 4]	; 3: 139 126 4
x27688:	mov bp, [bp + 2]	; 3: 139 110 2
x27691:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x27693:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x27701:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 67 108
x27706:	mov [bp + 18], bp	; 3: 137 110 18
x27709:	add bp, 16	; 3: 131 197 16
x27712:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1278

scanUnsignedLongInt$5:	; Assign input £temporary1278
x27715:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x27718:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1279 input
x27723:	mov al, [bp + 16]	; 3: 138 70 16
x27726:	and ax, 255	; 3: 37 255 0
x27729:	cmp al, 0	; 2: 60 0
x27731:	jge scanUnsignedLongInt$9	; 2: 125 4
x27733:	neg al	; 2: 246 216
x27735:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1279 6
x27737:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x27740:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 106 108
x27745:	mov [bp + 21], bp	; 3: 137 110 21
x27748:	add bp, 19	; 3: 131 197 19
x27751:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1280

scanUnsignedLongInt$13:	; Equal 20 £temporary1280 0
x27754:	cmp bx, 0	; 3: 131 251 0
x27757:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x27759:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 125 108
x27764:	mov [bp + 21], bp	; 3: 137 110 21
x27767:	add bp, 19	; 3: 131 197 19
x27770:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1281

scanUnsignedLongInt$18:	; Assign input £temporary1281
x27773:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x27776:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x27778:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x27782:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x27784:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 150 108
x27789:	mov [bp + 21], bp	; 3: 137 110 21
x27792:	add bp, 19	; 3: 131 197 19
x27795:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1284

scanUnsignedLongInt$25:	; Assign input £temporary1284
x27798:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x27801:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27805:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x27807:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x27811:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x27813:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 179 108
x27818:	mov [bp + 21], bp	; 3: 137 110 21
x27821:	add bp, 19	; 3: 131 197 19
x27824:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1287

scanUnsignedLongInt$32:	; Assign input £temporary1287
x27827:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1288 input
x27830:	mov al, [bp + 16]	; 3: 138 70 16
x27833:	and ax, 255	; 3: 37 255 0
x27836:	cmp al, 0	; 2: 60 0
x27838:	jge scanUnsignedLongInt$35	; 2: 125 4
x27840:	neg al	; 2: 246 216
x27842:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1288 6
x27844:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x27847:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 213 108
x27852:	mov [bp + 21], bp	; 3: 137 110 21
x27855:	add bp, 19	; 3: 131 197 19
x27858:	jmp tolower	; 3: 233 74 184

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1289

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1289 120
x27861:	cmp bx, 120	; 3: 131 251 120
x27864:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x27866:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x27871:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 237 108
x27876:	mov [bp + 21], bp	; 3: 137 110 21
x27879:	add bp, 19	; 3: 131 197 19
x27882:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1291

scanUnsignedLongInt$45:	; Assign input £temporary1291
x27885:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x27888:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x27890:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x27895:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x27897:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x27902:	mov al, [bp + 16]	; 3: 138 70 16
x27905:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x27908:	mov ax, [bp + 6]	; 3: 139 70 6
x27911:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x27914:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 24 109
x27919:	mov [bp + 21], bp	; 3: 137 110 21
x27922:	add bp, 19	; 3: 131 197 19
x27925:	jmp @2758$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1292

scanUnsignedLongInt$56:	; Equal 73 £temporary1292 0
x27928:	cmp bx, 0	; 3: 131 251 0
x27931:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1293 base
x27933:	mov bx, [bp + 6]	; 3: 139 94 6
x27936:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1293
x27943:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27947:	xor edx, edx	; 3: 102 49 210
x27950:	mul ebx	; 3: 102 247 227
x27953:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x27957:	mov al, [bp + 16]	; 3: 138 70 16
x27960:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x27963:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 73 109
x27968:	mov [bp + 21], bp	; 3: 137 110 21
x27971:	add bp, 19	; 3: 131 197 19
x27974:	jmp @2822$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1295

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1296 £temporary1295
x27977:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1296
x27984:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x27988:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x27993:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 103 109
x27998:	mov [bp + 21], bp	; 3: 137 110 21
x28001:	add bp, 19	; 3: 131 197 19
x28004:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1298

scanUnsignedLongInt$71:	; Assign input £temporary1298
x28007:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x28010:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x28012:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x28016:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x28018:	inc word [g_inCount]	; 4: 255 6 252 100

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x28022:	mov al, [bp + 16]	; 3: 138 70 16
x28025:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x28028:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 138 109
x28033:	mov [bp + 21], bp	; 3: 137 110 21
x28036:	add bp, 19	; 3: 131 197 19
x28039:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x28042:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x28046:	mov ax, [bp]	; 3: 139 70 0
x28049:	mov di, [bp + 4]	; 3: 139 126 4
x28052:	mov bp, [bp + 2]	; 3: 139 110 2
x28055:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x28057:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x28062:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x28067:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x28069:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x28072:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x28074:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x28077:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 187 109
x28082:	mov [bp + 28], bp	; 3: 137 110 28
x28085:	add bp, 26	; 3: 131 197 26
x28088:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1309

scanLongDouble$10:	; Assign input £temporary1309
x28091:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1310 input
x28094:	mov al, [bp + 26]	; 3: 138 70 26
x28097:	and ax, 255	; 3: 37 255 0
x28100:	cmp al, 0	; 2: 60 0
x28102:	jge scanLongDouble$13	; 2: 125 4
x28104:	neg al	; 2: 246 216
x28106:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1310 6
x28108:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x28111:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 221 109
x28116:	mov [bp + 29], bp	; 3: 137 110 29
x28119:	add bp, 27	; 3: 131 197 27
x28122:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1311

scanLongDouble$17:	; Equal 24 £temporary1311 0
x28125:	cmp bx, 0	; 3: 131 251 0
x28128:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x28130:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 240 109
x28135:	mov [bp + 29], bp	; 3: 137 110 29
x28138:	add bp, 27	; 3: 131 197 27
x28141:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1312

scanLongDouble$22:	; Assign input £temporary1312
x28144:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x28147:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x28149:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x28153:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x28155:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 9 110
x28160:	mov [bp + 29], bp	; 3: 137 110 29
x28163:	add bp, 27	; 3: 131 197 27
x28166:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1315

scanLongDouble$29:	; Assign input £temporary1315
x28169:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x28172:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x28174:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x28178:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x28180:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x28185:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 39 110
x28190:	mov [bp + 29], bp	; 3: 137 110 29
x28193:	add bp, 27	; 3: 131 197 27
x28196:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1317

scanLongDouble$37:	; Assign input £temporary1317
x28199:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1318 input
x28202:	mov al, [bp + 26]	; 3: 138 70 26
x28205:	and ax, 255	; 3: 37 255 0
x28208:	cmp al, 0	; 2: 60 0
x28210:	jge scanLongDouble$40	; 2: 125 4
x28212:	neg al	; 2: 246 216
x28214:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1318 6
x28216:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x28219:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 73 110
x28224:	mov [bp + 29], bp	; 3: 137 110 29
x28227:	add bp, 27	; 3: 131 197 27
x28230:	jmp isdigit	; 3: 233 35 189

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1319

scanLongDouble$44:	; Equal 60 £temporary1319 0
x28233:	cmp bx, 0	; 3: 131 251 0
x28236:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x28238:	fld qword [@3023$float8$10.0#]	; 4: 221 6 188 111

scanLongDouble$46:	; PushFloat value
x28242:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1320 10.0 value
x28245:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1321 input 48
x28247:	mov al, [bp + 26]	; 3: 138 70 26
x28250:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1323 £temporary1321
x28252:	and ax, 255	; 3: 37 255 0
x28255:	cmp al, 0	; 2: 60 0
x28257:	jge scanLongDouble$50	; 2: 125 4
x28259:	neg al	; 2: 246 216
x28261:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1322 £temporary1323
x28263:	mov [container2bytes#], ax	; 3: 163 77 27
x28266:	fild word [container2bytes#]	; 4: 223 6 77 27

scanLongDouble$51:	; BinaryAdd £temporary1324 £temporary1320 £temporary1322
x28270:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x28272:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x28275:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 129 110
x28280:	mov [bp + 29], bp	; 3: 137 110 29
x28283:	add bp, 27	; 3: 131 197 27
x28286:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1325

scanLongDouble$57:	; Assign input £temporary1325
x28289:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x28292:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x28297:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x28299:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x28303:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x28305:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 159 110
x28310:	mov [bp + 29], bp	; 3: 137 110 29
x28313:	add bp, 27	; 3: 131 197 27
x28316:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1328

scanLongDouble$65:	; Assign input £temporary1328
x28319:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1329 input
x28322:	mov al, [bp + 26]	; 3: 138 70 26
x28325:	and ax, 255	; 3: 37 255 0
x28328:	cmp al, 0	; 2: 60 0
x28330:	jge scanLongDouble$68	; 2: 125 4
x28332:	neg al	; 2: 246 216
x28334:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1329 6
x28336:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x28339:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 193 110
x28344:	mov [bp + 29], bp	; 3: 137 110 29
x28347:	add bp, 27	; 3: 131 197 27
x28350:	jmp isdigit	; 3: 233 171 188

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1330

scanLongDouble$72:	; Equal 92 £temporary1330 0
x28353:	cmp bx, 0	; 3: 131 251 0
x28356:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x28358:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x28361:	fld qword [@3043$float8$10.0#]	; 4: 221 6 196 111

scanLongDouble$75:	; SignedDivide £temporary1331 factor 10.0
x28365:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x28367:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x28370:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x28373:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1332 input 48
x28376:	mov al, [bp + 26]	; 3: 138 70 26
x28379:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1334 £temporary1332
x28381:	and ax, 255	; 3: 37 255 0
x28384:	cmp al, 0	; 2: 60 0
x28386:	jge scanLongDouble$81	; 2: 125 4
x28388:	neg al	; 2: 246 216
x28390:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1333 £temporary1334
x28392:	mov [container2bytes#], ax	; 3: 163 77 27
x28395:	fild word [container2bytes#]	; 4: 223 6 77 27

scanLongDouble$82:	; SignedMultiply £temporary1335 factor £temporary1333
x28399:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1336 value £temporary1335
x28401:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x28403:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x28406:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 4 111
x28411:	mov [bp + 29], bp	; 3: 137 110 29
x28414:	add bp, 27	; 3: 131 197 27
x28417:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1337

scanLongDouble$89:	; Assign input £temporary1337
x28420:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x28423:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x28428:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1339 input
x28430:	mov al, [bp + 26]	; 3: 138 70 26
x28433:	and ax, 255	; 3: 37 255 0
x28436:	cmp al, 0	; 2: 60 0
x28438:	jge scanLongDouble$94	; 2: 125 4
x28440:	neg al	; 2: 246 216
x28442:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1339 6
x28444:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x28447:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 45 111
x28452:	mov [bp + 29], bp	; 3: 137 110 29
x28455:	add bp, 27	; 3: 131 197 27
x28458:	jmp tolower	; 3: 233 242 181

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1340

scanLongDouble$98:	; NotEqual 118 £temporary1340 101
x28461:	cmp bx, 101	; 3: 131 251 101
x28464:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x28466:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x28471:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 69 111
x28476:	mov [bp + 29], bp	; 3: 137 110 29
x28479:	add bp, 27	; 3: 131 197 27
x28482:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1342

scanLongDouble$104:	; IntegralToFloating £temporary1343 £temporary1342
x28485:	mov [container4bytes#], ebx	; 5: 102 137 30 81 36
x28490:	fild dword [container4bytes#]	; 4: 219 6 81 36

scanLongDouble$105:	; PopFloat exponent
x28494:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x28497:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x28500:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x28503:	fld qword [@3069$float8$10.0#]	; 4: 221 6 204 111

scanLongDouble$109:	; Parameter 35 10.0 6
x28507:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x28510:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x28513:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x28516:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 114 111
x28521:	mov [bp + 45], bp	; 3: 137 110 45
x28524:	add bp, 43	; 3: 131 197 43
x28527:	jmp pow	; 3: 233 41 185

scanLongDouble$113:	; PostCall 35
x28530:	fstp qword [bp + 43]	; 3: 221 94 43
x28533:	fld qword [bp + 35]	; 3: 221 70 35
x28536:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1344

scanLongDouble$115:	; SignedMultiply £temporary1345 value £temporary1344
x28539:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x28541:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x28544:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x28546:	mov al, [bp + 26]	; 3: 138 70 26
x28549:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x28552:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 150 111
x28557:	mov [bp + 29], bp	; 3: 137 110 29
x28560:	add bp, 27	; 3: 131 197 27
x28563:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x28566:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28570:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x28572:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1347 value
x28575:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x28577:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x28580:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x28584:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x28586:	inc word [g_inCount]	; 4: 255 6 252 100

scanLongDouble$128:	; PushFloat value
x28590:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x28593:	mov ax, [bp]	; 3: 139 70 0
x28596:	mov di, [bp + 4]	; 3: 139 126 4
x28599:	mov bp, [bp + 2]	; 3: 139 110 2
x28602:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

@3023$float8$10.0#:
x28604:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3043$float8$10.0#:
x28612:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3069$float8$10.0#:
x28620:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

scanPattern:	; Assign index 0
x28628:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 16 scanChar 0
x28633:	mov word [bp + 16], scanPattern$3	; 5: 199 70 16 231 111
x28638:	mov [bp + 18], bp	; 3: 137 110 18
x28641:	add bp, 16	; 3: 131 197 16
x28644:	jmp scanChar	; 3: 233 25 245

scanPattern$3:	; PostCall 16

scanPattern$4:	; GetReturnValue £temporary1053

scanPattern$5:	; Assign input £temporary1053
x28647:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1054 input
x28650:	mov al, [bp + 16]	; 3: 138 70 16
x28653:	and ax, 255	; 3: 37 255 0
x28656:	cmp al, 0	; 2: 60 0
x28658:	jge scanPattern$8	; 2: 125 4
x28660:	neg al	; 2: 246 216
x28662:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 17 £temporary1054 6
x28664:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$9:	; Call 17 isspace 0
x28667:	mov word [bp + 17], scanPattern$10	; 5: 199 70 17 9 112
x28672:	mov [bp + 19], bp	; 3: 137 110 19
x28675:	add bp, 17	; 3: 131 197 17
x28678:	jmp isspace	; 3: 233 179 247

scanPattern$10:	; PostCall 17

scanPattern$11:	; GetReturnValue £temporary1055

scanPattern$12:	; Equal 19 £temporary1055 0
x28681:	cmp bx, 0	; 3: 131 251 0
x28684:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 17 scanChar 0
x28686:	mov word [bp + 17], scanPattern$15	; 5: 199 70 17 28 112
x28691:	mov [bp + 19], bp	; 3: 137 110 19
x28694:	add bp, 17	; 3: 131 197 17
x28697:	jmp scanChar	; 3: 233 228 244

scanPattern$15:	; PostCall 17

scanPattern$16:	; GetReturnValue £temporary1056

scanPattern$17:	; Assign input £temporary1056
x28700:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$18:	; Goto 6
x28703:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 55 string 0
x28705:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28709:	je scanPattern$55	; 4: 15 132 156 0

scanPattern$20:	; NotEqual 30 not 0
x28713:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28717:	jne scanPattern$30	; 2: 117 48

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 17 pattern 6
x28719:	mov ax, [bp + 8]	; 3: 139 70 8
x28722:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$23:	; Parameter 17 size 8
x28725:	mov ax, [bp + 10]	; 3: 139 70 10
x28728:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$24:	; IntegralToIntegral £temporary1061 input
x28731:	mov al, [bp + 16]	; 3: 138 70 16
x28734:	and ax, 255	; 3: 37 255 0
x28737:	cmp al, 0	; 2: 60 0
x28739:	jge scanPattern$25	; 2: 125 4
x28741:	neg al	; 2: 246 216
x28743:	neg ax	; 2: 247 216

scanPattern$25:	; Parameter 17 £temporary1061 10
x28745:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$26:	; Call 17 strnchr 0
x28748:	mov word [bp + 17], scanPattern$27	; 5: 199 70 17 90 112
x28753:	mov [bp + 19], bp	; 3: 137 110 19
x28756:	add bp, 17	; 3: 131 197 17
x28759:	jmp @2496$strnchr	; 3: 233 245 0

scanPattern$27:	; PostCall 17

scanPattern$28:	; GetReturnValue £temporary1062

scanPattern$29:	; NotEqual 40 £temporary1062 0
x28762:	cmp bx, 0	; 3: 131 251 0
x28765:	jne scanPattern$40	; 2: 117 54

scanPattern$30:	; Equal 51 not 0
x28767:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28771:	je scanPattern$51	; 2: 116 84

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$32:	; Parameter 17 pattern 6
x28773:	mov ax, [bp + 8]	; 3: 139 70 8
x28776:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$33:	; Parameter 17 size 8
x28779:	mov ax, [bp + 10]	; 3: 139 70 10
x28782:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$34:	; IntegralToIntegral £temporary1065 input
x28785:	mov al, [bp + 16]	; 3: 138 70 16
x28788:	and ax, 255	; 3: 37 255 0
x28791:	cmp al, 0	; 2: 60 0
x28793:	jge scanPattern$35	; 2: 125 4
x28795:	neg al	; 2: 246 216
x28797:	neg ax	; 2: 247 216

scanPattern$35:	; Parameter 17 £temporary1065 10
x28799:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$36:	; Call 17 strnchr 0
x28802:	mov word [bp + 17], scanPattern$37	; 5: 199 70 17 144 112
x28807:	mov [bp + 19], bp	; 3: 137 110 19
x28810:	add bp, 17	; 3: 131 197 17
x28813:	jmp @2496$strnchr	; 3: 233 191 0

scanPattern$37:	; PostCall 17

scanPattern$38:	; GetReturnValue £temporary1066

scanPattern$39:	; NotEqual 51 £temporary1066 0
x28816:	cmp bx, 0	; 3: 131 251 0
x28819:	jne scanPattern$51	; 2: 117 36

scanPattern$40:	; Assign £temporary1072 index
x28821:	mov ax, [bp + 14]	; 3: 139 70 14

scanPattern$41:	; Increment index
x28824:	inc word [bp + 14]	; 3: 255 70 14

scanPattern$42:	; BinaryAdd £temporary1075 string £temporary1072
x28827:	mov si, [bp + 6]	; 3: 139 118 6
x28830:	add si, ax	; 2: 1 198

scanPattern$43:	; Deref £temporary1074 -> £temporary1075 £temporary1075 0

scanPattern$44:	; Assign £temporary1074 -> £temporary1075 input
x28832:	mov al, [bp + 16]	; 3: 138 70 16
x28835:	mov [si], al	; 2: 136 4

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$46:	; Call 17 scanChar 0
x28837:	mov word [bp + 17], scanPattern$47	; 5: 199 70 17 179 112
x28842:	mov [bp + 19], bp	; 3: 137 110 19
x28845:	add bp, 17	; 3: 131 197 17
x28848:	jmp scanChar	; 3: 233 77 244

scanPattern$47:	; PostCall 17

scanPattern$48:	; GetReturnValue £temporary1076

scanPattern$49:	; Assign input £temporary1076
x28851:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$50:	; Goto 20
x28854:	jmp scanPattern$20	; 3: 233 112 255

scanPattern$51:	; BinaryAdd £temporary1078 string index
x28857:	mov si, [bp + 6]	; 3: 139 118 6
x28860:	add si, [bp + 14]	; 3: 3 118 14

scanPattern$52:	; Deref £temporary1077 -> £temporary1078 £temporary1078 0

scanPattern$53:	; Assign £temporary1077 -> £temporary1078 0
x28863:	mov byte [si], 0	; 3: 198 4 0

scanPattern$54:	; Goto 81
x28866:	jmp scanPattern$81	; 3: 233 127 0

scanPattern$55:	; NotEqual 65 not 0
x28869:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28873:	jne scanPattern$65	; 2: 117 48

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$57:	; Parameter 17 pattern 6
x28875:	mov ax, [bp + 8]	; 3: 139 70 8
x28878:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Parameter 17 size 8
x28881:	mov ax, [bp + 10]	; 3: 139 70 10
x28884:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$59:	; IntegralToIntegral £temporary1081 input
x28887:	mov al, [bp + 16]	; 3: 138 70 16
x28890:	and ax, 255	; 3: 37 255 0
x28893:	cmp al, 0	; 2: 60 0
x28895:	jge scanPattern$60	; 2: 125 4
x28897:	neg al	; 2: 246 216
x28899:	neg ax	; 2: 247 216

scanPattern$60:	; Parameter 17 £temporary1081 10
x28901:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$61:	; Call 17 strnchr 0
x28904:	mov word [bp + 17], scanPattern$62	; 5: 199 70 17 246 112
x28909:	mov [bp + 19], bp	; 3: 137 110 19
x28912:	add bp, 17	; 3: 131 197 17
x28915:	nop	; 1: 144
x28916:	jmp @2496$strnchr	; 2: 235 89

scanPattern$62:	; PostCall 17

scanPattern$63:	; GetReturnValue £temporary1082

scanPattern$64:	; NotEqual 75 £temporary1082 0
x28918:	cmp bx, 0	; 3: 131 251 0
x28921:	jne scanPattern$75	; 2: 117 54

scanPattern$65:	; Equal 81 not 0
x28923:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28927:	je scanPattern$81	; 2: 116 67

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$67:	; Parameter 17 pattern 6
x28929:	mov ax, [bp + 8]	; 3: 139 70 8
x28932:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$68:	; Parameter 17 size 8
x28935:	mov ax, [bp + 10]	; 3: 139 70 10
x28938:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$69:	; IntegralToIntegral £temporary1085 input
x28941:	mov al, [bp + 16]	; 3: 138 70 16
x28944:	and ax, 255	; 3: 37 255 0
x28947:	cmp al, 0	; 2: 60 0
x28949:	jge scanPattern$70	; 2: 125 4
x28951:	neg al	; 2: 246 216
x28953:	neg ax	; 2: 247 216

scanPattern$70:	; Parameter 17 £temporary1085 10
x28955:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$71:	; Call 17 strnchr 0
x28958:	mov word [bp + 17], scanPattern$72	; 5: 199 70 17 44 113
x28963:	mov [bp + 19], bp	; 3: 137 110 19
x28966:	add bp, 17	; 3: 131 197 17
x28969:	nop	; 1: 144
x28970:	jmp @2496$strnchr	; 2: 235 35

scanPattern$72:	; PostCall 17

scanPattern$73:	; GetReturnValue £temporary1086

scanPattern$74:	; NotEqual 81 £temporary1086 0
x28972:	cmp bx, 0	; 3: 131 251 0
x28975:	jne scanPattern$81	; 2: 117 19

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$76:	; Call 17 scanChar 0
x28977:	mov word [bp + 17], scanPattern$77	; 5: 199 70 17 63 113
x28982:	mov [bp + 19], bp	; 3: 137 110 19
x28985:	add bp, 17	; 3: 131 197 17
x28988:	jmp scanChar	; 3: 233 193 243

scanPattern$77:	; PostCall 17

scanPattern$78:	; GetReturnValue £temporary1092

scanPattern$79:	; Assign input £temporary1092
x28991:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$80:	; Goto 55
x28994:	jmp scanPattern$55	; 2: 235 129

scanPattern$81:	; Return 0
x28996:	mov ax, [bp]	; 3: 139 70 0
x28999:	mov di, [bp + 4]	; 3: 139 126 4
x29002:	mov bp, [bp + 2]	; 3: 139 110 2
x29005:	jmp ax	; 2: 255 224

scanPattern$82:	; FunctionEnd scanPattern

@2496$strnchr:	; IntegralToIntegral £temporary1044 i
x29007:	mov ax, [bp + 10]	; 3: 139 70 10
x29010:	cmp ax, 0	; 3: 131 248 0
x29013:	jge @2496$strnchr$1	; 2: 125 4
x29015:	neg ax	; 2: 247 216
x29017:	neg al	; 2: 246 216

@2496$strnchr$1:	; Assign c £temporary1044
x29019:	mov [bp + 14], al	; 3: 136 70 14

@2496$strnchr$2:	; Assign index 0
x29022:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@2496$strnchr$3:	; SignedGreaterThanEqual 14 index size
x29027:	mov ax, [bp + 8]	; 3: 139 70 8
x29030:	cmp [bp + 12], ax	; 3: 57 70 12
x29033:	jge @2496$strnchr$14	; 2: 125 35

@2496$strnchr$4:	; BinaryAdd £temporary1048 text index
x29035:	mov si, [bp + 6]	; 3: 139 118 6
x29038:	add si, [bp + 12]	; 3: 3 118 12

@2496$strnchr$5:	; Deref £temporary1047 -> £temporary1048 £temporary1048 0

@2496$strnchr$6:	; NotEqual 12 £temporary1047 -> £temporary1048 c
x29041:	mov al, [bp + 14]	; 3: 138 70 14
x29044:	cmp [si], al	; 2: 56 4
x29046:	jne @2496$strnchr$12	; 2: 117 17

@2496$strnchr$7:	; BinaryAdd £temporary1051 text index
x29048:	mov bx, [bp + 6]	; 3: 139 94 6
x29051:	add bx, [bp + 12]	; 3: 3 94 12

@2496$strnchr$8:	; Deref £temporary1050 -> £temporary1051 £temporary1051 0

@2496$strnchr$9:	; address £temporary1052 £temporary1050 -> £temporary1051

@2496$strnchr$10:	; SetReturnValue £temporary1052

@2496$strnchr$11:	; Return £temporary1052
x29054:	mov ax, [bp]	; 3: 139 70 0
x29057:	mov di, [bp + 4]	; 3: 139 126 4
x29060:	mov bp, [bp + 2]	; 3: 139 110 2
x29063:	jmp ax	; 2: 255 224

@2496$strnchr$12:	; Increment index
x29065:	inc word [bp + 12]	; 3: 255 70 12

@2496$strnchr$13:	; Goto 3
x29068:	jmp @2496$strnchr$3	; 2: 235 213

@2496$strnchr$14:	; SetReturnValue 0
x29070:	mov bx, 0	; 3: 187 0 0

@2496$strnchr$15:	; Return 0
x29073:	mov ax, [bp]	; 3: 139 70 0
x29076:	mov di, [bp + 4]	; 3: 139 126 4
x29079:	mov bp, [bp + 2]	; 3: 139 110 2
x29082:	jmp ax	; 2: 255 224

@2496$strnchr$16:	; FunctionEnd strnchr

fclose:	; Equal 20 stream 0
x29084:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29088:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x29090:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary809 -> stream stream 2
x29092:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary809 -> stream
x29095:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x29098:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x29100:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x29102:	mov word [errno], 11	; 6: 199 6 230 10 11 0

fclose$7:	; SetReturnValue -1
x29108:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x29111:	mov ax, [bp]	; 3: 139 70 0
x29114:	mov di, [bp + 4]	; 3: 139 126 4
x29117:	mov bp, [bp + 2]	; 3: 139 110 2
x29120:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary811 -> stream stream 27
x29122:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary811 -> stream 0
x29125:	cmp word [si + 27], 0	; 4: 131 124 27 0
x29129:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary812 -> stream stream 4
x29131:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary812 -> stream 6
x29134:	mov [bp + 14], si	; 3: 137 118 14
x29137:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x29141:	mov word [bp + 8], fclose$15	; 5: 199 70 8 227 113
x29146:	mov [bp + 10], bp	; 3: 137 110 10
x29149:	add bp, 8	; 3: 131 197 8
x29152:	nop	; 1: 144
x29153:	jmp remove	; 2: 235 124

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary815 -> stream stream 0
x29155:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary815 -> stream 0
x29158:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x29162:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x29165:	mov ax, [bp]	; 3: 139 70 0
x29168:	mov di, [bp + 4]	; 3: 139 126 4
x29171:	mov bp, [bp + 2]	; 3: 139 110 2
x29174:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x29176:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x29181:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x29185:	jge fclose$40	; 2: 125 74

fclose$22:	; SignedMultiply £temporary819 index 29
x29187:	mov ax, [bp + 8]	; 3: 139 70 8
x29190:	xor dx, dx	; 2: 49 210
x29192:	imul word [@1957$int2$29#]	; 4: 247 46 91 114

fclose$23:	; BinaryAdd £temporary820 g_fileArray £temporary819
x29196:	mov si, g_fileArray	; 3: 190 102 13
x29199:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary818 -> £temporary820 £temporary820 0

fclose$25:	; Equal 38 £temporary818.open$0 -> £temporary820 0
x29201:	cmp word [si], 0	; 3: 131 60 0
x29204:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; SignedMultiply £temporary822 index 29
x29206:	mov ax, [bp + 8]	; 3: 139 70 8
x29209:	xor dx, dx	; 2: 49 210
x29211:	imul word [@1962$int2$29#]	; 4: 247 46 93 114

fclose$28:	; BinaryAdd £temporary823 g_fileArray £temporary822
x29215:	mov si, g_fileArray	; 3: 190 102 13
x29218:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary821 -> £temporary823 £temporary823 0

fclose$30:	; address £temporary824 £temporary821 -> £temporary823

fclose$31:	; Parameter 10 £temporary824 6
x29220:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x29223:	mov word [bp + 10], fclose$33	; 5: 199 70 10 53 114
x29228:	mov [bp + 12], bp	; 3: 137 110 12
x29231:	add bp, 10	; 3: 131 197 10
x29234:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary825

fclose$35:	; NotEqual 38 £temporary825 -1
x29237:	cmp bx, -1	; 3: 131 251 255
x29240:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x29242:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x29245:	mov ax, [bp]	; 3: 139 70 0
x29248:	mov di, [bp + 4]	; 3: 139 126 4
x29251:	mov bp, [bp + 2]	; 3: 139 110 2
x29254:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x29256:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x29259:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x29261:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x29264:	mov ax, [bp]	; 3: 139 70 0
x29267:	mov di, [bp + 4]	; 3: 139 126 4
x29270:	mov bp, [bp + 2]	; 3: 139 110 2
x29273:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

@1957$int2$29#:
x29275:	dw 29	; 2: 29 0

@1962$int2$29#:
x29277:	dw 29	; 2: 29 0

remove:	; AssignRegister ah 65
x29279:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x29281:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x29283:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x29286:	int 33	; 2: 205 33

remove$4:	; Carry 7
x29288:	jc remove$7	; 2: 114 14

remove$5:	; SetReturnValue 0
x29290:	mov bx, 0	; 3: 187 0 0

remove$6:	; Return 0
x29293:	mov ax, [bp]	; 3: 139 70 0
x29296:	mov di, [bp + 4]	; 3: 139 126 4
x29299:	mov bp, [bp + 2]	; 3: 139 110 2
x29302:	jmp ax	; 2: 255 224

remove$7:	; Assign errno 18
x29304:	mov word [errno], 18	; 6: 199 6 230 10 18 0

remove$8:	; SetReturnValue -1
x29310:	mov bx, -1	; 3: 187 255 255

remove$9:	; Return -1
x29313:	mov ax, [bp]	; 3: 139 70 0
x29316:	mov di, [bp + 4]	; 3: 139 126 4
x29319:	mov bp, [bp + 2]	; 3: 139 110 2
x29322:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x29324:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x29326:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x29328:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x29331:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x29334:	int 33	; 2: 205 33

rename$5:	; Carry 8
x29336:	jc rename$8	; 2: 114 14

rename$6:	; SetReturnValue 0
x29338:	mov bx, 0	; 3: 187 0 0

rename$7:	; Return 0
x29341:	mov ax, [bp]	; 3: 139 70 0
x29344:	mov di, [bp + 4]	; 3: 139 126 4
x29347:	mov bp, [bp + 2]	; 3: 139 110 2
x29350:	jmp ax	; 2: 255 224

rename$8:	; Assign errno 19
x29352:	mov word [errno], 19	; 6: 199 6 230 10 19 0

rename$9:	; SetReturnValue -1
x29358:	mov bx, -1	; 3: 187 255 255

rename$10:	; Return -1
x29361:	mov ax, [bp]	; 3: 139 70 0
x29364:	mov di, [bp + 4]	; 3: 139 126 4
x29367:	mov bp, [bp + 2]	; 3: 139 110 2
x29370:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary923 -> stream stream 2
x29372:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary923 -> stream
x29375:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary925 size nobj
x29378:	mov ax, [bp + 8]	; 3: 139 70 8
x29381:	xor dx, dx	; 2: 49 210
x29383:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary925
x29386:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x29388:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x29390:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x29393:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x29395:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary929 -> stream stream 21
x29397:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x29400:	mov word [errno], 13	; 6: 199 6 230 10 13 0

fwrite$10:	; Assign £temporary929 -> stream errno
x29406:	mov ax, [errno]	; 3: 161 230 10
x29409:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x29412:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x29415:	mov ax, [bp]	; 3: 139 70 0
x29418:	mov di, [bp + 4]	; 3: 139 126 4
x29421:	mov bp, [bp + 2]	; 3: 139 110 2
x29424:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary930 ax

fwrite$14:	; SetReturnValue £temporary930
x29426:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary930
x29428:	mov ax, [bp]	; 3: 139 70 0
x29431:	mov di, [bp + 4]	; 3: 139 126 4
x29434:	mov bp, [bp + 2]	; 3: 139 110 2
x29437:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary914 -> stream stream 2
x29439:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary914 -> stream
x29442:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary916 size nobj
x29445:	mov ax, [bp + 8]	; 3: 139 70 8
x29448:	xor dx, dx	; 2: 49 210
x29450:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary916
x29453:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x29455:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x29457:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x29460:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x29462:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary920 -> stream stream 21
x29464:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x29467:	mov word [errno], 14	; 6: 199 6 230 10 14 0

fread$10:	; Assign £temporary920 -> stream errno
x29473:	mov ax, [errno]	; 3: 161 230 10
x29476:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x29479:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x29482:	mov ax, [bp]	; 3: 139 70 0
x29485:	mov di, [bp + 4]	; 3: 139 126 4
x29488:	mov bp, [bp + 2]	; 3: 139 110 2
x29491:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary921 ax

fread$14:	; SetReturnValue £temporary921
x29493:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary921
x29495:	mov ax, [bp]	; 3: 139 70 0
x29498:	mov di, [bp + 4]	; 3: 139 126 4
x29501:	mov bp, [bp + 2]	; 3: 139 110 2
x29504:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary25 memorySize
x29506:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary25 4
x29509:	add ax, 4	; 3: 131 192 4
x29512:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x29515:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x29520:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x29525:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x29530:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x29535:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x29540:	mov ax, [g_firstBlockPtr]	; 3: 161 208 116
x29543:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x29546:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29550:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x29552:	mov ax, [stderr]	; 3: 161 139 77
x29555:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x29558:	mov word [bp + 30], @115$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 210 116

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x29563:	mov word [bp + 32], @116$string_memorySize203E3D200#	; 5: 199 70 32 0 117

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x29568:	mov word [bp + 34], @117$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 16 117

malloc$14:	; Parameter 22 41 14
x29573:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x29578:	mov word [bp + 22], malloc$16	; 5: 199 70 22 157 115
x29583:	mov [bp + 24], bp	; 3: 137 110 24
x29586:	add bp, 22	; 3: 131 197 22
x29589:	mov di, bp	; 2: 137 239
x29591:	add di, 6	; 3: 131 199 6
x29594:	jmp fprintf	; 3: 233 239 234

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x29597:	mov word [bp + 22], malloc$19	; 5: 199 70 22 171 115
x29602:	mov [bp + 24], bp	; 3: 137 110 24
x29605:	add bp, 22	; 3: 131 197 22
x29608:	jmp abort	; 3: 233 28 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x29611:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29615:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x29617:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x29620:	mov ax, [bp]	; 3: 139 70 0
x29623:	mov di, [bp + 4]	; 3: 139 126 4
x29626:	mov bp, [bp + 2]	; 3: 139 110 2
x29629:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x29631:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x29635:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary33 currBlockPtr
x29637:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary33
x29640:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary34 -> currBlockPtr currBlockPtr 0
x29643:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary35 currAddress £temporary34 -> currBlockPtr
x29646:	mov ax, [bp + 22]	; 3: 139 70 22
x29649:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary36 £temporary35 4
x29651:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary36
x29654:	mov bx, [bp + 12]	; 3: 139 94 12
x29657:	sub bx, ax	; 2: 41 195
x29659:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x29662:	mov ax, [bp + 24]	; 3: 139 70 24
x29665:	cmp [bp + 8], ax	; 3: 57 70 8
x29668:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x29670:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x29674:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x29676:	mov ax, [bp + 10]	; 3: 139 70 10
x29679:	cmp [bp + 24], ax	; 3: 57 70 24
x29682:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x29684:	mov ax, [bp + 24]	; 3: 139 70 24
x29687:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x29690:	mov ax, [bp + 20]	; 3: 139 70 20
x29693:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x29696:	mov ax, [bp + 18]	; 3: 139 70 18
x29699:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x29702:	mov ax, [bp + 22]	; 3: 139 70 22
x29705:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x29708:	mov ax, [bp + 20]	; 3: 139 70 20
x29711:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary43 -> currBlockPtr currBlockPtr 2
x29714:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary43 -> currBlockPtr
x29717:	mov ax, [si + 2]	; 3: 139 68 2
x29720:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x29723:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x29725:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x29729:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary45 minBlockPtr
x29731:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary46 -> minBlockPtr minBlockPtr 0
x29734:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary47 £temporary45 £temporary46 -> minBlockPtr
x29737:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary47 4
x29739:	add ax, 4	; 3: 131 192 4
x29742:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary49 newAddress
x29745:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary49
x29748:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary50 -> newBlockPtr newBlockPtr 0
x29751:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary50 -> newBlockPtr memorySize
x29754:	mov ax, [bp + 6]	; 3: 139 70 6
x29757:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary51 -> newBlockPtr newBlockPtr 2
x29759:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary51 -> newBlockPtr minBlockPtr
x29762:	mov ax, [bp + 14]	; 3: 139 70 14
x29765:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x29768:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x29772:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary53 -> minPrevBlockPtr minPrevBlockPtr 2
x29774:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary53 -> minPrevBlockPtr newBlockPtr
x29777:	mov ax, [bp + 24]	; 3: 139 70 24
x29780:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x29783:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x29785:	mov ax, [bp + 24]	; 3: 139 70 24
x29788:	mov [g_firstBlockPtr], ax	; 3: 163 208 116

malloc$57:	; BinaryAdd £temporary54 newAddress 4
x29791:	mov bx, [bp + 22]	; 3: 139 94 22
x29794:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary55 £temporary54

malloc$59:	; SetReturnValue £temporary55

malloc$60:	; Return £temporary55
x29797:	mov ax, [bp]	; 3: 139 70 0
x29800:	mov di, [bp + 4]	; 3: 139 126 4
x29803:	mov bp, [bp + 2]	; 3: 139 110 2
x29806:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x29808:	mov ax, [bp + 12]	; 3: 139 70 12
x29811:	sub ax, [bp + 8]	; 3: 43 70 8
x29814:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary57 bp

malloc$63:	; Assign stackTop £temporary57
x29817:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x29820:	mov ax, [bp + 22]	; 3: 139 70 22
x29823:	cmp [bp + 24], ax	; 3: 57 70 24
x29826:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary59 newAddress
x29828:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary59
x29831:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary60 -> newBlockPtr newBlockPtr 0
x29834:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary60 -> newBlockPtr memorySize
x29837:	mov ax, [bp + 6]	; 3: 139 70 6
x29840:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary61 -> newBlockPtr newBlockPtr 2
x29842:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary61 -> newBlockPtr 0
x29845:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x29850:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x29854:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary63 -> prevBlockPtr prevBlockPtr 2
x29856:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary63 -> prevBlockPtr newBlockPtr
x29859:	mov ax, [bp + 26]	; 3: 139 70 26
x29862:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x29865:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x29867:	mov ax, [bp + 26]	; 3: 139 70 26
x29870:	mov [g_firstBlockPtr], ax	; 3: 163 208 116

malloc$76:	; BinaryAdd £temporary64 newAddress 4
x29873:	mov bx, [bp + 22]	; 3: 139 94 22
x29876:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary65 £temporary64

malloc$78:	; SetReturnValue £temporary65

malloc$79:	; Return £temporary65
x29879:	mov ax, [bp]	; 3: 139 70 0
x29882:	mov di, [bp + 4]	; 3: 139 126 4
x29885:	mov bp, [bp + 2]	; 3: 139 110 2
x29888:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x29890:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x29893:	mov ax, [bp]	; 3: 139 70 0
x29896:	mov di, [bp + 4]	; 3: 139 126 4
x29899:	mov bp, [bp + 2]	; 3: 139 110 2
x29902:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x29904:	dw 0	; 2: 0 0

@115$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x29906:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@116$string_memorySize203E3D200#:
x29952:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@117$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x29968:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary79 freeMemoryPtr
x30031:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary80 £temporary79 4
x30034:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary81 £temporary80

free$3:	; Assign freeBlockPtr £temporary81
x30037:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x30040:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x30045:	mov ax, [g_firstBlockPtr]	; 3: 161 208 116
x30048:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x30051:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x30055:	jne free$8	; 2: 117 11

free$7:	; Return
x30057:	mov ax, [bp]	; 3: 139 70 0
x30060:	mov di, [bp + 4]	; 3: 139 126 4
x30063:	mov bp, [bp + 2]	; 3: 139 110 2
x30066:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x30068:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x30072:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x30074:	mov ax, [bp + 8]	; 3: 139 70 8
x30077:	cmp [bp + 12], ax	; 3: 57 70 12
x30080:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x30082:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30086:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary86 -> currBlockPtr currBlockPtr 2
x30088:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary86 -> currBlockPtr 0
x30091:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30095:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x30097:	mov word [g_firstBlockPtr], 0	; 6: 199 6 208 116 0 0

free$14:	; Goto 27
x30103:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x30105:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30109:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary90 -> currBlockPtr currBlockPtr 2
x30111:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary90 -> currBlockPtr
x30114:	mov ax, [si + 2]	; 3: 139 68 2
x30117:	mov [g_firstBlockPtr], ax	; 3: 163 208 116

free$18:	; Goto 27
x30120:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary91 -> currBlockPtr currBlockPtr 2
x30122:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary91 -> currBlockPtr 0
x30125:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30129:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary93 -> prevBlockPtr prevBlockPtr 2
x30131:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary93 -> prevBlockPtr 0
x30134:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x30139:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary94 -> prevBlockPtr prevBlockPtr 2
x30141:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary95 -> currBlockPtr currBlockPtr 2
x30144:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary94 -> prevBlockPtr £temporary95 -> currBlockPtr
x30147:	mov ax, [di + 2]	; 3: 139 69 2
x30150:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x30153:	mov ax, [bp]	; 3: 139 70 0
x30156:	mov di, [bp + 4]	; 3: 139 126 4
x30159:	mov bp, [bp + 2]	; 3: 139 110 2
x30162:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x30164:	mov ax, [bp + 12]	; 3: 139 70 12
x30167:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary96 -> currBlockPtr currBlockPtr 2
x30170:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary96 -> currBlockPtr
x30173:	mov ax, [si + 2]	; 3: 139 68 2
x30176:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x30179:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x30181:	mov ax, [bp]	; 3: 139 70 0
x30184:	mov di, [bp + 4]	; 3: 139 126 4
x30187:	mov bp, [bp + 2]	; 3: 139 110 2
x30190:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x30192:	mov ax, [bp + 6]	; 3: 139 70 6
x30195:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x30198:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x30203:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x30208:	mov word [bp + 8], ftell$5	; 5: 199 70 8 14 118
x30213:	mov [bp + 10], bp	; 3: 137 110 10
x30216:	add bp, 8	; 3: 131 197 8
x30219:	jmp fseek	; 3: 233 217 231

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary945

ftell$7:	; SetReturnValue £temporary945

ftell$8:	; Return £temporary945
x30222:	mov ax, [bp]	; 3: 139 70 0
x30225:	mov di, [bp + 4]	; 3: 139 126 4
x30228:	mov bp, [bp + 2]	; 3: 139 110 2
x30231:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x30233:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary841 c
x30237:	mov si, bp	; 2: 137 238
x30239:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary841 6
x30242:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x30245:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x30250:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x30255:	mov ax, [bp + 6]	; 3: 139 70 6
x30258:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x30261:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 67 118
x30266:	mov [bp + 11], bp	; 3: 137 110 11
x30269:	add bp, 9	; 3: 131 197 9
x30272:	jmp fread	; 3: 233 188 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary842

fgetc$10:	; SignedLessThanEqual 14 £temporary842 0
x30275:	cmp bx, 0	; 3: 131 251 0
x30278:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary844 c
x30280:	mov bl, [bp + 8]	; 3: 138 94 8
x30283:	and bx, 255	; 4: 129 227 255 0
x30287:	cmp bl, 0	; 3: 128 251 0
x30290:	jge fgetc$12	; 2: 125 4
x30292:	neg bl	; 2: 246 219
x30294:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary844

fgetc$13:	; Return £temporary844
x30296:	mov ax, [bp]	; 3: 139 70 0
x30299:	mov di, [bp + 4]	; 3: 139 126 4
x30302:	mov bp, [bp + 2]	; 3: 139 110 2
x30305:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x30307:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x30310:	mov ax, [bp]	; 3: 139 70 0
x30313:	mov di, [bp + 4]	; 3: 139 126 4
x30316:	mov bp, [bp + 2]	; 3: 139 110 2
x30319:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

putchar:	; Assign g_outStatus 0
x30321:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

putchar$1:	; IntegralToIntegral £temporary1597 stdout
x30327:	mov ax, [stdout]	; 3: 161 100 13

putchar$2:	; Assign g_outDevice £temporary1597
x30330:	mov [g_outDevice], ax	; 3: 163 221 15

putchar$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

putchar$4:	; IntegralToIntegral £temporary1598 i
x30333:	mov ax, [bp + 6]	; 3: 139 70 6
x30336:	cmp ax, 0	; 3: 131 248 0
x30339:	jge putchar$5	; 2: 125 4
x30341:	neg ax	; 2: 247 216
x30343:	neg al	; 2: 246 216

putchar$5:	; Parameter 8 £temporary1598 6
x30345:	mov [bp + 14], al	; 3: 136 70 14

putchar$6:	; Call 8 printChar 0
x30348:	mov word [bp + 8], putchar$7	; 5: 199 70 8 154 118
x30353:	mov [bp + 10], bp	; 3: 137 110 10
x30356:	add bp, 8	; 3: 131 197 8
x30359:	jmp printChar	; 3: 233 180 165

putchar$7:	; PostCall 8

putchar$8:	; SetReturnValue 1
x30362:	mov bx, 1	; 3: 187 1 0

putchar$9:	; Return 1
x30365:	mov ax, [bp]	; 3: 139 70 0
x30368:	mov di, [bp + 4]	; 3: 139 126 4
x30371:	mov bp, [bp + 2]	; 3: 139 110 2
x30374:	jmp ax	; 2: 255 224

putchar$10:	; FunctionEnd putchar

time_test:	; Assign weekdays[0] string_Sun#
x30376:	mov word [bp + 6], @13554$string_Sun#	; 5: 199 70 6 136 121

time_test$1:	; Assign weekdays[1] string_Mon#
x30381:	mov word [bp + 8], @13555$string_Mon#	; 5: 199 70 8 140 121

time_test$2:	; Assign weekdays[2] string_Tue#
x30386:	mov word [bp + 10], @13556$string_Tue#	; 5: 199 70 10 144 121

time_test$3:	; Assign weekdays[3] string_Wed#
x30391:	mov word [bp + 12], @13557$string_Wed#	; 5: 199 70 12 148 121

time_test$4:	; Assign weekdays[4] string_Thu#
x30396:	mov word [bp + 14], @13558$string_Thu#	; 5: 199 70 14 152 121

time_test$5:	; Assign weekdays[5] string_Fri#
x30401:	mov word [bp + 16], @13559$string_Fri#	; 5: 199 70 16 156 121

time_test$6:	; Assign weekdays[6] string_Sat#
x30406:	mov word [bp + 18], @13560$string_Sat#	; 5: 199 70 18 160 121

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x30411:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x30416:	mov word [bp + 20], time_test$10	; 5: 199 70 20 222 118
x30421:	mov [bp + 22], bp	; 3: 137 110 22
x30424:	add bp, 20	; 3: 131 197 20
x30427:	jmp time	; 3: 233 219 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6238

time_test$12:	; Assign now1 £temporary6238
x30430:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6239 now1
x30434:	mov si, bp	; 2: 137 238
x30436:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6239 6
x30439:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x30442:	mov word [bp + 24], time_test$17	; 5: 199 70 24 248 118
x30447:	mov [bp + 26], bp	; 3: 137 110 26
x30450:	add bp, 24	; 3: 131 197 24
x30453:	jmp gmtime	; 3: 233 161 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6240

time_test$19:	; Deref £temporary6241 -> £temporary6240 £temporary6240 0

time_test$20:	; Assign s £temporary6241 -> £temporary6240
x30456:	mov si, bp	; 2: 137 238
x30458:	add si, 24	; 3: 131 198 24
x30461:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x30463:	mov ah, [bx]	; 2: 138 39
x30465:	mov [si], ah	; 2: 136 36
x30467:	inc bx	; 1: 67
x30468:	inc si	; 1: 70
x30469:	dec al	; 2: 254 200
x30471:	cmp al, 0	; 2: 60 0
x30473:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6242 now1
x30475:	mov si, bp	; 2: 137 238
x30477:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6242 6
x30480:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x30483:	mov word [bp + 42], time_test$25	; 5: 199 70 42 33 119
x30488:	mov [bp + 44], bp	; 3: 137 110 44
x30491:	add bp, 42	; 3: 131 197 42
x30494:	jmp localtime	; 3: 233 24 10

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6243

time_test$27:	; Deref £temporary6244 -> £temporary6243 £temporary6243 0

time_test$28:	; Assign t £temporary6244 -> £temporary6243
x30497:	mov si, bp	; 2: 137 238
x30499:	add si, 42	; 3: 131 198 42
x30502:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x30504:	mov ah, [bx]	; 2: 138 39
x30506:	mov [si], ah	; 2: 136 36
x30508:	inc bx	; 1: 67
x30509:	inc si	; 1: 70
x30510:	dec al	; 2: 254 200
x30512:	cmp al, 0	; 2: 60 0
x30514:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6245 s
x30516:	mov si, bp	; 2: 137 238
x30518:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6245 6
x30521:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x30524:	mov word [bp + 60], time_test$33	; 5: 199 70 60 74 119
x30529:	mov [bp + 62], bp	; 3: 137 110 62
x30532:	add bp, 60	; 3: 131 197 60
x30535:	jmp mktime	; 3: 233 78 6

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6246

time_test$35:	; Assign now2 £temporary6246
x30538:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x30542:	mov word [bp + 70], @13586$string_now2013A2025lu0A#	; 5: 199 70 70 164 121

time_test$38:	; Parameter 64 now1 8
x30547:	mov eax, [bp + 20]	; 4: 102 139 70 20
x30551:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x30555:	mov word [bp + 64], time_test$40	; 5: 199 70 64 110 119
x30560:	mov [bp + 66], bp	; 3: 137 110 66
x30563:	add bp, 64	; 3: 131 197 64
x30566:	mov di, bp	; 2: 137 239
x30568:	add di, 4	; 3: 131 199 4
x30571:	jmp printf	; 3: 233 150 149

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x30574:	mov word [bp + 70], @13588$string_now2023A2025lu0A#	; 5: 199 70 70 176 121

time_test$43:	; Parameter 64 now2 8
x30579:	mov eax, [bp + 60]	; 4: 102 139 70 60
x30583:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x30587:	mov word [bp + 64], time_test$45	; 5: 199 70 64 142 119
x30592:	mov [bp + 66], bp	; 3: 137 110 66
x30595:	add bp, 64	; 3: 131 197 64
x30598:	mov di, bp	; 2: 137 239
x30600:	add di, 4	; 3: 131 199 4
x30603:	jmp printf	; 3: 233 118 149

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30606:	mov word [bp + 70], @13590$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 188 121

time_test$48:	; SignedMultiply £temporary6251 s$tm_wday 2
x30611:	mov ax, [bp + 36]	; 3: 139 70 36
x30614:	xor dx, dx	; 2: 49 210
x30616:	imul word [@13593$int2$2#]	; 4: 247 46 29 122

time_test$49:	; BinaryAdd £temporary6252 weekdays £temporary6251
x30620:	mov si, bp	; 2: 137 238
x30622:	add si, 6	; 3: 131 198 6
x30625:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6250 -> £temporary6252 £temporary6252 0

time_test$51:	; Parameter 64 £temporary6250 -> £temporary6252 8
x30627:	mov ax, [si]	; 2: 139 4
x30629:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6254 s$tm_year 1900
x30632:	mov ax, [bp + 34]	; 3: 139 70 34
x30635:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6254 10
x30638:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6256 s$tm_mon 1
x30641:	mov ax, [bp + 32]	; 3: 139 70 32
x30644:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6256 12
x30645:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x30648:	mov ax, [bp + 30]	; 3: 139 70 30
x30651:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x30654:	mov ax, [bp + 28]	; 3: 139 70 28
x30657:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x30660:	mov ax, [bp + 26]	; 3: 139 70 26
x30663:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x30666:	mov ax, [bp + 24]	; 3: 139 70 24
x30669:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x30672:	mov ax, [bp + 38]	; 3: 139 70 38
x30675:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x30678:	mov ax, [bp + 36]	; 3: 139 70 36
x30681:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x30684:	mov ax, [bp + 40]	; 3: 139 70 40
x30687:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x30690:	mov word [bp + 64], time_test$64	; 5: 199 70 64 245 119
x30695:	mov [bp + 66], bp	; 3: 137 110 66
x30698:	add bp, 64	; 3: 131 197 64
x30701:	mov di, bp	; 2: 137 239
x30703:	add di, 20	; 3: 131 199 20
x30706:	jmp printf	; 3: 233 15 149

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30709:	mov word [bp + 70], @13612$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 31 122

time_test$67:	; SignedMultiply £temporary6267 t$tm_wday 2
x30714:	mov ax, [bp + 54]	; 3: 139 70 54
x30717:	xor dx, dx	; 2: 49 210
x30719:	imul word [@13615$int2$2#]	; 4: 247 46 128 122

time_test$68:	; BinaryAdd £temporary6268 weekdays £temporary6267
x30723:	mov si, bp	; 2: 137 238
x30725:	add si, 6	; 3: 131 198 6
x30728:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6266 -> £temporary6268 £temporary6268 0

time_test$70:	; Parameter 64 £temporary6266 -> £temporary6268 8
x30730:	mov ax, [si]	; 2: 139 4
x30732:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6270 t$tm_year 1900
x30735:	mov ax, [bp + 52]	; 3: 139 70 52
x30738:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6270 10
x30741:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6272 t$tm_mon 1
x30744:	mov ax, [bp + 50]	; 3: 139 70 50
x30747:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6272 12
x30748:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x30751:	mov ax, [bp + 48]	; 3: 139 70 48
x30754:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x30757:	mov ax, [bp + 46]	; 3: 139 70 46
x30760:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x30763:	mov ax, [bp + 44]	; 3: 139 70 44
x30766:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x30769:	mov ax, [bp + 42]	; 3: 139 70 42
x30772:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x30775:	mov ax, [bp + 56]	; 3: 139 70 56
x30778:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x30781:	mov ax, [bp + 54]	; 3: 139 70 54
x30784:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x30787:	mov ax, [bp + 58]	; 3: 139 70 58
x30790:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x30793:	mov word [bp + 64], time_test$83	; 5: 199 70 64 92 120
x30798:	mov [bp + 66], bp	; 3: 137 110 66
x30801:	add bp, 64	; 3: 131 197 64
x30804:	mov di, bp	; 2: 137 239
x30806:	add di, 20	; 3: 131 199 20
x30809:	jmp printf	; 3: 233 168 148

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 666 buffer1 6
x30812:	mov [bp + 672], bp	; 4: 137 174 160 2
x30816:	add word [bp + 672], 64	; 5: 131 134 160 2 64

time_test$86:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6281 s
x30821:	mov si, bp	; 2: 137 238
x30823:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 666 £temporary6281 14
x30826:	mov [bp + 680], si	; 4: 137 182 168 2

time_test$89:	; Call 666 asctime 8
x30830:	mov word [bp + 674], time_test$90	; 6: 199 134 162 2 127 120
x30836:	mov [bp + 676], bp	; 4: 137 174 164 2
x30840:	add bp, 674	; 4: 129 197 162 2
x30844:	jmp asctime	; 3: 233 79 9

time_test$90:	; PostCall 666

time_test$91:	; GetReturnValue £temporary6282

time_test$92:	; Parameter 666 £temporary6282 8
x30847:	mov [bp + 674], bx	; 4: 137 158 162 2

time_test$93:	; Call 666 strcpy 0
x30851:	mov word [bp + 666], time_test$94	; 6: 199 134 154 2 148 120
x30857:	mov [bp + 668], bp	; 4: 137 174 156 2
x30861:	add bp, 666	; 4: 129 197 154 2
x30865:	jmp strcpy	; 3: 233 188 229

time_test$94:	; PostCall 666

time_test$95:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 666 buffer2 6
x30868:	mov [bp + 672], bp	; 4: 137 174 160 2
x30872:	add word [bp + 672], 164	; 6: 129 134 160 2 164 0

time_test$97:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6284 now1
x30878:	mov si, bp	; 2: 137 238
x30880:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 666 £temporary6284 14
x30883:	mov [bp + 680], si	; 4: 137 182 168 2

time_test$100:	; Call 666 ctime 8
x30887:	mov word [bp + 674], time_test$101	; 6: 199 134 162 2 184 120
x30893:	mov [bp + 676], bp	; 4: 137 174 164 2
x30897:	add bp, 674	; 4: 129 197 162 2
x30901:	jmp ctime	; 3: 233 220 11

time_test$101:	; PostCall 666

time_test$102:	; GetReturnValue £temporary6285

time_test$103:	; Parameter 666 £temporary6285 8
x30904:	mov [bp + 674], bx	; 4: 137 158 162 2

time_test$104:	; Call 666 strcpy 0
x30908:	mov word [bp + 666], time_test$105	; 6: 199 134 154 2 205 120
x30914:	mov [bp + 668], bp	; 4: 137 174 156 2
x30918:	add bp, 666	; 4: 129 197 154 2
x30922:	jmp strcpy	; 3: 233 131 229

time_test$105:	; PostCall 666

time_test$106:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 666 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x30925:	mov word [bp + 672], @13650$string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 160 2 130 122

time_test$108:	; Parameter 666 buffer1 8
x30931:	mov [bp + 674], bp	; 4: 137 174 162 2
x30935:	add word [bp + 674], 64	; 5: 131 134 162 2 64

time_test$109:	; Parameter 666 buffer2 10
x30940:	mov [bp + 676], bp	; 4: 137 174 164 2
x30944:	add word [bp + 676], 164	; 6: 129 134 164 2 164 0

time_test$110:	; Call 666 printf 0
x30950:	mov word [bp + 666], time_test$111	; 6: 199 134 154 2 252 120
x30956:	mov [bp + 668], bp	; 4: 137 174 156 2
x30960:	add bp, 666	; 4: 129 197 154 2
x30964:	mov di, bp	; 2: 137 239
x30966:	add di, 4	; 3: 131 199 4
x30969:	jmp printf	; 3: 233 8 148

time_test$111:	; PostCall 666

time_test$112:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 666 buffer 6
x30972:	mov [bp + 672], bp	; 4: 137 174 160 2
x30976:	add word [bp + 672], 264	; 6: 129 134 160 2 8 1

time_test$114:	; Parameter 666 400 8
x30982:	mov word [bp + 674], 400	; 6: 199 134 162 2 144 1

time_test$115:	; Parameter 666 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z# 10
x30988:	mov word [bp + 676], @13654$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z#	; 6: 199 134 164 2 156 122

time_test$116:	; address £temporary6288 t
x30994:	mov si, bp	; 2: 137 238
x30996:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 666 £temporary6288 12
x30999:	mov [bp + 678], si	; 4: 137 182 166 2

time_test$118:	; Call 666 strftime 0
x31003:	mov word [bp + 666], time_test$119	; 6: 199 134 154 2 44 121
x31009:	mov [bp + 668], bp	; 4: 137 174 156 2
x31013:	add bp, 666	; 4: 129 197 154 2
x31017:	jmp strftime	; 3: 233 152 11

time_test$119:	; PostCall 666

time_test$120:	; GetReturnValue £temporary6289

time_test$121:	; Assign i £temporary6289
x31020:	mov [bp + 664], bx	; 4: 137 158 152 2

time_test$122:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 666 string_strftime2025i2025i203C25s3E0A# 6
x31024:	mov word [bp + 672], @13658$string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 160 2 164 123

time_test$124:	; Parameter 666 i 8
x31030:	mov ax, [bp + 664]	; 4: 139 134 152 2
x31034:	mov [bp + 674], ax	; 4: 137 134 162 2

time_test$125:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 666 buffer 16
x31038:	mov [bp + 682], bp	; 4: 137 174 170 2
x31042:	add word [bp + 682], 264	; 6: 129 134 170 2 8 1

time_test$127:	; Call 666 strlen 10
x31048:	mov word [bp + 676], time_test$128	; 6: 199 134 164 2 89 121
x31054:	mov [bp + 678], bp	; 4: 137 174 166 2
x31058:	add bp, 676	; 4: 129 197 164 2
x31062:	jmp strlen	; 3: 233 181 19

time_test$128:	; PostCall 666

time_test$129:	; GetReturnValue £temporary6290

time_test$130:	; Parameter 666 £temporary6290 10
x31065:	mov [bp + 676], bx	; 4: 137 158 164 2

time_test$131:	; Parameter 666 buffer 12
x31069:	mov [bp + 678], bp	; 4: 137 174 166 2
x31073:	add word [bp + 678], 264	; 6: 129 134 166 2 8 1

time_test$132:	; Call 666 printf 0
x31079:	mov word [bp + 666], time_test$133	; 6: 199 134 154 2 125 121
x31085:	mov [bp + 668], bp	; 4: 137 174 156 2
x31089:	add bp, 666	; 4: 129 197 154 2
x31093:	mov di, bp	; 2: 137 239
x31095:	add di, 6	; 3: 131 199 6
x31098:	jmp printf	; 3: 233 135 147

time_test$133:	; PostCall 666

time_test$134:	; Return 0
x31101:	mov ax, [bp]	; 3: 139 70 0
x31104:	mov di, [bp + 4]	; 3: 139 126 4
x31107:	mov bp, [bp + 2]	; 3: 139 110 2
x31110:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

@13554$string_Sun#:
x31112:	db "Sun", 0	; 4: 83 117 110 0

@13555$string_Mon#:
x31116:	db "Mon", 0	; 4: 77 111 110 0

@13556$string_Tue#:
x31120:	db "Tue", 0	; 4: 84 117 101 0

@13557$string_Wed#:
x31124:	db "Wed", 0	; 4: 87 101 100 0

@13558$string_Thu#:
x31128:	db "Thu", 0	; 4: 84 104 117 0

@13559$string_Fri#:
x31132:	db "Fri", 0	; 4: 70 114 105 0

@13560$string_Sat#:
x31136:	db "Sat", 0	; 4: 83 97 116 0

@13586$string_now2013A2025lu0A#:
x31140:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

@13588$string_now2023A2025lu0A#:
x31152:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

@13590$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31164:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13593$int2$2#:
x31261:	dw 2	; 2: 2 0

@13612$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31263:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13615$int2$2#:
x31360:	dw 2	; 2: 2 0

@13650$string_asctime203C25s3E2C20ctime203C25s3E0A#:
x31362:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

@13654$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z#:
x31388:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y, summer/winter %Z", 0	; 264: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 44 32 115 117 109 109 101 114 47 119 105 110 116 101 114 32 37 90 0

@13658$string_strftime2025i2025i203C25s3E0A#:
x31652:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; AssignRegister ah 42
x31673:	mov ah, 42	; 2: 180 42

time$1:	; Interrupt 33
x31675:	int 33	; 2: 205 33

time$2:	; InspectRegister £temporary3248 cx

time$3:	; BinarySubtract year £temporary3248 1900
x31677:	sub cx, 1900	; 4: 129 233 108 7
x31681:	mov [bp + 12], cx	; 3: 137 78 12

time$4:	; InspectRegister £temporary3250 dh

time$5:	; BinarySubtract month £temporary3250 1
x31684:	dec dh	; 2: 254 206
x31686:	mov [bp + 14], dh	; 3: 136 118 14

time$6:	; InspectRegister £temporary3252 dl

time$7:	; Assign monthDay £temporary3252
x31689:	mov [bp + 15], dl	; 3: 136 86 15

time$8:	; AssignRegister ah 44
x31692:	mov ah, 44	; 2: 180 44

time$9:	; Interrupt 33
x31694:	int 33	; 2: 205 33

time$10:	; InspectRegister £temporary3254 ch

time$11:	; Assign hour £temporary3254
x31696:	mov [bp + 16], ch	; 3: 136 110 16

time$12:	; InspectRegister £temporary3255 cl

time$13:	; Assign min £temporary3255
x31699:	mov [bp + 17], cl	; 3: 136 78 17

time$14:	; InspectRegister £temporary3256 dh

time$15:	; Assign sec £temporary3256
x31702:	mov [bp + 18], dh	; 3: 136 118 18

time$16:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$17:	; Call 19 localeconv 0
x31705:	mov word [bp + 19], time$18	; 5: 199 70 19 231 123
x31710:	mov [bp + 21], bp	; 3: 137 110 21
x31713:	add bp, 19	; 3: 131 197 19
x31716:	jmp localeconv	; 3: 233 145 162

time$18:	; PostCall 19

time$19:	; GetReturnValue £temporary3257

time$20:	; Assign localeConvPtr £temporary3257
x31719:	mov [bp + 19], bx	; 3: 137 94 19

time$21:	; Equal 27 localeConvPtr 0
x31722:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x31726:	je time$27	; 2: 116 32

time$22:	; IntegralToIntegral £temporary3260 hour
x31728:	mov al, [bp + 16]	; 3: 138 70 16
x31731:	and ax, 255	; 3: 37 255 0
x31734:	cmp al, 0	; 2: 60 0
x31736:	jge time$23	; 2: 125 4
x31738:	neg al	; 2: 246 216
x31740:	neg ax	; 2: 247 216

time$23:	; Deref £temporary3259 -> localeConvPtr localeConvPtr 2
x31742:	mov si, [bp + 19]	; 3: 139 118 19

time$24:	; BinarySubtract £temporary3261 £temporary3260 £temporary3259 -> localeConvPtr
x31745:	sub ax, [si + 2]	; 3: 43 68 2

time$25:	; IntegralToIntegral £temporary3262 £temporary3261
x31748:	cmp ax, 0	; 3: 131 248 0
x31751:	jge time$26	; 2: 125 4
x31753:	neg ax	; 2: 247 216
x31755:	neg al	; 2: 246 216

time$26:	; Assign hour £temporary3262
x31757:	mov [bp + 16], al	; 3: 136 70 16

time$27:	; Assign daysOfMonths[0] 31
x31760:	mov word [bp + 19], 31	; 5: 199 70 19 31 0

time$28:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$29:	; Parameter 21 year 6
x31765:	mov ax, [bp + 12]	; 3: 139 70 12
x31768:	mov [bp + 27], ax	; 3: 137 70 27

time$30:	; Call 21 isLeapYear 0
x31771:	mov word [bp + 21], time$31	; 5: 199 70 21 41 124
x31776:	mov [bp + 23], bp	; 3: 137 110 23
x31779:	add bp, 21	; 3: 131 197 21
x31782:	jmp @7454$isLeapYear	; 3: 233 44 1

time$31:	; PostCall 21

time$32:	; GetReturnValue £temporary3263

time$33:	; Equal 36 £temporary3263 0
x31785:	cmp bx, 0	; 3: 131 251 0
x31788:	je time$36	; 2: 116 5

time$34:	; Assign £temporary3268 29
x31790:	mov ax, 29	; 3: 184 29 0

time$35:	; Goto 37
x31793:	jmp time$37	; 2: 235 3

time$36:	; Assign £temporary3268 28
x31795:	mov ax, 28	; 3: 184 28 0

time$37:	; Assign daysOfMonths[1] £temporary3268
x31798:	mov [bp + 21], ax	; 3: 137 70 21

time$38:	; Assign daysOfMonths[2] 31
x31801:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$39:	; Assign daysOfMonths[3] 30
x31806:	mov word [bp + 25], 30	; 5: 199 70 25 30 0

time$40:	; Assign daysOfMonths[4] 31
x31811:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$41:	; Assign daysOfMonths[5] 30
x31816:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$42:	; Assign daysOfMonths[6] 31
x31821:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$43:	; Assign daysOfMonths[7] 31
x31826:	mov word [bp + 33], 31	; 5: 199 70 33 31 0

time$44:	; Assign daysOfMonths[8] 30
x31831:	mov word [bp + 35], 30	; 5: 199 70 35 30 0

time$45:	; Assign daysOfMonths[9] 31
x31836:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$46:	; Assign daysOfMonths[10] 30
x31841:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$47:	; Assign daysOfMonths[11] 31
x31846:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$48:	; IntegralToIntegral £temporary3281 monthDay
x31851:	mov al, [bp + 15]	; 3: 138 70 15
x31854:	and ax, 255	; 3: 37 255 0
x31857:	cmp al, 0	; 2: 60 0
x31859:	jge time$49	; 2: 125 4
x31861:	neg al	; 2: 246 216
x31863:	neg ax	; 2: 247 216

time$49:	; BinarySubtract yearDay £temporary3281 1
x31865:	dec ax	; 1: 72
x31866:	mov [bp + 43], ax	; 3: 137 70 43

time$50:	; Assign monthIndex 0
x31869:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

time$51:	; IntegralToIntegral £temporary3283 month
x31874:	mov al, [bp + 14]	; 3: 138 70 14
x31877:	and ax, 255	; 3: 37 255 0
x31880:	cmp al, 0	; 2: 60 0
x31882:	jge time$52	; 2: 125 4
x31884:	neg al	; 2: 246 216
x31886:	neg ax	; 2: 247 216

time$52:	; SignedGreaterThanEqual 59 monthIndex £temporary3283
x31888:	cmp [bp + 45], ax	; 3: 57 70 45
x31891:	jge time$59	; 2: 125 26

time$53:	; SignedMultiply £temporary3287 monthIndex 2
x31893:	mov ax, [bp + 45]	; 3: 139 70 45
x31896:	xor dx, dx	; 2: 49 210
x31898:	imul word [@7578$int2$2#]	; 4: 247 46 83 125

time$54:	; BinaryAdd £temporary3288 daysOfMonths £temporary3287
x31902:	mov si, bp	; 2: 137 238
x31904:	add si, 19	; 3: 131 198 19
x31907:	add si, ax	; 2: 1 198

time$55:	; Deref £temporary3286 -> £temporary3288 £temporary3288 0

time$56:	; BinaryAdd yearDay yearDay £temporary3286 -> £temporary3288
x31909:	mov ax, [si]	; 2: 139 4
x31911:	add [bp + 43], ax	; 3: 1 70 43

time$57:	; Increment monthIndex
x31914:	inc word [bp + 45]	; 3: 255 70 45

time$58:	; Goto 51
x31917:	jmp time$51	; 2: 235 211

time$59:	; IntegralToIntegral £temporary3291 sec
x31919:	mov al, [bp + 18]	; 3: 138 70 18
x31922:	and ax, 255	; 3: 37 255 0
x31925:	cmp al, 0	; 2: 60 0
x31927:	jge time$60	; 2: 125 4
x31929:	neg al	; 2: 246 216
x31931:	neg ax	; 2: 247 216

time$60:	; Assign s$tm_sec £temporary3291
x31933:	mov [bp + 47], ax	; 3: 137 70 47

time$61:	; IntegralToIntegral £temporary3293 min
x31936:	mov al, [bp + 17]	; 3: 138 70 17
x31939:	and ax, 255	; 3: 37 255 0
x31942:	cmp al, 0	; 2: 60 0
x31944:	jge time$62	; 2: 125 4
x31946:	neg al	; 2: 246 216
x31948:	neg ax	; 2: 247 216

time$62:	; Assign s$tm_min £temporary3293
x31950:	mov [bp + 49], ax	; 3: 137 70 49

time$63:	; IntegralToIntegral £temporary3295 hour
x31953:	mov al, [bp + 16]	; 3: 138 70 16
x31956:	and ax, 255	; 3: 37 255 0
x31959:	cmp al, 0	; 2: 60 0
x31961:	jge time$64	; 2: 125 4
x31963:	neg al	; 2: 246 216
x31965:	neg ax	; 2: 247 216

time$64:	; Assign s$tm_hour £temporary3295
x31967:	mov [bp + 51], ax	; 3: 137 70 51

time$65:	; IntegralToIntegral £temporary3297 monthDay
x31970:	mov al, [bp + 15]	; 3: 138 70 15
x31973:	and ax, 255	; 3: 37 255 0
x31976:	cmp al, 0	; 2: 60 0
x31978:	jge time$66	; 2: 125 4
x31980:	neg al	; 2: 246 216
x31982:	neg ax	; 2: 247 216

time$66:	; Assign s$tm_mday £temporary3297
x31984:	mov [bp + 53], ax	; 3: 137 70 53

time$67:	; IntegralToIntegral £temporary3299 month
x31987:	mov al, [bp + 14]	; 3: 138 70 14
x31990:	and ax, 255	; 3: 37 255 0
x31993:	cmp al, 0	; 2: 60 0
x31995:	jge time$68	; 2: 125 4
x31997:	neg al	; 2: 246 216
x31999:	neg ax	; 2: 247 216

time$68:	; Assign s$tm_mon £temporary3299
x32001:	mov [bp + 55], ax	; 3: 137 70 55

time$69:	; Assign s$tm_year year
x32004:	mov ax, [bp + 12]	; 3: 139 70 12
x32007:	mov [bp + 57], ax	; 3: 137 70 57

time$70:	; Assign s$tm_wday 0
x32010:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

time$71:	; Assign s$tm_yday yearDay
x32015:	mov ax, [bp + 43]	; 3: 139 70 43
x32018:	mov [bp + 61], ax	; 3: 137 70 61

time$72:	; Assign s$tm_isdst 0
x32021:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$73:	; CallHeader 65 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$74:	; address £temporary3304 s
x32026:	mov si, bp	; 2: 137 238
x32028:	add si, 47	; 3: 131 198 47

time$75:	; Parameter 65 £temporary3304 6
x32031:	mov [bp + 71], si	; 3: 137 118 71

time$76:	; Call 65 mktime 0
x32034:	mov word [bp + 65], time$77	; 5: 199 70 65 48 125
x32039:	mov [bp + 67], bp	; 3: 137 110 67
x32042:	add bp, 65	; 3: 131 197 65
x32045:	nop	; 1: 144
x32046:	jmp mktime	; 2: 235 104

time$77:	; PostCall 65

time$78:	; GetReturnValue £temporary3305

time$79:	; Assign time £temporary3305
x32048:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$80:	; Equal 83 timePtr 0
x32052:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32056:	je time$83	; 2: 116 10

time$81:	; Deref £temporary3307 -> timePtr timePtr 0
x32058:	mov si, [bp + 6]	; 3: 139 118 6

time$82:	; Assign £temporary3307 -> timePtr time
x32061:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32065:	mov [si], eax	; 3: 102 137 4

time$83:	; SetReturnValue time
x32068:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$84:	; Return time
x32072:	mov ax, [bp]	; 3: 139 70 0
x32075:	mov di, [bp + 4]	; 3: 139 126 4
x32078:	mov bp, [bp + 2]	; 3: 139 110 2
x32081:	jmp ax	; 2: 255 224

time$85:	; FunctionEnd time

@7578$int2$2#:
x32083:	dw 2	; 2: 2 0

@7454$isLeapYear:	; SignedModulo £temporary3238 year 4
x32085:	mov ax, [bp + 6]	; 3: 139 70 6
x32088:	xor dx, dx	; 2: 49 210
x32090:	idiv word [@7456$int2$4#]	; 4: 247 62 146 125

@7454$isLeapYear$1:	; NotEqual 4 £temporary3238 0
x32094:	cmp dx, 0	; 3: 131 250 0
x32097:	jne @7454$isLeapYear$4	; 2: 117 14

@7454$isLeapYear$2:	; SignedModulo £temporary3240 year 100
x32099:	mov ax, [bp + 6]	; 3: 139 70 6
x32102:	xor dx, dx	; 2: 49 210
x32104:	idiv word [@7462$int2$100#]	; 4: 247 62 148 125

@7454$isLeapYear$3:	; NotEqual 6 £temporary3240 0
x32108:	cmp dx, 0	; 3: 131 250 0
x32111:	jne @7454$isLeapYear$6	; 2: 117 14

@7454$isLeapYear$4:	; SignedModulo £temporary3243 year 400
x32113:	mov ax, [bp + 6]	; 3: 139 70 6
x32116:	xor dx, dx	; 2: 49 210
x32118:	idiv word [@7469$int2$400#]	; 4: 247 62 150 125

@7454$isLeapYear$5:	; NotEqual 8 £temporary3243 0
x32122:	cmp dx, 0	; 3: 131 250 0
x32125:	jne @7454$isLeapYear$8	; 2: 117 5

@7454$isLeapYear$6:	; Assign £temporary3246 1
x32127:	mov bx, 1	; 3: 187 1 0

@7454$isLeapYear$7:	; Goto 9
x32130:	jmp @7454$isLeapYear$9	; 2: 235 3

@7454$isLeapYear$8:	; Assign £temporary3246 0
x32132:	mov bx, 0	; 3: 187 0 0

@7454$isLeapYear$9:	; SetReturnValue £temporary3246

@7454$isLeapYear$10:	; Return £temporary3246
x32135:	mov ax, [bp]	; 3: 139 70 0
x32138:	mov di, [bp + 4]	; 3: 139 126 4
x32141:	mov bp, [bp + 2]	; 3: 139 110 2
x32144:	jmp ax	; 2: 255 224

@7454$isLeapYear$11:	; FunctionEnd isLeapYear

@7456$int2$4#:
x32146:	dw 4	; 2: 4 0

@7462$int2$100#:
x32148:	dw 100	; 2: 100 0

@7469$int2$400#:
x32150:	dw 400	; 2: 144 1

mktime:	; Equal 28 tp 0
x32152:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32156:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3312 -> tp tp 10
x32160:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3313 £temporary3312 -> tp 69
x32163:	mov ax, [si + 10]	; 3: 139 68 10
x32166:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3314 £temporary3313 4
x32169:	xor dx, dx	; 2: 49 210
x32171:	idiv word [@7621$int2$4#]	; 4: 247 62 137 126

mktime$4:	; IntegralToIntegral £temporary3315 £temporary3314
x32175:	and eax, 65535	; 6: 102 37 255 255 0 0
x32181:	cmp ax, 0	; 3: 131 248 0
x32184:	jge mktime$5	; 2: 125 5
x32186:	neg ax	; 2: 247 216
x32188:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3315
x32191:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3316 -> tp tp 10
x32195:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3317 £temporary3316 -> tp 70
x32198:	mov ax, [si + 10]	; 3: 139 68 10
x32201:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3318 £temporary3317 365
x32204:	xor dx, dx	; 2: 49 210
x32206:	imul word [@7630$int2$365#]	; 4: 247 46 139 126

mktime$9:	; IntegralToIntegral £temporary3319 £temporary3318
x32210:	and eax, 65535	; 6: 102 37 255 255 0 0
x32216:	cmp ax, 0	; 3: 131 248 0
x32219:	jge mktime$10	; 2: 125 5
x32221:	neg ax	; 2: 247 216
x32223:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3320 £temporary3319 leapDays
x32226:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3321 -> tp tp 14
x32230:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3322 £temporary3321 -> tp
x32233:	mov bx, [si + 14]	; 3: 139 92 14
x32236:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x32243:	cmp bx, 0	; 3: 131 251 0
x32246:	jge mktime$13	; 2: 125 5
x32248:	neg bx	; 2: 247 219
x32250:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3320 £temporary3322
x32253:	add eax, ebx	; 3: 102 1 216
x32256:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3324 totalDays 86400
x32260:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32264:	xor edx, edx	; 3: 102 49 210
x32267:	imul dword [@7639$int4$86400#]	; 5: 102 247 46 141 126
x32272:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3325 -> tp tp 4
x32275:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3326 £temporary3325 -> tp
x32278:	mov ax, [si + 4]	; 3: 139 68 4
x32281:	and eax, 65535	; 6: 102 37 255 255 0 0
x32287:	cmp ax, 0	; 3: 131 248 0
x32290:	jge mktime$17	; 2: 125 5
x32292:	neg ax	; 2: 247 216
x32294:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3327 £temporary3326 3600
x32297:	xor edx, edx	; 3: 102 49 210
x32300:	imul dword [@7643$int4$3600#]	; 5: 102 247 46 145 126

mktime$18:	; BinaryAdd £temporary3328 £temporary3324 £temporary3327
x32305:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3329 -> tp tp 2
x32308:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3330 £temporary3329 -> tp
x32311:	mov ax, [si + 2]	; 3: 139 68 2
x32314:	and eax, 65535	; 6: 102 37 255 255 0 0
x32320:	cmp ax, 0	; 3: 131 248 0
x32323:	jge mktime$21	; 2: 125 5
x32325:	neg ax	; 2: 247 216
x32327:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3331 £temporary3330 60
x32330:	xor edx, edx	; 3: 102 49 210
x32333:	imul dword [@7649$int4$60#]	; 5: 102 247 46 149 126

mktime$22:	; BinaryAdd £temporary3332 £temporary3328 £temporary3331
x32338:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3333 -> tp tp 0
x32341:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3334 £temporary3333 -> tp
x32344:	mov ax, [si]	; 2: 139 4
x32346:	and eax, 65535	; 6: 102 37 255 255 0 0
x32352:	cmp ax, 0	; 3: 131 248 0
x32355:	jge mktime$25	; 2: 125 5
x32357:	neg ax	; 2: 247 216
x32359:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3335 £temporary3332 £temporary3334
x32362:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3335

mktime$27:	; Return £temporary3335
x32365:	mov ax, [bp]	; 3: 139 70 0
x32368:	mov di, [bp + 4]	; 3: 139 126 4
x32371:	mov bp, [bp + 2]	; 3: 139 110 2
x32374:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x32376:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x32382:	mov ax, [bp]	; 3: 139 70 0
x32385:	mov di, [bp + 4]	; 3: 139 126 4
x32388:	mov bp, [bp + 2]	; 3: 139 110 2
x32391:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

@7621$int2$4#:
x32393:	dw 4	; 2: 4 0

@7630$int2$365#:
x32395:	dw 365	; 2: 109 1

@7639$int4$86400#:
x32397:	dd 86400	; 4: 128 81 1 0

@7643$int4$3600#:
x32401:	dd 3600	; 4: 16 14 0 0

@7649$int4$60#:
x32405:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x32409:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32413:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3337 -> timePtr timePtr 0
x32417:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3337 -> timePtr
x32420:	mov eax, [si]	; 3: 102 139 4
x32423:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x32427:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32431:	xor edx, edx	; 3: 102 49 210
x32434:	idiv dword [@7667$int4$86400#]	; 5: 102 247 62 253 128
x32439:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x32443:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32447:	xor edx, edx	; 3: 102 49 210
x32450:	idiv dword [@7671$int4$3600#]	; 5: 102 247 62 1 129
x32455:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3341 secondsOfDay 3600
x32459:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32463:	xor edx, edx	; 3: 102 49 210
x32466:	idiv dword [@7676$int4$3600#]	; 5: 102 247 62 5 129

gmtime$6:	; IntegralToIntegral £temporary3342 £temporary3341
x32471:	cmp eax, 0	; 4: 102 131 248 0
x32475:	jge gmtime$7	; 2: 125 5
x32477:	neg eax	; 3: 102 247 216
x32480:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3342
x32482:	mov [@7659$g_timeStruct + 4], ax	; 3: 163 13 129

gmtime$8:	; SignedDivide £temporary3344 secondsOfHour 60
x32485:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32489:	xor edx, edx	; 3: 102 49 210
x32492:	idiv dword [@7681$int4$60#]	; 5: 102 247 62 27 129

gmtime$9:	; IntegralToIntegral £temporary3345 £temporary3344
x32497:	cmp eax, 0	; 4: 102 131 248 0
x32501:	jge gmtime$10	; 2: 125 5
x32503:	neg eax	; 3: 102 247 216
x32506:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3345
x32508:	mov [@7659$g_timeStruct + 2], ax	; 3: 163 11 129

gmtime$11:	; SignedModulo £temporary3347 secondsOfHour 60
x32511:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32515:	xor edx, edx	; 3: 102 49 210
x32518:	idiv dword [@7686$int4$60#]	; 5: 102 247 62 31 129

gmtime$12:	; IntegralToIntegral £temporary3348 £temporary3347
x32523:	cmp edx, 0	; 4: 102 131 250 0
x32527:	jge gmtime$13	; 2: 125 5
x32529:	neg edx	; 3: 102 247 218
x32532:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3348
x32534:	mov [@7659$g_timeStruct], dx	; 4: 137 22 9 129

gmtime$14:	; SignedDivide totalDays time 86400
x32538:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32542:	xor edx, edx	; 3: 102 49 210
x32545:	idiv dword [@7690$int4$86400#]	; 5: 102 247 62 35 129
x32550:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x32554:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x32559:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3352 totalDays 4
x32561:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32565:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3353 £temporary3352
x32569:	cmp eax, 0	; 4: 102 131 248 0
x32573:	jge gmtime$18	; 2: 125 5
x32575:	neg eax	; 3: 102 247 216
x32578:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3353
x32580:	mov [@7659$g_timeStruct + 12], ax	; 3: 163 21 129

gmtime$19:	; Goto 24
x32583:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3355 totalDays 3
x32585:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32589:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3356 £temporary3355 7
x32593:	xor edx, edx	; 3: 102 49 210
x32596:	idiv dword [@7706$int4$7#]	; 5: 102 247 62 39 129

gmtime$22:	; IntegralToIntegral £temporary3357 £temporary3356
x32601:	cmp edx, 0	; 4: 102 131 250 0
x32605:	jge gmtime$23	; 2: 125 5
x32607:	neg edx	; 3: 102 247 218
x32610:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3357
x32612:	mov [@7659$g_timeStruct + 12], dx	; 4: 137 22 21 129

gmtime$24:	; SignedDivide £temporary3358 totalDays 365
x32616:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32620:	xor edx, edx	; 3: 102 49 210
x32623:	idiv dword [@7711$int4$365#]	; 5: 102 247 62 43 129

gmtime$25:	; BinaryAdd £temporary3359 £temporary3358 1970
x32628:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3360 £temporary3359
x32634:	cmp eax, 0	; 4: 102 131 248 0
x32638:	jge gmtime$27	; 2: 125 5
x32640:	neg eax	; 3: 102 247 216
x32643:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3360
x32645:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3361 year 1969
x32648:	mov ax, [bp + 24]	; 3: 139 70 24
x32651:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3361 4
x32654:	xor dx, dx	; 2: 49 210
x32656:	idiv word [@7721$int2$4#]	; 4: 247 62 47 129
x32660:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x32663:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32667:	xor edx, edx	; 3: 102 49 210
x32670:	idiv dword [@7725$int4$365#]	; 5: 102 247 62 49 129
x32675:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3364 leapDays
x32679:	mov ax, [bp + 26]	; 3: 139 70 26
x32682:	and eax, 65535	; 6: 102 37 255 255 0 0
x32688:	cmp ax, 0	; 3: 131 248 0
x32691:	jge gmtime$32	; 2: 125 5
x32693:	neg ax	; 2: 247 216
x32695:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3364
x32698:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x32702:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x32707:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x32709:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x32712:	mov ax, [bp + 24]	; 3: 139 70 24
x32715:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x32718:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 220 127
x32723:	mov [bp + 30], bp	; 3: 137 110 30
x32726:	add bp, 28	; 3: 131 197 28
x32729:	jmp @7454$isLeapYear	; 3: 233 121 253

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3368

gmtime$40:	; Equal 43 £temporary3368 0
x32732:	cmp bx, 0	; 3: 131 251 0
x32735:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x32737:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x32745:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x32747:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x32755:	mov ax, [bp + 24]	; 3: 139 70 24
x32758:	sub ax, 1900	; 3: 45 108 7
x32761:	mov [@7659$g_timeStruct + 10], ax	; 3: 163 19 129

gmtime$45:	; IntegralToIntegral £temporary3375 totalDays
x32764:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32768:	cmp eax, 0	; 4: 102 131 248 0
x32772:	jge gmtime$46	; 2: 125 5
x32774:	neg eax	; 3: 102 247 216
x32777:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3375
x32779:	mov [@7659$g_timeStruct + 14], ax	; 3: 163 23 129

gmtime$47:	; Assign daysOfMonths[0] 31
x32782:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x32787:	mov ax, [bp + 24]	; 3: 139 70 24
x32790:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x32793:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 39 128
x32798:	mov [bp + 32], bp	; 3: 137 110 32
x32801:	add bp, 30	; 3: 131 197 30
x32804:	jmp @7454$isLeapYear	; 3: 233 46 253

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3376

gmtime$53:	; Equal 56 £temporary3376 0
x32807:	cmp bx, 0	; 3: 131 251 0
x32810:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3381 29
x32812:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x32815:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3381 28
x32817:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3381
x32820:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x32823:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x32828:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x32833:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x32838:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x32843:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x32848:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x32853:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x32858:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x32863:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x32868:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x32873:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; SignedMultiply £temporary3395 month 2
x32878:	mov ax, [bp + 52]	; 3: 139 70 52
x32881:	xor dx, dx	; 2: 49 210
x32883:	imul word [@7802$int2$2#]	; 4: 247 46 53 129

gmtime$70:	; BinaryAdd £temporary3396 daysOfMonths £temporary3395
x32887:	mov si, bp	; 2: 137 238
x32889:	add si, 28	; 3: 131 198 28
x32892:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3394 -> £temporary3396 £temporary3396 0

gmtime$72:	; IntegralToIntegral £temporary3397 £temporary3394 -> £temporary3396
x32894:	mov ax, [si]	; 2: 139 4
x32896:	and eax, 65535	; 6: 102 37 255 255 0 0
x32902:	cmp ax, 0	; 3: 131 248 0
x32905:	jge gmtime$73	; 2: 125 5
x32907:	neg ax	; 2: 247 216
x32909:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3397
x32912:	cmp [bp + 20], eax	; 4: 102 57 70 20
x32916:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3399 month
x32918:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x32921:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; SignedMultiply £temporary3402 £temporary3399 2
x32924:	xor dx, dx	; 2: 49 210
x32926:	imul word [@7812$int2$2#]	; 4: 247 46 55 129

gmtime$77:	; BinaryAdd £temporary3403 daysOfMonths £temporary3402
x32930:	mov si, bp	; 2: 137 238
x32932:	add si, 28	; 3: 131 198 28
x32935:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3401 -> £temporary3403 £temporary3403 0

gmtime$79:	; IntegralToIntegral £temporary3404 £temporary3401 -> £temporary3403
x32937:	mov ax, [si]	; 2: 139 4
x32939:	and eax, 65535	; 6: 102 37 255 255 0 0
x32945:	cmp ax, 0	; 3: 131 248 0
x32948:	jge gmtime$80	; 2: 125 5
x32950:	neg ax	; 2: 247 216
x32952:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3404
x32955:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x32959:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x32961:	mov ax, [bp + 52]	; 3: 139 70 52
x32964:	mov [@7659$g_timeStruct + 8], ax	; 3: 163 17 129

gmtime$83:	; BinaryAdd £temporary3408 totalDays 1
x32967:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32971:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3409 £temporary3408
x32973:	cmp eax, 0	; 4: 102 131 248 0
x32977:	jge gmtime$85	; 2: 125 5
x32979:	neg eax	; 3: 102 247 216
x32982:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3409
x32984:	mov [@7659$g_timeStruct + 6], ax	; 3: 163 15 129

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x32987:	mov word [@7659$g_timeStruct + 16], -1	; 6: 199 6 25 129 255 255

gmtime$87:	; SetReturnValue (@7659$g_timeStruct,0)
x32993:	mov bx, @7659$g_timeStruct	; 3: 187 9 129

gmtime$88:	; Return (@7659$g_timeStruct,0)
x32996:	mov ax, [bp]	; 3: 139 70 0
x32999:	mov di, [bp + 4]	; 3: 139 126 4
x33002:	mov bp, [bp + 2]	; 3: 139 110 2
x33005:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x33007:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x33010:	mov ax, [bp]	; 3: 139 70 0
x33013:	mov di, [bp + 4]	; 3: 139 126 4
x33016:	mov bp, [bp + 2]	; 3: 139 110 2
x33019:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@7667$int4$86400#:
x33021:	dd 86400	; 4: 128 81 1 0

@7671$int4$3600#:
x33025:	dd 3600	; 4: 16 14 0 0

@7676$int4$3600#:
x33029:	dd 3600	; 4: 16 14 0 0

@7659$g_timeStruct:
x33033:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7681$int4$60#:
x33051:	dd 60	; 4: 60 0 0 0

@7686$int4$60#:
x33055:	dd 60	; 4: 60 0 0 0

@7690$int4$86400#:
x33059:	dd 86400	; 4: 128 81 1 0

@7706$int4$7#:
x33063:	dd 7	; 4: 7 0 0 0

@7711$int4$365#:
x33067:	dd 365	; 4: 109 1 0 0

@7721$int2$4#:
x33071:	dw 4	; 2: 4 0

@7725$int4$365#:
x33073:	dd 365	; 4: 109 1 0 0

@7802$int2$2#:
x33077:	dw 2	; 2: 2 0

@7812$int2$2#:
x33079:	dw 2	; 2: 2 0

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x33081:	mov ax, [bp + 6]	; 3: 139 70 6
x33084:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x33087:	mov word [bp + 8], localtime$3	; 5: 199 70 8 77 129
x33092:	mov [bp + 10], bp	; 3: 137 110 10
x33095:	add bp, 8	; 3: 131 197 8
x33098:	jmp gmtime	; 3: 233 76 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3413

localtime$5:	; Assign tmPtr £temporary3413
x33101:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; Deref £temporary3414 -> timePtr timePtr 0
x33104:	mov si, [bp + 6]	; 3: 139 118 6

localtime$7:	; Assign t £temporary3414 -> timePtr
x33107:	mov eax, [si]	; 3: 102 139 4
x33110:	mov [bp + 10], eax	; 4: 102 137 70 10

localtime$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$9:	; Call 14 localeconv 0
x33114:	mov word [bp + 14], localtime$10	; 5: 199 70 14 104 129
x33119:	mov [bp + 16], bp	; 3: 137 110 16
x33122:	add bp, 14	; 3: 131 197 14
x33125:	jmp localeconv	; 3: 233 16 157

localtime$10:	; PostCall 14

localtime$11:	; GetReturnValue £temporary3415

localtime$12:	; Assign localeConvPtr £temporary3415
x33128:	mov [bp + 14], bx	; 3: 137 94 14

localtime$13:	; Equal 25 localeConvPtr 0
x33131:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33135:	je localtime$25	; 2: 116 56

localtime$14:	; Deref £temporary3417 -> tmPtr tmPtr 16
x33137:	mov si, [bp + 8]	; 3: 139 118 8

localtime$15:	; NotEqual 19 £temporary3417 -> tmPtr 1
x33140:	cmp word [si + 16], 1	; 4: 131 124 16 1
x33144:	jne localtime$19	; 2: 117 7

localtime$16:	; Deref £temporary3419 -> localeConvPtr localeConvPtr 0
x33146:	mov si, [bp + 14]	; 3: 139 118 14

localtime$17:	; Assign £temporary3424 £temporary3419 -> localeConvPtr
x33149:	mov ax, [si]	; 2: 139 4

localtime$18:	; Goto 21
x33151:	jmp localtime$21	; 2: 235 6

localtime$19:	; Deref £temporary3420 -> localeConvPtr localeConvPtr 2
x33153:	mov si, [bp + 14]	; 3: 139 118 14

localtime$20:	; Assign £temporary3424 £temporary3420 -> localeConvPtr
x33156:	mov ax, [si + 2]	; 3: 139 68 2

localtime$21:	; Assign timeZone £temporary3424
x33159:	mov [bp + 16], ax	; 3: 137 70 16

localtime$22:	; IntegralToIntegral £temporary3425 timeZone
x33162:	mov ax, [bp + 16]	; 3: 139 70 16
x33165:	and eax, 65535	; 6: 102 37 255 255 0 0
x33171:	cmp ax, 0	; 3: 131 248 0
x33174:	jge localtime$23	; 2: 125 5
x33176:	neg ax	; 2: 247 216
x33178:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3426 £temporary3425 3600
x33181:	xor edx, edx	; 3: 102 49 210
x33184:	imul dword [@7857$int4$3600#]	; 5: 102 247 46 202 129

localtime$24:	; BinaryAdd t t £temporary3426
x33189:	add [bp + 10], eax	; 4: 102 1 70 10

localtime$25:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3428 t
x33193:	mov si, bp	; 2: 137 238
x33195:	add si, 10	; 3: 131 198 10

localtime$27:	; Parameter 16 £temporary3428 6
x33198:	mov [bp + 22], si	; 3: 137 118 22

localtime$28:	; Call 16 gmtime 0
x33201:	mov word [bp + 16], localtime$29	; 5: 199 70 16 191 129
x33206:	mov [bp + 18], bp	; 3: 137 110 18
x33209:	add bp, 16	; 3: 131 197 16
x33212:	jmp gmtime	; 3: 233 218 252

localtime$29:	; PostCall 16

localtime$30:	; GetReturnValue £temporary3429

localtime$31:	; SetReturnValue £temporary3429

localtime$32:	; Return £temporary3429
x33215:	mov ax, [bp]	; 3: 139 70 0
x33218:	mov di, [bp + 4]	; 3: 139 126 4
x33221:	mov bp, [bp + 2]	; 3: 139 110 2
x33224:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

@7857$int4$3600#:
x33226:	dd 3600	; 4: 16 14 0 0

asctime:	; Assign localeConvPtr 0
x33230:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 7 localeConvPtr 0
x33235:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33239:	je asctime$7	; 2: 116 20

asctime$2:	; Deref £temporary3436 -> localeConvPtr localeConvPtr 4
x33241:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Equal 7 £temporary3436 -> localeConvPtr 0
x33244:	cmp word [si + 4], 0	; 4: 131 124 4 0
x33248:	je asctime$7	; 2: 116 11

asctime$4:	; Deref £temporary3439 -> localeConvPtr localeConvPtr 4
x33250:	mov si, [bp + 8]	; 3: 139 118 8

asctime$5:	; Assign shortDayList £temporary3439 -> localeConvPtr
x33253:	mov ax, [si + 4]	; 3: 139 68 4
x33256:	mov [bp + 10], ax	; 3: 137 70 10

asctime$6:	; Goto 8
x33259:	jmp asctime$8	; 2: 235 5

asctime$7:	; Assign shortDayList g_shortDayList
x33261:	mov word [bp + 10], @7880$g_shortDayList	; 5: 199 70 10 151 130

asctime$8:	; Equal 14 localeConvPtr 0
x33266:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33270:	je asctime$14	; 2: 116 20

asctime$9:	; Deref £temporary3441 -> localeConvPtr localeConvPtr 8
x33272:	mov si, [bp + 8]	; 3: 139 118 8

asctime$10:	; Equal 14 £temporary3441 -> localeConvPtr 0
x33275:	cmp word [si + 8], 0	; 4: 131 124 8 0
x33279:	je asctime$14	; 2: 116 11

asctime$11:	; Deref £temporary3444 -> localeConvPtr localeConvPtr 8
x33281:	mov si, [bp + 8]	; 3: 139 118 8

asctime$12:	; Assign shortMonthList £temporary3444 -> localeConvPtr
x33284:	mov ax, [si + 8]	; 3: 139 68 8
x33287:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Goto 15
x33290:	jmp asctime$15	; 2: 235 5

asctime$14:	; Assign shortMonthList g_shortMonthList
x33292:	mov word [bp + 12], @7901$g_shortMonthList	; 5: 199 70 12 193 130

asctime$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$16:	; Parameter 14 g_timeString 6
x33297:	mov word [bp + 20], @7872$g_timeString	; 5: 199 70 20 9 131

asctime$17:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x33302:	mov word [bp + 22], @7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 9 132

asctime$18:	; Deref £temporary3445 -> tp tp 12
x33307:	mov si, [bp + 6]	; 3: 139 118 6

asctime$19:	; SignedMultiply £temporary3447 £temporary3445 -> tp 2
x33310:	mov ax, [si + 12]	; 3: 139 68 12
x33313:	xor dx, dx	; 2: 49 210
x33315:	imul word [@7946$int2$2#]	; 4: 247 46 36 132

asctime$20:	; BinaryAdd £temporary3448 shortDayList £temporary3447
x33319:	mov si, [bp + 10]	; 3: 139 118 10
x33322:	add si, ax	; 2: 1 198

asctime$21:	; Deref £temporary3446 -> £temporary3448 £temporary3448 0

asctime$22:	; Parameter 14 £temporary3446 -> £temporary3448 10
x33324:	mov ax, [si]	; 2: 139 4
x33326:	mov [bp + 24], ax	; 3: 137 70 24

asctime$23:	; Deref £temporary3449 -> tp tp 8
x33329:	mov si, [bp + 6]	; 3: 139 118 6

asctime$24:	; SignedMultiply £temporary3451 £temporary3449 -> tp 2
x33332:	mov ax, [si + 8]	; 3: 139 68 8
x33335:	xor dx, dx	; 2: 49 210
x33337:	imul word [@7951$int2$2#]	; 4: 247 46 38 132

asctime$25:	; BinaryAdd £temporary3452 shortMonthList £temporary3451
x33341:	mov si, [bp + 12]	; 3: 139 118 12
x33344:	add si, ax	; 2: 1 198

asctime$26:	; Deref £temporary3450 -> £temporary3452 £temporary3452 0

asctime$27:	; Parameter 14 £temporary3450 -> £temporary3452 12
x33346:	mov ax, [si]	; 2: 139 4
x33348:	mov [bp + 26], ax	; 3: 137 70 26

asctime$28:	; Deref £temporary3453 -> tp tp 6
x33351:	mov si, [bp + 6]	; 3: 139 118 6

asctime$29:	; Parameter 14 £temporary3453 -> tp 14
x33354:	mov ax, [si + 6]	; 3: 139 68 6
x33357:	mov [bp + 28], ax	; 3: 137 70 28

asctime$30:	; Deref £temporary3454 -> tp tp 4
x33360:	mov si, [bp + 6]	; 3: 139 118 6

asctime$31:	; Parameter 14 £temporary3454 -> tp 16
x33363:	mov ax, [si + 4]	; 3: 139 68 4
x33366:	mov [bp + 30], ax	; 3: 137 70 30

asctime$32:	; Deref £temporary3455 -> tp tp 2
x33369:	mov si, [bp + 6]	; 3: 139 118 6

asctime$33:	; Parameter 14 £temporary3455 -> tp 18
x33372:	mov ax, [si + 2]	; 3: 139 68 2
x33375:	mov [bp + 32], ax	; 3: 137 70 32

asctime$34:	; Deref £temporary3456 -> tp tp 0
x33378:	mov si, [bp + 6]	; 3: 139 118 6

asctime$35:	; Parameter 14 £temporary3456 -> tp 20
x33381:	mov ax, [si]	; 2: 139 4
x33383:	mov [bp + 34], ax	; 3: 137 70 34

asctime$36:	; Deref £temporary3457 -> tp tp 10
x33386:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; BinaryAdd £temporary3458 £temporary3457 -> tp 1900
x33389:	mov ax, [si + 10]	; 3: 139 68 10
x33392:	add ax, 1900	; 3: 5 108 7

asctime$38:	; Parameter 14 £temporary3458 22
x33395:	mov [bp + 36], ax	; 3: 137 70 36

asctime$39:	; Call 14 sprintf 0
x33398:	mov word [bp + 14], asctime$40	; 5: 199 70 14 137 130
x33403:	mov [bp + 16], bp	; 3: 137 110 16
x33406:	add bp, 14	; 3: 131 197 14
x33409:	mov di, bp	; 2: 137 239
x33411:	add di, 14	; 3: 131 199 14
x33414:	jmp sprintf	; 3: 233 159 1

asctime$40:	; PostCall 14

asctime$41:	; SetReturnValue g_timeString
x33417:	mov bx, @7872$g_timeString	; 3: 187 9 131

asctime$42:	; Return g_timeString
x33420:	mov ax, [bp]	; 3: 139 70 0
x33423:	mov di, [bp + 4]	; 3: 139 126 4
x33426:	mov bp, [bp + 2]	; 3: 139 110 2
x33429:	jmp ax	; 2: 255 224

asctime$43:	; FunctionEnd asctime

@7880$g_shortDayList:
x33431:	dw @7873$string_Sun# ; 2: 165 130
x33433:	dw @7874$string_Mon# ; 2: 169 130
x33435:	dw @7875$string_Tue# ; 2: 173 130
x33437:	dw @7876$string_Wed# ; 2: 177 130
x33439:	dw @7877$string_Thu# ; 2: 181 130
x33441:	dw @7878$string_Fri# ; 2: 185 130
x33443:	dw @7879$string_Sat# ; 2: 189 130

@7873$string_Sun#:
x33445:	db "Sun", 0	; 4: 83 117 110 0

@7874$string_Mon#:
x33449:	db "Mon", 0	; 4: 77 111 110 0

@7875$string_Tue#:
x33453:	db "Tue", 0	; 4: 84 117 101 0

@7876$string_Wed#:
x33457:	db "Wed", 0	; 4: 87 101 100 0

@7877$string_Thu#:
x33461:	db "Thu", 0	; 4: 84 104 117 0

@7878$string_Fri#:
x33465:	db "Fri", 0	; 4: 70 114 105 0

@7879$string_Sat#:
x33469:	db "Sat", 0	; 4: 83 97 116 0

@7901$g_shortMonthList:
x33473:	dw @7889$string_Jan# ; 2: 217 130
x33475:	dw @7890$string_Feb# ; 2: 221 130
x33477:	dw @7891$string_Mar# ; 2: 225 130
x33479:	dw @7892$string_Apr# ; 2: 229 130
x33481:	dw @7893$string_May# ; 2: 233 130
x33483:	dw @7894$string_Jun# ; 2: 237 130
x33485:	dw @7895$string_Jul# ; 2: 241 130
x33487:	dw @7896$string_Aug# ; 2: 245 130
x33489:	dw @7897$string_Sep# ; 2: 249 130
x33491:	dw @7898$string_Oct# ; 2: 253 130
x33493:	dw @7899$string_Nov# ; 2: 1 131
x33495:	dw @7900$string_Dec# ; 2: 5 131

@7889$string_Jan#:
x33497:	db "Jan", 0	; 4: 74 97 110 0

@7890$string_Feb#:
x33501:	db "Feb", 0	; 4: 70 101 98 0

@7891$string_Mar#:
x33505:	db "Mar", 0	; 4: 77 97 114 0

@7892$string_Apr#:
x33509:	db "Apr", 0	; 4: 65 112 114 0

@7893$string_May#:
x33513:	db "May", 0	; 4: 77 97 121 0

@7894$string_Jun#:
x33517:	db "Jun", 0	; 4: 74 117 110 0

@7895$string_Jul#:
x33521:	db "Jul", 0	; 4: 74 117 108 0

@7896$string_Aug#:
x33525:	db "Aug", 0	; 4: 65 117 103 0

@7897$string_Sep#:
x33529:	db "Sep", 0	; 4: 83 101 112 0

@7898$string_Oct#:
x33533:	db "Oct", 0	; 4: 79 99 116 0

@7899$string_Nov#:
x33537:	db "Nov", 0	; 4: 78 111 118 0

@7900$string_Dec#:
x33541:	db "Dec", 0	; 4: 68 101 99 0

@7872$g_timeString:
x33545:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x33801:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

@7946$int2$2#:
x33828:	dw 2	; 2: 2 0

@7951$int2$2#:
x33830:	dw 2	; 2: 2 0

sprintf:	; address £temporary2225 format
x33832:	mov si, bp	; 2: 137 238
x33834:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2226 £temporary2225

sprintf$2:	; BinaryAdd arg_list £temporary2226 2
x33837:	add si, 2	; 3: 131 198 2
x33840:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x33843:	mov ax, [bp + 6]	; 3: 139 70 6
x33846:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x33849:	mov ax, [bp + 8]	; 3: 139 70 8
x33852:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x33855:	mov ax, [di + 10]	; 3: 139 69 10
x33858:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x33861:	mov word [di + 12], sprintf$8	; 5: 199 69 12 88 132
x33866:	mov [di + 14], bp	; 3: 137 109 14
x33869:	mov [di + 16], di	; 3: 137 125 16
x33872:	add di, 12	; 3: 131 199 12
x33875:	mov bp, di	; 2: 137 253
x33877:	nop	; 1: 144
x33878:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2228

sprintf$10:	; SetReturnValue £temporary2228

sprintf$11:	; Return £temporary2228
x33880:	mov ax, [bp]	; 3: 139 70 0
x33883:	mov di, [bp + 4]	; 3: 139 126 4
x33886:	mov bp, [bp + 2]	; 3: 139 110 2
x33889:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x33891:	mov word [g_outStatus], 1	; 6: 199 6 219 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2233 outString
x33897:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2233
x33900:	mov [g_outDevice], ax	; 3: 163 221 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x33903:	mov ax, [bp + 8]	; 3: 139 70 8
x33906:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x33909:	mov ax, [bp + 10]	; 3: 139 70 10
x33912:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x33915:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 137 132
x33920:	mov [bp + 14], bp	; 3: 137 110 14
x33923:	add bp, 12	; 3: 131 197 12
x33926:	jmp printFormat	; 3: 233 86 139

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2234

vsprintf$9:	; SetReturnValue £temporary2234

vsprintf$10:	; Return £temporary2234
x33929:	mov ax, [bp]	; 3: 139 70 0
x33932:	mov di, [bp + 4]	; 3: 139 126 4
x33935:	mov bp, [bp + 2]	; 3: 139 110 2
x33938:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x33940:	mov ax, [bp + 6]	; 3: 139 70 6
x33943:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x33946:	mov word [bp + 8], ctime$4	; 5: 199 70 8 168 132
x33951:	mov [bp + 10], bp	; 3: 137 110 10
x33954:	add bp, 8	; 3: 131 197 8
x33957:	jmp localtime	; 3: 233 145 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3469

ctime$6:	; Parameter 8 £temporary3469 6
x33960:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x33963:	mov word [bp + 8], ctime$8	; 5: 199 70 8 185 132
x33968:	mov [bp + 10], bp	; 3: 137 110 10
x33971:	add bp, 8	; 3: 131 197 8
x33974:	jmp asctime	; 3: 233 21 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3470

ctime$10:	; SetReturnValue £temporary3470

ctime$11:	; Return £temporary3470
x33977:	mov ax, [bp]	; 3: 139 70 0
x33980:	mov di, [bp + 4]	; 3: 139 126 4
x33983:	mov bp, [bp + 2]	; 3: 139 110 2
x33986:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x33988:	mov word [bp + 14], strftime$2	; 5: 199 70 14 210 132
x33993:	mov [bp + 16], bp	; 3: 137 110 16
x33996:	add bp, 14	; 3: 131 197 14
x33999:	jmp localeconv	; 3: 233 166 153

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3494

strftime$4:	; Assign localeConvPtr £temporary3494
x34002:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 11 localeConvPtr 0
x34005:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34009:	je strftime$11	; 2: 116 20

strftime$6:	; Deref £temporary3496 -> localeConvPtr localeConvPtr 4
x34011:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Equal 11 £temporary3496 -> localeConvPtr 0
x34014:	cmp word [si + 4], 0	; 4: 131 124 4 0
x34018:	je strftime$11	; 2: 116 11

strftime$8:	; Deref £temporary3499 -> localeConvPtr localeConvPtr 4
x34020:	mov si, [bp + 14]	; 3: 139 118 14

strftime$9:	; Assign shortDayList £temporary3499 -> localeConvPtr
x34023:	mov ax, [si + 4]	; 3: 139 68 4
x34026:	mov [bp + 16], ax	; 3: 137 70 16

strftime$10:	; Goto 12
x34029:	jmp strftime$12	; 2: 235 5

strftime$11:	; Assign shortDayList g_shortDayList
x34031:	mov word [bp + 16], @7880$g_shortDayList	; 5: 199 70 16 151 130

strftime$12:	; Equal 18 localeConvPtr 0
x34036:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34040:	je strftime$18	; 2: 116 20

strftime$13:	; Deref £temporary3501 -> localeConvPtr localeConvPtr 6
x34042:	mov si, [bp + 14]	; 3: 139 118 14

strftime$14:	; Equal 18 £temporary3501 -> localeConvPtr 0
x34045:	cmp word [si + 6], 0	; 4: 131 124 6 0
x34049:	je strftime$18	; 2: 116 11

strftime$15:	; Deref £temporary3504 -> localeConvPtr localeConvPtr 6
x34051:	mov si, [bp + 14]	; 3: 139 118 14

strftime$16:	; Assign longDayList £temporary3504 -> localeConvPtr
x34054:	mov ax, [si + 6]	; 3: 139 68 6
x34057:	mov [bp + 20], ax	; 3: 137 70 20

strftime$17:	; Goto 19
x34060:	jmp strftime$19	; 2: 235 5

strftime$18:	; Assign longDayList g_longDayList
x34062:	mov word [bp + 20], @7888$g_longDayList	; 5: 199 70 20 255 138

strftime$19:	; Equal 25 localeConvPtr 0
x34067:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34071:	je strftime$25	; 2: 116 20

strftime$20:	; Deref £temporary3506 -> localeConvPtr localeConvPtr 8
x34073:	mov si, [bp + 14]	; 3: 139 118 14

strftime$21:	; Equal 25 £temporary3506 -> localeConvPtr 0
x34076:	cmp word [si + 8], 0	; 4: 131 124 8 0
x34080:	je strftime$25	; 2: 116 11

strftime$22:	; Deref £temporary3509 -> localeConvPtr localeConvPtr 8
x34082:	mov si, [bp + 14]	; 3: 139 118 14

strftime$23:	; Assign shortMonthList £temporary3509 -> localeConvPtr
x34085:	mov ax, [si + 8]	; 3: 139 68 8
x34088:	mov [bp + 18], ax	; 3: 137 70 18

strftime$24:	; Goto 26
x34091:	jmp strftime$26	; 2: 235 5

strftime$25:	; Assign shortMonthList g_shortMonthList
x34093:	mov word [bp + 18], @7901$g_shortMonthList	; 5: 199 70 18 193 130

strftime$26:	; Equal 32 localeConvPtr 0
x34098:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34102:	je strftime$32	; 2: 116 20

strftime$27:	; Deref £temporary3511 -> localeConvPtr localeConvPtr 10
x34104:	mov si, [bp + 14]	; 3: 139 118 14

strftime$28:	; Equal 32 £temporary3511 -> localeConvPtr 0
x34107:	cmp word [si + 10], 0	; 4: 131 124 10 0
x34111:	je strftime$32	; 2: 116 11

strftime$29:	; Deref £temporary3514 -> localeConvPtr localeConvPtr 10
x34113:	mov si, [bp + 14]	; 3: 139 118 14

strftime$30:	; Assign longMonthList £temporary3514 -> localeConvPtr
x34116:	mov ax, [si + 10]	; 3: 139 68 10
x34119:	mov [bp + 22], ax	; 3: 137 70 22

strftime$31:	; Goto 33
x34122:	jmp strftime$33	; 2: 235 5

strftime$32:	; Assign longMonthList g_longMonthList
x34124:	mov word [bp + 22], @7914$g_longMonthList	; 5: 199 70 22 70 139

strftime$33:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$34:	; Parameter 24 result 6
x34129:	mov ax, [bp + 6]	; 3: 139 70 6
x34132:	mov [bp + 30], ax	; 3: 137 70 30

strftime$35:	; Parameter 24 string_# 8
x34135:	mov word [bp + 32], @8078$string_#	; 5: 199 70 32 180 139

strftime$36:	; Call 24 strcpy 0
x34140:	mov word [bp + 24], strftime$37	; 5: 199 70 24 106 133
x34145:	mov [bp + 26], bp	; 3: 137 110 26
x34148:	add bp, 24	; 3: 131 197 24
x34151:	jmp strcpy	; 3: 233 230 216

strftime$37:	; PostCall 24

strftime$38:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$39:	; Parameter 26 tp 6
x34154:	mov ax, [bp + 12]	; 3: 139 70 12
x34157:	mov [bp + 32], ax	; 3: 137 70 32

strftime$40:	; Call 26 getWeekNumber 0
x34160:	mov word [bp + 26], strftime$41	; 5: 199 70 26 126 133
x34165:	mov [bp + 28], bp	; 3: 137 110 28
x34168:	add bp, 26	; 3: 131 197 26
x34171:	jmp getWeekNumber	; 3: 233 213 6

strftime$41:	; PostCall 26

strftime$42:	; GetReturnValue £temporary3516

strftime$43:	; Assign weekNumberStartSunday £temporary3516
x34174:	mov [bp + 26], bx	; 3: 137 94 26

strftime$44:	; Assign weekNumberStartMonday weekNumberStartSunday
x34177:	mov ax, [bp + 26]	; 3: 139 70 26
x34180:	mov [bp + 28], ax	; 3: 137 70 28

strftime$45:	; Deref £temporary3517 -> tp tp 6
x34183:	mov si, [bp + 12]	; 3: 139 118 12

strftime$46:	; NotEqual 48 £temporary3517 -> tp 0
x34186:	cmp word [si + 6], 0	; 4: 131 124 6 0
x34190:	jne strftime$48	; 2: 117 3

strftime$47:	; Decrement weekNumberStartMonday
x34192:	dec word [bp + 28]	; 3: 255 78 28

strftime$48:	; Assign index 0
x34195:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

strftime$49:	; BinaryAdd £temporary3521 format index
x34200:	mov si, [bp + 10]	; 3: 139 118 10
x34203:	add si, [bp + 24]	; 3: 3 118 24

strftime$50:	; Deref £temporary3520 -> £temporary3521 £temporary3521 0

strftime$51:	; Equal 322 £temporary3520 -> £temporary3521 0
x34206:	cmp byte [si], 0	; 3: 128 60 0
x34209:	je strftime$322	; 4: 15 132 59 5

strftime$52:	; BinaryAdd £temporary3525 format index
x34213:	mov si, [bp + 10]	; 3: 139 118 10
x34216:	add si, [bp + 24]	; 3: 3 118 24

strftime$53:	; Deref £temporary3524 -> £temporary3525 £temporary3525 0

strftime$54:	; NotEqual 297 £temporary3524 -> £temporary3525 37
x34219:	cmp byte [si], 37	; 3: 128 60 37
x34222:	jne strftime$297	; 4: 15 133 189 4

strftime$55:	; Increment index
x34226:	inc word [bp + 24]	; 3: 255 70 24

strftime$56:	; BinaryAdd £temporary3529 format index
x34229:	mov si, [bp + 10]	; 3: 139 118 10
x34232:	add si, [bp + 24]	; 3: 3 118 24

strftime$57:	; Deref £temporary3528 -> £temporary3529 £temporary3529 0

strftime$58:	; Case 82 £temporary3528 -> £temporary3529 97
x34235:	mov al, [si]	; 2: 138 4
x34237:	cmp al, 97	; 2: 60 97
x34239:	je strftime$82	; 4: 15 132 129 0

strftime$59:	; Case 92 £temporary3528 -> £temporary3529 65
x34243:	cmp al, 65	; 2: 60 65
x34245:	je strftime$92	; 4: 15 132 169 0

strftime$60:	; Case 102 £temporary3528 -> £temporary3529 98
x34249:	cmp al, 98	; 2: 60 98
x34251:	je strftime$102	; 4: 15 132 209 0

strftime$61:	; Case 112 £temporary3528 -> £temporary3529 66
x34255:	cmp al, 66	; 2: 60 66
x34257:	je strftime$112	; 4: 15 132 249 0

strftime$62:	; Case 122 £temporary3528 -> £temporary3529 99
x34261:	cmp al, 99	; 2: 60 99
x34263:	je strftime$122	; 4: 15 132 33 1

strftime$63:	; Case 142 £temporary3528 -> £temporary3529 100
x34267:	cmp al, 100	; 2: 60 100
x34269:	je strftime$142	; 4: 15 132 118 1

strftime$64:	; Case 150 £temporary3528 -> £temporary3529 72
x34273:	cmp al, 72	; 2: 60 72
x34275:	je strftime$150	; 4: 15 132 155 1

strftime$65:	; Case 158 £temporary3528 -> £temporary3529 73
x34279:	cmp al, 73	; 2: 60 73
x34281:	je strftime$158	; 4: 15 132 192 1

strftime$66:	; Case 167 £temporary3528 -> £temporary3529 106
x34285:	cmp al, 106	; 2: 60 106
x34287:	je strftime$167	; 4: 15 132 235 1

strftime$67:	; Case 175 £temporary3528 -> £temporary3529 109
x34291:	cmp al, 109	; 2: 60 109
x34293:	je strftime$175	; 4: 15 132 16 2

strftime$68:	; Case 184 £temporary3528 -> £temporary3529 77
x34297:	cmp al, 77	; 2: 60 77
x34299:	je strftime$184	; 4: 15 132 54 2

strftime$69:	; Case 192 £temporary3528 -> £temporary3529 112
x34303:	cmp al, 112	; 2: 60 112
x34305:	je strftime$192	; 4: 15 132 91 2

strftime$70:	; Case 203 £temporary3528 -> £temporary3529 83
x34309:	cmp al, 83	; 2: 60 83
x34311:	je strftime$203	; 4: 15 132 136 2

strftime$71:	; Case 211 £temporary3528 -> £temporary3529 85
x34315:	cmp al, 85	; 2: 60 85
x34317:	je strftime$211	; 4: 15 132 172 2

strftime$72:	; Case 218 £temporary3528 -> £temporary3529 119
x34321:	cmp al, 119	; 2: 60 119
x34323:	je strftime$218	; 4: 15 132 206 2

strftime$73:	; Case 226 £temporary3528 -> £temporary3529 87
x34327:	cmp al, 87	; 2: 60 87
x34329:	je strftime$226	; 4: 15 132 243 2

strftime$74:	; Case 233 £temporary3528 -> £temporary3529 120
x34333:	cmp al, 120	; 2: 60 120
x34335:	je strftime$233	; 4: 15 132 21 3

strftime$75:	; Case 245 £temporary3528 -> £temporary3529 88
x34339:	cmp al, 88	; 2: 60 88
x34341:	je strftime$245	; 4: 15 132 75 3

strftime$76:	; Case 257 £temporary3528 -> £temporary3529 121
x34345:	cmp al, 121	; 2: 60 121
x34347:	je strftime$257	; 4: 15 132 129 3

strftime$77:	; Case 266 £temporary3528 -> £temporary3529 89
x34351:	cmp al, 89	; 2: 60 89
x34353:	je strftime$266	; 4: 15 132 172 3

strftime$78:	; Case 275 £temporary3528 -> £temporary3529 90
x34357:	cmp al, 90	; 2: 60 90
x34359:	je strftime$275	; 4: 15 132 211 3

strftime$79:	; Case 286 £temporary3528 -> £temporary3529 37
x34363:	cmp al, 37	; 2: 60 37
x34365:	je strftime$286	; 4: 15 132 248 3

strftime$80:	; CaseEnd £temporary3528 -> £temporary3529

strftime$81:	; Goto 291
x34369:	jmp strftime$291	; 3: 233 15 4

strftime$82:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$83:	; Parameter 50 add 6
x34372:	mov [bp + 56], bp	; 3: 137 110 56
x34375:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$84:	; Deref £temporary3530 -> tp tp 12
x34379:	mov si, [bp + 12]	; 3: 139 118 12

strftime$85:	; SignedMultiply £temporary3532 £temporary3530 -> tp 2
x34382:	mov ax, [si + 12]	; 3: 139 68 12
x34385:	xor dx, dx	; 2: 49 210
x34387:	imul word [@8118$int2$2#]	; 4: 247 46 181 139

strftime$86:	; BinaryAdd £temporary3533 shortDayList £temporary3532
x34391:	mov si, [bp + 16]	; 3: 139 118 16
x34394:	add si, ax	; 2: 1 198

strftime$87:	; Deref £temporary3531 -> £temporary3533 £temporary3533 0

strftime$88:	; Parameter 50 £temporary3531 -> £temporary3533 8
x34396:	mov ax, [si]	; 2: 139 4
x34398:	mov [bp + 58], ax	; 3: 137 70 58

strftime$89:	; Call 50 strcpy 0
x34401:	mov word [bp + 50], strftime$90	; 5: 199 70 50 111 134
x34406:	mov [bp + 52], bp	; 3: 137 110 52
x34409:	add bp, 50	; 3: 131 197 50
x34412:	jmp strcpy	; 3: 233 225 215

strftime$90:	; PostCall 50

strftime$91:	; Goto 303
x34415:	jmp strftime$303	; 3: 233 21 4

strftime$92:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$93:	; Parameter 50 add 6
x34418:	mov [bp + 56], bp	; 3: 137 110 56
x34421:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$94:	; Deref £temporary3535 -> tp tp 12
x34425:	mov si, [bp + 12]	; 3: 139 118 12

strftime$95:	; SignedMultiply £temporary3537 £temporary3535 -> tp 2
x34428:	mov ax, [si + 12]	; 3: 139 68 12
x34431:	xor dx, dx	; 2: 49 210
x34433:	imul word [@8126$int2$2#]	; 4: 247 46 183 139

strftime$96:	; BinaryAdd £temporary3538 longDayList £temporary3537
x34437:	mov si, [bp + 20]	; 3: 139 118 20
x34440:	add si, ax	; 2: 1 198

strftime$97:	; Deref £temporary3536 -> £temporary3538 £temporary3538 0

strftime$98:	; Parameter 50 £temporary3536 -> £temporary3538 8
x34442:	mov ax, [si]	; 2: 139 4
x34444:	mov [bp + 58], ax	; 3: 137 70 58

strftime$99:	; Call 50 strcpy 0
x34447:	mov word [bp + 50], strftime$100	; 5: 199 70 50 157 134
x34452:	mov [bp + 52], bp	; 3: 137 110 52
x34455:	add bp, 50	; 3: 131 197 50
x34458:	jmp strcpy	; 3: 233 179 215

strftime$100:	; PostCall 50

strftime$101:	; Goto 303
x34461:	jmp strftime$303	; 3: 233 231 3

strftime$102:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$103:	; Parameter 50 add 6
x34464:	mov [bp + 56], bp	; 3: 137 110 56
x34467:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$104:	; Deref £temporary3540 -> tp tp 8
x34471:	mov si, [bp + 12]	; 3: 139 118 12

strftime$105:	; SignedMultiply £temporary3542 £temporary3540 -> tp 2
x34474:	mov ax, [si + 8]	; 3: 139 68 8
x34477:	xor dx, dx	; 2: 49 210
x34479:	imul word [@8134$int2$2#]	; 4: 247 46 185 139

strftime$106:	; BinaryAdd £temporary3543 shortMonthList £temporary3542
x34483:	mov si, [bp + 18]	; 3: 139 118 18
x34486:	add si, ax	; 2: 1 198

strftime$107:	; Deref £temporary3541 -> £temporary3543 £temporary3543 0

strftime$108:	; Parameter 50 £temporary3541 -> £temporary3543 8
x34488:	mov ax, [si]	; 2: 139 4
x34490:	mov [bp + 58], ax	; 3: 137 70 58

strftime$109:	; Call 50 strcpy 0
x34493:	mov word [bp + 50], strftime$110	; 5: 199 70 50 203 134
x34498:	mov [bp + 52], bp	; 3: 137 110 52
x34501:	add bp, 50	; 3: 131 197 50
x34504:	jmp strcpy	; 3: 233 133 215

strftime$110:	; PostCall 50

strftime$111:	; Goto 303
x34507:	jmp strftime$303	; 3: 233 185 3

strftime$112:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$113:	; Parameter 50 add 6
x34510:	mov [bp + 56], bp	; 3: 137 110 56
x34513:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$114:	; Deref £temporary3545 -> tp tp 8
x34517:	mov si, [bp + 12]	; 3: 139 118 12

strftime$115:	; SignedMultiply £temporary3547 £temporary3545 -> tp 2
x34520:	mov ax, [si + 8]	; 3: 139 68 8
x34523:	xor dx, dx	; 2: 49 210
x34525:	imul word [@8142$int2$2#]	; 4: 247 46 187 139

strftime$116:	; BinaryAdd £temporary3548 longMonthList £temporary3547
x34529:	mov si, [bp + 22]	; 3: 139 118 22
x34532:	add si, ax	; 2: 1 198

strftime$117:	; Deref £temporary3546 -> £temporary3548 £temporary3548 0

strftime$118:	; Parameter 50 £temporary3546 -> £temporary3548 8
x34534:	mov ax, [si]	; 2: 139 4
x34536:	mov [bp + 58], ax	; 3: 137 70 58

strftime$119:	; Call 50 strcpy 0
x34539:	mov word [bp + 50], strftime$120	; 5: 199 70 50 249 134
x34544:	mov [bp + 52], bp	; 3: 137 110 52
x34547:	add bp, 50	; 3: 131 197 50
x34550:	jmp strcpy	; 3: 233 87 215

strftime$120:	; PostCall 50

strftime$121:	; Goto 303
x34553:	jmp strftime$303	; 3: 233 139 3

strftime$122:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$123:	; Parameter 50 add 6
x34556:	mov [bp + 56], bp	; 3: 137 110 56
x34559:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$124:	; Parameter 50 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x34563:	mov word [bp + 58], @8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 58 189 139

strftime$125:	; Deref £temporary3550 -> tp tp 10
x34568:	mov si, [bp + 12]	; 3: 139 118 12

strftime$126:	; BinaryAdd £temporary3551 £temporary3550 -> tp 1900
x34571:	mov ax, [si + 10]	; 3: 139 68 10
x34574:	add ax, 1900	; 3: 5 108 7

strftime$127:	; Parameter 50 £temporary3551 10
x34577:	mov [bp + 60], ax	; 3: 137 70 60

strftime$128:	; Deref £temporary3552 -> tp tp 8
x34580:	mov si, [bp + 12]	; 3: 139 118 12

strftime$129:	; BinaryAdd £temporary3553 £temporary3552 -> tp 1
x34583:	mov ax, [si + 8]	; 3: 139 68 8
x34586:	inc ax	; 1: 64

strftime$130:	; Parameter 50 £temporary3553 12
x34587:	mov [bp + 62], ax	; 3: 137 70 62

strftime$131:	; Deref £temporary3554 -> tp tp 6
x34590:	mov si, [bp + 12]	; 3: 139 118 12

strftime$132:	; Parameter 50 £temporary3554 -> tp 14
x34593:	mov ax, [si + 6]	; 3: 139 68 6
x34596:	mov [bp + 64], ax	; 3: 137 70 64

strftime$133:	; Deref £temporary3555 -> tp tp 4
x34599:	mov si, [bp + 12]	; 3: 139 118 12

strftime$134:	; Parameter 50 £temporary3555 -> tp 16
x34602:	mov ax, [si + 4]	; 3: 139 68 4
x34605:	mov [bp + 66], ax	; 3: 137 70 66

strftime$135:	; Deref £temporary3556 -> tp tp 2
x34608:	mov si, [bp + 12]	; 3: 139 118 12

strftime$136:	; Parameter 50 £temporary3556 -> tp 18
x34611:	mov ax, [si + 2]	; 3: 139 68 2
x34614:	mov [bp + 68], ax	; 3: 137 70 68

strftime$137:	; Deref £temporary3557 -> tp tp 0
x34617:	mov si, [bp + 12]	; 3: 139 118 12

strftime$138:	; Parameter 50 £temporary3557 -> tp 20
x34620:	mov ax, [si]	; 2: 139 4
x34622:	mov [bp + 70], ax	; 3: 137 70 70

strftime$139:	; Call 50 sprintf 0
x34625:	mov word [bp + 50], strftime$140	; 5: 199 70 50 84 135
x34630:	mov [bp + 52], bp	; 3: 137 110 52
x34633:	add bp, 50	; 3: 131 197 50
x34636:	mov di, bp	; 2: 137 239
x34638:	add di, 12	; 3: 131 199 12
x34641:	jmp sprintf	; 3: 233 212 252

strftime$140:	; PostCall 50

strftime$141:	; Goto 303
x34644:	jmp strftime$303	; 3: 233 48 3

strftime$142:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$143:	; Parameter 50 add 6
x34647:	mov [bp + 56], bp	; 3: 137 110 56
x34650:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$144:	; Parameter 50 string_2502i# 8
x34654:	mov word [bp + 58], @8164$string_2502i#	; 5: 199 70 58 219 139

strftime$145:	; Deref £temporary3559 -> tp tp 6
x34659:	mov si, [bp + 12]	; 3: 139 118 12

strftime$146:	; Parameter 50 £temporary3559 -> tp 10
x34662:	mov ax, [si + 6]	; 3: 139 68 6
x34665:	mov [bp + 60], ax	; 3: 137 70 60

strftime$147:	; Call 50 sprintf 0
x34668:	mov word [bp + 50], strftime$148	; 5: 199 70 50 127 135
x34673:	mov [bp + 52], bp	; 3: 137 110 52
x34676:	add bp, 50	; 3: 131 197 50
x34679:	mov di, bp	; 2: 137 239
x34681:	add di, 2	; 3: 131 199 2
x34684:	jmp sprintf	; 3: 233 169 252

strftime$148:	; PostCall 50

strftime$149:	; Goto 303
x34687:	jmp strftime$303	; 3: 233 5 3

strftime$150:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$151:	; Parameter 50 add 6
x34690:	mov [bp + 56], bp	; 3: 137 110 56
x34693:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$152:	; Parameter 50 string_2502i# 8
x34697:	mov word [bp + 58], @8169$string_2502i#	; 5: 199 70 58 224 139

strftime$153:	; Deref £temporary3561 -> tp tp 4
x34702:	mov si, [bp + 12]	; 3: 139 118 12

strftime$154:	; Parameter 50 £temporary3561 -> tp 10
x34705:	mov ax, [si + 4]	; 3: 139 68 4
x34708:	mov [bp + 60], ax	; 3: 137 70 60

strftime$155:	; Call 50 sprintf 0
x34711:	mov word [bp + 50], strftime$156	; 5: 199 70 50 170 135
x34716:	mov [bp + 52], bp	; 3: 137 110 52
x34719:	add bp, 50	; 3: 131 197 50
x34722:	mov di, bp	; 2: 137 239
x34724:	add di, 2	; 3: 131 199 2
x34727:	jmp sprintf	; 3: 233 126 252

strftime$156:	; PostCall 50

strftime$157:	; Goto 303
x34730:	jmp strftime$303	; 3: 233 218 2

strftime$158:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 50 add 6
x34733:	mov [bp + 56], bp	; 3: 137 110 56
x34736:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$160:	; Parameter 50 string_2502i# 8
x34740:	mov word [bp + 58], @8174$string_2502i#	; 5: 199 70 58 229 139

strftime$161:	; Deref £temporary3563 -> tp tp 4
x34745:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; SignedModulo £temporary3564 £temporary3563 -> tp 12
x34748:	mov ax, [si + 4]	; 3: 139 68 4
x34751:	xor dx, dx	; 2: 49 210
x34753:	idiv word [@8177$int2$12#]	; 4: 247 62 234 139

strftime$163:	; Parameter 50 £temporary3564 10
x34757:	mov [bp + 60], dx	; 3: 137 86 60

strftime$164:	; Call 50 sprintf 0
x34760:	mov word [bp + 50], strftime$165	; 5: 199 70 50 219 135
x34765:	mov [bp + 52], bp	; 3: 137 110 52
x34768:	add bp, 50	; 3: 131 197 50
x34771:	mov di, bp	; 2: 137 239
x34773:	add di, 2	; 3: 131 199 2
x34776:	jmp sprintf	; 3: 233 77 252

strftime$165:	; PostCall 50

strftime$166:	; Goto 303
x34779:	jmp strftime$303	; 3: 233 169 2

strftime$167:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$168:	; Parameter 50 add 6
x34782:	mov [bp + 56], bp	; 3: 137 110 56
x34785:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$169:	; Parameter 50 string_2503i# 8
x34789:	mov word [bp + 58], @8182$string_2503i#	; 5: 199 70 58 236 139

strftime$170:	; Deref £temporary3566 -> tp tp 14
x34794:	mov si, [bp + 12]	; 3: 139 118 12

strftime$171:	; Parameter 50 £temporary3566 -> tp 10
x34797:	mov ax, [si + 14]	; 3: 139 68 14
x34800:	mov [bp + 60], ax	; 3: 137 70 60

strftime$172:	; Call 50 sprintf 0
x34803:	mov word [bp + 50], strftime$173	; 5: 199 70 50 6 136
x34808:	mov [bp + 52], bp	; 3: 137 110 52
x34811:	add bp, 50	; 3: 131 197 50
x34814:	mov di, bp	; 2: 137 239
x34816:	add di, 2	; 3: 131 199 2
x34819:	jmp sprintf	; 3: 233 34 252

strftime$173:	; PostCall 50

strftime$174:	; Goto 303
x34822:	jmp strftime$303	; 3: 233 126 2

strftime$175:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$176:	; Parameter 50 add 6
x34825:	mov [bp + 56], bp	; 3: 137 110 56
x34828:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$177:	; Parameter 50 string_2502i# 8
x34832:	mov word [bp + 58], @8187$string_2502i#	; 5: 199 70 58 241 139

strftime$178:	; Deref £temporary3568 -> tp tp 8
x34837:	mov si, [bp + 12]	; 3: 139 118 12

strftime$179:	; BinaryAdd £temporary3569 £temporary3568 -> tp 1
x34840:	mov ax, [si + 8]	; 3: 139 68 8
x34843:	inc ax	; 1: 64

strftime$180:	; Parameter 50 £temporary3569 10
x34844:	mov [bp + 60], ax	; 3: 137 70 60

strftime$181:	; Call 50 sprintf 0
x34847:	mov word [bp + 50], strftime$182	; 5: 199 70 50 50 136
x34852:	mov [bp + 52], bp	; 3: 137 110 52
x34855:	add bp, 50	; 3: 131 197 50
x34858:	mov di, bp	; 2: 137 239
x34860:	add di, 2	; 3: 131 199 2
x34863:	jmp sprintf	; 3: 233 246 251

strftime$182:	; PostCall 50

strftime$183:	; Goto 303
x34866:	jmp strftime$303	; 3: 233 82 2

strftime$184:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$185:	; Parameter 50 add 6
x34869:	mov [bp + 56], bp	; 3: 137 110 56
x34872:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$186:	; Parameter 50 string_2502i# 8
x34876:	mov word [bp + 58], @8195$string_2502i#	; 5: 199 70 58 246 139

strftime$187:	; Deref £temporary3571 -> tp tp 2
x34881:	mov si, [bp + 12]	; 3: 139 118 12

strftime$188:	; Parameter 50 £temporary3571 -> tp 10
x34884:	mov ax, [si + 2]	; 3: 139 68 2
x34887:	mov [bp + 60], ax	; 3: 137 70 60

strftime$189:	; Call 50 sprintf 0
x34890:	mov word [bp + 50], strftime$190	; 5: 199 70 50 93 136
x34895:	mov [bp + 52], bp	; 3: 137 110 52
x34898:	add bp, 50	; 3: 131 197 50
x34901:	mov di, bp	; 2: 137 239
x34903:	add di, 2	; 3: 131 199 2
x34906:	jmp sprintf	; 3: 233 203 251

strftime$190:	; PostCall 50

strftime$191:	; Goto 303
x34909:	jmp strftime$303	; 3: 233 39 2

strftime$192:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$193:	; Parameter 50 add 6
x34912:	mov [bp + 56], bp	; 3: 137 110 56
x34915:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$194:	; Parameter 50 string_25s# 8
x34919:	mov word [bp + 58], @8200$string_25s#	; 5: 199 70 58 251 139

strftime$195:	; Equal 198 index 0
x34924:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x34928:	je strftime$198	; 2: 116 5

strftime$196:	; Assign £temporary3577 string_AM#
x34930:	mov ax, @8201$string_AM#	; 3: 184 254 139

strftime$197:	; Goto 199
x34933:	jmp strftime$199	; 2: 235 3

strftime$198:	; Assign £temporary3577 string_PM#
x34935:	mov ax, @8202$string_PM#	; 3: 184 1 140

strftime$199:	; Parameter 50 £temporary3577 10
x34938:	mov [bp + 60], ax	; 3: 137 70 60

strftime$200:	; Call 50 sprintf 0
x34941:	mov word [bp + 50], strftime$201	; 5: 199 70 50 144 136
x34946:	mov [bp + 52], bp	; 3: 137 110 52
x34949:	add bp, 50	; 3: 131 197 50
x34952:	mov di, bp	; 2: 137 239
x34954:	add di, 2	; 3: 131 199 2
x34957:	jmp sprintf	; 3: 233 152 251

strftime$201:	; PostCall 50

strftime$202:	; Goto 303
x34960:	jmp strftime$303	; 3: 233 244 1

strftime$203:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 50 add 6
x34963:	mov [bp + 56], bp	; 3: 137 110 56
x34966:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$205:	; Parameter 50 string_2502i# 8
x34970:	mov word [bp + 58], @8214$string_2502i#	; 5: 199 70 58 4 140

strftime$206:	; Deref £temporary3579 -> tp tp 0
x34975:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 50 £temporary3579 -> tp 10
x34978:	mov ax, [si]	; 2: 139 4
x34980:	mov [bp + 60], ax	; 3: 137 70 60

strftime$208:	; Call 50 sprintf 0
x34983:	mov word [bp + 50], strftime$209	; 5: 199 70 50 186 136
x34988:	mov [bp + 52], bp	; 3: 137 110 52
x34991:	add bp, 50	; 3: 131 197 50
x34994:	mov di, bp	; 2: 137 239
x34996:	add di, 2	; 3: 131 199 2
x34999:	jmp sprintf	; 3: 233 110 251

strftime$209:	; PostCall 50

strftime$210:	; Goto 303
x35002:	jmp strftime$303	; 3: 233 202 1

strftime$211:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 50 add 6
x35005:	mov [bp + 56], bp	; 3: 137 110 56
x35008:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$213:	; Parameter 50 string_2502i# 8
x35012:	mov word [bp + 58], @8219$string_2502i#	; 5: 199 70 58 9 140

strftime$214:	; Parameter 50 weekNumberStartSunday 10
x35017:	mov ax, [bp + 26]	; 3: 139 70 26
x35020:	mov [bp + 60], ax	; 3: 137 70 60

strftime$215:	; Call 50 sprintf 0
x35023:	mov word [bp + 50], strftime$216	; 5: 199 70 50 226 136
x35028:	mov [bp + 52], bp	; 3: 137 110 52
x35031:	add bp, 50	; 3: 131 197 50
x35034:	mov di, bp	; 2: 137 239
x35036:	add di, 2	; 3: 131 199 2
x35039:	jmp sprintf	; 3: 233 70 251

strftime$216:	; PostCall 50

strftime$217:	; Goto 303
x35042:	jmp strftime$303	; 3: 233 162 1

strftime$218:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$219:	; Parameter 50 add 6
x35045:	mov [bp + 56], bp	; 3: 137 110 56
x35048:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$220:	; Parameter 50 string_2502i# 8
x35052:	mov word [bp + 58], @8223$string_2502i#	; 5: 199 70 58 14 140

strftime$221:	; Deref £temporary3582 -> tp tp 12
x35057:	mov si, [bp + 12]	; 3: 139 118 12

strftime$222:	; Parameter 50 £temporary3582 -> tp 10
x35060:	mov ax, [si + 12]	; 3: 139 68 12
x35063:	mov [bp + 60], ax	; 3: 137 70 60

strftime$223:	; Call 50 sprintf 0
x35066:	mov word [bp + 50], strftime$224	; 5: 199 70 50 13 137
x35071:	mov [bp + 52], bp	; 3: 137 110 52
x35074:	add bp, 50	; 3: 131 197 50
x35077:	mov di, bp	; 2: 137 239
x35079:	add di, 2	; 3: 131 199 2
x35082:	jmp sprintf	; 3: 233 27 251

strftime$224:	; PostCall 50

strftime$225:	; Goto 303
x35085:	jmp strftime$303	; 3: 233 119 1

strftime$226:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$227:	; Parameter 50 add 6
x35088:	mov [bp + 56], bp	; 3: 137 110 56
x35091:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$228:	; Parameter 50 string_2502i# 8
x35095:	mov word [bp + 58], @8228$string_2502i#	; 5: 199 70 58 19 140

strftime$229:	; Parameter 50 weekNumberStartMonday 10
x35100:	mov ax, [bp + 28]	; 3: 139 70 28
x35103:	mov [bp + 60], ax	; 3: 137 70 60

strftime$230:	; Call 50 sprintf 0
x35106:	mov word [bp + 50], strftime$231	; 5: 199 70 50 53 137
x35111:	mov [bp + 52], bp	; 3: 137 110 52
x35114:	add bp, 50	; 3: 131 197 50
x35117:	mov di, bp	; 2: 137 239
x35119:	add di, 2	; 3: 131 199 2
x35122:	jmp sprintf	; 3: 233 243 250

strftime$231:	; PostCall 50

strftime$232:	; Goto 303
x35125:	jmp strftime$303	; 3: 233 79 1

strftime$233:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$234:	; Parameter 50 add 6
x35128:	mov [bp + 56], bp	; 3: 137 110 56
x35131:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$235:	; Parameter 50 string_2502i3A2502i3A2502i# 8
x35135:	mov word [bp + 58], @8232$string_2502i3A2502i3A2502i#	; 5: 199 70 58 24 140

strftime$236:	; Deref £temporary3585 -> tp tp 4
x35140:	mov si, [bp + 12]	; 3: 139 118 12

strftime$237:	; Parameter 50 £temporary3585 -> tp 10
x35143:	mov ax, [si + 4]	; 3: 139 68 4
x35146:	mov [bp + 60], ax	; 3: 137 70 60

strftime$238:	; Deref £temporary3586 -> tp tp 2
x35149:	mov si, [bp + 12]	; 3: 139 118 12

strftime$239:	; Parameter 50 £temporary3586 -> tp 12
x35152:	mov ax, [si + 2]	; 3: 139 68 2
x35155:	mov [bp + 62], ax	; 3: 137 70 62

strftime$240:	; Deref £temporary3587 -> tp tp 0
x35158:	mov si, [bp + 12]	; 3: 139 118 12

strftime$241:	; Parameter 50 £temporary3587 -> tp 14
x35161:	mov ax, [si]	; 2: 139 4
x35163:	mov [bp + 64], ax	; 3: 137 70 64

strftime$242:	; Call 50 sprintf 0
x35166:	mov word [bp + 50], strftime$243	; 5: 199 70 50 113 137
x35171:	mov [bp + 52], bp	; 3: 137 110 52
x35174:	add bp, 50	; 3: 131 197 50
x35177:	mov di, bp	; 2: 137 239
x35179:	add di, 6	; 3: 131 199 6
x35182:	jmp sprintf	; 3: 233 183 250

strftime$243:	; PostCall 50

strftime$244:	; Goto 303
x35185:	jmp strftime$303	; 3: 233 19 1

strftime$245:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$246:	; Parameter 50 add 6
x35188:	mov [bp + 56], bp	; 3: 137 110 56
x35191:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$247:	; Parameter 50 string_2502i3A2502i3A2502i# 8
x35195:	mov word [bp + 58], @8239$string_2502i3A2502i3A2502i#	; 5: 199 70 58 39 140

strftime$248:	; Deref £temporary3589 -> tp tp 4
x35200:	mov si, [bp + 12]	; 3: 139 118 12

strftime$249:	; Parameter 50 £temporary3589 -> tp 10
x35203:	mov ax, [si + 4]	; 3: 139 68 4
x35206:	mov [bp + 60], ax	; 3: 137 70 60

strftime$250:	; Deref £temporary3590 -> tp tp 2
x35209:	mov si, [bp + 12]	; 3: 139 118 12

strftime$251:	; Parameter 50 £temporary3590 -> tp 12
x35212:	mov ax, [si + 2]	; 3: 139 68 2
x35215:	mov [bp + 62], ax	; 3: 137 70 62

strftime$252:	; Deref £temporary3591 -> tp tp 0
x35218:	mov si, [bp + 12]	; 3: 139 118 12

strftime$253:	; Parameter 50 £temporary3591 -> tp 14
x35221:	mov ax, [si]	; 2: 139 4
x35223:	mov [bp + 64], ax	; 3: 137 70 64

strftime$254:	; Call 50 sprintf 0
x35226:	mov word [bp + 50], strftime$255	; 5: 199 70 50 173 137
x35231:	mov [bp + 52], bp	; 3: 137 110 52
x35234:	add bp, 50	; 3: 131 197 50
x35237:	mov di, bp	; 2: 137 239
x35239:	add di, 6	; 3: 131 199 6
x35242:	jmp sprintf	; 3: 233 123 250

strftime$255:	; PostCall 50

strftime$256:	; Goto 303
x35245:	jmp strftime$303	; 3: 233 215 0

strftime$257:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$258:	; Parameter 50 add 6
x35248:	mov [bp + 56], bp	; 3: 137 110 56
x35251:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$259:	; Parameter 50 string_2502i# 8
x35255:	mov word [bp + 58], @8246$string_2502i#	; 5: 199 70 58 54 140

strftime$260:	; Deref £temporary3593 -> tp tp 10
x35260:	mov si, [bp + 12]	; 3: 139 118 12

strftime$261:	; SignedModulo £temporary3594 £temporary3593 -> tp 100
x35263:	mov ax, [si + 10]	; 3: 139 68 10
x35266:	xor dx, dx	; 2: 49 210
x35268:	idiv word [@8249$int2$100#]	; 4: 247 62 59 140

strftime$262:	; Parameter 50 £temporary3594 10
x35272:	mov [bp + 60], dx	; 3: 137 86 60

strftime$263:	; Call 50 sprintf 0
x35275:	mov word [bp + 50], strftime$264	; 5: 199 70 50 222 137
x35280:	mov [bp + 52], bp	; 3: 137 110 52
x35283:	add bp, 50	; 3: 131 197 50
x35286:	mov di, bp	; 2: 137 239
x35288:	add di, 2	; 3: 131 199 2
x35291:	jmp sprintf	; 3: 233 74 250

strftime$264:	; PostCall 50

strftime$265:	; Goto 303
x35294:	jmp strftime$303	; 3: 233 166 0

strftime$266:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$267:	; Parameter 50 add 6
x35297:	mov [bp + 56], bp	; 3: 137 110 56
x35300:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$268:	; Parameter 50 string_2502i# 8
x35304:	mov word [bp + 58], @8254$string_2502i#	; 5: 199 70 58 61 140

strftime$269:	; Deref £temporary3596 -> tp tp 10
x35309:	mov si, [bp + 12]	; 3: 139 118 12

strftime$270:	; BinaryAdd £temporary3597 £temporary3596 -> tp 1900
x35312:	mov ax, [si + 10]	; 3: 139 68 10
x35315:	add ax, 1900	; 3: 5 108 7

strftime$271:	; Parameter 50 £temporary3597 10
x35318:	mov [bp + 60], ax	; 3: 137 70 60

strftime$272:	; Call 50 sprintf 0
x35321:	mov word [bp + 50], strftime$273	; 5: 199 70 50 12 138
x35326:	mov [bp + 52], bp	; 3: 137 110 52
x35329:	add bp, 50	; 3: 131 197 50
x35332:	mov di, bp	; 2: 137 239
x35334:	add di, 2	; 3: 131 199 2
x35337:	jmp sprintf	; 3: 233 28 250

strftime$273:	; PostCall 50

strftime$274:	; Goto 303
x35340:	jmp strftime$303	; 2: 235 121

strftime$275:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$276:	; Parameter 50 add 6
x35342:	mov [bp + 56], bp	; 3: 137 110 56
x35345:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$277:	; Deref £temporary3599 -> tp tp 16
x35349:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Equal 281 £temporary3599 -> tp 0
x35352:	cmp word [si + 16], 0	; 4: 131 124 16 0
x35356:	je strftime$281	; 2: 116 5

strftime$279:	; Assign £temporary3604 string_summer#
x35358:	mov ax, @8263$string_summer#	; 3: 184 66 140

strftime$280:	; Goto 282
x35361:	jmp strftime$282	; 2: 235 3

strftime$281:	; Assign £temporary3604 string_winter#
x35363:	mov ax, @8264$string_winter#	; 3: 184 73 140

strftime$282:	; Parameter 50 £temporary3604 8
x35366:	mov [bp + 58], ax	; 3: 137 70 58

strftime$283:	; Call 50 strcpy 0
x35369:	mov word [bp + 50], strftime$284	; 5: 199 70 50 55 138
x35374:	mov [bp + 52], bp	; 3: 137 110 52
x35377:	add bp, 50	; 3: 131 197 50
x35380:	jmp strcpy	; 3: 233 25 212

strftime$284:	; PostCall 50

strftime$285:	; Goto 303
x35383:	jmp strftime$303	; 2: 235 78

strftime$286:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$287:	; Parameter 50 add 6
x35385:	mov [bp + 56], bp	; 3: 137 110 56
x35388:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$288:	; Parameter 50 string_25# 8
x35392:	mov word [bp + 58], @8276$string_25#	; 5: 199 70 58 80 140

strftime$289:	; Call 50 strcpy 0
x35397:	mov word [bp + 50], strftime$290	; 5: 199 70 50 83 138
x35402:	mov [bp + 52], bp	; 3: 137 110 52
x35405:	add bp, 50	; 3: 131 197 50
x35408:	jmp strcpy	; 3: 233 253 211

strftime$290:	; PostCall 50

strftime$291:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$292:	; Parameter 50 add 6
x35411:	mov [bp + 56], bp	; 3: 137 110 56
x35414:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$293:	; Parameter 50 string_# 8
x35418:	mov word [bp + 58], @8278$string_#	; 5: 199 70 58 82 140

strftime$294:	; Call 50 strcpy 0
x35423:	mov word [bp + 50], strftime$295	; 5: 199 70 50 109 138
x35428:	mov [bp + 52], bp	; 3: 137 110 52
x35431:	add bp, 50	; 3: 131 197 50
x35434:	jmp strcpy	; 3: 233 227 211

strftime$295:	; PostCall 50

strftime$296:	; Goto 303
x35437:	jmp strftime$303	; 2: 235 24

strftime$297:	; Deref £temporary3608 -> add add 0
x35439:	mov si, bp	; 2: 137 238
x35441:	add si, 30	; 3: 131 198 30

strftime$298:	; BinaryAdd £temporary3610 format index
x35444:	mov di, [bp + 10]	; 3: 139 126 10
x35447:	add di, [bp + 24]	; 3: 3 126 24

strftime$299:	; Deref £temporary3609 -> £temporary3610 £temporary3610 0

strftime$300:	; Assign £temporary3608 -> add £temporary3609 -> £temporary3610
x35450:	mov al, [di]	; 2: 138 5
x35452:	mov [si], al	; 2: 136 4

strftime$301:	; Deref £temporary3611 -> add add 1
x35454:	mov si, bp	; 2: 137 238
x35456:	add si, 30	; 3: 131 198 30

strftime$302:	; Assign £temporary3611 -> add 0
x35459:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$303:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 50 result 6
x35463:	mov ax, [bp + 6]	; 3: 139 70 6
x35466:	mov [bp + 56], ax	; 3: 137 70 56

strftime$305:	; Call 50 strlen 0
x35469:	mov word [bp + 50], strftime$306	; 5: 199 70 50 155 138
x35474:	mov [bp + 52], bp	; 3: 137 110 52
x35477:	add bp, 50	; 3: 131 197 50
x35480:	jmp strlen	; 3: 233 115 2

strftime$306:	; PostCall 50

strftime$307:	; GetReturnValue £temporary3612

strftime$308:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
x35483:	mov [bp + 50], bx	; 3: 137 94 50

strftime$309:	; Parameter 50 add 6
x35486:	mov [bp + 58], bp	; 3: 137 110 58
x35489:	add word [bp + 58], 30	; 4: 131 70 58 30

strftime$310:	; Call 50 strlen 0
x35493:	mov word [bp + 52], strftime$311	; 5: 199 70 52 179 138
x35498:	mov [bp + 54], bp	; 3: 137 110 54
x35501:	add bp, 52	; 3: 131 197 52
x35504:	jmp strlen	; 3: 233 91 2

strftime$311:	; PostCall 50
x35507:	mov ax, bx	; 2: 137 216
x35509:	mov bx, [bp + 50]	; 3: 139 94 50

strftime$312:	; GetReturnValue £temporary3613

strftime$313:	; BinaryAdd £temporary3614 £temporary3612 £temporary3613
x35512:	add bx, ax	; 2: 1 195

strftime$314:	; SignedGreaterThanEqual 322 £temporary3614 maxSize
x35514:	cmp bx, [bp + 8]	; 3: 59 94 8
x35517:	jge strftime$322	; 2: 125 33

strftime$315:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$316:	; Parameter 50 result 6
x35519:	mov ax, [bp + 6]	; 3: 139 70 6
x35522:	mov [bp + 56], ax	; 3: 137 70 56

strftime$317:	; Parameter 50 add 8
x35525:	mov [bp + 58], bp	; 3: 137 110 58
x35528:	add word [bp + 58], 30	; 4: 131 70 58 30

strftime$318:	; Call 50 strcat 0
x35532:	mov word [bp + 50], strftime$319	; 5: 199 70 50 218 138
x35537:	mov [bp + 52], bp	; 3: 137 110 52
x35540:	add bp, 50	; 3: 131 197 50
x35543:	jmp strcat	; 3: 233 87 2

strftime$319:	; PostCall 50

strftime$320:	; Increment index
x35546:	inc word [bp + 24]	; 3: 255 70 24

strftime$321:	; Goto 49
x35549:	jmp strftime$49	; 3: 233 184 250

strftime$322:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$323:	; Parameter 24 result 6
x35552:	mov ax, [bp + 6]	; 3: 139 70 6
x35555:	mov [bp + 30], ax	; 3: 137 70 30

strftime$324:	; Call 24 strlen 0
x35558:	mov word [bp + 24], strftime$325	; 5: 199 70 24 244 138
x35563:	mov [bp + 26], bp	; 3: 137 110 26
x35566:	add bp, 24	; 3: 131 197 24
x35569:	jmp strlen	; 3: 233 26 2

strftime$325:	; PostCall 24

strftime$326:	; GetReturnValue £temporary3617

strftime$327:	; SetReturnValue £temporary3617

strftime$328:	; Return £temporary3617
x35572:	mov ax, [bp]	; 3: 139 70 0
x35575:	mov di, [bp + 4]	; 3: 139 126 4
x35578:	mov bp, [bp + 2]	; 3: 139 110 2
x35581:	jmp ax	; 2: 255 224

strftime$329:	; FunctionEnd strftime

@7888$g_longDayList:
x35583:	dw @7881$string_Sunday# ; 2: 13 139
x35585:	dw @7882$string_Monday# ; 2: 20 139
x35587:	dw @7883$string_Tuesday# ; 2: 27 139
x35589:	dw @7884$string_Wednesday# ; 2: 35 139
x35591:	dw @7885$string_Thursday# ; 2: 45 139
x35593:	dw @7886$string_Friday# ; 2: 54 139
x35595:	dw @7887$string_Saturday# ; 2: 61 139

@7881$string_Sunday#:
x35597:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@7882$string_Monday#:
x35604:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@7883$string_Tuesday#:
x35611:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@7884$string_Wednesday#:
x35619:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@7885$string_Thursday#:
x35629:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@7886$string_Friday#:
x35638:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@7887$string_Saturday#:
x35645:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@7914$g_longMonthList:
x35654:	dw @7902$string_January# ; 2: 94 139
x35656:	dw @7903$string_February# ; 2: 102 139
x35658:	dw @7904$string_March# ; 2: 111 139
x35660:	dw @7905$string_April# ; 2: 117 139
x35662:	dw @7906$string_May# ; 2: 123 139
x35664:	dw @7907$string_June# ; 2: 127 139
x35666:	dw @7908$string_July# ; 2: 132 139
x35668:	dw @7909$string_August# ; 2: 137 139
x35670:	dw @7910$string_September# ; 2: 144 139
x35672:	dw @7911$string_October# ; 2: 154 139
x35674:	dw @7912$string_November# ; 2: 162 139
x35676:	dw @7913$string_December# ; 2: 171 139

@7902$string_January#:
x35678:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@7903$string_February#:
x35686:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@7904$string_March#:
x35695:	db "March", 0	; 6: 77 97 114 99 104 0

@7905$string_April#:
x35701:	db "April", 0	; 6: 65 112 114 105 108 0

@7906$string_May#:
x35707:	db "May", 0	; 4: 77 97 121 0

@7907$string_June#:
x35711:	db "June", 0	; 5: 74 117 110 101 0

@7908$string_July#:
x35716:	db "July", 0	; 5: 74 117 108 121 0

@7909$string_August#:
x35721:	db "August", 0	; 7: 65 117 103 117 115 116 0

@7910$string_September#:
x35728:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@7911$string_October#:
x35738:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@7912$string_November#:
x35746:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@7913$string_December#:
x35755:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@8078$string_#:
x35764:	db 0	; 1: 0

@8118$int2$2#:
x35765:	dw 2	; 2: 2 0

@8126$int2$2#:
x35767:	dw 2	; 2: 2 0

@8134$int2$2#:
x35769:	dw 2	; 2: 2 0

@8142$int2$2#:
x35771:	dw 2	; 2: 2 0

@8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x35773:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8164$string_2502i#:
x35803:	db "%02i", 0	; 5: 37 48 50 105 0

@8169$string_2502i#:
x35808:	db "%02i", 0	; 5: 37 48 50 105 0

@8174$string_2502i#:
x35813:	db "%02i", 0	; 5: 37 48 50 105 0

@8177$int2$12#:
x35818:	dw 12	; 2: 12 0

@8182$string_2503i#:
x35820:	db "%03i", 0	; 5: 37 48 51 105 0

@8187$string_2502i#:
x35825:	db "%02i", 0	; 5: 37 48 50 105 0

@8195$string_2502i#:
x35830:	db "%02i", 0	; 5: 37 48 50 105 0

@8200$string_25s#:
x35835:	db "%s", 0	; 3: 37 115 0

@8201$string_AM#:
x35838:	db "AM", 0	; 3: 65 77 0

@8202$string_PM#:
x35841:	db "PM", 0	; 3: 80 77 0

@8214$string_2502i#:
x35844:	db "%02i", 0	; 5: 37 48 50 105 0

@8219$string_2502i#:
x35849:	db "%02i", 0	; 5: 37 48 50 105 0

@8223$string_2502i#:
x35854:	db "%02i", 0	; 5: 37 48 50 105 0

@8228$string_2502i#:
x35859:	db "%02i", 0	; 5: 37 48 50 105 0

@8232$string_2502i3A2502i3A2502i#:
x35864:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8239$string_2502i3A2502i3A2502i#:
x35879:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8246$string_2502i#:
x35894:	db "%02i", 0	; 5: 37 48 50 105 0

@8249$int2$100#:
x35899:	dw 100	; 2: 100 0

@8254$string_2502i#:
x35901:	db "%02i", 0	; 5: 37 48 50 105 0

@8263$string_summer#:
x35906:	db "summer", 0	; 7: 115 117 109 109 101 114 0

@8264$string_winter#:
x35913:	db "winter", 0	; 7: 119 105 110 116 101 114 0

@8276$string_25#:
x35920:	db "%", 0	; 2: 37 0

@8278$string_#:
x35922:	db 0	; 1: 0

getWeekNumber:	; Deref £temporary3473 -> tp tp 10
x35923:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$1:	; BinarySubtract £temporary3474 £temporary3473 -> tp 69
x35926:	mov ax, [si + 10]	; 3: 139 68 10
x35929:	sub ax, 69	; 3: 131 232 69

getWeekNumber$2:	; SignedDivide £temporary3475 £temporary3474 4
x35932:	xor dx, dx	; 2: 49 210
x35934:	idiv word [@7983$int2$4#]	; 4: 247 62 6 141

getWeekNumber$3:	; IntegralToIntegral £temporary3476 £temporary3475
x35938:	and eax, 65535	; 6: 102 37 255 255 0 0
x35944:	cmp ax, 0	; 3: 131 248 0
x35947:	jge getWeekNumber$4	; 2: 125 5
x35949:	neg ax	; 2: 247 216
x35951:	neg eax	; 3: 102 247 216

getWeekNumber$4:	; Assign leapDays £temporary3476
x35954:	mov [bp + 8], eax	; 4: 102 137 70 8

getWeekNumber$5:	; Deref £temporary3477 -> tp tp 10
x35958:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$6:	; BinarySubtract £temporary3478 £temporary3477 -> tp 70
x35961:	mov ax, [si + 10]	; 3: 139 68 10
x35964:	sub ax, 70	; 3: 131 232 70

getWeekNumber$7:	; SignedMultiply £temporary3479 £temporary3478 365
x35967:	xor dx, dx	; 2: 49 210
x35969:	imul word [@7992$int2$365#]	; 4: 247 46 8 141

getWeekNumber$8:	; IntegralToIntegral £temporary3480 £temporary3479
x35973:	and eax, 65535	; 6: 102 37 255 255 0 0
x35979:	cmp ax, 0	; 3: 131 248 0
x35982:	jge getWeekNumber$9	; 2: 125 5
x35984:	neg ax	; 2: 247 216
x35986:	neg eax	; 3: 102 247 216

getWeekNumber$9:	; BinaryAdd £temporary3481 £temporary3480 leapDays
x35989:	add eax, [bp + 8]	; 4: 102 3 70 8

getWeekNumber$10:	; IntegralToIntegral £temporary3482 £temporary3481
x35993:	cmp eax, 0	; 4: 102 131 248 0
x35997:	jge getWeekNumber$11	; 2: 125 5
x35999:	neg eax	; 3: 102 247 216
x36002:	neg ax	; 2: 247 216

getWeekNumber$11:	; Assign totalDays £temporary3482
x36004:	mov [bp + 12], ax	; 3: 137 70 12

getWeekNumber$12:	; SignedGreaterThanEqual 15 totalDays 3
x36007:	cmp word [bp + 12], 3	; 4: 131 126 12 3
x36011:	jge getWeekNumber$15	; 2: 125 11

getWeekNumber$13:	; BinaryAdd weekDayJanuaryFirst totalDays 4
x36013:	mov ax, [bp + 12]	; 3: 139 70 12
x36016:	add ax, 4	; 3: 131 192 4
x36019:	mov [bp + 14], ax	; 3: 137 70 14

getWeekNumber$14:	; Goto 17
x36022:	jmp getWeekNumber$17	; 2: 235 15

getWeekNumber$15:	; BinarySubtract £temporary3485 totalDays 3
x36024:	mov ax, [bp + 12]	; 3: 139 70 12
x36027:	sub ax, 3	; 3: 131 232 3

getWeekNumber$16:	; SignedModulo weekDayJanuaryFirst £temporary3485 7
x36030:	xor dx, dx	; 2: 49 210
x36032:	idiv word [@8009$int2$7#]	; 4: 247 62 10 141
x36036:	mov [bp + 14], dx	; 3: 137 86 14

getWeekNumber$17:	; BinarySubtract firstWeekSize 7 weekDayJanuaryFirst
x36039:	mov ax, 7	; 3: 184 7 0
x36042:	sub ax, [bp + 14]	; 3: 43 70 14
x36045:	mov [bp + 16], ax	; 3: 137 70 16

getWeekNumber$18:	; Deref £temporary3488 -> tp tp 14
x36048:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$19:	; SignedGreaterThanEqual 22 £temporary3488 -> tp firstWeekSize
x36051:	mov ax, [bp + 16]	; 3: 139 70 16
x36054:	cmp [si + 14], ax	; 3: 57 68 14
x36057:	jge getWeekNumber$22	; 2: 125 14

getWeekNumber$20:	; SetReturnValue 0
x36059:	mov bx, 0	; 3: 187 0 0

getWeekNumber$21:	; Return 0
x36062:	mov ax, [bp]	; 3: 139 70 0
x36065:	mov di, [bp + 4]	; 3: 139 126 4
x36068:	mov bp, [bp + 2]	; 3: 139 110 2
x36071:	jmp ax	; 2: 255 224

getWeekNumber$22:	; Deref £temporary3490 -> tp tp 14
x36073:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$23:	; BinarySubtract £temporary3491 £temporary3490 -> tp firstWeekSize
x36076:	mov ax, [si + 14]	; 3: 139 68 14
x36079:	sub ax, [bp + 16]	; 3: 43 70 16

getWeekNumber$24:	; SignedDivide £temporary3492 £temporary3491 7
x36082:	xor dx, dx	; 2: 49 210
x36084:	idiv word [@8022$int2$7#]	; 4: 247 62 12 141

getWeekNumber$25:	; BinaryAdd £temporary3493 £temporary3492 1
x36088:	inc ax	; 1: 64

getWeekNumber$26:	; SetReturnValue £temporary3493
x36089:	mov bx, ax	; 2: 137 195

getWeekNumber$27:	; Return £temporary3493
x36091:	mov ax, [bp]	; 3: 139 70 0
x36094:	mov di, [bp + 4]	; 3: 139 126 4
x36097:	mov bp, [bp + 2]	; 3: 139 110 2
x36100:	jmp ax	; 2: 255 224

getWeekNumber$28:	; FunctionEnd getWeekNumber

@7983$int2$4#:
x36102:	dw 4	; 2: 4 0

@7992$int2$365#:
x36104:	dw 365	; 2: 109 1

@8009$int2$7#:
x36106:	dw 7	; 2: 7 0

@8022$int2$7#:
x36108:	dw 7	; 2: 7 0

strlen:	; Assign index 0
x36110:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary3865 string index
x36115:	mov si, [bp + 6]	; 3: 139 118 6
x36118:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary3864 -> £temporary3865 £temporary3865 0

strlen$3:	; Equal 6 £temporary3864 -> £temporary3865 0
x36121:	cmp byte [si], 0	; 3: 128 60 0
x36124:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x36126:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x36129:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x36131:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x36134:	mov ax, [bp]	; 3: 139 70 0
x36137:	mov di, [bp + 4]	; 3: 139 126 4
x36140:	mov bp, [bp + 2]	; 3: 139 110 2
x36143:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x36145:	mov ax, [bp + 6]	; 3: 139 70 6
x36148:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x36151:	mov word [bp + 12], strcat$3	; 5: 199 70 12 69 141
x36156:	mov [bp + 14], bp	; 3: 137 110 14
x36159:	add bp, 12	; 3: 131 197 12
x36162:	nop	; 1: 144
x36163:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3721

strcat$5:	; Assign targetLength £temporary3721
x36165:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x36168:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3723 source index
x36173:	mov si, [bp + 8]	; 3: 139 118 8
x36176:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3722 -> £temporary3723 £temporary3723 0

strcat$9:	; Equal 18 £temporary3722 -> £temporary3723 0
x36179:	cmp byte [si], 0	; 3: 128 60 0
x36182:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3726 targetLength index
x36184:	mov ax, [bp + 12]	; 3: 139 70 12
x36187:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3728 target £temporary3726
x36190:	mov si, [bp + 6]	; 3: 139 118 6
x36193:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3727 -> £temporary3728 £temporary3728 0

strcat$13:	; BinaryAdd £temporary3730 source index
x36195:	mov di, [bp + 8]	; 3: 139 126 8
x36198:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3729 -> £temporary3730 £temporary3730 0

strcat$15:	; Assign £temporary3727 -> £temporary3728 £temporary3729 -> £temporary3730
x36201:	mov al, [di]	; 2: 138 5
x36203:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x36205:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x36208:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3731 targetLength index
x36210:	mov ax, [bp + 12]	; 3: 139 70 12
x36213:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3733 target £temporary3731
x36216:	mov si, [bp + 6]	; 3: 139 118 6
x36219:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3732 -> £temporary3733 £temporary3733 0

strcat$21:	; Assign £temporary3732 -> £temporary3733 0
x36221:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x36224:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x36227:	mov ax, [bp]	; 3: 139 70 0
x36230:	mov di, [bp + 4]	; 3: 139 126 4
x36233:	mov bp, [bp + 2]	; 3: 139 110 2
x36236:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x36238:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x36243:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x36247:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x36249:	mov ax, [stderr]	; 3: 161 139 77
x36252:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36255:	mov word [bp + 16], @9614$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 223 141

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x36260:	mov word [bp + 18], @9615$string_n203D3D201#	; 5: 199 70 18 13 142

assert_test$6:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x36265:	mov word [bp + 20], @9616$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 20 142

assert_test$7:	; Parameter 8 8 14
x36270:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x36275:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 198 141
x36280:	mov [bp + 10], bp	; 3: 137 110 10
x36283:	add bp, 8	; 3: 131 197 8
x36286:	mov di, bp	; 2: 137 239
x36288:	add di, 6	; 3: 131 199 6
x36291:	jmp fprintf	; 3: 233 198 208

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x36294:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 212 141
x36299:	mov [bp + 10], bp	; 3: 137 110 10
x36302:	add bp, 8	; 3: 131 197 8
x36305:	jmp abort	; 3: 233 243 208

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x36308:	mov ax, [bp]	; 3: 139 70 0
x36311:	mov di, [bp + 4]	; 3: 139 126 4
x36314:	mov bp, [bp + 2]	; 3: 139 110 2
x36317:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

@9614$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x36319:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@9615$string_n203D3D201#:
x36365:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

@9616$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x36372:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 67: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x36439:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x36444:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 106 142
x36449:	mov [bp + 8], bp	; 3: 137 110 8
x36452:	add bp, 6	; 3: 131 197 6
x36455:	jmp malloc	; 3: 233 216 228

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary5951

malloc_test$5:	; Assign b £temporary5951
x36458:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x36461:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x36466:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 128 142
x36471:	mov [bp + 10], bp	; 3: 137 110 10
x36474:	add bp, 8	; 3: 131 197 8
x36477:	jmp malloc	; 3: 233 194 228

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary5952

malloc_test$11:	; Assign c £temporary5952
x36480:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x36483:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x36488:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 150 142
x36493:	mov [bp + 12], bp	; 3: 137 110 12
x36496:	add bp, 10	; 3: 131 197 10
x36499:	jmp malloc	; 3: 233 172 228

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary5953

malloc_test$17:	; Assign d £temporary5953
x36502:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x36505:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 167 142
x36510:	mov [bp + 14], bp	; 3: 137 110 14
x36513:	add bp, 12	; 3: 131 197 12
x36516:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x36519:	mov ax, [bp + 8]	; 3: 139 70 8
x36522:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x36525:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x36530:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 192 142
x36535:	mov [bp + 14], bp	; 3: 137 110 14
x36538:	add bp, 12	; 3: 131 197 12
x36541:	jmp realloc	; 3: 233 16 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x36544:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 206 142
x36549:	mov [bp + 14], bp	; 3: 137 110 14
x36552:	add bp, 12	; 3: 131 197 12
x36555:	nop	; 1: 144
x36556:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x36558:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x36563:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 225 142
x36568:	mov [bp + 14], bp	; 3: 137 110 14
x36571:	add bp, 12	; 3: 131 197 12
x36574:	jmp malloc	; 3: 233 97 228

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x36577:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 239 142
x36582:	mov [bp + 14], bp	; 3: 137 110 14
x36585:	add bp, 12	; 3: 131 197 12
x36588:	nop	; 1: 144
x36589:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x36591:	mov ax, [bp + 6]	; 3: 139 70 6
x36594:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x36597:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 3 143
x36602:	mov [bp + 14], bp	; 3: 137 110 14
x36605:	add bp, 12	; 3: 131 197 12
x36608:	jmp free	; 3: 233 76 230

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x36611:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 17 143
x36616:	mov [bp + 14], bp	; 3: 137 110 14
x36619:	add bp, 12	; 3: 131 197 12
x36622:	nop	; 1: 144
x36623:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x36625:	mov ax, [bp + 10]	; 3: 139 70 10
x36628:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x36631:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 37 143
x36636:	mov [bp + 14], bp	; 3: 137 110 14
x36639:	add bp, 12	; 3: 131 197 12
x36642:	jmp free	; 3: 233 42 230

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x36645:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 51 143
x36650:	mov [bp + 14], bp	; 3: 137 110 14
x36653:	add bp, 12	; 3: 131 197 12
x36656:	nop	; 1: 144
x36657:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x36659:	mov ax, [bp]	; 3: 139 70 0
x36662:	mov di, [bp + 4]	; 3: 139 126 4
x36665:	mov bp, [bp + 2]	; 3: 139 110 2
x36668:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x36670:	mov ax, [g_firstBlockPtr]	; 3: 161 208 116
x36673:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x36676:	mov word [bp + 14], @376$string_Heap3A0A#	; 5: 199 70 14 176 143

print_heap$3:	; Call 8 printf 0
x36681:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 89 143
x36686:	mov [bp + 10], bp	; 3: 137 110 10
x36689:	add bp, 8	; 3: 131 197 8
x36692:	mov di, bp	; 2: 137 239
x36694:	jmp printf	; 3: 233 171 125

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x36697:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36701:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x36703:	mov word [bp + 14], @382$string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 183 143

print_heap$8:	; IntegralToIntegral £temporary150 currBlockPtr
x36708:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary150 8
x36711:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary151 -> currBlockPtr currBlockPtr 0
x36714:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary151 -> currBlockPtr 10
x36717:	mov ax, [si]	; 2: 139 4
x36719:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x36722:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 133 143
x36727:	mov [bp + 10], bp	; 3: 137 110 10
x36730:	add bp, 8	; 3: 131 197 8
x36733:	mov di, bp	; 2: 137 239
x36735:	add di, 4	; 3: 131 199 4
x36738:	jmp printf	; 3: 233 127 125

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary153 -> currBlockPtr currBlockPtr 2
x36741:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary153 -> currBlockPtr
x36744:	mov ax, [si + 2]	; 3: 139 68 2
x36747:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x36750:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x36752:	mov word [bp + 14], @387$string_0A#	; 5: 199 70 14 206 143

print_heap$19:	; Call 8 printf 0
x36757:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 165 143
x36762:	mov [bp + 10], bp	; 3: 137 110 10
x36765:	add bp, 8	; 3: 131 197 8
x36768:	mov di, bp	; 2: 137 239
x36770:	jmp printf	; 3: 233 95 125

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x36773:	mov ax, [bp]	; 3: 139 70 0
x36776:	mov di, [bp + 4]	; 3: 139 126 4
x36779:	mov bp, [bp + 2]	; 3: 139 110 2
x36782:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

@376$string_Heap3A0A#:
x36784:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

@382$string_2020Address2025u2C20Size2025u0A#:
x36791:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

@387$string_0A#:
x36814:	db 10, 0	; 2: 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x36816:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36820:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x36822:	mov ax, [stderr]	; 3: 161 139 77
x36825:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36828:	mov word [bp + 18], @279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 151 145

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x36833:	mov word [bp + 20], @280$string_newMemorySize203E3D200#	; 5: 199 70 20 197 145

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36838:	mov word [bp + 22], @281$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 216 145

realloc$6:	; Parameter 10 259 14
x36843:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x36848:	mov word [bp + 10], realloc$8	; 5: 199 70 10 3 144
x36853:	mov [bp + 12], bp	; 3: 137 110 12
x36856:	add bp, 10	; 3: 131 197 10
x36859:	mov di, bp	; 2: 137 239
x36861:	add di, 6	; 3: 131 199 6
x36864:	jmp fprintf	; 3: 233 137 206

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x36867:	mov word [bp + 10], realloc$11	; 5: 199 70 10 17 144
x36872:	mov [bp + 12], bp	; 3: 137 110 12
x36875:	add bp, 10	; 3: 131 197 10
x36878:	jmp abort	; 3: 233 182 206

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x36881:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36885:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x36887:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36891:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x36893:	mov ax, [stderr]	; 3: 161 139 77
x36896:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36899:	mov word [bp + 18], @295$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 23 146

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x36904:	mov word [bp + 20], @296$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 69 146

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36909:	mov word [bp + 22], @297$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 119 146

realloc$19:	; Parameter 10 260 14
x36914:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x36919:	mov word [bp + 10], realloc$21	; 5: 199 70 10 74 144
x36924:	mov [bp + 12], bp	; 3: 137 110 12
x36927:	add bp, 10	; 3: 131 197 10
x36930:	mov di, bp	; 2: 137 239
x36932:	add di, 6	; 3: 131 199 6
x36935:	jmp fprintf	; 3: 233 66 206

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x36938:	mov word [bp + 10], realloc$24	; 5: 199 70 10 88 144
x36943:	mov [bp + 12], bp	; 3: 137 110 12
x36946:	add bp, 10	; 3: 131 197 10
x36949:	jmp abort	; 3: 233 111 206

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x36952:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36956:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x36958:	mov ax, [bp + 8]	; 3: 139 70 8
x36961:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x36964:	mov word [bp + 10], realloc$29	; 5: 199 70 10 114 144
x36969:	mov [bp + 12], bp	; 3: 137 110 12
x36972:	add bp, 10	; 3: 131 197 10
x36975:	jmp malloc	; 3: 233 208 226

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary108

realloc$31:	; SetReturnValue £temporary108

realloc$32:	; Return £temporary108
x36978:	mov ax, [bp]	; 3: 139 70 0
x36981:	mov di, [bp + 4]	; 3: 139 126 4
x36984:	mov bp, [bp + 2]	; 3: 139 110 2
x36987:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x36989:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36993:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x36995:	mov ax, [bp + 6]	; 3: 139 70 6
x36998:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x37001:	mov word [bp + 10], realloc$37	; 5: 199 70 10 151 144
x37006:	mov [bp + 12], bp	; 3: 137 110 12
x37009:	add bp, 10	; 3: 131 197 10
x37012:	jmp free	; 3: 233 184 228

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x37015:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x37018:	mov ax, [bp]	; 3: 139 70 0
x37021:	mov di, [bp + 4]	; 3: 139 126 4
x37024:	mov bp, [bp + 2]	; 3: 139 110 2
x37027:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary111 newMemorySize
x37029:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary111 4
x37032:	add ax, 4	; 3: 131 192 4
x37035:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary113 oldMemoryPtr
x37038:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary114 £temporary113 4
x37041:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary115 £temporary114

realloc$45:	; Assign oldBlockPtr £temporary115
x37044:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary116 -> oldBlockPtr oldBlockPtr 0
x37047:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary116 -> oldBlockPtr
x37050:	mov ax, [si]	; 2: 139 4
x37052:	cmp [bp + 10], ax	; 3: 57 70 10
x37055:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary118 -> oldBlockPtr oldBlockPtr 0
x37057:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary118 -> oldBlockPtr newBlockSize
x37060:	mov ax, [bp + 10]	; 3: 139 70 10
x37063:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x37065:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x37068:	mov ax, [bp]	; 3: 139 70 0
x37071:	mov di, [bp + 4]	; 3: 139 126 4
x37074:	mov bp, [bp + 2]	; 3: 139 110 2
x37077:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x37079:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x37084:	mov ax, [g_firstBlockPtr]	; 3: 161 208 116
x37087:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x37090:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x37094:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x37096:	mov ax, [bp + 12]	; 3: 139 70 12
x37099:	cmp [bp + 16], ax	; 3: 57 70 16
x37102:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary121 currBlockPtr
x37104:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary121
x37107:	mov bx, [bp + 14]	; 3: 139 94 14
x37110:	sub bx, ax	; 2: 41 195
x37112:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x37115:	mov ax, [bp + 10]	; 3: 139 70 10
x37118:	cmp [bp + 18], ax	; 3: 57 70 18
x37121:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary124 -> oldBlockPtr oldBlockPtr 0
x37123:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary124 -> oldBlockPtr newBlockSize
x37126:	mov ax, [bp + 10]	; 3: 139 70 10
x37129:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x37131:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x37134:	mov ax, [bp]	; 3: 139 70 0
x37137:	mov di, [bp + 4]	; 3: 139 126 4
x37140:	mov bp, [bp + 2]	; 3: 139 110 2
x37143:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary125 currBlockPtr
x37145:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary125
x37148:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary126 -> currBlockPtr currBlockPtr 2
x37151:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary126 -> currBlockPtr
x37154:	mov ax, [si + 2]	; 3: 139 68 2
x37157:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x37160:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x37162:	mov ax, [bp + 8]	; 3: 139 70 8
x37165:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x37168:	mov word [bp + 14], realloc$71	; 5: 199 70 14 62 145
x37173:	mov [bp + 16], bp	; 3: 137 110 16
x37176:	add bp, 14	; 3: 131 197 14
x37179:	jmp malloc	; 3: 233 4 226

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary127

realloc$73:	; Assign newMemoryPtr £temporary127
x37182:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x37185:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x37189:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x37191:	mov ax, [bp + 14]	; 3: 139 70 14
x37194:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x37197:	mov ax, [bp + 6]	; 3: 139 70 6
x37200:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x37203:	mov ax, [bp + 8]	; 3: 139 70 8
x37206:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x37209:	mov word [bp + 16], realloc$80	; 5: 199 70 16 103 145
x37214:	mov [bp + 18], bp	; 3: 137 110 18
x37217:	add bp, 16	; 3: 131 197 16
x37220:	jmp memcpy	; 3: 233 79 1

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x37223:	mov ax, [bp + 6]	; 3: 139 70 6
x37226:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x37229:	mov word [bp + 16], realloc$84	; 5: 199 70 16 123 145
x37234:	mov [bp + 18], bp	; 3: 137 110 18
x37237:	add bp, 16	; 3: 131 197 16
x37240:	jmp free	; 3: 233 212 227

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x37243:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x37246:	mov ax, [bp]	; 3: 139 70 0
x37249:	mov di, [bp + 4]	; 3: 139 126 4
x37252:	mov bp, [bp + 2]	; 3: 139 110 2
x37255:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x37257:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x37260:	mov ax, [bp]	; 3: 139 70 0
x37263:	mov di, [bp + 4]	; 3: 139 126 4
x37266:	mov bp, [bp + 2]	; 3: 139 110 2
x37269:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

@279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37271:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@280$string_newMemorySize203E3D200#:
x37317:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@281$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37336:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

@295$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37399:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@296$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x37445:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

@297$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37495:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

memcpy:	; IntegralToIntegral £temporary3921 target
x37558:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary3921
x37561:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary3922 source
x37564:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary3922
x37567:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x37570:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x37575:	mov ax, [bp + 10]	; 3: 139 70 10
x37578:	cmp [bp + 16], ax	; 3: 57 70 16
x37581:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary3926 charTarget index
x37583:	mov si, [bp + 12]	; 3: 139 118 12
x37586:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary3925 -> £temporary3926 £temporary3926 0

memcpy$8:	; BinaryAdd £temporary3928 charSource index
x37589:	mov di, [bp + 14]	; 3: 139 126 14
x37592:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary3927 -> £temporary3928 £temporary3928 0

memcpy$10:	; Assign £temporary3925 -> £temporary3926 £temporary3927 -> £temporary3928
x37595:	mov al, [di]	; 2: 138 5
x37597:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x37599:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x37602:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary3929 target
x37604:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary3929

memcpy$15:	; Return £temporary3929
x37607:	mov ax, [bp]	; 3: 139 70 0
x37610:	mov di, [bp + 4]	; 3: 139 126 4
x37613:	mov bp, [bp + 2]	; 3: 139 110 2
x37616:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37618:	mov word [bp + 12], @9004$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 221 148

print_test$2:	; Parameter 6 123 8
x37623:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x37628:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x37633:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x37638:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x37643:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x37648:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x37653:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x37658:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x37663:	mov word [bp + 6], print_test$11	; 5: 199 70 6 50 147
x37668:	mov [bp + 8], bp	; 3: 137 110 8
x37671:	add bp, 6	; 3: 131 197 6
x37674:	mov di, bp	; 2: 137 239
x37676:	add di, 16	; 3: 131 199 16
x37679:	jmp printf	; 3: 233 210 121

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37682:	mov word [bp + 12], @9022$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 25 149

print_test$14:	; Parameter 6 -123 8
x37687:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x37692:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x37697:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x37702:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x37707:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x37712:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x37717:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x37722:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x37727:	mov word [bp + 6], print_test$23	; 5: 199 70 6 114 147
x37732:	mov [bp + 8], bp	; 3: 137 110 8
x37735:	add bp, 6	; 3: 131 197 6
x37738:	mov di, bp	; 2: 137 239
x37740:	add di, 16	; 3: 131 199 16
x37743:	jmp printf	; 3: 233 146 121

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37746:	mov word [bp + 12], @9040$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 85 149

print_test$26:	; Parameter 6 123 8
x37751:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x37756:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x37761:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x37766:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x37771:	mov word [bp + 6], print_test$31	; 5: 199 70 6 158 147
x37776:	mov [bp + 8], bp	; 3: 137 110 8
x37779:	add bp, 6	; 3: 131 197 6
x37782:	mov di, bp	; 2: 137 239
x37784:	add di, 8	; 3: 131 199 8
x37787:	jmp printf	; 3: 233 102 121

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37790:	mov word [bp + 12], @9050$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 117 149

print_test$34:	; Parameter 6 -123 8
x37795:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x37800:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x37805:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x37810:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x37815:	mov word [bp + 6], print_test$39	; 5: 199 70 6 202 147
x37820:	mov [bp + 8], bp	; 3: 137 110 8
x37823:	add bp, 6	; 3: 131 197 6
x37826:	mov di, bp	; 2: 137 239
x37828:	add di, 8	; 3: 131 199 8
x37831:	jmp printf	; 3: 233 58 121

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37834:	mov word [bp + 12], @9060$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 149 149

print_test$42:	; PushFloat 123.456
x37839:	fld qword [@9061$float8$123.456#]	; 4: 221 6 233 149

print_test$43:	; Parameter 6 123.456 8
x37843:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x37846:	fld qword [@9062$float8$123.456#]	; 4: 221 6 241 149

print_test$45:	; Parameter 6 123.456 16
x37850:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x37853:	fld qword [@9063$float8$123.456#]	; 4: 221 6 249 149

print_test$47:	; Parameter 6 123.456 24
x37857:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x37860:	fld qword [@9064$float8$123.456#]	; 4: 221 6 1 150

print_test$49:	; Parameter 6 123.456 32
x37864:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x37867:	fld qword [@9065$float8$123.456#]	; 4: 221 6 9 150

print_test$51:	; Parameter 6 123.456 40
x37871:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x37874:	fld qword [@9066$float8$123.456#]	; 4: 221 6 17 150

print_test$53:	; Parameter 6 123.456 48
x37878:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x37881:	fld qword [@9067$float8$123.456#]	; 4: 221 6 25 150

print_test$55:	; Parameter 6 123.456 56
x37885:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x37888:	fld qword [@9068$float8$123.456#]	; 4: 221 6 33 150

print_test$57:	; Parameter 6 123.456 64
x37892:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x37895:	mov word [bp + 6], print_test$59	; 5: 199 70 6 26 148
x37900:	mov [bp + 8], bp	; 3: 137 110 8
x37903:	add bp, 6	; 3: 131 197 6
x37906:	mov di, bp	; 2: 137 239
x37908:	add di, 64	; 3: 131 199 64
x37911:	jmp printf	; 3: 233 234 120

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37914:	mov word [bp + 12], @9078$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 41 150

print_test$62:	; PushFloat -123.456
x37919:	fld qword [@9079$float8$minus123.456#]	; 4: 221 6 125 150

print_test$63:	; Parameter 6 -123.456 8
x37923:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x37926:	fld qword [@9080$float8$minus123.456#]	; 4: 221 6 133 150

print_test$65:	; Parameter 6 -123.456 16
x37930:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x37933:	fld qword [@9081$float8$minus123.456#]	; 4: 221 6 141 150

print_test$67:	; Parameter 6 -123.456 24
x37937:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x37940:	fld qword [@9082$float8$minus123.456#]	; 4: 221 6 149 150

print_test$69:	; Parameter 6 -123.456 32
x37944:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x37947:	fld qword [@9083$float8$minus123.456#]	; 4: 221 6 157 150

print_test$71:	; Parameter 6 -123.456 40
x37951:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x37954:	fld qword [@9084$float8$minus123.456#]	; 4: 221 6 165 150

print_test$73:	; Parameter 6 -123.456 48
x37958:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x37961:	fld qword [@9085$float8$minus123.456#]	; 4: 221 6 173 150

print_test$75:	; Parameter 6 -123.456 56
x37965:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x37968:	fld qword [@9086$float8$minus123.456#]	; 4: 221 6 181 150

print_test$77:	; Parameter 6 -123.456 64
x37972:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x37975:	mov word [bp + 6], print_test$79	; 5: 199 70 6 106 148
x37980:	mov [bp + 8], bp	; 3: 137 110 8
x37983:	add bp, 6	; 3: 131 197 6
x37986:	mov di, bp	; 2: 137 239
x37988:	add di, 64	; 3: 131 199 64
x37991:	jmp printf	; 3: 233 154 120

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x37994:	mov word [bp + 12], @9096$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 189 150

print_test$82:	; PushFloat 123.456
x37999:	fld qword [@9097$float8$123.456#]	; 4: 221 6 233 150

print_test$83:	; Parameter 6 123.456 8
x38003:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x38006:	fld qword [@9098$float8$123.456#]	; 4: 221 6 241 150

print_test$85:	; Parameter 6 123.456 16
x38010:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x38013:	fld qword [@9099$float8$123.456#]	; 4: 221 6 249 150

print_test$87:	; Parameter 6 123.456 24
x38017:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x38020:	fld qword [@9100$float8$123.456#]	; 4: 221 6 1 151

print_test$89:	; Parameter 6 123.456 32
x38024:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x38027:	mov word [bp + 6], print_test$91	; 5: 199 70 6 158 148
x38032:	mov [bp + 8], bp	; 3: 137 110 8
x38035:	add bp, 6	; 3: 131 197 6
x38038:	mov di, bp	; 2: 137 239
x38040:	add di, 32	; 3: 131 199 32
x38043:	jmp printf	; 3: 233 102 120

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38046:	mov word [bp + 12], @9106$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 9 151

print_test$94:	; PushFloat -123.456
x38051:	fld qword [@9107$float8$minus123.456#]	; 4: 221 6 53 151

print_test$95:	; Parameter 6 -123.456 8
x38055:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x38058:	fld qword [@9108$float8$minus123.456#]	; 4: 221 6 61 151

print_test$97:	; Parameter 6 -123.456 16
x38062:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x38065:	fld qword [@9109$float8$minus123.456#]	; 4: 221 6 69 151

print_test$99:	; Parameter 6 -123.456 24
x38069:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x38072:	fld qword [@9110$float8$minus123.456#]	; 4: 221 6 77 151

print_test$101:	; Parameter 6 -123.456 32
x38076:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x38079:	mov word [bp + 6], print_test$103	; 5: 199 70 6 210 148
x38084:	mov [bp + 8], bp	; 3: 137 110 8
x38087:	add bp, 6	; 3: 131 197 6
x38090:	mov di, bp	; 2: 137 239
x38092:	add di, 32	; 3: 131 199 32
x38095:	jmp printf	; 3: 233 50 120

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x38098:	mov ax, [bp]	; 3: 139 70 0
x38101:	mov di, [bp + 4]	; 3: 139 126 4
x38104:	mov bp, [bp + 2]	; 3: 139 110 2
x38107:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

@9004$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38109:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9022$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38169:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9040$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38229:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9050$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38261:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9060$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38293:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9061$float8$123.456#:
x38377:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9062$float8$123.456#:
x38385:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9063$float8$123.456#:
x38393:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9064$float8$123.456#:
x38401:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9065$float8$123.456#:
x38409:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9066$float8$123.456#:
x38417:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9067$float8$123.456#:
x38425:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9068$float8$123.456#:
x38433:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9078$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38441:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9079$float8$minus123.456#:
x38525:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9080$float8$minus123.456#:
x38533:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9081$float8$minus123.456#:
x38541:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9082$float8$minus123.456#:
x38549:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9083$float8$minus123.456#:
x38557:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9084$float8$minus123.456#:
x38565:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9085$float8$minus123.456#:
x38573:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9086$float8$minus123.456#:
x38581:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9096$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38589:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9097$float8$123.456#:
x38633:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9098$float8$123.456#:
x38641:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9099$float8$123.456#:
x38649:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9100$float8$123.456#:
x38657:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9106$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38665:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9107$float8$minus123.456#:
x38709:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9108$float8$minus123.456#:
x38717:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9109$float8$minus123.456#:
x38725:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9110$float8$minus123.456#:
x38733:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x38741:	mov word [bp + 12], @9494$string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 34 153

limits_test$2:	; Parameter 6 8 8
x38746:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x38751:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 114 151
x38756:	mov [bp + 8], bp	; 3: 137 110 8
x38759:	add bp, 6	; 3: 131 197 6
x38762:	mov di, bp	; 2: 137 239
x38764:	add di, 2	; 3: 131 199 2
x38767:	jmp printf	; 3: 233 146 117

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x38770:	mov word [bp + 12], @9498$string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 49 153

limits_test$7:	; Parameter 6 -128 8
x38775:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x38780:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 143 151
x38785:	mov [bp + 8], bp	; 3: 137 110 8
x38788:	add bp, 6	; 3: 131 197 6
x38791:	mov di, bp	; 2: 137 239
x38793:	add di, 2	; 3: 131 199 2
x38796:	jmp printf	; 3: 233 117 117

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x38799:	mov word [bp + 12], @9503$string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 65 153

limits_test$12:	; Parameter 6 127 8
x38804:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x38809:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 172 151
x38814:	mov [bp + 8], bp	; 3: 137 110 8
x38817:	add bp, 6	; 3: 131 197 6
x38820:	mov di, bp	; 2: 137 239
x38822:	add di, 2	; 3: 131 199 2
x38825:	jmp printf	; 3: 233 88 117

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x38828:	mov word [bp + 12], @9508$string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 80 153

limits_test$17:	; Parameter 6 255 8
x38833:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x38838:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 201 151
x38843:	mov [bp + 8], bp	; 3: 137 110 8
x38846:	add bp, 6	; 3: 131 197 6
x38849:	mov di, bp	; 2: 137 239
x38851:	add di, 2	; 3: 131 199 2
x38854:	jmp printf	; 3: 233 59 117

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x38857:	mov word [bp + 12], @9513$string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 97 153

limits_test$22:	; Parameter 6 -128 8
x38862:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x38867:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 230 151
x38872:	mov [bp + 8], bp	; 3: 137 110 8
x38875:	add bp, 6	; 3: 131 197 6
x38878:	mov di, bp	; 2: 137 239
x38880:	add di, 2	; 3: 131 199 2
x38883:	jmp printf	; 3: 233 30 117

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x38886:	mov word [bp + 12], @9518$string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 112 153

limits_test$27:	; Parameter 6 127 8
x38891:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x38896:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 3 152
x38901:	mov [bp + 8], bp	; 3: 137 110 8
x38904:	add bp, 6	; 3: 131 197 6
x38907:	mov di, bp	; 2: 137 239
x38909:	add di, 2	; 3: 131 199 2
x38912:	jmp printf	; 3: 233 1 117

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x38915:	mov word [bp + 12], @9523$string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 127 153

limits_test$32:	; Parameter 6 255 8
x38920:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x38925:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 32 152
x38930:	mov [bp + 8], bp	; 3: 137 110 8
x38933:	add bp, 6	; 3: 131 197 6
x38936:	mov di, bp	; 2: 137 239
x38938:	add di, 2	; 3: 131 199 2
x38941:	jmp printf	; 3: 233 228 116

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x38944:	mov word [bp + 12], @9528$string_INT_MIN203D2025i0A#	; 5: 199 70 12 144 153

limits_test$37:	; Parameter 6 -32768 8
x38949:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x38954:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 61 152
x38959:	mov [bp + 8], bp	; 3: 137 110 8
x38962:	add bp, 6	; 3: 131 197 6
x38965:	mov di, bp	; 2: 137 239
x38967:	add di, 2	; 3: 131 199 2
x38970:	jmp printf	; 3: 233 199 116

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x38973:	mov word [bp + 12], @9532$string_INT_MAX203D2025i0A#	; 5: 199 70 12 158 153

limits_test$42:	; Parameter 6 32767 8
x38978:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x38983:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 90 152
x38988:	mov [bp + 8], bp	; 3: 137 110 8
x38991:	add bp, 6	; 3: 131 197 6
x38994:	mov di, bp	; 2: 137 239
x38996:	add di, 2	; 3: 131 199 2
x38999:	jmp printf	; 3: 233 170 116

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x39002:	mov word [bp + 12], @9536$string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 172 153

limits_test$47:	; Parameter 6 65535 8
x39007:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x39012:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 119 152
x39017:	mov [bp + 8], bp	; 3: 137 110 8
x39020:	add bp, 6	; 3: 131 197 6
x39023:	mov di, bp	; 2: 137 239
x39025:	add di, 2	; 3: 131 199 2
x39028:	jmp printf	; 3: 233 141 116

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x39031:	mov word [bp + 12], @9540$string_LONG_MIN203D2025li0A#	; 5: 199 70 12 188 153

limits_test$52:	; Parameter 6 -2147483648 8
x39036:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x39044:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 151 152
x39049:	mov [bp + 8], bp	; 3: 137 110 8
x39052:	add bp, 6	; 3: 131 197 6
x39055:	mov di, bp	; 2: 137 239
x39057:	add di, 4	; 3: 131 199 4
x39060:	jmp printf	; 3: 233 109 116

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x39063:	mov word [bp + 12], @9544$string_LONG_MAX203D2025li0A#	; 5: 199 70 12 204 153

limits_test$57:	; Parameter 6 2147483647 8
x39068:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x39076:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 183 152
x39081:	mov [bp + 8], bp	; 3: 137 110 8
x39084:	add bp, 6	; 3: 131 197 6
x39087:	mov di, bp	; 2: 137 239
x39089:	add di, 4	; 3: 131 199 4
x39092:	jmp printf	; 3: 233 77 116

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x39095:	mov word [bp + 12], @9548$string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 220 153

limits_test$62:	; Parameter 6 4294967295 8
x39100:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x39108:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 215 152
x39113:	mov [bp + 8], bp	; 3: 137 110 8
x39116:	add bp, 6	; 3: 131 197 6
x39119:	mov di, bp	; 2: 137 239
x39121:	add di, 4	; 3: 131 199 4
x39124:	jmp printf	; 3: 233 45 116

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x39127:	mov word [bp + 12], @9552$string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 237 153

limits_test$67:	; Parameter 6 4294967295 8
x39132:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x39140:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 247 152
x39145:	mov [bp + 8], bp	; 3: 137 110 8
x39148:	add bp, 6	; 3: 131 197 6
x39151:	mov di, bp	; 2: 137 239
x39153:	add di, 4	; 3: 131 199 4
x39156:	jmp printf	; 3: 233 13 116

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x39159:	mov word [bp + 12], @9556$string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 254 153

limits_test$72:	; Parameter 6 4294967295 8
x39164:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x39172:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 23 153
x39177:	mov [bp + 8], bp	; 3: 137 110 8
x39180:	add bp, 6	; 3: 131 197 6
x39183:	mov di, bp	; 2: 137 239
x39185:	add di, 4	; 3: 131 199 4
x39188:	jmp printf	; 3: 233 237 115

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x39191:	mov ax, [bp]	; 3: 139 70 0
x39194:	mov di, [bp + 4]	; 3: 139 126 4
x39197:	mov bp, [bp + 2]	; 3: 139 110 2
x39200:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

@9494$string_CHAR_BIT203D2025i0A#:
x39202:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

@9498$string_CHAR_MIN203D2025i0A0A#:
x39217:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

@9503$string_CHAR_MAX203D2025i0A#:
x39233:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

@9508$string_UCHAR_MAX203D2025u0A0A#:
x39248:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

@9513$string_SHRT_MIN203D2025i0A#:
x39265:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

@9518$string_SHRT_MAX203D2025i0A#:
x39280:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

@9523$string_USHRT_MAX203D2025u0A0A#:
x39295:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

@9528$string_INT_MIN203D2025i0A#:
x39312:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

@9532$string_INT_MAX203D2025i0A#:
x39326:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

@9536$string_UINT_MAX203D2025u0A0A#:
x39340:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

@9540$string_LONG_MIN203D2025li0A#:
x39356:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

@9544$string_LONG_MAX203D2025li0A#:
x39372:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

@9548$string_ULONG_MAX203D2025lu0A#:
x39388:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

@9552$string_ULONG_MAX203D2025lx0A#:
x39405:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

@9556$string_ULONG_MAX203D2025lX0A#:
x39422:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x39439:	mov ax, [bp]	; 3: 139 70 0
x39442:	mov di, [bp + 4]	; 3: 139 126 4
x39445:	mov bp, [bp + 2]	; 3: 139 110 2
x39448:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x39450:	fld qword [@10110$float8$10#]	; 4: 221 6 98 154

setjmp_test$2:	; Parameter 6 10 6
x39454:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x39457:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 47 154
x39462:	mov [bp + 8], bp	; 3: 137 110 8
x39465:	add bp, 6	; 3: 131 197 6
x39468:	nop	; 1: 144
x39469:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x39471:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x39473:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x39476:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 66 154
x39481:	mov [bp + 8], bp	; 3: 137 110 8
x39484:	add bp, 6	; 3: 131 197 6
x39487:	nop	; 1: 144
x39488:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x39490:	fld qword [@10117$float8$0.1#]	; 4: 221 6 106 154

setjmp_test$12:	; Parameter 6 0.1 6
x39494:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x39497:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 87 154
x39502:	mov [bp + 8], bp	; 3: 137 110 8
x39505:	add bp, 6	; 3: 131 197 6
x39508:	nop	; 1: 144
x39509:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x39511:	mov ax, [bp]	; 3: 139 70 0
x39514:	mov di, [bp + 4]	; 3: 139 126 4
x39517:	mov bp, [bp + 2]	; 3: 139 110 2
x39520:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

@10110$float8$10#:
x39522:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@10117$float8$0.1#:
x39530:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x39538:	mov word [bp + 22], buffer	; 5: 199 70 22 238 154

test$2:	; Call 16 setjmp 0
x39543:	mov word [bp + 16], test$3	; 5: 199 70 16 133 154
x39548:	mov [bp + 18], bp	; 3: 137 110 18
x39551:	add bp, 16	; 3: 131 197 16
x39554:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4514

test$5:	; Assign message £temporary4514
x39557:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x39560:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x39564:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x39566:	mov word [bp + 22], @10096$string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 244 154

test$9:	; PushFloat x
x39571:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x39574:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x39577:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x39580:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x39583:	mov word [bp + 32], test$15	; 5: 199 70 32 173 154
x39588:	mov [bp + 34], bp	; 3: 137 110 34
x39591:	add bp, 32	; 3: 131 197 32
x39594:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4516

test$17:	; Parameter 16 £temporary4516 16
x39597:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x39600:	mov word [bp + 16], test$19	; 5: 199 70 16 195 154
x39605:	mov [bp + 18], bp	; 3: 137 110 18
x39608:	add bp, 16	; 3: 131 197 16
x39611:	mov di, bp	; 2: 137 239
x39613:	add di, 16	; 3: 131 199 16
x39616:	jmp printf	; 3: 233 65 114

test$19:	; PostCall 16

test$20:	; Goto 26
x39619:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x39621:	mov word [bp + 22], @10099$string_25s0A#	; 5: 199 70 22 3 155

test$23:	; Parameter 16 message 8
x39626:	mov ax, [bp + 14]	; 3: 139 70 14
x39629:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x39632:	mov word [bp + 16], test$25	; 5: 199 70 16 227 154
x39637:	mov [bp + 18], bp	; 3: 137 110 18
x39640:	add bp, 16	; 3: 131 197 16
x39643:	mov di, bp	; 2: 137 239
x39645:	add di, 2	; 3: 131 199 2
x39648:	jmp printf	; 3: 233 33 114

test$25:	; PostCall 16

test$26:	; Return 0
x39651:	mov ax, [bp]	; 3: 139 70 0
x39654:	mov di, [bp + 4]	; 3: 139 126 4
x39657:	mov bp, [bp + 2]	; 3: 139 110 2
x39660:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x39662:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

@10096$string_12E0202F2025f203D2025f0A#:
x39668:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

@10099$string_25s0A#:
x39683:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary628 bp

setjmp$1:	; Assign bp_pointer £temporary628
x39687:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary629 -> buf buf 0
x39690:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary630 -> bp_pointer bp_pointer 0
x39693:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary629 -> buf £temporary630 -> bp_pointer
x39696:	mov ax, [di]	; 2: 139 5
x39698:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary631 -> buf buf 2
x39700:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary632 -> bp_pointer bp_pointer 2
x39703:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary631 -> buf £temporary632 -> bp_pointer
x39706:	mov ax, [di + 2]	; 3: 139 69 2
x39709:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary633 -> buf buf 4
x39712:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary634 -> bp_pointer bp_pointer 4
x39715:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary633 -> buf £temporary634 -> bp_pointer
x39718:	mov ax, [di + 4]	; 3: 139 69 4
x39721:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x39724:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x39727:	mov ax, [bp]	; 3: 139 70 0
x39730:	mov di, [bp + 4]	; 3: 139 126 4
x39733:	mov bp, [bp + 2]	; 3: 139 110 2
x39736:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x39738:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x39740:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x39743:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x39746:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x39749:	mov word [bp + 14], inverse$6	; 5: 199 70 14 83 155
x39754:	mov [bp + 16], bp	; 3: 137 110 16
x39757:	add bp, 14	; 3: 131 197 14
x39760:	nop	; 1: 144
x39761:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4506

inverse$8:	; SetReturnValue £temporary4506

inverse$9:	; Return £temporary4506
x39763:	mov ax, [bp]	; 3: 139 70 0
x39766:	mov di, [bp + 4]	; 3: 139 126 4
x39769:	mov bp, [bp + 2]	; 3: 139 110 2
x39772:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x39774:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x39777:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x39779:	fcompp	; 2: 222 217
x39781:	fstsw ax	; 3: 155 223 224
x39784:	sahf	; 1: 158
x39785:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x39787:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x39790:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4510 x y
x39793:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4510

divide$7:	; Return £temporary4510
x39795:	mov ax, [bp]	; 3: 139 70 0
x39798:	mov di, [bp + 4]	; 3: 139 126 4
x39801:	mov bp, [bp + 2]	; 3: 139 110 2
x39804:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x39806:	mov word [bp + 28], buffer	; 5: 199 70 28 238 154

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x39811:	mov word [bp + 30], @10084$string_Division20by20Zero2E#	; 5: 199 70 30 163 155

divide$11:	; Call 22 longjmp 0
x39816:	mov word [bp + 22], divide$12	; 5: 199 70 22 150 155
x39821:	mov [bp + 24], bp	; 3: 137 110 24
x39824:	add bp, 22	; 3: 131 197 22
x39827:	nop	; 1: 144
x39828:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x39830:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x39832:	mov ax, [bp]	; 3: 139 70 0
x39835:	mov di, [bp + 4]	; 3: 139 126 4
x39838:	mov bp, [bp + 2]	; 3: 139 110 2
x39841:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

@10084$string_Division20by20Zero2E#:
x39843:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x39861:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary637 -> buf buf 0
x39864:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary637 -> buf
x39867:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary639 -> buf buf 4
x39869:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary639 -> buf
x39872:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary641 -> buf buf 2
x39875:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary641 -> buf
x39878:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x39881:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x39883:	mov ax, [bp]	; 3: 139 70 0
x39886:	mov di, [bp + 4]	; 3: 139 126 4
x39889:	mov bp, [bp + 2]	; 3: 139 110 2
x39892:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdio_test:	; Assign n 0
x39894:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5600 n
x39899:	mov si, bp	; 2: 137 238
x39901:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5600
x39904:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x39907:	mov word [bp + 16], @12122$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 190 163

stdio_test$5:	; Parameter 10 123 8
x39912:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x39917:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x39922:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x39930:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x39938:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x39943:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x39951:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 34 156
x39956:	mov [bp + 12], bp	; 3: 137 110 12
x39959:	add bp, 10	; 3: 131 197 10
x39962:	mov di, bp	; 2: 137 239
x39964:	add di, 18	; 3: 131 199 18
x39967:	jmp printf	; 3: 233 226 112

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x39970:	mov word [bp + 16], @12136$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 225 163

stdio_test$15:	; Parameter 10 123 8
x39975:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x39980:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x39985:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x39993:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x40001:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x40006:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x40014:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 97 156
x40019:	mov [bp + 12], bp	; 3: 137 110 12
x40022:	add bp, 10	; 3: 131 197 10
x40025:	mov di, bp	; 2: 137 239
x40027:	add di, 18	; 3: 131 199 18
x40030:	jmp printf	; 3: 233 163 112

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x40033:	mov word [bp + 16], @12150$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 9 164

stdio_test$25:	; Parameter 10 123 8
x40038:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x40043:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x40048:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x40056:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x40064:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x40069:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x40077:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 160 156
x40082:	mov [bp + 12], bp	; 3: 137 110 12
x40085:	add bp, 10	; 3: 131 197 10
x40088:	mov di, bp	; 2: 137 239
x40090:	add di, 18	; 3: 131 199 18
x40093:	jmp printf	; 3: 233 100 112

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x40096:	mov word [bp + 16], @12164$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 55 164

stdio_test$35:	; Parameter 10 123 8
x40101:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x40106:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x40111:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x40119:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x40127:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x40132:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x40140:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 223 156
x40145:	mov [bp + 12], bp	; 3: 137 110 12
x40148:	add bp, 10	; 3: 131 197 10
x40151:	mov di, bp	; 2: 137 239
x40153:	add di, 18	; 3: 131 199 18
x40156:	jmp printf	; 3: 233 37 112

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x40159:	mov word [bp + 16], @12178$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 101 164

stdio_test$45:	; Parameter 10 123 8
x40164:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x40169:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x40174:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x40182:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x40190:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x40195:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x40203:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 30 157
x40208:	mov [bp + 12], bp	; 3: 137 110 12
x40211:	add bp, 10	; 3: 131 197 10
x40214:	mov di, bp	; 2: 137 239
x40216:	add di, 18	; 3: 131 199 18
x40219:	jmp printf	; 3: 233 230 111

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x40222:	mov word [bp + 16], @12196$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 154 164

stdio_test$55:	; Parameter 10 123 8
x40227:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x40232:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x40237:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x40245:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x40253:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x40258:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x40266:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 93 157
x40271:	mov [bp + 12], bp	; 3: 137 110 12
x40274:	add bp, 10	; 3: 131 197 10
x40277:	mov di, bp	; 2: 137 239
x40279:	add di, 18	; 3: 131 199 18
x40282:	jmp printf	; 3: 233 167 111

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x40285:	mov word [bp + 16], @12210$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 200 164

stdio_test$65:	; Parameter 10 123 8
x40290:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x40295:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x40300:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x40308:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x40316:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x40321:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x40329:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 156 157
x40334:	mov [bp + 12], bp	; 3: 137 110 12
x40337:	add bp, 10	; 3: 131 197 10
x40340:	mov di, bp	; 2: 137 239
x40342:	add di, 18	; 3: 131 199 18
x40345:	jmp printf	; 3: 233 104 111

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x40348:	mov word [bp + 16], @12224$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 252 164

stdio_test$75:	; Parameter 10 123 8
x40353:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x40358:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x40363:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x40371:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x40379:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x40384:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x40392:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 219 157
x40397:	mov [bp + 12], bp	; 3: 137 110 12
x40400:	add bp, 10	; 3: 131 197 10
x40403:	mov di, bp	; 2: 137 239
x40405:	add di, 18	; 3: 131 199 18
x40408:	jmp printf	; 3: 233 41 111

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x40411:	mov word [bp + 16], @12238$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 48 165

stdio_test$85:	; Parameter 10 123 8
x40416:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x40421:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x40426:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x40434:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x40442:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x40447:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x40455:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 26 158
x40460:	mov [bp + 12], bp	; 3: 137 110 12
x40463:	add bp, 10	; 3: 131 197 10
x40466:	mov di, bp	; 2: 137 239
x40468:	add di, 18	; 3: 131 199 18
x40471:	jmp printf	; 3: 233 234 110

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x40474:	mov word [bp + 16], @12252$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 107 165

stdio_test$95:	; Parameter 10 123 8
x40479:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x40484:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x40489:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x40497:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x40505:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x40510:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x40518:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 89 158
x40523:	mov [bp + 12], bp	; 3: 137 110 12
x40526:	add bp, 10	; 3: 131 197 10
x40529:	mov di, bp	; 2: 137 239
x40531:	add di, 18	; 3: 131 199 18
x40534:	jmp printf	; 3: 233 171 110

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x40537:	mov word [bp + 16], @12266$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 153 165

stdio_test$105:	; Parameter 10 123 8
x40542:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x40547:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x40552:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x40560:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x40568:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x40573:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x40581:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 152 158
x40586:	mov [bp + 12], bp	; 3: 137 110 12
x40589:	add bp, 10	; 3: 131 197 10
x40592:	mov di, bp	; 2: 137 239
x40594:	add di, 18	; 3: 131 199 18
x40597:	jmp printf	; 3: 233 108 110

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x40600:	mov word [bp + 16], @12280$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 205 165

stdio_test$115:	; Parameter 10 123 8
x40605:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x40610:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x40615:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x40623:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x40631:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x40636:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x40644:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 215 158
x40649:	mov [bp + 12], bp	; 3: 137 110 12
x40652:	add bp, 10	; 3: 131 197 10
x40655:	mov di, bp	; 2: 137 239
x40657:	add di, 18	; 3: 131 199 18
x40660:	jmp printf	; 3: 233 45 110

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x40663:	mov word [bp + 16], @12294$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 1 166

stdio_test$125:	; Parameter 10 123 8
x40668:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x40673:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x40678:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x40686:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x40694:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x40699:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x40707:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 22 159
x40712:	mov [bp + 12], bp	; 3: 137 110 12
x40715:	add bp, 10	; 3: 131 197 10
x40718:	mov di, bp	; 2: 137 239
x40720:	add di, 18	; 3: 131 199 18
x40723:	jmp printf	; 3: 233 238 109

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x40726:	mov word [bp + 16], @12308$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 60 166

stdio_test$135:	; Parameter 10 123 8
x40731:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x40736:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x40741:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x40746:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x40754:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x40762:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x40770:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 85 159
x40775:	mov [bp + 12], bp	; 3: 137 110 12
x40778:	add bp, 10	; 3: 131 197 10
x40781:	mov di, bp	; 2: 137 239
x40783:	add di, 18	; 3: 131 199 18
x40786:	jmp printf	; 3: 233 175 109

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x40789:	mov word [bp + 16], @12322$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 94 166

stdio_test$145:	; Parameter 10 123 8
x40794:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x40799:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x40804:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x40809:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x40817:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x40825:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x40833:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 148 159
x40838:	mov [bp + 12], bp	; 3: 137 110 12
x40841:	add bp, 10	; 3: 131 197 10
x40844:	mov di, bp	; 2: 137 239
x40846:	add di, 18	; 3: 131 199 18
x40849:	jmp printf	; 3: 233 112 109

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x40852:	mov word [bp + 16], @12336$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 134 166

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x40857:	mov word [bp + 18], @12337$string_Hello2C20World21#	; 5: 199 70 18 156 166

stdio_test$156:	; Parameter 10 88 10
x40862:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x40867:	mov ax, [bp + 8]	; 3: 139 70 8
x40870:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x40873:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 188 159
x40878:	mov [bp + 12], bp	; 3: 137 110 12
x40881:	add bp, 10	; 3: 131 197 10
x40884:	mov di, bp	; 2: 137 239
x40886:	add di, 6	; 3: 131 199 6
x40889:	jmp printf	; 3: 233 72 109

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x40892:	mov word [bp + 16], @12342$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 170 166

stdio_test$162:	; PushFloat 123.456
x40897:	fld qword [@12343$float8$123.456#]	; 4: 221 6 196 166

stdio_test$163:	; Parameter 10 123.456 8
x40901:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x40904:	fld qword [@12344$float8$123.456#]	; 4: 221 6 204 166

stdio_test$165:	; Parameter 10 123.456 16
x40908:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x40911:	fld qword [@12345$float8$123.456#]	; 4: 221 6 212 166

stdio_test$167:	; Parameter 10 123.456 24
x40915:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x40918:	fld qword [@12346$float8$123456.1#]	; 4: 221 6 220 166

stdio_test$169:	; Parameter 10 123456.1 32
x40922:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x40925:	fld qword [@12347$float8$123456.1#]	; 4: 221 6 228 166

stdio_test$171:	; Parameter 10 123456.1 40
x40929:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x40932:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 247 159
x40937:	mov [bp + 12], bp	; 3: 137 110 12
x40940:	add bp, 10	; 3: 131 197 10
x40943:	mov di, bp	; 2: 137 239
x40945:	add di, 40	; 3: 131 199 40
x40948:	jmp printf	; 3: 233 13 109

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x40951:	mov word [bp + 16], @12354$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 236 166

stdio_test$176:	; PushFloat 123.456
x40956:	fld qword [@12355$float8$123.456#]	; 4: 221 6 11 167

stdio_test$177:	; Parameter 10 123.456 8
x40960:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x40963:	fld qword [@12356$float8$123.456#]	; 4: 221 6 19 167

stdio_test$179:	; Parameter 10 123.456 16
x40967:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x40970:	fld qword [@12357$float8$123.456#]	; 4: 221 6 27 167

stdio_test$181:	; Parameter 10 123.456 24
x40974:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x40977:	fld qword [@12358$float8$123456.1#]	; 4: 221 6 35 167

stdio_test$183:	; Parameter 10 123456.1 32
x40981:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x40984:	fld qword [@12359$float8$123456.1#]	; 4: 221 6 43 167

stdio_test$185:	; Parameter 10 123456.1 40
x40988:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x40991:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 50 160
x40996:	mov [bp + 12], bp	; 3: 137 110 12
x40999:	add bp, 10	; 3: 131 197 10
x41002:	mov di, bp	; 2: 137 239
x41004:	add di, 40	; 3: 131 199 40
x41007:	jmp printf	; 3: 233 210 108

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41010:	mov word [bp + 16], @12366$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 51 167

stdio_test$190:	; PushFloat 123.456
x41015:	fld qword [@12367$float8$123.456#]	; 4: 221 6 82 167

stdio_test$191:	; Parameter 10 123.456 8
x41019:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x41022:	fld qword [@12368$float8$123.456#]	; 4: 221 6 90 167

stdio_test$193:	; Parameter 10 123.456 16
x41026:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x41029:	fld qword [@12369$float8$123.456#]	; 4: 221 6 98 167

stdio_test$195:	; Parameter 10 123.456 24
x41033:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x41036:	fld qword [@12370$float8$123.456#]	; 4: 221 6 106 167

stdio_test$197:	; Parameter 10 123.456 32
x41040:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x41043:	fld qword [@12371$float8$123.456#]	; 4: 221 6 114 167

stdio_test$199:	; Parameter 10 123.456 40
x41047:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x41050:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 109 160
x41055:	mov [bp + 12], bp	; 3: 137 110 12
x41058:	add bp, 10	; 3: 131 197 10
x41061:	mov di, bp	; 2: 137 239
x41063:	add di, 40	; 3: 131 199 40
x41066:	jmp printf	; 3: 233 151 108

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41069:	mov word [bp + 16], @12378$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 122 167

stdio_test$204:	; PushFloat 123.456
x41074:	fld qword [@12379$float8$123.456#]	; 4: 221 6 158 167

stdio_test$205:	; Parameter 10 123.456 8
x41078:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x41081:	fld qword [@12380$float8$123.456#]	; 4: 221 6 166 167

stdio_test$207:	; Parameter 10 123.456 16
x41085:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x41088:	fld qword [@12381$float8$123.456#]	; 4: 221 6 174 167

stdio_test$209:	; Parameter 10 123.456 24
x41092:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x41095:	fld qword [@12382$float8$123.456#]	; 4: 221 6 182 167

stdio_test$211:	; Parameter 10 123.456 32
x41099:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x41102:	fld qword [@12383$float8$123.456#]	; 4: 221 6 190 167

stdio_test$213:	; Parameter 10 123.456 40
x41106:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x41109:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 168 160
x41114:	mov [bp + 12], bp	; 3: 137 110 12
x41117:	add bp, 10	; 3: 131 197 10
x41120:	mov di, bp	; 2: 137 239
x41122:	add di, 40	; 3: 131 199 40
x41125:	jmp printf	; 3: 233 92 108

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41128:	mov word [bp + 16], @12390$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 198 167

stdio_test$218:	; PushFloat 123.456
x41133:	fld qword [@12391$float8$123.456#]	; 4: 221 6 239 167

stdio_test$219:	; Parameter 10 123.456 8
x41137:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x41140:	fld qword [@12392$float8$123.456#]	; 4: 221 6 247 167

stdio_test$221:	; Parameter 10 123.456 16
x41144:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x41147:	fld qword [@12393$float8$123.456#]	; 4: 221 6 255 167

stdio_test$223:	; Parameter 10 123.456 24
x41151:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x41154:	fld qword [@12394$float8$123.456#]	; 4: 221 6 7 168

stdio_test$225:	; Parameter 10 123.456 32
x41158:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x41161:	fld qword [@12395$float8$123.456#]	; 4: 221 6 15 168

stdio_test$227:	; Parameter 10 123.456 40
x41165:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x41168:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 227 160
x41173:	mov [bp + 12], bp	; 3: 137 110 12
x41176:	add bp, 10	; 3: 131 197 10
x41179:	mov di, bp	; 2: 137 239
x41181:	add di, 40	; 3: 131 199 40
x41184:	jmp printf	; 3: 233 33 108

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41187:	mov word [bp + 16], @12402$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 23 168

stdio_test$232:	; PushFloat 123.456
x41192:	fld qword [@12403$float8$123.456#]	; 4: 221 6 70 168

stdio_test$233:	; Parameter 10 123.456 8
x41196:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x41199:	fld qword [@12404$float8$123.456#]	; 4: 221 6 78 168

stdio_test$235:	; Parameter 10 123.456 16
x41203:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x41206:	fld qword [@12405$float8$123.456#]	; 4: 221 6 86 168

stdio_test$237:	; Parameter 10 123.456 24
x41210:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x41213:	fld qword [@12406$float8$123.456#]	; 4: 221 6 94 168

stdio_test$239:	; Parameter 10 123.456 32
x41217:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x41220:	fld qword [@12407$float8$123.456#]	; 4: 221 6 102 168

stdio_test$241:	; Parameter 10 123.456 40
x41224:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x41227:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 30 161
x41232:	mov [bp + 12], bp	; 3: 137 110 12
x41235:	add bp, 10	; 3: 131 197 10
x41238:	mov di, bp	; 2: 137 239
x41240:	add di, 40	; 3: 131 199 40
x41243:	jmp printf	; 3: 233 230 107

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x41246:	mov word [bp + 16], @12414$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 110 168

stdio_test$246:	; PushFloat -123.456
x41251:	fld qword [@12415$float8$minus123.456#]	; 4: 221 6 136 168

stdio_test$247:	; Parameter 10 -123.456 8
x41255:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x41258:	fld qword [@12416$float8$minus123.456#]	; 4: 221 6 144 168

stdio_test$249:	; Parameter 10 -123.456 16
x41262:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x41265:	fld qword [@12417$float8$minus123.456#]	; 4: 221 6 152 168

stdio_test$251:	; Parameter 10 -123.456 24
x41269:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x41272:	fld qword [@12418$float8$minus0.000000123456#]	; 4: 221 6 160 168

stdio_test$253:	; Parameter 10 -0.000000123456 32
x41276:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x41279:	fld qword [@12419$float8$minus0.000000123456#]	; 4: 221 6 168 168

stdio_test$255:	; Parameter 10 -0.000000123456 40
x41283:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x41286:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 89 161
x41291:	mov [bp + 12], bp	; 3: 137 110 12
x41294:	add bp, 10	; 3: 131 197 10
x41297:	mov di, bp	; 2: 137 239
x41299:	add di, 40	; 3: 131 199 40
x41302:	jmp printf	; 3: 233 171 107

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x41305:	mov word [bp + 16], @12426$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 176 168

stdio_test$260:	; PushFloat -123.456
x41310:	fld qword [@12427$float8$minus123.456#]	; 4: 221 6 207 168

stdio_test$261:	; Parameter 10 -123.456 8
x41314:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x41317:	fld qword [@12428$float8$minus123.456#]	; 4: 221 6 215 168

stdio_test$263:	; Parameter 10 -123.456 16
x41321:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x41324:	fld qword [@12429$float8$minus123.456#]	; 4: 221 6 223 168

stdio_test$265:	; Parameter 10 -123.456 24
x41328:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x41331:	fld qword [@12430$float8$minus0.000000123456#]	; 4: 221 6 231 168

stdio_test$267:	; Parameter 10 -0.000000123456 32
x41335:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x41338:	fld qword [@12431$float8$minus0.000000123456#]	; 4: 221 6 239 168

stdio_test$269:	; Parameter 10 -0.000000123456 40
x41342:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x41345:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 148 161
x41350:	mov [bp + 12], bp	; 3: 137 110 12
x41353:	add bp, 10	; 3: 131 197 10
x41356:	mov di, bp	; 2: 137 239
x41358:	add di, 40	; 3: 131 199 40
x41361:	jmp printf	; 3: 233 112 107

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41364:	mov word [bp + 16], @12438$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 247 168

stdio_test$274:	; PushFloat -123.456
x41369:	fld qword [@12439$float8$minus123.456#]	; 4: 221 6 22 169

stdio_test$275:	; Parameter 10 -123.456 8
x41373:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x41376:	fld qword [@12440$float8$minus123.456#]	; 4: 221 6 30 169

stdio_test$277:	; Parameter 10 -123.456 16
x41380:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x41383:	fld qword [@12441$float8$minus123.456#]	; 4: 221 6 38 169

stdio_test$279:	; Parameter 10 -123.456 24
x41387:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x41390:	fld qword [@12442$float8$minus123.456#]	; 4: 221 6 46 169

stdio_test$281:	; Parameter 10 -123.456 32
x41394:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x41397:	fld qword [@12443$float8$minus123.456#]	; 4: 221 6 54 169

stdio_test$283:	; Parameter 10 -123.456 40
x41401:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x41404:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 207 161
x41409:	mov [bp + 12], bp	; 3: 137 110 12
x41412:	add bp, 10	; 3: 131 197 10
x41415:	mov di, bp	; 2: 137 239
x41417:	add di, 40	; 3: 131 199 40
x41420:	jmp printf	; 3: 233 53 107

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41423:	mov word [bp + 16], @12450$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 62 169

stdio_test$288:	; PushFloat -123.456
x41428:	fld qword [@12451$float8$minus123.456#]	; 4: 221 6 98 169

stdio_test$289:	; Parameter 10 -123.456 8
x41432:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x41435:	fld qword [@12452$float8$minus123.456#]	; 4: 221 6 106 169

stdio_test$291:	; Parameter 10 -123.456 16
x41439:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x41442:	fld qword [@12453$float8$minus123.456#]	; 4: 221 6 114 169

stdio_test$293:	; Parameter 10 -123.456 24
x41446:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x41449:	fld qword [@12454$float8$minus123.456#]	; 4: 221 6 122 169

stdio_test$295:	; Parameter 10 -123.456 32
x41453:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x41456:	fld qword [@12455$float8$minus123.456#]	; 4: 221 6 130 169

stdio_test$297:	; Parameter 10 -123.456 40
x41460:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x41463:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 10 162
x41468:	mov [bp + 12], bp	; 3: 137 110 12
x41471:	add bp, 10	; 3: 131 197 10
x41474:	mov di, bp	; 2: 137 239
x41476:	add di, 40	; 3: 131 199 40
x41479:	jmp printf	; 3: 233 250 106

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41482:	mov word [bp + 16], @12462$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 138 169

stdio_test$302:	; PushFloat -123.456
x41487:	fld qword [@12463$float8$minus123.456#]	; 4: 221 6 179 169

stdio_test$303:	; Parameter 10 -123.456 8
x41491:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x41494:	fld qword [@12464$float8$minus123.456#]	; 4: 221 6 187 169

stdio_test$305:	; Parameter 10 -123.456 16
x41498:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x41501:	fld qword [@12465$float8$minus123.456#]	; 4: 221 6 195 169

stdio_test$307:	; Parameter 10 -123.456 24
x41505:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x41508:	fld qword [@12466$float8$minus123.456#]	; 4: 221 6 203 169

stdio_test$309:	; Parameter 10 -123.456 32
x41512:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x41515:	fld qword [@12467$float8$minus123.456#]	; 4: 221 6 211 169

stdio_test$311:	; Parameter 10 -123.456 40
x41519:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x41522:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 69 162
x41527:	mov [bp + 12], bp	; 3: 137 110 12
x41530:	add bp, 10	; 3: 131 197 10
x41533:	mov di, bp	; 2: 137 239
x41535:	add di, 40	; 3: 131 199 40
x41538:	jmp printf	; 3: 233 191 106

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41541:	mov word [bp + 16], @12474$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 219 169

stdio_test$316:	; PushFloat -123.456
x41546:	fld qword [@12475$float8$minus123.456#]	; 4: 221 6 10 170

stdio_test$317:	; Parameter 10 -123.456 8
x41550:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x41553:	fld qword [@12476$float8$minus123.456#]	; 4: 221 6 18 170

stdio_test$319:	; Parameter 10 -123.456 16
x41557:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x41560:	fld qword [@12477$float8$minus123.456#]	; 4: 221 6 26 170

stdio_test$321:	; Parameter 10 -123.456 24
x41564:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x41567:	fld qword [@12478$float8$minus123.456#]	; 4: 221 6 34 170

stdio_test$323:	; Parameter 10 -123.456 32
x41571:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x41574:	fld qword [@12479$float8$minus123.456#]	; 4: 221 6 42 170

stdio_test$325:	; Parameter 10 -123.456 40
x41578:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x41581:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 128 162
x41586:	mov [bp + 12], bp	; 3: 137 110 12
x41589:	add bp, 10	; 3: 131 197 10
x41592:	mov di, bp	; 2: 137 239
x41594:	add di, 40	; 3: 131 199 40
x41597:	jmp printf	; 3: 233 132 106

stdio_test$327:	; PostCall 10

stdio_test$328:	; Assign a 0
x41600:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$329:	; Assign b 0
x41605:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

stdio_test$330:	; Assign n 0
x41610:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

stdio_test$331:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$332:	; Parameter 12 string_Please20write20three20integers3A20# 6
x41615:	mov word [bp + 18], @12495$string_Please20write20three20integers3A20#	; 5: 199 70 18 50 170

stdio_test$333:	; Call 12 printf 0
x41620:	mov word [bp + 12], stdio_test$334	; 5: 199 70 12 164 162
x41625:	mov [bp + 14], bp	; 3: 137 110 14
x41628:	add bp, 12	; 3: 131 197 12
x41631:	mov di, bp	; 2: 137 239
x41633:	jmp printf	; 3: 233 96 106

stdio_test$334:	; PostCall 12

stdio_test$335:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$336:	; Parameter 12 string_1232045620789# 6
x41636:	mov word [bp + 18], @12497$string_1232045620789#	; 5: 199 70 18 80 170

stdio_test$337:	; Parameter 12 string_25i20252Ai2025i2025n# 8
x41641:	mov word [bp + 20], @12498$string_25i20252Ai2025i2025n#	; 5: 199 70 20 92 170

stdio_test$338:	; address £temporary5630 a
x41646:	mov si, bp	; 2: 137 238
x41648:	add si, 6	; 3: 131 198 6

stdio_test$339:	; Parameter 12 £temporary5630 10
x41651:	mov [bp + 22], si	; 3: 137 118 22

stdio_test$340:	; address £temporary5631 b
x41654:	mov si, bp	; 2: 137 238
x41656:	add si, 8	; 3: 131 198 8

stdio_test$341:	; Parameter 12 £temporary5631 12
x41659:	mov [bp + 24], si	; 3: 137 118 24

stdio_test$342:	; address £temporary5632 n
x41662:	mov si, bp	; 2: 137 238
x41664:	add si, 10	; 3: 131 198 10

stdio_test$343:	; Parameter 12 £temporary5632 14
x41667:	mov [bp + 26], si	; 3: 137 118 26

stdio_test$344:	; Call 12 sscanf 0
x41670:	mov word [bp + 12], stdio_test$345	; 5: 199 70 12 217 162
x41675:	mov [bp + 14], bp	; 3: 137 110 14
x41678:	add bp, 12	; 3: 131 197 12
x41681:	mov di, bp	; 2: 137 239
x41683:	add di, 6	; 3: 131 199 6
x41686:	jmp sscanf	; 3: 233 15 8

stdio_test$345:	; PostCall 12

stdio_test$346:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$347:	; Parameter 12 string_3C25i3E203C25i3E203C25i3E0A# 6
x41689:	mov word [bp + 18], @12503$string_3C25i3E203C25i3E203C25i3E0A#	; 5: 199 70 18 105 170

stdio_test$348:	; Parameter 12 a 8
x41694:	mov ax, [bp + 6]	; 3: 139 70 6
x41697:	mov [bp + 20], ax	; 3: 137 70 20

stdio_test$349:	; Parameter 12 b 10
x41700:	mov ax, [bp + 8]	; 3: 139 70 8
x41703:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$350:	; Parameter 12 n 12
x41706:	mov ax, [bp + 10]	; 3: 139 70 10
x41709:	mov [bp + 24], ax	; 3: 137 70 24

stdio_test$351:	; Call 12 printf 0
x41712:	mov word [bp + 12], stdio_test$352	; 5: 199 70 12 3 163
x41717:	mov [bp + 14], bp	; 3: 137 110 14
x41720:	add bp, 12	; 3: 131 197 12
x41723:	mov di, bp	; 2: 137 239
x41725:	add di, 6	; 3: 131 199 6
x41728:	jmp printf	; 3: 233 1 106

stdio_test$352:	; PostCall 12

stdio_test$353:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$354:	; Parameter 106 string_Please20write20the20patterns205Babc5D3A20# 6
x41731:	mov word [bp + 112], @12508$string_Please20write20the20patterns205Babc5D3A20#	; 5: 199 70 112 121 170

stdio_test$355:	; Call 106 printf 0
x41736:	mov word [bp + 106], stdio_test$356	; 5: 199 70 106 24 163
x41741:	mov [bp + 108], bp	; 3: 137 110 108
x41744:	add bp, 106	; 3: 131 197 106
x41747:	mov di, bp	; 2: 137 239
x41749:	jmp printf	; 3: 233 236 105

stdio_test$356:	; PostCall 106

stdio_test$357:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$358:	; Parameter 106 string_abcdef# 6
x41752:	mov word [bp + 112], @12510$string_abcdef#	; 5: 199 70 112 155 170

stdio_test$359:	; Parameter 106 string_255Babc5D# 8
x41757:	mov word [bp + 114], @12511$string_255Babc5D#	; 5: 199 70 114 162 170

stdio_test$360:	; Parameter 106 s 10
x41762:	mov [bp + 116], bp	; 3: 137 110 116
x41765:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$361:	; Call 106 sscanf 0
x41769:	mov word [bp + 106], stdio_test$362	; 5: 199 70 106 60 163
x41774:	mov [bp + 108], bp	; 3: 137 110 108
x41777:	add bp, 106	; 3: 131 197 106
x41780:	mov di, bp	; 2: 137 239
x41782:	add di, 2	; 3: 131 199 2
x41785:	jmp sscanf	; 3: 233 172 7

stdio_test$362:	; PostCall 106

stdio_test$363:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$364:	; Parameter 106 string_3C25s3E0A# 6
x41788:	mov word [bp + 112], @12513$string_3C25s3E0A#	; 5: 199 70 112 169 170

stdio_test$365:	; Parameter 106 s 8
x41793:	mov [bp + 114], bp	; 3: 137 110 114
x41796:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$366:	; Call 106 printf 0
x41800:	mov word [bp + 106], stdio_test$367	; 5: 199 70 106 91 163
x41805:	mov [bp + 108], bp	; 3: 137 110 108
x41808:	add bp, 106	; 3: 131 197 106
x41811:	mov di, bp	; 2: 137 239
x41813:	add di, 2	; 3: 131 199 2
x41816:	jmp printf	; 3: 233 169 105

stdio_test$367:	; PostCall 106

stdio_test$368:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$369:	; Parameter 106 string_Please20write20the20patterns205B5Eabc5D3A20# 6
x41819:	mov word [bp + 112], @12515$string_Please20write20the20patterns205B5Eabc5D3A20#	; 5: 199 70 112 175 170

stdio_test$370:	; Call 106 printf 0
x41824:	mov word [bp + 106], stdio_test$371	; 5: 199 70 106 112 163
x41829:	mov [bp + 108], bp	; 3: 137 110 108
x41832:	add bp, 106	; 3: 131 197 106
x41835:	mov di, bp	; 2: 137 239
x41837:	jmp printf	; 3: 233 148 105

stdio_test$371:	; PostCall 106

stdio_test$372:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$373:	; Parameter 106 string_defabc# 6
x41840:	mov word [bp + 112], @12517$string_defabc#	; 5: 199 70 112 210 170

stdio_test$374:	; Parameter 106 string_255B5Eabc5D# 8
x41845:	mov word [bp + 114], @12518$string_255B5Eabc5D#	; 5: 199 70 114 217 170

stdio_test$375:	; Parameter 106 s 10
x41850:	mov [bp + 116], bp	; 3: 137 110 116
x41853:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$376:	; Call 106 sscanf 0
x41857:	mov word [bp + 106], stdio_test$377	; 5: 199 70 106 148 163
x41862:	mov [bp + 108], bp	; 3: 137 110 108
x41865:	add bp, 106	; 3: 131 197 106
x41868:	mov di, bp	; 2: 137 239
x41870:	add di, 2	; 3: 131 199 2
x41873:	jmp sscanf	; 3: 233 84 7

stdio_test$377:	; PostCall 106

stdio_test$378:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$379:	; Parameter 106 string_3C25s3E0A0A# 6
x41876:	mov word [bp + 112], @12520$string_3C25s3E0A0A#	; 5: 199 70 112 225 170

stdio_test$380:	; Parameter 106 s 8
x41881:	mov [bp + 114], bp	; 3: 137 110 114
x41884:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$381:	; Call 106 printf 0
x41888:	mov word [bp + 106], stdio_test$382	; 5: 199 70 106 179 163
x41893:	mov [bp + 108], bp	; 3: 137 110 108
x41896:	add bp, 106	; 3: 131 197 106
x41899:	mov di, bp	; 2: 137 239
x41901:	add di, 2	; 3: 131 199 2
x41904:	jmp printf	; 3: 233 81 105

stdio_test$382:	; PostCall 106

stdio_test$383:	; Return 0
x41907:	mov ax, [bp]	; 3: 139 70 0
x41910:	mov di, [bp + 4]	; 3: 139 126 4
x41913:	mov bp, [bp + 2]	; 3: 139 110 2
x41916:	jmp ax	; 2: 255 224

stdio_test$384:	; FunctionEnd stdio_test

@12122$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x41918:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

@12136$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x41953:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

@12150$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x41993:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

@12164$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x42039:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

@12178$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x42085:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

@12196$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x42138:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

@12210$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x42184:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

@12224$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x42236:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

@12238$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x42288:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

@12252$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x42347:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

@12266$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x42393:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

@12280$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x42445:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

@12294$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x42497:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

@12308$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x42556:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

@12322$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x42590:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

@12336$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x42630:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

@12337$string_Hello2C20World21#:
x42652:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@12342$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x42666:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12343$float8$123.456#:
x42692:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12344$float8$123.456#:
x42700:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12345$float8$123.456#:
x42708:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12346$float8$123456.1#:
x42716:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12347$float8$123456.1#:
x42724:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12354$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x42732:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12355$float8$123.456#:
x42763:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12356$float8$123.456#:
x42771:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12357$float8$123.456#:
x42779:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12358$float8$123456.1#:
x42787:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12359$float8$123456.1#:
x42795:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12366$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x42803:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12367$float8$123.456#:
x42834:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12368$float8$123.456#:
x42842:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12369$float8$123.456#:
x42850:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12370$float8$123.456#:
x42858:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12371$float8$123.456#:
x42866:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12378$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x42874:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12379$float8$123.456#:
x42910:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12380$float8$123.456#:
x42918:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12381$float8$123.456#:
x42926:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12382$float8$123.456#:
x42934:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12383$float8$123.456#:
x42942:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12390$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x42950:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12391$float8$123.456#:
x42991:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12392$float8$123.456#:
x42999:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12393$float8$123.456#:
x43007:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12394$float8$123.456#:
x43015:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12395$float8$123.456#:
x43023:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12402$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43031:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12403$float8$123.456#:
x43078:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12404$float8$123.456#:
x43086:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12405$float8$123.456#:
x43094:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12406$float8$123.456#:
x43102:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12407$float8$123.456#:
x43110:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12414$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x43118:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12415$float8$minus123.456#:
x43144:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12416$float8$minus123.456#:
x43152:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12417$float8$minus123.456#:
x43160:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12418$float8$minus0.000000123456#:
x43168:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12419$float8$minus0.000000123456#:
x43176:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12426$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x43184:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12427$float8$minus123.456#:
x43215:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12428$float8$minus123.456#:
x43223:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12429$float8$minus123.456#:
x43231:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12430$float8$minus0.000000123456#:
x43239:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12431$float8$minus0.000000123456#:
x43247:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12438$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x43255:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12439$float8$minus123.456#:
x43286:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12440$float8$minus123.456#:
x43294:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12441$float8$minus123.456#:
x43302:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12442$float8$minus123.456#:
x43310:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12443$float8$minus123.456#:
x43318:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12450$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x43326:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12451$float8$minus123.456#:
x43362:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12452$float8$minus123.456#:
x43370:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12453$float8$minus123.456#:
x43378:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12454$float8$minus123.456#:
x43386:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12455$float8$minus123.456#:
x43394:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12462$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x43402:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12463$float8$minus123.456#:
x43443:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12464$float8$minus123.456#:
x43451:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12465$float8$minus123.456#:
x43459:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12466$float8$minus123.456#:
x43467:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12467$float8$minus123.456#:
x43475:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12474$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43483:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12475$float8$minus123.456#:
x43530:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12476$float8$minus123.456#:
x43538:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12477$float8$minus123.456#:
x43546:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12478$float8$minus123.456#:
x43554:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12479$float8$minus123.456#:
x43562:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12495$string_Please20write20three20integers3A20#:
x43570:	db "Please write three integers: ", 0	; 30: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 114 101 101 32 105 110 116 101 103 101 114 115 58 32 0

@12497$string_1232045620789#:
x43600:	db "123 456 789", 0	; 12: 49 50 51 32 52 53 54 32 55 56 57 0

@12498$string_25i20252Ai2025i2025n#:
x43612:	db "%i %*i %i %n", 0	; 13: 37 105 32 37 42 105 32 37 105 32 37 110 0

@12503$string_3C25i3E203C25i3E203C25i3E0A#:
x43625:	db "<%i> <%i> <%i>", 10, 0	; 16: 60 37 105 62 32 60 37 105 62 32 60 37 105 62 10 0

@12508$string_Please20write20the20patterns205Babc5D3A20#:
x43641:	db "Please write the patterns [abc]: ", 0	; 34: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 97 98 99 93 58 32 0

@12510$string_abcdef#:
x43675:	db "abcdef", 0	; 7: 97 98 99 100 101 102 0

@12511$string_255Babc5D#:
x43682:	db "%[abc]", 0	; 7: 37 91 97 98 99 93 0

@12513$string_3C25s3E0A#:
x43689:	db "<%s>", 10, 0	; 6: 60 37 115 62 10 0

@12515$string_Please20write20the20patterns205B5Eabc5D3A20#:
x43695:	db "Please write the patterns [^abc]: ", 0	; 35: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 94 97 98 99 93 58 32 0

@12517$string_defabc#:
x43730:	db "defabc", 0	; 7: 100 101 102 97 98 99 0

@12518$string_255B5Eabc5D#:
x43737:	db "%[^abc]", 0	; 8: 37 91 94 97 98 99 93 0

@12520$string_3C25s3E0A0A#:
x43745:	db "<%s>", 10, 10, 0	; 7: 60 37 115 62 10 10 0

sscanf:	; address £temporary1577 format
x43752:	mov si, bp	; 2: 137 238
x43754:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1578 £temporary1577

sscanf$2:	; BinaryAdd arg_list £temporary1578 2
x43757:	add si, 2	; 3: 131 198 2
x43760:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x43763:	mov ax, [bp + 6]	; 3: 139 70 6
x43766:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x43769:	mov ax, [bp + 8]	; 3: 139 70 8
x43772:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x43775:	mov ax, [di + 10]	; 3: 139 69 10
x43778:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x43781:	mov word [di + 12], sscanf$8	; 5: 199 69 12 24 171
x43786:	mov [di + 14], bp	; 3: 137 109 14
x43789:	mov [di + 16], di	; 3: 137 125 16
x43792:	add di, 12	; 3: 131 199 12
x43795:	mov bp, di	; 2: 137 253
x43797:	nop	; 1: 144
x43798:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1580

sscanf$10:	; SetReturnValue £temporary1580

sscanf$11:	; Return £temporary1580
x43800:	mov ax, [bp]	; 3: 139 70 0
x43803:	mov di, [bp + 4]	; 3: 139 126 4
x43806:	mov bp, [bp + 2]	; 3: 139 110 2
x43809:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x43811:	mov word [g_inStatus], 1	; 6: 199 6 217 95 1 0

vsscanf$1:	; IntegralToIntegral £temporary1585 inString
x43817:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1585
x43820:	mov [g_inDevice], ax	; 3: 163 219 95

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x43823:	mov ax, [bp + 8]	; 3: 139 70 8
x43826:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x43829:	mov ax, [bp + 10]	; 3: 139 70 10
x43832:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x43835:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 73 171
x43840:	mov [bp + 14], bp	; 3: 137 110 14
x43843:	add bp, 12	; 3: 131 197 12
x43846:	jmp scanFormat	; 3: 233 148 180

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1586

vsscanf$9:	; SetReturnValue £temporary1586

vsscanf$10:	; Return £temporary1586
x43849:	mov ax, [bp]	; 3: 139 70 0
x43852:	mov di, [bp + 4]	; 3: 139 126 4
x43855:	mov bp, [bp + 2]	; 3: 139 110 2
x43858:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

string_test:	; Assign s string_Hello2C20World21#
x43860:	mov word [bp + 8], @9688$string_Hello2C20World21#	; 5: 199 70 8 219 177

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x43865:	mov word [bp + 218], @9697$string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 233 177

string_test$3:	; Parameter 212 s 8
x43871:	mov ax, [bp + 8]	; 3: 139 70 8
x43874:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x43878:	mov ax, [bp + 8]	; 3: 139 70 8
x43881:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x43885:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 126 171
x43891:	mov [bp + 224], bp	; 4: 137 174 224 0
x43895:	add bp, 222	; 4: 129 197 222 0
x43899:	jmp strlen	; 3: 233 144 225

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4304

string_test$9:	; Parameter 212 £temporary4304 10
x43902:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x43906:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 152 171
x43912:	mov [bp + 214], bp	; 4: 137 174 214 0
x43916:	add bp, 212	; 4: 129 197 212 0
x43920:	mov di, bp	; 2: 137 239
x43922:	add di, 4	; 3: 131 199 4
x43925:	jmp printf	; 3: 233 108 97

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x43928:	mov [bp + 218], bp	; 4: 137 174 218 0
x43932:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x43937:	mov ax, [bp + 8]	; 3: 139 70 8
x43940:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x43944:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 185 171
x43950:	mov [bp + 214], bp	; 4: 137 174 214 0
x43954:	add bp, 212	; 4: 129 197 212 0
x43958:	jmp strcpy	; 3: 233 151 178

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x43961:	mov [bp + 218], bp	; 4: 137 174 218 0
x43965:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x43970:	mov ax, [bp + 8]	; 3: 139 70 8
x43973:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x43977:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x43983:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 224 171
x43989:	mov [bp + 214], bp	; 4: 137 174 214 0
x43993:	add bp, 212	; 4: 129 197 212 0
x43997:	jmp strncpy	; 3: 233 37 8

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4308 -> u u 5
x44000:	mov si, bp	; 2: 137 238
x44002:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4308 -> u 0
x44005:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44009:	mov word [bp + 218], @9709$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 252 177

string_test$27:	; Parameter 212 t 8
x44015:	mov [bp + 220], bp	; 4: 137 174 220 0
x44019:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x44024:	mov [bp + 222], bp	; 4: 137 174 222 0
x44028:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x44033:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 23 172
x44039:	mov [bp + 214], bp	; 4: 137 174 214 0
x44043:	add bp, 212	; 4: 129 197 212 0
x44047:	mov di, bp	; 2: 137 239
x44049:	add di, 4	; 3: 131 199 4
x44052:	jmp printf	; 3: 233 237 96

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x44055:	mov [bp + 218], bp	; 4: 137 174 218 0
x44059:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x44064:	mov word [bp + 220], @9711$string_abc#	; 6: 199 134 220 0 16 178

string_test$34:	; Call 212 strcat 0
x44070:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 55 172
x44076:	mov [bp + 214], bp	; 4: 137 174 214 0
x44080:	add bp, 212	; 4: 129 197 212 0
x44084:	jmp strcat	; 3: 233 250 224

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x44087:	mov [bp + 218], bp	; 4: 137 174 218 0
x44091:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x44096:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 81 172
x44102:	mov [bp + 214], bp	; 4: 137 174 214 0
x44106:	add bp, 212	; 4: 129 197 212 0
x44110:	jmp strlen	; 3: 233 189 224

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4311

string_test$41:	; Assign i £temporary4311
x44113:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x44116:	mov [bp + 218], bp	; 4: 137 174 218 0
x44120:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x44125:	mov word [bp + 220], @9714$string_abc#	; 6: 199 134 220 0 20 178

string_test$45:	; Parameter 212 2 10
x44131:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x44137:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 122 172
x44143:	mov [bp + 214], bp	; 4: 137 174 214 0
x44147:	add bp, 212	; 4: 129 197 212 0
x44151:	jmp strncat	; 3: 233 220 7

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4313 i 2
x44154:	mov ax, [bp + 6]	; 3: 139 70 6
x44157:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4315 u £temporary4313
x44160:	mov si, bp	; 2: 137 238
x44162:	add si, 110	; 3: 131 198 110
x44165:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4314 -> £temporary4315 £temporary4315 0

string_test$51:	; Assign £temporary4314 -> £temporary4315 0
x44167:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44170:	mov word [bp + 218], @9726$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 24 178

string_test$54:	; Parameter 212 t 8
x44176:	mov [bp + 220], bp	; 4: 137 174 220 0
x44180:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x44185:	mov [bp + 222], bp	; 4: 137 174 222 0
x44189:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x44194:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 184 172
x44200:	mov [bp + 214], bp	; 4: 137 174 214 0
x44204:	add bp, 212	; 4: 129 197 212 0
x44208:	mov di, bp	; 2: 137 239
x44210:	add di, 4	; 3: 131 199 4
x44213:	jmp printf	; 3: 233 76 96

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x44216:	mov word [bp + 218], @9728$string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 44 178

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x44222:	mov ax, [bp + 8]	; 3: 139 70 8
x44225:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x44229:	mov [bp + 228], bp	; 4: 137 174 228 0
x44233:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x44238:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 223 172
x44244:	mov [bp + 222], bp	; 4: 137 174 222 0
x44248:	add bp, 220	; 4: 129 197 220 0
x44252:	jmp strcmp	; 3: 233 60 176

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4317

string_test$66:	; Parameter 212 £temporary4317 8
x44255:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x44259:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 249 172
x44265:	mov [bp + 214], bp	; 4: 137 174 214 0
x44269:	add bp, 212	; 4: 129 197 212 0
x44273:	mov di, bp	; 2: 137 239
x44275:	add di, 2	; 3: 131 199 2
x44278:	jmp printf	; 3: 233 11 96

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x44281:	mov word [bp + 218], @9731$string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 63 178

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x44287:	mov ax, [bp + 8]	; 3: 139 70 8
x44290:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x44294:	mov [bp + 228], bp	; 4: 137 174 228 0
x44298:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x44303:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x44309:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 38 173
x44315:	mov [bp + 222], bp	; 4: 137 174 222 0
x44319:	add bp, 220	; 4: 129 197 220 0
x44323:	jmp strncmp	; 3: 233 151 7

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4319

string_test$78:	; Parameter 212 £temporary4319 8
x44326:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x44330:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 64 173
x44336:	mov [bp + 214], bp	; 4: 137 174 214 0
x44340:	add bp, 212	; 4: 129 197 212 0
x44344:	mov di, bp	; 2: 137 239
x44346:	add di, 2	; 3: 131 199 2
x44349:	jmp printf	; 3: 233 196 95

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x44352:	mov ax, [bp + 8]	; 3: 139 70 8
x44355:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x44359:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x44365:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 94 173
x44371:	mov [bp + 214], bp	; 4: 137 174 214 0
x44375:	add bp, 212	; 4: 129 197 212 0
x44379:	jmp strchr	; 3: 233 96 116

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4321

string_test$87:	; Assign p £temporary4321
x44382:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x44386:	mov word [bp + 218], @9741$string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 86 178

string_test$90:	; Equal 93 p 0
x44392:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44397:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4327 p s
x44399:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44403:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x44406:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4327 -1
x44408:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4327 8
x44411:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x44415:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 149 173
x44421:	mov [bp + 214], bp	; 4: 137 174 214 0
x44425:	add bp, 212	; 4: 129 197 212 0
x44429:	mov di, bp	; 2: 137 239
x44431:	add di, 2	; 3: 131 199 2
x44434:	jmp printf	; 3: 233 111 95

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x44437:	mov ax, [bp + 8]	; 3: 139 70 8
x44440:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x44444:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x44450:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 179 173
x44456:	mov [bp + 214], bp	; 4: 137 174 214 0
x44460:	add bp, 212	; 4: 129 197 212 0
x44464:	jmp strrchr	; 3: 233 142 7

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4329

string_test$103:	; Assign p £temporary4329
x44467:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x44471:	mov word [bp + 218], @9760$string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 107 178

string_test$106:	; Equal 109 p 0
x44477:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44482:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4335 p s
x44484:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44488:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x44491:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4335 -1
x44493:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4335 8
x44496:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x44500:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 234 173
x44506:	mov [bp + 214], bp	; 4: 137 174 214 0
x44510:	add bp, 212	; 4: 129 197 212 0
x44514:	mov di, bp	; 2: 137 239
x44516:	add di, 2	; 3: 131 199 2
x44519:	jmp printf	; 3: 233 26 95

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x44522:	mov ax, [bp + 8]	; 3: 139 70 8
x44525:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x44529:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x44535:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 8 174
x44541:	mov [bp + 214], bp	; 4: 137 174 214 0
x44545:	add bp, 212	; 4: 129 197 212 0
x44549:	jmp strchr	; 3: 233 182 115

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4337

string_test$119:	; Assign p £temporary4337
x44552:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x44556:	mov word [bp + 218], @9779$string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 129 178

string_test$122:	; Equal 125 p 0
x44562:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44567:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4343 p s
x44569:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44573:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x44576:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4343 -1
x44578:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4343 8
x44581:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x44585:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 63 174
x44591:	mov [bp + 214], bp	; 4: 137 174 214 0
x44595:	add bp, 212	; 4: 129 197 212 0
x44599:	mov di, bp	; 2: 137 239
x44601:	add di, 2	; 3: 131 199 2
x44604:	jmp printf	; 3: 233 197 94

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x44607:	mov ax, [bp + 8]	; 3: 139 70 8
x44610:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x44614:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x44620:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 93 174
x44626:	mov [bp + 214], bp	; 4: 137 174 214 0
x44630:	add bp, 212	; 4: 129 197 212 0
x44634:	jmp strrchr	; 3: 233 228 6

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4345

string_test$135:	; Assign p £temporary4345
x44637:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x44641:	mov word [bp + 218], @9798$string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 150 178

string_test$138:	; Equal 141 p 0
x44647:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44652:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4351 p s
x44654:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44658:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x44661:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4351 -1
x44663:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4351 8
x44666:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x44670:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 148 174
x44676:	mov [bp + 214], bp	; 4: 137 174 214 0
x44680:	add bp, 212	; 4: 129 197 212 0
x44684:	mov di, bp	; 2: 137 239
x44686:	add di, 2	; 3: 131 199 2
x44689:	jmp printf	; 3: 233 112 94

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x44692:	mov ax, [bp + 8]	; 3: 139 70 8
x44695:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x44699:	mov word [bp + 220], @9813$string_Hello2C20World21#	; 6: 199 134 220 0 172 178

string_test$148:	; Parameter 212 20 10
x44705:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x44711:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 184 174
x44717:	mov [bp + 214], bp	; 4: 137 174 214 0
x44721:	add bp, 212	; 4: 129 197 212 0
x44725:	jmp memcpy	; 3: 233 254 227

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x44728:	mov [bp + 218], bp	; 4: 137 174 218 0
x44732:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x44737:	mov word [bp + 220], @9820$string_Hello2C20World21#	; 6: 199 134 220 0 186 178

string_test$154:	; Parameter 212 20 10
x44743:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x44749:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 222 174
x44755:	mov [bp + 214], bp	; 4: 137 174 214 0
x44759:	add bp, 212	; 4: 129 197 212 0
x44763:	jmp memmove	; 3: 233 176 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x44766:	mov [bp + 218], bp	; 4: 137 174 218 0
x44770:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x44775:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x44781:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x44787:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 4 175
x44793:	mov [bp + 214], bp	; 4: 137 174 214 0
x44797:	add bp, 212	; 4: 129 197 212 0
x44801:	jmp memset	; 3: 233 240 6

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4356 -> u u 19
x44804:	mov si, bp	; 2: 137 238
x44806:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4356 -> u 0
x44809:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x44813:	mov word [bp + 218], @9842$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 200 178

string_test$167:	; Parameter 212 s 8
x44819:	mov ax, [bp + 8]	; 3: 139 70 8
x44822:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x44826:	mov [bp + 222], bp	; 4: 137 174 222 0
x44830:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x44835:	mov [bp + 224], bp	; 4: 137 174 224 0
x44839:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x44844:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 66 175
x44850:	mov [bp + 214], bp	; 4: 137 174 214 0
x44854:	add bp, 212	; 4: 129 197 212 0
x44858:	mov di, bp	; 2: 137 239
x44860:	add di, 6	; 3: 131 199 6
x44863:	jmp printf	; 3: 233 194 93

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x44866:	mov ax, [bp + 8]	; 3: 139 70 8
x44869:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x44873:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x44879:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x44885:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 102 175
x44891:	mov [bp + 214], bp	; 4: 137 174 214 0
x44895:	add bp, 212	; 4: 129 197 212 0
x44899:	jmp memchr	; 3: 233 206 6

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4358

string_test$179:	; Assign p £temporary4358
x44902:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44906:	mov word [bp + 218], @9853$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 230 178

string_test$182:	; Equal 185 p 0
x44912:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44917:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4364 p s
x44919:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44923:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x44926:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4364 -1
x44928:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4364 8
x44931:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x44935:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 157 175
x44941:	mov [bp + 214], bp	; 4: 137 174 214 0
x44945:	add bp, 212	; 4: 129 197 212 0
x44949:	mov di, bp	; 2: 137 239
x44951:	add di, 2	; 3: 131 199 2
x44954:	jmp printf	; 3: 233 103 93

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x44957:	mov ax, [bp + 8]	; 3: 139 70 8
x44960:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x44964:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x44970:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x44976:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 193 175
x44982:	mov [bp + 214], bp	; 4: 137 174 214 0
x44986:	add bp, 212	; 4: 129 197 212 0
x44990:	jmp memchr	; 3: 233 115 6

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4366

string_test$196:	; Assign p £temporary4366
x44993:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44997:	mov word [bp + 218], @9877$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 16 179

string_test$199:	; Equal 202 p 0
x45003:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45008:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4372 p s
x45010:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45014:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x45017:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4372 -1
x45019:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4372 8
x45022:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x45026:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 248 175
x45032:	mov [bp + 214], bp	; 4: 137 174 214 0
x45036:	add bp, 212	; 4: 129 197 212 0
x45040:	mov di, bp	; 2: 137 239
x45042:	add di, 2	; 3: 131 199 2
x45045:	jmp printf	; 3: 233 12 93

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_s3A202225s222C20t3A202225s220A# 6
x45048:	mov word [bp + 218], @9892$string_s3A202225s222C20t3A202225s220A#	; 6: 199 134 218 0 58 179

string_test$208:	; Parameter 212 s 8
x45054:	mov ax, [bp + 8]	; 3: 139 70 8
x45057:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$209:	; Parameter 212 t 10
x45061:	mov [bp + 222], bp	; 4: 137 174 222 0
x45065:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$210:	; Call 212 printf 0
x45070:	mov word [bp + 212], string_test$211	; 6: 199 134 212 0 36 176
x45076:	mov [bp + 214], bp	; 4: 137 174 214 0
x45080:	add bp, 212	; 4: 129 197 212 0
x45084:	mov di, bp	; 2: 137 239
x45086:	add di, 4	; 3: 131 199 4
x45089:	jmp printf	; 3: 233 224 92

string_test$211:	; PostCall 212

string_test$212:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$213:	; Parameter 212 string_strcmp28s2C20t29203D2025i0A# 6
x45092:	mov word [bp + 218], @9894$string_strcmp28s2C20t29203D2025i0A#	; 6: 199 134 218 0 76 179

string_test$214:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$215:	; Parameter 212 s 14
x45098:	mov ax, [bp + 8]	; 3: 139 70 8
x45101:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$216:	; Parameter 212 t 16
x45105:	mov [bp + 228], bp	; 4: 137 174 228 0
x45109:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$217:	; Call 212 strcmp 8
x45114:	mov word [bp + 220], string_test$218	; 6: 199 134 220 0 75 176
x45120:	mov [bp + 222], bp	; 4: 137 174 222 0
x45124:	add bp, 220	; 4: 129 197 220 0
x45128:	jmp strcmp	; 3: 233 208 172

string_test$218:	; PostCall 212

string_test$219:	; GetReturnValue £temporary4375

string_test$220:	; Parameter 212 £temporary4375 8
x45131:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$221:	; Call 212 printf 0
x45135:	mov word [bp + 212], string_test$222	; 6: 199 134 212 0 101 176
x45141:	mov [bp + 214], bp	; 4: 137 174 214 0
x45145:	add bp, 212	; 4: 129 197 212 0
x45149:	mov di, bp	; 2: 137 239
x45151:	add di, 2	; 3: 131 199 2
x45154:	jmp printf	; 3: 233 159 92

string_test$222:	; PostCall 212

string_test$223:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$224:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x45157:	mov word [bp + 218], @9897$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 95 179

string_test$225:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$226:	; Parameter 212 s 14
x45163:	mov ax, [bp + 8]	; 3: 139 70 8
x45166:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$227:	; Parameter 212 t 16
x45170:	mov [bp + 228], bp	; 4: 137 174 228 0
x45174:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$228:	; Parameter 212 20 18
x45179:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$229:	; Call 212 memcmp 8
x45185:	mov word [bp + 220], string_test$230	; 6: 199 134 220 0 146 176
x45191:	mov [bp + 222], bp	; 4: 137 174 222 0
x45195:	add bp, 220	; 4: 129 197 220 0
x45199:	jmp memcmp	; 3: 233 245 5

string_test$230:	; PostCall 212

string_test$231:	; GetReturnValue £temporary4377

string_test$232:	; Parameter 212 £temporary4377 8
x45202:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$233:	; Call 212 printf 0
x45206:	mov word [bp + 212], string_test$234	; 6: 199 134 212 0 172 176
x45212:	mov [bp + 214], bp	; 4: 137 174 214 0
x45216:	add bp, 212	; 4: 129 197 212 0
x45220:	mov di, bp	; 2: 137 239
x45222:	add di, 2	; 3: 131 199 2
x45225:	jmp printf	; 3: 233 88 92

string_test$234:	; PostCall 212

string_test$235:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$236:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45228:	mov word [bp + 218], @9905$string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 135 179

string_test$237:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$238:	; Parameter 212 s 14
x45234:	mov ax, [bp + 8]	; 3: 139 70 8
x45237:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$239:	; Parameter 212 string_Hello2C20C# 16
x45241:	mov word [bp + 228], @9906$string_Hello2C20C#	; 6: 199 134 228 0 163 179

string_test$240:	; Call 212 strspn 8
x45247:	mov word [bp + 220], string_test$241	; 6: 199 134 220 0 208 176
x45253:	mov [bp + 222], bp	; 4: 137 174 222 0
x45257:	add bp, 220	; 4: 129 197 220 0
x45261:	jmp strspn	; 3: 233 35 6

string_test$241:	; PostCall 212

string_test$242:	; GetReturnValue £temporary4379

string_test$243:	; Parameter 212 £temporary4379 8
x45264:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$244:	; Call 212 printf 0
x45268:	mov word [bp + 212], string_test$245	; 6: 199 134 212 0 234 176
x45274:	mov [bp + 214], bp	; 4: 137 174 214 0
x45278:	add bp, 212	; 4: 129 197 212 0
x45282:	mov di, bp	; 2: 137 239
x45284:	add di, 2	; 3: 131 199 2
x45287:	jmp printf	; 3: 233 26 92

string_test$245:	; PostCall 212

string_test$246:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$247:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45290:	mov word [bp + 218], @9909$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 172 179

string_test$248:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$249:	; Parameter 212 s 14
x45296:	mov ax, [bp + 8]	; 3: 139 70 8
x45299:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$250:	; Parameter 212 string_Hello2C20C# 16
x45303:	mov word [bp + 228], @9910$string_Hello2C20C#	; 6: 199 134 228 0 201 179

string_test$251:	; Call 212 strcspn 8
x45309:	mov word [bp + 220], string_test$252	; 6: 199 134 220 0 14 177
x45315:	mov [bp + 222], bp	; 4: 137 174 222 0
x45319:	add bp, 220	; 4: 129 197 220 0
x45323:	jmp strcspn	; 3: 233 69 6

string_test$252:	; PostCall 212

string_test$253:	; GetReturnValue £temporary4381

string_test$254:	; Parameter 212 £temporary4381 8
x45326:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$255:	; Call 212 printf 0
x45330:	mov word [bp + 212], string_test$256	; 6: 199 134 212 0 40 177
x45336:	mov [bp + 214], bp	; 4: 137 174 214 0
x45340:	add bp, 212	; 4: 129 197 212 0
x45344:	mov di, bp	; 2: 137 239
x45346:	add di, 2	; 3: 131 199 2
x45349:	jmp printf	; 3: 233 220 91

string_test$256:	; PostCall 212

string_test$257:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$258:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x45352:	mov word [bp + 218], @9913$string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 210 179

string_test$259:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$260:	; Parameter 212 errno 14
x45358:	mov ax, [errno]	; 3: 161 230 10
x45361:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$261:	; Call 212 strerror 8
x45365:	mov word [bp + 220], string_test$262	; 6: 199 134 220 0 70 177
x45371:	mov [bp + 222], bp	; 4: 137 174 222 0
x45375:	add bp, 220	; 4: 129 197 220 0
x45379:	jmp strerror	; 3: 233 216 130

string_test$262:	; PostCall 212

string_test$263:	; GetReturnValue £temporary4383

string_test$264:	; Parameter 212 £temporary4383 8
x45382:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$265:	; Call 212 printf 0
x45386:	mov word [bp + 212], string_test$266	; 6: 199 134 212 0 96 177
x45392:	mov [bp + 214], bp	; 4: 137 174 214 0
x45396:	add bp, 212	; 4: 129 197 212 0
x45400:	mov di, bp	; 2: 137 239
x45402:	add di, 2	; 3: 131 199 2
x45405:	jmp printf	; 3: 233 164 91

string_test$266:	; PostCall 212

string_test$267:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$268:	; Parameter 212 s 6
x45408:	mov ax, [bp + 8]	; 3: 139 70 8
x45411:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$269:	; Parameter 212 string_2C# 8
x45415:	mov word [bp + 220], @9916$string_2C#	; 6: 199 134 220 0 234 179

string_test$270:	; Call 212 strtok 0
x45421:	mov word [bp + 212], string_test$271	; 6: 199 134 212 0 126 177
x45427:	mov [bp + 214], bp	; 4: 137 174 214 0
x45431:	add bp, 212	; 4: 129 197 212 0
x45435:	jmp strtok	; 3: 233 53 6

string_test$271:	; PostCall 212

string_test$272:	; GetReturnValue £temporary4385

string_test$273:	; Assign p £temporary4385
x45438:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$274:	; Equal 288 p 0
x45442:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45447:	je string_test$288	; 2: 116 71

string_test$275:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$276:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x45449:	mov word [bp + 218], @9922$string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 236 179

string_test$277:	; Parameter 212 p 8
x45455:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45459:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$278:	; Call 212 printf 0
x45463:	mov word [bp + 212], string_test$279	; 6: 199 134 212 0 173 177
x45469:	mov [bp + 214], bp	; 4: 137 174 214 0
x45473:	add bp, 212	; 4: 129 197 212 0
x45477:	mov di, bp	; 2: 137 239
x45479:	add di, 2	; 3: 131 199 2
x45482:	jmp printf	; 3: 233 87 91

string_test$279:	; PostCall 212

string_test$280:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$281:	; Parameter 212 0 6
x45485:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$282:	; Parameter 212 string_2C# 8
x45491:	mov word [bp + 220], @9927$string_2C#	; 6: 199 134 220 0 3 180

string_test$283:	; Call 212 strtok 0
x45497:	mov word [bp + 212], string_test$284	; 6: 199 134 212 0 202 177
x45503:	mov [bp + 214], bp	; 4: 137 174 214 0
x45507:	add bp, 212	; 4: 129 197 212 0
x45511:	jmp strtok	; 3: 233 233 5

string_test$284:	; PostCall 212

string_test$285:	; GetReturnValue £temporary4388

string_test$286:	; Assign p £temporary4388
x45514:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$287:	; Goto 274
x45518:	jmp string_test$274	; 2: 235 178

string_test$288:	; Return 0
x45520:	mov ax, [bp]	; 3: 139 70 0
x45523:	mov di, [bp + 4]	; 3: 139 126 4
x45526:	mov bp, [bp + 2]	; 3: 139 110 2
x45529:	jmp ax	; 2: 255 224

string_test$289:	; FunctionEnd string_test

@9688$string_Hello2C20World21#:
x45531:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9697$string_strlen282225s2229203D2025i0A#:
x45545:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

@9709$string_t203D202225s222C20u203D202225s220A#:
x45564:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9711$string_abc#:
x45584:	db "abc", 0	; 4: 97 98 99 0

@9714$string_abc#:
x45588:	db "abc", 0	; 4: 97 98 99 0

@9726$string_t203D202225s222C20u203D202225s220A#:
x45592:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9728$string_strcmp28s2C20u29203D2025i0A#:
x45612:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

@9731$string_strncmp28s2C20u2C20229203D2025i0A#:
x45631:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

@9741$string_strchr28s2C2027l2729203D2025i0A#:
x45654:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9760$string_strrchr28s2C2027l2729203D2025i0A#:
x45675:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9779$string_strchr28s2C2027x2729203D2025i0A#:
x45697:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9798$string_strrchr28s2C2027x2729203D2025i0A#:
x45718:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9813$string_Hello2C20World21#:
x45740:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9820$string_Hello2C20World21#:
x45754:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9842$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x45768:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9853$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45798:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9877$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45840:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9892$string_s3A202225s222C20t3A202225s220A#:
x45882:	db "s: ", 34, "%s", 34, ", t: ", 34, "%s", 34, 10, 0	; 18: 115 58 32 34 37 115 34 44 32 116 58 32 34 37 115 34 10 0

@9894$string_strcmp28s2C20t29203D2025i0A#:
x45900:	db "strcmp(s, t) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 116 41 32 61 32 37 105 10 0

@9897$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x45919:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9905$string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x45959:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9906$string_Hello2C20C#:
x45987:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9909$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x45996:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9910$string_Hello2C20C#:
x46025:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9913$string_strerror28errno29203D202225s220A#:
x46034:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

@9916$string_2C#:
x46058:	db ",", 0	; 2: 44 0

@9922$string_strtok28s2C20222C2229203D202225s220A#:
x46060:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

@9927$string_2C#:
x46083:	db ",", 0	; 2: 44 0

strncpy:	; Assign index 0
x46085:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x46090:	mov ax, [bp + 10]	; 3: 139 70 10
x46093:	cmp [bp + 12], ax	; 3: 57 70 12
x46096:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3709 source index
x46098:	mov si, [bp + 8]	; 3: 139 118 8
x46101:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3708 -> £temporary3709 £temporary3709 0

strncpy$4:	; Equal 12 £temporary3708 -> £temporary3709 0
x46104:	cmp byte [si], 0	; 3: 128 60 0
x46107:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3714 target index
x46109:	mov si, [bp + 6]	; 3: 139 118 6
x46112:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3713 -> £temporary3714 £temporary3714 0

strncpy$7:	; BinaryAdd £temporary3716 source index
x46115:	mov di, [bp + 8]	; 3: 139 126 8
x46118:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3715 -> £temporary3716 £temporary3716 0

strncpy$9:	; Assign £temporary3713 -> £temporary3714 £temporary3715 -> £temporary3716
x46121:	mov al, [di]	; 2: 138 5
x46123:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x46125:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x46128:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x46130:	mov ax, [bp + 10]	; 3: 139 70 10
x46133:	cmp [bp + 12], ax	; 3: 57 70 12
x46136:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3720 target index
x46138:	mov si, [bp + 6]	; 3: 139 118 6
x46141:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3719 -> £temporary3720 £temporary3720 0

strncpy$15:	; Assign £temporary3719 -> £temporary3720 0
x46144:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x46147:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x46150:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x46152:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x46155:	mov ax, [bp]	; 3: 139 70 0
x46158:	mov di, [bp + 4]	; 3: 139 126 4
x46161:	mov bp, [bp + 2]	; 3: 139 110 2
x46164:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x46166:	mov ax, [bp + 6]	; 3: 139 70 6
x46169:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x46172:	mov word [bp + 14], strncat$3	; 5: 199 70 14 106 180
x46177:	mov [bp + 16], bp	; 3: 137 110 16
x46180:	add bp, 14	; 3: 131 197 14
x46183:	jmp strlen	; 3: 233 164 216

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3735

strncat$5:	; Assign targetLength £temporary3735
x46186:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x46189:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3736 size 1
x46194:	mov ax, [bp + 10]	; 3: 139 70 10
x46197:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3736
x46198:	cmp [bp + 12], ax	; 3: 57 70 12
x46201:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3739 source index
x46203:	mov si, [bp + 8]	; 3: 139 118 8
x46206:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3738 -> £temporary3739 £temporary3739 0

strncat$11:	; Equal 20 £temporary3738 -> £temporary3739 0
x46209:	cmp byte [si], 0	; 3: 128 60 0
x46212:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3743 targetLength index
x46214:	mov ax, [bp + 14]	; 3: 139 70 14
x46217:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3745 target £temporary3743
x46220:	mov si, [bp + 6]	; 3: 139 118 6
x46223:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3744 -> £temporary3745 £temporary3745 0

strncat$15:	; BinaryAdd £temporary3747 source index
x46225:	mov di, [bp + 8]	; 3: 139 126 8
x46228:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3746 -> £temporary3747 £temporary3747 0

strncat$17:	; Assign £temporary3744 -> £temporary3745 £temporary3746 -> £temporary3747
x46231:	mov al, [di]	; 2: 138 5
x46233:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x46235:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x46238:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3748 targetLength size
x46240:	mov ax, [bp + 14]	; 3: 139 70 14
x46243:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3749 £temporary3748 1
x46246:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3751 target £temporary3749
x46247:	mov si, [bp + 6]	; 3: 139 118 6
x46250:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3750 -> £temporary3751 £temporary3751 0

strncat$24:	; Assign £temporary3750 -> £temporary3751 0
x46252:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x46255:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x46258:	mov ax, [bp]	; 3: 139 70 0
x46261:	mov di, [bp + 4]	; 3: 139 126 4
x46264:	mov bp, [bp + 2]	; 3: 139 110 2
x46267:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x46269:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 26 index size
x46274:	mov ax, [bp + 10]	; 3: 139 70 10
x46277:	cmp [bp + 12], ax	; 3: 57 70 12
x46280:	jge strncmp$26	; 2: 125 105

strncmp$2:	; BinaryAdd £temporary3775 left index
x46282:	mov si, [bp + 6]	; 3: 139 118 6
x46285:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3774 -> £temporary3775 £temporary3775 0

strncmp$4:	; NotEqual 10 £temporary3774 -> £temporary3775 0
x46288:	cmp byte [si], 0	; 3: 128 60 0
x46291:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3778 right index
x46293:	mov si, [bp + 8]	; 3: 139 118 8
x46296:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3777 -> £temporary3778 £temporary3778 0

strncmp$7:	; NotEqual 10 £temporary3777 -> £temporary3778 0
x46299:	cmp byte [si], 0	; 3: 128 60 0
x46302:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x46304:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x46307:	mov ax, [bp]	; 3: 139 70 0
x46310:	mov di, [bp + 4]	; 3: 139 126 4
x46313:	mov bp, [bp + 2]	; 3: 139 110 2
x46316:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3782 left index
x46318:	mov si, [bp + 6]	; 3: 139 118 6
x46321:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3781 -> £temporary3782 £temporary3782 0

strncmp$12:	; BinaryAdd £temporary3784 right index
x46324:	mov di, [bp + 8]	; 3: 139 126 8
x46327:	add di, [bp + 12]	; 3: 3 126 12

strncmp$13:	; Deref £temporary3783 -> £temporary3784 £temporary3784 0

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3781 -> £temporary3782 £temporary3783 -> £temporary3784
x46330:	mov al, [di]	; 2: 138 5
x46332:	cmp [si], al	; 2: 56 4
x46334:	jge strncmp$17	; 2: 125 14

strncmp$15:	; SetReturnValue -1
x46336:	mov bx, -1	; 3: 187 255 255

strncmp$16:	; Return -1
x46339:	mov ax, [bp]	; 3: 139 70 0
x46342:	mov di, [bp + 4]	; 3: 139 126 4
x46345:	mov bp, [bp + 2]	; 3: 139 110 2
x46348:	jmp ax	; 2: 255 224

strncmp$17:	; BinaryAdd £temporary3787 left index
x46350:	mov si, [bp + 6]	; 3: 139 118 6
x46353:	add si, [bp + 12]	; 3: 3 118 12

strncmp$18:	; Deref £temporary3786 -> £temporary3787 £temporary3787 0

strncmp$19:	; BinaryAdd £temporary3789 right index
x46356:	mov di, [bp + 8]	; 3: 139 126 8
x46359:	add di, [bp + 12]	; 3: 3 126 12

strncmp$20:	; Deref £temporary3788 -> £temporary3789 £temporary3789 0

strncmp$21:	; SignedLessThanEqual 24 £temporary3786 -> £temporary3787 £temporary3788 -> £temporary3789
x46362:	mov al, [di]	; 2: 138 5
x46364:	cmp [si], al	; 2: 56 4
x46366:	jle strncmp$24	; 2: 126 14

strncmp$22:	; SetReturnValue 1
x46368:	mov bx, 1	; 3: 187 1 0

strncmp$23:	; Return 1
x46371:	mov ax, [bp]	; 3: 139 70 0
x46374:	mov di, [bp + 4]	; 3: 139 126 4
x46377:	mov bp, [bp + 2]	; 3: 139 110 2
x46380:	jmp ax	; 2: 255 224

strncmp$24:	; Increment index
x46382:	inc word [bp + 12]	; 3: 255 70 12

strncmp$25:	; Goto 1
x46385:	jmp strncmp$1	; 2: 235 143

strncmp$26:	; SetReturnValue 0
x46387:	mov bx, 0	; 3: 187 0 0

strncmp$27:	; Return 0
x46390:	mov ax, [bp]	; 3: 139 70 0
x46393:	mov di, [bp + 4]	; 3: 139 126 4
x46396:	mov bp, [bp + 2]	; 3: 139 110 2
x46399:	jmp ax	; 2: 255 224

strncmp$28:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x46401:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary3802 i
x46406:	mov ax, [bp + 8]	; 3: 139 70 8
x46409:	cmp ax, 0	; 3: 131 248 0
x46412:	jge strrchr$2	; 2: 125 4
x46414:	neg ax	; 2: 247 216
x46416:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary3802
x46418:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x46421:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary3804 text index
x46426:	mov si, [bp + 6]	; 3: 139 118 6
x46429:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary3803 -> £temporary3804 £temporary3804 0

strrchr$6:	; Equal 16 £temporary3803 -> £temporary3804 0
x46432:	cmp byte [si], 0	; 3: 128 60 0
x46435:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary3808 text index
x46437:	mov si, [bp + 6]	; 3: 139 118 6
x46440:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0

strrchr$9:	; NotEqual 14 £temporary3807 -> £temporary3808 c
x46443:	mov al, [bp + 14]	; 3: 138 70 14
x46446:	cmp [si], al	; 2: 56 4
x46448:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary3811 text index
x46450:	mov si, [bp + 6]	; 3: 139 118 6
x46453:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary3810 -> £temporary3811 £temporary3811 0

strrchr$12:	; address £temporary3812 £temporary3810 -> £temporary3811

strrchr$13:	; Assign result £temporary3812
x46456:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x46459:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x46462:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x46464:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x46467:	mov ax, [bp]	; 3: 139 70 0
x46470:	mov di, [bp + 4]	; 3: 139 126 4
x46473:	mov bp, [bp + 2]	; 3: 139 110 2
x46476:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary3930 target
x46478:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary3930
x46481:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary3931 source
x46484:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary3931
x46487:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x46490:	mov ax, [bp + 6]	; 3: 139 70 6
x46493:	cmp [bp + 8], ax	; 3: 57 70 8
x46496:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x46498:	mov ax, [bp + 10]	; 3: 139 70 10
x46501:	dec ax	; 1: 72
x46502:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x46505:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x46509:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary3937 charTarget index
x46511:	mov si, [bp + 12]	; 3: 139 118 12
x46514:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary3936 -> £temporary3937 £temporary3937 0

memmove$9:	; BinaryAdd £temporary3939 charSource index
x46517:	mov di, [bp + 14]	; 3: 139 126 14
x46520:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary3938 -> £temporary3939 £temporary3939 0

memmove$11:	; Assign £temporary3936 -> £temporary3937 £temporary3938 -> £temporary3939
x46523:	mov al, [di]	; 2: 138 5
x46525:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x46527:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x46530:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x46532:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x46537:	mov ax, [bp + 10]	; 3: 139 70 10
x46540:	cmp [bp + 16], ax	; 3: 57 70 16
x46543:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary3943 charTarget index
x46545:	mov si, [bp + 12]	; 3: 139 118 12
x46548:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary3942 -> £temporary3943 £temporary3943 0

memmove$18:	; BinaryAdd £temporary3945 charSource index
x46551:	mov di, [bp + 14]	; 3: 139 126 14
x46554:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary3944 -> £temporary3945 £temporary3945 0

memmove$20:	; Assign £temporary3942 -> £temporary3943 £temporary3944 -> £temporary3945
x46557:	mov al, [di]	; 2: 138 5
x46559:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x46561:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x46564:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary3946 target
x46566:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary3946

memmove$25:	; Return £temporary3946
x46569:	mov ax, [bp]	; 3: 139 70 0
x46572:	mov di, [bp + 4]	; 3: 139 126 4
x46575:	mov bp, [bp + 2]	; 3: 139 110 2
x46578:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary3972 block
x46580:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary3972
x46583:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary3973 i
x46586:	mov ax, [bp + 8]	; 3: 139 70 8
x46589:	cmp ax, 0	; 3: 131 248 0
x46592:	jge memset$3	; 2: 125 4
x46594:	neg ax	; 2: 247 216
x46596:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary3973
x46598:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x46601:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x46606:	mov ax, [bp + 10]	; 3: 139 70 10
x46609:	cmp [bp + 15], ax	; 3: 57 70 15
x46612:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary3977 charBlock index
x46614:	mov si, [bp + 12]	; 3: 139 118 12
x46617:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary3976 -> £temporary3977 £temporary3977 0

memset$8:	; Assign £temporary3976 -> £temporary3977 c
x46620:	mov al, [bp + 14]	; 3: 138 70 14
x46623:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x46625:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x46628:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x46630:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x46633:	mov ax, [bp]	; 3: 139 70 0
x46636:	mov di, [bp + 4]	; 3: 139 126 4
x46639:	mov bp, [bp + 2]	; 3: 139 110 2
x46642:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary3961 block
x46644:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary3961
x46647:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary3962 i
x46650:	mov ax, [bp + 8]	; 3: 139 70 8
x46653:	cmp ax, 0	; 3: 131 248 0
x46656:	jge memchr$3	; 2: 125 4
x46658:	neg ax	; 2: 247 216
x46660:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary3962
x46662:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x46665:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x46670:	mov ax, [bp + 10]	; 3: 139 70 10
x46673:	cmp [bp + 12], ax	; 3: 57 70 12
x46676:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary3966 charBlock index
x46678:	mov si, [bp + 14]	; 3: 139 118 14
x46681:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary3965 -> £temporary3966 £temporary3966 0

memchr$8:	; NotEqual 15 £temporary3965 -> £temporary3966 c
x46684:	mov al, [bp + 16]	; 3: 138 70 16
x46687:	cmp [si], al	; 2: 56 4
x46689:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary3969 charBlock index
x46691:	mov bx, [bp + 14]	; 3: 139 94 14
x46694:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary3968 -> £temporary3969 £temporary3969 0

memchr$11:	; address £temporary3970 £temporary3968 -> £temporary3969

memchr$12:	; IntegralToIntegral £temporary3971 £temporary3970

memchr$13:	; SetReturnValue £temporary3971

memchr$14:	; Return £temporary3971
x46697:	mov ax, [bp]	; 3: 139 70 0
x46700:	mov di, [bp + 4]	; 3: 139 126 4
x46703:	mov bp, [bp + 2]	; 3: 139 110 2
x46706:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x46708:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x46711:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x46713:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x46716:	mov ax, [bp]	; 3: 139 70 0
x46719:	mov di, [bp + 4]	; 3: 139 126 4
x46722:	mov bp, [bp + 2]	; 3: 139 110 2
x46725:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary3947 left
x46727:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary3947
x46730:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary3948 right
x46733:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary3948
x46736:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x46739:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x46744:	mov ax, [bp + 10]	; 3: 139 70 10
x46747:	cmp [bp + 16], ax	; 3: 57 70 16
x46750:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary3952 charLeft index
x46752:	mov si, [bp + 12]	; 3: 139 118 12
x46755:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary3951 -> £temporary3952 £temporary3952 0

memcmp$8:	; BinaryAdd £temporary3954 charRight index
x46758:	mov di, [bp + 14]	; 3: 139 126 14
x46761:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary3953 -> £temporary3954 £temporary3954 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3951 -> £temporary3952 £temporary3953 -> £temporary3954
x46764:	mov al, [di]	; 2: 138 5
x46766:	cmp [si], al	; 2: 56 4
x46768:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x46770:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x46773:	mov ax, [bp]	; 3: 139 70 0
x46776:	mov di, [bp + 4]	; 3: 139 126 4
x46779:	mov bp, [bp + 2]	; 3: 139 110 2
x46782:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary3957 charLeft index
x46784:	mov si, [bp + 12]	; 3: 139 118 12
x46787:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary3956 -> £temporary3957 £temporary3957 0

memcmp$15:	; BinaryAdd £temporary3959 charRight index
x46790:	mov di, [bp + 14]	; 3: 139 126 14
x46793:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary3958 -> £temporary3959 £temporary3959 0

memcmp$17:	; SignedLessThanEqual 20 £temporary3956 -> £temporary3957 £temporary3958 -> £temporary3959
x46796:	mov al, [di]	; 2: 138 5
x46798:	cmp [si], al	; 2: 56 4
x46800:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x46802:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x46805:	mov ax, [bp]	; 3: 139 70 0
x46808:	mov di, [bp + 4]	; 3: 139 126 4
x46811:	mov bp, [bp + 2]	; 3: 139 110 2
x46814:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x46816:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x46819:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x46821:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x46824:	mov ax, [bp]	; 3: 139 70 0
x46827:	mov di, [bp + 4]	; 3: 139 126 4
x46830:	mov bp, [bp + 2]	; 3: 139 110 2
x46833:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x46835:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary3814 mainString index
x46840:	mov si, [bp + 6]	; 3: 139 118 6
x46843:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary3813 -> £temporary3814 £temporary3814 0

strspn$3:	; Equal 18 £temporary3813 -> £temporary3814 0
x46846:	cmp byte [si], 0	; 3: 128 60 0
x46849:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x46851:	mov ax, [bp + 8]	; 3: 139 70 8
x46854:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary3818 mainString index
x46857:	mov si, [bp + 6]	; 3: 139 118 6
x46860:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary3817 -> £temporary3818 £temporary3818 0

strspn$8:	; IntegralToIntegral £temporary3819 £temporary3817 -> £temporary3818
x46863:	mov al, [si]	; 2: 138 4
x46865:	and ax, 255	; 3: 37 255 0
x46868:	cmp al, 0	; 2: 60 0
x46870:	jge strspn$9	; 2: 125 4
x46872:	neg al	; 2: 246 216
x46874:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary3819 8
x46876:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x46879:	mov word [bp + 12], strspn$11	; 5: 199 70 12 45 183
x46884:	mov [bp + 14], bp	; 3: 137 110 14
x46887:	add bp, 12	; 3: 131 197 12
x46890:	jmp strchr	; 3: 233 145 106

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary3820

strspn$13:	; NotEqual 16 £temporary3820 0
x46893:	cmp bx, 0	; 3: 131 251 0
x46896:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x46898:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x46901:	mov ax, [bp]	; 3: 139 70 0
x46904:	mov di, [bp + 4]	; 3: 139 126 4
x46907:	mov bp, [bp + 2]	; 3: 139 110 2
x46910:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x46912:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x46915:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x46917:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x46920:	mov ax, [bp]	; 3: 139 70 0
x46923:	mov di, [bp + 4]	; 3: 139 126 4
x46926:	mov bp, [bp + 2]	; 3: 139 110 2
x46929:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x46931:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary3825 mainString index
x46936:	mov si, [bp + 6]	; 3: 139 118 6
x46939:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary3824 -> £temporary3825 £temporary3825 0

strcspn$3:	; Equal 18 £temporary3824 -> £temporary3825 0
x46942:	cmp byte [si], 0	; 3: 128 60 0
x46945:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x46947:	mov ax, [bp + 8]	; 3: 139 70 8
x46950:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary3829 mainString index
x46953:	mov si, [bp + 6]	; 3: 139 118 6
x46956:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary3828 -> £temporary3829 £temporary3829 0

strcspn$8:	; IntegralToIntegral £temporary3830 £temporary3828 -> £temporary3829
x46959:	mov al, [si]	; 2: 138 4
x46961:	and ax, 255	; 3: 37 255 0
x46964:	cmp al, 0	; 2: 60 0
x46966:	jge strcspn$9	; 2: 125 4
x46968:	neg al	; 2: 246 216
x46970:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary3830 8
x46972:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x46975:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 141 183
x46980:	mov [bp + 14], bp	; 3: 137 110 14
x46983:	add bp, 12	; 3: 131 197 12
x46986:	jmp strchr	; 3: 233 49 106

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary3831

strcspn$13:	; Equal 16 £temporary3831 0
x46989:	cmp bx, 0	; 3: 131 251 0
x46992:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x46994:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x46997:	mov ax, [bp]	; 3: 139 70 0
x47000:	mov di, [bp + 4]	; 3: 139 126 4
x47003:	mov bp, [bp + 2]	; 3: 139 110 2
x47006:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x47008:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x47011:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x47013:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x47016:	mov ax, [bp]	; 3: 139 70 0
x47019:	mov di, [bp + 4]	; 3: 139 126 4
x47022:	mov bp, [bp + 2]	; 3: 139 110 2
x47025:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x47027:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x47031:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary3876 -> string string 0
x47035:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary3876 -> string 0
x47038:	cmp byte [si], 0	; 3: 128 60 0
x47041:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x47043:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x47046:	mov ax, [bp]	; 3: 139 70 0
x47049:	mov di, [bp + 4]	; 3: 139 126 4
x47052:	mov bp, [bp + 2]	; 3: 139 110 2
x47055:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x47057:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary3879 string index
x47062:	mov si, [bp + 6]	; 3: 139 118 6
x47065:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary3878 -> £temporary3879 £temporary3879 0

strtok$8:	; Equal 31 £temporary3878 -> £temporary3879 0
x47068:	cmp byte [si], 0	; 3: 128 60 0
x47071:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x47073:	mov ax, [bp + 8]	; 3: 139 70 8
x47076:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary3883 string index
x47079:	mov si, [bp + 6]	; 3: 139 118 6
x47082:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary3882 -> £temporary3883 £temporary3883 0

strtok$13:	; IntegralToIntegral £temporary3884 £temporary3882 -> £temporary3883
x47085:	mov al, [si]	; 2: 138 4
x47087:	and ax, 255	; 3: 37 255 0
x47090:	cmp al, 0	; 2: 60 0
x47092:	jge strtok$14	; 2: 125 4
x47094:	neg al	; 2: 246 216
x47096:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary3884 8
x47098:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x47101:	mov word [bp + 14], strtok$16	; 5: 199 70 14 11 184
x47106:	mov [bp + 16], bp	; 3: 137 110 16
x47109:	add bp, 14	; 3: 131 197 14
x47112:	jmp strchr	; 3: 233 179 105

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary3885

strtok$18:	; Equal 29 £temporary3885 0
x47115:	cmp bx, 0	; 3: 131 251 0
x47118:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary3888 string index
x47120:	mov si, [bp + 6]	; 3: 139 118 6
x47123:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary3887 -> £temporary3888 £temporary3888 0

strtok$21:	; Assign £temporary3887 -> £temporary3888 0
x47126:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary3889 index 1
x47129:	mov ax, [bp + 10]	; 3: 139 70 10
x47132:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary3891 string £temporary3889
x47133:	mov si, [bp + 6]	; 3: 139 118 6
x47136:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary3890 -> £temporary3891 £temporary3891 0

strtok$25:	; address £temporary3892 £temporary3890 -> £temporary3891

strtok$26:	; Assign token £temporary3892
x47138:	mov [@8781$token], si	; 4: 137 54 14 185

strtok$27:	; SetReturnValue string
x47142:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x47145:	mov ax, [bp]	; 3: 139 70 0
x47148:	mov di, [bp + 4]	; 3: 139 126 4
x47151:	mov bp, [bp + 2]	; 3: 139 110 2
x47154:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x47156:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x47159:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary3894 string index
x47161:	mov si, [bp + 6]	; 3: 139 118 6
x47164:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary3893 -> £temporary3894 £temporary3894 0

strtok$33:	; address £temporary3895 £temporary3893 -> £temporary3894

strtok$34:	; Assign token £temporary3895
x47167:	mov [@8781$token], si	; 4: 137 54 14 185

strtok$35:	; SetReturnValue string
x47171:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x47174:	mov ax, [bp]	; 3: 139 70 0
x47177:	mov di, [bp + 4]	; 3: 139 126 4
x47180:	mov bp, [bp + 2]	; 3: 139 110 2
x47183:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x47185:	cmp word [@8781$token], 0	; 5: 131 62 14 185 0
x47190:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x47192:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x47195:	mov ax, [bp]	; 3: 139 70 0
x47198:	mov di, [bp + 4]	; 3: 139 126 4
x47201:	mov bp, [bp + 2]	; 3: 139 110 2
x47204:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (@8781$token,0) 0
x47206:	mov si, [@8781$token]	; 4: 139 54 14 185
x47210:	cmp byte [si], 0	; 3: 128 60 0
x47213:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x47215:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x47218:	mov ax, [bp]	; 3: 139 70 0
x47221:	mov di, [bp + 4]	; 3: 139 126 4
x47224:	mov bp, [bp + 2]	; 3: 139 110 2
x47227:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x47229:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary3900 token index
x47234:	mov si, [@8781$token]	; 4: 139 54 14 185
x47238:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary3899 -> £temporary3900 £temporary3900 0

strtok$46:	; Equal 70 £temporary3899 -> £temporary3900 0
x47241:	cmp byte [si], 0	; 3: 128 60 0
x47244:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x47246:	mov ax, [bp + 8]	; 3: 139 70 8
x47249:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary3904 token index
x47252:	mov si, [@8781$token]	; 4: 139 54 14 185
x47256:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary3903 -> £temporary3904 £temporary3904 0

strtok$51:	; IntegralToIntegral £temporary3905 £temporary3903 -> £temporary3904
x47259:	mov al, [si]	; 2: 138 4
x47261:	and ax, 255	; 3: 37 255 0
x47264:	cmp al, 0	; 2: 60 0
x47266:	jge strtok$52	; 2: 125 4
x47268:	neg al	; 2: 246 216
x47270:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary3905 8
x47272:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x47275:	mov word [bp + 14], strtok$54	; 5: 199 70 14 185 184
x47280:	mov [bp + 16], bp	; 3: 137 110 16
x47283:	add bp, 14	; 3: 131 197 14
x47286:	jmp strchr	; 3: 233 5 105

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary3906

strtok$56:	; Equal 68 £temporary3906 0
x47289:	cmp bx, 0	; 3: 131 251 0
x47292:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x47294:	mov ax, [@8781$token]	; 3: 161 14 185
x47297:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary3909 token index
x47300:	mov si, [@8781$token]	; 4: 139 54 14 185
x47304:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary3908 -> £temporary3909 £temporary3909 0

strtok$60:	; Assign £temporary3908 -> £temporary3909 0
x47307:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary3910 index 1
x47310:	mov ax, [bp + 10]	; 3: 139 70 10
x47313:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary3912 token £temporary3910
x47314:	mov si, [@8781$token]	; 4: 139 54 14 185
x47318:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary3911 -> £temporary3912 £temporary3912 0

strtok$64:	; address £temporary3913 £temporary3911 -> £temporary3912

strtok$65:	; Assign token £temporary3913
x47320:	mov [@8781$token], si	; 4: 137 54 14 185

strtok$66:	; SetReturnValue tokenStart2
x47324:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x47327:	mov ax, [bp]	; 3: 139 70 0
x47330:	mov di, [bp + 4]	; 3: 139 126 4
x47333:	mov bp, [bp + 2]	; 3: 139 110 2
x47336:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x47338:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x47341:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x47343:	mov ax, [@8781$token]	; 3: 161 14 185
x47346:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary3915 token index
x47349:	mov si, [@8781$token]	; 4: 139 54 14 185
x47353:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0

strtok$73:	; address £temporary3916 £temporary3914 -> £temporary3915

strtok$74:	; Assign token £temporary3916
x47356:	mov [@8781$token], si	; 4: 137 54 14 185

strtok$75:	; SetReturnValue tokenStart
x47360:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x47363:	mov ax, [bp]	; 3: 139 70 0
x47366:	mov di, [bp + 4]	; 3: 139 126 4
x47369:	mov bp, [bp + 2]	; 3: 139 110 2
x47372:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

@8781$token:
x47374:	dw 0	; 2: 0 0

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x47376:	mov word [bp + 14], @13228$string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 85 190

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x47381:	mov word [bp + 22], @13229$string_1232E456#	; 5: 199 70 22 107 190

stdlib_test$4:	; Call 8 atof 8
x47386:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 40 185
x47391:	mov [bp + 18], bp	; 3: 137 110 18
x47394:	add bp, 16	; 3: 131 197 16
x47397:	jmp atof	; 3: 233 44 7

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6056

stdlib_test$7:	; Parameter 8 £temporary6056 8
x47400:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x47403:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 62 185
x47408:	mov [bp + 10], bp	; 3: 137 110 10
x47411:	add bp, 8	; 3: 131 197 8
x47414:	mov di, bp	; 2: 137 239
x47416:	add di, 8	; 3: 131 199 8
x47419:	jmp printf	; 3: 233 198 83

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x47422:	mov word [bp + 14], @13232$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 115 190

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x47427:	mov word [bp + 22], @13233$string_1232E456789abc#	; 5: 199 70 22 155 190

stdlib_test$14:	; address £temporary6058 p
x47432:	mov si, bp	; 2: 137 238
x47434:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6058 16
x47437:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x47440:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 94 185
x47445:	mov [bp + 18], bp	; 3: 137 110 18
x47448:	add bp, 16	; 3: 131 197 16
x47451:	jmp strtod	; 3: 233 26 7

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6059

stdlib_test$19:	; Parameter 8 £temporary6059 8
x47454:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x47457:	mov ax, [bp + 6]	; 3: 139 70 6
x47460:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x47463:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 122 185
x47468:	mov [bp + 10], bp	; 3: 137 110 10
x47471:	add bp, 8	; 3: 131 197 8
x47474:	mov di, bp	; 2: 137 239
x47476:	add di, 10	; 3: 131 199 10
x47479:	jmp printf	; 3: 233 138 83

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x47482:	mov word [bp + 12], @13237$string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 169 190

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x47487:	mov word [bp + 20], @13238$string_path#	; 5: 199 70 20 191 190

stdlib_test$27:	; Call 6 getenv 8
x47492:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 146 185
x47497:	mov [bp + 16], bp	; 3: 137 110 16
x47500:	add bp, 14	; 3: 131 197 14
x47503:	jmp getenv	; 3: 233 67 7

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6061

stdlib_test$30:	; Parameter 6 £temporary6061 8
x47506:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x47509:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 168 185
x47514:	mov [bp + 8], bp	; 3: 137 110 8
x47517:	add bp, 6	; 3: 131 197 6
x47520:	mov di, bp	; 2: 137 239
x47522:	add di, 2	; 3: 131 199 2
x47525:	jmp printf	; 3: 233 92 83

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x47528:	mov word [bp + 12], @13241$string_system2822dir22290A#	; 5: 199 70 12 196 190

stdlib_test$35:	; Call 6 printf 0
x47533:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 189 185
x47538:	mov [bp + 8], bp	; 3: 137 110 8
x47541:	add bp, 6	; 3: 131 197 6
x47544:	mov di, bp	; 2: 137 239
x47546:	jmp printf	; 3: 233 71 83

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x47549:	mov word [bp + 12], @13243$string_dir#	; 5: 199 70 12 211 190

stdlib_test$39:	; Call 6 system 0
x47554:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 208 185
x47559:	mov [bp + 8], bp	; 3: 137 110 8
x47562:	add bp, 6	; 3: 131 197 6
x47565:	jmp system	; 3: 233 19 7

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x47568:	mov word [bp + 12], @13245$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 215 190

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x47573:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x47578:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 232 185
x47583:	mov [bp + 16], bp	; 3: 137 110 16
x47586:	add bp, 14	; 3: 131 197 14
x47589:	jmp _abs	; 3: 233 9 7

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6065

stdlib_test$48:	; Parameter 6 £temporary6065 8
x47592:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x47595:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x47600:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 254 185
x47605:	mov [bp + 18], bp	; 3: 137 110 18
x47608:	add bp, 16	; 3: 131 197 16
x47611:	jmp _abs	; 3: 233 243 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6066

stdlib_test$54:	; Parameter 6 £temporary6066 10
x47614:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x47617:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 20 186
x47622:	mov [bp + 8], bp	; 3: 137 110 8
x47625:	add bp, 6	; 3: 131 197 6
x47628:	mov di, bp	; 2: 137 239
x47630:	add di, 4	; 3: 131 199 4
x47633:	jmp printf	; 3: 233 240 82

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x47636:	mov word [bp + 12], @13255$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 243 190

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x47641:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x47649:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 47 186
x47654:	mov [bp + 16], bp	; 3: 137 110 16
x47657:	add bp, 14	; 3: 131 197 14
x47660:	jmp labs	; 3: 233 32 97

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6068

stdlib_test$64:	; Parameter 6 £temporary6068 8
x47663:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x47667:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x47675:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 73 186
x47680:	mov [bp + 20], bp	; 3: 137 110 20
x47683:	add bp, 18	; 3: 131 197 18
x47686:	jmp labs	; 3: 233 6 97

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6069

stdlib_test$70:	; Parameter 6 £temporary6069 12
x47689:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x47693:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 96 186
x47698:	mov [bp + 8], bp	; 3: 137 110 8
x47701:	add bp, 6	; 3: 131 197 6
x47704:	mov di, bp	; 2: 137 239
x47706:	add di, 8	; 3: 131 199 8
x47709:	jmp printf	; 3: 233 164 82

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x47712:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x47717:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x47722:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 120 186
x47727:	mov [bp + 8], bp	; 3: 137 110 8
x47730:	add bp, 6	; 3: 131 197 6
x47733:	jmp div	; 3: 233 148 6

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6071 -> £temporary6072

stdlib_test$79:	; Assign i £temporary6071 -> £temporary6072
x47736:	mov si, bp	; 2: 137 238
x47738:	add si, 6	; 3: 131 198 6
x47741:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x47743:	mov ah, [bx]	; 2: 138 39
x47745:	mov [si], ah	; 2: 136 36
x47747:	inc bx	; 1: 67
x47748:	inc si	; 1: 70
x47749:	dec al	; 2: 254 200
x47751:	cmp al, 0	; 2: 60 0
x47753:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x47755:	mov word [bp + 16], @13274$string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 21 191

stdlib_test$82:	; Parameter 10 i$quot 8
x47760:	mov ax, [bp + 6]	; 3: 139 70 6
x47763:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x47766:	mov ax, [bp + 8]	; 3: 139 70 8
x47769:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x47772:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 175 186
x47777:	mov [bp + 12], bp	; 3: 137 110 12
x47780:	add bp, 10	; 3: 131 197 10
x47783:	mov di, bp	; 2: 137 239
x47785:	add di, 4	; 3: 131 199 4
x47788:	jmp printf	; 3: 233 85 82

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x47791:	mov si, bp	; 2: 137 238
x47793:	add si, 6	; 3: 131 198 6
x47796:	mov di, bp	; 2: 137 239
x47798:	add di, 16	; 3: 131 199 16
x47801:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x47803:	mov ah, [si]	; 2: 138 36
x47805:	mov [di], ah	; 2: 136 37
x47807:	inc si	; 1: 70
x47808:	inc di	; 1: 71
x47809:	dec al	; 2: 254 200
x47811:	cmp al, 0	; 2: 60 0
x47813:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x47815:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 213 186
x47820:	mov [bp + 12], bp	; 3: 137 110 12
x47823:	add bp, 10	; 3: 131 197 10
x47826:	jmp print_div	; 3: 233 131 6

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6076 -> £temporary6077

stdlib_test$92:	; Assign j £temporary6076 -> £temporary6077
x47829:	mov si, bp	; 2: 137 238
x47831:	add si, 10	; 3: 131 198 10
x47834:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x47836:	mov ah, [bx]	; 2: 138 39
x47838:	mov [si], ah	; 2: 136 36
x47840:	inc bx	; 1: 67
x47841:	inc si	; 1: 70
x47842:	dec al	; 2: 254 200
x47844:	cmp al, 0	; 2: 60 0
x47846:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x47848:	mov word [bp + 20], @13281$string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 46 191

stdlib_test$95:	; Parameter 14 j$quot 8
x47853:	mov ax, [bp + 10]	; 3: 139 70 10
x47856:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x47859:	mov ax, [bp + 12]	; 3: 139 70 12
x47862:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x47865:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 12 187
x47870:	mov [bp + 16], bp	; 3: 137 110 16
x47873:	add bp, 14	; 3: 131 197 14
x47876:	mov di, bp	; 2: 137 239
x47878:	add di, 4	; 3: 131 199 4
x47881:	jmp printf	; 3: 233 248 81

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x47884:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x47892:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x47900:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 42 187
x47905:	mov [bp + 8], bp	; 3: 137 110 8
x47908:	add bp, 6	; 3: 131 197 6
x47911:	jmp ldiv	; 3: 233 129 6

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6081 -> £temporary6082

stdlib_test$105:	; Assign li £temporary6081 -> £temporary6082
x47914:	mov si, bp	; 2: 137 238
x47916:	add si, 6	; 3: 131 198 6
x47919:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x47921:	mov ah, [bx]	; 2: 138 39
x47923:	mov [si], ah	; 2: 136 36
x47925:	inc bx	; 1: 67
x47926:	inc si	; 1: 70
x47927:	dec al	; 2: 254 200
x47929:	cmp al, 0	; 2: 60 0
x47931:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x47933:	mov word [bp + 20], @13294$string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 72 191

stdlib_test$108:	; Parameter 14 li$quot 8
x47938:	mov eax, [bp + 6]	; 4: 102 139 70 6
x47942:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x47946:	mov eax, [bp + 10]	; 4: 102 139 70 10
x47950:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x47954:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 101 187
x47959:	mov [bp + 16], bp	; 3: 137 110 16
x47962:	add bp, 14	; 3: 131 197 14
x47965:	mov di, bp	; 2: 137 239
x47967:	add di, 8	; 3: 131 199 8
x47970:	jmp printf	; 3: 233 159 81

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x47973:	mov si, bp	; 2: 137 238
x47975:	add si, 6	; 3: 131 198 6
x47978:	mov di, bp	; 2: 137 239
x47980:	add di, 20	; 3: 131 199 20
x47983:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x47985:	mov ah, [si]	; 2: 138 36
x47987:	mov [di], ah	; 2: 136 37
x47989:	inc si	; 1: 70
x47990:	inc di	; 1: 71
x47991:	dec al	; 2: 254 200
x47993:	cmp al, 0	; 2: 60 0
x47995:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x47997:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 139 187
x48002:	mov [bp + 16], bp	; 3: 137 110 16
x48005:	add bp, 14	; 3: 131 197 14
x48008:	jmp print_ldiv	; 3: 233 123 6

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6086 -> £temporary6087

stdlib_test$118:	; Assign lj £temporary6086 -> £temporary6087
x48011:	mov si, bp	; 2: 137 238
x48013:	add si, 14	; 3: 131 198 14
x48016:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x48018:	mov ah, [bx]	; 2: 138 39
x48020:	mov [si], ah	; 2: 136 36
x48022:	inc bx	; 1: 67
x48023:	inc si	; 1: 70
x48024:	dec al	; 2: 254 200
x48026:	cmp al, 0	; 2: 60 0
x48028:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x48030:	mov word [bp + 28], @13301$string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 100 191

stdlib_test$121:	; Parameter 22 lj$quot 8
x48035:	mov eax, [bp + 14]	; 4: 102 139 70 14
x48039:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x48043:	mov eax, [bp + 18]	; 4: 102 139 70 18
x48047:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x48051:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 198 187
x48056:	mov [bp + 24], bp	; 3: 137 110 24
x48059:	add bp, 22	; 3: 131 197 22
x48062:	mov di, bp	; 2: 137 239
x48064:	add di, 8	; 3: 131 199 8
x48067:	jmp printf	; 3: 233 62 81

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x48070:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x48075:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x48080:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x48085:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x48090:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x48095:	mov word [bp + 24], @13326$string_0AA20List2013A20#	; 5: 199 70 24 129 191

stdlib_test$132:	; Call 18 printf 0
x48100:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 244 187
x48105:	mov [bp + 20], bp	; 3: 137 110 20
x48108:	add bp, 18	; 3: 131 197 18
x48111:	mov di, bp	; 2: 137 239
x48113:	jmp printf	; 3: 233 16 81

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x48116:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x48121:	mov ax, [bp + 14]	; 3: 139 70 14
x48124:	cmp [bp + 16], ax	; 3: 57 70 16
x48127:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x48129:	mov word [bp + 24], @13334$string_25i20#	; 5: 199 70 24 141 191

stdlib_test$138:	; SignedMultiply £temporary6099 index 2
x48134:	mov ax, [bp + 16]	; 3: 139 70 16
x48137:	xor dx, dx	; 2: 49 210
x48139:	imul word [@13336$int2$2#]	; 4: 247 46 145 191

stdlib_test$139:	; BinaryAdd £temporary6100 list £temporary6099
x48143:	mov si, bp	; 2: 137 238
x48145:	add si, 6	; 3: 131 198 6
x48148:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6101 -> £temporary6100 £temporary6100 0

stdlib_test$141:	; Parameter 18 £temporary6101 -> £temporary6100 8
x48150:	mov ax, [si]	; 2: 139 4
x48152:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x48155:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 46 188
x48160:	mov [bp + 20], bp	; 3: 137 110 20
x48163:	add bp, 18	; 3: 131 197 18
x48166:	mov di, bp	; 2: 137 239
x48168:	add di, 2	; 3: 131 199 2
x48171:	jmp printf	; 3: 233 214 80

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x48174:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x48177:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x48179:	mov word [bp + 24], @13341$string_0AB20List2023A20#	; 5: 199 70 24 147 191

stdlib_test$148:	; Call 18 printf 0
x48184:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 72 188
x48189:	mov [bp + 20], bp	; 3: 137 110 20
x48192:	add bp, 18	; 3: 131 197 18
x48195:	mov di, bp	; 2: 137 239
x48197:	jmp printf	; 3: 233 188 80

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x48200:	mov [bp + 24], bp	; 3: 137 110 24
x48203:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x48207:	mov ax, [bp + 14]	; 3: 139 70 14
x48210:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x48213:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x48218:	mov word [bp + 30], compare	; 5: 199 70 30 159 191

stdlib_test$155:	; Call 18 qsort 0
x48223:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 109 188
x48228:	mov [bp + 20], bp	; 3: 137 110 20
x48231:	add bp, 18	; 3: 131 197 18
x48234:	jmp qsort	; 3: 233 246 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x48237:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x48242:	mov ax, [bp + 14]	; 3: 139 70 14
x48245:	cmp [bp + 16], ax	; 3: 57 70 16
x48248:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x48250:	mov word [bp + 24], @13355$string_25i20#	; 5: 199 70 24 215 191

stdlib_test$161:	; SignedMultiply £temporary6108 index 2
x48255:	mov ax, [bp + 16]	; 3: 139 70 16
x48258:	xor dx, dx	; 2: 49 210
x48260:	imul word [@13357$int2$2#]	; 4: 247 46 219 191

stdlib_test$162:	; BinaryAdd £temporary6109 list £temporary6108
x48264:	mov si, bp	; 2: 137 238
x48266:	add si, 6	; 3: 131 198 6
x48269:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6110 -> £temporary6109 £temporary6109 0

stdlib_test$164:	; Parameter 18 £temporary6110 -> £temporary6109 8
x48271:	mov ax, [si]	; 2: 139 4
x48273:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x48276:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 167 188
x48281:	mov [bp + 20], bp	; 3: 137 110 20
x48284:	add bp, 18	; 3: 131 197 18
x48287:	mov di, bp	; 2: 137 239
x48289:	add di, 2	; 3: 131 199 2
x48292:	jmp printf	; 3: 233 93 80

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x48295:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x48298:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x48300:	mov word [bp + 24], @13362$string_0AC20List2033A20#	; 5: 199 70 24 221 191

stdlib_test$171:	; Call 18 printf 0
x48305:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 193 188
x48310:	mov [bp + 20], bp	; 3: 137 110 20
x48313:	add bp, 18	; 3: 131 197 18
x48316:	mov di, bp	; 2: 137 239
x48318:	jmp printf	; 3: 233 67 80

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x48321:	mov [bp + 24], bp	; 3: 137 110 24
x48324:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x48328:	mov ax, [bp + 14]	; 3: 139 70 14
x48331:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x48334:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x48339:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 233 191

stdlib_test$178:	; Call 18 qsort 0
x48344:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 230 188
x48349:	mov [bp + 20], bp	; 3: 137 110 20
x48352:	add bp, 18	; 3: 131 197 18
x48355:	jmp qsort	; 3: 233 125 5

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x48358:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x48363:	mov ax, [bp + 14]	; 3: 139 70 14
x48366:	cmp [bp + 16], ax	; 3: 57 70 16
x48369:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x48371:	mov word [bp + 24], @13376$string_25i20#	; 5: 199 70 24 33 192

stdlib_test$184:	; SignedMultiply £temporary6117 index 2
x48376:	mov ax, [bp + 16]	; 3: 139 70 16
x48379:	xor dx, dx	; 2: 49 210
x48381:	imul word [@13378$int2$2#]	; 4: 247 46 37 192

stdlib_test$185:	; BinaryAdd £temporary6118 list £temporary6117
x48385:	mov si, bp	; 2: 137 238
x48387:	add si, 6	; 3: 131 198 6
x48390:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6119 -> £temporary6118 £temporary6118 0

stdlib_test$187:	; Parameter 18 £temporary6119 -> £temporary6118 8
x48392:	mov ax, [si]	; 2: 139 4
x48394:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x48397:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 32 189
x48402:	mov [bp + 20], bp	; 3: 137 110 20
x48405:	add bp, 18	; 3: 131 197 18
x48408:	mov di, bp	; 2: 137 239
x48410:	add di, 2	; 3: 131 199 2
x48413:	jmp printf	; 3: 233 228 79

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x48416:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x48419:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0AB20List2043A20# 6
x48421:	mov word [bp + 24], @13383$string_0AB20List2043A20#	; 5: 199 70 24 39 192

stdlib_test$194:	; Call 18 printf 0
x48426:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 58 189
x48431:	mov [bp + 20], bp	; 3: 137 110 20
x48434:	add bp, 18	; 3: 131 197 18
x48437:	mov di, bp	; 2: 137 239
x48439:	jmp printf	; 3: 233 202 79

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$197:	; Parameter 18 list 6
x48442:	mov [bp + 24], bp	; 3: 137 110 24
x48445:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$198:	; Parameter 18 size 8
x48449:	mov ax, [bp + 14]	; 3: 139 70 14
x48452:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$199:	; Parameter 18 2 10
x48455:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$200:	; Parameter 18 compare 12
x48460:	mov word [bp + 30], compare	; 5: 199 70 30 159 191

stdlib_test$201:	; Call 18 qsort 0
x48465:	mov word [bp + 18], stdlib_test$202	; 5: 199 70 18 95 189
x48470:	mov [bp + 20], bp	; 3: 137 110 20
x48473:	add bp, 18	; 3: 131 197 18
x48476:	jmp qsort	; 3: 233 4 5

stdlib_test$202:	; PostCall 18

stdlib_test$203:	; Assign index 0
x48479:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$204:	; SignedGreaterThanEqual 215 index size
x48484:	mov ax, [bp + 14]	; 3: 139 70 14
x48487:	cmp [bp + 16], ax	; 3: 57 70 16
x48490:	jge stdlib_test$215	; 2: 125 50

stdlib_test$205:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$206:	; Parameter 18 string_25i20# 6
x48492:	mov word [bp + 24], @13397$string_25i20#	; 5: 199 70 24 51 192

stdlib_test$207:	; SignedMultiply £temporary6126 index 2
x48497:	mov ax, [bp + 16]	; 3: 139 70 16
x48500:	xor dx, dx	; 2: 49 210
x48502:	imul word [@13399$int2$2#]	; 4: 247 46 55 192

stdlib_test$208:	; BinaryAdd £temporary6127 list £temporary6126
x48506:	mov si, bp	; 2: 137 238
x48508:	add si, 6	; 3: 131 198 6
x48511:	add si, ax	; 2: 1 198

stdlib_test$209:	; Deref £temporary6128 -> £temporary6127 £temporary6127 0

stdlib_test$210:	; Parameter 18 £temporary6128 -> £temporary6127 8
x48513:	mov ax, [si]	; 2: 139 4
x48515:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$211:	; Call 18 printf 0
x48518:	mov word [bp + 18], stdlib_test$212	; 5: 199 70 18 153 189
x48523:	mov [bp + 20], bp	; 3: 137 110 20
x48526:	add bp, 18	; 3: 131 197 18
x48529:	mov di, bp	; 2: 137 239
x48531:	add di, 2	; 3: 131 199 2
x48534:	jmp printf	; 3: 233 107 79

stdlib_test$212:	; PostCall 18

stdlib_test$213:	; Increment index
x48537:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$214:	; Goto 204
x48540:	jmp stdlib_test$204	; 2: 235 198

stdlib_test$215:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$216:	; Parameter 18 string_0A0ASearch3A0A# 6
x48542:	mov word [bp + 24], @13404$string_0A0ASearch3A0A#	; 5: 199 70 24 57 192

stdlib_test$217:	; Call 18 printf 0
x48547:	mov word [bp + 18], stdlib_test$218	; 5: 199 70 18 179 189
x48552:	mov [bp + 20], bp	; 3: 137 110 20
x48555:	add bp, 18	; 3: 131 197 18
x48558:	mov di, bp	; 2: 137 239
x48560:	jmp printf	; 3: 233 81 79

stdlib_test$218:	; PostCall 18

stdlib_test$219:	; Assign key 0
x48563:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$220:	; SignedGreaterThanEqual 247 key 6
x48568:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x48572:	jge stdlib_test$247	; 2: 125 119

stdlib_test$221:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$222:	; address £temporary6133 key
x48574:	mov si, bp	; 2: 137 238
x48576:	add si, 16	; 3: 131 198 16

stdlib_test$223:	; Parameter 18 £temporary6133 6
x48579:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$224:	; Parameter 18 list 8
x48582:	mov [bp + 26], bp	; 3: 137 110 26
x48585:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$225:	; Parameter 18 size 10
x48589:	mov ax, [bp + 14]	; 3: 139 70 14
x48592:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$226:	; Parameter 18 2 12
x48595:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$227:	; Parameter 18 compare 14
x48600:	mov word [bp + 32], compare	; 5: 199 70 32 159 191

stdlib_test$228:	; Call 18 bsearch 0
x48605:	mov word [bp + 18], stdlib_test$229	; 5: 199 70 18 235 189
x48610:	mov [bp + 20], bp	; 3: 137 110 20
x48613:	add bp, 18	; 3: 131 197 18
x48616:	jmp bsearch	; 3: 233 101 5

stdlib_test$229:	; PostCall 18

stdlib_test$230:	; GetReturnValue £temporary6135

stdlib_test$231:	; IntegralToIntegral £temporary6136 £temporary6135

stdlib_test$232:	; Assign p £temporary6136
x48619:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$233:	; Equal 237 p 0
x48622:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x48626:	je stdlib_test$237	; 2: 116 18

stdlib_test$234:	; BinarySubtract £temporary6138 p list
x48628:	mov ax, [bp + 18]	; 3: 139 70 18
x48631:	mov bx, bp	; 2: 137 235
x48633:	add bx, 6	; 3: 131 195 6
x48636:	sub ax, bx	; 2: 41 216

stdlib_test$235:	; SignedDivide £temporary6143 £temporary6138 2
x48638:	xor dx, dx	; 2: 49 210
x48640:	idiv word [@13428$int2$2#]	; 4: 247 62 68 192

stdlib_test$236:	; Goto 238
x48644:	jmp stdlib_test$238	; 2: 235 3

stdlib_test$237:	; Assign £temporary6143 -1
x48646:	mov ax, -1	; 3: 184 255 255

stdlib_test$238:	; Assign index £temporary6143
x48649:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$239:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$240:	; Parameter 22 string_20202825i2C2025i290A# 6
x48652:	mov word [bp + 28], @13439$string_20202825i2C2025i290A#	; 5: 199 70 28 70 192

stdlib_test$241:	; Parameter 22 key 8
x48657:	mov ax, [bp + 16]	; 3: 139 70 16
x48660:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$242:	; Parameter 22 index 10
x48663:	mov ax, [bp + 20]	; 3: 139 70 20
x48666:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$243:	; Call 22 printf 0
x48669:	mov word [bp + 22], stdlib_test$244	; 5: 199 70 22 48 190
x48674:	mov [bp + 24], bp	; 3: 137 110 24
x48677:	add bp, 22	; 3: 131 197 22
x48680:	mov di, bp	; 2: 137 239
x48682:	add di, 4	; 3: 131 199 4
x48685:	jmp printf	; 3: 233 212 78

stdlib_test$244:	; PostCall 22

stdlib_test$245:	; Increment key
x48688:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$246:	; Goto 220
x48691:	jmp stdlib_test$220	; 2: 235 131

stdlib_test$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$248:	; Parameter 16 string_0A# 6
x48693:	mov word [bp + 22], @13441$string_0A#	; 5: 199 70 22 82 192

stdlib_test$249:	; Call 16 printf 0
x48698:	mov word [bp + 16], stdlib_test$250	; 5: 199 70 16 74 190
x48703:	mov [bp + 18], bp	; 3: 137 110 18
x48706:	add bp, 16	; 3: 131 197 16
x48709:	mov di, bp	; 2: 137 239
x48711:	jmp printf	; 3: 233 186 78

stdlib_test$250:	; PostCall 16

stdlib_test$251:	; Return 0
x48714:	mov ax, [bp]	; 3: 139 70 0
x48717:	mov di, [bp + 4]	; 3: 139 126 4
x48720:	mov bp, [bp + 2]	; 3: 139 110 2
x48723:	jmp ax	; 2: 255 224

stdlib_test$252:	; FunctionEnd stdlib_test

@13228$string_atof28221232E4562229203D2025f0A#:
x48725:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

@13229$string_1232E456#:
x48747:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

@13232$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x48755:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

@13233$string_1232E456789abc#:
x48795:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

@13237$string_0Agetenv2822path2229203D2025s0A#:
x48809:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

@13238$string_path#:
x48831:	db "path", 0	; 5: 112 97 116 104 0

@13241$string_system2822dir22290A#:
x48836:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

@13243$string_dir#:
x48851:	db "dir", 0	; 4: 100 105 114 0

@13245$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x48855:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

@13255$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x48883:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

@13274$string_div_t28102C20329203D202825i2C2025i290A#:
x48917:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

@13281$string_div_t28102C20329203D202825i2C2025i290A0A#:
x48942:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

@13294$string_ldiv_t28102C20329203D202825li2C2025li290A#:
x48968:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

@13301$string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x48996:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

@13326$string_0AA20List2013A20#:
x49025:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

@13334$string_25i20#:
x49037:	db "%i ", 0	; 4: 37 105 32 0

@13336$int2$2#:
x49041:	dw 2	; 2: 2 0

@13341$string_0AB20List2023A20#:
x49043:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary5983 valuePtr1
x49055:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary5984 -> £temporary5983 £temporary5983 0

compare$2:	; Assign intValue1 £temporary5984 -> £temporary5983
x49058:	mov ax, [si]	; 2: 139 4
x49060:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary5985 valuePtr2
x49063:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary5986 -> £temporary5985 £temporary5985 0

compare$5:	; Assign intValue2 £temporary5986 -> £temporary5985
x49066:	mov ax, [si]	; 2: 139 4
x49068:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49071:	mov ax, [bp + 12]	; 3: 139 70 12
x49074:	cmp [bp + 10], ax	; 3: 57 70 10
x49077:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary5996 -1
x49079:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x49082:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x49084:	mov ax, [bp + 12]	; 3: 139 70 12
x49087:	cmp [bp + 10], ax	; 3: 57 70 10
x49090:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary5992 0
x49092:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x49095:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary5992 1
x49097:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary5996 £temporary5992

compare$14:	; SetReturnValue £temporary5996

compare$15:	; Return £temporary5996
x49100:	mov ax, [bp]	; 3: 139 70 0
x49103:	mov di, [bp + 4]	; 3: 139 126 4
x49106:	mov bp, [bp + 2]	; 3: 139 110 2
x49109:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

@13355$string_25i20#:
x49111:	db "%i ", 0	; 4: 37 105 32 0

@13357$int2$2#:
x49115:	dw 2	; 2: 2 0

@13362$string_0AC20List2033A20#:
x49117:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary5997 valuePtr1
x49129:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary5998 -> £temporary5997 £temporary5997 0

reverse_compare$2:	; Assign intValue1 £temporary5998 -> £temporary5997
x49132:	mov ax, [si]	; 2: 139 4
x49134:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary5999 valuePtr2
x49137:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary6000 -> £temporary5999 £temporary5999 0

reverse_compare$5:	; Assign intValue2 £temporary6000 -> £temporary5999
x49140:	mov ax, [si]	; 2: 139 4
x49142:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49145:	mov ax, [bp + 12]	; 3: 139 70 12
x49148:	cmp [bp + 10], ax	; 3: 57 70 10
x49151:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary6010 1
x49153:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x49156:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x49158:	mov ax, [bp + 12]	; 3: 139 70 12
x49161:	cmp [bp + 10], ax	; 3: 57 70 10
x49164:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary6006 0
x49166:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x49169:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary6006 -1
x49171:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary6010 £temporary6006

reverse_compare$14:	; SetReturnValue £temporary6010

reverse_compare$15:	; Return £temporary6010
x49174:	mov ax, [bp]	; 3: 139 70 0
x49177:	mov di, [bp + 4]	; 3: 139 126 4
x49180:	mov bp, [bp + 2]	; 3: 139 110 2
x49183:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

@13376$string_25i20#:
x49185:	db "%i ", 0	; 4: 37 105 32 0

@13378$int2$2#:
x49189:	dw 2	; 2: 2 0

@13383$string_0AB20List2043A20#:
x49191:	db 10, "B List 4: ", 0	; 12: 10 66 32 76 105 115 116 32 52 58 32 0

@13397$string_25i20#:
x49203:	db "%i ", 0	; 4: 37 105 32 0

@13399$int2$2#:
x49207:	dw 2	; 2: 2 0

@13404$string_0A0ASearch3A0A#:
x49209:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

@13428$int2$2#:
x49220:	dw 2	; 2: 2 0

@13439$string_20202825i2C2025i290A#:
x49222:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

@13441$string_0A#:
x49234:	db 10, 0	; 2: 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x49236:	mov ax, [bp + 6]	; 3: 139 70 6
x49239:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x49242:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x49247:	mov word [bp + 8], atof$4	; 5: 199 70 8 109 192
x49252:	mov [bp + 10], bp	; 3: 137 110 10
x49255:	add bp, 8	; 3: 131 197 8
x49258:	nop	; 1: 144
x49259:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary2256

atof$6:	; SetReturnValue £temporary2256

atof$7:	; Return £temporary2256
x49261:	mov ax, [bp]	; 3: 139 70 0
x49264:	mov di, [bp + 4]	; 3: 139 126 4
x49267:	mov bp, [bp + 2]	; 3: 139 110 2
x49270:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x49272:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x49277:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x49279:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x49282:	mov ax, [bp + 6]	; 3: 139 70 6
x49285:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x49288:	mov word [bp + 28], @5142$string_25lf25n#	; 5: 199 70 28 207 192

strtod$6:	; address £temporary2259 value
x49293:	mov si, bp	; 2: 137 238
x49295:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary2259 10
x49298:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary2260 chars
x49301:	mov si, bp	; 2: 137 238
x49303:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary2260 12
x49306:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x49309:	mov word [bp + 20], strtod$11	; 5: 199 70 20 176 192
x49314:	mov [bp + 22], bp	; 3: 137 110 22
x49317:	add bp, 20	; 3: 131 197 20
x49320:	mov di, bp	; 2: 137 239
x49322:	add di, 4	; 3: 131 199 4
x49325:	jmp sscanf	; 3: 233 56 234

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x49328:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49332:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary2263 -> endp endp 0
x49334:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary2263 -> endp s chars
x49337:	mov ax, [bp + 6]	; 3: 139 70 6
x49340:	add ax, [bp + 10]	; 3: 3 70 10
x49343:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x49345:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x49348:	mov ax, [bp]	; 3: 139 70 0
x49351:	mov di, [bp + 4]	; 3: 139 126 4
x49354:	mov bp, [bp + 2]	; 3: 139 110 2
x49357:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

@5142$string_25lf25n#:
x49359:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

getenv:	; SetReturnValue 0
x49365:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x49368:	mov ax, [bp]	; 3: 139 70 0
x49371:	mov di, [bp + 4]	; 3: 139 126 4
x49374:	mov bp, [bp + 2]	; 3: 139 110 2
x49377:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x49379:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x49382:	mov ax, [bp]	; 3: 139 70 0
x49385:	mov di, [bp + 4]	; 3: 139 126 4
x49388:	mov bp, [bp + 2]	; 3: 139 110 2
x49391:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x49393:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x49397:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3209 value
x49399:	mov bx, [bp + 6]	; 3: 139 94 6
x49402:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3213 £temporary3209

_abs$3:	; Goto 5
x49404:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3213 value
x49406:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3213

_abs$6:	; Return £temporary3213
x49409:	mov ax, [bp]	; 3: 139 70 0
x49412:	mov di, [bp + 4]	; 3: 139 126 4
x49415:	mov bp, [bp + 2]	; 3: 139 110 2
x49418:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x49420:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x49425:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x49430:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49434:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x49436:	mov word [errno], 6	; 6: 199 6 230 10 6 0

div$4:	; SetReturnValue result
x49442:	mov bx, bp	; 2: 137 235
x49444:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x49447:	mov ax, [bp]	; 3: 139 70 0
x49450:	mov di, [bp + 4]	; 3: 139 126 4
x49453:	mov bp, [bp + 2]	; 3: 139 110 2
x49456:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x49458:	mov ax, [bp + 6]	; 3: 139 70 6
x49461:	xor dx, dx	; 2: 49 210
x49463:	idiv word [bp + 8]	; 3: 247 126 8
x49466:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x49469:	mov ax, [bp + 6]	; 3: 139 70 6
x49472:	xor dx, dx	; 2: 49 210
x49474:	idiv word [bp + 8]	; 3: 247 126 8
x49477:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x49480:	mov bx, bp	; 2: 137 235
x49482:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x49485:	mov ax, [bp]	; 3: 139 70 0
x49488:	mov di, [bp + 4]	; 3: 139 126 4
x49491:	mov bp, [bp + 2]	; 3: 139 110 2
x49494:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x49496:	mov word [bp + 16], @13157$string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 149 193

print_div$2:	; Parameter 10 d$quot 8
x49501:	mov ax, [bp + 6]	; 3: 139 70 6
x49504:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x49507:	mov ax, [bp + 8]	; 3: 139 70 8
x49510:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x49513:	mov word [bp + 10], print_div$5	; 5: 199 70 10 124 193
x49518:	mov [bp + 12], bp	; 3: 137 110 12
x49521:	add bp, 10	; 3: 131 197 10
x49524:	mov di, bp	; 2: 137 239
x49526:	add di, 4	; 3: 131 199 4
x49529:	jmp printf	; 3: 233 136 75

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x49532:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Assign £temporary6017 d$rem
x49535:	mov ax, [bp + 8]	; 3: 139 70 8

print_div$8:	; Increment d$rem
x49538:	inc word [bp + 8]	; 3: 255 70 8

print_div$9:	; SetReturnValue d
x49541:	mov bx, bp	; 2: 137 235
x49543:	add bx, 6	; 3: 131 195 6

print_div$10:	; Return d
x49546:	mov ax, [bp]	; 3: 139 70 0
x49549:	mov di, [bp + 4]	; 3: 139 126 4
x49552:	mov bp, [bp + 2]	; 3: 139 110 2
x49555:	jmp ax	; 2: 255 224

print_div$11:	; FunctionEnd print_div

@13157$string_div_t20quot2025i20rem2025i0A#:
x49557:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x49579:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x49587:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x49595:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x49600:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x49602:	mov word [errno], 6	; 6: 199 6 230 10 6 0

ldiv$4:	; SetReturnValue result
x49608:	mov bx, bp	; 2: 137 235
x49610:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x49613:	mov ax, [bp]	; 3: 139 70 0
x49616:	mov di, [bp + 4]	; 3: 139 126 4
x49619:	mov bp, [bp + 2]	; 3: 139 110 2
x49622:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x49624:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49628:	xor edx, edx	; 3: 102 49 210
x49631:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49635:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x49639:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49643:	xor edx, edx	; 3: 102 49 210
x49646:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49650:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x49654:	mov bx, bp	; 2: 137 235
x49656:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x49659:	mov ax, [bp]	; 3: 139 70 0
x49662:	mov di, [bp + 4]	; 3: 139 126 4
x49665:	mov bp, [bp + 2]	; 3: 139 110 2
x49668:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x49670:	mov word [bp + 20], @13175$string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 74 194

print_ldiv$2:	; Parameter 14 ld$quot 8
x49675:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49679:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x49683:	mov eax, [bp + 10]	; 4: 102 139 70 10
x49687:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x49691:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 46 194
x49696:	mov [bp + 16], bp	; 3: 137 110 16
x49699:	add bp, 14	; 3: 131 197 14
x49702:	mov di, bp	; 2: 137 239
x49704:	add di, 8	; 3: 131 199 8
x49707:	jmp printf	; 3: 233 214 74

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x49710:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Assign £temporary6029 ld$rem
x49714:	mov eax, [bp + 10]	; 4: 102 139 70 10

print_ldiv$8:	; Decrement ld$rem
x49718:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$9:	; SetReturnValue ld
x49722:	mov bx, bp	; 2: 137 235
x49724:	add bx, 6	; 3: 131 195 6

print_ldiv$10:	; Return ld
x49727:	mov ax, [bp]	; 3: 139 70 0
x49730:	mov di, [bp + 4]	; 3: 139 126 4
x49733:	mov bp, [bp + 2]	; 3: 139 110 2
x49736:	jmp ax	; 2: 255 224

print_ldiv$11:	; FunctionEnd print_ldiv

@13175$string_ldiv_t20quot2025li20rem2025li0A#:
x49738:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3187 valueList
x49763:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3187
x49766:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x49769:	mov ax, [bp + 8]	; 3: 139 70 8
x49772:	dec ax	; 1: 72
x49773:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x49776:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x49780:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x49784:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x49789:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x49794:	mov ax, [bp + 16]	; 3: 139 70 16
x49797:	cmp [bp + 18], ax	; 3: 57 70 18
x49800:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3193 index valueSize
x49802:	mov ax, [bp + 18]	; 3: 139 70 18
x49805:	xor dx, dx	; 2: 49 210
x49807:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3193
x49810:	mov bx, [bp + 14]	; 3: 139 94 14
x49813:	add bx, ax	; 2: 1 195
x49815:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3195 index 1
x49818:	mov ax, [bp + 18]	; 3: 139 70 18
x49821:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3196 £temporary3195 valueSize
x49822:	xor dx, dx	; 2: 49 210
x49824:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3196
x49827:	mov bx, [bp + 14]	; 3: 139 94 14
x49830:	add bx, ax	; 2: 1 195
x49832:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x49835:	mov ax, [bp + 22]	; 3: 139 70 22
x49838:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x49841:	mov ax, [bp + 24]	; 3: 139 70 24
x49844:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x49847:	mov word [bp + 26], qsort$16	; 5: 199 70 26 199 194
x49852:	mov [bp + 28], bp	; 3: 137 110 28
x49855:	mov ax, [bp + 12]	; 3: 139 70 12
x49858:	add bp, 26	; 3: 131 197 26
x49861:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3198

qsort$18:	; SignedLessThanEqual 26 £temporary3198 0
x49863:	cmp bx, 0	; 3: 131 251 0
x49866:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x49868:	mov ax, [bp + 22]	; 3: 139 70 22
x49871:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x49874:	mov ax, [bp + 24]	; 3: 139 70 24
x49877:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x49880:	mov ax, [bp + 10]	; 3: 139 70 10
x49883:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x49886:	mov word [bp + 26], qsort$24	; 5: 199 70 26 236 194
x49891:	mov [bp + 28], bp	; 3: 137 110 28
x49894:	add bp, 26	; 3: 131 197 26
x49897:	nop	; 1: 144
x49898:	jmp @7290$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x49900:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x49905:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x49908:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x49910:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x49914:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x49916:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x49919:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x49922:	mov ax, [bp]	; 3: 139 70 0
x49925:	mov di, [bp + 4]	; 3: 139 126 4
x49928:	mov bp, [bp + 2]	; 3: 139 110 2
x49931:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@7290$memswap:	; Assign index 0
x49933:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@7290$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x49938:	mov ax, [bp + 10]	; 3: 139 70 10
x49941:	cmp [bp + 12], ax	; 3: 57 70 12
x49944:	jge @7290$memswap$15	; 2: 125 43

@7290$memswap$2:	; BinaryAdd £temporary3180 value1 index
x49946:	mov si, [bp + 6]	; 3: 139 118 6
x49949:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$3:	; Deref £temporary3179 -> £temporary3180 £temporary3180 0

@7290$memswap$4:	; Assign tempValue £temporary3179 -> £temporary3180
x49952:	mov al, [si]	; 2: 138 4
x49954:	mov [bp + 14], al	; 3: 136 70 14

@7290$memswap$5:	; BinaryAdd £temporary3182 value1 index
x49957:	mov si, [bp + 6]	; 3: 139 118 6
x49960:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$6:	; Deref £temporary3181 -> £temporary3182 £temporary3182 0

@7290$memswap$7:	; BinaryAdd £temporary3184 value2 index
x49963:	mov di, [bp + 8]	; 3: 139 126 8
x49966:	add di, [bp + 12]	; 3: 3 126 12

@7290$memswap$8:	; Deref £temporary3183 -> £temporary3184 £temporary3184 0

@7290$memswap$9:	; Assign £temporary3181 -> £temporary3182 £temporary3183 -> £temporary3184
x49969:	mov al, [di]	; 2: 138 5
x49971:	mov [si], al	; 2: 136 4

@7290$memswap$10:	; BinaryAdd £temporary3186 value2 index
x49973:	mov si, [bp + 8]	; 3: 139 118 8
x49976:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$11:	; Deref £temporary3185 -> £temporary3186 £temporary3186 0

@7290$memswap$12:	; Assign £temporary3185 -> £temporary3186 tempValue
x49979:	mov al, [bp + 14]	; 3: 138 70 14
x49982:	mov [si], al	; 2: 136 4

@7290$memswap$13:	; Increment index
x49984:	inc word [bp + 12]	; 3: 255 70 12

@7290$memswap$14:	; Goto 1
x49987:	jmp @7290$memswap$1	; 2: 235 205

@7290$memswap$15:	; Return 0
x49989:	mov ax, [bp]	; 3: 139 70 0
x49992:	mov di, [bp + 4]	; 3: 139 126 4
x49995:	mov bp, [bp + 2]	; 3: 139 110 2
x49998:	jmp ax	; 2: 255 224

@7290$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x50000:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x50005:	mov ax, [bp + 10]	; 3: 139 70 10
x50008:	dec ax	; 1: 72
x50009:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x50012:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x50016:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x50018:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x50021:	mov ax, [bp]	; 3: 139 70 0
x50024:	mov di, [bp + 4]	; 3: 139 126 4
x50027:	mov bp, [bp + 2]	; 3: 139 110 2
x50030:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3123 valueList
x50032:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3124 firstIndex valueSize
x50035:	mov ax, [bp + 16]	; 3: 139 70 16
x50038:	xor dx, dx	; 2: 49 210
x50040:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3123 £temporary3124
x50043:	add bx, ax	; 2: 1 195
x50045:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x50048:	mov ax, [bp + 6]	; 3: 139 70 6
x50051:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x50054:	mov ax, [bp + 20]	; 3: 139 70 20
x50057:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x50060:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 156 195
x50065:	mov [bp + 24], bp	; 3: 137 110 24
x50068:	mov ax, [bp + 14]	; 3: 139 70 14
x50071:	add bp, 22	; 3: 131 197 22
x50074:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3126

bsearch$14:	; Assign firstCompare £temporary3126
x50076:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x50079:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50083:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x50085:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x50088:	mov ax, [bp]	; 3: 139 70 0
x50091:	mov di, [bp + 4]	; 3: 139 126 4
x50094:	mov bp, [bp + 2]	; 3: 139 110 2
x50097:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x50099:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50103:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x50105:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x50108:	mov ax, [bp]	; 3: 139 70 0
x50111:	mov di, [bp + 4]	; 3: 139 126 4
x50114:	mov bp, [bp + 2]	; 3: 139 110 2
x50117:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3129 valueList
x50119:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3130 lastIndex valueSize
x50122:	mov ax, [bp + 18]	; 3: 139 70 18
x50125:	xor dx, dx	; 2: 49 210
x50127:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3129 £temporary3130
x50130:	add bx, ax	; 2: 1 195
x50132:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x50135:	mov ax, [bp + 6]	; 3: 139 70 6
x50138:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x50141:	mov ax, [bp + 20]	; 3: 139 70 20
x50144:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x50147:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 243 195
x50152:	mov [bp + 24], bp	; 3: 137 110 24
x50155:	mov ax, [bp + 14]	; 3: 139 70 14
x50158:	add bp, 22	; 3: 131 197 22
x50161:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3132

bsearch$30:	; Assign lastCompare £temporary3132
x50163:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x50166:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50170:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x50172:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x50175:	mov ax, [bp]	; 3: 139 70 0
x50178:	mov di, [bp + 4]	; 3: 139 126 4
x50181:	mov bp, [bp + 2]	; 3: 139 110 2
x50184:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x50186:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50190:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x50192:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x50195:	mov ax, [bp]	; 3: 139 70 0
x50198:	mov di, [bp + 4]	; 3: 139 126 4
x50201:	mov bp, [bp + 2]	; 3: 139 110 2
x50204:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3135 firstIndex lastIndex
x50206:	mov ax, [bp + 16]	; 3: 139 70 16
x50209:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3135 2
x50212:	xor dx, dx	; 2: 49 210
x50214:	idiv word [@7190$int2$2#]	; 4: 247 62 136 196
x50218:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3137 valueList
x50221:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3138 middleIndex valueSize
x50224:	mov ax, [bp + 20]	; 3: 139 70 20
x50227:	xor dx, dx	; 2: 49 210
x50229:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3137 £temporary3138
x50232:	add bx, ax	; 2: 1 195
x50234:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x50237:	mov ax, [bp + 6]	; 3: 139 70 6
x50240:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x50243:	mov ax, [bp + 22]	; 3: 139 70 22
x50246:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x50249:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 89 196
x50254:	mov [bp + 26], bp	; 3: 137 110 26
x50257:	mov ax, [bp + 14]	; 3: 139 70 14
x50260:	add bp, 24	; 3: 131 197 24
x50263:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3140

bsearch$48:	; Assign middleCompare £temporary3140
x50265:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x50268:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50272:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x50274:	mov ax, [bp + 20]	; 3: 139 70 20
x50277:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x50280:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x50283:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50287:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x50289:	mov ax, [bp + 20]	; 3: 139 70 20
x50292:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x50295:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x50298:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x50301:	mov ax, [bp]	; 3: 139 70 0
x50304:	mov di, [bp + 4]	; 3: 139 126 4
x50307:	mov bp, [bp + 2]	; 3: 139 110 2
x50310:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

@7190$int2$2#:
x50312:	dw 2	; 2: 2 0

strtol_test:	; Assign base 0
x50314:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x50319:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x50323:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x50327:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x50331:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x50335:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x50339:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x50343:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x50347:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x50351:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x50355:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x50359:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x50363:	mov [bp + 27], bp	; 3: 137 110 27
x50366:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2282 pointer
x50370:	mov si, bp	; 2: 137 238
x50372:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2282 8
x50375:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x50378:	mov ax, [bp + 6]	; 3: 139 70 6
x50381:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x50384:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 222 196
x50389:	mov [bp + 23], bp	; 3: 137 110 23
x50392:	add bp, 21	; 3: 131 197 21
x50395:	jmp strtol	; 3: 233 49 11

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2283

strtol_test$20:	; Assign value £temporary2283
x50398:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50402:	mov word [bp + 31], @5201$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 131 206

strtol_test$23:	; Parameter 25 text 8
x50407:	mov [bp + 33], bp	; 3: 137 110 33
x50410:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x50414:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50418:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x50422:	mov ax, [bp + 19]	; 3: 139 70 19
x50425:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x50428:	mov ax, [bp + 6]	; 3: 139 70 6
x50431:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x50434:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 21 197
x50439:	mov [bp + 27], bp	; 3: 137 110 27
x50442:	add bp, 25	; 3: 131 197 25
x50445:	mov di, bp	; 2: 137 239
x50447:	add di, 10	; 3: 131 199 10
x50450:	jmp printf	; 3: 233 239 71

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x50453:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x50458:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x50462:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x50466:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x50470:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x50474:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x50478:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x50482:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x50486:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x50490:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x50494:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x50498:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x50502:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x50506:	mov [bp + 28], bp	; 3: 137 110 28
x50509:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2297 pointer
x50513:	mov si, bp	; 2: 137 238
x50515:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2297 8
x50518:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x50521:	mov ax, [bp + 6]	; 3: 139 70 6
x50524:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x50527:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 109 197
x50532:	mov [bp + 24], bp	; 3: 137 110 24
x50535:	add bp, 22	; 3: 131 197 22
x50538:	jmp strtol	; 3: 233 162 10

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2298

strtol_test$50:	; Assign value £temporary2298
x50541:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50545:	mov word [bp + 32], @5248$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 153 206

strtol_test$53:	; Parameter 26 text 8
x50550:	mov [bp + 34], bp	; 3: 137 110 34
x50553:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x50557:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50561:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x50565:	mov ax, [bp + 20]	; 3: 139 70 20
x50568:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x50571:	mov ax, [bp + 6]	; 3: 139 70 6
x50574:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x50577:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 164 197
x50582:	mov [bp + 28], bp	; 3: 137 110 28
x50585:	add bp, 26	; 3: 131 197 26
x50588:	mov di, bp	; 2: 137 239
x50590:	add di, 10	; 3: 131 199 10
x50593:	jmp printf	; 3: 233 96 71

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x50596:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x50601:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x50605:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x50609:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x50613:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x50617:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x50621:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x50625:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x50629:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x50633:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x50637:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x50641:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x50645:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x50649:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x50653:	mov [bp + 29], bp	; 3: 137 110 29
x50656:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2313 pointer
x50660:	mov si, bp	; 2: 137 238
x50662:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2313 8
x50665:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x50668:	mov ax, [bp + 6]	; 3: 139 70 6
x50671:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x50674:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 0 198
x50679:	mov [bp + 25], bp	; 3: 137 110 25
x50682:	add bp, 23	; 3: 131 197 23
x50685:	jmp strtol	; 3: 233 15 10

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2314

strtol_test$81:	; Assign value £temporary2314
x50688:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50692:	mov word [bp + 33], @5298$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 175 206

strtol_test$84:	; Parameter 27 text 8
x50697:	mov [bp + 35], bp	; 3: 137 110 35
x50700:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x50704:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50708:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x50712:	mov ax, [bp + 21]	; 3: 139 70 21
x50715:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x50718:	mov ax, [bp + 6]	; 3: 139 70 6
x50721:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x50724:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 55 198
x50729:	mov [bp + 29], bp	; 3: 137 110 29
x50732:	add bp, 27	; 3: 131 197 27
x50735:	mov di, bp	; 2: 137 239
x50737:	add di, 10	; 3: 131 199 10
x50740:	jmp printf	; 3: 233 205 70

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x50743:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x50748:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x50752:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x50756:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x50760:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x50764:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x50768:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x50772:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x50776:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x50780:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x50784:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x50788:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x50792:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x50796:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x50800:	mov [bp + 29], bp	; 3: 137 110 29
x50803:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2329 pointer
x50807:	mov si, bp	; 2: 137 238
x50809:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2329 8
x50812:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x50815:	mov ax, [bp + 6]	; 3: 139 70 6
x50818:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x50821:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 147 198
x50826:	mov [bp + 25], bp	; 3: 137 110 25
x50829:	add bp, 23	; 3: 131 197 23
x50832:	jmp strtol	; 3: 233 124 9

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2330

strtol_test$112:	; Assign value £temporary2330
x50835:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50839:	mov word [bp + 33], @5348$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 197 206

strtol_test$115:	; Parameter 27 text 8
x50844:	mov [bp + 35], bp	; 3: 137 110 35
x50847:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x50851:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50855:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x50859:	mov ax, [bp + 21]	; 3: 139 70 21
x50862:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x50865:	mov ax, [bp + 6]	; 3: 139 70 6
x50868:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x50871:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 202 198
x50876:	mov [bp + 29], bp	; 3: 137 110 29
x50879:	add bp, 27	; 3: 131 197 27
x50882:	mov di, bp	; 2: 137 239
x50884:	add di, 10	; 3: 131 199 10
x50887:	jmp printf	; 3: 233 58 70

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x50890:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x50895:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x50899:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x50903:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x50907:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x50911:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x50915:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x50919:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x50923:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x50927:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x50931:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x50935:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x50939:	mov [bp + 27], bp	; 3: 137 110 27
x50942:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2343 pointer
x50946:	mov si, bp	; 2: 137 238
x50948:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2343 8
x50951:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x50954:	mov ax, [bp + 6]	; 3: 139 70 6
x50957:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x50960:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 30 199
x50965:	mov [bp + 23], bp	; 3: 137 110 23
x50968:	add bp, 21	; 3: 131 197 21
x50971:	jmp strtol	; 3: 233 241 8

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2344

strtol_test$141:	; Assign value £temporary2344
x50974:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50978:	mov word [bp + 31], @5392$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 219 206

strtol_test$144:	; Parameter 25 text 8
x50983:	mov [bp + 33], bp	; 3: 137 110 33
x50986:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x50990:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50994:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x50998:	mov ax, [bp + 19]	; 3: 139 70 19
x51001:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x51004:	mov ax, [bp + 6]	; 3: 139 70 6
x51007:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x51010:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 85 199
x51015:	mov [bp + 27], bp	; 3: 137 110 27
x51018:	add bp, 25	; 3: 131 197 25
x51021:	mov di, bp	; 2: 137 239
x51023:	add di, 10	; 3: 131 199 10
x51026:	jmp printf	; 3: 233 175 69

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x51029:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x51034:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x51038:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x51042:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x51046:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x51050:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x51054:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x51058:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x51062:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x51066:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x51070:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x51074:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x51078:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x51082:	mov [bp + 28], bp	; 3: 137 110 28
x51085:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2358 pointer
x51089:	mov si, bp	; 2: 137 238
x51091:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2358 8
x51094:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x51097:	mov ax, [bp + 6]	; 3: 139 70 6
x51100:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x51103:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 173 199
x51108:	mov [bp + 24], bp	; 3: 137 110 24
x51111:	add bp, 22	; 3: 131 197 22
x51114:	jmp strtol	; 3: 233 98 8

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2359

strtol_test$171:	; Assign value £temporary2359
x51117:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51121:	mov word [bp + 32], @5439$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 241 206

strtol_test$174:	; Parameter 26 text 8
x51126:	mov [bp + 34], bp	; 3: 137 110 34
x51129:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x51133:	mov eax, [bp + 22]	; 4: 102 139 70 22
x51137:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x51141:	mov ax, [bp + 20]	; 3: 139 70 20
x51144:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x51147:	mov ax, [bp + 6]	; 3: 139 70 6
x51150:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x51153:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 228 199
x51158:	mov [bp + 28], bp	; 3: 137 110 28
x51161:	add bp, 26	; 3: 131 197 26
x51164:	mov di, bp	; 2: 137 239
x51166:	add di, 10	; 3: 131 199 10
x51169:	jmp printf	; 3: 233 32 69

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x51172:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x51177:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x51181:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x51185:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x51189:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x51193:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x51197:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x51201:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x51205:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x51209:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x51213:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x51217:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x51221:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x51225:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x51229:	mov [bp + 29], bp	; 3: 137 110 29
x51232:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2374 pointer
x51236:	mov si, bp	; 2: 137 238
x51238:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2374 8
x51241:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x51244:	mov ax, [bp + 6]	; 3: 139 70 6
x51247:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x51250:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 64 200
x51255:	mov [bp + 25], bp	; 3: 137 110 25
x51258:	add bp, 23	; 3: 131 197 23
x51261:	jmp strtol	; 3: 233 207 7

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2375

strtol_test$202:	; Assign value £temporary2375
x51264:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51268:	mov word [bp + 33], @5489$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 7 207

strtol_test$205:	; Parameter 27 text 8
x51273:	mov [bp + 35], bp	; 3: 137 110 35
x51276:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x51280:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51284:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x51288:	mov ax, [bp + 21]	; 3: 139 70 21
x51291:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x51294:	mov ax, [bp + 6]	; 3: 139 70 6
x51297:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x51300:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 119 200
x51305:	mov [bp + 29], bp	; 3: 137 110 29
x51308:	add bp, 27	; 3: 131 197 27
x51311:	mov di, bp	; 2: 137 239
x51313:	add di, 10	; 3: 131 199 10
x51316:	jmp printf	; 3: 233 141 68

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x51319:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x51324:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x51328:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x51332:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x51336:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x51340:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x51344:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x51348:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x51352:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x51356:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x51360:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x51364:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x51368:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x51372:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x51376:	mov [bp + 29], bp	; 3: 137 110 29
x51379:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2390 pointer
x51383:	mov si, bp	; 2: 137 238
x51385:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2390 8
x51388:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x51391:	mov ax, [bp + 6]	; 3: 139 70 6
x51394:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x51397:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 211 200
x51402:	mov [bp + 25], bp	; 3: 137 110 25
x51405:	add bp, 23	; 3: 131 197 23
x51408:	jmp strtol	; 3: 233 60 7

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2391

strtol_test$233:	; Assign value £temporary2391
x51411:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51415:	mov word [bp + 33], @5539$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 29 207

strtol_test$236:	; Parameter 27 text 8
x51420:	mov [bp + 35], bp	; 3: 137 110 35
x51423:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x51427:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51431:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x51435:	mov ax, [bp + 21]	; 3: 139 70 21
x51438:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x51441:	mov ax, [bp + 6]	; 3: 139 70 6
x51444:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x51447:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 10 201
x51452:	mov [bp + 29], bp	; 3: 137 110 29
x51455:	add bp, 27	; 3: 131 197 27
x51458:	mov di, bp	; 2: 137 239
x51460:	add di, 10	; 3: 131 199 10
x51463:	jmp printf	; 3: 233 250 67

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x51466:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x51471:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x51475:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x51479:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x51483:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x51487:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x51491:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x51495:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x51499:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x51503:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x51507:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x51511:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x51515:	mov [bp + 27], bp	; 3: 137 110 27
x51518:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2404 pointer
x51522:	mov si, bp	; 2: 137 238
x51524:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2404 8
x51527:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x51530:	mov ax, [bp + 6]	; 3: 139 70 6
x51533:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x51536:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 94 201
x51541:	mov [bp + 23], bp	; 3: 137 110 23
x51544:	add bp, 21	; 3: 131 197 21
x51547:	jmp strtol	; 3: 233 177 6

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2405

strtol_test$262:	; Assign value £temporary2405
x51550:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51554:	mov word [bp + 31], @5583$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 51 207

strtol_test$265:	; Parameter 25 text 8
x51559:	mov [bp + 33], bp	; 3: 137 110 33
x51562:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x51566:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51570:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x51574:	mov ax, [bp + 19]	; 3: 139 70 19
x51577:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x51580:	mov ax, [bp + 6]	; 3: 139 70 6
x51583:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x51586:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 149 201
x51591:	mov [bp + 27], bp	; 3: 137 110 27
x51594:	add bp, 25	; 3: 131 197 25
x51597:	mov di, bp	; 2: 137 239
x51599:	add di, 10	; 3: 131 199 10
x51602:	jmp printf	; 3: 233 111 67

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x51605:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x51610:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x51614:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x51618:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x51622:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x51626:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x51630:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x51634:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x51638:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x51642:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x51646:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x51650:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x51654:	mov [bp + 27], bp	; 3: 137 110 27
x51657:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2418 pointer
x51661:	mov si, bp	; 2: 137 238
x51663:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2418 8
x51666:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x51669:	mov ax, [bp + 6]	; 3: 139 70 6
x51672:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x51675:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 233 201
x51680:	mov [bp + 23], bp	; 3: 137 110 23
x51683:	add bp, 21	; 3: 131 197 21
x51686:	jmp strtol	; 3: 233 38 6

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2419

strtol_test$291:	; Assign value £temporary2419
x51689:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51693:	mov word [bp + 31], @5627$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 73 207

strtol_test$294:	; Parameter 25 text 8
x51698:	mov [bp + 33], bp	; 3: 137 110 33
x51701:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x51705:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51709:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x51713:	mov ax, [bp + 19]	; 3: 139 70 19
x51716:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x51719:	mov ax, [bp + 6]	; 3: 139 70 6
x51722:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x51725:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 32 202
x51730:	mov [bp + 27], bp	; 3: 137 110 27
x51733:	add bp, 25	; 3: 131 197 25
x51736:	mov di, bp	; 2: 137 239
x51738:	add di, 10	; 3: 131 199 10
x51741:	jmp printf	; 3: 233 228 66

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x51744:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x51749:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x51753:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x51757:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x51761:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x51765:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x51769:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x51773:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x51777:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x51781:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x51785:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x51789:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x51793:	mov [bp + 27], bp	; 3: 137 110 27
x51796:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2432 pointer
x51800:	mov si, bp	; 2: 137 238
x51802:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2432 8
x51805:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x51808:	mov ax, [bp + 6]	; 3: 139 70 6
x51811:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x51814:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 116 202
x51819:	mov [bp + 23], bp	; 3: 137 110 23
x51822:	add bp, 21	; 3: 131 197 21
x51825:	jmp strtol	; 3: 233 155 5

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2433

strtol_test$320:	; Assign value £temporary2433
x51828:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51832:	mov word [bp + 31], @5671$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 95 207

strtol_test$323:	; Parameter 25 text 8
x51837:	mov [bp + 33], bp	; 3: 137 110 33
x51840:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x51844:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51848:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x51852:	mov ax, [bp + 19]	; 3: 139 70 19
x51855:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x51858:	mov ax, [bp + 6]	; 3: 139 70 6
x51861:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x51864:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 171 202
x51869:	mov [bp + 27], bp	; 3: 137 110 27
x51872:	add bp, 25	; 3: 131 197 25
x51875:	mov di, bp	; 2: 137 239
x51877:	add di, 10	; 3: 131 199 10
x51880:	jmp printf	; 3: 233 89 66

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x51883:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x51888:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x51892:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x51896:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x51900:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x51904:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x51908:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x51912:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x51916:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x51920:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x51924:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x51928:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x51932:	mov [bp + 27], bp	; 3: 137 110 27
x51935:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2446 pointer
x51939:	mov si, bp	; 2: 137 238
x51941:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2446 8
x51944:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x51947:	mov ax, [bp + 6]	; 3: 139 70 6
x51950:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x51953:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 255 202
x51958:	mov [bp + 23], bp	; 3: 137 110 23
x51961:	add bp, 21	; 3: 131 197 21
x51964:	jmp strtol	; 3: 233 16 5

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2447

strtol_test$349:	; Assign value £temporary2447
x51967:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51971:	mov word [bp + 31], @5715$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 117 207

strtol_test$352:	; Parameter 25 text 8
x51976:	mov [bp + 33], bp	; 3: 137 110 33
x51979:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x51983:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51987:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x51991:	mov ax, [bp + 19]	; 3: 139 70 19
x51994:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x51997:	mov ax, [bp + 6]	; 3: 139 70 6
x52000:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x52003:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 54 203
x52008:	mov [bp + 27], bp	; 3: 137 110 27
x52011:	add bp, 25	; 3: 131 197 25
x52014:	mov di, bp	; 2: 137 239
x52016:	add di, 10	; 3: 131 199 10
x52019:	jmp printf	; 3: 233 206 65

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x52022:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x52027:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x52031:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x52035:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x52039:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x52043:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x52047:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x52051:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x52055:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x52059:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x52063:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x52067:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x52071:	mov [bp + 27], bp	; 3: 137 110 27
x52074:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2460 pointer
x52078:	mov si, bp	; 2: 137 238
x52080:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2460 8
x52083:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x52086:	mov ax, [bp + 6]	; 3: 139 70 6
x52089:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x52092:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 138 203
x52097:	mov [bp + 23], bp	; 3: 137 110 23
x52100:	add bp, 21	; 3: 131 197 21
x52103:	jmp strtol	; 3: 233 133 4

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2461

strtol_test$378:	; Assign value £temporary2461
x52106:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52110:	mov word [bp + 31], @5759$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 139 207

strtol_test$381:	; Parameter 25 text 8
x52115:	mov [bp + 33], bp	; 3: 137 110 33
x52118:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x52122:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52126:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x52130:	mov ax, [bp + 19]	; 3: 139 70 19
x52133:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x52136:	mov ax, [bp + 6]	; 3: 139 70 6
x52139:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x52142:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 193 203
x52147:	mov [bp + 27], bp	; 3: 137 110 27
x52150:	add bp, 25	; 3: 131 197 25
x52153:	mov di, bp	; 2: 137 239
x52155:	add di, 10	; 3: 131 199 10
x52158:	jmp printf	; 3: 233 67 65

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x52161:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x52166:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x52170:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x52174:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x52178:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x52182:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x52186:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x52190:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x52194:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x52198:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x52202:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x52206:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x52210:	mov [bp + 27], bp	; 3: 137 110 27
x52213:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2474 pointer
x52217:	mov si, bp	; 2: 137 238
x52219:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2474 8
x52222:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x52225:	mov ax, [bp + 6]	; 3: 139 70 6
x52228:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x52231:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 21 204
x52236:	mov [bp + 23], bp	; 3: 137 110 23
x52239:	add bp, 21	; 3: 131 197 21
x52242:	jmp strtol	; 3: 233 250 3

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2475

strtol_test$407:	; Assign value £temporary2475
x52245:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52249:	mov word [bp + 31], @5803$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 161 207

strtol_test$410:	; Parameter 25 text 8
x52254:	mov [bp + 33], bp	; 3: 137 110 33
x52257:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x52261:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52265:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x52269:	mov ax, [bp + 19]	; 3: 139 70 19
x52272:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x52275:	mov ax, [bp + 6]	; 3: 139 70 6
x52278:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x52281:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 76 204
x52286:	mov [bp + 27], bp	; 3: 137 110 27
x52289:	add bp, 25	; 3: 131 197 25
x52292:	mov di, bp	; 2: 137 239
x52294:	add di, 10	; 3: 131 199 10
x52297:	jmp printf	; 3: 233 184 64

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x52300:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x52305:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x52309:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x52313:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x52317:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x52321:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x52325:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x52329:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x52333:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x52337:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x52341:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x52345:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x52349:	mov [bp + 27], bp	; 3: 137 110 27
x52352:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2488 pointer
x52356:	mov si, bp	; 2: 137 238
x52358:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2488 8
x52361:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x52364:	mov ax, [bp + 6]	; 3: 139 70 6
x52367:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x52370:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 160 204
x52375:	mov [bp + 23], bp	; 3: 137 110 23
x52378:	add bp, 21	; 3: 131 197 21
x52381:	jmp strtol	; 3: 233 111 3

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2489

strtol_test$436:	; Assign value £temporary2489
x52384:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52388:	mov word [bp + 31], @5847$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 183 207

strtol_test$439:	; Parameter 25 text 8
x52393:	mov [bp + 33], bp	; 3: 137 110 33
x52396:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x52400:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52404:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x52408:	mov ax, [bp + 19]	; 3: 139 70 19
x52411:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x52414:	mov ax, [bp + 6]	; 3: 139 70 6
x52417:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x52420:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 215 204
x52425:	mov [bp + 27], bp	; 3: 137 110 27
x52428:	add bp, 25	; 3: 131 197 25
x52431:	mov di, bp	; 2: 137 239
x52433:	add di, 10	; 3: 131 199 10
x52436:	jmp printf	; 3: 233 45 64

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x52439:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x52444:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x52448:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x52452:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x52456:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x52460:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x52464:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x52468:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x52472:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x52476:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x52480:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x52484:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x52488:	mov [bp + 27], bp	; 3: 137 110 27
x52491:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2502 pointer
x52495:	mov si, bp	; 2: 137 238
x52497:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2502 8
x52500:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x52503:	mov ax, [bp + 6]	; 3: 139 70 6
x52506:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x52509:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 43 205
x52514:	mov [bp + 23], bp	; 3: 137 110 23
x52517:	add bp, 21	; 3: 131 197 21
x52520:	jmp strtol	; 3: 233 228 2

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2503

strtol_test$465:	; Assign value £temporary2503
x52523:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52527:	mov word [bp + 31], @5891$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 205 207

strtol_test$468:	; Parameter 25 text 8
x52532:	mov [bp + 33], bp	; 3: 137 110 33
x52535:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x52539:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52543:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x52547:	mov ax, [bp + 19]	; 3: 139 70 19
x52550:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x52553:	mov ax, [bp + 6]	; 3: 139 70 6
x52556:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x52559:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 98 205
x52564:	mov [bp + 27], bp	; 3: 137 110 27
x52567:	add bp, 25	; 3: 131 197 25
x52570:	mov di, bp	; 2: 137 239
x52572:	add di, 10	; 3: 131 199 10
x52575:	jmp printf	; 3: 233 162 63

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x52578:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x52583:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x52587:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x52591:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x52595:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x52599:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x52603:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x52607:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x52611:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x52615:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x52619:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x52623:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x52627:	mov [bp + 27], bp	; 3: 137 110 27
x52630:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2516 pointer
x52634:	mov si, bp	; 2: 137 238
x52636:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2516 8
x52639:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x52642:	mov ax, [bp + 6]	; 3: 139 70 6
x52645:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x52648:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 182 205
x52653:	mov [bp + 23], bp	; 3: 137 110 23
x52656:	add bp, 21	; 3: 131 197 21
x52659:	jmp strtol	; 3: 233 89 2

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2517

strtol_test$494:	; Assign value £temporary2517
x52662:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52666:	mov word [bp + 31], @5935$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 227 207

strtol_test$497:	; Parameter 25 text 8
x52671:	mov [bp + 33], bp	; 3: 137 110 33
x52674:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x52678:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52682:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x52686:	mov ax, [bp + 19]	; 3: 139 70 19
x52689:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x52692:	mov ax, [bp + 6]	; 3: 139 70 6
x52695:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x52698:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 237 205
x52703:	mov [bp + 27], bp	; 3: 137 110 27
x52706:	add bp, 25	; 3: 131 197 25
x52709:	mov di, bp	; 2: 137 239
x52711:	add di, 10	; 3: 131 199 10
x52714:	jmp printf	; 3: 233 23 63

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x52717:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x52722:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x52726:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x52730:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x52734:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x52738:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x52742:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x52746:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x52750:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x52754:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x52758:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x52762:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x52766:	mov [bp + 27], bp	; 3: 137 110 27
x52769:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2530 pointer
x52773:	mov si, bp	; 2: 137 238
x52775:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2530 8
x52778:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x52781:	mov ax, [bp + 6]	; 3: 139 70 6
x52784:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x52787:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 65 206
x52792:	mov [bp + 23], bp	; 3: 137 110 23
x52795:	add bp, 21	; 3: 131 197 21
x52798:	jmp strtol	; 3: 233 206 1

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2531

strtol_test$523:	; Assign value £temporary2531
x52801:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52805:	mov word [bp + 31], @5979$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 249 207

strtol_test$526:	; Parameter 25 text 8
x52810:	mov [bp + 33], bp	; 3: 137 110 33
x52813:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x52817:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52821:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x52825:	mov ax, [bp + 19]	; 3: 139 70 19
x52828:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x52831:	mov ax, [bp + 6]	; 3: 139 70 6
x52834:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x52837:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 120 206
x52842:	mov [bp + 27], bp	; 3: 137 110 27
x52845:	add bp, 25	; 3: 131 197 25
x52848:	mov di, bp	; 2: 137 239
x52850:	add di, 10	; 3: 131 199 10
x52853:	jmp printf	; 3: 233 140 62

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x52856:	mov ax, [bp]	; 3: 139 70 0
x52859:	mov di, [bp + 4]	; 3: 139 126 4
x52862:	mov bp, [bp + 2]	; 3: 139 110 2
x52865:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

@5201$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52867:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5248$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52889:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5298$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52911:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5348$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52933:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5392$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52955:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5439$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52977:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5489$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52999:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5539$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53021:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5583$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53043:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5627$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53065:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5671$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53087:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5715$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53109:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5759$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53131:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5803$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53153:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5847$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53175:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5891$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53197:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5935$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53219:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5979$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53241:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x53263:	mov word [g_inStatus], 1	; 6: 199 6 217 95 1 0

strtol$1:	; Assign g_inDevice s
x53269:	mov ax, [bp + 6]	; 3: 139 70 6
x53272:	mov [g_inDevice], ax	; 3: 163 219 95

strtol$2:	; Assign g_inChars 0
x53275:	mov word [g_inChars], 0	; 6: 199 6 254 100 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x53281:	mov ax, [bp + 10]	; 3: 139 70 10
x53284:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x53287:	mov word [bp + 12], strtol$6	; 5: 199 70 12 53 208
x53292:	mov [bp + 14], bp	; 3: 137 110 14
x53295:	add bp, 12	; 3: 131 197 12
x53298:	jmp scanLongInt	; 3: 233 190 151

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2246

strtol$8:	; Assign value £temporary2246
x53301:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x53305:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x53309:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2248 -> endp endp 0
x53311:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2248 -> endp s g_inChars
x53314:	mov ax, [bp + 6]	; 3: 139 70 6
x53317:	add ax, [g_inChars]	; 4: 3 6 254 100
x53321:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x53323:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x53327:	mov ax, [bp]	; 3: 139 70 0
x53330:	mov di, [bp + 4]	; 3: 139 126 4
x53333:	mov bp, [bp + 2]	; 3: 139 110 2
x53336:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x53338:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x53343:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x53347:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x53351:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x53355:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x53359:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x53363:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x53367:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x53371:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x53375:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x53379:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x53383:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x53387:	mov [bp + 27], bp	; 3: 137 110 27
x53390:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2706 pointer
x53394:	mov si, bp	; 2: 137 238
x53396:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2706 8
x53399:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x53402:	mov ax, [bp + 6]	; 3: 139 70 6
x53405:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x53408:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 174 208
x53413:	mov [bp + 23], bp	; 3: 137 110 23
x53416:	add bp, 21	; 3: 131 197 21
x53419:	jmp strtoul	; 3: 233 49 11

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2707

strtoul_test$20:	; Assign value £temporary2707
x53422:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53426:	mov word [bp + 31], @6186$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 83 218

strtoul_test$23:	; Parameter 25 text 8
x53431:	mov [bp + 33], bp	; 3: 137 110 33
x53434:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x53438:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53442:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x53446:	mov ax, [bp + 19]	; 3: 139 70 19
x53449:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x53452:	mov ax, [bp + 6]	; 3: 139 70 6
x53455:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x53458:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 229 208
x53463:	mov [bp + 27], bp	; 3: 137 110 27
x53466:	add bp, 25	; 3: 131 197 25
x53469:	mov di, bp	; 2: 137 239
x53471:	add di, 10	; 3: 131 199 10
x53474:	jmp printf	; 3: 233 31 60

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x53477:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x53482:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x53486:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x53490:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x53494:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x53498:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x53502:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x53506:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x53510:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x53514:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x53518:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x53522:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x53526:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x53530:	mov [bp + 28], bp	; 3: 137 110 28
x53533:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2721 pointer
x53537:	mov si, bp	; 2: 137 238
x53539:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2721 8
x53542:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x53545:	mov ax, [bp + 6]	; 3: 139 70 6
x53548:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x53551:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 61 209
x53556:	mov [bp + 24], bp	; 3: 137 110 24
x53559:	add bp, 22	; 3: 131 197 22
x53562:	jmp strtoul	; 3: 233 162 10

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2722

strtoul_test$50:	; Assign value £temporary2722
x53565:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53569:	mov word [bp + 32], @6233$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 105 218

strtoul_test$53:	; Parameter 26 text 8
x53574:	mov [bp + 34], bp	; 3: 137 110 34
x53577:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x53581:	mov eax, [bp + 22]	; 4: 102 139 70 22
x53585:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x53589:	mov ax, [bp + 20]	; 3: 139 70 20
x53592:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x53595:	mov ax, [bp + 6]	; 3: 139 70 6
x53598:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x53601:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 116 209
x53606:	mov [bp + 28], bp	; 3: 137 110 28
x53609:	add bp, 26	; 3: 131 197 26
x53612:	mov di, bp	; 2: 137 239
x53614:	add di, 10	; 3: 131 199 10
x53617:	jmp printf	; 3: 233 144 59

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x53620:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x53625:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x53629:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x53633:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x53637:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x53641:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x53645:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x53649:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x53653:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x53657:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x53661:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x53665:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x53669:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x53673:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x53677:	mov [bp + 29], bp	; 3: 137 110 29
x53680:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2737 pointer
x53684:	mov si, bp	; 2: 137 238
x53686:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2737 8
x53689:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x53692:	mov ax, [bp + 6]	; 3: 139 70 6
x53695:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x53698:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 208 209
x53703:	mov [bp + 25], bp	; 3: 137 110 25
x53706:	add bp, 23	; 3: 131 197 23
x53709:	jmp strtoul	; 3: 233 15 10

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2738

strtoul_test$81:	; Assign value £temporary2738
x53712:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53716:	mov word [bp + 33], @6283$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 127 218

strtoul_test$84:	; Parameter 27 text 8
x53721:	mov [bp + 35], bp	; 3: 137 110 35
x53724:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x53728:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53732:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x53736:	mov ax, [bp + 21]	; 3: 139 70 21
x53739:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x53742:	mov ax, [bp + 6]	; 3: 139 70 6
x53745:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x53748:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 7 210
x53753:	mov [bp + 29], bp	; 3: 137 110 29
x53756:	add bp, 27	; 3: 131 197 27
x53759:	mov di, bp	; 2: 137 239
x53761:	add di, 10	; 3: 131 199 10
x53764:	jmp printf	; 3: 233 253 58

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x53767:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x53772:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x53776:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x53780:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x53784:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x53788:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x53792:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x53796:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x53800:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x53804:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x53808:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x53812:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x53816:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x53820:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x53824:	mov [bp + 29], bp	; 3: 137 110 29
x53827:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2753 pointer
x53831:	mov si, bp	; 2: 137 238
x53833:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2753 8
x53836:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x53839:	mov ax, [bp + 6]	; 3: 139 70 6
x53842:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x53845:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 99 210
x53850:	mov [bp + 25], bp	; 3: 137 110 25
x53853:	add bp, 23	; 3: 131 197 23
x53856:	jmp strtoul	; 3: 233 124 9

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2754

strtoul_test$112:	; Assign value £temporary2754
x53859:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53863:	mov word [bp + 33], @6333$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 149 218

strtoul_test$115:	; Parameter 27 text 8
x53868:	mov [bp + 35], bp	; 3: 137 110 35
x53871:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x53875:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53879:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x53883:	mov ax, [bp + 21]	; 3: 139 70 21
x53886:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x53889:	mov ax, [bp + 6]	; 3: 139 70 6
x53892:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x53895:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 154 210
x53900:	mov [bp + 29], bp	; 3: 137 110 29
x53903:	add bp, 27	; 3: 131 197 27
x53906:	mov di, bp	; 2: 137 239
x53908:	add di, 10	; 3: 131 199 10
x53911:	jmp printf	; 3: 233 106 58

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x53914:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x53919:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x53923:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x53927:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x53931:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x53935:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x53939:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x53943:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x53947:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x53951:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x53955:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x53959:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x53963:	mov [bp + 27], bp	; 3: 137 110 27
x53966:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2767 pointer
x53970:	mov si, bp	; 2: 137 238
x53972:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2767 8
x53975:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x53978:	mov ax, [bp + 6]	; 3: 139 70 6
x53981:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x53984:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 238 210
x53989:	mov [bp + 23], bp	; 3: 137 110 23
x53992:	add bp, 21	; 3: 131 197 21
x53995:	jmp strtoul	; 3: 233 241 8

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2768

strtoul_test$141:	; Assign value £temporary2768
x53998:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54002:	mov word [bp + 31], @6377$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 171 218

strtoul_test$144:	; Parameter 25 text 8
x54007:	mov [bp + 33], bp	; 3: 137 110 33
x54010:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x54014:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54018:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x54022:	mov ax, [bp + 19]	; 3: 139 70 19
x54025:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x54028:	mov ax, [bp + 6]	; 3: 139 70 6
x54031:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x54034:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 37 211
x54039:	mov [bp + 27], bp	; 3: 137 110 27
x54042:	add bp, 25	; 3: 131 197 25
x54045:	mov di, bp	; 2: 137 239
x54047:	add di, 10	; 3: 131 199 10
x54050:	jmp printf	; 3: 233 223 57

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x54053:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x54058:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x54062:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x54066:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x54070:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x54074:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x54078:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x54082:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x54086:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x54090:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x54094:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x54098:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x54102:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x54106:	mov [bp + 28], bp	; 3: 137 110 28
x54109:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2782 pointer
x54113:	mov si, bp	; 2: 137 238
x54115:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2782 8
x54118:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x54121:	mov ax, [bp + 6]	; 3: 139 70 6
x54124:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x54127:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 125 211
x54132:	mov [bp + 24], bp	; 3: 137 110 24
x54135:	add bp, 22	; 3: 131 197 22
x54138:	jmp strtoul	; 3: 233 98 8

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2783

strtoul_test$171:	; Assign value £temporary2783
x54141:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54145:	mov word [bp + 32], @6424$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 193 218

strtoul_test$174:	; Parameter 26 text 8
x54150:	mov [bp + 34], bp	; 3: 137 110 34
x54153:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x54157:	mov eax, [bp + 22]	; 4: 102 139 70 22
x54161:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x54165:	mov ax, [bp + 20]	; 3: 139 70 20
x54168:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x54171:	mov ax, [bp + 6]	; 3: 139 70 6
x54174:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x54177:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 180 211
x54182:	mov [bp + 28], bp	; 3: 137 110 28
x54185:	add bp, 26	; 3: 131 197 26
x54188:	mov di, bp	; 2: 137 239
x54190:	add di, 10	; 3: 131 199 10
x54193:	jmp printf	; 3: 233 80 57

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x54196:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x54201:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x54205:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x54209:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x54213:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x54217:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x54221:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x54225:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x54229:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x54233:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x54237:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x54241:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x54245:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x54249:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x54253:	mov [bp + 29], bp	; 3: 137 110 29
x54256:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2798 pointer
x54260:	mov si, bp	; 2: 137 238
x54262:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2798 8
x54265:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x54268:	mov ax, [bp + 6]	; 3: 139 70 6
x54271:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x54274:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 16 212
x54279:	mov [bp + 25], bp	; 3: 137 110 25
x54282:	add bp, 23	; 3: 131 197 23
x54285:	jmp strtoul	; 3: 233 207 7

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2799

strtoul_test$202:	; Assign value £temporary2799
x54288:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54292:	mov word [bp + 33], @6474$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 215 218

strtoul_test$205:	; Parameter 27 text 8
x54297:	mov [bp + 35], bp	; 3: 137 110 35
x54300:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x54304:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54308:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x54312:	mov ax, [bp + 21]	; 3: 139 70 21
x54315:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x54318:	mov ax, [bp + 6]	; 3: 139 70 6
x54321:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x54324:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 71 212
x54329:	mov [bp + 29], bp	; 3: 137 110 29
x54332:	add bp, 27	; 3: 131 197 27
x54335:	mov di, bp	; 2: 137 239
x54337:	add di, 10	; 3: 131 199 10
x54340:	jmp printf	; 3: 233 189 56

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x54343:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x54348:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x54352:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x54356:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x54360:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x54364:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x54368:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x54372:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x54376:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x54380:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x54384:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x54388:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x54392:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x54396:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x54400:	mov [bp + 29], bp	; 3: 137 110 29
x54403:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2814 pointer
x54407:	mov si, bp	; 2: 137 238
x54409:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2814 8
x54412:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x54415:	mov ax, [bp + 6]	; 3: 139 70 6
x54418:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x54421:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 163 212
x54426:	mov [bp + 25], bp	; 3: 137 110 25
x54429:	add bp, 23	; 3: 131 197 23
x54432:	jmp strtoul	; 3: 233 60 7

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2815

strtoul_test$233:	; Assign value £temporary2815
x54435:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54439:	mov word [bp + 33], @6524$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 237 218

strtoul_test$236:	; Parameter 27 text 8
x54444:	mov [bp + 35], bp	; 3: 137 110 35
x54447:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x54451:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54455:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x54459:	mov ax, [bp + 21]	; 3: 139 70 21
x54462:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x54465:	mov ax, [bp + 6]	; 3: 139 70 6
x54468:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x54471:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 218 212
x54476:	mov [bp + 29], bp	; 3: 137 110 29
x54479:	add bp, 27	; 3: 131 197 27
x54482:	mov di, bp	; 2: 137 239
x54484:	add di, 10	; 3: 131 199 10
x54487:	jmp printf	; 3: 233 42 56

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x54490:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x54495:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x54499:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x54503:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x54507:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x54511:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x54515:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x54519:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x54523:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x54527:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x54531:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x54535:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x54539:	mov [bp + 27], bp	; 3: 137 110 27
x54542:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2828 pointer
x54546:	mov si, bp	; 2: 137 238
x54548:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2828 8
x54551:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x54554:	mov ax, [bp + 6]	; 3: 139 70 6
x54557:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x54560:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 46 213
x54565:	mov [bp + 23], bp	; 3: 137 110 23
x54568:	add bp, 21	; 3: 131 197 21
x54571:	jmp strtoul	; 3: 233 177 6

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2829

strtoul_test$262:	; Assign value £temporary2829
x54574:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54578:	mov word [bp + 31], @6568$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 3 219

strtoul_test$265:	; Parameter 25 text 8
x54583:	mov [bp + 33], bp	; 3: 137 110 33
x54586:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x54590:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54594:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x54598:	mov ax, [bp + 19]	; 3: 139 70 19
x54601:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x54604:	mov ax, [bp + 6]	; 3: 139 70 6
x54607:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x54610:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 101 213
x54615:	mov [bp + 27], bp	; 3: 137 110 27
x54618:	add bp, 25	; 3: 131 197 25
x54621:	mov di, bp	; 2: 137 239
x54623:	add di, 10	; 3: 131 199 10
x54626:	jmp printf	; 3: 233 159 55

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x54629:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x54634:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x54638:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x54642:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x54646:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x54650:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x54654:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x54658:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x54662:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x54666:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x54670:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x54674:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x54678:	mov [bp + 27], bp	; 3: 137 110 27
x54681:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary2842 pointer
x54685:	mov si, bp	; 2: 137 238
x54687:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary2842 8
x54690:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x54693:	mov ax, [bp + 6]	; 3: 139 70 6
x54696:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x54699:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 185 213
x54704:	mov [bp + 23], bp	; 3: 137 110 23
x54707:	add bp, 21	; 3: 131 197 21
x54710:	jmp strtoul	; 3: 233 38 6

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary2843

strtoul_test$291:	; Assign value £temporary2843
x54713:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54717:	mov word [bp + 31], @6612$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 25 219

strtoul_test$294:	; Parameter 25 text 8
x54722:	mov [bp + 33], bp	; 3: 137 110 33
x54725:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x54729:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54733:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x54737:	mov ax, [bp + 19]	; 3: 139 70 19
x54740:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x54743:	mov ax, [bp + 6]	; 3: 139 70 6
x54746:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x54749:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 240 213
x54754:	mov [bp + 27], bp	; 3: 137 110 27
x54757:	add bp, 25	; 3: 131 197 25
x54760:	mov di, bp	; 2: 137 239
x54762:	add di, 10	; 3: 131 199 10
x54765:	jmp printf	; 3: 233 20 55

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x54768:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x54773:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x54777:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x54781:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x54785:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x54789:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x54793:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x54797:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x54801:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x54805:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x54809:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x54813:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x54817:	mov [bp + 27], bp	; 3: 137 110 27
x54820:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary2856 pointer
x54824:	mov si, bp	; 2: 137 238
x54826:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary2856 8
x54829:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x54832:	mov ax, [bp + 6]	; 3: 139 70 6
x54835:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x54838:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 68 214
x54843:	mov [bp + 23], bp	; 3: 137 110 23
x54846:	add bp, 21	; 3: 131 197 21
x54849:	jmp strtoul	; 3: 233 155 5

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary2857

strtoul_test$320:	; Assign value £temporary2857
x54852:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54856:	mov word [bp + 31], @6656$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 47 219

strtoul_test$323:	; Parameter 25 text 8
x54861:	mov [bp + 33], bp	; 3: 137 110 33
x54864:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x54868:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54872:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x54876:	mov ax, [bp + 19]	; 3: 139 70 19
x54879:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x54882:	mov ax, [bp + 6]	; 3: 139 70 6
x54885:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x54888:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 123 214
x54893:	mov [bp + 27], bp	; 3: 137 110 27
x54896:	add bp, 25	; 3: 131 197 25
x54899:	mov di, bp	; 2: 137 239
x54901:	add di, 10	; 3: 131 199 10
x54904:	jmp printf	; 3: 233 137 54

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x54907:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x54912:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x54916:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x54920:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x54924:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x54928:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x54932:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x54936:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x54940:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x54944:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x54948:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x54952:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x54956:	mov [bp + 27], bp	; 3: 137 110 27
x54959:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary2870 pointer
x54963:	mov si, bp	; 2: 137 238
x54965:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary2870 8
x54968:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x54971:	mov ax, [bp + 6]	; 3: 139 70 6
x54974:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x54977:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 207 214
x54982:	mov [bp + 23], bp	; 3: 137 110 23
x54985:	add bp, 21	; 3: 131 197 21
x54988:	jmp strtoul	; 3: 233 16 5

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary2871

strtoul_test$349:	; Assign value £temporary2871
x54991:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54995:	mov word [bp + 31], @6700$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 69 219

strtoul_test$352:	; Parameter 25 text 8
x55000:	mov [bp + 33], bp	; 3: 137 110 33
x55003:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x55007:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55011:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x55015:	mov ax, [bp + 19]	; 3: 139 70 19
x55018:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x55021:	mov ax, [bp + 6]	; 3: 139 70 6
x55024:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x55027:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 6 215
x55032:	mov [bp + 27], bp	; 3: 137 110 27
x55035:	add bp, 25	; 3: 131 197 25
x55038:	mov di, bp	; 2: 137 239
x55040:	add di, 10	; 3: 131 199 10
x55043:	jmp printf	; 3: 233 254 53

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x55046:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x55051:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x55055:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x55059:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x55063:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x55067:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x55071:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x55075:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x55079:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x55083:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x55087:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x55091:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x55095:	mov [bp + 27], bp	; 3: 137 110 27
x55098:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary2884 pointer
x55102:	mov si, bp	; 2: 137 238
x55104:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary2884 8
x55107:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x55110:	mov ax, [bp + 6]	; 3: 139 70 6
x55113:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x55116:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 90 215
x55121:	mov [bp + 23], bp	; 3: 137 110 23
x55124:	add bp, 21	; 3: 131 197 21
x55127:	jmp strtoul	; 3: 233 133 4

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary2885

strtoul_test$378:	; Assign value £temporary2885
x55130:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55134:	mov word [bp + 31], @6744$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 91 219

strtoul_test$381:	; Parameter 25 text 8
x55139:	mov [bp + 33], bp	; 3: 137 110 33
x55142:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x55146:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55150:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x55154:	mov ax, [bp + 19]	; 3: 139 70 19
x55157:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x55160:	mov ax, [bp + 6]	; 3: 139 70 6
x55163:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x55166:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 145 215
x55171:	mov [bp + 27], bp	; 3: 137 110 27
x55174:	add bp, 25	; 3: 131 197 25
x55177:	mov di, bp	; 2: 137 239
x55179:	add di, 10	; 3: 131 199 10
x55182:	jmp printf	; 3: 233 115 53

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x55185:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x55190:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x55194:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x55198:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x55202:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x55206:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x55210:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x55214:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x55218:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x55222:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x55226:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x55230:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x55234:	mov [bp + 27], bp	; 3: 137 110 27
x55237:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary2898 pointer
x55241:	mov si, bp	; 2: 137 238
x55243:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary2898 8
x55246:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x55249:	mov ax, [bp + 6]	; 3: 139 70 6
x55252:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x55255:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 229 215
x55260:	mov [bp + 23], bp	; 3: 137 110 23
x55263:	add bp, 21	; 3: 131 197 21
x55266:	jmp strtoul	; 3: 233 250 3

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary2899

strtoul_test$407:	; Assign value £temporary2899
x55269:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55273:	mov word [bp + 31], @6788$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 113 219

strtoul_test$410:	; Parameter 25 text 8
x55278:	mov [bp + 33], bp	; 3: 137 110 33
x55281:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x55285:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55289:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x55293:	mov ax, [bp + 19]	; 3: 139 70 19
x55296:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x55299:	mov ax, [bp + 6]	; 3: 139 70 6
x55302:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x55305:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 28 216
x55310:	mov [bp + 27], bp	; 3: 137 110 27
x55313:	add bp, 25	; 3: 131 197 25
x55316:	mov di, bp	; 2: 137 239
x55318:	add di, 10	; 3: 131 199 10
x55321:	jmp printf	; 3: 233 232 52

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x55324:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x55329:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x55333:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x55337:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x55341:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x55345:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x55349:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x55353:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x55357:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x55361:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x55365:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x55369:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x55373:	mov [bp + 27], bp	; 3: 137 110 27
x55376:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary2912 pointer
x55380:	mov si, bp	; 2: 137 238
x55382:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary2912 8
x55385:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x55388:	mov ax, [bp + 6]	; 3: 139 70 6
x55391:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x55394:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 112 216
x55399:	mov [bp + 23], bp	; 3: 137 110 23
x55402:	add bp, 21	; 3: 131 197 21
x55405:	jmp strtoul	; 3: 233 111 3

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary2913

strtoul_test$436:	; Assign value £temporary2913
x55408:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55412:	mov word [bp + 31], @6832$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 135 219

strtoul_test$439:	; Parameter 25 text 8
x55417:	mov [bp + 33], bp	; 3: 137 110 33
x55420:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x55424:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55428:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x55432:	mov ax, [bp + 19]	; 3: 139 70 19
x55435:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x55438:	mov ax, [bp + 6]	; 3: 139 70 6
x55441:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x55444:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 167 216
x55449:	mov [bp + 27], bp	; 3: 137 110 27
x55452:	add bp, 25	; 3: 131 197 25
x55455:	mov di, bp	; 2: 137 239
x55457:	add di, 10	; 3: 131 199 10
x55460:	jmp printf	; 3: 233 93 52

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x55463:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x55468:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x55472:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x55476:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x55480:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x55484:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x55488:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x55492:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x55496:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x55500:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x55504:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x55508:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x55512:	mov [bp + 27], bp	; 3: 137 110 27
x55515:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary2926 pointer
x55519:	mov si, bp	; 2: 137 238
x55521:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary2926 8
x55524:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x55527:	mov ax, [bp + 6]	; 3: 139 70 6
x55530:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x55533:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 251 216
x55538:	mov [bp + 23], bp	; 3: 137 110 23
x55541:	add bp, 21	; 3: 131 197 21
x55544:	jmp strtoul	; 3: 233 228 2

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary2927

strtoul_test$465:	; Assign value £temporary2927
x55547:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55551:	mov word [bp + 31], @6876$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 157 219

strtoul_test$468:	; Parameter 25 text 8
x55556:	mov [bp + 33], bp	; 3: 137 110 33
x55559:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x55563:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55567:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x55571:	mov ax, [bp + 19]	; 3: 139 70 19
x55574:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x55577:	mov ax, [bp + 6]	; 3: 139 70 6
x55580:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x55583:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 50 217
x55588:	mov [bp + 27], bp	; 3: 137 110 27
x55591:	add bp, 25	; 3: 131 197 25
x55594:	mov di, bp	; 2: 137 239
x55596:	add di, 10	; 3: 131 199 10
x55599:	jmp printf	; 3: 233 210 51

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x55602:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x55607:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x55611:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x55615:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x55619:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x55623:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x55627:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x55631:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x55635:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x55639:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x55643:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x55647:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x55651:	mov [bp + 27], bp	; 3: 137 110 27
x55654:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary2940 pointer
x55658:	mov si, bp	; 2: 137 238
x55660:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary2940 8
x55663:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x55666:	mov ax, [bp + 6]	; 3: 139 70 6
x55669:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x55672:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 134 217
x55677:	mov [bp + 23], bp	; 3: 137 110 23
x55680:	add bp, 21	; 3: 131 197 21
x55683:	jmp strtoul	; 3: 233 89 2

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary2941

strtoul_test$494:	; Assign value £temporary2941
x55686:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55690:	mov word [bp + 31], @6920$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 179 219

strtoul_test$497:	; Parameter 25 text 8
x55695:	mov [bp + 33], bp	; 3: 137 110 33
x55698:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x55702:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55706:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x55710:	mov ax, [bp + 19]	; 3: 139 70 19
x55713:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x55716:	mov ax, [bp + 6]	; 3: 139 70 6
x55719:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x55722:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 189 217
x55727:	mov [bp + 27], bp	; 3: 137 110 27
x55730:	add bp, 25	; 3: 131 197 25
x55733:	mov di, bp	; 2: 137 239
x55735:	add di, 10	; 3: 131 199 10
x55738:	jmp printf	; 3: 233 71 51

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x55741:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x55746:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x55750:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x55754:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x55758:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x55762:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x55766:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x55770:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x55774:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x55778:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x55782:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x55786:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x55790:	mov [bp + 27], bp	; 3: 137 110 27
x55793:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary2954 pointer
x55797:	mov si, bp	; 2: 137 238
x55799:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary2954 8
x55802:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x55805:	mov ax, [bp + 6]	; 3: 139 70 6
x55808:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x55811:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 17 218
x55816:	mov [bp + 23], bp	; 3: 137 110 23
x55819:	add bp, 21	; 3: 131 197 21
x55822:	jmp strtoul	; 3: 233 206 1

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary2955

strtoul_test$523:	; Assign value £temporary2955
x55825:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55829:	mov word [bp + 31], @6964$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 201 219

strtoul_test$526:	; Parameter 25 text 8
x55834:	mov [bp + 33], bp	; 3: 137 110 33
x55837:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x55841:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55845:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x55849:	mov ax, [bp + 19]	; 3: 139 70 19
x55852:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x55855:	mov ax, [bp + 6]	; 3: 139 70 6
x55858:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x55861:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 72 218
x55866:	mov [bp + 27], bp	; 3: 137 110 27
x55869:	add bp, 25	; 3: 131 197 25
x55872:	mov di, bp	; 2: 137 239
x55874:	add di, 10	; 3: 131 199 10
x55877:	jmp printf	; 3: 233 188 50

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x55880:	mov ax, [bp]	; 3: 139 70 0
x55883:	mov di, [bp + 4]	; 3: 139 126 4
x55886:	mov bp, [bp + 2]	; 3: 139 110 2
x55889:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

@6186$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55891:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6233$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55913:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6283$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55935:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6333$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55957:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6377$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55979:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6424$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56001:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6474$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56023:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6524$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56045:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6568$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56067:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6612$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56089:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6656$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56111:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6700$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56133:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6744$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56155:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6788$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56177:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6832$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56199:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6876$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56221:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6920$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56243:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6964$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56265:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtoul:	; Assign g_inStatus 1
x56287:	mov word [g_inStatus], 1	; 6: 199 6 217 95 1 0

strtoul$1:	; Assign g_inDevice s
x56293:	mov ax, [bp + 6]	; 3: 139 70 6
x56296:	mov [g_inDevice], ax	; 3: 163 219 95

strtoul$2:	; Assign g_inChars 0
x56299:	mov word [g_inChars], 0	; 6: 199 6 254 100 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x56305:	mov ax, [bp + 10]	; 3: 139 70 10
x56308:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x56311:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 5 220
x56316:	mov [bp + 14], bp	; 3: 137 110 14
x56319:	add bp, 12	; 3: 131 197 12
x56322:	jmp scanUnsignedLongInt	; 3: 233 40 144

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2251

strtoul$8:	; Assign unsignedLongValue £temporary2251
x56325:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x56329:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x56333:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2253 -> endp endp 0
x56335:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2253 -> endp s g_inChars
x56338:	mov ax, [bp + 6]	; 3: 139 70 6
x56341:	add ax, [g_inChars]	; 4: 3 6 254 100
x56345:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x56347:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x56351:	mov ax, [bp]	; 3: 139 70 0
x56354:	mov di, [bp + 4]	; 3: 139 126 4
x56357:	mov bp, [bp + 2]	; 3: 139 110 2
x56360:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x56362:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x56366:	mov word [bp + 6], character_test$3	; 5: 199 70 6 60 220
x56371:	mov [bp + 8], bp	; 3: 137 110 8
x56374:	add bp, 6	; 3: 131 197 6
x56377:	nop	; 1: 144
x56378:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x56380:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x56384:	mov word [bp + 6], character_test$7	; 5: 199 70 6 78 220
x56389:	mov [bp + 8], bp	; 3: 137 110 8
x56392:	add bp, 6	; 3: 131 197 6
x56395:	nop	; 1: 144
x56396:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x56398:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x56402:	mov word [bp + 6], character_test$11	; 5: 199 70 6 96 220
x56407:	mov [bp + 8], bp	; 3: 137 110 8
x56410:	add bp, 6	; 3: 131 197 6
x56413:	nop	; 1: 144
x56414:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x56416:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x56420:	mov word [bp + 6], character_test$15	; 5: 199 70 6 114 220
x56425:	mov [bp + 8], bp	; 3: 137 110 8
x56428:	add bp, 6	; 3: 131 197 6
x56431:	nop	; 1: 144
x56432:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x56434:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x56438:	mov word [bp + 6], character_test$19	; 5: 199 70 6 132 220
x56443:	mov [bp + 8], bp	; 3: 137 110 8
x56446:	add bp, 6	; 3: 131 197 6
x56449:	nop	; 1: 144
x56450:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x56452:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x56456:	mov word [bp + 6], character_test$23	; 5: 199 70 6 150 220
x56461:	mov [bp + 8], bp	; 3: 137 110 8
x56464:	add bp, 6	; 3: 131 197 6
x56467:	nop	; 1: 144
x56468:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x56470:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x56474:	mov word [bp + 6], character_test$27	; 5: 199 70 6 168 220
x56479:	mov [bp + 8], bp	; 3: 137 110 8
x56482:	add bp, 6	; 3: 131 197 6
x56485:	nop	; 1: 144
x56486:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x56488:	mov ax, [bp]	; 3: 139 70 0
x56491:	mov di, [bp + 4]	; 3: 139 126 4
x56494:	mov bp, [bp + 2]	; 3: 139 110 2
x56497:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x56499:	mov word [bp + 13], @9185$string_ascii2025i0A#	; 5: 199 70 13 113 225

character_testX$2:	; IntegralToIntegral £temporary4042 c
x56504:	mov al, [bp + 6]	; 3: 138 70 6
x56507:	and ax, 255	; 3: 37 255 0
x56510:	cmp al, 0	; 2: 60 0
x56512:	jge character_testX$3	; 2: 125 4
x56514:	neg al	; 2: 246 216
x56516:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4042 8
x56518:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x56521:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 220 220
x56526:	mov [bp + 9], bp	; 3: 137 110 9
x56529:	add bp, 7	; 3: 131 197 7
x56532:	mov di, bp	; 2: 137 239
x56534:	add di, 2	; 3: 131 199 2
x56537:	jmp printf	; 3: 233 40 48

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x56540:	mov word [bp + 13], @9188$string_islower282725c2729203D2025s0A#	; 5: 199 70 13 123 225

character_testX$8:	; IntegralToIntegral £temporary4044 c
x56545:	mov al, [bp + 6]	; 3: 138 70 6
x56548:	and ax, 255	; 3: 37 255 0
x56551:	cmp al, 0	; 2: 60 0
x56553:	jge character_testX$9	; 2: 125 4
x56555:	neg al	; 2: 246 216
x56557:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4044 8
x56559:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4045 c
x56562:	mov al, [bp + 6]	; 3: 138 70 6
x56565:	and ax, 255	; 3: 37 255 0
x56568:	cmp al, 0	; 2: 60 0
x56570:	jge character_testX$12	; 2: 125 4
x56572:	neg al	; 2: 246 216
x56574:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4045 16
x56576:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x56579:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 17 221
x56584:	mov [bp + 19], bp	; 3: 137 110 19
x56587:	add bp, 17	; 3: 131 197 17
x56590:	jmp islower	; 3: 233 179 141

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4046

character_testX$16:	; Equal 19 £temporary4046 0
x56593:	cmp bx, 0	; 3: 131 251 0
x56596:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4051 string_Yes#
x56598:	mov ax, @9195$string_Yes#	; 3: 184 143 225

character_testX$18:	; Goto 20
x56601:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4051 string_No#
x56603:	mov ax, @9196$string_No#	; 3: 184 147 225

character_testX$20:	; Parameter 7 £temporary4051 10
x56606:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x56609:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 52 221
x56614:	mov [bp + 9], bp	; 3: 137 110 9
x56617:	add bp, 7	; 3: 131 197 7
x56620:	mov di, bp	; 2: 137 239
x56622:	add di, 4	; 3: 131 199 4
x56625:	jmp printf	; 3: 233 208 47

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x56628:	mov word [bp + 13], @9204$string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 150 225

character_testX$25:	; IntegralToIntegral £temporary4053 c
x56633:	mov al, [bp + 6]	; 3: 138 70 6
x56636:	and ax, 255	; 3: 37 255 0
x56639:	cmp al, 0	; 2: 60 0
x56641:	jge character_testX$26	; 2: 125 4
x56643:	neg al	; 2: 246 216
x56645:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4053 8
x56647:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4054 c
x56650:	mov al, [bp + 6]	; 3: 138 70 6
x56653:	and ax, 255	; 3: 37 255 0
x56656:	cmp al, 0	; 2: 60 0
x56658:	jge character_testX$29	; 2: 125 4
x56660:	neg al	; 2: 246 216
x56662:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4054 16
x56664:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x56667:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 105 221
x56672:	mov [bp + 19], bp	; 3: 137 110 19
x56675:	add bp, 17	; 3: 131 197 17
x56678:	jmp isupper	; 3: 233 164 64

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4055

character_testX$33:	; Equal 36 £temporary4055 0
x56681:	cmp bx, 0	; 3: 131 251 0
x56684:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4060 string_Yes#
x56686:	mov ax, @9211$string_Yes#	; 3: 184 170 225

character_testX$35:	; Goto 37
x56689:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4060 string_No#
x56691:	mov ax, @9212$string_No#	; 3: 184 174 225

character_testX$37:	; Parameter 7 £temporary4060 10
x56694:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x56697:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 140 221
x56702:	mov [bp + 9], bp	; 3: 137 110 9
x56705:	add bp, 7	; 3: 131 197 7
x56708:	mov di, bp	; 2: 137 239
x56710:	add di, 4	; 3: 131 199 4
x56713:	jmp printf	; 3: 233 120 47

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x56716:	mov word [bp + 13], @9220$string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 177 225

character_testX$42:	; IntegralToIntegral £temporary4062 c
x56721:	mov al, [bp + 6]	; 3: 138 70 6
x56724:	and ax, 255	; 3: 37 255 0
x56727:	cmp al, 0	; 2: 60 0
x56729:	jge character_testX$43	; 2: 125 4
x56731:	neg al	; 2: 246 216
x56733:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4062 8
x56735:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4063 c
x56738:	mov al, [bp + 6]	; 3: 138 70 6
x56741:	and ax, 255	; 3: 37 255 0
x56744:	cmp al, 0	; 2: 60 0
x56746:	jge character_testX$46	; 2: 125 4
x56748:	neg al	; 2: 246 216
x56750:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4063 16
x56752:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x56755:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 193 221
x56760:	mov [bp + 19], bp	; 3: 137 110 19
x56763:	add bp, 17	; 3: 131 197 17
x56766:	jmp isalpha	; 3: 233 17 5

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4064

character_testX$50:	; Equal 53 £temporary4064 0
x56769:	cmp bx, 0	; 3: 131 251 0
x56772:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4069 string_Yes#
x56774:	mov ax, @9227$string_Yes#	; 3: 184 197 225

character_testX$52:	; Goto 54
x56777:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4069 string_No#
x56779:	mov ax, @9228$string_No#	; 3: 184 201 225

character_testX$54:	; Parameter 7 £temporary4069 10
x56782:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x56785:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 228 221
x56790:	mov [bp + 9], bp	; 3: 137 110 9
x56793:	add bp, 7	; 3: 131 197 7
x56796:	mov di, bp	; 2: 137 239
x56798:	add di, 4	; 3: 131 199 4
x56801:	jmp printf	; 3: 233 32 47

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x56804:	mov word [bp + 13], @9236$string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 204 225

character_testX$59:	; IntegralToIntegral £temporary4071 c
x56809:	mov al, [bp + 6]	; 3: 138 70 6
x56812:	and ax, 255	; 3: 37 255 0
x56815:	cmp al, 0	; 2: 60 0
x56817:	jge character_testX$60	; 2: 125 4
x56819:	neg al	; 2: 246 216
x56821:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4071 8
x56823:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4072 c
x56826:	mov al, [bp + 6]	; 3: 138 70 6
x56829:	and ax, 255	; 3: 37 255 0
x56832:	cmp al, 0	; 2: 60 0
x56834:	jge character_testX$63	; 2: 125 4
x56836:	neg al	; 2: 246 216
x56838:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4072 16
x56840:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x56843:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 25 222
x56848:	mov [bp + 19], bp	; 3: 137 110 19
x56851:	add bp, 17	; 3: 131 197 17
x56854:	jmp isdigit	; 3: 233 83 77

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4073

character_testX$67:	; Equal 70 £temporary4073 0
x56857:	cmp bx, 0	; 3: 131 251 0
x56860:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4078 string_Yes#
x56862:	mov ax, @9243$string_Yes#	; 3: 184 224 225

character_testX$69:	; Goto 71
x56865:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4078 string_No#
x56867:	mov ax, @9244$string_No#	; 3: 184 228 225

character_testX$71:	; Parameter 7 £temporary4078 10
x56870:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x56873:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 60 222
x56878:	mov [bp + 9], bp	; 3: 137 110 9
x56881:	add bp, 7	; 3: 131 197 7
x56884:	mov di, bp	; 2: 137 239
x56886:	add di, 4	; 3: 131 199 4
x56889:	jmp printf	; 3: 233 200 46

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x56892:	mov word [bp + 13], @9252$string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 231 225

character_testX$76:	; IntegralToIntegral £temporary4080 c
x56897:	mov al, [bp + 6]	; 3: 138 70 6
x56900:	and ax, 255	; 3: 37 255 0
x56903:	cmp al, 0	; 2: 60 0
x56905:	jge character_testX$77	; 2: 125 4
x56907:	neg al	; 2: 246 216
x56909:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4080 8
x56911:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4081 c
x56914:	mov al, [bp + 6]	; 3: 138 70 6
x56917:	and ax, 255	; 3: 37 255 0
x56920:	cmp al, 0	; 2: 60 0
x56922:	jge character_testX$80	; 2: 125 4
x56924:	neg al	; 2: 246 216
x56926:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4081 16
x56928:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x56931:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 113 222
x56936:	mov [bp + 19], bp	; 3: 137 110 19
x56939:	add bp, 17	; 3: 131 197 17
x56942:	jmp isalnum	; 3: 233 166 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4082

character_testX$84:	; Equal 87 £temporary4082 0
x56945:	cmp bx, 0	; 3: 131 251 0
x56948:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4087 string_Yes#
x56950:	mov ax, @9259$string_Yes#	; 3: 184 251 225

character_testX$86:	; Goto 88
x56953:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4087 string_No#
x56955:	mov ax, @9260$string_No#	; 3: 184 255 225

character_testX$88:	; Parameter 7 £temporary4087 10
x56958:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x56961:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 148 222
x56966:	mov [bp + 9], bp	; 3: 137 110 9
x56969:	add bp, 7	; 3: 131 197 7
x56972:	mov di, bp	; 2: 137 239
x56974:	add di, 4	; 3: 131 199 4
x56977:	jmp printf	; 3: 233 112 46

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x56980:	mov word [bp + 13], @9268$string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 2 226

character_testX$93:	; IntegralToIntegral £temporary4089 c
x56985:	mov al, [bp + 6]	; 3: 138 70 6
x56988:	and ax, 255	; 3: 37 255 0
x56991:	cmp al, 0	; 2: 60 0
x56993:	jge character_testX$94	; 2: 125 4
x56995:	neg al	; 2: 246 216
x56997:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4089 8
x56999:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4090 c
x57002:	mov al, [bp + 6]	; 3: 138 70 6
x57005:	and ax, 255	; 3: 37 255 0
x57008:	cmp al, 0	; 2: 60 0
x57010:	jge character_testX$97	; 2: 125 4
x57012:	neg al	; 2: 246 216
x57014:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4090 16
x57016:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x57019:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 201 222
x57024:	mov [bp + 19], bp	; 3: 137 110 19
x57027:	add bp, 17	; 3: 131 197 17
x57030:	jmp isxdigit	; 3: 233 147 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4091

character_testX$101:	; Equal 104 £temporary4091 0
x57033:	cmp bx, 0	; 3: 131 251 0
x57036:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4096 string_Yes#
x57038:	mov ax, @9275$string_Yes#	; 3: 184 23 226

character_testX$103:	; Goto 105
x57041:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4096 string_No#
x57043:	mov ax, @9276$string_No#	; 3: 184 27 226

character_testX$105:	; Parameter 7 £temporary4096 10
x57046:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x57049:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 236 222
x57054:	mov [bp + 9], bp	; 3: 137 110 9
x57057:	add bp, 7	; 3: 131 197 7
x57060:	mov di, bp	; 2: 137 239
x57062:	add di, 4	; 3: 131 199 4
x57065:	jmp printf	; 3: 233 24 46

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x57068:	mov word [bp + 13], @9284$string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 30 226

character_testX$110:	; IntegralToIntegral £temporary4098 c
x57073:	mov al, [bp + 6]	; 3: 138 70 6
x57076:	and ax, 255	; 3: 37 255 0
x57079:	cmp al, 0	; 2: 60 0
x57081:	jge character_testX$111	; 2: 125 4
x57083:	neg al	; 2: 246 216
x57085:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4098 8
x57087:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4099 c
x57090:	mov al, [bp + 6]	; 3: 138 70 6
x57093:	and ax, 255	; 3: 37 255 0
x57096:	cmp al, 0	; 2: 60 0
x57098:	jge character_testX$114	; 2: 125 4
x57100:	neg al	; 2: 246 216
x57102:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4099 16
x57104:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x57107:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 33 223
x57112:	mov [bp + 19], bp	; 3: 137 110 19
x57115:	add bp, 17	; 3: 131 197 17
x57118:	jmp isgraph	; 3: 233 127 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4100

character_testX$118:	; Equal 121 £temporary4100 0
x57121:	cmp bx, 0	; 3: 131 251 0
x57124:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4105 string_Yes#
x57126:	mov ax, @9291$string_Yes#	; 3: 184 50 226

character_testX$120:	; Goto 122
x57129:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4105 string_No#
x57131:	mov ax, @9292$string_No#	; 3: 184 54 226

character_testX$122:	; Parameter 7 £temporary4105 10
x57134:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x57137:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 68 223
x57142:	mov [bp + 9], bp	; 3: 137 110 9
x57145:	add bp, 7	; 3: 131 197 7
x57148:	mov di, bp	; 2: 137 239
x57150:	add di, 4	; 3: 131 199 4
x57153:	jmp printf	; 3: 233 192 45

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x57156:	mov word [bp + 13], @9300$string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 57 226

character_testX$127:	; IntegralToIntegral £temporary4107 c
x57161:	mov al, [bp + 6]	; 3: 138 70 6
x57164:	and ax, 255	; 3: 37 255 0
x57167:	cmp al, 0	; 2: 60 0
x57169:	jge character_testX$128	; 2: 125 4
x57171:	neg al	; 2: 246 216
x57173:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4107 8
x57175:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4108 c
x57178:	mov al, [bp + 6]	; 3: 138 70 6
x57181:	and ax, 255	; 3: 37 255 0
x57184:	cmp al, 0	; 2: 60 0
x57186:	jge character_testX$131	; 2: 125 4
x57188:	neg al	; 2: 246 216
x57190:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4108 16
x57192:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x57195:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 121 223
x57200:	mov [bp + 19], bp	; 3: 137 110 19
x57203:	add bp, 17	; 3: 131 197 17
x57206:	jmp isprint	; 3: 233 70 4

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4109

character_testX$135:	; Equal 138 £temporary4109 0
x57209:	cmp bx, 0	; 3: 131 251 0
x57212:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4114 string_Yes#
x57214:	mov ax, @9307$string_Yes#	; 3: 184 77 226

character_testX$137:	; Goto 139
x57217:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4114 string_No#
x57219:	mov ax, @9308$string_No#	; 3: 184 81 226

character_testX$139:	; Parameter 7 £temporary4114 10
x57222:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x57225:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 156 223
x57230:	mov [bp + 9], bp	; 3: 137 110 9
x57233:	add bp, 7	; 3: 131 197 7
x57236:	mov di, bp	; 2: 137 239
x57238:	add di, 4	; 3: 131 199 4
x57241:	jmp printf	; 3: 233 104 45

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x57244:	mov word [bp + 13], @9316$string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 84 226

character_testX$144:	; IntegralToIntegral £temporary4116 c
x57249:	mov al, [bp + 6]	; 3: 138 70 6
x57252:	and ax, 255	; 3: 37 255 0
x57255:	cmp al, 0	; 2: 60 0
x57257:	jge character_testX$145	; 2: 125 4
x57259:	neg al	; 2: 246 216
x57261:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4116 8
x57263:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4117 c
x57266:	mov al, [bp + 6]	; 3: 138 70 6
x57269:	and ax, 255	; 3: 37 255 0
x57272:	cmp al, 0	; 2: 60 0
x57274:	jge character_testX$148	; 2: 125 4
x57276:	neg al	; 2: 246 216
x57278:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4117 16
x57280:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x57283:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 209 223
x57288:	mov [bp + 19], bp	; 3: 137 110 19
x57291:	add bp, 17	; 3: 131 197 17
x57294:	jmp ispunct	; 3: 233 32 4

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4118

character_testX$152:	; Equal 155 £temporary4118 0
x57297:	cmp bx, 0	; 3: 131 251 0
x57300:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4123 string_Yes#
x57302:	mov ax, @9323$string_Yes#	; 3: 184 104 226

character_testX$154:	; Goto 156
x57305:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4123 string_No#
x57307:	mov ax, @9324$string_No#	; 3: 184 108 226

character_testX$156:	; Parameter 7 £temporary4123 10
x57310:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x57313:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 244 223
x57318:	mov [bp + 9], bp	; 3: 137 110 9
x57321:	add bp, 7	; 3: 131 197 7
x57324:	mov di, bp	; 2: 137 239
x57326:	add di, 4	; 3: 131 199 4
x57329:	jmp printf	; 3: 233 16 45

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x57332:	mov word [bp + 13], @9332$string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 111 226

character_testX$161:	; IntegralToIntegral £temporary4125 c
x57337:	mov al, [bp + 6]	; 3: 138 70 6
x57340:	and ax, 255	; 3: 37 255 0
x57343:	cmp al, 0	; 2: 60 0
x57345:	jge character_testX$162	; 2: 125 4
x57347:	neg al	; 2: 246 216
x57349:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4125 8
x57351:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4126 c
x57354:	mov al, [bp + 6]	; 3: 138 70 6
x57357:	and ax, 255	; 3: 37 255 0
x57360:	cmp al, 0	; 2: 60 0
x57362:	jge character_testX$165	; 2: 125 4
x57364:	neg al	; 2: 246 216
x57366:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4126 16
x57368:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x57371:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 41 224
x57376:	mov [bp + 19], bp	; 3: 137 110 19
x57379:	add bp, 17	; 3: 131 197 17
x57382:	jmp iscntrl	; 3: 233 13 4

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4127

character_testX$169:	; Equal 172 £temporary4127 0
x57385:	cmp bx, 0	; 3: 131 251 0
x57388:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4132 string_Yes#
x57390:	mov ax, @9339$string_Yes#	; 3: 184 131 226

character_testX$171:	; Goto 173
x57393:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4132 string_No#
x57395:	mov ax, @9340$string_No#	; 3: 184 135 226

character_testX$173:	; Parameter 7 £temporary4132 10
x57398:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x57401:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 76 224
x57406:	mov [bp + 9], bp	; 3: 137 110 9
x57409:	add bp, 7	; 3: 131 197 7
x57412:	mov di, bp	; 2: 137 239
x57414:	add di, 4	; 3: 131 199 4
x57417:	jmp printf	; 3: 233 184 44

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x57420:	mov word [bp + 13], @9348$string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 138 226

character_testX$178:	; IntegralToIntegral £temporary4134 c
x57425:	mov al, [bp + 6]	; 3: 138 70 6
x57428:	and ax, 255	; 3: 37 255 0
x57431:	cmp al, 0	; 2: 60 0
x57433:	jge character_testX$179	; 2: 125 4
x57435:	neg al	; 2: 246 216
x57437:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4134 8
x57439:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4135 c
x57442:	mov al, [bp + 6]	; 3: 138 70 6
x57445:	and ax, 255	; 3: 37 255 0
x57448:	cmp al, 0	; 2: 60 0
x57450:	jge character_testX$182	; 2: 125 4
x57452:	neg al	; 2: 246 216
x57454:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4135 16
x57456:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x57459:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 129 224
x57464:	mov [bp + 19], bp	; 3: 137 110 19
x57467:	add bp, 17	; 3: 131 197 17
x57470:	jmp isspace	; 3: 233 59 135

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4136

character_testX$186:	; Equal 189 £temporary4136 0
x57473:	cmp bx, 0	; 3: 131 251 0
x57476:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4141 string_Yes#
x57478:	mov ax, @9355$string_Yes#	; 3: 184 158 226

character_testX$188:	; Goto 190
x57481:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4141 string_No#
x57483:	mov ax, @9356$string_No#	; 3: 184 162 226

character_testX$190:	; Parameter 7 £temporary4141 10
x57486:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x57489:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 164 224
x57494:	mov [bp + 9], bp	; 3: 137 110 9
x57497:	add bp, 7	; 3: 131 197 7
x57500:	mov di, bp	; 2: 137 239
x57502:	add di, 4	; 3: 131 199 4
x57505:	jmp printf	; 3: 233 96 44

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x57508:	mov word [bp + 13], @9364$string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 165 226

character_testX$195:	; IntegralToIntegral £temporary4143 c
x57513:	mov al, [bp + 6]	; 3: 138 70 6
x57516:	and ax, 255	; 3: 37 255 0
x57519:	cmp al, 0	; 2: 60 0
x57521:	jge character_testX$196	; 2: 125 4
x57523:	neg al	; 2: 246 216
x57525:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4143 8
x57527:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4144 c
x57530:	mov al, [bp + 6]	; 3: 138 70 6
x57533:	and ax, 255	; 3: 37 255 0
x57536:	cmp al, 0	; 2: 60 0
x57538:	jge character_testX$199	; 2: 125 4
x57540:	neg al	; 2: 246 216
x57542:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4144 16
x57544:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x57547:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 217 224
x57552:	mov [bp + 19], bp	; 3: 137 110 19
x57555:	add bp, 17	; 3: 131 197 17
x57558:	jmp tolower	; 3: 233 70 68

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4145

character_testX$203:	; IntegralToIntegral £temporary4146 £temporary4145
x57561:	cmp bx, 0	; 3: 131 251 0
x57564:	jge character_testX$204	; 2: 125 4
x57566:	neg bx	; 2: 247 219
x57568:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4147 £temporary4146
x57570:	and bx, 255	; 4: 129 227 255 0
x57574:	cmp bl, 0	; 3: 128 251 0
x57577:	jge character_testX$205	; 2: 125 4
x57579:	neg bl	; 2: 246 219
x57581:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4147 10
x57583:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x57586:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 5 225
x57591:	mov [bp + 9], bp	; 3: 137 110 9
x57594:	add bp, 7	; 3: 131 197 7
x57597:	mov di, bp	; 2: 137 239
x57599:	add di, 4	; 3: 131 199 4
x57602:	jmp printf	; 3: 233 255 43

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x57605:	mov word [bp + 13], @9371$string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 187 226

character_testX$210:	; IntegralToIntegral £temporary4149 c
x57610:	mov al, [bp + 6]	; 3: 138 70 6
x57613:	and ax, 255	; 3: 37 255 0
x57616:	cmp al, 0	; 2: 60 0
x57618:	jge character_testX$211	; 2: 125 4
x57620:	neg al	; 2: 246 216
x57622:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4149 8
x57624:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4150 c
x57627:	mov al, [bp + 6]	; 3: 138 70 6
x57630:	and ax, 255	; 3: 37 255 0
x57633:	cmp al, 0	; 2: 60 0
x57635:	jge character_testX$214	; 2: 125 4
x57637:	neg al	; 2: 246 216
x57639:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4150 16
x57641:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x57644:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 58 225
x57649:	mov [bp + 19], bp	; 3: 137 110 19
x57652:	add bp, 17	; 3: 131 197 17
x57655:	jmp toupper	; 3: 233 40 3

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4151

character_testX$218:	; IntegralToIntegral £temporary4152 £temporary4151
x57658:	cmp bx, 0	; 3: 131 251 0
x57661:	jge character_testX$219	; 2: 125 4
x57663:	neg bx	; 2: 247 219
x57665:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4153 £temporary4152
x57667:	and bx, 255	; 4: 129 227 255 0
x57671:	cmp bl, 0	; 3: 128 251 0
x57674:	jge character_testX$220	; 2: 125 4
x57676:	neg bl	; 2: 246 219
x57678:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4153 10
x57680:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x57683:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 102 225
x57688:	mov [bp + 9], bp	; 3: 137 110 9
x57691:	add bp, 7	; 3: 131 197 7
x57694:	mov di, bp	; 2: 137 239
x57696:	add di, 4	; 3: 131 199 4
x57699:	jmp printf	; 3: 233 158 43

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x57702:	mov ax, [bp]	; 3: 139 70 0
x57705:	mov di, [bp + 4]	; 3: 139 126 4
x57708:	mov bp, [bp + 2]	; 3: 139 110 2
x57711:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

@9185$string_ascii2025i0A#:
x57713:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

@9188$string_islower282725c2729203D2025s0A#:
x57723:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9195$string_Yes#:
x57743:	db "Yes", 0	; 4: 89 101 115 0

@9196$string_No#:
x57747:	db "No", 0	; 3: 78 111 0

@9204$string_isupper282725c2729203D2025s0A#:
x57750:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9211$string_Yes#:
x57770:	db "Yes", 0	; 4: 89 101 115 0

@9212$string_No#:
x57774:	db "No", 0	; 3: 78 111 0

@9220$string_isalpha282725c2729203D2025s0A#:
x57777:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

@9227$string_Yes#:
x57797:	db "Yes", 0	; 4: 89 101 115 0

@9228$string_No#:
x57801:	db "No", 0	; 3: 78 111 0

@9236$string_isdigit282725c2729203D2025s0A#:
x57804:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9243$string_Yes#:
x57824:	db "Yes", 0	; 4: 89 101 115 0

@9244$string_No#:
x57828:	db "No", 0	; 3: 78 111 0

@9252$string_isalnum282725c2729203D2025s0A#:
x57831:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

@9259$string_Yes#:
x57851:	db "Yes", 0	; 4: 89 101 115 0

@9260$string_No#:
x57855:	db "No", 0	; 3: 78 111 0

@9268$string_isxdigit282725c2729203D2025s0A#:
x57858:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9275$string_Yes#:
x57879:	db "Yes", 0	; 4: 89 101 115 0

@9276$string_No#:
x57883:	db "No", 0	; 3: 78 111 0

@9284$string_isgraph282725c2729203D2025s0A#:
x57886:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

@9291$string_Yes#:
x57906:	db "Yes", 0	; 4: 89 101 115 0

@9292$string_No#:
x57910:	db "No", 0	; 3: 78 111 0

@9300$string_isprint282725c2729203D2025s0A#:
x57913:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9307$string_Yes#:
x57933:	db "Yes", 0	; 4: 89 101 115 0

@9308$string_No#:
x57937:	db "No", 0	; 3: 78 111 0

@9316$string_ispunct282725c2729203D2025s0A#:
x57940:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9323$string_Yes#:
x57960:	db "Yes", 0	; 4: 89 101 115 0

@9324$string_No#:
x57964:	db "No", 0	; 3: 78 111 0

@9332$string_iscntrl282725c2729203D2025s0A#:
x57967:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

@9339$string_Yes#:
x57987:	db "Yes", 0	; 4: 89 101 115 0

@9340$string_No#:
x57991:	db "No", 0	; 3: 78 111 0

@9348$string_isspace282725c2729203D2025s0A#:
x57994:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

@9355$string_Yes#:
x58014:	db "Yes", 0	; 4: 89 101 115 0

@9356$string_No#:
x58018:	db "No", 0	; 3: 78 111 0

@9364$string_tolower282725c2729203D202725c270A#:
x58021:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

@9371$string_toupper282725c2729203D202725c270A0A#:
x58043:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x58066:	mov ax, [bp + 6]	; 3: 139 70 6
x58069:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x58072:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 230 226
x58077:	mov [bp + 10], bp	; 3: 137 110 10
x58080:	add bp, 8	; 3: 131 197 8
x58083:	jmp islower	; 3: 233 222 135

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary184

isalpha$5:	; NotEqual 12 £temporary184 0
x58086:	cmp bx, 0	; 3: 131 251 0
x58089:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x58091:	mov ax, [bp + 6]	; 3: 139 70 6
x58094:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x58097:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 255 226
x58102:	mov [bp + 10], bp	; 3: 137 110 10
x58105:	add bp, 8	; 3: 131 197 8
x58108:	jmp isupper	; 3: 233 14 59

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary185

isalpha$11:	; Equal 14 £temporary185 0
x58111:	cmp bx, 0	; 3: 131 251 0
x58114:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary189 1
x58116:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x58119:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary189 0
x58121:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary189

isalpha$16:	; Return £temporary189
x58124:	mov ax, [bp]	; 3: 139 70 0
x58127:	mov di, [bp + 4]	; 3: 139 126 4
x58130:	mov bp, [bp + 2]	; 3: 139 110 2
x58133:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x58135:	mov ax, [bp + 6]	; 3: 139 70 6
x58138:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x58141:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 43 227
x58146:	mov [bp + 10], bp	; 3: 137 110 10
x58149:	add bp, 8	; 3: 131 197 8
x58152:	nop	; 1: 144
x58153:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary196

isalnum$5:	; NotEqual 12 £temporary196 0
x58155:	cmp bx, 0	; 3: 131 251 0
x58158:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x58160:	mov ax, [bp + 6]	; 3: 139 70 6
x58163:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x58166:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 68 227
x58171:	mov [bp + 10], bp	; 3: 137 110 10
x58174:	add bp, 8	; 3: 131 197 8
x58177:	jmp isdigit	; 3: 233 40 72

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary197

isalnum$11:	; Equal 14 £temporary197 0
x58180:	cmp bx, 0	; 3: 131 251 0
x58183:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary201 1
x58185:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x58188:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary201 0
x58190:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary201

isalnum$16:	; Return £temporary201
x58193:	mov ax, [bp]	; 3: 139 70 0
x58196:	mov di, [bp + 4]	; 3: 139 126 4
x58199:	mov bp, [bp + 2]	; 3: 139 110 2
x58202:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x58204:	mov ax, [bp + 6]	; 3: 139 70 6
x58207:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x58210:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 112 227
x58215:	mov [bp + 10], bp	; 3: 137 110 10
x58218:	add bp, 8	; 3: 131 197 8
x58221:	jmp isdigit	; 3: 233 252 71

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary204

isxdigit$5:	; NotEqual 10 £temporary204 0
x58224:	cmp bx, 0	; 3: 131 251 0
x58227:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x58229:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x58233:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x58235:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x58239:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x58241:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x58245:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x58247:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x58251:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary214 1
x58253:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x58256:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary214 0
x58258:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary214

isxdigit$14:	; Return £temporary214
x58261:	mov ax, [bp]	; 3: 139 70 0
x58264:	mov di, [bp + 4]	; 3: 139 126 4
x58267:	mov bp, [bp + 2]	; 3: 139 110 2
x58270:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x58272:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58276:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x58278:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x58282:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary219 1
x58284:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x58287:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary219 0
x58289:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary219

isgraph$6:	; Return £temporary219
x58292:	mov ax, [bp]	; 3: 139 70 0
x58295:	mov di, [bp + 4]	; 3: 139 126 4
x58298:	mov bp, [bp + 2]	; 3: 139 110 2
x58301:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x58303:	mov ax, [bp + 6]	; 3: 139 70 6
x58306:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x58309:	mov word [bp + 8], isprint$3	; 5: 199 70 8 211 227
x58314:	mov [bp + 10], bp	; 3: 137 110 10
x58317:	add bp, 8	; 3: 131 197 8
x58320:	nop	; 1: 144
x58321:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary220

isprint$5:	; Equal 9 £temporary220 0
x58323:	cmp bx, 0	; 3: 131 251 0
x58326:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x58328:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58332:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary224 1
x58334:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x58337:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary224 0
x58339:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary224

isprint$11:	; Return £temporary224
x58342:	mov ax, [bp]	; 3: 139 70 0
x58345:	mov di, [bp + 4]	; 3: 139 126 4
x58348:	mov bp, [bp + 2]	; 3: 139 110 2
x58351:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x58353:	mov ax, [bp + 6]	; 3: 139 70 6
x58356:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x58359:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 5 228
x58364:	mov [bp + 10], bp	; 3: 137 110 10
x58367:	add bp, 8	; 3: 131 197 8
x58370:	nop	; 1: 144
x58371:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary226

ispunct$5:	; Equal 14 £temporary226 0
x58373:	cmp bx, 0	; 3: 131 251 0
x58376:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x58378:	mov ax, [bp + 6]	; 3: 139 70 6
x58381:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x58384:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 30 228
x58389:	mov [bp + 10], bp	; 3: 137 110 10
x58392:	add bp, 8	; 3: 131 197 8
x58395:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary227

ispunct$11:	; NotEqual 14 £temporary227 0
x58398:	cmp bx, 0	; 3: 131 251 0
x58401:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary232 1
x58403:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x58406:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary232 0
x58408:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary232

ispunct$16:	; Return £temporary232
x58411:	mov ax, [bp]	; 3: 139 70 0
x58414:	mov di, [bp + 4]	; 3: 139 126 4
x58417:	mov bp, [bp + 2]	; 3: 139 110 2
x58420:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x58422:	mov ax, [bp + 6]	; 3: 139 70 6
x58425:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x58428:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 74 228
x58433:	mov [bp + 10], bp	; 3: 137 110 10
x58436:	add bp, 8	; 3: 131 197 8
x58439:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary235

iscntrl$5:	; NotEqual 8 £temporary235 0
x58442:	cmp bx, 0	; 3: 131 251 0
x58445:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary238 1
x58447:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x58450:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary238 0
x58452:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary238

iscntrl$10:	; Return £temporary238
x58455:	mov ax, [bp]	; 3: 139 70 0
x58458:	mov di, [bp + 4]	; 3: 139 126 4
x58461:	mov bp, [bp + 2]	; 3: 139 110 2
x58464:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x58466:	mov ax, [bp + 6]	; 3: 139 70 6
x58469:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x58472:	mov word [bp + 8], toupper$3	; 5: 199 70 8 118 228
x58477:	mov [bp + 10], bp	; 3: 137 110 10
x58480:	add bp, 8	; 3: 131 197 8
x58483:	jmp islower	; 3: 233 78 134

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary267

toupper$5:	; Equal 31 £temporary267 0
x58486:	cmp bx, 0	; 3: 131 251 0
x58489:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x58491:	mov word [bp + 8], toupper$8	; 5: 199 70 8 137 228
x58496:	mov [bp + 10], bp	; 3: 137 110 10
x58499:	add bp, 8	; 3: 131 197 8
x58502:	jmp localeconv	; 3: 233 239 57

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary268

toupper$10:	; Assign localeConvPtr £temporary268
x58505:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x58508:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x58512:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary270 -> localeConvPtr localeConvPtr 12
x58514:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary270 -> localeConvPtr
x58517:	mov ax, [si + 12]	; 3: 139 68 12
x58520:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary271 -> localeConvPtr localeConvPtr 14
x58523:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary271 -> localeConvPtr
x58526:	mov ax, [si + 14]	; 3: 139 68 14
x58529:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x58532:	mov ax, [bp + 10]	; 3: 139 70 10
x58535:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x58538:	mov ax, [bp + 6]	; 3: 139 70 6
x58541:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x58544:	mov word [bp + 14], toupper$20	; 5: 199 70 14 190 228
x58549:	mov [bp + 16], bp	; 3: 137 110 16
x58552:	add bp, 14	; 3: 131 197 14
x58555:	jmp strchr	; 3: 233 0 61

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary272

toupper$22:	; BinarySubtract index £temporary272 lowerCase
x58558:	sub bx, [bp + 10]	; 3: 43 94 10
x58561:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary275 upperCase index
x58564:	mov si, [bp + 12]	; 3: 139 118 12
x58567:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary274 -> £temporary275 £temporary275 0

toupper$25:	; IntegralToIntegral £temporary276 £temporary274 -> £temporary275
x58570:	mov bl, [si]	; 2: 138 28
x58572:	and bx, 255	; 4: 129 227 255 0
x58576:	cmp bl, 0	; 3: 128 251 0
x58579:	jge toupper$26	; 2: 125 4
x58581:	neg bl	; 2: 246 219
x58583:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary276

toupper$27:	; Return £temporary276
x58585:	mov ax, [bp]	; 3: 139 70 0
x58588:	mov di, [bp + 4]	; 3: 139 126 4
x58591:	mov bp, [bp + 2]	; 3: 139 110 2
x58594:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary277 c 32
x58596:	mov bx, [bp + 6]	; 3: 139 94 6
x58599:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary277

toupper$30:	; Return £temporary277
x58602:	mov ax, [bp]	; 3: 139 70 0
x58605:	mov di, [bp + 4]	; 3: 139 126 4
x58608:	mov bp, [bp + 2]	; 3: 139 110 2
x58611:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x58613:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x58616:	mov ax, [bp]	; 3: 139 70 0
x58619:	mov di, [bp + 4]	; 3: 139 126 4
x58622:	mov bp, [bp + 2]	; 3: 139 110 2
x58625:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x58627:	mov ax, [bp]	; 3: 139 70 0
x58630:	mov di, [bp + 4]	; 3: 139 126 4
x58633:	mov bp, [bp + 2]	; 3: 139 110 2
x58636:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x58638:
