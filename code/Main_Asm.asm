	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 121 228
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 121 228 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 21 55

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 time_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp time_test	; 3: 233 157 117

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 assert_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp assert_test	; 3: 233 56 140

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 malloc_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp malloc_test	; 3: 233 243 140

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 print_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp print_test	; 3: 233 128 145

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 limits_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp limits_test	; 3: 233 213 149

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 float_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp float_test	; 3: 233 129 152

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 setjmp_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp setjmp_test	; 3: 233 126 152

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 stdio_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp stdio_test	; 3: 233 44 154

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 string_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp string_test	; 3: 233 156 169

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 16 154

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 60 183

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 22 194

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 216 205

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 154 217

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 101 226

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [@10024$float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 89 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [@10027$float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 68 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [@10030$float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 47 3

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 28 3

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [@10036$float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 7 3

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [@10039$float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 242 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 223 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [@10045$float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 202 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [@10048$float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 181 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [@10051$float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 160 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [@10054$float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 139 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [@10059$float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 118 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [@10062$float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 97 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [@10067$float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 76 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [@10073$float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 55 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [@10077$float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 34 2

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [@10082$float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 13 2

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [@10087$float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 82 49

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [@10090$float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [@10092$float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 54 49

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [@10097$float8$2.0#]	; 4: 221 6 62 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 28 49

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [@10102$float8$minus2.0#]	; 4: 221 6 70 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 2 49

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [@10107$float8$2.0#]	; 4: 221 6 78 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 232 48

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [@10112$float8$minus2.0#]	; 4: 221 6 86 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 206 48

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 182 48

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [@10121$float8$2#]	; 4: 221 6 94 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 156 48

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [@10126$float8$minus2#]	; 4: 221 6 102 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 130 48

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [@10130$float8$minus1.0#]	; 4: 221 6 110 5

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [@10132$float8$minus1.0#]	; 4: 221 6 118 5

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 102 48

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [@10135$float8$minus2.0#]	; 4: 221 6 126 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [@10137$float8$minus4.0#]	; 4: 221 6 134 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 74 48

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

@10024$float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

@10027$float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

@10030$float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

@10036$float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

@10039$float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

@10045$float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

@10048$float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

@10051$float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10054$float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

@10059$float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@10062$float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@10067$float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@10073$float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

@10077$float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@10082$float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

@10087$float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10090$float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

@10092$float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

@10097$float8$2.0#:
x1342:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10102$float8$minus2.0#:
x1350:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10107$float8$2.0#:
x1358:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10112$float8$minus2.0#:
x1366:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10121$float8$2#:
x1374:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10126$float8$minus2#:
x1382:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10130$float8$minus1.0#:
x1390:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10132$float8$minus1.0#:
x1398:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10135$float8$minus2.0#:
x1406:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10137$float8$minus4.0#:
x1414:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1422:	mov word [bp + 20], @10180$string_3C25f3E0A#	; 5: 199 70 20 196 10

math_test_1$2:	; PushFloat x
x1427:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1430:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1433:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 172 5
x1438:	mov [bp + 16], bp	; 3: 137 110 16
x1441:	add bp, 14	; 3: 131 197 14
x1444:	mov di, bp	; 2: 137 239
x1446:	add di, 8	; 3: 131 199 8
x1449:	jmp printf	; 3: 233 88 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1452:	mov word [bp + 20], @10182$string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 202 10

math_test_1$8:	; PushFloat x
x1457:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1460:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1463:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1466:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1469:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 203 5
x1474:	mov [bp + 32], bp	; 3: 137 110 32
x1477:	add bp, 30	; 3: 131 197 30
x1480:	jmp sin	; 3: 233 192 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4659

math_test_1$16:	; Parameter 14 £temporary4659 16
x1483:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1486:	mov ax, [errno]	; 3: 161 230 10
x1489:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1492:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 231 5
x1497:	mov [bp + 16], bp	; 3: 137 110 16
x1500:	add bp, 14	; 3: 131 197 14
x1503:	mov di, bp	; 2: 137 239
x1505:	add di, 18	; 3: 131 199 18
x1508:	jmp printf	; 3: 233 29 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1511:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1517:	mov word [bp + 20], @10187$string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 232 10

math_test_1$23:	; PushFloat x
x1522:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1525:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1528:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1531:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1534:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 12 6
x1539:	mov [bp + 32], bp	; 3: 137 110 32
x1542:	add bp, 30	; 3: 131 197 30
x1545:	jmp cos	; 3: 233 240 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4661

math_test_1$31:	; Parameter 14 £temporary4661 16
x1548:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1551:	mov ax, [errno]	; 3: 161 230 10
x1554:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1557:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 40 6
x1562:	mov [bp + 16], bp	; 3: 137 110 16
x1565:	add bp, 14	; 3: 131 197 14
x1568:	mov di, bp	; 2: 137 239
x1570:	add di, 18	; 3: 131 199 18
x1573:	jmp printf	; 3: 233 220 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1576:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1582:	mov word [bp + 20], @10192$string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 4 11

math_test_1$38:	; PushFloat x
x1587:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1590:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1593:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1596:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1599:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 77 6
x1604:	mov [bp + 32], bp	; 3: 137 110 32
x1607:	add bp, 30	; 3: 131 197 30
x1610:	jmp tan	; 3: 233 169 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4663

math_test_1$46:	; Parameter 14 £temporary4663 16
x1613:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1616:	mov ax, [errno]	; 3: 161 230 10
x1619:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1622:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 105 6
x1627:	mov [bp + 16], bp	; 3: 137 110 16
x1630:	add bp, 14	; 3: 131 197 14
x1633:	mov di, bp	; 2: 137 239
x1635:	add di, 18	; 3: 131 199 18
x1638:	jmp printf	; 3: 233 155 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1641:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1647:	mov word [bp + 20], @10197$string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 32 11

math_test_1$53:	; PushFloat x
x1652:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1655:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1658:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1661:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1664:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 142 6
x1669:	mov [bp + 32], bp	; 3: 137 110 32
x1672:	add bp, 30	; 3: 131 197 30
x1675:	jmp asin	; 3: 233 195 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4665

math_test_1$61:	; Parameter 14 £temporary4665 16
x1678:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1681:	mov ax, [errno]	; 3: 161 230 10
x1684:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1687:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 170 6
x1692:	mov [bp + 16], bp	; 3: 137 110 16
x1695:	add bp, 14	; 3: 131 197 14
x1698:	mov di, bp	; 2: 137 239
x1700:	add di, 18	; 3: 131 199 18
x1703:	jmp printf	; 3: 233 90 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1706:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1712:	mov word [bp + 20], @10202$string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 61 11

math_test_1$68:	; PushFloat x
x1717:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1720:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1723:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1726:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1729:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 207 6
x1734:	mov [bp + 32], bp	; 3: 137 110 32
x1737:	add bp, 30	; 3: 131 197 30
x1740:	jmp acos	; 3: 233 85 42

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4667

math_test_1$76:	; Parameter 14 £temporary4667 16
x1743:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1746:	mov ax, [errno]	; 3: 161 230 10
x1749:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1752:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 235 6
x1757:	mov [bp + 16], bp	; 3: 137 110 16
x1760:	add bp, 14	; 3: 131 197 14
x1763:	mov di, bp	; 2: 137 239
x1765:	add di, 18	; 3: 131 199 18
x1768:	jmp printf	; 3: 233 25 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1771:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1777:	mov word [bp + 20], @10207$string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 90 11

math_test_1$83:	; PushFloat x
x1782:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1785:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1788:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1791:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1794:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 16 7
x1799:	mov [bp + 32], bp	; 3: 137 110 32
x1802:	add bp, 30	; 3: 131 197 30
x1805:	jmp atan	; 3: 233 131 40

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4669

math_test_1$91:	; Parameter 14 £temporary4669 16
x1808:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1811:	mov ax, [errno]	; 3: 161 230 10
x1814:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1817:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 44 7
x1822:	mov [bp + 16], bp	; 3: 137 110 16
x1825:	add bp, 14	; 3: 131 197 14
x1828:	mov di, bp	; 2: 137 239
x1830:	add di, 18	; 3: 131 199 18
x1833:	jmp printf	; 3: 233 216 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1836:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1842:	mov word [bp + 20], @10212$string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 119 11

math_test_1$98:	; PushFloat x
x1847:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1850:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1853:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1856:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1859:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 81 7
x1864:	mov [bp + 32], bp	; 3: 137 110 32
x1867:	add bp, 30	; 3: 131 197 30
x1870:	jmp exp	; 3: 233 243 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4671

math_test_1$106:	; Parameter 14 £temporary4671 16
x1873:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1876:	mov ax, [errno]	; 3: 161 230 10
x1879:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1882:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 109 7
x1887:	mov [bp + 16], bp	; 3: 137 110 16
x1890:	add bp, 14	; 3: 131 197 14
x1893:	mov di, bp	; 2: 137 239
x1895:	add di, 18	; 3: 131 199 18
x1898:	jmp printf	; 3: 233 151 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1901:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1907:	mov word [bp + 20], @10217$string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 147 11

math_test_1$113:	; PushFloat x
x1912:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1915:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1918:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1921:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1924:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 146 7
x1929:	mov [bp + 32], bp	; 3: 137 110 32
x1932:	add bp, 30	; 3: 131 197 30
x1935:	jmp log	; 3: 233 201 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4673

math_test_1$121:	; Parameter 14 £temporary4673 16
x1938:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1941:	mov ax, [errno]	; 3: 161 230 10
x1944:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1947:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 174 7
x1952:	mov [bp + 16], bp	; 3: 137 110 16
x1955:	add bp, 14	; 3: 131 197 14
x1958:	mov di, bp	; 2: 137 239
x1960:	add di, 18	; 3: 131 199 18
x1963:	jmp printf	; 3: 233 86 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1966:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1972:	mov word [bp + 20], @10222$string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 175 11

math_test_1$128:	; PushFloat x
x1977:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1980:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1983:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1986:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1989:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 211 7
x1994:	mov [bp + 32], bp	; 3: 137 110 32
x1997:	add bp, 30	; 3: 131 197 30
x2000:	jmp log10	; 3: 233 91 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4675

math_test_1$136:	; Parameter 14 £temporary4675 16
x2003:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x2006:	mov ax, [errno]	; 3: 161 230 10
x2009:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x2012:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 239 7
x2017:	mov [bp + 16], bp	; 3: 137 110 16
x2020:	add bp, 14	; 3: 131 197 14
x2023:	mov di, bp	; 2: 137 239
x2025:	add di, 18	; 3: 131 199 18
x2028:	jmp printf	; 3: 233 21 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x2031:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x2037:	mov word [bp + 20], @10227$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 205 11

math_test_1$143:	; PushFloat x
x2042:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x2045:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2048:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2051:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2054:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 20 8
x2059:	mov [bp + 32], bp	; 3: 137 110 32
x2062:	add bp, 30	; 3: 131 197 30
x2065:	jmp sinh	; 3: 233 218 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4677

math_test_1$151:	; Parameter 14 £temporary4677 16
x2068:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2071:	mov ax, [errno]	; 3: 161 230 10
x2074:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2077:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 48 8
x2082:	mov [bp + 16], bp	; 3: 137 110 16
x2085:	add bp, 14	; 3: 131 197 14
x2088:	mov di, bp	; 2: 137 239
x2090:	add di, 18	; 3: 131 199 18
x2093:	jmp printf	; 3: 233 212 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2096:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2102:	mov word [bp + 20], @10232$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 234 11

math_test_1$158:	; PushFloat x
x2107:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2110:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2113:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2116:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2119:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 85 8
x2124:	mov [bp + 32], bp	; 3: 137 110 32
x2127:	add bp, 30	; 3: 131 197 30
x2130:	jmp cosh	; 3: 233 234 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4679

math_test_1$166:	; Parameter 14 £temporary4679 16
x2133:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2136:	mov ax, [errno]	; 3: 161 230 10
x2139:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2142:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 113 8
x2147:	mov [bp + 16], bp	; 3: 137 110 16
x2150:	add bp, 14	; 3: 131 197 14
x2153:	mov di, bp	; 2: 137 239
x2155:	add di, 18	; 3: 131 199 18
x2158:	jmp printf	; 3: 233 147 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2161:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2167:	mov word [bp + 20], @10237$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 7 12

math_test_1$173:	; PushFloat x
x2172:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2175:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2178:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2181:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2184:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 150 8
x2189:	mov [bp + 32], bp	; 3: 137 110 32
x2192:	add bp, 30	; 3: 131 197 30
x2195:	jmp tanh	; 3: 233 250 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4681

math_test_1$181:	; Parameter 14 £temporary4681 16
x2198:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2201:	mov ax, [errno]	; 3: 161 230 10
x2204:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2207:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 178 8
x2212:	mov [bp + 16], bp	; 3: 137 110 16
x2215:	add bp, 14	; 3: 131 197 14
x2218:	mov di, bp	; 2: 137 239
x2220:	add di, 18	; 3: 131 199 18
x2223:	jmp printf	; 3: 233 82 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2226:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2232:	mov word [bp + 20], @10242$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 36 12

math_test_1$188:	; PushFloat x
x2237:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2240:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2243:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2246:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2249:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 215 8
x2254:	mov [bp + 32], bp	; 3: 137 110 32
x2257:	add bp, 30	; 3: 131 197 30
x2260:	jmp sqrt	; 3: 233 56 38

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4683

math_test_1$196:	; Parameter 14 £temporary4683 16
x2263:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2266:	mov ax, [errno]	; 3: 161 230 10
x2269:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2272:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 243 8
x2277:	mov [bp + 16], bp	; 3: 137 110 16
x2280:	add bp, 14	; 3: 131 197 14
x2283:	mov di, bp	; 2: 137 239
x2285:	add di, 18	; 3: 131 199 18
x2288:	jmp printf	; 3: 233 17 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2291:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2297:	mov word [bp + 20], @10247$string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 65 12

math_test_1$203:	; PushFloat x
x2302:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2305:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2308:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2311:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2314:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 24 9
x2319:	mov [bp + 32], bp	; 3: 137 110 32
x2322:	add bp, 30	; 3: 131 197 30
x2325:	jmp floor	; 3: 233 170 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4685

math_test_1$211:	; Parameter 14 £temporary4685 16
x2328:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2331:	mov ax, [errno]	; 3: 161 230 10
x2334:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2337:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 52 9
x2342:	mov [bp + 16], bp	; 3: 137 110 16
x2345:	add bp, 14	; 3: 131 197 14
x2348:	mov di, bp	; 2: 137 239
x2350:	add di, 18	; 3: 131 199 18
x2353:	jmp printf	; 3: 233 208 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2356:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2362:	mov word [bp + 20], @10252$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 95 12

math_test_1$218:	; PushFloat x
x2367:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2370:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2373:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2376:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2379:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 89 9
x2384:	mov [bp + 32], bp	; 3: 137 110 32
x2387:	add bp, 30	; 3: 131 197 30
x2390:	jmp ceil	; 3: 233 183 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4687

math_test_1$226:	; Parameter 14 £temporary4687 16
x2393:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2396:	mov ax, [errno]	; 3: 161 230 10
x2399:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2402:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 117 9
x2407:	mov [bp + 16], bp	; 3: 137 110 16
x2410:	add bp, 14	; 3: 131 197 14
x2413:	mov di, bp	; 2: 137 239
x2415:	add di, 18	; 3: 131 199 18
x2418:	jmp printf	; 3: 233 143 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2421:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2427:	mov word [bp + 20], @10257$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 124 12

math_test_1$233:	; PushFloat x
x2432:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2435:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2438:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2441:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2444:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 154 9
x2449:	mov [bp + 32], bp	; 3: 137 110 32
x2452:	add bp, 30	; 3: 131 197 30
x2455:	jmp fabs	; 3: 233 98 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4689

math_test_1$241:	; Parameter 14 £temporary4689 16
x2458:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2461:	mov ax, [errno]	; 3: 161 230 10
x2464:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2467:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 182 9
x2472:	mov [bp + 16], bp	; 3: 137 110 16
x2475:	add bp, 14	; 3: 131 197 14
x2478:	mov di, bp	; 2: 137 239
x2480:	add di, 18	; 3: 131 199 18
x2483:	jmp printf	; 3: 233 78 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2486:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$246:	; Assign j 0
x2492:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2497:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2500:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4691 j
x2503:	mov si, bp	; 2: 137 238
x2505:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4691 14
x2508:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2511:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 221 9
x2516:	mov [bp + 18], bp	; 3: 137 110 18
x2519:	add bp, 16	; 3: 131 197 16
x2522:	jmp frexp	; 3: 233 244 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4692

math_test_1$255:	; PopFloat z
x2525:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2528:	mov word [bp + 30], @10268$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 153 12

math_test_1$258:	; PushFloat x
x2533:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2536:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2539:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2542:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2545:	mov ax, [bp + 14]	; 3: 139 70 14
x2548:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2551:	mov ax, [errno]	; 3: 161 230 10
x2554:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2557:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 16 10
x2562:	mov [bp + 26], bp	; 3: 137 110 26
x2565:	add bp, 24	; 3: 131 197 24
x2568:	mov di, bp	; 2: 137 239
x2570:	add di, 20	; 3: 131 199 20
x2573:	jmp printf	; 3: 233 244 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2576:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2581:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2583:	mov word [bp + 30], @10273$string_Error20message3A#	; 5: 199 70 30 191 12

math_test_1$269:	; Call 24 perror 0
x2588:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 42 10
x2593:	mov [bp + 26], bp	; 3: 137 110 26
x2596:	add bp, 24	; 3: 131 197 24
x2599:	jmp perror	; 3: 233 171 41

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2602:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$272:	; PushZero
x2608:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2610:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2613:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2616:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4696 w
x2619:	mov si, bp	; 2: 137 238
x2621:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4696 14
x2624:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2627:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 81 10
x2632:	mov [bp + 24], bp	; 3: 137 110 24
x2635:	add bp, 22	; 3: 131 197 22
x2638:	jmp modf	; 3: 233 32 42

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4697

math_test_1$282:	; PopFloat z
x2641:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2644:	mov word [bp + 36], @10283$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 206 12

math_test_1$285:	; PushFloat x
x2649:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2652:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2655:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2658:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2661:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2664:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2667:	mov ax, [errno]	; 3: 161 230 10
x2670:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2673:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 132 10
x2678:	mov [bp + 32], bp	; 3: 137 110 32
x2681:	add bp, 30	; 3: 131 197 30
x2684:	mov di, bp	; 2: 137 239
x2686:	add di, 26	; 3: 131 199 26
x2689:	jmp printf	; 3: 233 128 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2692:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2697:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2699:	mov word [bp + 36], @10288$string_Error20message3A#	; 5: 199 70 36 243 12

math_test_1$297:	; Call 30 perror 0
x2704:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 158 10
x2709:	mov [bp + 32], bp	; 3: 137 110 32
x2712:	add bp, 30	; 3: 131 197 30
x2715:	jmp perror	; 3: 233 55 41

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2718:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2724:	mov word [bp + 20], @10292$string_0A#	; 5: 199 70 20 2 13

math_test_1$302:	; Call 14 printf 0
x2729:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 185 10
x2734:	mov [bp + 16], bp	; 3: 137 110 16
x2737:	add bp, 14	; 3: 131 197 14
x2740:	mov di, bp	; 2: 137 239
x2742:	jmp printf	; 3: 233 75 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2745:	mov ax, [bp]	; 3: 139 70 0
x2748:	mov di, [bp + 4]	; 3: 139 126 4
x2751:	mov bp, [bp + 2]	; 3: 139 110 2
x2754:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

@10180$string_3C25f3E0A#:
x2756:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

@10182$string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2762:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2790:	dw 0	; 2: 0 0

@10187$string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2792:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10192$string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2820:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10197$string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2848:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10202$string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2877:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10207$string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2906:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10212$string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2935:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10217$string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2963:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10222$string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2991:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10227$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x3021:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10232$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3050:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10237$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3079:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10242$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3108:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10247$string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3137:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10252$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3167:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10257$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3196:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10268$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3225:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10273$string_Error20message3A#:
x3263:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10283$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3278:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10288$string_Error20message3A#:
x3315:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10292$string_0A#:
x3330:	db 10, 0	; 2: 10 0

printf:	; address £temporary2195 format
x3332:	mov si, bp	; 2: 137 238
x3334:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2196 £temporary2195

printf$2:	; BinaryAdd arg_list £temporary2196 2
x3337:	add si, 2	; 3: 131 198 2
x3340:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3343:	mov ax, [bp + 6]	; 3: 139 70 6
x3346:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3349:	mov ax, [di + 8]	; 3: 139 69 8
x3352:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3355:	mov word [di + 10], printf$7	; 5: 199 69 10 46 13
x3360:	mov [di + 12], bp	; 3: 137 109 12
x3363:	mov [di + 14], di	; 3: 137 125 14
x3366:	add di, 10	; 3: 131 199 10
x3369:	mov bp, di	; 2: 137 253
x3371:	nop	; 1: 144
x3372:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2198

printf$9:	; SetReturnValue £temporary2198

printf$10:	; Return £temporary2198
x3374:	mov ax, [bp]	; 3: 139 70 0
x3377:	mov di, [bp + 4]	; 3: 139 126 4
x3380:	mov bp, [bp + 2]	; 3: 139 110 2
x3383:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3385:	mov ax, [stdout]	; 3: 161 100 13
x3388:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3391:	mov ax, [bp + 6]	; 3: 139 70 6
x3394:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3397:	mov ax, [bp + 8]	; 3: 139 70 8
x3400:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3403:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 89 13
x3408:	mov [bp + 12], bp	; 3: 137 110 12
x3411:	add bp, 10	; 3: 131 197 10
x3414:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2202

vprintf$7:	; SetReturnValue £temporary2202

vprintf$8:	; Return £temporary2202
x3417:	mov ax, [bp]	; 3: 139 70 0
x3420:	mov di, [bp + 4]	; 3: 139 126 4
x3423:	mov bp, [bp + 2]	; 3: 139 110 2
x3426:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3428:	dw g_fileArray + 29	; 2: 131 13

g_fileArray:
x3430:	dw 1	; 2: 1 0
x3432:	dw 0	; 2: 0 0
x3434:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3459:	dw 1	; 2: 1 0
x3461:	dw 1	; 2: 1 0
x3463:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3488:	dw 1	; 2: 1 0
x3490:	dw 2	; 2: 2 0
x3492:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3517:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x4010:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2214 outStream
x4016:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2214
x4019:	mov [g_outDevice], ax	; 3: 163 221 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x4022:	mov ax, [bp + 8]	; 3: 139 70 8
x4025:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x4028:	mov ax, [bp + 10]	; 3: 139 70 10
x4031:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x4034:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 208 15
x4039:	mov [bp + 14], bp	; 3: 137 110 14
x4042:	add bp, 12	; 3: 131 197 12
x4045:	nop	; 1: 144
x4046:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2215

vfprintf$9:	; SetReturnValue £temporary2215

vfprintf$10:	; Return £temporary2215
x4048:	mov ax, [bp]	; 3: 139 70 0
x4051:	mov di, [bp + 4]	; 3: 139 126 4
x4054:	mov bp, [bp + 2]	; 3: 139 110 2
x4057:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x4059:	db 0, 0	; 2: 0 0

g_outDevice:
x4061:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4063:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4068:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4073:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4078:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4083:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4088:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4093:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4098:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4103:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4108:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4113:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4118:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4123:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4128:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4133:	mov word [g_outChars], 0	; 6: 199 6 57 21 0 0

printFormat$15:	; Assign index 0
x4139:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2049 format index
x4144:	mov si, [bp + 6]	; 3: 139 118 6
x4147:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2048 -> £temporary2049 £temporary2049 0

printFormat$18:	; Equal 285 £temporary2048 -> £temporary2049 0
x4150:	cmp byte [si], 0	; 3: 128 60 0
x4153:	je printFormat$285	; 4: 15 132 214 4

printFormat$19:	; BinaryAdd £temporary2053 format index
x4157:	mov si, [bp + 6]	; 3: 139 118 6
x4160:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2052 -> £temporary2053 £temporary2053 0

printFormat$21:	; Assign c £temporary2052 -> £temporary2053
x4163:	mov al, [si]	; 2: 138 4
x4165:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 263 percent 0
x4168:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4172:	je printFormat$263	; 4: 15 132 91 4

printFormat$23:	; Case 52 c 43
x4176:	mov al, [bp + 40]	; 3: 138 70 40
x4179:	cmp al, 43	; 2: 60 43
x4181:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4185:	cmp al, 45	; 2: 60 45
x4187:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4191:	cmp al, 32	; 2: 60 32
x4193:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4197:	cmp al, 48	; 2: 60 48
x4199:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4203:	cmp al, 35	; 2: 60 35
x4205:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4209:	cmp al, 46	; 2: 60 46
x4211:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4215:	cmp al, 42	; 2: 60 42
x4217:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4221:	cmp al, 104	; 2: 60 104
x4223:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4227:	cmp al, 108	; 2: 60 108
x4229:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4233:	cmp al, 76	; 2: 60 76
x4235:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4239:	cmp al, 37	; 2: 60 37
x4241:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4245:	cmp al, 110	; 2: 60 110
x4247:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4251:	cmp al, 112	; 2: 60 112
x4253:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4257:	cmp al, 71	; 2: 60 71
x4259:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4263:	cmp al, 103	; 2: 60 103
x4265:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4269:	cmp al, 69	; 2: 60 69
x4271:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4275:	cmp al, 101	; 2: 60 101
x4277:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4281:	cmp al, 102	; 2: 60 102
x4283:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4287:	cmp al, 115	; 2: 60 115
x4289:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4293:	cmp al, 99	; 2: 60 99
x4295:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4297:	cmp al, 88	; 2: 60 88
x4299:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4301:	cmp al, 120	; 2: 60 120
x4303:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4305:	cmp al, 111	; 2: 60 111
x4307:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4309:	cmp al, 98	; 2: 60 98
x4311:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4313:	cmp al, 117	; 2: 60 117
x4315:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4317:	cmp al, 100	; 2: 60 100
x4319:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4321:	cmp al, 105	; 2: 60 105
x4323:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4325:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4328:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 283
x4333:	jmp printFormat$283	; 3: 233 29 4

printFormat$54:	; Assign minus 1
x4336:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 283
x4341:	jmp printFormat$283	; 3: 233 21 4

printFormat$56:	; Assign space 1
x4344:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 283
x4349:	jmp printFormat$283	; 3: 233 13 4

printFormat$58:	; Assign zero 1
x4352:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 283
x4357:	jmp printFormat$283	; 3: 233 5 4

printFormat$60:	; Assign grid 1
x4360:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 283
x4365:	jmp printFormat$283	; 3: 233 253 3

printFormat$62:	; Assign period 1
x4368:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 283
x4373:	jmp printFormat$283	; 3: 233 245 3

printFormat$64:	; NotEqual 67 period 0
x4376:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4380:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4382:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 283
x4387:	jmp printFormat$283	; 3: 233 231 3

printFormat$67:	; Assign precision -1
x4390:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 283
x4395:	jmp printFormat$283	; 3: 233 223 3

printFormat$69:	; Assign shortInt 1
x4398:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 283
x4403:	jmp printFormat$283	; 3: 233 215 3

printFormat$71:	; Assign longInt 1
x4406:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 283
x4411:	jmp printFormat$283	; 3: 233 207 3

printFormat$73:	; Assign longDouble 1
x4414:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 283
x4419:	jmp printFormat$283	; 3: 233 199 3

printFormat$75:	; Equal 107 minus 0
x4422:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4426:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4430:	mov ax, [g_outChars]	; 3: 161 57 21
x4433:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2057 format index
x4436:	mov si, [bp + 6]	; 3: 139 118 6
x4439:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2056 -> £temporary2057 £temporary2057 0

printFormat$80:	; address £temporary2058 £temporary2056 -> £temporary2057

printFormat$81:	; Parameter 43 £temporary2058 6
x4442:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4445:	mov ax, [bp + 8]	; 3: 139 70 8
x4448:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4451:	mov ax, [bp + 18]	; 3: 139 70 18
x4454:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4457:	mov ax, [bp + 22]	; 3: 139 70 22
x4460:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4463:	mov ax, [bp + 26]	; 3: 139 70 26
x4466:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2059 width
x4469:	mov si, bp	; 2: 137 238
x4471:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2059 16
x4474:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4477:	mov ax, [bp + 14]	; 3: 139 70 14
x4480:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4483:	mov ax, [bp + 34]	; 3: 139 70 34
x4486:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4489:	mov ax, [bp + 36]	; 3: 139 70 36
x4492:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4495:	mov ax, [bp + 38]	; 3: 139 70 38
x4498:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4501:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4506:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4511:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 173 17
x4516:	mov [bp + 45], bp	; 3: 137 110 45
x4519:	add bp, 43	; 3: 131 197 43
x4522:	jmp printArgument	; 3: 233 144 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2060

printFormat$97:	; Assign arg_list £temporary2060
x4525:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4528:	mov ax, [g_outChars]	; 3: 161 57 21
x4531:	sub ax, [bp + 41]	; 3: 43 70 41
x4534:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2062 field
x4537:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4540:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2062 width
x4543:	cmp ax, [bp + 12]	; 3: 59 70 12
x4546:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4550:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4554:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 216 17
x4559:	mov [bp + 47], bp	; 3: 137 110 47
x4562:	add bp, 45	; 3: 131 197 45
x4565:	jmp printChar	; 3: 233 120 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4568:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4570:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4574:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4578:	mov ax, [g_outChars]	; 3: 161 57 21
x4581:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4584:	mov ax, [g_outStatus]	; 3: 161 219 15
x4587:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4590:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4595:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2066 format index
x4601:	mov si, [bp + 6]	; 3: 139 118 6
x4604:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2065 -> £temporary2066 £temporary2066 0

printFormat$115:	; address £temporary2067 £temporary2065 -> £temporary2066

printFormat$116:	; Parameter 47 £temporary2067 6
x4607:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4610:	mov ax, [bp + 8]	; 3: 139 70 8
x4613:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4616:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4621:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4626:	mov ax, [bp + 26]	; 3: 139 70 26
x4629:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2068 width
x4632:	mov si, bp	; 2: 137 238
x4634:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2068 16
x4637:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4640:	mov ax, [bp + 14]	; 3: 139 70 14
x4643:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4646:	mov ax, [bp + 34]	; 3: 139 70 34
x4649:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4652:	mov ax, [bp + 36]	; 3: 139 70 36
x4655:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4658:	mov ax, [bp + 38]	; 3: 139 70 38
x4661:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4664:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2069 negative
x4669:	mov si, bp	; 2: 137 238
x4671:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2069 28
x4674:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4677:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 83 18
x4682:	mov [bp + 49], bp	; 3: 137 110 49
x4685:	add bp, 47	; 3: 131 197 47
x4688:	jmp printArgument	; 3: 233 234 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4691:	mov ax, [bp + 43]	; 3: 139 70 43
x4694:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4697:	mov ax, [g_outChars]	; 3: 161 57 21
x4700:	sub ax, [bp + 41]	; 3: 43 70 41
x4703:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4706:	mov ax, [bp + 41]	; 3: 139 70 41
x4709:	mov [g_outChars], ax	; 3: 163 57 21

printFormat$135:	; Equal 142 negative 0
x4712:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4716:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4718:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4722:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 128 18
x4727:	mov [bp + 51], bp	; 3: 137 110 51
x4730:	add bp, 49	; 3: 131 197 49
x4733:	jmp printChar	; 3: 233 208 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4736:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4739:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4741:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4745:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4747:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4751:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 157 18
x4756:	mov [bp + 51], bp	; 3: 137 110 51
x4759:	add bp, 49	; 3: 131 197 49
x4762:	jmp printChar	; 3: 233 179 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4765:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4768:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4770:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4774:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4776:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4780:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 186 18
x4785:	mov [bp + 51], bp	; 3: 137 110 51
x4788:	add bp, 49	; 3: 131 197 49
x4791:	jmp printChar	; 3: 233 150 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4794:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2081 field
x4797:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4800:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2081 width
x4803:	cmp ax, [bp + 12]	; 3: 59 70 12
x4806:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4808:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4812:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 218 18
x4817:	mov [bp + 51], bp	; 3: 137 110 51
x4820:	add bp, 49	; 3: 131 197 49
x4823:	jmp printChar	; 3: 233 118 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4826:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2085 format index
x4828:	mov si, [bp + 6]	; 3: 139 118 6
x4831:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2084 -> £temporary2085 £temporary2085 0

printFormat$166:	; address £temporary2086 £temporary2084 -> £temporary2085

printFormat$167:	; Parameter 49 £temporary2086 6
x4834:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4837:	mov ax, [bp + 8]	; 3: 139 70 8
x4840:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4843:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4848:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4853:	mov ax, [bp + 26]	; 3: 139 70 26
x4856:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4859:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4864:	mov ax, [bp + 14]	; 3: 139 70 14
x4867:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4870:	mov ax, [bp + 34]	; 3: 139 70 34
x4873:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4876:	mov ax, [bp + 36]	; 3: 139 70 36
x4879:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4882:	mov ax, [bp + 38]	; 3: 139 70 38
x4885:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4888:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4893:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4898:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 48 19
x4903:	mov [bp + 51], bp	; 3: 137 110 51
x4906:	add bp, 49	; 3: 131 197 49
x4909:	jmp printArgument	; 3: 233 13 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2087

printFormat$182:	; Assign arg_list £temporary2087
x4912:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4915:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4918:	mov ax, [g_outChars]	; 3: 161 57 21
x4921:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4924:	mov ax, [g_outStatus]	; 3: 161 219 15
x4927:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4930:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2089 format index
x4936:	mov si, [bp + 6]	; 3: 139 118 6
x4939:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2088 -> £temporary2089 £temporary2089 0

printFormat$190:	; address £temporary2090 £temporary2088 -> £temporary2089

printFormat$191:	; Parameter 45 £temporary2090 6
x4942:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4945:	mov ax, [bp + 8]	; 3: 139 70 8
x4948:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4951:	mov ax, [bp + 18]	; 3: 139 70 18
x4954:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4957:	mov ax, [bp + 22]	; 3: 139 70 22
x4960:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4963:	mov ax, [bp + 26]	; 3: 139 70 26
x4966:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2091 width
x4969:	mov si, bp	; 2: 137 238
x4971:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2091 16
x4974:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4977:	mov ax, [bp + 14]	; 3: 139 70 14
x4980:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4983:	mov ax, [bp + 34]	; 3: 139 70 34
x4986:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4989:	mov ax, [bp + 36]	; 3: 139 70 36
x4992:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4995:	mov ax, [bp + 38]	; 3: 139 70 38
x4998:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x5001:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x5006:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x5011:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 161 19
x5016:	mov [bp + 47], bp	; 3: 137 110 47
x5019:	add bp, 45	; 3: 131 197 45
x5022:	jmp printArgument	; 3: 233 156 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x5025:	mov ax, [bp + 43]	; 3: 139 70 43
x5028:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x5031:	mov ax, [g_outChars]	; 3: 161 57 21
x5034:	sub ax, [bp + 41]	; 3: 43 70 41
x5037:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x5040:	mov ax, [bp + 41]	; 3: 139 70 41
x5043:	mov [g_outChars], ax	; 3: 163 57 21

printFormat$209:	; Assign £temporary2094 field
x5046:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x5049:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2094 width
x5052:	cmp ax, [bp + 12]	; 3: 59 70 12
x5055:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x5057:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x5061:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 211 19
x5066:	mov [bp + 49], bp	; 3: 137 110 49
x5069:	add bp, 47	; 3: 131 197 47
x5072:	jmp printChar	; 3: 233 125 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5075:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2098 format index
x5077:	mov si, [bp + 6]	; 3: 139 118 6
x5080:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2097 -> £temporary2098 £temporary2098 0

printFormat$220:	; address £temporary2099 £temporary2097 -> £temporary2098

printFormat$221:	; Parameter 47 £temporary2099 6
x5083:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5086:	mov ax, [bp + 8]	; 3: 139 70 8
x5089:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5092:	mov ax, [bp + 18]	; 3: 139 70 18
x5095:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5098:	mov ax, [bp + 22]	; 3: 139 70 22
x5101:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5104:	mov ax, [bp + 26]	; 3: 139 70 26
x5107:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5110:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5115:	mov ax, [bp + 14]	; 3: 139 70 14
x5118:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5121:	mov ax, [bp + 34]	; 3: 139 70 34
x5124:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5127:	mov ax, [bp + 36]	; 3: 139 70 36
x5130:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5133:	mov ax, [bp + 38]	; 3: 139 70 38
x5136:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5139:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5144:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5149:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 43 20
x5154:	mov [bp + 49], bp	; 3: 137 110 49
x5157:	add bp, 47	; 3: 131 197 47
x5160:	jmp printArgument	; 3: 233 18 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2100

printFormat$236:	; Assign arg_list £temporary2100
x5163:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5166:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 283
x5171:	jmp printFormat$283	; 3: 233 215 0

printFormat$239:	; Assign value 0
x5174:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2103 c
x5179:	mov al, [bp + 40]	; 3: 138 70 40
x5182:	and ax, 255	; 3: 37 255 0
x5185:	cmp al, 0	; 2: 60 0
x5187:	jge printFormat$242	; 2: 125 4
x5189:	neg al	; 2: 246 216
x5191:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2103 6
x5193:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5196:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 90 20
x5201:	mov [bp + 45], bp	; 3: 137 110 45
x5204:	add bp, 43	; 3: 131 197 43
x5207:	jmp isdigit	; 3: 233 18 23

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2104

printFormat$246:	; Equal 257 £temporary2104 0
x5210:	cmp bx, 0	; 3: 131 251 0
x5213:	je printFormat$257	; 2: 116 51

printFormat$247:	; SignedMultiply £temporary2105 value 10
x5215:	mov ax, [bp + 41]	; 3: 139 70 41
x5218:	xor dx, dx	; 2: 49 210
x5220:	imul word [@4710$int2$10#]	; 4: 247 46 59 21

printFormat$248:	; BinarySubtract £temporary2106 c 48
x5224:	mov bl, [bp + 40]	; 3: 138 94 40
x5227:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2107 £temporary2106
x5230:	and bx, 255	; 4: 129 227 255 0
x5234:	cmp bl, 0	; 3: 128 251 0
x5237:	jge printFormat$250	; 2: 125 4
x5239:	neg bl	; 2: 246 219
x5241:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2105 £temporary2107
x5243:	add ax, bx	; 2: 1 216
x5245:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5248:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; Assign £temporary2109 index
x5251:	mov ax, [bp + 10]	; 3: 139 70 10

printFormat$253:	; BinaryAdd £temporary2111 format £temporary2109
x5254:	mov si, [bp + 6]	; 3: 139 118 6
x5257:	add si, ax	; 2: 1 198

printFormat$254:	; Deref £temporary2110 -> £temporary2111 £temporary2111 0

printFormat$255:	; Assign c £temporary2110 -> £temporary2111
x5259:	mov al, [si]	; 2: 138 4
x5261:	mov [bp + 40], al	; 3: 136 70 40

printFormat$256:	; Goto 240
x5264:	jmp printFormat$240	; 2: 235 169

printFormat$257:	; Decrement index
x5266:	dec word [bp + 10]	; 3: 255 78 10

printFormat$258:	; NotEqual 261 period 0
x5269:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5273:	jne printFormat$261	; 2: 117 8

printFormat$259:	; Assign width value
x5275:	mov ax, [bp + 41]	; 3: 139 70 41
x5278:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$260:	; Goto 283
x5281:	jmp printFormat$283	; 2: 235 106

printFormat$261:	; Assign precision value
x5283:	mov ax, [bp + 41]	; 3: 139 70 41
x5286:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$262:	; Goto 283
x5289:	jmp printFormat$283	; 2: 235 98

printFormat$263:	; NotEqual 279 c 37
x5291:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5295:	jne printFormat$279	; 2: 117 72

printFormat$264:	; Assign percent 1
x5297:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$265:	; Assign plus 0
x5302:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$266:	; Assign minus 0
x5307:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$267:	; Assign space 0
x5312:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$268:	; Assign zero 0
x5317:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$269:	; Assign grid 0
x5322:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$270:	; Assign widthStar 0
x5327:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$271:	; Assign period 0
x5332:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$272:	; Assign precisionStar 0
x5337:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$273:	; Assign shortInt 0
x5342:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$274:	; Assign longInt 0
x5347:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$275:	; Assign longDouble 0
x5352:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$276:	; Assign width 0
x5357:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$277:	; Assign precision 0
x5362:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$278:	; Goto 283
x5367:	jmp printFormat$283	; 2: 235 20

printFormat$279:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$280:	; Parameter 41 c 6
x5369:	mov al, [bp + 40]	; 3: 138 70 40
x5372:	mov [bp + 47], al	; 3: 136 70 47

printFormat$281:	; Call 41 printChar 0
x5375:	mov word [bp + 41], printFormat$282	; 5: 199 70 41 13 21
x5380:	mov [bp + 43], bp	; 3: 137 110 43
x5383:	add bp, 41	; 3: 131 197 41
x5386:	jmp printChar	; 3: 233 67 7

printFormat$282:	; PostCall 41

printFormat$283:	; Increment index
x5389:	inc word [bp + 10]	; 3: 255 70 10

printFormat$284:	; Goto 16
x5392:	jmp printFormat$16	; 3: 233 29 251

printFormat$285:	; NotEqual 291 g_outStatus 1
x5395:	cmp word [g_outStatus], 1	; 5: 131 62 219 15 1
x5400:	jne printFormat$291	; 2: 117 16

printFormat$286:	; IntegralToIntegral £temporary2120 g_outDevice
x5402:	mov ax, [g_outDevice]	; 3: 161 221 15

printFormat$287:	; Assign outString £temporary2120
x5405:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$288:	; BinaryAdd £temporary2122 outString g_outChars
x5408:	mov si, [bp + 40]	; 3: 139 118 40
x5411:	add si, [g_outChars]	; 4: 3 54 57 21

printFormat$289:	; Deref £temporary2121 -> £temporary2122 £temporary2122 0

printFormat$290:	; Assign £temporary2121 -> £temporary2122 0
x5415:	mov byte [si], 0	; 3: 198 4 0

printFormat$291:	; SetReturnValue g_outChars
x5418:	mov bx, [g_outChars]	; 4: 139 30 57 21

printFormat$292:	; Return g_outChars
x5422:	mov ax, [bp]	; 3: 139 70 0
x5425:	mov di, [bp + 4]	; 3: 139 126 4
x5428:	mov bp, [bp + 2]	; 3: 139 110 2
x5431:	jmp ax	; 2: 255 224

printFormat$293:	; FunctionEnd printFormat

g_outChars:
x5433:	db 0, 0	; 2: 0 0

@4710$int2$10#:
x5435:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary1821 -> format format 0
x5437:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary1821 -> format
x5440:	mov al, [si]	; 2: 138 4
x5442:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5445:	mov al, [bp + 30]	; 3: 138 70 30
x5448:	cmp al, 100	; 2: 60 100
x5450:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5452:	cmp al, 105	; 2: 60 105
x5454:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5456:	cmp al, 99	; 2: 60 99
x5458:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5462:	cmp al, 115	; 2: 60 115
x5464:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5468:	cmp al, 88	; 2: 60 88
x5470:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5474:	cmp al, 120	; 2: 60 120
x5476:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5480:	cmp al, 98	; 2: 60 98
x5482:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5486:	cmp al, 111	; 2: 60 111
x5488:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5492:	cmp al, 117	; 2: 60 117
x5494:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5498:	cmp al, 71	; 2: 60 71
x5500:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5504:	cmp al, 103	; 2: 60 103
x5506:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5510:	cmp al, 69	; 2: 60 69
x5512:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5516:	cmp al, 101	; 2: 60 101
x5518:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5522:	cmp al, 102	; 2: 60 102
x5524:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5528:	cmp al, 112	; 2: 60 112
x5530:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5534:	cmp al, 110	; 2: 60 110
x5536:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5540:	cmp al, 37	; 2: 60 37
x5542:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5546:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5549:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5553:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5555:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary1823 arg_list 2
x5559:	mov si, [bp + 8]	; 3: 139 118 8
x5562:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary1824 £temporary1823

printArgument$25:	; Deref £temporary1825 -> £temporary1824 £temporary1824 0

printArgument$26:	; IntegralToIntegral £temporary1826 £temporary1825 -> £temporary1824
x5565:	mov ax, [si]	; 2: 139 4
x5567:	cmp ax, 0	; 3: 131 248 0
x5570:	jge printArgument$27	; 2: 125 4
x5572:	neg ax	; 2: 247 216
x5574:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary1827 £temporary1826
x5576:	and eax, 255	; 6: 102 37 255 0 0 0
x5582:	cmp al, 0	; 2: 60 0
x5584:	jge printArgument$28	; 2: 125 5
x5586:	neg al	; 2: 246 216
x5588:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary1827
x5591:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5595:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5597:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5601:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5603:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary1829 arg_list 4
x5607:	mov si, [bp + 8]	; 3: 139 118 8
x5610:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary1830 £temporary1829

printArgument$34:	; Deref £temporary1831 -> £temporary1830 £temporary1830 0

printArgument$35:	; Assign longValue £temporary1831 -> £temporary1830
x5613:	mov eax, [si]	; 3: 102 139 4
x5616:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5620:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5622:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary1833 arg_list 2
x5626:	mov si, [bp + 8]	; 3: 139 118 8
x5629:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary1834 £temporary1833

printArgument$40:	; Deref £temporary1835 -> £temporary1834 £temporary1834 0

printArgument$41:	; IntegralToIntegral £temporary1836 £temporary1835 -> £temporary1834
x5632:	mov ax, [si]	; 2: 139 4
x5634:	and eax, 65535	; 6: 102 37 255 255 0 0
x5640:	cmp ax, 0	; 3: 131 248 0
x5643:	jge printArgument$42	; 2: 125 5
x5645:	neg ax	; 2: 247 216
x5647:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary1836
x5650:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5654:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5658:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary1840 -> negativePtr negativePtr 0
x5660:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5663:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5668:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary1842 1
x5670:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5673:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary1842 0
x5675:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary1840 -> negativePtr £temporary1842
x5678:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5680:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5684:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5686:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5690:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5694:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 76 22
x5699:	mov [bp + 50], bp	; 3: 137 110 50
x5702:	add bp, 48	; 3: 131 197 48
x5705:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary1845

printArgument$56:	; Assign longValue £temporary1845
x5708:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5712:	mov ax, [bp + 8]	; 3: 139 70 8
x5715:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5718:	mov ax, [bp + 16]	; 3: 139 70 16
x5721:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary1846 precision
x5724:	mov si, bp	; 2: 137 238
x5726:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary1846 10
x5729:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5732:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 114 22
x5737:	mov [bp + 50], bp	; 3: 137 110 50
x5740:	add bp, 48	; 3: 131 197 48
x5743:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary1847

printArgument$65:	; Assign arg_list £temporary1847
x5746:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5749:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5753:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5757:	mov ax, [bp + 10]	; 3: 139 70 10
x5760:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5763:	mov ax, [bp + 12]	; 3: 139 70 12
x5766:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5769:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 151 22
x5774:	mov [bp + 50], bp	; 3: 137 110 50
x5777:	add bp, 48	; 3: 131 197 48
x5780:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5783:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5786:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary1850 arg_list 2
x5790:	mov si, [bp + 8]	; 3: 139 118 8
x5793:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary1851 £temporary1850

printArgument$76:	; Deref £temporary1852 -> £temporary1851 £temporary1851 0

printArgument$77:	; IntegralToIntegral £temporary1853 £temporary1852 -> £temporary1851
x5796:	mov ax, [si]	; 2: 139 4
x5798:	cmp ax, 0	; 3: 131 248 0
x5801:	jge printArgument$78	; 2: 125 4
x5803:	neg ax	; 2: 247 216
x5805:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary1853
x5807:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5810:	mov ax, [bp + 8]	; 3: 139 70 8
x5813:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5816:	mov ax, [bp + 16]	; 3: 139 70 16
x5819:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary1854 precision
x5822:	mov si, bp	; 2: 137 238
x5824:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary1854 10
x5827:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5830:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 212 22
x5835:	mov [bp + 46], bp	; 3: 137 110 46
x5838:	add bp, 44	; 3: 131 197 44
x5841:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary1855

printArgument$87:	; Assign arg_list £temporary1855
x5844:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5847:	mov al, [bp + 31]	; 3: 138 70 31
x5850:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5853:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 235 22
x5858:	mov [bp + 46], bp	; 3: 137 110 46
x5861:	add bp, 44	; 3: 131 197 44
x5864:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5867:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5870:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary1858 arg_list 2
x5874:	mov si, [bp + 8]	; 3: 139 118 8
x5877:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary1859 £temporary1858

printArgument$96:	; Deref £temporary1860 -> £temporary1859 £temporary1859 0

printArgument$97:	; Assign stringValue £temporary1860 -> £temporary1859
x5880:	mov ax, [si]	; 2: 139 4
x5882:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5885:	mov ax, [bp + 8]	; 3: 139 70 8
x5888:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5891:	mov ax, [bp + 16]	; 3: 139 70 16
x5894:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary1861 precision
x5897:	mov si, bp	; 2: 137 238
x5899:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary1861 10
x5902:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5905:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 31 23
x5910:	mov [bp + 48], bp	; 3: 137 110 48
x5913:	add bp, 46	; 3: 131 197 46
x5916:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary1862

printArgument$106:	; Assign arg_list £temporary1862
x5919:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5922:	mov ax, [bp + 44]	; 3: 139 70 44
x5925:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5928:	mov ax, [bp + 18]	; 3: 139 70 18
x5931:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5934:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 60 23
x5939:	mov [bp + 48], bp	; 3: 137 110 48
x5942:	add bp, 46	; 3: 131 197 46
x5945:	jmp printString	; 3: 233 224 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5948:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5951:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5955:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary1878 10
x5957:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5963:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5965:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5969:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary1874 8
x5971:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5977:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5979:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5983:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary1870 2
x5985:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5991:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary1870 16
x5993:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary1874 £temporary1870

printArgument$124:	; Assign £temporary1878 £temporary1874

printArgument$125:	; Assign base £temporary1878
x5999:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x6003:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x6007:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x6009:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary1880 arg_list 2
x6013:	mov si, [bp + 8]	; 3: 139 118 8
x6016:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary1881 £temporary1880

printArgument$130:	; Deref £temporary1882 -> £temporary1881 £temporary1881 0

printArgument$131:	; IntegralToIntegral £temporary1883 £temporary1882 -> £temporary1881
x6019:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary1884 £temporary1883
x6021:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary1884
x6027:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x6031:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x6033:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x6037:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x6039:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary1886 arg_list 4
x6043:	mov si, [bp + 8]	; 3: 139 118 8
x6046:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary1887 £temporary1886

printArgument$139:	; Deref £temporary1888 -> £temporary1887 £temporary1887 0

printArgument$140:	; Assign value £temporary1888 -> £temporary1887
x6049:	mov eax, [si]	; 3: 102 139 4
x6052:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x6056:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x6058:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary1890 arg_list 2
x6062:	mov si, [bp + 8]	; 3: 139 118 8
x6065:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary1891 £temporary1890

printArgument$145:	; Deref £temporary1892 -> £temporary1891 £temporary1891 0

printArgument$146:	; IntegralToIntegral £temporary1893 £temporary1892 -> £temporary1891
x6068:	mov ax, [si]	; 2: 139 4
x6070:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary1893
x6076:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6080:	mov ax, [bp + 8]	; 3: 139 70 8
x6083:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6086:	mov ax, [bp + 16]	; 3: 139 70 16
x6089:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary1896 precision
x6092:	mov si, bp	; 2: 137 238
x6094:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary1896 10
x6097:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6100:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 226 23
x6105:	mov [bp + 54], bp	; 3: 137 110 54
x6108:	add bp, 52	; 3: 131 197 52
x6111:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary1897

printArgument$156:	; Assign arg_list £temporary1897
x6114:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6117:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6121:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6125:	mov ax, [bp + 10]	; 3: 139 70 10
x6128:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6131:	mov ax, [bp + 12]	; 3: 139 70 12
x6134:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6137:	mov ax, [bp + 14]	; 3: 139 70 14
x6140:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6143:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6147:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary1898 c
x6151:	mov al, [bp + 30]	; 3: 138 70 30
x6154:	and ax, 255	; 3: 37 255 0
x6157:	cmp al, 0	; 2: 60 0
x6159:	jge printArgument$165	; 2: 125 4
x6161:	neg al	; 2: 246 216
x6163:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary1898 26
x6165:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6168:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 38 24
x6173:	mov [bp + 74], bp	; 3: 137 110 74
x6176:	add bp, 72	; 3: 131 197 72
x6179:	jmp isupper	; 3: 233 230 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary1899

printArgument$169:	; Parameter 52 £temporary1899 20
x6182:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6185:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 55 24
x6190:	mov [bp + 54], bp	; 3: 137 110 54
x6193:	add bp, 52	; 3: 131 197 52
x6196:	jmp printUnsignedLong	; 3: 233 214 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6199:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6202:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6206:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6208:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary1902 arg_list 8
x6212:	mov si, [bp + 8]	; 3: 139 118 8
x6215:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary1903 £temporary1902

printArgument$177:	; Deref £temporary1904 -> £temporary1903 £temporary1903 0

printArgument$178:	; PushFloat £temporary1904 -> £temporary1903
x6218:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6220:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6223:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6226:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6229:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6234:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6239:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6244:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6249:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 119 24
x6254:	mov [bp + 46], bp	; 3: 137 110 46
x6257:	add bp, 44	; 3: 131 197 44
x6260:	jmp printLongDoublePlain	; 3: 233 65 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6263:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6265:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary1907 arg_list 8
x6269:	mov si, [bp + 8]	; 3: 139 118 8
x6272:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary1908 £temporary1907

printArgument$193:	; Deref £temporary1909 -> £temporary1908 £temporary1908 0

printArgument$194:	; PushFloat £temporary1909 -> £temporary1908
x6275:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6277:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6280:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6284:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary1913 -> negativePtr negativePtr 0
x6286:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6289:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6292:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6294:	fcompp	; 2: 222 217
x6296:	fstsw ax	; 3: 155 223 224
x6299:	sahf	; 1: 158
x6300:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary1915 1
x6302:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6305:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary1915 0
x6307:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary1913 -> negativePtr £temporary1915
x6310:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6312:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6316:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6318:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6321:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6324:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 194 24
x6329:	mov [bp + 46], bp	; 3: 137 110 46
x6332:	add bp, 44	; 3: 131 197 44
x6335:	jmp fabs	; 3: 233 58 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary1918

printArgument$212:	; PopFloat longDoubleValue
x6338:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6341:	mov ax, [bp + 8]	; 3: 139 70 8
x6344:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6347:	mov ax, [bp + 16]	; 3: 139 70 16
x6350:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary1919 precision
x6353:	mov si, bp	; 2: 137 238
x6355:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary1919 10
x6358:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6361:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 231 24
x6366:	mov [bp + 46], bp	; 3: 137 110 46
x6369:	add bp, 44	; 3: 131 197 44
x6372:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary1920

printArgument$221:	; Assign arg_list £temporary1920
x6375:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6378:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6382:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6384:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6387:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6390:	mov ax, [bp + 10]	; 3: 139 70 10
x6393:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6396:	mov ax, [bp + 12]	; 3: 139 70 12
x6399:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6402:	mov ax, [bp + 14]	; 3: 139 70 14
x6405:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6408:	mov ax, [bp + 18]	; 3: 139 70 18
x6411:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6414:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 28 25
x6419:	mov [bp + 46], bp	; 3: 137 110 46
x6422:	add bp, 44	; 3: 131 197 44
x6425:	jmp printLongDoublePlain	; 3: 233 156 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6428:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary1923 c
x6431:	mov al, [bp + 30]	; 3: 138 70 30
x6434:	and ax, 255	; 3: 37 255 0
x6437:	cmp al, 0	; 2: 60 0
x6439:	jge printArgument$235	; 2: 125 4
x6441:	neg al	; 2: 246 216
x6443:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary1923 6
x6445:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6448:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 62 25
x6453:	mov [bp + 46], bp	; 3: 137 110 46
x6456:	add bp, 44	; 3: 131 197 44
x6459:	jmp tolower	; 3: 233 224 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary1924

printArgument$239:	; NotEqual 257 £temporary1924 101
x6462:	cmp bx, 101	; 3: 131 251 101
x6465:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6467:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6470:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6473:	mov ax, [bp + 10]	; 3: 139 70 10
x6476:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6479:	mov ax, [bp + 12]	; 3: 139 70 12
x6482:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6485:	mov ax, [bp + 14]	; 3: 139 70 14
x6488:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6491:	mov ax, [bp + 18]	; 3: 139 70 18
x6494:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary1926 c
x6497:	mov al, [bp + 30]	; 3: 138 70 30
x6500:	and ax, 255	; 3: 37 255 0
x6503:	cmp al, 0	; 2: 60 0
x6505:	jge printArgument$249	; 2: 125 4
x6507:	neg al	; 2: 246 216
x6509:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary1926 28
x6511:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6514:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 128 25
x6519:	mov [bp + 68], bp	; 3: 137 110 68
x6522:	add bp, 66	; 3: 131 197 66
x6525:	jmp isupper	; 3: 233 140 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary1927

printArgument$253:	; Parameter 44 £temporary1927 22
x6528:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6531:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 145 25
x6536:	mov [bp + 46], bp	; 3: 137 110 46
x6539:	add bp, 44	; 3: 131 197 44
x6542:	jmp printLongDoubleExpo	; 3: 233 46 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6545:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6548:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6551:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6554:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 168 25
x6559:	mov [bp + 46], bp	; 3: 137 110 46
x6562:	add bp, 44	; 3: 131 197 44
x6565:	jmp fabs	; 3: 233 84 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary1929

printArgument$264:	; Parameter 44 £temporary1929 6
x6568:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6571:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 185 25
x6576:	mov [bp + 46], bp	; 3: 137 110 46
x6579:	add bp, 44	; 3: 131 197 44
x6582:	jmp log10	; 3: 233 117 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary1930

printArgument$268:	; FloatingToIntegral £temporary1931 £temporary1930
x6585:	fistp word [container2bytes#]	; 4: 223 30 79 27
x6589:	mov ax, [container2bytes#]	; 3: 161 79 27

printArgument$269:	; Assign expo £temporary1931
x6592:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6595:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6599:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6601:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6605:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6607:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6610:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6613:	mov ax, [bp + 10]	; 3: 139 70 10
x6616:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6619:	mov ax, [bp + 12]	; 3: 139 70 12
x6622:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6625:	mov ax, [bp + 14]	; 3: 139 70 14
x6628:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6631:	mov ax, [bp + 18]	; 3: 139 70 18
x6634:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6637:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 251 25
x6642:	mov [bp + 48], bp	; 3: 137 110 48
x6645:	add bp, 46	; 3: 131 197 46
x6648:	jmp printLongDoublePlain	; 3: 233 189 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6651:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6654:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6657:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6660:	mov ax, [bp + 10]	; 3: 139 70 10
x6663:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6666:	mov ax, [bp + 12]	; 3: 139 70 12
x6669:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6672:	mov ax, [bp + 14]	; 3: 139 70 14
x6675:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6678:	mov ax, [bp + 18]	; 3: 139 70 18
x6681:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary1936 c
x6684:	mov al, [bp + 30]	; 3: 138 70 30
x6687:	and ax, 255	; 3: 37 255 0
x6690:	cmp al, 0	; 2: 60 0
x6692:	jge printArgument$291	; 2: 125 4
x6694:	neg al	; 2: 246 216
x6696:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary1936 28
x6698:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6701:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 59 26
x6706:	mov [bp + 70], bp	; 3: 137 110 70
x6709:	add bp, 68	; 3: 131 197 68
x6712:	jmp isupper	; 3: 233 209 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary1937

printArgument$295:	; Parameter 46 £temporary1937 22
x6715:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6718:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 76 26
x6723:	mov [bp + 48], bp	; 3: 137 110 48
x6726:	add bp, 46	; 3: 131 197 46
x6729:	jmp printLongDoubleExpo	; 3: 233 115 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6732:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6735:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary1940 arg_list 2
x6739:	mov si, [bp + 8]	; 3: 139 118 8
x6742:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary1941 £temporary1940

printArgument$302:	; Deref £temporary1942 -> £temporary1941 £temporary1941 0

printArgument$303:	; Assign ptrValue £temporary1942 -> £temporary1941
x6745:	mov ax, [si]	; 2: 139 4
x6747:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6750:	mov ax, [bp + 8]	; 3: 139 70 8
x6753:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6756:	mov ax, [bp + 16]	; 3: 139 70 16
x6759:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary1943 precision
x6762:	mov si, bp	; 2: 137 238
x6764:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary1943 10
x6767:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6770:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 128 26
x6775:	mov [bp + 46], bp	; 3: 137 110 46
x6778:	add bp, 44	; 3: 131 197 44
x6781:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary1944

printArgument$312:	; Assign arg_list £temporary1944
x6784:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary1945 ptrValue
x6787:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary1946 £temporary1945
x6790:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary1946 6
x6796:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6800:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6805:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6810:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6815:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6823:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6828:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 186 26
x6833:	mov [bp + 46], bp	; 3: 137 110 46
x6836:	add bp, 44	; 3: 131 197 44
x6839:	jmp printUnsignedLong	; 3: 233 83 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6842:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6845:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary1949 arg_list 2
x6849:	mov si, [bp + 8]	; 3: 139 118 8
x6852:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary1950 £temporary1949

printArgument$328:	; Deref £temporary1951 -> £temporary1950 £temporary1950 0

printArgument$329:	; Assign ptrValue £temporary1951 -> £temporary1950
x6855:	mov ax, [si]	; 2: 139 4
x6857:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6860:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary1953 arg_list 2
x6864:	mov si, [bp + 8]	; 3: 139 118 8
x6867:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary1954 £temporary1953

printArgument$333:	; Deref £temporary1955 -> £temporary1954 £temporary1954 0

printArgument$334:	; Assign intPtr £temporary1955 -> £temporary1954
x6870:	mov ax, [si]	; 2: 139 4
x6872:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6875:	mov ax, [bp + 8]	; 3: 139 70 8
x6878:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6881:	mov ax, [bp + 16]	; 3: 139 70 16
x6884:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary1956 precision
x6887:	mov si, bp	; 2: 137 238
x6889:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary1956 10
x6892:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6895:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 253 26
x6900:	mov [bp + 46], bp	; 3: 137 110 46
x6903:	add bp, 44	; 3: 131 197 44
x6906:	nop	; 1: 144
x6907:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary1957

printArgument$343:	; Assign arg_list £temporary1957
x6909:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary1958 -> intPtr intPtr 0
x6912:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary1958 -> intPtr g_outChars
x6915:	mov ax, [g_outChars]	; 3: 161 57 21
x6918:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6920:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6922:	mov ax, [bp + 8]	; 3: 139 70 8
x6925:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6928:	mov ax, [bp + 16]	; 3: 139 70 16
x6931:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary1959 precision
x6934:	mov si, bp	; 2: 137 238
x6936:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary1959 10
x6939:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6942:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 44 27
x6947:	mov [bp + 46], bp	; 3: 137 110 46
x6950:	add bp, 44	; 3: 131 197 44
x6953:	nop	; 1: 144
x6954:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary1960

printArgument$355:	; Assign arg_list £temporary1960
x6956:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6959:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6963:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 65 27
x6968:	mov [bp + 46], bp	; 3: 137 110 46
x6971:	add bp, 44	; 3: 131 197 44
x6974:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6977:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6980:	mov ax, [bp]	; 3: 139 70 0
x6983:	mov di, [bp + 4]	; 3: 139 126 4
x6986:	mov bp, [bp + 2]	; 3: 139 110 2
x6989:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6991:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6993:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6998:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3208 value
x7000:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x7004:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3212 £temporary3208

labs$3:	; Goto 5
x7007:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3212 value
x7009:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3212

labs$6:	; Return £temporary3212
x7013:	mov ax, [bp]	; 3: 139 70 0
x7016:	mov di, [bp + 4]	; 3: 139 126 4
x7019:	mov bp, [bp + 2]	; 3: 139 110 2
x7022:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x7024:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7028:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1804 -> widthPtr widthPtr 0
x7030:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1804 -> widthPtr -1
x7033:	cmp word [si], -1	; 3: 131 60 255
x7036:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1807 -> widthPtr widthPtr 0
x7038:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x7041:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1809 arg_list 2
x7045:	mov di, [bp + 6]	; 3: 139 126 6
x7048:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1810 £temporary1809

checkWidthAndPrecision$7:	; Deref £temporary1811 -> £temporary1810 £temporary1810 0

checkWidthAndPrecision$8:	; Assign £temporary1807 -> widthPtr £temporary1811 -> £temporary1810
x7051:	mov ax, [di]	; 2: 139 5
x7053:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x7055:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7059:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary1813 -> precisionPtr precisionPtr 0
x7061:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1813 -> precisionPtr -1
x7064:	cmp word [si], -1	; 3: 131 60 255
x7067:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary1816 -> precisionPtr precisionPtr 0
x7069:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7072:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary1818 arg_list 2
x7076:	mov di, [bp + 6]	; 3: 139 126 6
x7079:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1819 £temporary1818

checkWidthAndPrecision$16:	; Deref £temporary1820 -> £temporary1819 £temporary1819 0

checkWidthAndPrecision$17:	; Assign £temporary1816 -> precisionPtr £temporary1820 -> £temporary1819
x7082:	mov ax, [di]	; 2: 139 5
x7084:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7086:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7089:	mov ax, [bp]	; 3: 139 70 0
x7092:	mov di, [bp + 4]	; 3: 139 126 4
x7095:	mov bp, [bp + 2]	; 3: 139 110 2
x7098:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7100:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7105:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1659 longValue
x7107:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7111:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1659
x7114:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7118:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7122:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 224 27
x7127:	mov [bp + 16], bp	; 3: 137 110 16
x7130:	add bp, 14	; 3: 131 197 14
x7133:	nop	; 1: 144
x7134:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7136:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7138:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7142:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7144:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7148:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 250 27
x7153:	mov [bp + 16], bp	; 3: 137 110 16
x7156:	add bp, 14	; 3: 131 197 14
x7159:	nop	; 1: 144
x7160:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7162:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7164:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7168:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7170:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7174:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 20 28
x7179:	mov [bp + 16], bp	; 3: 137 110 16
x7182:	add bp, 14	; 3: 131 197 14
x7185:	nop	; 1: 144
x7186:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7188:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7193:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7195:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7199:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 45 28
x7204:	mov [bp + 16], bp	; 3: 137 110 16
x7207:	add bp, 14	; 3: 131 197 14
x7210:	nop	; 1: 144
x7211:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7213:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7215:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7219:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7223:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 69 28
x7228:	mov [bp + 16], bp	; 3: 137 110 16
x7231:	add bp, 14	; 3: 131 197 14
x7234:	nop	; 1: 144
x7235:	jmp printLongIntRec	; 2: 235 101

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7237:	mov ax, [bp]	; 3: 139 70 0
x7240:	mov di, [bp + 4]	; 3: 139 126 4
x7243:	mov bp, [bp + 2]	; 3: 139 110 2
x7246:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7248:	mov ax, [g_outStatus]	; 3: 161 219 15
x7251:	cmp ax, 0	; 3: 131 248 0
x7254:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7256:	cmp ax, 1	; 3: 131 248 1
x7259:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7261:	cmp ax, 2	; 3: 131 248 2
x7264:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 25
x7266:	jmp printChar$25	; 2: 235 59

printChar$5:	; IntegralToIntegral £temporary1601 g_outDevice
x7268:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$6:	; Assign stream £temporary1601
x7271:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7274:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1604 -> stream stream 2
x7276:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1604 -> stream
x7279:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7282:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1607 c
x7285:	mov dx, bp	; 2: 137 234
x7287:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1607

printChar$13:	; Interrupt 33
x7290:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7292:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$15:	; Goto 25
x7296:	jmp printChar$25	; 2: 235 29

printChar$16:	; IntegralToIntegral £temporary1609 g_outDevice
x7298:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$17:	; Assign outString £temporary1609
x7301:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1610 g_outChars
x7304:	mov ax, [g_outChars]	; 3: 161 57 21

printChar$19:	; Increment g_outChars
x7307:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$20:	; BinaryAdd £temporary1612 outString £temporary1610
x7311:	mov si, [bp + 9]	; 3: 139 118 9
x7314:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1611 -> £temporary1612 £temporary1612 0

printChar$22:	; Assign £temporary1611 -> £temporary1612 c
x7316:	mov al, [bp + 6]	; 3: 138 70 6
x7319:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 25
x7321:	jmp printChar$25	; 2: 235 4

printChar$24:	; Increment g_outChars
x7323:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$25:	; Return 0
x7327:	mov ax, [bp]	; 3: 139 70 0
x7330:	mov di, [bp + 4]	; 3: 139 126 4
x7333:	mov bp, [bp + 2]	; 3: 139 110 2
x7336:	jmp ax	; 2: 255 224

printChar$26:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7338:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7343:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1649 longValue 10
x7345:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7349:	xor edx, edx	; 3: 102 49 210
x7352:	idiv dword [@3712$int4$10#]	; 5: 102 247 62 20 29

printLongIntRec$2:	; IntegralToIntegral £temporary1650 £temporary1649
x7357:	cmp edx, 0	; 4: 102 131 250 0
x7361:	jge printLongIntRec$3	; 2: 125 5
x7363:	neg edx	; 3: 102 247 218
x7366:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1650
x7368:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1651 longValue 10
x7371:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7375:	xor edx, edx	; 3: 102 49 210
x7378:	idiv dword [@3717$int4$10#]	; 5: 102 247 62 24 29

printLongIntRec$6:	; Parameter 12 £temporary1651 6
x7383:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7387:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 233 28
x7392:	mov [bp + 14], bp	; 3: 137 110 14
x7395:	add bp, 12	; 3: 131 197 12
x7398:	nop	; 1: 144
x7399:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1653 digit 48
x7401:	mov ax, [bp + 10]	; 3: 139 70 10
x7404:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1654 £temporary1653
x7407:	cmp ax, 0	; 3: 131 248 0
x7410:	jge printLongIntRec$12	; 2: 125 4
x7412:	neg ax	; 2: 247 216
x7414:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1654 6
x7416:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7419:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 9 29
x7424:	mov [bp + 14], bp	; 3: 137 110 14
x7427:	add bp, 12	; 3: 131 197 12
x7430:	jmp printChar	; 3: 233 71 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7433:	mov ax, [bp]	; 3: 139 70 0
x7436:	mov di, [bp + 4]	; 3: 139 126 4
x7439:	mov bp, [bp + 2]	; 3: 139 110 2
x7442:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

@3712$int4$10#:
x7444:	dd 10	; 4: 10 0 0 0

@3717$int4$10#:
x7448:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7452:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7456:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7458:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7462:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7464:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1618 s index
x7469:	mov si, [bp + 6]	; 3: 139 118 6
x7472:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1617 -> £temporary1618 £temporary1618 0

printString$5:	; Equal 53 £temporary1617 -> £temporary1618 0
x7475:	cmp byte [si], 0	; 3: 128 60 0
x7478:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1622 s index
x7482:	mov si, [bp + 6]	; 3: 139 118 6
x7485:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1621 -> £temporary1622 £temporary1622 0

printString$9:	; Parameter 12 £temporary1621 -> £temporary1622 6
x7488:	mov al, [si]	; 2: 138 4
x7490:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7493:	mov word [bp + 12], printString$11	; 5: 199 70 12 83 29
x7498:	mov [bp + 14], bp	; 3: 137 110 14
x7501:	add bp, 12	; 3: 131 197 12
x7504:	jmp printChar	; 3: 233 253 254

printString$11:	; PostCall 12

printString$12:	; Increment index
x7507:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7510:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7512:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1624 precision
x7517:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7520:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1624 0
x7523:	cmp ax, 0	; 3: 131 248 0
x7526:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1627 s index
x7530:	mov si, [bp + 6]	; 3: 139 118 6
x7533:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1626 -> £temporary1627 £temporary1627 0

printString$20:	; Equal 53 £temporary1626 -> £temporary1627 0
x7536:	cmp byte [si], 0	; 3: 128 60 0
x7539:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1632 s index
x7543:	mov si, [bp + 6]	; 3: 139 118 6
x7546:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1631 -> £temporary1632 £temporary1632 0

printString$24:	; Parameter 12 £temporary1631 -> £temporary1632 6
x7549:	mov al, [si]	; 2: 138 4
x7551:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7554:	mov word [bp + 12], printString$26	; 5: 199 70 12 144 29
x7559:	mov [bp + 14], bp	; 3: 137 110 14
x7562:	add bp, 12	; 3: 131 197 12
x7565:	jmp printChar	; 3: 233 192 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7568:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7571:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7573:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7577:	mov word [bp + 10], printString$32	; 5: 199 70 10 167 29
x7582:	mov [bp + 12], bp	; 3: 137 110 12
x7585:	add bp, 10	; 3: 131 197 10
x7588:	jmp printChar	; 3: 233 169 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7591:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7595:	mov word [bp + 10], printString$36	; 5: 199 70 10 185 29
x7600:	mov [bp + 12], bp	; 3: 137 110 12
x7603:	add bp, 10	; 3: 131 197 10
x7606:	jmp printChar	; 3: 233 151 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7609:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7613:	mov word [bp + 10], printString$40	; 5: 199 70 10 203 29
x7618:	mov [bp + 12], bp	; 3: 137 110 12
x7621:	add bp, 10	; 3: 131 197 10
x7624:	jmp printChar	; 3: 233 133 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7627:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7631:	mov word [bp + 10], printString$44	; 5: 199 70 10 221 29
x7636:	mov [bp + 12], bp	; 3: 137 110 12
x7639:	add bp, 10	; 3: 131 197 10
x7642:	jmp printChar	; 3: 233 115 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7645:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7649:	mov word [bp + 10], printString$48	; 5: 199 70 10 239 29
x7654:	mov [bp + 12], bp	; 3: 137 110 12
x7657:	add bp, 10	; 3: 131 197 10
x7660:	jmp printChar	; 3: 233 97 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7663:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7667:	mov word [bp + 10], printString$52	; 5: 199 70 10 1 30
x7672:	mov [bp + 12], bp	; 3: 137 110 12
x7675:	add bp, 10	; 3: 131 197 10
x7678:	jmp printChar	; 3: 233 79 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7681:	mov ax, [bp]	; 3: 139 70 0
x7684:	mov di, [bp + 4]	; 3: 139 126 4
x7687:	mov bp, [bp + 2]	; 3: 139 110 2
x7690:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7692:	mov word [bp + 8], isupper$2	; 5: 199 70 8 26 30
x7697:	mov [bp + 10], bp	; 3: 137 110 10
x7700:	add bp, 8	; 3: 131 197 8
x7703:	nop	; 1: 144
x7704:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary170

isupper$4:	; Assign localeConvPtr £temporary170
x7706:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7709:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7713:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary172 -> localeConvPtr localeConvPtr 14
x7715:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary172 -> localeConvPtr 6
x7718:	mov ax, [si + 14]	; 3: 139 68 14
x7721:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7724:	mov ax, [bp + 6]	; 3: 139 70 6
x7727:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7730:	mov word [bp + 10], isupper$11	; 5: 199 70 10 64 30
x7735:	mov [bp + 12], bp	; 3: 137 110 12
x7738:	add bp, 10	; 3: 131 197 10
x7741:	jmp strchr	; 3: 233 125 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary173

isupper$13:	; Equal 16 £temporary173 0
x7744:	cmp bx, 0	; 3: 131 251 0
x7747:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary175 1
x7749:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7752:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary175 0
x7754:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary175

isupper$18:	; Return £temporary175
x7757:	mov ax, [bp]	; 3: 139 70 0
x7760:	mov di, [bp + 4]	; 3: 139 126 4
x7763:	mov bp, [bp + 2]	; 3: 139 110 2
x7766:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7768:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7772:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7774:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7778:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary179 1
x7780:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7783:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary179 0
x7785:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary179

isupper$25:	; Return £temporary179
x7788:	mov ax, [bp]	; 3: 139 70 0
x7791:	mov di, [bp + 4]	; 3: 139 126 4
x7794:	mov bp, [bp + 2]	; 3: 139 110 2
x7797:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7799:	cmp word [@763$g_currStructPtr], 0	; 5: 131 62 149 30 0
x7804:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary303 -> g_currStructPtr g_currStructPtr 2
x7806:	mov si, [@763$g_currStructPtr]	; 4: 139 54 149 30

localeconv$2:	; Assign £temporary307 £temporary303 -> g_currStructPtr
x7810:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7813:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary307 0
x7815:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary307

localeconv$6:	; Return £temporary307
x7818:	mov ax, [bp]	; 3: 139 70 0
x7821:	mov di, [bp + 4]	; 3: 139 126 4
x7824:	mov bp, [bp + 2]	; 3: 139 110 2
x7827:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@763$g_currStructPtr:
x7829:	dw @754$g_sArray	; 2: 151 30

@754$g_sArray:
x7831:	dw @748$string_# ; 2: 163 30
x7833:	dw @743$en_US_utf8	; 2: 164 30
x7835:	dw @750$string_C# ; 2: 184 33
x7837:	dw @743$en_US_utf8	; 2: 164 30
x7839:	dw @752$string_US# ; 2: 186 33
x7841:	dw @743$en_US_utf8	; 2: 164 30

@748$string_#:
x7843:	db 0	; 1: 0

@743$en_US_utf8:
x7844:	dw 1	; 2: 1 0
x7846:	dw 1	; 2: 1 0
x7848:	dw @684$enShortDayList ; 2: 182 30
x7850:	dw @692$enLongDayList ; 2: 224 30
x7852:	dw @705$enShortMonthList ; 2: 39 31
x7854:	dw @718$enLongMonthList ; 2: 111 31
x7856:	dw @741$string_abcdefghijklmnopqrstuvwxyz# ; 2: 221 31
x7858:	dw @742$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 248 31
x7860:	dw enMessageList ; 2: 19 32

@684$enShortDayList:
x7862:	dw @677$string_Sun# ; 2: 196 30
x7864:	dw @678$string_Mon# ; 2: 200 30
x7866:	dw @679$string_Tue# ; 2: 204 30
x7868:	dw @680$string_Wed# ; 2: 208 30
x7870:	dw @681$string_Thu# ; 2: 212 30
x7872:	dw @682$string_Fri# ; 2: 216 30
x7874:	dw @683$string_Sat# ; 2: 220 30

@677$string_Sun#:
x7876:	db "Sun", 0	; 4: 83 117 110 0

@678$string_Mon#:
x7880:	db "Mon", 0	; 4: 77 111 110 0

@679$string_Tue#:
x7884:	db "Tue", 0	; 4: 84 117 101 0

@680$string_Wed#:
x7888:	db "Wed", 0	; 4: 87 101 100 0

@681$string_Thu#:
x7892:	db "Thu", 0	; 4: 84 104 117 0

@682$string_Fri#:
x7896:	db "Fri", 0	; 4: 70 114 105 0

@683$string_Sat#:
x7900:	db "Sat", 0	; 4: 83 97 116 0

@692$enLongDayList:
x7904:	dw @685$string_Sunday# ; 2: 238 30
x7906:	dw @686$string_Monday# ; 2: 245 30
x7908:	dw @687$string_Tuesday# ; 2: 252 30
x7910:	dw @688$string_Wednesday# ; 2: 4 31
x7912:	dw @689$string_Thursday# ; 2: 14 31
x7914:	dw @690$string_Friday# ; 2: 23 31
x7916:	dw @691$string_Saturday# ; 2: 30 31

@685$string_Sunday#:
x7918:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@686$string_Monday#:
x7925:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@687$string_Tuesday#:
x7932:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@688$string_Wednesday#:
x7940:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@689$string_Thursday#:
x7950:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@690$string_Friday#:
x7959:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@691$string_Saturday#:
x7966:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@705$enShortMonthList:
x7975:	dw @693$string_Jan# ; 2: 63 31
x7977:	dw @694$string_Feb# ; 2: 67 31
x7979:	dw @695$string_Mar# ; 2: 71 31
x7981:	dw @696$string_Apr# ; 2: 75 31
x7983:	dw @697$string_May# ; 2: 79 31
x7985:	dw @698$string_Jun# ; 2: 83 31
x7987:	dw @699$string_Jul# ; 2: 87 31
x7989:	dw @700$string_Aug# ; 2: 91 31
x7991:	dw @701$string_Sep# ; 2: 95 31
x7993:	dw @702$string_Oct# ; 2: 99 31
x7995:	dw @703$string_Nov# ; 2: 103 31
x7997:	dw @704$string_Dec# ; 2: 107 31

@693$string_Jan#:
x7999:	db "Jan", 0	; 4: 74 97 110 0

@694$string_Feb#:
x8003:	db "Feb", 0	; 4: 70 101 98 0

@695$string_Mar#:
x8007:	db "Mar", 0	; 4: 77 97 114 0

@696$string_Apr#:
x8011:	db "Apr", 0	; 4: 65 112 114 0

@697$string_May#:
x8015:	db "May", 0	; 4: 77 97 121 0

@698$string_Jun#:
x8019:	db "Jun", 0	; 4: 74 117 110 0

@699$string_Jul#:
x8023:	db "Jul", 0	; 4: 74 117 108 0

@700$string_Aug#:
x8027:	db "Aug", 0	; 4: 65 117 103 0

@701$string_Sep#:
x8031:	db "Sep", 0	; 4: 83 101 112 0

@702$string_Oct#:
x8035:	db "Oct", 0	; 4: 79 99 116 0

@703$string_Nov#:
x8039:	db "Nov", 0	; 4: 78 111 118 0

@704$string_Dec#:
x8043:	db "Dec", 0	; 4: 68 101 99 0

@718$enLongMonthList:
x8047:	dw @706$string_January# ; 2: 135 31
x8049:	dw @707$string_February# ; 2: 143 31
x8051:	dw @708$string_March# ; 2: 152 31
x8053:	dw @709$string_April# ; 2: 158 31
x8055:	dw @710$string_May# ; 2: 164 31
x8057:	dw @711$string_June# ; 2: 168 31
x8059:	dw @712$string_July# ; 2: 173 31
x8061:	dw @713$string_August# ; 2: 178 31
x8063:	dw @714$string_September# ; 2: 185 31
x8065:	dw @715$string_October# ; 2: 195 31
x8067:	dw @716$string_November# ; 2: 203 31
x8069:	dw @717$string_December# ; 2: 212 31

@706$string_January#:
x8071:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@707$string_February#:
x8079:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@708$string_March#:
x8088:	db "March", 0	; 6: 77 97 114 99 104 0

@709$string_April#:
x8094:	db "April", 0	; 6: 65 112 114 105 108 0

@710$string_May#:
x8100:	db "May", 0	; 4: 77 97 121 0

@711$string_June#:
x8104:	db "June", 0	; 5: 74 117 110 101 0

@712$string_July#:
x8109:	db "July", 0	; 5: 74 117 108 121 0

@713$string_August#:
x8114:	db "August", 0	; 7: 65 117 103 117 115 116 0

@714$string_September#:
x8121:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@715$string_October#:
x8131:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@716$string_November#:
x8139:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@717$string_December#:
x8148:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@741$string_abcdefghijklmnopqrstuvwxyz#:
x8157:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

@742$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8184:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8211:	dw @719$string_no20error# ; 2: 59 32
x8213:	dw @720$string_function20number20invalid# ; 2: 68 32
x8215:	dw @721$string_file20not20found# ; 2: 92 32
x8217:	dw @722$string_path20not20found# ; 2: 107 32
x8219:	dw @723$string_no20handle20available# ; 2: 122 32
x8221:	dw @724$string_access20denied# ; 2: 142 32
x8223:	dw @725$string_out20of20domain# ; 2: 156 32
x8225:	dw @726$string_out20of20range# ; 2: 170 32
x8227:	dw @727$string_invalid20multibyte20sequence# ; 2: 183 32
x8229:	dw @728$string_error20while20opening# ; 2: 210 32
x8231:	dw @729$string_error20while20flushing# ; 2: 230 32
x8233:	dw @730$string_error20while20closing# ; 2: 251 32
x8235:	dw @731$string_open20mode20invalid# ; 2: 15 33
x8237:	dw @732$string_error20while20writing# ; 2: 33 33
x8239:	dw @733$string_error20while20reading# ; 2: 53 33
x8241:	dw @734$string_error20while20seeking# ; 2: 73 33
x8243:	dw @735$string_error20while20telling# ; 2: 93 33
x8245:	dw @736$string_error20while20sizing# ; 2: 113 33
x8247:	dw @737$string_error20while20removing20file# ; 2: 132 33
x8249:	dw @738$string_error20while20renaming20file# ; 2: 158 33

@719$string_no20error#:
x8251:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

@720$string_function20number20invalid#:
x8260:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

@721$string_file20not20found#:
x8284:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

@722$string_path20not20found#:
x8299:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

@723$string_no20handle20available#:
x8314:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

@724$string_access20denied#:
x8334:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

@725$string_out20of20domain#:
x8348:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

@726$string_out20of20range#:
x8362:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

@727$string_invalid20multibyte20sequence#:
x8375:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

@728$string_error20while20opening#:
x8402:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

@729$string_error20while20flushing#:
x8422:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

@730$string_error20while20closing#:
x8443:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

@731$string_open20mode20invalid#:
x8463:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

@732$string_error20while20writing#:
x8481:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

@733$string_error20while20reading#:
x8501:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

@734$string_error20while20seeking#:
x8521:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

@735$string_error20while20telling#:
x8541:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

@736$string_error20while20sizing#:
x8561:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

@737$string_error20while20removing20file#:
x8580:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

@738$string_error20while20renaming20file#:
x8606:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

@750$string_C#:
x8632:	db "C", 0	; 2: 67 0

@752$string_US#:
x8634:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary3810 i
x8637:	mov ax, [bp + 8]	; 3: 139 70 8
x8640:	cmp ax, 0	; 3: 131 248 0
x8643:	jge strchr$1	; 2: 125 4
x8645:	neg ax	; 2: 247 216
x8647:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary3810
x8649:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8652:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary3812 text index
x8657:	mov si, [bp + 6]	; 3: 139 118 6
x8660:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary3811 -> £temporary3812 £temporary3812 0

strchr$5:	; Equal 16 £temporary3811 -> £temporary3812 0
x8663:	cmp byte [si], 0	; 3: 128 60 0
x8666:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary3816 text index
x8668:	mov si, [bp + 6]	; 3: 139 118 6
x8671:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary3815 -> £temporary3816 £temporary3816 0

strchr$8:	; NotEqual 14 £temporary3815 -> £temporary3816 c
x8674:	mov al, [bp + 12]	; 3: 138 70 12
x8677:	cmp [si], al	; 2: 56 4
x8679:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary3819 text index
x8681:	mov bx, [bp + 6]	; 3: 139 94 6
x8684:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary3818 -> £temporary3819 £temporary3819 0

strchr$11:	; address £temporary3820 £temporary3818 -> £temporary3819

strchr$12:	; SetReturnValue £temporary3820

strchr$13:	; Return £temporary3820
x8687:	mov ax, [bp]	; 3: 139 70 0
x8690:	mov di, [bp + 4]	; 3: 139 126 4
x8693:	mov bp, [bp + 2]	; 3: 139 110 2
x8696:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8698:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8701:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8703:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8706:	mov ax, [bp]	; 3: 139 70 0
x8709:	mov di, [bp + 4]	; 3: 139 126 4
x8712:	mov bp, [bp + 2]	; 3: 139 110 2
x8715:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8717:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8721:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8723:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8727:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 37 34
x8732:	mov [bp + 24], bp	; 3: 137 110 24
x8735:	add bp, 22	; 3: 131 197 22
x8738:	jmp printChar	; 3: 233 43 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8741:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8745:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8747:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8751:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 61 34
x8756:	mov [bp + 24], bp	; 3: 137 110 24
x8759:	add bp, 22	; 3: 131 197 22
x8762:	jmp printChar	; 3: 233 19 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8765:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8769:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8771:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8776:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8778:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8782:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 92 34
x8787:	mov [bp + 24], bp	; 3: 137 110 24
x8790:	add bp, 22	; 3: 131 197 22
x8793:	jmp printChar	; 3: 233 244 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8796:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8801:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8803:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8807:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 117 34
x8812:	mov [bp + 24], bp	; 3: 137 110 24
x8815:	add bp, 22	; 3: 131 197 22
x8818:	jmp printChar	; 3: 233 219 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8821:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8825:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1708 88
x8827:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8829:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1708 120
x8831:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1708 6
x8833:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8836:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 146 34
x8841:	mov [bp + 24], bp	; 3: 137 110 24
x8844:	add bp, 22	; 3: 131 197 22
x8847:	jmp printChar	; 3: 233 190 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8850:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8855:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8857:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8861:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 171 34
x8866:	mov [bp + 24], bp	; 3: 137 110 24
x8869:	add bp, 22	; 3: 131 197 22
x8872:	jmp printChar	; 3: 233 165 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8875:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8877:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8881:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8885:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8889:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8893:	mov ax, [bp + 20]	; 3: 139 70 20
x8896:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8899:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 209 34
x8904:	mov [bp + 24], bp	; 3: 137 110 24
x8907:	add bp, 22	; 3: 131 197 22
x8910:	nop	; 1: 144
x8911:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8913:	mov ax, [bp]	; 3: 139 70 0
x8916:	mov di, [bp + 4]	; 3: 139 126 4
x8919:	mov bp, [bp + 2]	; 3: 139 110 2
x8922:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8924:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8929:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1684 unsignedValue base
x8931:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8935:	xor edx, edx	; 3: 102 49 210
x8938:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1685 £temporary1684

printUnsignedLongRec$3:	; Assign digit £temporary1685
x8942:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1686 unsignedValue base
x8945:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8949:	xor edx, edx	; 3: 102 49 210
x8952:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1686 6
x8956:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8960:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8964:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8968:	mov ax, [bp + 14]	; 3: 139 70 14
x8971:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8974:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 28 35
x8979:	mov [bp + 20], bp	; 3: 137 110 20
x8982:	add bp, 18	; 3: 131 197 18
x8985:	nop	; 1: 144
x8986:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8988:	mov ax, [bp + 16]	; 3: 139 70 16
x8991:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8994:	mov ax, [bp + 14]	; 3: 139 70 14
x8997:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x9000:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 54 35
x9005:	mov [bp + 20], bp	; 3: 137 110 20
x9008:	add bp, 18	; 3: 131 197 18
x9011:	nop	; 1: 144
x9012:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1688

printUnsignedLongRec$17:	; Assign c £temporary1688
x9014:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x9017:	mov al, [bp + 18]	; 3: 138 70 18
x9020:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x9023:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 77 35
x9028:	mov [bp + 21], bp	; 3: 137 110 21
x9031:	add bp, 19	; 3: 131 197 19
x9034:	jmp printChar	; 3: 233 3 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x9037:	mov ax, [bp]	; 3: 139 70 0
x9040:	mov di, [bp + 4]	; 3: 139 126 4
x9043:	mov bp, [bp + 2]	; 3: 139 110 2
x9046:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x9048:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x9052:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1674 digit 48
x9054:	mov bx, [bp + 6]	; 3: 139 94 6
x9057:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1675 £temporary1674
x9060:	cmp bx, 0	; 3: 131 251 0
x9063:	jge digitToChar$3	; 2: 125 4
x9065:	neg bx	; 2: 247 219
x9067:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1675

digitToChar$4:	; Return £temporary1675
x9069:	mov ax, [bp]	; 3: 139 70 0
x9072:	mov di, [bp + 4]	; 3: 139 126 4
x9075:	mov bp, [bp + 2]	; 3: 139 110 2
x9078:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9080:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9084:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1676 digit 10
x9086:	mov bx, [bp + 6]	; 3: 139 94 6
x9089:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1677 £temporary1676 65
x9092:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1678 £temporary1677
x9095:	cmp bx, 0	; 3: 131 251 0
x9098:	jge digitToChar$9	; 2: 125 4
x9100:	neg bx	; 2: 247 219
x9102:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1678

digitToChar$10:	; Return £temporary1678
x9104:	mov ax, [bp]	; 3: 139 70 0
x9107:	mov di, [bp + 4]	; 3: 139 126 4
x9110:	mov bp, [bp + 2]	; 3: 139 110 2
x9113:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1679 digit 10
x9115:	mov bx, [bp + 6]	; 3: 139 94 6
x9118:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1680 £temporary1679 97
x9121:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1681 £temporary1680
x9124:	cmp bx, 0	; 3: 131 251 0
x9127:	jge digitToChar$14	; 2: 125 4
x9129:	neg bx	; 2: 247 219
x9131:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1681

digitToChar$15:	; Return £temporary1681
x9133:	mov ax, [bp]	; 3: 139 70 0
x9136:	mov di, [bp + 4]	; 3: 139 126 4
x9139:	mov bp, [bp + 2]	; 3: 139 110 2
x9142:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9144:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9147:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9149:	fcompp	; 2: 222 217
x9151:	fstsw ax	; 3: 155 223 224
x9154:	sahf	; 1: 158
x9155:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9157:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9161:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 215 35
x9166:	mov [bp + 24], bp	; 3: 137 110 24
x9169:	add bp, 22	; 3: 131 197 22
x9172:	jmp printChar	; 3: 233 121 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9175:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1744 longDoubleValue
x9178:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9180:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9183:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9188:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9193:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1745 longDoubleValue
x9196:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x9200:	mov eax, [container4bytes#]	; 4: 102 161 80 36

printLongDoublePlain$14:	; Assign longValue £temporary1745
x9204:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9208:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9212:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9216:	mov ax, [bp + 14]	; 3: 139 70 14
x9219:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9222:	mov ax, [bp + 16]	; 3: 139 70 16
x9225:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9228:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 26 36
x9233:	mov [bp + 28], bp	; 3: 137 110 28
x9236:	add bp, 26	; 3: 131 197 26
x9239:	jmp printLongInt	; 3: 233 162 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9242:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1747 longValue
x9245:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1748 longDoubleValue £temporary1747
x9248:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9250:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9253:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9256:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9259:	mov ax, [bp + 18]	; 3: 139 70 18
x9262:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9265:	mov ax, [bp + 20]	; 3: 139 70 20
x9268:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9271:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 69 36
x9276:	mov [bp + 28], bp	; 3: 137 110 28
x9279:	add bp, 26	; 3: 131 197 26
x9282:	nop	; 1: 144
x9283:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9285:	mov ax, [bp]	; 3: 139 70 0
x9288:	mov di, [bp + 4]	; 3: 139 126 4
x9291:	mov bp, [bp + 2]	; 3: 139 110 2
x9294:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9296:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9300:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9303:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1723 longDoubleValue
x9306:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x9310:	mov eax, [container4bytes#]	; 4: 102 161 80 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1724 £temporary1723
x9314:	mov [container4bytes#], eax	; 4: 102 163 80 36
x9318:	fild dword [container4bytes#]	; 4: 219 6 80 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1725 longDoubleValue £temporary1724
x9322:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9324:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9327:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9331:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9333:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9338:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9342:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9344:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9348:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9350:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9354:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 152 36
x9359:	mov [bp + 20], bp	; 3: 137 110 20
x9362:	add bp, 18	; 3: 131 197 18
x9365:	jmp printChar	; 3: 233 184 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1731 precision
x9368:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9371:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1731 0
x9374:	cmp ax, 0	; 3: 131 248 0
x9377:	jle printLongDoubleFraction$35	; 2: 126 70

printLongDoubleFraction$17:	; PushFloat 10.0
x9379:	fld qword [@3876$float8$10.0#]	; 4: 221 6 244 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9383:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1733 10.0 longDoubleValue
x9386:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
x9388:	fstp qword [bp + 18]	; 3: 221 94 18

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
x9391:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1734 longDoubleValue10
x9394:	fistp word [container2bytes#]	; 4: 223 30 79 27
x9398:	mov ax, [container2bytes#]	; 3: 161 79 27

printLongDoubleFraction$23:	; Assign digitValue £temporary1734
x9401:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$25:	; BinaryAdd £temporary1735 digitValue 48
x9404:	mov ax, [bp + 26]	; 3: 139 70 26
x9407:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1736 £temporary1735
x9410:	cmp ax, 0	; 3: 131 248 0
x9413:	jge printLongDoubleFraction$27	; 2: 125 4
x9415:	neg ax	; 2: 247 216
x9417:	neg al	; 2: 246 216

printLongDoubleFraction$27:	; Parameter 28 £temporary1736 6
x9419:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$28:	; Call 28 printChar 0
x9422:	mov word [bp + 28], printLongDoubleFraction$29	; 5: 199 70 28 220 36
x9427:	mov [bp + 30], bp	; 3: 137 110 30
x9430:	add bp, 28	; 3: 131 197 28
x9433:	jmp printChar	; 3: 233 116 247

printLongDoubleFraction$29:	; PostCall 28

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
x9436:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$31:	; IntegralToFloating £temporary1738 digitValue
x9439:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$32:	; BinarySubtract £temporary1739 longDoubleValue10 £temporary1738
x9442:	fsub	; 2: 222 233

printLongDoubleFraction$33:	; PopFloat longDoubleValue
x9444:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$34:	; Goto 14
x9447:	jmp printLongDoubleFraction$14	; 2: 235 175

printLongDoubleFraction$35:	; Return 0
x9449:	mov ax, [bp]	; 3: 139 70 0
x9452:	mov di, [bp + 4]	; 3: 139 126 4
x9455:	mov bp, [bp + 2]	; 3: 139 110 2
x9458:	jmp ax	; 2: 255 224

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction

@3876$float8$10.0#:
x9460:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9468:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9471:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9473:	fcompp	; 2: 222 217
x9475:	fstsw ax	; 3: 155 223 224
x9478:	sahf	; 1: 158
x9479:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9481:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary616 x
x9484:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9486:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9488:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary620

fabs$9:	; Return £temporary620
x9491:	mov ax, [bp]	; 3: 139 70 0
x9494:	mov di, [bp + 4]	; 3: 139 126 4
x9497:	mov bp, [bp + 2]	; 3: 139 110 2
x9500:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9502:	mov ax, [bp + 6]	; 3: 139 70 6
x9505:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9508:	mov word [bp + 8], tolower$3	; 5: 199 70 8 50 37
x9513:	mov [bp + 10], bp	; 3: 137 110 10
x9516:	add bp, 8	; 3: 131 197 8
x9519:	jmp isupper	; 3: 233 218 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary250

tolower$5:	; Equal 31 £temporary250 0
x9522:	cmp bx, 0	; 3: 131 251 0
x9525:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9527:	mov word [bp + 8], tolower$8	; 5: 199 70 8 69 37
x9532:	mov [bp + 10], bp	; 3: 137 110 10
x9535:	add bp, 8	; 3: 131 197 8
x9538:	jmp localeconv	; 3: 233 50 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary251

tolower$10:	; Assign localeConvPtr £temporary251
x9541:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9544:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9548:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary253 -> localeConvPtr localeConvPtr 12
x9550:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary253 -> localeConvPtr
x9553:	mov ax, [si + 12]	; 3: 139 68 12
x9556:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary254 -> localeConvPtr localeConvPtr 14
x9559:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary254 -> localeConvPtr
x9562:	mov ax, [si + 14]	; 3: 139 68 14
x9565:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9568:	mov ax, [bp + 12]	; 3: 139 70 12
x9571:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9574:	mov ax, [bp + 6]	; 3: 139 70 6
x9577:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9580:	mov word [bp + 14], tolower$20	; 5: 199 70 14 122 37
x9585:	mov [bp + 16], bp	; 3: 137 110 16
x9588:	add bp, 14	; 3: 131 197 14
x9591:	jmp strchr	; 3: 233 67 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary255

tolower$22:	; BinarySubtract index £temporary255 upperCase
x9594:	sub bx, [bp + 12]	; 3: 43 94 12
x9597:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary258 lowerCase index
x9600:	mov si, [bp + 10]	; 3: 139 118 10
x9603:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary257 -> £temporary258 £temporary258 0

tolower$25:	; IntegralToIntegral £temporary259 £temporary257 -> £temporary258
x9606:	mov bl, [si]	; 2: 138 28
x9608:	and bx, 255	; 4: 129 227 255 0
x9612:	cmp bl, 0	; 3: 128 251 0
x9615:	jge tolower$26	; 2: 125 4
x9617:	neg bl	; 2: 246 219
x9619:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary259

tolower$27:	; Return £temporary259
x9621:	mov ax, [bp]	; 3: 139 70 0
x9624:	mov di, [bp + 4]	; 3: 139 126 4
x9627:	mov bp, [bp + 2]	; 3: 139 110 2
x9630:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary260 c 32
x9632:	mov bx, [bp + 6]	; 3: 139 94 6
x9635:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary260

tolower$30:	; Return £temporary260
x9638:	mov ax, [bp]	; 3: 139 70 0
x9641:	mov di, [bp + 4]	; 3: 139 126 4
x9644:	mov bp, [bp + 2]	; 3: 139 110 2
x9647:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9649:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9652:	mov ax, [bp]	; 3: 139 70 0
x9655:	mov di, [bp + 4]	; 3: 139 126 4
x9658:	mov bp, [bp + 2]	; 3: 139 110 2
x9661:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9663:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9666:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9668:	fcompp	; 2: 222 217
x9670:	fstsw ax	; 3: 155 223 224
x9673:	sahf	; 1: 158
x9674:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9676:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9680:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 222 37
x9685:	mov [bp + 26], bp	; 3: 137 110 26
x9688:	add bp, 24	; 3: 131 197 24
x9691:	jmp printChar	; 3: 233 114 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9694:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9696:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9699:	mov ax, [bp + 20]	; 3: 139 70 20
x9702:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9705:	mov ax, [bp + 18]	; 3: 139 70 18
x9708:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9711:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 253 37
x9716:	mov [bp + 26], bp	; 3: 137 110 26
x9719:	add bp, 24	; 3: 131 197 24
x9722:	jmp printLongDoubleFraction	; 3: 233 87 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9725:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9729:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1764 69
x9731:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9733:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1764 101
x9735:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1764 6
x9737:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9740:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 26 38
x9745:	mov [bp + 26], bp	; 3: 137 110 26
x9748:	add bp, 24	; 3: 131 197 24
x9751:	jmp printChar	; 3: 233 54 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9754:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9758:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 44 38
x9763:	mov [bp + 26], bp	; 3: 137 110 26
x9766:	add bp, 24	; 3: 131 197 24
x9769:	jmp printChar	; 3: 233 36 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9772:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9775:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9778:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9780:	fcompp	; 2: 222 217
x9782:	fstsw ax	; 3: 155 223 224
x9785:	sahf	; 1: 158
x9786:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9788:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9792:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 78 38
x9797:	mov [bp + 26], bp	; 3: 137 110 26
x9800:	add bp, 24	; 3: 131 197 24
x9803:	jmp printChar	; 3: 233 2 246

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9806:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1769 value
x9809:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9811:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9814:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9817:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9820:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 106 38
x9825:	mov [bp + 26], bp	; 3: 137 110 26
x9828:	add bp, 24	; 3: 131 197 24
x9831:	jmp log10	; 3: 233 196 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1770

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1771 £temporary1770
x9834:	fistp word [container2bytes#]	; 4: 223 30 79 27
x9838:	mov ax, [container2bytes#]	; 3: 161 79 27

printLongDoubleExpo$44:	; Assign expo £temporary1771
x9841:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9844:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9847:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9850:	fld qword [@3952$float8$10.0#]	; 4: 221 6 38 39

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9854:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1772 expo
x9857:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1772 14
x9860:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9863:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 149 38
x9868:	mov [bp + 36], bp	; 3: 137 110 36
x9871:	add bp, 34	; 3: 131 197 34
x9874:	jmp pow	; 3: 233 6 2

printLongDoubleExpo$52:	; PostCall 26
x9877:	fstp qword [bp + 34]	; 3: 221 94 34
x9880:	fld qword [bp + 26]	; 3: 221 70 26
x9883:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1773

printLongDoubleExpo$54:	; SignedDivide £temporary1774 value £temporary1773
x9886:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9888:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9891:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9894:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9897:	mov ax, [bp + 14]	; 3: 139 70 14
x9900:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9903:	mov ax, [bp + 16]	; 3: 139 70 16
x9906:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9909:	mov ax, [bp + 18]	; 3: 139 70 18
x9912:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9915:	mov ax, [bp + 20]	; 3: 139 70 20
x9918:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9921:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 207 38
x9926:	mov [bp + 28], bp	; 3: 137 110 28
x9929:	add bp, 26	; 3: 131 197 26
x9932:	jmp printLongDoublePlain	; 3: 233 233 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9935:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9939:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1780 69
x9941:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9943:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1780 101
x9945:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1780 6
x9947:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9950:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 236 38
x9955:	mov [bp + 28], bp	; 3: 137 110 28
x9958:	add bp, 26	; 3: 131 197 26
x9961:	jmp printChar	; 3: 233 100 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1782 expo
x9964:	mov ax, [bp + 24]	; 3: 139 70 24
x9967:	and eax, 65535	; 6: 102 37 255 255 0 0
x9973:	cmp ax, 0	; 3: 131 248 0
x9976:	jge printLongDoubleExpo$75	; 2: 125 5
x9978:	neg ax	; 2: 247 216
x9980:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1782 6
x9983:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9987:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9992:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9997:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 27 39
x10002:	mov [bp + 28], bp	; 3: 137 110 28
x10005:	add bp, 26	; 3: 131 197 26
x10008:	jmp printLongInt	; 3: 233 161 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x10011:	mov ax, [bp]	; 3: 139 70 0
x10014:	mov di, [bp + 4]	; 3: 139 126 4
x10017:	mov bp, [bp + 2]	; 3: 139 110 2
x10020:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

@3952$float8$10.0#:
x10022:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x10030:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x10033:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x10036:	mov word [bp + 14], log10$4	; 5: 199 70 14 66 39
x10041:	mov [bp + 16], bp	; 3: 137 110 16
x10044:	add bp, 14	; 3: 131 197 14
x10047:	nop	; 1: 144
x10048:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary337

log10$6:	; PushFloat 2.30
x10050:	fld qword [@915$float8$2.30#]	; 4: 221 6 83 39

log10$7:	; SignedDivide £temporary338 £temporary337 2.30
x10054:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary338

log10$9:	; Return £temporary338
x10056:	mov ax, [bp]	; 3: 139 70 0
x10059:	mov di, [bp + 4]	; 3: 139 126 4
x10062:	mov bp, [bp + 2]	; 3: 139 110 2
x10065:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

@915$float8$2.30#:
x10067:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x10075:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x10078:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 76 x 0
x10080:	fcompp	; 2: 222 217
x10082:	fstsw ax	; 3: 155 223 224
x10085:	sahf	; 1: 158
x10086:	jae log$76	; 4: 15 131 238 0

log$3:	; Assign n 0
x10090:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10095:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10098:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10100:	fcompp	; 2: 222 217
x10102:	fstsw ax	; 3: 155 223 224
x10105:	sahf	; 1: 158
x10106:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10108:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10111:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10113:	fcompp	; 2: 222 217
x10115:	fstsw ax	; 3: 155 223 224
x10118:	sahf	; 1: 158
x10119:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10121:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10124:	fld qword [@863$float8$2.71#]	; 4: 221 6 107 40

log$12:	; SignedDivide £temporary319 x 2.71
x10128:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10130:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10133:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10136:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10138:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10141:	fld qword [@868$float8$0.368#]	; 4: 221 6 115 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10145:	fcompp	; 2: 222 217
x10147:	fstsw ax	; 3: 155 223 224
x10150:	sahf	; 1: 158
x10151:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10153:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10156:	fld qword [@871$float8$0.368#]	; 4: 221 6 123 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10160:	fcompp	; 2: 222 217
x10162:	fstsw ax	; 3: 155 223 224
x10165:	sahf	; 1: 158
x10166:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10168:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10171:	fld qword [@874$float8$2.71#]	; 4: 221 6 131 40

log$24:	; SignedMultiply £temporary323 x 2.71
x10175:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10177:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10180:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10183:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10185:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10187:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10190:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10192:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10195:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10197:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10200:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10203:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary325 x 1
x10205:	fsub	; 2: 222 233

log$37:	; PopFloat x_minus_1
x10207:	fstp qword [bp + 48]	; 3: 221 94 48

log$38:	; PushFloat x_minus_1
x10210:	fld qword [bp + 48]	; 3: 221 70 48

log$39:	; PopFloat power
x10213:	fstp qword [bp + 56]	; 3: 221 94 56

log$40:	; PushFloat sign
x10216:	fld qword [bp + 40]	; 3: 221 70 40

log$41:	; PushFloat power
x10219:	fld qword [bp + 56]	; 3: 221 70 56

log$42:	; SignedMultiply £temporary326 sign power
x10222:	fmul	; 2: 222 201

log$43:	; PushFloat index
x10224:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushOne
x10227:	fld1	; 2: 217 232

log$45:	; BinaryAdd index index 1
x10229:	fadd	; 2: 222 193

log$46:	; TopFloat index
x10231:	fst qword [bp + 16]	; 3: 221 86 16

log$47:	; PushOne
x10234:	fld1	; 2: 217 232

log$48:	; BinarySubtract index index 1
x10236:	fsub	; 2: 222 233

log$49:	; SignedDivide £temporary328 £temporary326 £temporary327
x10238:	fdiv	; 2: 222 249

log$50:	; PopFloat term
x10240:	fstp qword [bp + 24]	; 3: 221 94 24

log$51:	; PushFloat sum
x10243:	fld qword [bp + 32]	; 3: 221 70 32

log$52:	; PushFloat term
x10246:	fld qword [bp + 24]	; 3: 221 70 24

log$53:	; BinaryAdd £temporary329 sum term
x10249:	fadd	; 2: 222 193

log$54:	; PopFloat sum
x10251:	fstp qword [bp + 32]	; 3: 221 94 32

log$55:	; PushFloat power
x10254:	fld qword [bp + 56]	; 3: 221 70 56

log$56:	; PushFloat x_minus_1
x10257:	fld qword [bp + 48]	; 3: 221 70 48

log$57:	; SignedMultiply £temporary330 power x_minus_1
x10260:	fmul	; 2: 222 201

log$58:	; PopFloat power
x10262:	fstp qword [bp + 56]	; 3: 221 94 56

log$59:	; PushFloat sign
x10265:	fld qword [bp + 40]	; 3: 221 70 40

log$60:	; PushFloat -1.0
x10268:	fld qword [@900$float8$minus1.0#]	; 4: 221 6 139 40

log$61:	; SignedMultiply £temporary331 sign -1.0
x10272:	fmul	; 2: 222 201

log$62:	; PopFloat sign
x10274:	fstp qword [bp + 40]	; 3: 221 94 40

log$63:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$64:	; PushFloat term
x10277:	fld qword [bp + 24]	; 3: 221 70 24

log$65:	; Parameter 64 term 6
x10280:	fstp qword [bp + 70]	; 3: 221 94 70

log$66:	; Call 64 fabs 0
x10283:	mov word [bp + 64], log$67	; 5: 199 70 64 57 40
x10288:	mov [bp + 66], bp	; 3: 137 110 66
x10291:	add bp, 64	; 3: 131 197 64
x10294:	jmp fabs	; 3: 233 195 252

log$67:	; PostCall 64

log$68:	; GetReturnValue £temporary332

log$69:	; PushFloat 0.000000001
x10297:	fld qword [@904$float8$0.000000001#]	; 4: 221 6 147 40

log$70:	; SignedGreaterThanEqual 40 £temporary332 0.000000001
x10301:	fcompp	; 2: 222 217
x10303:	fstsw ax	; 3: 155 223 224
x10306:	sahf	; 1: 158
x10307:	jbe log$40	; 2: 118 163

log$71:	; PushFloat sum
x10309:	fld qword [bp + 32]	; 3: 221 70 32

log$72:	; IntegralToFloating £temporary334 n
x10312:	fild word [bp + 14]	; 3: 223 70 14

log$73:	; BinaryAdd £temporary335 sum £temporary334
x10315:	fadd	; 2: 222 193

log$74:	; SetReturnValue £temporary335

log$75:	; Return £temporary335
x10317:	mov ax, [bp]	; 3: 139 70 0
x10320:	mov di, [bp + 4]	; 3: 139 126 4
x10323:	mov bp, [bp + 2]	; 3: 139 110 2
x10326:	jmp ax	; 2: 255 224

log$76:	; Assign errno 6
x10328:	mov word [errno], 6	; 6: 199 6 230 10 6 0

log$77:	; PushZero
x10334:	fldz	; 2: 217 238

log$78:	; SetReturnValue 0

log$79:	; Return 0
x10336:	mov ax, [bp]	; 3: 139 70 0
x10339:	mov di, [bp + 4]	; 3: 139 126 4
x10342:	mov bp, [bp + 2]	; 3: 139 110 2
x10345:	jmp ax	; 2: 255 224

log$80:	; FunctionEnd log

@863$float8$2.71#:
x10347:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@868$float8$0.368#:
x10355:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@871$float8$0.368#:
x10363:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@874$float8$2.71#:
x10371:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@900$float8$minus1.0#:
x10379:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@904$float8$0.000000001#:
x10387:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10395:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10398:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10400:	fcompp	; 2: 222 217
x10402:	fstsw ax	; 3: 155 223 224
x10405:	sahf	; 1: 158
x10406:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10408:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10411:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10414:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10417:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10420:	mov word [bp + 30], pow$9	; 5: 199 70 30 194 40
x10425:	mov [bp + 32], bp	; 3: 137 110 32
x10428:	add bp, 30	; 3: 131 197 30
x10431:	jmp log	; 3: 233 153 254

pow$9:	; PostCall 22
x10434:	fstp qword [bp + 30]	; 3: 221 94 30
x10437:	fld qword [bp + 22]	; 3: 221 70 22
x10440:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary341

pow$11:	; SignedMultiply £temporary342 y £temporary341
x10443:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary342 6
x10445:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10448:	mov word [bp + 22], pow$14	; 5: 199 70 22 222 40
x10453:	mov [bp + 24], bp	; 3: 137 110 24
x10456:	add bp, 22	; 3: 131 197 22
x10459:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary343

pow$16:	; SetReturnValue £temporary343

pow$17:	; Return £temporary343
x10462:	mov ax, [bp]	; 3: 139 70 0
x10465:	mov di, [bp + 4]	; 3: 139 126 4
x10468:	mov bp, [bp + 2]	; 3: 139 110 2
x10471:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10473:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10476:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10478:	fcompp	; 2: 222 217
x10480:	fstsw ax	; 3: 155 223 224
x10483:	sahf	; 1: 158
x10484:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10486:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10489:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10491:	fcompp	; 2: 222 217
x10493:	fstsw ax	; 3: 155 223 224
x10496:	sahf	; 1: 158
x10497:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10499:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10501:	mov ax, [bp]	; 3: 139 70 0
x10504:	mov di, [bp + 4]	; 3: 139 126 4
x10507:	mov bp, [bp + 2]	; 3: 139 110 2
x10510:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10512:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10515:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10517:	fcompp	; 2: 222 217
x10519:	fstsw ax	; 3: 155 223 224
x10522:	sahf	; 1: 158
x10523:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10525:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10528:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10530:	fcompp	; 2: 222 217
x10532:	fstsw ax	; 3: 155 223 224
x10535:	sahf	; 1: 158
x10536:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10538:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10540:	mov ax, [bp]	; 3: 139 70 0
x10543:	mov di, [bp + 4]	; 3: 139 126 4
x10546:	mov bp, [bp + 2]	; 3: 139 110 2
x10549:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10551:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10554:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10556:	fcompp	; 2: 222 217
x10558:	fstsw ax	; 3: 155 223 224
x10561:	sahf	; 1: 158
x10562:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10566:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10569:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10572:	mov word [bp + 22], pow$43	; 5: 199 70 22 90 41
x10577:	mov [bp + 24], bp	; 3: 137 110 24
x10580:	add bp, 22	; 3: 131 197 22
x10583:	jmp floor	; 3: 233 104 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary351

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10586:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10589:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10592:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10595:	mov word [bp + 30], pow$49	; 5: 199 70 30 113 41
x10600:	mov [bp + 32], bp	; 3: 137 110 32
x10603:	add bp, 30	; 3: 131 197 30
x10606:	jmp ceil	; 3: 233 159 1

pow$49:	; PostCall 22
x10609:	fstp qword [bp + 30]	; 3: 221 94 30
x10612:	fld qword [bp + 22]	; 3: 221 70 22
x10615:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary352

pow$51:	; NotEqual 90 £temporary351 £temporary352
x10618:	fcompp	; 2: 222 217
x10620:	fstsw ax	; 3: 155 223 224
x10623:	sahf	; 1: 158
x10624:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10628:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary355 y
x10631:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x10635:	mov eax, [container4bytes#]	; 4: 102 161 80 36

pow$54:	; Assign long_y £temporary355
x10639:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary356 long_y 2
x10643:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10647:	xor edx, edx	; 3: 102 49 210
x10650:	idiv dword [@954$int4$2#]	; 5: 102 247 62 64 42

pow$56:	; NotEqual 73 £temporary356 0
x10655:	cmp edx, 0	; 4: 102 131 250 0
x10659:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10661:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10664:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10667:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary358 x
x10670:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary358 6
x10672:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10675:	mov word [bp + 34], pow$64	; 5: 199 70 34 193 41
x10680:	mov [bp + 36], bp	; 3: 137 110 36
x10683:	add bp, 34	; 3: 131 197 34
x10686:	jmp log	; 3: 233 154 253

pow$64:	; PostCall 26
x10689:	fstp qword [bp + 34]	; 3: 221 94 34
x10692:	fld qword [bp + 26]	; 3: 221 70 26
x10695:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary359

pow$66:	; SignedMultiply £temporary360 y £temporary359
x10698:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary360 6
x10700:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10703:	mov word [bp + 26], pow$69	; 5: 199 70 26 221 41
x10708:	mov [bp + 28], bp	; 3: 137 110 28
x10711:	add bp, 26	; 3: 131 197 26
x10714:	nop	; 1: 144
x10715:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary361

pow$71:	; SetReturnValue £temporary361

pow$72:	; Return £temporary361
x10717:	mov ax, [bp]	; 3: 139 70 0
x10720:	mov di, [bp + 4]	; 3: 139 126 4
x10723:	mov bp, [bp + 2]	; 3: 139 110 2
x10726:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10728:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10731:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10734:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary362 x
x10737:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary362 6
x10739:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10742:	mov word [bp + 34], pow$80	; 5: 199 70 34 4 42
x10747:	mov [bp + 36], bp	; 3: 137 110 36
x10750:	add bp, 34	; 3: 131 197 34
x10753:	jmp log	; 3: 233 87 253

pow$80:	; PostCall 26
x10756:	fstp qword [bp + 34]	; 3: 221 94 34
x10759:	fld qword [bp + 26]	; 3: 221 70 26
x10762:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary363

pow$82:	; SignedMultiply £temporary364 y £temporary363
x10765:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary364 6
x10767:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10770:	mov word [bp + 26], pow$85	; 5: 199 70 26 32 42
x10775:	mov [bp + 28], bp	; 3: 137 110 28
x10778:	add bp, 26	; 3: 131 197 26
x10781:	nop	; 1: 144
x10782:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary365

pow$87:	; UnarySubtract £temporary366 £temporary365
x10784:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary366

pow$89:	; Return £temporary366
x10786:	mov ax, [bp]	; 3: 139 70 0
x10789:	mov di, [bp + 4]	; 3: 139 126 4
x10792:	mov bp, [bp + 2]	; 3: 139 110 2
x10795:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10797:	mov word [errno], 6	; 6: 199 6 230 10 6 0

pow$91:	; PushZero
x10803:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10805:	mov ax, [bp]	; 3: 139 70 0
x10808:	mov di, [bp + 4]	; 3: 139 126 4
x10811:	mov bp, [bp + 2]	; 3: 139 110 2
x10814:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

@954$int4$2#:
x10816:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10820:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10822:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10825:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10827:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10830:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10832:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10835:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10838:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10841:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10844:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary308 power faculty
x10847:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10849:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10852:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10855:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary309 sum term
x10858:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10860:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10863:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10866:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary310 power x
x10869:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10871:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10874:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10877:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10880:	fld1	; 2: 217 232

exp$23:	; BinaryAdd index index 1
x10882:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10884:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary312 faculty £temporary311
x10887:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10889:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10892:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10895:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10898:	mov word [bp + 54], exp$31	; 5: 199 70 54 160 42
x10903:	mov [bp + 56], bp	; 3: 137 110 56
x10906:	add bp, 54	; 3: 131 197 54
x10909:	jmp fabs	; 3: 233 92 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary313

exp$33:	; PushFloat 0.000000001
x10912:	fld qword [@846$float8$0.000000001#]	; 4: 221 6 186 42

exp$34:	; SignedGreaterThanEqual 8 £temporary313 0.000000001
x10916:	fcompp	; 2: 222 217
x10918:	fstsw ax	; 3: 155 223 224
x10921:	sahf	; 1: 158
x10922:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10924:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10927:	mov ax, [bp]	; 3: 139 70 0
x10930:	mov di, [bp + 4]	; 3: 139 126 4
x10933:	mov bp, [bp + 2]	; 3: 139 110 2
x10936:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

@846$float8$0.000000001#:
x10938:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

floor:	; PushFloat x
x10946:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10949:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10951:	fcompp	; 2: 222 217
x10953:	fstsw ax	; 3: 155 223 224
x10956:	sahf	; 1: 158
x10957:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10959:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary592 x
x10962:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary592 6
x10964:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10967:	mov word [bp + 14], floor$8	; 5: 199 70 14 229 42
x10972:	mov [bp + 16], bp	; 3: 137 110 16
x10975:	add bp, 14	; 3: 131 197 14
x10978:	nop	; 1: 144
x10979:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary593

floor$10:	; UnarySubtract £temporary594 £temporary593
x10981:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary594

floor$12:	; Return £temporary594
x10983:	mov ax, [bp]	; 3: 139 70 0
x10986:	mov di, [bp + 4]	; 3: 139 126 4
x10989:	mov bp, [bp + 2]	; 3: 139 110 2
x10992:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10994:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary595 x
x10997:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x11001:	mov eax, [container4bytes#]	; 4: 102 161 80 36

floor$15:	; IntegralToFloating £temporary596 £temporary595
x11005:	mov [container4bytes#], eax	; 4: 102 163 80 36
x11009:	fild dword [container4bytes#]	; 4: 219 6 80 36

floor$16:	; SetReturnValue £temporary596

floor$17:	; Return £temporary596
x11013:	mov ax, [bp]	; 3: 139 70 0
x11016:	mov di, [bp + 4]	; 3: 139 126 4
x11019:	mov bp, [bp + 2]	; 3: 139 110 2
x11022:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x11024:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x11027:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x11029:	fcompp	; 2: 222 217
x11031:	fstsw ax	; 3: 155 223 224
x11034:	sahf	; 1: 158
x11035:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x11037:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary599 x
x11040:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary599 6
x11042:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x11045:	mov word [bp + 14], ceil$8	; 5: 199 70 14 51 43
x11050:	mov [bp + 16], bp	; 3: 137 110 16
x11053:	add bp, 14	; 3: 131 197 14
x11056:	nop	; 1: 144
x11057:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary600

ceil$10:	; UnarySubtract £temporary601 £temporary600
x11059:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary601

ceil$12:	; Return £temporary601
x11061:	mov ax, [bp]	; 3: 139 70 0
x11064:	mov di, [bp + 4]	; 3: 139 126 4
x11067:	mov bp, [bp + 2]	; 3: 139 110 2
x11070:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x11072:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x11075:	fld qword [@1450$float8$0.999999999999#]	; 4: 221 6 100 43

ceil$15:	; BinaryAdd £temporary602 x 0.999999999999
x11079:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary603 £temporary602
x11081:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x11085:	mov eax, [container4bytes#]	; 4: 102 161 80 36

ceil$17:	; IntegralToFloating £temporary604 £temporary603
x11089:	mov [container4bytes#], eax	; 4: 102 163 80 36
x11093:	fild dword [container4bytes#]	; 4: 219 6 80 36

ceil$18:	; SetReturnValue £temporary604

ceil$19:	; Return £temporary604
x11097:	mov ax, [bp]	; 3: 139 70 0
x11100:	mov di, [bp + 4]	; 3: 139 126 4
x11103:	mov bp, [bp + 2]	; 3: 139 110 2
x11106:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

@1450$float8$0.999999999999#:
x11108:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11116:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11120:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11122:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11126:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary193 1
x11128:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11131:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary193 0
x11133:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary193

isdigit$6:	; Return £temporary193
x11136:	mov ax, [bp]	; 3: 139 70 0
x11139:	mov di, [bp + 4]	; 3: 139 126 4
x11142:	mov bp, [bp + 2]	; 3: 139 110 2
x11145:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11147:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11150:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11153:	mov word [bp + 14], sin$4	; 5: 199 70 14 159 43
x11158:	mov [bp + 16], bp	; 3: 137 110 16
x11161:	add bp, 14	; 3: 131 197 14
x11164:	jmp fabs	; 3: 233 93 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary446

sin$6:	; PushFloat 6.28
x11167:	fld qword [@1114$float8$6.28#]	; 4: 221 6 102 44

sin$7:	; SignedLessThanEqual 17 £temporary446 6.28
x11171:	fcompp	; 2: 222 217
x11173:	fstsw ax	; 3: 155 223 224
x11176:	sahf	; 1: 158
x11177:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11179:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11182:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11185:	fld qword [@1119$float8$6.28#]	; 4: 221 6 110 44

sin$12:	; Parameter 14 6.28 14
x11189:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11192:	mov word [bp + 14], sin$14	; 5: 199 70 14 198 43
x11197:	mov [bp + 16], bp	; 3: 137 110 16
x11200:	add bp, 14	; 3: 131 197 14
x11203:	jmp fmod	; 3: 233 192 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary448

sin$16:	; PopFloat x
x11206:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11209:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11211:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11214:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11216:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11219:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11221:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11224:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11227:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11230:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11232:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11235:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11238:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary449 sign power
x11241:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11243:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary450 £temporary449 faculty
x11246:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11248:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11251:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11254:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary451 sum term
x11257:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11259:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11262:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11265:	fld qword [@1140$float8$minus1#]	; 4: 221 6 118 44

sin$39:	; SignedMultiply £temporary452 sign -1
x11269:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11271:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11274:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11277:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11280:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary453 x x
x11283:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary454 power £temporary453
x11285:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11287:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11290:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11293:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11296:	fld1	; 2: 217 232

sin$50:	; BinaryAdd index index 1
x11298:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11300:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11303:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11306:	fld1	; 2: 217 232

sin$54:	; BinaryAdd index index 1
x11308:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11310:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary457 £temporary455 £temporary456
x11313:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary458 faculty £temporary457
x11315:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11317:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11320:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11323:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11326:	mov word [bp + 62], sin$63	; 5: 199 70 62 76 44
x11331:	mov [bp + 64], bp	; 3: 137 110 64
x11334:	add bp, 62	; 3: 131 197 62
x11337:	jmp fabs	; 3: 233 176 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary459

sin$65:	; PushFloat 0.000000001
x11340:	fld qword [@1151$float8$0.000000001#]	; 4: 221 6 126 44

sin$66:	; SignedGreaterThanEqual 27 £temporary459 0.000000001
x11344:	fcompp	; 2: 222 217
x11346:	fstsw ax	; 3: 155 223 224
x11349:	sahf	; 1: 158
x11350:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11352:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11355:	mov ax, [bp]	; 3: 139 70 0
x11358:	mov di, [bp + 4]	; 3: 139 126 4
x11361:	mov bp, [bp + 2]	; 3: 139 110 2
x11364:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

@1114$float8$6.28#:
x11366:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1119$float8$6.28#:
x11374:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1140$float8$minus1#:
x11382:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1151$float8$0.000000001#:
x11390:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

fmod:	; PushFloat y
x11398:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11401:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11403:	fcompp	; 2: 222 217
x11405:	fstsw ax	; 3: 155 223 224
x11408:	sahf	; 1: 158
x11409:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11411:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11414:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11417:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11420:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary433 x y
x11423:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary434 £temporary433
x11425:	fistp word [container2bytes#]	; 4: 223 30 79 27
x11429:	mov ax, [container2bytes#]	; 3: 161 79 27

fmod$10:	; IntegralToFloating £temporary435 £temporary434
x11432:	mov [container2bytes#], ax	; 3: 163 79 27
x11435:	fild word [container2bytes#]	; 4: 223 6 79 27

fmod$11:	; SignedMultiply £temporary436 y £temporary435
x11439:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary437 x £temporary436
x11441:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary437 6
x11443:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11446:	mov word [bp + 22], fmod$15	; 5: 199 70 22 196 44
x11451:	mov [bp + 24], bp	; 3: 137 110 24
x11454:	add bp, 22	; 3: 131 197 22
x11457:	jmp fabs	; 3: 233 56 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary438

fmod$17:	; PopFloat remainder
x11460:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11463:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11466:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11468:	fcompp	; 2: 222 217
x11470:	fstsw ax	; 3: 155 223 224
x11473:	sahf	; 1: 158
x11474:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11476:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11479:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11481:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary440 remainder
x11484:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary444

fmod$27:	; Return £temporary444
x11486:	mov ax, [bp]	; 3: 139 70 0
x11489:	mov di, [bp + 4]	; 3: 139 126 4
x11492:	mov bp, [bp + 2]	; 3: 139 110 2
x11495:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11497:	mov word [errno], 6	; 6: 199 6 230 10 6 0

fmod$29:	; PushZero
x11503:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11505:	mov ax, [bp]	; 3: 139 70 0
x11508:	mov di, [bp + 4]	; 3: 139 126 4
x11511:	mov bp, [bp + 2]	; 3: 139 110 2
x11514:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11516:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11519:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11522:	mov word [bp + 14], cos$4	; 5: 199 70 14 16 45
x11527:	mov [bp + 16], bp	; 3: 137 110 16
x11530:	add bp, 14	; 3: 131 197 14
x11533:	jmp fabs	; 3: 233 236 247

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary465

cos$6:	; PushFloat 6.28
x11536:	fld qword [@1162$float8$6.28#]	; 4: 221 6 214 45

cos$7:	; SignedLessThanEqual 17 £temporary465 6.28
x11540:	fcompp	; 2: 222 217
x11542:	fstsw ax	; 3: 155 223 224
x11545:	sahf	; 1: 158
x11546:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11548:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11551:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11554:	fld qword [@1167$float8$6.28#]	; 4: 221 6 222 45

cos$12:	; Parameter 14 6.28 14
x11558:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11561:	mov word [bp + 14], cos$14	; 5: 199 70 14 55 45
x11566:	mov [bp + 16], bp	; 3: 137 110 16
x11569:	add bp, 14	; 3: 131 197 14
x11572:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary467

cos$16:	; PopFloat x
x11575:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11578:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11580:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11583:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11585:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11588:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11590:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11593:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11595:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11598:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11600:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11603:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11606:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary468 sign power
x11609:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11611:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary469 £temporary468 faculty
x11614:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11616:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11619:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11622:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary470 sum term
x11625:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11627:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11630:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11633:	fld qword [@1190$float8$minus1#]	; 4: 221 6 230 45

cos$39:	; SignedMultiply £temporary471 sign -1
x11637:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11639:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11642:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11645:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11648:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary472 x x
x11651:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary473 power £temporary472
x11653:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11655:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11658:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11661:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11664:	fld1	; 2: 217 232

cos$50:	; BinaryAdd index index 1
x11666:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11668:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11671:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11674:	fld1	; 2: 217 232

cos$54:	; BinaryAdd index index 1
x11676:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11678:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary476 £temporary474 £temporary475
x11681:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary477 faculty £temporary476
x11683:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11685:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11688:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11691:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11694:	mov word [bp + 62], cos$63	; 5: 199 70 62 188 45
x11699:	mov [bp + 64], bp	; 3: 137 110 64
x11702:	add bp, 62	; 3: 131 197 62
x11705:	jmp fabs	; 3: 233 64 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary478

cos$65:	; PushFloat 0.000000001
x11708:	fld qword [@1201$float8$0.000000001#]	; 4: 221 6 238 45

cos$66:	; SignedGreaterThanEqual 27 £temporary478 0.000000001
x11712:	fcompp	; 2: 222 217
x11714:	fstsw ax	; 3: 155 223 224
x11717:	sahf	; 1: 158
x11718:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11720:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11723:	mov ax, [bp]	; 3: 139 70 0
x11726:	mov di, [bp + 4]	; 3: 139 126 4
x11729:	mov bp, [bp + 2]	; 3: 139 110 2
x11732:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

@1162$float8$6.28#:
x11734:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1167$float8$6.28#:
x11742:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1190$float8$minus1#:
x11750:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1201$float8$0.000000001#:
x11758:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11766:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11769:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11772:	mov word [bp + 14], tan$4	; 5: 199 70 14 10 46
x11777:	mov [bp + 16], bp	; 3: 137 110 16
x11780:	add bp, 14	; 3: 131 197 14
x11783:	jmp cos	; 3: 233 242 254

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary484

tan$6:	; PopFloat cos_of_x
x11786:	fstp qword [bp + 14]	; 3: 221 94 14

tan$7:	; PushFloat cos_of_x
x11789:	fld qword [bp + 14]	; 3: 221 70 14

tan$8:	; PushZero
x11792:	fldz	; 2: 217 238

tan$9:	; Equal 20 cos_of_x 0
x11794:	fcompp	; 2: 222 217
x11796:	fstsw ax	; 3: 155 223 224
x11799:	sahf	; 1: 158
x11800:	je tan$20	; 2: 116 36

tan$10:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$11:	; PushFloat x
x11802:	fld qword [bp + 6]	; 3: 221 70 6

tan$12:	; Parameter 22 x 6
x11805:	fstp qword [bp + 28]	; 3: 221 94 28

tan$13:	; Call 22 sin 0
x11808:	mov word [bp + 22], tan$14	; 5: 199 70 22 46 46
x11813:	mov [bp + 24], bp	; 3: 137 110 24
x11816:	add bp, 22	; 3: 131 197 22
x11819:	jmp sin	; 3: 233 93 253

tan$14:	; PostCall 22

tan$15:	; GetReturnValue £temporary486

tan$16:	; PushFloat cos_of_x
x11822:	fld qword [bp + 14]	; 3: 221 70 14

tan$17:	; SignedDivide £temporary487 £temporary486 cos_of_x
x11825:	fdiv	; 2: 222 249

tan$18:	; SetReturnValue £temporary487

tan$19:	; Return £temporary487
x11827:	mov ax, [bp]	; 3: 139 70 0
x11830:	mov di, [bp + 4]	; 3: 139 126 4
x11833:	mov bp, [bp + 2]	; 3: 139 110 2
x11836:	jmp ax	; 2: 255 224

tan$20:	; Assign errno 6
x11838:	mov word [errno], 6	; 6: 199 6 230 10 6 0

tan$21:	; PushZero
x11844:	fldz	; 2: 217 238

tan$22:	; SetReturnValue 0

tan$23:	; Return 0
x11846:	mov ax, [bp]	; 3: 139 70 0
x11849:	mov di, [bp + 4]	; 3: 139 126 4
x11852:	mov bp, [bp + 2]	; 3: 139 110 2
x11855:	jmp ax	; 2: 255 224

tan$24:	; FunctionEnd tan

asin:	; PushFloat x
x11857:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11860:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11862:	fcompp	; 2: 222 217
x11864:	fstsw ax	; 3: 155 223 224
x11867:	sahf	; 1: 158
x11868:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11870:	fld qword [@1227$float8$1.57#]	; 4: 221 6 7 47

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11874:	mov ax, [bp]	; 3: 139 70 0
x11877:	mov di, [bp + 4]	; 3: 139 126 4
x11880:	mov bp, [bp + 2]	; 3: 139 110 2
x11883:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11885:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11888:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11890:	fcompp	; 2: 222 217
x11892:	fstsw ax	; 3: 155 223 224
x11895:	sahf	; 1: 158
x11896:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11898:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary492 x
x11901:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary492 6
x11903:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11906:	mov word [bp + 14], asin$14	; 5: 199 70 14 144 46
x11911:	mov [bp + 16], bp	; 3: 137 110 16
x11914:	add bp, 14	; 3: 131 197 14
x11917:	nop	; 1: 144
x11918:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary493

asin$16:	; UnarySubtract £temporary494 £temporary493
x11920:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary494

asin$18:	; Return £temporary494
x11922:	mov ax, [bp]	; 3: 139 70 0
x11925:	mov di, [bp + 4]	; 3: 139 126 4
x11928:	mov bp, [bp + 2]	; 3: 139 110 2
x11931:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11933:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11936:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11938:	fcompp	; 2: 222 217
x11940:	fstsw ax	; 3: 155 223 224
x11943:	sahf	; 1: 158
x11944:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11946:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11949:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11952:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11954:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11957:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary496 x x
x11960:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary497 1 £temporary496
x11962:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary497 6
x11964:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11967:	mov word [bp + 22], asin$32	; 5: 199 70 22 205 46
x11972:	mov [bp + 24], bp	; 3: 137 110 24
x11975:	add bp, 22	; 3: 131 197 22
x11978:	nop	; 1: 144
x11979:	jmp sqrt	; 2: 235 66

asin$32:	; PostCall 14
x11981:	fstp qword [bp + 22]	; 3: 221 94 22
x11984:	fld qword [bp + 14]	; 3: 221 70 14
x11987:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary498

asin$34:	; SignedDivide £temporary499 x £temporary498
x11990:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary499 6
x11992:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11995:	mov word [bp + 14], asin$37	; 5: 199 70 14 233 46
x12000:	mov [bp + 16], bp	; 3: 137 110 16
x12003:	add bp, 14	; 3: 131 197 14
x12006:	jmp atan	; 3: 233 170 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary500

asin$39:	; SetReturnValue £temporary500

asin$40:	; Return £temporary500
x12009:	mov ax, [bp]	; 3: 139 70 0
x12012:	mov di, [bp + 4]	; 3: 139 126 4
x12015:	mov bp, [bp + 2]	; 3: 139 110 2
x12018:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x12020:	mov word [errno], 6	; 6: 199 6 230 10 6 0

asin$42:	; PushZero
x12026:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x12028:	mov ax, [bp]	; 3: 139 70 0
x12031:	mov di, [bp + 4]	; 3: 139 126 4
x12034:	mov bp, [bp + 2]	; 3: 139 110 2
x12037:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

@1227$float8$1.57#:
x12039:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

sqrt:	; PushFloat x
x12047:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x12050:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 28 x 0
x12052:	fcompp	; 2: 222 217
x12054:	fstsw ax	; 3: 155 223 224
x12057:	sahf	; 1: 158
x12058:	ja sqrt$28	; 2: 119 84

sqrt$3:	; PushOne
x12060:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x12062:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x12065:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; PopFloat root_i
x12068:	fstp qword [bp + 14]	; 3: 221 94 14

sqrt$7:	; PushFloat root_i
x12071:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$8:	; PushFloat x
x12074:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$9:	; PushFloat root_i
x12077:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$10:	; SignedDivide £temporary406 x root_i
x12080:	fdiv	; 2: 222 249

sqrt$11:	; BinaryAdd £temporary407 root_i £temporary406
x12082:	fadd	; 2: 222 193

sqrt$12:	; PushFloat 2
x12084:	fld qword [@1046$float8$2#]	; 4: 221 6 131 47

sqrt$13:	; SignedDivide £temporary408 £temporary407 2
x12088:	fdiv	; 2: 222 249

sqrt$14:	; PopFloat root_i_plus_1
x12090:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$15:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$16:	; PushFloat root_i_plus_1
x12093:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$17:	; PushFloat root_i
x12096:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$18:	; BinarySubtract £temporary409 root_i_plus_1 root_i
x12099:	fsub	; 2: 222 233

sqrt$19:	; Parameter 30 £temporary409 6
x12101:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$20:	; Call 30 fabs 0
x12104:	mov word [bp + 30], sqrt$21	; 5: 199 70 30 86 47
x12109:	mov [bp + 32], bp	; 3: 137 110 32
x12112:	add bp, 30	; 3: 131 197 30
x12115:	jmp fabs	; 3: 233 166 245

sqrt$21:	; PostCall 30

sqrt$22:	; GetReturnValue £temporary410

sqrt$23:	; PushFloat 0.000000001
x12118:	fld qword [@1050$float8$0.000000001#]	; 4: 221 6 139 47

sqrt$24:	; SignedGreaterThanEqual 5 £temporary410 0.000000001
x12122:	fcompp	; 2: 222 217
x12124:	fstsw ax	; 3: 155 223 224
x12127:	sahf	; 1: 158
x12128:	jbe sqrt$5	; 2: 118 191

sqrt$25:	; PushFloat root_i_plus_1
x12130:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$26:	; SetReturnValue root_i_plus_1

sqrt$27:	; Return root_i_plus_1
x12133:	mov ax, [bp]	; 3: 139 70 0
x12136:	mov di, [bp + 4]	; 3: 139 126 4
x12139:	mov bp, [bp + 2]	; 3: 139 110 2
x12142:	jmp ax	; 2: 255 224

sqrt$28:	; Assign errno 6
x12144:	mov word [errno], 6	; 6: 199 6 230 10 6 0

sqrt$29:	; PushZero
x12150:	fldz	; 2: 217 238

sqrt$30:	; SetReturnValue 0

sqrt$31:	; Return 0
x12152:	mov ax, [bp]	; 3: 139 70 0
x12155:	mov di, [bp + 4]	; 3: 139 126 4
x12158:	mov bp, [bp + 2]	; 3: 139 110 2
x12161:	jmp ax	; 2: 255 224

sqrt$32:	; FunctionEnd sqrt

@1046$float8$2#:
x12163:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1050$float8$0.000000001#:
x12171:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

atan:	; PushFloat x
x12179:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x12182:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x12184:	fcompp	; 2: 222 217
x12186:	fstsw ax	; 3: 155 223 224
x12189:	sahf	; 1: 158
x12190:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12192:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary519 x
x12195:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary519 6
x12197:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12200:	mov word [bp + 14], atan$8	; 5: 199 70 14 182 47
x12205:	mov [bp + 16], bp	; 3: 137 110 16
x12208:	add bp, 14	; 3: 131 197 14
x12211:	nop	; 1: 144
x12212:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary520

atan$10:	; UnarySubtract £temporary521 £temporary520
x12214:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary521

atan$12:	; Return £temporary521
x12216:	mov ax, [bp]	; 3: 139 70 0
x12219:	mov di, [bp + 4]	; 3: 139 126 4
x12222:	mov bp, [bp + 2]	; 3: 139 110 2
x12225:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12227:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12230:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12232:	fcompp	; 2: 222 217
x12234:	fstsw ax	; 3: 155 223 224
x12237:	sahf	; 1: 158
x12238:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12240:	fld qword [@1295$float8$1.57#]	; 4: 221 6 252 48

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12244:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12247:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12249:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary523 1 x
x12252:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary523 6
x12254:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12257:	mov word [bp + 22], atan$23	; 5: 199 70 22 239 47
x12262:	mov [bp + 24], bp	; 3: 137 110 24
x12265:	add bp, 22	; 3: 131 197 22
x12268:	nop	; 1: 144
x12269:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12271:	fstp qword [bp + 22]	; 3: 221 94 22
x12274:	fld qword [bp + 14]	; 3: 221 70 14
x12277:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary524

atan$25:	; BinarySubtract £temporary525 1.57 £temporary524
x12280:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary525

atan$27:	; Return £temporary525
x12282:	mov ax, [bp]	; 3: 139 70 0
x12285:	mov di, [bp + 4]	; 3: 139 126 4
x12288:	mov bp, [bp + 2]	; 3: 139 110 2
x12291:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12293:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12296:	fld qword [@1302$float8$0.5#]	; 4: 221 6 4 49

atan$30:	; SignedLessThanEqual 54 x 0.5
x12300:	fcompp	; 2: 222 217
x12302:	fstsw ax	; 3: 155 223 224
x12305:	sahf	; 1: 158
x12306:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12308:	fld qword [@1316$float8$2#]	; 4: 221 6 12 49

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12312:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12315:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12318:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12320:	fstp qword [bp + 22]	; 3: 221 94 22
x12323:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12326:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12328:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12331:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary527 x x
x12334:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary528 1 £temporary527
x12336:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary528 14
x12338:	fstp qword [bp + 52]	; 3: 221 94 52

atan$42:	; Call 14 sqrt 0
x12341:	mov word [bp + 46], atan$43	; 5: 199 70 46 67 48
x12346:	mov [bp + 48], bp	; 3: 137 110 48
x12349:	add bp, 46	; 3: 131 197 46
x12352:	jmp sqrt	; 3: 233 204 254

atan$43:	; PostCall 14
x12355:	fstp qword [bp + 38]	; 3: 221 94 38
x12358:	fld qword [bp + 30]	; 3: 221 70 30
x12361:	fld qword [bp + 22]	; 3: 221 70 22
x12364:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary529

atan$45:	; BinaryAdd £temporary530 1 £temporary529
x12367:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary531 x £temporary530
x12369:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary531 6
x12371:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12374:	mov word [bp + 22], atan$49	; 5: 199 70 22 100 48
x12379:	mov [bp + 24], bp	; 3: 137 110 24
x12382:	add bp, 22	; 3: 131 197 22
x12385:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12388:	fstp qword [bp + 22]	; 3: 221 94 22
x12391:	fld qword [bp + 14]	; 3: 221 70 14
x12394:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary532

atan$51:	; SignedMultiply £temporary533 2 £temporary532
x12397:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary533

atan$53:	; Return £temporary533
x12399:	mov ax, [bp]	; 3: 139 70 0
x12402:	mov di, [bp + 4]	; 3: 139 126 4
x12405:	mov bp, [bp + 2]	; 3: 139 110 2
x12408:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12410:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12412:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12415:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12417:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12420:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12422:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12425:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12428:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12431:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12434:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary534 sign product
x12437:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12439:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary535 £temporary534 denominator
x12442:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12444:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12447:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12450:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary536 sum term
x12453:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12455:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12458:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary537 sign
x12461:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12463:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12466:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12469:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12472:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary538 x x
x12475:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary539 product £temporary538
x12477:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12479:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12482:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12485:	fld qword [@1336$float8$2#]	; 4: 221 6 20 49

atan$83:	; BinaryAdd £temporary540 denominator 2
x12489:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12491:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12494:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12497:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12500:	mov word [bp + 54], atan$89	; 5: 199 70 54 226 48
x12505:	mov [bp + 56], bp	; 3: 137 110 56
x12508:	add bp, 54	; 3: 131 197 54
x12511:	jmp fabs	; 3: 233 26 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary541

atan$91:	; PushFloat 0.000000001
x12514:	fld qword [@1339$float8$0.000000001#]	; 4: 221 6 28 49

atan$92:	; SignedGreaterThanEqual 62 £temporary541 0.000000001
x12518:	fcompp	; 2: 222 217
x12520:	fstsw ax	; 3: 155 223 224
x12523:	sahf	; 1: 158
x12524:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12526:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12529:	mov ax, [bp]	; 3: 139 70 0
x12532:	mov di, [bp + 4]	; 3: 139 126 4
x12535:	mov bp, [bp + 2]	; 3: 139 110 2
x12538:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

@1295$float8$1.57#:
x12540:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1302$float8$0.5#:
x12548:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

@1316$float8$2#:
x12556:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1336$float8$2#:
x12564:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1339$float8$0.000000001#:
x12572:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

acos:	; PushFloat x
x12580:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12583:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12585:	fcompp	; 2: 222 217
x12587:	fstsw ax	; 3: 155 223 224
x12590:	sahf	; 1: 158
x12591:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12593:	fld qword [@1257$float8$1.57#]	; 4: 221 6 222 49

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12597:	mov ax, [bp]	; 3: 139 70 0
x12600:	mov di, [bp + 4]	; 3: 139 126 4
x12603:	mov bp, [bp + 2]	; 3: 139 110 2
x12606:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12608:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12611:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12613:	fcompp	; 2: 222 217
x12615:	fstsw ax	; 3: 155 223 224
x12618:	sahf	; 1: 158
x12619:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12621:	fld qword [@1262$float8$3.14#]	; 4: 221 6 230 49

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12625:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12628:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary506 x
x12631:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary506 6
x12633:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12636:	mov word [bp + 22], acos$15	; 5: 199 70 22 106 49
x12641:	mov [bp + 24], bp	; 3: 137 110 24
x12644:	add bp, 22	; 3: 131 197 22
x12647:	nop	; 1: 144
x12648:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12650:	fstp qword [bp + 22]	; 3: 221 94 22
x12653:	fld qword [bp + 14]	; 3: 221 70 14
x12656:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary507

acos$17:	; BinarySubtract £temporary508 3.14 £temporary507
x12659:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary508

acos$19:	; Return £temporary508
x12661:	mov ax, [bp]	; 3: 139 70 0
x12664:	mov di, [bp + 4]	; 3: 139 126 4
x12667:	mov bp, [bp + 2]	; 3: 139 110 2
x12670:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12672:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12675:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12677:	fcompp	; 2: 222 217
x12679:	fstsw ax	; 3: 155 223 224
x12682:	sahf	; 1: 158
x12683:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12685:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12687:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12690:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary510 x x
x12693:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary511 1 £temporary510
x12695:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary511 6
x12697:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12700:	mov word [bp + 14], acos$32	; 5: 199 70 14 170 49
x12705:	mov [bp + 16], bp	; 3: 137 110 16
x12708:	add bp, 14	; 3: 131 197 14
x12711:	jmp sqrt	; 3: 233 101 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary512

acos$34:	; PushFloat x
x12714:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary513 £temporary512 x
x12717:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary513 6
x12719:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12722:	mov word [bp + 14], acos$38	; 5: 199 70 14 192 49
x12727:	mov [bp + 16], bp	; 3: 137 110 16
x12730:	add bp, 14	; 3: 131 197 14
x12733:	jmp atan	; 3: 233 211 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary514

acos$40:	; SetReturnValue £temporary514

acos$41:	; Return £temporary514
x12736:	mov ax, [bp]	; 3: 139 70 0
x12739:	mov di, [bp + 4]	; 3: 139 126 4
x12742:	mov bp, [bp + 2]	; 3: 139 110 2
x12745:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12747:	mov word [errno], 6	; 6: 199 6 230 10 6 0

acos$43:	; PushZero
x12753:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12755:	mov ax, [bp]	; 3: 139 70 0
x12758:	mov di, [bp + 4]	; 3: 139 126 4
x12761:	mov bp, [bp + 2]	; 3: 139 110 2
x12764:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

@1257$float8$1.57#:
x12766:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1262$float8$3.14#:
x12774:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12782:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12785:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12788:	mov word [bp + 14], sinh$4	; 5: 199 70 14 2 50
x12793:	mov [bp + 16], bp	; 3: 137 110 16
x12796:	add bp, 14	; 3: 131 197 14
x12799:	jmp exp	; 3: 233 66 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary572

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12802:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12805:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary573 x
x12808:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary573 6
x12810:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12813:	mov word [bp + 22], sinh$11	; 5: 199 70 22 27 50
x12818:	mov [bp + 24], bp	; 3: 137 110 24
x12821:	add bp, 22	; 3: 131 197 22
x12824:	jmp exp	; 3: 233 41 248

sinh$11:	; PostCall 14
x12827:	fstp qword [bp + 22]	; 3: 221 94 22
x12830:	fld qword [bp + 14]	; 3: 221 70 14
x12833:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary574

sinh$13:	; BinarySubtract £temporary575 £temporary572 £temporary574
x12836:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12838:	fld qword [@1413$float8$2#]	; 4: 221 6 55 50

sinh$15:	; SignedDivide £temporary576 £temporary575 2
x12842:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary576

sinh$17:	; Return £temporary576
x12844:	mov ax, [bp]	; 3: 139 70 0
x12847:	mov di, [bp + 4]	; 3: 139 126 4
x12850:	mov bp, [bp + 2]	; 3: 139 110 2
x12853:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

@1413$float8$2#:
x12855:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12863:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12866:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12869:	mov word [bp + 14], cosh$4	; 5: 199 70 14 83 50
x12874:	mov [bp + 16], bp	; 3: 137 110 16
x12877:	add bp, 14	; 3: 131 197 14
x12880:	jmp exp	; 3: 233 241 247

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary579

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12883:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12886:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary580 x
x12889:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary580 6
x12891:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12894:	mov word [bp + 22], cosh$11	; 5: 199 70 22 108 50
x12899:	mov [bp + 24], bp	; 3: 137 110 24
x12902:	add bp, 22	; 3: 131 197 22
x12905:	jmp exp	; 3: 233 216 247

cosh$11:	; PostCall 14
x12908:	fstp qword [bp + 22]	; 3: 221 94 22
x12911:	fld qword [bp + 14]	; 3: 221 70 14
x12914:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary581

cosh$13:	; BinaryAdd £temporary582 £temporary579 £temporary581
x12917:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12919:	fld qword [@1423$float8$2#]	; 4: 221 6 136 50

cosh$15:	; SignedDivide £temporary583 £temporary582 2
x12923:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary583

cosh$17:	; Return £temporary583
x12925:	mov ax, [bp]	; 3: 139 70 0
x12928:	mov di, [bp + 4]	; 3: 139 126 4
x12931:	mov bp, [bp + 2]	; 3: 139 110 2
x12934:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

@1423$float8$2#:
x12936:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12944:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12947:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12950:	mov word [bp + 14], tanh$4	; 5: 199 70 14 164 50
x12955:	mov [bp + 16], bp	; 3: 137 110 16
x12958:	add bp, 14	; 3: 131 197 14
x12961:	jmp sinh	; 3: 233 74 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary586

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12964:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12967:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12970:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12973:	mov word [bp + 22], tanh$10	; 5: 199 70 22 187 50
x12978:	mov [bp + 24], bp	; 3: 137 110 24
x12981:	add bp, 22	; 3: 131 197 22
x12984:	nop	; 1: 144
x12985:	jmp cosh	; 2: 235 132

tanh$10:	; PostCall 14
x12987:	fstp qword [bp + 22]	; 3: 221 94 22
x12990:	fld qword [bp + 14]	; 3: 221 70 14
x12993:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary587

tanh$12:	; SignedDivide £temporary588 £temporary586 £temporary587
x12996:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary588

tanh$14:	; Return £temporary588
x12998:	mov ax, [bp]	; 3: 139 70 0
x13001:	mov di, [bp + 4]	; 3: 139 126 4
x13004:	mov bp, [bp + 2]	; 3: 139 110 2
x13007:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x13009:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x13012:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x13014:	fcompp	; 2: 222 217
x13016:	fstsw ax	; 3: 155 223 224
x13019:	sahf	; 1: 158
x13020:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x13024:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x13027:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x13030:	mov word [bp + 16], frexp$8	; 5: 199 70 16 244 50
x13035:	mov [bp + 18], bp	; 3: 137 110 18
x13038:	add bp, 16	; 3: 131 197 16
x13041:	jmp fabs	; 3: 233 8 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary385

frexp$10:	; Parameter 16 £temporary385 6
x13044:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x13047:	mov word [bp + 16], frexp$12	; 5: 199 70 16 5 51
x13052:	mov [bp + 18], bp	; 3: 137 110 18
x13055:	add bp, 16	; 3: 131 197 16
x13058:	jmp @988$log2	; 3: 233 155 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary386

frexp$14:	; IntegralToIntegral £temporary387 £temporary386

frexp$15:	; Assign exponent £temporary387
x13061:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x13064:	fld qword [@1004$float8$2#]	; 4: 221 6 144 51

frexp$18:	; Parameter 18 2 6
x13068:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary388 exponent
x13071:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary388 14
x13074:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x13077:	mov word [bp + 18], frexp$22	; 5: 199 70 18 35 51
x13082:	mov [bp + 20], bp	; 3: 137 110 20
x13085:	add bp, 18	; 3: 131 197 18
x13088:	jmp pow	; 3: 233 120 245

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary389

frexp$24:	; PushFloat x
x13091:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary389 x
x13094:	fcompp	; 2: 222 217
x13096:	fstsw ax	; 3: 155 223 224
x13099:	sahf	; 1: 158
x13100:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x13102:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x13105:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13109:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary393 -> p p 0
x13111:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary393 -> p exponent
x13114:	mov ax, [bp + 16]	; 3: 139 70 16
x13117:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x13119:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13122:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x13125:	fld qword [@1016$float8$2#]	; 4: 221 6 152 51

frexp$33:	; Parameter 18 2 6
x13129:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary394 exponent
x13132:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary394 14
x13135:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x13138:	mov word [bp + 26], frexp$37	; 5: 199 70 26 96 51
x13143:	mov [bp + 28], bp	; 3: 137 110 28
x13146:	add bp, 26	; 3: 131 197 26
x13149:	jmp pow	; 3: 233 59 245

frexp$37:	; PostCall 18
x13152:	fstp qword [bp + 26]	; 3: 221 94 26
x13155:	fld qword [bp + 18]	; 3: 221 70 18
x13158:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary395

frexp$39:	; SignedDivide £temporary396 x £temporary395
x13161:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary396

frexp$41:	; Return £temporary396
x13163:	mov ax, [bp]	; 3: 139 70 0
x13166:	mov di, [bp + 4]	; 3: 139 126 4
x13169:	mov bp, [bp + 2]	; 3: 139 110 2
x13172:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x13174:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13178:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary398 -> p p 0
x13180:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary398 -> p 0
x13183:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x13187:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x13189:	mov ax, [bp]	; 3: 139 70 0
x13192:	mov di, [bp + 4]	; 3: 139 126 4
x13195:	mov bp, [bp + 2]	; 3: 139 110 2
x13198:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@1004$float8$2#:
x13200:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1016$float8$2#:
x13208:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@988$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@988$log2$1:	; PushFloat x
x13216:	fld qword [bp + 6]	; 3: 221 70 6

@988$log2$2:	; Parameter 14 x 6
x13219:	fstp qword [bp + 20]	; 3: 221 94 20

@988$log2$3:	; Call 14 log 0
x13222:	mov word [bp + 14], @988$log2$4	; 5: 199 70 14 180 51
x13227:	mov [bp + 16], bp	; 3: 137 110 16
x13230:	add bp, 14	; 3: 131 197 14
x13233:	jmp log	; 3: 233 167 243

@988$log2$4:	; PostCall 14

@988$log2$5:	; GetReturnValue £temporary380

@988$log2$6:	; PushFloat 0.693
x13236:	fld qword [@990$float8$0.693#]	; 4: 221 6 205 51

@988$log2$7:	; SignedDivide £temporary381 £temporary380 0.693
x13240:	fdiv	; 2: 222 249

@988$log2$8:	; FloatingToIntegral £temporary382 £temporary381
x13242:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13246:	mov bx, [container2bytes#]	; 4: 139 30 79 27

@988$log2$9:	; SetReturnValue £temporary382

@988$log2$10:	; Return £temporary382
x13250:	mov ax, [bp]	; 3: 139 70 0
x13253:	mov di, [bp + 4]	; 3: 139 126 4
x13256:	mov bp, [bp + 2]	; 3: 139 110 2
x13259:	jmp ax	; 2: 255 224

@988$log2$11:	; FunctionEnd log2

@990$float8$0.693#:
x13261:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x13269:	mov word [bp + 14], @2257$string_25s3A2025s2E0A#	; 5: 199 70 14 21 52

perror$2:	; Parameter 8 s 8
x13274:	mov ax, [bp + 6]	; 3: 139 70 6
x13277:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13280:	mov ax, [errno]	; 3: 161 230 10
x13283:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13286:	mov word [bp + 18], perror$6	; 5: 199 70 18 244 51
x13291:	mov [bp + 20], bp	; 3: 137 110 20
x13294:	add bp, 18	; 3: 131 197 18
x13297:	nop	; 1: 144
x13298:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary971

perror$8:	; Parameter 8 £temporary971 10
x13300:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13303:	mov word [bp + 8], perror$10	; 5: 199 70 8 10 52
x13308:	mov [bp + 10], bp	; 3: 137 110 10
x13311:	add bp, 8	; 3: 131 197 8
x13314:	mov di, bp	; 2: 137 239
x13316:	add di, 4	; 3: 131 199 4
x13319:	jmp printf	; 3: 233 250 216

perror$10:	; PostCall 8

perror$11:	; Return 0
x13322:	mov ax, [bp]	; 3: 139 70 0
x13325:	mov di, [bp + 4]	; 3: 139 126 4
x13328:	mov bp, [bp + 2]	; 3: 139 110 2
x13331:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

@2257$string_25s3A2025s2E0A#:
x13333:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13342:	mov word [bp + 8], strerror$2	; 5: 199 70 8 44 52
x13347:	mov [bp + 10], bp	; 3: 137 110 10
x13350:	add bp, 8	; 3: 131 197 8
x13353:	jmp localeconv	; 3: 233 75 234

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary3887

strerror$4:	; Assign localeConvPtr £temporary3887
x13356:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 9 localeConvPtr 0
x13359:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13363:	je strerror$9	; 2: 116 8

strerror$6:	; Deref £temporary3889 -> localeConvPtr localeConvPtr 16
x13365:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign £temporary3893 £temporary3889 -> localeConvPtr
x13368:	mov ax, [si + 16]	; 3: 139 68 16

strerror$8:	; Goto 10
x13371:	jmp strerror$10	; 2: 235 3

strerror$9:	; Assign £temporary3893 0
x13373:	mov ax, 0	; 3: 184 0 0

strerror$10:	; Assign messageList £temporary3893
x13376:	mov [bp + 10], ax	; 3: 137 70 10

strerror$11:	; Equal 14 messageList 0
x13379:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13383:	je strerror$14	; 2: 116 5

strerror$12:	; Assign £temporary3898 messageList
x13385:	mov ax, [bp + 10]	; 3: 139 70 10

strerror$13:	; Goto 15
x13388:	jmp strerror$15	; 2: 235 3

strerror$14:	; Assign £temporary3898 enMessageList
x13390:	mov ax, enMessageList	; 3: 184 19 32

strerror$15:	; Assign messageList £temporary3898
x13393:	mov [bp + 10], ax	; 3: 137 70 10

strerror$16:	; UnsignedMultiply £temporary3900 errno 2
x13396:	mov ax, [bp + 6]	; 3: 139 70 6
x13399:	xor dx, dx	; 2: 49 210
x13401:	mul word [@8696$int2$2#]	; 4: 247 38 111 52

strerror$17:	; BinaryAdd £temporary3901 messageList £temporary3900
x13405:	mov si, [bp + 10]	; 3: 139 118 10
x13408:	add si, ax	; 2: 1 198

strerror$18:	; Deref £temporary3899 -> £temporary3901 £temporary3901 0

strerror$19:	; SetReturnValue £temporary3899 -> £temporary3901
x13410:	mov bx, [si]	; 2: 139 28

strerror$20:	; Return £temporary3899 -> £temporary3901
x13412:	mov ax, [bp]	; 3: 139 70 0
x13415:	mov di, [bp + 4]	; 3: 139 126 4
x13418:	mov bp, [bp + 2]	; 3: 139 110 2
x13421:	jmp ax	; 2: 255 224

strerror$21:	; FunctionEnd strerror

@8696$int2$2#:
x13423:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13425:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13428:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13431:	mov word [bp + 16], modf$4	; 5: 199 70 16 133 52
x13436:	mov [bp + 18], bp	; 3: 137 110 18
x13439:	add bp, 16	; 3: 131 197 16
x13442:	jmp fabs	; 3: 233 119 240

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary413

modf$6:	; PopFloat abs_x
x13445:	fstp qword [bp + 16]	; 3: 221 94 16

modf$7:	; PushFloat abs_x
x13448:	fld qword [bp + 16]	; 3: 221 70 16

modf$8:	; FloatingToIntegral £temporary414 abs_x
x13451:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x13455:	mov eax, [container4bytes#]	; 4: 102 161 80 36

modf$9:	; IntegralToFloating £temporary415 £temporary414
x13459:	mov [container4bytes#], eax	; 4: 102 163 80 36
x13463:	fild dword [container4bytes#]	; 4: 219 6 80 36

modf$10:	; PopFloat integral
x13467:	fstp qword [bp + 24]	; 3: 221 94 24

modf$11:	; PushFloat abs_x
x13470:	fld qword [bp + 16]	; 3: 221 70 16

modf$12:	; PushFloat integral
x13473:	fld qword [bp + 24]	; 3: 221 70 24

modf$13:	; BinarySubtract £temporary416 abs_x integral
x13476:	fsub	; 2: 222 233

modf$14:	; PopFloat fractional
x13478:	fstp qword [bp + 32]	; 3: 221 94 32

modf$15:	; Equal 26 p 0
x13481:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13485:	je modf$26	; 2: 116 28

modf$16:	; Deref £temporary418 -> p p 0
x13487:	mov si, [bp + 14]	; 3: 139 118 14

modf$17:	; PushFloat x
x13490:	fld qword [bp + 6]	; 3: 221 70 6

modf$18:	; PushZero
x13493:	fldz	; 2: 217 238

modf$19:	; SignedLessThanEqual 23 x 0
x13495:	fcompp	; 2: 222 217
x13497:	fstsw ax	; 3: 155 223 224
x13500:	sahf	; 1: 158
x13501:	jae modf$23	; 2: 115 5

modf$20:	; PushFloat integral
x13503:	fld qword [bp + 24]	; 3: 221 70 24

modf$21:	; DecreaseStack

modf$22:	; Goto 25
x13506:	jmp modf$25	; 2: 235 5

modf$23:	; PushFloat integral
x13508:	fld qword [bp + 24]	; 3: 221 70 24

modf$24:	; UnarySubtract £temporary420 integral
x13511:	fchs	; 2: 217 224

modf$25:	; PopFloat £temporary418 -> p
x13513:	fstp qword [si]	; 2: 221 28

modf$26:	; PushFloat x
x13515:	fld qword [bp + 6]	; 3: 221 70 6

modf$27:	; PushZero
x13518:	fldz	; 2: 217 238

modf$28:	; SignedLessThanEqual 32 x 0
x13520:	fcompp	; 2: 222 217
x13522:	fstsw ax	; 3: 155 223 224
x13525:	sahf	; 1: 158
x13526:	jae modf$32	; 2: 115 5

modf$29:	; PushFloat fractional
x13528:	fld qword [bp + 32]	; 3: 221 70 32

modf$30:	; DecreaseStack

modf$31:	; Goto 34
x13531:	jmp modf$34	; 2: 235 5

modf$32:	; PushFloat fractional
x13533:	fld qword [bp + 32]	; 3: 221 70 32

modf$33:	; UnarySubtract £temporary426 fractional
x13536:	fchs	; 2: 217 224

modf$34:	; SetReturnValue £temporary430

modf$35:	; Return £temporary430
x13538:	mov ax, [bp]	; 3: 139 70 0
x13541:	mov di, [bp + 4]	; 3: 139 126 4
x13544:	mov bp, [bp + 2]	; 3: 139 110 2
x13547:	jmp ax	; 2: 255 224

modf$36:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13549:	mov word [bp + 28], @10396$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 67 54

math_test_2$2:	; PushFloat x
x13554:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13557:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13560:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13563:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13566:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13569:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13572:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13575:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13578:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 24 53
x13583:	mov [bp + 48], bp	; 3: 137 110 48
x13586:	add bp, 46	; 3: 131 197 46
x13589:	jmp fmod	; 3: 233 110 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary4803

math_test_2$14:	; Parameter 22 £temporary4803 24
x13592:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13595:	mov ax, [errno]	; 3: 161 230 10
x13598:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13601:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 52 53
x13606:	mov [bp + 24], bp	; 3: 137 110 24
x13609:	add bp, 22	; 3: 131 197 22
x13612:	mov di, bp	; 2: 137 239
x13614:	add di, 26	; 3: 131 199 26
x13617:	jmp printf	; 3: 233 208 215

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13620:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13626:	mov word [bp + 28], @10401$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 98 54

math_test_2$21:	; PushFloat x
x13631:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13634:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13637:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13640:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13643:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13646:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13649:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13652:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13655:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 101 53
x13660:	mov [bp + 48], bp	; 3: 137 110 48
x13663:	add bp, 46	; 3: 131 197 46
x13666:	jmp atan2	; 3: 233 82 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary4805

math_test_2$33:	; Parameter 22 £temporary4805 24
x13669:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13672:	mov ax, [errno]	; 3: 161 230 10
x13675:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13678:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 129 53
x13683:	mov [bp + 24], bp	; 3: 137 110 24
x13686:	add bp, 22	; 3: 131 197 22
x13689:	mov di, bp	; 2: 137 239
x13691:	add di, 26	; 3: 131 199 26
x13694:	jmp printf	; 3: 233 131 215

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13697:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13703:	mov word [bp + 28], @10406$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 130 54

math_test_2$40:	; PushFloat x
x13708:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13711:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13714:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13717:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13720:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13723:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13726:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13729:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13732:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 178 53
x13737:	mov [bp + 48], bp	; 3: 137 110 48
x13740:	add bp, 46	; 3: 131 197 46
x13743:	jmp pow	; 3: 233 233 242

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary4807

math_test_2$52:	; Parameter 22 £temporary4807 24
x13746:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13749:	mov ax, [errno]	; 3: 161 230 10
x13752:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13755:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 206 53
x13760:	mov [bp + 24], bp	; 3: 137 110 24
x13763:	add bp, 22	; 3: 131 197 22
x13766:	mov di, bp	; 2: 137 239
x13768:	add di, 26	; 3: 131 199 26
x13771:	jmp printf	; 3: 233 54 215

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13774:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13780:	mov word [bp + 28], @10411$string_0A#	; 5: 199 70 28 160 54

math_test_2$59:	; Call 22 printf 0
x13785:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 233 53
x13790:	mov [bp + 24], bp	; 3: 137 110 24
x13793:	add bp, 22	; 3: 131 197 22
x13796:	mov di, bp	; 2: 137 239
x13798:	jmp printf	; 3: 233 27 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13801:	mov word [bp + 28], @10413$string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 162 54

math_test_2$63:	; PushFloat x
x13806:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13809:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13812:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary4810 y
x13815:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13819:	mov ax, [container2bytes#]	; 3: 161 79 27

math_test_2$67:	; Parameter 22 £temporary4810 16
x13822:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13825:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13828:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13831:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary4811 y
x13834:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13838:	mov ax, [container2bytes#]	; 3: 161 79 27

math_test_2$73:	; Parameter 22 £temporary4811 32
x13841:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13844:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 34 54
x13849:	mov [bp + 42], bp	; 3: 137 110 42
x13852:	add bp, 40	; 3: 131 197 40
x13855:	jmp ldexp	; 3: 233 235 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary4812

math_test_2$77:	; Parameter 22 £temporary4812 18
x13858:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13861:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 56 54
x13866:	mov [bp + 24], bp	; 3: 137 110 24
x13869:	add bp, 22	; 3: 131 197 22
x13872:	mov di, bp	; 2: 137 239
x13874:	add di, 18	; 3: 131 199 18
x13877:	jmp printf	; 3: 233 204 214

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13880:	mov ax, [bp]	; 3: 139 70 0
x13883:	mov di, [bp + 4]	; 3: 139 126 4
x13886:	mov bp, [bp + 2]	; 3: 139 110 2
x13889:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

@10396$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13891:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10401$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13922:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10406$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13954:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10411$string_0A#:
x13984:	db 10, 0	; 2: 10 0

@10413$string_ldexp2825f2C2025i29203D2025f0A0A#:
x13986:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x14007:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x14010:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x14012:	fcompp	; 2: 222 217
x14014:	fstsw ax	; 3: 155 223 224
x14017:	sahf	; 1: 158
x14018:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x14020:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x14023:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary549 x y
x14026:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary549 6
x14028:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x14031:	mov word [bp + 22], atan2$9	; 5: 199 70 22 221 54
x14036:	mov [bp + 24], bp	; 3: 137 110 24
x14039:	add bp, 22	; 3: 131 197 22
x14042:	jmp atan	; 3: 233 182 248

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary550

atan2$11:	; SetReturnValue £temporary550

atan2$12:	; Return £temporary550
x14045:	mov ax, [bp]	; 3: 139 70 0
x14048:	mov di, [bp + 4]	; 3: 139 126 4
x14051:	mov bp, [bp + 2]	; 3: 139 110 2
x14054:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x14056:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x14059:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x14061:	fcompp	; 2: 222 217
x14063:	fstsw ax	; 3: 155 223 224
x14066:	sahf	; 1: 158
x14067:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x14069:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x14072:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x14074:	fcompp	; 2: 222 217
x14076:	fstsw ax	; 3: 155 223 224
x14079:	sahf	; 1: 158
x14080:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x14082:	fld qword [@1360$float8$3.14#]	; 4: 221 6 237 55

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14086:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x14089:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x14092:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary554 x y
x14095:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary554 6
x14097:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x14100:	mov word [bp + 30], atan2$26	; 5: 199 70 30 34 55
x14105:	mov [bp + 32], bp	; 3: 137 110 32
x14108:	add bp, 30	; 3: 131 197 30
x14111:	jmp atan	; 3: 233 113 248

atan2$26:	; PostCall 22
x14114:	fstp qword [bp + 30]	; 3: 221 94 30
x14117:	fld qword [bp + 22]	; 3: 221 70 22
x14120:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary555

atan2$28:	; BinaryAdd £temporary556 3.14 £temporary555
x14123:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary556

atan2$30:	; Return £temporary556
x14125:	mov ax, [bp]	; 3: 139 70 0
x14128:	mov di, [bp + 4]	; 3: 139 126 4
x14131:	mov bp, [bp + 2]	; 3: 139 110 2
x14134:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x14136:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x14139:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x14141:	fcompp	; 2: 222 217
x14143:	fstsw ax	; 3: 155 223 224
x14146:	sahf	; 1: 158
x14147:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x14149:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x14152:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x14154:	fcompp	; 2: 222 217
x14156:	fstsw ax	; 3: 155 223 224
x14159:	sahf	; 1: 158
x14160:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x14162:	fld qword [@1373$float8$minus3.14#]	; 4: 221 6 245 55

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14166:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x14169:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x14172:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary560 x y
x14175:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary560 6
x14177:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x14180:	mov word [bp + 30], atan2$44	; 5: 199 70 30 114 55
x14185:	mov [bp + 32], bp	; 3: 137 110 32
x14188:	add bp, 30	; 3: 131 197 30
x14191:	jmp atan	; 3: 233 33 248

atan2$44:	; PostCall 22
x14194:	fstp qword [bp + 30]	; 3: 221 94 30
x14197:	fld qword [bp + 22]	; 3: 221 70 22
x14200:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary561

atan2$46:	; BinaryAdd £temporary562 -3.14 £temporary561
x14203:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary562

atan2$48:	; Return £temporary562
x14205:	mov ax, [bp]	; 3: 139 70 0
x14208:	mov di, [bp + 4]	; 3: 139 126 4
x14211:	mov bp, [bp + 2]	; 3: 139 110 2
x14214:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x14216:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x14219:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x14221:	fcompp	; 2: 222 217
x14223:	fstsw ax	; 3: 155 223 224
x14226:	sahf	; 1: 158
x14227:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x14229:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x14232:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x14234:	fcompp	; 2: 222 217
x14236:	fstsw ax	; 3: 155 223 224
x14239:	sahf	; 1: 158
x14240:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x14242:	fld qword [@1387$float8$1.57#]	; 4: 221 6 253 55

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x14246:	mov ax, [bp]	; 3: 139 70 0
x14249:	mov di, [bp + 4]	; 3: 139 126 4
x14252:	mov bp, [bp + 2]	; 3: 139 110 2
x14255:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x14257:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x14260:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x14262:	fcompp	; 2: 222 217
x14264:	fstsw ax	; 3: 155 223 224
x14267:	sahf	; 1: 158
x14268:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x14270:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14273:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14275:	fcompp	; 2: 222 217
x14277:	fstsw ax	; 3: 155 223 224
x14280:	sahf	; 1: 158
x14281:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14283:	fld qword [@1399$float8$minus1.57#]	; 4: 221 6 5 56

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14287:	mov ax, [bp]	; 3: 139 70 0
x14290:	mov di, [bp + 4]	; 3: 139 126 4
x14293:	mov bp, [bp + 2]	; 3: 139 110 2
x14296:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14298:	mov word [errno], 6	; 6: 199 6 230 10 6 0

atan2$68:	; PushZero
x14304:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14306:	mov ax, [bp]	; 3: 139 70 0
x14309:	mov di, [bp + 4]	; 3: 139 126 4
x14312:	mov bp, [bp + 2]	; 3: 139 110 2
x14315:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

@1360$float8$3.14#:
x14317:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@1373$float8$minus3.14#:
x14325:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@1387$float8$1.57#:
x14333:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1399$float8$minus1.57#:
x14341:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

ldexp:	; PushFloat x
x14349:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14352:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14355:	fld qword [@981$float8$2#]	; 4: 221 6 68 56

ldexp$3:	; Parameter 16 2 6
x14359:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary375 n
x14362:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary375 14
x14365:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14368:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 46 56
x14373:	mov [bp + 26], bp	; 3: 137 110 26
x14376:	add bp, 24	; 3: 131 197 24
x14379:	jmp pow	; 3: 233 109 240

ldexp$7:	; PostCall 16
x14382:	fstp qword [bp + 24]	; 3: 221 94 24
x14385:	fld qword [bp + 16]	; 3: 221 70 16
x14388:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary376

ldexp$9:	; SignedMultiply £temporary377 x £temporary376
x14391:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary377

ldexp$11:	; Return £temporary377
x14393:	mov ax, [bp]	; 3: 139 70 0
x14396:	mov di, [bp + 4]	; 3: 139 126 4
x14399:	mov bp, [bp + 2]	; 3: 139 110 2
x14402:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

@981$float8$2#:
x14404:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14412:	mov word [bp + 12], @10463$string_in2Etxt#	; 5: 199 70 12 4 78

file_test$2:	; Parameter 6 string_r# 8
x14417:	mov word [bp + 14], @10464$string_r#	; 5: 199 70 14 11 78

file_test$3:	; Call 6 fopen 0
x14422:	mov word [bp + 6], file_test$4	; 5: 199 70 6 100 56
x14427:	mov [bp + 8], bp	; 3: 137 110 8
x14430:	add bp, 6	; 3: 131 197 6
x14433:	jmp fopen	; 3: 233 52 34

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary4842

file_test$6:	; Assign inFilePtr £temporary4842
x14436:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14439:	mov word [bp + 14], @10467$string_outX2Etxt#	; 5: 199 70 14 13 78

file_test$9:	; Parameter 8 string_w# 8
x14444:	mov word [bp + 16], @10468$string_w#	; 5: 199 70 16 22 78

file_test$10:	; Call 8 fopen 0
x14449:	mov word [bp + 8], file_test$11	; 5: 199 70 8 127 56
x14454:	mov [bp + 10], bp	; 3: 137 110 10
x14457:	add bp, 8	; 3: 131 197 8
x14460:	jmp fopen	; 3: 233 25 34

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary4843

file_test$13:	; Assign outFilePtr £temporary4843
x14463:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14466:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14470:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14472:	mov ax, [stderr]	; 3: 161 24 78
x14475:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14478:	mov word [bp + 18], @10476$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 26 78

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14483:	mov word [bp + 20], @10477$string_inFilePtr20213D20NULL#	; 5: 199 70 20 72 78

file_test$19:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14488:	mov word [bp + 22], @10478$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 90 78

file_test$20:	; Parameter 10 14 14
x14493:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14498:	mov word [bp + 10], file_test$22	; 5: 199 70 10 181 56
x14503:	mov [bp + 12], bp	; 3: 137 110 12
x14506:	add bp, 10	; 3: 131 197 10
x14509:	mov di, bp	; 2: 137 239
x14511:	add di, 6	; 3: 131 199 6
x14514:	jmp fprintf	; 3: 233 72 38

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14517:	mov word [bp + 10], file_test$25	; 5: 199 70 10 195 56
x14522:	mov [bp + 12], bp	; 3: 137 110 12
x14525:	add bp, 10	; 3: 131 197 10
x14528:	jmp abort	; 3: 233 117 38

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14531:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14535:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14537:	mov ax, [stderr]	; 3: 161 24 78
x14540:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14543:	mov word [bp + 18], @10487$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 155 78

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14548:	mov word [bp + 20], @10488$string_outFilePtr20213D20NULL#	; 5: 199 70 20 201 78

file_test$31:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14553:	mov word [bp + 22], @10489$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 220 78

file_test$32:	; Parameter 10 15 14
x14558:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14563:	mov word [bp + 10], file_test$34	; 5: 199 70 10 246 56
x14568:	mov [bp + 12], bp	; 3: 137 110 12
x14571:	add bp, 10	; 3: 131 197 10
x14574:	mov di, bp	; 2: 137 239
x14576:	add di, 6	; 3: 131 199 6
x14579:	jmp fprintf	; 3: 233 7 38

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14582:	mov word [bp + 10], file_test$37	; 5: 199 70 10 4 57
x14587:	mov [bp + 12], bp	; 3: 137 110 12
x14590:	add bp, 10	; 3: 131 197 10
x14593:	jmp abort	; 3: 233 52 38

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14596:	mov ax, [bp + 6]	; 3: 139 70 6
x14599:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14602:	mov word [bp + 10], file_test$41	; 5: 199 70 10 24 57
x14607:	mov [bp + 12], bp	; 3: 137 110 12
x14610:	add bp, 10	; 3: 131 197 10
x14613:	jmp feof	; 3: 233 49 38

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary4852

file_test$43:	; NotEqual 75 £temporary4852 0
x14616:	cmp bx, 0	; 3: 131 251 0
x14619:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14623:	mov ax, [bp + 6]	; 3: 139 70 6
x14626:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14629:	mov word [bp + 26], @10498$string_25lf#	; 5: 199 70 26 29 79

file_test$47:	; address £temporary4855 value
x14634:	mov si, bp	; 2: 137 238
x14636:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary4855 10
x14639:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14642:	mov word [bp + 18], file_test$50	; 5: 199 70 18 69 57
x14647:	mov [bp + 20], bp	; 3: 137 110 20
x14650:	add bp, 18	; 3: 131 197 18
x14653:	mov di, bp	; 2: 137 239
x14655:	add di, 2	; 3: 131 199 2
x14658:	jmp fscanf	; 3: 233 153 38

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14661:	mov word [bp + 24], @10501$string_X12025f0A#	; 5: 199 70 24 33 79

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14666:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14669:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14672:	mov word [bp + 26], file_test$57	; 5: 199 70 26 94 57
x14677:	mov [bp + 28], bp	; 3: 137 110 28
x14680:	add bp, 26	; 3: 131 197 26
x14683:	jmp sqrt	; 3: 233 177 245

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary4857

file_test$59:	; Parameter 18 £temporary4857 8
x14686:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14689:	mov word [bp + 18], file_test$61	; 5: 199 70 18 116 57
x14694:	mov [bp + 20], bp	; 3: 137 110 20
x14697:	add bp, 18	; 3: 131 197 18
x14700:	mov di, bp	; 2: 137 239
x14702:	add di, 8	; 3: 131 199 8
x14705:	jmp printf	; 3: 233 144 211

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14708:	mov ax, [bp + 8]	; 3: 139 70 8
x14711:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14714:	mov word [bp + 26], @10504$string_X22025f0A#	; 5: 199 70 26 40 79

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14719:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14722:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14725:	mov word [bp + 28], file_test$69	; 5: 199 70 28 147 57
x14730:	mov [bp + 30], bp	; 3: 137 110 30
x14733:	add bp, 28	; 3: 131 197 28
x14736:	jmp sqrt	; 3: 233 124 245

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary4859

file_test$71:	; Parameter 18 £temporary4859 10
x14739:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14742:	mov word [bp + 18], file_test$73	; 5: 199 70 18 169 57
x14747:	mov [bp + 20], bp	; 3: 137 110 20
x14750:	add bp, 18	; 3: 131 197 18
x14753:	mov di, bp	; 2: 137 239
x14755:	add di, 8	; 3: 131 199 8
x14758:	jmp fprintf	; 3: 233 84 37

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14761:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14764:	mov word [bp + 16], @10507$string_0A#	; 5: 199 70 16 47 79

file_test$77:	; Call 10 printf 0
x14769:	mov word [bp + 10], file_test$78	; 5: 199 70 10 193 57
x14774:	mov [bp + 12], bp	; 3: 137 110 12
x14777:	add bp, 10	; 3: 131 197 10
x14780:	mov di, bp	; 2: 137 239
x14782:	jmp printf	; 3: 233 67 211

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14785:	mov ax, [bp + 6]	; 3: 139 70 6
x14788:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14791:	mov word [bp + 10], file_test$82	; 5: 199 70 10 213 57
x14796:	mov [bp + 12], bp	; 3: 137 110 12
x14799:	add bp, 10	; 3: 131 197 10
x14802:	jmp fclose	; 3: 233 56 56

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14805:	mov ax, [bp + 8]	; 3: 139 70 8
x14808:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14811:	mov word [bp + 10], file_test$86	; 5: 199 70 10 233 57
x14816:	mov [bp + 12], bp	; 3: 137 110 12
x14819:	add bp, 10	; 3: 131 197 10
x14822:	jmp fclose	; 3: 233 36 56

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14825:	mov word [bp + 12], @10511$string_in2Etxt#	; 5: 199 70 12 49 79

file_test$89:	; Parameter 6 string_r# 8
x14830:	mov word [bp + 14], @10512$string_r#	; 5: 199 70 14 56 79

file_test$90:	; Call 6 fopen 0
x14835:	mov word [bp + 6], file_test$91	; 5: 199 70 6 1 58
x14840:	mov [bp + 8], bp	; 3: 137 110 8
x14843:	add bp, 6	; 3: 131 197 6
x14846:	jmp fopen	; 3: 233 151 32

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary4864

file_test$93:	; Assign inFilePtr £temporary4864
x14849:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14852:	mov word [bp + 14], @10515$string_outY2Etxt#	; 5: 199 70 14 58 79

file_test$96:	; Parameter 8 string_w# 8
x14857:	mov word [bp + 16], @10516$string_w#	; 5: 199 70 16 67 79

file_test$97:	; Call 8 fopen 0
x14862:	mov word [bp + 8], file_test$98	; 5: 199 70 8 28 58
x14867:	mov [bp + 10], bp	; 3: 137 110 10
x14870:	add bp, 8	; 3: 131 197 8
x14873:	jmp fopen	; 3: 233 124 32

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary4865

file_test$100:	; Assign outFilePtr £temporary4865
x14876:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14879:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14883:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14885:	mov ax, [stderr]	; 3: 161 24 78
x14888:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14891:	mov word [bp + 18], @10524$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 69 79

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14896:	mov word [bp + 20], @10525$string_inFilePtr20213D20NULL#	; 5: 199 70 20 115 79

file_test$106:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14901:	mov word [bp + 22], @10526$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 133 79

file_test$107:	; Parameter 10 34 14
x14906:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14911:	mov word [bp + 10], file_test$109	; 5: 199 70 10 82 58
x14916:	mov [bp + 12], bp	; 3: 137 110 12
x14919:	add bp, 10	; 3: 131 197 10
x14922:	mov di, bp	; 2: 137 239
x14924:	add di, 6	; 3: 131 199 6
x14927:	jmp fprintf	; 3: 233 171 36

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14930:	mov word [bp + 10], file_test$112	; 5: 199 70 10 96 58
x14935:	mov [bp + 12], bp	; 3: 137 110 12
x14938:	add bp, 10	; 3: 131 197 10
x14941:	jmp abort	; 3: 233 216 36

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14944:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14948:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14950:	mov ax, [stderr]	; 3: 161 24 78
x14953:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14956:	mov word [bp + 18], @10535$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 198 79

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14961:	mov word [bp + 20], @10536$string_outFilePtr20213D20NULL#	; 5: 199 70 20 244 79

file_test$118:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14966:	mov word [bp + 22], @10537$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 7 80

file_test$119:	; Parameter 10 35 14
x14971:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14976:	mov word [bp + 10], file_test$121	; 5: 199 70 10 147 58
x14981:	mov [bp + 12], bp	; 3: 137 110 12
x14984:	add bp, 10	; 3: 131 197 10
x14987:	mov di, bp	; 2: 137 239
x14989:	add di, 6	; 3: 131 199 6
x14992:	jmp fprintf	; 3: 233 106 36

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14995:	mov word [bp + 10], file_test$124	; 5: 199 70 10 161 58
x15000:	mov [bp + 12], bp	; 3: 137 110 12
x15003:	add bp, 10	; 3: 131 197 10
x15006:	jmp abort	; 3: 233 151 36

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x15009:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x15014:	mov ax, [bp + 6]	; 3: 139 70 6
x15017:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x15020:	mov word [bp + 22], @10545$string_25i#	; 5: 199 70 22 72 80

file_test$129:	; address £temporary4874 size
x15025:	mov si, bp	; 2: 137 238
x15027:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary4874 10
x15030:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x15033:	mov word [bp + 14], file_test$132	; 5: 199 70 14 204 58
x15038:	mov [bp + 16], bp	; 3: 137 110 16
x15041:	add bp, 14	; 3: 131 197 14
x15044:	mov di, bp	; 2: 137 239
x15046:	add di, 2	; 3: 131 199 2
x15049:	jmp fscanf	; 3: 233 18 37

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x15052:	mov word [bp + 20], @10548$string_size2025i0A#	; 5: 199 70 20 75 80

file_test$135:	; Parameter 14 size 8
x15057:	mov ax, [bp + 10]	; 3: 139 70 10
x15060:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x15063:	mov word [bp + 14], file_test$137	; 5: 199 70 14 234 58
x15068:	mov [bp + 16], bp	; 3: 137 110 16
x15071:	add bp, 14	; 3: 131 197 14
x15074:	mov di, bp	; 2: 137 239
x15076:	add di, 2	; 3: 131 199 2
x15079:	jmp printf	; 3: 233 26 210

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x15082:	mov ax, [bp + 8]	; 3: 139 70 8
x15085:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x15088:	mov word [bp + 22], @10550$string_Y20size2025i0A#	; 5: 199 70 22 84 80

file_test$141:	; Parameter 14 size 10
x15093:	mov ax, [bp + 10]	; 3: 139 70 10
x15096:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x15099:	mov word [bp + 14], file_test$143	; 5: 199 70 14 14 59
x15104:	mov [bp + 16], bp	; 3: 137 110 16
x15107:	add bp, 14	; 3: 131 197 14
x15110:	mov di, bp	; 2: 137 239
x15112:	add di, 2	; 3: 131 199 2
x15115:	jmp fprintf	; 3: 233 239 35

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x15118:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x15123:	mov ax, [bp + 10]	; 3: 139 70 10
x15126:	cmp [bp + 12], ax	; 3: 57 70 12
x15129:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x15133:	mov ax, [bp + 6]	; 3: 139 70 6
x15136:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x15139:	mov word [bp + 30], @10558$string_25lf#	; 5: 199 70 30 95 80

file_test$149:	; address £temporary4880 value
x15144:	mov si, bp	; 2: 137 238
x15146:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary4880 10
x15149:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x15152:	mov word [bp + 22], file_test$152	; 5: 199 70 22 67 59
x15157:	mov [bp + 24], bp	; 3: 137 110 24
x15160:	add bp, 22	; 3: 131 197 22
x15163:	mov di, bp	; 2: 137 239
x15165:	add di, 2	; 3: 131 199 2
x15168:	jmp fscanf	; 3: 233 155 36

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x15171:	mov word [bp + 28], @10561$string_Y12025f0A#	; 5: 199 70 28 99 80

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x15176:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x15179:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x15182:	mov word [bp + 30], file_test$159	; 5: 199 70 30 92 59
x15187:	mov [bp + 32], bp	; 3: 137 110 32
x15190:	add bp, 30	; 3: 131 197 30
x15193:	jmp sqrt	; 3: 233 179 243

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary4882

file_test$161:	; Parameter 22 £temporary4882 8
x15196:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x15199:	mov word [bp + 22], file_test$163	; 5: 199 70 22 114 59
x15204:	mov [bp + 24], bp	; 3: 137 110 24
x15207:	add bp, 22	; 3: 131 197 22
x15210:	mov di, bp	; 2: 137 239
x15212:	add di, 8	; 3: 131 199 8
x15215:	jmp printf	; 3: 233 146 209

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x15218:	mov ax, [bp + 8]	; 3: 139 70 8
x15221:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x15224:	mov word [bp + 30], @10564$string_Y22025f0A#	; 5: 199 70 30 106 80

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x15229:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x15232:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x15235:	mov word [bp + 32], file_test$171	; 5: 199 70 32 145 59
x15240:	mov [bp + 34], bp	; 3: 137 110 34
x15243:	add bp, 32	; 3: 131 197 32
x15246:	jmp sqrt	; 3: 233 126 243

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary4884

file_test$173:	; Parameter 22 £temporary4884 10
x15249:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x15252:	mov word [bp + 22], file_test$175	; 5: 199 70 22 167 59
x15257:	mov [bp + 24], bp	; 3: 137 110 24
x15260:	add bp, 22	; 3: 131 197 22
x15263:	mov di, bp	; 2: 137 239
x15265:	add di, 8	; 3: 131 199 8
x15268:	jmp fprintf	; 3: 233 86 35

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x15271:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x15274:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x15277:	mov word [bp + 20], @10567$string_0A#	; 5: 199 70 20 113 80

file_test$180:	; Call 14 printf 0
x15282:	mov word [bp + 14], file_test$181	; 5: 199 70 14 194 59
x15287:	mov [bp + 16], bp	; 3: 137 110 16
x15290:	add bp, 14	; 3: 131 197 14
x15293:	mov di, bp	; 2: 137 239
x15295:	jmp printf	; 3: 233 66 209

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x15298:	mov ax, [bp + 6]	; 3: 139 70 6
x15301:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x15304:	mov word [bp + 10], file_test$185	; 5: 199 70 10 214 59
x15309:	mov [bp + 12], bp	; 3: 137 110 12
x15312:	add bp, 10	; 3: 131 197 10
x15315:	jmp fclose	; 3: 233 55 54

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15318:	mov ax, [bp + 8]	; 3: 139 70 8
x15321:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15324:	mov word [bp + 10], file_test$189	; 5: 199 70 10 234 59
x15329:	mov [bp + 12], bp	; 3: 137 110 12
x15332:	add bp, 10	; 3: 131 197 10
x15335:	jmp fclose	; 3: 233 35 54

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_Y#
x15338:	mov word [bp + 6], @10571$string_Y#	; 5: 199 70 6 115 80

file_test$191:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$192:	; Parameter 8 sourceFile 6
x15343:	mov ax, [bp + 6]	; 3: 139 70 6
x15346:	mov [bp + 14], ax	; 3: 137 70 14

file_test$193:	; Call 8 remove 0
x15349:	mov word [bp + 8], file_test$194	; 5: 199 70 8 3 60
x15354:	mov [bp + 10], bp	; 3: 137 110 10
x15357:	add bp, 8	; 3: 131 197 8
x15360:	jmp remove	; 3: 233 205 54

file_test$194:	; PostCall 8

file_test$195:	; GetReturnValue £temporary4889

file_test$196:	; NotEqual 203 £temporary4889 0
x15363:	cmp bx, 0	; 3: 131 251 0
x15366:	jne file_test$203	; 2: 117 32

file_test$197:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$198:	; Parameter 8 string_2225s2220has20been20removed0A# 6
x15368:	mov word [bp + 14], @10577$string_2225s2220has20been20removed0A#	; 5: 199 70 14 117 80

file_test$199:	; Parameter 8 sourceFile 8
x15373:	mov ax, [bp + 6]	; 3: 139 70 6
x15376:	mov [bp + 16], ax	; 3: 137 70 16

file_test$200:	; Call 8 printf 0
x15379:	mov word [bp + 8], file_test$201	; 5: 199 70 8 38 60
x15384:	mov [bp + 10], bp	; 3: 137 110 10
x15387:	add bp, 8	; 3: 131 197 8
x15390:	mov di, bp	; 2: 137 239
x15392:	add di, 2	; 3: 131 199 2
x15395:	jmp printf	; 3: 233 222 208

file_test$201:	; PostCall 8

file_test$202:	; Goto 215
x15398:	jmp file_test$215	; 2: 235 59

file_test$203:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$204:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15400:	mov word [bp + 14], @10579$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 140 80

file_test$205:	; Parameter 8 sourceFile 8
x15405:	mov ax, [bp + 6]	; 3: 139 70 6
x15408:	mov [bp + 16], ax	; 3: 137 70 16

file_test$206:	; Parameter 8 errno 10
x15411:	mov ax, [errno]	; 3: 161 230 10
x15414:	mov [bp + 18], ax	; 3: 137 70 18

file_test$207:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$208:	; Parameter 8 errno 18
x15417:	mov ax, [errno]	; 3: 161 230 10
x15420:	mov [bp + 26], ax	; 3: 137 70 26

file_test$209:	; Call 8 strerror 12
x15423:	mov word [bp + 20], file_test$210	; 5: 199 70 20 77 60
x15428:	mov [bp + 22], bp	; 3: 137 110 22
x15431:	add bp, 20	; 3: 131 197 20
x15434:	jmp strerror	; 3: 233 209 247

file_test$210:	; PostCall 8

file_test$211:	; GetReturnValue £temporary4892

file_test$212:	; Parameter 8 £temporary4892 12
x15437:	mov [bp + 20], bx	; 3: 137 94 20

file_test$213:	; Call 8 printf 0
x15440:	mov word [bp + 8], file_test$214	; 5: 199 70 8 99 60
x15445:	mov [bp + 10], bp	; 3: 137 110 10
x15448:	add bp, 8	; 3: 131 197 8
x15451:	mov di, bp	; 2: 137 239
x15453:	add di, 6	; 3: 131 199 6
x15456:	jmp printf	; 3: 233 161 208

file_test$214:	; PostCall 8

file_test$215:	; Assign sourceFile string_X#
x15459:	mov word [bp + 6], @10582$string_X#	; 5: 199 70 6 160 80

file_test$216:	; Assign targetFile string_Y#
x15464:	mov word [bp + 8], @10584$string_Y#	; 5: 199 70 8 162 80

file_test$217:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$218:	; Parameter 10 sourceFile 6
x15469:	mov ax, [bp + 6]	; 3: 139 70 6
x15472:	mov [bp + 16], ax	; 3: 137 70 16

file_test$219:	; Parameter 10 string_w# 8
x15475:	mov word [bp + 18], @10586$string_w#	; 5: 199 70 18 164 80

file_test$220:	; Call 10 fopen 0
x15480:	mov word [bp + 10], file_test$221	; 5: 199 70 10 134 60
x15485:	mov [bp + 12], bp	; 3: 137 110 12
x15488:	add bp, 10	; 3: 131 197 10
x15491:	jmp fopen	; 3: 233 18 30

file_test$221:	; PostCall 10

file_test$222:	; GetReturnValue £temporary4894

file_test$223:	; Assign filePtr £temporary4894
x15494:	mov [bp + 10], bx	; 3: 137 94 10

file_test$224:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$225:	; Parameter 12 filePtr 6
x15497:	mov ax, [bp + 10]	; 3: 139 70 10
x15500:	mov [bp + 18], ax	; 3: 137 70 18

file_test$226:	; Parameter 12 string_Hello20X# 8
x15503:	mov word [bp + 20], @10589$string_Hello20X#	; 5: 199 70 20 166 80

file_test$227:	; Call 12 fprintf 0
x15508:	mov word [bp + 12], file_test$228	; 5: 199 70 12 164 60
x15513:	mov [bp + 14], bp	; 3: 137 110 14
x15516:	add bp, 12	; 3: 131 197 12
x15519:	mov di, bp	; 2: 137 239
x15521:	jmp fprintf	; 3: 233 89 34

file_test$228:	; PostCall 12

file_test$229:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$230:	; Parameter 12 filePtr 6
x15524:	mov ax, [bp + 10]	; 3: 139 70 10
x15527:	mov [bp + 18], ax	; 3: 137 70 18

file_test$231:	; Call 12 fclose 0
x15530:	mov word [bp + 12], file_test$232	; 5: 199 70 12 184 60
x15535:	mov [bp + 14], bp	; 3: 137 110 14
x15538:	add bp, 12	; 3: 131 197 12
x15541:	jmp fclose	; 3: 233 85 53

file_test$232:	; PostCall 12

file_test$233:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$234:	; Parameter 12 sourceFile 6
x15544:	mov ax, [bp + 6]	; 3: 139 70 6
x15547:	mov [bp + 18], ax	; 3: 137 70 18

file_test$235:	; Parameter 12 targetFile 8
x15550:	mov ax, [bp + 8]	; 3: 139 70 8
x15553:	mov [bp + 20], ax	; 3: 137 70 20

file_test$236:	; Call 12 rename 0
x15556:	mov word [bp + 12], file_test$237	; 5: 199 70 12 210 60
x15561:	mov [bp + 14], bp	; 3: 137 110 14
x15564:	add bp, 12	; 3: 131 197 12
x15567:	jmp rename	; 3: 233 43 54

file_test$237:	; PostCall 12

file_test$238:	; GetReturnValue £temporary4897

file_test$239:	; NotEqual 247 £temporary4897 0
x15570:	cmp bx, 0	; 3: 131 251 0
x15573:	jne file_test$247	; 2: 117 38

file_test$240:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$241:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15575:	mov word [bp + 18], @10596$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 174 80

file_test$242:	; Parameter 12 sourceFile 8
x15580:	mov ax, [bp + 6]	; 3: 139 70 6
x15583:	mov [bp + 20], ax	; 3: 137 70 20

file_test$243:	; Parameter 12 targetFile 10
x15586:	mov ax, [bp + 8]	; 3: 139 70 8
x15589:	mov [bp + 22], ax	; 3: 137 70 22

file_test$244:	; Call 12 printf 0
x15592:	mov word [bp + 12], file_test$245	; 5: 199 70 12 251 60
x15597:	mov [bp + 14], bp	; 3: 137 110 14
x15600:	add bp, 12	; 3: 131 197 12
x15603:	mov di, bp	; 2: 137 239
x15605:	add di, 4	; 3: 131 199 4
x15608:	jmp printf	; 3: 233 9 208

file_test$245:	; PostCall 12

file_test$246:	; Goto 260
x15611:	jmp file_test$260	; 2: 235 65

file_test$247:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$248:	; Parameter 12 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15613:	mov word [bp + 18], @10598$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 18 206 80

file_test$249:	; Parameter 12 sourceFile 8
x15618:	mov ax, [bp + 6]	; 3: 139 70 6
x15621:	mov [bp + 20], ax	; 3: 137 70 20

file_test$250:	; Parameter 12 targetFile 10
x15624:	mov ax, [bp + 8]	; 3: 139 70 8
x15627:	mov [bp + 22], ax	; 3: 137 70 22

file_test$251:	; Parameter 12 errno 12
x15630:	mov ax, [errno]	; 3: 161 230 10
x15633:	mov [bp + 24], ax	; 3: 137 70 24

file_test$252:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$253:	; Parameter 12 errno 20
x15636:	mov ax, [errno]	; 3: 161 230 10
x15639:	mov [bp + 32], ax	; 3: 137 70 32

file_test$254:	; Call 12 strerror 14
x15642:	mov word [bp + 26], file_test$255	; 5: 199 70 26 40 61
x15647:	mov [bp + 28], bp	; 3: 137 110 28
x15650:	add bp, 26	; 3: 131 197 26
x15653:	jmp strerror	; 3: 233 246 246

file_test$255:	; PostCall 12

file_test$256:	; GetReturnValue £temporary4900

file_test$257:	; Parameter 12 £temporary4900 14
x15656:	mov [bp + 26], bx	; 3: 137 94 26

file_test$258:	; Call 12 printf 0
x15659:	mov word [bp + 12], file_test$259	; 5: 199 70 12 62 61
x15664:	mov [bp + 14], bp	; 3: 137 110 14
x15667:	add bp, 12	; 3: 131 197 12
x15670:	mov di, bp	; 2: 137 239
x15672:	add di, 8	; 3: 131 199 8
x15675:	jmp printf	; 3: 233 198 207

file_test$259:	; PostCall 12

file_test$260:	; Assign sourceFile string_X2#
x15678:	mov word [bp + 6], @10601$string_X2#	; 5: 199 70 6 231 80

file_test$261:	; Assign targetFile string_Y2#
x15683:	mov word [bp + 8], @10603$string_Y2#	; 5: 199 70 8 234 80

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 sourceFile 6
x15688:	mov ax, [bp + 6]	; 3: 139 70 6
x15691:	mov [bp + 16], ax	; 3: 137 70 16

file_test$264:	; Parameter 10 targetFile 8
x15694:	mov ax, [bp + 8]	; 3: 139 70 8
x15697:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; Call 10 rename 0
x15700:	mov word [bp + 10], file_test$266	; 5: 199 70 10 98 61
x15705:	mov [bp + 12], bp	; 3: 137 110 12
x15708:	add bp, 10	; 3: 131 197 10
x15711:	jmp rename	; 3: 233 155 53

file_test$266:	; PostCall 10

file_test$267:	; GetReturnValue £temporary4902

file_test$268:	; NotEqual 276 £temporary4902 0
x15714:	cmp bx, 0	; 3: 131 251 0
x15717:	jne file_test$276	; 2: 117 38

file_test$269:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$270:	; Parameter 10 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15719:	mov word [bp + 16], @10609$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 16 237 80

file_test$271:	; Parameter 10 sourceFile 8
x15724:	mov ax, [bp + 6]	; 3: 139 70 6
x15727:	mov [bp + 18], ax	; 3: 137 70 18

file_test$272:	; Parameter 10 targetFile 10
x15730:	mov ax, [bp + 8]	; 3: 139 70 8
x15733:	mov [bp + 20], ax	; 3: 137 70 20

file_test$273:	; Call 10 printf 0
x15736:	mov word [bp + 10], file_test$274	; 5: 199 70 10 139 61
x15741:	mov [bp + 12], bp	; 3: 137 110 12
x15744:	add bp, 10	; 3: 131 197 10
x15747:	mov di, bp	; 2: 137 239
x15749:	add di, 4	; 3: 131 199 4
x15752:	jmp printf	; 3: 233 121 207

file_test$274:	; PostCall 10

file_test$275:	; Goto 289
x15755:	jmp file_test$289	; 2: 235 65

file_test$276:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$277:	; Parameter 10 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15757:	mov word [bp + 16], @10611$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 16 13 81

file_test$278:	; Parameter 10 sourceFile 8
x15762:	mov ax, [bp + 6]	; 3: 139 70 6
x15765:	mov [bp + 18], ax	; 3: 137 70 18

file_test$279:	; Parameter 10 targetFile 10
x15768:	mov ax, [bp + 8]	; 3: 139 70 8
x15771:	mov [bp + 20], ax	; 3: 137 70 20

file_test$280:	; Parameter 10 errno 12
x15774:	mov ax, [errno]	; 3: 161 230 10
x15777:	mov [bp + 22], ax	; 3: 137 70 22

file_test$281:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 10 errno 20
x15780:	mov ax, [errno]	; 3: 161 230 10
x15783:	mov [bp + 30], ax	; 3: 137 70 30

file_test$283:	; Call 10 strerror 14
x15786:	mov word [bp + 24], file_test$284	; 5: 199 70 24 184 61
x15791:	mov [bp + 26], bp	; 3: 137 110 26
x15794:	add bp, 24	; 3: 131 197 24
x15797:	jmp strerror	; 3: 233 102 246

file_test$284:	; PostCall 10

file_test$285:	; GetReturnValue £temporary4905

file_test$286:	; Parameter 10 £temporary4905 14
x15800:	mov [bp + 24], bx	; 3: 137 94 24

file_test$287:	; Call 10 printf 0
x15803:	mov word [bp + 10], file_test$288	; 5: 199 70 10 206 61
x15808:	mov [bp + 12], bp	; 3: 137 110 12
x15811:	add bp, 10	; 3: 131 197 10
x15814:	mov di, bp	; 2: 137 239
x15816:	add di, 8	; 3: 131 199 8
x15819:	jmp printf	; 3: 233 54 207

file_test$288:	; PostCall 10

file_test$289:	; Assign targetFile string_Z#
x15822:	mov word [bp + 6], @10614$string_Z#	; 5: 199 70 6 38 81

file_test$290:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$291:	; Parameter 8 targetFile 6
x15827:	mov ax, [bp + 6]	; 3: 139 70 6
x15830:	mov [bp + 14], ax	; 3: 137 70 14

file_test$292:	; Parameter 8 string_w# 8
x15833:	mov word [bp + 16], @10616$string_w#	; 5: 199 70 16 40 81

file_test$293:	; Call 8 fopen 0
x15838:	mov word [bp + 8], file_test$294	; 5: 199 70 8 236 61
x15843:	mov [bp + 10], bp	; 3: 137 110 10
x15846:	add bp, 8	; 3: 131 197 8
x15849:	jmp fopen	; 3: 233 172 28

file_test$294:	; PostCall 8

file_test$295:	; GetReturnValue £temporary4907

file_test$296:	; Assign filePtr £temporary4907
x15852:	mov [bp + 8], bx	; 3: 137 94 8

file_test$297:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$298:	; Parameter 10 filePtr 6
x15855:	mov ax, [bp + 8]	; 3: 139 70 8
x15858:	mov [bp + 16], ax	; 3: 137 70 16

file_test$299:	; Parameter 10 string_Hello20Z# 8
x15861:	mov word [bp + 18], @10619$string_Hello20Z#	; 5: 199 70 18 42 81

file_test$300:	; Call 10 fprintf 0
x15866:	mov word [bp + 10], file_test$301	; 5: 199 70 10 10 62
x15871:	mov [bp + 12], bp	; 3: 137 110 12
x15874:	add bp, 10	; 3: 131 197 10
x15877:	mov di, bp	; 2: 137 239
x15879:	jmp fprintf	; 3: 233 243 32

file_test$301:	; PostCall 10

file_test$302:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$303:	; Parameter 10 filePtr 6
x15882:	mov ax, [bp + 8]	; 3: 139 70 8
x15885:	mov [bp + 16], ax	; 3: 137 70 16

file_test$304:	; Call 10 fclose 0
x15888:	mov word [bp + 10], file_test$305	; 5: 199 70 10 30 62
x15893:	mov [bp + 12], bp	; 3: 137 110 12
x15896:	add bp, 10	; 3: 131 197 10
x15899:	jmp fclose	; 3: 233 239 51

file_test$305:	; PostCall 10

file_test$306:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$307:	; Parameter 10 targetFile 6
x15902:	mov ax, [bp + 6]	; 3: 139 70 6
x15905:	mov [bp + 16], ax	; 3: 137 70 16

file_test$308:	; Call 10 remove 0
x15908:	mov word [bp + 10], file_test$309	; 5: 199 70 10 50 62
x15913:	mov [bp + 12], bp	; 3: 137 110 12
x15916:	add bp, 10	; 3: 131 197 10
x15919:	jmp remove	; 3: 233 158 52

file_test$309:	; PostCall 10

file_test$310:	; GetReturnValue £temporary4910

file_test$311:	; NotEqual 318 £temporary4910 0
x15922:	cmp bx, 0	; 3: 131 251 0
x15925:	jne file_test$318	; 2: 117 32

file_test$312:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$313:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15927:	mov word [bp + 16], @10626$string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 50 81

file_test$314:	; Parameter 10 targetFile 8
x15932:	mov ax, [bp + 6]	; 3: 139 70 6
x15935:	mov [bp + 18], ax	; 3: 137 70 18

file_test$315:	; Call 10 printf 0
x15938:	mov word [bp + 10], file_test$316	; 5: 199 70 10 85 62
x15943:	mov [bp + 12], bp	; 3: 137 110 12
x15946:	add bp, 10	; 3: 131 197 10
x15949:	mov di, bp	; 2: 137 239
x15951:	add di, 2	; 3: 131 199 2
x15954:	jmp printf	; 3: 233 175 206

file_test$316:	; PostCall 10

file_test$317:	; Goto 330
x15957:	jmp file_test$330	; 2: 235 59

file_test$318:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 10 string_Error202225s222025i3A2025s2E0A# 6
x15959:	mov word [bp + 16], @10628$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 16 74 81

file_test$320:	; Parameter 10 targetFile 8
x15964:	mov ax, [bp + 6]	; 3: 139 70 6
x15967:	mov [bp + 18], ax	; 3: 137 70 18

file_test$321:	; Parameter 10 errno 10
x15970:	mov ax, [errno]	; 3: 161 230 10
x15973:	mov [bp + 20], ax	; 3: 137 70 20

file_test$322:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$323:	; Parameter 10 errno 18
x15976:	mov ax, [errno]	; 3: 161 230 10
x15979:	mov [bp + 28], ax	; 3: 137 70 28

file_test$324:	; Call 10 strerror 12
x15982:	mov word [bp + 22], file_test$325	; 5: 199 70 22 124 62
x15987:	mov [bp + 24], bp	; 3: 137 110 24
x15990:	add bp, 22	; 3: 131 197 22
x15993:	jmp strerror	; 3: 233 162 245

file_test$325:	; PostCall 10

file_test$326:	; GetReturnValue £temporary4913

file_test$327:	; Parameter 10 £temporary4913 12
x15996:	mov [bp + 22], bx	; 3: 137 94 22

file_test$328:	; Call 10 printf 0
x15999:	mov word [bp + 10], file_test$329	; 5: 199 70 10 146 62
x16004:	mov [bp + 12], bp	; 3: 137 110 12
x16007:	add bp, 10	; 3: 131 197 10
x16010:	mov di, bp	; 2: 137 239
x16012:	add di, 6	; 3: 131 199 6
x16015:	jmp printf	; 3: 233 114 206

file_test$329:	; PostCall 10

file_test$330:	; Assign targetFile string_Z2#
x16018:	mov word [bp + 6], @10631$string_Z2#	; 5: 199 70 6 94 81

file_test$331:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$332:	; Parameter 8 targetFile 6
x16023:	mov ax, [bp + 6]	; 3: 139 70 6
x16026:	mov [bp + 14], ax	; 3: 137 70 14

file_test$333:	; Call 8 remove 0
x16029:	mov word [bp + 8], file_test$334	; 5: 199 70 8 171 62
x16034:	mov [bp + 10], bp	; 3: 137 110 10
x16037:	add bp, 8	; 3: 131 197 8
x16040:	jmp remove	; 3: 233 37 52

file_test$334:	; PostCall 8

file_test$335:	; GetReturnValue £temporary4915

file_test$336:	; NotEqual 343 £temporary4915 0
x16043:	cmp bx, 0	; 3: 131 251 0
x16046:	jne file_test$343	; 2: 117 32

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 string_2225s2220has20been20removed2E0A# 6
x16048:	mov word [bp + 14], @10637$string_2225s2220has20been20removed2E0A#	; 5: 199 70 14 97 81

file_test$339:	; Parameter 8 targetFile 8
x16053:	mov ax, [bp + 6]	; 3: 139 70 6
x16056:	mov [bp + 16], ax	; 3: 137 70 16

file_test$340:	; Call 8 printf 0
x16059:	mov word [bp + 8], file_test$341	; 5: 199 70 8 206 62
x16064:	mov [bp + 10], bp	; 3: 137 110 10
x16067:	add bp, 8	; 3: 131 197 8
x16070:	mov di, bp	; 2: 137 239
x16072:	add di, 2	; 3: 131 199 2
x16075:	jmp printf	; 3: 233 54 206

file_test$341:	; PostCall 8

file_test$342:	; Goto 355
x16078:	jmp file_test$355	; 2: 235 59

file_test$343:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$344:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x16080:	mov word [bp + 14], @10639$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 121 81

file_test$345:	; Parameter 8 targetFile 8
x16085:	mov ax, [bp + 6]	; 3: 139 70 6
x16088:	mov [bp + 16], ax	; 3: 137 70 16

file_test$346:	; Parameter 8 errno 10
x16091:	mov ax, [errno]	; 3: 161 230 10
x16094:	mov [bp + 18], ax	; 3: 137 70 18

file_test$347:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$348:	; Parameter 8 errno 18
x16097:	mov ax, [errno]	; 3: 161 230 10
x16100:	mov [bp + 26], ax	; 3: 137 70 26

file_test$349:	; Call 8 strerror 12
x16103:	mov word [bp + 20], file_test$350	; 5: 199 70 20 245 62
x16108:	mov [bp + 22], bp	; 3: 137 110 22
x16111:	add bp, 20	; 3: 131 197 20
x16114:	jmp strerror	; 3: 233 41 245

file_test$350:	; PostCall 8

file_test$351:	; GetReturnValue £temporary4918

file_test$352:	; Parameter 8 £temporary4918 12
x16117:	mov [bp + 20], bx	; 3: 137 94 20

file_test$353:	; Call 8 printf 0
x16120:	mov word [bp + 8], file_test$354	; 5: 199 70 8 11 63
x16125:	mov [bp + 10], bp	; 3: 137 110 10
x16128:	add bp, 8	; 3: 131 197 8
x16131:	mov di, bp	; 2: 137 239
x16133:	add di, 6	; 3: 131 199 6
x16136:	jmp printf	; 3: 233 249 205

file_test$354:	; PostCall 8

file_test$355:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$356:	; Parameter 6 string_PBook2Etxt# 6
x16139:	mov word [bp + 12], @10642$string_PBook2Etxt#	; 5: 199 70 12 141 81

file_test$357:	; Parameter 6 string_r# 8
x16144:	mov word [bp + 14], @10643$string_r#	; 5: 199 70 14 151 81

file_test$358:	; Call 6 fopen 0
x16149:	mov word [bp + 6], file_test$359	; 5: 199 70 6 35 63
x16154:	mov [bp + 8], bp	; 3: 137 110 8
x16157:	add bp, 6	; 3: 131 197 6
x16160:	jmp fopen	; 3: 233 117 27

file_test$359:	; PostCall 6

file_test$360:	; GetReturnValue £temporary4920

file_test$361:	; Assign inFilePtr £temporary4920
x16163:	mov [bp + 6], bx	; 3: 137 94 6

file_test$362:	; NotEqual 374 inFilePtr 0
x16166:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16170:	jne file_test$374	; 2: 117 59

file_test$363:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$364:	; Parameter 8 stderr 6
x16172:	mov ax, [stderr]	; 3: 161 24 78
x16175:	mov [bp + 14], ax	; 3: 137 70 14

file_test$365:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16178:	mov word [bp + 16], @10651$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 153 81

file_test$366:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16183:	mov word [bp + 18], @10652$string_inFilePtr20213D20NULL#	; 5: 199 70 18 199 81

file_test$367:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16188:	mov word [bp + 20], @10653$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 217 81

file_test$368:	; Parameter 8 119 14
x16193:	mov word [bp + 22], 119	; 5: 199 70 22 119 0

file_test$369:	; Call 8 fprintf 0
x16198:	mov word [bp + 8], file_test$370	; 5: 199 70 8 89 63
x16203:	mov [bp + 10], bp	; 3: 137 110 10
x16206:	add bp, 8	; 3: 131 197 8
x16209:	mov di, bp	; 2: 137 239
x16211:	add di, 6	; 3: 131 199 6
x16214:	jmp fprintf	; 3: 233 164 31

file_test$370:	; PostCall 8

file_test$371:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$372:	; Call 8 abort 0
x16217:	mov word [bp + 8], file_test$373	; 5: 199 70 8 103 63
x16222:	mov [bp + 10], bp	; 3: 137 110 10
x16225:	add bp, 8	; 3: 131 197 8
x16228:	jmp abort	; 3: 233 209 31

file_test$373:	; PostCall 8

file_test$374:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x16231:	mov word [bp + 14], @10657$string_0A252D24s20252D24s0A#	; 5: 199 70 14 26 82

file_test$376:	; Parameter 8 string_Name# 8
x16236:	mov word [bp + 16], @10658$string_Name#	; 5: 199 70 16 40 82

file_test$377:	; Parameter 8 string_Phone# 10
x16241:	mov word [bp + 18], @10659$string_Phone#	; 5: 199 70 18 45 82

file_test$378:	; Call 8 printf 0
x16246:	mov word [bp + 8], file_test$379	; 5: 199 70 8 137 63
x16251:	mov [bp + 10], bp	; 3: 137 110 10
x16254:	add bp, 8	; 3: 131 197 8
x16257:	mov di, bp	; 2: 137 239
x16259:	add di, 4	; 3: 131 199 4
x16262:	jmp printf	; 3: 233 123 205

file_test$379:	; PostCall 8

file_test$380:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$381:	; Parameter 8 string_252D24s20252D24s0A# 6
x16265:	mov word [bp + 14], @10661$string_252D24s20252D24s0A#	; 5: 199 70 14 51 82

file_test$382:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x16270:	mov word [bp + 16], @10662$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 64 82

file_test$383:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x16275:	mov word [bp + 18], @10663$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 89 82

file_test$384:	; Call 8 printf 0
x16280:	mov word [bp + 8], file_test$385	; 5: 199 70 8 171 63
x16285:	mov [bp + 10], bp	; 3: 137 110 10
x16288:	add bp, 8	; 3: 131 197 8
x16291:	mov di, bp	; 2: 137 239
x16293:	add di, 4	; 3: 131 199 4
x16296:	jmp printf	; 3: 233 89 205

file_test$385:	; PostCall 8

file_test$386:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$387:	; Parameter 12 inFilePtr 6
x16299:	mov ax, [bp + 6]	; 3: 139 70 6
x16302:	mov [bp + 18], ax	; 3: 137 70 18

file_test$388:	; Parameter 12 string_25i# 8
x16305:	mov word [bp + 20], @10667$string_25i#	; 5: 199 70 20 114 82

file_test$389:	; address £temporary4927 size
x16310:	mov si, bp	; 2: 137 238
x16312:	add si, 10	; 3: 131 198 10

file_test$390:	; Parameter 12 £temporary4927 10
x16315:	mov [bp + 22], si	; 3: 137 118 22

file_test$391:	; Call 12 fscanf 0
x16318:	mov word [bp + 12], file_test$392	; 5: 199 70 12 209 63
x16323:	mov [bp + 14], bp	; 3: 137 110 14
x16326:	add bp, 12	; 3: 131 197 12
x16329:	mov di, bp	; 2: 137 239
x16331:	add di, 2	; 3: 131 199 2
x16334:	jmp fscanf	; 3: 233 13 32

file_test$392:	; PostCall 12

file_test$393:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$394:	; Parameter 12 string_size2025i0A# 6
x16337:	mov word [bp + 18], @10670$string_size2025i0A#	; 5: 199 70 18 117 82

file_test$395:	; Parameter 12 size 8
x16342:	mov ax, [bp + 10]	; 3: 139 70 10
x16345:	mov [bp + 20], ax	; 3: 137 70 20

file_test$396:	; Call 12 printf 0
x16348:	mov word [bp + 12], file_test$397	; 5: 199 70 12 239 63
x16353:	mov [bp + 14], bp	; 3: 137 110 14
x16356:	add bp, 12	; 3: 131 197 12
x16359:	mov di, bp	; 2: 137 239
x16361:	add di, 2	; 3: 131 199 2
x16364:	jmp printf	; 3: 233 21 205

file_test$397:	; PostCall 12

file_test$398:	; Assign count 0
x16367:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$399:	; SignedGreaterThanEqual 415 count size
x16372:	mov ax, [bp + 10]	; 3: 139 70 10
x16375:	cmp [bp + 8], ax	; 3: 57 70 8
x16378:	jge file_test$415	; 2: 125 87

file_test$400:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$401:	; Parameter 52 inFilePtr 6
x16380:	mov ax, [bp + 6]	; 3: 139 70 6
x16383:	mov [bp + 58], ax	; 3: 137 70 58

file_test$402:	; Parameter 52 string_25s25s# 8
x16386:	mov word [bp + 60], @10683$string_25s25s#	; 5: 199 70 60 126 82

file_test$403:	; Parameter 52 name 10
x16391:	mov [bp + 62], bp	; 3: 137 110 62
x16394:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$404:	; Parameter 52 phone 12
x16398:	mov [bp + 64], bp	; 3: 137 110 64
x16401:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$405:	; Call 52 fscanf 0
x16405:	mov word [bp + 52], file_test$406	; 5: 199 70 52 40 64
x16410:	mov [bp + 54], bp	; 3: 137 110 54
x16413:	add bp, 52	; 3: 131 197 52
x16416:	mov di, bp	; 2: 137 239
x16418:	add di, 4	; 3: 131 199 4
x16421:	jmp fscanf	; 3: 233 182 31

file_test$406:	; PostCall 52

file_test$407:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; Parameter 52 string_252D24s20252D24s0A# 6
x16424:	mov word [bp + 58], @10685$string_252D24s20252D24s0A#	; 5: 199 70 58 131 82

file_test$409:	; Parameter 52 name 8
x16429:	mov [bp + 60], bp	; 3: 137 110 60
x16432:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$410:	; Parameter 52 phone 10
x16436:	mov [bp + 62], bp	; 3: 137 110 62
x16439:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$411:	; Call 52 printf 0
x16443:	mov word [bp + 52], file_test$412	; 5: 199 70 52 78 64
x16448:	mov [bp + 54], bp	; 3: 137 110 54
x16451:	add bp, 52	; 3: 131 197 52
x16454:	mov di, bp	; 2: 137 239
x16456:	add di, 4	; 3: 131 199 4
x16459:	jmp printf	; 3: 233 182 204

file_test$412:	; PostCall 52

file_test$413:	; Increment count
x16462:	inc word [bp + 8]	; 3: 255 70 8

file_test$414:	; Goto 399
x16465:	jmp file_test$399	; 2: 235 161

file_test$415:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 8 string_0A# 6
x16467:	mov word [bp + 14], @10687$string_0A#	; 5: 199 70 14 144 82

file_test$417:	; Call 8 printf 0
x16472:	mov word [bp + 8], file_test$418	; 5: 199 70 8 104 64
x16477:	mov [bp + 10], bp	; 3: 137 110 10
x16480:	add bp, 8	; 3: 131 197 8
x16483:	mov di, bp	; 2: 137 239
x16485:	jmp printf	; 3: 233 156 204

file_test$418:	; PostCall 8

file_test$419:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$420:	; Parameter 8 inFilePtr 6
x16488:	mov ax, [bp + 6]	; 3: 139 70 6
x16491:	mov [bp + 14], ax	; 3: 137 70 14

file_test$421:	; Call 8 fclose 0
x16494:	mov word [bp + 8], file_test$422	; 5: 199 70 8 124 64
x16499:	mov [bp + 10], bp	; 3: 137 110 10
x16502:	add bp, 8	; 3: 131 197 8
x16505:	jmp fclose	; 3: 233 145 49

file_test$422:	; PostCall 8

file_test$423:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$424:	; Parameter 6 string_TestX2Ebin# 6
x16508:	mov word [bp + 12], @10690$string_TestX2Ebin#	; 5: 199 70 12 146 82

file_test$425:	; Parameter 6 string_w# 8
x16513:	mov word [bp + 14], @10691$string_w#	; 5: 199 70 14 156 82

file_test$426:	; Call 6 fopen 0
x16518:	mov word [bp + 6], file_test$427	; 5: 199 70 6 148 64
x16523:	mov [bp + 8], bp	; 3: 137 110 8
x16526:	add bp, 6	; 3: 131 197 6
x16529:	jmp fopen	; 3: 233 4 26

file_test$427:	; PostCall 6

file_test$428:	; GetReturnValue £temporary4936

file_test$429:	; Assign outFilePtr £temporary4936
x16532:	mov [bp + 6], bx	; 3: 137 94 6

file_test$430:	; NotEqual 442 outFilePtr 0
x16535:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16539:	jne file_test$442	; 2: 117 59

file_test$431:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$432:	; Parameter 8 stderr 6
x16541:	mov ax, [stderr]	; 3: 161 24 78
x16544:	mov [bp + 14], ax	; 3: 137 70 14

file_test$433:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16547:	mov word [bp + 16], @10699$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 158 82

file_test$434:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16552:	mov word [bp + 18], @10700$string_outFilePtr20213D20NULL#	; 5: 199 70 18 204 82

file_test$435:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16557:	mov word [bp + 20], @10701$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 223 82

file_test$436:	; Parameter 8 171 14
x16562:	mov word [bp + 22], 171	; 5: 199 70 22 171 0

file_test$437:	; Call 8 fprintf 0
x16567:	mov word [bp + 8], file_test$438	; 5: 199 70 8 202 64
x16572:	mov [bp + 10], bp	; 3: 137 110 10
x16575:	add bp, 8	; 3: 131 197 8
x16578:	mov di, bp	; 2: 137 239
x16580:	add di, 6	; 3: 131 199 6
x16583:	jmp fprintf	; 3: 233 51 30

file_test$438:	; PostCall 8

file_test$439:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Call 8 abort 0
x16586:	mov word [bp + 8], file_test$441	; 5: 199 70 8 216 64
x16591:	mov [bp + 10], bp	; 3: 137 110 10
x16594:	add bp, 8	; 3: 131 197 8
x16597:	jmp abort	; 3: 233 96 30

file_test$441:	; PostCall 8

file_test$442:	; Assign size 10
x16600:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; address £temporary4941 size
x16605:	mov si, bp	; 2: 137 238
x16607:	add si, 8	; 3: 131 198 8

file_test$445:	; Parameter 12 £temporary4941 6
x16610:	mov [bp + 18], si	; 3: 137 118 18

file_test$446:	; Parameter 12 2 8
x16613:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$447:	; Parameter 12 1 10
x16618:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$448:	; Parameter 12 outFilePtr 12
x16623:	mov ax, [bp + 6]	; 3: 139 70 6
x16626:	mov [bp + 24], ax	; 3: 137 70 24

file_test$449:	; Call 12 fwrite 0
x16629:	mov word [bp + 12], file_test$450	; 5: 199 70 12 3 65
x16634:	mov [bp + 14], bp	; 3: 137 110 14
x16637:	add bp, 12	; 3: 131 197 12
x16640:	jmp fwrite	; 3: 233 42 50

file_test$450:	; PostCall 12

file_test$451:	; Assign index 0
x16643:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$452:	; SignedGreaterThanEqual 466 index size
x16648:	mov ax, [bp + 8]	; 3: 139 70 8
x16651:	cmp [bp + 10], ax	; 3: 57 70 10
x16654:	jge file_test$466	; 2: 125 61

file_test$453:	; SignedMultiply £temporary4945 index index
x16656:	mov ax, [bp + 10]	; 3: 139 70 10
x16659:	xor dx, dx	; 2: 49 210
x16661:	imul word [bp + 10]	; 3: 247 110 10

file_test$454:	; IntegralToFloating £temporary4946 £temporary4945
x16664:	mov [container2bytes#], ax	; 3: 163 79 27
x16667:	fild word [container2bytes#]	; 4: 223 6 79 27

file_test$455:	; PopFloat value
x16671:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$456:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$457:	; address £temporary4947 value
x16674:	mov si, bp	; 2: 137 238
x16676:	add si, 12	; 3: 131 198 12

file_test$458:	; Parameter 20 £temporary4947 6
x16679:	mov [bp + 26], si	; 3: 137 118 26

file_test$459:	; Parameter 20 8 8
x16682:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$460:	; Parameter 20 1 10
x16687:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$461:	; Parameter 20 outFilePtr 12
x16692:	mov ax, [bp + 6]	; 3: 139 70 6
x16695:	mov [bp + 32], ax	; 3: 137 70 32

file_test$462:	; Call 20 fwrite 0
x16698:	mov word [bp + 20], file_test$463	; 5: 199 70 20 72 65
x16703:	mov [bp + 22], bp	; 3: 137 110 22
x16706:	add bp, 20	; 3: 131 197 20
x16709:	jmp fwrite	; 3: 233 229 49

file_test$463:	; PostCall 20

file_test$464:	; Increment index
x16712:	inc word [bp + 10]	; 3: 255 70 10

file_test$465:	; Goto 452
x16715:	jmp file_test$452	; 2: 235 187

file_test$466:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$467:	; Parameter 12 outFilePtr 6
x16717:	mov ax, [bp + 6]	; 3: 139 70 6
x16720:	mov [bp + 18], ax	; 3: 137 70 18

file_test$468:	; Call 12 fclose 0
x16723:	mov word [bp + 12], file_test$469	; 5: 199 70 12 97 65
x16728:	mov [bp + 14], bp	; 3: 137 110 14
x16731:	add bp, 12	; 3: 131 197 12
x16734:	jmp fclose	; 3: 233 172 48

file_test$469:	; PostCall 12

file_test$470:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$471:	; Parameter 6 string_TestX2Ebin# 6
x16737:	mov word [bp + 12], @10730$string_TestX2Ebin#	; 5: 199 70 12 32 83

file_test$472:	; Parameter 6 string_r# 8
x16742:	mov word [bp + 14], @10731$string_r#	; 5: 199 70 14 42 83

file_test$473:	; Call 6 fopen 0
x16747:	mov word [bp + 6], file_test$474	; 5: 199 70 6 121 65
x16752:	mov [bp + 8], bp	; 3: 137 110 8
x16755:	add bp, 6	; 3: 131 197 6
x16758:	jmp fopen	; 3: 233 31 25

file_test$474:	; PostCall 6

file_test$475:	; GetReturnValue £temporary4950

file_test$476:	; Assign inFilePtr £temporary4950
x16761:	mov [bp + 6], bx	; 3: 137 94 6

file_test$477:	; NotEqual 489 inFilePtr 0
x16764:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16768:	jne file_test$489	; 2: 117 59

file_test$478:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$479:	; Parameter 12 stderr 6
x16770:	mov ax, [stderr]	; 3: 161 24 78
x16773:	mov [bp + 18], ax	; 3: 137 70 18

file_test$480:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16776:	mov word [bp + 20], @10741$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 44 83

file_test$481:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16781:	mov word [bp + 22], @10742$string_inFilePtr20213D20NULL#	; 5: 199 70 22 90 83

file_test$482:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16786:	mov word [bp + 24], @10743$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 108 83

file_test$483:	; Parameter 12 188 14
x16791:	mov word [bp + 26], 188	; 5: 199 70 26 188 0

file_test$484:	; Call 12 fprintf 0
x16796:	mov word [bp + 12], file_test$485	; 5: 199 70 12 175 65
x16801:	mov [bp + 14], bp	; 3: 137 110 14
x16804:	add bp, 12	; 3: 131 197 12
x16807:	mov di, bp	; 2: 137 239
x16809:	add di, 6	; 3: 131 199 6
x16812:	jmp fprintf	; 3: 233 78 29

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Call 12 abort 0
x16815:	mov word [bp + 12], file_test$488	; 5: 199 70 12 189 65
x16820:	mov [bp + 14], bp	; 3: 137 110 14
x16823:	add bp, 12	; 3: 131 197 12
x16826:	jmp abort	; 3: 233 123 29

file_test$488:	; PostCall 12

file_test$489:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$490:	; address £temporary4955 size
x16829:	mov si, bp	; 2: 137 238
x16831:	add si, 8	; 3: 131 198 8

file_test$491:	; Parameter 12 £temporary4955 6
x16834:	mov [bp + 18], si	; 3: 137 118 18

file_test$492:	; Parameter 12 2 8
x16837:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$493:	; Parameter 12 1 10
x16842:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$494:	; Parameter 12 inFilePtr 12
x16847:	mov ax, [bp + 6]	; 3: 139 70 6
x16850:	mov [bp + 24], ax	; 3: 137 70 24

file_test$495:	; Call 12 fread 0
x16853:	mov word [bp + 12], file_test$496	; 5: 199 70 12 227 65
x16858:	mov [bp + 14], bp	; 3: 137 110 14
x16861:	add bp, 12	; 3: 131 197 12
x16864:	jmp fread	; 3: 233 141 49

file_test$496:	; PostCall 12

file_test$497:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$498:	; Parameter 12 string_size13A2025i0A# 6
x16867:	mov word [bp + 18], @10753$string_size13A2025i0A#	; 5: 199 70 18 173 83

file_test$499:	; Parameter 12 size 8
x16872:	mov ax, [bp + 8]	; 3: 139 70 8
x16875:	mov [bp + 20], ax	; 3: 137 70 20

file_test$500:	; Call 12 printf 0
x16878:	mov word [bp + 12], file_test$501	; 5: 199 70 12 1 66
x16883:	mov [bp + 14], bp	; 3: 137 110 14
x16886:	add bp, 12	; 3: 131 197 12
x16889:	mov di, bp	; 2: 137 239
x16891:	add di, 2	; 3: 131 199 2
x16894:	jmp printf	; 3: 233 3 203

file_test$501:	; PostCall 12

file_test$502:	; Assign index 0
x16897:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$503:	; SignedGreaterThanEqual 521 index size
x16902:	mov ax, [bp + 8]	; 3: 139 70 8
x16905:	cmp [bp + 10], ax	; 3: 57 70 10
x16908:	jge file_test$521	; 2: 125 79

file_test$504:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$505:	; address £temporary4960 value
x16910:	mov si, bp	; 2: 137 238
x16912:	add si, 12	; 3: 131 198 12

file_test$506:	; Parameter 20 £temporary4960 6
x16915:	mov [bp + 26], si	; 3: 137 118 26

file_test$507:	; Parameter 20 8 8
x16918:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$508:	; Parameter 20 1 10
x16923:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$509:	; Parameter 20 inFilePtr 12
x16928:	mov ax, [bp + 6]	; 3: 139 70 6
x16931:	mov [bp + 32], ax	; 3: 137 70 32

file_test$510:	; Call 20 fread 0
x16934:	mov word [bp + 20], file_test$511	; 5: 199 70 20 52 66
x16939:	mov [bp + 22], bp	; 3: 137 110 22
x16942:	add bp, 20	; 3: 131 197 20
x16945:	jmp fread	; 3: 233 60 49

file_test$511:	; PostCall 20

file_test$512:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$513:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16948:	mov word [bp + 26], @10767$string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 184 83

file_test$514:	; Parameter 20 index 8
x16953:	mov ax, [bp + 10]	; 3: 139 70 10
x16956:	mov [bp + 28], ax	; 3: 137 70 28

file_test$515:	; PushFloat value
x16959:	fld qword [bp + 12]	; 3: 221 70 12

file_test$516:	; Parameter 20 value 10
x16962:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$517:	; Call 20 printf 0
x16965:	mov word [bp + 20], file_test$518	; 5: 199 70 20 88 66
x16970:	mov [bp + 22], bp	; 3: 137 110 22
x16973:	add bp, 20	; 3: 131 197 20
x16976:	mov di, bp	; 2: 137 239
x16978:	add di, 10	; 3: 131 199 10
x16981:	jmp printf	; 3: 233 172 202

file_test$518:	; PostCall 20

file_test$519:	; Increment index
x16984:	inc word [bp + 10]	; 3: 255 70 10

file_test$520:	; Goto 503
x16987:	jmp file_test$503	; 2: 235 169

file_test$521:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$522:	; Parameter 12 string_0A# 6
x16989:	mov word [bp + 18], @10769$string_0A#	; 5: 199 70 18 206 83

file_test$523:	; Call 12 printf 0
x16994:	mov word [bp + 12], file_test$524	; 5: 199 70 12 114 66
x16999:	mov [bp + 14], bp	; 3: 137 110 14
x17002:	add bp, 12	; 3: 131 197 12
x17005:	mov di, bp	; 2: 137 239
x17007:	jmp printf	; 3: 233 146 202

file_test$524:	; PostCall 12

file_test$525:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$526:	; Parameter 12 inFilePtr 6
x17010:	mov ax, [bp + 6]	; 3: 139 70 6
x17013:	mov [bp + 18], ax	; 3: 137 70 18

file_test$527:	; Call 12 fclose 0
x17016:	mov word [bp + 12], file_test$528	; 5: 199 70 12 134 66
x17021:	mov [bp + 14], bp	; 3: 137 110 14
x17024:	add bp, 12	; 3: 131 197 12
x17027:	jmp fclose	; 3: 233 135 47

file_test$528:	; PostCall 12

file_test$529:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$530:	; Parameter 6 string_TestY2Ebin# 6
x17030:	mov word [bp + 12], @10772$string_TestY2Ebin#	; 5: 199 70 12 208 83

file_test$531:	; Parameter 6 string_w# 8
x17035:	mov word [bp + 14], @10773$string_w#	; 5: 199 70 14 218 83

file_test$532:	; Call 6 fopen 0
x17040:	mov word [bp + 6], file_test$533	; 5: 199 70 6 158 66
x17045:	mov [bp + 8], bp	; 3: 137 110 8
x17048:	add bp, 6	; 3: 131 197 6
x17051:	jmp fopen	; 3: 233 250 23

file_test$533:	; PostCall 6

file_test$534:	; GetReturnValue £temporary4965

file_test$535:	; Assign outFilePtr £temporary4965
x17054:	mov [bp + 6], bx	; 3: 137 94 6

file_test$536:	; NotEqual 548 outFilePtr 0
x17057:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17061:	jne file_test$548	; 2: 117 59

file_test$537:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$538:	; Parameter 8 stderr 6
x17063:	mov ax, [stderr]	; 3: 161 24 78
x17066:	mov [bp + 14], ax	; 3: 137 70 14

file_test$539:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17069:	mov word [bp + 16], @10781$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 220 83

file_test$540:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x17074:	mov word [bp + 18], @10782$string_outFilePtr20213D20NULL#	; 5: 199 70 18 10 84

file_test$541:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17079:	mov word [bp + 20], @10783$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 29 84

file_test$542:	; Parameter 8 203 14
x17084:	mov word [bp + 22], 203	; 5: 199 70 22 203 0

file_test$543:	; Call 8 fprintf 0
x17089:	mov word [bp + 8], file_test$544	; 5: 199 70 8 212 66
x17094:	mov [bp + 10], bp	; 3: 137 110 10
x17097:	add bp, 8	; 3: 131 197 8
x17100:	mov di, bp	; 2: 137 239
x17102:	add di, 6	; 3: 131 199 6
x17105:	jmp fprintf	; 3: 233 41 28

file_test$544:	; PostCall 8

file_test$545:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$546:	; Call 8 abort 0
x17108:	mov word [bp + 8], file_test$547	; 5: 199 70 8 226 66
x17113:	mov [bp + 10], bp	; 3: 137 110 10
x17116:	add bp, 8	; 3: 131 197 8
x17119:	jmp abort	; 3: 233 86 28

file_test$547:	; PostCall 8

file_test$548:	; Assign size 10
x17122:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$549:	; Assign index 0
x17127:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$550:	; SignedGreaterThanEqual 564 index size
x17132:	mov ax, [bp + 8]	; 3: 139 70 8
x17135:	cmp [bp + 10], ax	; 3: 57 70 10
x17138:	jge file_test$564	; 2: 125 61

file_test$551:	; SignedMultiply £temporary4972 index index
x17140:	mov ax, [bp + 10]	; 3: 139 70 10
x17143:	xor dx, dx	; 2: 49 210
x17145:	imul word [bp + 10]	; 3: 247 110 10

file_test$552:	; IntegralToFloating £temporary4973 £temporary4972
x17148:	mov [container2bytes#], ax	; 3: 163 79 27
x17151:	fild word [container2bytes#]	; 4: 223 6 79 27

file_test$553:	; PopFloat value
x17155:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$554:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; address £temporary4974 value
x17158:	mov si, bp	; 2: 137 238
x17160:	add si, 12	; 3: 131 198 12

file_test$556:	; Parameter 20 £temporary4974 6
x17163:	mov [bp + 26], si	; 3: 137 118 26

file_test$557:	; Parameter 20 8 8
x17166:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$558:	; Parameter 20 1 10
x17171:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$559:	; Parameter 20 outFilePtr 12
x17176:	mov ax, [bp + 6]	; 3: 139 70 6
x17179:	mov [bp + 32], ax	; 3: 137 70 32

file_test$560:	; Call 20 fwrite 0
x17182:	mov word [bp + 20], file_test$561	; 5: 199 70 20 44 67
x17187:	mov [bp + 22], bp	; 3: 137 110 22
x17190:	add bp, 20	; 3: 131 197 20
x17193:	jmp fwrite	; 3: 233 1 48

file_test$561:	; PostCall 20

file_test$562:	; Increment index
x17196:	inc word [bp + 10]	; 3: 255 70 10

file_test$563:	; Goto 550
x17199:	jmp file_test$550	; 2: 235 187

file_test$564:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$565:	; Parameter 12 outFilePtr 6
x17201:	mov ax, [bp + 6]	; 3: 139 70 6
x17204:	mov [bp + 18], ax	; 3: 137 70 18

file_test$566:	; Call 12 fclose 0
x17207:	mov word [bp + 12], file_test$567	; 5: 199 70 12 69 67
x17212:	mov [bp + 14], bp	; 3: 137 110 14
x17215:	add bp, 12	; 3: 131 197 12
x17218:	jmp fclose	; 3: 233 200 46

file_test$567:	; PostCall 12

file_test$568:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 6 string_TestY2Ebin# 6
x17221:	mov word [bp + 12], @10806$string_TestY2Ebin#	; 5: 199 70 12 94 84

file_test$570:	; Parameter 6 string_r# 8
x17226:	mov word [bp + 14], @10807$string_r#	; 5: 199 70 14 104 84

file_test$571:	; Call 6 fopen 0
x17231:	mov word [bp + 6], file_test$572	; 5: 199 70 6 93 67
x17236:	mov [bp + 8], bp	; 3: 137 110 8
x17239:	add bp, 6	; 3: 131 197 6
x17242:	jmp fopen	; 3: 233 59 23

file_test$572:	; PostCall 6

file_test$573:	; GetReturnValue £temporary4977

file_test$574:	; Assign inFilePtr £temporary4977
x17245:	mov [bp + 6], bx	; 3: 137 94 6

file_test$575:	; NotEqual 587 inFilePtr 0
x17248:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17252:	jne file_test$587	; 2: 117 59

file_test$576:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$577:	; Parameter 8 stderr 6
x17254:	mov ax, [stderr]	; 3: 161 24 78
x17257:	mov [bp + 14], ax	; 3: 137 70 14

file_test$578:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17260:	mov word [bp + 16], @10815$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 106 84

file_test$579:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17265:	mov word [bp + 18], @10816$string_inFilePtr20213D20NULL#	; 5: 199 70 18 152 84

file_test$580:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17270:	mov word [bp + 20], @10817$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 170 84

file_test$581:	; Parameter 8 217 14
x17275:	mov word [bp + 22], 217	; 5: 199 70 22 217 0

file_test$582:	; Call 8 fprintf 0
x17280:	mov word [bp + 8], file_test$583	; 5: 199 70 8 147 67
x17285:	mov [bp + 10], bp	; 3: 137 110 10
x17288:	add bp, 8	; 3: 131 197 8
x17291:	mov di, bp	; 2: 137 239
x17293:	add di, 6	; 3: 131 199 6
x17296:	jmp fprintf	; 3: 233 106 27

file_test$583:	; PostCall 8

file_test$584:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$585:	; Call 8 abort 0
x17299:	mov word [bp + 8], file_test$586	; 5: 199 70 8 161 67
x17304:	mov [bp + 10], bp	; 3: 137 110 10
x17307:	add bp, 8	; 3: 131 197 8
x17310:	jmp abort	; 3: 233 151 27

file_test$586:	; PostCall 8

file_test$587:	; Assign index 0
x17313:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$588:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$589:	; address £temporary4982 value
x17318:	mov si, bp	; 2: 137 238
x17320:	add si, 10	; 3: 131 198 10

file_test$590:	; Parameter 18 £temporary4982 6
x17323:	mov [bp + 24], si	; 3: 137 118 24

file_test$591:	; Parameter 18 8 8
x17326:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$592:	; Parameter 18 1 10
x17331:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$593:	; Parameter 18 inFilePtr 12
x17336:	mov ax, [bp + 6]	; 3: 139 70 6
x17339:	mov [bp + 30], ax	; 3: 137 70 30

file_test$594:	; Call 18 fread 0
x17342:	mov word [bp + 18], file_test$595	; 5: 199 70 18 204 67
x17347:	mov [bp + 20], bp	; 3: 137 110 20
x17350:	add bp, 18	; 3: 131 197 18
x17353:	jmp fread	; 3: 233 164 47

file_test$595:	; PostCall 18

file_test$596:	; GetReturnValue £temporary4983

file_test$597:	; SignedLessThanEqual 608 £temporary4983 0
x17356:	cmp bx, 0	; 3: 131 251 0
x17359:	jle file_test$608	; 2: 126 41

file_test$598:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$599:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x17361:	mov word [bp + 24], @10834$string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 235 84

file_test$600:	; Assign £temporary4985 index
x17366:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$601:	; Increment index
x17369:	inc word [bp + 8]	; 3: 255 70 8

file_test$602:	; Parameter 18 £temporary4985 8
x17372:	mov [bp + 26], ax	; 3: 137 70 26

file_test$603:	; PushFloat value
x17375:	fld qword [bp + 10]	; 3: 221 70 10

file_test$604:	; Parameter 18 value 10
x17378:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$605:	; Call 18 printf 0
x17381:	mov word [bp + 18], file_test$606	; 5: 199 70 18 248 67
x17386:	mov [bp + 20], bp	; 3: 137 110 20
x17389:	add bp, 18	; 3: 131 197 18
x17392:	mov di, bp	; 2: 137 239
x17394:	add di, 10	; 3: 131 199 10
x17397:	jmp printf	; 3: 233 12 201

file_test$606:	; PostCall 18

file_test$607:	; Goto 588
x17400:	jmp file_test$588	; 2: 235 172

file_test$608:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$609:	; Parameter 8 string_0A# 6
x17402:	mov word [bp + 14], @10838$string_0A#	; 5: 199 70 14 1 85

file_test$610:	; Call 8 printf 0
x17407:	mov word [bp + 8], file_test$611	; 5: 199 70 8 15 68
x17412:	mov [bp + 10], bp	; 3: 137 110 10
x17415:	add bp, 8	; 3: 131 197 8
x17418:	mov di, bp	; 2: 137 239
x17420:	jmp printf	; 3: 233 245 200

file_test$611:	; PostCall 8

file_test$612:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$613:	; Parameter 8 inFilePtr 6
x17423:	mov ax, [bp + 6]	; 3: 139 70 6
x17426:	mov [bp + 14], ax	; 3: 137 70 14

file_test$614:	; Call 8 fclose 0
x17429:	mov word [bp + 8], file_test$615	; 5: 199 70 8 35 68
x17434:	mov [bp + 10], bp	; 3: 137 110 10
x17437:	add bp, 8	; 3: 131 197 8
x17440:	jmp fclose	; 3: 233 234 45

file_test$615:	; PostCall 8

file_test$616:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$617:	; Parameter 6 string_TestY2Ebin# 6
x17443:	mov word [bp + 12], @10841$string_TestY2Ebin#	; 5: 199 70 12 3 85

file_test$618:	; Parameter 6 string_r# 8
x17448:	mov word [bp + 14], @10842$string_r#	; 5: 199 70 14 13 85

file_test$619:	; Call 6 fopen 0
x17453:	mov word [bp + 6], file_test$620	; 5: 199 70 6 59 68
x17458:	mov [bp + 8], bp	; 3: 137 110 8
x17461:	add bp, 6	; 3: 131 197 6
x17464:	jmp fopen	; 3: 233 93 22

file_test$620:	; PostCall 6

file_test$621:	; GetReturnValue £temporary4989

file_test$622:	; Assign inFilePtr £temporary4989
x17467:	mov [bp + 6], bx	; 3: 137 94 6

file_test$623:	; NotEqual 635 inFilePtr 0
x17470:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17474:	jne file_test$635	; 2: 117 59

file_test$624:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$625:	; Parameter 8 stderr 6
x17476:	mov ax, [stderr]	; 3: 161 24 78
x17479:	mov [bp + 14], ax	; 3: 137 70 14

file_test$626:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17482:	mov word [bp + 16], @10850$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 15 85

file_test$627:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17487:	mov word [bp + 18], @10851$string_inFilePtr20213D20NULL#	; 5: 199 70 18 61 85

file_test$628:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17492:	mov word [bp + 20], @10852$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 79 85

file_test$629:	; Parameter 8 232 14
x17497:	mov word [bp + 22], 232	; 5: 199 70 22 232 0

file_test$630:	; Call 8 fprintf 0
x17502:	mov word [bp + 8], file_test$631	; 5: 199 70 8 113 68
x17507:	mov [bp + 10], bp	; 3: 137 110 10
x17510:	add bp, 8	; 3: 131 197 8
x17513:	mov di, bp	; 2: 137 239
x17515:	add di, 6	; 3: 131 199 6
x17518:	jmp fprintf	; 3: 233 140 26

file_test$631:	; PostCall 8

file_test$632:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$633:	; Call 8 abort 0
x17521:	mov word [bp + 8], file_test$634	; 5: 199 70 8 127 68
x17526:	mov [bp + 10], bp	; 3: 137 110 10
x17529:	add bp, 8	; 3: 131 197 8
x17532:	jmp abort	; 3: 233 185 26

file_test$634:	; PostCall 8

file_test$635:	; Assign index 0
x17535:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$636:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$637:	; Parameter 10 inFilePtr 6
x17540:	mov ax, [bp + 6]	; 3: 139 70 6
x17543:	mov [bp + 16], ax	; 3: 137 70 16

file_test$638:	; Call 10 feof 0
x17546:	mov word [bp + 10], file_test$639	; 5: 199 70 10 152 68
x17551:	mov [bp + 12], bp	; 3: 137 110 12
x17554:	add bp, 10	; 3: 131 197 10
x17557:	jmp feof	; 3: 233 177 26

file_test$639:	; PostCall 10

file_test$640:	; GetReturnValue £temporary4994

file_test$641:	; NotEqual 660 £temporary4994 0
x17560:	cmp bx, 0	; 3: 131 251 0
x17563:	jne file_test$660	; 2: 117 79

file_test$642:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$643:	; address £temporary4997 value
x17565:	mov si, bp	; 2: 137 238
x17567:	add si, 10	; 3: 131 198 10

file_test$644:	; Parameter 18 £temporary4997 6
x17570:	mov [bp + 24], si	; 3: 137 118 24

file_test$645:	; Parameter 18 8 8
x17573:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$646:	; Parameter 18 1 10
x17578:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$647:	; Parameter 18 inFilePtr 12
x17583:	mov ax, [bp + 6]	; 3: 139 70 6
x17586:	mov [bp + 30], ax	; 3: 137 70 30

file_test$648:	; Call 18 fread 0
x17589:	mov word [bp + 18], file_test$649	; 5: 199 70 18 195 68
x17594:	mov [bp + 20], bp	; 3: 137 110 20
x17597:	add bp, 18	; 3: 131 197 18
x17600:	jmp fread	; 3: 233 173 46

file_test$649:	; PostCall 18

file_test$650:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$651:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x17603:	mov word [bp + 24], @10870$string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 144 85

file_test$652:	; Assign £temporary4999 index
x17608:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$653:	; Increment index
x17611:	inc word [bp + 8]	; 3: 255 70 8

file_test$654:	; Parameter 18 £temporary4999 8
x17614:	mov [bp + 26], ax	; 3: 137 70 26

file_test$655:	; PushFloat value
x17617:	fld qword [bp + 10]	; 3: 221 70 10

file_test$656:	; Parameter 18 value 10
x17620:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$657:	; Call 18 printf 0
x17623:	mov word [bp + 18], file_test$658	; 5: 199 70 18 234 68
x17628:	mov [bp + 20], bp	; 3: 137 110 20
x17631:	add bp, 18	; 3: 131 197 18
x17634:	mov di, bp	; 2: 137 239
x17636:	add di, 10	; 3: 131 199 10
x17639:	jmp printf	; 3: 233 26 200

file_test$658:	; PostCall 18

file_test$659:	; Goto 636
x17642:	jmp file_test$636	; 2: 235 152

file_test$660:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$661:	; Parameter 8 string_0A# 6
x17644:	mov word [bp + 14], @10874$string_0A#	; 5: 199 70 14 166 85

file_test$662:	; Call 8 printf 0
x17649:	mov word [bp + 8], file_test$663	; 5: 199 70 8 1 69
x17654:	mov [bp + 10], bp	; 3: 137 110 10
x17657:	add bp, 8	; 3: 131 197 8
x17660:	mov di, bp	; 2: 137 239
x17662:	jmp printf	; 3: 233 3 200

file_test$663:	; PostCall 8

file_test$664:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$665:	; Parameter 8 inFilePtr 6
x17665:	mov ax, [bp + 6]	; 3: 139 70 6
x17668:	mov [bp + 14], ax	; 3: 137 70 14

file_test$666:	; Call 8 fclose 0
x17671:	mov word [bp + 8], file_test$667	; 5: 199 70 8 21 69
x17676:	mov [bp + 10], bp	; 3: 137 110 10
x17679:	add bp, 8	; 3: 131 197 8
x17682:	jmp fclose	; 3: 233 248 44

file_test$667:	; PostCall 8

file_test$668:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$669:	; Parameter 6 string_TestX2Ebin# 6
x17685:	mov word [bp + 12], @10877$string_TestX2Ebin#	; 5: 199 70 12 168 85

file_test$670:	; Parameter 6 string_r# 8
x17690:	mov word [bp + 14], @10878$string_r#	; 5: 199 70 14 178 85

file_test$671:	; Call 6 fopen 0
x17695:	mov word [bp + 6], file_test$672	; 5: 199 70 6 45 69
x17700:	mov [bp + 8], bp	; 3: 137 110 8
x17703:	add bp, 6	; 3: 131 197 6
x17706:	jmp fopen	; 3: 233 107 21

file_test$672:	; PostCall 6

file_test$673:	; GetReturnValue £temporary5003

file_test$674:	; Assign inFilePtr £temporary5003
x17709:	mov [bp + 6], bx	; 3: 137 94 6

file_test$675:	; NotEqual 687 inFilePtr 0
x17712:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17716:	jne file_test$687	; 2: 117 59

file_test$676:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$677:	; Parameter 10 stderr 6
x17718:	mov ax, [stderr]	; 3: 161 24 78
x17721:	mov [bp + 16], ax	; 3: 137 70 16

file_test$678:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17724:	mov word [bp + 18], @10887$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 180 85

file_test$679:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17729:	mov word [bp + 20], @10888$string_inFilePtr20213D20NULL#	; 5: 199 70 20 226 85

file_test$680:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17734:	mov word [bp + 22], @10889$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 244 85

file_test$681:	; Parameter 10 250 14
x17739:	mov word [bp + 24], 250	; 5: 199 70 24 250 0

file_test$682:	; Call 10 fprintf 0
x17744:	mov word [bp + 10], file_test$683	; 5: 199 70 10 99 69
x17749:	mov [bp + 12], bp	; 3: 137 110 12
x17752:	add bp, 10	; 3: 131 197 10
x17755:	mov di, bp	; 2: 137 239
x17757:	add di, 6	; 3: 131 199 6
x17760:	jmp fprintf	; 3: 233 154 25

file_test$683:	; PostCall 10

file_test$684:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$685:	; Call 10 abort 0
x17763:	mov word [bp + 10], file_test$686	; 5: 199 70 10 113 69
x17768:	mov [bp + 12], bp	; 3: 137 110 12
x17771:	add bp, 10	; 3: 131 197 10
x17774:	jmp abort	; 3: 233 199 25

file_test$686:	; PostCall 10

file_test$687:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$688:	; address £temporary5008 size
x17777:	mov si, bp	; 2: 137 238
x17779:	add si, 8	; 3: 131 198 8

file_test$689:	; Parameter 10 £temporary5008 6
x17782:	mov [bp + 16], si	; 3: 137 118 16

file_test$690:	; Parameter 10 2 8
x17785:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$691:	; Parameter 10 1 10
x17790:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$692:	; Parameter 10 inFilePtr 12
x17795:	mov ax, [bp + 6]	; 3: 139 70 6
x17798:	mov [bp + 22], ax	; 3: 137 70 22

file_test$693:	; Call 10 fread 0
x17801:	mov word [bp + 10], file_test$694	; 5: 199 70 10 151 69
x17806:	mov [bp + 12], bp	; 3: 137 110 12
x17809:	add bp, 10	; 3: 131 197 10
x17812:	jmp fread	; 3: 233 217 45

file_test$694:	; PostCall 10

file_test$695:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$696:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17815:	mov word [bp + 16], @10899$string_size43A2025i20total2025i0A#	; 5: 199 70 16 53 86

file_test$697:	; Parameter 10 size 8
x17820:	mov ax, [bp + 8]	; 3: 139 70 8
x17823:	mov [bp + 18], ax	; 3: 137 70 18

file_test$698:	; SignedMultiply £temporary5010 size 8
x17826:	mov ax, [bp + 8]	; 3: 139 70 8
x17829:	xor dx, dx	; 2: 49 210
x17831:	imul word [@10901$int2$8#]	; 4: 247 46 73 86

file_test$699:	; Parameter 10 £temporary5010 10
x17835:	mov [bp + 20], ax	; 3: 137 70 20

file_test$700:	; Call 10 printf 0
x17838:	mov word [bp + 10], file_test$701	; 5: 199 70 10 193 69
x17843:	mov [bp + 12], bp	; 3: 137 110 12
x17846:	add bp, 10	; 3: 131 197 10
x17849:	mov di, bp	; 2: 137 239
x17851:	add di, 4	; 3: 131 199 4
x17854:	jmp printf	; 3: 233 67 199

file_test$701:	; PostCall 10

file_test$702:	; SignedMultiply total size 8
x17857:	mov ax, [bp + 8]	; 3: 139 70 8
x17860:	xor dx, dx	; 2: 49 210
x17862:	imul word [@10905$int2$8#]	; 4: 247 46 75 86
x17866:	mov [bp + 10], ax	; 3: 137 70 10

file_test$703:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$704:	; Parameter 14 total 6
x17869:	mov ax, [bp + 10]	; 3: 139 70 10
x17872:	mov [bp + 20], ax	; 3: 137 70 20

file_test$705:	; Call 14 malloc 0
x17875:	mov word [bp + 14], file_test$706	; 5: 199 70 14 225 69
x17880:	mov [bp + 16], bp	; 3: 137 110 16
x17883:	add bp, 14	; 3: 131 197 14
x17886:	jmp malloc	; 3: 233 210 45

file_test$706:	; PostCall 14

file_test$707:	; GetReturnValue £temporary5013

file_test$708:	; Assign p £temporary5013
x17889:	mov [bp + 14], bx	; 3: 137 94 14

file_test$709:	; UnsignedMultiply £temporary5014 size 8
x17892:	mov ax, [bp + 8]	; 3: 139 70 8
x17895:	xor dx, dx	; 2: 49 210
x17897:	mul word [@10912$int2$8#]	; 4: 247 38 77 86

file_test$710:	; BinaryAdd endPtr p £temporary5014
x17901:	mov bx, [bp + 14]	; 3: 139 94 14
x17904:	add bx, ax	; 2: 1 195
x17906:	mov [bp + 16], bx	; 3: 137 94 16

file_test$711:	; NotEqual 723 p 0
x17909:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17913:	jne file_test$723	; 2: 117 59

file_test$712:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$713:	; Parameter 18 stderr 6
x17915:	mov ax, [stderr]	; 3: 161 24 78
x17918:	mov [bp + 24], ax	; 3: 137 70 24

file_test$714:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17921:	mov word [bp + 26], @10920$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 79 86

file_test$715:	; Parameter 18 string_p20213D20NULL# 10
x17926:	mov word [bp + 28], @10921$string_p20213D20NULL#	; 5: 199 70 28 125 86

file_test$716:	; Parameter 18 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17931:	mov word [bp + 30], @10922$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 135 86

file_test$717:	; Parameter 18 257 14
x17936:	mov word [bp + 32], 257	; 5: 199 70 32 1 1

file_test$718:	; Call 18 fprintf 0
x17941:	mov word [bp + 18], file_test$719	; 5: 199 70 18 40 70
x17946:	mov [bp + 20], bp	; 3: 137 110 20
x17949:	add bp, 18	; 3: 131 197 18
x17952:	mov di, bp	; 2: 137 239
x17954:	add di, 6	; 3: 131 199 6
x17957:	jmp fprintf	; 3: 233 213 24

file_test$719:	; PostCall 18

file_test$720:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$721:	; Call 18 abort 0
x17960:	mov word [bp + 18], file_test$722	; 5: 199 70 18 54 70
x17965:	mov [bp + 20], bp	; 3: 137 110 20
x17968:	add bp, 18	; 3: 131 197 18
x17971:	jmp abort	; 3: 233 2 25

file_test$722:	; PostCall 18

file_test$723:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$724:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17974:	mov word [bp + 24], @10926$string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 200 86

file_test$725:	; Parameter 18 p 8
x17979:	mov ax, [bp + 14]	; 3: 139 70 14
x17982:	mov [bp + 26], ax	; 3: 137 70 26

file_test$726:	; Parameter 18 total 10
x17985:	mov ax, [bp + 10]	; 3: 139 70 10
x17988:	mov [bp + 28], ax	; 3: 137 70 28

file_test$727:	; Parameter 18 endPtr 12
x17991:	mov ax, [bp + 16]	; 3: 139 70 16
x17994:	mov [bp + 30], ax	; 3: 137 70 30

file_test$728:	; Call 18 printf 0
x17997:	mov word [bp + 18], file_test$729	; 5: 199 70 18 96 70
x18002:	mov [bp + 20], bp	; 3: 137 110 20
x18005:	add bp, 18	; 3: 131 197 18
x18008:	mov di, bp	; 2: 137 239
x18010:	add di, 6	; 3: 131 199 6
x18013:	jmp printf	; 3: 233 164 198

file_test$729:	; PostCall 18

file_test$730:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$731:	; Parameter 18 p 6
x18016:	mov ax, [bp + 14]	; 3: 139 70 14
x18019:	mov [bp + 24], ax	; 3: 137 70 24

file_test$732:	; Parameter 18 total 8
x18022:	mov ax, [bp + 10]	; 3: 139 70 10
x18025:	mov [bp + 26], ax	; 3: 137 70 26

file_test$733:	; Parameter 18 1 10
x18028:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$734:	; Parameter 18 inFilePtr 12
x18033:	mov ax, [bp + 6]	; 3: 139 70 6
x18036:	mov [bp + 30], ax	; 3: 137 70 30

file_test$735:	; Call 18 fread 0
x18039:	mov word [bp + 18], file_test$736	; 5: 199 70 18 133 70
x18044:	mov [bp + 20], bp	; 3: 137 110 20
x18047:	add bp, 18	; 3: 131 197 18
x18050:	jmp fread	; 3: 233 235 44

file_test$736:	; PostCall 18

file_test$737:	; Assign index 0
x18053:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$738:	; SignedGreaterThanEqual 751 index size
x18058:	mov ax, [bp + 8]	; 3: 139 70 8
x18061:	cmp [bp + 12], ax	; 3: 57 70 12
x18064:	jge file_test$751	; 2: 125 54

file_test$739:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$740:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x18066:	mov word [bp + 24], @10936$string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 219 86

file_test$741:	; Parameter 18 index 8
x18071:	mov ax, [bp + 12]	; 3: 139 70 12
x18074:	mov [bp + 26], ax	; 3: 137 70 26

file_test$742:	; UnsignedMultiply £temporary5025 index 8
x18077:	mov ax, [bp + 12]	; 3: 139 70 12
x18080:	xor dx, dx	; 2: 49 210
x18082:	mul word [@10938$int2$8#]	; 4: 247 38 241 86

file_test$743:	; BinaryAdd £temporary5026 p £temporary5025
x18086:	mov si, [bp + 14]	; 3: 139 118 14
x18089:	add si, ax	; 2: 1 198

file_test$744:	; Deref £temporary5024 -> £temporary5026 £temporary5026 0

file_test$745:	; PushFloat £temporary5024 -> £temporary5026
x18091:	fld qword [si]	; 2: 221 4

file_test$746:	; Parameter 18 £temporary5024 -> £temporary5026 10
x18093:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$747:	; Call 18 printf 0
x18096:	mov word [bp + 18], file_test$748	; 5: 199 70 18 195 70
x18101:	mov [bp + 20], bp	; 3: 137 110 20
x18104:	add bp, 18	; 3: 131 197 18
x18107:	mov di, bp	; 2: 137 239
x18109:	add di, 10	; 3: 131 199 10
x18112:	jmp printf	; 3: 233 65 198

file_test$748:	; PostCall 18

file_test$749:	; Increment index
x18115:	inc word [bp + 12]	; 3: 255 70 12

file_test$750:	; Goto 738
x18118:	jmp file_test$738	; 2: 235 194

file_test$751:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$752:	; Parameter 18 string_0A# 6
x18120:	mov word [bp + 24], @10942$string_0A#	; 5: 199 70 24 243 86

file_test$753:	; Call 18 printf 0
x18125:	mov word [bp + 18], file_test$754	; 5: 199 70 18 221 70
x18130:	mov [bp + 20], bp	; 3: 137 110 20
x18133:	add bp, 18	; 3: 131 197 18
x18136:	mov di, bp	; 2: 137 239
x18138:	jmp printf	; 3: 233 39 198

file_test$754:	; PostCall 18

file_test$755:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$756:	; Parameter 18 p 6
x18141:	mov ax, [bp + 14]	; 3: 139 70 14
x18144:	mov [bp + 24], ax	; 3: 137 70 24

file_test$757:	; Call 18 free 0
x18147:	mov word [bp + 18], file_test$758	; 5: 199 70 18 241 70
x18152:	mov [bp + 20], bp	; 3: 137 110 20
x18155:	add bp, 18	; 3: 131 197 18
x18158:	jmp free	; 3: 233 207 46

file_test$758:	; PostCall 18

file_test$759:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$760:	; Parameter 10 inFilePtr 6
x18161:	mov ax, [bp + 6]	; 3: 139 70 6
x18164:	mov [bp + 16], ax	; 3: 137 70 16

file_test$761:	; Call 10 fclose 0
x18167:	mov word [bp + 10], file_test$762	; 5: 199 70 10 5 71
x18172:	mov [bp + 12], bp	; 3: 137 110 12
x18175:	add bp, 10	; 3: 131 197 10
x18178:	jmp fclose	; 3: 233 8 43

file_test$762:	; PostCall 10

file_test$763:	; Assign personVector[0]$name[0] 65
x18181:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$764:	; Assign personVector[0]$name[1] 100
x18185:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$765:	; Assign personVector[0]$name[2] 97
x18189:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$766:	; Assign personVector[0]$name[3] 109
x18193:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$767:	; Assign personVector[0]$name[4] 32
x18197:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$768:	; Assign personVector[0]$name[5] 66
x18201:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$769:	; Assign personVector[0]$name[6] 101
x18205:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$770:	; Assign personVector[0]$name[7] 114
x18209:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$771:	; Assign personVector[0]$name[8] 116
x18213:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$772:	; Assign personVector[0]$name[9] 105
x18217:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$773:	; Assign personVector[0]$name[10] 108
x18221:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$774:	; Assign personVector[0]$name[11] 115
x18225:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$775:	; Assign personVector[0]$name[12] 115
x18229:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$776:	; Assign personVector[0]$name[13] 111
x18233:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$777:	; Assign personVector[0]$name[14] 110
x18237:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$778:	; Assign personVector[0]$name[15] 0
x18241:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$779:	; Assign personVector[0]$phone 12345
x18245:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$780:	; Assign personVector[1]$name[0] 66
x18250:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$781:	; Assign personVector[1]$name[1] 101
x18254:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$782:	; Assign personVector[1]$name[2] 114
x18258:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$783:	; Assign personVector[1]$name[3] 116
x18262:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$784:	; Assign personVector[1]$name[4] 105
x18266:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$785:	; Assign personVector[1]$name[5] 108
x18270:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$786:	; Assign personVector[1]$name[6] 32
x18274:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$787:	; Assign personVector[1]$name[7] 67
x18278:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$788:	; Assign personVector[1]$name[8] 101
x18282:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$789:	; Assign personVector[1]$name[9] 97
x18286:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$790:	; Assign personVector[1]$name[10] 115
x18290:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$791:	; Assign personVector[1]$name[11] 97
x18294:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$792:	; Assign personVector[1]$name[12] 114
x18298:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$793:	; Assign personVector[1]$name[13] 115
x18302:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$794:	; Assign personVector[1]$name[14] 115
x18306:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$795:	; Assign personVector[1]$name[15] 111
x18310:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$796:	; Assign personVector[1]$name[16] 110
x18314:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$797:	; Assign personVector[1]$name[17] 0
x18318:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$798:	; Assign personVector[1]$phone 23456
x18322:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$799:	; Assign personVector[2]$name[0] 67
x18327:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$800:	; Assign personVector[2]$name[1] 101
x18331:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$801:	; Assign personVector[2]$name[2] 97
x18335:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$802:	; Assign personVector[2]$name[3] 115
x18339:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$803:	; Assign personVector[2]$name[4] 97
x18343:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$804:	; Assign personVector[2]$name[5] 114
x18347:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$805:	; Assign personVector[2]$name[6] 32
x18351:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$806:	; Assign personVector[2]$name[7] 68
x18355:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$807:	; Assign personVector[2]$name[8] 97
x18359:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$808:	; Assign personVector[2]$name[9] 118
x18363:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$809:	; Assign personVector[2]$name[10] 105
x18367:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$810:	; Assign personVector[2]$name[11] 100
x18371:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$811:	; Assign personVector[2]$name[12] 115
x18375:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$812:	; Assign personVector[2]$name[13] 115
x18379:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$813:	; Assign personVector[2]$name[14] 111
x18383:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$814:	; Assign personVector[2]$name[15] 110
x18387:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$815:	; Assign personVector[2]$name[16] 0
x18391:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$816:	; Assign personVector[2]$phone 24567
x18395:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$817:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$818:	; Parameter 206 string_Block2Ebin# 6
x18401:	mov word [bp + 212], @11123$string_Block2Ebin#	; 6: 199 134 212 0 245 86

file_test$819:	; Parameter 206 string_w# 8
x18407:	mov word [bp + 214], @11124$string_w#	; 6: 199 134 214 0 255 86

file_test$820:	; Call 206 fopen 0
x18413:	mov word [bp + 206], file_test$821	; 6: 199 134 206 0 254 71
x18419:	mov [bp + 208], bp	; 4: 137 174 208 0
x18423:	add bp, 206	; 4: 129 197 206 0
x18427:	jmp fopen	; 3: 233 154 18

file_test$821:	; PostCall 206

file_test$822:	; GetReturnValue £temporary5091

file_test$823:	; Assign outFilePtr £temporary5091
x18430:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$824:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$825:	; Parameter 208 string_Block2Ebin# 6
x18434:	mov word [bp + 214], @11127$string_Block2Ebin#	; 6: 199 134 214 0 1 87

file_test$826:	; Parameter 208 string_r# 8
x18440:	mov word [bp + 216], @11128$string_r#	; 6: 199 134 216 0 11 87

file_test$827:	; Call 208 fopen 0
x18446:	mov word [bp + 208], file_test$828	; 6: 199 134 208 0 31 72
x18452:	mov [bp + 210], bp	; 4: 137 174 210 0
x18456:	add bp, 208	; 4: 129 197 208 0
x18460:	jmp fopen	; 3: 233 121 18

file_test$828:	; PostCall 208

file_test$829:	; GetReturnValue £temporary5092

file_test$830:	; Assign inFilePtr £temporary5092
x18463:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$831:	; NotEqual 843 outFilePtr 0
x18467:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x18472:	jne file_test$843	; 2: 117 70

file_test$832:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 210 stderr 6
x18474:	mov ax, [stderr]	; 3: 161 24 78
x18477:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$834:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18481:	mov word [bp + 218], @11136$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 13 87

file_test$835:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x18487:	mov word [bp + 220], @11137$string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 59 87

file_test$836:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18493:	mov word [bp + 222], @11138$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 78 87

file_test$837:	; Parameter 210 284 14
x18499:	mov word [bp + 224], 284	; 6: 199 134 224 0 28 1

file_test$838:	; Call 210 fprintf 0
x18505:	mov word [bp + 210], file_test$839	; 6: 199 134 210 0 95 72
x18511:	mov [bp + 212], bp	; 4: 137 174 212 0
x18515:	add bp, 210	; 4: 129 197 210 0
x18519:	mov di, bp	; 2: 137 239
x18521:	add di, 6	; 3: 131 199 6
x18524:	jmp fprintf	; 3: 233 158 22

file_test$839:	; PostCall 210

file_test$840:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Call 210 abort 0
x18527:	mov word [bp + 210], file_test$842	; 6: 199 134 210 0 112 72
x18533:	mov [bp + 212], bp	; 4: 137 174 212 0
x18537:	add bp, 210	; 4: 129 197 210 0
x18541:	jmp abort	; 3: 233 200 22

file_test$842:	; PostCall 210

file_test$843:	; NotEqual 855 inFilePtr 0
x18544:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x18549:	jne file_test$855	; 2: 117 70

file_test$844:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$845:	; Parameter 210 stderr 6
x18551:	mov ax, [stderr]	; 3: 161 24 78
x18554:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$846:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18558:	mov word [bp + 218], @11147$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 143 87

file_test$847:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x18564:	mov word [bp + 220], @11148$string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 189 87

file_test$848:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18570:	mov word [bp + 222], @11149$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 207 87

file_test$849:	; Parameter 210 285 14
x18576:	mov word [bp + 224], 285	; 6: 199 134 224 0 29 1

file_test$850:	; Call 210 fprintf 0
x18582:	mov word [bp + 210], file_test$851	; 6: 199 134 210 0 172 72
x18588:	mov [bp + 212], bp	; 4: 137 174 212 0
x18592:	add bp, 210	; 4: 129 197 210 0
x18596:	mov di, bp	; 2: 137 239
x18598:	add di, 6	; 3: 131 199 6
x18601:	jmp fprintf	; 3: 233 81 22

file_test$851:	; PostCall 210

file_test$852:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Call 210 abort 0
x18604:	mov word [bp + 210], file_test$854	; 6: 199 134 210 0 189 72
x18610:	mov [bp + 212], bp	; 4: 137 174 212 0
x18614:	add bp, 210	; 4: 129 197 210 0
x18618:	jmp abort	; 3: 233 123 22

file_test$854:	; PostCall 210

file_test$855:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$856:	; Parameter 210 personVector 6
x18621:	mov [bp + 216], bp	; 4: 137 174 216 0
x18625:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$857:	; Parameter 210 150 8
x18630:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$858:	; Parameter 210 1 10
x18636:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$859:	; Parameter 210 outFilePtr 12
x18642:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18646:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$860:	; Call 210 fwrite 0
x18650:	mov word [bp + 210], file_test$861	; 6: 199 134 210 0 235 72
x18656:	mov [bp + 212], bp	; 4: 137 174 212 0
x18660:	add bp, 210	; 4: 129 197 210 0
x18664:	jmp fwrite	; 3: 233 66 42

file_test$861:	; PostCall 210

file_test$862:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$863:	; Parameter 210 outFilePtr 6
x18667:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18671:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$864:	; Call 210 fclose 0
x18675:	mov word [bp + 210], file_test$865	; 6: 199 134 210 0 4 73
x18681:	mov [bp + 212], bp	; 4: 137 174 212 0
x18685:	add bp, 210	; 4: 129 197 210 0
x18689:	jmp fclose	; 3: 233 9 41

file_test$865:	; PostCall 210

file_test$866:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$867:	; Parameter 210 inFilePtr 6
x18692:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18696:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$868:	; Call 210 feof 0
x18700:	mov word [bp + 210], file_test$869	; 6: 199 134 210 0 29 73
x18706:	mov [bp + 212], bp	; 4: 137 174 212 0
x18710:	add bp, 210	; 4: 129 197 210 0
x18714:	jmp feof	; 3: 233 44 22

file_test$869:	; PostCall 210

file_test$870:	; GetReturnValue £temporary5103

file_test$871:	; NotEqual 891 £temporary5103 0
x18717:	cmp bx, 0	; 3: 131 251 0
x18720:	jne file_test$891	; 2: 117 124

file_test$872:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$873:	; address £temporary5106 person
x18722:	mov si, bp	; 2: 137 238
x18724:	add si, 156	; 4: 129 198 156 0

file_test$874:	; Parameter 210 £temporary5106 6
x18728:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$875:	; Parameter 210 50 8
x18732:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$876:	; Parameter 210 1 10
x18738:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$877:	; Parameter 210 inFilePtr 12
x18744:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18748:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$878:	; Call 210 fread 0
x18752:	mov word [bp + 210], file_test$879	; 6: 199 134 210 0 81 73
x18758:	mov [bp + 212], bp	; 4: 137 174 212 0
x18762:	add bp, 210	; 4: 129 197 210 0
x18766:	jmp fread	; 3: 233 31 42

file_test$879:	; PostCall 210

file_test$880:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$881:	; Parameter 210 string_Name20203A2025s0A# 6
x18769:	mov word [bp + 216], @11169$string_Name20203A2025s0A#	; 6: 199 134 216 0 16 88

file_test$882:	; Parameter 210 person$name 8
x18775:	mov [bp + 218], bp	; 4: 137 174 218 0
x18779:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$883:	; Call 210 printf 0
x18785:	mov word [bp + 210], file_test$884	; 6: 199 134 210 0 119 73
x18791:	mov [bp + 212], bp	; 4: 137 174 212 0
x18795:	add bp, 210	; 4: 129 197 210 0
x18799:	mov di, bp	; 2: 137 239
x18801:	add di, 2	; 3: 131 199 2
x18804:	jmp printf	; 3: 233 141 195

file_test$884:	; PostCall 210

file_test$885:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$886:	; Parameter 210 string_Phone203A2025d0A# 6
x18807:	mov word [bp + 216], @11172$string_Phone203A2025d0A#	; 6: 199 134 216 0 28 88

file_test$887:	; Parameter 210 person$phone 8
x18813:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18817:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$888:	; Call 210 printf 0
x18821:	mov word [bp + 210], file_test$889	; 6: 199 134 210 0 155 73
x18827:	mov [bp + 212], bp	; 4: 137 174 212 0
x18831:	add bp, 210	; 4: 129 197 210 0
x18835:	mov di, bp	; 2: 137 239
x18837:	add di, 2	; 3: 131 199 2
x18840:	jmp printf	; 3: 233 105 195

file_test$889:	; PostCall 210

file_test$890:	; Goto 866
x18843:	jmp file_test$866	; 3: 233 102 255

file_test$891:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 210 inFilePtr 6
x18846:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18850:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$893:	; Call 210 fclose 0
x18854:	mov word [bp + 210], file_test$894	; 6: 199 134 210 0 183 73
x18860:	mov [bp + 212], bp	; 4: 137 174 212 0
x18864:	add bp, 210	; 4: 129 197 210 0
x18868:	jmp fclose	; 3: 233 86 40

file_test$894:	; PostCall 210

file_test$895:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$896:	; Parameter 6 string_outx2Etxt# 6
x18871:	mov word [bp + 12], @11176$string_outx2Etxt#	; 5: 199 70 12 40 88

file_test$897:	; Parameter 6 string_r# 8
x18876:	mov word [bp + 14], @11177$string_r#	; 5: 199 70 14 49 88

file_test$898:	; Call 6 fopen 0
x18881:	mov word [bp + 6], file_test$899	; 5: 199 70 6 207 73
x18886:	mov [bp + 8], bp	; 3: 137 110 8
x18889:	add bp, 6	; 3: 131 197 6
x18892:	jmp fopen	; 3: 233 201 16

file_test$899:	; PostCall 6

file_test$900:	; GetReturnValue £temporary5113

file_test$901:	; Assign inFilePtr £temporary5113
x18895:	mov [bp + 6], bx	; 3: 137 94 6

file_test$902:	; NotEqual 914 inFilePtr 0
x18898:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18902:	jne file_test$914	; 2: 117 59

file_test$903:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$904:	; Parameter 12 stderr 6
x18904:	mov ax, [stderr]	; 3: 161 24 78
x18907:	mov [bp + 18], ax	; 3: 137 70 18

file_test$905:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18910:	mov word [bp + 20], @11187$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 51 88

file_test$906:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x18915:	mov word [bp + 22], @11188$string_inFilePtr20213D20NULL#	; 5: 199 70 22 97 88

file_test$907:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18920:	mov word [bp + 24], @11189$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 115 88

file_test$908:	; Parameter 12 302 14
x18925:	mov word [bp + 26], 302	; 5: 199 70 26 46 1

file_test$909:	; Call 12 fprintf 0
x18930:	mov word [bp + 12], file_test$910	; 5: 199 70 12 5 74
x18935:	mov [bp + 14], bp	; 3: 137 110 14
x18938:	add bp, 12	; 3: 131 197 12
x18941:	mov di, bp	; 2: 137 239
x18943:	add di, 6	; 3: 131 199 6
x18946:	jmp fprintf	; 3: 233 248 20

file_test$910:	; PostCall 12

file_test$911:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$912:	; Call 12 abort 0
x18949:	mov word [bp + 12], file_test$913	; 5: 199 70 12 19 74
x18954:	mov [bp + 14], bp	; 3: 137 110 14
x18957:	add bp, 12	; 3: 131 197 12
x18960:	jmp abort	; 3: 233 37 21

file_test$913:	; PostCall 12

file_test$914:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$915:	; Parameter 12 inFilePtr 6
x18963:	mov ax, [bp + 6]	; 3: 139 70 6
x18966:	mov [bp + 18], ax	; 3: 137 70 18

file_test$916:	; Parameter 12 0 8
x18969:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$917:	; Parameter 12 2 10
x18974:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

file_test$918:	; Call 12 fseek 0
x18979:	mov word [bp + 12], file_test$919	; 5: 199 70 12 49 74
x18984:	mov [bp + 14], bp	; 3: 137 110 14
x18987:	add bp, 12	; 3: 131 197 12
x18990:	jmp fseek	; 3: 233 39 20

file_test$919:	; PostCall 12

file_test$920:	; GetReturnValue £temporary5118

file_test$921:	; Assign size £temporary5118
x18993:	mov [bp + 12], bx	; 3: 137 94 12

file_test$922:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$923:	; Parameter 14 string_ftell2025i0A# 6
x18996:	mov word [bp + 20], @11198$string_ftell2025i0A#	; 5: 199 70 20 180 88

file_test$924:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$925:	; Parameter 14 inFilePtr 14
x19001:	mov ax, [bp + 6]	; 3: 139 70 6
x19004:	mov [bp + 28], ax	; 3: 137 70 28

file_test$926:	; Call 14 ftell 8
x19007:	mov word [bp + 22], file_test$927	; 5: 199 70 22 77 74
x19012:	mov [bp + 24], bp	; 3: 137 110 24
x19015:	add bp, 22	; 3: 131 197 22
x19018:	jmp ftell	; 3: 233 20 44

file_test$927:	; PostCall 14

file_test$928:	; GetReturnValue £temporary5119

file_test$929:	; Parameter 14 £temporary5119 8
x19021:	mov [bp + 22], bx	; 3: 137 94 22

file_test$930:	; Call 14 printf 0
x19024:	mov word [bp + 14], file_test$931	; 5: 199 70 14 99 74
x19029:	mov [bp + 16], bp	; 3: 137 110 16
x19032:	add bp, 14	; 3: 131 197 14
x19035:	mov di, bp	; 2: 137 239
x19037:	add di, 2	; 3: 131 199 2
x19040:	jmp printf	; 3: 233 161 194

file_test$931:	; PostCall 14

file_test$932:	; Assign index 0
x19043:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$933:	; SignedGreaterThanEqual 965 index size
x19048:	mov ax, [bp + 12]	; 3: 139 70 12
x19051:	cmp [bp + 10], ax	; 3: 57 70 10
x19054:	jge file_test$965	; 4: 15 141 154 0

file_test$934:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$935:	; Parameter 14 inFilePtr 6
x19058:	mov ax, [bp + 6]	; 3: 139 70 6
x19061:	mov [bp + 20], ax	; 3: 137 70 20

file_test$936:	; Call 14 fgetc 0
x19064:	mov word [bp + 14], file_test$937	; 5: 199 70 14 134 74
x19069:	mov [bp + 16], bp	; 3: 137 110 16
x19072:	add bp, 14	; 3: 131 197 14
x19075:	jmp fgetc	; 3: 233 4 44

file_test$937:	; PostCall 14

file_test$938:	; GetReturnValue £temporary5123

file_test$939:	; IntegralToIntegral £temporary5124 £temporary5123
x19078:	cmp bx, 0	; 3: 131 251 0
x19081:	jge file_test$940	; 2: 125 4
x19083:	neg bx	; 2: 247 219
x19085:	neg bl	; 2: 246 219

file_test$940:	; Assign c £temporary5124
x19087:	mov [bp + 14], bl	; 3: 136 94 14

file_test$941:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$942:	; Parameter 15 string_3C25c3E2025i2025i0A# 6
x19090:	mov word [bp + 21], @11209$string_3C25c3E2025i2025i0A#	; 5: 199 70 21 190 88

file_test$943:	; IntegralToIntegral £temporary5125 c
x19095:	mov al, [bp + 14]	; 3: 138 70 14
x19098:	and ax, 255	; 3: 37 255 0
x19101:	cmp al, 0	; 2: 60 0
x19103:	jge file_test$944	; 2: 125 4
x19105:	neg al	; 2: 246 216
x19107:	neg ax	; 2: 247 216

file_test$944:	; Parameter 15 £temporary5125 8
x19109:	mov [bp + 23], ax	; 3: 137 70 23

file_test$945:	; IntegralToIntegral £temporary5126 c
x19112:	mov al, [bp + 14]	; 3: 138 70 14
x19115:	and ax, 255	; 3: 37 255 0
x19118:	cmp al, 0	; 2: 60 0
x19120:	jge file_test$946	; 2: 125 4
x19122:	neg al	; 2: 246 216
x19124:	neg ax	; 2: 247 216

file_test$946:	; Parameter 15 £temporary5126 10
x19126:	mov [bp + 25], ax	; 3: 137 70 25

file_test$947:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$948:	; Parameter 15 inFilePtr 18
x19129:	mov ax, [bp + 6]	; 3: 139 70 6
x19132:	mov [bp + 33], ax	; 3: 137 70 33

file_test$949:	; Call 15 ftell 12
x19135:	mov word [bp + 27], file_test$950	; 5: 199 70 27 205 74
x19140:	mov [bp + 29], bp	; 3: 137 110 29
x19143:	add bp, 27	; 3: 131 197 27
x19146:	jmp ftell	; 3: 233 148 43

file_test$950:	; PostCall 15

file_test$951:	; GetReturnValue £temporary5127

file_test$952:	; Parameter 15 £temporary5127 12
x19149:	mov [bp + 27], bx	; 3: 137 94 27

file_test$953:	; Call 15 printf 0
x19152:	mov word [bp + 15], file_test$954	; 5: 199 70 15 227 74
x19157:	mov [bp + 17], bp	; 3: 137 110 17
x19160:	add bp, 15	; 3: 131 197 15
x19163:	mov di, bp	; 2: 137 239
x19165:	add di, 6	; 3: 131 199 6
x19168:	jmp printf	; 3: 233 33 194

file_test$954:	; PostCall 15

file_test$955:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$956:	; Parameter 15 inFilePtr 6
x19171:	mov ax, [bp + 6]	; 3: 139 70 6
x19174:	mov [bp + 21], ax	; 3: 137 70 21

file_test$957:	; BinarySubtract £temporary5129 size index
x19177:	mov ax, [bp + 12]	; 3: 139 70 12
x19180:	sub ax, [bp + 10]	; 3: 43 70 10

file_test$958:	; BinarySubtract £temporary5130 £temporary5129 1
x19183:	dec ax	; 1: 72

file_test$959:	; Parameter 15 £temporary5130 8
x19184:	mov [bp + 23], ax	; 3: 137 70 23

file_test$960:	; Parameter 15 0 10
x19187:	mov word [bp + 25], 0	; 5: 199 70 25 0 0

file_test$961:	; Call 15 fseek 0
x19192:	mov word [bp + 15], file_test$962	; 5: 199 70 15 6 75
x19197:	mov [bp + 17], bp	; 3: 137 110 17
x19200:	add bp, 15	; 3: 131 197 15
x19203:	jmp fseek	; 3: 233 82 19

file_test$962:	; PostCall 15

file_test$963:	; Increment index
x19206:	inc word [bp + 10]	; 3: 255 70 10

file_test$964:	; Goto 933
x19209:	jmp file_test$933	; 3: 233 92 255

file_test$965:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$966:	; Parameter 12 string_0A# 6
x19212:	mov word [bp + 18], @11220$string_0A#	; 5: 199 70 18 202 88

file_test$967:	; Call 12 printf 0
x19217:	mov word [bp + 12], file_test$968	; 5: 199 70 12 33 75
x19222:	mov [bp + 14], bp	; 3: 137 110 14
x19225:	add bp, 12	; 3: 131 197 12
x19228:	mov di, bp	; 2: 137 239
x19230:	jmp printf	; 3: 233 227 193

file_test$968:	; PostCall 12

file_test$969:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$970:	; Parameter 12 inFilePtr 6
x19233:	mov ax, [bp + 6]	; 3: 139 70 6
x19236:	mov [bp + 18], ax	; 3: 137 70 18

file_test$971:	; Call 12 fclose 0
x19239:	mov word [bp + 12], file_test$972	; 5: 199 70 12 53 75
x19244:	mov [bp + 14], bp	; 3: 137 110 14
x19247:	add bp, 12	; 3: 131 197 12
x19250:	jmp fclose	; 3: 233 216 38

file_test$972:	; PostCall 12

file_test$973:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$974:	; Parameter 6 string_fileexists2022X223A2025s0A# 6
x19253:	mov word [bp + 12], @11223$string_fileexists2022X223A2025s0A#	; 5: 199 70 12 204 88

file_test$975:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$976:	; Parameter 6 string_X# 14
x19258:	mov word [bp + 20], @11224$string_X#	; 5: 199 70 20 224 88

file_test$977:	; Call 6 fileexists 8
x19263:	mov word [bp + 14], file_test$978	; 5: 199 70 14 77 75
x19268:	mov [bp + 16], bp	; 3: 137 110 16
x19271:	add bp, 14	; 3: 131 197 14
x19274:	jmp fileexists	; 3: 233 86 19

file_test$978:	; PostCall 6

file_test$979:	; GetReturnValue £temporary5134

file_test$980:	; Equal 983 £temporary5134 0
x19277:	cmp bx, 0	; 3: 131 251 0
x19280:	je file_test$983	; 2: 116 5

file_test$981:	; Assign £temporary5139 string_Yes#
x19282:	mov ax, @11226$string_Yes#	; 3: 184 226 88

file_test$982:	; Goto 984
x19285:	jmp file_test$984	; 2: 235 3

file_test$983:	; Assign £temporary5139 string_No#
x19287:	mov ax, @11227$string_No#	; 3: 184 230 88

file_test$984:	; Parameter 6 £temporary5139 8
x19290:	mov [bp + 14], ax	; 3: 137 70 14

file_test$985:	; Call 6 printf 0
x19293:	mov word [bp + 6], file_test$986	; 5: 199 70 6 112 75
x19298:	mov [bp + 8], bp	; 3: 137 110 8
x19301:	add bp, 6	; 3: 131 197 6
x19304:	mov di, bp	; 2: 137 239
x19306:	add di, 2	; 3: 131 199 2
x19309:	jmp printf	; 3: 233 148 193

file_test$986:	; PostCall 6

file_test$987:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$988:	; Parameter 6 string_fileexists2022Y223A2025s0A# 6
x19312:	mov word [bp + 12], @11237$string_fileexists2022Y223A2025s0A#	; 5: 199 70 12 233 88

file_test$989:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$990:	; Parameter 6 string_Y# 14
x19317:	mov word [bp + 20], @11238$string_Y#	; 5: 199 70 20 253 88

file_test$991:	; Call 6 fileexists 8
x19322:	mov word [bp + 14], file_test$992	; 5: 199 70 14 136 75
x19327:	mov [bp + 16], bp	; 3: 137 110 16
x19330:	add bp, 14	; 3: 131 197 14
x19333:	jmp fileexists	; 3: 233 27 19

file_test$992:	; PostCall 6

file_test$993:	; GetReturnValue £temporary5141

file_test$994:	; Equal 997 £temporary5141 0
x19336:	cmp bx, 0	; 3: 131 251 0
x19339:	je file_test$997	; 2: 116 5

file_test$995:	; Assign £temporary5146 string_Yes#
x19341:	mov ax, @11240$string_Yes#	; 3: 184 255 88

file_test$996:	; Goto 998
x19344:	jmp file_test$998	; 2: 235 3

file_test$997:	; Assign £temporary5146 string_No#
x19346:	mov ax, @11241$string_No#	; 3: 184 3 89

file_test$998:	; Parameter 6 £temporary5146 8
x19349:	mov [bp + 14], ax	; 3: 137 70 14

file_test$999:	; Call 6 printf 0
x19352:	mov word [bp + 6], file_test$1000	; 5: 199 70 6 171 75
x19357:	mov [bp + 8], bp	; 3: 137 110 8
x19360:	add bp, 6	; 3: 131 197 6
x19363:	mov di, bp	; 2: 137 239
x19365:	add di, 2	; 3: 131 199 2
x19368:	jmp printf	; 3: 233 89 193

file_test$1000:	; PostCall 6

file_test$1001:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1002:	; Parameter 6 string_fileexists2022Main2Easm223A2025s0A# 6
x19371:	mov word [bp + 12], @11251$string_fileexists2022Main2Easm223A2025s0A#	; 5: 199 70 12 6 89

file_test$1003:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1004:	; Parameter 6 string_Main2Easm# 14
x19376:	mov word [bp + 20], @11252$string_Main2Easm#	; 5: 199 70 20 33 89

file_test$1005:	; Call 6 fileexists 8
x19381:	mov word [bp + 14], file_test$1006	; 5: 199 70 14 195 75
x19386:	mov [bp + 16], bp	; 3: 137 110 16
x19389:	add bp, 14	; 3: 131 197 14
x19392:	jmp fileexists	; 3: 233 224 18

file_test$1006:	; PostCall 6

file_test$1007:	; GetReturnValue £temporary5148

file_test$1008:	; Equal 1011 £temporary5148 0
x19395:	cmp bx, 0	; 3: 131 251 0
x19398:	je file_test$1011	; 2: 116 5

file_test$1009:	; Assign £temporary5153 string_Yes#
x19400:	mov ax, @11254$string_Yes#	; 3: 184 42 89

file_test$1010:	; Goto 1012
x19403:	jmp file_test$1012	; 2: 235 3

file_test$1011:	; Assign £temporary5153 string_No#
x19405:	mov ax, @11255$string_No#	; 3: 184 46 89

file_test$1012:	; Parameter 6 £temporary5153 8
x19408:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1013:	; Call 6 printf 0
x19411:	mov word [bp + 6], file_test$1014	; 5: 199 70 6 230 75
x19416:	mov [bp + 8], bp	; 3: 137 110 8
x19419:	add bp, 6	; 3: 131 197 6
x19422:	mov di, bp	; 2: 137 239
x19424:	add di, 2	; 3: 131 199 2
x19427:	jmp printf	; 3: 233 30 193

file_test$1014:	; PostCall 6

file_test$1015:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1016:	; Parameter 6 string_fileexists2022MainX2Easm223A2025s0A# 6
x19430:	mov word [bp + 12], @11265$string_fileexists2022MainX2Easm223A2025s0A#	; 5: 199 70 12 49 89

file_test$1017:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1018:	; Parameter 6 string_MainX2Easm# 14
x19435:	mov word [bp + 20], @11266$string_MainX2Easm#	; 5: 199 70 20 77 89

file_test$1019:	; Call 6 fileexists 8
x19440:	mov word [bp + 14], file_test$1020	; 5: 199 70 14 254 75
x19445:	mov [bp + 16], bp	; 3: 137 110 16
x19448:	add bp, 14	; 3: 131 197 14
x19451:	jmp fileexists	; 3: 233 165 18

file_test$1020:	; PostCall 6

file_test$1021:	; GetReturnValue £temporary5155

file_test$1022:	; Equal 1025 £temporary5155 0
x19454:	cmp bx, 0	; 3: 131 251 0
x19457:	je file_test$1025	; 2: 116 5

file_test$1023:	; Assign £temporary5160 string_Yes#
x19459:	mov ax, @11268$string_Yes#	; 3: 184 87 89

file_test$1024:	; Goto 1026
x19462:	jmp file_test$1026	; 2: 235 3

file_test$1025:	; Assign £temporary5160 string_No#
x19464:	mov ax, @11269$string_No#	; 3: 184 91 89

file_test$1026:	; Parameter 6 £temporary5160 8
x19467:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1027:	; Call 6 printf 0
x19470:	mov word [bp + 6], file_test$1028	; 5: 199 70 6 33 76
x19475:	mov [bp + 8], bp	; 3: 137 110 8
x19478:	add bp, 6	; 3: 131 197 6
x19481:	mov di, bp	; 2: 137 239
x19483:	add di, 2	; 3: 131 199 2
x19486:	jmp printf	; 3: 233 227 192

file_test$1028:	; PostCall 6

file_test$1029:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1030:	; Parameter 6 string_fileexists2022Main2Ec223A2025s0A# 6
x19489:	mov word [bp + 12], @11279$string_fileexists2022Main2Ec223A2025s0A#	; 5: 199 70 12 94 89

file_test$1031:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1032:	; Parameter 6 string_Main2Ec# 14
x19494:	mov word [bp + 20], @11280$string_Main2Ec#	; 5: 199 70 20 119 89

file_test$1033:	; Call 6 fileexists 8
x19499:	mov word [bp + 14], file_test$1034	; 5: 199 70 14 57 76
x19504:	mov [bp + 16], bp	; 3: 137 110 16
x19507:	add bp, 14	; 3: 131 197 14
x19510:	jmp fileexists	; 3: 233 106 18

file_test$1034:	; PostCall 6

file_test$1035:	; GetReturnValue £temporary5162

file_test$1036:	; Equal 1039 £temporary5162 0
x19513:	cmp bx, 0	; 3: 131 251 0
x19516:	je file_test$1039	; 2: 116 5

file_test$1037:	; Assign £temporary5167 string_Yes#
x19518:	mov ax, @11282$string_Yes#	; 3: 184 126 89

file_test$1038:	; Goto 1040
x19521:	jmp file_test$1040	; 2: 235 3

file_test$1039:	; Assign £temporary5167 string_No#
x19523:	mov ax, @11283$string_No#	; 3: 184 130 89

file_test$1040:	; Parameter 6 £temporary5167 8
x19526:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1041:	; Call 6 printf 0
x19529:	mov word [bp + 6], file_test$1042	; 5: 199 70 6 92 76
x19534:	mov [bp + 8], bp	; 3: 137 110 8
x19537:	add bp, 6	; 3: 131 197 6
x19540:	mov di, bp	; 2: 137 239
x19542:	add di, 2	; 3: 131 199 2
x19545:	jmp printf	; 3: 233 168 192

file_test$1042:	; PostCall 6

file_test$1043:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1044:	; Parameter 6 string_fileexists2022MainX2Ec223A2025s0A# 6
x19548:	mov word [bp + 12], @11293$string_fileexists2022MainX2Ec223A2025s0A#	; 5: 199 70 12 133 89

file_test$1045:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1046:	; Parameter 6 string_MainX2Ec# 14
x19553:	mov word [bp + 20], @11294$string_MainX2Ec#	; 5: 199 70 20 159 89

file_test$1047:	; Call 6 fileexists 8
x19558:	mov word [bp + 14], file_test$1048	; 5: 199 70 14 116 76
x19563:	mov [bp + 16], bp	; 3: 137 110 16
x19566:	add bp, 14	; 3: 131 197 14
x19569:	jmp fileexists	; 3: 233 47 18

file_test$1048:	; PostCall 6

file_test$1049:	; GetReturnValue £temporary5169

file_test$1050:	; Equal 1053 £temporary5169 0
x19572:	cmp bx, 0	; 3: 131 251 0
x19575:	je file_test$1053	; 2: 116 5

file_test$1051:	; Assign £temporary5174 string_Yes#
x19577:	mov ax, @11296$string_Yes#	; 3: 184 167 89

file_test$1052:	; Goto 1054
x19580:	jmp file_test$1054	; 2: 235 3

file_test$1053:	; Assign £temporary5174 string_No#
x19582:	mov ax, @11297$string_No#	; 3: 184 171 89

file_test$1054:	; Parameter 6 £temporary5174 8
x19585:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1055:	; Call 6 printf 0
x19588:	mov word [bp + 6], file_test$1056	; 5: 199 70 6 151 76
x19593:	mov [bp + 8], bp	; 3: 137 110 8
x19596:	add bp, 6	; 3: 131 197 6
x19599:	mov di, bp	; 2: 137 239
x19601:	add di, 2	; 3: 131 199 2
x19604:	jmp printf	; 3: 233 109 192

file_test$1056:	; PostCall 6

file_test$1057:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1058:	; Parameter 6 string_fileexists2022File2Ec223A2025s0A# 6
x19607:	mov word [bp + 12], @11307$string_fileexists2022File2Ec223A2025s0A#	; 5: 199 70 12 174 89

file_test$1059:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1060:	; Parameter 6 string_File2Ec# 14
x19612:	mov word [bp + 20], @11308$string_File2Ec#	; 5: 199 70 20 199 89

file_test$1061:	; Call 6 fileexists 8
x19617:	mov word [bp + 14], file_test$1062	; 5: 199 70 14 175 76
x19622:	mov [bp + 16], bp	; 3: 137 110 16
x19625:	add bp, 14	; 3: 131 197 14
x19628:	jmp fileexists	; 3: 233 244 17

file_test$1062:	; PostCall 6

file_test$1063:	; GetReturnValue £temporary5176

file_test$1064:	; Equal 1067 £temporary5176 0
x19631:	cmp bx, 0	; 3: 131 251 0
x19634:	je file_test$1067	; 2: 116 5

file_test$1065:	; Assign £temporary5181 string_Yes#
x19636:	mov ax, @11310$string_Yes#	; 3: 184 206 89

file_test$1066:	; Goto 1068
x19639:	jmp file_test$1068	; 2: 235 3

file_test$1067:	; Assign £temporary5181 string_No#
x19641:	mov ax, @11311$string_No#	; 3: 184 210 89

file_test$1068:	; Parameter 6 £temporary5181 8
x19644:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1069:	; Call 6 printf 0
x19647:	mov word [bp + 6], file_test$1070	; 5: 199 70 6 210 76
x19652:	mov [bp + 8], bp	; 3: 137 110 8
x19655:	add bp, 6	; 3: 131 197 6
x19658:	mov di, bp	; 2: 137 239
x19660:	add di, 2	; 3: 131 199 2
x19663:	jmp printf	; 3: 233 50 192

file_test$1070:	; PostCall 6

file_test$1071:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1072:	; Parameter 6 string_fileexists2022File2Ex223A2025s0A# 6
x19666:	mov word [bp + 12], @11321$string_fileexists2022File2Ex223A2025s0A#	; 5: 199 70 12 213 89

file_test$1073:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1074:	; Parameter 6 string_File2Ex# 14
x19671:	mov word [bp + 20], @11322$string_File2Ex#	; 5: 199 70 20 238 89

file_test$1075:	; Call 6 fileexists 8
x19676:	mov word [bp + 14], file_test$1076	; 5: 199 70 14 234 76
x19681:	mov [bp + 16], bp	; 3: 137 110 16
x19684:	add bp, 14	; 3: 131 197 14
x19687:	jmp fileexists	; 3: 233 185 17

file_test$1076:	; PostCall 6

file_test$1077:	; GetReturnValue £temporary5183

file_test$1078:	; Equal 1081 £temporary5183 0
x19690:	cmp bx, 0	; 3: 131 251 0
x19693:	je file_test$1081	; 2: 116 5

file_test$1079:	; Assign £temporary5188 string_Yes#
x19695:	mov ax, @11324$string_Yes#	; 3: 184 245 89

file_test$1080:	; Goto 1082
x19698:	jmp file_test$1082	; 2: 235 3

file_test$1081:	; Assign £temporary5188 string_No#
x19700:	mov ax, @11325$string_No#	; 3: 184 249 89

file_test$1082:	; Parameter 6 £temporary5188 8
x19703:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1083:	; Call 6 printf 0
x19706:	mov word [bp + 6], file_test$1084	; 5: 199 70 6 13 77
x19711:	mov [bp + 8], bp	; 3: 137 110 8
x19714:	add bp, 6	; 3: 131 197 6
x19717:	mov di, bp	; 2: 137 239
x19719:	add di, 2	; 3: 131 199 2
x19722:	jmp printf	; 3: 233 247 191

file_test$1084:	; PostCall 6

file_test$1085:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1086:	; Parameter 6 string_fileexists2022File2Eh223A2025s0A# 6
x19725:	mov word [bp + 12], @11335$string_fileexists2022File2Eh223A2025s0A#	; 5: 199 70 12 252 89

file_test$1087:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1088:	; Parameter 6 string_File2Eh# 14
x19730:	mov word [bp + 20], @11336$string_File2Eh#	; 5: 199 70 20 21 90

file_test$1089:	; Call 6 fileexists 8
x19735:	mov word [bp + 14], file_test$1090	; 5: 199 70 14 37 77
x19740:	mov [bp + 16], bp	; 3: 137 110 16
x19743:	add bp, 14	; 3: 131 197 14
x19746:	jmp fileexists	; 3: 233 126 17

file_test$1090:	; PostCall 6

file_test$1091:	; GetReturnValue £temporary5190

file_test$1092:	; Equal 1095 £temporary5190 0
x19749:	cmp bx, 0	; 3: 131 251 0
x19752:	je file_test$1095	; 2: 116 5

file_test$1093:	; Assign £temporary5195 string_Yes#
x19754:	mov ax, @11338$string_Yes#	; 3: 184 28 90

file_test$1094:	; Goto 1096
x19757:	jmp file_test$1096	; 2: 235 3

file_test$1095:	; Assign £temporary5195 string_No#
x19759:	mov ax, @11339$string_No#	; 3: 184 32 90

file_test$1096:	; Parameter 6 £temporary5195 8
x19762:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1097:	; Call 6 printf 0
x19765:	mov word [bp + 6], file_test$1098	; 5: 199 70 6 72 77
x19770:	mov [bp + 8], bp	; 3: 137 110 8
x19773:	add bp, 6	; 3: 131 197 6
x19776:	mov di, bp	; 2: 137 239
x19778:	add di, 2	; 3: 131 199 2
x19781:	jmp printf	; 3: 233 188 191

file_test$1098:	; PostCall 6

file_test$1099:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1100:	; Parameter 6 string_fileexists2022File2Ey223A2025s0A# 6
x19784:	mov word [bp + 12], @11349$string_fileexists2022File2Ey223A2025s0A#	; 5: 199 70 12 35 90

file_test$1101:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1102:	; Parameter 6 string_File2Ey# 14
x19789:	mov word [bp + 20], @11350$string_File2Ey#	; 5: 199 70 20 60 90

file_test$1103:	; Call 6 fileexists 8
x19794:	mov word [bp + 14], file_test$1104	; 5: 199 70 14 96 77
x19799:	mov [bp + 16], bp	; 3: 137 110 16
x19802:	add bp, 14	; 3: 131 197 14
x19805:	jmp fileexists	; 3: 233 67 17

file_test$1104:	; PostCall 6

file_test$1105:	; GetReturnValue £temporary5197

file_test$1106:	; Equal 1109 £temporary5197 0
x19808:	cmp bx, 0	; 3: 131 251 0
x19811:	je file_test$1109	; 2: 116 5

file_test$1107:	; Assign £temporary5202 string_Yes#
x19813:	mov ax, @11352$string_Yes#	; 3: 184 67 90

file_test$1108:	; Goto 1110
x19816:	jmp file_test$1110	; 2: 235 3

file_test$1109:	; Assign £temporary5202 string_No#
x19818:	mov ax, @11353$string_No#	; 3: 184 71 90

file_test$1110:	; Parameter 6 £temporary5202 8
x19821:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1111:	; Call 6 printf 0
x19824:	mov word [bp + 6], file_test$1112	; 5: 199 70 6 131 77
x19829:	mov [bp + 8], bp	; 3: 137 110 8
x19832:	add bp, 6	; 3: 131 197 6
x19835:	mov di, bp	; 2: 137 239
x19837:	add di, 2	; 3: 131 199 2
x19840:	jmp printf	; 3: 233 129 191

file_test$1112:	; PostCall 6

file_test$1113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1114:	; Parameter 6 string_fileexists2022File2Ep223A2025s0A# 6
x19843:	mov word [bp + 12], @11363$string_fileexists2022File2Ep223A2025s0A#	; 5: 199 70 12 74 90

file_test$1115:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1116:	; Parameter 6 string_File2Ep# 14
x19848:	mov word [bp + 20], @11364$string_File2Ep#	; 5: 199 70 20 99 90

file_test$1117:	; Call 6 fileexists 8
x19853:	mov word [bp + 14], file_test$1118	; 5: 199 70 14 155 77
x19858:	mov [bp + 16], bp	; 3: 137 110 16
x19861:	add bp, 14	; 3: 131 197 14
x19864:	jmp fileexists	; 3: 233 8 17

file_test$1118:	; PostCall 6

file_test$1119:	; GetReturnValue £temporary5204

file_test$1120:	; Equal 1123 £temporary5204 0
x19867:	cmp bx, 0	; 3: 131 251 0
x19870:	je file_test$1123	; 2: 116 5

file_test$1121:	; Assign £temporary5209 string_Yes#
x19872:	mov ax, @11366$string_Yes#	; 3: 184 106 90

file_test$1122:	; Goto 1124
x19875:	jmp file_test$1124	; 2: 235 3

file_test$1123:	; Assign £temporary5209 string_No#
x19877:	mov ax, @11367$string_No#	; 3: 184 110 90

file_test$1124:	; Parameter 6 £temporary5209 8
x19880:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1125:	; Call 6 printf 0
x19883:	mov word [bp + 6], file_test$1126	; 5: 199 70 6 190 77
x19888:	mov [bp + 8], bp	; 3: 137 110 8
x19891:	add bp, 6	; 3: 131 197 6
x19894:	mov di, bp	; 2: 137 239
x19896:	add di, 2	; 3: 131 199 2
x19899:	jmp printf	; 3: 233 70 191

file_test$1126:	; PostCall 6

file_test$1127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1128:	; Parameter 6 string_fileexists2022File2Ez223A2025s0A# 6
x19902:	mov word [bp + 12], @11377$string_fileexists2022File2Ez223A2025s0A#	; 5: 199 70 12 113 90

file_test$1129:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1130:	; Parameter 6 string_File2Ez# 14
x19907:	mov word [bp + 20], @11378$string_File2Ez#	; 5: 199 70 20 138 90

file_test$1131:	; Call 6 fileexists 8
x19912:	mov word [bp + 14], file_test$1132	; 5: 199 70 14 214 77
x19917:	mov [bp + 16], bp	; 3: 137 110 16
x19920:	add bp, 14	; 3: 131 197 14
x19923:	jmp fileexists	; 3: 233 205 16

file_test$1132:	; PostCall 6

file_test$1133:	; GetReturnValue £temporary5211

file_test$1134:	; Equal 1137 £temporary5211 0
x19926:	cmp bx, 0	; 3: 131 251 0
x19929:	je file_test$1137	; 2: 116 5

file_test$1135:	; Assign £temporary5216 string_Yes#
x19931:	mov ax, @11380$string_Yes#	; 3: 184 145 90

file_test$1136:	; Goto 1138
x19934:	jmp file_test$1138	; 2: 235 3

file_test$1137:	; Assign £temporary5216 string_No#
x19936:	mov ax, @11381$string_No#	; 3: 184 149 90

file_test$1138:	; Parameter 6 £temporary5216 8
x19939:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1139:	; Call 6 printf 0
x19942:	mov word [bp + 6], file_test$1140	; 5: 199 70 6 249 77
x19947:	mov [bp + 8], bp	; 3: 137 110 8
x19950:	add bp, 6	; 3: 131 197 6
x19953:	mov di, bp	; 2: 137 239
x19955:	add di, 2	; 3: 131 199 2
x19958:	jmp printf	; 3: 233 11 191

file_test$1140:	; PostCall 6

file_test$1141:	; Return 0
x19961:	mov ax, [bp]	; 3: 139 70 0
x19964:	mov di, [bp + 4]	; 3: 139 126 4
x19967:	mov bp, [bp + 2]	; 3: 139 110 2
x19970:	jmp ax	; 2: 255 224

file_test$1142:	; FunctionEnd file_test

@10463$string_in2Etxt#:
x19972:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10464$string_r#:
x19979:	db "r", 0	; 2: 114 0

@10467$string_outX2Etxt#:
x19981:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

@10468$string_w#:
x19990:	db "w", 0	; 2: 119 0

stderr:
x19992:	dw g_fileArray + 58	; 2: 160 13

@10476$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19994:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10477$string_inFilePtr20213D20NULL#:
x20040:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10478$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20058:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10487$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20123:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10488$string_outFilePtr20213D20NULL#:
x20169:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10489$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20188:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10498$string_25lf#:
x20253:	db "%lf", 0	; 4: 37 108 102 0

@10501$string_X12025f0A#:
x20257:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

@10504$string_X22025f0A#:
x20264:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

@10507$string_0A#:
x20271:	db 10, 0	; 2: 10 0

@10511$string_in2Etxt#:
x20273:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10512$string_r#:
x20280:	db "r", 0	; 2: 114 0

@10515$string_outY2Etxt#:
x20282:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

@10516$string_w#:
x20291:	db "w", 0	; 2: 119 0

@10524$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20293:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10525$string_inFilePtr20213D20NULL#:
x20339:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10526$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20357:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10535$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20422:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10536$string_outFilePtr20213D20NULL#:
x20468:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10537$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20487:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10545$string_25i#:
x20552:	db "%i", 0	; 3: 37 105 0

@10548$string_size2025i0A#:
x20555:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10550$string_Y20size2025i0A#:
x20564:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

@10558$string_25lf#:
x20575:	db "%lf", 0	; 4: 37 108 102 0

@10561$string_Y12025f0A#:
x20579:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

@10564$string_Y22025f0A#:
x20586:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

@10567$string_0A#:
x20593:	db 10, 0	; 2: 10 0

@10571$string_Y#:
x20595:	db "Y", 0	; 2: 89 0

@10577$string_2225s2220has20been20removed0A#:
x20597:	db 34, "%s", 34, " has been removed", 10, 0	; 23: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 10 0

@10579$string_Error202225s222025i3A2025s2E0A#:
x20620:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10582$string_X#:
x20640:	db "X", 0	; 2: 88 0

@10584$string_Y#:
x20642:	db "Y", 0	; 2: 89 0

@10586$string_w#:
x20644:	db "w", 0	; 2: 119 0

@10589$string_Hello20X#:
x20646:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

@10596$string_2225s2220has20been20renamed20to202225s222E0A#:
x20654:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10598$string_Error202225s22202225s222025i3A2025s2E0A#:
x20686:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10601$string_X2#:
x20711:	db "X2", 0	; 3: 88 50 0

@10603$string_Y2#:
x20714:	db "Y2", 0	; 3: 89 50 0

@10609$string_2225s2220has20been20renamed20to202225s222E0A#:
x20717:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10611$string_Error202225s22202225s222025i3A2025s2E0A#:
x20749:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10614$string_Z#:
x20774:	db "Z", 0	; 2: 90 0

@10616$string_w#:
x20776:	db "w", 0	; 2: 119 0

@10619$string_Hello20Z#:
x20778:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

@10626$string_2225s2220has20been20removed2E0A#:
x20786:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10628$string_Error202225s222025i3A2025s2E0A#:
x20810:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10631$string_Z2#:
x20830:	db "Z2", 0	; 3: 90 50 0

@10637$string_2225s2220has20been20removed2E0A#:
x20833:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10639$string_Error202225s222025i3A2025s2E0A#:
x20857:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10642$string_PBook2Etxt#:
x20877:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

@10643$string_r#:
x20887:	db "r", 0	; 2: 114 0

@10651$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20889:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10652$string_inFilePtr20213D20NULL#:
x20935:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10653$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20953:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10657$string_0A252D24s20252D24s0A#:
x21018:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

@10658$string_Name#:
x21032:	db "Name", 0	; 5: 78 97 109 101 0

@10659$string_Phone#:
x21037:	db "Phone", 0	; 6: 80 104 111 110 101 0

@10661$string_252D24s20252D24s0A#:
x21043:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10662$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x21056:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10663$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x21081:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10667$string_25i#:
x21106:	db "%i", 0	; 3: 37 105 0

@10670$string_size2025i0A#:
x21109:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10683$string_25s25s#:
x21118:	db "%s%s", 0	; 5: 37 115 37 115 0

@10685$string_252D24s20252D24s0A#:
x21123:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10687$string_0A#:
x21136:	db 10, 0	; 2: 10 0

@10690$string_TestX2Ebin#:
x21138:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10691$string_w#:
x21148:	db "w", 0	; 2: 119 0

@10699$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21150:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10700$string_outFilePtr20213D20NULL#:
x21196:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10701$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21215:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10730$string_TestX2Ebin#:
x21280:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10731$string_r#:
x21290:	db "r", 0	; 2: 114 0

@10741$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21292:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10742$string_inFilePtr20213D20NULL#:
x21338:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10743$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21356:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10753$string_size13A2025i0A#:
x21421:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

@10767$string_index13A2025i3A20value2025f0A#:
x21432:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@10769$string_0A#:
x21454:	db 10, 0	; 2: 10 0

@10772$string_TestY2Ebin#:
x21456:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@10773$string_w#:
x21466:	db "w", 0	; 2: 119 0

@10781$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21468:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10782$string_outFilePtr20213D20NULL#:
x21514:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10783$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21533:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10806$string_TestY2Ebin#:
x21598:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@10807$string_r#:
x21608:	db "r", 0	; 2: 114 0

@10815$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21610:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10816$string_inFilePtr20213D20NULL#:
x21656:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10817$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21674:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10834$string_index23A2025i3A20value2025f0A#:
x21739:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@10838$string_0A#:
x21761:	db 10, 0	; 2: 10 0

@10841$string_TestY2Ebin#:
x21763:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@10842$string_r#:
x21773:	db "r", 0	; 2: 114 0

@10850$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21775:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10851$string_inFilePtr20213D20NULL#:
x21821:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10852$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21839:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10870$string_index33A2025i3A20value2025f0A#:
x21904:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@10874$string_0A#:
x21926:	db 10, 0	; 2: 10 0

@10877$string_TestX2Ebin#:
x21928:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10878$string_r#:
x21938:	db "r", 0	; 2: 114 0

@10887$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21940:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10888$string_inFilePtr20213D20NULL#:
x21986:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10889$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22004:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10899$string_size43A2025i20total2025i0A#:
x22069:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

@10901$int2$8#:
x22089:	dw 8	; 2: 8 0

@10905$int2$8#:
x22091:	dw 8	; 2: 8 0

@10912$int2$8#:
x22093:	dw 8	; 2: 8 0

@10920$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22095:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10921$string_p20213D20NULL#:
x22141:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

@10922$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22151:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10926$string_malloc43A2025u2025u2025u0A#:
x22216:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

@10936$string_index43A2025i3A20value2025f0A#:
x22235:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@10938$int2$8#:
x22257:	dw 8	; 2: 8 0

@10942$string_0A#:
x22259:	db 10, 0	; 2: 10 0

@11123$string_Block2Ebin#:
x22261:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11124$string_w#:
x22271:	db "w", 0	; 2: 119 0

@11127$string_Block2Ebin#:
x22273:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11128$string_r#:
x22283:	db "r", 0	; 2: 114 0

@11136$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22285:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11137$string_outFilePtr20213D20NULL#:
x22331:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11138$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22350:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11147$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22415:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11148$string_inFilePtr20213D20NULL#:
x22461:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11149$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22479:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11169$string_Name20203A2025s0A#:
x22544:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

@11172$string_Phone203A2025d0A#:
x22556:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

@11176$string_outx2Etxt#:
x22568:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

@11177$string_r#:
x22577:	db "r", 0	; 2: 114 0

@11187$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22579:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11188$string_inFilePtr20213D20NULL#:
x22625:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11189$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22643:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11198$string_ftell2025i0A#:
x22708:	db "ftell %i", 10, 0	; 10: 102 116 101 108 108 32 37 105 10 0

@11209$string_3C25c3E2025i2025i0A#:
x22718:	db "<%c> %i %i", 10, 0	; 12: 60 37 99 62 32 37 105 32 37 105 10 0

@11220$string_0A#:
x22730:	db 10, 0	; 2: 10 0

@11223$string_fileexists2022X223A2025s0A#:
x22732:	db "fileexists ", 34, "X", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 88 34 58 32 37 115 10 0

@11224$string_X#:
x22752:	db "X", 0	; 2: 88 0

@11226$string_Yes#:
x22754:	db "Yes", 0	; 4: 89 101 115 0

@11227$string_No#:
x22758:	db "No", 0	; 3: 78 111 0

@11237$string_fileexists2022Y223A2025s0A#:
x22761:	db "fileexists ", 34, "Y", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 89 34 58 32 37 115 10 0

@11238$string_Y#:
x22781:	db "Y", 0	; 2: 89 0

@11240$string_Yes#:
x22783:	db "Yes", 0	; 4: 89 101 115 0

@11241$string_No#:
x22787:	db "No", 0	; 3: 78 111 0

@11251$string_fileexists2022Main2Easm223A2025s0A#:
x22790:	db "fileexists ", 34, "Main.asm", 34, ": %s", 10, 0	; 27: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 97 115 109 34 58 32 37 115 10 0

@11252$string_Main2Easm#:
x22817:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

@11254$string_Yes#:
x22826:	db "Yes", 0	; 4: 89 101 115 0

@11255$string_No#:
x22830:	db "No", 0	; 3: 78 111 0

@11265$string_fileexists2022MainX2Easm223A2025s0A#:
x22833:	db "fileexists ", 34, "MainX.asm", 34, ": %s", 10, 0	; 28: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 97 115 109 34 58 32 37 115 10 0

@11266$string_MainX2Easm#:
x22861:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

@11268$string_Yes#:
x22871:	db "Yes", 0	; 4: 89 101 115 0

@11269$string_No#:
x22875:	db "No", 0	; 3: 78 111 0

@11279$string_fileexists2022Main2Ec223A2025s0A#:
x22878:	db "fileexists ", 34, "Main.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 99 34 58 32 37 115 10 0

@11280$string_Main2Ec#:
x22903:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

@11282$string_Yes#:
x22910:	db "Yes", 0	; 4: 89 101 115 0

@11283$string_No#:
x22914:	db "No", 0	; 3: 78 111 0

@11293$string_fileexists2022MainX2Ec223A2025s0A#:
x22917:	db "fileexists ", 34, "MainX.c", 34, ": %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 99 34 58 32 37 115 10 0

@11294$string_MainX2Ec#:
x22943:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

@11296$string_Yes#:
x22951:	db "Yes", 0	; 4: 89 101 115 0

@11297$string_No#:
x22955:	db "No", 0	; 3: 78 111 0

@11307$string_fileexists2022File2Ec223A2025s0A#:
x22958:	db "fileexists ", 34, "File.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 99 34 58 32 37 115 10 0

@11308$string_File2Ec#:
x22983:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

@11310$string_Yes#:
x22990:	db "Yes", 0	; 4: 89 101 115 0

@11311$string_No#:
x22994:	db "No", 0	; 3: 78 111 0

@11321$string_fileexists2022File2Ex223A2025s0A#:
x22997:	db "fileexists ", 34, "File.x", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 120 34 58 32 37 115 10 0

@11322$string_File2Ex#:
x23022:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

@11324$string_Yes#:
x23029:	db "Yes", 0	; 4: 89 101 115 0

@11325$string_No#:
x23033:	db "No", 0	; 3: 78 111 0

@11335$string_fileexists2022File2Eh223A2025s0A#:
x23036:	db "fileexists ", 34, "File.h", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 104 34 58 32 37 115 10 0

@11336$string_File2Eh#:
x23061:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

@11338$string_Yes#:
x23068:	db "Yes", 0	; 4: 89 101 115 0

@11339$string_No#:
x23072:	db "No", 0	; 3: 78 111 0

@11349$string_fileexists2022File2Ey223A2025s0A#:
x23075:	db "fileexists ", 34, "File.y", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 121 34 58 32 37 115 10 0

@11350$string_File2Ey#:
x23100:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

@11352$string_Yes#:
x23107:	db "Yes", 0	; 4: 89 101 115 0

@11353$string_No#:
x23111:	db "No", 0	; 3: 78 111 0

@11363$string_fileexists2022File2Ep223A2025s0A#:
x23114:	db "fileexists ", 34, "File.p", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 112 34 58 32 37 115 10 0

@11364$string_File2Ep#:
x23139:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

@11366$string_Yes#:
x23146:	db "Yes", 0	; 4: 89 101 115 0

@11367$string_No#:
x23150:	db "No", 0	; 3: 78 111 0

@11377$string_fileexists2022File2Ez223A2025s0A#:
x23153:	db "fileexists ", 34, "File.z", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 122 34 58 32 37 115 10 0

@11378$string_File2Ez#:
x23178:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

@11380$string_Yes#:
x23185:	db "Yes", 0	; 4: 89 101 115 0

@11381$string_No#:
x23189:	db "No", 0	; 3: 78 111 0

fopen:	; Assign index 0
x23192:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x23197:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x23201:	jge fopen$21	; 2: 125 78

fopen$2:	; UnsignedMultiply £temporary699 index 29
x23203:	mov ax, [bp + 10]	; 3: 139 70 10
x23206:	xor dx, dx	; 2: 49 210
x23208:	mul word [@1707$int2$29#]	; 4: 247 38 255 90

fopen$3:	; BinaryAdd £temporary700 g_fileArray £temporary699
x23212:	mov si, g_fileArray	; 3: 190 102 13
x23215:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary698 -> £temporary700 £temporary700 0

fopen$5:	; NotEqual 19 £temporary698.open$0 -> £temporary700 0
x23217:	cmp word [si], 0	; 3: 131 60 0
x23220:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x23222:	mov ax, [bp + 6]	; 3: 139 70 6
x23225:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x23228:	mov ax, [bp + 8]	; 3: 139 70 8
x23231:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; UnsignedMultiply £temporary704 index 29
x23234:	mov ax, [bp + 10]	; 3: 139 70 10
x23237:	xor dx, dx	; 2: 49 210
x23239:	mul word [@1715$int2$29#]	; 4: 247 38 1 91

fopen$10:	; BinaryAdd £temporary705 g_fileArray £temporary704
x23243:	mov si, g_fileArray	; 3: 190 102 13
x23246:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary703 -> £temporary705 £temporary705 0

fopen$12:	; address £temporary706 £temporary703 -> £temporary705

fopen$13:	; Parameter 12 £temporary706 10
x23248:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x23251:	mov word [bp + 12], fopen$15	; 5: 199 70 12 225 90
x23256:	mov [bp + 14], bp	; 3: 137 110 14
x23259:	add bp, 12	; 3: 131 197 12
x23262:	nop	; 1: 144
x23263:	jmp freopen	; 2: 235 34

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary707

fopen$17:	; SetReturnValue £temporary707

fopen$18:	; Return £temporary707
x23265:	mov ax, [bp]	; 3: 139 70 0
x23268:	mov di, [bp + 4]	; 3: 139 126 4
x23271:	mov bp, [bp + 2]	; 3: 139 110 2
x23274:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x23276:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x23279:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x23281:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x23284:	mov ax, [bp]	; 3: 139 70 0
x23287:	mov di, [bp + 4]	; 3: 139 126 4
x23290:	mov bp, [bp + 2]	; 3: 139 110 2
x23293:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

@1707$int2$29#:
x23295:	dw 29	; 2: 29 0

@1715$int2$29#:
x23297:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x23299:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x23304:	mov ax, [bp + 8]	; 3: 139 70 8
x23307:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x23310:	mov word [bp + 22], @1730$string_r#	; 5: 199 70 22 125 93

freopen$4:	; Call 14 strcmp 0
x23315:	mov word [bp + 14], freopen$5	; 5: 199 70 14 33 91
x23320:	mov [bp + 16], bp	; 3: 137 110 16
x23323:	add bp, 14	; 3: 131 197 14
x23326:	jmp strcmp	; 3: 233 107 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary711

freopen$7:	; NotEqual 16 £temporary711 0
x23329:	cmp bx, 0	; 3: 131 251 0
x23332:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x23334:	mov ax, [bp + 6]	; 3: 139 70 6
x23337:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x23340:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x23344:	mov word [bp + 14], freopen$12	; 5: 199 70 14 62 91
x23349:	mov [bp + 16], bp	; 3: 137 110 16
x23352:	add bp, 14	; 3: 131 197 14
x23355:	jmp @1685$fileopen	; 3: 233 188 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary713

freopen$14:	; Assign handle £temporary713
x23358:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 130
x23361:	jmp freopen$130	; 3: 233 210 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x23364:	mov ax, [bp + 8]	; 3: 139 70 8
x23367:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x23370:	mov word [bp + 22], @1738$string_w#	; 5: 199 70 22 127 93

freopen$19:	; Call 14 strcmp 0
x23375:	mov word [bp + 14], freopen$20	; 5: 199 70 14 93 91
x23380:	mov [bp + 16], bp	; 3: 137 110 16
x23383:	add bp, 14	; 3: 131 197 14
x23386:	jmp strcmp	; 3: 233 47 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary714

freopen$22:	; NotEqual 30 £temporary714 0
x23389:	cmp bx, 0	; 3: 131 251 0
x23392:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x23394:	mov ax, [bp + 6]	; 3: 139 70 6
x23397:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x23400:	mov word [bp + 14], freopen$26	; 5: 199 70 14 118 91
x23405:	mov [bp + 16], bp	; 3: 137 110 16
x23408:	add bp, 14	; 3: 131 197 14
x23411:	jmp filecreate	; 3: 233 177 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary716

freopen$28:	; Assign handle £temporary716
x23414:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 130
x23417:	jmp freopen$130	; 3: 233 154 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x23420:	mov ax, [bp + 8]	; 3: 139 70 8
x23423:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x23426:	mov word [bp + 22], @1744$string_a#	; 5: 199 70 22 129 93

freopen$33:	; Call 14 strcmp 0
x23431:	mov word [bp + 14], freopen$34	; 5: 199 70 14 149 91
x23436:	mov [bp + 16], bp	; 3: 137 110 16
x23439:	add bp, 14	; 3: 131 197 14
x23442:	jmp strcmp	; 3: 233 247 1

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary717

freopen$36:	; NotEqual 59 £temporary717 0
x23445:	cmp bx, 0	; 3: 131 251 0
x23448:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x23450:	mov ax, [bp + 6]	; 3: 139 70 6
x23453:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x23456:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x23460:	mov word [bp + 14], freopen$41	; 5: 199 70 14 178 91
x23465:	mov [bp + 16], bp	; 3: 137 110 16
x23468:	add bp, 14	; 3: 131 197 14
x23471:	jmp @1685$fileopen	; 3: 233 72 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary719

freopen$43:	; Assign handle £temporary719
x23474:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x23477:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23481:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x23483:	mov ax, [bp + 10]	; 3: 139 70 10
x23486:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x23489:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x23494:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x23499:	mov word [bp + 14], freopen$50	; 5: 199 70 14 217 91
x23504:	mov [bp + 16], bp	; 3: 137 110 16
x23507:	add bp, 14	; 3: 131 197 14
x23510:	jmp fseek	; 3: 233 127 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 130
x23513:	jmp freopen$130	; 3: 233 58 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x23516:	mov ax, [bp + 6]	; 3: 139 70 6
x23519:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x23522:	mov word [bp + 14], freopen$55	; 5: 199 70 14 240 91
x23527:	mov [bp + 16], bp	; 3: 137 110 16
x23530:	add bp, 14	; 3: 131 197 14
x23533:	jmp filecreate	; 3: 233 55 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary722

freopen$57:	; Assign handle £temporary722
x23536:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 130
x23539:	jmp freopen$130	; 3: 233 32 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x23542:	mov ax, [bp + 8]	; 3: 139 70 8
x23545:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x23548:	mov word [bp + 22], @1761$string_r2B#	; 5: 199 70 22 131 93

freopen$62:	; Call 14 strcmp 0
x23553:	mov word [bp + 14], freopen$63	; 5: 199 70 14 15 92
x23558:	mov [bp + 16], bp	; 3: 137 110 16
x23561:	add bp, 14	; 3: 131 197 14
x23564:	jmp strcmp	; 3: 233 125 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary723

freopen$65:	; NotEqual 74 £temporary723 0
x23567:	cmp bx, 0	; 3: 131 251 0
x23570:	jne freopen$74	; 2: 117 30

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 name 6
x23572:	mov ax, [bp + 6]	; 3: 139 70 6
x23575:	mov [bp + 20], ax	; 3: 137 70 20

freopen$68:	; Parameter 14 66 8
x23578:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$69:	; Call 14 fileopen 0
x23582:	mov word [bp + 14], freopen$70	; 5: 199 70 14 44 92
x23587:	mov [bp + 16], bp	; 3: 137 110 16
x23590:	add bp, 14	; 3: 131 197 14
x23593:	jmp @1685$fileopen	; 3: 233 206 1

freopen$70:	; PostCall 14

freopen$71:	; GetReturnValue £temporary725

freopen$72:	; Assign handle £temporary725
x23596:	mov [bp + 12], bx	; 3: 137 94 12

freopen$73:	; Goto 130
x23599:	jmp freopen$130	; 3: 233 228 0

freopen$74:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$75:	; Parameter 14 mode 6
x23602:	mov ax, [bp + 8]	; 3: 139 70 8
x23605:	mov [bp + 20], ax	; 3: 137 70 20

freopen$76:	; Parameter 14 string_w2B# 8
x23608:	mov word [bp + 22], @1769$string_w2B#	; 5: 199 70 22 134 93

freopen$77:	; Call 14 strcmp 0
x23613:	mov word [bp + 14], freopen$78	; 5: 199 70 14 75 92
x23618:	mov [bp + 16], bp	; 3: 137 110 16
x23621:	add bp, 14	; 3: 131 197 14
x23624:	jmp strcmp	; 3: 233 65 1

freopen$78:	; PostCall 14

freopen$79:	; GetReturnValue £temporary726

freopen$80:	; NotEqual 102 £temporary726 0
x23627:	cmp bx, 0	; 3: 131 251 0
x23630:	jne freopen$102	; 2: 117 80

freopen$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$82:	; Parameter 14 name 6
x23632:	mov ax, [bp + 6]	; 3: 139 70 6
x23635:	mov [bp + 20], ax	; 3: 137 70 20

freopen$83:	; Call 14 fileexists 0
x23638:	mov word [bp + 14], freopen$84	; 5: 199 70 14 100 92
x23643:	mov [bp + 16], bp	; 3: 137 110 16
x23646:	add bp, 14	; 3: 131 197 14
x23649:	jmp fileexists	; 3: 233 63 2

freopen$84:	; PostCall 14

freopen$85:	; GetReturnValue £temporary728

freopen$86:	; Equal 95 £temporary728 0
x23652:	cmp bx, 0	; 3: 131 251 0
x23655:	je freopen$95	; 2: 116 30

freopen$87:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$88:	; Parameter 14 name 6
x23657:	mov ax, [bp + 6]	; 3: 139 70 6
x23660:	mov [bp + 20], ax	; 3: 137 70 20

freopen$89:	; Parameter 14 66 8
x23663:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$90:	; Call 14 fileopen 0
x23667:	mov word [bp + 14], freopen$91	; 5: 199 70 14 129 92
x23672:	mov [bp + 16], bp	; 3: 137 110 16
x23675:	add bp, 14	; 3: 131 197 14
x23678:	jmp @1685$fileopen	; 3: 233 121 1

freopen$91:	; PostCall 14

freopen$92:	; GetReturnValue £temporary729

freopen$93:	; Assign handle £temporary729
x23681:	mov [bp + 12], bx	; 3: 137 94 12

freopen$94:	; Goto 130
x23684:	jmp freopen$130	; 3: 233 143 0

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x23687:	mov ax, [bp + 6]	; 3: 139 70 6
x23690:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Call 14 filecreate 0
x23693:	mov word [bp + 14], freopen$98	; 5: 199 70 14 155 92
x23698:	mov [bp + 16], bp	; 3: 137 110 16
x23701:	add bp, 14	; 3: 131 197 14
x23704:	jmp filecreate	; 3: 233 140 1

freopen$98:	; PostCall 14

freopen$99:	; GetReturnValue £temporary730

freopen$100:	; Assign handle £temporary730
x23707:	mov [bp + 12], bx	; 3: 137 94 12

freopen$101:	; Goto 130
x23710:	jmp freopen$130	; 2: 235 118

freopen$102:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$103:	; Parameter 14 mode 6
x23712:	mov ax, [bp + 8]	; 3: 139 70 8
x23715:	mov [bp + 20], ax	; 3: 137 70 20

freopen$104:	; Parameter 14 string_a2B# 8
x23718:	mov word [bp + 22], @1781$string_a2B#	; 5: 199 70 22 137 93

freopen$105:	; Call 14 strcmp 0
x23723:	mov word [bp + 14], freopen$106	; 5: 199 70 14 185 92
x23728:	mov [bp + 16], bp	; 3: 137 110 16
x23731:	add bp, 14	; 3: 131 197 14
x23734:	jmp strcmp	; 3: 233 211 0

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary732

freopen$108:	; NotEqual 130 £temporary732 0
x23737:	cmp bx, 0	; 3: 131 251 0
x23740:	jne freopen$130	; 2: 117 88

freopen$109:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$110:	; Parameter 14 name 6
x23742:	mov ax, [bp + 6]	; 3: 139 70 6
x23745:	mov [bp + 20], ax	; 3: 137 70 20

freopen$111:	; Parameter 14 66 8
x23748:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$112:	; Call 14 fileopen 0
x23752:	mov word [bp + 14], freopen$113	; 5: 199 70 14 214 92
x23757:	mov [bp + 16], bp	; 3: 137 110 16
x23760:	add bp, 14	; 3: 131 197 14
x23763:	jmp @1685$fileopen	; 3: 233 36 1

freopen$113:	; PostCall 14

freopen$114:	; GetReturnValue £temporary734

freopen$115:	; Assign handle £temporary734
x23766:	mov [bp + 12], bx	; 3: 137 94 12

freopen$116:	; Equal 124 handle -1
x23769:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23773:	je freopen$124	; 2: 116 32

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 stream 6
x23775:	mov ax, [bp + 10]	; 3: 139 70 10
x23778:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 0 8
x23781:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$120:	; Parameter 14 2 10
x23786:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$121:	; Call 14 fseek 0
x23791:	mov word [bp + 14], freopen$122	; 5: 199 70 14 253 92
x23796:	mov [bp + 16], bp	; 3: 137 110 16
x23799:	add bp, 14	; 3: 131 197 14
x23802:	jmp fseek	; 3: 233 91 1

freopen$122:	; PostCall 14

freopen$123:	; Goto 130
x23805:	jmp freopen$130	; 2: 235 23

freopen$124:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$125:	; Parameter 14 name 6
x23807:	mov ax, [bp + 6]	; 3: 139 70 6
x23810:	mov [bp + 20], ax	; 3: 137 70 20

freopen$126:	; Call 14 filecreate 0
x23813:	mov word [bp + 14], freopen$127	; 5: 199 70 14 19 93
x23818:	mov [bp + 16], bp	; 3: 137 110 16
x23821:	add bp, 14	; 3: 131 197 14
x23824:	jmp filecreate	; 3: 233 20 1

freopen$127:	; PostCall 14

freopen$128:	; GetReturnValue £temporary737

freopen$129:	; Assign handle £temporary737
x23827:	mov [bp + 12], bx	; 3: 137 94 12

freopen$130:	; Equal 147 handle -1
x23830:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23834:	je freopen$147	; 2: 116 76

freopen$131:	; Deref £temporary739 -> stream stream 0
x23836:	mov si, [bp + 10]	; 3: 139 118 10

freopen$132:	; Assign £temporary739 -> stream 1
x23839:	mov word [si], 1	; 4: 199 4 1 0

freopen$133:	; Deref £temporary740 -> stream stream 2
x23843:	mov si, [bp + 10]	; 3: 139 118 10

freopen$134:	; Assign £temporary740 -> stream handle
x23846:	mov ax, [bp + 12]	; 3: 139 70 12
x23849:	mov [si + 2], ax	; 3: 137 68 2

freopen$135:	; Deref £temporary741 -> stream stream 25
x23852:	mov si, [bp + 10]	; 3: 139 118 10

freopen$136:	; Assign £temporary741 -> stream 0
x23855:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$137:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$138:	; Deref £temporary742 -> stream stream 4
x23860:	mov si, [bp + 10]	; 3: 139 118 10

freopen$139:	; Parameter 14 £temporary742 -> stream 6
x23863:	mov [bp + 20], si	; 3: 137 118 20
x23866:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$140:	; Parameter 14 name 8
x23870:	mov ax, [bp + 6]	; 3: 139 70 6
x23873:	mov [bp + 22], ax	; 3: 137 70 22

freopen$141:	; Call 14 strcpy 0
x23876:	mov word [bp + 14], freopen$142	; 5: 199 70 14 82 93
x23881:	mov [bp + 16], bp	; 3: 137 110 16
x23884:	add bp, 14	; 3: 131 197 14
x23887:	jmp strcpy	; 3: 233 111 1

freopen$142:	; PostCall 14

freopen$143:	; Deref £temporary744 -> stream stream 27
x23890:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary744 -> stream 0
x23893:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$145:	; SetReturnValue stream
x23898:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$146:	; Return stream
x23901:	mov ax, [bp]	; 3: 139 70 0
x23904:	mov di, [bp + 4]	; 3: 139 126 4
x23907:	mov bp, [bp + 2]	; 3: 139 110 2
x23910:	jmp ax	; 2: 255 224

freopen$147:	; Deref £temporary745 -> stream stream 0
x23912:	mov si, [bp + 10]	; 3: 139 118 10

freopen$148:	; Assign £temporary745 -> stream 0
x23915:	mov word [si], 0	; 4: 199 4 0 0

freopen$149:	; SetReturnValue 0
x23919:	mov bx, 0	; 3: 187 0 0

freopen$150:	; Return 0
x23922:	mov ax, [bp]	; 3: 139 70 0
x23925:	mov di, [bp + 4]	; 3: 139 126 4
x23928:	mov bp, [bp + 2]	; 3: 139 110 2
x23931:	jmp ax	; 2: 255 224

freopen$151:	; FunctionEnd freopen

@1730$string_r#:
x23933:	db "r", 0	; 2: 114 0

@1738$string_w#:
x23935:	db "w", 0	; 2: 119 0

@1744$string_a#:
x23937:	db "a", 0	; 2: 97 0

@1761$string_r2B#:
x23939:	db "r+", 0	; 3: 114 43 0

@1769$string_w2B#:
x23942:	db "w+", 0	; 3: 119 43 0

@1781$string_a2B#:
x23945:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x23948:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3774 left index
x23953:	mov si, [bp + 6]	; 3: 139 118 6
x23956:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3773 -> £temporary3774 £temporary3774 0

strcmp$3:	; NotEqual 9 £temporary3773 -> £temporary3774 0
x23959:	cmp byte [si], 0	; 3: 128 60 0
x23962:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3777 right index
x23964:	mov si, [bp + 8]	; 3: 139 118 8
x23967:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3776 -> £temporary3777 £temporary3777 0

strcmp$6:	; NotEqual 9 £temporary3776 -> £temporary3777 0
x23970:	cmp byte [si], 0	; 3: 128 60 0
x23973:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x23975:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x23978:	mov ax, [bp]	; 3: 139 70 0
x23981:	mov di, [bp + 4]	; 3: 139 126 4
x23984:	mov bp, [bp + 2]	; 3: 139 110 2
x23987:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3781 left index
x23989:	mov si, [bp + 6]	; 3: 139 118 6
x23992:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3780 -> £temporary3781 £temporary3781 0

strcmp$11:	; BinaryAdd £temporary3783 right index
x23995:	mov di, [bp + 8]	; 3: 139 126 8
x23998:	add di, [bp + 10]	; 3: 3 126 10

strcmp$12:	; Deref £temporary3782 -> £temporary3783 £temporary3783 0

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3780 -> £temporary3781 £temporary3782 -> £temporary3783
x24001:	mov al, [di]	; 2: 138 5
x24003:	cmp [si], al	; 2: 56 4
x24005:	jge strcmp$16	; 2: 125 14

strcmp$14:	; SetReturnValue -1
x24007:	mov bx, -1	; 3: 187 255 255

strcmp$15:	; Return -1
x24010:	mov ax, [bp]	; 3: 139 70 0
x24013:	mov di, [bp + 4]	; 3: 139 126 4
x24016:	mov bp, [bp + 2]	; 3: 139 110 2
x24019:	jmp ax	; 2: 255 224

strcmp$16:	; BinaryAdd £temporary3786 left index
x24021:	mov si, [bp + 6]	; 3: 139 118 6
x24024:	add si, [bp + 10]	; 3: 3 118 10

strcmp$17:	; Deref £temporary3785 -> £temporary3786 £temporary3786 0

strcmp$18:	; BinaryAdd £temporary3788 right index
x24027:	mov di, [bp + 8]	; 3: 139 126 8
x24030:	add di, [bp + 10]	; 3: 3 126 10

strcmp$19:	; Deref £temporary3787 -> £temporary3788 £temporary3788 0

strcmp$20:	; SignedLessThanEqual 23 £temporary3785 -> £temporary3786 £temporary3787 -> £temporary3788
x24033:	mov al, [di]	; 2: 138 5
x24035:	cmp [si], al	; 2: 56 4
x24037:	jle strcmp$23	; 2: 126 14

strcmp$21:	; SetReturnValue 1
x24039:	mov bx, 1	; 3: 187 1 0

strcmp$22:	; Return 1
x24042:	mov ax, [bp]	; 3: 139 70 0
x24045:	mov di, [bp + 4]	; 3: 139 126 4
x24048:	mov bp, [bp + 2]	; 3: 139 110 2
x24051:	jmp ax	; 2: 255 224

strcmp$23:	; Increment index
x24053:	inc word [bp + 10]	; 3: 255 70 10

strcmp$24:	; Goto 1
x24056:	jmp strcmp$1	; 2: 235 151

strcmp$25:	; FunctionEnd strcmp

@1685$fileopen:	; AssignRegister ah 61
x24058:	mov ah, 61	; 2: 180 61

@1685$fileopen$1:	; AssignRegister al mode
x24060:	mov al, [bp + 8]	; 3: 138 70 8

@1685$fileopen$2:	; AssignRegister dx name
x24063:	mov dx, [bp + 6]	; 3: 139 86 6

@1685$fileopen$3:	; Interrupt 33
x24066:	int 33	; 2: 205 33

@1685$fileopen$4:	; NotCarry 8
x24068:	jnc @1685$fileopen$8	; 2: 115 20

@1685$fileopen$5:	; Assign errno 9
x24070:	mov word [errno], 9	; 6: 199 6 230 10 9 0

@1685$fileopen$6:	; SetReturnValue -1
x24076:	mov bx, -1	; 3: 187 255 255

@1685$fileopen$7:	; Return -1
x24079:	mov ax, [bp]	; 3: 139 70 0
x24082:	mov di, [bp + 4]	; 3: 139 126 4
x24085:	mov bp, [bp + 2]	; 3: 139 110 2
x24088:	jmp ax	; 2: 255 224

@1685$fileopen$8:	; InspectRegister £temporary695 ax

@1685$fileopen$9:	; SetReturnValue £temporary695
x24090:	mov bx, ax	; 2: 137 195

@1685$fileopen$10:	; Return £temporary695
x24092:	mov ax, [bp]	; 3: 139 70 0
x24095:	mov di, [bp + 4]	; 3: 139 126 4
x24098:	mov bp, [bp + 2]	; 3: 139 110 2
x24101:	jmp ax	; 2: 255 224

@1685$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x24103:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x24105:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x24108:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x24111:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary673 ax

filecreate$5:	; Assign handle £temporary673
x24113:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x24116:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x24118:	mov word [errno], 9	; 6: 199 6 230 10 9 0

filecreate$8:	; SetReturnValue -1
x24124:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x24127:	mov ax, [bp]	; 3: 139 70 0
x24130:	mov di, [bp + 4]	; 3: 139 126 4
x24133:	mov bp, [bp + 2]	; 3: 139 110 2
x24136:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x24138:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x24141:	mov ax, [bp]	; 3: 139 70 0
x24144:	mov di, [bp + 4]	; 3: 139 126 4
x24147:	mov bp, [bp + 2]	; 3: 139 110 2
x24150:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary920 origin
x24152:	mov ax, [bp + 10]	; 3: 139 70 10
x24155:	cmp ax, 0	; 3: 131 248 0
x24158:	jge fseek$1	; 2: 125 4
x24160:	neg ax	; 2: 247 216
x24162:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary920

fseek$2:	; AssignRegister ah 66
x24164:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary923 -> stream stream 2
x24166:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary923 -> stream
x24169:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x24172:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary926 offset
x24175:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary926

fseek$8:	; Interrupt 33
x24178:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x24180:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary929 -> stream stream 23
x24182:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary930 ax

fseek$12:	; Assign £temporary929 -> stream £temporary930
x24185:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary931 -> stream stream 23
x24188:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary931 -> stream
x24191:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary931 -> stream
x24194:	mov ax, [bp]	; 3: 139 70 0
x24197:	mov di, [bp + 4]	; 3: 139 126 4
x24200:	mov bp, [bp + 2]	; 3: 139 110 2
x24203:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary932 -> stream stream 21
x24205:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary932 -> stream 15
x24208:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x24213:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x24216:	mov ax, [bp]	; 3: 139 70 0
x24219:	mov di, [bp + 4]	; 3: 139 126 4
x24222:	mov bp, [bp + 2]	; 3: 139 110 2
x24225:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x24227:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x24229:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x24231:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x24234:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x24236:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary690 1
x24238:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x24241:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary690 0
x24243:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary690

fileexists$9:	; Return £temporary690
x24246:	mov ax, [bp]	; 3: 139 70 0
x24249:	mov di, [bp + 4]	; 3: 139 126 4
x24252:	mov bp, [bp + 2]	; 3: 139 110 2
x24255:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x24257:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3717 source index
x24262:	mov si, [bp + 8]	; 3: 139 118 8
x24265:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3716 -> £temporary3717 £temporary3717 0

strcpy$3:	; Equal 11 £temporary3716 -> £temporary3717 0
x24268:	cmp byte [si], 0	; 3: 128 60 0
x24271:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3721 target index
x24273:	mov si, [bp + 6]	; 3: 139 118 6
x24276:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3720 -> £temporary3721 £temporary3721 0

strcpy$6:	; BinaryAdd £temporary3723 source index
x24279:	mov di, [bp + 8]	; 3: 139 126 8
x24282:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3722 -> £temporary3723 £temporary3723 0

strcpy$8:	; Assign £temporary3720 -> £temporary3721 £temporary3722 -> £temporary3723
x24285:	mov al, [di]	; 2: 138 5
x24287:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x24289:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x24292:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3725 target index
x24294:	mov si, [bp + 6]	; 3: 139 118 6
x24297:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3724 -> £temporary3725 £temporary3725 0

strcpy$13:	; Assign £temporary3724 -> £temporary3725 0
x24300:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x24303:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x24306:	mov ax, [bp]	; 3: 139 70 0
x24309:	mov di, [bp + 4]	; 3: 139 126 4
x24312:	mov bp, [bp + 2]	; 3: 139 110 2
x24315:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2206 format
x24317:	mov si, bp	; 2: 137 238
x24319:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2207 £temporary2206

fprintf$2:	; BinaryAdd arg_list £temporary2207 2
x24322:	add si, 2	; 3: 131 198 2
x24325:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x24328:	mov ax, [bp + 6]	; 3: 139 70 6
x24331:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x24334:	mov ax, [bp + 8]	; 3: 139 70 8
x24337:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x24340:	mov ax, [di + 10]	; 3: 139 69 10
x24343:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x24346:	mov word [di + 12], fprintf$8	; 5: 199 69 12 45 95
x24351:	mov [di + 14], bp	; 3: 137 109 14
x24354:	mov [di + 16], di	; 3: 137 125 16
x24357:	add di, 12	; 3: 131 199 12
x24360:	mov bp, di	; 2: 137 253
x24362:	jmp vfprintf	; 3: 233 125 176

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2209

fprintf$10:	; SetReturnValue £temporary2209

fprintf$11:	; Return £temporary2209
x24365:	mov ax, [bp]	; 3: 139 70 0
x24368:	mov di, [bp + 4]	; 3: 139 126 4
x24371:	mov bp, [bp + 2]	; 3: 139 110 2
x24374:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x24376:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x24378:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x24380:	int 33	; 2: 205 33

abort$3:	; Return 0
x24382:	mov ax, [bp]	; 3: 139 70 0
x24385:	mov di, [bp + 4]	; 3: 139 126 4
x24388:	mov bp, [bp + 2]	; 3: 139 110 2
x24391:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x24393:	mov ax, [bp + 6]	; 3: 139 70 6
x24396:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x24399:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x24404:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x24409:	mov word [bp + 8], feof$5	; 5: 199 70 8 103 95
x24414:	mov [bp + 10], bp	; 3: 137 110 10
x24417:	add bp, 8	; 3: 131 197 8
x24420:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary953

feof$7:	; IntegralToIntegral £temporary954 £temporary953
x24423:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary954
x24430:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x24434:	mov ax, [bp + 6]	; 3: 139 70 6
x24437:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x24440:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x24445:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x24450:	mov word [bp + 12], feof$14	; 5: 199 70 12 144 95
x24455:	mov [bp + 14], bp	; 3: 137 110 14
x24458:	add bp, 12	; 3: 131 197 12
x24461:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary955

feof$16:	; IntegralToIntegral £temporary956 £temporary955
x24464:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary956
x24471:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x24475:	mov ax, [bp + 6]	; 3: 139 70 6
x24478:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary957 currPosition
x24481:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary957 8
x24485:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x24488:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x24493:	mov word [bp + 16], feof$24	; 5: 199 70 16 187 95
x24498:	mov [bp + 18], bp	; 3: 137 110 18
x24501:	add bp, 16	; 3: 131 197 16
x24504:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x24507:	mov eax, [bp + 12]	; 4: 102 139 70 12
x24511:	cmp [bp + 8], eax	; 4: 102 57 70 8
x24515:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary960 1
x24517:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x24520:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary960 0
x24522:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary960
x24525:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x24528:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x24531:	mov ax, [bp]	; 3: 139 70 0
x24534:	mov di, [bp + 4]	; 3: 139 126 4
x24537:	mov bp, [bp + 2]	; 3: 139 110 2
x24540:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1565 format
x24542:	mov si, bp	; 2: 137 238
x24544:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1566 £temporary1565

fscanf$2:	; BinaryAdd arg_list £temporary1566 2
x24547:	add si, 2	; 3: 131 198 2
x24550:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x24553:	mov ax, [bp + 6]	; 3: 139 70 6
x24556:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x24559:	mov ax, [bp + 8]	; 3: 139 70 8
x24562:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x24565:	mov ax, [di + 10]	; 3: 139 69 10
x24568:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x24571:	mov word [di + 12], fscanf$8	; 5: 199 69 12 14 96
x24576:	mov [di + 14], bp	; 3: 137 109 14
x24579:	mov [di + 16], di	; 3: 137 125 16
x24582:	add di, 12	; 3: 131 199 12
x24585:	mov bp, di	; 2: 137 253
x24587:	nop	; 1: 144
x24588:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1568

fscanf$10:	; SetReturnValue £temporary1568

fscanf$11:	; Return £temporary1568
x24590:	mov ax, [bp]	; 3: 139 70 0
x24593:	mov di, [bp + 4]	; 3: 139 126 4
x24596:	mov bp, [bp + 2]	; 3: 139 110 2
x24599:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x24601:	mov word [g_inStatus], 0	; 6: 199 6 74 96 0 0

vfscanf$1:	; IntegralToIntegral £temporary1573 inStream
x24607:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1573
x24610:	mov [g_inDevice], ax	; 3: 163 76 96

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x24613:	mov ax, [bp + 8]	; 3: 139 70 8
x24616:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x24619:	mov ax, [bp + 10]	; 3: 139 70 10
x24622:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x24625:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 63 96
x24630:	mov [bp + 14], bp	; 3: 137 110 14
x24633:	add bp, 12	; 3: 131 197 12
x24636:	nop	; 1: 144
x24637:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1574

vfscanf$9:	; SetReturnValue £temporary1574

vfscanf$10:	; Return £temporary1574
x24639:	mov ax, [bp]	; 3: 139 70 0
x24642:	mov di, [bp + 4]	; 3: 139 126 4
x24645:	mov bp, [bp + 2]	; 3: 139 110 2
x24648:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x24650:	db 0, 0	; 2: 0 0

g_inDevice:
x24652:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x24654:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x24659:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x24664:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x24669:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x24674:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x24679:	mov word [g_inCount], 0	; 6: 199 6 109 101 0 0

scanFormat$6:	; Assign g_inChars 0
x24685:	mov word [g_inChars], 0	; 6: 199 6 111 101 0 0

scanFormat$7:	; Assign index 0
x24691:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1360 format index
x24696:	mov si, [bp + 6]	; 3: 139 118 6
x24699:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1359 -> £temporary1360 £temporary1360 0

scanFormat$10:	; Equal 329 £temporary1359 -> £temporary1360 0
x24702:	cmp byte [si], 0	; 3: 128 60 0
x24705:	je scanFormat$329	; 4: 15 132 217 4

scanFormat$11:	; BinaryAdd £temporary1364 format index
x24709:	mov si, [bp + 6]	; 3: 139 118 6
x24712:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1363 -> £temporary1364 £temporary1364 0

scanFormat$13:	; Assign c £temporary1363 -> £temporary1364
x24715:	mov al, [si]	; 2: 138 4
x24717:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1365 c
x24720:	mov al, [bp + 10]	; 3: 138 70 10
x24723:	and ax, 255	; 3: 37 255 0
x24726:	cmp al, 0	; 2: 60 0
x24728:	jge scanFormat$15	; 2: 125 4
x24730:	neg al	; 2: 246 216
x24732:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1365 1
x24734:	inc ax	; 1: 64
x24735:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 321 percent 0
x24738:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x24742:	je scanFormat$321	; 4: 15 132 143 4

scanFormat$17:	; BinarySubtract £temporary1367 d 1
x24746:	mov ax, [bp + 55]	; 3: 139 70 55
x24749:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1367 104
x24750:	cmp ax, 104	; 3: 131 248 104
x24753:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1367 108
x24755:	cmp ax, 108	; 3: 131 248 108
x24758:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1367 76
x24760:	cmp ax, 76	; 3: 131 248 76
x24763:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1367 42
x24765:	cmp ax, 42	; 3: 131 248 42
x24768:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1367 99
x24770:	cmp ax, 99	; 3: 131 248 99
x24773:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1367 115
x24775:	cmp ax, 115	; 3: 131 248 115
x24778:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1367 100
x24782:	cmp ax, 100	; 3: 131 248 100
x24785:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1367 105
x24789:	cmp ax, 105	; 3: 131 248 105
x24792:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1367 111
x24796:	cmp ax, 111	; 3: 131 248 111
x24799:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1367 120
x24803:	cmp ax, 120	; 3: 131 248 120
x24806:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1367 117
x24810:	cmp ax, 117	; 3: 131 248 117
x24813:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1367 103
x24817:	cmp ax, 103	; 3: 131 248 103
x24820:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1367 102
x24824:	cmp ax, 102	; 3: 131 248 102
x24827:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1367 101
x24831:	cmp ax, 101	; 3: 131 248 101
x24834:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1367 91
x24838:	cmp ax, 91	; 3: 131 248 91
x24841:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 312 £temporary1367 110
x24845:	cmp ax, 110	; 3: 131 248 110
x24848:	je scanFormat$312	; 4: 15 132 7 4

scanFormat$34:	; CaseEnd £temporary1367

scanFormat$35:	; Goto 327
x24852:	jmp scanFormat$327	; 3: 233 65 4

scanFormat$36:	; Assign shortInt 1
x24855:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 327
x24860:	jmp scanFormat$327	; 3: 233 57 4

scanFormat$38:	; Assign longIntOrDouble 1
x24863:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 327
x24868:	jmp scanFormat$327	; 3: 233 49 4

scanFormat$40:	; Assign longDouble 1
x24871:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 327
x24876:	jmp scanFormat$327	; 3: 233 41 4

scanFormat$42:	; Assign star 1
x24879:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 327
x24884:	jmp scanFormat$327	; 3: 233 33 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x24887:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 69 97
x24892:	mov [bp + 59], bp	; 3: 137 110 59
x24895:	add bp, 57	; 3: 131 197 57
x24898:	jmp scanChar	; 3: 233 44 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1368

scanFormat$48:	; Assign charValue £temporary1368
x24901:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x24904:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24908:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x24910:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1372 arg_list 2
x24914:	mov si, [bp + 8]	; 3: 139 118 8
x24917:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1373 £temporary1372

scanFormat$53:	; Deref £temporary1374 -> £temporary1373 £temporary1373 0

scanFormat$54:	; Assign charPtr £temporary1374 -> £temporary1373
x24920:	mov ax, [si]	; 2: 139 4
x24922:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1375 -> charPtr charPtr 0
x24925:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1375 -> charPtr charValue
x24928:	mov al, [bp + 57]	; 3: 138 70 57
x24931:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x24933:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1376 charValue
x24938:	mov al, [bp + 57]	; 3: 138 70 57
x24941:	and ax, 255	; 3: 37 255 0
x24944:	cmp al, 0	; 2: 60 0
x24946:	jge scanFormat$59	; 2: 125 4
x24948:	neg al	; 2: 246 216
x24950:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 327 £temporary1376 -1
x24952:	cmp ax, -1	; 3: 131 248 255
x24955:	je scanFormat$327	; 4: 15 132 217 3

scanFormat$60:	; Increment g_inCount
x24959:	inc word [g_inCount]	; 4: 255 6 109 101

scanFormat$61:	; Goto 327
x24963:	jmp scanFormat$327	; 3: 233 210 3

scanFormat$62:	; NotEqual 74 star 0
x24966:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24970:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x24972:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1382 arg_list 2
x24976:	mov si, [bp + 8]	; 3: 139 118 8
x24979:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1383 £temporary1382

scanFormat$66:	; Deref £temporary1384 -> £temporary1383 £temporary1383 0

scanFormat$67:	; Assign charPtr £temporary1384 -> £temporary1383
x24982:	mov ax, [si]	; 2: 139 4
x24984:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x24987:	mov ax, [bp + 11]	; 3: 139 70 11
x24990:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x24993:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x24998:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 180 97
x25003:	mov [bp + 59], bp	; 3: 137 110 59
x25006:	add bp, 57	; 3: 131 197 57
x25009:	jmp scanString	; 3: 233 44 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x25012:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x25014:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x25019:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x25024:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 206 97
x25029:	mov [bp + 59], bp	; 3: 137 110 59
x25032:	add bp, 57	; 3: 131 197 57
x25035:	jmp scanString	; 3: 233 18 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x25038:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 327
x25043:	jmp scanFormat$327	; 3: 233 130 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x25046:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x25051:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 233 97
x25056:	mov [bp + 59], bp	; 3: 137 110 59
x25059:	add bp, 57	; 3: 131 197 57
x25062:	jmp scanLongInt	; 3: 233 123 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1387

scanFormat$86:	; Assign longValue £temporary1387
x25065:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x25069:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25073:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x25075:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25079:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x25081:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1391 arg_list 2
x25085:	mov si, [bp + 8]	; 3: 139 118 8
x25088:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1392 £temporary1391

scanFormat$92:	; Deref £temporary1393 -> £temporary1392 £temporary1392 0

scanFormat$93:	; Assign shortPtr £temporary1393 -> £temporary1392
x25091:	mov ax, [si]	; 2: 139 4
x25093:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1394 -> shortPtr shortPtr 0
x25096:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1395 longValue
x25099:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25103:	cmp eax, 0	; 4: 102 131 248 0
x25107:	jge scanFormat$96	; 2: 125 5
x25109:	neg eax	; 3: 102 247 216
x25112:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1394 -> shortPtr £temporary1395
x25114:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x25116:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x25118:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25122:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x25124:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1399 arg_list 2
x25128:	mov si, [bp + 8]	; 3: 139 118 8
x25131:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1400 £temporary1399

scanFormat$102:	; Deref £temporary1401 -> £temporary1400 £temporary1400 0

scanFormat$103:	; Assign intPtr £temporary1401 -> £temporary1400
x25134:	mov ax, [si]	; 2: 139 4
x25136:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1402 -> intPtr intPtr 0
x25139:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1403 longValue
x25142:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25146:	cmp eax, 0	; 4: 102 131 248 0
x25150:	jge scanFormat$106	; 2: 125 5
x25152:	neg eax	; 3: 102 247 216
x25155:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1402 -> intPtr £temporary1403
x25157:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x25159:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x25161:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1405 arg_list 2
x25165:	mov si, [bp + 8]	; 3: 139 118 8
x25168:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1406 £temporary1405

scanFormat$111:	; Deref £temporary1407 -> £temporary1406 £temporary1406 0

scanFormat$112:	; Assign longPtr £temporary1407 -> £temporary1406
x25171:	mov ax, [si]	; 2: 139 4
x25173:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1408 -> longPtr longPtr 0
x25176:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1408 -> longPtr longValue
x25179:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25183:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x25186:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 327
x25191:	jmp scanFormat$327	; 3: 233 238 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x25194:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x25199:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 125 98
x25204:	mov [bp + 59], bp	; 3: 137 110 59
x25207:	add bp, 57	; 3: 131 197 57
x25210:	jmp scanUnsignedLongInt	; 3: 233 33 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1410

scanFormat$122:	; Assign unsignedLongValue £temporary1410
x25213:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x25217:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25221:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x25223:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25227:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x25229:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1414 arg_list 2
x25233:	mov si, [bp + 8]	; 3: 139 118 8
x25236:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1415 £temporary1414

scanFormat$128:	; Deref £temporary1416 -> £temporary1415 £temporary1415 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1416 -> £temporary1415
x25239:	mov ax, [si]	; 2: 139 4
x25241:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1417 -> unsignedShortPtr unsignedShortPtr 0
x25244:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1418 unsignedLongValue
x25247:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1417 -> unsignedShortPtr £temporary1418
x25251:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x25253:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x25255:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25259:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x25261:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1422 arg_list 2
x25265:	mov si, [bp + 8]	; 3: 139 118 8
x25268:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1423 £temporary1422

scanFormat$138:	; Deref £temporary1424 -> £temporary1423 £temporary1423 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1424 -> £temporary1423
x25271:	mov ax, [si]	; 2: 139 4
x25273:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1425 -> unsignedIntPtr unsignedIntPtr 0
x25276:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1426 unsignedLongValue
x25279:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1425 -> unsignedIntPtr £temporary1426
x25283:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x25285:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x25287:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1428 arg_list 2
x25291:	mov si, [bp + 8]	; 3: 139 118 8
x25294:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1429 £temporary1428

scanFormat$147:	; Deref £temporary1430 -> £temporary1429 £temporary1429 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1430 -> £temporary1429
x25297:	mov ax, [si]	; 2: 139 4
x25299:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1431 -> unsignedLongPtr unsignedLongPtr 0
x25302:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1431 -> unsignedLongPtr unsignedLongValue
x25305:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25309:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x25312:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 327
x25317:	jmp scanFormat$327	; 3: 233 112 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x25320:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x25325:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 251 98
x25330:	mov [bp + 59], bp	; 3: 137 110 59
x25333:	add bp, 57	; 3: 131 197 57
x25336:	jmp scanUnsignedLongInt	; 3: 233 163 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1433

scanFormat$158:	; Assign unsignedLongValue £temporary1433
x25339:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x25343:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25347:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x25349:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25353:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x25355:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1437 arg_list 2
x25359:	mov si, [bp + 8]	; 3: 139 118 8
x25362:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1438 £temporary1437

scanFormat$164:	; Deref £temporary1439 -> £temporary1438 £temporary1438 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1439 -> £temporary1438
x25365:	mov ax, [si]	; 2: 139 4
x25367:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1440 -> unsignedShortPtr unsignedShortPtr 0
x25370:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1441 unsignedLongValue
x25373:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1440 -> unsignedShortPtr £temporary1441
x25377:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x25379:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x25381:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25385:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x25387:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1445 arg_list 2
x25391:	mov si, [bp + 8]	; 3: 139 118 8
x25394:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1446 £temporary1445

scanFormat$174:	; Deref £temporary1447 -> £temporary1446 £temporary1446 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1447 -> £temporary1446
x25397:	mov ax, [si]	; 2: 139 4
x25399:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1448 -> unsignedIntPtr unsignedIntPtr 0
x25402:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1449 unsignedLongValue
x25405:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1448 -> unsignedIntPtr £temporary1449
x25409:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x25411:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x25413:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1451 arg_list 2
x25417:	mov si, [bp + 8]	; 3: 139 118 8
x25420:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1452 £temporary1451

scanFormat$183:	; Deref £temporary1453 -> £temporary1452 £temporary1452 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1453 -> £temporary1452
x25423:	mov ax, [si]	; 2: 139 4
x25425:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1454 -> unsignedLongPtr unsignedLongPtr 0
x25428:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1454 -> unsignedLongPtr unsignedLongValue
x25431:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25435:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x25438:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 327
x25443:	jmp scanFormat$327	; 3: 233 242 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x25446:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x25451:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 121 99
x25456:	mov [bp + 59], bp	; 3: 137 110 59
x25459:	add bp, 57	; 3: 131 197 57
x25462:	jmp scanUnsignedLongInt	; 3: 233 37 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1456

scanFormat$194:	; Assign unsignedLongValue £temporary1456
x25465:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x25469:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25473:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x25475:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25479:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x25481:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1460 arg_list 2
x25485:	mov si, [bp + 8]	; 3: 139 118 8
x25488:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1461 £temporary1460

scanFormat$200:	; Deref £temporary1462 -> £temporary1461 £temporary1461 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1462 -> £temporary1461
x25491:	mov ax, [si]	; 2: 139 4
x25493:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1463 -> unsignedShortPtr unsignedShortPtr 0
x25496:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1464 unsignedLongValue
x25499:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1463 -> unsignedShortPtr £temporary1464
x25503:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x25505:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x25507:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25511:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x25513:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1468 arg_list 2
x25517:	mov si, [bp + 8]	; 3: 139 118 8
x25520:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1469 £temporary1468

scanFormat$210:	; Deref £temporary1470 -> £temporary1469 £temporary1469 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1470 -> £temporary1469
x25523:	mov ax, [si]	; 2: 139 4
x25525:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1471 -> unsignedIntPtr unsignedIntPtr 0
x25528:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1472 unsignedLongValue
x25531:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1471 -> unsignedIntPtr £temporary1472
x25535:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x25537:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x25539:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1474 arg_list 2
x25543:	mov si, [bp + 8]	; 3: 139 118 8
x25546:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1475 £temporary1474

scanFormat$219:	; Deref £temporary1476 -> £temporary1475 £temporary1475 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1476 -> £temporary1475
x25549:	mov ax, [si]	; 2: 139 4
x25551:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1477 -> unsignedLongPtr unsignedLongPtr 0
x25554:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1477 -> unsignedLongPtr unsignedLongValue
x25557:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25561:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x25564:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 327
x25569:	jmp scanFormat$327	; 3: 233 116 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x25572:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 242 99
x25577:	mov [bp + 59], bp	; 3: 137 110 59
x25580:	add bp, 57	; 3: 131 197 57
x25583:	jmp scanLongDouble	; 3: 233 24 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1479

scanFormat$229:	; PopFloat longDoubleValue
x25586:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x25589:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25593:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x25595:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25599:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x25601:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1483 arg_list 2
x25605:	mov si, [bp + 8]	; 3: 139 118 8
x25608:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1484 £temporary1483

scanFormat$235:	; Deref £temporary1485 -> £temporary1484 £temporary1484 0

scanFormat$236:	; Assign doublePtr £temporary1485 -> £temporary1484
x25611:	mov ax, [si]	; 2: 139 4
x25613:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1486 -> doublePtr doublePtr 0
x25616:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x25619:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1486 -> doublePtr
x25622:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x25624:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x25626:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x25630:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x25632:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1489 arg_list 2
x25636:	mov si, [bp + 8]	; 3: 139 118 8
x25639:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1490 £temporary1489

scanFormat$245:	; Deref £temporary1491 -> £temporary1490 £temporary1490 0

scanFormat$246:	; Assign longDoublePtr £temporary1491 -> £temporary1490
x25642:	mov ax, [si]	; 2: 139 4
x25644:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1492 -> longDoublePtr longDoublePtr 0
x25647:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x25650:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1492 -> longDoublePtr
x25653:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x25655:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x25657:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1494 arg_list 2
x25661:	mov si, [bp + 8]	; 3: 139 118 8
x25664:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1495 £temporary1494

scanFormat$254:	; Deref £temporary1496 -> £temporary1495 £temporary1495 0

scanFormat$255:	; Assign floatPtr £temporary1496 -> £temporary1495
x25667:	mov ax, [si]	; 2: 139 4
x25669:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1497 -> floatPtr floatPtr 0
x25672:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x25675:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1497 -> floatPtr
x25678:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x25680:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 327
x25685:	jmp scanFormat$327	; 3: 233 0 1

scanFormat$261:	; Assign not 0
x25688:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x25693:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1503 format index
x25696:	mov si, [bp + 6]	; 3: 139 118 6
x25699:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1502 -> £temporary1503 £temporary1503 0

scanFormat$265:	; NotEqual 268 £temporary1502 -> £temporary1503 94
x25702:	cmp byte [si], 94	; 3: 128 60 94
x25705:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x25707:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x25712:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x25715:	mov ax, [bp + 31]	; 3: 139 70 31
x25718:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1507 format index
x25721:	mov si, [bp + 6]	; 3: 139 118 6
x25724:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1506 -> £temporary1507 £temporary1507 0

scanFormat$271:	; Equal 274 £temporary1506 -> £temporary1507 93
x25727:	cmp byte [si], 93	; 3: 128 60 93
x25730:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x25732:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x25735:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinarySubtract size index startIndex
x25737:	mov ax, [bp + 31]	; 3: 139 70 31
x25740:	sub ax, [bp + 59]	; 3: 43 70 59
x25743:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$275:	; BinaryAdd £temporary1512 format index
x25746:	mov si, [bp + 6]	; 3: 139 118 6
x25749:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$276:	; Deref £temporary1511 -> £temporary1512 £temporary1512 0

scanFormat$277:	; Assign c £temporary1511 -> £temporary1512
x25752:	mov al, [si]	; 2: 138 4
x25754:	mov [bp + 63], al	; 3: 136 70 63

scanFormat$278:	; BinaryAdd £temporary1514 format index
x25757:	mov si, [bp + 6]	; 3: 139 118 6
x25760:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$279:	; Deref £temporary1513 -> £temporary1514 £temporary1514 0

scanFormat$280:	; Assign £temporary1513 -> £temporary1514 0
x25763:	mov byte [si], 0	; 3: 198 4 0

scanFormat$281:	; NotEqual 298 star 0
x25766:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25770:	jne scanFormat$298	; 2: 117 58

scanFormat$282:	; BinaryAdd arg_list arg_list 2
x25772:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$283:	; BinarySubtract £temporary1518 arg_list 2
x25776:	mov si, [bp + 8]	; 3: 139 118 8
x25779:	sub si, 2	; 3: 131 238 2

scanFormat$284:	; IntegralToIntegral £temporary1519 £temporary1518

scanFormat$285:	; Deref £temporary1520 -> £temporary1519 £temporary1519 0

scanFormat$286:	; Assign string £temporary1520 -> £temporary1519
x25782:	mov ax, [si]	; 2: 139 4
x25784:	mov [bp + 64], ax	; 3: 137 70 64

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$288:	; Parameter 66 string 6
x25787:	mov ax, [bp + 64]	; 3: 139 70 64
x25790:	mov [bp + 72], ax	; 3: 137 70 72

scanFormat$289:	; BinaryAdd £temporary1522 format startIndex
x25793:	mov si, [bp + 6]	; 3: 139 118 6
x25796:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$290:	; Deref £temporary1521 -> £temporary1522 £temporary1522 0

scanFormat$291:	; address £temporary1523 £temporary1521 -> £temporary1522

scanFormat$292:	; Parameter 66 £temporary1523 8
x25799:	mov [bp + 74], si	; 3: 137 118 74

scanFormat$293:	; Parameter 66 size 10
x25802:	mov ax, [bp + 61]	; 3: 139 70 61
x25805:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$294:	; Parameter 66 not 12
x25808:	mov ax, [bp + 57]	; 3: 139 70 57
x25811:	mov [bp + 78], ax	; 3: 137 70 78

scanFormat$295:	; Call 66 scanPattern 0
x25814:	mov word [bp + 66], scanFormat$296	; 5: 199 70 66 228 100
x25819:	mov [bp + 68], bp	; 3: 137 110 68
x25822:	add bp, 66	; 3: 131 197 66
x25825:	jmp scanPattern	; 3: 233 97 11

scanFormat$296:	; PostCall 66

scanFormat$297:	; Goto 308
x25828:	jmp scanFormat$308	; 2: 235 40

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$299:	; Parameter 64 0 6
x25830:	mov word [bp + 70], 0	; 5: 199 70 70 0 0

scanFormat$300:	; BinaryAdd £temporary1526 format startIndex
x25835:	mov si, [bp + 6]	; 3: 139 118 6
x25838:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$301:	; Deref £temporary1525 -> £temporary1526 £temporary1526 0

scanFormat$302:	; address £temporary1527 £temporary1525 -> £temporary1526

scanFormat$303:	; Parameter 64 £temporary1527 8
x25841:	mov [bp + 72], si	; 3: 137 118 72

scanFormat$304:	; Parameter 64 size 10
x25844:	mov ax, [bp + 61]	; 3: 139 70 61
x25847:	mov [bp + 74], ax	; 3: 137 70 74

scanFormat$305:	; Parameter 64 not 12
x25850:	mov ax, [bp + 57]	; 3: 139 70 57
x25853:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$306:	; Call 64 scanPattern 0
x25856:	mov word [bp + 64], scanFormat$307	; 5: 199 70 64 14 101
x25861:	mov [bp + 66], bp	; 3: 137 110 66
x25864:	add bp, 64	; 3: 131 197 64
x25867:	jmp scanPattern	; 3: 233 55 11

scanFormat$307:	; PostCall 64

scanFormat$308:	; BinaryAdd £temporary1530 format index
x25870:	mov si, [bp + 6]	; 3: 139 118 6
x25873:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$309:	; Deref £temporary1529 -> £temporary1530 £temporary1530 0

scanFormat$310:	; Assign £temporary1529 -> £temporary1530 c
x25876:	mov al, [bp + 63]	; 3: 138 70 63
x25879:	mov [si], al	; 2: 136 4

scanFormat$311:	; Goto 327
x25881:	jmp scanFormat$327	; 2: 235 61

scanFormat$312:	; BinaryAdd arg_list arg_list 2
x25883:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$313:	; BinarySubtract £temporary1532 arg_list 2
x25887:	mov si, [bp + 8]	; 3: 139 118 8
x25890:	sub si, 2	; 3: 131 238 2

scanFormat$314:	; IntegralToIntegral £temporary1533 £temporary1532

scanFormat$315:	; Deref £temporary1534 -> £temporary1533 £temporary1533 0

scanFormat$316:	; Assign charsPtr £temporary1534 -> £temporary1533
x25893:	mov ax, [si]	; 2: 139 4
x25895:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$317:	; Deref £temporary1535 -> charsPtr charsPtr 0
x25898:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$318:	; Assign £temporary1535 -> charsPtr g_inChars
x25901:	mov ax, [g_inChars]	; 3: 161 111 101
x25904:	mov [si], ax	; 2: 137 4

scanFormat$319:	; Assign percent 0
x25906:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$320:	; Goto 327
x25911:	jmp scanFormat$327	; 2: 235 31

scanFormat$321:	; NotEqual 327 c 37
x25913:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x25917:	jne scanFormat$327	; 2: 117 25

scanFormat$322:	; Assign percent 1
x25919:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$323:	; Assign shortInt 0
x25924:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$324:	; Assign longIntOrDouble 0
x25929:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$325:	; Assign longDouble 0
x25934:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$326:	; Assign star 0
x25939:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$327:	; Increment index
x25944:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$328:	; Goto 8
x25947:	jmp scanFormat$8	; 3: 233 26 251

scanFormat$329:	; SetReturnValue g_inCount
x25950:	mov bx, [g_inCount]	; 4: 139 30 109 101

scanFormat$330:	; Return g_inCount
x25954:	mov ax, [bp]	; 3: 139 70 0
x25957:	mov di, [bp + 4]	; 3: 139 126 4
x25960:	mov bp, [bp + 2]	; 3: 139 110 2
x25963:	jmp ax	; 2: 255 224

scanFormat$331:	; FunctionEnd scanFormat

g_inCount:
x25965:	db 0, 0	; 2: 0 0

g_inChars:
x25967:	db 0, 0	; 2: 0 0

scanChar:	; Assign c 0
x25969:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x25973:	mov ax, [g_inStatus]	; 3: 161 74 96
x25976:	cmp ax, 0	; 3: 131 248 0
x25979:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x25981:	cmp ax, 1	; 3: 131 248 1
x25984:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x25986:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1034 g_inDevice
x25988:	mov ax, [g_inDevice]	; 3: 161 76 96

scanChar$6:	; Assign stream £temporary1034
x25991:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1035 -> stream stream 2
x25994:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1035 -> stream
x25997:	mov ax, [si + 2]	; 3: 139 68 2
x26000:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x26003:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x26005:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x26008:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1040 c
x26011:	mov dx, bp	; 2: 137 234
x26013:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1040

scanChar$14:	; Interrupt 33
x26016:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x26018:	inc word [g_inChars]	; 4: 255 6 111 101

scanChar$16:	; SetReturnValue c
x26022:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x26025:	mov ax, [bp]	; 3: 139 70 0
x26028:	mov di, [bp + 4]	; 3: 139 126 4
x26031:	mov bp, [bp + 2]	; 3: 139 110 2
x26034:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1042 g_inDevice
x26036:	mov ax, [g_inDevice]	; 3: 161 76 96

scanChar$19:	; Assign inString £temporary1042
x26039:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1043 g_inChars
x26042:	mov ax, [g_inChars]	; 3: 161 111 101

scanChar$21:	; Increment g_inChars
x26045:	inc word [g_inChars]	; 4: 255 6 111 101

scanChar$22:	; BinaryAdd £temporary1045 inString £temporary1043
x26049:	mov si, [bp + 11]	; 3: 139 118 11
x26052:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1044 -> £temporary1045 £temporary1045 0

scanChar$24:	; SetReturnValue £temporary1044 -> £temporary1045
x26054:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1044 -> £temporary1045
x26056:	mov ax, [bp]	; 3: 139 70 0
x26059:	mov di, [bp + 4]	; 3: 139 126 4
x26062:	mov bp, [bp + 2]	; 3: 139 110 2
x26065:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x26067:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x26069:	mov ax, [bp]	; 3: 139 70 0
x26072:	mov di, [bp + 4]	; 3: 139 126 4
x26075:	mov bp, [bp + 2]	; 3: 139 110 2
x26078:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x26080:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x26085:	mov word [bp + 12], scanString$3	; 5: 199 70 12 243 101
x26090:	mov [bp + 14], bp	; 3: 137 110 14
x26093:	add bp, 12	; 3: 131 197 12
x26096:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1110

scanString$5:	; Assign input £temporary1110
x26099:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x26102:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1111 input
x26107:	mov al, [bp + 12]	; 3: 138 70 12
x26110:	and ax, 255	; 3: 37 255 0
x26113:	cmp al, 0	; 2: 60 0
x26115:	jge scanString$9	; 2: 125 4
x26117:	neg al	; 2: 246 216
x26119:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1111 6
x26121:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x26124:	mov word [bp + 15], scanString$11	; 5: 199 70 15 26 102
x26129:	mov [bp + 17], bp	; 3: 137 110 17
x26132:	add bp, 15	; 3: 131 197 15
x26135:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1112

scanString$13:	; Equal 20 £temporary1112 0
x26138:	cmp bx, 0	; 3: 131 251 0
x26141:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x26143:	mov word [bp + 15], scanString$16	; 5: 199 70 15 45 102
x26148:	mov [bp + 17], bp	; 3: 137 110 17
x26151:	add bp, 15	; 3: 131 197 15
x26154:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1113

scanString$18:	; Assign input £temporary1113
x26157:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x26160:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x26162:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26166:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x26170:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26174:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1117 input
x26176:	mov al, [bp + 12]	; 3: 138 70 12
x26179:	and ax, 255	; 3: 37 255 0
x26182:	cmp al, 0	; 2: 60 0
x26184:	jge scanString$24	; 2: 125 4
x26186:	neg al	; 2: 246 216
x26188:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1117 6
x26190:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x26193:	mov word [bp + 15], scanString$26	; 5: 199 70 15 95 102
x26198:	mov [bp + 17], bp	; 3: 137 110 17
x26201:	add bp, 15	; 3: 131 197 15
x26204:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1118

scanString$28:	; NotEqual 45 £temporary1118 0
x26207:	cmp bx, 0	; 3: 131 251 0
x26210:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1121 input
x26212:	mov al, [bp + 12]	; 3: 138 70 12
x26215:	and ax, 255	; 3: 37 255 0
x26218:	cmp al, 0	; 2: 60 0
x26220:	jge scanString$30	; 2: 125 4
x26222:	neg al	; 2: 246 216
x26224:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1121 -1
x26226:	cmp ax, -1	; 3: 131 248 255
x26229:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x26231:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26235:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1126 index
x26237:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x26240:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1128 string £temporary1126
x26243:	mov si, [bp + 6]	; 3: 139 118 6
x26246:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1127 -> £temporary1128 £temporary1128 0

scanString$36:	; Assign £temporary1127 -> £temporary1128 input
x26248:	mov al, [bp + 12]	; 3: 138 70 12
x26251:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x26253:	mov word [bp + 15], scanString$39	; 5: 199 70 15 155 102
x26258:	mov [bp + 17], bp	; 3: 137 110 17
x26261:	add bp, 15	; 3: 131 197 15
x26264:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1129

scanString$41:	; Assign input £temporary1129
x26267:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x26270:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x26275:	inc word [g_inChars]	; 4: 255 6 111 101

scanString$44:	; Goto 22
x26279:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1132 string index
x26281:	mov si, [bp + 6]	; 3: 139 118 6
x26284:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1131 -> £temporary1132 £temporary1132 0

scanString$47:	; Assign £temporary1131 -> £temporary1132 0
x26287:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x26290:	inc word [g_inChars]	; 4: 255 6 111 101

scanString$49:	; Goto 126
x26294:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1134 precision
x26297:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x26300:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1134 0
x26303:	cmp ax, 0	; 3: 131 248 0
x26306:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1136 input
x26308:	mov al, [bp + 12]	; 3: 138 70 12
x26311:	and ax, 255	; 3: 37 255 0
x26314:	cmp al, 0	; 2: 60 0
x26316:	jge scanString$55	; 2: 125 4
x26318:	neg al	; 2: 246 216
x26320:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1136 6
x26322:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x26325:	mov word [bp + 15], scanString$57	; 5: 199 70 15 227 102
x26330:	mov [bp + 17], bp	; 3: 137 110 17
x26333:	add bp, 15	; 3: 131 197 15
x26336:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1137

scanString$59:	; NotEqual 76 £temporary1137 0
x26339:	cmp bx, 0	; 3: 131 251 0
x26342:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1140 input
x26344:	mov al, [bp + 12]	; 3: 138 70 12
x26347:	and ax, 255	; 3: 37 255 0
x26350:	cmp al, 0	; 2: 60 0
x26352:	jge scanString$61	; 2: 125 4
x26354:	neg al	; 2: 246 216
x26356:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1140 -1
x26358:	cmp ax, -1	; 3: 131 248 255
x26361:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x26363:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26367:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1146 index
x26369:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x26372:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1148 string £temporary1146
x26375:	mov si, [bp + 6]	; 3: 139 118 6
x26378:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1147 -> £temporary1148 £temporary1148 0

scanString$67:	; Assign £temporary1147 -> £temporary1148 input
x26380:	mov al, [bp + 12]	; 3: 138 70 12
x26383:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x26385:	mov word [bp + 15], scanString$70	; 5: 199 70 15 31 103
x26390:	mov [bp + 17], bp	; 3: 137 110 17
x26393:	add bp, 15	; 3: 131 197 15
x26396:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1149

scanString$72:	; Assign input £temporary1149
x26399:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x26402:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x26407:	inc word [g_inChars]	; 4: 255 6 111 101

scanString$75:	; Goto 50
x26411:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x26413:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26417:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1153 string index
x26421:	mov si, [bp + 6]	; 3: 139 118 6
x26424:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1152 -> £temporary1153 £temporary1153 0

scanString$79:	; Assign £temporary1152 -> £temporary1153 0
x26427:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x26430:	inc word [g_inChars]	; 4: 255 6 111 101

scanString$81:	; Goto 126
x26434:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x26437:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26441:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1156 input
x26443:	mov al, [bp + 12]	; 3: 138 70 12
x26446:	and ax, 255	; 3: 37 255 0
x26449:	cmp al, 0	; 2: 60 0
x26451:	jge scanString$85	; 2: 125 4
x26453:	neg al	; 2: 246 216
x26455:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1156 6
x26457:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x26460:	mov word [bp + 15], scanString$87	; 5: 199 70 15 106 103
x26465:	mov [bp + 17], bp	; 3: 137 110 17
x26468:	add bp, 15	; 3: 131 197 15
x26471:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1157

scanString$89:	; NotEqual 101 £temporary1157 0
x26474:	cmp bx, 0	; 3: 131 251 0
x26477:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1160 input
x26479:	mov al, [bp + 12]	; 3: 138 70 12
x26482:	and ax, 255	; 3: 37 255 0
x26485:	cmp al, 0	; 2: 60 0
x26487:	jge scanString$91	; 2: 125 4
x26489:	neg al	; 2: 246 216
x26491:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1160 -1
x26493:	cmp ax, -1	; 3: 131 248 255
x26496:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x26498:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26502:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x26504:	mov word [bp + 15], scanString$95	; 5: 199 70 15 150 103
x26509:	mov [bp + 17], bp	; 3: 137 110 17
x26512:	add bp, 15	; 3: 131 197 15
x26515:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1165

scanString$97:	; Assign input £temporary1165
x26518:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x26521:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x26526:	inc word [g_inChars]	; 4: 255 6 111 101

scanString$100:	; Goto 83
x26530:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x26532:	inc word [g_inChars]	; 4: 255 6 111 101

scanString$102:	; Goto 126
x26536:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1168 precision
x26538:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x26541:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1168 0
x26544:	cmp ax, 0	; 3: 131 248 0
x26547:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1170 input
x26549:	mov al, [bp + 12]	; 3: 138 70 12
x26552:	and ax, 255	; 3: 37 255 0
x26555:	cmp al, 0	; 2: 60 0
x26557:	jge scanString$108	; 2: 125 4
x26559:	neg al	; 2: 246 216
x26561:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1170 6
x26563:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x26566:	mov word [bp + 15], scanString$110	; 5: 199 70 15 212 103
x26571:	mov [bp + 17], bp	; 3: 137 110 17
x26574:	add bp, 15	; 3: 131 197 15
x26577:	nop	; 1: 144
x26578:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1171

scanString$112:	; NotEqual 124 £temporary1171 0
x26580:	cmp bx, 0	; 3: 131 251 0
x26583:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1174 input
x26585:	mov al, [bp + 12]	; 3: 138 70 12
x26588:	and ax, 255	; 3: 37 255 0
x26591:	cmp al, 0	; 2: 60 0
x26593:	jge scanString$114	; 2: 125 4
x26595:	neg al	; 2: 246 216
x26597:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1174 -1
x26599:	cmp ax, -1	; 3: 131 248 255
x26602:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x26604:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26608:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x26610:	mov word [bp + 15], scanString$118	; 5: 199 70 15 0 104
x26615:	mov [bp + 17], bp	; 3: 137 110 17
x26618:	add bp, 15	; 3: 131 197 15
x26621:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1180

scanString$120:	; Assign input £temporary1180
x26624:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x26627:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x26632:	inc word [g_inChars]	; 4: 255 6 111 101

scanString$123:	; Goto 103
x26636:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x26638:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26642:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x26644:	inc word [g_inChars]	; 4: 255 6 111 101

scanString$126:	; Equal 128 found 0
x26648:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x26652:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x26654:	inc word [g_inCount]	; 4: 255 6 109 101

scanString$128:	; Return 0
x26658:	mov ax, [bp]	; 3: 139 70 0
x26661:	mov di, [bp + 4]	; 3: 139 126 4
x26664:	mov bp, [bp + 2]	; 3: 139 110 2
x26667:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x26669:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x26673:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x26675:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x26679:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x26681:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x26685:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x26687:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x26691:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x26693:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x26697:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x26699:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x26703:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary249 1
x26705:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x26708:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary249 0
x26710:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary249

isspace$10:	; Return £temporary249
x26713:	mov ax, [bp]	; 3: 139 70 0
x26716:	mov di, [bp + 4]	; 3: 139 126 4
x26719:	mov bp, [bp + 2]	; 3: 139 110 2
x26722:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x26724:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x26732:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x26737:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x26742:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 132 104
x26747:	mov [bp + 18], bp	; 3: 137 110 18
x26750:	add bp, 16	; 3: 131 197 16
x26753:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1243

scanLongInt$7:	; Assign input £temporary1243
x26756:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1244 input
x26759:	mov al, [bp + 16]	; 3: 138 70 16
x26762:	and ax, 255	; 3: 37 255 0
x26765:	cmp al, 0	; 2: 60 0
x26767:	jge scanLongInt$10	; 2: 125 4
x26769:	neg al	; 2: 246 216
x26771:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1244 6
x26773:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x26776:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 166 104
x26781:	mov [bp + 19], bp	; 3: 137 110 19
x26784:	add bp, 17	; 3: 131 197 17
x26787:	nop	; 1: 144
x26788:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1245

scanLongInt$14:	; Equal 21 £temporary1245 0
x26790:	cmp bx, 0	; 3: 131 251 0
x26793:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x26795:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 185 104
x26800:	mov [bp + 19], bp	; 3: 137 110 19
x26803:	add bp, 17	; 3: 131 197 17
x26806:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1246

scanLongInt$19:	; Assign input £temporary1246
x26809:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x26812:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x26814:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x26818:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x26820:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 210 104
x26825:	mov [bp + 19], bp	; 3: 137 110 19
x26828:	add bp, 17	; 3: 131 197 17
x26831:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1249

scanLongInt$26:	; Assign input £temporary1249
x26834:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x26837:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x26839:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x26843:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x26845:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x26850:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 240 104
x26855:	mov [bp + 19], bp	; 3: 137 110 19
x26858:	add bp, 17	; 3: 131 197 17
x26861:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1251

scanLongInt$34:	; Assign input £temporary1251
x26864:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x26867:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26871:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x26873:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x26877:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x26879:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 13 105
x26884:	mov [bp + 19], bp	; 3: 137 110 19
x26887:	add bp, 17	; 3: 131 197 17
x26890:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1254

scanLongInt$41:	; Assign input £temporary1254
x26893:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1255 input
x26896:	mov al, [bp + 16]	; 3: 138 70 16
x26899:	and ax, 255	; 3: 37 255 0
x26902:	cmp al, 0	; 2: 60 0
x26904:	jge scanLongInt$44	; 2: 125 4
x26906:	neg al	; 2: 246 216
x26908:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1255 6
x26910:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x26913:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 47 105
x26918:	mov [bp + 19], bp	; 3: 137 110 19
x26921:	add bp, 17	; 3: 131 197 17
x26924:	jmp tolower	; 3: 233 239 187

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1256

scanLongInt$48:	; NotEqual 56 £temporary1256 120
x26927:	cmp bx, 120	; 3: 131 251 120
x26930:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x26932:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x26937:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 71 105
x26942:	mov [bp + 19], bp	; 3: 137 110 19
x26945:	add bp, 17	; 3: 131 197 17
x26948:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1258

scanLongInt$54:	; Assign input £temporary1258
x26951:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x26954:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x26956:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x26961:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x26963:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x26968:	mov al, [bp + 16]	; 3: 138 70 16
x26971:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x26974:	mov ax, [bp + 6]	; 3: 139 70 6
x26977:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x26980:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 114 105
x26985:	mov [bp + 19], bp	; 3: 137 110 19
x26988:	add bp, 17	; 3: 131 197 17
x26991:	jmp @2723$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1259

scanLongInt$65:	; Equal 82 £temporary1259 0
x26994:	cmp bx, 0	; 3: 131 251 0
x26997:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1260 base
x26999:	mov bx, [bp + 6]	; 3: 139 94 6
x27002:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x27009:	cmp bx, 0	; 3: 131 251 0
x27012:	jge scanLongInt$67	; 2: 125 5
x27014:	neg bx	; 2: 247 219
x27016:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1260
x27019:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27023:	xor edx, edx	; 3: 102 49 210
x27026:	imul ebx	; 3: 102 247 235
x27029:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x27033:	mov al, [bp + 16]	; 3: 138 70 16
x27036:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x27039:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 173 105
x27044:	mov [bp + 19], bp	; 3: 137 110 19
x27047:	add bp, 17	; 3: 131 197 17
x27050:	jmp @2787$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1262

scanLongInt$73:	; IntegralToIntegral £temporary1263 £temporary1262
x27053:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x27060:	cmp bx, 0	; 3: 131 251 0
x27063:	jge scanLongInt$74	; 2: 125 5
x27065:	neg bx	; 2: 247 219
x27067:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1263
x27070:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x27074:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 208 105
x27079:	mov [bp + 19], bp	; 3: 137 110 19
x27082:	add bp, 17	; 3: 131 197 17
x27085:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1265

scanLongInt$79:	; Assign input £temporary1265
x27088:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x27091:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x27096:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x27099:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x27103:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1267 longValue
x27105:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27109:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1267
x27112:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x27116:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x27120:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x27122:	inc word [g_inCount]	; 4: 255 6 109 101

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x27126:	mov al, [bp + 16]	; 3: 138 70 16
x27129:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x27132:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 10 106
x27137:	mov [bp + 19], bp	; 3: 137 110 19
x27140:	add bp, 17	; 3: 131 197 17
x27143:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x27146:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x27150:	mov ax, [bp]	; 3: 139 70 0
x27153:	mov di, [bp + 4]	; 3: 139 126 4
x27156:	mov bp, [bp + 2]	; 3: 139 110 2
x27159:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@2723$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2723$isDigitInBase$1:	; IntegralToIntegral £temporary1191 c
x27161:	mov al, [bp + 6]	; 3: 138 70 6
x27164:	and ax, 255	; 3: 37 255 0
x27167:	cmp al, 0	; 2: 60 0
x27169:	jge @2723$isDigitInBase$2	; 2: 125 4
x27171:	neg al	; 2: 246 216
x27173:	neg ax	; 2: 247 216

@2723$isDigitInBase$2:	; Parameter 9 £temporary1191 6
x27175:	mov [bp + 15], ax	; 3: 137 70 15

@2723$isDigitInBase$3:	; Call 9 isdigit 0
x27178:	mov word [bp + 9], @2723$isDigitInBase$4	; 5: 199 70 9 56 106
x27183:	mov [bp + 11], bp	; 3: 137 110 11
x27186:	add bp, 9	; 3: 131 197 9
x27189:	jmp isdigit	; 3: 233 52 193

@2723$isDigitInBase$4:	; PostCall 9

@2723$isDigitInBase$5:	; GetReturnValue £temporary1192

@2723$isDigitInBase$6:	; Equal 17 £temporary1192 0
x27192:	cmp bx, 0	; 3: 131 251 0
x27195:	je @2723$isDigitInBase$17	; 2: 116 52

@2723$isDigitInBase$7:	; BinarySubtract £temporary1193 c 48
x27197:	mov al, [bp + 6]	; 3: 138 70 6
x27200:	sub al, 48	; 2: 44 48

@2723$isDigitInBase$8:	; IntegralToIntegral £temporary1194 £temporary1193
x27202:	and ax, 255	; 3: 37 255 0
x27205:	cmp al, 0	; 2: 60 0
x27207:	jge @2723$isDigitInBase$9	; 2: 125 4
x27209:	neg al	; 2: 246 216
x27211:	neg ax	; 2: 247 216

@2723$isDigitInBase$9:	; Assign value £temporary1194
x27213:	mov [bp + 9], ax	; 3: 137 70 9

@2723$isDigitInBase$10:	; SignedLessThan 14 value 0
x27216:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27220:	jl @2723$isDigitInBase$14	; 2: 124 13

@2723$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x27222:	mov ax, [bp + 7]	; 3: 139 70 7
x27225:	cmp [bp + 9], ax	; 3: 57 70 9
x27228:	jge @2723$isDigitInBase$14	; 2: 125 5

@2723$isDigitInBase$12:	; Assign £temporary1198 1
x27230:	mov bx, 1	; 3: 187 1 0

@2723$isDigitInBase$13:	; Goto 15
x27233:	jmp @2723$isDigitInBase$15	; 2: 235 3

@2723$isDigitInBase$14:	; Assign £temporary1198 0
x27235:	mov bx, 0	; 3: 187 0 0

@2723$isDigitInBase$15:	; SetReturnValue £temporary1198

@2723$isDigitInBase$16:	; Return £temporary1198
x27238:	mov ax, [bp]	; 3: 139 70 0
x27241:	mov di, [bp + 4]	; 3: 139 126 4
x27244:	mov bp, [bp + 2]	; 3: 139 110 2
x27247:	jmp ax	; 2: 255 224

@2723$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2723$isDigitInBase$18:	; IntegralToIntegral £temporary1199 c
x27249:	mov al, [bp + 6]	; 3: 138 70 6
x27252:	and ax, 255	; 3: 37 255 0
x27255:	cmp al, 0	; 2: 60 0
x27257:	jge @2723$isDigitInBase$19	; 2: 125 4
x27259:	neg al	; 2: 246 216
x27261:	neg ax	; 2: 247 216

@2723$isDigitInBase$19:	; Parameter 9 £temporary1199 6
x27263:	mov [bp + 15], ax	; 3: 137 70 15

@2723$isDigitInBase$20:	; Call 9 islower 0
x27266:	mov word [bp + 9], @2723$isDigitInBase$21	; 5: 199 70 9 144 106
x27271:	mov [bp + 11], bp	; 3: 137 110 11
x27274:	add bp, 9	; 3: 131 197 9
x27277:	jmp islower	; 3: 233 165 0

@2723$isDigitInBase$21:	; PostCall 9

@2723$isDigitInBase$22:	; GetReturnValue £temporary1200

@2723$isDigitInBase$23:	; Equal 34 £temporary1200 0
x27280:	cmp bx, 0	; 3: 131 251 0
x27283:	je @2723$isDigitInBase$34	; 2: 116 55

@2723$isDigitInBase$24:	; BinarySubtract £temporary1201 c 97
x27285:	mov al, [bp + 6]	; 3: 138 70 6
x27288:	sub al, 97	; 2: 44 97

@2723$isDigitInBase$25:	; IntegralToIntegral £temporary1202 £temporary1201
x27290:	and ax, 255	; 3: 37 255 0
x27293:	cmp al, 0	; 2: 60 0
x27295:	jge @2723$isDigitInBase$26	; 2: 125 4
x27297:	neg al	; 2: 246 216
x27299:	neg ax	; 2: 247 216

@2723$isDigitInBase$26:	; BinaryAdd value £temporary1202 10
x27301:	add ax, 10	; 3: 131 192 10
x27304:	mov [bp + 9], ax	; 3: 137 70 9

@2723$isDigitInBase$27:	; SignedLessThan 31 value 0
x27307:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27311:	jl @2723$isDigitInBase$31	; 2: 124 13

@2723$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x27313:	mov ax, [bp + 7]	; 3: 139 70 7
x27316:	cmp [bp + 9], ax	; 3: 57 70 9
x27319:	jge @2723$isDigitInBase$31	; 2: 125 5

@2723$isDigitInBase$29:	; Assign £temporary1207 1
x27321:	mov bx, 1	; 3: 187 1 0

@2723$isDigitInBase$30:	; Goto 32
x27324:	jmp @2723$isDigitInBase$32	; 2: 235 3

@2723$isDigitInBase$31:	; Assign £temporary1207 0
x27326:	mov bx, 0	; 3: 187 0 0

@2723$isDigitInBase$32:	; SetReturnValue £temporary1207

@2723$isDigitInBase$33:	; Return £temporary1207
x27329:	mov ax, [bp]	; 3: 139 70 0
x27332:	mov di, [bp + 4]	; 3: 139 126 4
x27335:	mov bp, [bp + 2]	; 3: 139 110 2
x27338:	jmp ax	; 2: 255 224

@2723$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2723$isDigitInBase$35:	; IntegralToIntegral £temporary1208 c
x27340:	mov al, [bp + 6]	; 3: 138 70 6
x27343:	and ax, 255	; 3: 37 255 0
x27346:	cmp al, 0	; 2: 60 0
x27348:	jge @2723$isDigitInBase$36	; 2: 125 4
x27350:	neg al	; 2: 246 216
x27352:	neg ax	; 2: 247 216

@2723$isDigitInBase$36:	; Parameter 9 £temporary1208 6
x27354:	mov [bp + 15], ax	; 3: 137 70 15

@2723$isDigitInBase$37:	; Call 9 isupper 0
x27357:	mov word [bp + 9], @2723$isDigitInBase$38	; 5: 199 70 9 235 106
x27362:	mov [bp + 11], bp	; 3: 137 110 11
x27365:	add bp, 9	; 3: 131 197 9
x27368:	jmp isupper	; 3: 233 33 179

@2723$isDigitInBase$38:	; PostCall 9

@2723$isDigitInBase$39:	; GetReturnValue £temporary1209

@2723$isDigitInBase$40:	; Equal 51 £temporary1209 0
x27371:	cmp bx, 0	; 3: 131 251 0
x27374:	je @2723$isDigitInBase$51	; 2: 116 55

@2723$isDigitInBase$41:	; BinarySubtract £temporary1210 c 65
x27376:	mov al, [bp + 6]	; 3: 138 70 6
x27379:	sub al, 65	; 2: 44 65

@2723$isDigitInBase$42:	; IntegralToIntegral £temporary1211 £temporary1210
x27381:	and ax, 255	; 3: 37 255 0
x27384:	cmp al, 0	; 2: 60 0
x27386:	jge @2723$isDigitInBase$43	; 2: 125 4
x27388:	neg al	; 2: 246 216
x27390:	neg ax	; 2: 247 216

@2723$isDigitInBase$43:	; BinaryAdd value £temporary1211 10
x27392:	add ax, 10	; 3: 131 192 10
x27395:	mov [bp + 9], ax	; 3: 137 70 9

@2723$isDigitInBase$44:	; SignedLessThan 48 value 0
x27398:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27402:	jl @2723$isDigitInBase$48	; 2: 124 13

@2723$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x27404:	mov ax, [bp + 7]	; 3: 139 70 7
x27407:	cmp [bp + 9], ax	; 3: 57 70 9
x27410:	jge @2723$isDigitInBase$48	; 2: 125 5

@2723$isDigitInBase$46:	; Assign £temporary1216 1
x27412:	mov bx, 1	; 3: 187 1 0

@2723$isDigitInBase$47:	; Goto 49
x27415:	jmp @2723$isDigitInBase$49	; 2: 235 3

@2723$isDigitInBase$48:	; Assign £temporary1216 0
x27417:	mov bx, 0	; 3: 187 0 0

@2723$isDigitInBase$49:	; SetReturnValue £temporary1216

@2723$isDigitInBase$50:	; Return £temporary1216
x27420:	mov ax, [bp]	; 3: 139 70 0
x27423:	mov di, [bp + 4]	; 3: 139 126 4
x27426:	mov bp, [bp + 2]	; 3: 139 110 2
x27429:	jmp ax	; 2: 255 224

@2723$isDigitInBase$51:	; SetReturnValue 0
x27431:	mov bx, 0	; 3: 187 0 0

@2723$isDigitInBase$52:	; Return 0
x27434:	mov ax, [bp]	; 3: 139 70 0
x27437:	mov di, [bp + 4]	; 3: 139 126 4
x27440:	mov bp, [bp + 2]	; 3: 139 110 2
x27443:	jmp ax	; 2: 255 224

@2723$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x27445:	mov word [bp + 8], islower$2	; 5: 199 70 8 67 107
x27450:	mov [bp + 10], bp	; 3: 137 110 10
x27453:	add bp, 8	; 3: 131 197 8
x27456:	jmp localeconv	; 3: 233 52 179

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary158

islower$4:	; Assign localeConvPtr £temporary158
x27459:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x27462:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x27466:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary160 -> localeConvPtr localeConvPtr 12
x27468:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary160 -> localeConvPtr 6
x27471:	mov ax, [si + 12]	; 3: 139 68 12
x27474:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x27477:	mov ax, [bp + 6]	; 3: 139 70 6
x27480:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x27483:	mov word [bp + 10], islower$11	; 5: 199 70 10 105 107
x27488:	mov [bp + 12], bp	; 3: 137 110 12
x27491:	add bp, 10	; 3: 131 197 10
x27494:	jmp strchr	; 3: 233 84 182

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary161

islower$13:	; Equal 16 £temporary161 0
x27497:	cmp bx, 0	; 3: 131 251 0
x27500:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary163 1
x27502:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x27505:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary163 0
x27507:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary163

islower$18:	; Return £temporary163
x27510:	mov ax, [bp]	; 3: 139 70 0
x27513:	mov di, [bp + 4]	; 3: 139 126 4
x27516:	mov bp, [bp + 2]	; 3: 139 110 2
x27519:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x27521:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x27525:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x27527:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x27531:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary167 1
x27533:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x27536:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary167 0
x27538:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary167

islower$25:	; Return £temporary167
x27541:	mov ax, [bp]	; 3: 139 70 0
x27544:	mov di, [bp + 4]	; 3: 139 126 4
x27547:	mov bp, [bp + 2]	; 3: 139 110 2
x27550:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@2787$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2787$digitToValue$1:	; IntegralToIntegral £temporary1223 c
x27552:	mov al, [bp + 6]	; 3: 138 70 6
x27555:	and ax, 255	; 3: 37 255 0
x27558:	cmp al, 0	; 2: 60 0
x27560:	jge @2787$digitToValue$2	; 2: 125 4
x27562:	neg al	; 2: 246 216
x27564:	neg ax	; 2: 247 216

@2787$digitToValue$2:	; Parameter 7 £temporary1223 6
x27566:	mov [bp + 13], ax	; 3: 137 70 13

@2787$digitToValue$3:	; Call 7 isdigit 0
x27569:	mov word [bp + 7], @2787$digitToValue$4	; 5: 199 70 7 191 107
x27574:	mov [bp + 9], bp	; 3: 137 110 9
x27577:	add bp, 7	; 3: 131 197 7
x27580:	jmp isdigit	; 3: 233 173 191

@2787$digitToValue$4:	; PostCall 7

@2787$digitToValue$5:	; GetReturnValue £temporary1224

@2787$digitToValue$6:	; Equal 11 £temporary1224 0
x27583:	cmp bx, 0	; 3: 131 251 0
x27586:	je @2787$digitToValue$11	; 2: 116 30

@2787$digitToValue$7:	; BinarySubtract £temporary1225 c 48
x27588:	mov bl, [bp + 6]	; 3: 138 94 6
x27591:	sub bl, 48	; 3: 128 235 48

@2787$digitToValue$8:	; IntegralToIntegral £temporary1226 £temporary1225
x27594:	and bx, 255	; 4: 129 227 255 0
x27598:	cmp bl, 0	; 3: 128 251 0
x27601:	jge @2787$digitToValue$9	; 2: 125 4
x27603:	neg bl	; 2: 246 219
x27605:	neg bx	; 2: 247 219

@2787$digitToValue$9:	; SetReturnValue £temporary1226

@2787$digitToValue$10:	; Return £temporary1226
x27607:	mov ax, [bp]	; 3: 139 70 0
x27610:	mov di, [bp + 4]	; 3: 139 126 4
x27613:	mov bp, [bp + 2]	; 3: 139 110 2
x27616:	jmp ax	; 2: 255 224

@2787$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2787$digitToValue$12:	; IntegralToIntegral £temporary1227 c
x27618:	mov al, [bp + 6]	; 3: 138 70 6
x27621:	and ax, 255	; 3: 37 255 0
x27624:	cmp al, 0	; 2: 60 0
x27626:	jge @2787$digitToValue$13	; 2: 125 4
x27628:	neg al	; 2: 246 216
x27630:	neg ax	; 2: 247 216

@2787$digitToValue$13:	; Parameter 7 £temporary1227 6
x27632:	mov [bp + 13], ax	; 3: 137 70 13

@2787$digitToValue$14:	; Call 7 islower 0
x27635:	mov word [bp + 7], @2787$digitToValue$15	; 5: 199 70 7 1 108
x27640:	mov [bp + 9], bp	; 3: 137 110 9
x27643:	add bp, 7	; 3: 131 197 7
x27646:	jmp islower	; 3: 233 52 255

@2787$digitToValue$15:	; PostCall 7

@2787$digitToValue$16:	; GetReturnValue £temporary1228

@2787$digitToValue$17:	; Equal 23 £temporary1228 0
x27649:	cmp bx, 0	; 3: 131 251 0
x27652:	je @2787$digitToValue$23	; 2: 116 33

@2787$digitToValue$18:	; BinarySubtract £temporary1229 c 97
x27654:	mov bl, [bp + 6]	; 3: 138 94 6
x27657:	sub bl, 97	; 3: 128 235 97

@2787$digitToValue$19:	; IntegralToIntegral £temporary1230 £temporary1229
x27660:	and bx, 255	; 4: 129 227 255 0
x27664:	cmp bl, 0	; 3: 128 251 0
x27667:	jge @2787$digitToValue$20	; 2: 125 4
x27669:	neg bl	; 2: 246 219
x27671:	neg bx	; 2: 247 219

@2787$digitToValue$20:	; BinaryAdd £temporary1231 £temporary1230 10
x27673:	add bx, 10	; 3: 131 195 10

@2787$digitToValue$21:	; SetReturnValue £temporary1231

@2787$digitToValue$22:	; Return £temporary1231
x27676:	mov ax, [bp]	; 3: 139 70 0
x27679:	mov di, [bp + 4]	; 3: 139 126 4
x27682:	mov bp, [bp + 2]	; 3: 139 110 2
x27685:	jmp ax	; 2: 255 224

@2787$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2787$digitToValue$24:	; IntegralToIntegral £temporary1232 c
x27687:	mov al, [bp + 6]	; 3: 138 70 6
x27690:	and ax, 255	; 3: 37 255 0
x27693:	cmp al, 0	; 2: 60 0
x27695:	jge @2787$digitToValue$25	; 2: 125 4
x27697:	neg al	; 2: 246 216
x27699:	neg ax	; 2: 247 216

@2787$digitToValue$25:	; Parameter 7 £temporary1232 6
x27701:	mov [bp + 13], ax	; 3: 137 70 13

@2787$digitToValue$26:	; Call 7 isupper 0
x27704:	mov word [bp + 7], @2787$digitToValue$27	; 5: 199 70 7 70 108
x27709:	mov [bp + 9], bp	; 3: 137 110 9
x27712:	add bp, 7	; 3: 131 197 7
x27715:	jmp isupper	; 3: 233 198 177

@2787$digitToValue$27:	; PostCall 7

@2787$digitToValue$28:	; GetReturnValue £temporary1233

@2787$digitToValue$29:	; Equal 35 £temporary1233 0
x27718:	cmp bx, 0	; 3: 131 251 0
x27721:	je @2787$digitToValue$35	; 2: 116 33

@2787$digitToValue$30:	; BinarySubtract £temporary1234 c 65
x27723:	mov bl, [bp + 6]	; 3: 138 94 6
x27726:	sub bl, 65	; 3: 128 235 65

@2787$digitToValue$31:	; IntegralToIntegral £temporary1235 £temporary1234
x27729:	and bx, 255	; 4: 129 227 255 0
x27733:	cmp bl, 0	; 3: 128 251 0
x27736:	jge @2787$digitToValue$32	; 2: 125 4
x27738:	neg bl	; 2: 246 219
x27740:	neg bx	; 2: 247 219

@2787$digitToValue$32:	; BinaryAdd £temporary1236 £temporary1235 10
x27742:	add bx, 10	; 3: 131 195 10

@2787$digitToValue$33:	; SetReturnValue £temporary1236

@2787$digitToValue$34:	; Return £temporary1236
x27745:	mov ax, [bp]	; 3: 139 70 0
x27748:	mov di, [bp + 4]	; 3: 139 126 4
x27751:	mov bp, [bp + 2]	; 3: 139 110 2
x27754:	jmp ax	; 2: 255 224

@2787$digitToValue$35:	; SetReturnValue 0
x27756:	mov bx, 0	; 3: 187 0 0

@2787$digitToValue$36:	; Return 0
x27759:	mov ax, [bp]	; 3: 139 70 0
x27762:	mov di, [bp + 4]	; 3: 139 126 4
x27765:	mov bp, [bp + 2]	; 3: 139 110 2
x27768:	jmp ax	; 2: 255 224

@2787$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x27770:	mov ax, [g_inStatus]	; 3: 161 74 96
x27773:	cmp ax, 0	; 3: 131 248 0
x27776:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x27778:	cmp ax, 1	; 3: 131 248 1
x27781:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x27783:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x27785:	dec word [g_inChars]	; 4: 255 14 111 101

unscanChar$5:	; Goto 7
x27789:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x27791:	dec word [g_inChars]	; 4: 255 14 111 101

unscanChar$7:	; Return 0
x27795:	mov ax, [bp]	; 3: 139 70 0
x27798:	mov di, [bp + 4]	; 3: 139 126 4
x27801:	mov bp, [bp + 2]	; 3: 139 110 2
x27804:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x27806:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x27814:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 180 108
x27819:	mov [bp + 18], bp	; 3: 137 110 18
x27822:	add bp, 16	; 3: 131 197 16
x27825:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1278

scanUnsignedLongInt$5:	; Assign input £temporary1278
x27828:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x27831:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1279 input
x27836:	mov al, [bp + 16]	; 3: 138 70 16
x27839:	and ax, 255	; 3: 37 255 0
x27842:	cmp al, 0	; 2: 60 0
x27844:	jge scanUnsignedLongInt$9	; 2: 125 4
x27846:	neg al	; 2: 246 216
x27848:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1279 6
x27850:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x27853:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 219 108
x27858:	mov [bp + 21], bp	; 3: 137 110 21
x27861:	add bp, 19	; 3: 131 197 19
x27864:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1280

scanUnsignedLongInt$13:	; Equal 20 £temporary1280 0
x27867:	cmp bx, 0	; 3: 131 251 0
x27870:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x27872:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 238 108
x27877:	mov [bp + 21], bp	; 3: 137 110 21
x27880:	add bp, 19	; 3: 131 197 19
x27883:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1281

scanUnsignedLongInt$18:	; Assign input £temporary1281
x27886:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x27889:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x27891:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x27895:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x27897:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 7 109
x27902:	mov [bp + 21], bp	; 3: 137 110 21
x27905:	add bp, 19	; 3: 131 197 19
x27908:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1284

scanUnsignedLongInt$25:	; Assign input £temporary1284
x27911:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x27914:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27918:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x27920:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x27924:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x27926:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 36 109
x27931:	mov [bp + 21], bp	; 3: 137 110 21
x27934:	add bp, 19	; 3: 131 197 19
x27937:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1287

scanUnsignedLongInt$32:	; Assign input £temporary1287
x27940:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1288 input
x27943:	mov al, [bp + 16]	; 3: 138 70 16
x27946:	and ax, 255	; 3: 37 255 0
x27949:	cmp al, 0	; 2: 60 0
x27951:	jge scanUnsignedLongInt$35	; 2: 125 4
x27953:	neg al	; 2: 246 216
x27955:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1288 6
x27957:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x27960:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 70 109
x27965:	mov [bp + 21], bp	; 3: 137 110 21
x27968:	add bp, 19	; 3: 131 197 19
x27971:	jmp tolower	; 3: 233 216 183

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1289

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1289 120
x27974:	cmp bx, 120	; 3: 131 251 120
x27977:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x27979:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x27984:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 94 109
x27989:	mov [bp + 21], bp	; 3: 137 110 21
x27992:	add bp, 19	; 3: 131 197 19
x27995:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1291

scanUnsignedLongInt$45:	; Assign input £temporary1291
x27998:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x28001:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x28003:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x28008:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x28010:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x28015:	mov al, [bp + 16]	; 3: 138 70 16
x28018:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x28021:	mov ax, [bp + 6]	; 3: 139 70 6
x28024:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x28027:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 137 109
x28032:	mov [bp + 21], bp	; 3: 137 110 21
x28035:	add bp, 19	; 3: 131 197 19
x28038:	jmp @2723$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1292

scanUnsignedLongInt$56:	; Equal 73 £temporary1292 0
x28041:	cmp bx, 0	; 3: 131 251 0
x28044:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1293 base
x28046:	mov bx, [bp + 6]	; 3: 139 94 6
x28049:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1293
x28056:	mov eax, [bp + 8]	; 4: 102 139 70 8
x28060:	xor edx, edx	; 3: 102 49 210
x28063:	mul ebx	; 3: 102 247 227
x28066:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x28070:	mov al, [bp + 16]	; 3: 138 70 16
x28073:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x28076:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 186 109
x28081:	mov [bp + 21], bp	; 3: 137 110 21
x28084:	add bp, 19	; 3: 131 197 19
x28087:	jmp @2787$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1295

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1296 £temporary1295
x28090:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1296
x28097:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x28101:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x28106:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 216 109
x28111:	mov [bp + 21], bp	; 3: 137 110 21
x28114:	add bp, 19	; 3: 131 197 19
x28117:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1298

scanUnsignedLongInt$71:	; Assign input £temporary1298
x28120:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x28123:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x28125:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x28129:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x28131:	inc word [g_inCount]	; 4: 255 6 109 101

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x28135:	mov al, [bp + 16]	; 3: 138 70 16
x28138:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x28141:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 251 109
x28146:	mov [bp + 21], bp	; 3: 137 110 21
x28149:	add bp, 19	; 3: 131 197 19
x28152:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x28155:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x28159:	mov ax, [bp]	; 3: 139 70 0
x28162:	mov di, [bp + 4]	; 3: 139 126 4
x28165:	mov bp, [bp + 2]	; 3: 139 110 2
x28168:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x28170:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x28175:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x28180:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x28182:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x28185:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x28187:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x28190:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 44 110
x28195:	mov [bp + 28], bp	; 3: 137 110 28
x28198:	add bp, 26	; 3: 131 197 26
x28201:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1309

scanLongDouble$10:	; Assign input £temporary1309
x28204:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1310 input
x28207:	mov al, [bp + 26]	; 3: 138 70 26
x28210:	and ax, 255	; 3: 37 255 0
x28213:	cmp al, 0	; 2: 60 0
x28215:	jge scanLongDouble$13	; 2: 125 4
x28217:	neg al	; 2: 246 216
x28219:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1310 6
x28221:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x28224:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 78 110
x28229:	mov [bp + 29], bp	; 3: 137 110 29
x28232:	add bp, 27	; 3: 131 197 27
x28235:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1311

scanLongDouble$17:	; Equal 24 £temporary1311 0
x28238:	cmp bx, 0	; 3: 131 251 0
x28241:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x28243:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 97 110
x28248:	mov [bp + 29], bp	; 3: 137 110 29
x28251:	add bp, 27	; 3: 131 197 27
x28254:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1312

scanLongDouble$22:	; Assign input £temporary1312
x28257:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x28260:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x28262:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x28266:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x28268:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 122 110
x28273:	mov [bp + 29], bp	; 3: 137 110 29
x28276:	add bp, 27	; 3: 131 197 27
x28279:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1315

scanLongDouble$29:	; Assign input £temporary1315
x28282:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x28285:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x28287:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x28291:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x28293:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x28298:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 152 110
x28303:	mov [bp + 29], bp	; 3: 137 110 29
x28306:	add bp, 27	; 3: 131 197 27
x28309:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1317

scanLongDouble$37:	; Assign input £temporary1317
x28312:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1318 input
x28315:	mov al, [bp + 26]	; 3: 138 70 26
x28318:	and ax, 255	; 3: 37 255 0
x28321:	cmp al, 0	; 2: 60 0
x28323:	jge scanLongDouble$40	; 2: 125 4
x28325:	neg al	; 2: 246 216
x28327:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1318 6
x28329:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x28332:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 186 110
x28337:	mov [bp + 29], bp	; 3: 137 110 29
x28340:	add bp, 27	; 3: 131 197 27
x28343:	jmp isdigit	; 3: 233 178 188

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1319

scanLongDouble$44:	; Equal 60 £temporary1319 0
x28346:	cmp bx, 0	; 3: 131 251 0
x28349:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x28351:	fld qword [@2986$float8$10.0#]	; 4: 221 6 45 112

scanLongDouble$46:	; PushFloat value
x28355:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1320 10.0 value
x28358:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1321 input 48
x28360:	mov al, [bp + 26]	; 3: 138 70 26
x28363:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1323 £temporary1321
x28365:	and ax, 255	; 3: 37 255 0
x28368:	cmp al, 0	; 2: 60 0
x28370:	jge scanLongDouble$50	; 2: 125 4
x28372:	neg al	; 2: 246 216
x28374:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1322 £temporary1323
x28376:	mov [container2bytes#], ax	; 3: 163 79 27
x28379:	fild word [container2bytes#]	; 4: 223 6 79 27

scanLongDouble$51:	; BinaryAdd £temporary1324 £temporary1320 £temporary1322
x28383:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x28385:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x28388:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 242 110
x28393:	mov [bp + 29], bp	; 3: 137 110 29
x28396:	add bp, 27	; 3: 131 197 27
x28399:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1325

scanLongDouble$57:	; Assign input £temporary1325
x28402:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x28405:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x28410:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x28412:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x28416:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x28418:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 16 111
x28423:	mov [bp + 29], bp	; 3: 137 110 29
x28426:	add bp, 27	; 3: 131 197 27
x28429:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1328

scanLongDouble$65:	; Assign input £temporary1328
x28432:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1329 input
x28435:	mov al, [bp + 26]	; 3: 138 70 26
x28438:	and ax, 255	; 3: 37 255 0
x28441:	cmp al, 0	; 2: 60 0
x28443:	jge scanLongDouble$68	; 2: 125 4
x28445:	neg al	; 2: 246 216
x28447:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1329 6
x28449:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x28452:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 50 111
x28457:	mov [bp + 29], bp	; 3: 137 110 29
x28460:	add bp, 27	; 3: 131 197 27
x28463:	jmp isdigit	; 3: 233 58 188

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1330

scanLongDouble$72:	; Equal 92 £temporary1330 0
x28466:	cmp bx, 0	; 3: 131 251 0
x28469:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x28471:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x28474:	fld qword [@3006$float8$10.0#]	; 4: 221 6 53 112

scanLongDouble$75:	; SignedDivide £temporary1331 factor 10.0
x28478:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x28480:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x28483:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x28486:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1332 input 48
x28489:	mov al, [bp + 26]	; 3: 138 70 26
x28492:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1334 £temporary1332
x28494:	and ax, 255	; 3: 37 255 0
x28497:	cmp al, 0	; 2: 60 0
x28499:	jge scanLongDouble$81	; 2: 125 4
x28501:	neg al	; 2: 246 216
x28503:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1333 £temporary1334
x28505:	mov [container2bytes#], ax	; 3: 163 79 27
x28508:	fild word [container2bytes#]	; 4: 223 6 79 27

scanLongDouble$82:	; SignedMultiply £temporary1335 factor £temporary1333
x28512:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1336 value £temporary1335
x28514:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x28516:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x28519:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 117 111
x28524:	mov [bp + 29], bp	; 3: 137 110 29
x28527:	add bp, 27	; 3: 131 197 27
x28530:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1337

scanLongDouble$89:	; Assign input £temporary1337
x28533:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x28536:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x28541:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1339 input
x28543:	mov al, [bp + 26]	; 3: 138 70 26
x28546:	and ax, 255	; 3: 37 255 0
x28549:	cmp al, 0	; 2: 60 0
x28551:	jge scanLongDouble$94	; 2: 125 4
x28553:	neg al	; 2: 246 216
x28555:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1339 6
x28557:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x28560:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 158 111
x28565:	mov [bp + 29], bp	; 3: 137 110 29
x28568:	add bp, 27	; 3: 131 197 27
x28571:	jmp tolower	; 3: 233 128 181

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1340

scanLongDouble$98:	; NotEqual 118 £temporary1340 101
x28574:	cmp bx, 101	; 3: 131 251 101
x28577:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x28579:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x28584:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 182 111
x28589:	mov [bp + 29], bp	; 3: 137 110 29
x28592:	add bp, 27	; 3: 131 197 27
x28595:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1342

scanLongDouble$104:	; IntegralToFloating £temporary1343 £temporary1342
x28598:	mov [container4bytes#], ebx	; 5: 102 137 30 80 36
x28603:	fild dword [container4bytes#]	; 4: 219 6 80 36

scanLongDouble$105:	; PopFloat exponent
x28607:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x28610:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x28613:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x28616:	fld qword [@3031$float8$10.0#]	; 4: 221 6 61 112

scanLongDouble$109:	; Parameter 35 10.0 6
x28620:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x28623:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x28626:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x28629:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 227 111
x28634:	mov [bp + 45], bp	; 3: 137 110 45
x28637:	add bp, 43	; 3: 131 197 43
x28640:	jmp pow	; 3: 233 184 184

scanLongDouble$113:	; PostCall 35
x28643:	fstp qword [bp + 43]	; 3: 221 94 43
x28646:	fld qword [bp + 35]	; 3: 221 70 35
x28649:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1344

scanLongDouble$115:	; SignedMultiply £temporary1345 value £temporary1344
x28652:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x28654:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x28657:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x28659:	mov al, [bp + 26]	; 3: 138 70 26
x28662:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x28665:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 7 112
x28670:	mov [bp + 29], bp	; 3: 137 110 29
x28673:	add bp, 27	; 3: 131 197 27
x28676:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x28679:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28683:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x28685:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1347 value
x28688:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x28690:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x28693:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x28697:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x28699:	inc word [g_inCount]	; 4: 255 6 109 101

scanLongDouble$128:	; PushFloat value
x28703:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x28706:	mov ax, [bp]	; 3: 139 70 0
x28709:	mov di, [bp + 4]	; 3: 139 126 4
x28712:	mov bp, [bp + 2]	; 3: 139 110 2
x28715:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

@2986$float8$10.0#:
x28717:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3006$float8$10.0#:
x28725:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3031$float8$10.0#:
x28733:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

scanPattern:	; Assign index 0
x28741:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 16 scanChar 0
x28746:	mov word [bp + 16], scanPattern$3	; 5: 199 70 16 88 112
x28751:	mov [bp + 18], bp	; 3: 137 110 18
x28754:	add bp, 16	; 3: 131 197 16
x28757:	jmp scanChar	; 3: 233 25 245

scanPattern$3:	; PostCall 16

scanPattern$4:	; GetReturnValue £temporary1058

scanPattern$5:	; Assign input £temporary1058
x28760:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1059 input
x28763:	mov al, [bp + 16]	; 3: 138 70 16
x28766:	and ax, 255	; 3: 37 255 0
x28769:	cmp al, 0	; 2: 60 0
x28771:	jge scanPattern$8	; 2: 125 4
x28773:	neg al	; 2: 246 216
x28775:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 17 £temporary1059 6
x28777:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$9:	; Call 17 isspace 0
x28780:	mov word [bp + 17], scanPattern$10	; 5: 199 70 17 122 112
x28785:	mov [bp + 19], bp	; 3: 137 110 19
x28788:	add bp, 17	; 3: 131 197 17
x28791:	jmp isspace	; 3: 233 179 247

scanPattern$10:	; PostCall 17

scanPattern$11:	; GetReturnValue £temporary1060

scanPattern$12:	; Equal 19 £temporary1060 0
x28794:	cmp bx, 0	; 3: 131 251 0
x28797:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 17 scanChar 0
x28799:	mov word [bp + 17], scanPattern$15	; 5: 199 70 17 141 112
x28804:	mov [bp + 19], bp	; 3: 137 110 19
x28807:	add bp, 17	; 3: 131 197 17
x28810:	jmp scanChar	; 3: 233 228 244

scanPattern$15:	; PostCall 17

scanPattern$16:	; GetReturnValue £temporary1061

scanPattern$17:	; Assign input £temporary1061
x28813:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$18:	; Goto 6
x28816:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 55 string 0
x28818:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28822:	je scanPattern$55	; 4: 15 132 156 0

scanPattern$20:	; NotEqual 30 not 0
x28826:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28830:	jne scanPattern$30	; 2: 117 48

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 17 pattern 6
x28832:	mov ax, [bp + 8]	; 3: 139 70 8
x28835:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$23:	; Parameter 17 size 8
x28838:	mov ax, [bp + 10]	; 3: 139 70 10
x28841:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$24:	; IntegralToIntegral £temporary1066 input
x28844:	mov al, [bp + 16]	; 3: 138 70 16
x28847:	and ax, 255	; 3: 37 255 0
x28850:	cmp al, 0	; 2: 60 0
x28852:	jge scanPattern$25	; 2: 125 4
x28854:	neg al	; 2: 246 216
x28856:	neg ax	; 2: 247 216

scanPattern$25:	; Parameter 17 £temporary1066 10
x28858:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$26:	; Call 17 strnchr 0
x28861:	mov word [bp + 17], scanPattern$27	; 5: 199 70 17 203 112
x28866:	mov [bp + 19], bp	; 3: 137 110 19
x28869:	add bp, 17	; 3: 131 197 17
x28872:	jmp @2481$strnchr	; 3: 233 245 0

scanPattern$27:	; PostCall 17

scanPattern$28:	; GetReturnValue £temporary1067

scanPattern$29:	; NotEqual 40 £temporary1067 0
x28875:	cmp bx, 0	; 3: 131 251 0
x28878:	jne scanPattern$40	; 2: 117 54

scanPattern$30:	; Equal 51 not 0
x28880:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28884:	je scanPattern$51	; 2: 116 84

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$32:	; Parameter 17 pattern 6
x28886:	mov ax, [bp + 8]	; 3: 139 70 8
x28889:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$33:	; Parameter 17 size 8
x28892:	mov ax, [bp + 10]	; 3: 139 70 10
x28895:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$34:	; IntegralToIntegral £temporary1070 input
x28898:	mov al, [bp + 16]	; 3: 138 70 16
x28901:	and ax, 255	; 3: 37 255 0
x28904:	cmp al, 0	; 2: 60 0
x28906:	jge scanPattern$35	; 2: 125 4
x28908:	neg al	; 2: 246 216
x28910:	neg ax	; 2: 247 216

scanPattern$35:	; Parameter 17 £temporary1070 10
x28912:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$36:	; Call 17 strnchr 0
x28915:	mov word [bp + 17], scanPattern$37	; 5: 199 70 17 1 113
x28920:	mov [bp + 19], bp	; 3: 137 110 19
x28923:	add bp, 17	; 3: 131 197 17
x28926:	jmp @2481$strnchr	; 3: 233 191 0

scanPattern$37:	; PostCall 17

scanPattern$38:	; GetReturnValue £temporary1071

scanPattern$39:	; NotEqual 51 £temporary1071 0
x28929:	cmp bx, 0	; 3: 131 251 0
x28932:	jne scanPattern$51	; 2: 117 36

scanPattern$40:	; Assign £temporary1077 index
x28934:	mov ax, [bp + 14]	; 3: 139 70 14

scanPattern$41:	; Increment index
x28937:	inc word [bp + 14]	; 3: 255 70 14

scanPattern$42:	; BinaryAdd £temporary1079 string £temporary1077
x28940:	mov si, [bp + 6]	; 3: 139 118 6
x28943:	add si, ax	; 2: 1 198

scanPattern$43:	; Deref £temporary1078 -> £temporary1079 £temporary1079 0

scanPattern$44:	; Assign £temporary1078 -> £temporary1079 input
x28945:	mov al, [bp + 16]	; 3: 138 70 16
x28948:	mov [si], al	; 2: 136 4

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$46:	; Call 17 scanChar 0
x28950:	mov word [bp + 17], scanPattern$47	; 5: 199 70 17 36 113
x28955:	mov [bp + 19], bp	; 3: 137 110 19
x28958:	add bp, 17	; 3: 131 197 17
x28961:	jmp scanChar	; 3: 233 77 244

scanPattern$47:	; PostCall 17

scanPattern$48:	; GetReturnValue £temporary1080

scanPattern$49:	; Assign input £temporary1080
x28964:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$50:	; Goto 20
x28967:	jmp scanPattern$20	; 3: 233 112 255

scanPattern$51:	; BinaryAdd £temporary1082 string index
x28970:	mov si, [bp + 6]	; 3: 139 118 6
x28973:	add si, [bp + 14]	; 3: 3 118 14

scanPattern$52:	; Deref £temporary1081 -> £temporary1082 £temporary1082 0

scanPattern$53:	; Assign £temporary1081 -> £temporary1082 0
x28976:	mov byte [si], 0	; 3: 198 4 0

scanPattern$54:	; Goto 81
x28979:	jmp scanPattern$81	; 3: 233 127 0

scanPattern$55:	; NotEqual 65 not 0
x28982:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28986:	jne scanPattern$65	; 2: 117 48

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$57:	; Parameter 17 pattern 6
x28988:	mov ax, [bp + 8]	; 3: 139 70 8
x28991:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Parameter 17 size 8
x28994:	mov ax, [bp + 10]	; 3: 139 70 10
x28997:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$59:	; IntegralToIntegral £temporary1085 input
x29000:	mov al, [bp + 16]	; 3: 138 70 16
x29003:	and ax, 255	; 3: 37 255 0
x29006:	cmp al, 0	; 2: 60 0
x29008:	jge scanPattern$60	; 2: 125 4
x29010:	neg al	; 2: 246 216
x29012:	neg ax	; 2: 247 216

scanPattern$60:	; Parameter 17 £temporary1085 10
x29014:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$61:	; Call 17 strnchr 0
x29017:	mov word [bp + 17], scanPattern$62	; 5: 199 70 17 103 113
x29022:	mov [bp + 19], bp	; 3: 137 110 19
x29025:	add bp, 17	; 3: 131 197 17
x29028:	nop	; 1: 144
x29029:	jmp @2481$strnchr	; 2: 235 89

scanPattern$62:	; PostCall 17

scanPattern$63:	; GetReturnValue £temporary1086

scanPattern$64:	; NotEqual 75 £temporary1086 0
x29031:	cmp bx, 0	; 3: 131 251 0
x29034:	jne scanPattern$75	; 2: 117 54

scanPattern$65:	; Equal 81 not 0
x29036:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x29040:	je scanPattern$81	; 2: 116 67

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$67:	; Parameter 17 pattern 6
x29042:	mov ax, [bp + 8]	; 3: 139 70 8
x29045:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$68:	; Parameter 17 size 8
x29048:	mov ax, [bp + 10]	; 3: 139 70 10
x29051:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$69:	; IntegralToIntegral £temporary1089 input
x29054:	mov al, [bp + 16]	; 3: 138 70 16
x29057:	and ax, 255	; 3: 37 255 0
x29060:	cmp al, 0	; 2: 60 0
x29062:	jge scanPattern$70	; 2: 125 4
x29064:	neg al	; 2: 246 216
x29066:	neg ax	; 2: 247 216

scanPattern$70:	; Parameter 17 £temporary1089 10
x29068:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$71:	; Call 17 strnchr 0
x29071:	mov word [bp + 17], scanPattern$72	; 5: 199 70 17 157 113
x29076:	mov [bp + 19], bp	; 3: 137 110 19
x29079:	add bp, 17	; 3: 131 197 17
x29082:	nop	; 1: 144
x29083:	jmp @2481$strnchr	; 2: 235 35

scanPattern$72:	; PostCall 17

scanPattern$73:	; GetReturnValue £temporary1090

scanPattern$74:	; NotEqual 81 £temporary1090 0
x29085:	cmp bx, 0	; 3: 131 251 0
x29088:	jne scanPattern$81	; 2: 117 19

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$76:	; Call 17 scanChar 0
x29090:	mov word [bp + 17], scanPattern$77	; 5: 199 70 17 176 113
x29095:	mov [bp + 19], bp	; 3: 137 110 19
x29098:	add bp, 17	; 3: 131 197 17
x29101:	jmp scanChar	; 3: 233 193 243

scanPattern$77:	; PostCall 17

scanPattern$78:	; GetReturnValue £temporary1096

scanPattern$79:	; Assign input £temporary1096
x29104:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$80:	; Goto 55
x29107:	jmp scanPattern$55	; 2: 235 129

scanPattern$81:	; Return 0
x29109:	mov ax, [bp]	; 3: 139 70 0
x29112:	mov di, [bp + 4]	; 3: 139 126 4
x29115:	mov bp, [bp + 2]	; 3: 139 110 2
x29118:	jmp ax	; 2: 255 224

scanPattern$82:	; FunctionEnd scanPattern

@2481$strnchr:	; IntegralToIntegral £temporary1049 i
x29120:	mov ax, [bp + 10]	; 3: 139 70 10
x29123:	cmp ax, 0	; 3: 131 248 0
x29126:	jge @2481$strnchr$1	; 2: 125 4
x29128:	neg ax	; 2: 247 216
x29130:	neg al	; 2: 246 216

@2481$strnchr$1:	; Assign c £temporary1049
x29132:	mov [bp + 14], al	; 3: 136 70 14

@2481$strnchr$2:	; Assign index 0
x29135:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@2481$strnchr$3:	; SignedGreaterThanEqual 14 index size
x29140:	mov ax, [bp + 8]	; 3: 139 70 8
x29143:	cmp [bp + 12], ax	; 3: 57 70 12
x29146:	jge @2481$strnchr$14	; 2: 125 35

@2481$strnchr$4:	; BinaryAdd £temporary1053 text index
x29148:	mov si, [bp + 6]	; 3: 139 118 6
x29151:	add si, [bp + 12]	; 3: 3 118 12

@2481$strnchr$5:	; Deref £temporary1052 -> £temporary1053 £temporary1053 0

@2481$strnchr$6:	; NotEqual 12 £temporary1052 -> £temporary1053 c
x29154:	mov al, [bp + 14]	; 3: 138 70 14
x29157:	cmp [si], al	; 2: 56 4
x29159:	jne @2481$strnchr$12	; 2: 117 17

@2481$strnchr$7:	; BinaryAdd £temporary1056 text index
x29161:	mov bx, [bp + 6]	; 3: 139 94 6
x29164:	add bx, [bp + 12]	; 3: 3 94 12

@2481$strnchr$8:	; Deref £temporary1055 -> £temporary1056 £temporary1056 0

@2481$strnchr$9:	; address £temporary1057 £temporary1055 -> £temporary1056

@2481$strnchr$10:	; SetReturnValue £temporary1057

@2481$strnchr$11:	; Return £temporary1057
x29167:	mov ax, [bp]	; 3: 139 70 0
x29170:	mov di, [bp + 4]	; 3: 139 126 4
x29173:	mov bp, [bp + 2]	; 3: 139 110 2
x29176:	jmp ax	; 2: 255 224

@2481$strnchr$12:	; Increment index
x29178:	inc word [bp + 12]	; 3: 255 70 12

@2481$strnchr$13:	; Goto 3
x29181:	jmp @2481$strnchr$3	; 2: 235 213

@2481$strnchr$14:	; SetReturnValue 0
x29183:	mov bx, 0	; 3: 187 0 0

@2481$strnchr$15:	; Return 0
x29186:	mov ax, [bp]	; 3: 139 70 0
x29189:	mov di, [bp + 4]	; 3: 139 126 4
x29192:	mov bp, [bp + 2]	; 3: 139 110 2
x29195:	jmp ax	; 2: 255 224

@2481$strnchr$16:	; FunctionEnd strnchr

fclose:	; Equal 20 stream 0
x29197:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29201:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x29203:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary798 -> stream stream 2
x29205:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary798 -> stream
x29208:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x29211:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x29213:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x29215:	mov word [errno], 11	; 6: 199 6 230 10 11 0

fclose$7:	; SetReturnValue -1
x29221:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x29224:	mov ax, [bp]	; 3: 139 70 0
x29227:	mov di, [bp + 4]	; 3: 139 126 4
x29230:	mov bp, [bp + 2]	; 3: 139 110 2
x29233:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary800 -> stream stream 27
x29235:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary800 -> stream 0
x29238:	cmp word [si + 27], 0	; 4: 131 124 27 0
x29242:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary801 -> stream stream 4
x29244:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary801 -> stream 6
x29247:	mov [bp + 14], si	; 3: 137 118 14
x29250:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x29254:	mov word [bp + 8], fclose$15	; 5: 199 70 8 84 114
x29259:	mov [bp + 10], bp	; 3: 137 110 10
x29262:	add bp, 8	; 3: 131 197 8
x29265:	nop	; 1: 144
x29266:	jmp remove	; 2: 235 124

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary804 -> stream stream 0
x29268:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary804 -> stream 0
x29271:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x29275:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x29278:	mov ax, [bp]	; 3: 139 70 0
x29281:	mov di, [bp + 4]	; 3: 139 126 4
x29284:	mov bp, [bp + 2]	; 3: 139 110 2
x29287:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x29289:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x29294:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x29298:	jge fclose$40	; 2: 125 74

fclose$22:	; UnsignedMultiply £temporary808 index 29
x29300:	mov ax, [bp + 8]	; 3: 139 70 8
x29303:	xor dx, dx	; 2: 49 210
x29305:	mul word [@1922$int2$29#]	; 4: 247 38 204 114

fclose$23:	; BinaryAdd £temporary809 g_fileArray £temporary808
x29309:	mov si, g_fileArray	; 3: 190 102 13
x29312:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary807 -> £temporary809 £temporary809 0

fclose$25:	; Equal 38 £temporary807.open$0 -> £temporary809 0
x29314:	cmp word [si], 0	; 3: 131 60 0
x29317:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; UnsignedMultiply £temporary811 index 29
x29319:	mov ax, [bp + 8]	; 3: 139 70 8
x29322:	xor dx, dx	; 2: 49 210
x29324:	mul word [@1927$int2$29#]	; 4: 247 38 206 114

fclose$28:	; BinaryAdd £temporary812 g_fileArray £temporary811
x29328:	mov si, g_fileArray	; 3: 190 102 13
x29331:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary810 -> £temporary812 £temporary812 0

fclose$30:	; address £temporary813 £temporary810 -> £temporary812

fclose$31:	; Parameter 10 £temporary813 6
x29333:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x29336:	mov word [bp + 10], fclose$33	; 5: 199 70 10 166 114
x29341:	mov [bp + 12], bp	; 3: 137 110 12
x29344:	add bp, 10	; 3: 131 197 10
x29347:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary814

fclose$35:	; NotEqual 38 £temporary814 -1
x29350:	cmp bx, -1	; 3: 131 251 255
x29353:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x29355:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x29358:	mov ax, [bp]	; 3: 139 70 0
x29361:	mov di, [bp + 4]	; 3: 139 126 4
x29364:	mov bp, [bp + 2]	; 3: 139 110 2
x29367:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x29369:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x29372:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x29374:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x29377:	mov ax, [bp]	; 3: 139 70 0
x29380:	mov di, [bp + 4]	; 3: 139 126 4
x29383:	mov bp, [bp + 2]	; 3: 139 110 2
x29386:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

@1922$int2$29#:
x29388:	dw 29	; 2: 29 0

@1927$int2$29#:
x29390:	dw 29	; 2: 29 0

remove:	; AssignRegister ah 65
x29392:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x29394:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x29396:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x29399:	int 33	; 2: 205 33

remove$4:	; Carry 7
x29401:	jc remove$7	; 2: 114 14

remove$5:	; SetReturnValue 0
x29403:	mov bx, 0	; 3: 187 0 0

remove$6:	; Return 0
x29406:	mov ax, [bp]	; 3: 139 70 0
x29409:	mov di, [bp + 4]	; 3: 139 126 4
x29412:	mov bp, [bp + 2]	; 3: 139 110 2
x29415:	jmp ax	; 2: 255 224

remove$7:	; Assign errno 18
x29417:	mov word [errno], 18	; 6: 199 6 230 10 18 0

remove$8:	; SetReturnValue -1
x29423:	mov bx, -1	; 3: 187 255 255

remove$9:	; Return -1
x29426:	mov ax, [bp]	; 3: 139 70 0
x29429:	mov di, [bp + 4]	; 3: 139 126 4
x29432:	mov bp, [bp + 2]	; 3: 139 110 2
x29435:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x29437:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x29439:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x29441:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x29444:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x29447:	int 33	; 2: 205 33

rename$5:	; Carry 8
x29449:	jc rename$8	; 2: 114 14

rename$6:	; SetReturnValue 0
x29451:	mov bx, 0	; 3: 187 0 0

rename$7:	; Return 0
x29454:	mov ax, [bp]	; 3: 139 70 0
x29457:	mov di, [bp + 4]	; 3: 139 126 4
x29460:	mov bp, [bp + 2]	; 3: 139 110 2
x29463:	jmp ax	; 2: 255 224

rename$8:	; Assign errno 19
x29465:	mov word [errno], 19	; 6: 199 6 230 10 19 0

rename$9:	; SetReturnValue -1
x29471:	mov bx, -1	; 3: 187 255 255

rename$10:	; Return -1
x29474:	mov ax, [bp]	; 3: 139 70 0
x29477:	mov di, [bp + 4]	; 3: 139 126 4
x29480:	mov bp, [bp + 2]	; 3: 139 110 2
x29483:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary911 -> stream stream 2
x29485:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary911 -> stream
x29488:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary913 size nobj
x29491:	mov ax, [bp + 8]	; 3: 139 70 8
x29494:	xor dx, dx	; 2: 49 210
x29496:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary913
x29499:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x29501:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x29503:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x29506:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x29508:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary917 -> stream stream 21
x29510:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x29513:	mov word [errno], 13	; 6: 199 6 230 10 13 0

fwrite$10:	; Assign £temporary917 -> stream errno
x29519:	mov ax, [errno]	; 3: 161 230 10
x29522:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x29525:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x29528:	mov ax, [bp]	; 3: 139 70 0
x29531:	mov di, [bp + 4]	; 3: 139 126 4
x29534:	mov bp, [bp + 2]	; 3: 139 110 2
x29537:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary918 ax

fwrite$14:	; SetReturnValue £temporary918
x29539:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary918
x29541:	mov ax, [bp]	; 3: 139 70 0
x29544:	mov di, [bp + 4]	; 3: 139 126 4
x29547:	mov bp, [bp + 2]	; 3: 139 110 2
x29550:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary902 -> stream stream 2
x29552:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary902 -> stream
x29555:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary904 size nobj
x29558:	mov ax, [bp + 8]	; 3: 139 70 8
x29561:	xor dx, dx	; 2: 49 210
x29563:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary904
x29566:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x29568:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x29570:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x29573:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x29575:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary908 -> stream stream 21
x29577:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x29580:	mov word [errno], 14	; 6: 199 6 230 10 14 0

fread$10:	; Assign £temporary908 -> stream errno
x29586:	mov ax, [errno]	; 3: 161 230 10
x29589:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x29592:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x29595:	mov ax, [bp]	; 3: 139 70 0
x29598:	mov di, [bp + 4]	; 3: 139 126 4
x29601:	mov bp, [bp + 2]	; 3: 139 110 2
x29604:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary909 ax

fread$14:	; SetReturnValue £temporary909
x29606:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary909
x29608:	mov ax, [bp]	; 3: 139 70 0
x29611:	mov di, [bp + 4]	; 3: 139 126 4
x29614:	mov bp, [bp + 2]	; 3: 139 110 2
x29617:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary23 memorySize
x29619:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary23 4
x29622:	add ax, 4	; 3: 131 192 4
x29625:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x29628:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x29633:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x29638:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x29643:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x29648:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x29653:	mov ax, [g_firstBlockPtr]	; 3: 161 65 117
x29656:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x29659:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29663:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x29665:	mov ax, [stderr]	; 3: 161 24 78
x29668:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x29671:	mov word [bp + 30], @111$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 67 117

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x29676:	mov word [bp + 32], @112$string_memorySize203E3D200#	; 5: 199 70 32 113 117

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x29681:	mov word [bp + 34], @113$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 129 117

malloc$14:	; Parameter 22 41 14
x29686:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x29691:	mov word [bp + 22], malloc$16	; 5: 199 70 22 14 116
x29696:	mov [bp + 24], bp	; 3: 137 110 24
x29699:	add bp, 22	; 3: 131 197 22
x29702:	mov di, bp	; 2: 137 239
x29704:	add di, 6	; 3: 131 199 6
x29707:	jmp fprintf	; 3: 233 239 234

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x29710:	mov word [bp + 22], malloc$19	; 5: 199 70 22 28 116
x29715:	mov [bp + 24], bp	; 3: 137 110 24
x29718:	add bp, 22	; 3: 131 197 22
x29721:	jmp abort	; 3: 233 28 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x29724:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29728:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x29730:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x29733:	mov ax, [bp]	; 3: 139 70 0
x29736:	mov di, [bp + 4]	; 3: 139 126 4
x29739:	mov bp, [bp + 2]	; 3: 139 110 2
x29742:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x29744:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x29748:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary31 currBlockPtr
x29750:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary31
x29753:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary32 -> currBlockPtr currBlockPtr 0
x29756:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary33 currAddress £temporary32 -> currBlockPtr
x29759:	mov ax, [bp + 22]	; 3: 139 70 22
x29762:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary34 £temporary33 4
x29764:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary34
x29767:	mov bx, [bp + 12]	; 3: 139 94 12
x29770:	sub bx, ax	; 2: 41 195
x29772:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x29775:	mov ax, [bp + 24]	; 3: 139 70 24
x29778:	cmp [bp + 8], ax	; 3: 57 70 8
x29781:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x29783:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x29787:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x29789:	mov ax, [bp + 10]	; 3: 139 70 10
x29792:	cmp [bp + 24], ax	; 3: 57 70 24
x29795:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x29797:	mov ax, [bp + 24]	; 3: 139 70 24
x29800:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x29803:	mov ax, [bp + 20]	; 3: 139 70 20
x29806:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x29809:	mov ax, [bp + 18]	; 3: 139 70 18
x29812:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x29815:	mov ax, [bp + 22]	; 3: 139 70 22
x29818:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x29821:	mov ax, [bp + 20]	; 3: 139 70 20
x29824:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary41 -> currBlockPtr currBlockPtr 2
x29827:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary41 -> currBlockPtr
x29830:	mov ax, [si + 2]	; 3: 139 68 2
x29833:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x29836:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x29838:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x29842:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary43 minBlockPtr
x29844:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary44 -> minBlockPtr minBlockPtr 0
x29847:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary45 £temporary43 £temporary44 -> minBlockPtr
x29850:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary45 4
x29852:	add ax, 4	; 3: 131 192 4
x29855:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary47 newAddress
x29858:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary47
x29861:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary48 -> newBlockPtr newBlockPtr 0
x29864:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary48 -> newBlockPtr memorySize
x29867:	mov ax, [bp + 6]	; 3: 139 70 6
x29870:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary49 -> newBlockPtr newBlockPtr 2
x29872:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary49 -> newBlockPtr minBlockPtr
x29875:	mov ax, [bp + 14]	; 3: 139 70 14
x29878:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x29881:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x29885:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary51 -> minPrevBlockPtr minPrevBlockPtr 2
x29887:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary51 -> minPrevBlockPtr newBlockPtr
x29890:	mov ax, [bp + 24]	; 3: 139 70 24
x29893:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x29896:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x29898:	mov ax, [bp + 24]	; 3: 139 70 24
x29901:	mov [g_firstBlockPtr], ax	; 3: 163 65 117

malloc$57:	; BinaryAdd £temporary52 newAddress 4
x29904:	mov bx, [bp + 22]	; 3: 139 94 22
x29907:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary53 £temporary52

malloc$59:	; SetReturnValue £temporary53

malloc$60:	; Return £temporary53
x29910:	mov ax, [bp]	; 3: 139 70 0
x29913:	mov di, [bp + 4]	; 3: 139 126 4
x29916:	mov bp, [bp + 2]	; 3: 139 110 2
x29919:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x29921:	mov ax, [bp + 12]	; 3: 139 70 12
x29924:	sub ax, [bp + 8]	; 3: 43 70 8
x29927:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary55 bp

malloc$63:	; Assign stackTop £temporary55
x29930:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x29933:	mov ax, [bp + 22]	; 3: 139 70 22
x29936:	cmp [bp + 24], ax	; 3: 57 70 24
x29939:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary57 newAddress
x29941:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary57
x29944:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary58 -> newBlockPtr newBlockPtr 0
x29947:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary58 -> newBlockPtr memorySize
x29950:	mov ax, [bp + 6]	; 3: 139 70 6
x29953:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary59 -> newBlockPtr newBlockPtr 2
x29955:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary59 -> newBlockPtr 0
x29958:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x29963:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x29967:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary61 -> prevBlockPtr prevBlockPtr 2
x29969:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary61 -> prevBlockPtr newBlockPtr
x29972:	mov ax, [bp + 26]	; 3: 139 70 26
x29975:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x29978:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x29980:	mov ax, [bp + 26]	; 3: 139 70 26
x29983:	mov [g_firstBlockPtr], ax	; 3: 163 65 117

malloc$76:	; BinaryAdd £temporary62 newAddress 4
x29986:	mov bx, [bp + 22]	; 3: 139 94 22
x29989:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary63 £temporary62

malloc$78:	; SetReturnValue £temporary63

malloc$79:	; Return £temporary63
x29992:	mov ax, [bp]	; 3: 139 70 0
x29995:	mov di, [bp + 4]	; 3: 139 126 4
x29998:	mov bp, [bp + 2]	; 3: 139 110 2
x30001:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x30003:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x30006:	mov ax, [bp]	; 3: 139 70 0
x30009:	mov di, [bp + 4]	; 3: 139 126 4
x30012:	mov bp, [bp + 2]	; 3: 139 110 2
x30015:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x30017:	dw 0	; 2: 0 0

@111$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x30019:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@112$string_memorySize203E3D200#:
x30065:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@113$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x30081:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary77 freeMemoryPtr
x30144:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary78 £temporary77 4
x30147:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary79 £temporary78

free$3:	; Assign freeBlockPtr £temporary79
x30150:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x30153:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x30158:	mov ax, [g_firstBlockPtr]	; 3: 161 65 117
x30161:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x30164:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x30168:	jne free$8	; 2: 117 11

free$7:	; Return
x30170:	mov ax, [bp]	; 3: 139 70 0
x30173:	mov di, [bp + 4]	; 3: 139 126 4
x30176:	mov bp, [bp + 2]	; 3: 139 110 2
x30179:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x30181:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x30185:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x30187:	mov ax, [bp + 8]	; 3: 139 70 8
x30190:	cmp [bp + 12], ax	; 3: 57 70 12
x30193:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x30195:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30199:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary84 -> currBlockPtr currBlockPtr 2
x30201:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary84 -> currBlockPtr 0
x30204:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30208:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x30210:	mov word [g_firstBlockPtr], 0	; 6: 199 6 65 117 0 0

free$14:	; Goto 27
x30216:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x30218:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30222:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary88 -> currBlockPtr currBlockPtr 2
x30224:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary88 -> currBlockPtr
x30227:	mov ax, [si + 2]	; 3: 139 68 2
x30230:	mov [g_firstBlockPtr], ax	; 3: 163 65 117

free$18:	; Goto 27
x30233:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary89 -> currBlockPtr currBlockPtr 2
x30235:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary89 -> currBlockPtr 0
x30238:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30242:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary91 -> prevBlockPtr prevBlockPtr 2
x30244:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary91 -> prevBlockPtr 0
x30247:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x30252:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary92 -> prevBlockPtr prevBlockPtr 2
x30254:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary93 -> currBlockPtr currBlockPtr 2
x30257:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary92 -> prevBlockPtr £temporary93 -> currBlockPtr
x30260:	mov ax, [di + 2]	; 3: 139 69 2
x30263:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x30266:	mov ax, [bp]	; 3: 139 70 0
x30269:	mov di, [bp + 4]	; 3: 139 126 4
x30272:	mov bp, [bp + 2]	; 3: 139 110 2
x30275:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x30277:	mov ax, [bp + 12]	; 3: 139 70 12
x30280:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary94 -> currBlockPtr currBlockPtr 2
x30283:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary94 -> currBlockPtr
x30286:	mov ax, [si + 2]	; 3: 139 68 2
x30289:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x30292:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x30294:	mov ax, [bp]	; 3: 139 70 0
x30297:	mov di, [bp + 4]	; 3: 139 126 4
x30300:	mov bp, [bp + 2]	; 3: 139 110 2
x30303:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x30305:	mov ax, [bp + 6]	; 3: 139 70 6
x30308:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x30311:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x30316:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x30321:	mov word [bp + 8], ftell$5	; 5: 199 70 8 127 118
x30326:	mov [bp + 10], bp	; 3: 137 110 10
x30329:	add bp, 8	; 3: 131 197 8
x30332:	jmp fseek	; 3: 233 217 231

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary933

ftell$7:	; SetReturnValue £temporary933

ftell$8:	; Return £temporary933
x30335:	mov ax, [bp]	; 3: 139 70 0
x30338:	mov di, [bp + 4]	; 3: 139 126 4
x30341:	mov bp, [bp + 2]	; 3: 139 110 2
x30344:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x30346:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary830 c
x30350:	mov si, bp	; 2: 137 238
x30352:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary830 6
x30355:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x30358:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x30363:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x30368:	mov ax, [bp + 6]	; 3: 139 70 6
x30371:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x30374:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 180 118
x30379:	mov [bp + 11], bp	; 3: 137 110 11
x30382:	add bp, 9	; 3: 131 197 9
x30385:	jmp fread	; 3: 233 188 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary831

fgetc$10:	; SignedLessThanEqual 14 £temporary831 0
x30388:	cmp bx, 0	; 3: 131 251 0
x30391:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary833 c
x30393:	mov bl, [bp + 8]	; 3: 138 94 8
x30396:	and bx, 255	; 4: 129 227 255 0
x30400:	cmp bl, 0	; 3: 128 251 0
x30403:	jge fgetc$12	; 2: 125 4
x30405:	neg bl	; 2: 246 219
x30407:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary833

fgetc$13:	; Return £temporary833
x30409:	mov ax, [bp]	; 3: 139 70 0
x30412:	mov di, [bp + 4]	; 3: 139 126 4
x30415:	mov bp, [bp + 2]	; 3: 139 110 2
x30418:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x30420:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x30423:	mov ax, [bp]	; 3: 139 70 0
x30426:	mov di, [bp + 4]	; 3: 139 126 4
x30429:	mov bp, [bp + 2]	; 3: 139 110 2
x30432:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

time_test:	; Assign weekdays[0] string_Sun#
x30434:	mov word [bp + 6], @12974$string_Sun#	; 5: 199 70 6 194 121

time_test$1:	; Assign weekdays[1] string_Mon#
x30439:	mov word [bp + 8], @12975$string_Mon#	; 5: 199 70 8 198 121

time_test$2:	; Assign weekdays[2] string_Tue#
x30444:	mov word [bp + 10], @12976$string_Tue#	; 5: 199 70 10 202 121

time_test$3:	; Assign weekdays[3] string_Wed#
x30449:	mov word [bp + 12], @12977$string_Wed#	; 5: 199 70 12 206 121

time_test$4:	; Assign weekdays[4] string_Thu#
x30454:	mov word [bp + 14], @12978$string_Thu#	; 5: 199 70 14 210 121

time_test$5:	; Assign weekdays[5] string_Fri#
x30459:	mov word [bp + 16], @12979$string_Fri#	; 5: 199 70 16 214 121

time_test$6:	; Assign weekdays[6] string_Sat#
x30464:	mov word [bp + 18], @12980$string_Sat#	; 5: 199 70 18 218 121

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x30469:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x30474:	mov word [bp + 20], time_test$10	; 5: 199 70 20 24 119
x30479:	mov [bp + 22], bp	; 3: 137 110 22
x30482:	add bp, 20	; 3: 131 197 20
x30485:	jmp time	; 3: 233 201 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6201

time_test$12:	; Assign now1 £temporary6201
x30488:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6202 now1
x30492:	mov si, bp	; 2: 137 238
x30494:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6202 6
x30497:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x30500:	mov word [bp + 24], time_test$17	; 5: 199 70 24 50 119
x30505:	mov [bp + 26], bp	; 3: 137 110 26
x30508:	add bp, 24	; 3: 131 197 24
x30511:	jmp gmtime	; 3: 233 70 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6203

time_test$19:	; Deref £temporary6204 -> £temporary6203 £temporary6203 0

time_test$20:	; Assign s £temporary6204 -> £temporary6203
x30514:	mov si, bp	; 2: 137 238
x30516:	add si, 24	; 3: 131 198 24
x30519:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x30521:	mov ah, [bx]	; 2: 138 39
x30523:	mov [si], ah	; 2: 136 36
x30525:	inc bx	; 1: 67
x30526:	inc si	; 1: 70
x30527:	dec al	; 2: 254 200
x30529:	cmp al, 0	; 2: 60 0
x30531:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6205 now1
x30533:	mov si, bp	; 2: 137 238
x30535:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6205 6
x30538:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x30541:	mov word [bp + 42], time_test$25	; 5: 199 70 42 91 119
x30546:	mov [bp + 44], bp	; 3: 137 110 44
x30549:	add bp, 42	; 3: 131 197 42
x30552:	jmp localtime	; 3: 233 0 10

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6206

time_test$27:	; Deref £temporary6207 -> £temporary6206 £temporary6206 0

time_test$28:	; Assign t £temporary6207 -> £temporary6206
x30555:	mov si, bp	; 2: 137 238
x30557:	add si, 42	; 3: 131 198 42
x30560:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x30562:	mov ah, [bx]	; 2: 138 39
x30564:	mov [si], ah	; 2: 136 36
x30566:	inc bx	; 1: 67
x30567:	inc si	; 1: 70
x30568:	dec al	; 2: 254 200
x30570:	cmp al, 0	; 2: 60 0
x30572:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6208 s
x30574:	mov si, bp	; 2: 137 238
x30576:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6208 6
x30579:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x30582:	mov word [bp + 60], time_test$33	; 5: 199 70 60 132 119
x30587:	mov [bp + 62], bp	; 3: 137 110 62
x30590:	add bp, 60	; 3: 131 197 60
x30593:	jmp mktime	; 3: 233 243 5

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6209

time_test$35:	; Assign now2 £temporary6209
x30596:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x30600:	mov word [bp + 70], @13005$string_now2013A2025lu0A#	; 5: 199 70 70 222 121

time_test$38:	; Parameter 64 now1 8
x30605:	mov eax, [bp + 20]	; 4: 102 139 70 20
x30609:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x30613:	mov word [bp + 64], time_test$40	; 5: 199 70 64 168 119
x30618:	mov [bp + 66], bp	; 3: 137 110 66
x30621:	add bp, 64	; 3: 131 197 64
x30624:	mov di, bp	; 2: 137 239
x30626:	add di, 4	; 3: 131 199 4
x30629:	jmp printf	; 3: 233 92 149

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x30632:	mov word [bp + 70], @13007$string_now2023A2025lu0A#	; 5: 199 70 70 234 121

time_test$43:	; Parameter 64 now2 8
x30637:	mov eax, [bp + 60]	; 4: 102 139 70 60
x30641:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x30645:	mov word [bp + 64], time_test$45	; 5: 199 70 64 200 119
x30650:	mov [bp + 66], bp	; 3: 137 110 66
x30653:	add bp, 64	; 3: 131 197 64
x30656:	mov di, bp	; 2: 137 239
x30658:	add di, 4	; 3: 131 199 4
x30661:	jmp printf	; 3: 233 60 149

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30664:	mov word [bp + 70], @13009$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 246 121

time_test$48:	; UnsignedMultiply £temporary6214 s$tm_wday 2
x30669:	mov ax, [bp + 36]	; 3: 139 70 36
x30672:	xor dx, dx	; 2: 49 210
x30674:	mul word [@13012$int2$2#]	; 4: 247 38 87 122

time_test$49:	; BinaryAdd £temporary6215 weekdays £temporary6214
x30678:	mov si, bp	; 2: 137 238
x30680:	add si, 6	; 3: 131 198 6
x30683:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6213 -> £temporary6215 £temporary6215 0

time_test$51:	; Parameter 64 £temporary6213 -> £temporary6215 8
x30685:	mov ax, [si]	; 2: 139 4
x30687:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6217 s$tm_year 1900
x30690:	mov ax, [bp + 34]	; 3: 139 70 34
x30693:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6217 10
x30696:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6219 s$tm_mon 1
x30699:	mov ax, [bp + 32]	; 3: 139 70 32
x30702:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6219 12
x30703:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x30706:	mov ax, [bp + 30]	; 3: 139 70 30
x30709:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x30712:	mov ax, [bp + 28]	; 3: 139 70 28
x30715:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x30718:	mov ax, [bp + 26]	; 3: 139 70 26
x30721:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x30724:	mov ax, [bp + 24]	; 3: 139 70 24
x30727:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x30730:	mov ax, [bp + 38]	; 3: 139 70 38
x30733:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x30736:	mov ax, [bp + 36]	; 3: 139 70 36
x30739:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x30742:	mov ax, [bp + 40]	; 3: 139 70 40
x30745:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x30748:	mov word [bp + 64], time_test$64	; 5: 199 70 64 47 120
x30753:	mov [bp + 66], bp	; 3: 137 110 66
x30756:	add bp, 64	; 3: 131 197 64
x30759:	mov di, bp	; 2: 137 239
x30761:	add di, 20	; 3: 131 199 20
x30764:	jmp printf	; 3: 233 213 148

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30767:	mov word [bp + 70], @13031$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 89 122

time_test$67:	; UnsignedMultiply £temporary6230 t$tm_wday 2
x30772:	mov ax, [bp + 54]	; 3: 139 70 54
x30775:	xor dx, dx	; 2: 49 210
x30777:	mul word [@13034$int2$2#]	; 4: 247 38 186 122

time_test$68:	; BinaryAdd £temporary6231 weekdays £temporary6230
x30781:	mov si, bp	; 2: 137 238
x30783:	add si, 6	; 3: 131 198 6
x30786:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6229 -> £temporary6231 £temporary6231 0

time_test$70:	; Parameter 64 £temporary6229 -> £temporary6231 8
x30788:	mov ax, [si]	; 2: 139 4
x30790:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6233 t$tm_year 1900
x30793:	mov ax, [bp + 52]	; 3: 139 70 52
x30796:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6233 10
x30799:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6235 t$tm_mon 1
x30802:	mov ax, [bp + 50]	; 3: 139 70 50
x30805:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6235 12
x30806:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x30809:	mov ax, [bp + 48]	; 3: 139 70 48
x30812:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x30815:	mov ax, [bp + 46]	; 3: 139 70 46
x30818:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x30821:	mov ax, [bp + 44]	; 3: 139 70 44
x30824:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x30827:	mov ax, [bp + 42]	; 3: 139 70 42
x30830:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x30833:	mov ax, [bp + 56]	; 3: 139 70 56
x30836:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x30839:	mov ax, [bp + 54]	; 3: 139 70 54
x30842:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x30845:	mov ax, [bp + 58]	; 3: 139 70 58
x30848:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x30851:	mov word [bp + 64], time_test$83	; 5: 199 70 64 150 120
x30856:	mov [bp + 66], bp	; 3: 137 110 66
x30859:	add bp, 64	; 3: 131 197 64
x30862:	mov di, bp	; 2: 137 239
x30864:	add di, 20	; 3: 131 199 20
x30867:	jmp printf	; 3: 233 110 148

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 566 buffer1 6
x30870:	mov [bp + 572], bp	; 4: 137 174 60 2
x30874:	add word [bp + 572], 64	; 5: 131 134 60 2 64

time_test$86:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6244 s
x30879:	mov si, bp	; 2: 137 238
x30881:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 566 £temporary6244 14
x30884:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$89:	; Call 566 asctime 8
x30888:	mov word [bp + 574], time_test$90	; 6: 199 134 62 2 185 120
x30894:	mov [bp + 576], bp	; 4: 137 174 64 2
x30898:	add bp, 574	; 4: 129 197 62 2
x30902:	jmp asctime	; 3: 233 59 9

time_test$90:	; PostCall 566

time_test$91:	; GetReturnValue £temporary6245

time_test$92:	; Parameter 566 £temporary6245 8
x30905:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$93:	; Call 566 strcpy 0
x30909:	mov word [bp + 566], time_test$94	; 6: 199 134 54 2 206 120
x30915:	mov [bp + 568], bp	; 4: 137 174 56 2
x30919:	add bp, 566	; 4: 129 197 54 2
x30923:	jmp strcpy	; 3: 233 243 229

time_test$94:	; PostCall 566

time_test$95:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 566 buffer2 6
x30926:	mov [bp + 572], bp	; 4: 137 174 60 2
x30930:	add word [bp + 572], 164	; 6: 129 134 60 2 164 0

time_test$97:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6247 now1
x30936:	mov si, bp	; 2: 137 238
x30938:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 566 £temporary6247 14
x30941:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$100:	; Call 566 ctime 8
x30945:	mov word [bp + 574], time_test$101	; 6: 199 134 62 2 242 120
x30951:	mov [bp + 576], bp	; 4: 137 174 64 2
x30955:	add bp, 574	; 4: 129 197 62 2
x30959:	jmp ctime	; 3: 233 212 11

time_test$101:	; PostCall 566

time_test$102:	; GetReturnValue £temporary6248

time_test$103:	; Parameter 566 £temporary6248 8
x30962:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$104:	; Call 566 strcpy 0
x30966:	mov word [bp + 566], time_test$105	; 6: 199 134 54 2 7 121
x30972:	mov [bp + 568], bp	; 4: 137 174 56 2
x30976:	add bp, 566	; 4: 129 197 54 2
x30980:	jmp strcpy	; 3: 233 186 229

time_test$105:	; PostCall 566

time_test$106:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 566 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x30983:	mov word [bp + 572], @13069$string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 60 2 188 122

time_test$108:	; Parameter 566 buffer1 8
x30989:	mov [bp + 574], bp	; 4: 137 174 62 2
x30993:	add word [bp + 574], 64	; 5: 131 134 62 2 64

time_test$109:	; Parameter 566 buffer2 10
x30998:	mov [bp + 576], bp	; 4: 137 174 64 2
x31002:	add word [bp + 576], 164	; 6: 129 134 64 2 164 0

time_test$110:	; Call 566 printf 0
x31008:	mov word [bp + 566], time_test$111	; 6: 199 134 54 2 54 121
x31014:	mov [bp + 568], bp	; 4: 137 174 56 2
x31018:	add bp, 566	; 4: 129 197 54 2
x31022:	mov di, bp	; 2: 137 239
x31024:	add di, 4	; 3: 131 199 4
x31027:	jmp printf	; 3: 233 206 147

time_test$111:	; PostCall 566

time_test$112:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 566 buffer 6
x31030:	mov [bp + 572], bp	; 4: 137 174 60 2
x31034:	add word [bp + 572], 264	; 6: 129 134 60 2 8 1

time_test$114:	; Parameter 566 300 8
x31040:	mov word [bp + 574], 300	; 6: 199 134 62 2 44 1

time_test$115:	; Parameter 566 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y# 10
x31046:	mov word [bp + 576], @13073$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#	; 6: 199 134 64 2 214 122

time_test$116:	; address £temporary6251 t
x31052:	mov si, bp	; 2: 137 238
x31054:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 566 £temporary6251 12
x31057:	mov [bp + 578], si	; 4: 137 182 66 2

time_test$118:	; Call 566 strftime 0
x31061:	mov word [bp + 566], time_test$119	; 6: 199 134 54 2 102 121
x31067:	mov [bp + 568], bp	; 4: 137 174 56 2
x31071:	add bp, 566	; 4: 129 197 54 2
x31075:	jmp strftime	; 3: 233 144 11

time_test$119:	; PostCall 566

time_test$120:	; GetReturnValue £temporary6252

time_test$121:	; Assign i £temporary6252
x31078:	mov [bp + 564], bx	; 4: 137 158 52 2

time_test$122:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 566 string_strftime2025i2025i203C25s3E0A# 6
x31082:	mov word [bp + 572], @13076$string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 60 2 204 123

time_test$124:	; Parameter 566 i 8
x31088:	mov ax, [bp + 564]	; 4: 139 134 52 2
x31092:	mov [bp + 574], ax	; 4: 137 134 62 2

time_test$125:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 566 buffer 16
x31096:	mov [bp + 582], bp	; 4: 137 174 70 2
x31100:	add word [bp + 582], 264	; 6: 129 134 70 2 8 1

time_test$127:	; Call 566 strlen 10
x31106:	mov word [bp + 576], time_test$128	; 6: 199 134 64 2 147 121
x31112:	mov [bp + 578], bp	; 4: 137 174 66 2
x31116:	add bp, 576	; 4: 129 197 64 2
x31120:	jmp strlen	; 3: 233 120 19

time_test$128:	; PostCall 566

time_test$129:	; GetReturnValue £temporary6253

time_test$130:	; Parameter 566 £temporary6253 10
x31123:	mov [bp + 576], bx	; 4: 137 158 64 2

time_test$131:	; Parameter 566 buffer 12
x31127:	mov [bp + 578], bp	; 4: 137 174 66 2
x31131:	add word [bp + 578], 264	; 6: 129 134 66 2 8 1

time_test$132:	; Call 566 printf 0
x31137:	mov word [bp + 566], time_test$133	; 6: 199 134 54 2 183 121
x31143:	mov [bp + 568], bp	; 4: 137 174 56 2
x31147:	add bp, 566	; 4: 129 197 54 2
x31151:	mov di, bp	; 2: 137 239
x31153:	add di, 6	; 3: 131 199 6
x31156:	jmp printf	; 3: 233 77 147

time_test$133:	; PostCall 566

time_test$134:	; Return 0
x31159:	mov ax, [bp]	; 3: 139 70 0
x31162:	mov di, [bp + 4]	; 3: 139 126 4
x31165:	mov bp, [bp + 2]	; 3: 139 110 2
x31168:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

@12974$string_Sun#:
x31170:	db "Sun", 0	; 4: 83 117 110 0

@12975$string_Mon#:
x31174:	db "Mon", 0	; 4: 77 111 110 0

@12976$string_Tue#:
x31178:	db "Tue", 0	; 4: 84 117 101 0

@12977$string_Wed#:
x31182:	db "Wed", 0	; 4: 87 101 100 0

@12978$string_Thu#:
x31186:	db "Thu", 0	; 4: 84 104 117 0

@12979$string_Fri#:
x31190:	db "Fri", 0	; 4: 70 114 105 0

@12980$string_Sat#:
x31194:	db "Sat", 0	; 4: 83 97 116 0

@13005$string_now2013A2025lu0A#:
x31198:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

@13007$string_now2023A2025lu0A#:
x31210:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

@13009$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31222:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13012$int2$2#:
x31319:	dw 2	; 2: 2 0

@13031$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31321:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13034$int2$2#:
x31418:	dw 2	; 2: 2 0

@13069$string_asctime203C25s3E2C20ctime203C25s3E0A#:
x31420:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

@13073$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#:
x31446:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y", 0	; 246: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 0

@13076$string_strftime2025i2025i203C25s3E0A#:
x31692:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$1:	; Call 19 localeconv 0
x31713:	mov word [bp + 19], time$2	; 5: 199 70 19 239 123
x31718:	mov [bp + 21], bp	; 3: 137 110 21
x31721:	add bp, 19	; 3: 131 197 19
x31724:	jmp localeconv	; 3: 233 136 162

time$2:	; PostCall 19

time$3:	; GetReturnValue £temporary3231

time$4:	; Assign localeConvPtr £temporary3231
x31727:	mov [bp + 19], bx	; 3: 137 94 19

time$5:	; AssignRegister ah 42
x31730:	mov ah, 42	; 2: 180 42

time$6:	; Interrupt 33
x31732:	int 33	; 2: 205 33

time$7:	; InspectRegister £temporary3233 cx

time$8:	; BinarySubtract year £temporary3233 1900
x31734:	sub cx, 1900	; 4: 129 233 108 7
x31738:	mov [bp + 12], cx	; 3: 137 78 12

time$9:	; InspectRegister £temporary3235 dh

time$10:	; BinarySubtract month £temporary3235 1
x31741:	dec dh	; 2: 254 206
x31743:	mov [bp + 14], dh	; 3: 136 118 14

time$11:	; InspectRegister £temporary3237 dl

time$12:	; Assign monthDay £temporary3237
x31746:	mov [bp + 15], dl	; 3: 136 86 15

time$13:	; AssignRegister ah 44
x31749:	mov ah, 44	; 2: 180 44

time$14:	; Interrupt 33
x31751:	int 33	; 2: 205 33

time$15:	; InspectRegister £temporary3239 ch

time$16:	; Assign hour £temporary3239
x31753:	mov [bp + 16], ch	; 3: 136 110 16

time$17:	; InspectRegister £temporary3240 cl

time$18:	; Assign min £temporary3240
x31756:	mov [bp + 17], cl	; 3: 136 78 17

time$19:	; InspectRegister £temporary3241 dh

time$20:	; Assign sec £temporary3241
x31759:	mov [bp + 18], dh	; 3: 136 118 18

time$21:	; Equal 25 localeConvPtr 0
x31762:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x31766:	je time$25	; 2: 116 18

time$22:	; Deref £temporary3243 -> localeConvPtr localeConvPtr 2
x31768:	mov si, [bp + 19]	; 3: 139 118 19

time$23:	; IntegralToIntegral £temporary3244 £temporary3243 -> localeConvPtr
x31771:	mov ax, [si + 2]	; 3: 139 68 2
x31774:	cmp ax, 0	; 3: 131 248 0
x31777:	jge time$24	; 2: 125 4
x31779:	neg ax	; 2: 247 216
x31781:	neg al	; 2: 246 216

time$24:	; BinarySubtract hour hour £temporary3244
x31783:	sub [bp + 16], al	; 3: 40 70 16

time$25:	; SignedModulo £temporary3246 year 4
x31786:	mov ax, [bp + 12]	; 3: 139 70 12
x31789:	xor dx, dx	; 2: 49 210
x31791:	idiv word [@7350$int2$4#]	; 4: 247 62 115 125

time$26:	; NotEqual 29 £temporary3246 0
x31795:	cmp dx, 0	; 3: 131 250 0
x31798:	jne time$29	; 2: 117 5

time$27:	; Assign £temporary3248 1
x31800:	mov ax, 1	; 3: 184 1 0

time$28:	; Goto 30
x31803:	jmp time$30	; 2: 235 3

time$29:	; Assign £temporary3248 0
x31805:	mov ax, 0	; 3: 184 0 0

time$30:	; Assign leapYear £temporary3248
x31808:	mov [bp + 21], ax	; 3: 137 70 21

time$31:	; Assign daysOfMonthsX[0] 31
x31811:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$32:	; Equal 35 leapYear 0
x31816:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x31820:	je time$35	; 2: 116 5

time$33:	; Assign £temporary3253 29
x31822:	mov ax, 29	; 3: 184 29 0

time$34:	; Goto 36
x31825:	jmp time$36	; 2: 235 3

time$35:	; Assign £temporary3253 28
x31827:	mov ax, 28	; 3: 184 28 0

time$36:	; Assign daysOfMonthsX[1] £temporary3253
x31830:	mov [bp + 25], ax	; 3: 137 70 25

time$37:	; Assign daysOfMonthsX[2] 31
x31833:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$38:	; Assign daysOfMonthsX[3] 30
x31838:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$39:	; Assign daysOfMonthsX[4] 31
x31843:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$40:	; Assign daysOfMonthsX[5] 30
x31848:	mov word [bp + 33], 30	; 5: 199 70 33 30 0

time$41:	; Assign daysOfMonthsX[6] 31
x31853:	mov word [bp + 35], 31	; 5: 199 70 35 31 0

time$42:	; Assign daysOfMonthsX[7] 31
x31858:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$43:	; Assign daysOfMonthsX[8] 30
x31863:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$44:	; Assign daysOfMonthsX[9] 31
x31868:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$45:	; Assign daysOfMonthsX[10] 30
x31873:	mov word [bp + 43], 30	; 5: 199 70 43 30 0

time$46:	; Assign daysOfMonthsX[11] 31
x31878:	mov word [bp + 45], 31	; 5: 199 70 45 31 0

time$47:	; IntegralToIntegral £temporary3266 monthDay
x31883:	mov al, [bp + 15]	; 3: 138 70 15
x31886:	and ax, 255	; 3: 37 255 0
x31889:	cmp al, 0	; 2: 60 0
x31891:	jge time$48	; 2: 125 4
x31893:	neg al	; 2: 246 216
x31895:	neg ax	; 2: 247 216

time$48:	; BinarySubtract yearDay £temporary3266 1
x31897:	dec ax	; 1: 72
x31898:	mov [bp + 47], ax	; 3: 137 70 47

time$49:	; Assign mon 0
x31901:	mov word [bp + 49], 0	; 5: 199 70 49 0 0

time$50:	; IntegralToIntegral £temporary3268 month
x31906:	mov al, [bp + 14]	; 3: 138 70 14
x31909:	and ax, 255	; 3: 37 255 0
x31912:	cmp al, 0	; 2: 60 0
x31914:	jge time$51	; 2: 125 4
x31916:	neg al	; 2: 246 216
x31918:	neg ax	; 2: 247 216

time$51:	; SignedGreaterThanEqual 58 mon £temporary3268
x31920:	cmp [bp + 49], ax	; 3: 57 70 49
x31923:	jge time$58	; 2: 125 26

time$52:	; UnsignedMultiply £temporary3272 mon 2
x31925:	mov ax, [bp + 49]	; 3: 139 70 49
x31928:	xor dx, dx	; 2: 49 210
x31930:	mul word [@7419$int2$2#]	; 4: 247 38 117 125

time$53:	; BinaryAdd £temporary3273 daysOfMonthsX £temporary3272
x31934:	mov si, bp	; 2: 137 238
x31936:	add si, 23	; 3: 131 198 23
x31939:	add si, ax	; 2: 1 198

time$54:	; Deref £temporary3271 -> £temporary3273 £temporary3273 0

time$55:	; BinaryAdd yearDay yearDay £temporary3271 -> £temporary3273
x31941:	mov ax, [si]	; 2: 139 4
x31943:	add [bp + 47], ax	; 3: 1 70 47

time$56:	; Increment mon
x31946:	inc word [bp + 49]	; 3: 255 70 49

time$57:	; Goto 50
x31949:	jmp time$50	; 2: 235 211

time$58:	; IntegralToIntegral £temporary3276 sec
x31951:	mov al, [bp + 18]	; 3: 138 70 18
x31954:	and ax, 255	; 3: 37 255 0
x31957:	cmp al, 0	; 2: 60 0
x31959:	jge time$59	; 2: 125 4
x31961:	neg al	; 2: 246 216
x31963:	neg ax	; 2: 247 216

time$59:	; Assign s$tm_sec £temporary3276
x31965:	mov [bp + 51], ax	; 3: 137 70 51

time$60:	; IntegralToIntegral £temporary3278 min
x31968:	mov al, [bp + 17]	; 3: 138 70 17
x31971:	and ax, 255	; 3: 37 255 0
x31974:	cmp al, 0	; 2: 60 0
x31976:	jge time$61	; 2: 125 4
x31978:	neg al	; 2: 246 216
x31980:	neg ax	; 2: 247 216

time$61:	; Assign s$tm_min £temporary3278
x31982:	mov [bp + 53], ax	; 3: 137 70 53

time$62:	; IntegralToIntegral £temporary3280 hour
x31985:	mov al, [bp + 16]	; 3: 138 70 16
x31988:	and ax, 255	; 3: 37 255 0
x31991:	cmp al, 0	; 2: 60 0
x31993:	jge time$63	; 2: 125 4
x31995:	neg al	; 2: 246 216
x31997:	neg ax	; 2: 247 216

time$63:	; Assign s$tm_hour £temporary3280
x31999:	mov [bp + 55], ax	; 3: 137 70 55

time$64:	; IntegralToIntegral £temporary3282 monthDay
x32002:	mov al, [bp + 15]	; 3: 138 70 15
x32005:	and ax, 255	; 3: 37 255 0
x32008:	cmp al, 0	; 2: 60 0
x32010:	jge time$65	; 2: 125 4
x32012:	neg al	; 2: 246 216
x32014:	neg ax	; 2: 247 216

time$65:	; Assign s$tm_mday £temporary3282
x32016:	mov [bp + 57], ax	; 3: 137 70 57

time$66:	; IntegralToIntegral £temporary3284 month
x32019:	mov al, [bp + 14]	; 3: 138 70 14
x32022:	and ax, 255	; 3: 37 255 0
x32025:	cmp al, 0	; 2: 60 0
x32027:	jge time$67	; 2: 125 4
x32029:	neg al	; 2: 246 216
x32031:	neg ax	; 2: 247 216

time$67:	; Assign s$tm_mon £temporary3284
x32033:	mov [bp + 59], ax	; 3: 137 70 59

time$68:	; Assign s$tm_year year
x32036:	mov ax, [bp + 12]	; 3: 139 70 12
x32039:	mov [bp + 61], ax	; 3: 137 70 61

time$69:	; Assign s$tm_wday 0
x32042:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$70:	; Assign s$tm_yday yearDay
x32047:	mov ax, [bp + 47]	; 3: 139 70 47
x32050:	mov [bp + 65], ax	; 3: 137 70 65

time$71:	; Assign s$tm_isdst 0
x32053:	mov word [bp + 67], 0	; 5: 199 70 67 0 0

time$72:	; CallHeader 69 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$73:	; address £temporary3289 s
x32058:	mov si, bp	; 2: 137 238
x32060:	add si, 51	; 3: 131 198 51

time$74:	; Parameter 69 £temporary3289 6
x32063:	mov [bp + 75], si	; 3: 137 118 75

time$75:	; Call 69 mktime 0
x32066:	mov word [bp + 69], time$76	; 5: 199 70 69 80 125
x32071:	mov [bp + 71], bp	; 3: 137 110 71
x32074:	add bp, 69	; 3: 131 197 69
x32077:	nop	; 1: 144
x32078:	jmp mktime	; 2: 235 39

time$76:	; PostCall 69

time$77:	; GetReturnValue £temporary3290

time$78:	; Assign time £temporary3290
x32080:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$79:	; Equal 82 timePtr 0
x32084:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32088:	je time$82	; 2: 116 10

time$80:	; Deref £temporary3292 -> timePtr timePtr 0
x32090:	mov si, [bp + 6]	; 3: 139 118 6

time$81:	; Assign £temporary3292 -> timePtr time
x32093:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32097:	mov [si], eax	; 3: 102 137 4

time$82:	; SetReturnValue time
x32100:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$83:	; Return time
x32104:	mov ax, [bp]	; 3: 139 70 0
x32107:	mov di, [bp + 4]	; 3: 139 126 4
x32110:	mov bp, [bp + 2]	; 3: 139 110 2
x32113:	jmp ax	; 2: 255 224

time$84:	; FunctionEnd time

@7350$int2$4#:
x32115:	dw 4	; 2: 4 0

@7419$int2$2#:
x32117:	dw 2	; 2: 2 0

mktime:	; Equal 28 tp 0
x32119:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32123:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3296 -> tp tp 10
x32127:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3297 £temporary3296 -> tp 69
x32130:	mov ax, [si + 10]	; 3: 139 68 10
x32133:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3298 £temporary3297 4
x32136:	xor dx, dx	; 2: 49 210
x32138:	idiv word [@7461$int2$4#]	; 4: 247 62 104 126

mktime$4:	; IntegralToIntegral £temporary3299 £temporary3298
x32142:	and eax, 65535	; 6: 102 37 255 255 0 0
x32148:	cmp ax, 0	; 3: 131 248 0
x32151:	jge mktime$5	; 2: 125 5
x32153:	neg ax	; 2: 247 216
x32155:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3299
x32158:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3300 -> tp tp 10
x32162:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3301 £temporary3300 -> tp 70
x32165:	mov ax, [si + 10]	; 3: 139 68 10
x32168:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3302 £temporary3301 365
x32171:	xor dx, dx	; 2: 49 210
x32173:	imul word [@7470$int2$365#]	; 4: 247 46 106 126

mktime$9:	; IntegralToIntegral £temporary3303 £temporary3302
x32177:	and eax, 65535	; 6: 102 37 255 255 0 0
x32183:	cmp ax, 0	; 3: 131 248 0
x32186:	jge mktime$10	; 2: 125 5
x32188:	neg ax	; 2: 247 216
x32190:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3304 £temporary3303 leapDays
x32193:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3305 -> tp tp 14
x32197:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3306 £temporary3305 -> tp
x32200:	mov bx, [si + 14]	; 3: 139 92 14
x32203:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x32210:	cmp bx, 0	; 3: 131 251 0
x32213:	jge mktime$13	; 2: 125 5
x32215:	neg bx	; 2: 247 219
x32217:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3304 £temporary3306
x32220:	add eax, ebx	; 3: 102 1 216
x32223:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3308 totalDays 86400
x32227:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32231:	xor edx, edx	; 3: 102 49 210
x32234:	imul dword [@7479$int4$86400#]	; 5: 102 247 46 108 126
x32239:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3309 -> tp tp 4
x32242:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3310 £temporary3309 -> tp
x32245:	mov ax, [si + 4]	; 3: 139 68 4
x32248:	and eax, 65535	; 6: 102 37 255 255 0 0
x32254:	cmp ax, 0	; 3: 131 248 0
x32257:	jge mktime$17	; 2: 125 5
x32259:	neg ax	; 2: 247 216
x32261:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3311 £temporary3310 3600
x32264:	xor edx, edx	; 3: 102 49 210
x32267:	imul dword [@7483$int4$3600#]	; 5: 102 247 46 112 126

mktime$18:	; BinaryAdd £temporary3312 £temporary3308 £temporary3311
x32272:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3313 -> tp tp 2
x32275:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3314 £temporary3313 -> tp
x32278:	mov ax, [si + 2]	; 3: 139 68 2
x32281:	and eax, 65535	; 6: 102 37 255 255 0 0
x32287:	cmp ax, 0	; 3: 131 248 0
x32290:	jge mktime$21	; 2: 125 5
x32292:	neg ax	; 2: 247 216
x32294:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3315 £temporary3314 60
x32297:	xor edx, edx	; 3: 102 49 210
x32300:	imul dword [@7489$int4$60#]	; 5: 102 247 46 116 126

mktime$22:	; BinaryAdd £temporary3316 £temporary3312 £temporary3315
x32305:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3317 -> tp tp 0
x32308:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3318 £temporary3317 -> tp
x32311:	mov ax, [si]	; 2: 139 4
x32313:	and eax, 65535	; 6: 102 37 255 255 0 0
x32319:	cmp ax, 0	; 3: 131 248 0
x32322:	jge mktime$25	; 2: 125 5
x32324:	neg ax	; 2: 247 216
x32326:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3319 £temporary3316 £temporary3318
x32329:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3319

mktime$27:	; Return £temporary3319
x32332:	mov ax, [bp]	; 3: 139 70 0
x32335:	mov di, [bp + 4]	; 3: 139 126 4
x32338:	mov bp, [bp + 2]	; 3: 139 110 2
x32341:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x32343:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x32349:	mov ax, [bp]	; 3: 139 70 0
x32352:	mov di, [bp + 4]	; 3: 139 126 4
x32355:	mov bp, [bp + 2]	; 3: 139 110 2
x32358:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

@7461$int2$4#:
x32360:	dw 4	; 2: 4 0

@7470$int2$365#:
x32362:	dw 365	; 2: 109 1

@7479$int4$86400#:
x32364:	dd 86400	; 4: 128 81 1 0

@7483$int4$3600#:
x32368:	dd 3600	; 4: 16 14 0 0

@7489$int4$60#:
x32372:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x32376:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32380:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3330 -> timePtr timePtr 0
x32384:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3330 -> timePtr
x32387:	mov eax, [si]	; 3: 102 139 4
x32390:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x32394:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32398:	xor edx, edx	; 3: 102 49 210
x32401:	idiv dword [@7532$int4$86400#]	; 5: 102 247 62 220 128
x32406:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x32410:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32414:	xor edx, edx	; 3: 102 49 210
x32417:	idiv dword [@7536$int4$3600#]	; 5: 102 247 62 224 128
x32422:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3334 secondsOfDay 3600
x32426:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32430:	xor edx, edx	; 3: 102 49 210
x32433:	idiv dword [@7541$int4$3600#]	; 5: 102 247 62 228 128

gmtime$6:	; IntegralToIntegral £temporary3335 £temporary3334
x32438:	cmp eax, 0	; 4: 102 131 248 0
x32442:	jge gmtime$7	; 2: 125 5
x32444:	neg eax	; 3: 102 247 216
x32447:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3335
x32449:	mov [@7499$g_timeStruct + 4], ax	; 3: 163 236 128

gmtime$8:	; SignedDivide £temporary3337 secondsOfHour 60
x32452:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32456:	xor edx, edx	; 3: 102 49 210
x32459:	idiv dword [@7546$int4$60#]	; 5: 102 247 62 250 128

gmtime$9:	; IntegralToIntegral £temporary3338 £temporary3337
x32464:	cmp eax, 0	; 4: 102 131 248 0
x32468:	jge gmtime$10	; 2: 125 5
x32470:	neg eax	; 3: 102 247 216
x32473:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3338
x32475:	mov [@7499$g_timeStruct + 2], ax	; 3: 163 234 128

gmtime$11:	; SignedModulo £temporary3340 secondsOfHour 60
x32478:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32482:	xor edx, edx	; 3: 102 49 210
x32485:	idiv dword [@7551$int4$60#]	; 5: 102 247 62 254 128

gmtime$12:	; IntegralToIntegral £temporary3341 £temporary3340
x32490:	cmp edx, 0	; 4: 102 131 250 0
x32494:	jge gmtime$13	; 2: 125 5
x32496:	neg edx	; 3: 102 247 218
x32499:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3341
x32501:	mov [@7499$g_timeStruct], dx	; 4: 137 22 232 128

gmtime$14:	; SignedDivide totalDays time 86400
x32505:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32509:	xor edx, edx	; 3: 102 49 210
x32512:	idiv dword [@7555$int4$86400#]	; 5: 102 247 62 2 129
x32517:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x32521:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x32526:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3345 totalDays 4
x32528:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32532:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3346 £temporary3345
x32536:	cmp eax, 0	; 4: 102 131 248 0
x32540:	jge gmtime$18	; 2: 125 5
x32542:	neg eax	; 3: 102 247 216
x32545:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3346
x32547:	mov [@7499$g_timeStruct + 12], ax	; 3: 163 244 128

gmtime$19:	; Goto 24
x32550:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3348 totalDays 3
x32552:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32556:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3349 £temporary3348 7
x32560:	xor edx, edx	; 3: 102 49 210
x32563:	idiv dword [@7571$int4$7#]	; 5: 102 247 62 6 129

gmtime$22:	; IntegralToIntegral £temporary3350 £temporary3349
x32568:	cmp edx, 0	; 4: 102 131 250 0
x32572:	jge gmtime$23	; 2: 125 5
x32574:	neg edx	; 3: 102 247 218
x32577:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3350
x32579:	mov [@7499$g_timeStruct + 12], dx	; 4: 137 22 244 128

gmtime$24:	; SignedDivide £temporary3351 totalDays 365
x32583:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32587:	xor edx, edx	; 3: 102 49 210
x32590:	idiv dword [@7576$int4$365#]	; 5: 102 247 62 10 129

gmtime$25:	; BinaryAdd £temporary3352 £temporary3351 1970
x32595:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3353 £temporary3352
x32601:	cmp eax, 0	; 4: 102 131 248 0
x32605:	jge gmtime$27	; 2: 125 5
x32607:	neg eax	; 3: 102 247 216
x32610:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3353
x32612:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3354 year 1969
x32615:	mov ax, [bp + 24]	; 3: 139 70 24
x32618:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3354 4
x32621:	xor dx, dx	; 2: 49 210
x32623:	idiv word [@7586$int2$4#]	; 4: 247 62 14 129
x32627:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x32630:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32634:	xor edx, edx	; 3: 102 49 210
x32637:	idiv dword [@7590$int4$365#]	; 5: 102 247 62 16 129
x32642:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3357 leapDays
x32646:	mov ax, [bp + 26]	; 3: 139 70 26
x32649:	and eax, 65535	; 6: 102 37 255 255 0 0
x32655:	cmp ax, 0	; 3: 131 248 0
x32658:	jge gmtime$32	; 2: 125 5
x32660:	neg ax	; 2: 247 216
x32662:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3357
x32665:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x32669:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x32674:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x32676:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x32679:	mov ax, [bp + 24]	; 3: 139 70 24
x32682:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x32685:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 187 127
x32690:	mov [bp + 30], bp	; 3: 137 110 30
x32693:	add bp, 28	; 3: 131 197 28
x32696:	jmp @7500$isLeapYear	; 3: 233 93 1

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3361

gmtime$40:	; Equal 43 £temporary3361 0
x32699:	cmp bx, 0	; 3: 131 251 0
x32702:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x32704:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x32712:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x32714:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x32722:	mov ax, [bp + 24]	; 3: 139 70 24
x32725:	sub ax, 1900	; 3: 45 108 7
x32728:	mov [@7499$g_timeStruct + 10], ax	; 3: 163 242 128

gmtime$45:	; IntegralToIntegral £temporary3368 totalDays
x32731:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32735:	cmp eax, 0	; 4: 102 131 248 0
x32739:	jge gmtime$46	; 2: 125 5
x32741:	neg eax	; 3: 102 247 216
x32744:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3368
x32746:	mov [@7499$g_timeStruct + 14], ax	; 3: 163 246 128

gmtime$47:	; Assign daysOfMonths[0] 31
x32749:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x32754:	mov ax, [bp + 24]	; 3: 139 70 24
x32757:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x32760:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 6 128
x32765:	mov [bp + 32], bp	; 3: 137 110 32
x32768:	add bp, 30	; 3: 131 197 30
x32771:	jmp @7500$isLeapYear	; 3: 233 18 1

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3369

gmtime$53:	; Equal 56 £temporary3369 0
x32774:	cmp bx, 0	; 3: 131 251 0
x32777:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3374 29
x32779:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x32782:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3374 28
x32784:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3374
x32787:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x32790:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x32795:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x32800:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x32805:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x32810:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x32815:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x32820:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x32825:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x32830:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x32835:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x32840:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; UnsignedMultiply £temporary3388 month 2
x32845:	mov ax, [bp + 52]	; 3: 139 70 52
x32848:	xor dx, dx	; 2: 49 210
x32850:	mul word [@7666$int2$2#]	; 4: 247 38 20 129

gmtime$70:	; BinaryAdd £temporary3389 daysOfMonths £temporary3388
x32854:	mov si, bp	; 2: 137 238
x32856:	add si, 28	; 3: 131 198 28
x32859:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3387 -> £temporary3389 £temporary3389 0

gmtime$72:	; IntegralToIntegral £temporary3390 £temporary3387 -> £temporary3389
x32861:	mov ax, [si]	; 2: 139 4
x32863:	and eax, 65535	; 6: 102 37 255 255 0 0
x32869:	cmp ax, 0	; 3: 131 248 0
x32872:	jge gmtime$73	; 2: 125 5
x32874:	neg ax	; 2: 247 216
x32876:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3390
x32879:	cmp [bp + 20], eax	; 4: 102 57 70 20
x32883:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3392 month
x32885:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x32888:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; UnsignedMultiply £temporary3394 £temporary3392 2
x32891:	xor dx, dx	; 2: 49 210
x32893:	mul word [@7674$int2$2#]	; 4: 247 38 22 129

gmtime$77:	; BinaryAdd £temporary3395 daysOfMonths £temporary3394
x32897:	mov si, bp	; 2: 137 238
x32899:	add si, 28	; 3: 131 198 28
x32902:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3393 -> £temporary3395 £temporary3395 0

gmtime$79:	; IntegralToIntegral £temporary3396 £temporary3393 -> £temporary3395
x32904:	mov ax, [si]	; 2: 139 4
x32906:	and eax, 65535	; 6: 102 37 255 255 0 0
x32912:	cmp ax, 0	; 3: 131 248 0
x32915:	jge gmtime$80	; 2: 125 5
x32917:	neg ax	; 2: 247 216
x32919:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3396
x32922:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x32926:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x32928:	mov ax, [bp + 52]	; 3: 139 70 52
x32931:	mov [@7499$g_timeStruct + 8], ax	; 3: 163 240 128

gmtime$83:	; BinaryAdd £temporary3400 totalDays 1
x32934:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32938:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3401 £temporary3400
x32940:	cmp eax, 0	; 4: 102 131 248 0
x32944:	jge gmtime$85	; 2: 125 5
x32946:	neg eax	; 3: 102 247 216
x32949:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3401
x32951:	mov [@7499$g_timeStruct + 6], ax	; 3: 163 238 128

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x32954:	mov word [@7499$g_timeStruct + 16], -1	; 6: 199 6 248 128 255 255

gmtime$87:	; SetReturnValue (@7499$g_timeStruct,0)
x32960:	mov bx, @7499$g_timeStruct	; 3: 187 232 128

gmtime$88:	; Return (@7499$g_timeStruct,0)
x32963:	mov ax, [bp]	; 3: 139 70 0
x32966:	mov di, [bp + 4]	; 3: 139 126 4
x32969:	mov bp, [bp + 2]	; 3: 139 110 2
x32972:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x32974:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x32977:	mov ax, [bp]	; 3: 139 70 0
x32980:	mov di, [bp + 4]	; 3: 139 126 4
x32983:	mov bp, [bp + 2]	; 3: 139 110 2
x32986:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@7532$int4$86400#:
x32988:	dd 86400	; 4: 128 81 1 0

@7536$int4$3600#:
x32992:	dd 3600	; 4: 16 14 0 0

@7541$int4$3600#:
x32996:	dd 3600	; 4: 16 14 0 0

@7499$g_timeStruct:
x33000:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7546$int4$60#:
x33018:	dd 60	; 4: 60 0 0 0

@7551$int4$60#:
x33022:	dd 60	; 4: 60 0 0 0

@7555$int4$86400#:
x33026:	dd 86400	; 4: 128 81 1 0

@7571$int4$7#:
x33030:	dd 7	; 4: 7 0 0 0

@7576$int4$365#:
x33034:	dd 365	; 4: 109 1 0 0

@7586$int2$4#:
x33038:	dw 4	; 2: 4 0

@7590$int4$365#:
x33040:	dd 365	; 4: 109 1 0 0

@7666$int2$2#:
x33044:	dw 2	; 2: 2 0

@7674$int2$2#:
x33046:	dw 2	; 2: 2 0

@7500$isLeapYear:	; SignedModulo £temporary3320 year 4
x33048:	mov ax, [bp + 6]	; 3: 139 70 6
x33051:	xor dx, dx	; 2: 49 210
x33053:	idiv word [@7502$int2$4#]	; 4: 247 62 85 129

@7500$isLeapYear$1:	; NotEqual 4 £temporary3320 0
x33057:	cmp dx, 0	; 3: 131 250 0
x33060:	jne @7500$isLeapYear$4	; 2: 117 14

@7500$isLeapYear$2:	; SignedModulo £temporary3322 year 100
x33062:	mov ax, [bp + 6]	; 3: 139 70 6
x33065:	xor dx, dx	; 2: 49 210
x33067:	idiv word [@7508$int2$100#]	; 4: 247 62 87 129

@7500$isLeapYear$3:	; NotEqual 6 £temporary3322 0
x33071:	cmp dx, 0	; 3: 131 250 0
x33074:	jne @7500$isLeapYear$6	; 2: 117 14

@7500$isLeapYear$4:	; SignedModulo £temporary3325 year 400
x33076:	mov ax, [bp + 6]	; 3: 139 70 6
x33079:	xor dx, dx	; 2: 49 210
x33081:	idiv word [@7515$int2$400#]	; 4: 247 62 89 129

@7500$isLeapYear$5:	; NotEqual 8 £temporary3325 0
x33085:	cmp dx, 0	; 3: 131 250 0
x33088:	jne @7500$isLeapYear$8	; 2: 117 5

@7500$isLeapYear$6:	; Assign £temporary3328 1
x33090:	mov bx, 1	; 3: 187 1 0

@7500$isLeapYear$7:	; Goto 9
x33093:	jmp @7500$isLeapYear$9	; 2: 235 3

@7500$isLeapYear$8:	; Assign £temporary3328 0
x33095:	mov bx, 0	; 3: 187 0 0

@7500$isLeapYear$9:	; SetReturnValue £temporary3328

@7500$isLeapYear$10:	; Return £temporary3328
x33098:	mov ax, [bp]	; 3: 139 70 0
x33101:	mov di, [bp + 4]	; 3: 139 126 4
x33104:	mov bp, [bp + 2]	; 3: 139 110 2
x33107:	jmp ax	; 2: 255 224

@7500$isLeapYear$11:	; FunctionEnd isLeapYear

@7502$int2$4#:
x33109:	dw 4	; 2: 4 0

@7508$int2$100#:
x33111:	dw 100	; 2: 100 0

@7515$int2$400#:
x33113:	dw 400	; 2: 144 1

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x33115:	mov ax, [bp + 6]	; 3: 139 70 6
x33118:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x33121:	mov word [bp + 8], localtime$3	; 5: 199 70 8 111 129
x33126:	mov [bp + 10], bp	; 3: 137 110 10
x33129:	add bp, 8	; 3: 131 197 8
x33132:	jmp gmtime	; 3: 233 9 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3457

localtime$5:	; Assign tmPtr £temporary3457
x33135:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$7:	; Call 10 localeconv 0
x33138:	mov word [bp + 10], localtime$8	; 5: 199 70 10 128 129
x33143:	mov [bp + 12], bp	; 3: 137 110 12
x33146:	add bp, 10	; 3: 131 197 10
x33149:	jmp localeconv	; 3: 233 247 156

localtime$8:	; PostCall 10

localtime$9:	; GetReturnValue £temporary3458

localtime$10:	; Assign localeConvPtr £temporary3458
x33152:	mov [bp + 10], bx	; 3: 137 94 10

localtime$11:	; Assign timeZone 0
x33155:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

localtime$12:	; Equal 21 localeConvPtr 0
x33160:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x33164:	je localtime$21	; 2: 116 25

localtime$13:	; Deref £temporary3460 -> tmPtr tmPtr 16
x33166:	mov si, [bp + 8]	; 3: 139 118 8

localtime$14:	; NotEqual 18 £temporary3460 -> tmPtr 1
x33169:	cmp word [si + 16], 1	; 4: 131 124 16 1
x33173:	jne localtime$18	; 2: 117 7

localtime$15:	; Deref £temporary3462 -> localeConvPtr localeConvPtr 0
x33175:	mov si, [bp + 10]	; 3: 139 118 10

localtime$16:	; Assign £temporary3467 £temporary3462 -> localeConvPtr
x33178:	mov ax, [si]	; 2: 139 4

localtime$17:	; Goto 20
x33180:	jmp localtime$20	; 2: 235 6

localtime$18:	; Deref £temporary3463 -> localeConvPtr localeConvPtr 2
x33182:	mov si, [bp + 10]	; 3: 139 118 10

localtime$19:	; Assign £temporary3467 £temporary3463 -> localeConvPtr
x33185:	mov ax, [si + 2]	; 3: 139 68 2

localtime$20:	; Assign timeZone £temporary3467
x33188:	mov [bp + 12], ax	; 3: 137 70 12

localtime$21:	; Deref £temporary3468 -> timePtr timePtr 0
x33191:	mov si, [bp + 6]	; 3: 139 118 6

localtime$22:	; IntegralToIntegral £temporary3469 timeZone
x33194:	mov ax, [bp + 12]	; 3: 139 70 12
x33197:	and eax, 65535	; 6: 102 37 255 255 0 0
x33203:	cmp ax, 0	; 3: 131 248 0
x33206:	jge localtime$23	; 2: 125 5
x33208:	neg ax	; 2: 247 216
x33210:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3470 £temporary3469 3600
x33213:	xor edx, edx	; 3: 102 49 210
x33216:	imul dword [@7857$int4$3600#]	; 5: 102 247 46 240 129

localtime$24:	; BinaryAdd t £temporary3468 -> timePtr £temporary3470
x33221:	mov ebx, [si]	; 3: 102 139 28
x33224:	add ebx, eax	; 3: 102 1 195
x33227:	mov [bp + 14], ebx	; 4: 102 137 94 14

localtime$25:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3472 t
x33231:	mov si, bp	; 2: 137 238
x33233:	add si, 14	; 3: 131 198 14

localtime$27:	; Parameter 18 £temporary3472 6
x33236:	mov [bp + 24], si	; 3: 137 118 24

localtime$28:	; Call 18 gmtime 0
x33239:	mov word [bp + 18], localtime$29	; 5: 199 70 18 229 129
x33244:	mov [bp + 20], bp	; 3: 137 110 20
x33247:	add bp, 18	; 3: 131 197 18
x33250:	jmp gmtime	; 3: 233 147 252

localtime$29:	; PostCall 18

localtime$30:	; GetReturnValue £temporary3473

localtime$31:	; SetReturnValue £temporary3473

localtime$32:	; Return £temporary3473
x33253:	mov ax, [bp]	; 3: 139 70 0
x33256:	mov di, [bp + 4]	; 3: 139 126 4
x33259:	mov bp, [bp + 2]	; 3: 139 110 2
x33262:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

@7857$int4$3600#:
x33264:	dd 3600	; 4: 16 14 0 0

asctime:	; Assign localeConvPtr 0
x33268:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 5 localeConvPtr 0
x33273:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33277:	je asctime$5	; 2: 116 8

asctime$2:	; Deref £temporary3408 -> localeConvPtr localeConvPtr 4
x33279:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Assign £temporary3412 £temporary3408 -> localeConvPtr
x33282:	mov ax, [si + 4]	; 3: 139 68 4

asctime$4:	; Goto 6
x33285:	jmp asctime$6	; 2: 235 3

asctime$5:	; Assign £temporary3412 0
x33287:	mov ax, 0	; 3: 184 0 0

asctime$6:	; Assign shortDayList £temporary3412
x33290:	mov [bp + 10], ax	; 3: 137 70 10

asctime$7:	; Equal 11 localeConvPtr 0
x33293:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33297:	je asctime$11	; 2: 116 8

asctime$8:	; Deref £temporary3414 -> localeConvPtr localeConvPtr 8
x33299:	mov si, [bp + 8]	; 3: 139 118 8

asctime$9:	; Assign £temporary3418 £temporary3414 -> localeConvPtr
x33302:	mov ax, [si + 8]	; 3: 139 68 8

asctime$10:	; Goto 12
x33305:	jmp asctime$12	; 2: 235 3

asctime$11:	; Assign £temporary3418 0
x33307:	mov ax, 0	; 3: 184 0 0

asctime$12:	; Assign shortMonthList £temporary3418
x33310:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Equal 16 shortDayList 0
x33313:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x33317:	je asctime$16	; 2: 116 5

asctime$14:	; Assign £temporary3423 shortDayList
x33319:	mov ax, [bp + 10]	; 3: 139 70 10

asctime$15:	; Goto 17
x33322:	jmp asctime$17	; 2: 235 3

asctime$16:	; Assign £temporary3423 g_defaultShortDayList
x33324:	mov ax, @7708$g_defaultShortDayList	; 3: 184 201 130

asctime$17:	; Assign shortDayList £temporary3423
x33327:	mov [bp + 10], ax	; 3: 137 70 10

asctime$18:	; Equal 21 shortMonthList 0
x33330:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x33334:	je asctime$21	; 2: 116 5

asctime$19:	; Assign £temporary3428 shortMonthList
x33336:	mov ax, [bp + 12]	; 3: 139 70 12

asctime$20:	; Goto 22
x33339:	jmp asctime$22	; 2: 235 3

asctime$21:	; Assign £temporary3428 g_defaultShortMonthList
x33341:	mov ax, @7729$g_defaultShortMonthList	; 3: 184 243 130

asctime$22:	; Assign shortMonthList £temporary3428
x33344:	mov [bp + 12], ax	; 3: 137 70 12

asctime$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$24:	; Parameter 14 g_timeString 6
x33347:	mov word [bp + 20], @7700$g_timeString	; 5: 199 70 20 59 131

asctime$25:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x33352:	mov word [bp + 22], @7797$string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 59 132

asctime$26:	; Deref £temporary3429 -> tp tp 12
x33357:	mov si, [bp + 6]	; 3: 139 118 6

asctime$27:	; UnsignedMultiply £temporary3431 £temporary3429 -> tp 2
x33360:	mov ax, [si + 12]	; 3: 139 68 12
x33363:	xor dx, dx	; 2: 49 210
x33365:	mul word [@7800$int2$2#]	; 4: 247 38 86 132

asctime$28:	; BinaryAdd £temporary3432 shortDayList £temporary3431
x33369:	mov si, [bp + 10]	; 3: 139 118 10
x33372:	add si, ax	; 2: 1 198

asctime$29:	; Deref £temporary3430 -> £temporary3432 £temporary3432 0

asctime$30:	; Parameter 14 £temporary3430 -> £temporary3432 10
x33374:	mov ax, [si]	; 2: 139 4
x33376:	mov [bp + 24], ax	; 3: 137 70 24

asctime$31:	; Deref £temporary3433 -> tp tp 8
x33379:	mov si, [bp + 6]	; 3: 139 118 6

asctime$32:	; UnsignedMultiply £temporary3435 £temporary3433 -> tp 2
x33382:	mov ax, [si + 8]	; 3: 139 68 8
x33385:	xor dx, dx	; 2: 49 210
x33387:	mul word [@7805$int2$2#]	; 4: 247 38 88 132

asctime$33:	; BinaryAdd £temporary3436 shortMonthList £temporary3435
x33391:	mov si, [bp + 12]	; 3: 139 118 12
x33394:	add si, ax	; 2: 1 198

asctime$34:	; Deref £temporary3434 -> £temporary3436 £temporary3436 0

asctime$35:	; Parameter 14 £temporary3434 -> £temporary3436 12
x33396:	mov ax, [si]	; 2: 139 4
x33398:	mov [bp + 26], ax	; 3: 137 70 26

asctime$36:	; Deref £temporary3437 -> tp tp 6
x33401:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; Parameter 14 £temporary3437 -> tp 14
x33404:	mov ax, [si + 6]	; 3: 139 68 6
x33407:	mov [bp + 28], ax	; 3: 137 70 28

asctime$38:	; Deref £temporary3438 -> tp tp 4
x33410:	mov si, [bp + 6]	; 3: 139 118 6

asctime$39:	; Parameter 14 £temporary3438 -> tp 16
x33413:	mov ax, [si + 4]	; 3: 139 68 4
x33416:	mov [bp + 30], ax	; 3: 137 70 30

asctime$40:	; Deref £temporary3439 -> tp tp 2
x33419:	mov si, [bp + 6]	; 3: 139 118 6

asctime$41:	; Parameter 14 £temporary3439 -> tp 18
x33422:	mov ax, [si + 2]	; 3: 139 68 2
x33425:	mov [bp + 32], ax	; 3: 137 70 32

asctime$42:	; Deref £temporary3440 -> tp tp 0
x33428:	mov si, [bp + 6]	; 3: 139 118 6

asctime$43:	; Parameter 14 £temporary3440 -> tp 20
x33431:	mov ax, [si]	; 2: 139 4
x33433:	mov [bp + 34], ax	; 3: 137 70 34

asctime$44:	; Deref £temporary3441 -> tp tp 10
x33436:	mov si, [bp + 6]	; 3: 139 118 6

asctime$45:	; BinaryAdd £temporary3442 £temporary3441 -> tp 1900
x33439:	mov ax, [si + 10]	; 3: 139 68 10
x33442:	add ax, 1900	; 3: 5 108 7

asctime$46:	; Parameter 14 £temporary3442 22
x33445:	mov [bp + 36], ax	; 3: 137 70 36

asctime$47:	; Call 14 sprintf 0
x33448:	mov word [bp + 14], asctime$48	; 5: 199 70 14 187 130
x33453:	mov [bp + 16], bp	; 3: 137 110 16
x33456:	add bp, 14	; 3: 131 197 14
x33459:	mov di, bp	; 2: 137 239
x33461:	add di, 14	; 3: 131 199 14
x33464:	jmp sprintf	; 3: 233 159 1

asctime$48:	; PostCall 14

asctime$49:	; SetReturnValue g_timeString
x33467:	mov bx, @7700$g_timeString	; 3: 187 59 131

asctime$50:	; Return g_timeString
x33470:	mov ax, [bp]	; 3: 139 70 0
x33473:	mov di, [bp + 4]	; 3: 139 126 4
x33476:	mov bp, [bp + 2]	; 3: 139 110 2
x33479:	jmp ax	; 2: 255 224

asctime$51:	; FunctionEnd asctime

@7708$g_defaultShortDayList:
x33481:	dw @7701$string_Sun# ; 2: 215 130
x33483:	dw @7702$string_Mon# ; 2: 219 130
x33485:	dw @7703$string_Tue# ; 2: 223 130
x33487:	dw @7704$string_Wed# ; 2: 227 130
x33489:	dw @7705$string_Thu# ; 2: 231 130
x33491:	dw @7706$string_Fri# ; 2: 235 130
x33493:	dw @7707$string_Sat# ; 2: 239 130

@7701$string_Sun#:
x33495:	db "Sun", 0	; 4: 83 117 110 0

@7702$string_Mon#:
x33499:	db "Mon", 0	; 4: 77 111 110 0

@7703$string_Tue#:
x33503:	db "Tue", 0	; 4: 84 117 101 0

@7704$string_Wed#:
x33507:	db "Wed", 0	; 4: 87 101 100 0

@7705$string_Thu#:
x33511:	db "Thu", 0	; 4: 84 104 117 0

@7706$string_Fri#:
x33515:	db "Fri", 0	; 4: 70 114 105 0

@7707$string_Sat#:
x33519:	db "Sat", 0	; 4: 83 97 116 0

@7729$g_defaultShortMonthList:
x33523:	dw @7717$string_Jan# ; 2: 11 131
x33525:	dw @7718$string_Feb# ; 2: 15 131
x33527:	dw @7719$string_Mar# ; 2: 19 131
x33529:	dw @7720$string_Apr# ; 2: 23 131
x33531:	dw @7721$string_May# ; 2: 27 131
x33533:	dw @7722$string_Jun# ; 2: 31 131
x33535:	dw @7723$string_Jul# ; 2: 35 131
x33537:	dw @7724$string_Aug# ; 2: 39 131
x33539:	dw @7725$string_Sep# ; 2: 43 131
x33541:	dw @7726$string_Oct# ; 2: 47 131
x33543:	dw @7727$string_Nov# ; 2: 51 131
x33545:	dw @7728$string_Dec# ; 2: 55 131

@7717$string_Jan#:
x33547:	db "Jan", 0	; 4: 74 97 110 0

@7718$string_Feb#:
x33551:	db "Feb", 0	; 4: 70 101 98 0

@7719$string_Mar#:
x33555:	db "Mar", 0	; 4: 77 97 114 0

@7720$string_Apr#:
x33559:	db "Apr", 0	; 4: 65 112 114 0

@7721$string_May#:
x33563:	db "May", 0	; 4: 77 97 121 0

@7722$string_Jun#:
x33567:	db "Jun", 0	; 4: 74 117 110 0

@7723$string_Jul#:
x33571:	db "Jul", 0	; 4: 74 117 108 0

@7724$string_Aug#:
x33575:	db "Aug", 0	; 4: 65 117 103 0

@7725$string_Sep#:
x33579:	db "Sep", 0	; 4: 83 101 112 0

@7726$string_Oct#:
x33583:	db "Oct", 0	; 4: 79 99 116 0

@7727$string_Nov#:
x33587:	db "Nov", 0	; 4: 78 111 118 0

@7728$string_Dec#:
x33591:	db "Dec", 0	; 4: 68 101 99 0

@7700$g_timeString:
x33595:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7797$string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x33851:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

@7800$int2$2#:
x33878:	dw 2	; 2: 2 0

@7805$int2$2#:
x33880:	dw 2	; 2: 2 0

sprintf:	; address £temporary2218 format
x33882:	mov si, bp	; 2: 137 238
x33884:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2219 £temporary2218

sprintf$2:	; BinaryAdd arg_list £temporary2219 2
x33887:	add si, 2	; 3: 131 198 2
x33890:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x33893:	mov ax, [bp + 6]	; 3: 139 70 6
x33896:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x33899:	mov ax, [bp + 8]	; 3: 139 70 8
x33902:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x33905:	mov ax, [di + 10]	; 3: 139 69 10
x33908:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x33911:	mov word [di + 12], sprintf$8	; 5: 199 69 12 138 132
x33916:	mov [di + 14], bp	; 3: 137 109 14
x33919:	mov [di + 16], di	; 3: 137 125 16
x33922:	add di, 12	; 3: 131 199 12
x33925:	mov bp, di	; 2: 137 253
x33927:	nop	; 1: 144
x33928:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2221

sprintf$10:	; SetReturnValue £temporary2221

sprintf$11:	; Return £temporary2221
x33930:	mov ax, [bp]	; 3: 139 70 0
x33933:	mov di, [bp + 4]	; 3: 139 126 4
x33936:	mov bp, [bp + 2]	; 3: 139 110 2
x33939:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x33941:	mov word [g_outStatus], 1	; 6: 199 6 219 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2226 outString
x33947:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2226
x33950:	mov [g_outDevice], ax	; 3: 163 221 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x33953:	mov ax, [bp + 8]	; 3: 139 70 8
x33956:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x33959:	mov ax, [bp + 10]	; 3: 139 70 10
x33962:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x33965:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 187 132
x33970:	mov [bp + 14], bp	; 3: 137 110 14
x33973:	add bp, 12	; 3: 131 197 12
x33976:	jmp printFormat	; 3: 233 36 139

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2227

vsprintf$9:	; SetReturnValue £temporary2227

vsprintf$10:	; Return £temporary2227
x33979:	mov ax, [bp]	; 3: 139 70 0
x33982:	mov di, [bp + 4]	; 3: 139 126 4
x33985:	mov bp, [bp + 2]	; 3: 139 110 2
x33988:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x33990:	mov ax, [bp + 6]	; 3: 139 70 6
x33993:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x33996:	mov word [bp + 8], ctime$4	; 5: 199 70 8 218 132
x34001:	mov [bp + 10], bp	; 3: 137 110 10
x34004:	add bp, 8	; 3: 131 197 8
x34007:	jmp localtime	; 3: 233 129 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3453

ctime$6:	; Parameter 8 £temporary3453 6
x34010:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x34013:	mov word [bp + 8], ctime$8	; 5: 199 70 8 235 132
x34018:	mov [bp + 10], bp	; 3: 137 110 10
x34021:	add bp, 8	; 3: 131 197 8
x34024:	jmp asctime	; 3: 233 9 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3454

ctime$10:	; SetReturnValue £temporary3454

ctime$11:	; Return £temporary3454
x34027:	mov ax, [bp]	; 3: 139 70 0
x34030:	mov di, [bp + 4]	; 3: 139 126 4
x34033:	mov bp, [bp + 2]	; 3: 139 110 2
x34036:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x34038:	mov word [bp + 14], strftime$2	; 5: 199 70 14 4 133
x34043:	mov [bp + 16], bp	; 3: 137 110 16
x34046:	add bp, 14	; 3: 131 197 14
x34049:	jmp localeconv	; 3: 233 115 153

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3477

strftime$4:	; Assign localeConvPtr £temporary3477
x34052:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 9 localeConvPtr 0
x34055:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34059:	je strftime$9	; 2: 116 8

strftime$6:	; Deref £temporary3479 -> localeConvPtr localeConvPtr 4
x34061:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Assign £temporary3483 £temporary3479 -> localeConvPtr
x34064:	mov ax, [si + 4]	; 3: 139 68 4

strftime$8:	; Goto 10
x34067:	jmp strftime$10	; 2: 235 3

strftime$9:	; Assign £temporary3483 0
x34069:	mov ax, 0	; 3: 184 0 0

strftime$10:	; Assign shortDayList £temporary3483
x34072:	mov [bp + 16], ax	; 3: 137 70 16

strftime$11:	; Equal 15 localeConvPtr 0
x34075:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34079:	je strftime$15	; 2: 116 8

strftime$12:	; Deref £temporary3485 -> localeConvPtr localeConvPtr 8
x34081:	mov si, [bp + 14]	; 3: 139 118 14

strftime$13:	; Assign £temporary3489 £temporary3485 -> localeConvPtr
x34084:	mov ax, [si + 8]	; 3: 139 68 8

strftime$14:	; Goto 16
x34087:	jmp strftime$16	; 2: 235 3

strftime$15:	; Assign £temporary3489 0
x34089:	mov ax, 0	; 3: 184 0 0

strftime$16:	; Assign shortMonthList £temporary3489
x34092:	mov [bp + 18], ax	; 3: 137 70 18

strftime$17:	; Equal 21 localeConvPtr 0
x34095:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34099:	je strftime$21	; 2: 116 8

strftime$18:	; Deref £temporary3491 -> localeConvPtr localeConvPtr 6
x34101:	mov si, [bp + 14]	; 3: 139 118 14

strftime$19:	; Assign £temporary3495 £temporary3491 -> localeConvPtr
x34104:	mov ax, [si + 6]	; 3: 139 68 6

strftime$20:	; Goto 22
x34107:	jmp strftime$22	; 2: 235 3

strftime$21:	; Assign £temporary3495 0
x34109:	mov ax, 0	; 3: 184 0 0

strftime$22:	; Assign longDayList £temporary3495
x34112:	mov [bp + 20], ax	; 3: 137 70 20

strftime$23:	; Equal 27 localeConvPtr 0
x34115:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34119:	je strftime$27	; 2: 116 8

strftime$24:	; Deref £temporary3497 -> localeConvPtr localeConvPtr 10
x34121:	mov si, [bp + 14]	; 3: 139 118 14

strftime$25:	; Assign £temporary3501 £temporary3497 -> localeConvPtr
x34124:	mov ax, [si + 10]	; 3: 139 68 10

strftime$26:	; Goto 28
x34127:	jmp strftime$28	; 2: 235 3

strftime$27:	; Assign £temporary3501 0
x34129:	mov ax, 0	; 3: 184 0 0

strftime$28:	; Assign longMonthList £temporary3501
x34132:	mov [bp + 22], ax	; 3: 137 70 22

strftime$29:	; Deref £temporary3502 -> tp tp 10
x34135:	mov si, [bp + 12]	; 3: 139 118 12

strftime$30:	; BinarySubtract £temporary3503 £temporary3502 -> tp 69
x34138:	mov ax, [si + 10]	; 3: 139 68 10
x34141:	sub ax, 69	; 3: 131 232 69

strftime$31:	; SignedDivide leapDays £temporary3503 4
x34144:	xor dx, dx	; 2: 49 210
x34146:	idiv word [@7935$int2$4#]	; 4: 247 62 208 139
x34150:	mov [bp + 24], ax	; 3: 137 70 24

strftime$32:	; Deref £temporary3505 -> tp tp 10
x34153:	mov si, [bp + 12]	; 3: 139 118 12

strftime$33:	; BinarySubtract £temporary3506 £temporary3505 -> tp 70
x34156:	mov ax, [si + 10]	; 3: 139 68 10
x34159:	sub ax, 70	; 3: 131 232 70

strftime$34:	; SignedMultiply £temporary3507 £temporary3506 365
x34162:	xor dx, dx	; 2: 49 210
x34164:	imul word [@7943$int2$365#]	; 4: 247 46 210 139

strftime$35:	; BinaryAdd £temporary3508 £temporary3507 leapDays
x34168:	add ax, [bp + 24]	; 3: 3 70 24

strftime$36:	; Deref £temporary3509 -> tp tp 14
x34171:	mov si, [bp + 12]	; 3: 139 118 12

strftime$37:	; BinaryAdd £temporary3510 £temporary3508 £temporary3509 -> tp
x34174:	add ax, [si + 14]	; 3: 3 68 14

strftime$38:	; IntegralToIntegral £temporary3511 £temporary3510
x34177:	and eax, 65535	; 6: 102 37 255 255 0 0
x34183:	cmp ax, 0	; 3: 131 248 0
x34186:	jge strftime$39	; 2: 125 5
x34188:	neg ax	; 2: 247 216
x34190:	neg eax	; 3: 102 247 216

strftime$39:	; Assign totalDays £temporary3511
x34193:	mov [bp + 26], eax	; 4: 102 137 70 26

strftime$40:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$41:	; Parameter 34 s 6
x34197:	mov ax, [bp + 6]	; 3: 139 70 6
x34200:	mov [bp + 40], ax	; 3: 137 70 40

strftime$42:	; Parameter 34 string_# 8
x34203:	mov word [bp + 42], @7952$string_#	; 5: 199 70 42 212 139

strftime$43:	; Call 34 strcpy 0
x34208:	mov word [bp + 34], strftime$44	; 5: 199 70 34 174 133
x34213:	mov [bp + 36], bp	; 3: 137 110 36
x34216:	add bp, 34	; 3: 131 197 34
x34219:	jmp strcpy	; 3: 233 19 217

strftime$44:	; PostCall 34

strftime$45:	; Equal 48 shortDayList 0
x34222:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x34226:	je strftime$48	; 2: 116 5

strftime$46:	; Assign £temporary3517 shortDayList
x34228:	mov ax, [bp + 16]	; 3: 139 70 16

strftime$47:	; Goto 49
x34231:	jmp strftime$49	; 2: 235 3

strftime$48:	; Assign £temporary3517 g_defaultShortDayList
x34233:	mov ax, @7708$g_defaultShortDayList	; 3: 184 201 130

strftime$49:	; Assign shortDayList £temporary3517
x34236:	mov [bp + 16], ax	; 3: 137 70 16

strftime$50:	; Equal 53 longDayList 0
x34239:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x34243:	je strftime$53	; 2: 116 5

strftime$51:	; Assign £temporary3522 longDayList
x34245:	mov ax, [bp + 20]	; 3: 139 70 20

strftime$52:	; Goto 54
x34248:	jmp strftime$54	; 2: 235 3

strftime$53:	; Assign £temporary3522 g_defaultLongDayList
x34250:	mov ax, @7716$g_defaultLongDayList	; 3: 184 213 139

strftime$54:	; Assign longDayList £temporary3522
x34253:	mov [bp + 20], ax	; 3: 137 70 20

strftime$55:	; Equal 58 shortMonthList 0
x34256:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x34260:	je strftime$58	; 2: 116 5

strftime$56:	; Assign £temporary3527 shortMonthList
x34262:	mov ax, [bp + 18]	; 3: 139 70 18

strftime$57:	; Goto 59
x34265:	jmp strftime$59	; 2: 235 3

strftime$58:	; Assign £temporary3527 g_defaultShortMonthList
x34267:	mov ax, @7729$g_defaultShortMonthList	; 3: 184 243 130

strftime$59:	; Assign shortMonthList £temporary3527
x34270:	mov [bp + 18], ax	; 3: 137 70 18

strftime$60:	; Equal 63 longMonthList 0
x34273:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x34277:	je strftime$63	; 2: 116 5

strftime$61:	; Assign £temporary3532 longMonthList
x34279:	mov ax, [bp + 22]	; 3: 139 70 22

strftime$62:	; Goto 64
x34282:	jmp strftime$64	; 2: 235 3

strftime$63:	; Assign £temporary3532 g_defaultLongMonthList
x34284:	mov ax, @7742$g_defaultLongMonthList	; 3: 184 28 140

strftime$64:	; Assign longMonthList £temporary3532
x34287:	mov [bp + 22], ax	; 3: 137 70 22

strftime$65:	; SignedGreaterThanEqual 70 totalDays 3
x34290:	cmp dword [bp + 26], 3	; 5: 102 131 126 26 3
x34295:	jge strftime$70	; 2: 125 24

strftime$66:	; BinaryAdd £temporary3534 totalDays 4
x34297:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34301:	add eax, 4	; 4: 102 131 192 4

strftime$67:	; IntegralToIntegral £temporary3535 £temporary3534
x34305:	cmp eax, 0	; 4: 102 131 248 0
x34309:	jge strftime$68	; 2: 125 5
x34311:	neg eax	; 3: 102 247 216
x34314:	neg ax	; 2: 247 216

strftime$68:	; Assign yearDaySunday £temporary3535
x34316:	mov [bp + 30], ax	; 3: 137 70 30

strftime$69:	; Goto 74
x34319:	jmp strftime$74	; 2: 235 30

strftime$70:	; BinarySubtract £temporary3536 totalDays 3
x34321:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34325:	sub eax, 3	; 4: 102 131 232 3

strftime$71:	; SignedModulo £temporary3537 £temporary3536 7
x34329:	xor edx, edx	; 3: 102 49 210
x34332:	idiv dword [@8005$int4$7#]	; 5: 102 247 62 138 140

strftime$72:	; IntegralToIntegral £temporary3538 £temporary3537
x34337:	cmp edx, 0	; 4: 102 131 250 0
x34341:	jge strftime$73	; 2: 125 5
x34343:	neg edx	; 3: 102 247 218
x34346:	neg dx	; 2: 247 218

strftime$73:	; Assign yearDaySunday £temporary3538
x34348:	mov [bp + 30], dx	; 3: 137 86 30

strftime$74:	; SignedGreaterThanEqual 79 totalDays 4
x34351:	cmp dword [bp + 26], 4	; 5: 102 131 126 26 4
x34356:	jge strftime$79	; 2: 125 24

strftime$75:	; BinaryAdd £temporary3540 totalDays 3
x34358:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34362:	add eax, 3	; 4: 102 131 192 3

strftime$76:	; IntegralToIntegral £temporary3541 £temporary3540
x34366:	cmp eax, 0	; 4: 102 131 248 0
x34370:	jge strftime$77	; 2: 125 5
x34372:	neg eax	; 3: 102 247 216
x34375:	neg ax	; 2: 247 216

strftime$77:	; Assign yearDayMonday £temporary3541
x34377:	mov [bp + 32], ax	; 3: 137 70 32

strftime$78:	; Goto 83
x34380:	jmp strftime$83	; 2: 235 30

strftime$79:	; BinarySubtract £temporary3542 totalDays 4
x34382:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34386:	sub eax, 4	; 4: 102 131 232 4

strftime$80:	; SignedModulo £temporary3543 £temporary3542 7
x34390:	xor edx, edx	; 3: 102 49 210
x34393:	idiv dword [@8019$int4$7#]	; 5: 102 247 62 142 140

strftime$81:	; IntegralToIntegral £temporary3544 £temporary3543
x34398:	cmp edx, 0	; 4: 102 131 250 0
x34402:	jge strftime$82	; 2: 125 5
x34404:	neg edx	; 3: 102 247 218
x34407:	neg dx	; 2: 247 218

strftime$82:	; Assign yearDayMonday £temporary3544
x34409:	mov [bp + 32], dx	; 3: 137 86 32

strftime$83:	; Assign index 0
x34412:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

strftime$84:	; BinaryAdd £temporary3546 fmt index
x34417:	mov si, [bp + 10]	; 3: 139 118 10
x34420:	add si, [bp + 34]	; 3: 3 118 34

strftime$85:	; Deref £temporary3545 -> £temporary3546 £temporary3546 0

strftime$86:	; Equal 356 £temporary3545 -> £temporary3546 0
x34423:	cmp byte [si], 0	; 3: 128 60 0
x34426:	je strftime$356	; 4: 15 132 51 5

strftime$87:	; BinaryAdd £temporary3550 fmt index
x34430:	mov si, [bp + 10]	; 3: 139 118 10
x34433:	add si, [bp + 34]	; 3: 3 118 34

strftime$88:	; Deref £temporary3549 -> £temporary3550 £temporary3550 0

strftime$89:	; NotEqual 329 £temporary3549 -> £temporary3550 37
x34436:	cmp byte [si], 37	; 3: 128 60 37
x34439:	jne strftime$329	; 4: 15 133 179 4

strftime$90:	; Increment index
x34443:	inc word [bp + 34]	; 3: 255 70 34

strftime$91:	; Assign £temporary3552 index
x34446:	mov ax, [bp + 34]	; 3: 139 70 34

strftime$92:	; BinaryAdd £temporary3554 fmt £temporary3552
x34449:	mov si, [bp + 10]	; 3: 139 118 10
x34452:	add si, ax	; 2: 1 198

strftime$93:	; Deref £temporary3553 -> £temporary3554 £temporary3554 0

strftime$94:	; Case 118 £temporary3553 -> £temporary3554 97
x34454:	mov al, [si]	; 2: 138 4
x34456:	cmp al, 97	; 2: 60 97
x34458:	je strftime$118	; 4: 15 132 129 0

strftime$95:	; Case 128 £temporary3553 -> £temporary3554 65
x34462:	cmp al, 65	; 2: 60 65
x34464:	je strftime$128	; 4: 15 132 169 0

strftime$96:	; Case 138 £temporary3553 -> £temporary3554 98
x34468:	cmp al, 98	; 2: 60 98
x34470:	je strftime$138	; 4: 15 132 209 0

strftime$97:	; Case 148 £temporary3553 -> £temporary3554 66
x34474:	cmp al, 66	; 2: 60 66
x34476:	je strftime$148	; 4: 15 132 249 0

strftime$98:	; Case 158 £temporary3553 -> £temporary3554 99
x34480:	cmp al, 99	; 2: 60 99
x34482:	je strftime$158	; 4: 15 132 33 1

strftime$99:	; Case 178 £temporary3553 -> £temporary3554 100
x34486:	cmp al, 100	; 2: 60 100
x34488:	je strftime$178	; 4: 15 132 118 1

strftime$100:	; Case 186 £temporary3553 -> £temporary3554 72
x34492:	cmp al, 72	; 2: 60 72
x34494:	je strftime$186	; 4: 15 132 155 1

strftime$101:	; Case 194 £temporary3553 -> £temporary3554 73
x34498:	cmp al, 73	; 2: 60 73
x34500:	je strftime$194	; 4: 15 132 192 1

strftime$102:	; Case 203 £temporary3553 -> £temporary3554 106
x34504:	cmp al, 106	; 2: 60 106
x34506:	je strftime$203	; 4: 15 132 235 1

strftime$103:	; Case 211 £temporary3553 -> £temporary3554 109
x34510:	cmp al, 109	; 2: 60 109
x34512:	je strftime$211	; 4: 15 132 16 2

strftime$104:	; Case 220 £temporary3553 -> £temporary3554 77
x34516:	cmp al, 77	; 2: 60 77
x34518:	je strftime$220	; 4: 15 132 54 2

strftime$105:	; Case 228 £temporary3553 -> £temporary3554 112
x34522:	cmp al, 112	; 2: 60 112
x34524:	je strftime$228	; 4: 15 132 91 2

strftime$106:	; Case 240 £temporary3553 -> £temporary3554 83
x34528:	cmp al, 83	; 2: 60 83
x34530:	je strftime$240	; 4: 15 132 139 2

strftime$107:	; Case 248 £temporary3553 -> £temporary3554 85
x34534:	cmp al, 85	; 2: 60 85
x34536:	je strftime$248	; 4: 15 132 175 2

strftime$108:	; Case 255 £temporary3553 -> £temporary3554 119
x34540:	cmp al, 119	; 2: 60 119
x34542:	je strftime$255	; 4: 15 132 209 2

strftime$109:	; Case 263 £temporary3553 -> £temporary3554 87
x34546:	cmp al, 87	; 2: 60 87
x34548:	je strftime$263	; 4: 15 132 246 2

strftime$110:	; Case 270 £temporary3553 -> £temporary3554 120
x34552:	cmp al, 120	; 2: 60 120
x34554:	je strftime$270	; 4: 15 132 24 3

strftime$111:	; Case 282 £temporary3553 -> £temporary3554 88
x34558:	cmp al, 88	; 2: 60 88
x34560:	je strftime$282	; 4: 15 132 78 3

strftime$112:	; Case 294 £temporary3553 -> £temporary3554 121
x34564:	cmp al, 121	; 2: 60 121
x34566:	je strftime$294	; 4: 15 132 132 3

strftime$113:	; Case 303 £temporary3553 -> £temporary3554 89
x34570:	cmp al, 89	; 2: 60 89
x34572:	je strftime$303	; 4: 15 132 175 3

strftime$114:	; Case 312 £temporary3553 -> £temporary3554 90
x34576:	cmp al, 90	; 2: 60 90
x34578:	je strftime$312	; 4: 15 132 214 3

strftime$115:	; Case 318 £temporary3553 -> £temporary3554 37
x34582:	cmp al, 37	; 2: 60 37
x34584:	je strftime$318	; 4: 15 132 236 3

strftime$116:	; CaseEnd £temporary3553 -> £temporary3554

strftime$117:	; Goto 323
x34588:	jmp strftime$323	; 3: 233 3 4

strftime$118:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$119:	; Parameter 56 add 6
x34591:	mov [bp + 62], bp	; 3: 137 110 62
x34594:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$120:	; Deref £temporary3555 -> tp tp 12
x34598:	mov si, [bp + 12]	; 3: 139 118 12

strftime$121:	; UnsignedMultiply £temporary3557 £temporary3555 -> tp 2
x34601:	mov ax, [si + 12]	; 3: 139 68 12
x34604:	xor dx, dx	; 2: 49 210
x34606:	mul word [@8048$int2$2#]	; 4: 247 38 146 140

strftime$122:	; BinaryAdd £temporary3558 shortDayList £temporary3557
x34610:	mov si, [bp + 16]	; 3: 139 118 16
x34613:	add si, ax	; 2: 1 198

strftime$123:	; Deref £temporary3556 -> £temporary3558 £temporary3558 0

strftime$124:	; Parameter 56 £temporary3556 -> £temporary3558 8
x34615:	mov ax, [si]	; 2: 139 4
x34617:	mov [bp + 64], ax	; 3: 137 70 64

strftime$125:	; Call 56 strcpy 0
x34620:	mov word [bp + 56], strftime$126	; 5: 199 70 56 74 135
x34625:	mov [bp + 58], bp	; 3: 137 110 58
x34628:	add bp, 56	; 3: 131 197 56
x34631:	jmp strcpy	; 3: 233 119 215

strftime$126:	; PostCall 56

strftime$127:	; Goto 335
x34634:	jmp strftime$335	; 3: 233 9 4

strftime$128:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$129:	; Parameter 56 add 6
x34637:	mov [bp + 62], bp	; 3: 137 110 62
x34640:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$130:	; Deref £temporary3560 -> tp tp 12
x34644:	mov si, [bp + 12]	; 3: 139 118 12

strftime$131:	; UnsignedMultiply £temporary3562 £temporary3560 -> tp 2
x34647:	mov ax, [si + 12]	; 3: 139 68 12
x34650:	xor dx, dx	; 2: 49 210
x34652:	mul word [@8056$int2$2#]	; 4: 247 38 148 140

strftime$132:	; BinaryAdd £temporary3563 longDayList £temporary3562
x34656:	mov si, [bp + 20]	; 3: 139 118 20
x34659:	add si, ax	; 2: 1 198

strftime$133:	; Deref £temporary3561 -> £temporary3563 £temporary3563 0

strftime$134:	; Parameter 56 £temporary3561 -> £temporary3563 8
x34661:	mov ax, [si]	; 2: 139 4
x34663:	mov [bp + 64], ax	; 3: 137 70 64

strftime$135:	; Call 56 strcpy 0
x34666:	mov word [bp + 56], strftime$136	; 5: 199 70 56 120 135
x34671:	mov [bp + 58], bp	; 3: 137 110 58
x34674:	add bp, 56	; 3: 131 197 56
x34677:	jmp strcpy	; 3: 233 73 215

strftime$136:	; PostCall 56

strftime$137:	; Goto 335
x34680:	jmp strftime$335	; 3: 233 219 3

strftime$138:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$139:	; Parameter 56 add 6
x34683:	mov [bp + 62], bp	; 3: 137 110 62
x34686:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$140:	; Deref £temporary3565 -> tp tp 8
x34690:	mov si, [bp + 12]	; 3: 139 118 12

strftime$141:	; UnsignedMultiply £temporary3567 £temporary3565 -> tp 2
x34693:	mov ax, [si + 8]	; 3: 139 68 8
x34696:	xor dx, dx	; 2: 49 210
x34698:	mul word [@8064$int2$2#]	; 4: 247 38 150 140

strftime$142:	; BinaryAdd £temporary3568 shortMonthList £temporary3567
x34702:	mov si, [bp + 18]	; 3: 139 118 18
x34705:	add si, ax	; 2: 1 198

strftime$143:	; Deref £temporary3566 -> £temporary3568 £temporary3568 0

strftime$144:	; Parameter 56 £temporary3566 -> £temporary3568 8
x34707:	mov ax, [si]	; 2: 139 4
x34709:	mov [bp + 64], ax	; 3: 137 70 64

strftime$145:	; Call 56 strcpy 0
x34712:	mov word [bp + 56], strftime$146	; 5: 199 70 56 166 135
x34717:	mov [bp + 58], bp	; 3: 137 110 58
x34720:	add bp, 56	; 3: 131 197 56
x34723:	jmp strcpy	; 3: 233 27 215

strftime$146:	; PostCall 56

strftime$147:	; Goto 335
x34726:	jmp strftime$335	; 3: 233 173 3

strftime$148:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$149:	; Parameter 56 add 6
x34729:	mov [bp + 62], bp	; 3: 137 110 62
x34732:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$150:	; Deref £temporary3570 -> tp tp 8
x34736:	mov si, [bp + 12]	; 3: 139 118 12

strftime$151:	; UnsignedMultiply £temporary3572 £temporary3570 -> tp 2
x34739:	mov ax, [si + 8]	; 3: 139 68 8
x34742:	xor dx, dx	; 2: 49 210
x34744:	mul word [@8072$int2$2#]	; 4: 247 38 152 140

strftime$152:	; BinaryAdd £temporary3573 longMonthList £temporary3572
x34748:	mov si, [bp + 22]	; 3: 139 118 22
x34751:	add si, ax	; 2: 1 198

strftime$153:	; Deref £temporary3571 -> £temporary3573 £temporary3573 0

strftime$154:	; Parameter 56 £temporary3571 -> £temporary3573 8
x34753:	mov ax, [si]	; 2: 139 4
x34755:	mov [bp + 64], ax	; 3: 137 70 64

strftime$155:	; Call 56 strcpy 0
x34758:	mov word [bp + 56], strftime$156	; 5: 199 70 56 212 135
x34763:	mov [bp + 58], bp	; 3: 137 110 58
x34766:	add bp, 56	; 3: 131 197 56
x34769:	jmp strcpy	; 3: 233 237 214

strftime$156:	; PostCall 56

strftime$157:	; Goto 335
x34772:	jmp strftime$335	; 3: 233 127 3

strftime$158:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 56 add 6
x34775:	mov [bp + 62], bp	; 3: 137 110 62
x34778:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$160:	; Parameter 56 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x34782:	mov word [bp + 64], @8078$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 64 154 140

strftime$161:	; Deref £temporary3575 -> tp tp 10
x34787:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; BinaryAdd £temporary3576 £temporary3575 -> tp 1900
x34790:	mov ax, [si + 10]	; 3: 139 68 10
x34793:	add ax, 1900	; 3: 5 108 7

strftime$163:	; Parameter 56 £temporary3576 10
x34796:	mov [bp + 66], ax	; 3: 137 70 66

strftime$164:	; Deref £temporary3577 -> tp tp 8
x34799:	mov si, [bp + 12]	; 3: 139 118 12

strftime$165:	; BinaryAdd £temporary3578 £temporary3577 -> tp 1
x34802:	mov ax, [si + 8]	; 3: 139 68 8
x34805:	inc ax	; 1: 64

strftime$166:	; Parameter 56 £temporary3578 12
x34806:	mov [bp + 68], ax	; 3: 137 70 68

strftime$167:	; Deref £temporary3579 -> tp tp 6
x34809:	mov si, [bp + 12]	; 3: 139 118 12

strftime$168:	; Parameter 56 £temporary3579 -> tp 14
x34812:	mov ax, [si + 6]	; 3: 139 68 6
x34815:	mov [bp + 70], ax	; 3: 137 70 70

strftime$169:	; Deref £temporary3580 -> tp tp 4
x34818:	mov si, [bp + 12]	; 3: 139 118 12

strftime$170:	; Parameter 56 £temporary3580 -> tp 16
x34821:	mov ax, [si + 4]	; 3: 139 68 4
x34824:	mov [bp + 72], ax	; 3: 137 70 72

strftime$171:	; Deref £temporary3581 -> tp tp 2
x34827:	mov si, [bp + 12]	; 3: 139 118 12

strftime$172:	; Parameter 56 £temporary3581 -> tp 18
x34830:	mov ax, [si + 2]	; 3: 139 68 2
x34833:	mov [bp + 74], ax	; 3: 137 70 74

strftime$173:	; Deref £temporary3582 -> tp tp 0
x34836:	mov si, [bp + 12]	; 3: 139 118 12

strftime$174:	; Parameter 56 £temporary3582 -> tp 20
x34839:	mov ax, [si]	; 2: 139 4
x34841:	mov [bp + 76], ax	; 3: 137 70 76

strftime$175:	; Call 56 sprintf 0
x34844:	mov word [bp + 56], strftime$176	; 5: 199 70 56 47 136
x34849:	mov [bp + 58], bp	; 3: 137 110 58
x34852:	add bp, 56	; 3: 131 197 56
x34855:	mov di, bp	; 2: 137 239
x34857:	add di, 12	; 3: 131 199 12
x34860:	jmp sprintf	; 3: 233 43 252

strftime$176:	; PostCall 56

strftime$177:	; Goto 335
x34863:	jmp strftime$335	; 3: 233 36 3

strftime$178:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$179:	; Parameter 56 add 6
x34866:	mov [bp + 62], bp	; 3: 137 110 62
x34869:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$180:	; Parameter 56 string_25i# 8
x34873:	mov word [bp + 64], @8094$string_25i#	; 5: 199 70 64 184 140

strftime$181:	; Deref £temporary3584 -> tp tp 6
x34878:	mov si, [bp + 12]	; 3: 139 118 12

strftime$182:	; Parameter 56 £temporary3584 -> tp 10
x34881:	mov ax, [si + 6]	; 3: 139 68 6
x34884:	mov [bp + 66], ax	; 3: 137 70 66

strftime$183:	; Call 56 sprintf 0
x34887:	mov word [bp + 56], strftime$184	; 5: 199 70 56 90 136
x34892:	mov [bp + 58], bp	; 3: 137 110 58
x34895:	add bp, 56	; 3: 131 197 56
x34898:	mov di, bp	; 2: 137 239
x34900:	add di, 2	; 3: 131 199 2
x34903:	jmp sprintf	; 3: 233 0 252

strftime$184:	; PostCall 56

strftime$185:	; Goto 335
x34906:	jmp strftime$335	; 3: 233 249 2

strftime$186:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$187:	; Parameter 56 add 6
x34909:	mov [bp + 62], bp	; 3: 137 110 62
x34912:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$188:	; Parameter 56 string_25i# 8
x34916:	mov word [bp + 64], @8099$string_25i#	; 5: 199 70 64 187 140

strftime$189:	; Deref £temporary3586 -> tp tp 4
x34921:	mov si, [bp + 12]	; 3: 139 118 12

strftime$190:	; Parameter 56 £temporary3586 -> tp 10
x34924:	mov ax, [si + 4]	; 3: 139 68 4
x34927:	mov [bp + 66], ax	; 3: 137 70 66

strftime$191:	; Call 56 sprintf 0
x34930:	mov word [bp + 56], strftime$192	; 5: 199 70 56 133 136
x34935:	mov [bp + 58], bp	; 3: 137 110 58
x34938:	add bp, 56	; 3: 131 197 56
x34941:	mov di, bp	; 2: 137 239
x34943:	add di, 2	; 3: 131 199 2
x34946:	jmp sprintf	; 3: 233 213 251

strftime$192:	; PostCall 56

strftime$193:	; Goto 335
x34949:	jmp strftime$335	; 3: 233 206 2

strftime$194:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$195:	; Parameter 56 add 6
x34952:	mov [bp + 62], bp	; 3: 137 110 62
x34955:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$196:	; Parameter 56 string_25i# 8
x34959:	mov word [bp + 64], @8104$string_25i#	; 5: 199 70 64 190 140

strftime$197:	; Deref £temporary3588 -> tp tp 4
x34964:	mov si, [bp + 12]	; 3: 139 118 12

strftime$198:	; SignedModulo £temporary3589 £temporary3588 -> tp 12
x34967:	mov ax, [si + 4]	; 3: 139 68 4
x34970:	xor dx, dx	; 2: 49 210
x34972:	idiv word [@8107$int2$12#]	; 4: 247 62 193 140

strftime$199:	; Parameter 56 £temporary3589 10
x34976:	mov [bp + 66], dx	; 3: 137 86 66

strftime$200:	; Call 56 sprintf 0
x34979:	mov word [bp + 56], strftime$201	; 5: 199 70 56 182 136
x34984:	mov [bp + 58], bp	; 3: 137 110 58
x34987:	add bp, 56	; 3: 131 197 56
x34990:	mov di, bp	; 2: 137 239
x34992:	add di, 2	; 3: 131 199 2
x34995:	jmp sprintf	; 3: 233 164 251

strftime$201:	; PostCall 56

strftime$202:	; Goto 335
x34998:	jmp strftime$335	; 3: 233 157 2

strftime$203:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 56 add 6
x35001:	mov [bp + 62], bp	; 3: 137 110 62
x35004:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$205:	; Parameter 56 string_25i# 8
x35008:	mov word [bp + 64], @8112$string_25i#	; 5: 199 70 64 195 140

strftime$206:	; Deref £temporary3591 -> tp tp 14
x35013:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 56 £temporary3591 -> tp 10
x35016:	mov ax, [si + 14]	; 3: 139 68 14
x35019:	mov [bp + 66], ax	; 3: 137 70 66

strftime$208:	; Call 56 sprintf 0
x35022:	mov word [bp + 56], strftime$209	; 5: 199 70 56 225 136
x35027:	mov [bp + 58], bp	; 3: 137 110 58
x35030:	add bp, 56	; 3: 131 197 56
x35033:	mov di, bp	; 2: 137 239
x35035:	add di, 2	; 3: 131 199 2
x35038:	jmp sprintf	; 3: 233 121 251

strftime$209:	; PostCall 56

strftime$210:	; Goto 335
x35041:	jmp strftime$335	; 3: 233 114 2

strftime$211:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 56 add 6
x35044:	mov [bp + 62], bp	; 3: 137 110 62
x35047:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$213:	; Parameter 56 string_25i# 8
x35051:	mov word [bp + 64], @8117$string_25i#	; 5: 199 70 64 198 140

strftime$214:	; Deref £temporary3593 -> tp tp 8
x35056:	mov si, [bp + 12]	; 3: 139 118 12

strftime$215:	; BinaryAdd £temporary3594 £temporary3593 -> tp 1
x35059:	mov ax, [si + 8]	; 3: 139 68 8
x35062:	inc ax	; 1: 64

strftime$216:	; Parameter 56 £temporary3594 10
x35063:	mov [bp + 66], ax	; 3: 137 70 66

strftime$217:	; Call 56 sprintf 0
x35066:	mov word [bp + 56], strftime$218	; 5: 199 70 56 13 137
x35071:	mov [bp + 58], bp	; 3: 137 110 58
x35074:	add bp, 56	; 3: 131 197 56
x35077:	mov di, bp	; 2: 137 239
x35079:	add di, 2	; 3: 131 199 2
x35082:	jmp sprintf	; 3: 233 77 251

strftime$218:	; PostCall 56

strftime$219:	; Goto 335
x35085:	jmp strftime$335	; 3: 233 70 2

strftime$220:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$221:	; Parameter 56 add 6
x35088:	mov [bp + 62], bp	; 3: 137 110 62
x35091:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$222:	; Parameter 56 string_25i# 8
x35095:	mov word [bp + 64], @8125$string_25i#	; 5: 199 70 64 201 140

strftime$223:	; Deref £temporary3596 -> tp tp 2
x35100:	mov si, [bp + 12]	; 3: 139 118 12

strftime$224:	; Parameter 56 £temporary3596 -> tp 10
x35103:	mov ax, [si + 2]	; 3: 139 68 2
x35106:	mov [bp + 66], ax	; 3: 137 70 66

strftime$225:	; Call 56 sprintf 0
x35109:	mov word [bp + 56], strftime$226	; 5: 199 70 56 56 137
x35114:	mov [bp + 58], bp	; 3: 137 110 58
x35117:	add bp, 56	; 3: 131 197 56
x35120:	mov di, bp	; 2: 137 239
x35122:	add di, 2	; 3: 131 199 2
x35125:	jmp sprintf	; 3: 233 34 251

strftime$226:	; PostCall 56

strftime$227:	; Goto 335
x35128:	jmp strftime$335	; 3: 233 27 2

strftime$228:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$229:	; Parameter 56 add 6
x35131:	mov [bp + 62], bp	; 3: 137 110 62
x35134:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$230:	; Parameter 56 string_25s# 8
x35138:	mov word [bp + 64], @8130$string_25s#	; 5: 199 70 64 204 140

strftime$231:	; Deref £temporary3598 -> tp tp 4
x35143:	mov si, [bp + 12]	; 3: 139 118 12

strftime$232:	; SignedGreaterThanEqual 235 £temporary3598 -> tp 12
x35146:	cmp word [si + 4], 12	; 4: 131 124 4 12
x35150:	jge strftime$235	; 2: 125 5

strftime$233:	; Assign £temporary3603 string_AM#
x35152:	mov ax, @8135$string_AM#	; 3: 184 207 140

strftime$234:	; Goto 236
x35155:	jmp strftime$236	; 2: 235 3

strftime$235:	; Assign £temporary3603 string_PM#
x35157:	mov ax, @8136$string_PM#	; 3: 184 210 140

strftime$236:	; Parameter 56 £temporary3603 10
x35160:	mov [bp + 66], ax	; 3: 137 70 66

strftime$237:	; Call 56 sprintf 0
x35163:	mov word [bp + 56], strftime$238	; 5: 199 70 56 110 137
x35168:	mov [bp + 58], bp	; 3: 137 110 58
x35171:	add bp, 56	; 3: 131 197 56
x35174:	mov di, bp	; 2: 137 239
x35176:	add di, 2	; 3: 131 199 2
x35179:	jmp sprintf	; 3: 233 236 250

strftime$238:	; PostCall 56

strftime$239:	; Goto 335
x35182:	jmp strftime$335	; 3: 233 229 1

strftime$240:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$241:	; Parameter 56 add 6
x35185:	mov [bp + 62], bp	; 3: 137 110 62
x35188:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$242:	; Parameter 56 string_25i# 8
x35192:	mov word [bp + 64], @8146$string_25i#	; 5: 199 70 64 213 140

strftime$243:	; Deref £temporary3605 -> tp tp 0
x35197:	mov si, [bp + 12]	; 3: 139 118 12

strftime$244:	; Parameter 56 £temporary3605 -> tp 10
x35200:	mov ax, [si]	; 2: 139 4
x35202:	mov [bp + 66], ax	; 3: 137 70 66

strftime$245:	; Call 56 sprintf 0
x35205:	mov word [bp + 56], strftime$246	; 5: 199 70 56 152 137
x35210:	mov [bp + 58], bp	; 3: 137 110 58
x35213:	add bp, 56	; 3: 131 197 56
x35216:	mov di, bp	; 2: 137 239
x35218:	add di, 2	; 3: 131 199 2
x35221:	jmp sprintf	; 3: 233 194 250

strftime$246:	; PostCall 56

strftime$247:	; Goto 335
x35224:	jmp strftime$335	; 3: 233 187 1

strftime$248:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$249:	; Parameter 56 add 6
x35227:	mov [bp + 62], bp	; 3: 137 110 62
x35230:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$250:	; Parameter 56 string_25i# 8
x35234:	mov word [bp + 64], @8151$string_25i#	; 5: 199 70 64 216 140

strftime$251:	; Parameter 56 yearDaySunday 10
x35239:	mov ax, [bp + 30]	; 3: 139 70 30
x35242:	mov [bp + 66], ax	; 3: 137 70 66

strftime$252:	; Call 56 sprintf 0
x35245:	mov word [bp + 56], strftime$253	; 5: 199 70 56 192 137
x35250:	mov [bp + 58], bp	; 3: 137 110 58
x35253:	add bp, 56	; 3: 131 197 56
x35256:	mov di, bp	; 2: 137 239
x35258:	add di, 2	; 3: 131 199 2
x35261:	jmp sprintf	; 3: 233 154 250

strftime$253:	; PostCall 56

strftime$254:	; Goto 335
x35264:	jmp strftime$335	; 3: 233 147 1

strftime$255:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$256:	; Parameter 56 add 6
x35267:	mov [bp + 62], bp	; 3: 137 110 62
x35270:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$257:	; Parameter 56 string_25i# 8
x35274:	mov word [bp + 64], @8155$string_25i#	; 5: 199 70 64 219 140

strftime$258:	; Deref £temporary3608 -> tp tp 12
x35279:	mov si, [bp + 12]	; 3: 139 118 12

strftime$259:	; Parameter 56 £temporary3608 -> tp 10
x35282:	mov ax, [si + 12]	; 3: 139 68 12
x35285:	mov [bp + 66], ax	; 3: 137 70 66

strftime$260:	; Call 56 sprintf 0
x35288:	mov word [bp + 56], strftime$261	; 5: 199 70 56 235 137
x35293:	mov [bp + 58], bp	; 3: 137 110 58
x35296:	add bp, 56	; 3: 131 197 56
x35299:	mov di, bp	; 2: 137 239
x35301:	add di, 2	; 3: 131 199 2
x35304:	jmp sprintf	; 3: 233 111 250

strftime$261:	; PostCall 56

strftime$262:	; Goto 335
x35307:	jmp strftime$335	; 3: 233 104 1

strftime$263:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$264:	; Parameter 56 add 6
x35310:	mov [bp + 62], bp	; 3: 137 110 62
x35313:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$265:	; Parameter 56 string_25i# 8
x35317:	mov word [bp + 64], @8160$string_25i#	; 5: 199 70 64 222 140

strftime$266:	; Parameter 56 yearDayMonday 10
x35322:	mov ax, [bp + 32]	; 3: 139 70 32
x35325:	mov [bp + 66], ax	; 3: 137 70 66

strftime$267:	; Call 56 sprintf 0
x35328:	mov word [bp + 56], strftime$268	; 5: 199 70 56 19 138
x35333:	mov [bp + 58], bp	; 3: 137 110 58
x35336:	add bp, 56	; 3: 131 197 56
x35339:	mov di, bp	; 2: 137 239
x35341:	add di, 2	; 3: 131 199 2
x35344:	jmp sprintf	; 3: 233 71 250

strftime$268:	; PostCall 56

strftime$269:	; Goto 335
x35347:	jmp strftime$335	; 3: 233 64 1

strftime$270:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$271:	; Parameter 56 add 6
x35350:	mov [bp + 62], bp	; 3: 137 110 62
x35353:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$272:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x35357:	mov word [bp + 64], @8164$string_2502i3A2502i3A2502i#	; 5: 199 70 64 225 140

strftime$273:	; Deref £temporary3611 -> tp tp 4
x35362:	mov si, [bp + 12]	; 3: 139 118 12

strftime$274:	; Parameter 56 £temporary3611 -> tp 10
x35365:	mov ax, [si + 4]	; 3: 139 68 4
x35368:	mov [bp + 66], ax	; 3: 137 70 66

strftime$275:	; Deref £temporary3612 -> tp tp 2
x35371:	mov si, [bp + 12]	; 3: 139 118 12

strftime$276:	; Parameter 56 £temporary3612 -> tp 12
x35374:	mov ax, [si + 2]	; 3: 139 68 2
x35377:	mov [bp + 68], ax	; 3: 137 70 68

strftime$277:	; Deref £temporary3613 -> tp tp 0
x35380:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Parameter 56 £temporary3613 -> tp 14
x35383:	mov ax, [si]	; 2: 139 4
x35385:	mov [bp + 70], ax	; 3: 137 70 70

strftime$279:	; Call 56 sprintf 0
x35388:	mov word [bp + 56], strftime$280	; 5: 199 70 56 79 138
x35393:	mov [bp + 58], bp	; 3: 137 110 58
x35396:	add bp, 56	; 3: 131 197 56
x35399:	mov di, bp	; 2: 137 239
x35401:	add di, 6	; 3: 131 199 6
x35404:	jmp sprintf	; 3: 233 11 250

strftime$280:	; PostCall 56

strftime$281:	; Goto 335
x35407:	jmp strftime$335	; 3: 233 4 1

strftime$282:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$283:	; Parameter 56 add 6
x35410:	mov [bp + 62], bp	; 3: 137 110 62
x35413:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$284:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x35417:	mov word [bp + 64], @8171$string_2502i3A2502i3A2502i#	; 5: 199 70 64 240 140

strftime$285:	; Deref £temporary3615 -> tp tp 4
x35422:	mov si, [bp + 12]	; 3: 139 118 12

strftime$286:	; Parameter 56 £temporary3615 -> tp 10
x35425:	mov ax, [si + 4]	; 3: 139 68 4
x35428:	mov [bp + 66], ax	; 3: 137 70 66

strftime$287:	; Deref £temporary3616 -> tp tp 2
x35431:	mov si, [bp + 12]	; 3: 139 118 12

strftime$288:	; Parameter 56 £temporary3616 -> tp 12
x35434:	mov ax, [si + 2]	; 3: 139 68 2
x35437:	mov [bp + 68], ax	; 3: 137 70 68

strftime$289:	; Deref £temporary3617 -> tp tp 0
x35440:	mov si, [bp + 12]	; 3: 139 118 12

strftime$290:	; Parameter 56 £temporary3617 -> tp 14
x35443:	mov ax, [si]	; 2: 139 4
x35445:	mov [bp + 70], ax	; 3: 137 70 70

strftime$291:	; Call 56 sprintf 0
x35448:	mov word [bp + 56], strftime$292	; 5: 199 70 56 139 138
x35453:	mov [bp + 58], bp	; 3: 137 110 58
x35456:	add bp, 56	; 3: 131 197 56
x35459:	mov di, bp	; 2: 137 239
x35461:	add di, 6	; 3: 131 199 6
x35464:	jmp sprintf	; 3: 233 207 249

strftime$292:	; PostCall 56

strftime$293:	; Goto 335
x35467:	jmp strftime$335	; 3: 233 200 0

strftime$294:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$295:	; Parameter 56 add 6
x35470:	mov [bp + 62], bp	; 3: 137 110 62
x35473:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$296:	; Parameter 56 string_25i# 8
x35477:	mov word [bp + 64], @8178$string_25i#	; 5: 199 70 64 255 140

strftime$297:	; Deref £temporary3619 -> tp tp 10
x35482:	mov si, [bp + 12]	; 3: 139 118 12

strftime$298:	; SignedModulo £temporary3620 £temporary3619 -> tp 100
x35485:	mov ax, [si + 10]	; 3: 139 68 10
x35488:	xor dx, dx	; 2: 49 210
x35490:	idiv word [@8181$int2$100#]	; 4: 247 62 2 141

strftime$299:	; Parameter 56 £temporary3620 10
x35494:	mov [bp + 66], dx	; 3: 137 86 66

strftime$300:	; Call 56 sprintf 0
x35497:	mov word [bp + 56], strftime$301	; 5: 199 70 56 188 138
x35502:	mov [bp + 58], bp	; 3: 137 110 58
x35505:	add bp, 56	; 3: 131 197 56
x35508:	mov di, bp	; 2: 137 239
x35510:	add di, 2	; 3: 131 199 2
x35513:	jmp sprintf	; 3: 233 158 249

strftime$301:	; PostCall 56

strftime$302:	; Goto 335
x35516:	jmp strftime$335	; 3: 233 151 0

strftime$303:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 56 add 6
x35519:	mov [bp + 62], bp	; 3: 137 110 62
x35522:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$305:	; Parameter 56 string_25i# 8
x35526:	mov word [bp + 64], @8186$string_25i#	; 5: 199 70 64 4 141

strftime$306:	; Deref £temporary3622 -> tp tp 10
x35531:	mov si, [bp + 12]	; 3: 139 118 12

strftime$307:	; BinaryAdd £temporary3623 £temporary3622 -> tp 1900
x35534:	mov ax, [si + 10]	; 3: 139 68 10
x35537:	add ax, 1900	; 3: 5 108 7

strftime$308:	; Parameter 56 £temporary3623 10
x35540:	mov [bp + 66], ax	; 3: 137 70 66

strftime$309:	; Call 56 sprintf 0
x35543:	mov word [bp + 56], strftime$310	; 5: 199 70 56 234 138
x35548:	mov [bp + 58], bp	; 3: 137 110 58
x35551:	add bp, 56	; 3: 131 197 56
x35554:	mov di, bp	; 2: 137 239
x35556:	add di, 2	; 3: 131 199 2
x35559:	jmp sprintf	; 3: 233 112 249

strftime$310:	; PostCall 56

strftime$311:	; Goto 335
x35562:	jmp strftime$335	; 2: 235 106

strftime$312:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$313:	; Parameter 56 add 6
x35564:	mov [bp + 62], bp	; 3: 137 110 62
x35567:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$314:	; Parameter 56 string_# 8
x35571:	mov word [bp + 64], @8194$string_#	; 5: 199 70 64 7 141

strftime$315:	; Call 56 strcpy 0
x35576:	mov word [bp + 56], strftime$316	; 5: 199 70 56 6 139
x35581:	mov [bp + 58], bp	; 3: 137 110 58
x35584:	add bp, 56	; 3: 131 197 56
x35587:	jmp strcpy	; 3: 233 187 211

strftime$316:	; PostCall 56

strftime$317:	; Goto 335
x35590:	jmp strftime$335	; 2: 235 78

strftime$318:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$319:	; Parameter 56 add 6
x35592:	mov [bp + 62], bp	; 3: 137 110 62
x35595:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$320:	; Parameter 56 string_25# 8
x35599:	mov word [bp + 64], @8198$string_25#	; 5: 199 70 64 8 141

strftime$321:	; Call 56 strcpy 0
x35604:	mov word [bp + 56], strftime$322	; 5: 199 70 56 34 139
x35609:	mov [bp + 58], bp	; 3: 137 110 58
x35612:	add bp, 56	; 3: 131 197 56
x35615:	jmp strcpy	; 3: 233 159 211

strftime$322:	; PostCall 56

strftime$323:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$324:	; Parameter 56 add 6
x35618:	mov [bp + 62], bp	; 3: 137 110 62
x35621:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$325:	; Parameter 56 string_# 8
x35625:	mov word [bp + 64], @8200$string_#	; 5: 199 70 64 10 141

strftime$326:	; Call 56 strcpy 0
x35630:	mov word [bp + 56], strftime$327	; 5: 199 70 56 60 139
x35635:	mov [bp + 58], bp	; 3: 137 110 58
x35638:	add bp, 56	; 3: 131 197 56
x35641:	jmp strcpy	; 3: 233 133 211

strftime$327:	; PostCall 56

strftime$328:	; Goto 335
x35644:	jmp strftime$335	; 2: 235 24

strftime$329:	; Deref £temporary3628 -> add add 0
x35646:	mov si, bp	; 2: 137 238
x35648:	add si, 36	; 3: 131 198 36

strftime$330:	; BinaryAdd £temporary3630 fmt index
x35651:	mov di, [bp + 10]	; 3: 139 126 10
x35654:	add di, [bp + 34]	; 3: 3 126 34

strftime$331:	; Deref £temporary3629 -> £temporary3630 £temporary3630 0

strftime$332:	; Assign £temporary3628 -> add £temporary3629 -> £temporary3630
x35657:	mov al, [di]	; 2: 138 5
x35659:	mov [si], al	; 2: 136 4

strftime$333:	; Deref £temporary3631 -> add add 1
x35661:	mov si, bp	; 2: 137 238
x35663:	add si, 36	; 3: 131 198 36

strftime$334:	; Assign £temporary3631 -> add 0
x35666:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$335:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$336:	; Parameter 56 s 6
x35670:	mov ax, [bp + 6]	; 3: 139 70 6
x35673:	mov [bp + 62], ax	; 3: 137 70 62

strftime$337:	; Call 56 strlen 0
x35676:	mov word [bp + 56], strftime$338	; 5: 199 70 56 106 139
x35681:	mov [bp + 58], bp	; 3: 137 110 58
x35684:	add bp, 56	; 3: 131 197 56
x35687:	jmp strlen	; 3: 233 161 1

strftime$338:	; PostCall 56

strftime$339:	; GetReturnValue £temporary3632

strftime$340:	; Assign x £temporary3632
x35690:	mov [bp + 56], bx	; 3: 137 94 56

strftime$341:	; CallHeader 58 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$342:	; Parameter 58 add 6
x35693:	mov [bp + 64], bp	; 3: 137 110 64
x35696:	add word [bp + 64], 36	; 4: 131 70 64 36

strftime$343:	; Call 58 strlen 0
x35700:	mov word [bp + 58], strftime$344	; 5: 199 70 58 130 139
x35705:	mov [bp + 60], bp	; 3: 137 110 60
x35708:	add bp, 58	; 3: 131 197 58
x35711:	jmp strlen	; 3: 233 137 1

strftime$344:	; PostCall 58

strftime$345:	; GetReturnValue £temporary3633

strftime$346:	; Assign y £temporary3633
x35714:	mov [bp + 58], bx	; 3: 137 94 58

strftime$347:	; BinaryAdd £temporary3634 x y
x35717:	mov ax, [bp + 56]	; 3: 139 70 56
x35720:	add ax, [bp + 58]	; 3: 3 70 58

strftime$348:	; SignedGreaterThanEqual 356 £temporary3634 smax
x35723:	cmp ax, [bp + 8]	; 3: 59 70 8
x35726:	jge strftime$356	; 2: 125 33

strftime$349:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$350:	; Parameter 60 s 6
x35728:	mov ax, [bp + 6]	; 3: 139 70 6
x35731:	mov [bp + 66], ax	; 3: 137 70 66

strftime$351:	; Parameter 60 add 8
x35734:	mov [bp + 68], bp	; 3: 137 110 68
x35737:	add word [bp + 68], 36	; 4: 131 70 68 36

strftime$352:	; Call 60 strcat 0
x35741:	mov word [bp + 60], strftime$353	; 5: 199 70 60 171 139
x35746:	mov [bp + 62], bp	; 3: 137 110 62
x35749:	add bp, 60	; 3: 131 197 60
x35752:	jmp strcat	; 3: 233 131 1

strftime$353:	; PostCall 60

strftime$354:	; Increment index
x35755:	inc word [bp + 34]	; 3: 255 70 34

strftime$355:	; Goto 84
x35758:	jmp strftime$84	; 3: 233 192 250

strftime$356:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$357:	; Parameter 34 s 6
x35761:	mov ax, [bp + 6]	; 3: 139 70 6
x35764:	mov [bp + 40], ax	; 3: 137 70 40

strftime$358:	; Call 34 strlen 0
x35767:	mov word [bp + 34], strftime$359	; 5: 199 70 34 197 139
x35772:	mov [bp + 36], bp	; 3: 137 110 36
x35775:	add bp, 34	; 3: 131 197 34
x35778:	jmp strlen	; 3: 233 70 1

strftime$359:	; PostCall 34

strftime$360:	; GetReturnValue £temporary3637

strftime$361:	; SetReturnValue £temporary3637

strftime$362:	; Return £temporary3637
x35781:	mov ax, [bp]	; 3: 139 70 0
x35784:	mov di, [bp + 4]	; 3: 139 126 4
x35787:	mov bp, [bp + 2]	; 3: 139 110 2
x35790:	jmp ax	; 2: 255 224

strftime$363:	; FunctionEnd strftime

@7935$int2$4#:
x35792:	dw 4	; 2: 4 0

@7943$int2$365#:
x35794:	dw 365	; 2: 109 1

@7952$string_#:
x35796:	db 0	; 1: 0

@7716$g_defaultLongDayList:
x35797:	dw @7709$string_Sunday# ; 2: 227 139
x35799:	dw @7710$string_Monday# ; 2: 234 139
x35801:	dw @7711$string_Tuesday# ; 2: 241 139
x35803:	dw @7712$string_Wednesday# ; 2: 249 139
x35805:	dw @7713$string_Thursday# ; 2: 3 140
x35807:	dw @7714$string_Friday# ; 2: 12 140
x35809:	dw @7715$string_Saturday# ; 2: 19 140

@7709$string_Sunday#:
x35811:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@7710$string_Monday#:
x35818:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@7711$string_Tuesday#:
x35825:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@7712$string_Wednesday#:
x35833:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@7713$string_Thursday#:
x35843:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@7714$string_Friday#:
x35852:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@7715$string_Saturday#:
x35859:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@7742$g_defaultLongMonthList:
x35868:	dw @7730$string_January# ; 2: 52 140
x35870:	dw @7731$string_February# ; 2: 60 140
x35872:	dw @7732$string_March# ; 2: 69 140
x35874:	dw @7733$string_April# ; 2: 75 140
x35876:	dw @7734$string_May# ; 2: 81 140
x35878:	dw @7735$string_June# ; 2: 85 140
x35880:	dw @7736$string_July# ; 2: 90 140
x35882:	dw @7737$string_August# ; 2: 95 140
x35884:	dw @7738$string_September# ; 2: 102 140
x35886:	dw @7739$string_October# ; 2: 112 140
x35888:	dw @7740$string_November# ; 2: 120 140
x35890:	dw @7741$string_December# ; 2: 129 140

@7730$string_January#:
x35892:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@7731$string_February#:
x35900:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@7732$string_March#:
x35909:	db "March", 0	; 6: 77 97 114 99 104 0

@7733$string_April#:
x35915:	db "April", 0	; 6: 65 112 114 105 108 0

@7734$string_May#:
x35921:	db "May", 0	; 4: 77 97 121 0

@7735$string_June#:
x35925:	db "June", 0	; 5: 74 117 110 101 0

@7736$string_July#:
x35930:	db "July", 0	; 5: 74 117 108 121 0

@7737$string_August#:
x35935:	db "August", 0	; 7: 65 117 103 117 115 116 0

@7738$string_September#:
x35942:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@7739$string_October#:
x35952:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@7740$string_November#:
x35960:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@7741$string_December#:
x35969:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@8005$int4$7#:
x35978:	dd 7	; 4: 7 0 0 0

@8019$int4$7#:
x35982:	dd 7	; 4: 7 0 0 0

@8048$int2$2#:
x35986:	dw 2	; 2: 2 0

@8056$int2$2#:
x35988:	dw 2	; 2: 2 0

@8064$int2$2#:
x35990:	dw 2	; 2: 2 0

@8072$int2$2#:
x35992:	dw 2	; 2: 2 0

@8078$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x35994:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8094$string_25i#:
x36024:	db "%i", 0	; 3: 37 105 0

@8099$string_25i#:
x36027:	db "%i", 0	; 3: 37 105 0

@8104$string_25i#:
x36030:	db "%i", 0	; 3: 37 105 0

@8107$int2$12#:
x36033:	dw 12	; 2: 12 0

@8112$string_25i#:
x36035:	db "%i", 0	; 3: 37 105 0

@8117$string_25i#:
x36038:	db "%i", 0	; 3: 37 105 0

@8125$string_25i#:
x36041:	db "%i", 0	; 3: 37 105 0

@8130$string_25s#:
x36044:	db "%s", 0	; 3: 37 115 0

@8135$string_AM#:
x36047:	db "AM", 0	; 3: 65 77 0

@8136$string_PM#:
x36050:	db "PM", 0	; 3: 80 77 0

@8146$string_25i#:
x36053:	db "%i", 0	; 3: 37 105 0

@8151$string_25i#:
x36056:	db "%i", 0	; 3: 37 105 0

@8155$string_25i#:
x36059:	db "%i", 0	; 3: 37 105 0

@8160$string_25i#:
x36062:	db "%i", 0	; 3: 37 105 0

@8164$string_2502i3A2502i3A2502i#:
x36065:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8171$string_2502i3A2502i3A2502i#:
x36080:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8178$string_25i#:
x36095:	db "%i", 0	; 3: 37 105 0

@8181$int2$100#:
x36098:	dw 100	; 2: 100 0

@8186$string_25i#:
x36100:	db "%i", 0	; 3: 37 105 0

@8194$string_#:
x36103:	db 0	; 1: 0

@8198$string_25#:
x36104:	db "%", 0	; 2: 37 0

@8200$string_#:
x36106:	db 0	; 1: 0

strlen:	; Assign index 0
x36107:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary3884 string index
x36112:	mov si, [bp + 6]	; 3: 139 118 6
x36115:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary3883 -> £temporary3884 £temporary3884 0

strlen$3:	; Equal 6 £temporary3883 -> £temporary3884 0
x36118:	cmp byte [si], 0	; 3: 128 60 0
x36121:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x36123:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x36126:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x36128:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x36131:	mov ax, [bp]	; 3: 139 70 0
x36134:	mov di, [bp + 4]	; 3: 139 126 4
x36137:	mov bp, [bp + 2]	; 3: 139 110 2
x36140:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x36142:	mov ax, [bp + 6]	; 3: 139 70 6
x36145:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x36148:	mov word [bp + 12], strcat$3	; 5: 199 70 12 66 141
x36153:	mov [bp + 14], bp	; 3: 137 110 14
x36156:	add bp, 12	; 3: 131 197 12
x36159:	nop	; 1: 144
x36160:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3740

strcat$5:	; Assign targetLength £temporary3740
x36162:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x36165:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3742 source index
x36170:	mov si, [bp + 8]	; 3: 139 118 8
x36173:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3741 -> £temporary3742 £temporary3742 0

strcat$9:	; Equal 18 £temporary3741 -> £temporary3742 0
x36176:	cmp byte [si], 0	; 3: 128 60 0
x36179:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3745 targetLength index
x36181:	mov ax, [bp + 12]	; 3: 139 70 12
x36184:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3747 target £temporary3745
x36187:	mov si, [bp + 6]	; 3: 139 118 6
x36190:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3746 -> £temporary3747 £temporary3747 0

strcat$13:	; BinaryAdd £temporary3749 source index
x36192:	mov di, [bp + 8]	; 3: 139 126 8
x36195:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3748 -> £temporary3749 £temporary3749 0

strcat$15:	; Assign £temporary3746 -> £temporary3747 £temporary3748 -> £temporary3749
x36198:	mov al, [di]	; 2: 138 5
x36200:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x36202:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x36205:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3750 targetLength index
x36207:	mov ax, [bp + 12]	; 3: 139 70 12
x36210:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3752 target £temporary3750
x36213:	mov si, [bp + 6]	; 3: 139 118 6
x36216:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3751 -> £temporary3752 £temporary3752 0

strcat$21:	; Assign £temporary3751 -> £temporary3752 0
x36218:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x36221:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x36224:	mov ax, [bp]	; 3: 139 70 0
x36227:	mov di, [bp + 4]	; 3: 139 126 4
x36230:	mov bp, [bp + 2]	; 3: 139 110 2
x36233:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x36235:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x36240:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x36244:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x36246:	mov ax, [stderr]	; 3: 161 24 78
x36249:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36252:	mov word [bp + 16], @9456$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 220 141

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x36257:	mov word [bp + 18], @9457$string_n203D3D201#	; 5: 199 70 18 10 142

assert_test$6:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x36262:	mov word [bp + 20], @9458$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 17 142

assert_test$7:	; Parameter 8 8 14
x36267:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x36272:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 195 141
x36277:	mov [bp + 10], bp	; 3: 137 110 10
x36280:	add bp, 8	; 3: 131 197 8
x36283:	mov di, bp	; 2: 137 239
x36285:	add di, 6	; 3: 131 199 6
x36288:	jmp fprintf	; 3: 233 58 209

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x36291:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 209 141
x36296:	mov [bp + 10], bp	; 3: 137 110 10
x36299:	add bp, 8	; 3: 131 197 8
x36302:	jmp abort	; 3: 233 103 209

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x36305:	mov ax, [bp]	; 3: 139 70 0
x36308:	mov di, [bp + 4]	; 3: 139 126 4
x36311:	mov bp, [bp + 2]	; 3: 139 110 2
x36314:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

@9456$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x36316:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@9457$string_n203D3D201#:
x36362:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

@9458$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x36369:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 67: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x36436:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x36441:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 103 142
x36446:	mov [bp + 8], bp	; 3: 137 110 8
x36449:	add bp, 6	; 3: 131 197 6
x36452:	jmp malloc	; 3: 233 76 229

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary5932

malloc_test$5:	; Assign b £temporary5932
x36455:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x36458:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x36463:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 125 142
x36468:	mov [bp + 10], bp	; 3: 137 110 10
x36471:	add bp, 8	; 3: 131 197 8
x36474:	jmp malloc	; 3: 233 54 229

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary5933

malloc_test$11:	; Assign c £temporary5933
x36477:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x36480:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x36485:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 147 142
x36490:	mov [bp + 12], bp	; 3: 137 110 12
x36493:	add bp, 10	; 3: 131 197 10
x36496:	jmp malloc	; 3: 233 32 229

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary5934

malloc_test$17:	; Assign d £temporary5934
x36499:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x36502:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 164 142
x36507:	mov [bp + 14], bp	; 3: 137 110 14
x36510:	add bp, 12	; 3: 131 197 12
x36513:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x36516:	mov ax, [bp + 8]	; 3: 139 70 8
x36519:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x36522:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x36527:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 189 142
x36532:	mov [bp + 14], bp	; 3: 137 110 14
x36535:	add bp, 12	; 3: 131 197 12
x36538:	jmp realloc	; 3: 233 16 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x36541:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 203 142
x36546:	mov [bp + 14], bp	; 3: 137 110 14
x36549:	add bp, 12	; 3: 131 197 12
x36552:	nop	; 1: 144
x36553:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x36555:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x36560:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 222 142
x36565:	mov [bp + 14], bp	; 3: 137 110 14
x36568:	add bp, 12	; 3: 131 197 12
x36571:	jmp malloc	; 3: 233 213 228

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x36574:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 236 142
x36579:	mov [bp + 14], bp	; 3: 137 110 14
x36582:	add bp, 12	; 3: 131 197 12
x36585:	nop	; 1: 144
x36586:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x36588:	mov ax, [bp + 6]	; 3: 139 70 6
x36591:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x36594:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 0 143
x36599:	mov [bp + 14], bp	; 3: 137 110 14
x36602:	add bp, 12	; 3: 131 197 12
x36605:	jmp free	; 3: 233 192 230

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x36608:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 14 143
x36613:	mov [bp + 14], bp	; 3: 137 110 14
x36616:	add bp, 12	; 3: 131 197 12
x36619:	nop	; 1: 144
x36620:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x36622:	mov ax, [bp + 10]	; 3: 139 70 10
x36625:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x36628:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 34 143
x36633:	mov [bp + 14], bp	; 3: 137 110 14
x36636:	add bp, 12	; 3: 131 197 12
x36639:	jmp free	; 3: 233 158 230

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x36642:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 48 143
x36647:	mov [bp + 14], bp	; 3: 137 110 14
x36650:	add bp, 12	; 3: 131 197 12
x36653:	nop	; 1: 144
x36654:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x36656:	mov ax, [bp]	; 3: 139 70 0
x36659:	mov di, [bp + 4]	; 3: 139 126 4
x36662:	mov bp, [bp + 2]	; 3: 139 110 2
x36665:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x36667:	mov ax, [g_firstBlockPtr]	; 3: 161 65 117
x36670:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x36673:	mov word [bp + 14], @368$string_Heap3A0A#	; 5: 199 70 14 173 143

print_heap$3:	; Call 8 printf 0
x36678:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 86 143
x36683:	mov [bp + 10], bp	; 3: 137 110 10
x36686:	add bp, 8	; 3: 131 197 8
x36689:	mov di, bp	; 2: 137 239
x36691:	jmp printf	; 3: 233 174 125

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x36694:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36698:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x36700:	mov word [bp + 14], @374$string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 180 143

print_heap$8:	; IntegralToIntegral £temporary148 currBlockPtr
x36705:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary148 8
x36708:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary149 -> currBlockPtr currBlockPtr 0
x36711:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary149 -> currBlockPtr 10
x36714:	mov ax, [si]	; 2: 139 4
x36716:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x36719:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 130 143
x36724:	mov [bp + 10], bp	; 3: 137 110 10
x36727:	add bp, 8	; 3: 131 197 8
x36730:	mov di, bp	; 2: 137 239
x36732:	add di, 4	; 3: 131 199 4
x36735:	jmp printf	; 3: 233 130 125

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary151 -> currBlockPtr currBlockPtr 2
x36738:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary151 -> currBlockPtr
x36741:	mov ax, [si + 2]	; 3: 139 68 2
x36744:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x36747:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x36749:	mov word [bp + 14], @379$string_0A#	; 5: 199 70 14 203 143

print_heap$19:	; Call 8 printf 0
x36754:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 162 143
x36759:	mov [bp + 10], bp	; 3: 137 110 10
x36762:	add bp, 8	; 3: 131 197 8
x36765:	mov di, bp	; 2: 137 239
x36767:	jmp printf	; 3: 233 98 125

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x36770:	mov ax, [bp]	; 3: 139 70 0
x36773:	mov di, [bp + 4]	; 3: 139 126 4
x36776:	mov bp, [bp + 2]	; 3: 139 110 2
x36779:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

@368$string_Heap3A0A#:
x36781:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

@374$string_2020Address2025u2C20Size2025u0A#:
x36788:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

@379$string_0A#:
x36811:	db 10, 0	; 2: 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x36813:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36817:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x36819:	mov ax, [stderr]	; 3: 161 24 78
x36822:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36825:	mov word [bp + 18], @273$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 148 145

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x36830:	mov word [bp + 20], @274$string_newMemorySize203E3D200#	; 5: 199 70 20 194 145

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36835:	mov word [bp + 22], @275$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 213 145

realloc$6:	; Parameter 10 259 14
x36840:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x36845:	mov word [bp + 10], realloc$8	; 5: 199 70 10 0 144
x36850:	mov [bp + 12], bp	; 3: 137 110 12
x36853:	add bp, 10	; 3: 131 197 10
x36856:	mov di, bp	; 2: 137 239
x36858:	add di, 6	; 3: 131 199 6
x36861:	jmp fprintf	; 3: 233 253 206

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x36864:	mov word [bp + 10], realloc$11	; 5: 199 70 10 14 144
x36869:	mov [bp + 12], bp	; 3: 137 110 12
x36872:	add bp, 10	; 3: 131 197 10
x36875:	jmp abort	; 3: 233 42 207

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x36878:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36882:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x36884:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36888:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x36890:	mov ax, [stderr]	; 3: 161 24 78
x36893:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36896:	mov word [bp + 18], @288$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 20 146

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x36901:	mov word [bp + 20], @289$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 66 146

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36906:	mov word [bp + 22], @290$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 116 146

realloc$19:	; Parameter 10 260 14
x36911:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x36916:	mov word [bp + 10], realloc$21	; 5: 199 70 10 71 144
x36921:	mov [bp + 12], bp	; 3: 137 110 12
x36924:	add bp, 10	; 3: 131 197 10
x36927:	mov di, bp	; 2: 137 239
x36929:	add di, 6	; 3: 131 199 6
x36932:	jmp fprintf	; 3: 233 182 206

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x36935:	mov word [bp + 10], realloc$24	; 5: 199 70 10 85 144
x36940:	mov [bp + 12], bp	; 3: 137 110 12
x36943:	add bp, 10	; 3: 131 197 10
x36946:	jmp abort	; 3: 233 227 206

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x36949:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36953:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x36955:	mov ax, [bp + 8]	; 3: 139 70 8
x36958:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x36961:	mov word [bp + 10], realloc$29	; 5: 199 70 10 111 144
x36966:	mov [bp + 12], bp	; 3: 137 110 12
x36969:	add bp, 10	; 3: 131 197 10
x36972:	jmp malloc	; 3: 233 68 227

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary106

realloc$31:	; SetReturnValue £temporary106

realloc$32:	; Return £temporary106
x36975:	mov ax, [bp]	; 3: 139 70 0
x36978:	mov di, [bp + 4]	; 3: 139 126 4
x36981:	mov bp, [bp + 2]	; 3: 139 110 2
x36984:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x36986:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36990:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x36992:	mov ax, [bp + 6]	; 3: 139 70 6
x36995:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x36998:	mov word [bp + 10], realloc$37	; 5: 199 70 10 148 144
x37003:	mov [bp + 12], bp	; 3: 137 110 12
x37006:	add bp, 10	; 3: 131 197 10
x37009:	jmp free	; 3: 233 44 229

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x37012:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x37015:	mov ax, [bp]	; 3: 139 70 0
x37018:	mov di, [bp + 4]	; 3: 139 126 4
x37021:	mov bp, [bp + 2]	; 3: 139 110 2
x37024:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary109 newMemorySize
x37026:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary109 4
x37029:	add ax, 4	; 3: 131 192 4
x37032:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary111 oldMemoryPtr
x37035:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary112 £temporary111 4
x37038:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary113 £temporary112

realloc$45:	; Assign oldBlockPtr £temporary113
x37041:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary114 -> oldBlockPtr oldBlockPtr 0
x37044:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary114 -> oldBlockPtr
x37047:	mov ax, [si]	; 2: 139 4
x37049:	cmp [bp + 10], ax	; 3: 57 70 10
x37052:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary116 -> oldBlockPtr oldBlockPtr 0
x37054:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary116 -> oldBlockPtr newBlockSize
x37057:	mov ax, [bp + 10]	; 3: 139 70 10
x37060:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x37062:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x37065:	mov ax, [bp]	; 3: 139 70 0
x37068:	mov di, [bp + 4]	; 3: 139 126 4
x37071:	mov bp, [bp + 2]	; 3: 139 110 2
x37074:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x37076:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x37081:	mov ax, [g_firstBlockPtr]	; 3: 161 65 117
x37084:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x37087:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x37091:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x37093:	mov ax, [bp + 12]	; 3: 139 70 12
x37096:	cmp [bp + 16], ax	; 3: 57 70 16
x37099:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary119 currBlockPtr
x37101:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary119
x37104:	mov bx, [bp + 14]	; 3: 139 94 14
x37107:	sub bx, ax	; 2: 41 195
x37109:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x37112:	mov ax, [bp + 10]	; 3: 139 70 10
x37115:	cmp [bp + 18], ax	; 3: 57 70 18
x37118:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary122 -> oldBlockPtr oldBlockPtr 0
x37120:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary122 -> oldBlockPtr newBlockSize
x37123:	mov ax, [bp + 10]	; 3: 139 70 10
x37126:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x37128:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x37131:	mov ax, [bp]	; 3: 139 70 0
x37134:	mov di, [bp + 4]	; 3: 139 126 4
x37137:	mov bp, [bp + 2]	; 3: 139 110 2
x37140:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary123 currBlockPtr
x37142:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary123
x37145:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary124 -> currBlockPtr currBlockPtr 2
x37148:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary124 -> currBlockPtr
x37151:	mov ax, [si + 2]	; 3: 139 68 2
x37154:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x37157:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x37159:	mov ax, [bp + 8]	; 3: 139 70 8
x37162:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x37165:	mov word [bp + 14], realloc$71	; 5: 199 70 14 59 145
x37170:	mov [bp + 16], bp	; 3: 137 110 16
x37173:	add bp, 14	; 3: 131 197 14
x37176:	jmp malloc	; 3: 233 120 226

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary125

realloc$73:	; Assign newMemoryPtr £temporary125
x37179:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x37182:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x37186:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x37188:	mov ax, [bp + 14]	; 3: 139 70 14
x37191:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x37194:	mov ax, [bp + 6]	; 3: 139 70 6
x37197:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x37200:	mov ax, [bp + 8]	; 3: 139 70 8
x37203:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x37206:	mov word [bp + 16], realloc$80	; 5: 199 70 16 100 145
x37211:	mov [bp + 18], bp	; 3: 137 110 18
x37214:	add bp, 16	; 3: 131 197 16
x37217:	jmp memcpy	; 3: 233 79 1

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x37220:	mov ax, [bp + 6]	; 3: 139 70 6
x37223:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x37226:	mov word [bp + 16], realloc$84	; 5: 199 70 16 120 145
x37231:	mov [bp + 18], bp	; 3: 137 110 18
x37234:	add bp, 16	; 3: 131 197 16
x37237:	jmp free	; 3: 233 72 228

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x37240:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x37243:	mov ax, [bp]	; 3: 139 70 0
x37246:	mov di, [bp + 4]	; 3: 139 126 4
x37249:	mov bp, [bp + 2]	; 3: 139 110 2
x37252:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x37254:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x37257:	mov ax, [bp]	; 3: 139 70 0
x37260:	mov di, [bp + 4]	; 3: 139 126 4
x37263:	mov bp, [bp + 2]	; 3: 139 110 2
x37266:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

@273$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37268:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@274$string_newMemorySize203E3D200#:
x37314:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@275$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37333:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

@288$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37396:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@289$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x37442:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

@290$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37492:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

memcpy:	; IntegralToIntegral £temporary3948 target
x37555:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary3948
x37558:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary3949 source
x37561:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary3949
x37564:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x37567:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x37572:	mov ax, [bp + 10]	; 3: 139 70 10
x37575:	cmp [bp + 16], ax	; 3: 57 70 16
x37578:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary3953 charTarget index
x37580:	mov si, [bp + 12]	; 3: 139 118 12
x37583:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary3952 -> £temporary3953 £temporary3953 0

memcpy$8:	; BinaryAdd £temporary3955 charSource index
x37586:	mov di, [bp + 14]	; 3: 139 126 14
x37589:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary3954 -> £temporary3955 £temporary3955 0

memcpy$10:	; Assign £temporary3952 -> £temporary3953 £temporary3954 -> £temporary3955
x37592:	mov al, [di]	; 2: 138 5
x37594:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x37596:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x37599:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary3956 target
x37601:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary3956

memcpy$15:	; Return £temporary3956
x37604:	mov ax, [bp]	; 3: 139 70 0
x37607:	mov di, [bp + 4]	; 3: 139 126 4
x37610:	mov bp, [bp + 2]	; 3: 139 110 2
x37613:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37615:	mov word [bp + 12], @8916$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 218 148

print_test$2:	; Parameter 6 123 8
x37620:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x37625:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x37630:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x37635:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x37640:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x37645:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x37650:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x37655:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x37660:	mov word [bp + 6], print_test$11	; 5: 199 70 6 47 147
x37665:	mov [bp + 8], bp	; 3: 137 110 8
x37668:	add bp, 6	; 3: 131 197 6
x37671:	mov di, bp	; 2: 137 239
x37673:	add di, 16	; 3: 131 199 16
x37676:	jmp printf	; 3: 233 213 121

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37679:	mov word [bp + 12], @8926$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 22 149

print_test$14:	; Parameter 6 -123 8
x37684:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x37689:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x37694:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x37699:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x37704:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x37709:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x37714:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x37719:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x37724:	mov word [bp + 6], print_test$23	; 5: 199 70 6 111 147
x37729:	mov [bp + 8], bp	; 3: 137 110 8
x37732:	add bp, 6	; 3: 131 197 6
x37735:	mov di, bp	; 2: 137 239
x37737:	add di, 16	; 3: 131 199 16
x37740:	jmp printf	; 3: 233 149 121

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37743:	mov word [bp + 12], @8936$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 82 149

print_test$26:	; Parameter 6 123 8
x37748:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x37753:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x37758:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x37763:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x37768:	mov word [bp + 6], print_test$31	; 5: 199 70 6 155 147
x37773:	mov [bp + 8], bp	; 3: 137 110 8
x37776:	add bp, 6	; 3: 131 197 6
x37779:	mov di, bp	; 2: 137 239
x37781:	add di, 8	; 3: 131 199 8
x37784:	jmp printf	; 3: 233 105 121

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37787:	mov word [bp + 12], @8942$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 114 149

print_test$34:	; Parameter 6 -123 8
x37792:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x37797:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x37802:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x37807:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x37812:	mov word [bp + 6], print_test$39	; 5: 199 70 6 199 147
x37817:	mov [bp + 8], bp	; 3: 137 110 8
x37820:	add bp, 6	; 3: 131 197 6
x37823:	mov di, bp	; 2: 137 239
x37825:	add di, 8	; 3: 131 199 8
x37828:	jmp printf	; 3: 233 61 121

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37831:	mov word [bp + 12], @8948$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 146 149

print_test$42:	; PushFloat 123.456
x37836:	fld qword [@8949$float8$123.456#]	; 4: 221 6 230 149

print_test$43:	; Parameter 6 123.456 8
x37840:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x37843:	fld qword [@8950$float8$123.456#]	; 4: 221 6 238 149

print_test$45:	; Parameter 6 123.456 16
x37847:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x37850:	fld qword [@8951$float8$123.456#]	; 4: 221 6 246 149

print_test$47:	; Parameter 6 123.456 24
x37854:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x37857:	fld qword [@8952$float8$123.456#]	; 4: 221 6 254 149

print_test$49:	; Parameter 6 123.456 32
x37861:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x37864:	fld qword [@8953$float8$123.456#]	; 4: 221 6 6 150

print_test$51:	; Parameter 6 123.456 40
x37868:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x37871:	fld qword [@8954$float8$123.456#]	; 4: 221 6 14 150

print_test$53:	; Parameter 6 123.456 48
x37875:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x37878:	fld qword [@8955$float8$123.456#]	; 4: 221 6 22 150

print_test$55:	; Parameter 6 123.456 56
x37882:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x37885:	fld qword [@8956$float8$123.456#]	; 4: 221 6 30 150

print_test$57:	; Parameter 6 123.456 64
x37889:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x37892:	mov word [bp + 6], print_test$59	; 5: 199 70 6 23 148
x37897:	mov [bp + 8], bp	; 3: 137 110 8
x37900:	add bp, 6	; 3: 131 197 6
x37903:	mov di, bp	; 2: 137 239
x37905:	add di, 64	; 3: 131 199 64
x37908:	jmp printf	; 3: 233 237 120

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37911:	mov word [bp + 12], @8958$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 38 150

print_test$62:	; PushFloat -123.456
x37916:	fld qword [@8959$float8$minus123.456#]	; 4: 221 6 122 150

print_test$63:	; Parameter 6 -123.456 8
x37920:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x37923:	fld qword [@8960$float8$minus123.456#]	; 4: 221 6 130 150

print_test$65:	; Parameter 6 -123.456 16
x37927:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x37930:	fld qword [@8961$float8$minus123.456#]	; 4: 221 6 138 150

print_test$67:	; Parameter 6 -123.456 24
x37934:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x37937:	fld qword [@8962$float8$minus123.456#]	; 4: 221 6 146 150

print_test$69:	; Parameter 6 -123.456 32
x37941:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x37944:	fld qword [@8963$float8$minus123.456#]	; 4: 221 6 154 150

print_test$71:	; Parameter 6 -123.456 40
x37948:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x37951:	fld qword [@8964$float8$minus123.456#]	; 4: 221 6 162 150

print_test$73:	; Parameter 6 -123.456 48
x37955:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x37958:	fld qword [@8965$float8$minus123.456#]	; 4: 221 6 170 150

print_test$75:	; Parameter 6 -123.456 56
x37962:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x37965:	fld qword [@8966$float8$minus123.456#]	; 4: 221 6 178 150

print_test$77:	; Parameter 6 -123.456 64
x37969:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x37972:	mov word [bp + 6], print_test$79	; 5: 199 70 6 103 148
x37977:	mov [bp + 8], bp	; 3: 137 110 8
x37980:	add bp, 6	; 3: 131 197 6
x37983:	mov di, bp	; 2: 137 239
x37985:	add di, 64	; 3: 131 199 64
x37988:	jmp printf	; 3: 233 157 120

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x37991:	mov word [bp + 12], @8968$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 186 150

print_test$82:	; PushFloat 123.456
x37996:	fld qword [@8969$float8$123.456#]	; 4: 221 6 230 150

print_test$83:	; Parameter 6 123.456 8
x38000:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x38003:	fld qword [@8970$float8$123.456#]	; 4: 221 6 238 150

print_test$85:	; Parameter 6 123.456 16
x38007:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x38010:	fld qword [@8971$float8$123.456#]	; 4: 221 6 246 150

print_test$87:	; Parameter 6 123.456 24
x38014:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x38017:	fld qword [@8972$float8$123.456#]	; 4: 221 6 254 150

print_test$89:	; Parameter 6 123.456 32
x38021:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x38024:	mov word [bp + 6], print_test$91	; 5: 199 70 6 155 148
x38029:	mov [bp + 8], bp	; 3: 137 110 8
x38032:	add bp, 6	; 3: 131 197 6
x38035:	mov di, bp	; 2: 137 239
x38037:	add di, 32	; 3: 131 199 32
x38040:	jmp printf	; 3: 233 105 120

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38043:	mov word [bp + 12], @8974$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 6 151

print_test$94:	; PushFloat -123.456
x38048:	fld qword [@8975$float8$minus123.456#]	; 4: 221 6 50 151

print_test$95:	; Parameter 6 -123.456 8
x38052:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x38055:	fld qword [@8976$float8$minus123.456#]	; 4: 221 6 58 151

print_test$97:	; Parameter 6 -123.456 16
x38059:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x38062:	fld qword [@8977$float8$minus123.456#]	; 4: 221 6 66 151

print_test$99:	; Parameter 6 -123.456 24
x38066:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x38069:	fld qword [@8978$float8$minus123.456#]	; 4: 221 6 74 151

print_test$101:	; Parameter 6 -123.456 32
x38073:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x38076:	mov word [bp + 6], print_test$103	; 5: 199 70 6 207 148
x38081:	mov [bp + 8], bp	; 3: 137 110 8
x38084:	add bp, 6	; 3: 131 197 6
x38087:	mov di, bp	; 2: 137 239
x38089:	add di, 32	; 3: 131 199 32
x38092:	jmp printf	; 3: 233 53 120

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x38095:	mov ax, [bp]	; 3: 139 70 0
x38098:	mov di, [bp + 4]	; 3: 139 126 4
x38101:	mov bp, [bp + 2]	; 3: 139 110 2
x38104:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

@8916$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38106:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@8926$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38166:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@8936$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38226:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@8942$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38258:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@8948$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38290:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@8949$float8$123.456#:
x38374:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8950$float8$123.456#:
x38382:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8951$float8$123.456#:
x38390:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8952$float8$123.456#:
x38398:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8953$float8$123.456#:
x38406:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8954$float8$123.456#:
x38414:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8955$float8$123.456#:
x38422:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8956$float8$123.456#:
x38430:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8958$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38438:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@8959$float8$minus123.456#:
x38522:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8960$float8$minus123.456#:
x38530:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8961$float8$minus123.456#:
x38538:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8962$float8$minus123.456#:
x38546:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8963$float8$minus123.456#:
x38554:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8964$float8$minus123.456#:
x38562:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8965$float8$minus123.456#:
x38570:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8966$float8$minus123.456#:
x38578:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8968$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38586:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@8969$float8$123.456#:
x38630:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8970$float8$123.456#:
x38638:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8971$float8$123.456#:
x38646:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8972$float8$123.456#:
x38654:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8974$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38662:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@8975$float8$minus123.456#:
x38706:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8976$float8$minus123.456#:
x38714:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8977$float8$minus123.456#:
x38722:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8978$float8$minus123.456#:
x38730:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x38738:	mov word [bp + 12], @9351$string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 31 153

limits_test$2:	; Parameter 6 8 8
x38743:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x38748:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 111 151
x38753:	mov [bp + 8], bp	; 3: 137 110 8
x38756:	add bp, 6	; 3: 131 197 6
x38759:	mov di, bp	; 2: 137 239
x38761:	add di, 2	; 3: 131 199 2
x38764:	jmp printf	; 3: 233 149 117

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x38767:	mov word [bp + 12], @9354$string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 46 153

limits_test$7:	; Parameter 6 -128 8
x38772:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x38777:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 140 151
x38782:	mov [bp + 8], bp	; 3: 137 110 8
x38785:	add bp, 6	; 3: 131 197 6
x38788:	mov di, bp	; 2: 137 239
x38790:	add di, 2	; 3: 131 199 2
x38793:	jmp printf	; 3: 233 120 117

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x38796:	mov word [bp + 12], @9358$string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 62 153

limits_test$12:	; Parameter 6 127 8
x38801:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x38806:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 169 151
x38811:	mov [bp + 8], bp	; 3: 137 110 8
x38814:	add bp, 6	; 3: 131 197 6
x38817:	mov di, bp	; 2: 137 239
x38819:	add di, 2	; 3: 131 199 2
x38822:	jmp printf	; 3: 233 91 117

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x38825:	mov word [bp + 12], @9362$string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 77 153

limits_test$17:	; Parameter 6 255 8
x38830:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x38835:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 198 151
x38840:	mov [bp + 8], bp	; 3: 137 110 8
x38843:	add bp, 6	; 3: 131 197 6
x38846:	mov di, bp	; 2: 137 239
x38848:	add di, 2	; 3: 131 199 2
x38851:	jmp printf	; 3: 233 62 117

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x38854:	mov word [bp + 12], @9366$string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 94 153

limits_test$22:	; Parameter 6 -128 8
x38859:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x38864:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 227 151
x38869:	mov [bp + 8], bp	; 3: 137 110 8
x38872:	add bp, 6	; 3: 131 197 6
x38875:	mov di, bp	; 2: 137 239
x38877:	add di, 2	; 3: 131 199 2
x38880:	jmp printf	; 3: 233 33 117

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x38883:	mov word [bp + 12], @9370$string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 109 153

limits_test$27:	; Parameter 6 127 8
x38888:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x38893:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 0 152
x38898:	mov [bp + 8], bp	; 3: 137 110 8
x38901:	add bp, 6	; 3: 131 197 6
x38904:	mov di, bp	; 2: 137 239
x38906:	add di, 2	; 3: 131 199 2
x38909:	jmp printf	; 3: 233 4 117

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x38912:	mov word [bp + 12], @9374$string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 124 153

limits_test$32:	; Parameter 6 255 8
x38917:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x38922:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 29 152
x38927:	mov [bp + 8], bp	; 3: 137 110 8
x38930:	add bp, 6	; 3: 131 197 6
x38933:	mov di, bp	; 2: 137 239
x38935:	add di, 2	; 3: 131 199 2
x38938:	jmp printf	; 3: 233 231 116

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x38941:	mov word [bp + 12], @9378$string_INT_MIN203D2025i0A#	; 5: 199 70 12 141 153

limits_test$37:	; Parameter 6 -32768 8
x38946:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x38951:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 58 152
x38956:	mov [bp + 8], bp	; 3: 137 110 8
x38959:	add bp, 6	; 3: 131 197 6
x38962:	mov di, bp	; 2: 137 239
x38964:	add di, 2	; 3: 131 199 2
x38967:	jmp printf	; 3: 233 202 116

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x38970:	mov word [bp + 12], @9381$string_INT_MAX203D2025i0A#	; 5: 199 70 12 155 153

limits_test$42:	; Parameter 6 32767 8
x38975:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x38980:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 87 152
x38985:	mov [bp + 8], bp	; 3: 137 110 8
x38988:	add bp, 6	; 3: 131 197 6
x38991:	mov di, bp	; 2: 137 239
x38993:	add di, 2	; 3: 131 199 2
x38996:	jmp printf	; 3: 233 173 116

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x38999:	mov word [bp + 12], @9384$string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 169 153

limits_test$47:	; Parameter 6 65535 8
x39004:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x39009:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 116 152
x39014:	mov [bp + 8], bp	; 3: 137 110 8
x39017:	add bp, 6	; 3: 131 197 6
x39020:	mov di, bp	; 2: 137 239
x39022:	add di, 2	; 3: 131 199 2
x39025:	jmp printf	; 3: 233 144 116

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x39028:	mov word [bp + 12], @9387$string_LONG_MIN203D2025li0A#	; 5: 199 70 12 185 153

limits_test$52:	; Parameter 6 -2147483648 8
x39033:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x39041:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 148 152
x39046:	mov [bp + 8], bp	; 3: 137 110 8
x39049:	add bp, 6	; 3: 131 197 6
x39052:	mov di, bp	; 2: 137 239
x39054:	add di, 4	; 3: 131 199 4
x39057:	jmp printf	; 3: 233 112 116

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x39060:	mov word [bp + 12], @9390$string_LONG_MAX203D2025li0A#	; 5: 199 70 12 201 153

limits_test$57:	; Parameter 6 2147483647 8
x39065:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x39073:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 180 152
x39078:	mov [bp + 8], bp	; 3: 137 110 8
x39081:	add bp, 6	; 3: 131 197 6
x39084:	mov di, bp	; 2: 137 239
x39086:	add di, 4	; 3: 131 199 4
x39089:	jmp printf	; 3: 233 80 116

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x39092:	mov word [bp + 12], @9393$string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 217 153

limits_test$62:	; Parameter 6 4294967295 8
x39097:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x39105:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 212 152
x39110:	mov [bp + 8], bp	; 3: 137 110 8
x39113:	add bp, 6	; 3: 131 197 6
x39116:	mov di, bp	; 2: 137 239
x39118:	add di, 4	; 3: 131 199 4
x39121:	jmp printf	; 3: 233 48 116

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x39124:	mov word [bp + 12], @9396$string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 234 153

limits_test$67:	; Parameter 6 4294967295 8
x39129:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x39137:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 244 152
x39142:	mov [bp + 8], bp	; 3: 137 110 8
x39145:	add bp, 6	; 3: 131 197 6
x39148:	mov di, bp	; 2: 137 239
x39150:	add di, 4	; 3: 131 199 4
x39153:	jmp printf	; 3: 233 16 116

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x39156:	mov word [bp + 12], @9399$string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 251 153

limits_test$72:	; Parameter 6 4294967295 8
x39161:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x39169:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 20 153
x39174:	mov [bp + 8], bp	; 3: 137 110 8
x39177:	add bp, 6	; 3: 131 197 6
x39180:	mov di, bp	; 2: 137 239
x39182:	add di, 4	; 3: 131 199 4
x39185:	jmp printf	; 3: 233 240 115

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x39188:	mov ax, [bp]	; 3: 139 70 0
x39191:	mov di, [bp + 4]	; 3: 139 126 4
x39194:	mov bp, [bp + 2]	; 3: 139 110 2
x39197:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

@9351$string_CHAR_BIT203D2025i0A#:
x39199:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

@9354$string_CHAR_MIN203D2025i0A0A#:
x39214:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

@9358$string_CHAR_MAX203D2025i0A#:
x39230:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

@9362$string_UCHAR_MAX203D2025u0A0A#:
x39245:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

@9366$string_SHRT_MIN203D2025i0A#:
x39262:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

@9370$string_SHRT_MAX203D2025i0A#:
x39277:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

@9374$string_USHRT_MAX203D2025u0A0A#:
x39292:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

@9378$string_INT_MIN203D2025i0A#:
x39309:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

@9381$string_INT_MAX203D2025i0A#:
x39323:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

@9384$string_UINT_MAX203D2025u0A0A#:
x39337:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

@9387$string_LONG_MIN203D2025li0A#:
x39353:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

@9390$string_LONG_MAX203D2025li0A#:
x39369:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

@9393$string_ULONG_MAX203D2025lu0A#:
x39385:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

@9396$string_ULONG_MAX203D2025lx0A#:
x39402:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

@9399$string_ULONG_MAX203D2025lX0A#:
x39419:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x39436:	mov ax, [bp]	; 3: 139 70 0
x39439:	mov di, [bp + 4]	; 3: 139 126 4
x39442:	mov bp, [bp + 2]	; 3: 139 110 2
x39445:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x39447:	fld qword [@9931$float8$10#]	; 4: 221 6 95 154

setjmp_test$2:	; Parameter 6 10 6
x39451:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x39454:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 44 154
x39459:	mov [bp + 8], bp	; 3: 137 110 8
x39462:	add bp, 6	; 3: 131 197 6
x39465:	nop	; 1: 144
x39466:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x39468:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x39470:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x39473:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 63 154
x39478:	mov [bp + 8], bp	; 3: 137 110 8
x39481:	add bp, 6	; 3: 131 197 6
x39484:	nop	; 1: 144
x39485:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x39487:	fld qword [@9936$float8$0.1#]	; 4: 221 6 103 154

setjmp_test$12:	; Parameter 6 0.1 6
x39491:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x39494:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 84 154
x39499:	mov [bp + 8], bp	; 3: 137 110 8
x39502:	add bp, 6	; 3: 131 197 6
x39505:	nop	; 1: 144
x39506:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x39508:	mov ax, [bp]	; 3: 139 70 0
x39511:	mov di, [bp + 4]	; 3: 139 126 4
x39514:	mov bp, [bp + 2]	; 3: 139 110 2
x39517:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

@9931$float8$10#:
x39519:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@9936$float8$0.1#:
x39527:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x39535:	mov word [bp + 22], buffer	; 5: 199 70 22 235 154

test$2:	; Call 16 setjmp 0
x39540:	mov word [bp + 16], test$3	; 5: 199 70 16 130 154
x39545:	mov [bp + 18], bp	; 3: 137 110 18
x39548:	add bp, 16	; 3: 131 197 16
x39551:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4541

test$5:	; Assign message £temporary4541
x39554:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x39557:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x39561:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x39563:	mov word [bp + 22], @9917$string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 241 154

test$9:	; PushFloat x
x39568:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x39571:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x39574:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x39577:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x39580:	mov word [bp + 32], test$15	; 5: 199 70 32 170 154
x39585:	mov [bp + 34], bp	; 3: 137 110 34
x39588:	add bp, 32	; 3: 131 197 32
x39591:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4543

test$17:	; Parameter 16 £temporary4543 16
x39594:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x39597:	mov word [bp + 16], test$19	; 5: 199 70 16 192 154
x39602:	mov [bp + 18], bp	; 3: 137 110 18
x39605:	add bp, 16	; 3: 131 197 16
x39608:	mov di, bp	; 2: 137 239
x39610:	add di, 16	; 3: 131 199 16
x39613:	jmp printf	; 3: 233 68 114

test$19:	; PostCall 16

test$20:	; Goto 26
x39616:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x39618:	mov word [bp + 22], @9920$string_25s0A#	; 5: 199 70 22 0 155

test$23:	; Parameter 16 message 8
x39623:	mov ax, [bp + 14]	; 3: 139 70 14
x39626:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x39629:	mov word [bp + 16], test$25	; 5: 199 70 16 224 154
x39634:	mov [bp + 18], bp	; 3: 137 110 18
x39637:	add bp, 16	; 3: 131 197 16
x39640:	mov di, bp	; 2: 137 239
x39642:	add di, 2	; 3: 131 199 2
x39645:	jmp printf	; 3: 233 36 114

test$25:	; PostCall 16

test$26:	; Return 0
x39648:	mov ax, [bp]	; 3: 139 70 0
x39651:	mov di, [bp + 4]	; 3: 139 126 4
x39654:	mov bp, [bp + 2]	; 3: 139 110 2
x39657:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x39659:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

@9917$string_12E0202F2025f203D2025f0A#:
x39665:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

@9920$string_25s0A#:
x39680:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary621 bp

setjmp$1:	; Assign bp_pointer £temporary621
x39684:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary622 -> buf buf 0
x39687:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary623 -> bp_pointer bp_pointer 0
x39690:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary622 -> buf £temporary623 -> bp_pointer
x39693:	mov ax, [di]	; 2: 139 5
x39695:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary624 -> buf buf 2
x39697:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary625 -> bp_pointer bp_pointer 2
x39700:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary624 -> buf £temporary625 -> bp_pointer
x39703:	mov ax, [di + 2]	; 3: 139 69 2
x39706:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary626 -> buf buf 4
x39709:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary627 -> bp_pointer bp_pointer 4
x39712:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary626 -> buf £temporary627 -> bp_pointer
x39715:	mov ax, [di + 4]	; 3: 139 69 4
x39718:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x39721:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x39724:	mov ax, [bp]	; 3: 139 70 0
x39727:	mov di, [bp + 4]	; 3: 139 126 4
x39730:	mov bp, [bp + 2]	; 3: 139 110 2
x39733:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x39735:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x39737:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x39740:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x39743:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x39746:	mov word [bp + 14], inverse$6	; 5: 199 70 14 80 155
x39751:	mov [bp + 16], bp	; 3: 137 110 16
x39754:	add bp, 14	; 3: 131 197 14
x39757:	nop	; 1: 144
x39758:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4533

inverse$8:	; SetReturnValue £temporary4533

inverse$9:	; Return £temporary4533
x39760:	mov ax, [bp]	; 3: 139 70 0
x39763:	mov di, [bp + 4]	; 3: 139 126 4
x39766:	mov bp, [bp + 2]	; 3: 139 110 2
x39769:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x39771:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x39774:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x39776:	fcompp	; 2: 222 217
x39778:	fstsw ax	; 3: 155 223 224
x39781:	sahf	; 1: 158
x39782:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x39784:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x39787:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4537 x y
x39790:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4537

divide$7:	; Return £temporary4537
x39792:	mov ax, [bp]	; 3: 139 70 0
x39795:	mov di, [bp + 4]	; 3: 139 126 4
x39798:	mov bp, [bp + 2]	; 3: 139 110 2
x39801:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x39803:	mov word [bp + 28], buffer	; 5: 199 70 28 235 154

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x39808:	mov word [bp + 30], @9905$string_Division20by20Zero2E#	; 5: 199 70 30 160 155

divide$11:	; Call 22 longjmp 0
x39813:	mov word [bp + 22], divide$12	; 5: 199 70 22 147 155
x39818:	mov [bp + 24], bp	; 3: 137 110 24
x39821:	add bp, 22	; 3: 131 197 22
x39824:	nop	; 1: 144
x39825:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x39827:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x39829:	mov ax, [bp]	; 3: 139 70 0
x39832:	mov di, [bp + 4]	; 3: 139 126 4
x39835:	mov bp, [bp + 2]	; 3: 139 110 2
x39838:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

@9905$string_Division20by20Zero2E#:
x39840:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x39858:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary630 -> buf buf 0
x39861:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary630 -> buf
x39864:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary632 -> buf buf 4
x39866:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary632 -> buf
x39869:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary634 -> buf buf 2
x39872:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary634 -> buf
x39875:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x39878:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x39880:	mov ax, [bp]	; 3: 139 70 0
x39883:	mov di, [bp + 4]	; 3: 139 126 4
x39886:	mov bp, [bp + 2]	; 3: 139 110 2
x39889:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdio_test:	; Assign n 0
x39891:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5583 n
x39896:	mov si, bp	; 2: 137 238
x39898:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5583
x39901:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x39904:	mov word [bp + 16], @11774$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 187 163

stdio_test$5:	; Parameter 10 123 8
x39909:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x39914:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x39919:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x39927:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x39935:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x39940:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x39948:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 31 156
x39953:	mov [bp + 12], bp	; 3: 137 110 12
x39956:	add bp, 10	; 3: 131 197 10
x39959:	mov di, bp	; 2: 137 239
x39961:	add di, 18	; 3: 131 199 18
x39964:	jmp printf	; 3: 233 229 112

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x39967:	mov word [bp + 16], @11782$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 222 163

stdio_test$15:	; Parameter 10 123 8
x39972:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x39977:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x39982:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x39990:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x39998:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x40003:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x40011:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 94 156
x40016:	mov [bp + 12], bp	; 3: 137 110 12
x40019:	add bp, 10	; 3: 131 197 10
x40022:	mov di, bp	; 2: 137 239
x40024:	add di, 18	; 3: 131 199 18
x40027:	jmp printf	; 3: 233 166 112

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x40030:	mov word [bp + 16], @11790$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 6 164

stdio_test$25:	; Parameter 10 123 8
x40035:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x40040:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x40045:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x40053:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x40061:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x40066:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x40074:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 157 156
x40079:	mov [bp + 12], bp	; 3: 137 110 12
x40082:	add bp, 10	; 3: 131 197 10
x40085:	mov di, bp	; 2: 137 239
x40087:	add di, 18	; 3: 131 199 18
x40090:	jmp printf	; 3: 233 103 112

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x40093:	mov word [bp + 16], @11798$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 52 164

stdio_test$35:	; Parameter 10 123 8
x40098:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x40103:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x40108:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x40116:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x40124:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x40129:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x40137:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 220 156
x40142:	mov [bp + 12], bp	; 3: 137 110 12
x40145:	add bp, 10	; 3: 131 197 10
x40148:	mov di, bp	; 2: 137 239
x40150:	add di, 18	; 3: 131 199 18
x40153:	jmp printf	; 3: 233 40 112

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x40156:	mov word [bp + 16], @11806$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 98 164

stdio_test$45:	; Parameter 10 123 8
x40161:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x40166:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x40171:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x40179:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x40187:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x40192:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x40200:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 27 157
x40205:	mov [bp + 12], bp	; 3: 137 110 12
x40208:	add bp, 10	; 3: 131 197 10
x40211:	mov di, bp	; 2: 137 239
x40213:	add di, 18	; 3: 131 199 18
x40216:	jmp printf	; 3: 233 233 111

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x40219:	mov word [bp + 16], @11818$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 151 164

stdio_test$55:	; Parameter 10 123 8
x40224:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x40229:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x40234:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x40242:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x40250:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x40255:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x40263:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 90 157
x40268:	mov [bp + 12], bp	; 3: 137 110 12
x40271:	add bp, 10	; 3: 131 197 10
x40274:	mov di, bp	; 2: 137 239
x40276:	add di, 18	; 3: 131 199 18
x40279:	jmp printf	; 3: 233 170 111

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x40282:	mov word [bp + 16], @11826$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 197 164

stdio_test$65:	; Parameter 10 123 8
x40287:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x40292:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x40297:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x40305:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x40313:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x40318:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x40326:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 153 157
x40331:	mov [bp + 12], bp	; 3: 137 110 12
x40334:	add bp, 10	; 3: 131 197 10
x40337:	mov di, bp	; 2: 137 239
x40339:	add di, 18	; 3: 131 199 18
x40342:	jmp printf	; 3: 233 107 111

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x40345:	mov word [bp + 16], @11834$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 249 164

stdio_test$75:	; Parameter 10 123 8
x40350:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x40355:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x40360:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x40368:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x40376:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x40381:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x40389:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 216 157
x40394:	mov [bp + 12], bp	; 3: 137 110 12
x40397:	add bp, 10	; 3: 131 197 10
x40400:	mov di, bp	; 2: 137 239
x40402:	add di, 18	; 3: 131 199 18
x40405:	jmp printf	; 3: 233 44 111

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x40408:	mov word [bp + 16], @11842$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 45 165

stdio_test$85:	; Parameter 10 123 8
x40413:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x40418:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x40423:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x40431:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x40439:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x40444:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x40452:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 23 158
x40457:	mov [bp + 12], bp	; 3: 137 110 12
x40460:	add bp, 10	; 3: 131 197 10
x40463:	mov di, bp	; 2: 137 239
x40465:	add di, 18	; 3: 131 199 18
x40468:	jmp printf	; 3: 233 237 110

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x40471:	mov word [bp + 16], @11850$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 104 165

stdio_test$95:	; Parameter 10 123 8
x40476:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x40481:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x40486:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x40494:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x40502:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x40507:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x40515:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 86 158
x40520:	mov [bp + 12], bp	; 3: 137 110 12
x40523:	add bp, 10	; 3: 131 197 10
x40526:	mov di, bp	; 2: 137 239
x40528:	add di, 18	; 3: 131 199 18
x40531:	jmp printf	; 3: 233 174 110

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x40534:	mov word [bp + 16], @11858$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 150 165

stdio_test$105:	; Parameter 10 123 8
x40539:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x40544:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x40549:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x40557:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x40565:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x40570:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x40578:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 149 158
x40583:	mov [bp + 12], bp	; 3: 137 110 12
x40586:	add bp, 10	; 3: 131 197 10
x40589:	mov di, bp	; 2: 137 239
x40591:	add di, 18	; 3: 131 199 18
x40594:	jmp printf	; 3: 233 111 110

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x40597:	mov word [bp + 16], @11866$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 202 165

stdio_test$115:	; Parameter 10 123 8
x40602:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x40607:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x40612:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x40620:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x40628:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x40633:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x40641:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 212 158
x40646:	mov [bp + 12], bp	; 3: 137 110 12
x40649:	add bp, 10	; 3: 131 197 10
x40652:	mov di, bp	; 2: 137 239
x40654:	add di, 18	; 3: 131 199 18
x40657:	jmp printf	; 3: 233 48 110

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x40660:	mov word [bp + 16], @11874$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 254 165

stdio_test$125:	; Parameter 10 123 8
x40665:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x40670:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x40675:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x40683:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x40691:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x40696:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x40704:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 19 159
x40709:	mov [bp + 12], bp	; 3: 137 110 12
x40712:	add bp, 10	; 3: 131 197 10
x40715:	mov di, bp	; 2: 137 239
x40717:	add di, 18	; 3: 131 199 18
x40720:	jmp printf	; 3: 233 241 109

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x40723:	mov word [bp + 16], @11882$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 57 166

stdio_test$135:	; Parameter 10 123 8
x40728:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x40733:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x40738:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x40743:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x40751:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x40759:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x40767:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 82 159
x40772:	mov [bp + 12], bp	; 3: 137 110 12
x40775:	add bp, 10	; 3: 131 197 10
x40778:	mov di, bp	; 2: 137 239
x40780:	add di, 18	; 3: 131 199 18
x40783:	jmp printf	; 3: 233 178 109

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x40786:	mov word [bp + 16], @11890$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 91 166

stdio_test$145:	; Parameter 10 123 8
x40791:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x40796:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x40801:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x40806:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x40814:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x40822:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x40830:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 145 159
x40835:	mov [bp + 12], bp	; 3: 137 110 12
x40838:	add bp, 10	; 3: 131 197 10
x40841:	mov di, bp	; 2: 137 239
x40843:	add di, 18	; 3: 131 199 18
x40846:	jmp printf	; 3: 233 115 109

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x40849:	mov word [bp + 16], @11898$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 131 166

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x40854:	mov word [bp + 18], @11899$string_Hello2C20World21#	; 5: 199 70 18 153 166

stdio_test$156:	; Parameter 10 88 10
x40859:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x40864:	mov ax, [bp + 8]	; 3: 139 70 8
x40867:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x40870:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 185 159
x40875:	mov [bp + 12], bp	; 3: 137 110 12
x40878:	add bp, 10	; 3: 131 197 10
x40881:	mov di, bp	; 2: 137 239
x40883:	add di, 6	; 3: 131 199 6
x40886:	jmp printf	; 3: 233 75 109

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x40889:	mov word [bp + 16], @11903$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 167 166

stdio_test$162:	; PushFloat 123.456
x40894:	fld qword [@11904$float8$123.456#]	; 4: 221 6 193 166

stdio_test$163:	; Parameter 10 123.456 8
x40898:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x40901:	fld qword [@11905$float8$123.456#]	; 4: 221 6 201 166

stdio_test$165:	; Parameter 10 123.456 16
x40905:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x40908:	fld qword [@11906$float8$123.456#]	; 4: 221 6 209 166

stdio_test$167:	; Parameter 10 123.456 24
x40912:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x40915:	fld qword [@11907$float8$123456.1#]	; 4: 221 6 217 166

stdio_test$169:	; Parameter 10 123456.1 32
x40919:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x40922:	fld qword [@11908$float8$123456.1#]	; 4: 221 6 225 166

stdio_test$171:	; Parameter 10 123456.1 40
x40926:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x40929:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 244 159
x40934:	mov [bp + 12], bp	; 3: 137 110 12
x40937:	add bp, 10	; 3: 131 197 10
x40940:	mov di, bp	; 2: 137 239
x40942:	add di, 40	; 3: 131 199 40
x40945:	jmp printf	; 3: 233 16 109

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x40948:	mov word [bp + 16], @11910$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 233 166

stdio_test$176:	; PushFloat 123.456
x40953:	fld qword [@11911$float8$123.456#]	; 4: 221 6 8 167

stdio_test$177:	; Parameter 10 123.456 8
x40957:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x40960:	fld qword [@11912$float8$123.456#]	; 4: 221 6 16 167

stdio_test$179:	; Parameter 10 123.456 16
x40964:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x40967:	fld qword [@11913$float8$123.456#]	; 4: 221 6 24 167

stdio_test$181:	; Parameter 10 123.456 24
x40971:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x40974:	fld qword [@11914$float8$123456.1#]	; 4: 221 6 32 167

stdio_test$183:	; Parameter 10 123456.1 32
x40978:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x40981:	fld qword [@11915$float8$123456.1#]	; 4: 221 6 40 167

stdio_test$185:	; Parameter 10 123456.1 40
x40985:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x40988:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 47 160
x40993:	mov [bp + 12], bp	; 3: 137 110 12
x40996:	add bp, 10	; 3: 131 197 10
x40999:	mov di, bp	; 2: 137 239
x41001:	add di, 40	; 3: 131 199 40
x41004:	jmp printf	; 3: 233 213 108

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41007:	mov word [bp + 16], @11917$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 48 167

stdio_test$190:	; PushFloat 123.456
x41012:	fld qword [@11918$float8$123.456#]	; 4: 221 6 79 167

stdio_test$191:	; Parameter 10 123.456 8
x41016:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x41019:	fld qword [@11919$float8$123.456#]	; 4: 221 6 87 167

stdio_test$193:	; Parameter 10 123.456 16
x41023:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x41026:	fld qword [@11920$float8$123.456#]	; 4: 221 6 95 167

stdio_test$195:	; Parameter 10 123.456 24
x41030:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x41033:	fld qword [@11921$float8$123.456#]	; 4: 221 6 103 167

stdio_test$197:	; Parameter 10 123.456 32
x41037:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x41040:	fld qword [@11922$float8$123.456#]	; 4: 221 6 111 167

stdio_test$199:	; Parameter 10 123.456 40
x41044:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x41047:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 106 160
x41052:	mov [bp + 12], bp	; 3: 137 110 12
x41055:	add bp, 10	; 3: 131 197 10
x41058:	mov di, bp	; 2: 137 239
x41060:	add di, 40	; 3: 131 199 40
x41063:	jmp printf	; 3: 233 154 108

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41066:	mov word [bp + 16], @11924$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 119 167

stdio_test$204:	; PushFloat 123.456
x41071:	fld qword [@11925$float8$123.456#]	; 4: 221 6 155 167

stdio_test$205:	; Parameter 10 123.456 8
x41075:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x41078:	fld qword [@11926$float8$123.456#]	; 4: 221 6 163 167

stdio_test$207:	; Parameter 10 123.456 16
x41082:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x41085:	fld qword [@11927$float8$123.456#]	; 4: 221 6 171 167

stdio_test$209:	; Parameter 10 123.456 24
x41089:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x41092:	fld qword [@11928$float8$123.456#]	; 4: 221 6 179 167

stdio_test$211:	; Parameter 10 123.456 32
x41096:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x41099:	fld qword [@11929$float8$123.456#]	; 4: 221 6 187 167

stdio_test$213:	; Parameter 10 123.456 40
x41103:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x41106:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 165 160
x41111:	mov [bp + 12], bp	; 3: 137 110 12
x41114:	add bp, 10	; 3: 131 197 10
x41117:	mov di, bp	; 2: 137 239
x41119:	add di, 40	; 3: 131 199 40
x41122:	jmp printf	; 3: 233 95 108

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41125:	mov word [bp + 16], @11931$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 195 167

stdio_test$218:	; PushFloat 123.456
x41130:	fld qword [@11932$float8$123.456#]	; 4: 221 6 236 167

stdio_test$219:	; Parameter 10 123.456 8
x41134:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x41137:	fld qword [@11933$float8$123.456#]	; 4: 221 6 244 167

stdio_test$221:	; Parameter 10 123.456 16
x41141:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x41144:	fld qword [@11934$float8$123.456#]	; 4: 221 6 252 167

stdio_test$223:	; Parameter 10 123.456 24
x41148:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x41151:	fld qword [@11935$float8$123.456#]	; 4: 221 6 4 168

stdio_test$225:	; Parameter 10 123.456 32
x41155:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x41158:	fld qword [@11936$float8$123.456#]	; 4: 221 6 12 168

stdio_test$227:	; Parameter 10 123.456 40
x41162:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x41165:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 224 160
x41170:	mov [bp + 12], bp	; 3: 137 110 12
x41173:	add bp, 10	; 3: 131 197 10
x41176:	mov di, bp	; 2: 137 239
x41178:	add di, 40	; 3: 131 199 40
x41181:	jmp printf	; 3: 233 36 108

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41184:	mov word [bp + 16], @11938$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 20 168

stdio_test$232:	; PushFloat 123.456
x41189:	fld qword [@11939$float8$123.456#]	; 4: 221 6 67 168

stdio_test$233:	; Parameter 10 123.456 8
x41193:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x41196:	fld qword [@11940$float8$123.456#]	; 4: 221 6 75 168

stdio_test$235:	; Parameter 10 123.456 16
x41200:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x41203:	fld qword [@11941$float8$123.456#]	; 4: 221 6 83 168

stdio_test$237:	; Parameter 10 123.456 24
x41207:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x41210:	fld qword [@11942$float8$123.456#]	; 4: 221 6 91 168

stdio_test$239:	; Parameter 10 123.456 32
x41214:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x41217:	fld qword [@11943$float8$123.456#]	; 4: 221 6 99 168

stdio_test$241:	; Parameter 10 123.456 40
x41221:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x41224:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 27 161
x41229:	mov [bp + 12], bp	; 3: 137 110 12
x41232:	add bp, 10	; 3: 131 197 10
x41235:	mov di, bp	; 2: 137 239
x41237:	add di, 40	; 3: 131 199 40
x41240:	jmp printf	; 3: 233 233 107

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x41243:	mov word [bp + 16], @11945$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 107 168

stdio_test$246:	; PushFloat -123.456
x41248:	fld qword [@11946$float8$minus123.456#]	; 4: 221 6 133 168

stdio_test$247:	; Parameter 10 -123.456 8
x41252:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x41255:	fld qword [@11947$float8$minus123.456#]	; 4: 221 6 141 168

stdio_test$249:	; Parameter 10 -123.456 16
x41259:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x41262:	fld qword [@11948$float8$minus123.456#]	; 4: 221 6 149 168

stdio_test$251:	; Parameter 10 -123.456 24
x41266:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x41269:	fld qword [@11949$float8$minus0.000000123456#]	; 4: 221 6 157 168

stdio_test$253:	; Parameter 10 -0.000000123456 32
x41273:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x41276:	fld qword [@11950$float8$minus0.000000123456#]	; 4: 221 6 165 168

stdio_test$255:	; Parameter 10 -0.000000123456 40
x41280:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x41283:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 86 161
x41288:	mov [bp + 12], bp	; 3: 137 110 12
x41291:	add bp, 10	; 3: 131 197 10
x41294:	mov di, bp	; 2: 137 239
x41296:	add di, 40	; 3: 131 199 40
x41299:	jmp printf	; 3: 233 174 107

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x41302:	mov word [bp + 16], @11952$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 173 168

stdio_test$260:	; PushFloat -123.456
x41307:	fld qword [@11953$float8$minus123.456#]	; 4: 221 6 204 168

stdio_test$261:	; Parameter 10 -123.456 8
x41311:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x41314:	fld qword [@11954$float8$minus123.456#]	; 4: 221 6 212 168

stdio_test$263:	; Parameter 10 -123.456 16
x41318:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x41321:	fld qword [@11955$float8$minus123.456#]	; 4: 221 6 220 168

stdio_test$265:	; Parameter 10 -123.456 24
x41325:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x41328:	fld qword [@11956$float8$minus0.000000123456#]	; 4: 221 6 228 168

stdio_test$267:	; Parameter 10 -0.000000123456 32
x41332:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x41335:	fld qword [@11957$float8$minus0.000000123456#]	; 4: 221 6 236 168

stdio_test$269:	; Parameter 10 -0.000000123456 40
x41339:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x41342:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 145 161
x41347:	mov [bp + 12], bp	; 3: 137 110 12
x41350:	add bp, 10	; 3: 131 197 10
x41353:	mov di, bp	; 2: 137 239
x41355:	add di, 40	; 3: 131 199 40
x41358:	jmp printf	; 3: 233 115 107

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41361:	mov word [bp + 16], @11959$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 244 168

stdio_test$274:	; PushFloat -123.456
x41366:	fld qword [@11960$float8$minus123.456#]	; 4: 221 6 19 169

stdio_test$275:	; Parameter 10 -123.456 8
x41370:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x41373:	fld qword [@11961$float8$minus123.456#]	; 4: 221 6 27 169

stdio_test$277:	; Parameter 10 -123.456 16
x41377:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x41380:	fld qword [@11962$float8$minus123.456#]	; 4: 221 6 35 169

stdio_test$279:	; Parameter 10 -123.456 24
x41384:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x41387:	fld qword [@11963$float8$minus123.456#]	; 4: 221 6 43 169

stdio_test$281:	; Parameter 10 -123.456 32
x41391:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x41394:	fld qword [@11964$float8$minus123.456#]	; 4: 221 6 51 169

stdio_test$283:	; Parameter 10 -123.456 40
x41398:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x41401:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 204 161
x41406:	mov [bp + 12], bp	; 3: 137 110 12
x41409:	add bp, 10	; 3: 131 197 10
x41412:	mov di, bp	; 2: 137 239
x41414:	add di, 40	; 3: 131 199 40
x41417:	jmp printf	; 3: 233 56 107

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41420:	mov word [bp + 16], @11966$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 59 169

stdio_test$288:	; PushFloat -123.456
x41425:	fld qword [@11967$float8$minus123.456#]	; 4: 221 6 95 169

stdio_test$289:	; Parameter 10 -123.456 8
x41429:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x41432:	fld qword [@11968$float8$minus123.456#]	; 4: 221 6 103 169

stdio_test$291:	; Parameter 10 -123.456 16
x41436:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x41439:	fld qword [@11969$float8$minus123.456#]	; 4: 221 6 111 169

stdio_test$293:	; Parameter 10 -123.456 24
x41443:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x41446:	fld qword [@11970$float8$minus123.456#]	; 4: 221 6 119 169

stdio_test$295:	; Parameter 10 -123.456 32
x41450:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x41453:	fld qword [@11971$float8$minus123.456#]	; 4: 221 6 127 169

stdio_test$297:	; Parameter 10 -123.456 40
x41457:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x41460:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 7 162
x41465:	mov [bp + 12], bp	; 3: 137 110 12
x41468:	add bp, 10	; 3: 131 197 10
x41471:	mov di, bp	; 2: 137 239
x41473:	add di, 40	; 3: 131 199 40
x41476:	jmp printf	; 3: 233 253 106

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41479:	mov word [bp + 16], @11973$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 135 169

stdio_test$302:	; PushFloat -123.456
x41484:	fld qword [@11974$float8$minus123.456#]	; 4: 221 6 176 169

stdio_test$303:	; Parameter 10 -123.456 8
x41488:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x41491:	fld qword [@11975$float8$minus123.456#]	; 4: 221 6 184 169

stdio_test$305:	; Parameter 10 -123.456 16
x41495:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x41498:	fld qword [@11976$float8$minus123.456#]	; 4: 221 6 192 169

stdio_test$307:	; Parameter 10 -123.456 24
x41502:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x41505:	fld qword [@11977$float8$minus123.456#]	; 4: 221 6 200 169

stdio_test$309:	; Parameter 10 -123.456 32
x41509:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x41512:	fld qword [@11978$float8$minus123.456#]	; 4: 221 6 208 169

stdio_test$311:	; Parameter 10 -123.456 40
x41516:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x41519:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 66 162
x41524:	mov [bp + 12], bp	; 3: 137 110 12
x41527:	add bp, 10	; 3: 131 197 10
x41530:	mov di, bp	; 2: 137 239
x41532:	add di, 40	; 3: 131 199 40
x41535:	jmp printf	; 3: 233 194 106

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41538:	mov word [bp + 16], @11980$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 216 169

stdio_test$316:	; PushFloat -123.456
x41543:	fld qword [@11981$float8$minus123.456#]	; 4: 221 6 7 170

stdio_test$317:	; Parameter 10 -123.456 8
x41547:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x41550:	fld qword [@11982$float8$minus123.456#]	; 4: 221 6 15 170

stdio_test$319:	; Parameter 10 -123.456 16
x41554:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x41557:	fld qword [@11983$float8$minus123.456#]	; 4: 221 6 23 170

stdio_test$321:	; Parameter 10 -123.456 24
x41561:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x41564:	fld qword [@11984$float8$minus123.456#]	; 4: 221 6 31 170

stdio_test$323:	; Parameter 10 -123.456 32
x41568:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x41571:	fld qword [@11985$float8$minus123.456#]	; 4: 221 6 39 170

stdio_test$325:	; Parameter 10 -123.456 40
x41575:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x41578:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 125 162
x41583:	mov [bp + 12], bp	; 3: 137 110 12
x41586:	add bp, 10	; 3: 131 197 10
x41589:	mov di, bp	; 2: 137 239
x41591:	add di, 40	; 3: 131 199 40
x41594:	jmp printf	; 3: 233 135 106

stdio_test$327:	; PostCall 10

stdio_test$328:	; Assign a 0
x41597:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$329:	; Assign b 0
x41602:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

stdio_test$330:	; Assign n 0
x41607:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

stdio_test$331:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$332:	; Parameter 12 string_Please20write20three20integers3A20# 6
x41612:	mov word [bp + 18], @11996$string_Please20write20three20integers3A20#	; 5: 199 70 18 47 170

stdio_test$333:	; Call 12 printf 0
x41617:	mov word [bp + 12], stdio_test$334	; 5: 199 70 12 161 162
x41622:	mov [bp + 14], bp	; 3: 137 110 14
x41625:	add bp, 12	; 3: 131 197 12
x41628:	mov di, bp	; 2: 137 239
x41630:	jmp printf	; 3: 233 99 106

stdio_test$334:	; PostCall 12

stdio_test$335:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$336:	; Parameter 12 string_1232045620789# 6
x41633:	mov word [bp + 18], @11998$string_1232045620789#	; 5: 199 70 18 77 170

stdio_test$337:	; Parameter 12 string_25i20252Ai2025i2025n# 8
x41638:	mov word [bp + 20], @11999$string_25i20252Ai2025i2025n#	; 5: 199 70 20 89 170

stdio_test$338:	; address £temporary5613 a
x41643:	mov si, bp	; 2: 137 238
x41645:	add si, 6	; 3: 131 198 6

stdio_test$339:	; Parameter 12 £temporary5613 10
x41648:	mov [bp + 22], si	; 3: 137 118 22

stdio_test$340:	; address £temporary5614 b
x41651:	mov si, bp	; 2: 137 238
x41653:	add si, 8	; 3: 131 198 8

stdio_test$341:	; Parameter 12 £temporary5614 12
x41656:	mov [bp + 24], si	; 3: 137 118 24

stdio_test$342:	; address £temporary5615 n
x41659:	mov si, bp	; 2: 137 238
x41661:	add si, 10	; 3: 131 198 10

stdio_test$343:	; Parameter 12 £temporary5615 14
x41664:	mov [bp + 26], si	; 3: 137 118 26

stdio_test$344:	; Call 12 sscanf 0
x41667:	mov word [bp + 12], stdio_test$345	; 5: 199 70 12 214 162
x41672:	mov [bp + 14], bp	; 3: 137 110 14
x41675:	add bp, 12	; 3: 131 197 12
x41678:	mov di, bp	; 2: 137 239
x41680:	add di, 6	; 3: 131 199 6
x41683:	jmp sscanf	; 3: 233 15 8

stdio_test$345:	; PostCall 12

stdio_test$346:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$347:	; Parameter 12 string_3C25i3E203C25i3E203C25i3E0A# 6
x41686:	mov word [bp + 18], @12004$string_3C25i3E203C25i3E203C25i3E0A#	; 5: 199 70 18 102 170

stdio_test$348:	; Parameter 12 a 8
x41691:	mov ax, [bp + 6]	; 3: 139 70 6
x41694:	mov [bp + 20], ax	; 3: 137 70 20

stdio_test$349:	; Parameter 12 b 10
x41697:	mov ax, [bp + 8]	; 3: 139 70 8
x41700:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$350:	; Parameter 12 n 12
x41703:	mov ax, [bp + 10]	; 3: 139 70 10
x41706:	mov [bp + 24], ax	; 3: 137 70 24

stdio_test$351:	; Call 12 printf 0
x41709:	mov word [bp + 12], stdio_test$352	; 5: 199 70 12 0 163
x41714:	mov [bp + 14], bp	; 3: 137 110 14
x41717:	add bp, 12	; 3: 131 197 12
x41720:	mov di, bp	; 2: 137 239
x41722:	add di, 6	; 3: 131 199 6
x41725:	jmp printf	; 3: 233 4 106

stdio_test$352:	; PostCall 12

stdio_test$353:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$354:	; Parameter 106 string_Please20write20the20patterns205Babc5D3A20# 6
x41728:	mov word [bp + 112], @12009$string_Please20write20the20patterns205Babc5D3A20#	; 5: 199 70 112 118 170

stdio_test$355:	; Call 106 printf 0
x41733:	mov word [bp + 106], stdio_test$356	; 5: 199 70 106 21 163
x41738:	mov [bp + 108], bp	; 3: 137 110 108
x41741:	add bp, 106	; 3: 131 197 106
x41744:	mov di, bp	; 2: 137 239
x41746:	jmp printf	; 3: 233 239 105

stdio_test$356:	; PostCall 106

stdio_test$357:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$358:	; Parameter 106 string_abcdef# 6
x41749:	mov word [bp + 112], @12011$string_abcdef#	; 5: 199 70 112 152 170

stdio_test$359:	; Parameter 106 string_255Babc5D# 8
x41754:	mov word [bp + 114], @12012$string_255Babc5D#	; 5: 199 70 114 159 170

stdio_test$360:	; Parameter 106 s 10
x41759:	mov [bp + 116], bp	; 3: 137 110 116
x41762:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$361:	; Call 106 sscanf 0
x41766:	mov word [bp + 106], stdio_test$362	; 5: 199 70 106 57 163
x41771:	mov [bp + 108], bp	; 3: 137 110 108
x41774:	add bp, 106	; 3: 131 197 106
x41777:	mov di, bp	; 2: 137 239
x41779:	add di, 2	; 3: 131 199 2
x41782:	jmp sscanf	; 3: 233 172 7

stdio_test$362:	; PostCall 106

stdio_test$363:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$364:	; Parameter 106 string_3C25s3E0A# 6
x41785:	mov word [bp + 112], @12014$string_3C25s3E0A#	; 5: 199 70 112 166 170

stdio_test$365:	; Parameter 106 s 8
x41790:	mov [bp + 114], bp	; 3: 137 110 114
x41793:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$366:	; Call 106 printf 0
x41797:	mov word [bp + 106], stdio_test$367	; 5: 199 70 106 88 163
x41802:	mov [bp + 108], bp	; 3: 137 110 108
x41805:	add bp, 106	; 3: 131 197 106
x41808:	mov di, bp	; 2: 137 239
x41810:	add di, 2	; 3: 131 199 2
x41813:	jmp printf	; 3: 233 172 105

stdio_test$367:	; PostCall 106

stdio_test$368:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$369:	; Parameter 106 string_Please20write20the20patterns205B5Eabc5D3A20# 6
x41816:	mov word [bp + 112], @12016$string_Please20write20the20patterns205B5Eabc5D3A20#	; 5: 199 70 112 172 170

stdio_test$370:	; Call 106 printf 0
x41821:	mov word [bp + 106], stdio_test$371	; 5: 199 70 106 109 163
x41826:	mov [bp + 108], bp	; 3: 137 110 108
x41829:	add bp, 106	; 3: 131 197 106
x41832:	mov di, bp	; 2: 137 239
x41834:	jmp printf	; 3: 233 151 105

stdio_test$371:	; PostCall 106

stdio_test$372:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$373:	; Parameter 106 string_defabc# 6
x41837:	mov word [bp + 112], @12018$string_defabc#	; 5: 199 70 112 207 170

stdio_test$374:	; Parameter 106 string_255B5Eabc5D# 8
x41842:	mov word [bp + 114], @12019$string_255B5Eabc5D#	; 5: 199 70 114 214 170

stdio_test$375:	; Parameter 106 s 10
x41847:	mov [bp + 116], bp	; 3: 137 110 116
x41850:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$376:	; Call 106 sscanf 0
x41854:	mov word [bp + 106], stdio_test$377	; 5: 199 70 106 145 163
x41859:	mov [bp + 108], bp	; 3: 137 110 108
x41862:	add bp, 106	; 3: 131 197 106
x41865:	mov di, bp	; 2: 137 239
x41867:	add di, 2	; 3: 131 199 2
x41870:	jmp sscanf	; 3: 233 84 7

stdio_test$377:	; PostCall 106

stdio_test$378:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$379:	; Parameter 106 string_3C25s3E0A0A# 6
x41873:	mov word [bp + 112], @12021$string_3C25s3E0A0A#	; 5: 199 70 112 222 170

stdio_test$380:	; Parameter 106 s 8
x41878:	mov [bp + 114], bp	; 3: 137 110 114
x41881:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$381:	; Call 106 printf 0
x41885:	mov word [bp + 106], stdio_test$382	; 5: 199 70 106 176 163
x41890:	mov [bp + 108], bp	; 3: 137 110 108
x41893:	add bp, 106	; 3: 131 197 106
x41896:	mov di, bp	; 2: 137 239
x41898:	add di, 2	; 3: 131 199 2
x41901:	jmp printf	; 3: 233 84 105

stdio_test$382:	; PostCall 106

stdio_test$383:	; Return 0
x41904:	mov ax, [bp]	; 3: 139 70 0
x41907:	mov di, [bp + 4]	; 3: 139 126 4
x41910:	mov bp, [bp + 2]	; 3: 139 110 2
x41913:	jmp ax	; 2: 255 224

stdio_test$384:	; FunctionEnd stdio_test

@11774$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x41915:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

@11782$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x41950:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

@11790$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x41990:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

@11798$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x42036:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

@11806$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x42082:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

@11818$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x42135:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

@11826$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x42181:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

@11834$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x42233:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

@11842$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x42285:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

@11850$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x42344:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

@11858$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x42390:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

@11866$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x42442:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

@11874$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x42494:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

@11882$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x42553:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

@11890$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x42587:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

@11898$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x42627:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

@11899$string_Hello2C20World21#:
x42649:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@11903$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x42663:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@11904$float8$123.456#:
x42689:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11905$float8$123.456#:
x42697:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11906$float8$123.456#:
x42705:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11907$float8$123456.1#:
x42713:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@11908$float8$123456.1#:
x42721:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@11910$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x42729:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@11911$float8$123.456#:
x42760:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11912$float8$123.456#:
x42768:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11913$float8$123.456#:
x42776:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11914$float8$123456.1#:
x42784:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@11915$float8$123456.1#:
x42792:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@11917$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x42800:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@11918$float8$123.456#:
x42831:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11919$float8$123.456#:
x42839:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11920$float8$123.456#:
x42847:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11921$float8$123.456#:
x42855:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11922$float8$123.456#:
x42863:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11924$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x42871:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@11925$float8$123.456#:
x42907:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11926$float8$123.456#:
x42915:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11927$float8$123.456#:
x42923:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11928$float8$123.456#:
x42931:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11929$float8$123.456#:
x42939:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11931$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x42947:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@11932$float8$123.456#:
x42988:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11933$float8$123.456#:
x42996:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11934$float8$123.456#:
x43004:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11935$float8$123.456#:
x43012:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11936$float8$123.456#:
x43020:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11938$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43028:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@11939$float8$123.456#:
x43075:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11940$float8$123.456#:
x43083:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11941$float8$123.456#:
x43091:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11942$float8$123.456#:
x43099:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11943$float8$123.456#:
x43107:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11945$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x43115:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@11946$float8$minus123.456#:
x43141:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11947$float8$minus123.456#:
x43149:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11948$float8$minus123.456#:
x43157:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11949$float8$minus0.000000123456#:
x43165:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@11950$float8$minus0.000000123456#:
x43173:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@11952$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x43181:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@11953$float8$minus123.456#:
x43212:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11954$float8$minus123.456#:
x43220:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11955$float8$minus123.456#:
x43228:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11956$float8$minus0.000000123456#:
x43236:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@11957$float8$minus0.000000123456#:
x43244:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@11959$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x43252:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@11960$float8$minus123.456#:
x43283:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11961$float8$minus123.456#:
x43291:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11962$float8$minus123.456#:
x43299:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11963$float8$minus123.456#:
x43307:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11964$float8$minus123.456#:
x43315:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11966$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x43323:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@11967$float8$minus123.456#:
x43359:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11968$float8$minus123.456#:
x43367:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11969$float8$minus123.456#:
x43375:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11970$float8$minus123.456#:
x43383:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11971$float8$minus123.456#:
x43391:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11973$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x43399:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@11974$float8$minus123.456#:
x43440:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11975$float8$minus123.456#:
x43448:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11976$float8$minus123.456#:
x43456:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11977$float8$minus123.456#:
x43464:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11978$float8$minus123.456#:
x43472:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11980$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43480:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@11981$float8$minus123.456#:
x43527:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11982$float8$minus123.456#:
x43535:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11983$float8$minus123.456#:
x43543:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11984$float8$minus123.456#:
x43551:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11985$float8$minus123.456#:
x43559:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11996$string_Please20write20three20integers3A20#:
x43567:	db "Please write three integers: ", 0	; 30: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 114 101 101 32 105 110 116 101 103 101 114 115 58 32 0

@11998$string_1232045620789#:
x43597:	db "123 456 789", 0	; 12: 49 50 51 32 52 53 54 32 55 56 57 0

@11999$string_25i20252Ai2025i2025n#:
x43609:	db "%i %*i %i %n", 0	; 13: 37 105 32 37 42 105 32 37 105 32 37 110 0

@12004$string_3C25i3E203C25i3E203C25i3E0A#:
x43622:	db "<%i> <%i> <%i>", 10, 0	; 16: 60 37 105 62 32 60 37 105 62 32 60 37 105 62 10 0

@12009$string_Please20write20the20patterns205Babc5D3A20#:
x43638:	db "Please write the patterns [abc]: ", 0	; 34: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 97 98 99 93 58 32 0

@12011$string_abcdef#:
x43672:	db "abcdef", 0	; 7: 97 98 99 100 101 102 0

@12012$string_255Babc5D#:
x43679:	db "%[abc]", 0	; 7: 37 91 97 98 99 93 0

@12014$string_3C25s3E0A#:
x43686:	db "<%s>", 10, 0	; 6: 60 37 115 62 10 0

@12016$string_Please20write20the20patterns205B5Eabc5D3A20#:
x43692:	db "Please write the patterns [^abc]: ", 0	; 35: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 94 97 98 99 93 58 32 0

@12018$string_defabc#:
x43727:	db "defabc", 0	; 7: 100 101 102 97 98 99 0

@12019$string_255B5Eabc5D#:
x43734:	db "%[^abc]", 0	; 8: 37 91 94 97 98 99 93 0

@12021$string_3C25s3E0A0A#:
x43742:	db "<%s>", 10, 10, 0	; 7: 60 37 115 62 10 10 0

sscanf:	; address £temporary1577 format
x43749:	mov si, bp	; 2: 137 238
x43751:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1578 £temporary1577

sscanf$2:	; BinaryAdd arg_list £temporary1578 2
x43754:	add si, 2	; 3: 131 198 2
x43757:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x43760:	mov ax, [bp + 6]	; 3: 139 70 6
x43763:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x43766:	mov ax, [bp + 8]	; 3: 139 70 8
x43769:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x43772:	mov ax, [di + 10]	; 3: 139 69 10
x43775:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x43778:	mov word [di + 12], sscanf$8	; 5: 199 69 12 21 171
x43783:	mov [di + 14], bp	; 3: 137 109 14
x43786:	mov [di + 16], di	; 3: 137 125 16
x43789:	add di, 12	; 3: 131 199 12
x43792:	mov bp, di	; 2: 137 253
x43794:	nop	; 1: 144
x43795:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1580

sscanf$10:	; SetReturnValue £temporary1580

sscanf$11:	; Return £temporary1580
x43797:	mov ax, [bp]	; 3: 139 70 0
x43800:	mov di, [bp + 4]	; 3: 139 126 4
x43803:	mov bp, [bp + 2]	; 3: 139 110 2
x43806:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x43808:	mov word [g_inStatus], 1	; 6: 199 6 74 96 1 0

vsscanf$1:	; IntegralToIntegral £temporary1585 inString
x43814:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1585
x43817:	mov [g_inDevice], ax	; 3: 163 76 96

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x43820:	mov ax, [bp + 8]	; 3: 139 70 8
x43823:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x43826:	mov ax, [bp + 10]	; 3: 139 70 10
x43829:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x43832:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 70 171
x43837:	mov [bp + 14], bp	; 3: 137 110 14
x43840:	add bp, 12	; 3: 131 197 12
x43843:	jmp scanFormat	; 3: 233 8 181

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1586

vsscanf$9:	; SetReturnValue £temporary1586

vsscanf$10:	; Return £temporary1586
x43846:	mov ax, [bp]	; 3: 139 70 0
x43849:	mov di, [bp + 4]	; 3: 139 126 4
x43852:	mov bp, [bp + 2]	; 3: 139 110 2
x43855:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

string_test:	; Assign s string_Hello2C20World21#
x43857:	mov word [bp + 8], @9527$string_Hello2C20World21#	; 5: 199 70 8 216 177

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x43862:	mov word [bp + 218], @9536$string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 230 177

string_test$3:	; Parameter 212 s 8
x43868:	mov ax, [bp + 8]	; 3: 139 70 8
x43871:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x43875:	mov ax, [bp + 8]	; 3: 139 70 8
x43878:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x43882:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 123 171
x43888:	mov [bp + 224], bp	; 4: 137 174 224 0
x43892:	add bp, 222	; 4: 129 197 222 0
x43896:	jmp strlen	; 3: 233 144 225

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4331

string_test$9:	; Parameter 212 £temporary4331 10
x43899:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x43903:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 149 171
x43909:	mov [bp + 214], bp	; 4: 137 174 214 0
x43913:	add bp, 212	; 4: 129 197 212 0
x43917:	mov di, bp	; 2: 137 239
x43919:	add di, 4	; 3: 131 199 4
x43922:	jmp printf	; 3: 233 111 97

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x43925:	mov [bp + 218], bp	; 4: 137 174 218 0
x43929:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x43934:	mov ax, [bp + 8]	; 3: 139 70 8
x43937:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x43941:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 182 171
x43947:	mov [bp + 214], bp	; 4: 137 174 214 0
x43951:	add bp, 212	; 4: 129 197 212 0
x43955:	jmp strcpy	; 3: 233 11 179

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x43958:	mov [bp + 218], bp	; 4: 137 174 218 0
x43962:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x43967:	mov ax, [bp + 8]	; 3: 139 70 8
x43970:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x43974:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x43980:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 221 171
x43986:	mov [bp + 214], bp	; 4: 137 174 214 0
x43990:	add bp, 212	; 4: 129 197 212 0
x43994:	jmp strncpy	; 3: 233 37 8

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4335 -> u u 5
x43997:	mov si, bp	; 2: 137 238
x43999:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4335 -> u 0
x44002:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44006:	mov word [bp + 218], @9547$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 249 177

string_test$27:	; Parameter 212 t 8
x44012:	mov [bp + 220], bp	; 4: 137 174 220 0
x44016:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x44021:	mov [bp + 222], bp	; 4: 137 174 222 0
x44025:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x44030:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 20 172
x44036:	mov [bp + 214], bp	; 4: 137 174 214 0
x44040:	add bp, 212	; 4: 129 197 212 0
x44044:	mov di, bp	; 2: 137 239
x44046:	add di, 4	; 3: 131 199 4
x44049:	jmp printf	; 3: 233 240 96

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x44052:	mov [bp + 218], bp	; 4: 137 174 218 0
x44056:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x44061:	mov word [bp + 220], @9549$string_abc#	; 6: 199 134 220 0 13 178

string_test$34:	; Call 212 strcat 0
x44067:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 52 172
x44073:	mov [bp + 214], bp	; 4: 137 174 214 0
x44077:	add bp, 212	; 4: 129 197 212 0
x44081:	jmp strcat	; 3: 233 250 224

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x44084:	mov [bp + 218], bp	; 4: 137 174 218 0
x44088:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x44093:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 78 172
x44099:	mov [bp + 214], bp	; 4: 137 174 214 0
x44103:	add bp, 212	; 4: 129 197 212 0
x44107:	jmp strlen	; 3: 233 189 224

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4338

string_test$41:	; Assign i £temporary4338
x44110:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x44113:	mov [bp + 218], bp	; 4: 137 174 218 0
x44117:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x44122:	mov word [bp + 220], @9552$string_abc#	; 6: 199 134 220 0 17 178

string_test$45:	; Parameter 212 2 10
x44128:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x44134:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 119 172
x44140:	mov [bp + 214], bp	; 4: 137 174 214 0
x44144:	add bp, 212	; 4: 129 197 212 0
x44148:	jmp strncat	; 3: 233 220 7

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4340 i 2
x44151:	mov ax, [bp + 6]	; 3: 139 70 6
x44154:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4342 u £temporary4340
x44157:	mov si, bp	; 2: 137 238
x44159:	add si, 110	; 3: 131 198 110
x44162:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4341 -> £temporary4342 £temporary4342 0

string_test$51:	; Assign £temporary4341 -> £temporary4342 0
x44164:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44167:	mov word [bp + 218], @9563$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 21 178

string_test$54:	; Parameter 212 t 8
x44173:	mov [bp + 220], bp	; 4: 137 174 220 0
x44177:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x44182:	mov [bp + 222], bp	; 4: 137 174 222 0
x44186:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x44191:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 181 172
x44197:	mov [bp + 214], bp	; 4: 137 174 214 0
x44201:	add bp, 212	; 4: 129 197 212 0
x44205:	mov di, bp	; 2: 137 239
x44207:	add di, 4	; 3: 131 199 4
x44210:	jmp printf	; 3: 233 79 96

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x44213:	mov word [bp + 218], @9565$string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 41 178

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x44219:	mov ax, [bp + 8]	; 3: 139 70 8
x44222:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x44226:	mov [bp + 228], bp	; 4: 137 174 228 0
x44230:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x44235:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 220 172
x44241:	mov [bp + 222], bp	; 4: 137 174 222 0
x44245:	add bp, 220	; 4: 129 197 220 0
x44249:	jmp strcmp	; 3: 233 176 176

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4344

string_test$66:	; Parameter 212 £temporary4344 8
x44252:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x44256:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 246 172
x44262:	mov [bp + 214], bp	; 4: 137 174 214 0
x44266:	add bp, 212	; 4: 129 197 212 0
x44270:	mov di, bp	; 2: 137 239
x44272:	add di, 2	; 3: 131 199 2
x44275:	jmp printf	; 3: 233 14 96

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x44278:	mov word [bp + 218], @9568$string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 60 178

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x44284:	mov ax, [bp + 8]	; 3: 139 70 8
x44287:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x44291:	mov [bp + 228], bp	; 4: 137 174 228 0
x44295:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x44300:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x44306:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 35 173
x44312:	mov [bp + 222], bp	; 4: 137 174 222 0
x44316:	add bp, 220	; 4: 129 197 220 0
x44320:	jmp strncmp	; 3: 233 151 7

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4346

string_test$78:	; Parameter 212 £temporary4346 8
x44323:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x44327:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 61 173
x44333:	mov [bp + 214], bp	; 4: 137 174 214 0
x44337:	add bp, 212	; 4: 129 197 212 0
x44341:	mov di, bp	; 2: 137 239
x44343:	add di, 2	; 3: 131 199 2
x44346:	jmp printf	; 3: 233 199 95

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x44349:	mov ax, [bp + 8]	; 3: 139 70 8
x44352:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x44356:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x44362:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 91 173
x44368:	mov [bp + 214], bp	; 4: 137 174 214 0
x44372:	add bp, 212	; 4: 129 197 212 0
x44376:	jmp strchr	; 3: 233 98 116

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4348

string_test$87:	; Assign p £temporary4348
x44379:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x44383:	mov word [bp + 218], @9576$string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 83 178

string_test$90:	; Equal 93 p 0
x44389:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44394:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4354 p s
x44396:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44400:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x44403:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4354 -1
x44405:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4354 8
x44408:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x44412:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 146 173
x44418:	mov [bp + 214], bp	; 4: 137 174 214 0
x44422:	add bp, 212	; 4: 129 197 212 0
x44426:	mov di, bp	; 2: 137 239
x44428:	add di, 2	; 3: 131 199 2
x44431:	jmp printf	; 3: 233 114 95

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x44434:	mov ax, [bp + 8]	; 3: 139 70 8
x44437:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x44441:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x44447:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 176 173
x44453:	mov [bp + 214], bp	; 4: 137 174 214 0
x44457:	add bp, 212	; 4: 129 197 212 0
x44461:	jmp strrchr	; 3: 233 142 7

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4356

string_test$103:	; Assign p £temporary4356
x44464:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x44468:	mov word [bp + 218], @9594$string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 104 178

string_test$106:	; Equal 109 p 0
x44474:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44479:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4362 p s
x44481:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44485:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x44488:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4362 -1
x44490:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4362 8
x44493:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x44497:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 231 173
x44503:	mov [bp + 214], bp	; 4: 137 174 214 0
x44507:	add bp, 212	; 4: 129 197 212 0
x44511:	mov di, bp	; 2: 137 239
x44513:	add di, 2	; 3: 131 199 2
x44516:	jmp printf	; 3: 233 29 95

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x44519:	mov ax, [bp + 8]	; 3: 139 70 8
x44522:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x44526:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x44532:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 5 174
x44538:	mov [bp + 214], bp	; 4: 137 174 214 0
x44542:	add bp, 212	; 4: 129 197 212 0
x44546:	jmp strchr	; 3: 233 184 115

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4364

string_test$119:	; Assign p £temporary4364
x44549:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x44553:	mov word [bp + 218], @9612$string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 126 178

string_test$122:	; Equal 125 p 0
x44559:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44564:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4370 p s
x44566:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44570:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x44573:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4370 -1
x44575:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4370 8
x44578:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x44582:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 60 174
x44588:	mov [bp + 214], bp	; 4: 137 174 214 0
x44592:	add bp, 212	; 4: 129 197 212 0
x44596:	mov di, bp	; 2: 137 239
x44598:	add di, 2	; 3: 131 199 2
x44601:	jmp printf	; 3: 233 200 94

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x44604:	mov ax, [bp + 8]	; 3: 139 70 8
x44607:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x44611:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x44617:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 90 174
x44623:	mov [bp + 214], bp	; 4: 137 174 214 0
x44627:	add bp, 212	; 4: 129 197 212 0
x44631:	jmp strrchr	; 3: 233 228 6

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4372

string_test$135:	; Assign p £temporary4372
x44634:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x44638:	mov word [bp + 218], @9630$string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 147 178

string_test$138:	; Equal 141 p 0
x44644:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44649:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4378 p s
x44651:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44655:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x44658:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4378 -1
x44660:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4378 8
x44663:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x44667:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 145 174
x44673:	mov [bp + 214], bp	; 4: 137 174 214 0
x44677:	add bp, 212	; 4: 129 197 212 0
x44681:	mov di, bp	; 2: 137 239
x44683:	add di, 2	; 3: 131 199 2
x44686:	jmp printf	; 3: 233 115 94

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x44689:	mov ax, [bp + 8]	; 3: 139 70 8
x44692:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x44696:	mov word [bp + 220], @9645$string_Hello2C20World21#	; 6: 199 134 220 0 169 178

string_test$148:	; Parameter 212 20 10
x44702:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x44708:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 181 174
x44714:	mov [bp + 214], bp	; 4: 137 174 214 0
x44718:	add bp, 212	; 4: 129 197 212 0
x44722:	jmp memcpy	; 3: 233 254 227

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x44725:	mov [bp + 218], bp	; 4: 137 174 218 0
x44729:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x44734:	mov word [bp + 220], @9651$string_Hello2C20World21#	; 6: 199 134 220 0 183 178

string_test$154:	; Parameter 212 20 10
x44740:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x44746:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 219 174
x44752:	mov [bp + 214], bp	; 4: 137 174 214 0
x44756:	add bp, 212	; 4: 129 197 212 0
x44760:	jmp memmove	; 3: 233 176 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x44763:	mov [bp + 218], bp	; 4: 137 174 218 0
x44767:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x44772:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x44778:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x44784:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 1 175
x44790:	mov [bp + 214], bp	; 4: 137 174 214 0
x44794:	add bp, 212	; 4: 129 197 212 0
x44798:	jmp memset	; 3: 233 240 6

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4383 -> u u 19
x44801:	mov si, bp	; 2: 137 238
x44803:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4383 -> u 0
x44806:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x44810:	mov word [bp + 218], @9670$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 197 178

string_test$167:	; Parameter 212 s 8
x44816:	mov ax, [bp + 8]	; 3: 139 70 8
x44819:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x44823:	mov [bp + 222], bp	; 4: 137 174 222 0
x44827:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x44832:	mov [bp + 224], bp	; 4: 137 174 224 0
x44836:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x44841:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 63 175
x44847:	mov [bp + 214], bp	; 4: 137 174 214 0
x44851:	add bp, 212	; 4: 129 197 212 0
x44855:	mov di, bp	; 2: 137 239
x44857:	add di, 6	; 3: 131 199 6
x44860:	jmp printf	; 3: 233 197 93

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x44863:	mov ax, [bp + 8]	; 3: 139 70 8
x44866:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x44870:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x44876:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x44882:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 99 175
x44888:	mov [bp + 214], bp	; 4: 137 174 214 0
x44892:	add bp, 212	; 4: 129 197 212 0
x44896:	jmp memchr	; 3: 233 206 6

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4385

string_test$179:	; Assign p £temporary4385
x44899:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44903:	mov word [bp + 218], @9679$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 227 178

string_test$182:	; Equal 185 p 0
x44909:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44914:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4391 p s
x44916:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44920:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x44923:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4391 -1
x44925:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4391 8
x44928:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x44932:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 154 175
x44938:	mov [bp + 214], bp	; 4: 137 174 214 0
x44942:	add bp, 212	; 4: 129 197 212 0
x44946:	mov di, bp	; 2: 137 239
x44948:	add di, 2	; 3: 131 199 2
x44951:	jmp printf	; 3: 233 106 93

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x44954:	mov ax, [bp + 8]	; 3: 139 70 8
x44957:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x44961:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x44967:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x44973:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 190 175
x44979:	mov [bp + 214], bp	; 4: 137 174 214 0
x44983:	add bp, 212	; 4: 129 197 212 0
x44987:	jmp memchr	; 3: 233 115 6

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4393

string_test$196:	; Assign p £temporary4393
x44990:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44994:	mov word [bp + 218], @9701$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 13 179

string_test$199:	; Equal 202 p 0
x45000:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45005:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4399 p s
x45007:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45011:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x45014:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4399 -1
x45016:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4399 8
x45019:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x45023:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 245 175
x45029:	mov [bp + 214], bp	; 4: 137 174 214 0
x45033:	add bp, 212	; 4: 129 197 212 0
x45037:	mov di, bp	; 2: 137 239
x45039:	add di, 2	; 3: 131 199 2
x45042:	jmp printf	; 3: 233 15 93

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_s3A202225s222C20t3A202225s220A# 6
x45045:	mov word [bp + 218], @9716$string_s3A202225s222C20t3A202225s220A#	; 6: 199 134 218 0 55 179

string_test$208:	; Parameter 212 s 8
x45051:	mov ax, [bp + 8]	; 3: 139 70 8
x45054:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$209:	; Parameter 212 t 10
x45058:	mov [bp + 222], bp	; 4: 137 174 222 0
x45062:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$210:	; Call 212 printf 0
x45067:	mov word [bp + 212], string_test$211	; 6: 199 134 212 0 33 176
x45073:	mov [bp + 214], bp	; 4: 137 174 214 0
x45077:	add bp, 212	; 4: 129 197 212 0
x45081:	mov di, bp	; 2: 137 239
x45083:	add di, 4	; 3: 131 199 4
x45086:	jmp printf	; 3: 233 227 92

string_test$211:	; PostCall 212

string_test$212:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$213:	; Parameter 212 string_strcmp28s2C20t29203D2025i0A# 6
x45089:	mov word [bp + 218], @9718$string_strcmp28s2C20t29203D2025i0A#	; 6: 199 134 218 0 73 179

string_test$214:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$215:	; Parameter 212 s 14
x45095:	mov ax, [bp + 8]	; 3: 139 70 8
x45098:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$216:	; Parameter 212 t 16
x45102:	mov [bp + 228], bp	; 4: 137 174 228 0
x45106:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$217:	; Call 212 strcmp 8
x45111:	mov word [bp + 220], string_test$218	; 6: 199 134 220 0 72 176
x45117:	mov [bp + 222], bp	; 4: 137 174 222 0
x45121:	add bp, 220	; 4: 129 197 220 0
x45125:	jmp strcmp	; 3: 233 68 173

string_test$218:	; PostCall 212

string_test$219:	; GetReturnValue £temporary4402

string_test$220:	; Parameter 212 £temporary4402 8
x45128:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$221:	; Call 212 printf 0
x45132:	mov word [bp + 212], string_test$222	; 6: 199 134 212 0 98 176
x45138:	mov [bp + 214], bp	; 4: 137 174 214 0
x45142:	add bp, 212	; 4: 129 197 212 0
x45146:	mov di, bp	; 2: 137 239
x45148:	add di, 2	; 3: 131 199 2
x45151:	jmp printf	; 3: 233 162 92

string_test$222:	; PostCall 212

string_test$223:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$224:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x45154:	mov word [bp + 218], @9721$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 92 179

string_test$225:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$226:	; Parameter 212 s 14
x45160:	mov ax, [bp + 8]	; 3: 139 70 8
x45163:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$227:	; Parameter 212 t 16
x45167:	mov [bp + 228], bp	; 4: 137 174 228 0
x45171:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$228:	; Parameter 212 20 18
x45176:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$229:	; Call 212 memcmp 8
x45182:	mov word [bp + 220], string_test$230	; 6: 199 134 220 0 143 176
x45188:	mov [bp + 222], bp	; 4: 137 174 222 0
x45192:	add bp, 220	; 4: 129 197 220 0
x45196:	jmp memcmp	; 3: 233 245 5

string_test$230:	; PostCall 212

string_test$231:	; GetReturnValue £temporary4404

string_test$232:	; Parameter 212 £temporary4404 8
x45199:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$233:	; Call 212 printf 0
x45203:	mov word [bp + 212], string_test$234	; 6: 199 134 212 0 169 176
x45209:	mov [bp + 214], bp	; 4: 137 174 214 0
x45213:	add bp, 212	; 4: 129 197 212 0
x45217:	mov di, bp	; 2: 137 239
x45219:	add di, 2	; 3: 131 199 2
x45222:	jmp printf	; 3: 233 91 92

string_test$234:	; PostCall 212

string_test$235:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$236:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45225:	mov word [bp + 218], @9728$string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 132 179

string_test$237:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$238:	; Parameter 212 s 14
x45231:	mov ax, [bp + 8]	; 3: 139 70 8
x45234:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$239:	; Parameter 212 string_Hello2C20C# 16
x45238:	mov word [bp + 228], @9729$string_Hello2C20C#	; 6: 199 134 228 0 160 179

string_test$240:	; Call 212 strspn 8
x45244:	mov word [bp + 220], string_test$241	; 6: 199 134 220 0 205 176
x45250:	mov [bp + 222], bp	; 4: 137 174 222 0
x45254:	add bp, 220	; 4: 129 197 220 0
x45258:	jmp strspn	; 3: 233 35 6

string_test$241:	; PostCall 212

string_test$242:	; GetReturnValue £temporary4406

string_test$243:	; Parameter 212 £temporary4406 8
x45261:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$244:	; Call 212 printf 0
x45265:	mov word [bp + 212], string_test$245	; 6: 199 134 212 0 231 176
x45271:	mov [bp + 214], bp	; 4: 137 174 214 0
x45275:	add bp, 212	; 4: 129 197 212 0
x45279:	mov di, bp	; 2: 137 239
x45281:	add di, 2	; 3: 131 199 2
x45284:	jmp printf	; 3: 233 29 92

string_test$245:	; PostCall 212

string_test$246:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$247:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45287:	mov word [bp + 218], @9732$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 169 179

string_test$248:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$249:	; Parameter 212 s 14
x45293:	mov ax, [bp + 8]	; 3: 139 70 8
x45296:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$250:	; Parameter 212 string_Hello2C20C# 16
x45300:	mov word [bp + 228], @9733$string_Hello2C20C#	; 6: 199 134 228 0 198 179

string_test$251:	; Call 212 strcspn 8
x45306:	mov word [bp + 220], string_test$252	; 6: 199 134 220 0 11 177
x45312:	mov [bp + 222], bp	; 4: 137 174 222 0
x45316:	add bp, 220	; 4: 129 197 220 0
x45320:	jmp strcspn	; 3: 233 69 6

string_test$252:	; PostCall 212

string_test$253:	; GetReturnValue £temporary4408

string_test$254:	; Parameter 212 £temporary4408 8
x45323:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$255:	; Call 212 printf 0
x45327:	mov word [bp + 212], string_test$256	; 6: 199 134 212 0 37 177
x45333:	mov [bp + 214], bp	; 4: 137 174 214 0
x45337:	add bp, 212	; 4: 129 197 212 0
x45341:	mov di, bp	; 2: 137 239
x45343:	add di, 2	; 3: 131 199 2
x45346:	jmp printf	; 3: 233 223 91

string_test$256:	; PostCall 212

string_test$257:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$258:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x45349:	mov word [bp + 218], @9736$string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 207 179

string_test$259:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$260:	; Parameter 212 errno 14
x45355:	mov ax, [errno]	; 3: 161 230 10
x45358:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$261:	; Call 212 strerror 8
x45362:	mov word [bp + 220], string_test$262	; 6: 199 134 220 0 67 177
x45368:	mov [bp + 222], bp	; 4: 137 174 222 0
x45372:	add bp, 220	; 4: 129 197 220 0
x45376:	jmp strerror	; 3: 233 219 130

string_test$262:	; PostCall 212

string_test$263:	; GetReturnValue £temporary4410

string_test$264:	; Parameter 212 £temporary4410 8
x45379:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$265:	; Call 212 printf 0
x45383:	mov word [bp + 212], string_test$266	; 6: 199 134 212 0 93 177
x45389:	mov [bp + 214], bp	; 4: 137 174 214 0
x45393:	add bp, 212	; 4: 129 197 212 0
x45397:	mov di, bp	; 2: 137 239
x45399:	add di, 2	; 3: 131 199 2
x45402:	jmp printf	; 3: 233 167 91

string_test$266:	; PostCall 212

string_test$267:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$268:	; Parameter 212 s 6
x45405:	mov ax, [bp + 8]	; 3: 139 70 8
x45408:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$269:	; Parameter 212 string_2C# 8
x45412:	mov word [bp + 220], @9739$string_2C#	; 6: 199 134 220 0 231 179

string_test$270:	; Call 212 strtok 0
x45418:	mov word [bp + 212], string_test$271	; 6: 199 134 212 0 123 177
x45424:	mov [bp + 214], bp	; 4: 137 174 214 0
x45428:	add bp, 212	; 4: 129 197 212 0
x45432:	jmp strtok	; 3: 233 53 6

string_test$271:	; PostCall 212

string_test$272:	; GetReturnValue £temporary4412

string_test$273:	; Assign p £temporary4412
x45435:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$274:	; Equal 288 p 0
x45439:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45444:	je string_test$288	; 2: 116 71

string_test$275:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$276:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x45446:	mov word [bp + 218], @9745$string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 233 179

string_test$277:	; Parameter 212 p 8
x45452:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45456:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$278:	; Call 212 printf 0
x45460:	mov word [bp + 212], string_test$279	; 6: 199 134 212 0 170 177
x45466:	mov [bp + 214], bp	; 4: 137 174 214 0
x45470:	add bp, 212	; 4: 129 197 212 0
x45474:	mov di, bp	; 2: 137 239
x45476:	add di, 2	; 3: 131 199 2
x45479:	jmp printf	; 3: 233 90 91

string_test$279:	; PostCall 212

string_test$280:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$281:	; Parameter 212 0 6
x45482:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$282:	; Parameter 212 string_2C# 8
x45488:	mov word [bp + 220], @9750$string_2C#	; 6: 199 134 220 0 0 180

string_test$283:	; Call 212 strtok 0
x45494:	mov word [bp + 212], string_test$284	; 6: 199 134 212 0 199 177
x45500:	mov [bp + 214], bp	; 4: 137 174 214 0
x45504:	add bp, 212	; 4: 129 197 212 0
x45508:	jmp strtok	; 3: 233 233 5

string_test$284:	; PostCall 212

string_test$285:	; GetReturnValue £temporary4415

string_test$286:	; Assign p £temporary4415
x45511:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$287:	; Goto 274
x45515:	jmp string_test$274	; 2: 235 178

string_test$288:	; Return 0
x45517:	mov ax, [bp]	; 3: 139 70 0
x45520:	mov di, [bp + 4]	; 3: 139 126 4
x45523:	mov bp, [bp + 2]	; 3: 139 110 2
x45526:	jmp ax	; 2: 255 224

string_test$289:	; FunctionEnd string_test

@9527$string_Hello2C20World21#:
x45528:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9536$string_strlen282225s2229203D2025i0A#:
x45542:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

@9547$string_t203D202225s222C20u203D202225s220A#:
x45561:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9549$string_abc#:
x45581:	db "abc", 0	; 4: 97 98 99 0

@9552$string_abc#:
x45585:	db "abc", 0	; 4: 97 98 99 0

@9563$string_t203D202225s222C20u203D202225s220A#:
x45589:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9565$string_strcmp28s2C20u29203D2025i0A#:
x45609:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

@9568$string_strncmp28s2C20u2C20229203D2025i0A#:
x45628:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

@9576$string_strchr28s2C2027l2729203D2025i0A#:
x45651:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9594$string_strrchr28s2C2027l2729203D2025i0A#:
x45672:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9612$string_strchr28s2C2027x2729203D2025i0A#:
x45694:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9630$string_strrchr28s2C2027x2729203D2025i0A#:
x45715:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9645$string_Hello2C20World21#:
x45737:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9651$string_Hello2C20World21#:
x45751:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9670$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x45765:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9679$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45795:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9701$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45837:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9716$string_s3A202225s222C20t3A202225s220A#:
x45879:	db "s: ", 34, "%s", 34, ", t: ", 34, "%s", 34, 10, 0	; 18: 115 58 32 34 37 115 34 44 32 116 58 32 34 37 115 34 10 0

@9718$string_strcmp28s2C20t29203D2025i0A#:
x45897:	db "strcmp(s, t) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 116 41 32 61 32 37 105 10 0

@9721$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x45916:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9728$string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x45956:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9729$string_Hello2C20C#:
x45984:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9732$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x45993:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9733$string_Hello2C20C#:
x46022:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9736$string_strerror28errno29203D202225s220A#:
x46031:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

@9739$string_2C#:
x46055:	db ",", 0	; 2: 44 0

@9745$string_strtok28s2C20222C2229203D202225s220A#:
x46057:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

@9750$string_2C#:
x46080:	db ",", 0	; 2: 44 0

strncpy:	; Assign index 0
x46082:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x46087:	mov ax, [bp + 10]	; 3: 139 70 10
x46090:	cmp [bp + 12], ax	; 3: 57 70 12
x46093:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3728 source index
x46095:	mov si, [bp + 8]	; 3: 139 118 8
x46098:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3727 -> £temporary3728 £temporary3728 0

strncpy$4:	; Equal 12 £temporary3727 -> £temporary3728 0
x46101:	cmp byte [si], 0	; 3: 128 60 0
x46104:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3733 target index
x46106:	mov si, [bp + 6]	; 3: 139 118 6
x46109:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3732 -> £temporary3733 £temporary3733 0

strncpy$7:	; BinaryAdd £temporary3735 source index
x46112:	mov di, [bp + 8]	; 3: 139 126 8
x46115:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3734 -> £temporary3735 £temporary3735 0

strncpy$9:	; Assign £temporary3732 -> £temporary3733 £temporary3734 -> £temporary3735
x46118:	mov al, [di]	; 2: 138 5
x46120:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x46122:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x46125:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x46127:	mov ax, [bp + 10]	; 3: 139 70 10
x46130:	cmp [bp + 12], ax	; 3: 57 70 12
x46133:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3739 target index
x46135:	mov si, [bp + 6]	; 3: 139 118 6
x46138:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3738 -> £temporary3739 £temporary3739 0

strncpy$15:	; Assign £temporary3738 -> £temporary3739 0
x46141:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x46144:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x46147:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x46149:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x46152:	mov ax, [bp]	; 3: 139 70 0
x46155:	mov di, [bp + 4]	; 3: 139 126 4
x46158:	mov bp, [bp + 2]	; 3: 139 110 2
x46161:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x46163:	mov ax, [bp + 6]	; 3: 139 70 6
x46166:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x46169:	mov word [bp + 14], strncat$3	; 5: 199 70 14 103 180
x46174:	mov [bp + 16], bp	; 3: 137 110 16
x46177:	add bp, 14	; 3: 131 197 14
x46180:	jmp strlen	; 3: 233 164 216

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3754

strncat$5:	; Assign targetLength £temporary3754
x46183:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x46186:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3755 size 1
x46191:	mov ax, [bp + 10]	; 3: 139 70 10
x46194:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3755
x46195:	cmp [bp + 12], ax	; 3: 57 70 12
x46198:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3758 source index
x46200:	mov si, [bp + 8]	; 3: 139 118 8
x46203:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3757 -> £temporary3758 £temporary3758 0

strncat$11:	; Equal 20 £temporary3757 -> £temporary3758 0
x46206:	cmp byte [si], 0	; 3: 128 60 0
x46209:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3762 targetLength index
x46211:	mov ax, [bp + 14]	; 3: 139 70 14
x46214:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3764 target £temporary3762
x46217:	mov si, [bp + 6]	; 3: 139 118 6
x46220:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0

strncat$15:	; BinaryAdd £temporary3766 source index
x46222:	mov di, [bp + 8]	; 3: 139 126 8
x46225:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3765 -> £temporary3766 £temporary3766 0

strncat$17:	; Assign £temporary3763 -> £temporary3764 £temporary3765 -> £temporary3766
x46228:	mov al, [di]	; 2: 138 5
x46230:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x46232:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x46235:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3767 targetLength size
x46237:	mov ax, [bp + 14]	; 3: 139 70 14
x46240:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3768 £temporary3767 1
x46243:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3770 target £temporary3768
x46244:	mov si, [bp + 6]	; 3: 139 118 6
x46247:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3769 -> £temporary3770 £temporary3770 0

strncat$24:	; Assign £temporary3769 -> £temporary3770 0
x46249:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x46252:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x46255:	mov ax, [bp]	; 3: 139 70 0
x46258:	mov di, [bp + 4]	; 3: 139 126 4
x46261:	mov bp, [bp + 2]	; 3: 139 110 2
x46264:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x46266:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 26 index size
x46271:	mov ax, [bp + 10]	; 3: 139 70 10
x46274:	cmp [bp + 12], ax	; 3: 57 70 12
x46277:	jge strncmp$26	; 2: 125 105

strncmp$2:	; BinaryAdd £temporary3794 left index
x46279:	mov si, [bp + 6]	; 3: 139 118 6
x46282:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3793 -> £temporary3794 £temporary3794 0

strncmp$4:	; NotEqual 10 £temporary3793 -> £temporary3794 0
x46285:	cmp byte [si], 0	; 3: 128 60 0
x46288:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3797 right index
x46290:	mov si, [bp + 8]	; 3: 139 118 8
x46293:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0

strncmp$7:	; NotEqual 10 £temporary3796 -> £temporary3797 0
x46296:	cmp byte [si], 0	; 3: 128 60 0
x46299:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x46301:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x46304:	mov ax, [bp]	; 3: 139 70 0
x46307:	mov di, [bp + 4]	; 3: 139 126 4
x46310:	mov bp, [bp + 2]	; 3: 139 110 2
x46313:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3801 left index
x46315:	mov si, [bp + 6]	; 3: 139 118 6
x46318:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3800 -> £temporary3801 £temporary3801 0

strncmp$12:	; BinaryAdd £temporary3803 right index
x46321:	mov di, [bp + 8]	; 3: 139 126 8
x46324:	add di, [bp + 12]	; 3: 3 126 12

strncmp$13:	; Deref £temporary3802 -> £temporary3803 £temporary3803 0

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3800 -> £temporary3801 £temporary3802 -> £temporary3803
x46327:	mov al, [di]	; 2: 138 5
x46329:	cmp [si], al	; 2: 56 4
x46331:	jge strncmp$17	; 2: 125 14

strncmp$15:	; SetReturnValue -1
x46333:	mov bx, -1	; 3: 187 255 255

strncmp$16:	; Return -1
x46336:	mov ax, [bp]	; 3: 139 70 0
x46339:	mov di, [bp + 4]	; 3: 139 126 4
x46342:	mov bp, [bp + 2]	; 3: 139 110 2
x46345:	jmp ax	; 2: 255 224

strncmp$17:	; BinaryAdd £temporary3806 left index
x46347:	mov si, [bp + 6]	; 3: 139 118 6
x46350:	add si, [bp + 12]	; 3: 3 118 12

strncmp$18:	; Deref £temporary3805 -> £temporary3806 £temporary3806 0

strncmp$19:	; BinaryAdd £temporary3808 right index
x46353:	mov di, [bp + 8]	; 3: 139 126 8
x46356:	add di, [bp + 12]	; 3: 3 126 12

strncmp$20:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0

strncmp$21:	; SignedLessThanEqual 24 £temporary3805 -> £temporary3806 £temporary3807 -> £temporary3808
x46359:	mov al, [di]	; 2: 138 5
x46361:	cmp [si], al	; 2: 56 4
x46363:	jle strncmp$24	; 2: 126 14

strncmp$22:	; SetReturnValue 1
x46365:	mov bx, 1	; 3: 187 1 0

strncmp$23:	; Return 1
x46368:	mov ax, [bp]	; 3: 139 70 0
x46371:	mov di, [bp + 4]	; 3: 139 126 4
x46374:	mov bp, [bp + 2]	; 3: 139 110 2
x46377:	jmp ax	; 2: 255 224

strncmp$24:	; Increment index
x46379:	inc word [bp + 12]	; 3: 255 70 12

strncmp$25:	; Goto 1
x46382:	jmp strncmp$1	; 2: 235 143

strncmp$26:	; SetReturnValue 0
x46384:	mov bx, 0	; 3: 187 0 0

strncmp$27:	; Return 0
x46387:	mov ax, [bp]	; 3: 139 70 0
x46390:	mov di, [bp + 4]	; 3: 139 126 4
x46393:	mov bp, [bp + 2]	; 3: 139 110 2
x46396:	jmp ax	; 2: 255 224

strncmp$28:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x46398:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary3821 i
x46403:	mov ax, [bp + 8]	; 3: 139 70 8
x46406:	cmp ax, 0	; 3: 131 248 0
x46409:	jge strrchr$2	; 2: 125 4
x46411:	neg ax	; 2: 247 216
x46413:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary3821
x46415:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x46418:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary3823 text index
x46423:	mov si, [bp + 6]	; 3: 139 118 6
x46426:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary3822 -> £temporary3823 £temporary3823 0

strrchr$6:	; Equal 16 £temporary3822 -> £temporary3823 0
x46429:	cmp byte [si], 0	; 3: 128 60 0
x46432:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary3827 text index
x46434:	mov si, [bp + 6]	; 3: 139 118 6
x46437:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary3826 -> £temporary3827 £temporary3827 0

strrchr$9:	; NotEqual 14 £temporary3826 -> £temporary3827 c
x46440:	mov al, [bp + 14]	; 3: 138 70 14
x46443:	cmp [si], al	; 2: 56 4
x46445:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary3830 text index
x46447:	mov si, [bp + 6]	; 3: 139 118 6
x46450:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary3829 -> £temporary3830 £temporary3830 0

strrchr$12:	; address £temporary3831 £temporary3829 -> £temporary3830

strrchr$13:	; Assign result £temporary3831
x46453:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x46456:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x46459:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x46461:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x46464:	mov ax, [bp]	; 3: 139 70 0
x46467:	mov di, [bp + 4]	; 3: 139 126 4
x46470:	mov bp, [bp + 2]	; 3: 139 110 2
x46473:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary3957 target
x46475:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary3957
x46478:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary3958 source
x46481:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary3958
x46484:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x46487:	mov ax, [bp + 6]	; 3: 139 70 6
x46490:	cmp [bp + 8], ax	; 3: 57 70 8
x46493:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x46495:	mov ax, [bp + 10]	; 3: 139 70 10
x46498:	dec ax	; 1: 72
x46499:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x46502:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x46506:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary3964 charTarget index
x46508:	mov si, [bp + 12]	; 3: 139 118 12
x46511:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary3963 -> £temporary3964 £temporary3964 0

memmove$9:	; BinaryAdd £temporary3966 charSource index
x46514:	mov di, [bp + 14]	; 3: 139 126 14
x46517:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary3965 -> £temporary3966 £temporary3966 0

memmove$11:	; Assign £temporary3963 -> £temporary3964 £temporary3965 -> £temporary3966
x46520:	mov al, [di]	; 2: 138 5
x46522:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x46524:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x46527:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x46529:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x46534:	mov ax, [bp + 10]	; 3: 139 70 10
x46537:	cmp [bp + 16], ax	; 3: 57 70 16
x46540:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary3970 charTarget index
x46542:	mov si, [bp + 12]	; 3: 139 118 12
x46545:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary3969 -> £temporary3970 £temporary3970 0

memmove$18:	; BinaryAdd £temporary3972 charSource index
x46548:	mov di, [bp + 14]	; 3: 139 126 14
x46551:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary3971 -> £temporary3972 £temporary3972 0

memmove$20:	; Assign £temporary3969 -> £temporary3970 £temporary3971 -> £temporary3972
x46554:	mov al, [di]	; 2: 138 5
x46556:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x46558:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x46561:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary3973 target
x46563:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary3973

memmove$25:	; Return £temporary3973
x46566:	mov ax, [bp]	; 3: 139 70 0
x46569:	mov di, [bp + 4]	; 3: 139 126 4
x46572:	mov bp, [bp + 2]	; 3: 139 110 2
x46575:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary3999 block
x46577:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary3999
x46580:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary4000 i
x46583:	mov ax, [bp + 8]	; 3: 139 70 8
x46586:	cmp ax, 0	; 3: 131 248 0
x46589:	jge memset$3	; 2: 125 4
x46591:	neg ax	; 2: 247 216
x46593:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary4000
x46595:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x46598:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x46603:	mov ax, [bp + 10]	; 3: 139 70 10
x46606:	cmp [bp + 15], ax	; 3: 57 70 15
x46609:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary4004 charBlock index
x46611:	mov si, [bp + 12]	; 3: 139 118 12
x46614:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary4003 -> £temporary4004 £temporary4004 0

memset$8:	; Assign £temporary4003 -> £temporary4004 c
x46617:	mov al, [bp + 14]	; 3: 138 70 14
x46620:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x46622:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x46625:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x46627:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x46630:	mov ax, [bp]	; 3: 139 70 0
x46633:	mov di, [bp + 4]	; 3: 139 126 4
x46636:	mov bp, [bp + 2]	; 3: 139 110 2
x46639:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary3988 block
x46641:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary3988
x46644:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary3989 i
x46647:	mov ax, [bp + 8]	; 3: 139 70 8
x46650:	cmp ax, 0	; 3: 131 248 0
x46653:	jge memchr$3	; 2: 125 4
x46655:	neg ax	; 2: 247 216
x46657:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary3989
x46659:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x46662:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x46667:	mov ax, [bp + 10]	; 3: 139 70 10
x46670:	cmp [bp + 12], ax	; 3: 57 70 12
x46673:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary3993 charBlock index
x46675:	mov si, [bp + 14]	; 3: 139 118 14
x46678:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary3992 -> £temporary3993 £temporary3993 0

memchr$8:	; NotEqual 15 £temporary3992 -> £temporary3993 c
x46681:	mov al, [bp + 16]	; 3: 138 70 16
x46684:	cmp [si], al	; 2: 56 4
x46686:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary3996 charBlock index
x46688:	mov bx, [bp + 14]	; 3: 139 94 14
x46691:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary3995 -> £temporary3996 £temporary3996 0

memchr$11:	; address £temporary3997 £temporary3995 -> £temporary3996

memchr$12:	; IntegralToIntegral £temporary3998 £temporary3997

memchr$13:	; SetReturnValue £temporary3998

memchr$14:	; Return £temporary3998
x46694:	mov ax, [bp]	; 3: 139 70 0
x46697:	mov di, [bp + 4]	; 3: 139 126 4
x46700:	mov bp, [bp + 2]	; 3: 139 110 2
x46703:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x46705:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x46708:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x46710:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x46713:	mov ax, [bp]	; 3: 139 70 0
x46716:	mov di, [bp + 4]	; 3: 139 126 4
x46719:	mov bp, [bp + 2]	; 3: 139 110 2
x46722:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary3974 left
x46724:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary3974
x46727:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary3975 right
x46730:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary3975
x46733:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x46736:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x46741:	mov ax, [bp + 10]	; 3: 139 70 10
x46744:	cmp [bp + 16], ax	; 3: 57 70 16
x46747:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary3979 charLeft index
x46749:	mov si, [bp + 12]	; 3: 139 118 12
x46752:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary3978 -> £temporary3979 £temporary3979 0

memcmp$8:	; BinaryAdd £temporary3981 charRight index
x46755:	mov di, [bp + 14]	; 3: 139 126 14
x46758:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary3980 -> £temporary3981 £temporary3981 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3978 -> £temporary3979 £temporary3980 -> £temporary3981
x46761:	mov al, [di]	; 2: 138 5
x46763:	cmp [si], al	; 2: 56 4
x46765:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x46767:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x46770:	mov ax, [bp]	; 3: 139 70 0
x46773:	mov di, [bp + 4]	; 3: 139 126 4
x46776:	mov bp, [bp + 2]	; 3: 139 110 2
x46779:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary3984 charLeft index
x46781:	mov si, [bp + 12]	; 3: 139 118 12
x46784:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary3983 -> £temporary3984 £temporary3984 0

memcmp$15:	; BinaryAdd £temporary3986 charRight index
x46787:	mov di, [bp + 14]	; 3: 139 126 14
x46790:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary3985 -> £temporary3986 £temporary3986 0

memcmp$17:	; SignedLessThanEqual 20 £temporary3983 -> £temporary3984 £temporary3985 -> £temporary3986
x46793:	mov al, [di]	; 2: 138 5
x46795:	cmp [si], al	; 2: 56 4
x46797:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x46799:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x46802:	mov ax, [bp]	; 3: 139 70 0
x46805:	mov di, [bp + 4]	; 3: 139 126 4
x46808:	mov bp, [bp + 2]	; 3: 139 110 2
x46811:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x46813:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x46816:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x46818:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x46821:	mov ax, [bp]	; 3: 139 70 0
x46824:	mov di, [bp + 4]	; 3: 139 126 4
x46827:	mov bp, [bp + 2]	; 3: 139 110 2
x46830:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x46832:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary3833 mainString index
x46837:	mov si, [bp + 6]	; 3: 139 118 6
x46840:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary3832 -> £temporary3833 £temporary3833 0

strspn$3:	; Equal 18 £temporary3832 -> £temporary3833 0
x46843:	cmp byte [si], 0	; 3: 128 60 0
x46846:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x46848:	mov ax, [bp + 8]	; 3: 139 70 8
x46851:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary3837 mainString index
x46854:	mov si, [bp + 6]	; 3: 139 118 6
x46857:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary3836 -> £temporary3837 £temporary3837 0

strspn$8:	; IntegralToIntegral £temporary3838 £temporary3836 -> £temporary3837
x46860:	mov al, [si]	; 2: 138 4
x46862:	and ax, 255	; 3: 37 255 0
x46865:	cmp al, 0	; 2: 60 0
x46867:	jge strspn$9	; 2: 125 4
x46869:	neg al	; 2: 246 216
x46871:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary3838 8
x46873:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x46876:	mov word [bp + 12], strspn$11	; 5: 199 70 12 42 183
x46881:	mov [bp + 14], bp	; 3: 137 110 14
x46884:	add bp, 12	; 3: 131 197 12
x46887:	jmp strchr	; 3: 233 147 106

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary3839

strspn$13:	; NotEqual 16 £temporary3839 0
x46890:	cmp bx, 0	; 3: 131 251 0
x46893:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x46895:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x46898:	mov ax, [bp]	; 3: 139 70 0
x46901:	mov di, [bp + 4]	; 3: 139 126 4
x46904:	mov bp, [bp + 2]	; 3: 139 110 2
x46907:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x46909:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x46912:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x46914:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x46917:	mov ax, [bp]	; 3: 139 70 0
x46920:	mov di, [bp + 4]	; 3: 139 126 4
x46923:	mov bp, [bp + 2]	; 3: 139 110 2
x46926:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x46928:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary3844 mainString index
x46933:	mov si, [bp + 6]	; 3: 139 118 6
x46936:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary3843 -> £temporary3844 £temporary3844 0

strcspn$3:	; Equal 18 £temporary3843 -> £temporary3844 0
x46939:	cmp byte [si], 0	; 3: 128 60 0
x46942:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x46944:	mov ax, [bp + 8]	; 3: 139 70 8
x46947:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary3848 mainString index
x46950:	mov si, [bp + 6]	; 3: 139 118 6
x46953:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary3847 -> £temporary3848 £temporary3848 0

strcspn$8:	; IntegralToIntegral £temporary3849 £temporary3847 -> £temporary3848
x46956:	mov al, [si]	; 2: 138 4
x46958:	and ax, 255	; 3: 37 255 0
x46961:	cmp al, 0	; 2: 60 0
x46963:	jge strcspn$9	; 2: 125 4
x46965:	neg al	; 2: 246 216
x46967:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary3849 8
x46969:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x46972:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 138 183
x46977:	mov [bp + 14], bp	; 3: 137 110 14
x46980:	add bp, 12	; 3: 131 197 12
x46983:	jmp strchr	; 3: 233 51 106

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary3850

strcspn$13:	; Equal 16 £temporary3850 0
x46986:	cmp bx, 0	; 3: 131 251 0
x46989:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x46991:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x46994:	mov ax, [bp]	; 3: 139 70 0
x46997:	mov di, [bp + 4]	; 3: 139 126 4
x47000:	mov bp, [bp + 2]	; 3: 139 110 2
x47003:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x47005:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x47008:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x47010:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x47013:	mov ax, [bp]	; 3: 139 70 0
x47016:	mov di, [bp + 4]	; 3: 139 126 4
x47019:	mov bp, [bp + 2]	; 3: 139 110 2
x47022:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x47024:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x47028:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary3903 -> string string 0
x47032:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary3903 -> string 0
x47035:	cmp byte [si], 0	; 3: 128 60 0
x47038:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x47040:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x47043:	mov ax, [bp]	; 3: 139 70 0
x47046:	mov di, [bp + 4]	; 3: 139 126 4
x47049:	mov bp, [bp + 2]	; 3: 139 110 2
x47052:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x47054:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary3906 string index
x47059:	mov si, [bp + 6]	; 3: 139 118 6
x47062:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary3905 -> £temporary3906 £temporary3906 0

strtok$8:	; Equal 31 £temporary3905 -> £temporary3906 0
x47065:	cmp byte [si], 0	; 3: 128 60 0
x47068:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x47070:	mov ax, [bp + 8]	; 3: 139 70 8
x47073:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary3910 string index
x47076:	mov si, [bp + 6]	; 3: 139 118 6
x47079:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary3909 -> £temporary3910 £temporary3910 0

strtok$13:	; IntegralToIntegral £temporary3911 £temporary3909 -> £temporary3910
x47082:	mov al, [si]	; 2: 138 4
x47084:	and ax, 255	; 3: 37 255 0
x47087:	cmp al, 0	; 2: 60 0
x47089:	jge strtok$14	; 2: 125 4
x47091:	neg al	; 2: 246 216
x47093:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary3911 8
x47095:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x47098:	mov word [bp + 14], strtok$16	; 5: 199 70 14 8 184
x47103:	mov [bp + 16], bp	; 3: 137 110 16
x47106:	add bp, 14	; 3: 131 197 14
x47109:	jmp strchr	; 3: 233 181 105

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary3912

strtok$18:	; Equal 29 £temporary3912 0
x47112:	cmp bx, 0	; 3: 131 251 0
x47115:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary3915 string index
x47117:	mov si, [bp + 6]	; 3: 139 118 6
x47120:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0

strtok$21:	; Assign £temporary3914 -> £temporary3915 0
x47123:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary3916 index 1
x47126:	mov ax, [bp + 10]	; 3: 139 70 10
x47129:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary3918 string £temporary3916
x47130:	mov si, [bp + 6]	; 3: 139 118 6
x47133:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary3917 -> £temporary3918 £temporary3918 0

strtok$25:	; address £temporary3919 £temporary3917 -> £temporary3918

strtok$26:	; Assign token £temporary3919
x47135:	mov [token], si	; 4: 137 54 11 185

strtok$27:	; SetReturnValue string
x47139:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x47142:	mov ax, [bp]	; 3: 139 70 0
x47145:	mov di, [bp + 4]	; 3: 139 126 4
x47148:	mov bp, [bp + 2]	; 3: 139 110 2
x47151:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x47153:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x47156:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary3921 string index
x47158:	mov si, [bp + 6]	; 3: 139 118 6
x47161:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary3920 -> £temporary3921 £temporary3921 0

strtok$33:	; address £temporary3922 £temporary3920 -> £temporary3921

strtok$34:	; Assign token £temporary3922
x47164:	mov [token], si	; 4: 137 54 11 185

strtok$35:	; SetReturnValue string
x47168:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x47171:	mov ax, [bp]	; 3: 139 70 0
x47174:	mov di, [bp + 4]	; 3: 139 126 4
x47177:	mov bp, [bp + 2]	; 3: 139 110 2
x47180:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x47182:	cmp word [token], 0	; 5: 131 62 11 185 0
x47187:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x47189:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x47192:	mov ax, [bp]	; 3: 139 70 0
x47195:	mov di, [bp + 4]	; 3: 139 126 4
x47198:	mov bp, [bp + 2]	; 3: 139 110 2
x47201:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (token,0) 0
x47203:	mov si, [token]	; 4: 139 54 11 185
x47207:	cmp byte [si], 0	; 3: 128 60 0
x47210:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x47212:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x47215:	mov ax, [bp]	; 3: 139 70 0
x47218:	mov di, [bp + 4]	; 3: 139 126 4
x47221:	mov bp, [bp + 2]	; 3: 139 110 2
x47224:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x47226:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary3927 token index
x47231:	mov si, [token]	; 4: 139 54 11 185
x47235:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary3926 -> £temporary3927 £temporary3927 0

strtok$46:	; Equal 70 £temporary3926 -> £temporary3927 0
x47238:	cmp byte [si], 0	; 3: 128 60 0
x47241:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x47243:	mov ax, [bp + 8]	; 3: 139 70 8
x47246:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary3931 token index
x47249:	mov si, [token]	; 4: 139 54 11 185
x47253:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary3930 -> £temporary3931 £temporary3931 0

strtok$51:	; IntegralToIntegral £temporary3932 £temporary3930 -> £temporary3931
x47256:	mov al, [si]	; 2: 138 4
x47258:	and ax, 255	; 3: 37 255 0
x47261:	cmp al, 0	; 2: 60 0
x47263:	jge strtok$52	; 2: 125 4
x47265:	neg al	; 2: 246 216
x47267:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary3932 8
x47269:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x47272:	mov word [bp + 14], strtok$54	; 5: 199 70 14 182 184
x47277:	mov [bp + 16], bp	; 3: 137 110 16
x47280:	add bp, 14	; 3: 131 197 14
x47283:	jmp strchr	; 3: 233 7 105

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary3933

strtok$56:	; Equal 68 £temporary3933 0
x47286:	cmp bx, 0	; 3: 131 251 0
x47289:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x47291:	mov ax, [token]	; 3: 161 11 185
x47294:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary3936 token index
x47297:	mov si, [token]	; 4: 139 54 11 185
x47301:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary3935 -> £temporary3936 £temporary3936 0

strtok$60:	; Assign £temporary3935 -> £temporary3936 0
x47304:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary3937 index 1
x47307:	mov ax, [bp + 10]	; 3: 139 70 10
x47310:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary3939 token £temporary3937
x47311:	mov si, [token]	; 4: 139 54 11 185
x47315:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary3938 -> £temporary3939 £temporary3939 0

strtok$64:	; address £temporary3940 £temporary3938 -> £temporary3939

strtok$65:	; Assign token £temporary3940
x47317:	mov [token], si	; 4: 137 54 11 185

strtok$66:	; SetReturnValue tokenStart2
x47321:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x47324:	mov ax, [bp]	; 3: 139 70 0
x47327:	mov di, [bp + 4]	; 3: 139 126 4
x47330:	mov bp, [bp + 2]	; 3: 139 110 2
x47333:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x47335:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x47338:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x47340:	mov ax, [token]	; 3: 161 11 185
x47343:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary3942 token index
x47346:	mov si, [token]	; 4: 139 54 11 185
x47350:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary3941 -> £temporary3942 £temporary3942 0

strtok$73:	; address £temporary3943 £temporary3941 -> £temporary3942

strtok$74:	; Assign token £temporary3943
x47353:	mov [token], si	; 4: 137 54 11 185

strtok$75:	; SetReturnValue tokenStart
x47357:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x47360:	mov ax, [bp]	; 3: 139 70 0
x47363:	mov di, [bp + 4]	; 3: 139 126 4
x47366:	mov bp, [bp + 2]	; 3: 139 110 2
x47369:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

token:
x47371:	dw 0	; 2: 0 0

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x47373:	mov word [bp + 14], @12691$string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 217 189

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x47378:	mov word [bp + 22], @12692$string_1232E456#	; 5: 199 70 22 239 189

stdlib_test$4:	; Call 8 atof 8
x47383:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 37 185
x47388:	mov [bp + 18], bp	; 3: 137 110 18
x47391:	add bp, 16	; 3: 131 197 16
x47394:	jmp atof	; 3: 233 161 6

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6035

stdlib_test$7:	; Parameter 8 £temporary6035 8
x47397:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x47400:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 59 185
x47405:	mov [bp + 10], bp	; 3: 137 110 10
x47408:	add bp, 8	; 3: 131 197 8
x47411:	mov di, bp	; 2: 137 239
x47413:	add di, 8	; 3: 131 199 8
x47416:	jmp printf	; 3: 233 201 83

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x47419:	mov word [bp + 14], @12695$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 247 189

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x47424:	mov word [bp + 22], @12696$string_1232E456789abc#	; 5: 199 70 22 31 190

stdlib_test$14:	; address £temporary6037 p
x47429:	mov si, bp	; 2: 137 238
x47431:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6037 16
x47434:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x47437:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 91 185
x47442:	mov [bp + 18], bp	; 3: 137 110 18
x47445:	add bp, 16	; 3: 131 197 16
x47448:	jmp strtod	; 3: 233 143 6

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6038

stdlib_test$19:	; Parameter 8 £temporary6038 8
x47451:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x47454:	mov ax, [bp + 6]	; 3: 139 70 6
x47457:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x47460:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 119 185
x47465:	mov [bp + 10], bp	; 3: 137 110 10
x47468:	add bp, 8	; 3: 131 197 8
x47471:	mov di, bp	; 2: 137 239
x47473:	add di, 10	; 3: 131 199 10
x47476:	jmp printf	; 3: 233 141 83

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x47479:	mov word [bp + 12], @12700$string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 45 190

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x47484:	mov word [bp + 20], @12701$string_path#	; 5: 199 70 20 67 190

stdlib_test$27:	; Call 6 getenv 8
x47489:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 143 185
x47494:	mov [bp + 16], bp	; 3: 137 110 16
x47497:	add bp, 14	; 3: 131 197 14
x47500:	jmp getenv	; 3: 233 184 6

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6040

stdlib_test$30:	; Parameter 6 £temporary6040 8
x47503:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x47506:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 165 185
x47511:	mov [bp + 8], bp	; 3: 137 110 8
x47514:	add bp, 6	; 3: 131 197 6
x47517:	mov di, bp	; 2: 137 239
x47519:	add di, 2	; 3: 131 199 2
x47522:	jmp printf	; 3: 233 95 83

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x47525:	mov word [bp + 12], @12704$string_system2822dir22290A#	; 5: 199 70 12 72 190

stdlib_test$35:	; Call 6 printf 0
x47530:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 186 185
x47535:	mov [bp + 8], bp	; 3: 137 110 8
x47538:	add bp, 6	; 3: 131 197 6
x47541:	mov di, bp	; 2: 137 239
x47543:	jmp printf	; 3: 233 74 83

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x47546:	mov word [bp + 12], @12706$string_dir#	; 5: 199 70 12 87 190

stdlib_test$39:	; Call 6 system 0
x47551:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 205 185
x47556:	mov [bp + 8], bp	; 3: 137 110 8
x47559:	add bp, 6	; 3: 131 197 6
x47562:	jmp system	; 3: 233 136 6

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x47565:	mov word [bp + 12], @12708$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 91 190

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x47570:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x47575:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 229 185
x47580:	mov [bp + 16], bp	; 3: 137 110 16
x47583:	add bp, 14	; 3: 131 197 14
x47586:	jmp _abs	; 3: 233 126 6

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6044

stdlib_test$48:	; Parameter 6 £temporary6044 8
x47589:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x47592:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x47597:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 251 185
x47602:	mov [bp + 18], bp	; 3: 137 110 18
x47605:	add bp, 16	; 3: 131 197 16
x47608:	jmp _abs	; 3: 233 104 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6045

stdlib_test$54:	; Parameter 6 £temporary6045 10
x47611:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x47614:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 17 186
x47619:	mov [bp + 8], bp	; 3: 137 110 8
x47622:	add bp, 6	; 3: 131 197 6
x47625:	mov di, bp	; 2: 137 239
x47627:	add di, 4	; 3: 131 199 4
x47630:	jmp printf	; 3: 233 243 82

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x47633:	mov word [bp + 12], @12716$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 119 190

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x47638:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x47646:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 44 186
x47651:	mov [bp + 16], bp	; 3: 137 110 16
x47654:	add bp, 14	; 3: 131 197 14
x47657:	jmp labs	; 3: 233 37 97

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6047

stdlib_test$64:	; Parameter 6 £temporary6047 8
x47660:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x47664:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x47672:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 70 186
x47677:	mov [bp + 20], bp	; 3: 137 110 20
x47680:	add bp, 18	; 3: 131 197 18
x47683:	jmp labs	; 3: 233 11 97

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6048

stdlib_test$70:	; Parameter 6 £temporary6048 12
x47686:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x47690:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 93 186
x47695:	mov [bp + 8], bp	; 3: 137 110 8
x47698:	add bp, 6	; 3: 131 197 6
x47701:	mov di, bp	; 2: 137 239
x47703:	add di, 8	; 3: 131 199 8
x47706:	jmp printf	; 3: 233 167 82

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x47709:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x47714:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x47719:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 117 186
x47724:	mov [bp + 8], bp	; 3: 137 110 8
x47727:	add bp, 6	; 3: 131 197 6
x47730:	jmp div	; 3: 233 9 6

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6050 -> £temporary6051

stdlib_test$79:	; Assign i £temporary6050 -> £temporary6051
x47733:	mov si, bp	; 2: 137 238
x47735:	add si, 6	; 3: 131 198 6
x47738:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x47740:	mov ah, [bx]	; 2: 138 39
x47742:	mov [si], ah	; 2: 136 36
x47744:	inc bx	; 1: 67
x47745:	inc si	; 1: 70
x47746:	dec al	; 2: 254 200
x47748:	cmp al, 0	; 2: 60 0
x47750:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x47752:	mov word [bp + 16], @12731$string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 153 190

stdlib_test$82:	; Parameter 10 i$quot 8
x47757:	mov ax, [bp + 6]	; 3: 139 70 6
x47760:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x47763:	mov ax, [bp + 8]	; 3: 139 70 8
x47766:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x47769:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 172 186
x47774:	mov [bp + 12], bp	; 3: 137 110 12
x47777:	add bp, 10	; 3: 131 197 10
x47780:	mov di, bp	; 2: 137 239
x47782:	add di, 4	; 3: 131 199 4
x47785:	jmp printf	; 3: 233 88 82

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x47788:	mov si, bp	; 2: 137 238
x47790:	add si, 6	; 3: 131 198 6
x47793:	mov di, bp	; 2: 137 239
x47795:	add di, 16	; 3: 131 199 16
x47798:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x47800:	mov ah, [si]	; 2: 138 36
x47802:	mov [di], ah	; 2: 136 37
x47804:	inc si	; 1: 70
x47805:	inc di	; 1: 71
x47806:	dec al	; 2: 254 200
x47808:	cmp al, 0	; 2: 60 0
x47810:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x47812:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 210 186
x47817:	mov [bp + 12], bp	; 3: 137 110 12
x47820:	add bp, 10	; 3: 131 197 10
x47823:	jmp print_div	; 3: 233 248 5

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6055 -> £temporary6056

stdlib_test$92:	; Assign j £temporary6055 -> £temporary6056
x47826:	mov si, bp	; 2: 137 238
x47828:	add si, 10	; 3: 131 198 10
x47831:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x47833:	mov ah, [bx]	; 2: 138 39
x47835:	mov [si], ah	; 2: 136 36
x47837:	inc bx	; 1: 67
x47838:	inc si	; 1: 70
x47839:	dec al	; 2: 254 200
x47841:	cmp al, 0	; 2: 60 0
x47843:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x47845:	mov word [bp + 20], @12738$string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 178 190

stdlib_test$95:	; Parameter 14 j$quot 8
x47850:	mov ax, [bp + 10]	; 3: 139 70 10
x47853:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x47856:	mov ax, [bp + 12]	; 3: 139 70 12
x47859:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x47862:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 9 187
x47867:	mov [bp + 16], bp	; 3: 137 110 16
x47870:	add bp, 14	; 3: 131 197 14
x47873:	mov di, bp	; 2: 137 239
x47875:	add di, 4	; 3: 131 199 4
x47878:	jmp printf	; 3: 233 251 81

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x47881:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x47889:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x47897:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 39 187
x47902:	mov [bp + 8], bp	; 3: 137 110 8
x47905:	add bp, 6	; 3: 131 197 6
x47908:	jmp ldiv	; 3: 233 243 5

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6060 -> £temporary6061

stdlib_test$105:	; Assign li £temporary6060 -> £temporary6061
x47911:	mov si, bp	; 2: 137 238
x47913:	add si, 6	; 3: 131 198 6
x47916:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x47918:	mov ah, [bx]	; 2: 138 39
x47920:	mov [si], ah	; 2: 136 36
x47922:	inc bx	; 1: 67
x47923:	inc si	; 1: 70
x47924:	dec al	; 2: 254 200
x47926:	cmp al, 0	; 2: 60 0
x47928:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x47930:	mov word [bp + 20], @12749$string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 204 190

stdlib_test$108:	; Parameter 14 li$quot 8
x47935:	mov eax, [bp + 6]	; 4: 102 139 70 6
x47939:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x47943:	mov eax, [bp + 10]	; 4: 102 139 70 10
x47947:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x47951:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 98 187
x47956:	mov [bp + 16], bp	; 3: 137 110 16
x47959:	add bp, 14	; 3: 131 197 14
x47962:	mov di, bp	; 2: 137 239
x47964:	add di, 8	; 3: 131 199 8
x47967:	jmp printf	; 3: 233 162 81

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x47970:	mov si, bp	; 2: 137 238
x47972:	add si, 6	; 3: 131 198 6
x47975:	mov di, bp	; 2: 137 239
x47977:	add di, 20	; 3: 131 199 20
x47980:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x47982:	mov ah, [si]	; 2: 138 36
x47984:	mov [di], ah	; 2: 136 37
x47986:	inc si	; 1: 70
x47987:	inc di	; 1: 71
x47988:	dec al	; 2: 254 200
x47990:	cmp al, 0	; 2: 60 0
x47992:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x47994:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 136 187
x47999:	mov [bp + 16], bp	; 3: 137 110 16
x48002:	add bp, 14	; 3: 131 197 14
x48005:	jmp print_ldiv	; 3: 233 237 5

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6065 -> £temporary6066

stdlib_test$118:	; Assign lj £temporary6065 -> £temporary6066
x48008:	mov si, bp	; 2: 137 238
x48010:	add si, 14	; 3: 131 198 14
x48013:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x48015:	mov ah, [bx]	; 2: 138 39
x48017:	mov [si], ah	; 2: 136 36
x48019:	inc bx	; 1: 67
x48020:	inc si	; 1: 70
x48021:	dec al	; 2: 254 200
x48023:	cmp al, 0	; 2: 60 0
x48025:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x48027:	mov word [bp + 28], @12756$string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 232 190

stdlib_test$121:	; Parameter 22 lj$quot 8
x48032:	mov eax, [bp + 14]	; 4: 102 139 70 14
x48036:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x48040:	mov eax, [bp + 18]	; 4: 102 139 70 18
x48044:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x48048:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 195 187
x48053:	mov [bp + 24], bp	; 3: 137 110 24
x48056:	add bp, 22	; 3: 131 197 22
x48059:	mov di, bp	; 2: 137 239
x48061:	add di, 8	; 3: 131 199 8
x48064:	jmp printf	; 3: 233 65 81

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x48067:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x48072:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x48077:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x48082:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x48087:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x48092:	mov word [bp + 24], @12781$string_0AA20List2013A20#	; 5: 199 70 24 5 191

stdlib_test$132:	; Call 18 printf 0
x48097:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 241 187
x48102:	mov [bp + 20], bp	; 3: 137 110 20
x48105:	add bp, 18	; 3: 131 197 18
x48108:	mov di, bp	; 2: 137 239
x48110:	jmp printf	; 3: 233 19 81

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x48113:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x48118:	mov ax, [bp + 14]	; 3: 139 70 14
x48121:	cmp [bp + 16], ax	; 3: 57 70 16
x48124:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x48126:	mov word [bp + 24], @12788$string_25i20#	; 5: 199 70 24 17 191

stdlib_test$138:	; UnsignedMultiply £temporary6078 index 2
x48131:	mov ax, [bp + 16]	; 3: 139 70 16
x48134:	xor dx, dx	; 2: 49 210
x48136:	mul word [@12790$int2$2#]	; 4: 247 38 21 191

stdlib_test$139:	; BinaryAdd £temporary6079 list £temporary6078
x48140:	mov si, bp	; 2: 137 238
x48142:	add si, 6	; 3: 131 198 6
x48145:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6080 -> £temporary6079 £temporary6079 0

stdlib_test$141:	; Parameter 18 £temporary6080 -> £temporary6079 8
x48147:	mov ax, [si]	; 2: 139 4
x48149:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x48152:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 43 188
x48157:	mov [bp + 20], bp	; 3: 137 110 20
x48160:	add bp, 18	; 3: 131 197 18
x48163:	mov di, bp	; 2: 137 239
x48165:	add di, 2	; 3: 131 199 2
x48168:	jmp printf	; 3: 233 217 80

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x48171:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x48174:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x48176:	mov word [bp + 24], @12795$string_0AB20List2023A20#	; 5: 199 70 24 23 191

stdlib_test$148:	; Call 18 printf 0
x48181:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 69 188
x48186:	mov [bp + 20], bp	; 3: 137 110 20
x48189:	add bp, 18	; 3: 131 197 18
x48192:	mov di, bp	; 2: 137 239
x48194:	jmp printf	; 3: 233 191 80

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x48197:	mov [bp + 24], bp	; 3: 137 110 24
x48200:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x48204:	mov ax, [bp + 14]	; 3: 139 70 14
x48207:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x48210:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x48215:	mov word [bp + 30], compare	; 5: 199 70 30 35 191

stdlib_test$155:	; Call 18 qsort 0
x48220:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 106 188
x48225:	mov [bp + 20], bp	; 3: 137 110 20
x48228:	add bp, 18	; 3: 131 197 18
x48231:	jmp qsort	; 3: 233 100 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x48234:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x48239:	mov ax, [bp + 14]	; 3: 139 70 14
x48242:	cmp [bp + 16], ax	; 3: 57 70 16
x48245:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x48247:	mov word [bp + 24], @12807$string_25i20#	; 5: 199 70 24 91 191

stdlib_test$161:	; UnsignedMultiply £temporary6087 index 2
x48252:	mov ax, [bp + 16]	; 3: 139 70 16
x48255:	xor dx, dx	; 2: 49 210
x48257:	mul word [@12809$int2$2#]	; 4: 247 38 95 191

stdlib_test$162:	; BinaryAdd £temporary6088 list £temporary6087
x48261:	mov si, bp	; 2: 137 238
x48263:	add si, 6	; 3: 131 198 6
x48266:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6089 -> £temporary6088 £temporary6088 0

stdlib_test$164:	; Parameter 18 £temporary6089 -> £temporary6088 8
x48268:	mov ax, [si]	; 2: 139 4
x48270:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x48273:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 164 188
x48278:	mov [bp + 20], bp	; 3: 137 110 20
x48281:	add bp, 18	; 3: 131 197 18
x48284:	mov di, bp	; 2: 137 239
x48286:	add di, 2	; 3: 131 199 2
x48289:	jmp printf	; 3: 233 96 80

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x48292:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x48295:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x48297:	mov word [bp + 24], @12814$string_0AC20List2033A20#	; 5: 199 70 24 97 191

stdlib_test$171:	; Call 18 printf 0
x48302:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 190 188
x48307:	mov [bp + 20], bp	; 3: 137 110 20
x48310:	add bp, 18	; 3: 131 197 18
x48313:	mov di, bp	; 2: 137 239
x48315:	jmp printf	; 3: 233 70 80

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x48318:	mov [bp + 24], bp	; 3: 137 110 24
x48321:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x48325:	mov ax, [bp + 14]	; 3: 139 70 14
x48328:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x48331:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x48336:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 109 191

stdlib_test$178:	; Call 18 qsort 0
x48341:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 227 188
x48346:	mov [bp + 20], bp	; 3: 137 110 20
x48349:	add bp, 18	; 3: 131 197 18
x48352:	jmp qsort	; 3: 233 235 4

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x48355:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x48360:	mov ax, [bp + 14]	; 3: 139 70 14
x48363:	cmp [bp + 16], ax	; 3: 57 70 16
x48366:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x48368:	mov word [bp + 24], @12826$string_25i20#	; 5: 199 70 24 165 191

stdlib_test$184:	; UnsignedMultiply £temporary6096 index 2
x48373:	mov ax, [bp + 16]	; 3: 139 70 16
x48376:	xor dx, dx	; 2: 49 210
x48378:	mul word [@12828$int2$2#]	; 4: 247 38 169 191

stdlib_test$185:	; BinaryAdd £temporary6097 list £temporary6096
x48382:	mov si, bp	; 2: 137 238
x48384:	add si, 6	; 3: 131 198 6
x48387:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6098 -> £temporary6097 £temporary6097 0

stdlib_test$187:	; Parameter 18 £temporary6098 -> £temporary6097 8
x48389:	mov ax, [si]	; 2: 139 4
x48391:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x48394:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 29 189
x48399:	mov [bp + 20], bp	; 3: 137 110 20
x48402:	add bp, 18	; 3: 131 197 18
x48405:	mov di, bp	; 2: 137 239
x48407:	add di, 2	; 3: 131 199 2
x48410:	jmp printf	; 3: 233 231 79

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x48413:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x48416:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0A0ASearch3A0A# 6
x48418:	mov word [bp + 24], @12833$string_0A0ASearch3A0A#	; 5: 199 70 24 171 191

stdlib_test$194:	; Call 18 printf 0
x48423:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 55 189
x48428:	mov [bp + 20], bp	; 3: 137 110 20
x48431:	add bp, 18	; 3: 131 197 18
x48434:	mov di, bp	; 2: 137 239
x48436:	jmp printf	; 3: 233 205 79

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; Assign key 0
x48439:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$197:	; SignedGreaterThanEqual 224 key 6
x48444:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x48448:	jge stdlib_test$224	; 2: 125 119

stdlib_test$198:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$199:	; address £temporary6103 key
x48450:	mov si, bp	; 2: 137 238
x48452:	add si, 16	; 3: 131 198 16

stdlib_test$200:	; Parameter 18 £temporary6103 6
x48455:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$201:	; Parameter 18 list 8
x48458:	mov [bp + 26], bp	; 3: 137 110 26
x48461:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$202:	; Parameter 18 size 10
x48465:	mov ax, [bp + 14]	; 3: 139 70 14
x48468:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$203:	; Parameter 18 2 12
x48471:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$204:	; Parameter 18 compare 14
x48476:	mov word [bp + 32], compare	; 5: 199 70 32 35 191

stdlib_test$205:	; Call 18 bsearch 0
x48481:	mov word [bp + 18], stdlib_test$206	; 5: 199 70 18 111 189
x48486:	mov [bp + 20], bp	; 3: 137 110 20
x48489:	add bp, 18	; 3: 131 197 18
x48492:	jmp bsearch	; 3: 233 76 5

stdlib_test$206:	; PostCall 18

stdlib_test$207:	; GetReturnValue £temporary6105

stdlib_test$208:	; IntegralToIntegral £temporary6106 £temporary6105

stdlib_test$209:	; Assign p £temporary6106
x48495:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$210:	; Equal 214 p 0
x48498:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x48502:	je stdlib_test$214	; 2: 116 18

stdlib_test$211:	; BinarySubtract £temporary6108 p list
x48504:	mov ax, [bp + 18]	; 3: 139 70 18
x48507:	mov bx, bp	; 2: 137 235
x48509:	add bx, 6	; 3: 131 195 6
x48512:	sub ax, bx	; 2: 41 216

stdlib_test$212:	; UnsignedDivide £temporary6113 £temporary6108 2
x48514:	xor dx, dx	; 2: 49 210
x48516:	div word [@12855$int2$2#]	; 4: 247 54 182 191

stdlib_test$213:	; Goto 215
x48520:	jmp stdlib_test$215	; 2: 235 3

stdlib_test$214:	; Assign £temporary6113 -1
x48522:	mov ax, -1	; 3: 184 255 255

stdlib_test$215:	; Assign index £temporary6113
x48525:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$216:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$217:	; Parameter 22 string_20202825i2C2025i290A# 6
x48528:	mov word [bp + 28], @12866$string_20202825i2C2025i290A#	; 5: 199 70 28 184 191

stdlib_test$218:	; Parameter 22 key 8
x48533:	mov ax, [bp + 16]	; 3: 139 70 16
x48536:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$219:	; Parameter 22 index 10
x48539:	mov ax, [bp + 20]	; 3: 139 70 20
x48542:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$220:	; Call 22 printf 0
x48545:	mov word [bp + 22], stdlib_test$221	; 5: 199 70 22 180 189
x48550:	mov [bp + 24], bp	; 3: 137 110 24
x48553:	add bp, 22	; 3: 131 197 22
x48556:	mov di, bp	; 2: 137 239
x48558:	add di, 4	; 3: 131 199 4
x48561:	jmp printf	; 3: 233 80 79

stdlib_test$221:	; PostCall 22

stdlib_test$222:	; Increment key
x48564:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$223:	; Goto 197
x48567:	jmp stdlib_test$197	; 2: 235 131

stdlib_test$224:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$225:	; Parameter 16 string_0A# 6
x48569:	mov word [bp + 22], @12868$string_0A#	; 5: 199 70 22 196 191

stdlib_test$226:	; Call 16 printf 0
x48574:	mov word [bp + 16], stdlib_test$227	; 5: 199 70 16 206 189
x48579:	mov [bp + 18], bp	; 3: 137 110 18
x48582:	add bp, 16	; 3: 131 197 16
x48585:	mov di, bp	; 2: 137 239
x48587:	jmp printf	; 3: 233 54 79

stdlib_test$227:	; PostCall 16

stdlib_test$228:	; Return 0
x48590:	mov ax, [bp]	; 3: 139 70 0
x48593:	mov di, [bp + 4]	; 3: 139 126 4
x48596:	mov bp, [bp + 2]	; 3: 139 110 2
x48599:	jmp ax	; 2: 255 224

stdlib_test$229:	; FunctionEnd stdlib_test

@12691$string_atof28221232E4562229203D2025f0A#:
x48601:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

@12692$string_1232E456#:
x48623:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

@12695$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x48631:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

@12696$string_1232E456789abc#:
x48671:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

@12700$string_0Agetenv2822path2229203D2025s0A#:
x48685:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

@12701$string_path#:
x48707:	db "path", 0	; 5: 112 97 116 104 0

@12704$string_system2822dir22290A#:
x48712:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

@12706$string_dir#:
x48727:	db "dir", 0	; 4: 100 105 114 0

@12708$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x48731:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

@12716$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x48759:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

@12731$string_div_t28102C20329203D202825i2C2025i290A#:
x48793:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

@12738$string_div_t28102C20329203D202825i2C2025i290A0A#:
x48818:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

@12749$string_ldiv_t28102C20329203D202825li2C2025li290A#:
x48844:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

@12756$string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x48872:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

@12781$string_0AA20List2013A20#:
x48901:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

@12788$string_25i20#:
x48913:	db "%i ", 0	; 4: 37 105 32 0

@12790$int2$2#:
x48917:	dw 2	; 2: 2 0

@12795$string_0AB20List2023A20#:
x48919:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary5964 valuePtr1
x48931:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary5965 -> £temporary5964 £temporary5964 0

compare$2:	; Assign intValue1 £temporary5965 -> £temporary5964
x48934:	mov ax, [si]	; 2: 139 4
x48936:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary5966 valuePtr2
x48939:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary5967 -> £temporary5966 £temporary5966 0

compare$5:	; Assign intValue2 £temporary5967 -> £temporary5966
x48942:	mov ax, [si]	; 2: 139 4
x48944:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x48947:	mov ax, [bp + 12]	; 3: 139 70 12
x48950:	cmp [bp + 10], ax	; 3: 57 70 10
x48953:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary5977 -1
x48955:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x48958:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x48960:	mov ax, [bp + 12]	; 3: 139 70 12
x48963:	cmp [bp + 10], ax	; 3: 57 70 10
x48966:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary5973 0
x48968:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x48971:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary5973 1
x48973:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary5977 £temporary5973

compare$14:	; SetReturnValue £temporary5977

compare$15:	; Return £temporary5977
x48976:	mov ax, [bp]	; 3: 139 70 0
x48979:	mov di, [bp + 4]	; 3: 139 126 4
x48982:	mov bp, [bp + 2]	; 3: 139 110 2
x48985:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

@12807$string_25i20#:
x48987:	db "%i ", 0	; 4: 37 105 32 0

@12809$int2$2#:
x48991:	dw 2	; 2: 2 0

@12814$string_0AC20List2033A20#:
x48993:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary5978 valuePtr1
x49005:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary5979 -> £temporary5978 £temporary5978 0

reverse_compare$2:	; Assign intValue1 £temporary5979 -> £temporary5978
x49008:	mov ax, [si]	; 2: 139 4
x49010:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary5980 valuePtr2
x49013:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary5981 -> £temporary5980 £temporary5980 0

reverse_compare$5:	; Assign intValue2 £temporary5981 -> £temporary5980
x49016:	mov ax, [si]	; 2: 139 4
x49018:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49021:	mov ax, [bp + 12]	; 3: 139 70 12
x49024:	cmp [bp + 10], ax	; 3: 57 70 10
x49027:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary5991 1
x49029:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x49032:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x49034:	mov ax, [bp + 12]	; 3: 139 70 12
x49037:	cmp [bp + 10], ax	; 3: 57 70 10
x49040:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary5987 0
x49042:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x49045:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary5987 -1
x49047:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary5991 £temporary5987

reverse_compare$14:	; SetReturnValue £temporary5991

reverse_compare$15:	; Return £temporary5991
x49050:	mov ax, [bp]	; 3: 139 70 0
x49053:	mov di, [bp + 4]	; 3: 139 126 4
x49056:	mov bp, [bp + 2]	; 3: 139 110 2
x49059:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

@12826$string_25i20#:
x49061:	db "%i ", 0	; 4: 37 105 32 0

@12828$int2$2#:
x49065:	dw 2	; 2: 2 0

@12833$string_0A0ASearch3A0A#:
x49067:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

@12855$int2$2#:
x49078:	dw 2	; 2: 2 0

@12866$string_20202825i2C2025i290A#:
x49080:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

@12868$string_0A#:
x49092:	db 10, 0	; 2: 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x49094:	mov ax, [bp + 6]	; 3: 139 70 6
x49097:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x49100:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x49105:	mov word [bp + 8], atof$4	; 5: 199 70 8 223 191
x49110:	mov [bp + 10], bp	; 3: 137 110 10
x49113:	add bp, 8	; 3: 131 197 8
x49116:	nop	; 1: 144
x49117:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary2249

atof$6:	; SetReturnValue £temporary2249

atof$7:	; Return £temporary2249
x49119:	mov ax, [bp]	; 3: 139 70 0
x49122:	mov di, [bp + 4]	; 3: 139 126 4
x49125:	mov bp, [bp + 2]	; 3: 139 110 2
x49128:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x49130:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x49135:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x49137:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x49140:	mov ax, [bp + 6]	; 3: 139 70 6
x49143:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x49146:	mov word [bp + 28], @5006$string_25lf25n#	; 5: 199 70 28 65 192

strtod$6:	; address £temporary2252 value
x49151:	mov si, bp	; 2: 137 238
x49153:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary2252 10
x49156:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary2253 chars
x49159:	mov si, bp	; 2: 137 238
x49161:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary2253 12
x49164:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x49167:	mov word [bp + 20], strtod$11	; 5: 199 70 20 34 192
x49172:	mov [bp + 22], bp	; 3: 137 110 22
x49175:	add bp, 20	; 3: 131 197 20
x49178:	mov di, bp	; 2: 137 239
x49180:	add di, 4	; 3: 131 199 4
x49183:	jmp sscanf	; 3: 233 195 234

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x49186:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49190:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary2256 -> endp endp 0
x49192:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary2256 -> endp s chars
x49195:	mov ax, [bp + 6]	; 3: 139 70 6
x49198:	add ax, [bp + 10]	; 3: 3 70 10
x49201:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x49203:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x49206:	mov ax, [bp]	; 3: 139 70 0
x49209:	mov di, [bp + 4]	; 3: 139 126 4
x49212:	mov bp, [bp + 2]	; 3: 139 110 2
x49215:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

@5006$string_25lf25n#:
x49217:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

getenv:	; SetReturnValue 0
x49223:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x49226:	mov ax, [bp]	; 3: 139 70 0
x49229:	mov di, [bp + 4]	; 3: 139 126 4
x49232:	mov bp, [bp + 2]	; 3: 139 110 2
x49235:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x49237:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x49240:	mov ax, [bp]	; 3: 139 70 0
x49243:	mov di, [bp + 4]	; 3: 139 126 4
x49246:	mov bp, [bp + 2]	; 3: 139 110 2
x49249:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x49251:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x49255:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3202 value
x49257:	mov bx, [bp + 6]	; 3: 139 94 6
x49260:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3206 £temporary3202

_abs$3:	; Goto 5
x49262:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3206 value
x49264:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3206

_abs$6:	; Return £temporary3206
x49267:	mov ax, [bp]	; 3: 139 70 0
x49270:	mov di, [bp + 4]	; 3: 139 126 4
x49273:	mov bp, [bp + 2]	; 3: 139 110 2
x49276:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x49278:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x49283:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x49288:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49292:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x49294:	mov word [errno], 6	; 6: 199 6 230 10 6 0

div$4:	; SetReturnValue result
x49300:	mov bx, bp	; 2: 137 235
x49302:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x49305:	mov ax, [bp]	; 3: 139 70 0
x49308:	mov di, [bp + 4]	; 3: 139 126 4
x49311:	mov bp, [bp + 2]	; 3: 139 110 2
x49314:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x49316:	mov ax, [bp + 6]	; 3: 139 70 6
x49319:	xor dx, dx	; 2: 49 210
x49321:	idiv word [bp + 8]	; 3: 247 126 8
x49324:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x49327:	mov ax, [bp + 6]	; 3: 139 70 6
x49330:	xor dx, dx	; 2: 49 210
x49332:	idiv word [bp + 8]	; 3: 247 126 8
x49335:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x49338:	mov bx, bp	; 2: 137 235
x49340:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x49343:	mov ax, [bp]	; 3: 139 70 0
x49346:	mov di, [bp + 4]	; 3: 139 126 4
x49349:	mov bp, [bp + 2]	; 3: 139 110 2
x49352:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x49354:	mov word [bp + 16], @12626$string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 4 193

print_div$2:	; Parameter 10 d$quot 8
x49359:	mov ax, [bp + 6]	; 3: 139 70 6
x49362:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x49365:	mov ax, [bp + 8]	; 3: 139 70 8
x49368:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x49371:	mov word [bp + 10], print_div$5	; 5: 199 70 10 238 192
x49376:	mov [bp + 12], bp	; 3: 137 110 12
x49379:	add bp, 10	; 3: 131 197 10
x49382:	mov di, bp	; 2: 137 239
x49384:	add di, 4	; 3: 131 199 4
x49387:	jmp printf	; 3: 233 22 76

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x49390:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Increment d$rem
x49393:	inc word [bp + 8]	; 3: 255 70 8

print_div$8:	; SetReturnValue d
x49396:	mov bx, bp	; 2: 137 235
x49398:	add bx, 6	; 3: 131 195 6

print_div$9:	; Return d
x49401:	mov ax, [bp]	; 3: 139 70 0
x49404:	mov di, [bp + 4]	; 3: 139 126 4
x49407:	mov bp, [bp + 2]	; 3: 139 110 2
x49410:	jmp ax	; 2: 255 224

print_div$10:	; FunctionEnd print_div

@12626$string_div_t20quot2025i20rem2025i0A#:
x49412:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x49434:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x49442:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x49450:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x49455:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x49457:	mov word [errno], 6	; 6: 199 6 230 10 6 0

ldiv$4:	; SetReturnValue result
x49463:	mov bx, bp	; 2: 137 235
x49465:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x49468:	mov ax, [bp]	; 3: 139 70 0
x49471:	mov di, [bp + 4]	; 3: 139 126 4
x49474:	mov bp, [bp + 2]	; 3: 139 110 2
x49477:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x49479:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49483:	xor edx, edx	; 3: 102 49 210
x49486:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49490:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x49494:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49498:	xor edx, edx	; 3: 102 49 210
x49501:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49505:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x49509:	mov bx, bp	; 2: 137 235
x49511:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x49514:	mov ax, [bp]	; 3: 139 70 0
x49517:	mov di, [bp + 4]	; 3: 139 126 4
x49520:	mov bp, [bp + 2]	; 3: 139 110 2
x49523:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x49525:	mov word [bp + 20], @12641$string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 181 193

print_ldiv$2:	; Parameter 14 ld$quot 8
x49530:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49534:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x49538:	mov eax, [bp + 10]	; 4: 102 139 70 10
x49542:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x49546:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 157 193
x49551:	mov [bp + 16], bp	; 3: 137 110 16
x49554:	add bp, 14	; 3: 131 197 14
x49557:	mov di, bp	; 2: 137 239
x49559:	add di, 8	; 3: 131 199 8
x49562:	jmp printf	; 3: 233 103 75

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x49565:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Decrement ld$rem
x49569:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$8:	; SetReturnValue ld
x49573:	mov bx, bp	; 2: 137 235
x49575:	add bx, 6	; 3: 131 195 6

print_ldiv$9:	; Return ld
x49578:	mov ax, [bp]	; 3: 139 70 0
x49581:	mov di, [bp + 4]	; 3: 139 126 4
x49584:	mov bp, [bp + 2]	; 3: 139 110 2
x49587:	jmp ax	; 2: 255 224

print_ldiv$10:	; FunctionEnd print_ldiv

@12641$string_ldiv_t20quot2025li20rem2025li0A#:
x49589:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3180 valueList
x49614:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3180
x49617:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x49620:	mov ax, [bp + 8]	; 3: 139 70 8
x49623:	dec ax	; 1: 72
x49624:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x49627:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x49631:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x49635:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x49640:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x49645:	mov ax, [bp + 16]	; 3: 139 70 16
x49648:	cmp [bp + 18], ax	; 3: 57 70 18
x49651:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3186 index valueSize
x49653:	mov ax, [bp + 18]	; 3: 139 70 18
x49656:	xor dx, dx	; 2: 49 210
x49658:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3186
x49661:	mov bx, [bp + 14]	; 3: 139 94 14
x49664:	add bx, ax	; 2: 1 195
x49666:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3188 index 1
x49669:	mov ax, [bp + 18]	; 3: 139 70 18
x49672:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3189 £temporary3188 valueSize
x49673:	xor dx, dx	; 2: 49 210
x49675:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3189
x49678:	mov bx, [bp + 14]	; 3: 139 94 14
x49681:	add bx, ax	; 2: 1 195
x49683:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x49686:	mov ax, [bp + 22]	; 3: 139 70 22
x49689:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x49692:	mov ax, [bp + 24]	; 3: 139 70 24
x49695:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x49698:	mov word [bp + 26], qsort$16	; 5: 199 70 26 50 194
x49703:	mov [bp + 28], bp	; 3: 137 110 28
x49706:	mov ax, [bp + 12]	; 3: 139 70 12
x49709:	add bp, 26	; 3: 131 197 26
x49712:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3191

qsort$18:	; SignedLessThanEqual 26 £temporary3191 0
x49714:	cmp bx, 0	; 3: 131 251 0
x49717:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x49719:	mov ax, [bp + 22]	; 3: 139 70 22
x49722:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x49725:	mov ax, [bp + 24]	; 3: 139 70 24
x49728:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x49731:	mov ax, [bp + 10]	; 3: 139 70 10
x49734:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x49737:	mov word [bp + 26], qsort$24	; 5: 199 70 26 87 194
x49742:	mov [bp + 28], bp	; 3: 137 110 28
x49745:	add bp, 26	; 3: 131 197 26
x49748:	nop	; 1: 144
x49749:	jmp @7152$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x49751:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x49756:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x49759:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x49761:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x49765:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x49767:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x49770:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x49773:	mov ax, [bp]	; 3: 139 70 0
x49776:	mov di, [bp + 4]	; 3: 139 126 4
x49779:	mov bp, [bp + 2]	; 3: 139 110 2
x49782:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@7152$memswap:	; Assign index 0
x49784:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@7152$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x49789:	mov ax, [bp + 10]	; 3: 139 70 10
x49792:	cmp [bp + 12], ax	; 3: 57 70 12
x49795:	jge @7152$memswap$15	; 2: 125 43

@7152$memswap$2:	; BinaryAdd £temporary3173 value1 index
x49797:	mov si, [bp + 6]	; 3: 139 118 6
x49800:	add si, [bp + 12]	; 3: 3 118 12

@7152$memswap$3:	; Deref £temporary3172 -> £temporary3173 £temporary3173 0

@7152$memswap$4:	; Assign tempValue £temporary3172 -> £temporary3173
x49803:	mov al, [si]	; 2: 138 4
x49805:	mov [bp + 14], al	; 3: 136 70 14

@7152$memswap$5:	; BinaryAdd £temporary3175 value1 index
x49808:	mov si, [bp + 6]	; 3: 139 118 6
x49811:	add si, [bp + 12]	; 3: 3 118 12

@7152$memswap$6:	; Deref £temporary3174 -> £temporary3175 £temporary3175 0

@7152$memswap$7:	; BinaryAdd £temporary3177 value2 index
x49814:	mov di, [bp + 8]	; 3: 139 126 8
x49817:	add di, [bp + 12]	; 3: 3 126 12

@7152$memswap$8:	; Deref £temporary3176 -> £temporary3177 £temporary3177 0

@7152$memswap$9:	; Assign £temporary3174 -> £temporary3175 £temporary3176 -> £temporary3177
x49820:	mov al, [di]	; 2: 138 5
x49822:	mov [si], al	; 2: 136 4

@7152$memswap$10:	; BinaryAdd £temporary3179 value2 index
x49824:	mov si, [bp + 8]	; 3: 139 118 8
x49827:	add si, [bp + 12]	; 3: 3 118 12

@7152$memswap$11:	; Deref £temporary3178 -> £temporary3179 £temporary3179 0

@7152$memswap$12:	; Assign £temporary3178 -> £temporary3179 tempValue
x49830:	mov al, [bp + 14]	; 3: 138 70 14
x49833:	mov [si], al	; 2: 136 4

@7152$memswap$13:	; Increment index
x49835:	inc word [bp + 12]	; 3: 255 70 12

@7152$memswap$14:	; Goto 1
x49838:	jmp @7152$memswap$1	; 2: 235 205

@7152$memswap$15:	; Return 0
x49840:	mov ax, [bp]	; 3: 139 70 0
x49843:	mov di, [bp + 4]	; 3: 139 126 4
x49846:	mov bp, [bp + 2]	; 3: 139 110 2
x49849:	jmp ax	; 2: 255 224

@7152$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x49851:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x49856:	mov ax, [bp + 10]	; 3: 139 70 10
x49859:	dec ax	; 1: 72
x49860:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x49863:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x49867:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x49869:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x49872:	mov ax, [bp]	; 3: 139 70 0
x49875:	mov di, [bp + 4]	; 3: 139 126 4
x49878:	mov bp, [bp + 2]	; 3: 139 110 2
x49881:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3116 valueList
x49883:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3117 firstIndex valueSize
x49886:	mov ax, [bp + 16]	; 3: 139 70 16
x49889:	xor dx, dx	; 2: 49 210
x49891:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3116 £temporary3117
x49894:	add bx, ax	; 2: 1 195
x49896:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x49899:	mov ax, [bp + 6]	; 3: 139 70 6
x49902:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x49905:	mov ax, [bp + 20]	; 3: 139 70 20
x49908:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x49911:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 7 195
x49916:	mov [bp + 24], bp	; 3: 137 110 24
x49919:	mov ax, [bp + 14]	; 3: 139 70 14
x49922:	add bp, 22	; 3: 131 197 22
x49925:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3119

bsearch$14:	; Assign firstCompare £temporary3119
x49927:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x49930:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x49934:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x49936:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x49939:	mov ax, [bp]	; 3: 139 70 0
x49942:	mov di, [bp + 4]	; 3: 139 126 4
x49945:	mov bp, [bp + 2]	; 3: 139 110 2
x49948:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x49950:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x49954:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x49956:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x49959:	mov ax, [bp]	; 3: 139 70 0
x49962:	mov di, [bp + 4]	; 3: 139 126 4
x49965:	mov bp, [bp + 2]	; 3: 139 110 2
x49968:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3122 valueList
x49970:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3123 lastIndex valueSize
x49973:	mov ax, [bp + 18]	; 3: 139 70 18
x49976:	xor dx, dx	; 2: 49 210
x49978:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3122 £temporary3123
x49981:	add bx, ax	; 2: 1 195
x49983:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x49986:	mov ax, [bp + 6]	; 3: 139 70 6
x49989:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x49992:	mov ax, [bp + 20]	; 3: 139 70 20
x49995:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x49998:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 94 195
x50003:	mov [bp + 24], bp	; 3: 137 110 24
x50006:	mov ax, [bp + 14]	; 3: 139 70 14
x50009:	add bp, 22	; 3: 131 197 22
x50012:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3125

bsearch$30:	; Assign lastCompare £temporary3125
x50014:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x50017:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50021:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x50023:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x50026:	mov ax, [bp]	; 3: 139 70 0
x50029:	mov di, [bp + 4]	; 3: 139 126 4
x50032:	mov bp, [bp + 2]	; 3: 139 110 2
x50035:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x50037:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50041:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x50043:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x50046:	mov ax, [bp]	; 3: 139 70 0
x50049:	mov di, [bp + 4]	; 3: 139 126 4
x50052:	mov bp, [bp + 2]	; 3: 139 110 2
x50055:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3128 firstIndex lastIndex
x50057:	mov ax, [bp + 16]	; 3: 139 70 16
x50060:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3128 2
x50063:	xor dx, dx	; 2: 49 210
x50065:	idiv word [@7054$int2$2#]	; 4: 247 62 243 195
x50069:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3130 valueList
x50072:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3131 middleIndex valueSize
x50075:	mov ax, [bp + 20]	; 3: 139 70 20
x50078:	xor dx, dx	; 2: 49 210
x50080:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3130 £temporary3131
x50083:	add bx, ax	; 2: 1 195
x50085:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x50088:	mov ax, [bp + 6]	; 3: 139 70 6
x50091:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x50094:	mov ax, [bp + 22]	; 3: 139 70 22
x50097:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x50100:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 196 195
x50105:	mov [bp + 26], bp	; 3: 137 110 26
x50108:	mov ax, [bp + 14]	; 3: 139 70 14
x50111:	add bp, 24	; 3: 131 197 24
x50114:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3133

bsearch$48:	; Assign middleCompare £temporary3133
x50116:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x50119:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50123:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x50125:	mov ax, [bp + 20]	; 3: 139 70 20
x50128:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x50131:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x50134:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50138:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x50140:	mov ax, [bp + 20]	; 3: 139 70 20
x50143:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x50146:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x50149:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x50152:	mov ax, [bp]	; 3: 139 70 0
x50155:	mov di, [bp + 4]	; 3: 139 126 4
x50158:	mov bp, [bp + 2]	; 3: 139 110 2
x50161:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

@7054$int2$2#:
x50163:	dw 2	; 2: 2 0

strtol_test:	; Assign base 0
x50165:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x50170:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x50174:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x50178:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x50182:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x50186:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x50190:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x50194:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x50198:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x50202:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x50206:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x50210:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x50214:	mov [bp + 27], bp	; 3: 137 110 27
x50217:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2275 pointer
x50221:	mov si, bp	; 2: 137 238
x50223:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2275 8
x50226:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x50229:	mov ax, [bp + 6]	; 3: 139 70 6
x50232:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x50235:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 73 196
x50240:	mov [bp + 23], bp	; 3: 137 110 23
x50243:	add bp, 21	; 3: 131 197 21
x50246:	jmp strtol	; 3: 233 49 11

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2276

strtol_test$20:	; Assign value £temporary2276
x50249:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50253:	mov word [bp + 31], @5065$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 238 205

strtol_test$23:	; Parameter 25 text 8
x50258:	mov [bp + 33], bp	; 3: 137 110 33
x50261:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x50265:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50269:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x50273:	mov ax, [bp + 19]	; 3: 139 70 19
x50276:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x50279:	mov ax, [bp + 6]	; 3: 139 70 6
x50282:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x50285:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 128 196
x50290:	mov [bp + 27], bp	; 3: 137 110 27
x50293:	add bp, 25	; 3: 131 197 25
x50296:	mov di, bp	; 2: 137 239
x50298:	add di, 10	; 3: 131 199 10
x50301:	jmp printf	; 3: 233 132 72

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x50304:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x50309:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x50313:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x50317:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x50321:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x50325:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x50329:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x50333:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x50337:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x50341:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x50345:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x50349:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x50353:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x50357:	mov [bp + 28], bp	; 3: 137 110 28
x50360:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2290 pointer
x50364:	mov si, bp	; 2: 137 238
x50366:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2290 8
x50369:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x50372:	mov ax, [bp + 6]	; 3: 139 70 6
x50375:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x50378:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 216 196
x50383:	mov [bp + 24], bp	; 3: 137 110 24
x50386:	add bp, 22	; 3: 131 197 22
x50389:	jmp strtol	; 3: 233 162 10

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2291

strtol_test$50:	; Assign value £temporary2291
x50392:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50396:	mov word [bp + 32], @5112$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 4 206

strtol_test$53:	; Parameter 26 text 8
x50401:	mov [bp + 34], bp	; 3: 137 110 34
x50404:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x50408:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50412:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x50416:	mov ax, [bp + 20]	; 3: 139 70 20
x50419:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x50422:	mov ax, [bp + 6]	; 3: 139 70 6
x50425:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x50428:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 15 197
x50433:	mov [bp + 28], bp	; 3: 137 110 28
x50436:	add bp, 26	; 3: 131 197 26
x50439:	mov di, bp	; 2: 137 239
x50441:	add di, 10	; 3: 131 199 10
x50444:	jmp printf	; 3: 233 245 71

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x50447:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x50452:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x50456:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x50460:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x50464:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x50468:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x50472:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x50476:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x50480:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x50484:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x50488:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x50492:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x50496:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x50500:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x50504:	mov [bp + 29], bp	; 3: 137 110 29
x50507:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2306 pointer
x50511:	mov si, bp	; 2: 137 238
x50513:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2306 8
x50516:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x50519:	mov ax, [bp + 6]	; 3: 139 70 6
x50522:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x50525:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 107 197
x50530:	mov [bp + 25], bp	; 3: 137 110 25
x50533:	add bp, 23	; 3: 131 197 23
x50536:	jmp strtol	; 3: 233 15 10

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2307

strtol_test$81:	; Assign value £temporary2307
x50539:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50543:	mov word [bp + 33], @5162$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 26 206

strtol_test$84:	; Parameter 27 text 8
x50548:	mov [bp + 35], bp	; 3: 137 110 35
x50551:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x50555:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50559:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x50563:	mov ax, [bp + 21]	; 3: 139 70 21
x50566:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x50569:	mov ax, [bp + 6]	; 3: 139 70 6
x50572:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x50575:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 162 197
x50580:	mov [bp + 29], bp	; 3: 137 110 29
x50583:	add bp, 27	; 3: 131 197 27
x50586:	mov di, bp	; 2: 137 239
x50588:	add di, 10	; 3: 131 199 10
x50591:	jmp printf	; 3: 233 98 71

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x50594:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x50599:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x50603:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x50607:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x50611:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x50615:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x50619:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x50623:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x50627:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x50631:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x50635:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x50639:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x50643:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x50647:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x50651:	mov [bp + 29], bp	; 3: 137 110 29
x50654:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2322 pointer
x50658:	mov si, bp	; 2: 137 238
x50660:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2322 8
x50663:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x50666:	mov ax, [bp + 6]	; 3: 139 70 6
x50669:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x50672:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 254 197
x50677:	mov [bp + 25], bp	; 3: 137 110 25
x50680:	add bp, 23	; 3: 131 197 23
x50683:	jmp strtol	; 3: 233 124 9

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2323

strtol_test$112:	; Assign value £temporary2323
x50686:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50690:	mov word [bp + 33], @5212$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 48 206

strtol_test$115:	; Parameter 27 text 8
x50695:	mov [bp + 35], bp	; 3: 137 110 35
x50698:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x50702:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50706:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x50710:	mov ax, [bp + 21]	; 3: 139 70 21
x50713:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x50716:	mov ax, [bp + 6]	; 3: 139 70 6
x50719:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x50722:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 53 198
x50727:	mov [bp + 29], bp	; 3: 137 110 29
x50730:	add bp, 27	; 3: 131 197 27
x50733:	mov di, bp	; 2: 137 239
x50735:	add di, 10	; 3: 131 199 10
x50738:	jmp printf	; 3: 233 207 70

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x50741:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x50746:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x50750:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x50754:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x50758:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x50762:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x50766:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x50770:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x50774:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x50778:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x50782:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x50786:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x50790:	mov [bp + 27], bp	; 3: 137 110 27
x50793:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2336 pointer
x50797:	mov si, bp	; 2: 137 238
x50799:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2336 8
x50802:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x50805:	mov ax, [bp + 6]	; 3: 139 70 6
x50808:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x50811:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 137 198
x50816:	mov [bp + 23], bp	; 3: 137 110 23
x50819:	add bp, 21	; 3: 131 197 21
x50822:	jmp strtol	; 3: 233 241 8

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2337

strtol_test$141:	; Assign value £temporary2337
x50825:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50829:	mov word [bp + 31], @5256$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 70 206

strtol_test$144:	; Parameter 25 text 8
x50834:	mov [bp + 33], bp	; 3: 137 110 33
x50837:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x50841:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50845:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x50849:	mov ax, [bp + 19]	; 3: 139 70 19
x50852:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x50855:	mov ax, [bp + 6]	; 3: 139 70 6
x50858:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x50861:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 192 198
x50866:	mov [bp + 27], bp	; 3: 137 110 27
x50869:	add bp, 25	; 3: 131 197 25
x50872:	mov di, bp	; 2: 137 239
x50874:	add di, 10	; 3: 131 199 10
x50877:	jmp printf	; 3: 233 68 70

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x50880:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x50885:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x50889:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x50893:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x50897:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x50901:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x50905:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x50909:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x50913:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x50917:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x50921:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x50925:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x50929:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x50933:	mov [bp + 28], bp	; 3: 137 110 28
x50936:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2351 pointer
x50940:	mov si, bp	; 2: 137 238
x50942:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2351 8
x50945:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x50948:	mov ax, [bp + 6]	; 3: 139 70 6
x50951:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x50954:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 24 199
x50959:	mov [bp + 24], bp	; 3: 137 110 24
x50962:	add bp, 22	; 3: 131 197 22
x50965:	jmp strtol	; 3: 233 98 8

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2352

strtol_test$171:	; Assign value £temporary2352
x50968:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50972:	mov word [bp + 32], @5303$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 92 206

strtol_test$174:	; Parameter 26 text 8
x50977:	mov [bp + 34], bp	; 3: 137 110 34
x50980:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x50984:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50988:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x50992:	mov ax, [bp + 20]	; 3: 139 70 20
x50995:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x50998:	mov ax, [bp + 6]	; 3: 139 70 6
x51001:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x51004:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 79 199
x51009:	mov [bp + 28], bp	; 3: 137 110 28
x51012:	add bp, 26	; 3: 131 197 26
x51015:	mov di, bp	; 2: 137 239
x51017:	add di, 10	; 3: 131 199 10
x51020:	jmp printf	; 3: 233 181 69

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x51023:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x51028:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x51032:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x51036:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x51040:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x51044:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x51048:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x51052:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x51056:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x51060:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x51064:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x51068:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x51072:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x51076:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x51080:	mov [bp + 29], bp	; 3: 137 110 29
x51083:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2367 pointer
x51087:	mov si, bp	; 2: 137 238
x51089:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2367 8
x51092:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x51095:	mov ax, [bp + 6]	; 3: 139 70 6
x51098:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x51101:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 171 199
x51106:	mov [bp + 25], bp	; 3: 137 110 25
x51109:	add bp, 23	; 3: 131 197 23
x51112:	jmp strtol	; 3: 233 207 7

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2368

strtol_test$202:	; Assign value £temporary2368
x51115:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51119:	mov word [bp + 33], @5353$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 114 206

strtol_test$205:	; Parameter 27 text 8
x51124:	mov [bp + 35], bp	; 3: 137 110 35
x51127:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x51131:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51135:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x51139:	mov ax, [bp + 21]	; 3: 139 70 21
x51142:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x51145:	mov ax, [bp + 6]	; 3: 139 70 6
x51148:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x51151:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 226 199
x51156:	mov [bp + 29], bp	; 3: 137 110 29
x51159:	add bp, 27	; 3: 131 197 27
x51162:	mov di, bp	; 2: 137 239
x51164:	add di, 10	; 3: 131 199 10
x51167:	jmp printf	; 3: 233 34 69

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x51170:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x51175:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x51179:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x51183:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x51187:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x51191:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x51195:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x51199:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x51203:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x51207:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x51211:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x51215:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x51219:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x51223:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x51227:	mov [bp + 29], bp	; 3: 137 110 29
x51230:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2383 pointer
x51234:	mov si, bp	; 2: 137 238
x51236:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2383 8
x51239:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x51242:	mov ax, [bp + 6]	; 3: 139 70 6
x51245:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x51248:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 62 200
x51253:	mov [bp + 25], bp	; 3: 137 110 25
x51256:	add bp, 23	; 3: 131 197 23
x51259:	jmp strtol	; 3: 233 60 7

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2384

strtol_test$233:	; Assign value £temporary2384
x51262:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51266:	mov word [bp + 33], @5403$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 136 206

strtol_test$236:	; Parameter 27 text 8
x51271:	mov [bp + 35], bp	; 3: 137 110 35
x51274:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x51278:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51282:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x51286:	mov ax, [bp + 21]	; 3: 139 70 21
x51289:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x51292:	mov ax, [bp + 6]	; 3: 139 70 6
x51295:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x51298:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 117 200
x51303:	mov [bp + 29], bp	; 3: 137 110 29
x51306:	add bp, 27	; 3: 131 197 27
x51309:	mov di, bp	; 2: 137 239
x51311:	add di, 10	; 3: 131 199 10
x51314:	jmp printf	; 3: 233 143 68

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x51317:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x51322:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x51326:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x51330:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x51334:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x51338:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x51342:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x51346:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x51350:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x51354:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x51358:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x51362:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x51366:	mov [bp + 27], bp	; 3: 137 110 27
x51369:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2397 pointer
x51373:	mov si, bp	; 2: 137 238
x51375:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2397 8
x51378:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x51381:	mov ax, [bp + 6]	; 3: 139 70 6
x51384:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x51387:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 201 200
x51392:	mov [bp + 23], bp	; 3: 137 110 23
x51395:	add bp, 21	; 3: 131 197 21
x51398:	jmp strtol	; 3: 233 177 6

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2398

strtol_test$262:	; Assign value £temporary2398
x51401:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51405:	mov word [bp + 31], @5447$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 158 206

strtol_test$265:	; Parameter 25 text 8
x51410:	mov [bp + 33], bp	; 3: 137 110 33
x51413:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x51417:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51421:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x51425:	mov ax, [bp + 19]	; 3: 139 70 19
x51428:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x51431:	mov ax, [bp + 6]	; 3: 139 70 6
x51434:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x51437:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 0 201
x51442:	mov [bp + 27], bp	; 3: 137 110 27
x51445:	add bp, 25	; 3: 131 197 25
x51448:	mov di, bp	; 2: 137 239
x51450:	add di, 10	; 3: 131 199 10
x51453:	jmp printf	; 3: 233 4 68

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x51456:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x51461:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x51465:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x51469:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x51473:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x51477:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x51481:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x51485:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x51489:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x51493:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x51497:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x51501:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x51505:	mov [bp + 27], bp	; 3: 137 110 27
x51508:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2411 pointer
x51512:	mov si, bp	; 2: 137 238
x51514:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2411 8
x51517:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x51520:	mov ax, [bp + 6]	; 3: 139 70 6
x51523:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x51526:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 84 201
x51531:	mov [bp + 23], bp	; 3: 137 110 23
x51534:	add bp, 21	; 3: 131 197 21
x51537:	jmp strtol	; 3: 233 38 6

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2412

strtol_test$291:	; Assign value £temporary2412
x51540:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51544:	mov word [bp + 31], @5491$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 180 206

strtol_test$294:	; Parameter 25 text 8
x51549:	mov [bp + 33], bp	; 3: 137 110 33
x51552:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x51556:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51560:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x51564:	mov ax, [bp + 19]	; 3: 139 70 19
x51567:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x51570:	mov ax, [bp + 6]	; 3: 139 70 6
x51573:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x51576:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 139 201
x51581:	mov [bp + 27], bp	; 3: 137 110 27
x51584:	add bp, 25	; 3: 131 197 25
x51587:	mov di, bp	; 2: 137 239
x51589:	add di, 10	; 3: 131 199 10
x51592:	jmp printf	; 3: 233 121 67

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x51595:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x51600:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x51604:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x51608:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x51612:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x51616:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x51620:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x51624:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x51628:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x51632:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x51636:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x51640:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x51644:	mov [bp + 27], bp	; 3: 137 110 27
x51647:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2425 pointer
x51651:	mov si, bp	; 2: 137 238
x51653:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2425 8
x51656:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x51659:	mov ax, [bp + 6]	; 3: 139 70 6
x51662:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x51665:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 223 201
x51670:	mov [bp + 23], bp	; 3: 137 110 23
x51673:	add bp, 21	; 3: 131 197 21
x51676:	jmp strtol	; 3: 233 155 5

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2426

strtol_test$320:	; Assign value £temporary2426
x51679:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51683:	mov word [bp + 31], @5535$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 202 206

strtol_test$323:	; Parameter 25 text 8
x51688:	mov [bp + 33], bp	; 3: 137 110 33
x51691:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x51695:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51699:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x51703:	mov ax, [bp + 19]	; 3: 139 70 19
x51706:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x51709:	mov ax, [bp + 6]	; 3: 139 70 6
x51712:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x51715:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 22 202
x51720:	mov [bp + 27], bp	; 3: 137 110 27
x51723:	add bp, 25	; 3: 131 197 25
x51726:	mov di, bp	; 2: 137 239
x51728:	add di, 10	; 3: 131 199 10
x51731:	jmp printf	; 3: 233 238 66

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x51734:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x51739:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x51743:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x51747:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x51751:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x51755:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x51759:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x51763:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x51767:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x51771:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x51775:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x51779:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x51783:	mov [bp + 27], bp	; 3: 137 110 27
x51786:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2439 pointer
x51790:	mov si, bp	; 2: 137 238
x51792:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2439 8
x51795:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x51798:	mov ax, [bp + 6]	; 3: 139 70 6
x51801:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x51804:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 106 202
x51809:	mov [bp + 23], bp	; 3: 137 110 23
x51812:	add bp, 21	; 3: 131 197 21
x51815:	jmp strtol	; 3: 233 16 5

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2440

strtol_test$349:	; Assign value £temporary2440
x51818:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51822:	mov word [bp + 31], @5579$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 224 206

strtol_test$352:	; Parameter 25 text 8
x51827:	mov [bp + 33], bp	; 3: 137 110 33
x51830:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x51834:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51838:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x51842:	mov ax, [bp + 19]	; 3: 139 70 19
x51845:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x51848:	mov ax, [bp + 6]	; 3: 139 70 6
x51851:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x51854:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 161 202
x51859:	mov [bp + 27], bp	; 3: 137 110 27
x51862:	add bp, 25	; 3: 131 197 25
x51865:	mov di, bp	; 2: 137 239
x51867:	add di, 10	; 3: 131 199 10
x51870:	jmp printf	; 3: 233 99 66

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x51873:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x51878:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x51882:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x51886:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x51890:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x51894:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x51898:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x51902:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x51906:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x51910:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x51914:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x51918:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x51922:	mov [bp + 27], bp	; 3: 137 110 27
x51925:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2453 pointer
x51929:	mov si, bp	; 2: 137 238
x51931:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2453 8
x51934:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x51937:	mov ax, [bp + 6]	; 3: 139 70 6
x51940:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x51943:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 245 202
x51948:	mov [bp + 23], bp	; 3: 137 110 23
x51951:	add bp, 21	; 3: 131 197 21
x51954:	jmp strtol	; 3: 233 133 4

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2454

strtol_test$378:	; Assign value £temporary2454
x51957:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51961:	mov word [bp + 31], @5623$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 246 206

strtol_test$381:	; Parameter 25 text 8
x51966:	mov [bp + 33], bp	; 3: 137 110 33
x51969:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x51973:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51977:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x51981:	mov ax, [bp + 19]	; 3: 139 70 19
x51984:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x51987:	mov ax, [bp + 6]	; 3: 139 70 6
x51990:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x51993:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 44 203
x51998:	mov [bp + 27], bp	; 3: 137 110 27
x52001:	add bp, 25	; 3: 131 197 25
x52004:	mov di, bp	; 2: 137 239
x52006:	add di, 10	; 3: 131 199 10
x52009:	jmp printf	; 3: 233 216 65

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x52012:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x52017:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x52021:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x52025:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x52029:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x52033:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x52037:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x52041:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x52045:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x52049:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x52053:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x52057:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x52061:	mov [bp + 27], bp	; 3: 137 110 27
x52064:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2467 pointer
x52068:	mov si, bp	; 2: 137 238
x52070:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2467 8
x52073:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x52076:	mov ax, [bp + 6]	; 3: 139 70 6
x52079:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x52082:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 128 203
x52087:	mov [bp + 23], bp	; 3: 137 110 23
x52090:	add bp, 21	; 3: 131 197 21
x52093:	jmp strtol	; 3: 233 250 3

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2468

strtol_test$407:	; Assign value £temporary2468
x52096:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52100:	mov word [bp + 31], @5667$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 12 207

strtol_test$410:	; Parameter 25 text 8
x52105:	mov [bp + 33], bp	; 3: 137 110 33
x52108:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x52112:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52116:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x52120:	mov ax, [bp + 19]	; 3: 139 70 19
x52123:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x52126:	mov ax, [bp + 6]	; 3: 139 70 6
x52129:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x52132:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 183 203
x52137:	mov [bp + 27], bp	; 3: 137 110 27
x52140:	add bp, 25	; 3: 131 197 25
x52143:	mov di, bp	; 2: 137 239
x52145:	add di, 10	; 3: 131 199 10
x52148:	jmp printf	; 3: 233 77 65

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x52151:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x52156:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x52160:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x52164:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x52168:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x52172:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x52176:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x52180:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x52184:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x52188:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x52192:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x52196:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x52200:	mov [bp + 27], bp	; 3: 137 110 27
x52203:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2481 pointer
x52207:	mov si, bp	; 2: 137 238
x52209:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2481 8
x52212:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x52215:	mov ax, [bp + 6]	; 3: 139 70 6
x52218:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x52221:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 11 204
x52226:	mov [bp + 23], bp	; 3: 137 110 23
x52229:	add bp, 21	; 3: 131 197 21
x52232:	jmp strtol	; 3: 233 111 3

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2482

strtol_test$436:	; Assign value £temporary2482
x52235:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52239:	mov word [bp + 31], @5711$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 34 207

strtol_test$439:	; Parameter 25 text 8
x52244:	mov [bp + 33], bp	; 3: 137 110 33
x52247:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x52251:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52255:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x52259:	mov ax, [bp + 19]	; 3: 139 70 19
x52262:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x52265:	mov ax, [bp + 6]	; 3: 139 70 6
x52268:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x52271:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 66 204
x52276:	mov [bp + 27], bp	; 3: 137 110 27
x52279:	add bp, 25	; 3: 131 197 25
x52282:	mov di, bp	; 2: 137 239
x52284:	add di, 10	; 3: 131 199 10
x52287:	jmp printf	; 3: 233 194 64

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x52290:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x52295:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x52299:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x52303:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x52307:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x52311:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x52315:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x52319:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x52323:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x52327:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x52331:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x52335:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x52339:	mov [bp + 27], bp	; 3: 137 110 27
x52342:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2495 pointer
x52346:	mov si, bp	; 2: 137 238
x52348:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2495 8
x52351:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x52354:	mov ax, [bp + 6]	; 3: 139 70 6
x52357:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x52360:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 150 204
x52365:	mov [bp + 23], bp	; 3: 137 110 23
x52368:	add bp, 21	; 3: 131 197 21
x52371:	jmp strtol	; 3: 233 228 2

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2496

strtol_test$465:	; Assign value £temporary2496
x52374:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52378:	mov word [bp + 31], @5755$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 56 207

strtol_test$468:	; Parameter 25 text 8
x52383:	mov [bp + 33], bp	; 3: 137 110 33
x52386:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x52390:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52394:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x52398:	mov ax, [bp + 19]	; 3: 139 70 19
x52401:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x52404:	mov ax, [bp + 6]	; 3: 139 70 6
x52407:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x52410:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 205 204
x52415:	mov [bp + 27], bp	; 3: 137 110 27
x52418:	add bp, 25	; 3: 131 197 25
x52421:	mov di, bp	; 2: 137 239
x52423:	add di, 10	; 3: 131 199 10
x52426:	jmp printf	; 3: 233 55 64

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x52429:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x52434:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x52438:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x52442:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x52446:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x52450:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x52454:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x52458:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x52462:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x52466:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x52470:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x52474:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x52478:	mov [bp + 27], bp	; 3: 137 110 27
x52481:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2509 pointer
x52485:	mov si, bp	; 2: 137 238
x52487:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2509 8
x52490:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x52493:	mov ax, [bp + 6]	; 3: 139 70 6
x52496:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x52499:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 33 205
x52504:	mov [bp + 23], bp	; 3: 137 110 23
x52507:	add bp, 21	; 3: 131 197 21
x52510:	jmp strtol	; 3: 233 89 2

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2510

strtol_test$494:	; Assign value £temporary2510
x52513:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52517:	mov word [bp + 31], @5799$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 78 207

strtol_test$497:	; Parameter 25 text 8
x52522:	mov [bp + 33], bp	; 3: 137 110 33
x52525:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x52529:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52533:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x52537:	mov ax, [bp + 19]	; 3: 139 70 19
x52540:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x52543:	mov ax, [bp + 6]	; 3: 139 70 6
x52546:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x52549:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 88 205
x52554:	mov [bp + 27], bp	; 3: 137 110 27
x52557:	add bp, 25	; 3: 131 197 25
x52560:	mov di, bp	; 2: 137 239
x52562:	add di, 10	; 3: 131 199 10
x52565:	jmp printf	; 3: 233 172 63

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x52568:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x52573:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x52577:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x52581:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x52585:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x52589:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x52593:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x52597:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x52601:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x52605:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x52609:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x52613:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x52617:	mov [bp + 27], bp	; 3: 137 110 27
x52620:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2523 pointer
x52624:	mov si, bp	; 2: 137 238
x52626:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2523 8
x52629:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x52632:	mov ax, [bp + 6]	; 3: 139 70 6
x52635:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x52638:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 172 205
x52643:	mov [bp + 23], bp	; 3: 137 110 23
x52646:	add bp, 21	; 3: 131 197 21
x52649:	jmp strtol	; 3: 233 206 1

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2524

strtol_test$523:	; Assign value £temporary2524
x52652:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52656:	mov word [bp + 31], @5843$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 100 207

strtol_test$526:	; Parameter 25 text 8
x52661:	mov [bp + 33], bp	; 3: 137 110 33
x52664:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x52668:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52672:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x52676:	mov ax, [bp + 19]	; 3: 139 70 19
x52679:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x52682:	mov ax, [bp + 6]	; 3: 139 70 6
x52685:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x52688:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 227 205
x52693:	mov [bp + 27], bp	; 3: 137 110 27
x52696:	add bp, 25	; 3: 131 197 25
x52699:	mov di, bp	; 2: 137 239
x52701:	add di, 10	; 3: 131 199 10
x52704:	jmp printf	; 3: 233 33 63

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x52707:	mov ax, [bp]	; 3: 139 70 0
x52710:	mov di, [bp + 4]	; 3: 139 126 4
x52713:	mov bp, [bp + 2]	; 3: 139 110 2
x52716:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

@5065$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52718:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5112$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52740:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5162$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52762:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5212$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52784:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5256$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52806:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5303$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52828:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5353$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52850:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5403$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52872:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5447$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52894:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5491$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52916:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5535$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52938:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5579$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52960:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5623$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52982:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5667$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53004:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5711$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53026:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5755$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53048:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5799$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53070:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5843$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53092:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x53114:	mov word [g_inStatus], 1	; 6: 199 6 74 96 1 0

strtol$1:	; Assign g_inDevice s
x53120:	mov ax, [bp + 6]	; 3: 139 70 6
x53123:	mov [g_inDevice], ax	; 3: 163 76 96

strtol$2:	; Assign g_inChars 0
x53126:	mov word [g_inChars], 0	; 6: 199 6 111 101 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x53132:	mov ax, [bp + 10]	; 3: 139 70 10
x53135:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x53138:	mov word [bp + 12], strtol$6	; 5: 199 70 12 160 207
x53143:	mov [bp + 14], bp	; 3: 137 110 14
x53146:	add bp, 12	; 3: 131 197 12
x53149:	jmp scanLongInt	; 3: 233 196 152

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2239

strtol$8:	; Assign value £temporary2239
x53152:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x53156:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x53160:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2241 -> endp endp 0
x53162:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2241 -> endp s g_inChars
x53165:	mov ax, [bp + 6]	; 3: 139 70 6
x53168:	add ax, [g_inChars]	; 4: 3 6 111 101
x53172:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x53174:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x53178:	mov ax, [bp]	; 3: 139 70 0
x53181:	mov di, [bp + 4]	; 3: 139 126 4
x53184:	mov bp, [bp + 2]	; 3: 139 110 2
x53187:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x53189:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x53194:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x53198:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x53202:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x53206:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x53210:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x53214:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x53218:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x53222:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x53226:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x53230:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x53234:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x53238:	mov [bp + 27], bp	; 3: 137 110 27
x53241:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2699 pointer
x53245:	mov si, bp	; 2: 137 238
x53247:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2699 8
x53250:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x53253:	mov ax, [bp + 6]	; 3: 139 70 6
x53256:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x53259:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 25 208
x53264:	mov [bp + 23], bp	; 3: 137 110 23
x53267:	add bp, 21	; 3: 131 197 21
x53270:	jmp strtoul	; 3: 233 49 11

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2700

strtoul_test$20:	; Assign value £temporary2700
x53273:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53277:	mov word [bp + 31], @6050$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 190 217

strtoul_test$23:	; Parameter 25 text 8
x53282:	mov [bp + 33], bp	; 3: 137 110 33
x53285:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x53289:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53293:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x53297:	mov ax, [bp + 19]	; 3: 139 70 19
x53300:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x53303:	mov ax, [bp + 6]	; 3: 139 70 6
x53306:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x53309:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 80 208
x53314:	mov [bp + 27], bp	; 3: 137 110 27
x53317:	add bp, 25	; 3: 131 197 25
x53320:	mov di, bp	; 2: 137 239
x53322:	add di, 10	; 3: 131 199 10
x53325:	jmp printf	; 3: 233 180 60

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x53328:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x53333:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x53337:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x53341:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x53345:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x53349:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x53353:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x53357:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x53361:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x53365:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x53369:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x53373:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x53377:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x53381:	mov [bp + 28], bp	; 3: 137 110 28
x53384:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2714 pointer
x53388:	mov si, bp	; 2: 137 238
x53390:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2714 8
x53393:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x53396:	mov ax, [bp + 6]	; 3: 139 70 6
x53399:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x53402:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 168 208
x53407:	mov [bp + 24], bp	; 3: 137 110 24
x53410:	add bp, 22	; 3: 131 197 22
x53413:	jmp strtoul	; 3: 233 162 10

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2715

strtoul_test$50:	; Assign value £temporary2715
x53416:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53420:	mov word [bp + 32], @6097$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 212 217

strtoul_test$53:	; Parameter 26 text 8
x53425:	mov [bp + 34], bp	; 3: 137 110 34
x53428:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x53432:	mov eax, [bp + 22]	; 4: 102 139 70 22
x53436:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x53440:	mov ax, [bp + 20]	; 3: 139 70 20
x53443:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x53446:	mov ax, [bp + 6]	; 3: 139 70 6
x53449:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x53452:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 223 208
x53457:	mov [bp + 28], bp	; 3: 137 110 28
x53460:	add bp, 26	; 3: 131 197 26
x53463:	mov di, bp	; 2: 137 239
x53465:	add di, 10	; 3: 131 199 10
x53468:	jmp printf	; 3: 233 37 60

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x53471:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x53476:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x53480:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x53484:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x53488:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x53492:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x53496:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x53500:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x53504:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x53508:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x53512:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x53516:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x53520:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x53524:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x53528:	mov [bp + 29], bp	; 3: 137 110 29
x53531:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2730 pointer
x53535:	mov si, bp	; 2: 137 238
x53537:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2730 8
x53540:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x53543:	mov ax, [bp + 6]	; 3: 139 70 6
x53546:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x53549:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 59 209
x53554:	mov [bp + 25], bp	; 3: 137 110 25
x53557:	add bp, 23	; 3: 131 197 23
x53560:	jmp strtoul	; 3: 233 15 10

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2731

strtoul_test$81:	; Assign value £temporary2731
x53563:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53567:	mov word [bp + 33], @6147$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 234 217

strtoul_test$84:	; Parameter 27 text 8
x53572:	mov [bp + 35], bp	; 3: 137 110 35
x53575:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x53579:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53583:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x53587:	mov ax, [bp + 21]	; 3: 139 70 21
x53590:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x53593:	mov ax, [bp + 6]	; 3: 139 70 6
x53596:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x53599:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 114 209
x53604:	mov [bp + 29], bp	; 3: 137 110 29
x53607:	add bp, 27	; 3: 131 197 27
x53610:	mov di, bp	; 2: 137 239
x53612:	add di, 10	; 3: 131 199 10
x53615:	jmp printf	; 3: 233 146 59

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x53618:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x53623:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x53627:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x53631:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x53635:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x53639:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x53643:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x53647:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x53651:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x53655:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x53659:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x53663:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x53667:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x53671:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x53675:	mov [bp + 29], bp	; 3: 137 110 29
x53678:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2746 pointer
x53682:	mov si, bp	; 2: 137 238
x53684:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2746 8
x53687:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x53690:	mov ax, [bp + 6]	; 3: 139 70 6
x53693:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x53696:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 206 209
x53701:	mov [bp + 25], bp	; 3: 137 110 25
x53704:	add bp, 23	; 3: 131 197 23
x53707:	jmp strtoul	; 3: 233 124 9

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2747

strtoul_test$112:	; Assign value £temporary2747
x53710:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53714:	mov word [bp + 33], @6197$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 0 218

strtoul_test$115:	; Parameter 27 text 8
x53719:	mov [bp + 35], bp	; 3: 137 110 35
x53722:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x53726:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53730:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x53734:	mov ax, [bp + 21]	; 3: 139 70 21
x53737:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x53740:	mov ax, [bp + 6]	; 3: 139 70 6
x53743:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x53746:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 5 210
x53751:	mov [bp + 29], bp	; 3: 137 110 29
x53754:	add bp, 27	; 3: 131 197 27
x53757:	mov di, bp	; 2: 137 239
x53759:	add di, 10	; 3: 131 199 10
x53762:	jmp printf	; 3: 233 255 58

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x53765:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x53770:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x53774:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x53778:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x53782:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x53786:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x53790:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x53794:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x53798:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x53802:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x53806:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x53810:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x53814:	mov [bp + 27], bp	; 3: 137 110 27
x53817:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2760 pointer
x53821:	mov si, bp	; 2: 137 238
x53823:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2760 8
x53826:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x53829:	mov ax, [bp + 6]	; 3: 139 70 6
x53832:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x53835:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 89 210
x53840:	mov [bp + 23], bp	; 3: 137 110 23
x53843:	add bp, 21	; 3: 131 197 21
x53846:	jmp strtoul	; 3: 233 241 8

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2761

strtoul_test$141:	; Assign value £temporary2761
x53849:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53853:	mov word [bp + 31], @6241$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 22 218

strtoul_test$144:	; Parameter 25 text 8
x53858:	mov [bp + 33], bp	; 3: 137 110 33
x53861:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x53865:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53869:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x53873:	mov ax, [bp + 19]	; 3: 139 70 19
x53876:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x53879:	mov ax, [bp + 6]	; 3: 139 70 6
x53882:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x53885:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 144 210
x53890:	mov [bp + 27], bp	; 3: 137 110 27
x53893:	add bp, 25	; 3: 131 197 25
x53896:	mov di, bp	; 2: 137 239
x53898:	add di, 10	; 3: 131 199 10
x53901:	jmp printf	; 3: 233 116 58

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x53904:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x53909:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x53913:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x53917:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x53921:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x53925:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x53929:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x53933:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x53937:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x53941:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x53945:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x53949:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x53953:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x53957:	mov [bp + 28], bp	; 3: 137 110 28
x53960:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2775 pointer
x53964:	mov si, bp	; 2: 137 238
x53966:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2775 8
x53969:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x53972:	mov ax, [bp + 6]	; 3: 139 70 6
x53975:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x53978:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 232 210
x53983:	mov [bp + 24], bp	; 3: 137 110 24
x53986:	add bp, 22	; 3: 131 197 22
x53989:	jmp strtoul	; 3: 233 98 8

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2776

strtoul_test$171:	; Assign value £temporary2776
x53992:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53996:	mov word [bp + 32], @6288$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 44 218

strtoul_test$174:	; Parameter 26 text 8
x54001:	mov [bp + 34], bp	; 3: 137 110 34
x54004:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x54008:	mov eax, [bp + 22]	; 4: 102 139 70 22
x54012:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x54016:	mov ax, [bp + 20]	; 3: 139 70 20
x54019:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x54022:	mov ax, [bp + 6]	; 3: 139 70 6
x54025:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x54028:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 31 211
x54033:	mov [bp + 28], bp	; 3: 137 110 28
x54036:	add bp, 26	; 3: 131 197 26
x54039:	mov di, bp	; 2: 137 239
x54041:	add di, 10	; 3: 131 199 10
x54044:	jmp printf	; 3: 233 229 57

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x54047:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x54052:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x54056:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x54060:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x54064:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x54068:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x54072:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x54076:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x54080:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x54084:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x54088:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x54092:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x54096:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x54100:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x54104:	mov [bp + 29], bp	; 3: 137 110 29
x54107:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2791 pointer
x54111:	mov si, bp	; 2: 137 238
x54113:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2791 8
x54116:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x54119:	mov ax, [bp + 6]	; 3: 139 70 6
x54122:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x54125:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 123 211
x54130:	mov [bp + 25], bp	; 3: 137 110 25
x54133:	add bp, 23	; 3: 131 197 23
x54136:	jmp strtoul	; 3: 233 207 7

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2792

strtoul_test$202:	; Assign value £temporary2792
x54139:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54143:	mov word [bp + 33], @6338$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 66 218

strtoul_test$205:	; Parameter 27 text 8
x54148:	mov [bp + 35], bp	; 3: 137 110 35
x54151:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x54155:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54159:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x54163:	mov ax, [bp + 21]	; 3: 139 70 21
x54166:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x54169:	mov ax, [bp + 6]	; 3: 139 70 6
x54172:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x54175:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 178 211
x54180:	mov [bp + 29], bp	; 3: 137 110 29
x54183:	add bp, 27	; 3: 131 197 27
x54186:	mov di, bp	; 2: 137 239
x54188:	add di, 10	; 3: 131 199 10
x54191:	jmp printf	; 3: 233 82 57

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x54194:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x54199:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x54203:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x54207:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x54211:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x54215:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x54219:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x54223:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x54227:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x54231:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x54235:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x54239:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x54243:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x54247:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x54251:	mov [bp + 29], bp	; 3: 137 110 29
x54254:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2807 pointer
x54258:	mov si, bp	; 2: 137 238
x54260:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2807 8
x54263:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x54266:	mov ax, [bp + 6]	; 3: 139 70 6
x54269:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x54272:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 14 212
x54277:	mov [bp + 25], bp	; 3: 137 110 25
x54280:	add bp, 23	; 3: 131 197 23
x54283:	jmp strtoul	; 3: 233 60 7

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2808

strtoul_test$233:	; Assign value £temporary2808
x54286:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54290:	mov word [bp + 33], @6388$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 88 218

strtoul_test$236:	; Parameter 27 text 8
x54295:	mov [bp + 35], bp	; 3: 137 110 35
x54298:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x54302:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54306:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x54310:	mov ax, [bp + 21]	; 3: 139 70 21
x54313:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x54316:	mov ax, [bp + 6]	; 3: 139 70 6
x54319:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x54322:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 69 212
x54327:	mov [bp + 29], bp	; 3: 137 110 29
x54330:	add bp, 27	; 3: 131 197 27
x54333:	mov di, bp	; 2: 137 239
x54335:	add di, 10	; 3: 131 199 10
x54338:	jmp printf	; 3: 233 191 56

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x54341:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x54346:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x54350:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x54354:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x54358:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x54362:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x54366:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x54370:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x54374:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x54378:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x54382:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x54386:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x54390:	mov [bp + 27], bp	; 3: 137 110 27
x54393:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2821 pointer
x54397:	mov si, bp	; 2: 137 238
x54399:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2821 8
x54402:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x54405:	mov ax, [bp + 6]	; 3: 139 70 6
x54408:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x54411:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 153 212
x54416:	mov [bp + 23], bp	; 3: 137 110 23
x54419:	add bp, 21	; 3: 131 197 21
x54422:	jmp strtoul	; 3: 233 177 6

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2822

strtoul_test$262:	; Assign value £temporary2822
x54425:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54429:	mov word [bp + 31], @6432$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 110 218

strtoul_test$265:	; Parameter 25 text 8
x54434:	mov [bp + 33], bp	; 3: 137 110 33
x54437:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x54441:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54445:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x54449:	mov ax, [bp + 19]	; 3: 139 70 19
x54452:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x54455:	mov ax, [bp + 6]	; 3: 139 70 6
x54458:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x54461:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 208 212
x54466:	mov [bp + 27], bp	; 3: 137 110 27
x54469:	add bp, 25	; 3: 131 197 25
x54472:	mov di, bp	; 2: 137 239
x54474:	add di, 10	; 3: 131 199 10
x54477:	jmp printf	; 3: 233 52 56

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x54480:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x54485:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x54489:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x54493:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x54497:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x54501:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x54505:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x54509:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x54513:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x54517:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x54521:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x54525:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x54529:	mov [bp + 27], bp	; 3: 137 110 27
x54532:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary2835 pointer
x54536:	mov si, bp	; 2: 137 238
x54538:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary2835 8
x54541:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x54544:	mov ax, [bp + 6]	; 3: 139 70 6
x54547:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x54550:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 36 213
x54555:	mov [bp + 23], bp	; 3: 137 110 23
x54558:	add bp, 21	; 3: 131 197 21
x54561:	jmp strtoul	; 3: 233 38 6

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary2836

strtoul_test$291:	; Assign value £temporary2836
x54564:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54568:	mov word [bp + 31], @6476$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 132 218

strtoul_test$294:	; Parameter 25 text 8
x54573:	mov [bp + 33], bp	; 3: 137 110 33
x54576:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x54580:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54584:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x54588:	mov ax, [bp + 19]	; 3: 139 70 19
x54591:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x54594:	mov ax, [bp + 6]	; 3: 139 70 6
x54597:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x54600:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 91 213
x54605:	mov [bp + 27], bp	; 3: 137 110 27
x54608:	add bp, 25	; 3: 131 197 25
x54611:	mov di, bp	; 2: 137 239
x54613:	add di, 10	; 3: 131 199 10
x54616:	jmp printf	; 3: 233 169 55

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x54619:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x54624:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x54628:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x54632:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x54636:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x54640:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x54644:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x54648:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x54652:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x54656:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x54660:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x54664:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x54668:	mov [bp + 27], bp	; 3: 137 110 27
x54671:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary2849 pointer
x54675:	mov si, bp	; 2: 137 238
x54677:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary2849 8
x54680:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x54683:	mov ax, [bp + 6]	; 3: 139 70 6
x54686:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x54689:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 175 213
x54694:	mov [bp + 23], bp	; 3: 137 110 23
x54697:	add bp, 21	; 3: 131 197 21
x54700:	jmp strtoul	; 3: 233 155 5

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary2850

strtoul_test$320:	; Assign value £temporary2850
x54703:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54707:	mov word [bp + 31], @6520$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 154 218

strtoul_test$323:	; Parameter 25 text 8
x54712:	mov [bp + 33], bp	; 3: 137 110 33
x54715:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x54719:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54723:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x54727:	mov ax, [bp + 19]	; 3: 139 70 19
x54730:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x54733:	mov ax, [bp + 6]	; 3: 139 70 6
x54736:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x54739:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 230 213
x54744:	mov [bp + 27], bp	; 3: 137 110 27
x54747:	add bp, 25	; 3: 131 197 25
x54750:	mov di, bp	; 2: 137 239
x54752:	add di, 10	; 3: 131 199 10
x54755:	jmp printf	; 3: 233 30 55

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x54758:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x54763:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x54767:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x54771:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x54775:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x54779:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x54783:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x54787:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x54791:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x54795:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x54799:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x54803:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x54807:	mov [bp + 27], bp	; 3: 137 110 27
x54810:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary2863 pointer
x54814:	mov si, bp	; 2: 137 238
x54816:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary2863 8
x54819:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x54822:	mov ax, [bp + 6]	; 3: 139 70 6
x54825:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x54828:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 58 214
x54833:	mov [bp + 23], bp	; 3: 137 110 23
x54836:	add bp, 21	; 3: 131 197 21
x54839:	jmp strtoul	; 3: 233 16 5

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary2864

strtoul_test$349:	; Assign value £temporary2864
x54842:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54846:	mov word [bp + 31], @6564$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 176 218

strtoul_test$352:	; Parameter 25 text 8
x54851:	mov [bp + 33], bp	; 3: 137 110 33
x54854:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x54858:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54862:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x54866:	mov ax, [bp + 19]	; 3: 139 70 19
x54869:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x54872:	mov ax, [bp + 6]	; 3: 139 70 6
x54875:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x54878:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 113 214
x54883:	mov [bp + 27], bp	; 3: 137 110 27
x54886:	add bp, 25	; 3: 131 197 25
x54889:	mov di, bp	; 2: 137 239
x54891:	add di, 10	; 3: 131 199 10
x54894:	jmp printf	; 3: 233 147 54

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x54897:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x54902:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x54906:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x54910:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x54914:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x54918:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x54922:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x54926:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x54930:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x54934:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x54938:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x54942:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x54946:	mov [bp + 27], bp	; 3: 137 110 27
x54949:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary2877 pointer
x54953:	mov si, bp	; 2: 137 238
x54955:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary2877 8
x54958:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x54961:	mov ax, [bp + 6]	; 3: 139 70 6
x54964:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x54967:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 197 214
x54972:	mov [bp + 23], bp	; 3: 137 110 23
x54975:	add bp, 21	; 3: 131 197 21
x54978:	jmp strtoul	; 3: 233 133 4

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary2878

strtoul_test$378:	; Assign value £temporary2878
x54981:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54985:	mov word [bp + 31], @6608$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 198 218

strtoul_test$381:	; Parameter 25 text 8
x54990:	mov [bp + 33], bp	; 3: 137 110 33
x54993:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x54997:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55001:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x55005:	mov ax, [bp + 19]	; 3: 139 70 19
x55008:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x55011:	mov ax, [bp + 6]	; 3: 139 70 6
x55014:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x55017:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 252 214
x55022:	mov [bp + 27], bp	; 3: 137 110 27
x55025:	add bp, 25	; 3: 131 197 25
x55028:	mov di, bp	; 2: 137 239
x55030:	add di, 10	; 3: 131 199 10
x55033:	jmp printf	; 3: 233 8 54

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x55036:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x55041:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x55045:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x55049:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x55053:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x55057:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x55061:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x55065:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x55069:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x55073:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x55077:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x55081:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x55085:	mov [bp + 27], bp	; 3: 137 110 27
x55088:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary2891 pointer
x55092:	mov si, bp	; 2: 137 238
x55094:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary2891 8
x55097:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x55100:	mov ax, [bp + 6]	; 3: 139 70 6
x55103:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x55106:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 80 215
x55111:	mov [bp + 23], bp	; 3: 137 110 23
x55114:	add bp, 21	; 3: 131 197 21
x55117:	jmp strtoul	; 3: 233 250 3

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary2892

strtoul_test$407:	; Assign value £temporary2892
x55120:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55124:	mov word [bp + 31], @6652$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 220 218

strtoul_test$410:	; Parameter 25 text 8
x55129:	mov [bp + 33], bp	; 3: 137 110 33
x55132:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x55136:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55140:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x55144:	mov ax, [bp + 19]	; 3: 139 70 19
x55147:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x55150:	mov ax, [bp + 6]	; 3: 139 70 6
x55153:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x55156:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 135 215
x55161:	mov [bp + 27], bp	; 3: 137 110 27
x55164:	add bp, 25	; 3: 131 197 25
x55167:	mov di, bp	; 2: 137 239
x55169:	add di, 10	; 3: 131 199 10
x55172:	jmp printf	; 3: 233 125 53

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x55175:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x55180:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x55184:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x55188:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x55192:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x55196:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x55200:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x55204:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x55208:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x55212:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x55216:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x55220:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x55224:	mov [bp + 27], bp	; 3: 137 110 27
x55227:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary2905 pointer
x55231:	mov si, bp	; 2: 137 238
x55233:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary2905 8
x55236:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x55239:	mov ax, [bp + 6]	; 3: 139 70 6
x55242:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x55245:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 219 215
x55250:	mov [bp + 23], bp	; 3: 137 110 23
x55253:	add bp, 21	; 3: 131 197 21
x55256:	jmp strtoul	; 3: 233 111 3

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary2906

strtoul_test$436:	; Assign value £temporary2906
x55259:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55263:	mov word [bp + 31], @6696$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 242 218

strtoul_test$439:	; Parameter 25 text 8
x55268:	mov [bp + 33], bp	; 3: 137 110 33
x55271:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x55275:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55279:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x55283:	mov ax, [bp + 19]	; 3: 139 70 19
x55286:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x55289:	mov ax, [bp + 6]	; 3: 139 70 6
x55292:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x55295:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 18 216
x55300:	mov [bp + 27], bp	; 3: 137 110 27
x55303:	add bp, 25	; 3: 131 197 25
x55306:	mov di, bp	; 2: 137 239
x55308:	add di, 10	; 3: 131 199 10
x55311:	jmp printf	; 3: 233 242 52

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x55314:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x55319:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x55323:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x55327:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x55331:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x55335:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x55339:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x55343:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x55347:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x55351:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x55355:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x55359:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x55363:	mov [bp + 27], bp	; 3: 137 110 27
x55366:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary2919 pointer
x55370:	mov si, bp	; 2: 137 238
x55372:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary2919 8
x55375:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x55378:	mov ax, [bp + 6]	; 3: 139 70 6
x55381:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x55384:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 102 216
x55389:	mov [bp + 23], bp	; 3: 137 110 23
x55392:	add bp, 21	; 3: 131 197 21
x55395:	jmp strtoul	; 3: 233 228 2

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary2920

strtoul_test$465:	; Assign value £temporary2920
x55398:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55402:	mov word [bp + 31], @6740$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 8 219

strtoul_test$468:	; Parameter 25 text 8
x55407:	mov [bp + 33], bp	; 3: 137 110 33
x55410:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x55414:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55418:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x55422:	mov ax, [bp + 19]	; 3: 139 70 19
x55425:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x55428:	mov ax, [bp + 6]	; 3: 139 70 6
x55431:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x55434:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 157 216
x55439:	mov [bp + 27], bp	; 3: 137 110 27
x55442:	add bp, 25	; 3: 131 197 25
x55445:	mov di, bp	; 2: 137 239
x55447:	add di, 10	; 3: 131 199 10
x55450:	jmp printf	; 3: 233 103 52

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x55453:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x55458:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x55462:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x55466:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x55470:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x55474:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x55478:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x55482:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x55486:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x55490:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x55494:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x55498:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x55502:	mov [bp + 27], bp	; 3: 137 110 27
x55505:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary2933 pointer
x55509:	mov si, bp	; 2: 137 238
x55511:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary2933 8
x55514:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x55517:	mov ax, [bp + 6]	; 3: 139 70 6
x55520:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x55523:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 241 216
x55528:	mov [bp + 23], bp	; 3: 137 110 23
x55531:	add bp, 21	; 3: 131 197 21
x55534:	jmp strtoul	; 3: 233 89 2

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary2934

strtoul_test$494:	; Assign value £temporary2934
x55537:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55541:	mov word [bp + 31], @6784$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 30 219

strtoul_test$497:	; Parameter 25 text 8
x55546:	mov [bp + 33], bp	; 3: 137 110 33
x55549:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x55553:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55557:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x55561:	mov ax, [bp + 19]	; 3: 139 70 19
x55564:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x55567:	mov ax, [bp + 6]	; 3: 139 70 6
x55570:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x55573:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 40 217
x55578:	mov [bp + 27], bp	; 3: 137 110 27
x55581:	add bp, 25	; 3: 131 197 25
x55584:	mov di, bp	; 2: 137 239
x55586:	add di, 10	; 3: 131 199 10
x55589:	jmp printf	; 3: 233 220 51

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x55592:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x55597:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x55601:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x55605:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x55609:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x55613:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x55617:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x55621:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x55625:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x55629:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x55633:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x55637:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x55641:	mov [bp + 27], bp	; 3: 137 110 27
x55644:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary2947 pointer
x55648:	mov si, bp	; 2: 137 238
x55650:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary2947 8
x55653:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x55656:	mov ax, [bp + 6]	; 3: 139 70 6
x55659:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x55662:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 124 217
x55667:	mov [bp + 23], bp	; 3: 137 110 23
x55670:	add bp, 21	; 3: 131 197 21
x55673:	jmp strtoul	; 3: 233 206 1

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary2948

strtoul_test$523:	; Assign value £temporary2948
x55676:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55680:	mov word [bp + 31], @6828$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 52 219

strtoul_test$526:	; Parameter 25 text 8
x55685:	mov [bp + 33], bp	; 3: 137 110 33
x55688:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x55692:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55696:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x55700:	mov ax, [bp + 19]	; 3: 139 70 19
x55703:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x55706:	mov ax, [bp + 6]	; 3: 139 70 6
x55709:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x55712:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 179 217
x55717:	mov [bp + 27], bp	; 3: 137 110 27
x55720:	add bp, 25	; 3: 131 197 25
x55723:	mov di, bp	; 2: 137 239
x55725:	add di, 10	; 3: 131 199 10
x55728:	jmp printf	; 3: 233 81 51

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x55731:	mov ax, [bp]	; 3: 139 70 0
x55734:	mov di, [bp + 4]	; 3: 139 126 4
x55737:	mov bp, [bp + 2]	; 3: 139 110 2
x55740:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

@6050$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55742:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6097$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55764:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6147$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55786:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6197$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55808:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6241$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55830:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6288$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55852:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6338$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55874:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6388$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55896:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6432$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55918:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6476$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55940:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6520$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55962:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6564$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55984:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6608$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56006:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6652$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56028:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6696$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56050:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6740$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56072:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6784$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56094:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6828$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56116:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtoul:	; Assign g_inStatus 1
x56138:	mov word [g_inStatus], 1	; 6: 199 6 74 96 1 0

strtoul$1:	; Assign g_inDevice s
x56144:	mov ax, [bp + 6]	; 3: 139 70 6
x56147:	mov [g_inDevice], ax	; 3: 163 76 96

strtoul$2:	; Assign g_inChars 0
x56150:	mov word [g_inChars], 0	; 6: 199 6 111 101 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x56156:	mov ax, [bp + 10]	; 3: 139 70 10
x56159:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x56162:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 112 219
x56167:	mov [bp + 14], bp	; 3: 137 110 14
x56170:	add bp, 12	; 3: 131 197 12
x56173:	jmp scanUnsignedLongInt	; 3: 233 46 145

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2244

strtoul$8:	; Assign unsignedLongValue £temporary2244
x56176:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x56180:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x56184:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2246 -> endp endp 0
x56186:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2246 -> endp s g_inChars
x56189:	mov ax, [bp + 6]	; 3: 139 70 6
x56192:	add ax, [g_inChars]	; 4: 3 6 111 101
x56196:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x56198:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x56202:	mov ax, [bp]	; 3: 139 70 0
x56205:	mov di, [bp + 4]	; 3: 139 126 4
x56208:	mov bp, [bp + 2]	; 3: 139 110 2
x56211:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x56213:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x56217:	mov word [bp + 6], character_test$3	; 5: 199 70 6 167 219
x56222:	mov [bp + 8], bp	; 3: 137 110 8
x56225:	add bp, 6	; 3: 131 197 6
x56228:	nop	; 1: 144
x56229:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x56231:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x56235:	mov word [bp + 6], character_test$7	; 5: 199 70 6 185 219
x56240:	mov [bp + 8], bp	; 3: 137 110 8
x56243:	add bp, 6	; 3: 131 197 6
x56246:	nop	; 1: 144
x56247:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x56249:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x56253:	mov word [bp + 6], character_test$11	; 5: 199 70 6 203 219
x56258:	mov [bp + 8], bp	; 3: 137 110 8
x56261:	add bp, 6	; 3: 131 197 6
x56264:	nop	; 1: 144
x56265:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x56267:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x56271:	mov word [bp + 6], character_test$15	; 5: 199 70 6 221 219
x56276:	mov [bp + 8], bp	; 3: 137 110 8
x56279:	add bp, 6	; 3: 131 197 6
x56282:	nop	; 1: 144
x56283:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x56285:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x56289:	mov word [bp + 6], character_test$19	; 5: 199 70 6 239 219
x56294:	mov [bp + 8], bp	; 3: 137 110 8
x56297:	add bp, 6	; 3: 131 197 6
x56300:	nop	; 1: 144
x56301:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x56303:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x56307:	mov word [bp + 6], character_test$23	; 5: 199 70 6 1 220
x56312:	mov [bp + 8], bp	; 3: 137 110 8
x56315:	add bp, 6	; 3: 131 197 6
x56318:	nop	; 1: 144
x56319:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x56321:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x56325:	mov word [bp + 6], character_test$27	; 5: 199 70 6 19 220
x56330:	mov [bp + 8], bp	; 3: 137 110 8
x56333:	add bp, 6	; 3: 131 197 6
x56336:	nop	; 1: 144
x56337:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x56339:	mov ax, [bp]	; 3: 139 70 0
x56342:	mov di, [bp + 4]	; 3: 139 126 4
x56345:	mov bp, [bp + 2]	; 3: 139 110 2
x56348:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x56350:	mov word [bp + 13], @9049$string_ascii2025i0A#	; 5: 199 70 13 220 224

character_testX$2:	; IntegralToIntegral £temporary4069 c
x56355:	mov al, [bp + 6]	; 3: 138 70 6
x56358:	and ax, 255	; 3: 37 255 0
x56361:	cmp al, 0	; 2: 60 0
x56363:	jge character_testX$3	; 2: 125 4
x56365:	neg al	; 2: 246 216
x56367:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4069 8
x56369:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x56372:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 71 220
x56377:	mov [bp + 9], bp	; 3: 137 110 9
x56380:	add bp, 7	; 3: 131 197 7
x56383:	mov di, bp	; 2: 137 239
x56385:	add di, 2	; 3: 131 199 2
x56388:	jmp printf	; 3: 233 189 48

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x56391:	mov word [bp + 13], @9052$string_islower282725c2729203D2025s0A#	; 5: 199 70 13 230 224

character_testX$8:	; IntegralToIntegral £temporary4071 c
x56396:	mov al, [bp + 6]	; 3: 138 70 6
x56399:	and ax, 255	; 3: 37 255 0
x56402:	cmp al, 0	; 2: 60 0
x56404:	jge character_testX$9	; 2: 125 4
x56406:	neg al	; 2: 246 216
x56408:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4071 8
x56410:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4072 c
x56413:	mov al, [bp + 6]	; 3: 138 70 6
x56416:	and ax, 255	; 3: 37 255 0
x56419:	cmp al, 0	; 2: 60 0
x56421:	jge character_testX$12	; 2: 125 4
x56423:	neg al	; 2: 246 216
x56425:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4072 16
x56427:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x56430:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 124 220
x56435:	mov [bp + 19], bp	; 3: 137 110 19
x56438:	add bp, 17	; 3: 131 197 17
x56441:	jmp islower	; 3: 233 185 142

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4073

character_testX$16:	; Equal 19 £temporary4073 0
x56444:	cmp bx, 0	; 3: 131 251 0
x56447:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4078 string_Yes#
x56449:	mov ax, @9059$string_Yes#	; 3: 184 250 224

character_testX$18:	; Goto 20
x56452:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4078 string_No#
x56454:	mov ax, @9060$string_No#	; 3: 184 254 224

character_testX$20:	; Parameter 7 £temporary4078 10
x56457:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x56460:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 159 220
x56465:	mov [bp + 9], bp	; 3: 137 110 9
x56468:	add bp, 7	; 3: 131 197 7
x56471:	mov di, bp	; 2: 137 239
x56473:	add di, 4	; 3: 131 199 4
x56476:	jmp printf	; 3: 233 101 48

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x56479:	mov word [bp + 13], @9068$string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 1 225

character_testX$25:	; IntegralToIntegral £temporary4080 c
x56484:	mov al, [bp + 6]	; 3: 138 70 6
x56487:	and ax, 255	; 3: 37 255 0
x56490:	cmp al, 0	; 2: 60 0
x56492:	jge character_testX$26	; 2: 125 4
x56494:	neg al	; 2: 246 216
x56496:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4080 8
x56498:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4081 c
x56501:	mov al, [bp + 6]	; 3: 138 70 6
x56504:	and ax, 255	; 3: 37 255 0
x56507:	cmp al, 0	; 2: 60 0
x56509:	jge character_testX$29	; 2: 125 4
x56511:	neg al	; 2: 246 216
x56513:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4081 16
x56515:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x56518:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 212 220
x56523:	mov [bp + 19], bp	; 3: 137 110 19
x56526:	add bp, 17	; 3: 131 197 17
x56529:	jmp isupper	; 3: 233 56 65

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4082

character_testX$33:	; Equal 36 £temporary4082 0
x56532:	cmp bx, 0	; 3: 131 251 0
x56535:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4087 string_Yes#
x56537:	mov ax, @9075$string_Yes#	; 3: 184 21 225

character_testX$35:	; Goto 37
x56540:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4087 string_No#
x56542:	mov ax, @9076$string_No#	; 3: 184 25 225

character_testX$37:	; Parameter 7 £temporary4087 10
x56545:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x56548:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 247 220
x56553:	mov [bp + 9], bp	; 3: 137 110 9
x56556:	add bp, 7	; 3: 131 197 7
x56559:	mov di, bp	; 2: 137 239
x56561:	add di, 4	; 3: 131 199 4
x56564:	jmp printf	; 3: 233 13 48

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x56567:	mov word [bp + 13], @9084$string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 28 225

character_testX$42:	; IntegralToIntegral £temporary4089 c
x56572:	mov al, [bp + 6]	; 3: 138 70 6
x56575:	and ax, 255	; 3: 37 255 0
x56578:	cmp al, 0	; 2: 60 0
x56580:	jge character_testX$43	; 2: 125 4
x56582:	neg al	; 2: 246 216
x56584:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4089 8
x56586:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4090 c
x56589:	mov al, [bp + 6]	; 3: 138 70 6
x56592:	and ax, 255	; 3: 37 255 0
x56595:	cmp al, 0	; 2: 60 0
x56597:	jge character_testX$46	; 2: 125 4
x56599:	neg al	; 2: 246 216
x56601:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4090 16
x56603:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x56606:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 44 221
x56611:	mov [bp + 19], bp	; 3: 137 110 19
x56614:	add bp, 17	; 3: 131 197 17
x56617:	jmp isalpha	; 3: 233 17 5

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4091

character_testX$50:	; Equal 53 £temporary4091 0
x56620:	cmp bx, 0	; 3: 131 251 0
x56623:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4096 string_Yes#
x56625:	mov ax, @9091$string_Yes#	; 3: 184 48 225

character_testX$52:	; Goto 54
x56628:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4096 string_No#
x56630:	mov ax, @9092$string_No#	; 3: 184 52 225

character_testX$54:	; Parameter 7 £temporary4096 10
x56633:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x56636:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 79 221
x56641:	mov [bp + 9], bp	; 3: 137 110 9
x56644:	add bp, 7	; 3: 131 197 7
x56647:	mov di, bp	; 2: 137 239
x56649:	add di, 4	; 3: 131 199 4
x56652:	jmp printf	; 3: 233 181 47

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x56655:	mov word [bp + 13], @9100$string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 55 225

character_testX$59:	; IntegralToIntegral £temporary4098 c
x56660:	mov al, [bp + 6]	; 3: 138 70 6
x56663:	and ax, 255	; 3: 37 255 0
x56666:	cmp al, 0	; 2: 60 0
x56668:	jge character_testX$60	; 2: 125 4
x56670:	neg al	; 2: 246 216
x56672:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4098 8
x56674:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4099 c
x56677:	mov al, [bp + 6]	; 3: 138 70 6
x56680:	and ax, 255	; 3: 37 255 0
x56683:	cmp al, 0	; 2: 60 0
x56685:	jge character_testX$63	; 2: 125 4
x56687:	neg al	; 2: 246 216
x56689:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4099 16
x56691:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x56694:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 132 221
x56699:	mov [bp + 19], bp	; 3: 137 110 19
x56702:	add bp, 17	; 3: 131 197 17
x56705:	jmp isdigit	; 3: 233 232 77

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4100

character_testX$67:	; Equal 70 £temporary4100 0
x56708:	cmp bx, 0	; 3: 131 251 0
x56711:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4105 string_Yes#
x56713:	mov ax, @9107$string_Yes#	; 3: 184 75 225

character_testX$69:	; Goto 71
x56716:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4105 string_No#
x56718:	mov ax, @9108$string_No#	; 3: 184 79 225

character_testX$71:	; Parameter 7 £temporary4105 10
x56721:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x56724:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 167 221
x56729:	mov [bp + 9], bp	; 3: 137 110 9
x56732:	add bp, 7	; 3: 131 197 7
x56735:	mov di, bp	; 2: 137 239
x56737:	add di, 4	; 3: 131 199 4
x56740:	jmp printf	; 3: 233 93 47

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x56743:	mov word [bp + 13], @9116$string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 82 225

character_testX$76:	; IntegralToIntegral £temporary4107 c
x56748:	mov al, [bp + 6]	; 3: 138 70 6
x56751:	and ax, 255	; 3: 37 255 0
x56754:	cmp al, 0	; 2: 60 0
x56756:	jge character_testX$77	; 2: 125 4
x56758:	neg al	; 2: 246 216
x56760:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4107 8
x56762:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4108 c
x56765:	mov al, [bp + 6]	; 3: 138 70 6
x56768:	and ax, 255	; 3: 37 255 0
x56771:	cmp al, 0	; 2: 60 0
x56773:	jge character_testX$80	; 2: 125 4
x56775:	neg al	; 2: 246 216
x56777:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4108 16
x56779:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x56782:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 220 221
x56787:	mov [bp + 19], bp	; 3: 137 110 19
x56790:	add bp, 17	; 3: 131 197 17
x56793:	jmp isalnum	; 3: 233 166 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4109

character_testX$84:	; Equal 87 £temporary4109 0
x56796:	cmp bx, 0	; 3: 131 251 0
x56799:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4114 string_Yes#
x56801:	mov ax, @9123$string_Yes#	; 3: 184 102 225

character_testX$86:	; Goto 88
x56804:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4114 string_No#
x56806:	mov ax, @9124$string_No#	; 3: 184 106 225

character_testX$88:	; Parameter 7 £temporary4114 10
x56809:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x56812:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 255 221
x56817:	mov [bp + 9], bp	; 3: 137 110 9
x56820:	add bp, 7	; 3: 131 197 7
x56823:	mov di, bp	; 2: 137 239
x56825:	add di, 4	; 3: 131 199 4
x56828:	jmp printf	; 3: 233 5 47

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x56831:	mov word [bp + 13], @9132$string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 109 225

character_testX$93:	; IntegralToIntegral £temporary4116 c
x56836:	mov al, [bp + 6]	; 3: 138 70 6
x56839:	and ax, 255	; 3: 37 255 0
x56842:	cmp al, 0	; 2: 60 0
x56844:	jge character_testX$94	; 2: 125 4
x56846:	neg al	; 2: 246 216
x56848:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4116 8
x56850:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4117 c
x56853:	mov al, [bp + 6]	; 3: 138 70 6
x56856:	and ax, 255	; 3: 37 255 0
x56859:	cmp al, 0	; 2: 60 0
x56861:	jge character_testX$97	; 2: 125 4
x56863:	neg al	; 2: 246 216
x56865:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4117 16
x56867:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x56870:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 52 222
x56875:	mov [bp + 19], bp	; 3: 137 110 19
x56878:	add bp, 17	; 3: 131 197 17
x56881:	jmp isxdigit	; 3: 233 147 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4118

character_testX$101:	; Equal 104 £temporary4118 0
x56884:	cmp bx, 0	; 3: 131 251 0
x56887:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4123 string_Yes#
x56889:	mov ax, @9139$string_Yes#	; 3: 184 130 225

character_testX$103:	; Goto 105
x56892:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4123 string_No#
x56894:	mov ax, @9140$string_No#	; 3: 184 134 225

character_testX$105:	; Parameter 7 £temporary4123 10
x56897:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x56900:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 87 222
x56905:	mov [bp + 9], bp	; 3: 137 110 9
x56908:	add bp, 7	; 3: 131 197 7
x56911:	mov di, bp	; 2: 137 239
x56913:	add di, 4	; 3: 131 199 4
x56916:	jmp printf	; 3: 233 173 46

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x56919:	mov word [bp + 13], @9148$string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 137 225

character_testX$110:	; IntegralToIntegral £temporary4125 c
x56924:	mov al, [bp + 6]	; 3: 138 70 6
x56927:	and ax, 255	; 3: 37 255 0
x56930:	cmp al, 0	; 2: 60 0
x56932:	jge character_testX$111	; 2: 125 4
x56934:	neg al	; 2: 246 216
x56936:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4125 8
x56938:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4126 c
x56941:	mov al, [bp + 6]	; 3: 138 70 6
x56944:	and ax, 255	; 3: 37 255 0
x56947:	cmp al, 0	; 2: 60 0
x56949:	jge character_testX$114	; 2: 125 4
x56951:	neg al	; 2: 246 216
x56953:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4126 16
x56955:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x56958:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 140 222
x56963:	mov [bp + 19], bp	; 3: 137 110 19
x56966:	add bp, 17	; 3: 131 197 17
x56969:	jmp isgraph	; 3: 233 127 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4127

character_testX$118:	; Equal 121 £temporary4127 0
x56972:	cmp bx, 0	; 3: 131 251 0
x56975:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4132 string_Yes#
x56977:	mov ax, @9155$string_Yes#	; 3: 184 157 225

character_testX$120:	; Goto 122
x56980:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4132 string_No#
x56982:	mov ax, @9156$string_No#	; 3: 184 161 225

character_testX$122:	; Parameter 7 £temporary4132 10
x56985:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x56988:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 175 222
x56993:	mov [bp + 9], bp	; 3: 137 110 9
x56996:	add bp, 7	; 3: 131 197 7
x56999:	mov di, bp	; 2: 137 239
x57001:	add di, 4	; 3: 131 199 4
x57004:	jmp printf	; 3: 233 85 46

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x57007:	mov word [bp + 13], @9164$string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 164 225

character_testX$127:	; IntegralToIntegral £temporary4134 c
x57012:	mov al, [bp + 6]	; 3: 138 70 6
x57015:	and ax, 255	; 3: 37 255 0
x57018:	cmp al, 0	; 2: 60 0
x57020:	jge character_testX$128	; 2: 125 4
x57022:	neg al	; 2: 246 216
x57024:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4134 8
x57026:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4135 c
x57029:	mov al, [bp + 6]	; 3: 138 70 6
x57032:	and ax, 255	; 3: 37 255 0
x57035:	cmp al, 0	; 2: 60 0
x57037:	jge character_testX$131	; 2: 125 4
x57039:	neg al	; 2: 246 216
x57041:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4135 16
x57043:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x57046:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 228 222
x57051:	mov [bp + 19], bp	; 3: 137 110 19
x57054:	add bp, 17	; 3: 131 197 17
x57057:	jmp isprint	; 3: 233 70 4

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4136

character_testX$135:	; Equal 138 £temporary4136 0
x57060:	cmp bx, 0	; 3: 131 251 0
x57063:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4141 string_Yes#
x57065:	mov ax, @9171$string_Yes#	; 3: 184 184 225

character_testX$137:	; Goto 139
x57068:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4141 string_No#
x57070:	mov ax, @9172$string_No#	; 3: 184 188 225

character_testX$139:	; Parameter 7 £temporary4141 10
x57073:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x57076:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 7 223
x57081:	mov [bp + 9], bp	; 3: 137 110 9
x57084:	add bp, 7	; 3: 131 197 7
x57087:	mov di, bp	; 2: 137 239
x57089:	add di, 4	; 3: 131 199 4
x57092:	jmp printf	; 3: 233 253 45

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x57095:	mov word [bp + 13], @9180$string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 191 225

character_testX$144:	; IntegralToIntegral £temporary4143 c
x57100:	mov al, [bp + 6]	; 3: 138 70 6
x57103:	and ax, 255	; 3: 37 255 0
x57106:	cmp al, 0	; 2: 60 0
x57108:	jge character_testX$145	; 2: 125 4
x57110:	neg al	; 2: 246 216
x57112:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4143 8
x57114:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4144 c
x57117:	mov al, [bp + 6]	; 3: 138 70 6
x57120:	and ax, 255	; 3: 37 255 0
x57123:	cmp al, 0	; 2: 60 0
x57125:	jge character_testX$148	; 2: 125 4
x57127:	neg al	; 2: 246 216
x57129:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4144 16
x57131:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x57134:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 60 223
x57139:	mov [bp + 19], bp	; 3: 137 110 19
x57142:	add bp, 17	; 3: 131 197 17
x57145:	jmp ispunct	; 3: 233 32 4

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4145

character_testX$152:	; Equal 155 £temporary4145 0
x57148:	cmp bx, 0	; 3: 131 251 0
x57151:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4150 string_Yes#
x57153:	mov ax, @9187$string_Yes#	; 3: 184 211 225

character_testX$154:	; Goto 156
x57156:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4150 string_No#
x57158:	mov ax, @9188$string_No#	; 3: 184 215 225

character_testX$156:	; Parameter 7 £temporary4150 10
x57161:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x57164:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 95 223
x57169:	mov [bp + 9], bp	; 3: 137 110 9
x57172:	add bp, 7	; 3: 131 197 7
x57175:	mov di, bp	; 2: 137 239
x57177:	add di, 4	; 3: 131 199 4
x57180:	jmp printf	; 3: 233 165 45

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x57183:	mov word [bp + 13], @9196$string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 218 225

character_testX$161:	; IntegralToIntegral £temporary4152 c
x57188:	mov al, [bp + 6]	; 3: 138 70 6
x57191:	and ax, 255	; 3: 37 255 0
x57194:	cmp al, 0	; 2: 60 0
x57196:	jge character_testX$162	; 2: 125 4
x57198:	neg al	; 2: 246 216
x57200:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4152 8
x57202:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4153 c
x57205:	mov al, [bp + 6]	; 3: 138 70 6
x57208:	and ax, 255	; 3: 37 255 0
x57211:	cmp al, 0	; 2: 60 0
x57213:	jge character_testX$165	; 2: 125 4
x57215:	neg al	; 2: 246 216
x57217:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4153 16
x57219:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x57222:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 148 223
x57227:	mov [bp + 19], bp	; 3: 137 110 19
x57230:	add bp, 17	; 3: 131 197 17
x57233:	jmp iscntrl	; 3: 233 13 4

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4154

character_testX$169:	; Equal 172 £temporary4154 0
x57236:	cmp bx, 0	; 3: 131 251 0
x57239:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4159 string_Yes#
x57241:	mov ax, @9203$string_Yes#	; 3: 184 238 225

character_testX$171:	; Goto 173
x57244:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4159 string_No#
x57246:	mov ax, @9204$string_No#	; 3: 184 242 225

character_testX$173:	; Parameter 7 £temporary4159 10
x57249:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x57252:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 183 223
x57257:	mov [bp + 9], bp	; 3: 137 110 9
x57260:	add bp, 7	; 3: 131 197 7
x57263:	mov di, bp	; 2: 137 239
x57265:	add di, 4	; 3: 131 199 4
x57268:	jmp printf	; 3: 233 77 45

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x57271:	mov word [bp + 13], @9212$string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 245 225

character_testX$178:	; IntegralToIntegral £temporary4161 c
x57276:	mov al, [bp + 6]	; 3: 138 70 6
x57279:	and ax, 255	; 3: 37 255 0
x57282:	cmp al, 0	; 2: 60 0
x57284:	jge character_testX$179	; 2: 125 4
x57286:	neg al	; 2: 246 216
x57288:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4161 8
x57290:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4162 c
x57293:	mov al, [bp + 6]	; 3: 138 70 6
x57296:	and ax, 255	; 3: 37 255 0
x57299:	cmp al, 0	; 2: 60 0
x57301:	jge character_testX$182	; 2: 125 4
x57303:	neg al	; 2: 246 216
x57305:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4162 16
x57307:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x57310:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 236 223
x57315:	mov [bp + 19], bp	; 3: 137 110 19
x57318:	add bp, 17	; 3: 131 197 17
x57321:	jmp isspace	; 3: 233 65 136

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4163

character_testX$186:	; Equal 189 £temporary4163 0
x57324:	cmp bx, 0	; 3: 131 251 0
x57327:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4168 string_Yes#
x57329:	mov ax, @9219$string_Yes#	; 3: 184 9 226

character_testX$188:	; Goto 190
x57332:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4168 string_No#
x57334:	mov ax, @9220$string_No#	; 3: 184 13 226

character_testX$190:	; Parameter 7 £temporary4168 10
x57337:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x57340:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 15 224
x57345:	mov [bp + 9], bp	; 3: 137 110 9
x57348:	add bp, 7	; 3: 131 197 7
x57351:	mov di, bp	; 2: 137 239
x57353:	add di, 4	; 3: 131 199 4
x57356:	jmp printf	; 3: 233 245 44

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x57359:	mov word [bp + 13], @9228$string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 16 226

character_testX$195:	; IntegralToIntegral £temporary4170 c
x57364:	mov al, [bp + 6]	; 3: 138 70 6
x57367:	and ax, 255	; 3: 37 255 0
x57370:	cmp al, 0	; 2: 60 0
x57372:	jge character_testX$196	; 2: 125 4
x57374:	neg al	; 2: 246 216
x57376:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4170 8
x57378:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4171 c
x57381:	mov al, [bp + 6]	; 3: 138 70 6
x57384:	and ax, 255	; 3: 37 255 0
x57387:	cmp al, 0	; 2: 60 0
x57389:	jge character_testX$199	; 2: 125 4
x57391:	neg al	; 2: 246 216
x57393:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4171 16
x57395:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x57398:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 68 224
x57403:	mov [bp + 19], bp	; 3: 137 110 19
x57406:	add bp, 17	; 3: 131 197 17
x57409:	jmp tolower	; 3: 233 218 68

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4172

character_testX$203:	; IntegralToIntegral £temporary4173 £temporary4172
x57412:	cmp bx, 0	; 3: 131 251 0
x57415:	jge character_testX$204	; 2: 125 4
x57417:	neg bx	; 2: 247 219
x57419:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4174 £temporary4173
x57421:	and bx, 255	; 4: 129 227 255 0
x57425:	cmp bl, 0	; 3: 128 251 0
x57428:	jge character_testX$205	; 2: 125 4
x57430:	neg bl	; 2: 246 219
x57432:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4174 10
x57434:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x57437:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 112 224
x57442:	mov [bp + 9], bp	; 3: 137 110 9
x57445:	add bp, 7	; 3: 131 197 7
x57448:	mov di, bp	; 2: 137 239
x57450:	add di, 4	; 3: 131 199 4
x57453:	jmp printf	; 3: 233 148 44

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x57456:	mov word [bp + 13], @9235$string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 38 226

character_testX$210:	; IntegralToIntegral £temporary4176 c
x57461:	mov al, [bp + 6]	; 3: 138 70 6
x57464:	and ax, 255	; 3: 37 255 0
x57467:	cmp al, 0	; 2: 60 0
x57469:	jge character_testX$211	; 2: 125 4
x57471:	neg al	; 2: 246 216
x57473:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4176 8
x57475:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4177 c
x57478:	mov al, [bp + 6]	; 3: 138 70 6
x57481:	and ax, 255	; 3: 37 255 0
x57484:	cmp al, 0	; 2: 60 0
x57486:	jge character_testX$214	; 2: 125 4
x57488:	neg al	; 2: 246 216
x57490:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4177 16
x57492:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x57495:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 165 224
x57500:	mov [bp + 19], bp	; 3: 137 110 19
x57503:	add bp, 17	; 3: 131 197 17
x57506:	jmp toupper	; 3: 233 40 3

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4178

character_testX$218:	; IntegralToIntegral £temporary4179 £temporary4178
x57509:	cmp bx, 0	; 3: 131 251 0
x57512:	jge character_testX$219	; 2: 125 4
x57514:	neg bx	; 2: 247 219
x57516:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4180 £temporary4179
x57518:	and bx, 255	; 4: 129 227 255 0
x57522:	cmp bl, 0	; 3: 128 251 0
x57525:	jge character_testX$220	; 2: 125 4
x57527:	neg bl	; 2: 246 219
x57529:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4180 10
x57531:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x57534:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 209 224
x57539:	mov [bp + 9], bp	; 3: 137 110 9
x57542:	add bp, 7	; 3: 131 197 7
x57545:	mov di, bp	; 2: 137 239
x57547:	add di, 4	; 3: 131 199 4
x57550:	jmp printf	; 3: 233 51 44

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x57553:	mov ax, [bp]	; 3: 139 70 0
x57556:	mov di, [bp + 4]	; 3: 139 126 4
x57559:	mov bp, [bp + 2]	; 3: 139 110 2
x57562:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

@9049$string_ascii2025i0A#:
x57564:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

@9052$string_islower282725c2729203D2025s0A#:
x57574:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9059$string_Yes#:
x57594:	db "Yes", 0	; 4: 89 101 115 0

@9060$string_No#:
x57598:	db "No", 0	; 3: 78 111 0

@9068$string_isupper282725c2729203D2025s0A#:
x57601:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9075$string_Yes#:
x57621:	db "Yes", 0	; 4: 89 101 115 0

@9076$string_No#:
x57625:	db "No", 0	; 3: 78 111 0

@9084$string_isalpha282725c2729203D2025s0A#:
x57628:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

@9091$string_Yes#:
x57648:	db "Yes", 0	; 4: 89 101 115 0

@9092$string_No#:
x57652:	db "No", 0	; 3: 78 111 0

@9100$string_isdigit282725c2729203D2025s0A#:
x57655:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9107$string_Yes#:
x57675:	db "Yes", 0	; 4: 89 101 115 0

@9108$string_No#:
x57679:	db "No", 0	; 3: 78 111 0

@9116$string_isalnum282725c2729203D2025s0A#:
x57682:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

@9123$string_Yes#:
x57702:	db "Yes", 0	; 4: 89 101 115 0

@9124$string_No#:
x57706:	db "No", 0	; 3: 78 111 0

@9132$string_isxdigit282725c2729203D2025s0A#:
x57709:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9139$string_Yes#:
x57730:	db "Yes", 0	; 4: 89 101 115 0

@9140$string_No#:
x57734:	db "No", 0	; 3: 78 111 0

@9148$string_isgraph282725c2729203D2025s0A#:
x57737:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

@9155$string_Yes#:
x57757:	db "Yes", 0	; 4: 89 101 115 0

@9156$string_No#:
x57761:	db "No", 0	; 3: 78 111 0

@9164$string_isprint282725c2729203D2025s0A#:
x57764:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9171$string_Yes#:
x57784:	db "Yes", 0	; 4: 89 101 115 0

@9172$string_No#:
x57788:	db "No", 0	; 3: 78 111 0

@9180$string_ispunct282725c2729203D2025s0A#:
x57791:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9187$string_Yes#:
x57811:	db "Yes", 0	; 4: 89 101 115 0

@9188$string_No#:
x57815:	db "No", 0	; 3: 78 111 0

@9196$string_iscntrl282725c2729203D2025s0A#:
x57818:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

@9203$string_Yes#:
x57838:	db "Yes", 0	; 4: 89 101 115 0

@9204$string_No#:
x57842:	db "No", 0	; 3: 78 111 0

@9212$string_isspace282725c2729203D2025s0A#:
x57845:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

@9219$string_Yes#:
x57865:	db "Yes", 0	; 4: 89 101 115 0

@9220$string_No#:
x57869:	db "No", 0	; 3: 78 111 0

@9228$string_tolower282725c2729203D202725c270A#:
x57872:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

@9235$string_toupper282725c2729203D202725c270A0A#:
x57894:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x57917:	mov ax, [bp + 6]	; 3: 139 70 6
x57920:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x57923:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 81 226
x57928:	mov [bp + 10], bp	; 3: 137 110 10
x57931:	add bp, 8	; 3: 131 197 8
x57934:	jmp islower	; 3: 233 228 136

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary182

isalpha$5:	; NotEqual 12 £temporary182 0
x57937:	cmp bx, 0	; 3: 131 251 0
x57940:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x57942:	mov ax, [bp + 6]	; 3: 139 70 6
x57945:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x57948:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 106 226
x57953:	mov [bp + 10], bp	; 3: 137 110 10
x57956:	add bp, 8	; 3: 131 197 8
x57959:	jmp isupper	; 3: 233 162 59

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary183

isalpha$11:	; Equal 14 £temporary183 0
x57962:	cmp bx, 0	; 3: 131 251 0
x57965:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary187 1
x57967:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x57970:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary187 0
x57972:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary187

isalpha$16:	; Return £temporary187
x57975:	mov ax, [bp]	; 3: 139 70 0
x57978:	mov di, [bp + 4]	; 3: 139 126 4
x57981:	mov bp, [bp + 2]	; 3: 139 110 2
x57984:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x57986:	mov ax, [bp + 6]	; 3: 139 70 6
x57989:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x57992:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 150 226
x57997:	mov [bp + 10], bp	; 3: 137 110 10
x58000:	add bp, 8	; 3: 131 197 8
x58003:	nop	; 1: 144
x58004:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary194

isalnum$5:	; NotEqual 12 £temporary194 0
x58006:	cmp bx, 0	; 3: 131 251 0
x58009:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x58011:	mov ax, [bp + 6]	; 3: 139 70 6
x58014:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x58017:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 175 226
x58022:	mov [bp + 10], bp	; 3: 137 110 10
x58025:	add bp, 8	; 3: 131 197 8
x58028:	jmp isdigit	; 3: 233 189 72

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary195

isalnum$11:	; Equal 14 £temporary195 0
x58031:	cmp bx, 0	; 3: 131 251 0
x58034:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary199 1
x58036:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x58039:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary199 0
x58041:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary199

isalnum$16:	; Return £temporary199
x58044:	mov ax, [bp]	; 3: 139 70 0
x58047:	mov di, [bp + 4]	; 3: 139 126 4
x58050:	mov bp, [bp + 2]	; 3: 139 110 2
x58053:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x58055:	mov ax, [bp + 6]	; 3: 139 70 6
x58058:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x58061:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 219 226
x58066:	mov [bp + 10], bp	; 3: 137 110 10
x58069:	add bp, 8	; 3: 131 197 8
x58072:	jmp isdigit	; 3: 233 145 72

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary202

isxdigit$5:	; NotEqual 10 £temporary202 0
x58075:	cmp bx, 0	; 3: 131 251 0
x58078:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x58080:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x58084:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x58086:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x58090:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x58092:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x58096:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x58098:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x58102:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary212 1
x58104:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x58107:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary212 0
x58109:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary212

isxdigit$14:	; Return £temporary212
x58112:	mov ax, [bp]	; 3: 139 70 0
x58115:	mov di, [bp + 4]	; 3: 139 126 4
x58118:	mov bp, [bp + 2]	; 3: 139 110 2
x58121:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x58123:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58127:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x58129:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x58133:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary217 1
x58135:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x58138:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary217 0
x58140:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary217

isgraph$6:	; Return £temporary217
x58143:	mov ax, [bp]	; 3: 139 70 0
x58146:	mov di, [bp + 4]	; 3: 139 126 4
x58149:	mov bp, [bp + 2]	; 3: 139 110 2
x58152:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x58154:	mov ax, [bp + 6]	; 3: 139 70 6
x58157:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x58160:	mov word [bp + 8], isprint$3	; 5: 199 70 8 62 227
x58165:	mov [bp + 10], bp	; 3: 137 110 10
x58168:	add bp, 8	; 3: 131 197 8
x58171:	nop	; 1: 144
x58172:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary218

isprint$5:	; Equal 9 £temporary218 0
x58174:	cmp bx, 0	; 3: 131 251 0
x58177:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x58179:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58183:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary222 1
x58185:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x58188:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary222 0
x58190:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary222

isprint$11:	; Return £temporary222
x58193:	mov ax, [bp]	; 3: 139 70 0
x58196:	mov di, [bp + 4]	; 3: 139 126 4
x58199:	mov bp, [bp + 2]	; 3: 139 110 2
x58202:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x58204:	mov ax, [bp + 6]	; 3: 139 70 6
x58207:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x58210:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 112 227
x58215:	mov [bp + 10], bp	; 3: 137 110 10
x58218:	add bp, 8	; 3: 131 197 8
x58221:	nop	; 1: 144
x58222:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary224

ispunct$5:	; Equal 14 £temporary224 0
x58224:	cmp bx, 0	; 3: 131 251 0
x58227:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x58229:	mov ax, [bp + 6]	; 3: 139 70 6
x58232:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x58235:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 137 227
x58240:	mov [bp + 10], bp	; 3: 137 110 10
x58243:	add bp, 8	; 3: 131 197 8
x58246:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary225

ispunct$11:	; NotEqual 14 £temporary225 0
x58249:	cmp bx, 0	; 3: 131 251 0
x58252:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary230 1
x58254:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x58257:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary230 0
x58259:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary230

ispunct$16:	; Return £temporary230
x58262:	mov ax, [bp]	; 3: 139 70 0
x58265:	mov di, [bp + 4]	; 3: 139 126 4
x58268:	mov bp, [bp + 2]	; 3: 139 110 2
x58271:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x58273:	mov ax, [bp + 6]	; 3: 139 70 6
x58276:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x58279:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 181 227
x58284:	mov [bp + 10], bp	; 3: 137 110 10
x58287:	add bp, 8	; 3: 131 197 8
x58290:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary233

iscntrl$5:	; NotEqual 8 £temporary233 0
x58293:	cmp bx, 0	; 3: 131 251 0
x58296:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary236 1
x58298:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x58301:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary236 0
x58303:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary236

iscntrl$10:	; Return £temporary236
x58306:	mov ax, [bp]	; 3: 139 70 0
x58309:	mov di, [bp + 4]	; 3: 139 126 4
x58312:	mov bp, [bp + 2]	; 3: 139 110 2
x58315:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x58317:	mov ax, [bp + 6]	; 3: 139 70 6
x58320:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x58323:	mov word [bp + 8], toupper$3	; 5: 199 70 8 225 227
x58328:	mov [bp + 10], bp	; 3: 137 110 10
x58331:	add bp, 8	; 3: 131 197 8
x58334:	jmp islower	; 3: 233 84 135

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary265

toupper$5:	; Equal 31 £temporary265 0
x58337:	cmp bx, 0	; 3: 131 251 0
x58340:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x58342:	mov word [bp + 8], toupper$8	; 5: 199 70 8 244 227
x58347:	mov [bp + 10], bp	; 3: 137 110 10
x58350:	add bp, 8	; 3: 131 197 8
x58353:	jmp localeconv	; 3: 233 131 58

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary266

toupper$10:	; Assign localeConvPtr £temporary266
x58356:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x58359:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x58363:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary268 -> localeConvPtr localeConvPtr 12
x58365:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary268 -> localeConvPtr
x58368:	mov ax, [si + 12]	; 3: 139 68 12
x58371:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary269 -> localeConvPtr localeConvPtr 14
x58374:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary269 -> localeConvPtr
x58377:	mov ax, [si + 14]	; 3: 139 68 14
x58380:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x58383:	mov ax, [bp + 10]	; 3: 139 70 10
x58386:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x58389:	mov ax, [bp + 6]	; 3: 139 70 6
x58392:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x58395:	mov word [bp + 14], toupper$20	; 5: 199 70 14 41 228
x58400:	mov [bp + 16], bp	; 3: 137 110 16
x58403:	add bp, 14	; 3: 131 197 14
x58406:	jmp strchr	; 3: 233 148 61

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary270

toupper$22:	; BinarySubtract index £temporary270 lowerCase
x58409:	sub bx, [bp + 10]	; 3: 43 94 10
x58412:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary273 upperCase index
x58415:	mov si, [bp + 12]	; 3: 139 118 12
x58418:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary272 -> £temporary273 £temporary273 0

toupper$25:	; IntegralToIntegral £temporary274 £temporary272 -> £temporary273
x58421:	mov bl, [si]	; 2: 138 28
x58423:	and bx, 255	; 4: 129 227 255 0
x58427:	cmp bl, 0	; 3: 128 251 0
x58430:	jge toupper$26	; 2: 125 4
x58432:	neg bl	; 2: 246 219
x58434:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary274

toupper$27:	; Return £temporary274
x58436:	mov ax, [bp]	; 3: 139 70 0
x58439:	mov di, [bp + 4]	; 3: 139 126 4
x58442:	mov bp, [bp + 2]	; 3: 139 110 2
x58445:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary275 c 32
x58447:	mov bx, [bp + 6]	; 3: 139 94 6
x58450:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary275

toupper$30:	; Return £temporary275
x58453:	mov ax, [bp]	; 3: 139 70 0
x58456:	mov di, [bp + 4]	; 3: 139 126 4
x58459:	mov bp, [bp + 2]	; 3: 139 110 2
x58462:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x58464:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x58467:	mov ax, [bp]	; 3: 139 70 0
x58470:	mov di, [bp + 4]	; 3: 139 126 4
x58473:	mov bp, [bp + 2]	; 3: 139 110 2
x58476:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x58478:	mov ax, [bp]	; 3: 139 70 0
x58481:	mov di, [bp + 4]	; 3: 139 126 4
x58484:	mov bp, [bp + 2]	; 3: 139 110 2
x58487:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x58489:
