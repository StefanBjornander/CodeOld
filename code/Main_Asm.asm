	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 10 208
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 10 208 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 220 53

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 stdio_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp stdio_test	; 3: 233 236 107

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 time_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp time_test	; 3: 233 200 120

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 assert_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp assert_test	; 3: 233 236 141

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 malloc_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp malloc_test	; 3: 233 121 142

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 print_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp print_test	; 3: 233 42 146

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 limits_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp limits_test	; 3: 233 227 148

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 float_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp float_test	; 3: 233 143 151

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 string_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp string_test	; 3: 233 140 151

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 setjmp_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp setjmp_test	; 3: 233 144 164

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 110 107

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 48 166

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 246 176

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 66 187

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 120 197

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 246 205

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 41 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 20 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 255 2

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 236 2

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 215 2

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 194 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 175 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 154 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 133 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 112 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 91 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 70 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 49 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 28 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 7 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 242 1

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 221 1

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 67 48

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 39 48

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [float8$2.0#]	; 4: 221 6 38 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 13 48

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [float8$minus2.0#]	; 4: 221 6 62 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 243 47

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [float8$2.0#]	; 4: 221 6 38 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 217 47

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [float8$minus2.0#]	; 4: 221 6 62 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 191 47

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 167 47

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [float8$2#]	; 4: 221 6 70 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 141 47

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [float8$minus2#]	; 4: 221 6 78 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 115 47

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [float8$minus1.0#]	; 4: 221 6 230 4

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [float8$minus1.0#]	; 4: 221 6 230 4

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 87 47

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [float8$minus2.0#]	; 4: 221 6 62 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [float8$minus4.0#]	; 4: 221 6 86 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 59 47

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

float8$minus2.0#:
x1342:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

float8$2#:
x1350:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

float8$minus2#:
x1358:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

float8$minus4.0#:
x1366:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1374:	mov word [bp + 20], string_3C25f3E0A#	; 5: 199 70 20 148 10

math_test_1$2:	; PushFloat x
x1379:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1382:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1385:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 124 5
x1390:	mov [bp + 16], bp	; 3: 137 110 16
x1393:	add bp, 14	; 3: 131 197 14
x1396:	mov di, bp	; 2: 137 239
x1398:	add di, 8	; 3: 131 199 8
x1401:	jmp printf	; 3: 233 73 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1404:	mov word [bp + 20], string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 154 10

math_test_1$8:	; PushFloat x
x1409:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1412:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1415:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1418:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1421:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 155 5
x1426:	mov [bp + 32], bp	; 3: 137 110 32
x1429:	add bp, 30	; 3: 131 197 30
x1432:	jmp sin	; 3: 233 129 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4834

math_test_1$16:	; Parameter 14 £temporary4834 16
x1435:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1438:	mov ax, [errno]	; 3: 161 182 10
x1441:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1444:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 183 5
x1449:	mov [bp + 16], bp	; 3: 137 110 16
x1452:	add bp, 14	; 3: 131 197 14
x1455:	mov di, bp	; 2: 137 239
x1457:	add di, 18	; 3: 131 199 18
x1460:	jmp printf	; 3: 233 14 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1463:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1469:	mov word [bp + 20], string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 184 10

math_test_1$23:	; PushFloat x
x1474:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1477:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1480:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1483:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1486:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 220 5
x1491:	mov [bp + 32], bp	; 3: 137 110 32
x1494:	add bp, 30	; 3: 131 197 30
x1497:	jmp cos	; 3: 233 153 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4836

math_test_1$31:	; Parameter 14 £temporary4836 16
x1500:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1503:	mov ax, [errno]	; 3: 161 182 10
x1506:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1509:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 248 5
x1514:	mov [bp + 16], bp	; 3: 137 110 16
x1517:	add bp, 14	; 3: 131 197 14
x1520:	mov di, bp	; 2: 137 239
x1522:	add di, 18	; 3: 131 199 18
x1525:	jmp printf	; 3: 233 205 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1528:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1534:	mov word [bp + 20], string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 212 10

math_test_1$38:	; PushFloat x
x1539:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1542:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1545:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1548:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1551:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 29 6
x1556:	mov [bp + 32], bp	; 3: 137 110 32
x1559:	add bp, 30	; 3: 131 197 30
x1562:	jmp tan	; 3: 233 50 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4838

math_test_1$46:	; Parameter 14 £temporary4838 16
x1565:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1568:	mov ax, [errno]	; 3: 161 182 10
x1571:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1574:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 57 6
x1579:	mov [bp + 16], bp	; 3: 137 110 16
x1582:	add bp, 14	; 3: 131 197 14
x1585:	mov di, bp	; 2: 137 239
x1587:	add di, 18	; 3: 131 199 18
x1590:	jmp printf	; 3: 233 140 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1593:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1599:	mov word [bp + 20], string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 240 10

math_test_1$53:	; PushFloat x
x1604:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1607:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1610:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1613:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1616:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 94 6
x1621:	mov [bp + 32], bp	; 3: 137 110 32
x1624:	add bp, 30	; 3: 131 197 30
x1627:	jmp asin	; 3: 233 76 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4840

math_test_1$61:	; Parameter 14 £temporary4840 16
x1630:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1633:	mov ax, [errno]	; 3: 161 182 10
x1636:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1639:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 122 6
x1644:	mov [bp + 16], bp	; 3: 137 110 16
x1647:	add bp, 14	; 3: 131 197 14
x1650:	mov di, bp	; 2: 137 239
x1652:	add di, 18	; 3: 131 199 18
x1655:	jmp printf	; 3: 233 75 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1658:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1664:	mov word [bp + 20], string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 13 11

math_test_1$68:	; PushFloat x
x1669:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1672:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1675:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1678:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1681:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 159 6
x1686:	mov [bp + 32], bp	; 3: 137 110 32
x1689:	add bp, 30	; 3: 131 197 30
x1692:	jmp acos	; 3: 233 166 41

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4842

math_test_1$76:	; Parameter 14 £temporary4842 16
x1695:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1698:	mov ax, [errno]	; 3: 161 182 10
x1701:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1704:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 187 6
x1709:	mov [bp + 16], bp	; 3: 137 110 16
x1712:	add bp, 14	; 3: 131 197 14
x1715:	mov di, bp	; 2: 137 239
x1717:	add di, 18	; 3: 131 199 18
x1720:	jmp printf	; 3: 233 10 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1723:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1729:	mov word [bp + 20], string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 42 11

math_test_1$83:	; PushFloat x
x1734:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1737:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1740:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1743:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1746:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 224 6
x1751:	mov [bp + 32], bp	; 3: 137 110 32
x1754:	add bp, 30	; 3: 131 197 30
x1757:	jmp atan	; 3: 233 244 39

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4844

math_test_1$91:	; Parameter 14 £temporary4844 16
x1760:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1763:	mov ax, [errno]	; 3: 161 182 10
x1766:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1769:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 252 6
x1774:	mov [bp + 16], bp	; 3: 137 110 16
x1777:	add bp, 14	; 3: 131 197 14
x1780:	mov di, bp	; 2: 137 239
x1782:	add di, 18	; 3: 131 199 18
x1785:	jmp printf	; 3: 233 201 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1788:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1794:	mov word [bp + 20], string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 71 11

math_test_1$98:	; PushFloat x
x1799:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1802:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1805:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1808:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1811:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 33 7
x1816:	mov [bp + 32], bp	; 3: 137 110 32
x1819:	add bp, 30	; 3: 131 197 30
x1822:	jmp exp	; 3: 233 188 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4846

math_test_1$106:	; Parameter 14 £temporary4846 16
x1825:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1828:	mov ax, [errno]	; 3: 161 182 10
x1831:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1834:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 61 7
x1839:	mov [bp + 16], bp	; 3: 137 110 16
x1842:	add bp, 14	; 3: 131 197 14
x1845:	mov di, bp	; 2: 137 239
x1847:	add di, 18	; 3: 131 199 18
x1850:	jmp printf	; 3: 233 136 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1853:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1859:	mov word [bp + 20], string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 99 11

math_test_1$113:	; PushFloat x
x1864:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1867:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1870:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1873:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1876:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 98 7
x1881:	mov [bp + 32], bp	; 3: 137 110 32
x1884:	add bp, 30	; 3: 131 197 30
x1887:	jmp log	; 3: 233 170 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4848

math_test_1$121:	; Parameter 14 £temporary4848 16
x1890:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1893:	mov ax, [errno]	; 3: 161 182 10
x1896:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1899:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 126 7
x1904:	mov [bp + 16], bp	; 3: 137 110 16
x1907:	add bp, 14	; 3: 131 197 14
x1910:	mov di, bp	; 2: 137 239
x1912:	add di, 18	; 3: 131 199 18
x1915:	jmp printf	; 3: 233 71 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1918:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1924:	mov word [bp + 20], string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 127 11

math_test_1$128:	; PushFloat x
x1929:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1932:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1935:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1938:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1941:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 163 7
x1946:	mov [bp + 32], bp	; 3: 137 110 32
x1949:	add bp, 30	; 3: 131 197 30
x1952:	jmp log10	; 3: 233 60 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4850

math_test_1$136:	; Parameter 14 £temporary4850 16
x1955:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x1958:	mov ax, [errno]	; 3: 161 182 10
x1961:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x1964:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 191 7
x1969:	mov [bp + 16], bp	; 3: 137 110 16
x1972:	add bp, 14	; 3: 131 197 14
x1975:	mov di, bp	; 2: 137 239
x1977:	add di, 18	; 3: 131 199 18
x1980:	jmp printf	; 3: 233 6 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x1983:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x1989:	mov word [bp + 20], string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 157 11

math_test_1$143:	; PushFloat x
x1994:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x1997:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2000:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2003:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2006:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 228 7
x2011:	mov [bp + 32], bp	; 3: 137 110 32
x2014:	add bp, 30	; 3: 131 197 30
x2017:	jmp sinh	; 3: 233 27 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4852

math_test_1$151:	; Parameter 14 £temporary4852 16
x2020:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2023:	mov ax, [errno]	; 3: 161 182 10
x2026:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2029:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 0 8
x2034:	mov [bp + 16], bp	; 3: 137 110 16
x2037:	add bp, 14	; 3: 131 197 14
x2040:	mov di, bp	; 2: 137 239
x2042:	add di, 18	; 3: 131 199 18
x2045:	jmp printf	; 3: 233 197 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2048:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2054:	mov word [bp + 20], string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 186 11

math_test_1$158:	; PushFloat x
x2059:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2062:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2065:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2068:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2071:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 37 8
x2076:	mov [bp + 32], bp	; 3: 137 110 32
x2079:	add bp, 30	; 3: 131 197 30
x2082:	jmp cosh	; 3: 233 35 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4854

math_test_1$166:	; Parameter 14 £temporary4854 16
x2085:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2088:	mov ax, [errno]	; 3: 161 182 10
x2091:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2094:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 65 8
x2099:	mov [bp + 16], bp	; 3: 137 110 16
x2102:	add bp, 14	; 3: 131 197 14
x2105:	mov di, bp	; 2: 137 239
x2107:	add di, 18	; 3: 131 199 18
x2110:	jmp printf	; 3: 233 132 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2113:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2119:	mov word [bp + 20], string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 215 11

math_test_1$173:	; PushFloat x
x2124:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2127:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2130:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2133:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2136:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 102 8
x2141:	mov [bp + 32], bp	; 3: 137 110 32
x2144:	add bp, 30	; 3: 131 197 30
x2147:	jmp tanh	; 3: 233 43 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4856

math_test_1$181:	; Parameter 14 £temporary4856 16
x2150:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2153:	mov ax, [errno]	; 3: 161 182 10
x2156:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2159:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 130 8
x2164:	mov [bp + 16], bp	; 3: 137 110 16
x2167:	add bp, 14	; 3: 131 197 14
x2170:	mov di, bp	; 2: 137 239
x2172:	add di, 18	; 3: 131 199 18
x2175:	jmp printf	; 3: 233 67 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2178:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2184:	mov word [bp + 20], string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 244 11

math_test_1$188:	; PushFloat x
x2189:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2192:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2195:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2198:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2201:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 167 8
x2206:	mov [bp + 32], bp	; 3: 137 110 32
x2209:	add bp, 30	; 3: 131 197 30
x2212:	jmp sqrt	; 3: 233 185 37

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4858

math_test_1$196:	; Parameter 14 £temporary4858 16
x2215:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2218:	mov ax, [errno]	; 3: 161 182 10
x2221:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2224:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 195 8
x2229:	mov [bp + 16], bp	; 3: 137 110 16
x2232:	add bp, 14	; 3: 131 197 14
x2235:	mov di, bp	; 2: 137 239
x2237:	add di, 18	; 3: 131 199 18
x2240:	jmp printf	; 3: 233 2 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2243:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2249:	mov word [bp + 20], string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 17 12

math_test_1$203:	; PushFloat x
x2254:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2257:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2260:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2263:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2266:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 232 8
x2271:	mov [bp + 32], bp	; 3: 137 110 32
x2274:	add bp, 30	; 3: 131 197 30
x2277:	jmp floor	; 3: 233 107 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4860

math_test_1$211:	; Parameter 14 £temporary4860 16
x2280:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2283:	mov ax, [errno]	; 3: 161 182 10
x2286:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2289:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 4 9
x2294:	mov [bp + 16], bp	; 3: 137 110 16
x2297:	add bp, 14	; 3: 131 197 14
x2300:	mov di, bp	; 2: 137 239
x2302:	add di, 18	; 3: 131 199 18
x2305:	jmp printf	; 3: 233 193 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2308:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2314:	mov word [bp + 20], string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 47 12

math_test_1$218:	; PushFloat x
x2319:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2322:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2325:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2328:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2331:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 41 9
x2336:	mov [bp + 32], bp	; 3: 137 110 32
x2339:	add bp, 30	; 3: 131 197 30
x2342:	jmp ceil	; 3: 233 120 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4862

math_test_1$226:	; Parameter 14 £temporary4862 16
x2345:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2348:	mov ax, [errno]	; 3: 161 182 10
x2351:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2354:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 69 9
x2359:	mov [bp + 16], bp	; 3: 137 110 16
x2362:	add bp, 14	; 3: 131 197 14
x2365:	mov di, bp	; 2: 137 239
x2367:	add di, 18	; 3: 131 199 18
x2370:	jmp printf	; 3: 233 128 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2373:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2379:	mov word [bp + 20], string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 76 12

math_test_1$233:	; PushFloat x
x2384:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2387:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2390:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2393:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2396:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 106 9
x2401:	mov [bp + 32], bp	; 3: 137 110 32
x2404:	add bp, 30	; 3: 131 197 30
x2407:	jmp fabs	; 3: 233 75 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4864

math_test_1$241:	; Parameter 14 £temporary4864 16
x2410:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2413:	mov ax, [errno]	; 3: 161 182 10
x2416:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2419:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 134 9
x2424:	mov [bp + 16], bp	; 3: 137 110 16
x2427:	add bp, 14	; 3: 131 197 14
x2430:	mov di, bp	; 2: 137 239
x2432:	add di, 18	; 3: 131 199 18
x2435:	jmp printf	; 3: 233 63 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2438:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$246:	; Assign j 0
x2444:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2449:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2452:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4866 j
x2455:	mov si, bp	; 2: 137 238
x2457:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4866 14
x2460:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2463:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 173 9
x2468:	mov [bp + 18], bp	; 3: 137 110 18
x2471:	add bp, 16	; 3: 131 197 16
x2474:	jmp frexp	; 3: 233 37 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4867

math_test_1$255:	; PopFloat z
x2477:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2480:	mov word [bp + 30], string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 105 12

math_test_1$258:	; PushFloat x
x2485:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2488:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2491:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2494:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2497:	mov ax, [bp + 14]	; 3: 139 70 14
x2500:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2503:	mov ax, [errno]	; 3: 161 182 10
x2506:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2509:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 224 9
x2514:	mov [bp + 26], bp	; 3: 137 110 26
x2517:	add bp, 24	; 3: 131 197 24
x2520:	mov di, bp	; 2: 137 239
x2522:	add di, 20	; 3: 131 199 20
x2525:	jmp printf	; 3: 233 229 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2528:	cmp word [errno], 0	; 5: 131 62 182 10 0
x2533:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2535:	mov word [bp + 30], string_Error20message3A#	; 5: 199 70 30 143 12

math_test_1$269:	; Call 24 perror 0
x2540:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 250 9
x2545:	mov [bp + 26], bp	; 3: 137 110 26
x2548:	add bp, 24	; 3: 131 197 24
x2551:	jmp perror	; 3: 233 204 40

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2554:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$272:	; PushZero
x2560:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2562:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2565:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2568:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4871 w
x2571:	mov si, bp	; 2: 137 238
x2573:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4871 14
x2576:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2579:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 33 10
x2584:	mov [bp + 24], bp	; 3: 137 110 24
x2587:	add bp, 22	; 3: 131 197 22
x2590:	jmp modf	; 3: 233 65 41

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4872

math_test_1$282:	; PopFloat z
x2593:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2596:	mov word [bp + 36], string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 158 12

math_test_1$285:	; PushFloat x
x2601:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2604:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2607:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2610:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2613:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2616:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2619:	mov ax, [errno]	; 3: 161 182 10
x2622:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2625:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 84 10
x2630:	mov [bp + 32], bp	; 3: 137 110 32
x2633:	add bp, 30	; 3: 131 197 30
x2636:	mov di, bp	; 2: 137 239
x2638:	add di, 26	; 3: 131 199 26
x2641:	jmp printf	; 3: 233 113 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2644:	cmp word [errno], 0	; 5: 131 62 182 10 0
x2649:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2651:	mov word [bp + 36], string_Error20message3A#	; 5: 199 70 36 143 12

math_test_1$297:	; Call 30 perror 0
x2656:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 110 10
x2661:	mov [bp + 32], bp	; 3: 137 110 32
x2664:	add bp, 30	; 3: 131 197 30
x2667:	jmp perror	; 3: 233 88 40

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2670:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2676:	mov word [bp + 20], string_0A#	; 5: 199 70 20 195 12

math_test_1$302:	; Call 14 printf 0
x2681:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 137 10
x2686:	mov [bp + 16], bp	; 3: 137 110 16
x2689:	add bp, 14	; 3: 131 197 14
x2692:	mov di, bp	; 2: 137 239
x2694:	jmp printf	; 3: 233 60 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2697:	mov ax, [bp]	; 3: 139 70 0
x2700:	mov di, [bp + 4]	; 3: 139 126 4
x2703:	mov bp, [bp + 2]	; 3: 139 110 2
x2706:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

string_3C25f3E0A#:
x2708:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2714:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2742:	dw 0	; 2: 0 0

string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2744:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2772:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2800:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2829:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2858:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2887:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2915:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2943:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x2973:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3002:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3031:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3060:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3089:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3119:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3148:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3177:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_Error20message3A#:
x3215:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3230:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_0A#:
x3267:	db 10, 0	; 2: 10 0

printf:	; address £temporary2371 format
x3269:	mov si, bp	; 2: 137 238
x3271:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2372 £temporary2371

printf$2:	; BinaryAdd arg_list £temporary2372 2
x3274:	add si, 2	; 3: 131 198 2
x3277:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3280:	mov ax, [bp + 6]	; 3: 139 70 6
x3283:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3286:	mov ax, [di + 8]	; 3: 139 69 8
x3289:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3292:	mov word [di + 10], printf$7	; 5: 199 69 10 239 12
x3297:	mov [di + 12], bp	; 3: 137 109 12
x3300:	mov [di + 14], di	; 3: 137 125 14
x3303:	add di, 10	; 3: 131 199 10
x3306:	mov bp, di	; 2: 137 253
x3308:	nop	; 1: 144
x3309:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2374

printf$9:	; SetReturnValue £temporary2374

printf$10:	; Return £temporary2374
x3311:	mov ax, [bp]	; 3: 139 70 0
x3314:	mov di, [bp + 4]	; 3: 139 126 4
x3317:	mov bp, [bp + 2]	; 3: 139 110 2
x3320:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3322:	mov ax, [stdout]	; 3: 161 37 13
x3325:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3328:	mov ax, [bp + 6]	; 3: 139 70 6
x3331:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3334:	mov ax, [bp + 8]	; 3: 139 70 8
x3337:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3340:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 26 13
x3345:	mov [bp + 12], bp	; 3: 137 110 12
x3348:	add bp, 10	; 3: 131 197 10
x3351:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2378

vprintf$7:	; SetReturnValue £temporary2378

vprintf$8:	; Return £temporary2378
x3354:	mov ax, [bp]	; 3: 139 70 0
x3357:	mov di, [bp + 4]	; 3: 139 126 4
x3360:	mov bp, [bp + 2]	; 3: 139 110 2
x3363:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3365:	dw g_fileArray + 29	; 2: 68 13

g_fileArray:
x3367:	dw 1	; 2: 1 0
x3369:	dw 0	; 2: 0 0
x3371:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3396:	dw 1	; 2: 1 0
x3398:	dw 1	; 2: 1 0
x3400:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3425:	dw 1	; 2: 1 0
x3427:	dw 2	; 2: 2 0
x3429:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3454:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x3947:	mov word [g_outStatus], 0	; 6: 199 6 156 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2390 outStream
x3953:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2390
x3956:	mov [g_outDevice], ax	; 3: 163 158 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x3959:	mov ax, [bp + 8]	; 3: 139 70 8
x3962:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x3965:	mov ax, [bp + 10]	; 3: 139 70 10
x3968:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x3971:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 145 15
x3976:	mov [bp + 14], bp	; 3: 137 110 14
x3979:	add bp, 12	; 3: 131 197 12
x3982:	nop	; 1: 144
x3983:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2391

vfprintf$9:	; SetReturnValue £temporary2391

vfprintf$10:	; Return £temporary2391
x3985:	mov ax, [bp]	; 3: 139 70 0
x3988:	mov di, [bp + 4]	; 3: 139 126 4
x3991:	mov bp, [bp + 2]	; 3: 139 110 2
x3994:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x3996:	db 0, 0	; 2: 0 0

g_outDevice:
x3998:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4000:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4005:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4010:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4015:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4020:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4025:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4030:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4035:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4040:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4045:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4050:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4055:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4060:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4065:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4070:	mov word [g_outChars], 0	; 6: 199 6 250 20 0 0

printFormat$15:	; Assign index 0
x4076:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2225 format index
x4081:	mov si, [bp + 6]	; 3: 139 118 6
x4084:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2224 -> £temporary2225 £temporary2225 0

printFormat$18:	; Equal 285 £temporary2224 -> £temporary2225 0
x4087:	cmp byte [si], 0	; 3: 128 60 0
x4090:	je printFormat$285	; 4: 15 132 214 4

printFormat$19:	; BinaryAdd £temporary2229 format index
x4094:	mov si, [bp + 6]	; 3: 139 118 6
x4097:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2228 -> £temporary2229 £temporary2229 0

printFormat$21:	; Assign c £temporary2228 -> £temporary2229
x4100:	mov al, [si]	; 2: 138 4
x4102:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 263 percent 0
x4105:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4109:	je printFormat$263	; 4: 15 132 91 4

printFormat$23:	; Case 52 c 43
x4113:	mov al, [bp + 40]	; 3: 138 70 40
x4116:	cmp al, 43	; 2: 60 43
x4118:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4122:	cmp al, 45	; 2: 60 45
x4124:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4128:	cmp al, 32	; 2: 60 32
x4130:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4134:	cmp al, 48	; 2: 60 48
x4136:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4140:	cmp al, 35	; 2: 60 35
x4142:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4146:	cmp al, 46	; 2: 60 46
x4148:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4152:	cmp al, 42	; 2: 60 42
x4154:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4158:	cmp al, 104	; 2: 60 104
x4160:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4164:	cmp al, 108	; 2: 60 108
x4166:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4170:	cmp al, 76	; 2: 60 76
x4172:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4176:	cmp al, 37	; 2: 60 37
x4178:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4182:	cmp al, 110	; 2: 60 110
x4184:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4188:	cmp al, 112	; 2: 60 112
x4190:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4194:	cmp al, 71	; 2: 60 71
x4196:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4200:	cmp al, 103	; 2: 60 103
x4202:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4206:	cmp al, 69	; 2: 60 69
x4208:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4212:	cmp al, 101	; 2: 60 101
x4214:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4218:	cmp al, 102	; 2: 60 102
x4220:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4224:	cmp al, 115	; 2: 60 115
x4226:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4230:	cmp al, 99	; 2: 60 99
x4232:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4234:	cmp al, 88	; 2: 60 88
x4236:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4238:	cmp al, 120	; 2: 60 120
x4240:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4242:	cmp al, 111	; 2: 60 111
x4244:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4246:	cmp al, 98	; 2: 60 98
x4248:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4250:	cmp al, 117	; 2: 60 117
x4252:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4254:	cmp al, 100	; 2: 60 100
x4256:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4258:	cmp al, 105	; 2: 60 105
x4260:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4262:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4265:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 283
x4270:	jmp printFormat$283	; 3: 233 29 4

printFormat$54:	; Assign minus 1
x4273:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 283
x4278:	jmp printFormat$283	; 3: 233 21 4

printFormat$56:	; Assign space 1
x4281:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 283
x4286:	jmp printFormat$283	; 3: 233 13 4

printFormat$58:	; Assign zero 1
x4289:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 283
x4294:	jmp printFormat$283	; 3: 233 5 4

printFormat$60:	; Assign grid 1
x4297:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 283
x4302:	jmp printFormat$283	; 3: 233 253 3

printFormat$62:	; Assign period 1
x4305:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 283
x4310:	jmp printFormat$283	; 3: 233 245 3

printFormat$64:	; NotEqual 67 period 0
x4313:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4317:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4319:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 283
x4324:	jmp printFormat$283	; 3: 233 231 3

printFormat$67:	; Assign precision -1
x4327:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 283
x4332:	jmp printFormat$283	; 3: 233 223 3

printFormat$69:	; Assign shortInt 1
x4335:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 283
x4340:	jmp printFormat$283	; 3: 233 215 3

printFormat$71:	; Assign longInt 1
x4343:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 283
x4348:	jmp printFormat$283	; 3: 233 207 3

printFormat$73:	; Assign longDouble 1
x4351:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 283
x4356:	jmp printFormat$283	; 3: 233 199 3

printFormat$75:	; Equal 107 minus 0
x4359:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4363:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4367:	mov ax, [g_outChars]	; 3: 161 250 20
x4370:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2233 format index
x4373:	mov si, [bp + 6]	; 3: 139 118 6
x4376:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2232 -> £temporary2233 £temporary2233 0

printFormat$80:	; address £temporary2234 £temporary2232 -> £temporary2233

printFormat$81:	; Parameter 43 £temporary2234 6
x4379:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4382:	mov ax, [bp + 8]	; 3: 139 70 8
x4385:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4388:	mov ax, [bp + 18]	; 3: 139 70 18
x4391:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4394:	mov ax, [bp + 22]	; 3: 139 70 22
x4397:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4400:	mov ax, [bp + 26]	; 3: 139 70 26
x4403:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2235 width
x4406:	mov si, bp	; 2: 137 238
x4408:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2235 16
x4411:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4414:	mov ax, [bp + 14]	; 3: 139 70 14
x4417:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4420:	mov ax, [bp + 34]	; 3: 139 70 34
x4423:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4426:	mov ax, [bp + 36]	; 3: 139 70 36
x4429:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4432:	mov ax, [bp + 38]	; 3: 139 70 38
x4435:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4438:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4443:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4448:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 110 17
x4453:	mov [bp + 45], bp	; 3: 137 110 45
x4456:	add bp, 43	; 3: 131 197 43
x4459:	jmp printArgument	; 3: 233 144 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2236

printFormat$97:	; Assign arg_list £temporary2236
x4462:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4465:	mov ax, [g_outChars]	; 3: 161 250 20
x4468:	sub ax, [bp + 41]	; 3: 43 70 41
x4471:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2238 field
x4474:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4477:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2238 width
x4480:	cmp ax, [bp + 12]	; 3: 59 70 12
x4483:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4487:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4491:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 153 17
x4496:	mov [bp + 47], bp	; 3: 137 110 47
x4499:	add bp, 45	; 3: 131 197 45
x4502:	jmp printChar	; 3: 233 120 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4505:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4507:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4511:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4515:	mov ax, [g_outChars]	; 3: 161 250 20
x4518:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4521:	mov ax, [g_outStatus]	; 3: 161 156 15
x4524:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4527:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4532:	mov word [g_outStatus], 2	; 6: 199 6 156 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2242 format index
x4538:	mov si, [bp + 6]	; 3: 139 118 6
x4541:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2241 -> £temporary2242 £temporary2242 0

printFormat$115:	; address £temporary2243 £temporary2241 -> £temporary2242

printFormat$116:	; Parameter 47 £temporary2243 6
x4544:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4547:	mov ax, [bp + 8]	; 3: 139 70 8
x4550:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4553:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4558:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4563:	mov ax, [bp + 26]	; 3: 139 70 26
x4566:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2244 width
x4569:	mov si, bp	; 2: 137 238
x4571:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2244 16
x4574:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4577:	mov ax, [bp + 14]	; 3: 139 70 14
x4580:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4583:	mov ax, [bp + 34]	; 3: 139 70 34
x4586:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4589:	mov ax, [bp + 36]	; 3: 139 70 36
x4592:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4595:	mov ax, [bp + 38]	; 3: 139 70 38
x4598:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4601:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2245 negative
x4606:	mov si, bp	; 2: 137 238
x4608:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2245 28
x4611:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4614:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 20 18
x4619:	mov [bp + 49], bp	; 3: 137 110 49
x4622:	add bp, 47	; 3: 131 197 47
x4625:	jmp printArgument	; 3: 233 234 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4628:	mov ax, [bp + 43]	; 3: 139 70 43
x4631:	mov [g_outStatus], ax	; 3: 163 156 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4634:	mov ax, [g_outChars]	; 3: 161 250 20
x4637:	sub ax, [bp + 41]	; 3: 43 70 41
x4640:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4643:	mov ax, [bp + 41]	; 3: 139 70 41
x4646:	mov [g_outChars], ax	; 3: 163 250 20

printFormat$135:	; Equal 142 negative 0
x4649:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4653:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4655:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4659:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 65 18
x4664:	mov [bp + 51], bp	; 3: 137 110 51
x4667:	add bp, 49	; 3: 131 197 49
x4670:	jmp printChar	; 3: 233 208 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4673:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4676:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4678:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4682:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4684:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4688:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 94 18
x4693:	mov [bp + 51], bp	; 3: 137 110 51
x4696:	add bp, 49	; 3: 131 197 49
x4699:	jmp printChar	; 3: 233 179 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4702:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4705:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4707:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4711:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4713:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4717:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 123 18
x4722:	mov [bp + 51], bp	; 3: 137 110 51
x4725:	add bp, 49	; 3: 131 197 49
x4728:	jmp printChar	; 3: 233 150 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4731:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2257 field
x4734:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4737:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2257 width
x4740:	cmp ax, [bp + 12]	; 3: 59 70 12
x4743:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4745:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4749:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 155 18
x4754:	mov [bp + 51], bp	; 3: 137 110 51
x4757:	add bp, 49	; 3: 131 197 49
x4760:	jmp printChar	; 3: 233 118 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4763:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2261 format index
x4765:	mov si, [bp + 6]	; 3: 139 118 6
x4768:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2260 -> £temporary2261 £temporary2261 0

printFormat$166:	; address £temporary2262 £temporary2260 -> £temporary2261

printFormat$167:	; Parameter 49 £temporary2262 6
x4771:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4774:	mov ax, [bp + 8]	; 3: 139 70 8
x4777:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4780:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4785:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4790:	mov ax, [bp + 26]	; 3: 139 70 26
x4793:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4796:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4801:	mov ax, [bp + 14]	; 3: 139 70 14
x4804:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4807:	mov ax, [bp + 34]	; 3: 139 70 34
x4810:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4813:	mov ax, [bp + 36]	; 3: 139 70 36
x4816:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4819:	mov ax, [bp + 38]	; 3: 139 70 38
x4822:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4825:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4830:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4835:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 241 18
x4840:	mov [bp + 51], bp	; 3: 137 110 51
x4843:	add bp, 49	; 3: 131 197 49
x4846:	jmp printArgument	; 3: 233 13 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2263

printFormat$182:	; Assign arg_list £temporary2263
x4849:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4852:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4855:	mov ax, [g_outChars]	; 3: 161 250 20
x4858:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4861:	mov ax, [g_outStatus]	; 3: 161 156 15
x4864:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4867:	mov word [g_outStatus], 2	; 6: 199 6 156 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2265 format index
x4873:	mov si, [bp + 6]	; 3: 139 118 6
x4876:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2264 -> £temporary2265 £temporary2265 0

printFormat$190:	; address £temporary2266 £temporary2264 -> £temporary2265

printFormat$191:	; Parameter 45 £temporary2266 6
x4879:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4882:	mov ax, [bp + 8]	; 3: 139 70 8
x4885:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4888:	mov ax, [bp + 18]	; 3: 139 70 18
x4891:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4894:	mov ax, [bp + 22]	; 3: 139 70 22
x4897:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4900:	mov ax, [bp + 26]	; 3: 139 70 26
x4903:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2267 width
x4906:	mov si, bp	; 2: 137 238
x4908:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2267 16
x4911:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4914:	mov ax, [bp + 14]	; 3: 139 70 14
x4917:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4920:	mov ax, [bp + 34]	; 3: 139 70 34
x4923:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4926:	mov ax, [bp + 36]	; 3: 139 70 36
x4929:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4932:	mov ax, [bp + 38]	; 3: 139 70 38
x4935:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x4938:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x4943:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x4948:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 98 19
x4953:	mov [bp + 47], bp	; 3: 137 110 47
x4956:	add bp, 45	; 3: 131 197 45
x4959:	jmp printArgument	; 3: 233 156 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x4962:	mov ax, [bp + 43]	; 3: 139 70 43
x4965:	mov [g_outStatus], ax	; 3: 163 156 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x4968:	mov ax, [g_outChars]	; 3: 161 250 20
x4971:	sub ax, [bp + 41]	; 3: 43 70 41
x4974:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x4977:	mov ax, [bp + 41]	; 3: 139 70 41
x4980:	mov [g_outChars], ax	; 3: 163 250 20

printFormat$209:	; Assign £temporary2270 field
x4983:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x4986:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2270 width
x4989:	cmp ax, [bp + 12]	; 3: 59 70 12
x4992:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x4994:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x4998:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 148 19
x5003:	mov [bp + 49], bp	; 3: 137 110 49
x5006:	add bp, 47	; 3: 131 197 47
x5009:	jmp printChar	; 3: 233 125 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5012:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2274 format index
x5014:	mov si, [bp + 6]	; 3: 139 118 6
x5017:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2273 -> £temporary2274 £temporary2274 0

printFormat$220:	; address £temporary2275 £temporary2273 -> £temporary2274

printFormat$221:	; Parameter 47 £temporary2275 6
x5020:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5023:	mov ax, [bp + 8]	; 3: 139 70 8
x5026:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5029:	mov ax, [bp + 18]	; 3: 139 70 18
x5032:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5035:	mov ax, [bp + 22]	; 3: 139 70 22
x5038:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5041:	mov ax, [bp + 26]	; 3: 139 70 26
x5044:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5047:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5052:	mov ax, [bp + 14]	; 3: 139 70 14
x5055:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5058:	mov ax, [bp + 34]	; 3: 139 70 34
x5061:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5064:	mov ax, [bp + 36]	; 3: 139 70 36
x5067:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5070:	mov ax, [bp + 38]	; 3: 139 70 38
x5073:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5076:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5081:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5086:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 236 19
x5091:	mov [bp + 49], bp	; 3: 137 110 49
x5094:	add bp, 47	; 3: 131 197 47
x5097:	jmp printArgument	; 3: 233 18 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2276

printFormat$236:	; Assign arg_list £temporary2276
x5100:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5103:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 283
x5108:	jmp printFormat$283	; 3: 233 215 0

printFormat$239:	; Assign value 0
x5111:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2279 c
x5116:	mov al, [bp + 40]	; 3: 138 70 40
x5119:	and ax, 255	; 3: 37 255 0
x5122:	cmp al, 0	; 2: 60 0
x5124:	jge printFormat$242	; 2: 125 4
x5126:	neg al	; 2: 246 216
x5128:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2279 6
x5130:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5133:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 27 20
x5138:	mov [bp + 45], bp	; 3: 137 110 45
x5141:	add bp, 43	; 3: 131 197 43
x5144:	jmp isdigit	; 3: 233 226 22

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2280

printFormat$246:	; Equal 257 £temporary2280 0
x5147:	cmp bx, 0	; 3: 131 251 0
x5150:	je printFormat$257	; 2: 116 51

printFormat$247:	; SignedMultiply £temporary2281 value 10
x5152:	mov ax, [bp + 41]	; 3: 139 70 41
x5155:	xor dx, dx	; 2: 49 210
x5157:	imul word [int2$10#]	; 4: 247 46 252 20

printFormat$248:	; BinarySubtract £temporary2282 c 48
x5161:	mov bl, [bp + 40]	; 3: 138 94 40
x5164:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2283 £temporary2282
x5167:	and bx, 255	; 4: 129 227 255 0
x5171:	cmp bl, 0	; 3: 128 251 0
x5174:	jge printFormat$250	; 2: 125 4
x5176:	neg bl	; 2: 246 219
x5178:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2281 £temporary2283
x5180:	add ax, bx	; 2: 1 216
x5182:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5185:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; Assign £temporary2285 index
x5188:	mov ax, [bp + 10]	; 3: 139 70 10

printFormat$253:	; BinaryAdd £temporary2287 format £temporary2285
x5191:	mov si, [bp + 6]	; 3: 139 118 6
x5194:	add si, ax	; 2: 1 198

printFormat$254:	; Deref £temporary2286 -> £temporary2287 £temporary2287 0

printFormat$255:	; Assign c £temporary2286 -> £temporary2287
x5196:	mov al, [si]	; 2: 138 4
x5198:	mov [bp + 40], al	; 3: 136 70 40

printFormat$256:	; Goto 240
x5201:	jmp printFormat$240	; 2: 235 169

printFormat$257:	; Decrement index
x5203:	dec word [bp + 10]	; 3: 255 78 10

printFormat$258:	; NotEqual 261 period 0
x5206:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5210:	jne printFormat$261	; 2: 117 8

printFormat$259:	; Assign width value
x5212:	mov ax, [bp + 41]	; 3: 139 70 41
x5215:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$260:	; Goto 283
x5218:	jmp printFormat$283	; 2: 235 106

printFormat$261:	; Assign precision value
x5220:	mov ax, [bp + 41]	; 3: 139 70 41
x5223:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$262:	; Goto 283
x5226:	jmp printFormat$283	; 2: 235 98

printFormat$263:	; NotEqual 279 c 37
x5228:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5232:	jne printFormat$279	; 2: 117 72

printFormat$264:	; Assign percent 1
x5234:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$265:	; Assign plus 0
x5239:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$266:	; Assign minus 0
x5244:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$267:	; Assign space 0
x5249:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$268:	; Assign zero 0
x5254:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$269:	; Assign grid 0
x5259:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$270:	; Assign widthStar 0
x5264:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$271:	; Assign period 0
x5269:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$272:	; Assign precisionStar 0
x5274:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$273:	; Assign shortInt 0
x5279:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$274:	; Assign longInt 0
x5284:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$275:	; Assign longDouble 0
x5289:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$276:	; Assign width 0
x5294:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$277:	; Assign precision 0
x5299:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$278:	; Goto 283
x5304:	jmp printFormat$283	; 2: 235 20

printFormat$279:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$280:	; Parameter 41 c 6
x5306:	mov al, [bp + 40]	; 3: 138 70 40
x5309:	mov [bp + 47], al	; 3: 136 70 47

printFormat$281:	; Call 41 printChar 0
x5312:	mov word [bp + 41], printFormat$282	; 5: 199 70 41 206 20
x5317:	mov [bp + 43], bp	; 3: 137 110 43
x5320:	add bp, 41	; 3: 131 197 41
x5323:	jmp printChar	; 3: 233 67 7

printFormat$282:	; PostCall 41

printFormat$283:	; Increment index
x5326:	inc word [bp + 10]	; 3: 255 70 10

printFormat$284:	; Goto 16
x5329:	jmp printFormat$16	; 3: 233 29 251

printFormat$285:	; NotEqual 291 g_outStatus 1
x5332:	cmp word [g_outStatus], 1	; 5: 131 62 156 15 1
x5337:	jne printFormat$291	; 2: 117 16

printFormat$286:	; IntegralToIntegral £temporary2296 g_outDevice
x5339:	mov ax, [g_outDevice]	; 3: 161 158 15

printFormat$287:	; Assign outString £temporary2296
x5342:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$288:	; BinaryAdd £temporary2298 outString g_outChars
x5345:	mov si, [bp + 40]	; 3: 139 118 40
x5348:	add si, [g_outChars]	; 4: 3 54 250 20

printFormat$289:	; Deref £temporary2297 -> £temporary2298 £temporary2298 0

printFormat$290:	; Assign £temporary2297 -> £temporary2298 0
x5352:	mov byte [si], 0	; 3: 198 4 0

printFormat$291:	; SetReturnValue g_outChars
x5355:	mov bx, [g_outChars]	; 4: 139 30 250 20

printFormat$292:	; Return g_outChars
x5359:	mov ax, [bp]	; 3: 139 70 0
x5362:	mov di, [bp + 4]	; 3: 139 126 4
x5365:	mov bp, [bp + 2]	; 3: 139 110 2
x5368:	jmp ax	; 2: 255 224

printFormat$293:	; FunctionEnd printFormat

g_outChars:
x5370:	db 0, 0	; 2: 0 0

int2$10#:
x5372:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary1997 -> format format 0
x5374:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary1997 -> format
x5377:	mov al, [si]	; 2: 138 4
x5379:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5382:	mov al, [bp + 30]	; 3: 138 70 30
x5385:	cmp al, 100	; 2: 60 100
x5387:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5389:	cmp al, 105	; 2: 60 105
x5391:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5393:	cmp al, 99	; 2: 60 99
x5395:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5399:	cmp al, 115	; 2: 60 115
x5401:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5405:	cmp al, 88	; 2: 60 88
x5407:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5411:	cmp al, 120	; 2: 60 120
x5413:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5417:	cmp al, 98	; 2: 60 98
x5419:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5423:	cmp al, 111	; 2: 60 111
x5425:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5429:	cmp al, 117	; 2: 60 117
x5431:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5435:	cmp al, 71	; 2: 60 71
x5437:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5441:	cmp al, 103	; 2: 60 103
x5443:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5447:	cmp al, 69	; 2: 60 69
x5449:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5453:	cmp al, 101	; 2: 60 101
x5455:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5459:	cmp al, 102	; 2: 60 102
x5461:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5465:	cmp al, 112	; 2: 60 112
x5467:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5471:	cmp al, 110	; 2: 60 110
x5473:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5477:	cmp al, 37	; 2: 60 37
x5479:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5483:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5486:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5490:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5492:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary1999 arg_list 2
x5496:	mov si, [bp + 8]	; 3: 139 118 8
x5499:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary2000 £temporary1999

printArgument$25:	; Deref £temporary2001 -> £temporary2000 £temporary2000 0

printArgument$26:	; IntegralToIntegral £temporary2002 £temporary2001 -> £temporary2000
x5502:	mov ax, [si]	; 2: 139 4
x5504:	cmp ax, 0	; 3: 131 248 0
x5507:	jge printArgument$27	; 2: 125 4
x5509:	neg ax	; 2: 247 216
x5511:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary2003 £temporary2002
x5513:	and eax, 255	; 6: 102 37 255 0 0 0
x5519:	cmp al, 0	; 2: 60 0
x5521:	jge printArgument$28	; 2: 125 5
x5523:	neg al	; 2: 246 216
x5525:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary2003
x5528:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5532:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5534:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5538:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5540:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary2005 arg_list 4
x5544:	mov si, [bp + 8]	; 3: 139 118 8
x5547:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary2006 £temporary2005

printArgument$34:	; Deref £temporary2007 -> £temporary2006 £temporary2006 0

printArgument$35:	; Assign longValue £temporary2007 -> £temporary2006
x5550:	mov eax, [si]	; 3: 102 139 4
x5553:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5557:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5559:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary2009 arg_list 2
x5563:	mov si, [bp + 8]	; 3: 139 118 8
x5566:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary2010 £temporary2009

printArgument$40:	; Deref £temporary2011 -> £temporary2010 £temporary2010 0

printArgument$41:	; IntegralToIntegral £temporary2012 £temporary2011 -> £temporary2010
x5569:	mov ax, [si]	; 2: 139 4
x5571:	and eax, 65535	; 6: 102 37 255 255 0 0
x5577:	cmp ax, 0	; 3: 131 248 0
x5580:	jge printArgument$42	; 2: 125 5
x5582:	neg ax	; 2: 247 216
x5584:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary2012
x5587:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5591:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5595:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary2016 -> negativePtr negativePtr 0
x5597:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5600:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5605:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary2018 1
x5607:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5610:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary2018 0
x5612:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary2016 -> negativePtr £temporary2018
x5615:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5617:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5621:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5623:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5627:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5631:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 13 22
x5636:	mov [bp + 50], bp	; 3: 137 110 50
x5639:	add bp, 48	; 3: 131 197 48
x5642:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary2021

printArgument$56:	; Assign longValue £temporary2021
x5645:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5649:	mov ax, [bp + 8]	; 3: 139 70 8
x5652:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5655:	mov ax, [bp + 16]	; 3: 139 70 16
x5658:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary2022 precision
x5661:	mov si, bp	; 2: 137 238
x5663:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary2022 10
x5666:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5669:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 51 22
x5674:	mov [bp + 50], bp	; 3: 137 110 50
x5677:	add bp, 48	; 3: 131 197 48
x5680:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary2023

printArgument$65:	; Assign arg_list £temporary2023
x5683:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5686:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5690:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5694:	mov ax, [bp + 10]	; 3: 139 70 10
x5697:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5700:	mov ax, [bp + 12]	; 3: 139 70 12
x5703:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5706:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 88 22
x5711:	mov [bp + 50], bp	; 3: 137 110 50
x5714:	add bp, 48	; 3: 131 197 48
x5717:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5720:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5723:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary2026 arg_list 2
x5727:	mov si, [bp + 8]	; 3: 139 118 8
x5730:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary2027 £temporary2026

printArgument$76:	; Deref £temporary2028 -> £temporary2027 £temporary2027 0

printArgument$77:	; IntegralToIntegral £temporary2029 £temporary2028 -> £temporary2027
x5733:	mov ax, [si]	; 2: 139 4
x5735:	cmp ax, 0	; 3: 131 248 0
x5738:	jge printArgument$78	; 2: 125 4
x5740:	neg ax	; 2: 247 216
x5742:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary2029
x5744:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5747:	mov ax, [bp + 8]	; 3: 139 70 8
x5750:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5753:	mov ax, [bp + 16]	; 3: 139 70 16
x5756:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary2030 precision
x5759:	mov si, bp	; 2: 137 238
x5761:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary2030 10
x5764:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5767:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 149 22
x5772:	mov [bp + 46], bp	; 3: 137 110 46
x5775:	add bp, 44	; 3: 131 197 44
x5778:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary2031

printArgument$87:	; Assign arg_list £temporary2031
x5781:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5784:	mov al, [bp + 31]	; 3: 138 70 31
x5787:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5790:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 172 22
x5795:	mov [bp + 46], bp	; 3: 137 110 46
x5798:	add bp, 44	; 3: 131 197 44
x5801:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5804:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5807:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary2034 arg_list 2
x5811:	mov si, [bp + 8]	; 3: 139 118 8
x5814:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary2035 £temporary2034

printArgument$96:	; Deref £temporary2036 -> £temporary2035 £temporary2035 0

printArgument$97:	; Assign stringValue £temporary2036 -> £temporary2035
x5817:	mov ax, [si]	; 2: 139 4
x5819:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5822:	mov ax, [bp + 8]	; 3: 139 70 8
x5825:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5828:	mov ax, [bp + 16]	; 3: 139 70 16
x5831:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary2037 precision
x5834:	mov si, bp	; 2: 137 238
x5836:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary2037 10
x5839:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5842:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 224 22
x5847:	mov [bp + 48], bp	; 3: 137 110 48
x5850:	add bp, 46	; 3: 131 197 46
x5853:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary2038

printArgument$106:	; Assign arg_list £temporary2038
x5856:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5859:	mov ax, [bp + 44]	; 3: 139 70 44
x5862:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5865:	mov ax, [bp + 18]	; 3: 139 70 18
x5868:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5871:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 253 22
x5876:	mov [bp + 48], bp	; 3: 137 110 48
x5879:	add bp, 46	; 3: 131 197 46
x5882:	jmp printString	; 3: 233 220 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5885:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5888:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5892:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary2054 10
x5894:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5900:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5902:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5906:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary2050 8
x5908:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5914:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5916:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5920:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary2046 2
x5922:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5928:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary2046 16
x5930:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary2050 £temporary2046

printArgument$124:	; Assign £temporary2054 £temporary2050

printArgument$125:	; Assign base £temporary2054
x5936:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x5940:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5944:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x5946:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary2056 arg_list 2
x5950:	mov si, [bp + 8]	; 3: 139 118 8
x5953:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary2057 £temporary2056

printArgument$130:	; Deref £temporary2058 -> £temporary2057 £temporary2057 0

printArgument$131:	; IntegralToIntegral £temporary2059 £temporary2058 -> £temporary2057
x5956:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary2060 £temporary2059
x5958:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary2060
x5964:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x5968:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x5970:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5974:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x5976:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary2062 arg_list 4
x5980:	mov si, [bp + 8]	; 3: 139 118 8
x5983:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary2063 £temporary2062

printArgument$139:	; Deref £temporary2064 -> £temporary2063 £temporary2063 0

printArgument$140:	; Assign value £temporary2064 -> £temporary2063
x5986:	mov eax, [si]	; 3: 102 139 4
x5989:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x5993:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x5995:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary2066 arg_list 2
x5999:	mov si, [bp + 8]	; 3: 139 118 8
x6002:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary2067 £temporary2066

printArgument$145:	; Deref £temporary2068 -> £temporary2067 £temporary2067 0

printArgument$146:	; IntegralToIntegral £temporary2069 £temporary2068 -> £temporary2067
x6005:	mov ax, [si]	; 2: 139 4
x6007:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary2069
x6013:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6017:	mov ax, [bp + 8]	; 3: 139 70 8
x6020:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6023:	mov ax, [bp + 16]	; 3: 139 70 16
x6026:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary2072 precision
x6029:	mov si, bp	; 2: 137 238
x6031:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary2072 10
x6034:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6037:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 163 23
x6042:	mov [bp + 54], bp	; 3: 137 110 54
x6045:	add bp, 52	; 3: 131 197 52
x6048:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary2073

printArgument$156:	; Assign arg_list £temporary2073
x6051:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6054:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6058:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6062:	mov ax, [bp + 10]	; 3: 139 70 10
x6065:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6068:	mov ax, [bp + 12]	; 3: 139 70 12
x6071:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6074:	mov ax, [bp + 14]	; 3: 139 70 14
x6077:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6080:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6084:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary2074 c
x6088:	mov al, [bp + 30]	; 3: 138 70 30
x6091:	and ax, 255	; 3: 37 255 0
x6094:	cmp al, 0	; 2: 60 0
x6096:	jge printArgument$165	; 2: 125 4
x6098:	neg al	; 2: 246 216
x6100:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary2074 26
x6102:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6105:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 231 23
x6110:	mov [bp + 74], bp	; 3: 137 110 74
x6113:	add bp, 72	; 3: 131 197 72
x6116:	jmp isupper	; 3: 233 226 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary2075

printArgument$169:	; Parameter 52 £temporary2075 20
x6119:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6122:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 248 23
x6127:	mov [bp + 54], bp	; 3: 137 110 54
x6130:	add bp, 52	; 3: 131 197 52
x6133:	jmp printUnsignedLong	; 3: 233 206 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6136:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6139:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6143:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6145:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary2078 arg_list 8
x6149:	mov si, [bp + 8]	; 3: 139 118 8
x6152:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary2079 £temporary2078

printArgument$177:	; Deref £temporary2080 -> £temporary2079 £temporary2079 0

printArgument$178:	; PushFloat £temporary2080 -> £temporary2079
x6155:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6157:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6160:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6163:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6166:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6171:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6176:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6181:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6186:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 56 24
x6191:	mov [bp + 46], bp	; 3: 137 110 46
x6194:	add bp, 44	; 3: 131 197 44
x6197:	jmp printLongDoublePlain	; 3: 233 57 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6200:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6202:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary2083 arg_list 8
x6206:	mov si, [bp + 8]	; 3: 139 118 8
x6209:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary2084 £temporary2083

printArgument$193:	; Deref £temporary2085 -> £temporary2084 £temporary2084 0

printArgument$194:	; PushFloat £temporary2085 -> £temporary2084
x6212:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6214:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6217:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6221:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary2089 -> negativePtr negativePtr 0
x6223:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6226:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6229:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6231:	fcompp	; 2: 222 217
x6233:	fstsw ax	; 3: 155 223 224
x6236:	sahf	; 1: 158
x6237:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary2091 1
x6239:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6242:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary2091 0
x6244:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary2089 -> negativePtr £temporary2091
x6247:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6249:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6253:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6255:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6258:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6261:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 131 24
x6266:	mov [bp + 46], bp	; 3: 137 110 46
x6269:	add bp, 44	; 3: 131 197 44
x6272:	jmp fabs	; 3: 233 50 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary2094

printArgument$212:	; PopFloat longDoubleValue
x6275:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6278:	mov ax, [bp + 8]	; 3: 139 70 8
x6281:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6284:	mov ax, [bp + 16]	; 3: 139 70 16
x6287:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary2095 precision
x6290:	mov si, bp	; 2: 137 238
x6292:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary2095 10
x6295:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6298:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 168 24
x6303:	mov [bp + 46], bp	; 3: 137 110 46
x6306:	add bp, 44	; 3: 131 197 44
x6309:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary2096

printArgument$221:	; Assign arg_list £temporary2096
x6312:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6315:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6319:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6321:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6324:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6327:	mov ax, [bp + 10]	; 3: 139 70 10
x6330:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6333:	mov ax, [bp + 12]	; 3: 139 70 12
x6336:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6339:	mov ax, [bp + 14]	; 3: 139 70 14
x6342:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6345:	mov ax, [bp + 18]	; 3: 139 70 18
x6348:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6351:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 221 24
x6356:	mov [bp + 46], bp	; 3: 137 110 46
x6359:	add bp, 44	; 3: 131 197 44
x6362:	jmp printLongDoublePlain	; 3: 233 148 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6365:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary2099 c
x6368:	mov al, [bp + 30]	; 3: 138 70 30
x6371:	and ax, 255	; 3: 37 255 0
x6374:	cmp al, 0	; 2: 60 0
x6376:	jge printArgument$235	; 2: 125 4
x6378:	neg al	; 2: 246 216
x6380:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary2099 6
x6382:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6385:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 255 24
x6390:	mov [bp + 46], bp	; 3: 137 110 46
x6393:	add bp, 44	; 3: 131 197 44
x6396:	jmp tolower	; 3: 233 216 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary2100

printArgument$239:	; NotEqual 257 £temporary2100 101
x6399:	cmp bx, 101	; 3: 131 251 101
x6402:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6404:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6407:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6410:	mov ax, [bp + 10]	; 3: 139 70 10
x6413:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6416:	mov ax, [bp + 12]	; 3: 139 70 12
x6419:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6422:	mov ax, [bp + 14]	; 3: 139 70 14
x6425:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6428:	mov ax, [bp + 18]	; 3: 139 70 18
x6431:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary2102 c
x6434:	mov al, [bp + 30]	; 3: 138 70 30
x6437:	and ax, 255	; 3: 37 255 0
x6440:	cmp al, 0	; 2: 60 0
x6442:	jge printArgument$249	; 2: 125 4
x6444:	neg al	; 2: 246 216
x6446:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary2102 28
x6448:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6451:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 65 25
x6456:	mov [bp + 68], bp	; 3: 137 110 68
x6459:	add bp, 66	; 3: 131 197 66
x6462:	jmp isupper	; 3: 233 136 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary2103

printArgument$253:	; Parameter 44 £temporary2103 22
x6465:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6468:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 82 25
x6473:	mov [bp + 46], bp	; 3: 137 110 46
x6476:	add bp, 44	; 3: 131 197 44
x6479:	jmp printLongDoubleExpo	; 3: 233 38 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6482:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6485:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6488:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6491:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 105 25
x6496:	mov [bp + 46], bp	; 3: 137 110 46
x6499:	add bp, 44	; 3: 131 197 44
x6502:	jmp fabs	; 3: 233 76 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary2105

printArgument$264:	; Parameter 44 £temporary2105 6
x6505:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6508:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 122 25
x6513:	mov [bp + 46], bp	; 3: 137 110 46
x6516:	add bp, 44	; 3: 131 197 44
x6519:	jmp log10	; 3: 233 101 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary2106

printArgument$268:	; FloatingToIntegral £temporary2107 £temporary2106
x6522:	fistp word [container2bytes#]	; 4: 223 30 16 27
x6526:	mov ax, [container2bytes#]	; 3: 161 16 27

printArgument$269:	; Assign expo £temporary2107
x6529:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6532:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6536:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6538:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6542:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6544:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6547:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6550:	mov ax, [bp + 10]	; 3: 139 70 10
x6553:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6556:	mov ax, [bp + 12]	; 3: 139 70 12
x6559:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6562:	mov ax, [bp + 14]	; 3: 139 70 14
x6565:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6568:	mov ax, [bp + 18]	; 3: 139 70 18
x6571:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6574:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 188 25
x6579:	mov [bp + 48], bp	; 3: 137 110 48
x6582:	add bp, 46	; 3: 131 197 46
x6585:	jmp printLongDoublePlain	; 3: 233 181 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6588:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6591:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6594:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6597:	mov ax, [bp + 10]	; 3: 139 70 10
x6600:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6603:	mov ax, [bp + 12]	; 3: 139 70 12
x6606:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6609:	mov ax, [bp + 14]	; 3: 139 70 14
x6612:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6615:	mov ax, [bp + 18]	; 3: 139 70 18
x6618:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary2112 c
x6621:	mov al, [bp + 30]	; 3: 138 70 30
x6624:	and ax, 255	; 3: 37 255 0
x6627:	cmp al, 0	; 2: 60 0
x6629:	jge printArgument$291	; 2: 125 4
x6631:	neg al	; 2: 246 216
x6633:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary2112 28
x6635:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6638:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 252 25
x6643:	mov [bp + 70], bp	; 3: 137 110 70
x6646:	add bp, 68	; 3: 131 197 68
x6649:	jmp isupper	; 3: 233 205 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary2113

printArgument$295:	; Parameter 46 £temporary2113 22
x6652:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6655:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 13 26
x6660:	mov [bp + 48], bp	; 3: 137 110 48
x6663:	add bp, 46	; 3: 131 197 46
x6666:	jmp printLongDoubleExpo	; 3: 233 107 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6669:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6672:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary2116 arg_list 2
x6676:	mov si, [bp + 8]	; 3: 139 118 8
x6679:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary2117 £temporary2116

printArgument$302:	; Deref £temporary2118 -> £temporary2117 £temporary2117 0

printArgument$303:	; Assign ptrValue £temporary2118 -> £temporary2117
x6682:	mov ax, [si]	; 2: 139 4
x6684:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6687:	mov ax, [bp + 8]	; 3: 139 70 8
x6690:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6693:	mov ax, [bp + 16]	; 3: 139 70 16
x6696:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary2119 precision
x6699:	mov si, bp	; 2: 137 238
x6701:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary2119 10
x6704:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6707:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 65 26
x6712:	mov [bp + 46], bp	; 3: 137 110 46
x6715:	add bp, 44	; 3: 131 197 44
x6718:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary2120

printArgument$312:	; Assign arg_list £temporary2120
x6721:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary2121 ptrValue
x6724:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary2122 £temporary2121
x6727:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary2122 6
x6733:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6737:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6742:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6747:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6752:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6760:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6765:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 123 26
x6770:	mov [bp + 46], bp	; 3: 137 110 46
x6773:	add bp, 44	; 3: 131 197 44
x6776:	jmp printUnsignedLong	; 3: 233 75 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6779:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6782:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary2125 arg_list 2
x6786:	mov si, [bp + 8]	; 3: 139 118 8
x6789:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary2126 £temporary2125

printArgument$328:	; Deref £temporary2127 -> £temporary2126 £temporary2126 0

printArgument$329:	; Assign ptrValue £temporary2127 -> £temporary2126
x6792:	mov ax, [si]	; 2: 139 4
x6794:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6797:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary2129 arg_list 2
x6801:	mov si, [bp + 8]	; 3: 139 118 8
x6804:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary2130 £temporary2129

printArgument$333:	; Deref £temporary2131 -> £temporary2130 £temporary2130 0

printArgument$334:	; Assign intPtr £temporary2131 -> £temporary2130
x6807:	mov ax, [si]	; 2: 139 4
x6809:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6812:	mov ax, [bp + 8]	; 3: 139 70 8
x6815:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6818:	mov ax, [bp + 16]	; 3: 139 70 16
x6821:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary2132 precision
x6824:	mov si, bp	; 2: 137 238
x6826:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary2132 10
x6829:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6832:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 190 26
x6837:	mov [bp + 46], bp	; 3: 137 110 46
x6840:	add bp, 44	; 3: 131 197 44
x6843:	nop	; 1: 144
x6844:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary2133

printArgument$343:	; Assign arg_list £temporary2133
x6846:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary2134 -> intPtr intPtr 0
x6849:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary2134 -> intPtr g_outChars
x6852:	mov ax, [g_outChars]	; 3: 161 250 20
x6855:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6857:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6859:	mov ax, [bp + 8]	; 3: 139 70 8
x6862:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6865:	mov ax, [bp + 16]	; 3: 139 70 16
x6868:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary2135 precision
x6871:	mov si, bp	; 2: 137 238
x6873:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary2135 10
x6876:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6879:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 237 26
x6884:	mov [bp + 46], bp	; 3: 137 110 46
x6887:	add bp, 44	; 3: 131 197 44
x6890:	nop	; 1: 144
x6891:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary2136

printArgument$355:	; Assign arg_list £temporary2136
x6893:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6896:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6900:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 2 27
x6905:	mov [bp + 46], bp	; 3: 137 110 46
x6908:	add bp, 44	; 3: 131 197 44
x6911:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6914:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6917:	mov ax, [bp]	; 3: 139 70 0
x6920:	mov di, [bp + 4]	; 3: 139 126 4
x6923:	mov bp, [bp + 2]	; 3: 139 110 2
x6926:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6928:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6930:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6935:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3384 value
x6937:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x6941:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3388 £temporary3384

labs$3:	; Goto 5
x6944:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3388 value
x6946:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3388

labs$6:	; Return £temporary3388
x6950:	mov ax, [bp]	; 3: 139 70 0
x6953:	mov di, [bp + 4]	; 3: 139 126 4
x6956:	mov bp, [bp + 2]	; 3: 139 110 2
x6959:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x6961:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x6965:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1980 -> widthPtr widthPtr 0
x6967:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1980 -> widthPtr -1
x6970:	cmp word [si], -1	; 3: 131 60 255
x6973:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1983 -> widthPtr widthPtr 0
x6975:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x6978:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1985 arg_list 2
x6982:	mov di, [bp + 6]	; 3: 139 126 6
x6985:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1986 £temporary1985

checkWidthAndPrecision$7:	; Deref £temporary1987 -> £temporary1986 £temporary1986 0

checkWidthAndPrecision$8:	; Assign £temporary1983 -> widthPtr £temporary1987 -> £temporary1986
x6988:	mov ax, [di]	; 2: 139 5
x6990:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x6992:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x6996:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary1989 -> precisionPtr precisionPtr 0
x6998:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1989 -> precisionPtr -1
x7001:	cmp word [si], -1	; 3: 131 60 255
x7004:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary1992 -> precisionPtr precisionPtr 0
x7006:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7009:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary1994 arg_list 2
x7013:	mov di, [bp + 6]	; 3: 139 126 6
x7016:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1995 £temporary1994

checkWidthAndPrecision$16:	; Deref £temporary1996 -> £temporary1995 £temporary1995 0

checkWidthAndPrecision$17:	; Assign £temporary1992 -> precisionPtr £temporary1996 -> £temporary1995
x7019:	mov ax, [di]	; 2: 139 5
x7021:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7023:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7026:	mov ax, [bp]	; 3: 139 70 0
x7029:	mov di, [bp + 4]	; 3: 139 126 4
x7032:	mov bp, [bp + 2]	; 3: 139 110 2
x7035:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7037:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7042:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1835 longValue
x7044:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7048:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1835
x7051:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7055:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7059:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 161 27
x7064:	mov [bp + 16], bp	; 3: 137 110 16
x7067:	add bp, 14	; 3: 131 197 14
x7070:	nop	; 1: 144
x7071:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7073:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7075:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7079:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7081:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7085:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 187 27
x7090:	mov [bp + 16], bp	; 3: 137 110 16
x7093:	add bp, 14	; 3: 131 197 14
x7096:	nop	; 1: 144
x7097:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7099:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7101:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7105:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7107:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7111:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 213 27
x7116:	mov [bp + 16], bp	; 3: 137 110 16
x7119:	add bp, 14	; 3: 131 197 14
x7122:	nop	; 1: 144
x7123:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7125:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7130:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7132:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7136:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 238 27
x7141:	mov [bp + 16], bp	; 3: 137 110 16
x7144:	add bp, 14	; 3: 131 197 14
x7147:	nop	; 1: 144
x7148:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7150:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7152:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7156:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7160:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 6 28
x7165:	mov [bp + 16], bp	; 3: 137 110 16
x7168:	add bp, 14	; 3: 131 197 14
x7171:	nop	; 1: 144
x7172:	jmp printLongIntRec	; 2: 235 101

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7174:	mov ax, [bp]	; 3: 139 70 0
x7177:	mov di, [bp + 4]	; 3: 139 126 4
x7180:	mov bp, [bp + 2]	; 3: 139 110 2
x7183:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7185:	mov ax, [g_outStatus]	; 3: 161 156 15
x7188:	cmp ax, 0	; 3: 131 248 0
x7191:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7193:	cmp ax, 1	; 3: 131 248 1
x7196:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7198:	cmp ax, 2	; 3: 131 248 2
x7201:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 25
x7203:	jmp printChar$25	; 2: 235 59

printChar$5:	; IntegralToIntegral £temporary1777 g_outDevice
x7205:	mov ax, [g_outDevice]	; 3: 161 158 15

printChar$6:	; Assign stream £temporary1777
x7208:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7211:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1780 -> stream stream 2
x7213:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1780 -> stream
x7216:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7219:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1783 c
x7222:	mov dx, bp	; 2: 137 234
x7224:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1783

printChar$13:	; Interrupt 33
x7227:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7229:	inc word [g_outChars]	; 4: 255 6 250 20

printChar$15:	; Goto 25
x7233:	jmp printChar$25	; 2: 235 29

printChar$16:	; IntegralToIntegral £temporary1785 g_outDevice
x7235:	mov ax, [g_outDevice]	; 3: 161 158 15

printChar$17:	; Assign outString £temporary1785
x7238:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1786 g_outChars
x7241:	mov ax, [g_outChars]	; 3: 161 250 20

printChar$19:	; Increment g_outChars
x7244:	inc word [g_outChars]	; 4: 255 6 250 20

printChar$20:	; BinaryAdd £temporary1788 outString £temporary1786
x7248:	mov si, [bp + 9]	; 3: 139 118 9
x7251:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1787 -> £temporary1788 £temporary1788 0

printChar$22:	; Assign £temporary1787 -> £temporary1788 c
x7253:	mov al, [bp + 6]	; 3: 138 70 6
x7256:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 25
x7258:	jmp printChar$25	; 2: 235 4

printChar$24:	; Increment g_outChars
x7260:	inc word [g_outChars]	; 4: 255 6 250 20

printChar$25:	; Return 0
x7264:	mov ax, [bp]	; 3: 139 70 0
x7267:	mov di, [bp + 4]	; 3: 139 126 4
x7270:	mov bp, [bp + 2]	; 3: 139 110 2
x7273:	jmp ax	; 2: 255 224

printChar$26:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7275:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7280:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1825 longValue 10
x7282:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7286:	xor edx, edx	; 3: 102 49 210
x7289:	idiv dword [int4$10#]	; 5: 102 247 62 213 28

printLongIntRec$2:	; IntegralToIntegral £temporary1826 £temporary1825
x7294:	cmp edx, 0	; 4: 102 131 250 0
x7298:	jge printLongIntRec$3	; 2: 125 5
x7300:	neg edx	; 3: 102 247 218
x7303:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1826
x7305:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1827 longValue 10
x7308:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7312:	xor edx, edx	; 3: 102 49 210
x7315:	idiv dword [int4$10#]	; 5: 102 247 62 213 28

printLongIntRec$6:	; Parameter 12 £temporary1827 6
x7320:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7324:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 170 28
x7329:	mov [bp + 14], bp	; 3: 137 110 14
x7332:	add bp, 12	; 3: 131 197 12
x7335:	nop	; 1: 144
x7336:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1829 digit 48
x7338:	mov ax, [bp + 10]	; 3: 139 70 10
x7341:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1830 £temporary1829
x7344:	cmp ax, 0	; 3: 131 248 0
x7347:	jge printLongIntRec$12	; 2: 125 4
x7349:	neg ax	; 2: 247 216
x7351:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1830 6
x7353:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7356:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 202 28
x7361:	mov [bp + 14], bp	; 3: 137 110 14
x7364:	add bp, 12	; 3: 131 197 12
x7367:	jmp printChar	; 3: 233 71 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7370:	mov ax, [bp]	; 3: 139 70 0
x7373:	mov di, [bp + 4]	; 3: 139 126 4
x7376:	mov bp, [bp + 2]	; 3: 139 110 2
x7379:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

int4$10#:
x7381:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7385:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7389:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7391:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7395:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7397:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1794 s index
x7402:	mov si, [bp + 6]	; 3: 139 118 6
x7405:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1793 -> £temporary1794 £temporary1794 0

printString$5:	; Equal 53 £temporary1793 -> £temporary1794 0
x7408:	cmp byte [si], 0	; 3: 128 60 0
x7411:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1798 s index
x7415:	mov si, [bp + 6]	; 3: 139 118 6
x7418:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1797 -> £temporary1798 £temporary1798 0

printString$9:	; Parameter 12 £temporary1797 -> £temporary1798 6
x7421:	mov al, [si]	; 2: 138 4
x7423:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7426:	mov word [bp + 12], printString$11	; 5: 199 70 12 16 29
x7431:	mov [bp + 14], bp	; 3: 137 110 14
x7434:	add bp, 12	; 3: 131 197 12
x7437:	jmp printChar	; 3: 233 1 255

printString$11:	; PostCall 12

printString$12:	; Increment index
x7440:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7443:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7445:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1800 precision
x7450:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7453:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1800 0
x7456:	cmp ax, 0	; 3: 131 248 0
x7459:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1803 s index
x7463:	mov si, [bp + 6]	; 3: 139 118 6
x7466:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1802 -> £temporary1803 £temporary1803 0

printString$20:	; Equal 53 £temporary1802 -> £temporary1803 0
x7469:	cmp byte [si], 0	; 3: 128 60 0
x7472:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1808 s index
x7476:	mov si, [bp + 6]	; 3: 139 118 6
x7479:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1807 -> £temporary1808 £temporary1808 0

printString$24:	; Parameter 12 £temporary1807 -> £temporary1808 6
x7482:	mov al, [si]	; 2: 138 4
x7484:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7487:	mov word [bp + 12], printString$26	; 5: 199 70 12 77 29
x7492:	mov [bp + 14], bp	; 3: 137 110 14
x7495:	add bp, 12	; 3: 131 197 12
x7498:	jmp printChar	; 3: 233 196 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7501:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7504:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7506:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7510:	mov word [bp + 10], printString$32	; 5: 199 70 10 100 29
x7515:	mov [bp + 12], bp	; 3: 137 110 12
x7518:	add bp, 10	; 3: 131 197 10
x7521:	jmp printChar	; 3: 233 173 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7524:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7528:	mov word [bp + 10], printString$36	; 5: 199 70 10 118 29
x7533:	mov [bp + 12], bp	; 3: 137 110 12
x7536:	add bp, 10	; 3: 131 197 10
x7539:	jmp printChar	; 3: 233 155 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7542:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7546:	mov word [bp + 10], printString$40	; 5: 199 70 10 136 29
x7551:	mov [bp + 12], bp	; 3: 137 110 12
x7554:	add bp, 10	; 3: 131 197 10
x7557:	jmp printChar	; 3: 233 137 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7560:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7564:	mov word [bp + 10], printString$44	; 5: 199 70 10 154 29
x7569:	mov [bp + 12], bp	; 3: 137 110 12
x7572:	add bp, 10	; 3: 131 197 10
x7575:	jmp printChar	; 3: 233 119 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7578:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7582:	mov word [bp + 10], printString$48	; 5: 199 70 10 172 29
x7587:	mov [bp + 12], bp	; 3: 137 110 12
x7590:	add bp, 10	; 3: 131 197 10
x7593:	jmp printChar	; 3: 233 101 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7596:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7600:	mov word [bp + 10], printString$52	; 5: 199 70 10 190 29
x7605:	mov [bp + 12], bp	; 3: 137 110 12
x7608:	add bp, 10	; 3: 131 197 10
x7611:	jmp printChar	; 3: 233 83 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7614:	mov ax, [bp]	; 3: 139 70 0
x7617:	mov di, [bp + 4]	; 3: 139 126 4
x7620:	mov bp, [bp + 2]	; 3: 139 110 2
x7623:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7625:	mov word [bp + 8], isupper$2	; 5: 199 70 8 215 29
x7630:	mov [bp + 10], bp	; 3: 137 110 10
x7633:	add bp, 8	; 3: 131 197 8
x7636:	nop	; 1: 144
x7637:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary360

isupper$4:	; Assign localeConvPtr £temporary360
x7639:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7642:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7646:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary362 -> localeConvPtr localeConvPtr 14
x7648:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary362 -> localeConvPtr 6
x7651:	mov ax, [si + 14]	; 3: 139 68 14
x7654:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7657:	mov ax, [bp + 6]	; 3: 139 70 6
x7660:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7663:	mov word [bp + 10], isupper$11	; 5: 199 70 10 253 29
x7668:	mov [bp + 12], bp	; 3: 137 110 12
x7671:	add bp, 10	; 3: 131 197 10
x7674:	jmp strchr	; 3: 233 121 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary363

isupper$13:	; Equal 16 £temporary363 0
x7677:	cmp bx, 0	; 3: 131 251 0
x7680:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary365 1
x7682:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7685:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary365 0
x7687:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary365

isupper$18:	; Return £temporary365
x7690:	mov ax, [bp]	; 3: 139 70 0
x7693:	mov di, [bp + 4]	; 3: 139 126 4
x7696:	mov bp, [bp + 2]	; 3: 139 110 2
x7699:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7701:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7705:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7707:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7711:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary369 1
x7713:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7716:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary369 0
x7718:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary369

isupper$25:	; Return £temporary369
x7721:	mov ax, [bp]	; 3: 139 70 0
x7724:	mov di, [bp + 4]	; 3: 139 126 4
x7727:	mov bp, [bp + 2]	; 3: 139 110 2
x7730:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7732:	cmp word [@614$g_currStructPtr], 0	; 5: 131 62 82 30 0
x7737:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary493 -> g_currStructPtr g_currStructPtr 2
x7739:	mov si, [@614$g_currStructPtr]	; 4: 139 54 82 30

localeconv$2:	; Assign £temporary497 £temporary493 -> g_currStructPtr
x7743:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7746:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary497 0
x7748:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary497

localeconv$6:	; Return £temporary497
x7751:	mov ax, [bp]	; 3: 139 70 0
x7754:	mov di, [bp + 4]	; 3: 139 126 4
x7757:	mov bp, [bp + 2]	; 3: 139 110 2
x7760:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@614$g_currStructPtr:
x7762:	dw @612$sArray	; 2: 84 30

@612$sArray:
x7764:	dw string_# ; 2: 96 30
x7766:	dw @609$en_US_utf8	; 2: 97 30
x7768:	dw string_C# ; 2: 113 33
x7770:	dw @609$en_US_utf8	; 2: 97 30
x7772:	dw string_US# ; 2: 115 33
x7774:	dw @609$en_US_utf8	; 2: 97 30

string_#:
x7776:	db 0	; 1: 0

@609$en_US_utf8:
x7777:	dw 1	; 2: 1 0
x7779:	dw 1	; 2: 1 0
x7781:	dw @605$enShortDayList ; 2: 115 30
x7783:	dw @606$enLongDayList ; 2: 157 30
x7785:	dw @607$enShortMonthList ; 2: 228 30
x7787:	dw @608$enLongMonthList ; 2: 44 31
x7789:	dw string_abcdefghijklmnopqrstuvwxyz# ; 2: 150 31
x7791:	dw string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 177 31
x7793:	dw enMessageList ; 2: 204 31

@605$enShortDayList:
x7795:	dw string_Sun# ; 2: 129 30
x7797:	dw string_Mon# ; 2: 133 30
x7799:	dw string_Tue# ; 2: 137 30
x7801:	dw string_Wed# ; 2: 141 30
x7803:	dw string_Thu# ; 2: 145 30
x7805:	dw string_Fri# ; 2: 149 30
x7807:	dw string_Sat# ; 2: 153 30

string_Sun#:
x7809:	db "Sun", 0	; 4: 83 117 110 0

string_Mon#:
x7813:	db "Mon", 0	; 4: 77 111 110 0

string_Tue#:
x7817:	db "Tue", 0	; 4: 84 117 101 0

string_Wed#:
x7821:	db "Wed", 0	; 4: 87 101 100 0

string_Thu#:
x7825:	db "Thu", 0	; 4: 84 104 117 0

string_Fri#:
x7829:	db "Fri", 0	; 4: 70 114 105 0

string_Sat#:
x7833:	db "Sat", 0	; 4: 83 97 116 0

@606$enLongDayList:
x7837:	dw string_Sunday# ; 2: 171 30
x7839:	dw string_Monday# ; 2: 178 30
x7841:	dw string_Tuesday# ; 2: 185 30
x7843:	dw string_Wednesday# ; 2: 193 30
x7845:	dw string_Thursday# ; 2: 203 30
x7847:	dw string_Friday# ; 2: 212 30
x7849:	dw string_Saturday# ; 2: 219 30

string_Sunday#:
x7851:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

string_Monday#:
x7858:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

string_Tuesday#:
x7865:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

string_Wednesday#:
x7873:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

string_Thursday#:
x7883:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

string_Friday#:
x7892:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

string_Saturday#:
x7899:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@607$enShortMonthList:
x7908:	dw string_Jan# ; 2: 252 30
x7910:	dw string_Feb# ; 2: 0 31
x7912:	dw string_Mar# ; 2: 4 31
x7914:	dw string_Apr# ; 2: 8 31
x7916:	dw string_May# ; 2: 12 31
x7918:	dw string_Jun# ; 2: 16 31
x7920:	dw string_Jul# ; 2: 20 31
x7922:	dw string_Aug# ; 2: 24 31
x7924:	dw string_Sep# ; 2: 28 31
x7926:	dw string_Oct# ; 2: 32 31
x7928:	dw string_Nov# ; 2: 36 31
x7930:	dw string_Dec# ; 2: 40 31

string_Jan#:
x7932:	db "Jan", 0	; 4: 74 97 110 0

string_Feb#:
x7936:	db "Feb", 0	; 4: 70 101 98 0

string_Mar#:
x7940:	db "Mar", 0	; 4: 77 97 114 0

string_Apr#:
x7944:	db "Apr", 0	; 4: 65 112 114 0

string_May#:
x7948:	db "May", 0	; 4: 77 97 121 0

string_Jun#:
x7952:	db "Jun", 0	; 4: 74 117 110 0

string_Jul#:
x7956:	db "Jul", 0	; 4: 74 117 108 0

string_Aug#:
x7960:	db "Aug", 0	; 4: 65 117 103 0

string_Sep#:
x7964:	db "Sep", 0	; 4: 83 101 112 0

string_Oct#:
x7968:	db "Oct", 0	; 4: 79 99 116 0

string_Nov#:
x7972:	db "Nov", 0	; 4: 78 111 118 0

string_Dec#:
x7976:	db "Dec", 0	; 4: 68 101 99 0

@608$enLongMonthList:
x7980:	dw string_January# ; 2: 68 31
x7982:	dw string_February# ; 2: 76 31
x7984:	dw string_March# ; 2: 85 31
x7986:	dw string_April# ; 2: 91 31
x7988:	dw string_May# ; 2: 12 31
x7990:	dw string_June# ; 2: 97 31
x7992:	dw string_July# ; 2: 102 31
x7994:	dw string_August# ; 2: 107 31
x7996:	dw string_September# ; 2: 114 31
x7998:	dw string_October# ; 2: 124 31
x8000:	dw string_November# ; 2: 132 31
x8002:	dw string_December# ; 2: 141 31

string_January#:
x8004:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

string_February#:
x8012:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

string_March#:
x8021:	db "March", 0	; 6: 77 97 114 99 104 0

string_April#:
x8027:	db "April", 0	; 6: 65 112 114 105 108 0

string_June#:
x8033:	db "June", 0	; 5: 74 117 110 101 0

string_July#:
x8038:	db "July", 0	; 5: 74 117 108 121 0

string_August#:
x8043:	db "August", 0	; 7: 65 117 103 117 115 116 0

string_September#:
x8050:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

string_October#:
x8060:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

string_November#:
x8068:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

string_December#:
x8077:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

string_abcdefghijklmnopqrstuvwxyz#:
x8086:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8113:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8140:	dw string_no20error# ; 2: 244 31
x8142:	dw string_function20number20invalid# ; 2: 253 31
x8144:	dw string_file20not20found# ; 2: 21 32
x8146:	dw string_path20not20found# ; 2: 36 32
x8148:	dw string_no20handle20available# ; 2: 51 32
x8150:	dw string_access20denied# ; 2: 71 32
x8152:	dw string_out20of20domain# ; 2: 85 32
x8154:	dw string_out20of20range# ; 2: 99 32
x8156:	dw string_invalid20multibyte20sequence# ; 2: 112 32
x8158:	dw string_error20while20opening# ; 2: 139 32
x8160:	dw string_error20while20flushing# ; 2: 159 32
x8162:	dw string_error20while20closing# ; 2: 180 32
x8164:	dw string_open20mode20invalid# ; 2: 200 32
x8166:	dw string_error20while20writing# ; 2: 218 32
x8168:	dw string_error20while20reading# ; 2: 238 32
x8170:	dw string_error20while20seeking# ; 2: 2 33
x8172:	dw string_error20while20telling# ; 2: 22 33
x8174:	dw string_error20while20sizing# ; 2: 42 33
x8176:	dw string_error20while20removing20file# ; 2: 61 33
x8178:	dw string_error20while20renaming20file# ; 2: 87 33

string_no20error#:
x8180:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

string_function20number20invalid#:
x8189:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

string_file20not20found#:
x8213:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

string_path20not20found#:
x8228:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

string_no20handle20available#:
x8243:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

string_access20denied#:
x8263:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

string_out20of20domain#:
x8277:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

string_out20of20range#:
x8291:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

string_invalid20multibyte20sequence#:
x8304:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

string_error20while20opening#:
x8331:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

string_error20while20flushing#:
x8351:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

string_error20while20closing#:
x8372:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

string_open20mode20invalid#:
x8392:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

string_error20while20writing#:
x8410:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

string_error20while20reading#:
x8430:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

string_error20while20seeking#:
x8450:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

string_error20while20telling#:
x8470:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

string_error20while20sizing#:
x8490:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

string_error20while20removing20file#:
x8509:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

string_error20while20renaming20file#:
x8535:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

string_C#:
x8561:	db "C", 0	; 2: 67 0

string_US#:
x8563:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary3998 i
x8566:	mov ax, [bp + 8]	; 3: 139 70 8
x8569:	cmp ax, 0	; 3: 131 248 0
x8572:	jge strchr$1	; 2: 125 4
x8574:	neg ax	; 2: 247 216
x8576:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary3998
x8578:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8581:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary4000 text index
x8586:	mov si, [bp + 6]	; 3: 139 118 6
x8589:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary3999 -> £temporary4000 £temporary4000 0

strchr$5:	; Equal 16 £temporary3999 -> £temporary4000 0
x8592:	cmp byte [si], 0	; 3: 128 60 0
x8595:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary4004 text index
x8597:	mov si, [bp + 6]	; 3: 139 118 6
x8600:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary4003 -> £temporary4004 £temporary4004 0

strchr$8:	; NotEqual 14 £temporary4003 -> £temporary4004 c
x8603:	mov al, [bp + 12]	; 3: 138 70 12
x8606:	cmp [si], al	; 2: 56 4
x8608:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary4007 text index
x8610:	mov bx, [bp + 6]	; 3: 139 94 6
x8613:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary4006 -> £temporary4007 £temporary4007 0

strchr$11:	; address £temporary4008 £temporary4006 -> £temporary4007

strchr$12:	; SetReturnValue £temporary4008

strchr$13:	; Return £temporary4008
x8616:	mov ax, [bp]	; 3: 139 70 0
x8619:	mov di, [bp + 4]	; 3: 139 126 4
x8622:	mov bp, [bp + 2]	; 3: 139 110 2
x8625:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8627:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8630:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8632:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8635:	mov ax, [bp]	; 3: 139 70 0
x8638:	mov di, [bp + 4]	; 3: 139 126 4
x8641:	mov bp, [bp + 2]	; 3: 139 110 2
x8644:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8646:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8650:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8652:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8656:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 222 33
x8661:	mov [bp + 24], bp	; 3: 137 110 24
x8664:	add bp, 22	; 3: 131 197 22
x8667:	jmp printChar	; 3: 233 51 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8670:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8674:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8676:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8680:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 246 33
x8685:	mov [bp + 24], bp	; 3: 137 110 24
x8688:	add bp, 22	; 3: 131 197 22
x8691:	jmp printChar	; 3: 233 27 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8694:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8698:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8700:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8705:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8707:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8711:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 21 34
x8716:	mov [bp + 24], bp	; 3: 137 110 24
x8719:	add bp, 22	; 3: 131 197 22
x8722:	jmp printChar	; 3: 233 252 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8725:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8730:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8732:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8736:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 46 34
x8741:	mov [bp + 24], bp	; 3: 137 110 24
x8744:	add bp, 22	; 3: 131 197 22
x8747:	jmp printChar	; 3: 233 227 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8750:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8754:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1884 88
x8756:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8758:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1884 120
x8760:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1884 6
x8762:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8765:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 75 34
x8770:	mov [bp + 24], bp	; 3: 137 110 24
x8773:	add bp, 22	; 3: 131 197 22
x8776:	jmp printChar	; 3: 233 198 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8779:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8784:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8786:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8790:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 100 34
x8795:	mov [bp + 24], bp	; 3: 137 110 24
x8798:	add bp, 22	; 3: 131 197 22
x8801:	jmp printChar	; 3: 233 173 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8804:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8806:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8810:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8814:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8818:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8822:	mov ax, [bp + 20]	; 3: 139 70 20
x8825:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8828:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 138 34
x8833:	mov [bp + 24], bp	; 3: 137 110 24
x8836:	add bp, 22	; 3: 131 197 22
x8839:	nop	; 1: 144
x8840:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8842:	mov ax, [bp]	; 3: 139 70 0
x8845:	mov di, [bp + 4]	; 3: 139 126 4
x8848:	mov bp, [bp + 2]	; 3: 139 110 2
x8851:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8853:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8858:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1860 unsignedValue base
x8860:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8864:	xor edx, edx	; 3: 102 49 210
x8867:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1861 £temporary1860

printUnsignedLongRec$3:	; Assign digit £temporary1861
x8871:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1862 unsignedValue base
x8874:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8878:	xor edx, edx	; 3: 102 49 210
x8881:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1862 6
x8885:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8889:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8893:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8897:	mov ax, [bp + 14]	; 3: 139 70 14
x8900:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8903:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 213 34
x8908:	mov [bp + 20], bp	; 3: 137 110 20
x8911:	add bp, 18	; 3: 131 197 18
x8914:	nop	; 1: 144
x8915:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8917:	mov ax, [bp + 16]	; 3: 139 70 16
x8920:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8923:	mov ax, [bp + 14]	; 3: 139 70 14
x8926:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x8929:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 239 34
x8934:	mov [bp + 20], bp	; 3: 137 110 20
x8937:	add bp, 18	; 3: 131 197 18
x8940:	nop	; 1: 144
x8941:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1864

printUnsignedLongRec$17:	; Assign c £temporary1864
x8943:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x8946:	mov al, [bp + 18]	; 3: 138 70 18
x8949:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x8952:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 6 35
x8957:	mov [bp + 21], bp	; 3: 137 110 21
x8960:	add bp, 19	; 3: 131 197 19
x8963:	jmp printChar	; 3: 233 11 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x8966:	mov ax, [bp]	; 3: 139 70 0
x8969:	mov di, [bp + 4]	; 3: 139 126 4
x8972:	mov bp, [bp + 2]	; 3: 139 110 2
x8975:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x8977:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x8981:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1850 digit 48
x8983:	mov bx, [bp + 6]	; 3: 139 94 6
x8986:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1851 £temporary1850
x8989:	cmp bx, 0	; 3: 131 251 0
x8992:	jge digitToChar$3	; 2: 125 4
x8994:	neg bx	; 2: 247 219
x8996:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1851

digitToChar$4:	; Return £temporary1851
x8998:	mov ax, [bp]	; 3: 139 70 0
x9001:	mov di, [bp + 4]	; 3: 139 126 4
x9004:	mov bp, [bp + 2]	; 3: 139 110 2
x9007:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9009:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9013:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1852 digit 10
x9015:	mov bx, [bp + 6]	; 3: 139 94 6
x9018:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1853 £temporary1852 65
x9021:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1854 £temporary1853
x9024:	cmp bx, 0	; 3: 131 251 0
x9027:	jge digitToChar$9	; 2: 125 4
x9029:	neg bx	; 2: 247 219
x9031:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1854

digitToChar$10:	; Return £temporary1854
x9033:	mov ax, [bp]	; 3: 139 70 0
x9036:	mov di, [bp + 4]	; 3: 139 126 4
x9039:	mov bp, [bp + 2]	; 3: 139 110 2
x9042:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1855 digit 10
x9044:	mov bx, [bp + 6]	; 3: 139 94 6
x9047:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1856 £temporary1855 97
x9050:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1857 £temporary1856
x9053:	cmp bx, 0	; 3: 131 251 0
x9056:	jge digitToChar$14	; 2: 125 4
x9058:	neg bx	; 2: 247 219
x9060:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1857

digitToChar$15:	; Return £temporary1857
x9062:	mov ax, [bp]	; 3: 139 70 0
x9065:	mov di, [bp + 4]	; 3: 139 126 4
x9068:	mov bp, [bp + 2]	; 3: 139 110 2
x9071:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9073:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9076:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9078:	fcompp	; 2: 222 217
x9080:	fstsw ax	; 3: 155 223 224
x9083:	sahf	; 1: 158
x9084:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9086:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9090:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 144 35
x9095:	mov [bp + 24], bp	; 3: 137 110 24
x9098:	add bp, 22	; 3: 131 197 22
x9101:	jmp printChar	; 3: 233 129 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9104:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1920 longDoubleValue
x9107:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9109:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9112:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9117:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9122:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1921 longDoubleValue
x9125:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x9129:	mov eax, [container4bytes#]	; 4: 102 161 9 36

printLongDoublePlain$14:	; Assign longValue £temporary1921
x9133:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9137:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9141:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9145:	mov ax, [bp + 14]	; 3: 139 70 14
x9148:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9151:	mov ax, [bp + 16]	; 3: 139 70 16
x9154:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9157:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 211 35
x9162:	mov [bp + 28], bp	; 3: 137 110 28
x9165:	add bp, 26	; 3: 131 197 26
x9168:	jmp printLongInt	; 3: 233 170 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9171:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1923 longValue
x9174:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1924 longDoubleValue £temporary1923
x9177:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9179:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9182:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9185:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9188:	mov ax, [bp + 18]	; 3: 139 70 18
x9191:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9194:	mov ax, [bp + 20]	; 3: 139 70 20
x9197:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9200:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 254 35
x9205:	mov [bp + 28], bp	; 3: 137 110 28
x9208:	add bp, 26	; 3: 131 197 26
x9211:	nop	; 1: 144
x9212:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9214:	mov ax, [bp]	; 3: 139 70 0
x9217:	mov di, [bp + 4]	; 3: 139 126 4
x9220:	mov bp, [bp + 2]	; 3: 139 110 2
x9223:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9225:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9229:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9232:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1899 longDoubleValue
x9235:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x9239:	mov eax, [container4bytes#]	; 4: 102 161 9 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1900 £temporary1899
x9243:	mov [container4bytes#], eax	; 4: 102 163 9 36
x9247:	fild dword [container4bytes#]	; 4: 219 6 9 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1901 longDoubleValue £temporary1900
x9251:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9253:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9256:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9260:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9262:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9267:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9271:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9273:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9277:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9279:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9283:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 81 36
x9288:	mov [bp + 20], bp	; 3: 137 110 20
x9291:	add bp, 18	; 3: 131 197 18
x9294:	jmp printChar	; 3: 233 192 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1907 precision
x9297:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9300:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1907 0
x9303:	cmp ax, 0	; 3: 131 248 0
x9306:	jle printLongDoubleFraction$35	; 2: 126 70

printLongDoubleFraction$17:	; PushFloat 10.0
x9308:	fld qword [float8$10.0#]	; 4: 221 6 173 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9312:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1909 10.0 longDoubleValue
x9315:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
x9317:	fstp qword [bp + 18]	; 3: 221 94 18

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
x9320:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1910 longDoubleValue10
x9323:	fistp word [container2bytes#]	; 4: 223 30 16 27
x9327:	mov ax, [container2bytes#]	; 3: 161 16 27

printLongDoubleFraction$23:	; Assign digitValue £temporary1910
x9330:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$25:	; BinaryAdd £temporary1911 digitValue 48
x9333:	mov ax, [bp + 26]	; 3: 139 70 26
x9336:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1912 £temporary1911
x9339:	cmp ax, 0	; 3: 131 248 0
x9342:	jge printLongDoubleFraction$27	; 2: 125 4
x9344:	neg ax	; 2: 247 216
x9346:	neg al	; 2: 246 216

printLongDoubleFraction$27:	; Parameter 28 £temporary1912 6
x9348:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$28:	; Call 28 printChar 0
x9351:	mov word [bp + 28], printLongDoubleFraction$29	; 5: 199 70 28 149 36
x9356:	mov [bp + 30], bp	; 3: 137 110 30
x9359:	add bp, 28	; 3: 131 197 28
x9362:	jmp printChar	; 3: 233 124 247

printLongDoubleFraction$29:	; PostCall 28

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
x9365:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$31:	; IntegralToFloating £temporary1914 digitValue
x9368:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$32:	; BinarySubtract £temporary1915 longDoubleValue10 £temporary1914
x9371:	fsub	; 2: 222 233

printLongDoubleFraction$33:	; PopFloat longDoubleValue
x9373:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$34:	; Goto 14
x9376:	jmp printLongDoubleFraction$14	; 2: 235 175

printLongDoubleFraction$35:	; Return 0
x9378:	mov ax, [bp]	; 3: 139 70 0
x9381:	mov di, [bp + 4]	; 3: 139 126 4
x9384:	mov bp, [bp + 2]	; 3: 139 110 2
x9387:	jmp ax	; 2: 255 224

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction

float8$10.0#:
x9389:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9397:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9400:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9402:	fcompp	; 2: 222 217
x9404:	fstsw ax	; 3: 155 223 224
x9407:	sahf	; 1: 158
x9408:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9410:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary806 x
x9413:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9415:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9417:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary810

fabs$9:	; Return £temporary810
x9420:	mov ax, [bp]	; 3: 139 70 0
x9423:	mov di, [bp + 4]	; 3: 139 126 4
x9426:	mov bp, [bp + 2]	; 3: 139 110 2
x9429:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9431:	mov ax, [bp + 6]	; 3: 139 70 6
x9434:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9437:	mov word [bp + 8], tolower$3	; 5: 199 70 8 235 36
x9442:	mov [bp + 10], bp	; 3: 137 110 10
x9445:	add bp, 8	; 3: 131 197 8
x9448:	jmp isupper	; 3: 233 222 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary440

tolower$5:	; Equal 31 £temporary440 0
x9451:	cmp bx, 0	; 3: 131 251 0
x9454:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9456:	mov word [bp + 8], tolower$8	; 5: 199 70 8 254 36
x9461:	mov [bp + 10], bp	; 3: 137 110 10
x9464:	add bp, 8	; 3: 131 197 8
x9467:	jmp localeconv	; 3: 233 54 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary441

tolower$10:	; Assign localeConvPtr £temporary441
x9470:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9473:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9477:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary443 -> localeConvPtr localeConvPtr 12
x9479:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary443 -> localeConvPtr
x9482:	mov ax, [si + 12]	; 3: 139 68 12
x9485:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary444 -> localeConvPtr localeConvPtr 14
x9488:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary444 -> localeConvPtr
x9491:	mov ax, [si + 14]	; 3: 139 68 14
x9494:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9497:	mov ax, [bp + 12]	; 3: 139 70 12
x9500:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9503:	mov ax, [bp + 6]	; 3: 139 70 6
x9506:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9509:	mov word [bp + 14], tolower$20	; 5: 199 70 14 51 37
x9514:	mov [bp + 16], bp	; 3: 137 110 16
x9517:	add bp, 14	; 3: 131 197 14
x9520:	jmp strchr	; 3: 233 67 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary445

tolower$22:	; BinarySubtract index £temporary445 upperCase
x9523:	sub bx, [bp + 12]	; 3: 43 94 12
x9526:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary448 lowerCase index
x9529:	mov si, [bp + 10]	; 3: 139 118 10
x9532:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary447 -> £temporary448 £temporary448 0

tolower$25:	; IntegralToIntegral £temporary449 £temporary447 -> £temporary448
x9535:	mov bl, [si]	; 2: 138 28
x9537:	and bx, 255	; 4: 129 227 255 0
x9541:	cmp bl, 0	; 3: 128 251 0
x9544:	jge tolower$26	; 2: 125 4
x9546:	neg bl	; 2: 246 219
x9548:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary449

tolower$27:	; Return £temporary449
x9550:	mov ax, [bp]	; 3: 139 70 0
x9553:	mov di, [bp + 4]	; 3: 139 126 4
x9556:	mov bp, [bp + 2]	; 3: 139 110 2
x9559:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary450 c 32
x9561:	mov bx, [bp + 6]	; 3: 139 94 6
x9564:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary450

tolower$30:	; Return £temporary450
x9567:	mov ax, [bp]	; 3: 139 70 0
x9570:	mov di, [bp + 4]	; 3: 139 126 4
x9573:	mov bp, [bp + 2]	; 3: 139 110 2
x9576:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9578:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9581:	mov ax, [bp]	; 3: 139 70 0
x9584:	mov di, [bp + 4]	; 3: 139 126 4
x9587:	mov bp, [bp + 2]	; 3: 139 110 2
x9590:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9592:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9595:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9597:	fcompp	; 2: 222 217
x9599:	fstsw ax	; 3: 155 223 224
x9602:	sahf	; 1: 158
x9603:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9605:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9609:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 151 37
x9614:	mov [bp + 26], bp	; 3: 137 110 26
x9617:	add bp, 24	; 3: 131 197 24
x9620:	jmp printChar	; 3: 233 122 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9623:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9625:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9628:	mov ax, [bp + 20]	; 3: 139 70 20
x9631:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9634:	mov ax, [bp + 18]	; 3: 139 70 18
x9637:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9640:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 182 37
x9645:	mov [bp + 26], bp	; 3: 137 110 26
x9648:	add bp, 24	; 3: 131 197 24
x9651:	jmp printLongDoubleFraction	; 3: 233 87 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9654:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9658:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1940 69
x9660:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9662:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1940 101
x9664:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1940 6
x9666:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9669:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 211 37
x9674:	mov [bp + 26], bp	; 3: 137 110 26
x9677:	add bp, 24	; 3: 131 197 24
x9680:	jmp printChar	; 3: 233 62 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9683:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9687:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 229 37
x9692:	mov [bp + 26], bp	; 3: 137 110 26
x9695:	add bp, 24	; 3: 131 197 24
x9698:	jmp printChar	; 3: 233 44 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9701:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9704:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9707:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9709:	fcompp	; 2: 222 217
x9711:	fstsw ax	; 3: 155 223 224
x9714:	sahf	; 1: 158
x9715:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9717:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9721:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 7 38
x9726:	mov [bp + 26], bp	; 3: 137 110 26
x9729:	add bp, 24	; 3: 131 197 24
x9732:	jmp printChar	; 3: 233 10 246

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9735:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1945 value
x9738:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9740:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9743:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9746:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9749:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 35 38
x9754:	mov [bp + 26], bp	; 3: 137 110 26
x9757:	add bp, 24	; 3: 131 197 24
x9760:	jmp log10	; 3: 233 188 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1946

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1947 £temporary1946
x9763:	fistp word [container2bytes#]	; 4: 223 30 16 27
x9767:	mov ax, [container2bytes#]	; 3: 161 16 27

printLongDoubleExpo$44:	; Assign expo £temporary1947
x9770:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9773:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9776:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9779:	fld qword [float8$10.0#]	; 4: 221 6 173 36

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9783:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1948 expo
x9786:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1948 14
x9789:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9792:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 78 38
x9797:	mov [bp + 36], bp	; 3: 137 110 36
x9800:	add bp, 34	; 3: 131 197 34
x9803:	jmp pow	; 3: 233 230 1

printLongDoubleExpo$52:	; PostCall 26
x9806:	fstp qword [bp + 34]	; 3: 221 94 34
x9809:	fld qword [bp + 26]	; 3: 221 70 26
x9812:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1949

printLongDoubleExpo$54:	; SignedDivide £temporary1950 value £temporary1949
x9815:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9817:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9820:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9823:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9826:	mov ax, [bp + 14]	; 3: 139 70 14
x9829:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9832:	mov ax, [bp + 16]	; 3: 139 70 16
x9835:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9838:	mov ax, [bp + 18]	; 3: 139 70 18
x9841:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9844:	mov ax, [bp + 20]	; 3: 139 70 20
x9847:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9850:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 136 38
x9855:	mov [bp + 28], bp	; 3: 137 110 28
x9858:	add bp, 26	; 3: 131 197 26
x9861:	jmp printLongDoublePlain	; 3: 233 233 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9864:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9868:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1956 69
x9870:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9872:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1956 101
x9874:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1956 6
x9876:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9879:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 165 38
x9884:	mov [bp + 28], bp	; 3: 137 110 28
x9887:	add bp, 26	; 3: 131 197 26
x9890:	jmp printChar	; 3: 233 108 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1958 expo
x9893:	mov ax, [bp + 24]	; 3: 139 70 24
x9896:	and eax, 65535	; 6: 102 37 255 255 0 0
x9902:	cmp ax, 0	; 3: 131 248 0
x9905:	jge printLongDoubleExpo$75	; 2: 125 5
x9907:	neg ax	; 2: 247 216
x9909:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1958 6
x9912:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9916:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9921:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9926:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 212 38
x9931:	mov [bp + 28], bp	; 3: 137 110 28
x9934:	add bp, 26	; 3: 131 197 26
x9937:	jmp printLongInt	; 3: 233 169 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x9940:	mov ax, [bp]	; 3: 139 70 0
x9943:	mov di, [bp + 4]	; 3: 139 126 4
x9946:	mov bp, [bp + 2]	; 3: 139 110 2
x9949:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x9951:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x9954:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x9957:	mov word [bp + 14], log10$4	; 5: 199 70 14 243 38
x9962:	mov [bp + 16], bp	; 3: 137 110 16
x9965:	add bp, 14	; 3: 131 197 14
x9968:	nop	; 1: 144
x9969:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary527

log10$6:	; PushFloat 2.30
x9971:	fld qword [float8$2.30#]	; 4: 221 6 4 39

log10$7:	; SignedDivide £temporary528 £temporary527 2.30
x9975:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary528

log10$9:	; Return £temporary528
x9977:	mov ax, [bp]	; 3: 139 70 0
x9980:	mov di, [bp + 4]	; 3: 139 126 4
x9983:	mov bp, [bp + 2]	; 3: 139 110 2
x9986:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

float8$2.30#:
x9988:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x9996:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x9999:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 76 x 0
x10001:	fcompp	; 2: 222 217
x10003:	fstsw ax	; 3: 155 223 224
x10006:	sahf	; 1: 158
x10007:	jae log$76	; 4: 15 131 238 0

log$3:	; Assign n 0
x10011:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10016:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10019:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10021:	fcompp	; 2: 222 217
x10023:	fstsw ax	; 3: 155 223 224
x10026:	sahf	; 1: 158
x10027:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10029:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10032:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10034:	fcompp	; 2: 222 217
x10036:	fstsw ax	; 3: 155 223 224
x10039:	sahf	; 1: 158
x10040:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10042:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10045:	fld qword [float8$2.71#]	; 4: 221 6 28 40

log$12:	; SignedDivide £temporary509 x 2.71
x10049:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10051:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10054:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10057:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10059:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10062:	fld qword [float8$0.368#]	; 4: 221 6 36 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10066:	fcompp	; 2: 222 217
x10068:	fstsw ax	; 3: 155 223 224
x10071:	sahf	; 1: 158
x10072:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10074:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10077:	fld qword [float8$0.368#]	; 4: 221 6 36 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10081:	fcompp	; 2: 222 217
x10083:	fstsw ax	; 3: 155 223 224
x10086:	sahf	; 1: 158
x10087:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10089:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10092:	fld qword [float8$2.71#]	; 4: 221 6 28 40

log$24:	; SignedMultiply £temporary513 x 2.71
x10096:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10098:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10101:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10104:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10106:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10108:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10111:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10113:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10116:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10118:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10121:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10124:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary515 x 1
x10126:	fsub	; 2: 222 233

log$37:	; PopFloat x_minus_1
x10128:	fstp qword [bp + 48]	; 3: 221 94 48

log$38:	; PushFloat x_minus_1
x10131:	fld qword [bp + 48]	; 3: 221 70 48

log$39:	; PopFloat power
x10134:	fstp qword [bp + 56]	; 3: 221 94 56

log$40:	; PushFloat sign
x10137:	fld qword [bp + 40]	; 3: 221 70 40

log$41:	; PushFloat power
x10140:	fld qword [bp + 56]	; 3: 221 70 56

log$42:	; SignedMultiply £temporary516 sign power
x10143:	fmul	; 2: 222 201

log$43:	; PushFloat index
x10145:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushOne
x10148:	fld1	; 2: 217 232

log$45:	; BinaryAdd index index 1
x10150:	fadd	; 2: 222 193

log$46:	; TopFloat index
x10152:	fst qword [bp + 16]	; 3: 221 86 16

log$47:	; PushOne
x10155:	fld1	; 2: 217 232

log$48:	; BinarySubtract index index 1
x10157:	fsub	; 2: 222 233

log$49:	; SignedDivide £temporary518 £temporary516 £temporary517
x10159:	fdiv	; 2: 222 249

log$50:	; PopFloat term
x10161:	fstp qword [bp + 24]	; 3: 221 94 24

log$51:	; PushFloat sum
x10164:	fld qword [bp + 32]	; 3: 221 70 32

log$52:	; PushFloat term
x10167:	fld qword [bp + 24]	; 3: 221 70 24

log$53:	; BinaryAdd £temporary519 sum term
x10170:	fadd	; 2: 222 193

log$54:	; PopFloat sum
x10172:	fstp qword [bp + 32]	; 3: 221 94 32

log$55:	; PushFloat power
x10175:	fld qword [bp + 56]	; 3: 221 70 56

log$56:	; PushFloat x_minus_1
x10178:	fld qword [bp + 48]	; 3: 221 70 48

log$57:	; SignedMultiply £temporary520 power x_minus_1
x10181:	fmul	; 2: 222 201

log$58:	; PopFloat power
x10183:	fstp qword [bp + 56]	; 3: 221 94 56

log$59:	; PushFloat sign
x10186:	fld qword [bp + 40]	; 3: 221 70 40

log$60:	; PushFloat -1.0
x10189:	fld qword [float8$minus1.0#]	; 4: 221 6 230 4

log$61:	; SignedMultiply £temporary521 sign -1.0
x10193:	fmul	; 2: 222 201

log$62:	; PopFloat sign
x10195:	fstp qword [bp + 40]	; 3: 221 94 40

log$63:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$64:	; PushFloat term
x10198:	fld qword [bp + 24]	; 3: 221 70 24

log$65:	; Parameter 64 term 6
x10201:	fstp qword [bp + 70]	; 3: 221 94 70

log$66:	; Call 64 fabs 0
x10204:	mov word [bp + 64], log$67	; 5: 199 70 64 234 39
x10209:	mov [bp + 66], bp	; 3: 137 110 66
x10212:	add bp, 64	; 3: 131 197 64
x10215:	jmp fabs	; 3: 233 203 252

log$67:	; PostCall 64

log$68:	; GetReturnValue £temporary522

log$69:	; PushFloat 0.000000001
x10218:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

log$70:	; SignedGreaterThanEqual 40 £temporary522 0.000000001
x10222:	fcompp	; 2: 222 217
x10224:	fstsw ax	; 3: 155 223 224
x10227:	sahf	; 1: 158
x10228:	jbe log$40	; 2: 118 163

log$71:	; PushFloat sum
x10230:	fld qword [bp + 32]	; 3: 221 70 32

log$72:	; IntegralToFloating £temporary524 n
x10233:	fild word [bp + 14]	; 3: 223 70 14

log$73:	; BinaryAdd £temporary525 sum £temporary524
x10236:	fadd	; 2: 222 193

log$74:	; SetReturnValue £temporary525

log$75:	; Return £temporary525
x10238:	mov ax, [bp]	; 3: 139 70 0
x10241:	mov di, [bp + 4]	; 3: 139 126 4
x10244:	mov bp, [bp + 2]	; 3: 139 110 2
x10247:	jmp ax	; 2: 255 224

log$76:	; Assign errno 6
x10249:	mov word [errno], 6	; 6: 199 6 182 10 6 0

log$77:	; PushZero
x10255:	fldz	; 2: 217 238

log$78:	; SetReturnValue 0

log$79:	; Return 0
x10257:	mov ax, [bp]	; 3: 139 70 0
x10260:	mov di, [bp + 4]	; 3: 139 126 4
x10263:	mov bp, [bp + 2]	; 3: 139 110 2
x10266:	jmp ax	; 2: 255 224

log$80:	; FunctionEnd log

float8$2.71#:
x10268:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

float8$0.368#:
x10276:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

float8$0.000000001#:
x10284:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10292:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10295:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10297:	fcompp	; 2: 222 217
x10299:	fstsw ax	; 3: 155 223 224
x10302:	sahf	; 1: 158
x10303:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10305:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10308:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10311:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10314:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10317:	mov word [bp + 30], pow$9	; 5: 199 70 30 91 40
x10322:	mov [bp + 32], bp	; 3: 137 110 32
x10325:	add bp, 30	; 3: 131 197 30
x10328:	jmp log	; 3: 233 177 254

pow$9:	; PostCall 22
x10331:	fstp qword [bp + 30]	; 3: 221 94 30
x10334:	fld qword [bp + 22]	; 3: 221 70 22
x10337:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary531

pow$11:	; SignedMultiply £temporary532 y £temporary531
x10340:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary532 6
x10342:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10345:	mov word [bp + 22], pow$14	; 5: 199 70 22 119 40
x10350:	mov [bp + 24], bp	; 3: 137 110 24
x10353:	add bp, 22	; 3: 131 197 22
x10356:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary533

pow$16:	; SetReturnValue £temporary533

pow$17:	; Return £temporary533
x10359:	mov ax, [bp]	; 3: 139 70 0
x10362:	mov di, [bp + 4]	; 3: 139 126 4
x10365:	mov bp, [bp + 2]	; 3: 139 110 2
x10368:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10370:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10373:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10375:	fcompp	; 2: 222 217
x10377:	fstsw ax	; 3: 155 223 224
x10380:	sahf	; 1: 158
x10381:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10383:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10386:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10388:	fcompp	; 2: 222 217
x10390:	fstsw ax	; 3: 155 223 224
x10393:	sahf	; 1: 158
x10394:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10396:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10398:	mov ax, [bp]	; 3: 139 70 0
x10401:	mov di, [bp + 4]	; 3: 139 126 4
x10404:	mov bp, [bp + 2]	; 3: 139 110 2
x10407:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10409:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10412:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10414:	fcompp	; 2: 222 217
x10416:	fstsw ax	; 3: 155 223 224
x10419:	sahf	; 1: 158
x10420:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10422:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10425:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10427:	fcompp	; 2: 222 217
x10429:	fstsw ax	; 3: 155 223 224
x10432:	sahf	; 1: 158
x10433:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10435:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10437:	mov ax, [bp]	; 3: 139 70 0
x10440:	mov di, [bp + 4]	; 3: 139 126 4
x10443:	mov bp, [bp + 2]	; 3: 139 110 2
x10446:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10448:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10451:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10453:	fcompp	; 2: 222 217
x10455:	fstsw ax	; 3: 155 223 224
x10458:	sahf	; 1: 158
x10459:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10463:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10466:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10469:	mov word [bp + 22], pow$43	; 5: 199 70 22 243 40
x10474:	mov [bp + 24], bp	; 3: 137 110 24
x10477:	add bp, 22	; 3: 131 197 22
x10480:	jmp floor	; 3: 233 96 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary541

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10483:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10486:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10489:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10492:	mov word [bp + 30], pow$49	; 5: 199 70 30 10 41
x10497:	mov [bp + 32], bp	; 3: 137 110 32
x10500:	add bp, 30	; 3: 131 197 30
x10503:	jmp ceil	; 3: 233 151 1

pow$49:	; PostCall 22
x10506:	fstp qword [bp + 30]	; 3: 221 94 30
x10509:	fld qword [bp + 22]	; 3: 221 70 22
x10512:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary542

pow$51:	; NotEqual 90 £temporary541 £temporary542
x10515:	fcompp	; 2: 222 217
x10517:	fstsw ax	; 3: 155 223 224
x10520:	sahf	; 1: 158
x10521:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10525:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary545 y
x10528:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x10532:	mov eax, [container4bytes#]	; 4: 102 161 9 36

pow$54:	; Assign long_y £temporary545
x10536:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary546 long_y 2
x10540:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10544:	xor edx, edx	; 3: 102 49 210
x10547:	idiv dword [int4$2#]	; 5: 102 247 62 217 41

pow$56:	; NotEqual 73 £temporary546 0
x10552:	cmp edx, 0	; 4: 102 131 250 0
x10556:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10558:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10561:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10564:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary548 x
x10567:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary548 6
x10569:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10572:	mov word [bp + 34], pow$64	; 5: 199 70 34 90 41
x10577:	mov [bp + 36], bp	; 3: 137 110 36
x10580:	add bp, 34	; 3: 131 197 34
x10583:	jmp log	; 3: 233 178 253

pow$64:	; PostCall 26
x10586:	fstp qword [bp + 34]	; 3: 221 94 34
x10589:	fld qword [bp + 26]	; 3: 221 70 26
x10592:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary549

pow$66:	; SignedMultiply £temporary550 y £temporary549
x10595:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary550 6
x10597:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10600:	mov word [bp + 26], pow$69	; 5: 199 70 26 118 41
x10605:	mov [bp + 28], bp	; 3: 137 110 28
x10608:	add bp, 26	; 3: 131 197 26
x10611:	nop	; 1: 144
x10612:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary551

pow$71:	; SetReturnValue £temporary551

pow$72:	; Return £temporary551
x10614:	mov ax, [bp]	; 3: 139 70 0
x10617:	mov di, [bp + 4]	; 3: 139 126 4
x10620:	mov bp, [bp + 2]	; 3: 139 110 2
x10623:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10625:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10628:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10631:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary552 x
x10634:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary552 6
x10636:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10639:	mov word [bp + 34], pow$80	; 5: 199 70 34 157 41
x10644:	mov [bp + 36], bp	; 3: 137 110 36
x10647:	add bp, 34	; 3: 131 197 34
x10650:	jmp log	; 3: 233 111 253

pow$80:	; PostCall 26
x10653:	fstp qword [bp + 34]	; 3: 221 94 34
x10656:	fld qword [bp + 26]	; 3: 221 70 26
x10659:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary553

pow$82:	; SignedMultiply £temporary554 y £temporary553
x10662:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary554 6
x10664:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10667:	mov word [bp + 26], pow$85	; 5: 199 70 26 185 41
x10672:	mov [bp + 28], bp	; 3: 137 110 28
x10675:	add bp, 26	; 3: 131 197 26
x10678:	nop	; 1: 144
x10679:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary555

pow$87:	; UnarySubtract £temporary556 £temporary555
x10681:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary556

pow$89:	; Return £temporary556
x10683:	mov ax, [bp]	; 3: 139 70 0
x10686:	mov di, [bp + 4]	; 3: 139 126 4
x10689:	mov bp, [bp + 2]	; 3: 139 110 2
x10692:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10694:	mov word [errno], 6	; 6: 199 6 182 10 6 0

pow$91:	; PushZero
x10700:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10702:	mov ax, [bp]	; 3: 139 70 0
x10705:	mov di, [bp + 4]	; 3: 139 126 4
x10708:	mov bp, [bp + 2]	; 3: 139 110 2
x10711:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

int4$2#:
x10713:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10717:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10719:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10722:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10724:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10727:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10729:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10732:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10735:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10738:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10741:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary498 power faculty
x10744:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10746:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10749:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10752:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary499 sum term
x10755:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10757:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10760:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10763:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary500 power x
x10766:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10768:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10771:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10774:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10777:	fld1	; 2: 217 232

exp$23:	; BinaryAdd index index 1
x10779:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10781:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary502 faculty £temporary501
x10784:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10786:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10789:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10792:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10795:	mov word [bp + 54], exp$31	; 5: 199 70 54 57 42
x10800:	mov [bp + 56], bp	; 3: 137 110 56
x10803:	add bp, 54	; 3: 131 197 54
x10806:	jmp fabs	; 3: 233 124 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary503

exp$33:	; PushFloat 0.000000001
x10809:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

exp$34:	; SignedGreaterThanEqual 8 £temporary503 0.000000001
x10813:	fcompp	; 2: 222 217
x10815:	fstsw ax	; 3: 155 223 224
x10818:	sahf	; 1: 158
x10819:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10821:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10824:	mov ax, [bp]	; 3: 139 70 0
x10827:	mov di, [bp + 4]	; 3: 139 126 4
x10830:	mov bp, [bp + 2]	; 3: 139 110 2
x10833:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

floor:	; PushFloat x
x10835:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10838:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10840:	fcompp	; 2: 222 217
x10842:	fstsw ax	; 3: 155 223 224
x10845:	sahf	; 1: 158
x10846:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10848:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary782 x
x10851:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary782 6
x10853:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10856:	mov word [bp + 14], floor$8	; 5: 199 70 14 118 42
x10861:	mov [bp + 16], bp	; 3: 137 110 16
x10864:	add bp, 14	; 3: 131 197 14
x10867:	nop	; 1: 144
x10868:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary783

floor$10:	; UnarySubtract £temporary784 £temporary783
x10870:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary784

floor$12:	; Return £temporary784
x10872:	mov ax, [bp]	; 3: 139 70 0
x10875:	mov di, [bp + 4]	; 3: 139 126 4
x10878:	mov bp, [bp + 2]	; 3: 139 110 2
x10881:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10883:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary785 x
x10886:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x10890:	mov eax, [container4bytes#]	; 4: 102 161 9 36

floor$15:	; IntegralToFloating £temporary786 £temporary785
x10894:	mov [container4bytes#], eax	; 4: 102 163 9 36
x10898:	fild dword [container4bytes#]	; 4: 219 6 9 36

floor$16:	; SetReturnValue £temporary786

floor$17:	; Return £temporary786
x10902:	mov ax, [bp]	; 3: 139 70 0
x10905:	mov di, [bp + 4]	; 3: 139 126 4
x10908:	mov bp, [bp + 2]	; 3: 139 110 2
x10911:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x10913:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x10916:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x10918:	fcompp	; 2: 222 217
x10920:	fstsw ax	; 3: 155 223 224
x10923:	sahf	; 1: 158
x10924:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x10926:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary789 x
x10929:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary789 6
x10931:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x10934:	mov word [bp + 14], ceil$8	; 5: 199 70 14 196 42
x10939:	mov [bp + 16], bp	; 3: 137 110 16
x10942:	add bp, 14	; 3: 131 197 14
x10945:	nop	; 1: 144
x10946:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary790

ceil$10:	; UnarySubtract £temporary791 £temporary790
x10948:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary791

ceil$12:	; Return £temporary791
x10950:	mov ax, [bp]	; 3: 139 70 0
x10953:	mov di, [bp + 4]	; 3: 139 126 4
x10956:	mov bp, [bp + 2]	; 3: 139 110 2
x10959:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x10961:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x10964:	fld qword [float8$0.999999999999#]	; 4: 221 6 245 42

ceil$15:	; BinaryAdd £temporary792 x 0.999999999999
x10968:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary793 £temporary792
x10970:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x10974:	mov eax, [container4bytes#]	; 4: 102 161 9 36

ceil$17:	; IntegralToFloating £temporary794 £temporary793
x10978:	mov [container4bytes#], eax	; 4: 102 163 9 36
x10982:	fild dword [container4bytes#]	; 4: 219 6 9 36

ceil$18:	; SetReturnValue £temporary794

ceil$19:	; Return £temporary794
x10986:	mov ax, [bp]	; 3: 139 70 0
x10989:	mov di, [bp + 4]	; 3: 139 126 4
x10992:	mov bp, [bp + 2]	; 3: 139 110 2
x10995:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

float8$0.999999999999#:
x10997:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11005:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11009:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11011:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11015:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary383 1
x11017:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11020:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary383 0
x11022:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary383

isdigit$6:	; Return £temporary383
x11025:	mov ax, [bp]	; 3: 139 70 0
x11028:	mov di, [bp + 4]	; 3: 139 126 4
x11031:	mov bp, [bp + 2]	; 3: 139 110 2
x11034:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11036:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11039:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11042:	mov word [bp + 14], sin$4	; 5: 199 70 14 48 43
x11047:	mov [bp + 16], bp	; 3: 137 110 16
x11050:	add bp, 14	; 3: 131 197 14
x11053:	jmp fabs	; 3: 233 133 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary636

sin$6:	; PushFloat 6.28
x11056:	fld qword [float8$6.28#]	; 4: 221 6 246 4

sin$7:	; SignedLessThanEqual 17 £temporary636 6.28
x11060:	fcompp	; 2: 222 217
x11062:	fstsw ax	; 3: 155 223 224
x11065:	sahf	; 1: 158
x11066:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11068:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11071:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11074:	fld qword [float8$6.28#]	; 4: 221 6 246 4

sin$12:	; Parameter 14 6.28 14
x11078:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11081:	mov word [bp + 14], sin$14	; 5: 199 70 14 87 43
x11086:	mov [bp + 16], bp	; 3: 137 110 16
x11089:	add bp, 14	; 3: 131 197 14
x11092:	jmp fmod	; 3: 233 168 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary638

sin$16:	; PopFloat x
x11095:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11098:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11100:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11103:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11105:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11108:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11110:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11113:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11116:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11119:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11121:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11124:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11127:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary639 sign power
x11130:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11132:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary640 £temporary639 faculty
x11135:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11137:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11140:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11143:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary641 sum term
x11146:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11148:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11151:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11154:	fld qword [float8$minus1#]	; 4: 221 6 247 43

sin$39:	; SignedMultiply £temporary642 sign -1
x11158:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11160:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11163:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11166:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11169:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary643 x x
x11172:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary644 power £temporary643
x11174:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11176:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11179:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11182:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11185:	fld1	; 2: 217 232

sin$50:	; BinaryAdd index index 1
x11187:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11189:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11192:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11195:	fld1	; 2: 217 232

sin$54:	; BinaryAdd index index 1
x11197:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11199:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary647 £temporary645 £temporary646
x11202:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary648 faculty £temporary647
x11204:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11206:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11209:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11212:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11215:	mov word [bp + 62], sin$63	; 5: 199 70 62 221 43
x11220:	mov [bp + 64], bp	; 3: 137 110 64
x11223:	add bp, 62	; 3: 131 197 62
x11226:	jmp fabs	; 3: 233 216 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary649

sin$65:	; PushFloat 0.000000001
x11229:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

sin$66:	; SignedGreaterThanEqual 27 £temporary649 0.000000001
x11233:	fcompp	; 2: 222 217
x11235:	fstsw ax	; 3: 155 223 224
x11238:	sahf	; 1: 158
x11239:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11241:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11244:	mov ax, [bp]	; 3: 139 70 0
x11247:	mov di, [bp + 4]	; 3: 139 126 4
x11250:	mov bp, [bp + 2]	; 3: 139 110 2
x11253:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

float8$minus1#:
x11255:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

fmod:	; PushFloat y
x11263:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11266:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11268:	fcompp	; 2: 222 217
x11270:	fstsw ax	; 3: 155 223 224
x11273:	sahf	; 1: 158
x11274:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11276:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11279:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11282:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11285:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary623 x y
x11288:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary624 £temporary623
x11290:	fistp word [container2bytes#]	; 4: 223 30 16 27
x11294:	mov ax, [container2bytes#]	; 3: 161 16 27

fmod$10:	; IntegralToFloating £temporary625 £temporary624
x11297:	mov [container2bytes#], ax	; 3: 163 16 27
x11300:	fild word [container2bytes#]	; 4: 223 6 16 27

fmod$11:	; SignedMultiply £temporary626 y £temporary625
x11304:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary627 x £temporary626
x11306:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary627 6
x11308:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11311:	mov word [bp + 22], fmod$15	; 5: 199 70 22 61 44
x11316:	mov [bp + 24], bp	; 3: 137 110 24
x11319:	add bp, 22	; 3: 131 197 22
x11322:	jmp fabs	; 3: 233 120 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary628

fmod$17:	; PopFloat remainder
x11325:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11328:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11331:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11333:	fcompp	; 2: 222 217
x11335:	fstsw ax	; 3: 155 223 224
x11338:	sahf	; 1: 158
x11339:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11341:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11344:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11346:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary630 remainder
x11349:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary634

fmod$27:	; Return £temporary634
x11351:	mov ax, [bp]	; 3: 139 70 0
x11354:	mov di, [bp + 4]	; 3: 139 126 4
x11357:	mov bp, [bp + 2]	; 3: 139 110 2
x11360:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11362:	mov word [errno], 6	; 6: 199 6 182 10 6 0

fmod$29:	; PushZero
x11368:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11370:	mov ax, [bp]	; 3: 139 70 0
x11373:	mov di, [bp + 4]	; 3: 139 126 4
x11376:	mov bp, [bp + 2]	; 3: 139 110 2
x11379:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11381:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11384:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11387:	mov word [bp + 14], cos$4	; 5: 199 70 14 137 44
x11392:	mov [bp + 16], bp	; 3: 137 110 16
x11395:	add bp, 14	; 3: 131 197 14
x11398:	jmp fabs	; 3: 233 44 248

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary655

cos$6:	; PushFloat 6.28
x11401:	fld qword [float8$6.28#]	; 4: 221 6 246 4

cos$7:	; SignedLessThanEqual 17 £temporary655 6.28
x11405:	fcompp	; 2: 222 217
x11407:	fstsw ax	; 3: 155 223 224
x11410:	sahf	; 1: 158
x11411:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11413:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11416:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11419:	fld qword [float8$6.28#]	; 4: 221 6 246 4

cos$12:	; Parameter 14 6.28 14
x11423:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11426:	mov word [bp + 14], cos$14	; 5: 199 70 14 176 44
x11431:	mov [bp + 16], bp	; 3: 137 110 16
x11434:	add bp, 14	; 3: 131 197 14
x11437:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary657

cos$16:	; PopFloat x
x11440:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11443:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11445:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11448:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11450:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11453:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11455:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11458:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11460:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11463:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11465:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11468:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11471:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary658 sign power
x11474:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11476:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary659 £temporary658 faculty
x11479:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11481:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11484:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11487:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary660 sum term
x11490:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11492:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11495:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11498:	fld qword [float8$minus1#]	; 4: 221 6 247 43

cos$39:	; SignedMultiply £temporary661 sign -1
x11502:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11504:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11507:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11510:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11513:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary662 x x
x11516:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary663 power £temporary662
x11518:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11520:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11523:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11526:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11529:	fld1	; 2: 217 232

cos$50:	; BinaryAdd index index 1
x11531:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11533:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11536:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11539:	fld1	; 2: 217 232

cos$54:	; BinaryAdd index index 1
x11541:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11543:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary666 £temporary664 £temporary665
x11546:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary667 faculty £temporary666
x11548:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11550:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11553:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11556:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11559:	mov word [bp + 62], cos$63	; 5: 199 70 62 53 45
x11564:	mov [bp + 64], bp	; 3: 137 110 64
x11567:	add bp, 62	; 3: 131 197 62
x11570:	jmp fabs	; 3: 233 128 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary668

cos$65:	; PushFloat 0.000000001
x11573:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

cos$66:	; SignedGreaterThanEqual 27 £temporary668 0.000000001
x11577:	fcompp	; 2: 222 217
x11579:	fstsw ax	; 3: 155 223 224
x11582:	sahf	; 1: 158
x11583:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11585:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11588:	mov ax, [bp]	; 3: 139 70 0
x11591:	mov di, [bp + 4]	; 3: 139 126 4
x11594:	mov bp, [bp + 2]	; 3: 139 110 2
x11597:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11599:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11602:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11605:	mov word [bp + 14], tan$4	; 5: 199 70 14 99 45
x11610:	mov [bp + 16], bp	; 3: 137 110 16
x11613:	add bp, 14	; 3: 131 197 14
x11616:	jmp cos	; 3: 233 18 255

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary674

tan$6:	; PopFloat cos_of_x
x11619:	fstp qword [bp + 14]	; 3: 221 94 14

tan$7:	; PushFloat cos_of_x
x11622:	fld qword [bp + 14]	; 3: 221 70 14

tan$8:	; PushZero
x11625:	fldz	; 2: 217 238

tan$9:	; Equal 20 cos_of_x 0
x11627:	fcompp	; 2: 222 217
x11629:	fstsw ax	; 3: 155 223 224
x11632:	sahf	; 1: 158
x11633:	je tan$20	; 2: 116 36

tan$10:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$11:	; PushFloat x
x11635:	fld qword [bp + 6]	; 3: 221 70 6

tan$12:	; Parameter 22 x 6
x11638:	fstp qword [bp + 28]	; 3: 221 94 28

tan$13:	; Call 22 sin 0
x11641:	mov word [bp + 22], tan$14	; 5: 199 70 22 135 45
x11646:	mov [bp + 24], bp	; 3: 137 110 24
x11649:	add bp, 22	; 3: 131 197 22
x11652:	jmp sin	; 3: 233 149 253

tan$14:	; PostCall 22

tan$15:	; GetReturnValue £temporary676

tan$16:	; PushFloat cos_of_x
x11655:	fld qword [bp + 14]	; 3: 221 70 14

tan$17:	; SignedDivide £temporary677 £temporary676 cos_of_x
x11658:	fdiv	; 2: 222 249

tan$18:	; SetReturnValue £temporary677

tan$19:	; Return £temporary677
x11660:	mov ax, [bp]	; 3: 139 70 0
x11663:	mov di, [bp + 4]	; 3: 139 126 4
x11666:	mov bp, [bp + 2]	; 3: 139 110 2
x11669:	jmp ax	; 2: 255 224

tan$20:	; Assign errno 6
x11671:	mov word [errno], 6	; 6: 199 6 182 10 6 0

tan$21:	; PushZero
x11677:	fldz	; 2: 217 238

tan$22:	; SetReturnValue 0

tan$23:	; Return 0
x11679:	mov ax, [bp]	; 3: 139 70 0
x11682:	mov di, [bp + 4]	; 3: 139 126 4
x11685:	mov bp, [bp + 2]	; 3: 139 110 2
x11688:	jmp ax	; 2: 255 224

tan$24:	; FunctionEnd tan

asin:	; PushFloat x
x11690:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11693:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11695:	fcompp	; 2: 222 217
x11697:	fstsw ax	; 3: 155 223 224
x11700:	sahf	; 1: 158
x11701:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11703:	fld qword [float8$1.57#]	; 4: 221 6 6 5

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11707:	mov ax, [bp]	; 3: 139 70 0
x11710:	mov di, [bp + 4]	; 3: 139 126 4
x11713:	mov bp, [bp + 2]	; 3: 139 110 2
x11716:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11718:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11721:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11723:	fcompp	; 2: 222 217
x11725:	fstsw ax	; 3: 155 223 224
x11728:	sahf	; 1: 158
x11729:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11731:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary682 x
x11734:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary682 6
x11736:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11739:	mov word [bp + 14], asin$14	; 5: 199 70 14 233 45
x11744:	mov [bp + 16], bp	; 3: 137 110 16
x11747:	add bp, 14	; 3: 131 197 14
x11750:	nop	; 1: 144
x11751:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary683

asin$16:	; UnarySubtract £temporary684 £temporary683
x11753:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary684

asin$18:	; Return £temporary684
x11755:	mov ax, [bp]	; 3: 139 70 0
x11758:	mov di, [bp + 4]	; 3: 139 126 4
x11761:	mov bp, [bp + 2]	; 3: 139 110 2
x11764:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11766:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11769:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11771:	fcompp	; 2: 222 217
x11773:	fstsw ax	; 3: 155 223 224
x11776:	sahf	; 1: 158
x11777:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11779:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11782:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11785:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11787:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11790:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary686 x x
x11793:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary687 1 £temporary686
x11795:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary687 6
x11797:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11800:	mov word [bp + 22], asin$32	; 5: 199 70 22 38 46
x11805:	mov [bp + 24], bp	; 3: 137 110 24
x11808:	add bp, 22	; 3: 131 197 22
x11811:	nop	; 1: 144
x11812:	jmp sqrt	; 2: 235 58

asin$32:	; PostCall 14
x11814:	fstp qword [bp + 22]	; 3: 221 94 22
x11817:	fld qword [bp + 14]	; 3: 221 70 14
x11820:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary688

asin$34:	; SignedDivide £temporary689 x £temporary688
x11823:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary689 6
x11825:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11828:	mov word [bp + 14], asin$37	; 5: 199 70 14 66 46
x11833:	mov [bp + 16], bp	; 3: 137 110 16
x11836:	add bp, 14	; 3: 131 197 14
x11839:	jmp atan	; 3: 233 146 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary690

asin$39:	; SetReturnValue £temporary690

asin$40:	; Return £temporary690
x11842:	mov ax, [bp]	; 3: 139 70 0
x11845:	mov di, [bp + 4]	; 3: 139 126 4
x11848:	mov bp, [bp + 2]	; 3: 139 110 2
x11851:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x11853:	mov word [errno], 6	; 6: 199 6 182 10 6 0

asin$42:	; PushZero
x11859:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x11861:	mov ax, [bp]	; 3: 139 70 0
x11864:	mov di, [bp + 4]	; 3: 139 126 4
x11867:	mov bp, [bp + 2]	; 3: 139 110 2
x11870:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

sqrt:	; PushFloat x
x11872:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x11875:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 28 x 0
x11877:	fcompp	; 2: 222 217
x11879:	fstsw ax	; 3: 155 223 224
x11882:	sahf	; 1: 158
x11883:	ja sqrt$28	; 2: 119 84

sqrt$3:	; PushOne
x11885:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x11887:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x11890:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; PopFloat root_i
x11893:	fstp qword [bp + 14]	; 3: 221 94 14

sqrt$7:	; PushFloat root_i
x11896:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$8:	; PushFloat x
x11899:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$9:	; PushFloat root_i
x11902:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$10:	; SignedDivide £temporary596 x root_i
x11905:	fdiv	; 2: 222 249

sqrt$11:	; BinaryAdd £temporary597 root_i £temporary596
x11907:	fadd	; 2: 222 193

sqrt$12:	; PushFloat 2
x11909:	fld qword [float8$2#]	; 4: 221 6 70 5

sqrt$13:	; SignedDivide £temporary598 £temporary597 2
x11913:	fdiv	; 2: 222 249

sqrt$14:	; PopFloat root_i_plus_1
x11915:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$15:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$16:	; PushFloat root_i_plus_1
x11918:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$17:	; PushFloat root_i
x11921:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$18:	; BinarySubtract £temporary599 root_i_plus_1 root_i
x11924:	fsub	; 2: 222 233

sqrt$19:	; Parameter 30 £temporary599 6
x11926:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$20:	; Call 30 fabs 0
x11929:	mov word [bp + 30], sqrt$21	; 5: 199 70 30 167 46
x11934:	mov [bp + 32], bp	; 3: 137 110 32
x11937:	add bp, 30	; 3: 131 197 30
x11940:	jmp fabs	; 3: 233 14 246

sqrt$21:	; PostCall 30

sqrt$22:	; GetReturnValue £temporary600

sqrt$23:	; PushFloat 0.000000001
x11943:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

sqrt$24:	; SignedGreaterThanEqual 5 £temporary600 0.000000001
x11947:	fcompp	; 2: 222 217
x11949:	fstsw ax	; 3: 155 223 224
x11952:	sahf	; 1: 158
x11953:	jbe sqrt$5	; 2: 118 191

sqrt$25:	; PushFloat root_i_plus_1
x11955:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$26:	; SetReturnValue root_i_plus_1

sqrt$27:	; Return root_i_plus_1
x11958:	mov ax, [bp]	; 3: 139 70 0
x11961:	mov di, [bp + 4]	; 3: 139 126 4
x11964:	mov bp, [bp + 2]	; 3: 139 110 2
x11967:	jmp ax	; 2: 255 224

sqrt$28:	; Assign errno 6
x11969:	mov word [errno], 6	; 6: 199 6 182 10 6 0

sqrt$29:	; PushZero
x11975:	fldz	; 2: 217 238

sqrt$30:	; SetReturnValue 0

sqrt$31:	; Return 0
x11977:	mov ax, [bp]	; 3: 139 70 0
x11980:	mov di, [bp + 4]	; 3: 139 126 4
x11983:	mov bp, [bp + 2]	; 3: 139 110 2
x11986:	jmp ax	; 2: 255 224

sqrt$32:	; FunctionEnd sqrt

atan:	; PushFloat x
x11988:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x11991:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x11993:	fcompp	; 2: 222 217
x11995:	fstsw ax	; 3: 155 223 224
x11998:	sahf	; 1: 158
x11999:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12001:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary709 x
x12004:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary709 6
x12006:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12009:	mov word [bp + 14], atan$8	; 5: 199 70 14 247 46
x12014:	mov [bp + 16], bp	; 3: 137 110 16
x12017:	add bp, 14	; 3: 131 197 14
x12020:	nop	; 1: 144
x12021:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary710

atan$10:	; UnarySubtract £temporary711 £temporary710
x12023:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary711

atan$12:	; Return £temporary711
x12025:	mov ax, [bp]	; 3: 139 70 0
x12028:	mov di, [bp + 4]	; 3: 139 126 4
x12031:	mov bp, [bp + 2]	; 3: 139 110 2
x12034:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12036:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12039:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12041:	fcompp	; 2: 222 217
x12043:	fstsw ax	; 3: 155 223 224
x12046:	sahf	; 1: 158
x12047:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12049:	fld qword [float8$1.57#]	; 4: 221 6 6 5

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12053:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12056:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12058:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary713 1 x
x12061:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary713 6
x12063:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12066:	mov word [bp + 22], atan$23	; 5: 199 70 22 48 47
x12071:	mov [bp + 24], bp	; 3: 137 110 24
x12074:	add bp, 22	; 3: 131 197 22
x12077:	nop	; 1: 144
x12078:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12080:	fstp qword [bp + 22]	; 3: 221 94 22
x12083:	fld qword [bp + 14]	; 3: 221 70 14
x12086:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary714

atan$25:	; BinarySubtract £temporary715 1.57 £temporary714
x12089:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary715

atan$27:	; Return £temporary715
x12091:	mov ax, [bp]	; 3: 139 70 0
x12094:	mov di, [bp + 4]	; 3: 139 126 4
x12097:	mov bp, [bp + 2]	; 3: 139 110 2
x12100:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12102:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12105:	fld qword [float8$0.5#]	; 4: 221 6 61 48

atan$30:	; SignedLessThanEqual 54 x 0.5
x12109:	fcompp	; 2: 222 217
x12111:	fstsw ax	; 3: 155 223 224
x12114:	sahf	; 1: 158
x12115:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12117:	fld qword [float8$2#]	; 4: 221 6 70 5

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12121:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12124:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12127:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12129:	fstp qword [bp + 22]	; 3: 221 94 22
x12132:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12135:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12137:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12140:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary717 x x
x12143:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary718 1 £temporary717
x12145:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary718 14
x12147:	fstp qword [bp + 52]	; 3: 221 94 52

atan$42:	; Call 14 sqrt 0
x12150:	mov word [bp + 46], atan$43	; 5: 199 70 46 132 47
x12155:	mov [bp + 48], bp	; 3: 137 110 48
x12158:	add bp, 46	; 3: 131 197 46
x12161:	jmp sqrt	; 3: 233 220 254

atan$43:	; PostCall 14
x12164:	fstp qword [bp + 38]	; 3: 221 94 38
x12167:	fld qword [bp + 30]	; 3: 221 70 30
x12170:	fld qword [bp + 22]	; 3: 221 70 22
x12173:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary719

atan$45:	; BinaryAdd £temporary720 1 £temporary719
x12176:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary721 x £temporary720
x12178:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary721 6
x12180:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12183:	mov word [bp + 22], atan$49	; 5: 199 70 22 165 47
x12188:	mov [bp + 24], bp	; 3: 137 110 24
x12191:	add bp, 22	; 3: 131 197 22
x12194:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12197:	fstp qword [bp + 22]	; 3: 221 94 22
x12200:	fld qword [bp + 14]	; 3: 221 70 14
x12203:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary722

atan$51:	; SignedMultiply £temporary723 2 £temporary722
x12206:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary723

atan$53:	; Return £temporary723
x12208:	mov ax, [bp]	; 3: 139 70 0
x12211:	mov di, [bp + 4]	; 3: 139 126 4
x12214:	mov bp, [bp + 2]	; 3: 139 110 2
x12217:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12219:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12221:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12224:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12226:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12229:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12231:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12234:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12237:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12240:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12243:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary724 sign product
x12246:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12248:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary725 £temporary724 denominator
x12251:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12253:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12256:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12259:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary726 sum term
x12262:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12264:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12267:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary727 sign
x12270:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12272:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12275:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12278:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12281:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary728 x x
x12284:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary729 product £temporary728
x12286:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12288:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12291:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12294:	fld qword [float8$2#]	; 4: 221 6 70 5

atan$83:	; BinaryAdd £temporary730 denominator 2
x12298:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12300:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12303:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12306:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12309:	mov word [bp + 54], atan$89	; 5: 199 70 54 35 48
x12314:	mov [bp + 56], bp	; 3: 137 110 56
x12317:	add bp, 54	; 3: 131 197 54
x12320:	jmp fabs	; 3: 233 146 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary731

atan$91:	; PushFloat 0.000000001
x12323:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

atan$92:	; SignedGreaterThanEqual 62 £temporary731 0.000000001
x12327:	fcompp	; 2: 222 217
x12329:	fstsw ax	; 3: 155 223 224
x12332:	sahf	; 1: 158
x12333:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12335:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12338:	mov ax, [bp]	; 3: 139 70 0
x12341:	mov di, [bp + 4]	; 3: 139 126 4
x12344:	mov bp, [bp + 2]	; 3: 139 110 2
x12347:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

float8$0.5#:
x12349:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

acos:	; PushFloat x
x12357:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12360:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12362:	fcompp	; 2: 222 217
x12364:	fstsw ax	; 3: 155 223 224
x12367:	sahf	; 1: 158
x12368:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12370:	fld qword [float8$1.57#]	; 4: 221 6 6 5

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12374:	mov ax, [bp]	; 3: 139 70 0
x12377:	mov di, [bp + 4]	; 3: 139 126 4
x12380:	mov bp, [bp + 2]	; 3: 139 110 2
x12383:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12385:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12388:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12390:	fcompp	; 2: 222 217
x12392:	fstsw ax	; 3: 155 223 224
x12395:	sahf	; 1: 158
x12396:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12398:	fld qword [float8$3.14#]	; 4: 221 6 254 4

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12402:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12405:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary696 x
x12408:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary696 6
x12410:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12413:	mov word [bp + 22], acos$15	; 5: 199 70 22 139 48
x12418:	mov [bp + 24], bp	; 3: 137 110 24
x12421:	add bp, 22	; 3: 131 197 22
x12424:	nop	; 1: 144
x12425:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12427:	fstp qword [bp + 22]	; 3: 221 94 22
x12430:	fld qword [bp + 14]	; 3: 221 70 14
x12433:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary697

acos$17:	; BinarySubtract £temporary698 3.14 £temporary697
x12436:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary698

acos$19:	; Return £temporary698
x12438:	mov ax, [bp]	; 3: 139 70 0
x12441:	mov di, [bp + 4]	; 3: 139 126 4
x12444:	mov bp, [bp + 2]	; 3: 139 110 2
x12447:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12449:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12452:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12454:	fcompp	; 2: 222 217
x12456:	fstsw ax	; 3: 155 223 224
x12459:	sahf	; 1: 158
x12460:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12462:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12464:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12467:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary700 x x
x12470:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary701 1 £temporary700
x12472:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary701 6
x12474:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12477:	mov word [bp + 14], acos$32	; 5: 199 70 14 203 48
x12482:	mov [bp + 16], bp	; 3: 137 110 16
x12485:	add bp, 14	; 3: 131 197 14
x12488:	jmp sqrt	; 3: 233 149 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary702

acos$34:	; PushFloat x
x12491:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary703 £temporary702 x
x12494:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary703 6
x12496:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12499:	mov word [bp + 14], acos$38	; 5: 199 70 14 225 48
x12504:	mov [bp + 16], bp	; 3: 137 110 16
x12507:	add bp, 14	; 3: 131 197 14
x12510:	jmp atan	; 3: 233 243 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary704

acos$40:	; SetReturnValue £temporary704

acos$41:	; Return £temporary704
x12513:	mov ax, [bp]	; 3: 139 70 0
x12516:	mov di, [bp + 4]	; 3: 139 126 4
x12519:	mov bp, [bp + 2]	; 3: 139 110 2
x12522:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12524:	mov word [errno], 6	; 6: 199 6 182 10 6 0

acos$43:	; PushZero
x12530:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12532:	mov ax, [bp]	; 3: 139 70 0
x12535:	mov di, [bp + 4]	; 3: 139 126 4
x12538:	mov bp, [bp + 2]	; 3: 139 110 2
x12541:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12543:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12546:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12549:	mov word [bp + 14], sinh$4	; 5: 199 70 14 19 49
x12554:	mov [bp + 16], bp	; 3: 137 110 16
x12557:	add bp, 14	; 3: 131 197 14
x12560:	jmp exp	; 3: 233 202 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary762

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12563:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12566:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary763 x
x12569:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary763 6
x12571:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12574:	mov word [bp + 22], sinh$11	; 5: 199 70 22 44 49
x12579:	mov [bp + 24], bp	; 3: 137 110 24
x12582:	add bp, 22	; 3: 131 197 22
x12585:	jmp exp	; 3: 233 177 248

sinh$11:	; PostCall 14
x12588:	fstp qword [bp + 22]	; 3: 221 94 22
x12591:	fld qword [bp + 14]	; 3: 221 70 14
x12594:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary764

sinh$13:	; BinarySubtract £temporary765 £temporary762 £temporary764
x12597:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12599:	fld qword [float8$2#]	; 4: 221 6 70 5

sinh$15:	; SignedDivide £temporary766 £temporary765 2
x12603:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary766

sinh$17:	; Return £temporary766
x12605:	mov ax, [bp]	; 3: 139 70 0
x12608:	mov di, [bp + 4]	; 3: 139 126 4
x12611:	mov bp, [bp + 2]	; 3: 139 110 2
x12614:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12616:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12619:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12622:	mov word [bp + 14], cosh$4	; 5: 199 70 14 92 49
x12627:	mov [bp + 16], bp	; 3: 137 110 16
x12630:	add bp, 14	; 3: 131 197 14
x12633:	jmp exp	; 3: 233 129 248

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary769

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12636:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12639:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary770 x
x12642:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary770 6
x12644:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12647:	mov word [bp + 22], cosh$11	; 5: 199 70 22 117 49
x12652:	mov [bp + 24], bp	; 3: 137 110 24
x12655:	add bp, 22	; 3: 131 197 22
x12658:	jmp exp	; 3: 233 104 248

cosh$11:	; PostCall 14
x12661:	fstp qword [bp + 22]	; 3: 221 94 22
x12664:	fld qword [bp + 14]	; 3: 221 70 14
x12667:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary771

cosh$13:	; BinaryAdd £temporary772 £temporary769 £temporary771
x12670:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12672:	fld qword [float8$2#]	; 4: 221 6 70 5

cosh$15:	; SignedDivide £temporary773 £temporary772 2
x12676:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary773

cosh$17:	; Return £temporary773
x12678:	mov ax, [bp]	; 3: 139 70 0
x12681:	mov di, [bp + 4]	; 3: 139 126 4
x12684:	mov bp, [bp + 2]	; 3: 139 110 2
x12687:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12689:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12692:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12695:	mov word [bp + 14], tanh$4	; 5: 199 70 14 165 49
x12700:	mov [bp + 16], bp	; 3: 137 110 16
x12703:	add bp, 14	; 3: 131 197 14
x12706:	jmp sinh	; 3: 233 90 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary776

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12709:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12712:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12715:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12718:	mov word [bp + 22], tanh$10	; 5: 199 70 22 188 49
x12723:	mov [bp + 24], bp	; 3: 137 110 24
x12726:	add bp, 22	; 3: 131 197 22
x12729:	nop	; 1: 144
x12730:	jmp cosh	; 2: 235 140

tanh$10:	; PostCall 14
x12732:	fstp qword [bp + 22]	; 3: 221 94 22
x12735:	fld qword [bp + 14]	; 3: 221 70 14
x12738:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary777

tanh$12:	; SignedDivide £temporary778 £temporary776 £temporary777
x12741:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary778

tanh$14:	; Return £temporary778
x12743:	mov ax, [bp]	; 3: 139 70 0
x12746:	mov di, [bp + 4]	; 3: 139 126 4
x12749:	mov bp, [bp + 2]	; 3: 139 110 2
x12752:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x12754:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x12757:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x12759:	fcompp	; 2: 222 217
x12761:	fstsw ax	; 3: 155 223 224
x12764:	sahf	; 1: 158
x12765:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x12769:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x12772:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x12775:	mov word [bp + 16], frexp$8	; 5: 199 70 16 245 49
x12780:	mov [bp + 18], bp	; 3: 137 110 18
x12783:	add bp, 16	; 3: 131 197 16
x12786:	jmp fabs	; 3: 233 192 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary575

frexp$10:	; Parameter 16 £temporary575 6
x12789:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x12792:	mov word [bp + 16], frexp$12	; 5: 199 70 16 6 50
x12797:	mov [bp + 18], bp	; 3: 137 110 18
x12800:	add bp, 16	; 3: 131 197 16
x12803:	jmp @733$log2	; 3: 233 139 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary576

frexp$14:	; IntegralToIntegral £temporary577 £temporary576

frexp$15:	; Assign exponent £temporary577
x12806:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x12809:	fld qword [float8$2#]	; 4: 221 6 70 5

frexp$18:	; Parameter 18 2 6
x12813:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary578 exponent
x12816:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary578 14
x12819:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x12822:	mov word [bp + 18], frexp$22	; 5: 199 70 18 36 50
x12827:	mov [bp + 20], bp	; 3: 137 110 20
x12830:	add bp, 18	; 3: 131 197 18
x12833:	jmp pow	; 3: 233 16 246

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary579

frexp$24:	; PushFloat x
x12836:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary579 x
x12839:	fcompp	; 2: 222 217
x12841:	fstsw ax	; 3: 155 223 224
x12844:	sahf	; 1: 158
x12845:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x12847:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x12850:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x12854:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary583 -> p p 0
x12856:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary583 -> p exponent
x12859:	mov ax, [bp + 16]	; 3: 139 70 16
x12862:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x12864:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12867:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x12870:	fld qword [float8$2#]	; 4: 221 6 70 5

frexp$33:	; Parameter 18 2 6
x12874:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary584 exponent
x12877:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary584 14
x12880:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x12883:	mov word [bp + 26], frexp$37	; 5: 199 70 26 97 50
x12888:	mov [bp + 28], bp	; 3: 137 110 28
x12891:	add bp, 26	; 3: 131 197 26
x12894:	jmp pow	; 3: 233 211 245

frexp$37:	; PostCall 18
x12897:	fstp qword [bp + 26]	; 3: 221 94 26
x12900:	fld qword [bp + 18]	; 3: 221 70 18
x12903:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary585

frexp$39:	; SignedDivide £temporary586 x £temporary585
x12906:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary586

frexp$41:	; Return £temporary586
x12908:	mov ax, [bp]	; 3: 139 70 0
x12911:	mov di, [bp + 4]	; 3: 139 126 4
x12914:	mov bp, [bp + 2]	; 3: 139 110 2
x12917:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x12919:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x12923:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary588 -> p p 0
x12925:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary588 -> p 0
x12928:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x12932:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x12934:	mov ax, [bp]	; 3: 139 70 0
x12937:	mov di, [bp + 4]	; 3: 139 126 4
x12940:	mov bp, [bp + 2]	; 3: 139 110 2
x12943:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@733$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@733$log2$1:	; PushFloat x
x12945:	fld qword [bp + 6]	; 3: 221 70 6

@733$log2$2:	; Parameter 14 x 6
x12948:	fstp qword [bp + 20]	; 3: 221 94 20

@733$log2$3:	; Call 14 log 0
x12951:	mov word [bp + 14], @733$log2$4	; 5: 199 70 14 165 50
x12956:	mov [bp + 16], bp	; 3: 137 110 16
x12959:	add bp, 14	; 3: 131 197 14
x12962:	jmp log	; 3: 233 103 244

@733$log2$4:	; PostCall 14

@733$log2$5:	; GetReturnValue £temporary570

@733$log2$6:	; PushFloat 0.693
x12965:	fld qword [float8$0.693#]	; 4: 221 6 190 50

@733$log2$7:	; SignedDivide £temporary571 £temporary570 0.693
x12969:	fdiv	; 2: 222 249

@733$log2$8:	; FloatingToIntegral £temporary572 £temporary571
x12971:	fistp word [container2bytes#]	; 4: 223 30 16 27
x12975:	mov bx, [container2bytes#]	; 4: 139 30 16 27

@733$log2$9:	; SetReturnValue £temporary572

@733$log2$10:	; Return £temporary572
x12979:	mov ax, [bp]	; 3: 139 70 0
x12982:	mov di, [bp + 4]	; 3: 139 126 4
x12985:	mov bp, [bp + 2]	; 3: 139 110 2
x12988:	jmp ax	; 2: 255 224

@733$log2$11:	; FunctionEnd log2

float8$0.693#:
x12990:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x12998:	mov word [bp + 14], string_25s3A2025s2E0A#	; 5: 199 70 14 6 51

perror$2:	; Parameter 8 s 8
x13003:	mov ax, [bp + 6]	; 3: 139 70 6
x13006:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13009:	mov ax, [errno]	; 3: 161 182 10
x13012:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13015:	mov word [bp + 18], perror$6	; 5: 199 70 18 229 50
x13020:	mov [bp + 20], bp	; 3: 137 110 20
x13023:	add bp, 18	; 3: 131 197 18
x13026:	nop	; 1: 144
x13027:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary1161

perror$8:	; Parameter 8 £temporary1161 10
x13029:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13032:	mov word [bp + 8], perror$10	; 5: 199 70 8 251 50
x13037:	mov [bp + 10], bp	; 3: 137 110 10
x13040:	add bp, 8	; 3: 131 197 8
x13043:	mov di, bp	; 2: 137 239
x13045:	add di, 4	; 3: 131 199 4
x13048:	jmp printf	; 3: 233 202 217

perror$10:	; PostCall 8

perror$11:	; Return 0
x13051:	mov ax, [bp]	; 3: 139 70 0
x13054:	mov di, [bp + 4]	; 3: 139 126 4
x13057:	mov bp, [bp + 2]	; 3: 139 110 2
x13060:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

string_25s3A2025s2E0A#:
x13062:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13071:	mov word [bp + 8], strerror$2	; 5: 199 70 8 29 51
x13076:	mov [bp + 10], bp	; 3: 137 110 10
x13079:	add bp, 8	; 3: 131 197 8
x13082:	jmp localeconv	; 3: 233 23 235

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary4072

strerror$4:	; Assign localeConvPtr £temporary4072
x13085:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 9 localeConvPtr 0
x13088:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13092:	je strerror$9	; 2: 116 8

strerror$6:	; Deref £temporary4074 -> localeConvPtr localeConvPtr 16
x13094:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign £temporary4078 £temporary4074 -> localeConvPtr
x13097:	mov ax, [si + 16]	; 3: 139 68 16

strerror$8:	; Goto 10
x13100:	jmp strerror$10	; 2: 235 3

strerror$9:	; Assign £temporary4078 0
x13102:	mov ax, 0	; 3: 184 0 0

strerror$10:	; Assign messageList £temporary4078
x13105:	mov [bp + 10], ax	; 3: 137 70 10

strerror$11:	; Equal 14 messageList 0
x13108:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13112:	je strerror$14	; 2: 116 5

strerror$12:	; Assign £temporary4083 messageList
x13114:	mov ax, [bp + 10]	; 3: 139 70 10

strerror$13:	; Goto 15
x13117:	jmp strerror$15	; 2: 235 3

strerror$14:	; Assign £temporary4083 enMessageList
x13119:	mov ax, enMessageList	; 3: 184 204 31

strerror$15:	; Assign messageList £temporary4083
x13122:	mov [bp + 10], ax	; 3: 137 70 10

strerror$16:	; UnsignedMultiply £temporary4085 errno 2
x13125:	mov ax, [bp + 6]	; 3: 139 70 6
x13128:	xor dx, dx	; 2: 49 210
x13130:	mul word [int2$2#]	; 4: 247 38 96 51

strerror$17:	; BinaryAdd £temporary4086 messageList £temporary4085
x13134:	mov si, [bp + 10]	; 3: 139 118 10
x13137:	add si, ax	; 2: 1 198

strerror$18:	; Deref £temporary4084 -> £temporary4086 £temporary4086 0

strerror$19:	; SetReturnValue £temporary4084 -> £temporary4086
x13139:	mov bx, [si]	; 2: 139 28

strerror$20:	; Return £temporary4084 -> £temporary4086
x13141:	mov ax, [bp]	; 3: 139 70 0
x13144:	mov di, [bp + 4]	; 3: 139 126 4
x13147:	mov bp, [bp + 2]	; 3: 139 110 2
x13150:	jmp ax	; 2: 255 224

strerror$21:	; FunctionEnd strerror

int2$2#:
x13152:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13154:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13157:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13160:	mov word [bp + 16], modf$4	; 5: 199 70 16 118 51
x13165:	mov [bp + 18], bp	; 3: 137 110 18
x13168:	add bp, 16	; 3: 131 197 16
x13171:	jmp fabs	; 3: 233 63 241

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary603

modf$6:	; PopFloat abs_x
x13174:	fstp qword [bp + 16]	; 3: 221 94 16

modf$7:	; PushFloat abs_x
x13177:	fld qword [bp + 16]	; 3: 221 70 16

modf$8:	; FloatingToIntegral £temporary604 abs_x
x13180:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x13184:	mov eax, [container4bytes#]	; 4: 102 161 9 36

modf$9:	; IntegralToFloating £temporary605 £temporary604
x13188:	mov [container4bytes#], eax	; 4: 102 163 9 36
x13192:	fild dword [container4bytes#]	; 4: 219 6 9 36

modf$10:	; PopFloat integral
x13196:	fstp qword [bp + 24]	; 3: 221 94 24

modf$11:	; PushFloat abs_x
x13199:	fld qword [bp + 16]	; 3: 221 70 16

modf$12:	; PushFloat integral
x13202:	fld qword [bp + 24]	; 3: 221 70 24

modf$13:	; BinarySubtract £temporary606 abs_x integral
x13205:	fsub	; 2: 222 233

modf$14:	; PopFloat fractional
x13207:	fstp qword [bp + 32]	; 3: 221 94 32

modf$15:	; Equal 26 p 0
x13210:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13214:	je modf$26	; 2: 116 28

modf$16:	; Deref £temporary608 -> p p 0
x13216:	mov si, [bp + 14]	; 3: 139 118 14

modf$17:	; PushFloat x
x13219:	fld qword [bp + 6]	; 3: 221 70 6

modf$18:	; PushZero
x13222:	fldz	; 2: 217 238

modf$19:	; SignedLessThanEqual 23 x 0
x13224:	fcompp	; 2: 222 217
x13226:	fstsw ax	; 3: 155 223 224
x13229:	sahf	; 1: 158
x13230:	jae modf$23	; 2: 115 5

modf$20:	; PushFloat integral
x13232:	fld qword [bp + 24]	; 3: 221 70 24

modf$21:	; DecreaseStack

modf$22:	; Goto 25
x13235:	jmp modf$25	; 2: 235 5

modf$23:	; PushFloat integral
x13237:	fld qword [bp + 24]	; 3: 221 70 24

modf$24:	; UnarySubtract £temporary610 integral
x13240:	fchs	; 2: 217 224

modf$25:	; PopFloat £temporary608 -> p
x13242:	fstp qword [si]	; 2: 221 28

modf$26:	; PushFloat x
x13244:	fld qword [bp + 6]	; 3: 221 70 6

modf$27:	; PushZero
x13247:	fldz	; 2: 217 238

modf$28:	; SignedLessThanEqual 32 x 0
x13249:	fcompp	; 2: 222 217
x13251:	fstsw ax	; 3: 155 223 224
x13254:	sahf	; 1: 158
x13255:	jae modf$32	; 2: 115 5

modf$29:	; PushFloat fractional
x13257:	fld qword [bp + 32]	; 3: 221 70 32

modf$30:	; DecreaseStack

modf$31:	; Goto 34
x13260:	jmp modf$34	; 2: 235 5

modf$32:	; PushFloat fractional
x13262:	fld qword [bp + 32]	; 3: 221 70 32

modf$33:	; UnarySubtract £temporary616 fractional
x13265:	fchs	; 2: 217 224

modf$34:	; SetReturnValue £temporary620

modf$35:	; Return £temporary620
x13267:	mov ax, [bp]	; 3: 139 70 0
x13270:	mov di, [bp + 4]	; 3: 139 126 4
x13273:	mov bp, [bp + 2]	; 3: 139 110 2
x13276:	jmp ax	; 2: 255 224

modf$36:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13278:	mov word [bp + 28], string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 52 53

math_test_2$2:	; PushFloat x
x13283:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13286:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13289:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13292:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13295:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13298:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13301:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13304:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13307:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 9 52
x13312:	mov [bp + 48], bp	; 3: 137 110 48
x13315:	add bp, 46	; 3: 131 197 46
x13318:	jmp fmod	; 3: 233 246 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary4978

math_test_2$14:	; Parameter 22 £temporary4978 24
x13321:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13324:	mov ax, [errno]	; 3: 161 182 10
x13327:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13330:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 37 52
x13335:	mov [bp + 24], bp	; 3: 137 110 24
x13338:	add bp, 22	; 3: 131 197 22
x13341:	mov di, bp	; 2: 137 239
x13343:	add di, 26	; 3: 131 199 26
x13346:	jmp printf	; 3: 233 160 216

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13349:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13355:	mov word [bp + 28], string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 83 53

math_test_2$21:	; PushFloat x
x13360:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13363:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13366:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13369:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13372:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13375:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13378:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13381:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13384:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 86 52
x13389:	mov [bp + 48], bp	; 3: 137 110 48
x13392:	add bp, 46	; 3: 131 197 46
x13395:	jmp atan2	; 3: 233 80 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary4980

math_test_2$33:	; Parameter 22 £temporary4980 24
x13398:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13401:	mov ax, [errno]	; 3: 161 182 10
x13404:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13407:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 114 52
x13412:	mov [bp + 24], bp	; 3: 137 110 24
x13415:	add bp, 22	; 3: 131 197 22
x13418:	mov di, bp	; 2: 137 239
x13420:	add di, 26	; 3: 131 199 26
x13423:	jmp printf	; 3: 233 83 216

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13426:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13432:	mov word [bp + 28], string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 115 53

math_test_2$40:	; PushFloat x
x13437:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13440:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13443:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13446:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13449:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13452:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13455:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13458:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13461:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 163 52
x13466:	mov [bp + 48], bp	; 3: 137 110 48
x13469:	add bp, 46	; 3: 131 197 46
x13472:	jmp pow	; 3: 233 145 243

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary4982

math_test_2$52:	; Parameter 22 £temporary4982 24
x13475:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13478:	mov ax, [errno]	; 3: 161 182 10
x13481:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13484:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 191 52
x13489:	mov [bp + 24], bp	; 3: 137 110 24
x13492:	add bp, 22	; 3: 131 197 22
x13495:	mov di, bp	; 2: 137 239
x13497:	add di, 26	; 3: 131 199 26
x13500:	jmp printf	; 3: 233 6 216

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13503:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13509:	mov word [bp + 28], string_0A#	; 5: 199 70 28 195 12

math_test_2$59:	; Call 22 printf 0
x13514:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 218 52
x13519:	mov [bp + 24], bp	; 3: 137 110 24
x13522:	add bp, 22	; 3: 131 197 22
x13525:	mov di, bp	; 2: 137 239
x13527:	jmp printf	; 3: 233 235 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13530:	mov word [bp + 28], string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 145 53

math_test_2$63:	; PushFloat x
x13535:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13538:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13541:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary4985 y
x13544:	fistp word [container2bytes#]	; 4: 223 30 16 27
x13548:	mov ax, [container2bytes#]	; 3: 161 16 27

math_test_2$67:	; Parameter 22 £temporary4985 16
x13551:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13554:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13557:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13560:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary4986 y
x13563:	fistp word [container2bytes#]	; 4: 223 30 16 27
x13567:	mov ax, [container2bytes#]	; 3: 161 16 27

math_test_2$73:	; Parameter 22 £temporary4986 32
x13570:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13573:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 19 53
x13578:	mov [bp + 42], bp	; 3: 137 110 42
x13581:	add bp, 40	; 3: 131 197 40
x13584:	jmp ldexp	; 3: 233 201 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary4987

math_test_2$77:	; Parameter 22 £temporary4987 18
x13587:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13590:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 41 53
x13595:	mov [bp + 24], bp	; 3: 137 110 24
x13598:	add bp, 22	; 3: 131 197 22
x13601:	mov di, bp	; 2: 137 239
x13603:	add di, 18	; 3: 131 199 18
x13606:	jmp printf	; 3: 233 156 215

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13609:	mov ax, [bp]	; 3: 139 70 0
x13612:	mov di, [bp + 4]	; 3: 139 126 4
x13615:	mov bp, [bp + 2]	; 3: 139 110 2
x13618:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13620:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13651:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13683:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_ldexp2825f2C2025i29203D2025f0A0A#:
x13713:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x13734:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x13737:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x13739:	fcompp	; 2: 222 217
x13741:	fstsw ax	; 3: 155 223 224
x13744:	sahf	; 1: 158
x13745:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x13747:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x13750:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary739 x y
x13753:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary739 6
x13755:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x13758:	mov word [bp + 22], atan2$9	; 5: 199 70 22 204 53
x13763:	mov [bp + 24], bp	; 3: 137 110 24
x13766:	add bp, 22	; 3: 131 197 22
x13769:	jmp atan	; 3: 233 8 249

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary740

atan2$11:	; SetReturnValue £temporary740

atan2$12:	; Return £temporary740
x13772:	mov ax, [bp]	; 3: 139 70 0
x13775:	mov di, [bp + 4]	; 3: 139 126 4
x13778:	mov bp, [bp + 2]	; 3: 139 110 2
x13781:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x13783:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x13786:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x13788:	fcompp	; 2: 222 217
x13790:	fstsw ax	; 3: 155 223 224
x13793:	sahf	; 1: 158
x13794:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x13796:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x13799:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x13801:	fcompp	; 2: 222 217
x13803:	fstsw ax	; 3: 155 223 224
x13806:	sahf	; 1: 158
x13807:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x13809:	fld qword [float8$3.14#]	; 4: 221 6 254 4

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13813:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x13816:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x13819:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary744 x y
x13822:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary744 6
x13824:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x13827:	mov word [bp + 30], atan2$26	; 5: 199 70 30 17 54
x13832:	mov [bp + 32], bp	; 3: 137 110 32
x13835:	add bp, 30	; 3: 131 197 30
x13838:	jmp atan	; 3: 233 195 248

atan2$26:	; PostCall 22
x13841:	fstp qword [bp + 30]	; 3: 221 94 30
x13844:	fld qword [bp + 22]	; 3: 221 70 22
x13847:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary745

atan2$28:	; BinaryAdd £temporary746 3.14 £temporary745
x13850:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary746

atan2$30:	; Return £temporary746
x13852:	mov ax, [bp]	; 3: 139 70 0
x13855:	mov di, [bp + 4]	; 3: 139 126 4
x13858:	mov bp, [bp + 2]	; 3: 139 110 2
x13861:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x13863:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x13866:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x13868:	fcompp	; 2: 222 217
x13870:	fstsw ax	; 3: 155 223 224
x13873:	sahf	; 1: 158
x13874:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x13876:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x13879:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x13881:	fcompp	; 2: 222 217
x13883:	fstsw ax	; 3: 155 223 224
x13886:	sahf	; 1: 158
x13887:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x13889:	fld qword [float8$minus3.14#]	; 4: 221 6 22 5

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13893:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x13896:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x13899:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary750 x y
x13902:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary750 6
x13904:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x13907:	mov word [bp + 30], atan2$44	; 5: 199 70 30 97 54
x13912:	mov [bp + 32], bp	; 3: 137 110 32
x13915:	add bp, 30	; 3: 131 197 30
x13918:	jmp atan	; 3: 233 115 248

atan2$44:	; PostCall 22
x13921:	fstp qword [bp + 30]	; 3: 221 94 30
x13924:	fld qword [bp + 22]	; 3: 221 70 22
x13927:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary751

atan2$46:	; BinaryAdd £temporary752 -3.14 £temporary751
x13930:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary752

atan2$48:	; Return £temporary752
x13932:	mov ax, [bp]	; 3: 139 70 0
x13935:	mov di, [bp + 4]	; 3: 139 126 4
x13938:	mov bp, [bp + 2]	; 3: 139 110 2
x13941:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x13943:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x13946:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x13948:	fcompp	; 2: 222 217
x13950:	fstsw ax	; 3: 155 223 224
x13953:	sahf	; 1: 158
x13954:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x13956:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x13959:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x13961:	fcompp	; 2: 222 217
x13963:	fstsw ax	; 3: 155 223 224
x13966:	sahf	; 1: 158
x13967:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x13969:	fld qword [float8$1.57#]	; 4: 221 6 6 5

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x13973:	mov ax, [bp]	; 3: 139 70 0
x13976:	mov di, [bp + 4]	; 3: 139 126 4
x13979:	mov bp, [bp + 2]	; 3: 139 110 2
x13982:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x13984:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x13987:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x13989:	fcompp	; 2: 222 217
x13991:	fstsw ax	; 3: 155 223 224
x13994:	sahf	; 1: 158
x13995:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x13997:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14000:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14002:	fcompp	; 2: 222 217
x14004:	fstsw ax	; 3: 155 223 224
x14007:	sahf	; 1: 158
x14008:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14010:	fld qword [float8$minus1.57#]	; 4: 221 6 14 5

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14014:	mov ax, [bp]	; 3: 139 70 0
x14017:	mov di, [bp + 4]	; 3: 139 126 4
x14020:	mov bp, [bp + 2]	; 3: 139 110 2
x14023:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14025:	mov word [errno], 6	; 6: 199 6 182 10 6 0

atan2$68:	; PushZero
x14031:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14033:	mov ax, [bp]	; 3: 139 70 0
x14036:	mov di, [bp + 4]	; 3: 139 126 4
x14039:	mov bp, [bp + 2]	; 3: 139 110 2
x14042:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

ldexp:	; PushFloat x
x14044:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14047:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14050:	fld qword [float8$2#]	; 4: 221 6 70 5

ldexp$3:	; Parameter 16 2 6
x14054:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary565 n
x14057:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary565 14
x14060:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14063:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 253 54
x14068:	mov [bp + 26], bp	; 3: 137 110 26
x14071:	add bp, 24	; 3: 131 197 24
x14074:	jmp pow	; 3: 233 55 241

ldexp$7:	; PostCall 16
x14077:	fstp qword [bp + 24]	; 3: 221 94 24
x14080:	fld qword [bp + 16]	; 3: 221 70 16
x14083:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary566

ldexp$9:	; SignedMultiply £temporary567 x £temporary566
x14086:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary567

ldexp$11:	; Return £temporary567
x14088:	mov ax, [bp]	; 3: 139 70 0
x14091:	mov di, [bp + 4]	; 3: 139 126 4
x14094:	mov bp, [bp + 2]	; 3: 139 110 2
x14097:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14099:	mov word [bp + 12], string_in2Etxt#	; 5: 199 70 12 203 76

file_test$2:	; Parameter 6 string_r# 8
x14104:	mov word [bp + 14], string_r#	; 5: 199 70 14 210 76

file_test$3:	; Call 6 fopen 0
x14109:	mov word [bp + 6], file_test$4	; 5: 199 70 6 43 55
x14114:	mov [bp + 8], bp	; 3: 137 110 8
x14117:	add bp, 6	; 3: 131 197 6
x14120:	jmp fopen	; 3: 233 217 25

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary5017

file_test$6:	; Assign inFilePtr £temporary5017
x14123:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14126:	mov word [bp + 14], string_outX2Etxt#	; 5: 199 70 14 212 76

file_test$9:	; Parameter 8 string_w# 8
x14131:	mov word [bp + 16], string_w#	; 5: 199 70 16 221 76

file_test$10:	; Call 8 fopen 0
x14136:	mov word [bp + 8], file_test$11	; 5: 199 70 8 70 55
x14141:	mov [bp + 10], bp	; 3: 137 110 10
x14144:	add bp, 8	; 3: 131 197 8
x14147:	jmp fopen	; 3: 233 190 25

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary5018

file_test$13:	; Assign outFilePtr £temporary5018
x14150:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14153:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14157:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14159:	mov ax, [stderr]	; 3: 161 223 76
x14162:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14165:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 225 76

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14170:	mov word [bp + 20], string_inFilePtr20213D20NULL#	; 5: 199 70 20 15 77

file_test$19:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14175:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 33 77

file_test$20:	; Parameter 10 14 14
x14180:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14185:	mov word [bp + 10], file_test$22	; 5: 199 70 10 124 55
x14190:	mov [bp + 12], bp	; 3: 137 110 12
x14193:	add bp, 10	; 3: 131 197 10
x14196:	mov di, bp	; 2: 137 239
x14198:	add di, 6	; 3: 131 199 6
x14201:	jmp fprintf	; 3: 233 26 30

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14204:	mov word [bp + 10], file_test$25	; 5: 199 70 10 138 55
x14209:	mov [bp + 12], bp	; 3: 137 110 12
x14212:	add bp, 10	; 3: 131 197 10
x14215:	jmp abort	; 3: 233 71 30

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14218:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14222:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14224:	mov ax, [stderr]	; 3: 161 223 76
x14227:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14230:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 225 76

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14235:	mov word [bp + 20], string_outFilePtr20213D20NULL#	; 5: 199 70 20 98 77

file_test$31:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14240:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 33 77

file_test$32:	; Parameter 10 15 14
x14245:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14250:	mov word [bp + 10], file_test$34	; 5: 199 70 10 189 55
x14255:	mov [bp + 12], bp	; 3: 137 110 12
x14258:	add bp, 10	; 3: 131 197 10
x14261:	mov di, bp	; 2: 137 239
x14263:	add di, 6	; 3: 131 199 6
x14266:	jmp fprintf	; 3: 233 217 29

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14269:	mov word [bp + 10], file_test$37	; 5: 199 70 10 203 55
x14274:	mov [bp + 12], bp	; 3: 137 110 12
x14277:	add bp, 10	; 3: 131 197 10
x14280:	jmp abort	; 3: 233 6 30

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14283:	mov ax, [bp + 6]	; 3: 139 70 6
x14286:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14289:	mov word [bp + 10], file_test$41	; 5: 199 70 10 223 55
x14294:	mov [bp + 12], bp	; 3: 137 110 12
x14297:	add bp, 10	; 3: 131 197 10
x14300:	jmp feof	; 3: 233 3 30

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary5027

file_test$43:	; NotEqual 75 £temporary5027 0
x14303:	cmp bx, 0	; 3: 131 251 0
x14306:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14310:	mov ax, [bp + 6]	; 3: 139 70 6
x14313:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14316:	mov word [bp + 26], string_25lf#	; 5: 199 70 26 117 77

file_test$47:	; address £temporary5030 value
x14321:	mov si, bp	; 2: 137 238
x14323:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary5030 10
x14326:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14329:	mov word [bp + 18], file_test$50	; 5: 199 70 18 12 56
x14334:	mov [bp + 20], bp	; 3: 137 110 20
x14337:	add bp, 18	; 3: 131 197 18
x14340:	mov di, bp	; 2: 137 239
x14342:	add di, 2	; 3: 131 199 2
x14345:	jmp fscanf	; 3: 233 107 30

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14348:	mov word [bp + 24], string_X12025f0A#	; 5: 199 70 24 121 77

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14353:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14356:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14359:	mov word [bp + 26], file_test$57	; 5: 199 70 26 37 56
x14364:	mov [bp + 28], bp	; 3: 137 110 28
x14367:	add bp, 26	; 3: 131 197 26
x14370:	jmp sqrt	; 3: 233 59 246

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary5032

file_test$59:	; Parameter 18 £temporary5032 8
x14373:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14376:	mov word [bp + 18], file_test$61	; 5: 199 70 18 59 56
x14381:	mov [bp + 20], bp	; 3: 137 110 20
x14384:	add bp, 18	; 3: 131 197 18
x14387:	mov di, bp	; 2: 137 239
x14389:	add di, 8	; 3: 131 199 8
x14392:	jmp printf	; 3: 233 138 212

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14395:	mov ax, [bp + 8]	; 3: 139 70 8
x14398:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14401:	mov word [bp + 26], string_X22025f0A#	; 5: 199 70 26 128 77

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14406:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14409:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14412:	mov word [bp + 28], file_test$69	; 5: 199 70 28 90 56
x14417:	mov [bp + 30], bp	; 3: 137 110 30
x14420:	add bp, 28	; 3: 131 197 28
x14423:	jmp sqrt	; 3: 233 6 246

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary5034

file_test$71:	; Parameter 18 £temporary5034 10
x14426:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14429:	mov word [bp + 18], file_test$73	; 5: 199 70 18 112 56
x14434:	mov [bp + 20], bp	; 3: 137 110 20
x14437:	add bp, 18	; 3: 131 197 18
x14440:	mov di, bp	; 2: 137 239
x14442:	add di, 8	; 3: 131 199 8
x14445:	jmp fprintf	; 3: 233 38 29

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14448:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14451:	mov word [bp + 16], string_0A#	; 5: 199 70 16 195 12

file_test$77:	; Call 10 printf 0
x14456:	mov word [bp + 10], file_test$78	; 5: 199 70 10 136 56
x14461:	mov [bp + 12], bp	; 3: 137 110 12
x14464:	add bp, 10	; 3: 131 197 10
x14467:	mov di, bp	; 2: 137 239
x14469:	jmp printf	; 3: 233 61 212

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14472:	mov ax, [bp + 6]	; 3: 139 70 6
x14475:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14478:	mov word [bp + 10], file_test$82	; 5: 199 70 10 156 56
x14483:	mov [bp + 12], bp	; 3: 137 110 12
x14486:	add bp, 10	; 3: 131 197 10
x14489:	jmp fclose	; 3: 233 242 47

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14492:	mov ax, [bp + 8]	; 3: 139 70 8
x14495:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14498:	mov word [bp + 10], file_test$86	; 5: 199 70 10 176 56
x14503:	mov [bp + 12], bp	; 3: 137 110 12
x14506:	add bp, 10	; 3: 131 197 10
x14509:	jmp fclose	; 3: 233 222 47

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14512:	mov word [bp + 12], string_in2Etxt#	; 5: 199 70 12 203 76

file_test$89:	; Parameter 6 string_r# 8
x14517:	mov word [bp + 14], string_r#	; 5: 199 70 14 210 76

file_test$90:	; Call 6 fopen 0
x14522:	mov word [bp + 6], file_test$91	; 5: 199 70 6 200 56
x14527:	mov [bp + 8], bp	; 3: 137 110 8
x14530:	add bp, 6	; 3: 131 197 6
x14533:	jmp fopen	; 3: 233 60 24

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary5039

file_test$93:	; Assign inFilePtr £temporary5039
x14536:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14539:	mov word [bp + 14], string_outY2Etxt#	; 5: 199 70 14 135 77

file_test$96:	; Parameter 8 string_w# 8
x14544:	mov word [bp + 16], string_w#	; 5: 199 70 16 221 76

file_test$97:	; Call 8 fopen 0
x14549:	mov word [bp + 8], file_test$98	; 5: 199 70 8 227 56
x14554:	mov [bp + 10], bp	; 3: 137 110 10
x14557:	add bp, 8	; 3: 131 197 8
x14560:	jmp fopen	; 3: 233 33 24

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary5040

file_test$100:	; Assign outFilePtr £temporary5040
x14563:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14566:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14570:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14572:	mov ax, [stderr]	; 3: 161 223 76
x14575:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14578:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 225 76

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14583:	mov word [bp + 20], string_inFilePtr20213D20NULL#	; 5: 199 70 20 15 77

file_test$106:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14588:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 33 77

file_test$107:	; Parameter 10 34 14
x14593:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14598:	mov word [bp + 10], file_test$109	; 5: 199 70 10 25 57
x14603:	mov [bp + 12], bp	; 3: 137 110 12
x14606:	add bp, 10	; 3: 131 197 10
x14609:	mov di, bp	; 2: 137 239
x14611:	add di, 6	; 3: 131 199 6
x14614:	jmp fprintf	; 3: 233 125 28

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14617:	mov word [bp + 10], file_test$112	; 5: 199 70 10 39 57
x14622:	mov [bp + 12], bp	; 3: 137 110 12
x14625:	add bp, 10	; 3: 131 197 10
x14628:	jmp abort	; 3: 233 170 28

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14631:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14635:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14637:	mov ax, [stderr]	; 3: 161 223 76
x14640:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14643:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 225 76

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14648:	mov word [bp + 20], string_outFilePtr20213D20NULL#	; 5: 199 70 20 98 77

file_test$118:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14653:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 33 77

file_test$119:	; Parameter 10 35 14
x14658:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14663:	mov word [bp + 10], file_test$121	; 5: 199 70 10 90 57
x14668:	mov [bp + 12], bp	; 3: 137 110 12
x14671:	add bp, 10	; 3: 131 197 10
x14674:	mov di, bp	; 2: 137 239
x14676:	add di, 6	; 3: 131 199 6
x14679:	jmp fprintf	; 3: 233 60 28

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14682:	mov word [bp + 10], file_test$124	; 5: 199 70 10 104 57
x14687:	mov [bp + 12], bp	; 3: 137 110 12
x14690:	add bp, 10	; 3: 131 197 10
x14693:	jmp abort	; 3: 233 105 28

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x14696:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x14701:	mov ax, [bp + 6]	; 3: 139 70 6
x14704:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x14707:	mov word [bp + 22], string_25i#	; 5: 199 70 22 144 77

file_test$129:	; address £temporary5049 size
x14712:	mov si, bp	; 2: 137 238
x14714:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary5049 10
x14717:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x14720:	mov word [bp + 14], file_test$132	; 5: 199 70 14 147 57
x14725:	mov [bp + 16], bp	; 3: 137 110 16
x14728:	add bp, 14	; 3: 131 197 14
x14731:	mov di, bp	; 2: 137 239
x14733:	add di, 2	; 3: 131 199 2
x14736:	jmp fscanf	; 3: 233 228 28

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x14739:	mov word [bp + 20], string_size2025i0A#	; 5: 199 70 20 147 77

file_test$135:	; Parameter 14 size 8
x14744:	mov ax, [bp + 10]	; 3: 139 70 10
x14747:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x14750:	mov word [bp + 14], file_test$137	; 5: 199 70 14 177 57
x14755:	mov [bp + 16], bp	; 3: 137 110 16
x14758:	add bp, 14	; 3: 131 197 14
x14761:	mov di, bp	; 2: 137 239
x14763:	add di, 2	; 3: 131 199 2
x14766:	jmp printf	; 3: 233 20 211

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x14769:	mov ax, [bp + 8]	; 3: 139 70 8
x14772:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x14775:	mov word [bp + 22], string_Y20size2025i0A#	; 5: 199 70 22 156 77

file_test$141:	; Parameter 14 size 10
x14780:	mov ax, [bp + 10]	; 3: 139 70 10
x14783:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x14786:	mov word [bp + 14], file_test$143	; 5: 199 70 14 213 57
x14791:	mov [bp + 16], bp	; 3: 137 110 16
x14794:	add bp, 14	; 3: 131 197 14
x14797:	mov di, bp	; 2: 137 239
x14799:	add di, 2	; 3: 131 199 2
x14802:	jmp fprintf	; 3: 233 193 27

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x14805:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x14810:	mov ax, [bp + 10]	; 3: 139 70 10
x14813:	cmp [bp + 12], ax	; 3: 57 70 12
x14816:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x14820:	mov ax, [bp + 6]	; 3: 139 70 6
x14823:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x14826:	mov word [bp + 30], string_25lf#	; 5: 199 70 30 117 77

file_test$149:	; address £temporary5055 value
x14831:	mov si, bp	; 2: 137 238
x14833:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary5055 10
x14836:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x14839:	mov word [bp + 22], file_test$152	; 5: 199 70 22 10 58
x14844:	mov [bp + 24], bp	; 3: 137 110 24
x14847:	add bp, 22	; 3: 131 197 22
x14850:	mov di, bp	; 2: 137 239
x14852:	add di, 2	; 3: 131 199 2
x14855:	jmp fscanf	; 3: 233 109 28

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x14858:	mov word [bp + 28], string_Y12025f0A#	; 5: 199 70 28 167 77

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x14863:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x14866:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x14869:	mov word [bp + 30], file_test$159	; 5: 199 70 30 35 58
x14874:	mov [bp + 32], bp	; 3: 137 110 32
x14877:	add bp, 30	; 3: 131 197 30
x14880:	jmp sqrt	; 3: 233 61 244

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary5057

file_test$161:	; Parameter 22 £temporary5057 8
x14883:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x14886:	mov word [bp + 22], file_test$163	; 5: 199 70 22 57 58
x14891:	mov [bp + 24], bp	; 3: 137 110 24
x14894:	add bp, 22	; 3: 131 197 22
x14897:	mov di, bp	; 2: 137 239
x14899:	add di, 8	; 3: 131 199 8
x14902:	jmp printf	; 3: 233 140 210

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x14905:	mov ax, [bp + 8]	; 3: 139 70 8
x14908:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x14911:	mov word [bp + 30], string_Y22025f0A#	; 5: 199 70 30 174 77

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x14916:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x14919:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x14922:	mov word [bp + 32], file_test$171	; 5: 199 70 32 88 58
x14927:	mov [bp + 34], bp	; 3: 137 110 34
x14930:	add bp, 32	; 3: 131 197 32
x14933:	jmp sqrt	; 3: 233 8 244

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary5059

file_test$173:	; Parameter 22 £temporary5059 10
x14936:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x14939:	mov word [bp + 22], file_test$175	; 5: 199 70 22 110 58
x14944:	mov [bp + 24], bp	; 3: 137 110 24
x14947:	add bp, 22	; 3: 131 197 22
x14950:	mov di, bp	; 2: 137 239
x14952:	add di, 8	; 3: 131 199 8
x14955:	jmp fprintf	; 3: 233 40 27

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x14958:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x14961:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x14964:	mov word [bp + 20], string_0A#	; 5: 199 70 20 195 12

file_test$180:	; Call 14 printf 0
x14969:	mov word [bp + 14], file_test$181	; 5: 199 70 14 137 58
x14974:	mov [bp + 16], bp	; 3: 137 110 16
x14977:	add bp, 14	; 3: 131 197 14
x14980:	mov di, bp	; 2: 137 239
x14982:	jmp printf	; 3: 233 60 210

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x14985:	mov ax, [bp + 6]	; 3: 139 70 6
x14988:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x14991:	mov word [bp + 10], file_test$185	; 5: 199 70 10 157 58
x14996:	mov [bp + 12], bp	; 3: 137 110 12
x14999:	add bp, 10	; 3: 131 197 10
x15002:	jmp fclose	; 3: 233 241 45

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15005:	mov ax, [bp + 8]	; 3: 139 70 8
x15008:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15011:	mov word [bp + 10], file_test$189	; 5: 199 70 10 177 58
x15016:	mov [bp + 12], bp	; 3: 137 110 12
x15019:	add bp, 10	; 3: 131 197 10
x15022:	jmp fclose	; 3: 233 221 45

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_Y#
x15025:	mov word [bp + 6], string_Y#	; 5: 199 70 6 181 77

file_test$191:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$192:	; Parameter 8 sourceFile 6
x15030:	mov ax, [bp + 6]	; 3: 139 70 6
x15033:	mov [bp + 14], ax	; 3: 137 70 14

file_test$193:	; Call 8 remove 0
x15036:	mov word [bp + 8], file_test$194	; 5: 199 70 8 202 58
x15041:	mov [bp + 10], bp	; 3: 137 110 10
x15044:	add bp, 8	; 3: 131 197 8
x15047:	jmp remove	; 3: 233 131 46

file_test$194:	; PostCall 8

file_test$195:	; GetReturnValue £temporary5064

file_test$196:	; NotEqual 203 £temporary5064 0
x15050:	cmp bx, 0	; 3: 131 251 0
x15053:	jne file_test$203	; 2: 117 32

file_test$197:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$198:	; Parameter 8 string_2225s2220has20been20removed0A# 6
x15055:	mov word [bp + 14], string_2225s2220has20been20removed0A#	; 5: 199 70 14 183 77

file_test$199:	; Parameter 8 sourceFile 8
x15060:	mov ax, [bp + 6]	; 3: 139 70 6
x15063:	mov [bp + 16], ax	; 3: 137 70 16

file_test$200:	; Call 8 printf 0
x15066:	mov word [bp + 8], file_test$201	; 5: 199 70 8 237 58
x15071:	mov [bp + 10], bp	; 3: 137 110 10
x15074:	add bp, 8	; 3: 131 197 8
x15077:	mov di, bp	; 2: 137 239
x15079:	add di, 2	; 3: 131 199 2
x15082:	jmp printf	; 3: 233 216 209

file_test$201:	; PostCall 8

file_test$202:	; Goto 215
x15085:	jmp file_test$215	; 2: 235 59

file_test$203:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$204:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15087:	mov word [bp + 14], string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 206 77

file_test$205:	; Parameter 8 sourceFile 8
x15092:	mov ax, [bp + 6]	; 3: 139 70 6
x15095:	mov [bp + 16], ax	; 3: 137 70 16

file_test$206:	; Parameter 8 errno 10
x15098:	mov ax, [errno]	; 3: 161 182 10
x15101:	mov [bp + 18], ax	; 3: 137 70 18

file_test$207:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$208:	; Parameter 8 errno 18
x15104:	mov ax, [errno]	; 3: 161 182 10
x15107:	mov [bp + 26], ax	; 3: 137 70 26

file_test$209:	; Call 8 strerror 12
x15110:	mov word [bp + 20], file_test$210	; 5: 199 70 20 20 59
x15115:	mov [bp + 22], bp	; 3: 137 110 22
x15118:	add bp, 20	; 3: 131 197 20
x15121:	jmp strerror	; 3: 233 251 247

file_test$210:	; PostCall 8

file_test$211:	; GetReturnValue £temporary5067

file_test$212:	; Parameter 8 £temporary5067 12
x15124:	mov [bp + 20], bx	; 3: 137 94 20

file_test$213:	; Call 8 printf 0
x15127:	mov word [bp + 8], file_test$214	; 5: 199 70 8 42 59
x15132:	mov [bp + 10], bp	; 3: 137 110 10
x15135:	add bp, 8	; 3: 131 197 8
x15138:	mov di, bp	; 2: 137 239
x15140:	add di, 6	; 3: 131 199 6
x15143:	jmp printf	; 3: 233 155 209

file_test$214:	; PostCall 8

file_test$215:	; Assign sourceFile string_X#
x15146:	mov word [bp + 6], string_X#	; 5: 199 70 6 226 77

file_test$216:	; Assign targetFile string_Y#
x15151:	mov word [bp + 8], string_Y#	; 5: 199 70 8 181 77

file_test$217:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$218:	; Parameter 10 sourceFile 6
x15156:	mov ax, [bp + 6]	; 3: 139 70 6
x15159:	mov [bp + 16], ax	; 3: 137 70 16

file_test$219:	; Parameter 10 string_w# 8
x15162:	mov word [bp + 18], string_w#	; 5: 199 70 18 221 76

file_test$220:	; Call 10 fopen 0
x15167:	mov word [bp + 10], file_test$221	; 5: 199 70 10 77 59
x15172:	mov [bp + 12], bp	; 3: 137 110 12
x15175:	add bp, 10	; 3: 131 197 10
x15178:	jmp fopen	; 3: 233 183 21

file_test$221:	; PostCall 10

file_test$222:	; GetReturnValue £temporary5069

file_test$223:	; Assign filePtr £temporary5069
x15181:	mov [bp + 10], bx	; 3: 137 94 10

file_test$224:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$225:	; Parameter 12 filePtr 6
x15184:	mov ax, [bp + 10]	; 3: 139 70 10
x15187:	mov [bp + 18], ax	; 3: 137 70 18

file_test$226:	; Parameter 12 string_Hello20X# 8
x15190:	mov word [bp + 20], string_Hello20X#	; 5: 199 70 20 228 77

file_test$227:	; Call 12 fprintf 0
x15195:	mov word [bp + 12], file_test$228	; 5: 199 70 12 107 59
x15200:	mov [bp + 14], bp	; 3: 137 110 14
x15203:	add bp, 12	; 3: 131 197 12
x15206:	mov di, bp	; 2: 137 239
x15208:	jmp fprintf	; 3: 233 43 26

file_test$228:	; PostCall 12

file_test$229:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$230:	; Parameter 12 filePtr 6
x15211:	mov ax, [bp + 10]	; 3: 139 70 10
x15214:	mov [bp + 18], ax	; 3: 137 70 18

file_test$231:	; Call 12 fclose 0
x15217:	mov word [bp + 12], file_test$232	; 5: 199 70 12 127 59
x15222:	mov [bp + 14], bp	; 3: 137 110 14
x15225:	add bp, 12	; 3: 131 197 12
x15228:	jmp fclose	; 3: 233 15 45

file_test$232:	; PostCall 12

file_test$233:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$234:	; Parameter 12 sourceFile 6
x15231:	mov ax, [bp + 6]	; 3: 139 70 6
x15234:	mov [bp + 18], ax	; 3: 137 70 18

file_test$235:	; Parameter 12 targetFile 8
x15237:	mov ax, [bp + 8]	; 3: 139 70 8
x15240:	mov [bp + 20], ax	; 3: 137 70 20

file_test$236:	; Call 12 rename 0
x15243:	mov word [bp + 12], file_test$237	; 5: 199 70 12 153 59
x15248:	mov [bp + 14], bp	; 3: 137 110 14
x15251:	add bp, 12	; 3: 131 197 12
x15254:	jmp rename	; 3: 233 225 45

file_test$237:	; PostCall 12

file_test$238:	; GetReturnValue £temporary5072

file_test$239:	; NotEqual 247 £temporary5072 0
x15257:	cmp bx, 0	; 3: 131 251 0
x15260:	jne file_test$247	; 2: 117 38

file_test$240:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$241:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15262:	mov word [bp + 18], string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 236 77

file_test$242:	; Parameter 12 sourceFile 8
x15267:	mov ax, [bp + 6]	; 3: 139 70 6
x15270:	mov [bp + 20], ax	; 3: 137 70 20

file_test$243:	; Parameter 12 targetFile 10
x15273:	mov ax, [bp + 8]	; 3: 139 70 8
x15276:	mov [bp + 22], ax	; 3: 137 70 22

file_test$244:	; Call 12 printf 0
x15279:	mov word [bp + 12], file_test$245	; 5: 199 70 12 194 59
x15284:	mov [bp + 14], bp	; 3: 137 110 14
x15287:	add bp, 12	; 3: 131 197 12
x15290:	mov di, bp	; 2: 137 239
x15292:	add di, 4	; 3: 131 199 4
x15295:	jmp printf	; 3: 233 3 209

file_test$245:	; PostCall 12

file_test$246:	; Goto 260
x15298:	jmp file_test$260	; 2: 235 65

file_test$247:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$248:	; Parameter 12 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15300:	mov word [bp + 18], string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 18 12 78

file_test$249:	; Parameter 12 sourceFile 8
x15305:	mov ax, [bp + 6]	; 3: 139 70 6
x15308:	mov [bp + 20], ax	; 3: 137 70 20

file_test$250:	; Parameter 12 targetFile 10
x15311:	mov ax, [bp + 8]	; 3: 139 70 8
x15314:	mov [bp + 22], ax	; 3: 137 70 22

file_test$251:	; Parameter 12 errno 12
x15317:	mov ax, [errno]	; 3: 161 182 10
x15320:	mov [bp + 24], ax	; 3: 137 70 24

file_test$252:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$253:	; Parameter 12 errno 20
x15323:	mov ax, [errno]	; 3: 161 182 10
x15326:	mov [bp + 32], ax	; 3: 137 70 32

file_test$254:	; Call 12 strerror 14
x15329:	mov word [bp + 26], file_test$255	; 5: 199 70 26 239 59
x15334:	mov [bp + 28], bp	; 3: 137 110 28
x15337:	add bp, 26	; 3: 131 197 26
x15340:	jmp strerror	; 3: 233 32 247

file_test$255:	; PostCall 12

file_test$256:	; GetReturnValue £temporary5075

file_test$257:	; Parameter 12 £temporary5075 14
x15343:	mov [bp + 26], bx	; 3: 137 94 26

file_test$258:	; Call 12 printf 0
x15346:	mov word [bp + 12], file_test$259	; 5: 199 70 12 5 60
x15351:	mov [bp + 14], bp	; 3: 137 110 14
x15354:	add bp, 12	; 3: 131 197 12
x15357:	mov di, bp	; 2: 137 239
x15359:	add di, 8	; 3: 131 199 8
x15362:	jmp printf	; 3: 233 192 208

file_test$259:	; PostCall 12

file_test$260:	; Assign sourceFile string_X2#
x15365:	mov word [bp + 6], string_X2#	; 5: 199 70 6 37 78

file_test$261:	; Assign targetFile string_Y2#
x15370:	mov word [bp + 8], string_Y2#	; 5: 199 70 8 40 78

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 sourceFile 6
x15375:	mov ax, [bp + 6]	; 3: 139 70 6
x15378:	mov [bp + 16], ax	; 3: 137 70 16

file_test$264:	; Parameter 10 targetFile 8
x15381:	mov ax, [bp + 8]	; 3: 139 70 8
x15384:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; Call 10 rename 0
x15387:	mov word [bp + 10], file_test$266	; 5: 199 70 10 41 60
x15392:	mov [bp + 12], bp	; 3: 137 110 12
x15395:	add bp, 10	; 3: 131 197 10
x15398:	jmp rename	; 3: 233 81 45

file_test$266:	; PostCall 10

file_test$267:	; GetReturnValue £temporary5077

file_test$268:	; NotEqual 276 £temporary5077 0
x15401:	cmp bx, 0	; 3: 131 251 0
x15404:	jne file_test$276	; 2: 117 38

file_test$269:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$270:	; Parameter 10 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15406:	mov word [bp + 16], string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 16 236 77

file_test$271:	; Parameter 10 sourceFile 8
x15411:	mov ax, [bp + 6]	; 3: 139 70 6
x15414:	mov [bp + 18], ax	; 3: 137 70 18

file_test$272:	; Parameter 10 targetFile 10
x15417:	mov ax, [bp + 8]	; 3: 139 70 8
x15420:	mov [bp + 20], ax	; 3: 137 70 20

file_test$273:	; Call 10 printf 0
x15423:	mov word [bp + 10], file_test$274	; 5: 199 70 10 82 60
x15428:	mov [bp + 12], bp	; 3: 137 110 12
x15431:	add bp, 10	; 3: 131 197 10
x15434:	mov di, bp	; 2: 137 239
x15436:	add di, 4	; 3: 131 199 4
x15439:	jmp printf	; 3: 233 115 208

file_test$274:	; PostCall 10

file_test$275:	; Goto 289
x15442:	jmp file_test$289	; 2: 235 65

file_test$276:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$277:	; Parameter 10 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15444:	mov word [bp + 16], string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 16 12 78

file_test$278:	; Parameter 10 sourceFile 8
x15449:	mov ax, [bp + 6]	; 3: 139 70 6
x15452:	mov [bp + 18], ax	; 3: 137 70 18

file_test$279:	; Parameter 10 targetFile 10
x15455:	mov ax, [bp + 8]	; 3: 139 70 8
x15458:	mov [bp + 20], ax	; 3: 137 70 20

file_test$280:	; Parameter 10 errno 12
x15461:	mov ax, [errno]	; 3: 161 182 10
x15464:	mov [bp + 22], ax	; 3: 137 70 22

file_test$281:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 10 errno 20
x15467:	mov ax, [errno]	; 3: 161 182 10
x15470:	mov [bp + 30], ax	; 3: 137 70 30

file_test$283:	; Call 10 strerror 14
x15473:	mov word [bp + 24], file_test$284	; 5: 199 70 24 127 60
x15478:	mov [bp + 26], bp	; 3: 137 110 26
x15481:	add bp, 24	; 3: 131 197 24
x15484:	jmp strerror	; 3: 233 144 246

file_test$284:	; PostCall 10

file_test$285:	; GetReturnValue £temporary5080

file_test$286:	; Parameter 10 £temporary5080 14
x15487:	mov [bp + 24], bx	; 3: 137 94 24

file_test$287:	; Call 10 printf 0
x15490:	mov word [bp + 10], file_test$288	; 5: 199 70 10 149 60
x15495:	mov [bp + 12], bp	; 3: 137 110 12
x15498:	add bp, 10	; 3: 131 197 10
x15501:	mov di, bp	; 2: 137 239
x15503:	add di, 8	; 3: 131 199 8
x15506:	jmp printf	; 3: 233 48 208

file_test$288:	; PostCall 10

file_test$289:	; Assign targetFile string_Z#
x15509:	mov word [bp + 6], string_Z#	; 5: 199 70 6 43 78

file_test$290:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$291:	; Parameter 8 targetFile 6
x15514:	mov ax, [bp + 6]	; 3: 139 70 6
x15517:	mov [bp + 14], ax	; 3: 137 70 14

file_test$292:	; Parameter 8 string_w# 8
x15520:	mov word [bp + 16], string_w#	; 5: 199 70 16 221 76

file_test$293:	; Call 8 fopen 0
x15525:	mov word [bp + 8], file_test$294	; 5: 199 70 8 179 60
x15530:	mov [bp + 10], bp	; 3: 137 110 10
x15533:	add bp, 8	; 3: 131 197 8
x15536:	jmp fopen	; 3: 233 81 20

file_test$294:	; PostCall 8

file_test$295:	; GetReturnValue £temporary5082

file_test$296:	; Assign filePtr £temporary5082
x15539:	mov [bp + 8], bx	; 3: 137 94 8

file_test$297:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$298:	; Parameter 10 filePtr 6
x15542:	mov ax, [bp + 8]	; 3: 139 70 8
x15545:	mov [bp + 16], ax	; 3: 137 70 16

file_test$299:	; Parameter 10 string_Hello20Z# 8
x15548:	mov word [bp + 18], string_Hello20Z#	; 5: 199 70 18 45 78

file_test$300:	; Call 10 fprintf 0
x15553:	mov word [bp + 10], file_test$301	; 5: 199 70 10 209 60
x15558:	mov [bp + 12], bp	; 3: 137 110 12
x15561:	add bp, 10	; 3: 131 197 10
x15564:	mov di, bp	; 2: 137 239
x15566:	jmp fprintf	; 3: 233 197 24

file_test$301:	; PostCall 10

file_test$302:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$303:	; Parameter 10 filePtr 6
x15569:	mov ax, [bp + 8]	; 3: 139 70 8
x15572:	mov [bp + 16], ax	; 3: 137 70 16

file_test$304:	; Call 10 fclose 0
x15575:	mov word [bp + 10], file_test$305	; 5: 199 70 10 229 60
x15580:	mov [bp + 12], bp	; 3: 137 110 12
x15583:	add bp, 10	; 3: 131 197 10
x15586:	jmp fclose	; 3: 233 169 43

file_test$305:	; PostCall 10

file_test$306:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$307:	; Parameter 10 targetFile 6
x15589:	mov ax, [bp + 6]	; 3: 139 70 6
x15592:	mov [bp + 16], ax	; 3: 137 70 16

file_test$308:	; Call 10 remove 0
x15595:	mov word [bp + 10], file_test$309	; 5: 199 70 10 249 60
x15600:	mov [bp + 12], bp	; 3: 137 110 12
x15603:	add bp, 10	; 3: 131 197 10
x15606:	jmp remove	; 3: 233 84 44

file_test$309:	; PostCall 10

file_test$310:	; GetReturnValue £temporary5085

file_test$311:	; NotEqual 318 £temporary5085 0
x15609:	cmp bx, 0	; 3: 131 251 0
x15612:	jne file_test$318	; 2: 117 32

file_test$312:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$313:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15614:	mov word [bp + 16], string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 53 78

file_test$314:	; Parameter 10 targetFile 8
x15619:	mov ax, [bp + 6]	; 3: 139 70 6
x15622:	mov [bp + 18], ax	; 3: 137 70 18

file_test$315:	; Call 10 printf 0
x15625:	mov word [bp + 10], file_test$316	; 5: 199 70 10 28 61
x15630:	mov [bp + 12], bp	; 3: 137 110 12
x15633:	add bp, 10	; 3: 131 197 10
x15636:	mov di, bp	; 2: 137 239
x15638:	add di, 2	; 3: 131 199 2
x15641:	jmp printf	; 3: 233 169 207

file_test$316:	; PostCall 10

file_test$317:	; Goto 330
x15644:	jmp file_test$330	; 2: 235 59

file_test$318:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 10 string_Error202225s222025i3A2025s2E0A# 6
x15646:	mov word [bp + 16], string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 16 206 77

file_test$320:	; Parameter 10 targetFile 8
x15651:	mov ax, [bp + 6]	; 3: 139 70 6
x15654:	mov [bp + 18], ax	; 3: 137 70 18

file_test$321:	; Parameter 10 errno 10
x15657:	mov ax, [errno]	; 3: 161 182 10
x15660:	mov [bp + 20], ax	; 3: 137 70 20

file_test$322:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$323:	; Parameter 10 errno 18
x15663:	mov ax, [errno]	; 3: 161 182 10
x15666:	mov [bp + 28], ax	; 3: 137 70 28

file_test$324:	; Call 10 strerror 12
x15669:	mov word [bp + 22], file_test$325	; 5: 199 70 22 67 61
x15674:	mov [bp + 24], bp	; 3: 137 110 24
x15677:	add bp, 22	; 3: 131 197 22
x15680:	jmp strerror	; 3: 233 204 245

file_test$325:	; PostCall 10

file_test$326:	; GetReturnValue £temporary5088

file_test$327:	; Parameter 10 £temporary5088 12
x15683:	mov [bp + 22], bx	; 3: 137 94 22

file_test$328:	; Call 10 printf 0
x15686:	mov word [bp + 10], file_test$329	; 5: 199 70 10 89 61
x15691:	mov [bp + 12], bp	; 3: 137 110 12
x15694:	add bp, 10	; 3: 131 197 10
x15697:	mov di, bp	; 2: 137 239
x15699:	add di, 6	; 3: 131 199 6
x15702:	jmp printf	; 3: 233 108 207

file_test$329:	; PostCall 10

file_test$330:	; Assign targetFile string_Z2#
x15705:	mov word [bp + 6], string_Z2#	; 5: 199 70 6 77 78

file_test$331:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$332:	; Parameter 8 targetFile 6
x15710:	mov ax, [bp + 6]	; 3: 139 70 6
x15713:	mov [bp + 14], ax	; 3: 137 70 14

file_test$333:	; Call 8 remove 0
x15716:	mov word [bp + 8], file_test$334	; 5: 199 70 8 114 61
x15721:	mov [bp + 10], bp	; 3: 137 110 10
x15724:	add bp, 8	; 3: 131 197 8
x15727:	jmp remove	; 3: 233 219 43

file_test$334:	; PostCall 8

file_test$335:	; GetReturnValue £temporary5090

file_test$336:	; NotEqual 343 £temporary5090 0
x15730:	cmp bx, 0	; 3: 131 251 0
x15733:	jne file_test$343	; 2: 117 32

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 string_2225s2220has20been20removed2E0A# 6
x15735:	mov word [bp + 14], string_2225s2220has20been20removed2E0A#	; 5: 199 70 14 53 78

file_test$339:	; Parameter 8 targetFile 8
x15740:	mov ax, [bp + 6]	; 3: 139 70 6
x15743:	mov [bp + 16], ax	; 3: 137 70 16

file_test$340:	; Call 8 printf 0
x15746:	mov word [bp + 8], file_test$341	; 5: 199 70 8 149 61
x15751:	mov [bp + 10], bp	; 3: 137 110 10
x15754:	add bp, 8	; 3: 131 197 8
x15757:	mov di, bp	; 2: 137 239
x15759:	add di, 2	; 3: 131 199 2
x15762:	jmp printf	; 3: 233 48 207

file_test$341:	; PostCall 8

file_test$342:	; Goto 355
x15765:	jmp file_test$355	; 2: 235 59

file_test$343:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$344:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15767:	mov word [bp + 14], string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 206 77

file_test$345:	; Parameter 8 targetFile 8
x15772:	mov ax, [bp + 6]	; 3: 139 70 6
x15775:	mov [bp + 16], ax	; 3: 137 70 16

file_test$346:	; Parameter 8 errno 10
x15778:	mov ax, [errno]	; 3: 161 182 10
x15781:	mov [bp + 18], ax	; 3: 137 70 18

file_test$347:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$348:	; Parameter 8 errno 18
x15784:	mov ax, [errno]	; 3: 161 182 10
x15787:	mov [bp + 26], ax	; 3: 137 70 26

file_test$349:	; Call 8 strerror 12
x15790:	mov word [bp + 20], file_test$350	; 5: 199 70 20 188 61
x15795:	mov [bp + 22], bp	; 3: 137 110 22
x15798:	add bp, 20	; 3: 131 197 20
x15801:	jmp strerror	; 3: 233 83 245

file_test$350:	; PostCall 8

file_test$351:	; GetReturnValue £temporary5093

file_test$352:	; Parameter 8 £temporary5093 12
x15804:	mov [bp + 20], bx	; 3: 137 94 20

file_test$353:	; Call 8 printf 0
x15807:	mov word [bp + 8], file_test$354	; 5: 199 70 8 210 61
x15812:	mov [bp + 10], bp	; 3: 137 110 10
x15815:	add bp, 8	; 3: 131 197 8
x15818:	mov di, bp	; 2: 137 239
x15820:	add di, 6	; 3: 131 199 6
x15823:	jmp printf	; 3: 233 243 206

file_test$354:	; PostCall 8

file_test$355:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$356:	; Parameter 6 string_PBook2Etxt# 6
x15826:	mov word [bp + 12], string_PBook2Etxt#	; 5: 199 70 12 80 78

file_test$357:	; Parameter 6 string_r# 8
x15831:	mov word [bp + 14], string_r#	; 5: 199 70 14 210 76

file_test$358:	; Call 6 fopen 0
x15836:	mov word [bp + 6], file_test$359	; 5: 199 70 6 234 61
x15841:	mov [bp + 8], bp	; 3: 137 110 8
x15844:	add bp, 6	; 3: 131 197 6
x15847:	jmp fopen	; 3: 233 26 19

file_test$359:	; PostCall 6

file_test$360:	; GetReturnValue £temporary5095

file_test$361:	; Assign inFilePtr £temporary5095
x15850:	mov [bp + 6], bx	; 3: 137 94 6

file_test$362:	; NotEqual 374 inFilePtr 0
x15853:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x15857:	jne file_test$374	; 2: 117 59

file_test$363:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$364:	; Parameter 8 stderr 6
x15859:	mov ax, [stderr]	; 3: 161 223 76
x15862:	mov [bp + 14], ax	; 3: 137 70 14

file_test$365:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x15865:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 225 76

file_test$366:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x15870:	mov word [bp + 18], string_inFilePtr20213D20NULL#	; 5: 199 70 18 15 77

file_test$367:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x15875:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 33 77

file_test$368:	; Parameter 8 119 14
x15880:	mov word [bp + 22], 119	; 5: 199 70 22 119 0

file_test$369:	; Call 8 fprintf 0
x15885:	mov word [bp + 8], file_test$370	; 5: 199 70 8 32 62
x15890:	mov [bp + 10], bp	; 3: 137 110 10
x15893:	add bp, 8	; 3: 131 197 8
x15896:	mov di, bp	; 2: 137 239
x15898:	add di, 6	; 3: 131 199 6
x15901:	jmp fprintf	; 3: 233 118 23

file_test$370:	; PostCall 8

file_test$371:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$372:	; Call 8 abort 0
x15904:	mov word [bp + 8], file_test$373	; 5: 199 70 8 46 62
x15909:	mov [bp + 10], bp	; 3: 137 110 10
x15912:	add bp, 8	; 3: 131 197 8
x15915:	jmp abort	; 3: 233 163 23

file_test$373:	; PostCall 8

file_test$374:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x15918:	mov word [bp + 14], string_0A252D24s20252D24s0A#	; 5: 199 70 14 90 78

file_test$376:	; Parameter 8 string_Name# 8
x15923:	mov word [bp + 16], string_Name#	; 5: 199 70 16 104 78

file_test$377:	; Parameter 8 string_Phone# 10
x15928:	mov word [bp + 18], string_Phone#	; 5: 199 70 18 109 78

file_test$378:	; Call 8 printf 0
x15933:	mov word [bp + 8], file_test$379	; 5: 199 70 8 80 62
x15938:	mov [bp + 10], bp	; 3: 137 110 10
x15941:	add bp, 8	; 3: 131 197 8
x15944:	mov di, bp	; 2: 137 239
x15946:	add di, 4	; 3: 131 199 4
x15949:	jmp printf	; 3: 233 117 206

file_test$379:	; PostCall 8

file_test$380:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$381:	; Parameter 8 string_252D24s20252D24s0A# 6
x15952:	mov word [bp + 14], string_252D24s20252D24s0A#	; 5: 199 70 14 115 78

file_test$382:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x15957:	mov word [bp + 16], string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 128 78

file_test$383:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x15962:	mov word [bp + 18], string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 128 78

file_test$384:	; Call 8 printf 0
x15967:	mov word [bp + 8], file_test$385	; 5: 199 70 8 114 62
x15972:	mov [bp + 10], bp	; 3: 137 110 10
x15975:	add bp, 8	; 3: 131 197 8
x15978:	mov di, bp	; 2: 137 239
x15980:	add di, 4	; 3: 131 199 4
x15983:	jmp printf	; 3: 233 83 206

file_test$385:	; PostCall 8

file_test$386:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$387:	; Parameter 12 inFilePtr 6
x15986:	mov ax, [bp + 6]	; 3: 139 70 6
x15989:	mov [bp + 18], ax	; 3: 137 70 18

file_test$388:	; Parameter 12 string_25i# 8
x15992:	mov word [bp + 20], string_25i#	; 5: 199 70 20 144 77

file_test$389:	; address £temporary5102 size
x15997:	mov si, bp	; 2: 137 238
x15999:	add si, 10	; 3: 131 198 10

file_test$390:	; Parameter 12 £temporary5102 10
x16002:	mov [bp + 22], si	; 3: 137 118 22

file_test$391:	; Call 12 fscanf 0
x16005:	mov word [bp + 12], file_test$392	; 5: 199 70 12 152 62
x16010:	mov [bp + 14], bp	; 3: 137 110 14
x16013:	add bp, 12	; 3: 131 197 12
x16016:	mov di, bp	; 2: 137 239
x16018:	add di, 2	; 3: 131 199 2
x16021:	jmp fscanf	; 3: 233 223 23

file_test$392:	; PostCall 12

file_test$393:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$394:	; Parameter 12 string_size2025i0A# 6
x16024:	mov word [bp + 18], string_size2025i0A#	; 5: 199 70 18 147 77

file_test$395:	; Parameter 12 size 8
x16029:	mov ax, [bp + 10]	; 3: 139 70 10
x16032:	mov [bp + 20], ax	; 3: 137 70 20

file_test$396:	; Call 12 printf 0
x16035:	mov word [bp + 12], file_test$397	; 5: 199 70 12 182 62
x16040:	mov [bp + 14], bp	; 3: 137 110 14
x16043:	add bp, 12	; 3: 131 197 12
x16046:	mov di, bp	; 2: 137 239
x16048:	add di, 2	; 3: 131 199 2
x16051:	jmp printf	; 3: 233 15 206

file_test$397:	; PostCall 12

file_test$398:	; Assign count 0
x16054:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$399:	; SignedGreaterThanEqual 415 count size
x16059:	mov ax, [bp + 10]	; 3: 139 70 10
x16062:	cmp [bp + 8], ax	; 3: 57 70 8
x16065:	jge file_test$415	; 2: 125 87

file_test$400:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$401:	; Parameter 52 inFilePtr 6
x16067:	mov ax, [bp + 6]	; 3: 139 70 6
x16070:	mov [bp + 58], ax	; 3: 137 70 58

file_test$402:	; Parameter 52 string_25s25s# 8
x16073:	mov word [bp + 60], string_25s25s#	; 5: 199 70 60 153 78

file_test$403:	; Parameter 52 name 10
x16078:	mov [bp + 62], bp	; 3: 137 110 62
x16081:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$404:	; Parameter 52 phone 12
x16085:	mov [bp + 64], bp	; 3: 137 110 64
x16088:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$405:	; Call 52 fscanf 0
x16092:	mov word [bp + 52], file_test$406	; 5: 199 70 52 239 62
x16097:	mov [bp + 54], bp	; 3: 137 110 54
x16100:	add bp, 52	; 3: 131 197 52
x16103:	mov di, bp	; 2: 137 239
x16105:	add di, 4	; 3: 131 199 4
x16108:	jmp fscanf	; 3: 233 136 23

file_test$406:	; PostCall 52

file_test$407:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; Parameter 52 string_252D24s20252D24s0A# 6
x16111:	mov word [bp + 58], string_252D24s20252D24s0A#	; 5: 199 70 58 115 78

file_test$409:	; Parameter 52 name 8
x16116:	mov [bp + 60], bp	; 3: 137 110 60
x16119:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$410:	; Parameter 52 phone 10
x16123:	mov [bp + 62], bp	; 3: 137 110 62
x16126:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$411:	; Call 52 printf 0
x16130:	mov word [bp + 52], file_test$412	; 5: 199 70 52 21 63
x16135:	mov [bp + 54], bp	; 3: 137 110 54
x16138:	add bp, 52	; 3: 131 197 52
x16141:	mov di, bp	; 2: 137 239
x16143:	add di, 4	; 3: 131 199 4
x16146:	jmp printf	; 3: 233 176 205

file_test$412:	; PostCall 52

file_test$413:	; Increment count
x16149:	inc word [bp + 8]	; 3: 255 70 8

file_test$414:	; Goto 399
x16152:	jmp file_test$399	; 2: 235 161

file_test$415:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 8 string_0A# 6
x16154:	mov word [bp + 14], string_0A#	; 5: 199 70 14 195 12

file_test$417:	; Call 8 printf 0
x16159:	mov word [bp + 8], file_test$418	; 5: 199 70 8 47 63
x16164:	mov [bp + 10], bp	; 3: 137 110 10
x16167:	add bp, 8	; 3: 131 197 8
x16170:	mov di, bp	; 2: 137 239
x16172:	jmp printf	; 3: 233 150 205

file_test$418:	; PostCall 8

file_test$419:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$420:	; Parameter 8 inFilePtr 6
x16175:	mov ax, [bp + 6]	; 3: 139 70 6
x16178:	mov [bp + 14], ax	; 3: 137 70 14

file_test$421:	; Call 8 fclose 0
x16181:	mov word [bp + 8], file_test$422	; 5: 199 70 8 67 63
x16186:	mov [bp + 10], bp	; 3: 137 110 10
x16189:	add bp, 8	; 3: 131 197 8
x16192:	jmp fclose	; 3: 233 75 41

file_test$422:	; PostCall 8

file_test$423:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$424:	; Parameter 6 string_TestX2Ebin# 6
x16195:	mov word [bp + 12], string_TestX2Ebin#	; 5: 199 70 12 158 78

file_test$425:	; Parameter 6 string_w# 8
x16200:	mov word [bp + 14], string_w#	; 5: 199 70 14 221 76

file_test$426:	; Call 6 fopen 0
x16205:	mov word [bp + 6], file_test$427	; 5: 199 70 6 91 63
x16210:	mov [bp + 8], bp	; 3: 137 110 8
x16213:	add bp, 6	; 3: 131 197 6
x16216:	jmp fopen	; 3: 233 169 17

file_test$427:	; PostCall 6

file_test$428:	; GetReturnValue £temporary5111

file_test$429:	; Assign outFilePtr £temporary5111
x16219:	mov [bp + 6], bx	; 3: 137 94 6

file_test$430:	; NotEqual 442 outFilePtr 0
x16222:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16226:	jne file_test$442	; 2: 117 59

file_test$431:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$432:	; Parameter 8 stderr 6
x16228:	mov ax, [stderr]	; 3: 161 223 76
x16231:	mov [bp + 14], ax	; 3: 137 70 14

file_test$433:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16234:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 225 76

file_test$434:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16239:	mov word [bp + 18], string_outFilePtr20213D20NULL#	; 5: 199 70 18 98 77

file_test$435:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16244:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 33 77

file_test$436:	; Parameter 8 171 14
x16249:	mov word [bp + 22], 171	; 5: 199 70 22 171 0

file_test$437:	; Call 8 fprintf 0
x16254:	mov word [bp + 8], file_test$438	; 5: 199 70 8 145 63
x16259:	mov [bp + 10], bp	; 3: 137 110 10
x16262:	add bp, 8	; 3: 131 197 8
x16265:	mov di, bp	; 2: 137 239
x16267:	add di, 6	; 3: 131 199 6
x16270:	jmp fprintf	; 3: 233 5 22

file_test$438:	; PostCall 8

file_test$439:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Call 8 abort 0
x16273:	mov word [bp + 8], file_test$441	; 5: 199 70 8 159 63
x16278:	mov [bp + 10], bp	; 3: 137 110 10
x16281:	add bp, 8	; 3: 131 197 8
x16284:	jmp abort	; 3: 233 50 22

file_test$441:	; PostCall 8

file_test$442:	; Assign size 10
x16287:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; address £temporary5116 size
x16292:	mov si, bp	; 2: 137 238
x16294:	add si, 8	; 3: 131 198 8

file_test$445:	; Parameter 12 £temporary5116 6
x16297:	mov [bp + 18], si	; 3: 137 118 18

file_test$446:	; Parameter 12 2 8
x16300:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$447:	; Parameter 12 1 10
x16305:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$448:	; Parameter 12 outFilePtr 12
x16310:	mov ax, [bp + 6]	; 3: 139 70 6
x16313:	mov [bp + 24], ax	; 3: 137 70 24

file_test$449:	; Call 12 fwrite 0
x16316:	mov word [bp + 12], file_test$450	; 5: 199 70 12 202 63
x16321:	mov [bp + 14], bp	; 3: 137 110 14
x16324:	add bp, 12	; 3: 131 197 12
x16327:	jmp fwrite	; 3: 233 224 41

file_test$450:	; PostCall 12

file_test$451:	; Assign index 0
x16330:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$452:	; SignedGreaterThanEqual 466 index size
x16335:	mov ax, [bp + 8]	; 3: 139 70 8
x16338:	cmp [bp + 10], ax	; 3: 57 70 10
x16341:	jge file_test$466	; 2: 125 61

file_test$453:	; SignedMultiply £temporary5120 index index
x16343:	mov ax, [bp + 10]	; 3: 139 70 10
x16346:	xor dx, dx	; 2: 49 210
x16348:	imul word [bp + 10]	; 3: 247 110 10

file_test$454:	; IntegralToFloating £temporary5121 £temporary5120
x16351:	mov [container2bytes#], ax	; 3: 163 16 27
x16354:	fild word [container2bytes#]	; 4: 223 6 16 27

file_test$455:	; PopFloat value
x16358:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$456:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$457:	; address £temporary5122 value
x16361:	mov si, bp	; 2: 137 238
x16363:	add si, 12	; 3: 131 198 12

file_test$458:	; Parameter 20 £temporary5122 6
x16366:	mov [bp + 26], si	; 3: 137 118 26

file_test$459:	; Parameter 20 8 8
x16369:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$460:	; Parameter 20 1 10
x16374:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$461:	; Parameter 20 outFilePtr 12
x16379:	mov ax, [bp + 6]	; 3: 139 70 6
x16382:	mov [bp + 32], ax	; 3: 137 70 32

file_test$462:	; Call 20 fwrite 0
x16385:	mov word [bp + 20], file_test$463	; 5: 199 70 20 15 64
x16390:	mov [bp + 22], bp	; 3: 137 110 22
x16393:	add bp, 20	; 3: 131 197 20
x16396:	jmp fwrite	; 3: 233 155 41

file_test$463:	; PostCall 20

file_test$464:	; Increment index
x16399:	inc word [bp + 10]	; 3: 255 70 10

file_test$465:	; Goto 452
x16402:	jmp file_test$452	; 2: 235 187

file_test$466:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$467:	; Parameter 12 outFilePtr 6
x16404:	mov ax, [bp + 6]	; 3: 139 70 6
x16407:	mov [bp + 18], ax	; 3: 137 70 18

file_test$468:	; Call 12 fclose 0
x16410:	mov word [bp + 12], file_test$469	; 5: 199 70 12 40 64
x16415:	mov [bp + 14], bp	; 3: 137 110 14
x16418:	add bp, 12	; 3: 131 197 12
x16421:	jmp fclose	; 3: 233 102 40

file_test$469:	; PostCall 12

file_test$470:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$471:	; Parameter 6 string_TestX2Ebin# 6
x16424:	mov word [bp + 12], string_TestX2Ebin#	; 5: 199 70 12 158 78

file_test$472:	; Parameter 6 string_r# 8
x16429:	mov word [bp + 14], string_r#	; 5: 199 70 14 210 76

file_test$473:	; Call 6 fopen 0
x16434:	mov word [bp + 6], file_test$474	; 5: 199 70 6 64 64
x16439:	mov [bp + 8], bp	; 3: 137 110 8
x16442:	add bp, 6	; 3: 131 197 6
x16445:	jmp fopen	; 3: 233 196 16

file_test$474:	; PostCall 6

file_test$475:	; GetReturnValue £temporary5125

file_test$476:	; Assign inFilePtr £temporary5125
x16448:	mov [bp + 6], bx	; 3: 137 94 6

file_test$477:	; NotEqual 489 inFilePtr 0
x16451:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16455:	jne file_test$489	; 2: 117 59

file_test$478:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$479:	; Parameter 12 stderr 6
x16457:	mov ax, [stderr]	; 3: 161 223 76
x16460:	mov [bp + 18], ax	; 3: 137 70 18

file_test$480:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16463:	mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 225 76

file_test$481:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16468:	mov word [bp + 22], string_inFilePtr20213D20NULL#	; 5: 199 70 22 15 77

file_test$482:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16473:	mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 33 77

file_test$483:	; Parameter 12 188 14
x16478:	mov word [bp + 26], 188	; 5: 199 70 26 188 0

file_test$484:	; Call 12 fprintf 0
x16483:	mov word [bp + 12], file_test$485	; 5: 199 70 12 118 64
x16488:	mov [bp + 14], bp	; 3: 137 110 14
x16491:	add bp, 12	; 3: 131 197 12
x16494:	mov di, bp	; 2: 137 239
x16496:	add di, 6	; 3: 131 199 6
x16499:	jmp fprintf	; 3: 233 32 21

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Call 12 abort 0
x16502:	mov word [bp + 12], file_test$488	; 5: 199 70 12 132 64
x16507:	mov [bp + 14], bp	; 3: 137 110 14
x16510:	add bp, 12	; 3: 131 197 12
x16513:	jmp abort	; 3: 233 77 21

file_test$488:	; PostCall 12

file_test$489:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$490:	; address £temporary5130 size
x16516:	mov si, bp	; 2: 137 238
x16518:	add si, 8	; 3: 131 198 8

file_test$491:	; Parameter 12 £temporary5130 6
x16521:	mov [bp + 18], si	; 3: 137 118 18

file_test$492:	; Parameter 12 2 8
x16524:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$493:	; Parameter 12 1 10
x16529:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$494:	; Parameter 12 inFilePtr 12
x16534:	mov ax, [bp + 6]	; 3: 139 70 6
x16537:	mov [bp + 24], ax	; 3: 137 70 24

file_test$495:	; Call 12 fread 0
x16540:	mov word [bp + 12], file_test$496	; 5: 199 70 12 170 64
x16545:	mov [bp + 14], bp	; 3: 137 110 14
x16548:	add bp, 12	; 3: 131 197 12
x16551:	jmp fread	; 3: 233 67 41

file_test$496:	; PostCall 12

file_test$497:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$498:	; Parameter 12 string_size13A2025i0A# 6
x16554:	mov word [bp + 18], string_size13A2025i0A#	; 5: 199 70 18 168 78

file_test$499:	; Parameter 12 size 8
x16559:	mov ax, [bp + 8]	; 3: 139 70 8
x16562:	mov [bp + 20], ax	; 3: 137 70 20

file_test$500:	; Call 12 printf 0
x16565:	mov word [bp + 12], file_test$501	; 5: 199 70 12 200 64
x16570:	mov [bp + 14], bp	; 3: 137 110 14
x16573:	add bp, 12	; 3: 131 197 12
x16576:	mov di, bp	; 2: 137 239
x16578:	add di, 2	; 3: 131 199 2
x16581:	jmp printf	; 3: 233 253 203

file_test$501:	; PostCall 12

file_test$502:	; Assign index 0
x16584:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$503:	; SignedGreaterThanEqual 521 index size
x16589:	mov ax, [bp + 8]	; 3: 139 70 8
x16592:	cmp [bp + 10], ax	; 3: 57 70 10
x16595:	jge file_test$521	; 2: 125 79

file_test$504:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$505:	; address £temporary5135 value
x16597:	mov si, bp	; 2: 137 238
x16599:	add si, 12	; 3: 131 198 12

file_test$506:	; Parameter 20 £temporary5135 6
x16602:	mov [bp + 26], si	; 3: 137 118 26

file_test$507:	; Parameter 20 8 8
x16605:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$508:	; Parameter 20 1 10
x16610:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$509:	; Parameter 20 inFilePtr 12
x16615:	mov ax, [bp + 6]	; 3: 139 70 6
x16618:	mov [bp + 32], ax	; 3: 137 70 32

file_test$510:	; Call 20 fread 0
x16621:	mov word [bp + 20], file_test$511	; 5: 199 70 20 251 64
x16626:	mov [bp + 22], bp	; 3: 137 110 22
x16629:	add bp, 20	; 3: 131 197 20
x16632:	jmp fread	; 3: 233 242 40

file_test$511:	; PostCall 20

file_test$512:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$513:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16635:	mov word [bp + 26], string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 179 78

file_test$514:	; Parameter 20 index 8
x16640:	mov ax, [bp + 10]	; 3: 139 70 10
x16643:	mov [bp + 28], ax	; 3: 137 70 28

file_test$515:	; PushFloat value
x16646:	fld qword [bp + 12]	; 3: 221 70 12

file_test$516:	; Parameter 20 value 10
x16649:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$517:	; Call 20 printf 0
x16652:	mov word [bp + 20], file_test$518	; 5: 199 70 20 31 65
x16657:	mov [bp + 22], bp	; 3: 137 110 22
x16660:	add bp, 20	; 3: 131 197 20
x16663:	mov di, bp	; 2: 137 239
x16665:	add di, 10	; 3: 131 199 10
x16668:	jmp printf	; 3: 233 166 203

file_test$518:	; PostCall 20

file_test$519:	; Increment index
x16671:	inc word [bp + 10]	; 3: 255 70 10

file_test$520:	; Goto 503
x16674:	jmp file_test$503	; 2: 235 169

file_test$521:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$522:	; Parameter 12 string_0A# 6
x16676:	mov word [bp + 18], string_0A#	; 5: 199 70 18 195 12

file_test$523:	; Call 12 printf 0
x16681:	mov word [bp + 12], file_test$524	; 5: 199 70 12 57 65
x16686:	mov [bp + 14], bp	; 3: 137 110 14
x16689:	add bp, 12	; 3: 131 197 12
x16692:	mov di, bp	; 2: 137 239
x16694:	jmp printf	; 3: 233 140 203

file_test$524:	; PostCall 12

file_test$525:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$526:	; Parameter 12 inFilePtr 6
x16697:	mov ax, [bp + 6]	; 3: 139 70 6
x16700:	mov [bp + 18], ax	; 3: 137 70 18

file_test$527:	; Call 12 fclose 0
x16703:	mov word [bp + 12], file_test$528	; 5: 199 70 12 77 65
x16708:	mov [bp + 14], bp	; 3: 137 110 14
x16711:	add bp, 12	; 3: 131 197 12
x16714:	jmp fclose	; 3: 233 65 39

file_test$528:	; PostCall 12

file_test$529:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$530:	; Parameter 6 string_TestY2Ebin# 6
x16717:	mov word [bp + 12], string_TestY2Ebin#	; 5: 199 70 12 201 78

file_test$531:	; Parameter 6 string_w# 8
x16722:	mov word [bp + 14], string_w#	; 5: 199 70 14 221 76

file_test$532:	; Call 6 fopen 0
x16727:	mov word [bp + 6], file_test$533	; 5: 199 70 6 101 65
x16732:	mov [bp + 8], bp	; 3: 137 110 8
x16735:	add bp, 6	; 3: 131 197 6
x16738:	jmp fopen	; 3: 233 159 15

file_test$533:	; PostCall 6

file_test$534:	; GetReturnValue £temporary5140

file_test$535:	; Assign outFilePtr £temporary5140
x16741:	mov [bp + 6], bx	; 3: 137 94 6

file_test$536:	; NotEqual 548 outFilePtr 0
x16744:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16748:	jne file_test$548	; 2: 117 59

file_test$537:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$538:	; Parameter 8 stderr 6
x16750:	mov ax, [stderr]	; 3: 161 223 76
x16753:	mov [bp + 14], ax	; 3: 137 70 14

file_test$539:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16756:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 225 76

file_test$540:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16761:	mov word [bp + 18], string_outFilePtr20213D20NULL#	; 5: 199 70 18 98 77

file_test$541:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16766:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 33 77

file_test$542:	; Parameter 8 203 14
x16771:	mov word [bp + 22], 203	; 5: 199 70 22 203 0

file_test$543:	; Call 8 fprintf 0
x16776:	mov word [bp + 8], file_test$544	; 5: 199 70 8 155 65
x16781:	mov [bp + 10], bp	; 3: 137 110 10
x16784:	add bp, 8	; 3: 131 197 8
x16787:	mov di, bp	; 2: 137 239
x16789:	add di, 6	; 3: 131 199 6
x16792:	jmp fprintf	; 3: 233 251 19

file_test$544:	; PostCall 8

file_test$545:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$546:	; Call 8 abort 0
x16795:	mov word [bp + 8], file_test$547	; 5: 199 70 8 169 65
x16800:	mov [bp + 10], bp	; 3: 137 110 10
x16803:	add bp, 8	; 3: 131 197 8
x16806:	jmp abort	; 3: 233 40 20

file_test$547:	; PostCall 8

file_test$548:	; Assign size 10
x16809:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$549:	; Assign index 0
x16814:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$550:	; SignedGreaterThanEqual 564 index size
x16819:	mov ax, [bp + 8]	; 3: 139 70 8
x16822:	cmp [bp + 10], ax	; 3: 57 70 10
x16825:	jge file_test$564	; 2: 125 61

file_test$551:	; SignedMultiply £temporary5147 index index
x16827:	mov ax, [bp + 10]	; 3: 139 70 10
x16830:	xor dx, dx	; 2: 49 210
x16832:	imul word [bp + 10]	; 3: 247 110 10

file_test$552:	; IntegralToFloating £temporary5148 £temporary5147
x16835:	mov [container2bytes#], ax	; 3: 163 16 27
x16838:	fild word [container2bytes#]	; 4: 223 6 16 27

file_test$553:	; PopFloat value
x16842:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$554:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; address £temporary5149 value
x16845:	mov si, bp	; 2: 137 238
x16847:	add si, 12	; 3: 131 198 12

file_test$556:	; Parameter 20 £temporary5149 6
x16850:	mov [bp + 26], si	; 3: 137 118 26

file_test$557:	; Parameter 20 8 8
x16853:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$558:	; Parameter 20 1 10
x16858:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$559:	; Parameter 20 outFilePtr 12
x16863:	mov ax, [bp + 6]	; 3: 139 70 6
x16866:	mov [bp + 32], ax	; 3: 137 70 32

file_test$560:	; Call 20 fwrite 0
x16869:	mov word [bp + 20], file_test$561	; 5: 199 70 20 243 65
x16874:	mov [bp + 22], bp	; 3: 137 110 22
x16877:	add bp, 20	; 3: 131 197 20
x16880:	jmp fwrite	; 3: 233 183 39

file_test$561:	; PostCall 20

file_test$562:	; Increment index
x16883:	inc word [bp + 10]	; 3: 255 70 10

file_test$563:	; Goto 550
x16886:	jmp file_test$550	; 2: 235 187

file_test$564:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$565:	; Parameter 12 outFilePtr 6
x16888:	mov ax, [bp + 6]	; 3: 139 70 6
x16891:	mov [bp + 18], ax	; 3: 137 70 18

file_test$566:	; Call 12 fclose 0
x16894:	mov word [bp + 12], file_test$567	; 5: 199 70 12 12 66
x16899:	mov [bp + 14], bp	; 3: 137 110 14
x16902:	add bp, 12	; 3: 131 197 12
x16905:	jmp fclose	; 3: 233 130 38

file_test$567:	; PostCall 12

file_test$568:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 6 string_TestY2Ebin# 6
x16908:	mov word [bp + 12], string_TestY2Ebin#	; 5: 199 70 12 201 78

file_test$570:	; Parameter 6 string_r# 8
x16913:	mov word [bp + 14], string_r#	; 5: 199 70 14 210 76

file_test$571:	; Call 6 fopen 0
x16918:	mov word [bp + 6], file_test$572	; 5: 199 70 6 36 66
x16923:	mov [bp + 8], bp	; 3: 137 110 8
x16926:	add bp, 6	; 3: 131 197 6
x16929:	jmp fopen	; 3: 233 224 14

file_test$572:	; PostCall 6

file_test$573:	; GetReturnValue £temporary5152

file_test$574:	; Assign inFilePtr £temporary5152
x16932:	mov [bp + 6], bx	; 3: 137 94 6

file_test$575:	; NotEqual 587 inFilePtr 0
x16935:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16939:	jne file_test$587	; 2: 117 59

file_test$576:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$577:	; Parameter 8 stderr 6
x16941:	mov ax, [stderr]	; 3: 161 223 76
x16944:	mov [bp + 14], ax	; 3: 137 70 14

file_test$578:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16947:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 225 76

file_test$579:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16952:	mov word [bp + 18], string_inFilePtr20213D20NULL#	; 5: 199 70 18 15 77

file_test$580:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16957:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 33 77

file_test$581:	; Parameter 8 217 14
x16962:	mov word [bp + 22], 217	; 5: 199 70 22 217 0

file_test$582:	; Call 8 fprintf 0
x16967:	mov word [bp + 8], file_test$583	; 5: 199 70 8 90 66
x16972:	mov [bp + 10], bp	; 3: 137 110 10
x16975:	add bp, 8	; 3: 131 197 8
x16978:	mov di, bp	; 2: 137 239
x16980:	add di, 6	; 3: 131 199 6
x16983:	jmp fprintf	; 3: 233 60 19

file_test$583:	; PostCall 8

file_test$584:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$585:	; Call 8 abort 0
x16986:	mov word [bp + 8], file_test$586	; 5: 199 70 8 104 66
x16991:	mov [bp + 10], bp	; 3: 137 110 10
x16994:	add bp, 8	; 3: 131 197 8
x16997:	jmp abort	; 3: 233 105 19

file_test$586:	; PostCall 8

file_test$587:	; Assign index 0
x17000:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$588:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$589:	; address £temporary5157 value
x17005:	mov si, bp	; 2: 137 238
x17007:	add si, 10	; 3: 131 198 10

file_test$590:	; Parameter 18 £temporary5157 6
x17010:	mov [bp + 24], si	; 3: 137 118 24

file_test$591:	; Parameter 18 8 8
x17013:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$592:	; Parameter 18 1 10
x17018:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$593:	; Parameter 18 inFilePtr 12
x17023:	mov ax, [bp + 6]	; 3: 139 70 6
x17026:	mov [bp + 30], ax	; 3: 137 70 30

file_test$594:	; Call 18 fread 0
x17029:	mov word [bp + 18], file_test$595	; 5: 199 70 18 147 66
x17034:	mov [bp + 20], bp	; 3: 137 110 20
x17037:	add bp, 18	; 3: 131 197 18
x17040:	jmp fread	; 3: 233 90 39

file_test$595:	; PostCall 18

file_test$596:	; GetReturnValue £temporary5158

file_test$597:	; SignedLessThanEqual 608 £temporary5158 0
x17043:	cmp bx, 0	; 3: 131 251 0
x17046:	jle file_test$608	; 2: 126 41

file_test$598:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$599:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x17048:	mov word [bp + 24], string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 211 78

file_test$600:	; Assign £temporary5160 index
x17053:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$601:	; Increment index
x17056:	inc word [bp + 8]	; 3: 255 70 8

file_test$602:	; Parameter 18 £temporary5160 8
x17059:	mov [bp + 26], ax	; 3: 137 70 26

file_test$603:	; PushFloat value
x17062:	fld qword [bp + 10]	; 3: 221 70 10

file_test$604:	; Parameter 18 value 10
x17065:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$605:	; Call 18 printf 0
x17068:	mov word [bp + 18], file_test$606	; 5: 199 70 18 191 66
x17073:	mov [bp + 20], bp	; 3: 137 110 20
x17076:	add bp, 18	; 3: 131 197 18
x17079:	mov di, bp	; 2: 137 239
x17081:	add di, 10	; 3: 131 199 10
x17084:	jmp printf	; 3: 233 6 202

file_test$606:	; PostCall 18

file_test$607:	; Goto 588
x17087:	jmp file_test$588	; 2: 235 172

file_test$608:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$609:	; Parameter 8 string_0A# 6
x17089:	mov word [bp + 14], string_0A#	; 5: 199 70 14 195 12

file_test$610:	; Call 8 printf 0
x17094:	mov word [bp + 8], file_test$611	; 5: 199 70 8 214 66
x17099:	mov [bp + 10], bp	; 3: 137 110 10
x17102:	add bp, 8	; 3: 131 197 8
x17105:	mov di, bp	; 2: 137 239
x17107:	jmp printf	; 3: 233 239 201

file_test$611:	; PostCall 8

file_test$612:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$613:	; Parameter 8 inFilePtr 6
x17110:	mov ax, [bp + 6]	; 3: 139 70 6
x17113:	mov [bp + 14], ax	; 3: 137 70 14

file_test$614:	; Call 8 fclose 0
x17116:	mov word [bp + 8], file_test$615	; 5: 199 70 8 234 66
x17121:	mov [bp + 10], bp	; 3: 137 110 10
x17124:	add bp, 8	; 3: 131 197 8
x17127:	jmp fclose	; 3: 233 164 37

file_test$615:	; PostCall 8

file_test$616:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$617:	; Parameter 6 string_TestY2Ebin# 6
x17130:	mov word [bp + 12], string_TestY2Ebin#	; 5: 199 70 12 201 78

file_test$618:	; Parameter 6 string_r# 8
x17135:	mov word [bp + 14], string_r#	; 5: 199 70 14 210 76

file_test$619:	; Call 6 fopen 0
x17140:	mov word [bp + 6], file_test$620	; 5: 199 70 6 2 67
x17145:	mov [bp + 8], bp	; 3: 137 110 8
x17148:	add bp, 6	; 3: 131 197 6
x17151:	jmp fopen	; 3: 233 2 14

file_test$620:	; PostCall 6

file_test$621:	; GetReturnValue £temporary5164

file_test$622:	; Assign inFilePtr £temporary5164
x17154:	mov [bp + 6], bx	; 3: 137 94 6

file_test$623:	; NotEqual 635 inFilePtr 0
x17157:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17161:	jne file_test$635	; 2: 117 59

file_test$624:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$625:	; Parameter 8 stderr 6
x17163:	mov ax, [stderr]	; 3: 161 223 76
x17166:	mov [bp + 14], ax	; 3: 137 70 14

file_test$626:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17169:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 225 76

file_test$627:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17174:	mov word [bp + 18], string_inFilePtr20213D20NULL#	; 5: 199 70 18 15 77

file_test$628:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17179:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 33 77

file_test$629:	; Parameter 8 232 14
x17184:	mov word [bp + 22], 232	; 5: 199 70 22 232 0

file_test$630:	; Call 8 fprintf 0
x17189:	mov word [bp + 8], file_test$631	; 5: 199 70 8 56 67
x17194:	mov [bp + 10], bp	; 3: 137 110 10
x17197:	add bp, 8	; 3: 131 197 8
x17200:	mov di, bp	; 2: 137 239
x17202:	add di, 6	; 3: 131 199 6
x17205:	jmp fprintf	; 3: 233 94 18

file_test$631:	; PostCall 8

file_test$632:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$633:	; Call 8 abort 0
x17208:	mov word [bp + 8], file_test$634	; 5: 199 70 8 70 67
x17213:	mov [bp + 10], bp	; 3: 137 110 10
x17216:	add bp, 8	; 3: 131 197 8
x17219:	jmp abort	; 3: 233 139 18

file_test$634:	; PostCall 8

file_test$635:	; Assign index 0
x17222:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$636:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$637:	; Parameter 10 inFilePtr 6
x17227:	mov ax, [bp + 6]	; 3: 139 70 6
x17230:	mov [bp + 16], ax	; 3: 137 70 16

file_test$638:	; Call 10 feof 0
x17233:	mov word [bp + 10], file_test$639	; 5: 199 70 10 95 67
x17238:	mov [bp + 12], bp	; 3: 137 110 12
x17241:	add bp, 10	; 3: 131 197 10
x17244:	jmp feof	; 3: 233 131 18

file_test$639:	; PostCall 10

file_test$640:	; GetReturnValue £temporary5169

file_test$641:	; NotEqual 660 £temporary5169 0
x17247:	cmp bx, 0	; 3: 131 251 0
x17250:	jne file_test$660	; 2: 117 79

file_test$642:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$643:	; address £temporary5172 value
x17252:	mov si, bp	; 2: 137 238
x17254:	add si, 10	; 3: 131 198 10

file_test$644:	; Parameter 18 £temporary5172 6
x17257:	mov [bp + 24], si	; 3: 137 118 24

file_test$645:	; Parameter 18 8 8
x17260:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$646:	; Parameter 18 1 10
x17265:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$647:	; Parameter 18 inFilePtr 12
x17270:	mov ax, [bp + 6]	; 3: 139 70 6
x17273:	mov [bp + 30], ax	; 3: 137 70 30

file_test$648:	; Call 18 fread 0
x17276:	mov word [bp + 18], file_test$649	; 5: 199 70 18 138 67
x17281:	mov [bp + 20], bp	; 3: 137 110 20
x17284:	add bp, 18	; 3: 131 197 18
x17287:	jmp fread	; 3: 233 99 38

file_test$649:	; PostCall 18

file_test$650:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$651:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x17290:	mov word [bp + 24], string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 233 78

file_test$652:	; Assign £temporary5174 index
x17295:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$653:	; Increment index
x17298:	inc word [bp + 8]	; 3: 255 70 8

file_test$654:	; Parameter 18 £temporary5174 8
x17301:	mov [bp + 26], ax	; 3: 137 70 26

file_test$655:	; PushFloat value
x17304:	fld qword [bp + 10]	; 3: 221 70 10

file_test$656:	; Parameter 18 value 10
x17307:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$657:	; Call 18 printf 0
x17310:	mov word [bp + 18], file_test$658	; 5: 199 70 18 177 67
x17315:	mov [bp + 20], bp	; 3: 137 110 20
x17318:	add bp, 18	; 3: 131 197 18
x17321:	mov di, bp	; 2: 137 239
x17323:	add di, 10	; 3: 131 199 10
x17326:	jmp printf	; 3: 233 20 201

file_test$658:	; PostCall 18

file_test$659:	; Goto 636
x17329:	jmp file_test$636	; 2: 235 152

file_test$660:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$661:	; Parameter 8 string_0A# 6
x17331:	mov word [bp + 14], string_0A#	; 5: 199 70 14 195 12

file_test$662:	; Call 8 printf 0
x17336:	mov word [bp + 8], file_test$663	; 5: 199 70 8 200 67
x17341:	mov [bp + 10], bp	; 3: 137 110 10
x17344:	add bp, 8	; 3: 131 197 8
x17347:	mov di, bp	; 2: 137 239
x17349:	jmp printf	; 3: 233 253 200

file_test$663:	; PostCall 8

file_test$664:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$665:	; Parameter 8 inFilePtr 6
x17352:	mov ax, [bp + 6]	; 3: 139 70 6
x17355:	mov [bp + 14], ax	; 3: 137 70 14

file_test$666:	; Call 8 fclose 0
x17358:	mov word [bp + 8], file_test$667	; 5: 199 70 8 220 67
x17363:	mov [bp + 10], bp	; 3: 137 110 10
x17366:	add bp, 8	; 3: 131 197 8
x17369:	jmp fclose	; 3: 233 178 36

file_test$667:	; PostCall 8

file_test$668:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$669:	; Parameter 6 string_TestX2Ebin# 6
x17372:	mov word [bp + 12], string_TestX2Ebin#	; 5: 199 70 12 158 78

file_test$670:	; Parameter 6 string_r# 8
x17377:	mov word [bp + 14], string_r#	; 5: 199 70 14 210 76

file_test$671:	; Call 6 fopen 0
x17382:	mov word [bp + 6], file_test$672	; 5: 199 70 6 244 67
x17387:	mov [bp + 8], bp	; 3: 137 110 8
x17390:	add bp, 6	; 3: 131 197 6
x17393:	jmp fopen	; 3: 233 16 13

file_test$672:	; PostCall 6

file_test$673:	; GetReturnValue £temporary5178

file_test$674:	; Assign inFilePtr £temporary5178
x17396:	mov [bp + 6], bx	; 3: 137 94 6

file_test$675:	; NotEqual 687 inFilePtr 0
x17399:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17403:	jne file_test$687	; 2: 117 59

file_test$676:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$677:	; Parameter 10 stderr 6
x17405:	mov ax, [stderr]	; 3: 161 223 76
x17408:	mov [bp + 16], ax	; 3: 137 70 16

file_test$678:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17411:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 225 76

file_test$679:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17416:	mov word [bp + 20], string_inFilePtr20213D20NULL#	; 5: 199 70 20 15 77

file_test$680:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17421:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 33 77

file_test$681:	; Parameter 10 250 14
x17426:	mov word [bp + 24], 250	; 5: 199 70 24 250 0

file_test$682:	; Call 10 fprintf 0
x17431:	mov word [bp + 10], file_test$683	; 5: 199 70 10 42 68
x17436:	mov [bp + 12], bp	; 3: 137 110 12
x17439:	add bp, 10	; 3: 131 197 10
x17442:	mov di, bp	; 2: 137 239
x17444:	add di, 6	; 3: 131 199 6
x17447:	jmp fprintf	; 3: 233 108 17

file_test$683:	; PostCall 10

file_test$684:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$685:	; Call 10 abort 0
x17450:	mov word [bp + 10], file_test$686	; 5: 199 70 10 56 68
x17455:	mov [bp + 12], bp	; 3: 137 110 12
x17458:	add bp, 10	; 3: 131 197 10
x17461:	jmp abort	; 3: 233 153 17

file_test$686:	; PostCall 10

file_test$687:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$688:	; address £temporary5183 size
x17464:	mov si, bp	; 2: 137 238
x17466:	add si, 8	; 3: 131 198 8

file_test$689:	; Parameter 10 £temporary5183 6
x17469:	mov [bp + 16], si	; 3: 137 118 16

file_test$690:	; Parameter 10 2 8
x17472:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$691:	; Parameter 10 1 10
x17477:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$692:	; Parameter 10 inFilePtr 12
x17482:	mov ax, [bp + 6]	; 3: 139 70 6
x17485:	mov [bp + 22], ax	; 3: 137 70 22

file_test$693:	; Call 10 fread 0
x17488:	mov word [bp + 10], file_test$694	; 5: 199 70 10 94 68
x17493:	mov [bp + 12], bp	; 3: 137 110 12
x17496:	add bp, 10	; 3: 131 197 10
x17499:	jmp fread	; 3: 233 143 37

file_test$694:	; PostCall 10

file_test$695:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$696:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17502:	mov word [bp + 16], string_size43A2025i20total2025i0A#	; 5: 199 70 16 255 78

file_test$697:	; Parameter 10 size 8
x17507:	mov ax, [bp + 8]	; 3: 139 70 8
x17510:	mov [bp + 18], ax	; 3: 137 70 18

file_test$698:	; SignedMultiply £temporary5185 size 8
x17513:	mov ax, [bp + 8]	; 3: 139 70 8
x17516:	xor dx, dx	; 2: 49 210
x17518:	imul word [int2$8#]	; 4: 247 46 19 79

file_test$699:	; Parameter 10 £temporary5185 10
x17522:	mov [bp + 20], ax	; 3: 137 70 20

file_test$700:	; Call 10 printf 0
x17525:	mov word [bp + 10], file_test$701	; 5: 199 70 10 136 68
x17530:	mov [bp + 12], bp	; 3: 137 110 12
x17533:	add bp, 10	; 3: 131 197 10
x17536:	mov di, bp	; 2: 137 239
x17538:	add di, 4	; 3: 131 199 4
x17541:	jmp printf	; 3: 233 61 200

file_test$701:	; PostCall 10

file_test$702:	; SignedMultiply total size 8
x17544:	mov ax, [bp + 8]	; 3: 139 70 8
x17547:	xor dx, dx	; 2: 49 210
x17549:	imul word [int2$8#]	; 4: 247 46 19 79
x17553:	mov [bp + 10], ax	; 3: 137 70 10

file_test$703:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$704:	; Parameter 14 total 6
x17556:	mov ax, [bp + 10]	; 3: 139 70 10
x17559:	mov [bp + 20], ax	; 3: 137 70 20

file_test$705:	; Call 14 malloc 0
x17562:	mov word [bp + 14], file_test$706	; 5: 199 70 14 168 68
x17567:	mov [bp + 16], bp	; 3: 137 110 16
x17570:	add bp, 14	; 3: 131 197 14
x17573:	jmp malloc	; 3: 233 136 37

file_test$706:	; PostCall 14

file_test$707:	; GetReturnValue £temporary5188

file_test$708:	; Assign p £temporary5188
x17576:	mov [bp + 14], bx	; 3: 137 94 14

file_test$709:	; UnsignedMultiply £temporary5189 size 8
x17579:	mov ax, [bp + 8]	; 3: 139 70 8
x17582:	xor dx, dx	; 2: 49 210
x17584:	mul word [int2$8#]	; 4: 247 38 19 79

file_test$710:	; BinaryAdd endPtr p £temporary5189
x17588:	mov bx, [bp + 14]	; 3: 139 94 14
x17591:	add bx, ax	; 2: 1 195
x17593:	mov [bp + 16], bx	; 3: 137 94 16

file_test$711:	; NotEqual 723 p 0
x17596:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17600:	jne file_test$723	; 2: 117 59

file_test$712:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$713:	; Parameter 18 stderr 6
x17602:	mov ax, [stderr]	; 3: 161 223 76
x17605:	mov [bp + 24], ax	; 3: 137 70 24

file_test$714:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17608:	mov word [bp + 26], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 225 76

file_test$715:	; Parameter 18 string_p20213D20NULL# 10
x17613:	mov word [bp + 28], string_p20213D20NULL#	; 5: 199 70 28 21 79

file_test$716:	; Parameter 18 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17618:	mov word [bp + 30], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 33 77

file_test$717:	; Parameter 18 257 14
x17623:	mov word [bp + 32], 257	; 5: 199 70 32 1 1

file_test$718:	; Call 18 fprintf 0
x17628:	mov word [bp + 18], file_test$719	; 5: 199 70 18 239 68
x17633:	mov [bp + 20], bp	; 3: 137 110 20
x17636:	add bp, 18	; 3: 131 197 18
x17639:	mov di, bp	; 2: 137 239
x17641:	add di, 6	; 3: 131 199 6
x17644:	jmp fprintf	; 3: 233 167 16

file_test$719:	; PostCall 18

file_test$720:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$721:	; Call 18 abort 0
x17647:	mov word [bp + 18], file_test$722	; 5: 199 70 18 253 68
x17652:	mov [bp + 20], bp	; 3: 137 110 20
x17655:	add bp, 18	; 3: 131 197 18
x17658:	jmp abort	; 3: 233 212 16

file_test$722:	; PostCall 18

file_test$723:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$724:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17661:	mov word [bp + 24], string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 31 79

file_test$725:	; Parameter 18 p 8
x17666:	mov ax, [bp + 14]	; 3: 139 70 14
x17669:	mov [bp + 26], ax	; 3: 137 70 26

file_test$726:	; Parameter 18 total 10
x17672:	mov ax, [bp + 10]	; 3: 139 70 10
x17675:	mov [bp + 28], ax	; 3: 137 70 28

file_test$727:	; Parameter 18 endPtr 12
x17678:	mov ax, [bp + 16]	; 3: 139 70 16
x17681:	mov [bp + 30], ax	; 3: 137 70 30

file_test$728:	; Call 18 printf 0
x17684:	mov word [bp + 18], file_test$729	; 5: 199 70 18 39 69
x17689:	mov [bp + 20], bp	; 3: 137 110 20
x17692:	add bp, 18	; 3: 131 197 18
x17695:	mov di, bp	; 2: 137 239
x17697:	add di, 6	; 3: 131 199 6
x17700:	jmp printf	; 3: 233 158 199

file_test$729:	; PostCall 18

file_test$730:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$731:	; Parameter 18 p 6
x17703:	mov ax, [bp + 14]	; 3: 139 70 14
x17706:	mov [bp + 24], ax	; 3: 137 70 24

file_test$732:	; Parameter 18 total 8
x17709:	mov ax, [bp + 10]	; 3: 139 70 10
x17712:	mov [bp + 26], ax	; 3: 137 70 26

file_test$733:	; Parameter 18 1 10
x17715:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$734:	; Parameter 18 inFilePtr 12
x17720:	mov ax, [bp + 6]	; 3: 139 70 6
x17723:	mov [bp + 30], ax	; 3: 137 70 30

file_test$735:	; Call 18 fread 0
x17726:	mov word [bp + 18], file_test$736	; 5: 199 70 18 76 69
x17731:	mov [bp + 20], bp	; 3: 137 110 20
x17734:	add bp, 18	; 3: 131 197 18
x17737:	jmp fread	; 3: 233 161 36

file_test$736:	; PostCall 18

file_test$737:	; Assign index 0
x17740:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$738:	; SignedGreaterThanEqual 751 index size
x17745:	mov ax, [bp + 8]	; 3: 139 70 8
x17748:	cmp [bp + 12], ax	; 3: 57 70 12
x17751:	jge file_test$751	; 2: 125 54

file_test$739:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$740:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x17753:	mov word [bp + 24], string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 50 79

file_test$741:	; Parameter 18 index 8
x17758:	mov ax, [bp + 12]	; 3: 139 70 12
x17761:	mov [bp + 26], ax	; 3: 137 70 26

file_test$742:	; UnsignedMultiply £temporary5200 index 8
x17764:	mov ax, [bp + 12]	; 3: 139 70 12
x17767:	xor dx, dx	; 2: 49 210
x17769:	mul word [int2$8#]	; 4: 247 38 19 79

file_test$743:	; BinaryAdd £temporary5201 p £temporary5200
x17773:	mov si, [bp + 14]	; 3: 139 118 14
x17776:	add si, ax	; 2: 1 198

file_test$744:	; Deref £temporary5199 -> £temporary5201 £temporary5201 0

file_test$745:	; PushFloat £temporary5199 -> £temporary5201
x17778:	fld qword [si]	; 2: 221 4

file_test$746:	; Parameter 18 £temporary5199 -> £temporary5201 10
x17780:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$747:	; Call 18 printf 0
x17783:	mov word [bp + 18], file_test$748	; 5: 199 70 18 138 69
x17788:	mov [bp + 20], bp	; 3: 137 110 20
x17791:	add bp, 18	; 3: 131 197 18
x17794:	mov di, bp	; 2: 137 239
x17796:	add di, 10	; 3: 131 199 10
x17799:	jmp printf	; 3: 233 59 199

file_test$748:	; PostCall 18

file_test$749:	; Increment index
x17802:	inc word [bp + 12]	; 3: 255 70 12

file_test$750:	; Goto 738
x17805:	jmp file_test$738	; 2: 235 194

file_test$751:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$752:	; Parameter 18 string_0A# 6
x17807:	mov word [bp + 24], string_0A#	; 5: 199 70 24 195 12

file_test$753:	; Call 18 printf 0
x17812:	mov word [bp + 18], file_test$754	; 5: 199 70 18 164 69
x17817:	mov [bp + 20], bp	; 3: 137 110 20
x17820:	add bp, 18	; 3: 131 197 18
x17823:	mov di, bp	; 2: 137 239
x17825:	jmp printf	; 3: 233 33 199

file_test$754:	; PostCall 18

file_test$755:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$756:	; Parameter 18 p 6
x17828:	mov ax, [bp + 14]	; 3: 139 70 14
x17831:	mov [bp + 24], ax	; 3: 137 70 24

file_test$757:	; Call 18 free 0
x17834:	mov word [bp + 18], file_test$758	; 5: 199 70 18 184 69
x17839:	mov [bp + 20], bp	; 3: 137 110 20
x17842:	add bp, 18	; 3: 131 197 18
x17845:	jmp free	; 3: 233 87 38

file_test$758:	; PostCall 18

file_test$759:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$760:	; Parameter 10 inFilePtr 6
x17848:	mov ax, [bp + 6]	; 3: 139 70 6
x17851:	mov [bp + 16], ax	; 3: 137 70 16

file_test$761:	; Call 10 fclose 0
x17854:	mov word [bp + 10], file_test$762	; 5: 199 70 10 204 69
x17859:	mov [bp + 12], bp	; 3: 137 110 12
x17862:	add bp, 10	; 3: 131 197 10
x17865:	jmp fclose	; 3: 233 194 34

file_test$762:	; PostCall 10

file_test$763:	; Assign personVector[0]$name[0] 65
x17868:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$764:	; Assign personVector[0]$name[1] 100
x17872:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$765:	; Assign personVector[0]$name[2] 97
x17876:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$766:	; Assign personVector[0]$name[3] 109
x17880:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$767:	; Assign personVector[0]$name[4] 32
x17884:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$768:	; Assign personVector[0]$name[5] 66
x17888:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$769:	; Assign personVector[0]$name[6] 101
x17892:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$770:	; Assign personVector[0]$name[7] 114
x17896:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$771:	; Assign personVector[0]$name[8] 116
x17900:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$772:	; Assign personVector[0]$name[9] 105
x17904:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$773:	; Assign personVector[0]$name[10] 108
x17908:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$774:	; Assign personVector[0]$name[11] 115
x17912:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$775:	; Assign personVector[0]$name[12] 115
x17916:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$776:	; Assign personVector[0]$name[13] 111
x17920:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$777:	; Assign personVector[0]$name[14] 110
x17924:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$778:	; Assign personVector[0]$name[15] 0
x17928:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$779:	; Assign personVector[0]$phone 12345
x17932:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$780:	; Assign personVector[1]$name[0] 66
x17937:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$781:	; Assign personVector[1]$name[1] 101
x17941:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$782:	; Assign personVector[1]$name[2] 114
x17945:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$783:	; Assign personVector[1]$name[3] 116
x17949:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$784:	; Assign personVector[1]$name[4] 105
x17953:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$785:	; Assign personVector[1]$name[5] 108
x17957:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$786:	; Assign personVector[1]$name[6] 32
x17961:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$787:	; Assign personVector[1]$name[7] 67
x17965:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$788:	; Assign personVector[1]$name[8] 101
x17969:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$789:	; Assign personVector[1]$name[9] 97
x17973:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$790:	; Assign personVector[1]$name[10] 115
x17977:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$791:	; Assign personVector[1]$name[11] 97
x17981:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$792:	; Assign personVector[1]$name[12] 114
x17985:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$793:	; Assign personVector[1]$name[13] 115
x17989:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$794:	; Assign personVector[1]$name[14] 115
x17993:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$795:	; Assign personVector[1]$name[15] 111
x17997:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$796:	; Assign personVector[1]$name[16] 110
x18001:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$797:	; Assign personVector[1]$name[17] 0
x18005:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$798:	; Assign personVector[1]$phone 23456
x18009:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$799:	; Assign personVector[2]$name[0] 67
x18014:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$800:	; Assign personVector[2]$name[1] 101
x18018:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$801:	; Assign personVector[2]$name[2] 97
x18022:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$802:	; Assign personVector[2]$name[3] 115
x18026:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$803:	; Assign personVector[2]$name[4] 97
x18030:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$804:	; Assign personVector[2]$name[5] 114
x18034:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$805:	; Assign personVector[2]$name[6] 32
x18038:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$806:	; Assign personVector[2]$name[7] 68
x18042:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$807:	; Assign personVector[2]$name[8] 97
x18046:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$808:	; Assign personVector[2]$name[9] 118
x18050:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$809:	; Assign personVector[2]$name[10] 105
x18054:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$810:	; Assign personVector[2]$name[11] 100
x18058:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$811:	; Assign personVector[2]$name[12] 115
x18062:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$812:	; Assign personVector[2]$name[13] 115
x18066:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$813:	; Assign personVector[2]$name[14] 111
x18070:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$814:	; Assign personVector[2]$name[15] 110
x18074:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$815:	; Assign personVector[2]$name[16] 0
x18078:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$816:	; Assign personVector[2]$phone 24567
x18082:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$817:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$818:	; Parameter 206 string_Block2Ebin# 6
x18088:	mov word [bp + 212], string_Block2Ebin#	; 6: 199 134 212 0 72 79

file_test$819:	; Parameter 206 string_w# 8
x18094:	mov word [bp + 214], string_w#	; 6: 199 134 214 0 221 76

file_test$820:	; Call 206 fopen 0
x18100:	mov word [bp + 206], file_test$821	; 6: 199 134 206 0 197 70
x18106:	mov [bp + 208], bp	; 4: 137 174 208 0
x18110:	add bp, 206	; 4: 129 197 206 0
x18114:	jmp fopen	; 3: 233 63 10

file_test$821:	; PostCall 206

file_test$822:	; GetReturnValue £temporary5266

file_test$823:	; Assign outFilePtr £temporary5266
x18117:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$824:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$825:	; Parameter 208 string_Block2Ebin# 6
x18121:	mov word [bp + 214], string_Block2Ebin#	; 6: 199 134 214 0 72 79

file_test$826:	; Parameter 208 string_r# 8
x18127:	mov word [bp + 216], string_r#	; 6: 199 134 216 0 210 76

file_test$827:	; Call 208 fopen 0
x18133:	mov word [bp + 208], file_test$828	; 6: 199 134 208 0 230 70
x18139:	mov [bp + 210], bp	; 4: 137 174 210 0
x18143:	add bp, 208	; 4: 129 197 208 0
x18147:	jmp fopen	; 3: 233 30 10

file_test$828:	; PostCall 208

file_test$829:	; GetReturnValue £temporary5267

file_test$830:	; Assign inFilePtr £temporary5267
x18150:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$831:	; NotEqual 843 outFilePtr 0
x18154:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x18159:	jne file_test$843	; 2: 117 70

file_test$832:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 210 stderr 6
x18161:	mov ax, [stderr]	; 3: 161 223 76
x18164:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$834:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18168:	mov word [bp + 218], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 225 76

file_test$835:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x18174:	mov word [bp + 220], string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 98 77

file_test$836:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18180:	mov word [bp + 222], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 33 77

file_test$837:	; Parameter 210 284 14
x18186:	mov word [bp + 224], 284	; 6: 199 134 224 0 28 1

file_test$838:	; Call 210 fprintf 0
x18192:	mov word [bp + 210], file_test$839	; 6: 199 134 210 0 38 71
x18198:	mov [bp + 212], bp	; 4: 137 174 212 0
x18202:	add bp, 210	; 4: 129 197 210 0
x18206:	mov di, bp	; 2: 137 239
x18208:	add di, 6	; 3: 131 199 6
x18211:	jmp fprintf	; 3: 233 112 14

file_test$839:	; PostCall 210

file_test$840:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Call 210 abort 0
x18214:	mov word [bp + 210], file_test$842	; 6: 199 134 210 0 55 71
x18220:	mov [bp + 212], bp	; 4: 137 174 212 0
x18224:	add bp, 210	; 4: 129 197 210 0
x18228:	jmp abort	; 3: 233 154 14

file_test$842:	; PostCall 210

file_test$843:	; NotEqual 855 inFilePtr 0
x18231:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x18236:	jne file_test$855	; 2: 117 70

file_test$844:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$845:	; Parameter 210 stderr 6
x18238:	mov ax, [stderr]	; 3: 161 223 76
x18241:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$846:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18245:	mov word [bp + 218], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 225 76

file_test$847:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x18251:	mov word [bp + 220], string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 15 77

file_test$848:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18257:	mov word [bp + 222], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 33 77

file_test$849:	; Parameter 210 285 14
x18263:	mov word [bp + 224], 285	; 6: 199 134 224 0 29 1

file_test$850:	; Call 210 fprintf 0
x18269:	mov word [bp + 210], file_test$851	; 6: 199 134 210 0 115 71
x18275:	mov [bp + 212], bp	; 4: 137 174 212 0
x18279:	add bp, 210	; 4: 129 197 210 0
x18283:	mov di, bp	; 2: 137 239
x18285:	add di, 6	; 3: 131 199 6
x18288:	jmp fprintf	; 3: 233 35 14

file_test$851:	; PostCall 210

file_test$852:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Call 210 abort 0
x18291:	mov word [bp + 210], file_test$854	; 6: 199 134 210 0 132 71
x18297:	mov [bp + 212], bp	; 4: 137 174 212 0
x18301:	add bp, 210	; 4: 129 197 210 0
x18305:	jmp abort	; 3: 233 77 14

file_test$854:	; PostCall 210

file_test$855:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$856:	; Parameter 210 personVector 6
x18308:	mov [bp + 216], bp	; 4: 137 174 216 0
x18312:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$857:	; Parameter 210 150 8
x18317:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$858:	; Parameter 210 1 10
x18323:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$859:	; Parameter 210 outFilePtr 12
x18329:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18333:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$860:	; Call 210 fwrite 0
x18337:	mov word [bp + 210], file_test$861	; 6: 199 134 210 0 178 71
x18343:	mov [bp + 212], bp	; 4: 137 174 212 0
x18347:	add bp, 210	; 4: 129 197 210 0
x18351:	jmp fwrite	; 3: 233 248 33

file_test$861:	; PostCall 210

file_test$862:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$863:	; Parameter 210 outFilePtr 6
x18354:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18358:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$864:	; Call 210 fclose 0
x18362:	mov word [bp + 210], file_test$865	; 6: 199 134 210 0 203 71
x18368:	mov [bp + 212], bp	; 4: 137 174 212 0
x18372:	add bp, 210	; 4: 129 197 210 0
x18376:	jmp fclose	; 3: 233 195 32

file_test$865:	; PostCall 210

file_test$866:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$867:	; Parameter 210 inFilePtr 6
x18379:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18383:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$868:	; Call 210 feof 0
x18387:	mov word [bp + 210], file_test$869	; 6: 199 134 210 0 228 71
x18393:	mov [bp + 212], bp	; 4: 137 174 212 0
x18397:	add bp, 210	; 4: 129 197 210 0
x18401:	jmp feof	; 3: 233 254 13

file_test$869:	; PostCall 210

file_test$870:	; GetReturnValue £temporary5278

file_test$871:	; NotEqual 891 £temporary5278 0
x18404:	cmp bx, 0	; 3: 131 251 0
x18407:	jne file_test$891	; 2: 117 124

file_test$872:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$873:	; address £temporary5281 person
x18409:	mov si, bp	; 2: 137 238
x18411:	add si, 156	; 4: 129 198 156 0

file_test$874:	; Parameter 210 £temporary5281 6
x18415:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$875:	; Parameter 210 50 8
x18419:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$876:	; Parameter 210 1 10
x18425:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$877:	; Parameter 210 inFilePtr 12
x18431:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18435:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$878:	; Call 210 fread 0
x18439:	mov word [bp + 210], file_test$879	; 6: 199 134 210 0 24 72
x18445:	mov [bp + 212], bp	; 4: 137 174 212 0
x18449:	add bp, 210	; 4: 129 197 210 0
x18453:	jmp fread	; 3: 233 213 33

file_test$879:	; PostCall 210

file_test$880:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$881:	; Parameter 210 string_Name20203A2025s0A# 6
x18456:	mov word [bp + 216], string_Name20203A2025s0A#	; 6: 199 134 216 0 82 79

file_test$882:	; Parameter 210 person$name 8
x18462:	mov [bp + 218], bp	; 4: 137 174 218 0
x18466:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$883:	; Call 210 printf 0
x18472:	mov word [bp + 210], file_test$884	; 6: 199 134 210 0 62 72
x18478:	mov [bp + 212], bp	; 4: 137 174 212 0
x18482:	add bp, 210	; 4: 129 197 210 0
x18486:	mov di, bp	; 2: 137 239
x18488:	add di, 2	; 3: 131 199 2
x18491:	jmp printf	; 3: 233 135 196

file_test$884:	; PostCall 210

file_test$885:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$886:	; Parameter 210 string_Phone203A2025d0A# 6
x18494:	mov word [bp + 216], string_Phone203A2025d0A#	; 6: 199 134 216 0 94 79

file_test$887:	; Parameter 210 person$phone 8
x18500:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18504:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$888:	; Call 210 printf 0
x18508:	mov word [bp + 210], file_test$889	; 6: 199 134 210 0 98 72
x18514:	mov [bp + 212], bp	; 4: 137 174 212 0
x18518:	add bp, 210	; 4: 129 197 210 0
x18522:	mov di, bp	; 2: 137 239
x18524:	add di, 2	; 3: 131 199 2
x18527:	jmp printf	; 3: 233 99 196

file_test$889:	; PostCall 210

file_test$890:	; Goto 866
x18530:	jmp file_test$866	; 3: 233 102 255

file_test$891:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 210 inFilePtr 6
x18533:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18537:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$893:	; Call 210 fclose 0
x18541:	mov word [bp + 210], file_test$894	; 6: 199 134 210 0 126 72
x18547:	mov [bp + 212], bp	; 4: 137 174 212 0
x18551:	add bp, 210	; 4: 129 197 210 0
x18555:	jmp fclose	; 3: 233 16 32

file_test$894:	; PostCall 210

file_test$895:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$896:	; Parameter 6 string_outx2Etxt# 6
x18558:	mov word [bp + 12], string_outx2Etxt#	; 5: 199 70 12 106 79

file_test$897:	; Parameter 6 string_r# 8
x18563:	mov word [bp + 14], string_r#	; 5: 199 70 14 210 76

file_test$898:	; Call 6 fopen 0
x18568:	mov word [bp + 6], file_test$899	; 5: 199 70 6 150 72
x18573:	mov [bp + 8], bp	; 3: 137 110 8
x18576:	add bp, 6	; 3: 131 197 6
x18579:	jmp fopen	; 3: 233 110 8

file_test$899:	; PostCall 6

file_test$900:	; GetReturnValue £temporary5288

file_test$901:	; Assign inFilePtr £temporary5288
x18582:	mov [bp + 6], bx	; 3: 137 94 6

file_test$902:	; NotEqual 914 inFilePtr 0
x18585:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18589:	jne file_test$914	; 2: 117 59

file_test$903:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$904:	; Parameter 12 stderr 6
x18591:	mov ax, [stderr]	; 3: 161 223 76
x18594:	mov [bp + 18], ax	; 3: 137 70 18

file_test$905:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18597:	mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 225 76

file_test$906:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x18602:	mov word [bp + 22], string_inFilePtr20213D20NULL#	; 5: 199 70 22 15 77

file_test$907:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18607:	mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 33 77

file_test$908:	; Parameter 12 302 14
x18612:	mov word [bp + 26], 302	; 5: 199 70 26 46 1

file_test$909:	; Call 12 fprintf 0
x18617:	mov word [bp + 12], file_test$910	; 5: 199 70 12 204 72
x18622:	mov [bp + 14], bp	; 3: 137 110 14
x18625:	add bp, 12	; 3: 131 197 12
x18628:	mov di, bp	; 2: 137 239
x18630:	add di, 6	; 3: 131 199 6
x18633:	jmp fprintf	; 3: 233 202 12

file_test$910:	; PostCall 12

file_test$911:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$912:	; Call 12 abort 0
x18636:	mov word [bp + 12], file_test$913	; 5: 199 70 12 218 72
x18641:	mov [bp + 14], bp	; 3: 137 110 14
x18644:	add bp, 12	; 3: 131 197 12
x18647:	jmp abort	; 3: 233 247 12

file_test$913:	; PostCall 12

file_test$914:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$915:	; Parameter 12 inFilePtr 6
x18650:	mov ax, [bp + 6]	; 3: 139 70 6
x18653:	mov [bp + 18], ax	; 3: 137 70 18

file_test$916:	; Parameter 12 0 8
x18656:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$917:	; Parameter 12 2 10
x18661:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

file_test$918:	; Call 12 fseek 0
x18666:	mov word [bp + 12], file_test$919	; 5: 199 70 12 248 72
x18671:	mov [bp + 14], bp	; 3: 137 110 14
x18674:	add bp, 12	; 3: 131 197 12
x18677:	jmp fseek	; 3: 233 249 11

file_test$919:	; PostCall 12

file_test$920:	; GetReturnValue £temporary5293

file_test$921:	; Assign size £temporary5293
x18680:	mov [bp + 12], bx	; 3: 137 94 12

file_test$922:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$923:	; Parameter 14 string_ftell2025i0A# 6
x18683:	mov word [bp + 20], string_ftell2025i0A#	; 5: 199 70 20 115 79

file_test$924:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$925:	; Parameter 14 inFilePtr 14
x18688:	mov ax, [bp + 6]	; 3: 139 70 6
x18691:	mov [bp + 28], ax	; 3: 137 70 28

file_test$926:	; Call 14 ftell 8
x18694:	mov word [bp + 22], file_test$927	; 5: 199 70 22 20 73
x18699:	mov [bp + 24], bp	; 3: 137 110 24
x18702:	add bp, 22	; 3: 131 197 22
x18705:	jmp ftell	; 3: 233 156 35

file_test$927:	; PostCall 14

file_test$928:	; GetReturnValue £temporary5294

file_test$929:	; Parameter 14 £temporary5294 8
x18708:	mov [bp + 22], bx	; 3: 137 94 22

file_test$930:	; Call 14 printf 0
x18711:	mov word [bp + 14], file_test$931	; 5: 199 70 14 42 73
x18716:	mov [bp + 16], bp	; 3: 137 110 16
x18719:	add bp, 14	; 3: 131 197 14
x18722:	mov di, bp	; 2: 137 239
x18724:	add di, 2	; 3: 131 199 2
x18727:	jmp printf	; 3: 233 155 195

file_test$931:	; PostCall 14

file_test$932:	; Assign index 0
x18730:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$933:	; SignedGreaterThanEqual 965 index size
x18735:	mov ax, [bp + 12]	; 3: 139 70 12
x18738:	cmp [bp + 10], ax	; 3: 57 70 10
x18741:	jge file_test$965	; 4: 15 141 154 0

file_test$934:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$935:	; Parameter 14 inFilePtr 6
x18745:	mov ax, [bp + 6]	; 3: 139 70 6
x18748:	mov [bp + 20], ax	; 3: 137 70 20

file_test$936:	; Call 14 fgetc 0
x18751:	mov word [bp + 14], file_test$937	; 5: 199 70 14 77 73
x18756:	mov [bp + 16], bp	; 3: 137 110 16
x18759:	add bp, 14	; 3: 131 197 14
x18762:	jmp fgetc	; 3: 233 140 35

file_test$937:	; PostCall 14

file_test$938:	; GetReturnValue £temporary5298

file_test$939:	; IntegralToIntegral £temporary5299 £temporary5298
x18765:	cmp bx, 0	; 3: 131 251 0
x18768:	jge file_test$940	; 2: 125 4
x18770:	neg bx	; 2: 247 219
x18772:	neg bl	; 2: 246 219

file_test$940:	; Assign c £temporary5299
x18774:	mov [bp + 14], bl	; 3: 136 94 14

file_test$941:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$942:	; Parameter 15 string_3C25c3E2025i2025i0A# 6
x18777:	mov word [bp + 21], string_3C25c3E2025i2025i0A#	; 5: 199 70 21 125 79

file_test$943:	; IntegralToIntegral £temporary5300 c
x18782:	mov al, [bp + 14]	; 3: 138 70 14
x18785:	and ax, 255	; 3: 37 255 0
x18788:	cmp al, 0	; 2: 60 0
x18790:	jge file_test$944	; 2: 125 4
x18792:	neg al	; 2: 246 216
x18794:	neg ax	; 2: 247 216

file_test$944:	; Parameter 15 £temporary5300 8
x18796:	mov [bp + 23], ax	; 3: 137 70 23

file_test$945:	; IntegralToIntegral £temporary5301 c
x18799:	mov al, [bp + 14]	; 3: 138 70 14
x18802:	and ax, 255	; 3: 37 255 0
x18805:	cmp al, 0	; 2: 60 0
x18807:	jge file_test$946	; 2: 125 4
x18809:	neg al	; 2: 246 216
x18811:	neg ax	; 2: 247 216

file_test$946:	; Parameter 15 £temporary5301 10
x18813:	mov [bp + 25], ax	; 3: 137 70 25

file_test$947:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$948:	; Parameter 15 inFilePtr 18
x18816:	mov ax, [bp + 6]	; 3: 139 70 6
x18819:	mov [bp + 33], ax	; 3: 137 70 33

file_test$949:	; Call 15 ftell 12
x18822:	mov word [bp + 27], file_test$950	; 5: 199 70 27 148 73
x18827:	mov [bp + 29], bp	; 3: 137 110 29
x18830:	add bp, 27	; 3: 131 197 27
x18833:	jmp ftell	; 3: 233 28 35

file_test$950:	; PostCall 15

file_test$951:	; GetReturnValue £temporary5302

file_test$952:	; Parameter 15 £temporary5302 12
x18836:	mov [bp + 27], bx	; 3: 137 94 27

file_test$953:	; Call 15 printf 0
x18839:	mov word [bp + 15], file_test$954	; 5: 199 70 15 170 73
x18844:	mov [bp + 17], bp	; 3: 137 110 17
x18847:	add bp, 15	; 3: 131 197 15
x18850:	mov di, bp	; 2: 137 239
x18852:	add di, 6	; 3: 131 199 6
x18855:	jmp printf	; 3: 233 27 195

file_test$954:	; PostCall 15

file_test$955:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$956:	; Parameter 15 inFilePtr 6
x18858:	mov ax, [bp + 6]	; 3: 139 70 6
x18861:	mov [bp + 21], ax	; 3: 137 70 21

file_test$957:	; BinarySubtract £temporary5304 size index
x18864:	mov ax, [bp + 12]	; 3: 139 70 12
x18867:	sub ax, [bp + 10]	; 3: 43 70 10

file_test$958:	; BinarySubtract £temporary5305 £temporary5304 1
x18870:	dec ax	; 1: 72

file_test$959:	; Parameter 15 £temporary5305 8
x18871:	mov [bp + 23], ax	; 3: 137 70 23

file_test$960:	; Parameter 15 0 10
x18874:	mov word [bp + 25], 0	; 5: 199 70 25 0 0

file_test$961:	; Call 15 fseek 0
x18879:	mov word [bp + 15], file_test$962	; 5: 199 70 15 205 73
x18884:	mov [bp + 17], bp	; 3: 137 110 17
x18887:	add bp, 15	; 3: 131 197 15
x18890:	jmp fseek	; 3: 233 36 11

file_test$962:	; PostCall 15

file_test$963:	; Increment index
x18893:	inc word [bp + 10]	; 3: 255 70 10

file_test$964:	; Goto 933
x18896:	jmp file_test$933	; 3: 233 92 255

file_test$965:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$966:	; Parameter 12 string_0A# 6
x18899:	mov word [bp + 18], string_0A#	; 5: 199 70 18 195 12

file_test$967:	; Call 12 printf 0
x18904:	mov word [bp + 12], file_test$968	; 5: 199 70 12 232 73
x18909:	mov [bp + 14], bp	; 3: 137 110 14
x18912:	add bp, 12	; 3: 131 197 12
x18915:	mov di, bp	; 2: 137 239
x18917:	jmp printf	; 3: 233 221 194

file_test$968:	; PostCall 12

file_test$969:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$970:	; Parameter 12 inFilePtr 6
x18920:	mov ax, [bp + 6]	; 3: 139 70 6
x18923:	mov [bp + 18], ax	; 3: 137 70 18

file_test$971:	; Call 12 fclose 0
x18926:	mov word [bp + 12], file_test$972	; 5: 199 70 12 252 73
x18931:	mov [bp + 14], bp	; 3: 137 110 14
x18934:	add bp, 12	; 3: 131 197 12
x18937:	jmp fclose	; 3: 233 146 30

file_test$972:	; PostCall 12

file_test$973:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$974:	; Parameter 6 string_fileexists2022X223A2025s0A# 6
x18940:	mov word [bp + 12], string_fileexists2022X223A2025s0A#	; 5: 199 70 12 137 79

file_test$975:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$976:	; Parameter 6 string_X# 14
x18945:	mov word [bp + 20], string_X#	; 5: 199 70 20 226 77

file_test$977:	; Call 6 fileexists 8
x18950:	mov word [bp + 14], file_test$978	; 5: 199 70 14 20 74
x18955:	mov [bp + 16], bp	; 3: 137 110 16
x18958:	add bp, 14	; 3: 131 197 14
x18961:	jmp fileexists	; 3: 233 40 11

file_test$978:	; PostCall 6

file_test$979:	; GetReturnValue £temporary5309

file_test$980:	; Equal 983 £temporary5309 0
x18964:	cmp bx, 0	; 3: 131 251 0
x18967:	je file_test$983	; 2: 116 5

file_test$981:	; Assign £temporary5314 string_Yes#
x18969:	mov ax, string_Yes#	; 3: 184 157 79

file_test$982:	; Goto 984
x18972:	jmp file_test$984	; 2: 235 3

file_test$983:	; Assign £temporary5314 string_No#
x18974:	mov ax, string_No#	; 3: 184 161 79

file_test$984:	; Parameter 6 £temporary5314 8
x18977:	mov [bp + 14], ax	; 3: 137 70 14

file_test$985:	; Call 6 printf 0
x18980:	mov word [bp + 6], file_test$986	; 5: 199 70 6 55 74
x18985:	mov [bp + 8], bp	; 3: 137 110 8
x18988:	add bp, 6	; 3: 131 197 6
x18991:	mov di, bp	; 2: 137 239
x18993:	add di, 2	; 3: 131 199 2
x18996:	jmp printf	; 3: 233 142 194

file_test$986:	; PostCall 6

file_test$987:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$988:	; Parameter 6 string_fileexists2022Y223A2025s0A# 6
x18999:	mov word [bp + 12], string_fileexists2022Y223A2025s0A#	; 5: 199 70 12 164 79

file_test$989:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$990:	; Parameter 6 string_Y# 14
x19004:	mov word [bp + 20], string_Y#	; 5: 199 70 20 181 77

file_test$991:	; Call 6 fileexists 8
x19009:	mov word [bp + 14], file_test$992	; 5: 199 70 14 79 74
x19014:	mov [bp + 16], bp	; 3: 137 110 16
x19017:	add bp, 14	; 3: 131 197 14
x19020:	jmp fileexists	; 3: 233 237 10

file_test$992:	; PostCall 6

file_test$993:	; GetReturnValue £temporary5316

file_test$994:	; Equal 997 £temporary5316 0
x19023:	cmp bx, 0	; 3: 131 251 0
x19026:	je file_test$997	; 2: 116 5

file_test$995:	; Assign £temporary5321 string_Yes#
x19028:	mov ax, string_Yes#	; 3: 184 157 79

file_test$996:	; Goto 998
x19031:	jmp file_test$998	; 2: 235 3

file_test$997:	; Assign £temporary5321 string_No#
x19033:	mov ax, string_No#	; 3: 184 161 79

file_test$998:	; Parameter 6 £temporary5321 8
x19036:	mov [bp + 14], ax	; 3: 137 70 14

file_test$999:	; Call 6 printf 0
x19039:	mov word [bp + 6], file_test$1000	; 5: 199 70 6 114 74
x19044:	mov [bp + 8], bp	; 3: 137 110 8
x19047:	add bp, 6	; 3: 131 197 6
x19050:	mov di, bp	; 2: 137 239
x19052:	add di, 2	; 3: 131 199 2
x19055:	jmp printf	; 3: 233 83 194

file_test$1000:	; PostCall 6

file_test$1001:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1002:	; Parameter 6 string_fileexists2022Main2Easm223A2025s0A# 6
x19058:	mov word [bp + 12], string_fileexists2022Main2Easm223A2025s0A#	; 5: 199 70 12 184 79

file_test$1003:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1004:	; Parameter 6 string_Main2Easm# 14
x19063:	mov word [bp + 20], string_Main2Easm#	; 5: 199 70 20 211 79

file_test$1005:	; Call 6 fileexists 8
x19068:	mov word [bp + 14], file_test$1006	; 5: 199 70 14 138 74
x19073:	mov [bp + 16], bp	; 3: 137 110 16
x19076:	add bp, 14	; 3: 131 197 14
x19079:	jmp fileexists	; 3: 233 178 10

file_test$1006:	; PostCall 6

file_test$1007:	; GetReturnValue £temporary5323

file_test$1008:	; Equal 1011 £temporary5323 0
x19082:	cmp bx, 0	; 3: 131 251 0
x19085:	je file_test$1011	; 2: 116 5

file_test$1009:	; Assign £temporary5328 string_Yes#
x19087:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1010:	; Goto 1012
x19090:	jmp file_test$1012	; 2: 235 3

file_test$1011:	; Assign £temporary5328 string_No#
x19092:	mov ax, string_No#	; 3: 184 161 79

file_test$1012:	; Parameter 6 £temporary5328 8
x19095:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1013:	; Call 6 printf 0
x19098:	mov word [bp + 6], file_test$1014	; 5: 199 70 6 173 74
x19103:	mov [bp + 8], bp	; 3: 137 110 8
x19106:	add bp, 6	; 3: 131 197 6
x19109:	mov di, bp	; 2: 137 239
x19111:	add di, 2	; 3: 131 199 2
x19114:	jmp printf	; 3: 233 24 194

file_test$1014:	; PostCall 6

file_test$1015:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1016:	; Parameter 6 string_fileexists2022MainX2Easm223A2025s0A# 6
x19117:	mov word [bp + 12], string_fileexists2022MainX2Easm223A2025s0A#	; 5: 199 70 12 220 79

file_test$1017:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1018:	; Parameter 6 string_MainX2Easm# 14
x19122:	mov word [bp + 20], string_MainX2Easm#	; 5: 199 70 20 248 79

file_test$1019:	; Call 6 fileexists 8
x19127:	mov word [bp + 14], file_test$1020	; 5: 199 70 14 197 74
x19132:	mov [bp + 16], bp	; 3: 137 110 16
x19135:	add bp, 14	; 3: 131 197 14
x19138:	jmp fileexists	; 3: 233 119 10

file_test$1020:	; PostCall 6

file_test$1021:	; GetReturnValue £temporary5330

file_test$1022:	; Equal 1025 £temporary5330 0
x19141:	cmp bx, 0	; 3: 131 251 0
x19144:	je file_test$1025	; 2: 116 5

file_test$1023:	; Assign £temporary5335 string_Yes#
x19146:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1024:	; Goto 1026
x19149:	jmp file_test$1026	; 2: 235 3

file_test$1025:	; Assign £temporary5335 string_No#
x19151:	mov ax, string_No#	; 3: 184 161 79

file_test$1026:	; Parameter 6 £temporary5335 8
x19154:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1027:	; Call 6 printf 0
x19157:	mov word [bp + 6], file_test$1028	; 5: 199 70 6 232 74
x19162:	mov [bp + 8], bp	; 3: 137 110 8
x19165:	add bp, 6	; 3: 131 197 6
x19168:	mov di, bp	; 2: 137 239
x19170:	add di, 2	; 3: 131 199 2
x19173:	jmp printf	; 3: 233 221 193

file_test$1028:	; PostCall 6

file_test$1029:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1030:	; Parameter 6 string_fileexists2022Main2Ec223A2025s0A# 6
x19176:	mov word [bp + 12], string_fileexists2022Main2Ec223A2025s0A#	; 5: 199 70 12 2 80

file_test$1031:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1032:	; Parameter 6 string_Main2Ec# 14
x19181:	mov word [bp + 20], string_Main2Ec#	; 5: 199 70 20 27 80

file_test$1033:	; Call 6 fileexists 8
x19186:	mov word [bp + 14], file_test$1034	; 5: 199 70 14 0 75
x19191:	mov [bp + 16], bp	; 3: 137 110 16
x19194:	add bp, 14	; 3: 131 197 14
x19197:	jmp fileexists	; 3: 233 60 10

file_test$1034:	; PostCall 6

file_test$1035:	; GetReturnValue £temporary5337

file_test$1036:	; Equal 1039 £temporary5337 0
x19200:	cmp bx, 0	; 3: 131 251 0
x19203:	je file_test$1039	; 2: 116 5

file_test$1037:	; Assign £temporary5342 string_Yes#
x19205:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1038:	; Goto 1040
x19208:	jmp file_test$1040	; 2: 235 3

file_test$1039:	; Assign £temporary5342 string_No#
x19210:	mov ax, string_No#	; 3: 184 161 79

file_test$1040:	; Parameter 6 £temporary5342 8
x19213:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1041:	; Call 6 printf 0
x19216:	mov word [bp + 6], file_test$1042	; 5: 199 70 6 35 75
x19221:	mov [bp + 8], bp	; 3: 137 110 8
x19224:	add bp, 6	; 3: 131 197 6
x19227:	mov di, bp	; 2: 137 239
x19229:	add di, 2	; 3: 131 199 2
x19232:	jmp printf	; 3: 233 162 193

file_test$1042:	; PostCall 6

file_test$1043:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1044:	; Parameter 6 string_fileexists2022MainX2Ec223A2025s0A# 6
x19235:	mov word [bp + 12], string_fileexists2022MainX2Ec223A2025s0A#	; 5: 199 70 12 34 80

file_test$1045:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1046:	; Parameter 6 string_MainX2Ec# 14
x19240:	mov word [bp + 20], string_MainX2Ec#	; 5: 199 70 20 60 80

file_test$1047:	; Call 6 fileexists 8
x19245:	mov word [bp + 14], file_test$1048	; 5: 199 70 14 59 75
x19250:	mov [bp + 16], bp	; 3: 137 110 16
x19253:	add bp, 14	; 3: 131 197 14
x19256:	jmp fileexists	; 3: 233 1 10

file_test$1048:	; PostCall 6

file_test$1049:	; GetReturnValue £temporary5344

file_test$1050:	; Equal 1053 £temporary5344 0
x19259:	cmp bx, 0	; 3: 131 251 0
x19262:	je file_test$1053	; 2: 116 5

file_test$1051:	; Assign £temporary5349 string_Yes#
x19264:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1052:	; Goto 1054
x19267:	jmp file_test$1054	; 2: 235 3

file_test$1053:	; Assign £temporary5349 string_No#
x19269:	mov ax, string_No#	; 3: 184 161 79

file_test$1054:	; Parameter 6 £temporary5349 8
x19272:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1055:	; Call 6 printf 0
x19275:	mov word [bp + 6], file_test$1056	; 5: 199 70 6 94 75
x19280:	mov [bp + 8], bp	; 3: 137 110 8
x19283:	add bp, 6	; 3: 131 197 6
x19286:	mov di, bp	; 2: 137 239
x19288:	add di, 2	; 3: 131 199 2
x19291:	jmp printf	; 3: 233 103 193

file_test$1056:	; PostCall 6

file_test$1057:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1058:	; Parameter 6 string_fileexists2022File2Ec223A2025s0A# 6
x19294:	mov word [bp + 12], string_fileexists2022File2Ec223A2025s0A#	; 5: 199 70 12 68 80

file_test$1059:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1060:	; Parameter 6 string_File2Ec# 14
x19299:	mov word [bp + 20], string_File2Ec#	; 5: 199 70 20 93 80

file_test$1061:	; Call 6 fileexists 8
x19304:	mov word [bp + 14], file_test$1062	; 5: 199 70 14 118 75
x19309:	mov [bp + 16], bp	; 3: 137 110 16
x19312:	add bp, 14	; 3: 131 197 14
x19315:	jmp fileexists	; 3: 233 198 9

file_test$1062:	; PostCall 6

file_test$1063:	; GetReturnValue £temporary5351

file_test$1064:	; Equal 1067 £temporary5351 0
x19318:	cmp bx, 0	; 3: 131 251 0
x19321:	je file_test$1067	; 2: 116 5

file_test$1065:	; Assign £temporary5356 string_Yes#
x19323:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1066:	; Goto 1068
x19326:	jmp file_test$1068	; 2: 235 3

file_test$1067:	; Assign £temporary5356 string_No#
x19328:	mov ax, string_No#	; 3: 184 161 79

file_test$1068:	; Parameter 6 £temporary5356 8
x19331:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1069:	; Call 6 printf 0
x19334:	mov word [bp + 6], file_test$1070	; 5: 199 70 6 153 75
x19339:	mov [bp + 8], bp	; 3: 137 110 8
x19342:	add bp, 6	; 3: 131 197 6
x19345:	mov di, bp	; 2: 137 239
x19347:	add di, 2	; 3: 131 199 2
x19350:	jmp printf	; 3: 233 44 193

file_test$1070:	; PostCall 6

file_test$1071:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1072:	; Parameter 6 string_fileexists2022File2Ex223A2025s0A# 6
x19353:	mov word [bp + 12], string_fileexists2022File2Ex223A2025s0A#	; 5: 199 70 12 100 80

file_test$1073:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1074:	; Parameter 6 string_File2Ex# 14
x19358:	mov word [bp + 20], string_File2Ex#	; 5: 199 70 20 125 80

file_test$1075:	; Call 6 fileexists 8
x19363:	mov word [bp + 14], file_test$1076	; 5: 199 70 14 177 75
x19368:	mov [bp + 16], bp	; 3: 137 110 16
x19371:	add bp, 14	; 3: 131 197 14
x19374:	jmp fileexists	; 3: 233 139 9

file_test$1076:	; PostCall 6

file_test$1077:	; GetReturnValue £temporary5358

file_test$1078:	; Equal 1081 £temporary5358 0
x19377:	cmp bx, 0	; 3: 131 251 0
x19380:	je file_test$1081	; 2: 116 5

file_test$1079:	; Assign £temporary5363 string_Yes#
x19382:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1080:	; Goto 1082
x19385:	jmp file_test$1082	; 2: 235 3

file_test$1081:	; Assign £temporary5363 string_No#
x19387:	mov ax, string_No#	; 3: 184 161 79

file_test$1082:	; Parameter 6 £temporary5363 8
x19390:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1083:	; Call 6 printf 0
x19393:	mov word [bp + 6], file_test$1084	; 5: 199 70 6 212 75
x19398:	mov [bp + 8], bp	; 3: 137 110 8
x19401:	add bp, 6	; 3: 131 197 6
x19404:	mov di, bp	; 2: 137 239
x19406:	add di, 2	; 3: 131 199 2
x19409:	jmp printf	; 3: 233 241 192

file_test$1084:	; PostCall 6

file_test$1085:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1086:	; Parameter 6 string_fileexists2022File2Eh223A2025s0A# 6
x19412:	mov word [bp + 12], string_fileexists2022File2Eh223A2025s0A#	; 5: 199 70 12 132 80

file_test$1087:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1088:	; Parameter 6 string_File2Eh# 14
x19417:	mov word [bp + 20], string_File2Eh#	; 5: 199 70 20 157 80

file_test$1089:	; Call 6 fileexists 8
x19422:	mov word [bp + 14], file_test$1090	; 5: 199 70 14 236 75
x19427:	mov [bp + 16], bp	; 3: 137 110 16
x19430:	add bp, 14	; 3: 131 197 14
x19433:	jmp fileexists	; 3: 233 80 9

file_test$1090:	; PostCall 6

file_test$1091:	; GetReturnValue £temporary5365

file_test$1092:	; Equal 1095 £temporary5365 0
x19436:	cmp bx, 0	; 3: 131 251 0
x19439:	je file_test$1095	; 2: 116 5

file_test$1093:	; Assign £temporary5370 string_Yes#
x19441:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1094:	; Goto 1096
x19444:	jmp file_test$1096	; 2: 235 3

file_test$1095:	; Assign £temporary5370 string_No#
x19446:	mov ax, string_No#	; 3: 184 161 79

file_test$1096:	; Parameter 6 £temporary5370 8
x19449:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1097:	; Call 6 printf 0
x19452:	mov word [bp + 6], file_test$1098	; 5: 199 70 6 15 76
x19457:	mov [bp + 8], bp	; 3: 137 110 8
x19460:	add bp, 6	; 3: 131 197 6
x19463:	mov di, bp	; 2: 137 239
x19465:	add di, 2	; 3: 131 199 2
x19468:	jmp printf	; 3: 233 182 192

file_test$1098:	; PostCall 6

file_test$1099:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1100:	; Parameter 6 string_fileexists2022File2Ey223A2025s0A# 6
x19471:	mov word [bp + 12], string_fileexists2022File2Ey223A2025s0A#	; 5: 199 70 12 164 80

file_test$1101:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1102:	; Parameter 6 string_File2Ey# 14
x19476:	mov word [bp + 20], string_File2Ey#	; 5: 199 70 20 189 80

file_test$1103:	; Call 6 fileexists 8
x19481:	mov word [bp + 14], file_test$1104	; 5: 199 70 14 39 76
x19486:	mov [bp + 16], bp	; 3: 137 110 16
x19489:	add bp, 14	; 3: 131 197 14
x19492:	jmp fileexists	; 3: 233 21 9

file_test$1104:	; PostCall 6

file_test$1105:	; GetReturnValue £temporary5372

file_test$1106:	; Equal 1109 £temporary5372 0
x19495:	cmp bx, 0	; 3: 131 251 0
x19498:	je file_test$1109	; 2: 116 5

file_test$1107:	; Assign £temporary5377 string_Yes#
x19500:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1108:	; Goto 1110
x19503:	jmp file_test$1110	; 2: 235 3

file_test$1109:	; Assign £temporary5377 string_No#
x19505:	mov ax, string_No#	; 3: 184 161 79

file_test$1110:	; Parameter 6 £temporary5377 8
x19508:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1111:	; Call 6 printf 0
x19511:	mov word [bp + 6], file_test$1112	; 5: 199 70 6 74 76
x19516:	mov [bp + 8], bp	; 3: 137 110 8
x19519:	add bp, 6	; 3: 131 197 6
x19522:	mov di, bp	; 2: 137 239
x19524:	add di, 2	; 3: 131 199 2
x19527:	jmp printf	; 3: 233 123 192

file_test$1112:	; PostCall 6

file_test$1113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1114:	; Parameter 6 string_fileexists2022File2Ep223A2025s0A# 6
x19530:	mov word [bp + 12], string_fileexists2022File2Ep223A2025s0A#	; 5: 199 70 12 196 80

file_test$1115:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1116:	; Parameter 6 string_File2Ep# 14
x19535:	mov word [bp + 20], string_File2Ep#	; 5: 199 70 20 221 80

file_test$1117:	; Call 6 fileexists 8
x19540:	mov word [bp + 14], file_test$1118	; 5: 199 70 14 98 76
x19545:	mov [bp + 16], bp	; 3: 137 110 16
x19548:	add bp, 14	; 3: 131 197 14
x19551:	jmp fileexists	; 3: 233 218 8

file_test$1118:	; PostCall 6

file_test$1119:	; GetReturnValue £temporary5379

file_test$1120:	; Equal 1123 £temporary5379 0
x19554:	cmp bx, 0	; 3: 131 251 0
x19557:	je file_test$1123	; 2: 116 5

file_test$1121:	; Assign £temporary5384 string_Yes#
x19559:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1122:	; Goto 1124
x19562:	jmp file_test$1124	; 2: 235 3

file_test$1123:	; Assign £temporary5384 string_No#
x19564:	mov ax, string_No#	; 3: 184 161 79

file_test$1124:	; Parameter 6 £temporary5384 8
x19567:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1125:	; Call 6 printf 0
x19570:	mov word [bp + 6], file_test$1126	; 5: 199 70 6 133 76
x19575:	mov [bp + 8], bp	; 3: 137 110 8
x19578:	add bp, 6	; 3: 131 197 6
x19581:	mov di, bp	; 2: 137 239
x19583:	add di, 2	; 3: 131 199 2
x19586:	jmp printf	; 3: 233 64 192

file_test$1126:	; PostCall 6

file_test$1127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1128:	; Parameter 6 string_fileexists2022File2Ez223A2025s0A# 6
x19589:	mov word [bp + 12], string_fileexists2022File2Ez223A2025s0A#	; 5: 199 70 12 228 80

file_test$1129:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1130:	; Parameter 6 string_File2Ez# 14
x19594:	mov word [bp + 20], string_File2Ez#	; 5: 199 70 20 253 80

file_test$1131:	; Call 6 fileexists 8
x19599:	mov word [bp + 14], file_test$1132	; 5: 199 70 14 157 76
x19604:	mov [bp + 16], bp	; 3: 137 110 16
x19607:	add bp, 14	; 3: 131 197 14
x19610:	jmp fileexists	; 3: 233 159 8

file_test$1132:	; PostCall 6

file_test$1133:	; GetReturnValue £temporary5386

file_test$1134:	; Equal 1137 £temporary5386 0
x19613:	cmp bx, 0	; 3: 131 251 0
x19616:	je file_test$1137	; 2: 116 5

file_test$1135:	; Assign £temporary5391 string_Yes#
x19618:	mov ax, string_Yes#	; 3: 184 157 79

file_test$1136:	; Goto 1138
x19621:	jmp file_test$1138	; 2: 235 3

file_test$1137:	; Assign £temporary5391 string_No#
x19623:	mov ax, string_No#	; 3: 184 161 79

file_test$1138:	; Parameter 6 £temporary5391 8
x19626:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1139:	; Call 6 printf 0
x19629:	mov word [bp + 6], file_test$1140	; 5: 199 70 6 192 76
x19634:	mov [bp + 8], bp	; 3: 137 110 8
x19637:	add bp, 6	; 3: 131 197 6
x19640:	mov di, bp	; 2: 137 239
x19642:	add di, 2	; 3: 131 199 2
x19645:	jmp printf	; 3: 233 5 192

file_test$1140:	; PostCall 6

file_test$1141:	; Return 0
x19648:	mov ax, [bp]	; 3: 139 70 0
x19651:	mov di, [bp + 4]	; 3: 139 126 4
x19654:	mov bp, [bp + 2]	; 3: 139 110 2
x19657:	jmp ax	; 2: 255 224

file_test$1142:	; FunctionEnd file_test

string_in2Etxt#:
x19659:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

string_r#:
x19666:	db "r", 0	; 2: 114 0

string_outX2Etxt#:
x19668:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

string_w#:
x19677:	db "w", 0	; 2: 119 0

stderr:
x19679:	dw g_fileArray + 58	; 2: 97 13

string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19681:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

string_inFilePtr20213D20NULL#:
x19727:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x19745:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

string_outFilePtr20213D20NULL#:
x19810:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

string_25lf#:
x19829:	db "%lf", 0	; 4: 37 108 102 0

string_X12025f0A#:
x19833:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

string_X22025f0A#:
x19840:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

string_outY2Etxt#:
x19847:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

string_25i#:
x19856:	db "%i", 0	; 3: 37 105 0

string_size2025i0A#:
x19859:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

string_Y20size2025i0A#:
x19868:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

string_Y12025f0A#:
x19879:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

string_Y22025f0A#:
x19886:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

string_Y#:
x19893:	db "Y", 0	; 2: 89 0

string_2225s2220has20been20removed0A#:
x19895:	db 34, "%s", 34, " has been removed", 10, 0	; 23: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 10 0

string_Error202225s222025i3A2025s2E0A#:
x19918:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

string_X#:
x19938:	db "X", 0	; 2: 88 0

string_Hello20X#:
x19940:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

string_2225s2220has20been20renamed20to202225s222E0A#:
x19948:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

string_Error202225s22202225s222025i3A2025s2E0A#:
x19980:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

string_X2#:
x20005:	db "X2", 0	; 3: 88 50 0

string_Y2#:
x20008:	db "Y2", 0	; 3: 89 50 0

string_Z#:
x20011:	db "Z", 0	; 2: 90 0

string_Hello20Z#:
x20013:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

string_2225s2220has20been20removed2E0A#:
x20021:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

string_Z2#:
x20045:	db "Z2", 0	; 3: 90 50 0

string_PBook2Etxt#:
x20048:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

string_0A252D24s20252D24s0A#:
x20058:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

string_Name#:
x20072:	db "Name", 0	; 5: 78 97 109 101 0

string_Phone#:
x20077:	db "Phone", 0	; 6: 80 104 111 110 101 0

string_252D24s20252D24s0A#:
x20083:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20096:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

string_25s25s#:
x20121:	db "%s%s", 0	; 5: 37 115 37 115 0

string_TestX2Ebin#:
x20126:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

string_size13A2025i0A#:
x20136:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

string_index13A2025i3A20value2025f0A#:
x20147:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

string_TestY2Ebin#:
x20169:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

string_index23A2025i3A20value2025f0A#:
x20179:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

string_index33A2025i3A20value2025f0A#:
x20201:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

string_size43A2025i20total2025i0A#:
x20223:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

int2$8#:
x20243:	dw 8	; 2: 8 0

string_p20213D20NULL#:
x20245:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

string_malloc43A2025u2025u2025u0A#:
x20255:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

string_index43A2025i3A20value2025f0A#:
x20274:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

string_Block2Ebin#:
x20296:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

string_Name20203A2025s0A#:
x20306:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

string_Phone203A2025d0A#:
x20318:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

string_outx2Etxt#:
x20330:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

string_ftell2025i0A#:
x20339:	db "ftell %i", 10, 0	; 10: 102 116 101 108 108 32 37 105 10 0

string_3C25c3E2025i2025i0A#:
x20349:	db "<%c> %i %i", 10, 0	; 12: 60 37 99 62 32 37 105 32 37 105 10 0

string_fileexists2022X223A2025s0A#:
x20361:	db "fileexists ", 34, "X", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 88 34 58 32 37 115 10 0

string_Yes#:
x20381:	db "Yes", 0	; 4: 89 101 115 0

string_No#:
x20385:	db "No", 0	; 3: 78 111 0

string_fileexists2022Y223A2025s0A#:
x20388:	db "fileexists ", 34, "Y", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 89 34 58 32 37 115 10 0

string_fileexists2022Main2Easm223A2025s0A#:
x20408:	db "fileexists ", 34, "Main.asm", 34, ": %s", 10, 0	; 27: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 97 115 109 34 58 32 37 115 10 0

string_Main2Easm#:
x20435:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

string_fileexists2022MainX2Easm223A2025s0A#:
x20444:	db "fileexists ", 34, "MainX.asm", 34, ": %s", 10, 0	; 28: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 97 115 109 34 58 32 37 115 10 0

string_MainX2Easm#:
x20472:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

string_fileexists2022Main2Ec223A2025s0A#:
x20482:	db "fileexists ", 34, "Main.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 99 34 58 32 37 115 10 0

string_Main2Ec#:
x20507:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

string_fileexists2022MainX2Ec223A2025s0A#:
x20514:	db "fileexists ", 34, "MainX.c", 34, ": %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 99 34 58 32 37 115 10 0

string_MainX2Ec#:
x20540:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

string_fileexists2022File2Ec223A2025s0A#:
x20548:	db "fileexists ", 34, "File.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 99 34 58 32 37 115 10 0

string_File2Ec#:
x20573:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

string_fileexists2022File2Ex223A2025s0A#:
x20580:	db "fileexists ", 34, "File.x", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 120 34 58 32 37 115 10 0

string_File2Ex#:
x20605:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

string_fileexists2022File2Eh223A2025s0A#:
x20612:	db "fileexists ", 34, "File.h", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 104 34 58 32 37 115 10 0

string_File2Eh#:
x20637:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

string_fileexists2022File2Ey223A2025s0A#:
x20644:	db "fileexists ", 34, "File.y", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 121 34 58 32 37 115 10 0

string_File2Ey#:
x20669:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

string_fileexists2022File2Ep223A2025s0A#:
x20676:	db "fileexists ", 34, "File.p", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 112 34 58 32 37 115 10 0

string_File2Ep#:
x20701:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

string_fileexists2022File2Ez223A2025s0A#:
x20708:	db "fileexists ", 34, "File.z", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 122 34 58 32 37 115 10 0

string_File2Ez#:
x20733:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

fopen:	; Assign index 0
x20740:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x20745:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x20749:	jge fopen$21	; 2: 125 78

fopen$2:	; UnsignedMultiply £temporary889 index 29
x20751:	mov ax, [bp + 10]	; 3: 139 70 10
x20754:	xor dx, dx	; 2: 49 210
x20756:	mul word [int2$29#]	; 4: 247 38 107 81

fopen$3:	; BinaryAdd £temporary890 g_fileArray £temporary889
x20760:	mov si, g_fileArray	; 3: 190 39 13
x20763:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary888 -> £temporary890 £temporary890 0

fopen$5:	; NotEqual 19 £temporary888.open$0 -> £temporary890 0
x20765:	cmp word [si], 0	; 3: 131 60 0
x20768:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x20770:	mov ax, [bp + 6]	; 3: 139 70 6
x20773:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x20776:	mov ax, [bp + 8]	; 3: 139 70 8
x20779:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; UnsignedMultiply £temporary894 index 29
x20782:	mov ax, [bp + 10]	; 3: 139 70 10
x20785:	xor dx, dx	; 2: 49 210
x20787:	mul word [int2$29#]	; 4: 247 38 107 81

fopen$10:	; BinaryAdd £temporary895 g_fileArray £temporary894
x20791:	mov si, g_fileArray	; 3: 190 39 13
x20794:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary893 -> £temporary895 £temporary895 0

fopen$12:	; address £temporary896 £temporary893 -> £temporary895

fopen$13:	; Parameter 12 £temporary896 10
x20796:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x20799:	mov word [bp + 12], fopen$15	; 5: 199 70 12 77 81
x20804:	mov [bp + 14], bp	; 3: 137 110 14
x20807:	add bp, 12	; 3: 131 197 12
x20810:	nop	; 1: 144
x20811:	jmp freopen	; 2: 235 32

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary897

fopen$17:	; SetReturnValue £temporary897

fopen$18:	; Return £temporary897
x20813:	mov ax, [bp]	; 3: 139 70 0
x20816:	mov di, [bp + 4]	; 3: 139 126 4
x20819:	mov bp, [bp + 2]	; 3: 139 110 2
x20822:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x20824:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x20827:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x20829:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x20832:	mov ax, [bp]	; 3: 139 70 0
x20835:	mov di, [bp + 4]	; 3: 139 126 4
x20838:	mov bp, [bp + 2]	; 3: 139 110 2
x20841:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

int2$29#:
x20843:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x20845:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x20850:	mov ax, [bp + 8]	; 3: 139 70 8
x20853:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x20856:	mov word [bp + 22], string_r#	; 5: 199 70 22 210 76

freopen$4:	; Call 14 strcmp 0
x20861:	mov word [bp + 14], freopen$5	; 5: 199 70 14 139 81
x20866:	mov [bp + 16], bp	; 3: 137 110 16
x20869:	add bp, 14	; 3: 131 197 14
x20872:	jmp strcmp	; 3: 233 103 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary901

freopen$7:	; NotEqual 16 £temporary901 0
x20875:	cmp bx, 0	; 3: 131 251 0
x20878:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x20880:	mov ax, [bp + 6]	; 3: 139 70 6
x20883:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x20886:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x20890:	mov word [bp + 14], freopen$12	; 5: 199 70 14 168 81
x20895:	mov [bp + 16], bp	; 3: 137 110 16
x20898:	add bp, 14	; 3: 131 197 14
x20901:	jmp @1096$fileopen	; 3: 233 235 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary903

freopen$14:	; Assign handle £temporary903
x20904:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 130
x20907:	jmp freopen$130	; 3: 233 210 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x20910:	mov ax, [bp + 8]	; 3: 139 70 8
x20913:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x20916:	mov word [bp + 22], string_w#	; 5: 199 70 22 221 76

freopen$19:	; Call 14 strcmp 0
x20921:	mov word [bp + 14], freopen$20	; 5: 199 70 14 199 81
x20926:	mov [bp + 16], bp	; 3: 137 110 16
x20929:	add bp, 14	; 3: 131 197 14
x20932:	jmp strcmp	; 3: 233 43 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary904

freopen$22:	; NotEqual 30 £temporary904 0
x20935:	cmp bx, 0	; 3: 131 251 0
x20938:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x20940:	mov ax, [bp + 6]	; 3: 139 70 6
x20943:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x20946:	mov word [bp + 14], freopen$26	; 5: 199 70 14 224 81
x20951:	mov [bp + 16], bp	; 3: 137 110 16
x20954:	add bp, 14	; 3: 131 197 14
x20957:	jmp filecreate	; 3: 233 224 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary906

freopen$28:	; Assign handle £temporary906
x20960:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 130
x20963:	jmp freopen$130	; 3: 233 154 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x20966:	mov ax, [bp + 8]	; 3: 139 70 8
x20969:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x20972:	mov word [bp + 22], string_a#	; 5: 199 70 22 231 83

freopen$33:	; Call 14 strcmp 0
x20977:	mov word [bp + 14], freopen$34	; 5: 199 70 14 255 81
x20982:	mov [bp + 16], bp	; 3: 137 110 16
x20985:	add bp, 14	; 3: 131 197 14
x20988:	jmp strcmp	; 3: 233 243 1

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary907

freopen$36:	; NotEqual 59 £temporary907 0
x20991:	cmp bx, 0	; 3: 131 251 0
x20994:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x20996:	mov ax, [bp + 6]	; 3: 139 70 6
x20999:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x21002:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x21006:	mov word [bp + 14], freopen$41	; 5: 199 70 14 28 82
x21011:	mov [bp + 16], bp	; 3: 137 110 16
x21014:	add bp, 14	; 3: 131 197 14
x21017:	jmp @1096$fileopen	; 3: 233 119 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary909

freopen$43:	; Assign handle £temporary909
x21020:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x21023:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x21027:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x21029:	mov ax, [bp + 10]	; 3: 139 70 10
x21032:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x21035:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x21040:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x21045:	mov word [bp + 14], freopen$50	; 5: 199 70 14 67 82
x21050:	mov [bp + 16], bp	; 3: 137 110 16
x21053:	add bp, 14	; 3: 131 197 14
x21056:	jmp fseek	; 3: 233 174 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 130
x21059:	jmp freopen$130	; 3: 233 58 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x21062:	mov ax, [bp + 6]	; 3: 139 70 6
x21065:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x21068:	mov word [bp + 14], freopen$55	; 5: 199 70 14 90 82
x21073:	mov [bp + 16], bp	; 3: 137 110 16
x21076:	add bp, 14	; 3: 131 197 14
x21079:	jmp filecreate	; 3: 233 102 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary912

freopen$57:	; Assign handle £temporary912
x21082:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 130
x21085:	jmp freopen$130	; 3: 233 32 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x21088:	mov ax, [bp + 8]	; 3: 139 70 8
x21091:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x21094:	mov word [bp + 22], string_r2B#	; 5: 199 70 22 233 83

freopen$62:	; Call 14 strcmp 0
x21099:	mov word [bp + 14], freopen$63	; 5: 199 70 14 121 82
x21104:	mov [bp + 16], bp	; 3: 137 110 16
x21107:	add bp, 14	; 3: 131 197 14
x21110:	jmp strcmp	; 3: 233 121 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary913

freopen$65:	; NotEqual 74 £temporary913 0
x21113:	cmp bx, 0	; 3: 131 251 0
x21116:	jne freopen$74	; 2: 117 30

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 name 6
x21118:	mov ax, [bp + 6]	; 3: 139 70 6
x21121:	mov [bp + 20], ax	; 3: 137 70 20

freopen$68:	; Parameter 14 66 8
x21124:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$69:	; Call 14 fileopen 0
x21128:	mov word [bp + 14], freopen$70	; 5: 199 70 14 150 82
x21133:	mov [bp + 16], bp	; 3: 137 110 16
x21136:	add bp, 14	; 3: 131 197 14
x21139:	jmp @1096$fileopen	; 3: 233 253 1

freopen$70:	; PostCall 14

freopen$71:	; GetReturnValue £temporary915

freopen$72:	; Assign handle £temporary915
x21142:	mov [bp + 12], bx	; 3: 137 94 12

freopen$73:	; Goto 130
x21145:	jmp freopen$130	; 3: 233 228 0

freopen$74:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$75:	; Parameter 14 mode 6
x21148:	mov ax, [bp + 8]	; 3: 139 70 8
x21151:	mov [bp + 20], ax	; 3: 137 70 20

freopen$76:	; Parameter 14 string_w2B# 8
x21154:	mov word [bp + 22], string_w2B#	; 5: 199 70 22 236 83

freopen$77:	; Call 14 strcmp 0
x21159:	mov word [bp + 14], freopen$78	; 5: 199 70 14 181 82
x21164:	mov [bp + 16], bp	; 3: 137 110 16
x21167:	add bp, 14	; 3: 131 197 14
x21170:	jmp strcmp	; 3: 233 61 1

freopen$78:	; PostCall 14

freopen$79:	; GetReturnValue £temporary916

freopen$80:	; NotEqual 102 £temporary916 0
x21173:	cmp bx, 0	; 3: 131 251 0
x21176:	jne freopen$102	; 2: 117 80

freopen$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$82:	; Parameter 14 name 6
x21178:	mov ax, [bp + 6]	; 3: 139 70 6
x21181:	mov [bp + 20], ax	; 3: 137 70 20

freopen$83:	; Call 14 fileexists 0
x21184:	mov word [bp + 14], freopen$84	; 5: 199 70 14 206 82
x21189:	mov [bp + 16], bp	; 3: 137 110 16
x21192:	add bp, 14	; 3: 131 197 14
x21195:	jmp fileexists	; 3: 233 110 2

freopen$84:	; PostCall 14

freopen$85:	; GetReturnValue £temporary918

freopen$86:	; Equal 95 £temporary918 0
x21198:	cmp bx, 0	; 3: 131 251 0
x21201:	je freopen$95	; 2: 116 30

freopen$87:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$88:	; Parameter 14 name 6
x21203:	mov ax, [bp + 6]	; 3: 139 70 6
x21206:	mov [bp + 20], ax	; 3: 137 70 20

freopen$89:	; Parameter 14 66 8
x21209:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$90:	; Call 14 fileopen 0
x21213:	mov word [bp + 14], freopen$91	; 5: 199 70 14 235 82
x21218:	mov [bp + 16], bp	; 3: 137 110 16
x21221:	add bp, 14	; 3: 131 197 14
x21224:	jmp @1096$fileopen	; 3: 233 168 1

freopen$91:	; PostCall 14

freopen$92:	; GetReturnValue £temporary919

freopen$93:	; Assign handle £temporary919
x21227:	mov [bp + 12], bx	; 3: 137 94 12

freopen$94:	; Goto 130
x21230:	jmp freopen$130	; 3: 233 143 0

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x21233:	mov ax, [bp + 6]	; 3: 139 70 6
x21236:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Call 14 filecreate 0
x21239:	mov word [bp + 14], freopen$98	; 5: 199 70 14 5 83
x21244:	mov [bp + 16], bp	; 3: 137 110 16
x21247:	add bp, 14	; 3: 131 197 14
x21250:	jmp filecreate	; 3: 233 187 1

freopen$98:	; PostCall 14

freopen$99:	; GetReturnValue £temporary920

freopen$100:	; Assign handle £temporary920
x21253:	mov [bp + 12], bx	; 3: 137 94 12

freopen$101:	; Goto 130
x21256:	jmp freopen$130	; 2: 235 118

freopen$102:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$103:	; Parameter 14 mode 6
x21258:	mov ax, [bp + 8]	; 3: 139 70 8
x21261:	mov [bp + 20], ax	; 3: 137 70 20

freopen$104:	; Parameter 14 string_a2B# 8
x21264:	mov word [bp + 22], string_a2B#	; 5: 199 70 22 239 83

freopen$105:	; Call 14 strcmp 0
x21269:	mov word [bp + 14], freopen$106	; 5: 199 70 14 35 83
x21274:	mov [bp + 16], bp	; 3: 137 110 16
x21277:	add bp, 14	; 3: 131 197 14
x21280:	jmp strcmp	; 3: 233 207 0

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary922

freopen$108:	; NotEqual 130 £temporary922 0
x21283:	cmp bx, 0	; 3: 131 251 0
x21286:	jne freopen$130	; 2: 117 88

freopen$109:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$110:	; Parameter 14 name 6
x21288:	mov ax, [bp + 6]	; 3: 139 70 6
x21291:	mov [bp + 20], ax	; 3: 137 70 20

freopen$111:	; Parameter 14 66 8
x21294:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$112:	; Call 14 fileopen 0
x21298:	mov word [bp + 14], freopen$113	; 5: 199 70 14 64 83
x21303:	mov [bp + 16], bp	; 3: 137 110 16
x21306:	add bp, 14	; 3: 131 197 14
x21309:	jmp @1096$fileopen	; 3: 233 83 1

freopen$113:	; PostCall 14

freopen$114:	; GetReturnValue £temporary924

freopen$115:	; Assign handle £temporary924
x21312:	mov [bp + 12], bx	; 3: 137 94 12

freopen$116:	; Equal 124 handle -1
x21315:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x21319:	je freopen$124	; 2: 116 32

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 stream 6
x21321:	mov ax, [bp + 10]	; 3: 139 70 10
x21324:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 0 8
x21327:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$120:	; Parameter 14 2 10
x21332:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$121:	; Call 14 fseek 0
x21337:	mov word [bp + 14], freopen$122	; 5: 199 70 14 103 83
x21342:	mov [bp + 16], bp	; 3: 137 110 16
x21345:	add bp, 14	; 3: 131 197 14
x21348:	jmp fseek	; 3: 233 138 1

freopen$122:	; PostCall 14

freopen$123:	; Goto 130
x21351:	jmp freopen$130	; 2: 235 23

freopen$124:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$125:	; Parameter 14 name 6
x21353:	mov ax, [bp + 6]	; 3: 139 70 6
x21356:	mov [bp + 20], ax	; 3: 137 70 20

freopen$126:	; Call 14 filecreate 0
x21359:	mov word [bp + 14], freopen$127	; 5: 199 70 14 125 83
x21364:	mov [bp + 16], bp	; 3: 137 110 16
x21367:	add bp, 14	; 3: 131 197 14
x21370:	jmp filecreate	; 3: 233 67 1

freopen$127:	; PostCall 14

freopen$128:	; GetReturnValue £temporary927

freopen$129:	; Assign handle £temporary927
x21373:	mov [bp + 12], bx	; 3: 137 94 12

freopen$130:	; Equal 147 handle -1
x21376:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x21380:	je freopen$147	; 2: 116 76

freopen$131:	; Deref £temporary929 -> stream stream 0
x21382:	mov si, [bp + 10]	; 3: 139 118 10

freopen$132:	; Assign £temporary929 -> stream 1
x21385:	mov word [si], 1	; 4: 199 4 1 0

freopen$133:	; Deref £temporary930 -> stream stream 2
x21389:	mov si, [bp + 10]	; 3: 139 118 10

freopen$134:	; Assign £temporary930 -> stream handle
x21392:	mov ax, [bp + 12]	; 3: 139 70 12
x21395:	mov [si + 2], ax	; 3: 137 68 2

freopen$135:	; Deref £temporary931 -> stream stream 25
x21398:	mov si, [bp + 10]	; 3: 139 118 10

freopen$136:	; Assign £temporary931 -> stream 0
x21401:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$137:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$138:	; Deref £temporary932 -> stream stream 4
x21406:	mov si, [bp + 10]	; 3: 139 118 10

freopen$139:	; Parameter 14 £temporary932 -> stream 6
x21409:	mov [bp + 20], si	; 3: 137 118 20
x21412:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$140:	; Parameter 14 name 8
x21416:	mov ax, [bp + 6]	; 3: 139 70 6
x21419:	mov [bp + 22], ax	; 3: 137 70 22

freopen$141:	; Call 14 strcpy 0
x21422:	mov word [bp + 14], freopen$142	; 5: 199 70 14 188 83
x21427:	mov [bp + 16], bp	; 3: 137 110 16
x21430:	add bp, 14	; 3: 131 197 14
x21433:	jmp strcpy	; 3: 233 158 1

freopen$142:	; PostCall 14

freopen$143:	; Deref £temporary934 -> stream stream 27
x21436:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary934 -> stream 0
x21439:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$145:	; SetReturnValue stream
x21444:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$146:	; Return stream
x21447:	mov ax, [bp]	; 3: 139 70 0
x21450:	mov di, [bp + 4]	; 3: 139 126 4
x21453:	mov bp, [bp + 2]	; 3: 139 110 2
x21456:	jmp ax	; 2: 255 224

freopen$147:	; Deref £temporary935 -> stream stream 0
x21458:	mov si, [bp + 10]	; 3: 139 118 10

freopen$148:	; Assign £temporary935 -> stream 0
x21461:	mov word [si], 0	; 4: 199 4 0 0

freopen$149:	; SetReturnValue 0
x21465:	mov bx, 0	; 3: 187 0 0

freopen$150:	; Return 0
x21468:	mov ax, [bp]	; 3: 139 70 0
x21471:	mov di, [bp + 4]	; 3: 139 126 4
x21474:	mov bp, [bp + 2]	; 3: 139 110 2
x21477:	jmp ax	; 2: 255 224

freopen$151:	; FunctionEnd freopen

string_a#:
x21479:	db "a", 0	; 2: 97 0

string_r2B#:
x21481:	db "r+", 0	; 3: 114 43 0

string_w2B#:
x21484:	db "w+", 0	; 3: 119 43 0

string_a2B#:
x21487:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x21490:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3950 left index
x21495:	mov si, [bp + 6]	; 3: 139 118 6
x21498:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3949 -> £temporary3950 £temporary3950 0

strcmp$3:	; NotEqual 9 £temporary3949 -> £temporary3950 0
x21501:	cmp byte [si], 0	; 3: 128 60 0
x21504:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3953 right index
x21506:	mov si, [bp + 8]	; 3: 139 118 8
x21509:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3952 -> £temporary3953 £temporary3953 0

strcmp$6:	; NotEqual 9 £temporary3952 -> £temporary3953 0
x21512:	cmp byte [si], 0	; 3: 128 60 0
x21515:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x21517:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x21520:	mov ax, [bp]	; 3: 139 70 0
x21523:	mov di, [bp + 4]	; 3: 139 126 4
x21526:	mov bp, [bp + 2]	; 3: 139 110 2
x21529:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3957 left index
x21531:	mov si, [bp + 6]	; 3: 139 118 6
x21534:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3956 -> £temporary3957 £temporary3957 0

strcmp$11:	; NotEqual 14 £temporary3956 -> £temporary3957 0
x21537:	cmp byte [si], 0	; 3: 128 60 0
x21540:	jne strcmp$14	; 2: 117 14

strcmp$12:	; SetReturnValue -1
x21542:	mov bx, -1	; 3: 187 255 255

strcmp$13:	; Return -1
x21545:	mov ax, [bp]	; 3: 139 70 0
x21548:	mov di, [bp + 4]	; 3: 139 126 4
x21551:	mov bp, [bp + 2]	; 3: 139 110 2
x21554:	jmp ax	; 2: 255 224

strcmp$14:	; BinaryAdd £temporary3960 right index
x21556:	mov si, [bp + 8]	; 3: 139 118 8
x21559:	add si, [bp + 10]	; 3: 3 118 10

strcmp$15:	; Deref £temporary3959 -> £temporary3960 £temporary3960 0

strcmp$16:	; NotEqual 19 £temporary3959 -> £temporary3960 0
x21562:	cmp byte [si], 0	; 3: 128 60 0
x21565:	jne strcmp$19	; 2: 117 14

strcmp$17:	; SetReturnValue 1
x21567:	mov bx, 1	; 3: 187 1 0

strcmp$18:	; Return 1
x21570:	mov ax, [bp]	; 3: 139 70 0
x21573:	mov di, [bp + 4]	; 3: 139 126 4
x21576:	mov bp, [bp + 2]	; 3: 139 110 2
x21579:	jmp ax	; 2: 255 224

strcmp$19:	; BinaryAdd £temporary3963 left index
x21581:	mov si, [bp + 6]	; 3: 139 118 6
x21584:	add si, [bp + 10]	; 3: 3 118 10

strcmp$20:	; Deref £temporary3962 -> £temporary3963 £temporary3963 0

strcmp$21:	; BinaryAdd £temporary3965 right index
x21587:	mov di, [bp + 8]	; 3: 139 126 8
x21590:	add di, [bp + 10]	; 3: 3 126 10

strcmp$22:	; Deref £temporary3964 -> £temporary3965 £temporary3965 0

strcmp$23:	; SignedGreaterThanEqual 26 £temporary3962 -> £temporary3963 £temporary3964 -> £temporary3965
x21593:	mov al, [di]	; 2: 138 5
x21595:	cmp [si], al	; 2: 56 4
x21597:	jge strcmp$26	; 2: 125 14

strcmp$24:	; SetReturnValue -1
x21599:	mov bx, -1	; 3: 187 255 255

strcmp$25:	; Return -1
x21602:	mov ax, [bp]	; 3: 139 70 0
x21605:	mov di, [bp + 4]	; 3: 139 126 4
x21608:	mov bp, [bp + 2]	; 3: 139 110 2
x21611:	jmp ax	; 2: 255 224

strcmp$26:	; BinaryAdd £temporary3968 left index
x21613:	mov si, [bp + 6]	; 3: 139 118 6
x21616:	add si, [bp + 10]	; 3: 3 118 10

strcmp$27:	; Deref £temporary3967 -> £temporary3968 £temporary3968 0

strcmp$28:	; BinaryAdd £temporary3970 right index
x21619:	mov di, [bp + 8]	; 3: 139 126 8
x21622:	add di, [bp + 10]	; 3: 3 126 10

strcmp$29:	; Deref £temporary3969 -> £temporary3970 £temporary3970 0

strcmp$30:	; SignedLessThanEqual 33 £temporary3967 -> £temporary3968 £temporary3969 -> £temporary3970
x21625:	mov al, [di]	; 2: 138 5
x21627:	cmp [si], al	; 2: 56 4
x21629:	jle strcmp$33	; 2: 126 14

strcmp$31:	; SetReturnValue 1
x21631:	mov bx, 1	; 3: 187 1 0

strcmp$32:	; Return 1
x21634:	mov ax, [bp]	; 3: 139 70 0
x21637:	mov di, [bp + 4]	; 3: 139 126 4
x21640:	mov bp, [bp + 2]	; 3: 139 110 2
x21643:	jmp ax	; 2: 255 224

strcmp$33:	; Increment index
x21645:	inc word [bp + 10]	; 3: 255 70 10

strcmp$34:	; Goto 1
x21648:	jmp strcmp$1	; 3: 233 100 255

strcmp$35:	; FunctionEnd strcmp

@1096$fileopen:	; AssignRegister ah 61
x21651:	mov ah, 61	; 2: 180 61

@1096$fileopen$1:	; AssignRegister al mode
x21653:	mov al, [bp + 8]	; 3: 138 70 8

@1096$fileopen$2:	; AssignRegister dx name
x21656:	mov dx, [bp + 6]	; 3: 139 86 6

@1096$fileopen$3:	; Interrupt 33
x21659:	int 33	; 2: 205 33

@1096$fileopen$4:	; NotCarry 8
x21661:	jnc @1096$fileopen$8	; 2: 115 20

@1096$fileopen$5:	; Assign errno 9
x21663:	mov word [errno], 9	; 6: 199 6 182 10 9 0

@1096$fileopen$6:	; SetReturnValue -1
x21669:	mov bx, -1	; 3: 187 255 255

@1096$fileopen$7:	; Return -1
x21672:	mov ax, [bp]	; 3: 139 70 0
x21675:	mov di, [bp + 4]	; 3: 139 126 4
x21678:	mov bp, [bp + 2]	; 3: 139 110 2
x21681:	jmp ax	; 2: 255 224

@1096$fileopen$8:	; InspectRegister £temporary885 ax

@1096$fileopen$9:	; SetReturnValue £temporary885
x21683:	mov bx, ax	; 2: 137 195

@1096$fileopen$10:	; Return £temporary885
x21685:	mov ax, [bp]	; 3: 139 70 0
x21688:	mov di, [bp + 4]	; 3: 139 126 4
x21691:	mov bp, [bp + 2]	; 3: 139 110 2
x21694:	jmp ax	; 2: 255 224

@1096$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x21696:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x21698:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x21701:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x21704:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary863 ax

filecreate$5:	; Assign handle £temporary863
x21706:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x21709:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x21711:	mov word [errno], 9	; 6: 199 6 182 10 9 0

filecreate$8:	; SetReturnValue -1
x21717:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x21720:	mov ax, [bp]	; 3: 139 70 0
x21723:	mov di, [bp + 4]	; 3: 139 126 4
x21726:	mov bp, [bp + 2]	; 3: 139 110 2
x21729:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x21731:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x21734:	mov ax, [bp]	; 3: 139 70 0
x21737:	mov di, [bp + 4]	; 3: 139 126 4
x21740:	mov bp, [bp + 2]	; 3: 139 110 2
x21743:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary1110 origin
x21745:	mov ax, [bp + 10]	; 3: 139 70 10
x21748:	cmp ax, 0	; 3: 131 248 0
x21751:	jge fseek$1	; 2: 125 4
x21753:	neg ax	; 2: 247 216
x21755:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary1110

fseek$2:	; AssignRegister ah 66
x21757:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary1113 -> stream stream 2
x21759:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary1113 -> stream
x21762:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x21765:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary1116 offset
x21768:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary1116

fseek$8:	; Interrupt 33
x21771:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x21773:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary1119 -> stream stream 23
x21775:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary1120 ax

fseek$12:	; Assign £temporary1119 -> stream £temporary1120
x21778:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary1121 -> stream stream 23
x21781:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary1121 -> stream
x21784:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary1121 -> stream
x21787:	mov ax, [bp]	; 3: 139 70 0
x21790:	mov di, [bp + 4]	; 3: 139 126 4
x21793:	mov bp, [bp + 2]	; 3: 139 110 2
x21796:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary1122 -> stream stream 21
x21798:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary1122 -> stream 15
x21801:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x21806:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x21809:	mov ax, [bp]	; 3: 139 70 0
x21812:	mov di, [bp + 4]	; 3: 139 126 4
x21815:	mov bp, [bp + 2]	; 3: 139 110 2
x21818:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x21820:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x21822:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x21824:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x21827:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x21829:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary880 1
x21831:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x21834:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary880 0
x21836:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary880

fileexists$9:	; Return £temporary880
x21839:	mov ax, [bp]	; 3: 139 70 0
x21842:	mov di, [bp + 4]	; 3: 139 126 4
x21845:	mov bp, [bp + 2]	; 3: 139 110 2
x21848:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x21850:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3893 source index
x21855:	mov si, [bp + 8]	; 3: 139 118 8
x21858:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3892 -> £temporary3893 £temporary3893 0

strcpy$3:	; Equal 11 £temporary3892 -> £temporary3893 0
x21861:	cmp byte [si], 0	; 3: 128 60 0
x21864:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3897 target index
x21866:	mov si, [bp + 6]	; 3: 139 118 6
x21869:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3896 -> £temporary3897 £temporary3897 0

strcpy$6:	; BinaryAdd £temporary3899 source index
x21872:	mov di, [bp + 8]	; 3: 139 126 8
x21875:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3898 -> £temporary3899 £temporary3899 0

strcpy$8:	; Assign £temporary3896 -> £temporary3897 £temporary3898 -> £temporary3899
x21878:	mov al, [di]	; 2: 138 5
x21880:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x21882:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x21885:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3901 target index
x21887:	mov si, [bp + 6]	; 3: 139 118 6
x21890:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3900 -> £temporary3901 £temporary3901 0

strcpy$13:	; Assign £temporary3900 -> £temporary3901 0
x21893:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x21896:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x21899:	mov ax, [bp]	; 3: 139 70 0
x21902:	mov di, [bp + 4]	; 3: 139 126 4
x21905:	mov bp, [bp + 2]	; 3: 139 110 2
x21908:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2382 format
x21910:	mov si, bp	; 2: 137 238
x21912:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2383 £temporary2382

fprintf$2:	; BinaryAdd arg_list £temporary2383 2
x21915:	add si, 2	; 3: 131 198 2
x21918:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x21921:	mov ax, [bp + 6]	; 3: 139 70 6
x21924:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x21927:	mov ax, [bp + 8]	; 3: 139 70 8
x21930:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x21933:	mov ax, [di + 10]	; 3: 139 69 10
x21936:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x21939:	mov word [di + 12], fprintf$8	; 5: 199 69 12 198 85
x21944:	mov [di + 14], bp	; 3: 137 109 14
x21947:	mov [di + 16], di	; 3: 137 125 16
x21950:	add di, 12	; 3: 131 199 12
x21953:	mov bp, di	; 2: 137 253
x21955:	jmp vfprintf	; 3: 233 165 185

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2385

fprintf$10:	; SetReturnValue £temporary2385

fprintf$11:	; Return £temporary2385
x21958:	mov ax, [bp]	; 3: 139 70 0
x21961:	mov di, [bp + 4]	; 3: 139 126 4
x21964:	mov bp, [bp + 2]	; 3: 139 110 2
x21967:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x21969:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x21971:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x21973:	int 33	; 2: 205 33

abort$3:	; Return 0
x21975:	mov ax, [bp]	; 3: 139 70 0
x21978:	mov di, [bp + 4]	; 3: 139 126 4
x21981:	mov bp, [bp + 2]	; 3: 139 110 2
x21984:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x21986:	mov ax, [bp + 6]	; 3: 139 70 6
x21989:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x21992:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x21997:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x22002:	mov word [bp + 8], feof$5	; 5: 199 70 8 0 86
x22007:	mov [bp + 10], bp	; 3: 137 110 10
x22010:	add bp, 8	; 3: 131 197 8
x22013:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary1143

feof$7:	; IntegralToIntegral £temporary1144 £temporary1143
x22016:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary1144
x22023:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x22027:	mov ax, [bp + 6]	; 3: 139 70 6
x22030:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x22033:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x22038:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x22043:	mov word [bp + 12], feof$14	; 5: 199 70 12 41 86
x22048:	mov [bp + 14], bp	; 3: 137 110 14
x22051:	add bp, 12	; 3: 131 197 12
x22054:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary1145

feof$16:	; IntegralToIntegral £temporary1146 £temporary1145
x22057:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary1146
x22064:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x22068:	mov ax, [bp + 6]	; 3: 139 70 6
x22071:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary1147 currPosition
x22074:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary1147 8
x22078:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x22081:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x22086:	mov word [bp + 16], feof$24	; 5: 199 70 16 84 86
x22091:	mov [bp + 18], bp	; 3: 137 110 18
x22094:	add bp, 16	; 3: 131 197 16
x22097:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x22100:	mov eax, [bp + 12]	; 4: 102 139 70 12
x22104:	cmp [bp + 8], eax	; 4: 102 57 70 8
x22108:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary1150 1
x22110:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x22113:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary1150 0
x22115:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary1150
x22118:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x22121:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x22124:	mov ax, [bp]	; 3: 139 70 0
x22127:	mov di, [bp + 4]	; 3: 139 126 4
x22130:	mov bp, [bp + 2]	; 3: 139 110 2
x22133:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1741 format
x22135:	mov si, bp	; 2: 137 238
x22137:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1742 £temporary1741

fscanf$2:	; BinaryAdd arg_list £temporary1742 2
x22140:	add si, 2	; 3: 131 198 2
x22143:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x22146:	mov ax, [bp + 6]	; 3: 139 70 6
x22149:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x22152:	mov ax, [bp + 8]	; 3: 139 70 8
x22155:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x22158:	mov ax, [di + 10]	; 3: 139 69 10
x22161:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x22164:	mov word [di + 12], fscanf$8	; 5: 199 69 12 167 86
x22169:	mov [di + 14], bp	; 3: 137 109 14
x22172:	mov [di + 16], di	; 3: 137 125 16
x22175:	add di, 12	; 3: 131 199 12
x22178:	mov bp, di	; 2: 137 253
x22180:	nop	; 1: 144
x22181:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1744

fscanf$10:	; SetReturnValue £temporary1744

fscanf$11:	; Return £temporary1744
x22183:	mov ax, [bp]	; 3: 139 70 0
x22186:	mov di, [bp + 4]	; 3: 139 126 4
x22189:	mov bp, [bp + 2]	; 3: 139 110 2
x22192:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x22194:	mov word [g_inStatus], 0	; 6: 199 6 227 86 0 0

vfscanf$1:	; IntegralToIntegral £temporary1749 inStream
x22200:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1749
x22203:	mov [g_inDevice], ax	; 3: 163 229 86

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x22206:	mov ax, [bp + 8]	; 3: 139 70 8
x22209:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x22212:	mov ax, [bp + 10]	; 3: 139 70 10
x22215:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x22218:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 216 86
x22223:	mov [bp + 14], bp	; 3: 137 110 14
x22226:	add bp, 12	; 3: 131 197 12
x22229:	nop	; 1: 144
x22230:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1750

vfscanf$9:	; SetReturnValue £temporary1750

vfscanf$10:	; Return £temporary1750
x22232:	mov ax, [bp]	; 3: 139 70 0
x22235:	mov di, [bp + 4]	; 3: 139 126 4
x22238:	mov bp, [bp + 2]	; 3: 139 110 2
x22241:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x22243:	db 0, 0	; 2: 0 0

g_inDevice:
x22245:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x22247:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x22252:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x22257:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x22262:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x22267:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x22272:	mov word [g_inCount], 0	; 6: 199 6 6 92 0 0

scanFormat$6:	; Assign g_inChars 0
x22278:	mov word [g_inChars], 0	; 6: 199 6 8 92 0 0

scanFormat$7:	; Assign index 0
x22284:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1536 format index
x22289:	mov si, [bp + 6]	; 3: 139 118 6
x22292:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1535 -> £temporary1536 £temporary1536 0

scanFormat$10:	; Equal 329 £temporary1535 -> £temporary1536 0
x22295:	cmp byte [si], 0	; 3: 128 60 0
x22298:	je scanFormat$329	; 4: 15 132 217 4

scanFormat$11:	; BinaryAdd £temporary1540 format index
x22302:	mov si, [bp + 6]	; 3: 139 118 6
x22305:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1539 -> £temporary1540 £temporary1540 0

scanFormat$13:	; Assign c £temporary1539 -> £temporary1540
x22308:	mov al, [si]	; 2: 138 4
x22310:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1541 c
x22313:	mov al, [bp + 10]	; 3: 138 70 10
x22316:	and ax, 255	; 3: 37 255 0
x22319:	cmp al, 0	; 2: 60 0
x22321:	jge scanFormat$15	; 2: 125 4
x22323:	neg al	; 2: 246 216
x22325:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1541 1
x22327:	inc ax	; 1: 64
x22328:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 321 percent 0
x22331:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x22335:	je scanFormat$321	; 4: 15 132 143 4

scanFormat$17:	; BinarySubtract £temporary1543 d 1
x22339:	mov ax, [bp + 55]	; 3: 139 70 55
x22342:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1543 104
x22343:	cmp ax, 104	; 3: 131 248 104
x22346:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1543 108
x22348:	cmp ax, 108	; 3: 131 248 108
x22351:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1543 76
x22353:	cmp ax, 76	; 3: 131 248 76
x22356:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1543 42
x22358:	cmp ax, 42	; 3: 131 248 42
x22361:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1543 99
x22363:	cmp ax, 99	; 3: 131 248 99
x22366:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1543 115
x22368:	cmp ax, 115	; 3: 131 248 115
x22371:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1543 100
x22375:	cmp ax, 100	; 3: 131 248 100
x22378:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1543 105
x22382:	cmp ax, 105	; 3: 131 248 105
x22385:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1543 111
x22389:	cmp ax, 111	; 3: 131 248 111
x22392:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1543 120
x22396:	cmp ax, 120	; 3: 131 248 120
x22399:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1543 117
x22403:	cmp ax, 117	; 3: 131 248 117
x22406:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1543 103
x22410:	cmp ax, 103	; 3: 131 248 103
x22413:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1543 102
x22417:	cmp ax, 102	; 3: 131 248 102
x22420:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1543 101
x22424:	cmp ax, 101	; 3: 131 248 101
x22427:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1543 91
x22431:	cmp ax, 91	; 3: 131 248 91
x22434:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 312 £temporary1543 110
x22438:	cmp ax, 110	; 3: 131 248 110
x22441:	je scanFormat$312	; 4: 15 132 7 4

scanFormat$34:	; CaseEnd £temporary1543

scanFormat$35:	; Goto 327
x22445:	jmp scanFormat$327	; 3: 233 65 4

scanFormat$36:	; Assign shortInt 1
x22448:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 327
x22453:	jmp scanFormat$327	; 3: 233 57 4

scanFormat$38:	; Assign longIntOrDouble 1
x22456:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 327
x22461:	jmp scanFormat$327	; 3: 233 49 4

scanFormat$40:	; Assign longDouble 1
x22464:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 327
x22469:	jmp scanFormat$327	; 3: 233 41 4

scanFormat$42:	; Assign star 1
x22472:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 327
x22477:	jmp scanFormat$327	; 3: 233 33 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x22480:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 222 87
x22485:	mov [bp + 59], bp	; 3: 137 110 59
x22488:	add bp, 57	; 3: 131 197 57
x22491:	jmp scanChar	; 3: 233 44 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1544

scanFormat$48:	; Assign charValue £temporary1544
x22494:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x22497:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22501:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x22503:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1548 arg_list 2
x22507:	mov si, [bp + 8]	; 3: 139 118 8
x22510:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1549 £temporary1548

scanFormat$53:	; Deref £temporary1550 -> £temporary1549 £temporary1549 0

scanFormat$54:	; Assign charPtr £temporary1550 -> £temporary1549
x22513:	mov ax, [si]	; 2: 139 4
x22515:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1551 -> charPtr charPtr 0
x22518:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1551 -> charPtr charValue
x22521:	mov al, [bp + 57]	; 3: 138 70 57
x22524:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x22526:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1552 charValue
x22531:	mov al, [bp + 57]	; 3: 138 70 57
x22534:	and ax, 255	; 3: 37 255 0
x22537:	cmp al, 0	; 2: 60 0
x22539:	jge scanFormat$59	; 2: 125 4
x22541:	neg al	; 2: 246 216
x22543:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 327 £temporary1552 -1
x22545:	cmp ax, -1	; 3: 131 248 255
x22548:	je scanFormat$327	; 4: 15 132 217 3

scanFormat$60:	; Increment g_inCount
x22552:	inc word [g_inCount]	; 4: 255 6 6 92

scanFormat$61:	; Goto 327
x22556:	jmp scanFormat$327	; 3: 233 210 3

scanFormat$62:	; NotEqual 74 star 0
x22559:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22563:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x22565:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1558 arg_list 2
x22569:	mov si, [bp + 8]	; 3: 139 118 8
x22572:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1559 £temporary1558

scanFormat$66:	; Deref £temporary1560 -> £temporary1559 £temporary1559 0

scanFormat$67:	; Assign charPtr £temporary1560 -> £temporary1559
x22575:	mov ax, [si]	; 2: 139 4
x22577:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x22580:	mov ax, [bp + 11]	; 3: 139 70 11
x22583:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x22586:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x22591:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 77 88
x22596:	mov [bp + 59], bp	; 3: 137 110 59
x22599:	add bp, 57	; 3: 131 197 57
x22602:	jmp scanString	; 3: 233 44 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x22605:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x22607:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x22612:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x22617:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 103 88
x22622:	mov [bp + 59], bp	; 3: 137 110 59
x22625:	add bp, 57	; 3: 131 197 57
x22628:	jmp scanString	; 3: 233 18 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x22631:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 327
x22636:	jmp scanFormat$327	; 3: 233 130 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x22639:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x22644:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 130 88
x22649:	mov [bp + 59], bp	; 3: 137 110 59
x22652:	add bp, 57	; 3: 131 197 57
x22655:	jmp scanLongInt	; 3: 233 123 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1563

scanFormat$86:	; Assign longValue £temporary1563
x22658:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x22662:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22666:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x22668:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x22672:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x22674:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1567 arg_list 2
x22678:	mov si, [bp + 8]	; 3: 139 118 8
x22681:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1568 £temporary1567

scanFormat$92:	; Deref £temporary1569 -> £temporary1568 £temporary1568 0

scanFormat$93:	; Assign shortPtr £temporary1569 -> £temporary1568
x22684:	mov ax, [si]	; 2: 139 4
x22686:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1570 -> shortPtr shortPtr 0
x22689:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1571 longValue
x22692:	mov eax, [bp + 23]	; 4: 102 139 70 23
x22696:	cmp eax, 0	; 4: 102 131 248 0
x22700:	jge scanFormat$96	; 2: 125 5
x22702:	neg eax	; 3: 102 247 216
x22705:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1570 -> shortPtr £temporary1571
x22707:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x22709:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x22711:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x22715:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x22717:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1575 arg_list 2
x22721:	mov si, [bp + 8]	; 3: 139 118 8
x22724:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1576 £temporary1575

scanFormat$102:	; Deref £temporary1577 -> £temporary1576 £temporary1576 0

scanFormat$103:	; Assign intPtr £temporary1577 -> £temporary1576
x22727:	mov ax, [si]	; 2: 139 4
x22729:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1578 -> intPtr intPtr 0
x22732:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1579 longValue
x22735:	mov eax, [bp + 23]	; 4: 102 139 70 23
x22739:	cmp eax, 0	; 4: 102 131 248 0
x22743:	jge scanFormat$106	; 2: 125 5
x22745:	neg eax	; 3: 102 247 216
x22748:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1578 -> intPtr £temporary1579
x22750:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x22752:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x22754:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1581 arg_list 2
x22758:	mov si, [bp + 8]	; 3: 139 118 8
x22761:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1582 £temporary1581

scanFormat$111:	; Deref £temporary1583 -> £temporary1582 £temporary1582 0

scanFormat$112:	; Assign longPtr £temporary1583 -> £temporary1582
x22764:	mov ax, [si]	; 2: 139 4
x22766:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1584 -> longPtr longPtr 0
x22769:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1584 -> longPtr longValue
x22772:	mov eax, [bp + 23]	; 4: 102 139 70 23
x22776:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x22779:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 327
x22784:	jmp scanFormat$327	; 3: 233 238 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x22787:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x22792:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 22 89
x22797:	mov [bp + 59], bp	; 3: 137 110 59
x22800:	add bp, 57	; 3: 131 197 57
x22803:	jmp scanUnsignedLongInt	; 3: 233 33 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1586

scanFormat$122:	; Assign unsignedLongValue £temporary1586
x22806:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x22810:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22814:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x22816:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x22820:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x22822:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1590 arg_list 2
x22826:	mov si, [bp + 8]	; 3: 139 118 8
x22829:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1591 £temporary1590

scanFormat$128:	; Deref £temporary1592 -> £temporary1591 £temporary1591 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1592 -> £temporary1591
x22832:	mov ax, [si]	; 2: 139 4
x22834:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1593 -> unsignedShortPtr unsignedShortPtr 0
x22837:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1594 unsignedLongValue
x22840:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1593 -> unsignedShortPtr £temporary1594
x22844:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x22846:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x22848:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x22852:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x22854:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1598 arg_list 2
x22858:	mov si, [bp + 8]	; 3: 139 118 8
x22861:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1599 £temporary1598

scanFormat$138:	; Deref £temporary1600 -> £temporary1599 £temporary1599 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1600 -> £temporary1599
x22864:	mov ax, [si]	; 2: 139 4
x22866:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1601 -> unsignedIntPtr unsignedIntPtr 0
x22869:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1602 unsignedLongValue
x22872:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1601 -> unsignedIntPtr £temporary1602
x22876:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x22878:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x22880:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1604 arg_list 2
x22884:	mov si, [bp + 8]	; 3: 139 118 8
x22887:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1605 £temporary1604

scanFormat$147:	; Deref £temporary1606 -> £temporary1605 £temporary1605 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1606 -> £temporary1605
x22890:	mov ax, [si]	; 2: 139 4
x22892:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1607 -> unsignedLongPtr unsignedLongPtr 0
x22895:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1607 -> unsignedLongPtr unsignedLongValue
x22898:	mov eax, [bp + 37]	; 4: 102 139 70 37
x22902:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x22905:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 327
x22910:	jmp scanFormat$327	; 3: 233 112 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x22913:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x22918:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 148 89
x22923:	mov [bp + 59], bp	; 3: 137 110 59
x22926:	add bp, 57	; 3: 131 197 57
x22929:	jmp scanUnsignedLongInt	; 3: 233 163 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1609

scanFormat$158:	; Assign unsignedLongValue £temporary1609
x22932:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x22936:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22940:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x22942:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x22946:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x22948:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1613 arg_list 2
x22952:	mov si, [bp + 8]	; 3: 139 118 8
x22955:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1614 £temporary1613

scanFormat$164:	; Deref £temporary1615 -> £temporary1614 £temporary1614 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1615 -> £temporary1614
x22958:	mov ax, [si]	; 2: 139 4
x22960:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1616 -> unsignedShortPtr unsignedShortPtr 0
x22963:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1617 unsignedLongValue
x22966:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1616 -> unsignedShortPtr £temporary1617
x22970:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x22972:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x22974:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x22978:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x22980:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1621 arg_list 2
x22984:	mov si, [bp + 8]	; 3: 139 118 8
x22987:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1622 £temporary1621

scanFormat$174:	; Deref £temporary1623 -> £temporary1622 £temporary1622 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1623 -> £temporary1622
x22990:	mov ax, [si]	; 2: 139 4
x22992:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1624 -> unsignedIntPtr unsignedIntPtr 0
x22995:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1625 unsignedLongValue
x22998:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1624 -> unsignedIntPtr £temporary1625
x23002:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x23004:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x23006:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1627 arg_list 2
x23010:	mov si, [bp + 8]	; 3: 139 118 8
x23013:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1628 £temporary1627

scanFormat$183:	; Deref £temporary1629 -> £temporary1628 £temporary1628 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1629 -> £temporary1628
x23016:	mov ax, [si]	; 2: 139 4
x23018:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1630 -> unsignedLongPtr unsignedLongPtr 0
x23021:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1630 -> unsignedLongPtr unsignedLongValue
x23024:	mov eax, [bp + 37]	; 4: 102 139 70 37
x23028:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x23031:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 327
x23036:	jmp scanFormat$327	; 3: 233 242 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x23039:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x23044:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 18 90
x23049:	mov [bp + 59], bp	; 3: 137 110 59
x23052:	add bp, 57	; 3: 131 197 57
x23055:	jmp scanUnsignedLongInt	; 3: 233 37 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1632

scanFormat$194:	; Assign unsignedLongValue £temporary1632
x23058:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x23062:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x23066:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x23068:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x23072:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x23074:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1636 arg_list 2
x23078:	mov si, [bp + 8]	; 3: 139 118 8
x23081:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1637 £temporary1636

scanFormat$200:	; Deref £temporary1638 -> £temporary1637 £temporary1637 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1638 -> £temporary1637
x23084:	mov ax, [si]	; 2: 139 4
x23086:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1639 -> unsignedShortPtr unsignedShortPtr 0
x23089:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1640 unsignedLongValue
x23092:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1639 -> unsignedShortPtr £temporary1640
x23096:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x23098:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x23100:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x23104:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x23106:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1644 arg_list 2
x23110:	mov si, [bp + 8]	; 3: 139 118 8
x23113:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1645 £temporary1644

scanFormat$210:	; Deref £temporary1646 -> £temporary1645 £temporary1645 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1646 -> £temporary1645
x23116:	mov ax, [si]	; 2: 139 4
x23118:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1647 -> unsignedIntPtr unsignedIntPtr 0
x23121:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1648 unsignedLongValue
x23124:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1647 -> unsignedIntPtr £temporary1648
x23128:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x23130:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x23132:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1650 arg_list 2
x23136:	mov si, [bp + 8]	; 3: 139 118 8
x23139:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1651 £temporary1650

scanFormat$219:	; Deref £temporary1652 -> £temporary1651 £temporary1651 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1652 -> £temporary1651
x23142:	mov ax, [si]	; 2: 139 4
x23144:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1653 -> unsignedLongPtr unsignedLongPtr 0
x23147:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1653 -> unsignedLongPtr unsignedLongValue
x23150:	mov eax, [bp + 37]	; 4: 102 139 70 37
x23154:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x23157:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 327
x23162:	jmp scanFormat$327	; 3: 233 116 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x23165:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 139 90
x23170:	mov [bp + 59], bp	; 3: 137 110 59
x23173:	add bp, 57	; 3: 131 197 57
x23176:	jmp scanLongDouble	; 3: 233 24 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1655

scanFormat$229:	; PopFloat longDoubleValue
x23179:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x23182:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x23186:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x23188:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x23192:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x23194:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1659 arg_list 2
x23198:	mov si, [bp + 8]	; 3: 139 118 8
x23201:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1660 £temporary1659

scanFormat$235:	; Deref £temporary1661 -> £temporary1660 £temporary1660 0

scanFormat$236:	; Assign doublePtr £temporary1661 -> £temporary1660
x23204:	mov ax, [si]	; 2: 139 4
x23206:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1662 -> doublePtr doublePtr 0
x23209:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x23212:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1662 -> doublePtr
x23215:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x23217:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x23219:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x23223:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x23225:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1665 arg_list 2
x23229:	mov si, [bp + 8]	; 3: 139 118 8
x23232:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1666 £temporary1665

scanFormat$245:	; Deref £temporary1667 -> £temporary1666 £temporary1666 0

scanFormat$246:	; Assign longDoublePtr £temporary1667 -> £temporary1666
x23235:	mov ax, [si]	; 2: 139 4
x23237:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1668 -> longDoublePtr longDoublePtr 0
x23240:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x23243:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1668 -> longDoublePtr
x23246:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x23248:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x23250:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1670 arg_list 2
x23254:	mov si, [bp + 8]	; 3: 139 118 8
x23257:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1671 £temporary1670

scanFormat$254:	; Deref £temporary1672 -> £temporary1671 £temporary1671 0

scanFormat$255:	; Assign floatPtr £temporary1672 -> £temporary1671
x23260:	mov ax, [si]	; 2: 139 4
x23262:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1673 -> floatPtr floatPtr 0
x23265:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x23268:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1673 -> floatPtr
x23271:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x23273:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 327
x23278:	jmp scanFormat$327	; 3: 233 0 1

scanFormat$261:	; Assign not 0
x23281:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x23286:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1679 format index
x23289:	mov si, [bp + 6]	; 3: 139 118 6
x23292:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1678 -> £temporary1679 £temporary1679 0

scanFormat$265:	; NotEqual 268 £temporary1678 -> £temporary1679 94
x23295:	cmp byte [si], 94	; 3: 128 60 94
x23298:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x23300:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x23305:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x23308:	mov ax, [bp + 31]	; 3: 139 70 31
x23311:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1683 format index
x23314:	mov si, [bp + 6]	; 3: 139 118 6
x23317:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1682 -> £temporary1683 £temporary1683 0

scanFormat$271:	; Equal 274 £temporary1682 -> £temporary1683 93
x23320:	cmp byte [si], 93	; 3: 128 60 93
x23323:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x23325:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x23328:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinarySubtract size index startIndex
x23330:	mov ax, [bp + 31]	; 3: 139 70 31
x23333:	sub ax, [bp + 59]	; 3: 43 70 59
x23336:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$275:	; BinaryAdd £temporary1688 format index
x23339:	mov si, [bp + 6]	; 3: 139 118 6
x23342:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$276:	; Deref £temporary1687 -> £temporary1688 £temporary1688 0

scanFormat$277:	; Assign c £temporary1687 -> £temporary1688
x23345:	mov al, [si]	; 2: 138 4
x23347:	mov [bp + 63], al	; 3: 136 70 63

scanFormat$278:	; BinaryAdd £temporary1690 format index
x23350:	mov si, [bp + 6]	; 3: 139 118 6
x23353:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$279:	; Deref £temporary1689 -> £temporary1690 £temporary1690 0

scanFormat$280:	; Assign £temporary1689 -> £temporary1690 0
x23356:	mov byte [si], 0	; 3: 198 4 0

scanFormat$281:	; NotEqual 298 star 0
x23359:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x23363:	jne scanFormat$298	; 2: 117 58

scanFormat$282:	; BinaryAdd arg_list arg_list 2
x23365:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$283:	; BinarySubtract £temporary1694 arg_list 2
x23369:	mov si, [bp + 8]	; 3: 139 118 8
x23372:	sub si, 2	; 3: 131 238 2

scanFormat$284:	; IntegralToIntegral £temporary1695 £temporary1694

scanFormat$285:	; Deref £temporary1696 -> £temporary1695 £temporary1695 0

scanFormat$286:	; Assign string £temporary1696 -> £temporary1695
x23375:	mov ax, [si]	; 2: 139 4
x23377:	mov [bp + 64], ax	; 3: 137 70 64

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$288:	; Parameter 66 string 6
x23380:	mov ax, [bp + 64]	; 3: 139 70 64
x23383:	mov [bp + 72], ax	; 3: 137 70 72

scanFormat$289:	; BinaryAdd £temporary1698 format startIndex
x23386:	mov si, [bp + 6]	; 3: 139 118 6
x23389:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$290:	; Deref £temporary1697 -> £temporary1698 £temporary1698 0

scanFormat$291:	; address £temporary1699 £temporary1697 -> £temporary1698

scanFormat$292:	; Parameter 66 £temporary1699 8
x23392:	mov [bp + 74], si	; 3: 137 118 74

scanFormat$293:	; Parameter 66 size 10
x23395:	mov ax, [bp + 61]	; 3: 139 70 61
x23398:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$294:	; Parameter 66 not 12
x23401:	mov ax, [bp + 57]	; 3: 139 70 57
x23404:	mov [bp + 78], ax	; 3: 137 70 78

scanFormat$295:	; Call 66 scanPattern 0
x23407:	mov word [bp + 66], scanFormat$296	; 5: 199 70 66 125 91
x23412:	mov [bp + 68], bp	; 3: 137 110 68
x23415:	add bp, 66	; 3: 131 197 66
x23418:	jmp scanPattern	; 3: 233 73 11

scanFormat$296:	; PostCall 66

scanFormat$297:	; Goto 308
x23421:	jmp scanFormat$308	; 2: 235 40

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$299:	; Parameter 64 0 6
x23423:	mov word [bp + 70], 0	; 5: 199 70 70 0 0

scanFormat$300:	; BinaryAdd £temporary1702 format startIndex
x23428:	mov si, [bp + 6]	; 3: 139 118 6
x23431:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$301:	; Deref £temporary1701 -> £temporary1702 £temporary1702 0

scanFormat$302:	; address £temporary1703 £temporary1701 -> £temporary1702

scanFormat$303:	; Parameter 64 £temporary1703 8
x23434:	mov [bp + 72], si	; 3: 137 118 72

scanFormat$304:	; Parameter 64 size 10
x23437:	mov ax, [bp + 61]	; 3: 139 70 61
x23440:	mov [bp + 74], ax	; 3: 137 70 74

scanFormat$305:	; Parameter 64 not 12
x23443:	mov ax, [bp + 57]	; 3: 139 70 57
x23446:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$306:	; Call 64 scanPattern 0
x23449:	mov word [bp + 64], scanFormat$307	; 5: 199 70 64 167 91
x23454:	mov [bp + 66], bp	; 3: 137 110 66
x23457:	add bp, 64	; 3: 131 197 64
x23460:	jmp scanPattern	; 3: 233 31 11

scanFormat$307:	; PostCall 64

scanFormat$308:	; BinaryAdd £temporary1706 format index
x23463:	mov si, [bp + 6]	; 3: 139 118 6
x23466:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$309:	; Deref £temporary1705 -> £temporary1706 £temporary1706 0

scanFormat$310:	; Assign £temporary1705 -> £temporary1706 c
x23469:	mov al, [bp + 63]	; 3: 138 70 63
x23472:	mov [si], al	; 2: 136 4

scanFormat$311:	; Goto 327
x23474:	jmp scanFormat$327	; 2: 235 61

scanFormat$312:	; BinaryAdd arg_list arg_list 2
x23476:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$313:	; BinarySubtract £temporary1708 arg_list 2
x23480:	mov si, [bp + 8]	; 3: 139 118 8
x23483:	sub si, 2	; 3: 131 238 2

scanFormat$314:	; IntegralToIntegral £temporary1709 £temporary1708

scanFormat$315:	; Deref £temporary1710 -> £temporary1709 £temporary1709 0

scanFormat$316:	; Assign charsPtr £temporary1710 -> £temporary1709
x23486:	mov ax, [si]	; 2: 139 4
x23488:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$317:	; Deref £temporary1711 -> charsPtr charsPtr 0
x23491:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$318:	; Assign £temporary1711 -> charsPtr g_inChars
x23494:	mov ax, [g_inChars]	; 3: 161 8 92
x23497:	mov [si], ax	; 2: 137 4

scanFormat$319:	; Assign percent 0
x23499:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$320:	; Goto 327
x23504:	jmp scanFormat$327	; 2: 235 31

scanFormat$321:	; NotEqual 327 c 37
x23506:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x23510:	jne scanFormat$327	; 2: 117 25

scanFormat$322:	; Assign percent 1
x23512:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$323:	; Assign shortInt 0
x23517:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$324:	; Assign longIntOrDouble 0
x23522:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$325:	; Assign longDouble 0
x23527:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$326:	; Assign star 0
x23532:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$327:	; Increment index
x23537:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$328:	; Goto 8
x23540:	jmp scanFormat$8	; 3: 233 26 251

scanFormat$329:	; SetReturnValue g_inCount
x23543:	mov bx, [g_inCount]	; 4: 139 30 6 92

scanFormat$330:	; Return g_inCount
x23547:	mov ax, [bp]	; 3: 139 70 0
x23550:	mov di, [bp + 4]	; 3: 139 126 4
x23553:	mov bp, [bp + 2]	; 3: 139 110 2
x23556:	jmp ax	; 2: 255 224

scanFormat$331:	; FunctionEnd scanFormat

g_inCount:
x23558:	db 0, 0	; 2: 0 0

g_inChars:
x23560:	db 0, 0	; 2: 0 0

scanChar:	; Assign c 0
x23562:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x23566:	mov ax, [g_inStatus]	; 3: 161 227 86
x23569:	cmp ax, 0	; 3: 131 248 0
x23572:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x23574:	cmp ax, 1	; 3: 131 248 1
x23577:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x23579:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1210 g_inDevice
x23581:	mov ax, [g_inDevice]	; 3: 161 229 86

scanChar$6:	; Assign stream £temporary1210
x23584:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1211 -> stream stream 2
x23587:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1211 -> stream
x23590:	mov ax, [si + 2]	; 3: 139 68 2
x23593:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x23596:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x23598:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x23601:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1216 c
x23604:	mov dx, bp	; 2: 137 234
x23606:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1216

scanChar$14:	; Interrupt 33
x23609:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x23611:	inc word [g_inChars]	; 4: 255 6 8 92

scanChar$16:	; SetReturnValue c
x23615:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x23618:	mov ax, [bp]	; 3: 139 70 0
x23621:	mov di, [bp + 4]	; 3: 139 126 4
x23624:	mov bp, [bp + 2]	; 3: 139 110 2
x23627:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1218 g_inDevice
x23629:	mov ax, [g_inDevice]	; 3: 161 229 86

scanChar$19:	; Assign inString £temporary1218
x23632:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1219 g_inChars
x23635:	mov ax, [g_inChars]	; 3: 161 8 92

scanChar$21:	; Increment g_inChars
x23638:	inc word [g_inChars]	; 4: 255 6 8 92

scanChar$22:	; BinaryAdd £temporary1221 inString £temporary1219
x23642:	mov si, [bp + 11]	; 3: 139 118 11
x23645:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1220 -> £temporary1221 £temporary1221 0

scanChar$24:	; SetReturnValue £temporary1220 -> £temporary1221
x23647:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1220 -> £temporary1221
x23649:	mov ax, [bp]	; 3: 139 70 0
x23652:	mov di, [bp + 4]	; 3: 139 126 4
x23655:	mov bp, [bp + 2]	; 3: 139 110 2
x23658:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x23660:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x23662:	mov ax, [bp]	; 3: 139 70 0
x23665:	mov di, [bp + 4]	; 3: 139 126 4
x23668:	mov bp, [bp + 2]	; 3: 139 110 2
x23671:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x23673:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x23678:	mov word [bp + 12], scanString$3	; 5: 199 70 12 140 92
x23683:	mov [bp + 14], bp	; 3: 137 110 14
x23686:	add bp, 12	; 3: 131 197 12
x23689:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1286

scanString$5:	; Assign input £temporary1286
x23692:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x23695:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1287 input
x23700:	mov al, [bp + 12]	; 3: 138 70 12
x23703:	and ax, 255	; 3: 37 255 0
x23706:	cmp al, 0	; 2: 60 0
x23708:	jge scanString$9	; 2: 125 4
x23710:	neg al	; 2: 246 216
x23712:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1287 6
x23714:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x23717:	mov word [bp + 15], scanString$11	; 5: 199 70 15 179 92
x23722:	mov [bp + 17], bp	; 3: 137 110 17
x23725:	add bp, 15	; 3: 131 197 15
x23728:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1288

scanString$13:	; Equal 20 £temporary1288 0
x23731:	cmp bx, 0	; 3: 131 251 0
x23734:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x23736:	mov word [bp + 15], scanString$16	; 5: 199 70 15 198 92
x23741:	mov [bp + 17], bp	; 3: 137 110 17
x23744:	add bp, 15	; 3: 131 197 15
x23747:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1289

scanString$18:	; Assign input £temporary1289
x23750:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x23753:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x23755:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x23759:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x23763:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x23767:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1293 input
x23769:	mov al, [bp + 12]	; 3: 138 70 12
x23772:	and ax, 255	; 3: 37 255 0
x23775:	cmp al, 0	; 2: 60 0
x23777:	jge scanString$24	; 2: 125 4
x23779:	neg al	; 2: 246 216
x23781:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1293 6
x23783:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x23786:	mov word [bp + 15], scanString$26	; 5: 199 70 15 248 92
x23791:	mov [bp + 17], bp	; 3: 137 110 17
x23794:	add bp, 15	; 3: 131 197 15
x23797:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1294

scanString$28:	; NotEqual 45 £temporary1294 0
x23800:	cmp bx, 0	; 3: 131 251 0
x23803:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1297 input
x23805:	mov al, [bp + 12]	; 3: 138 70 12
x23808:	and ax, 255	; 3: 37 255 0
x23811:	cmp al, 0	; 2: 60 0
x23813:	jge scanString$30	; 2: 125 4
x23815:	neg al	; 2: 246 216
x23817:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1297 -1
x23819:	cmp ax, -1	; 3: 131 248 255
x23822:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x23824:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x23828:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1302 index
x23830:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x23833:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1304 string £temporary1302
x23836:	mov si, [bp + 6]	; 3: 139 118 6
x23839:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1303 -> £temporary1304 £temporary1304 0

scanString$36:	; Assign £temporary1303 -> £temporary1304 input
x23841:	mov al, [bp + 12]	; 3: 138 70 12
x23844:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x23846:	mov word [bp + 15], scanString$39	; 5: 199 70 15 52 93
x23851:	mov [bp + 17], bp	; 3: 137 110 17
x23854:	add bp, 15	; 3: 131 197 15
x23857:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1305

scanString$41:	; Assign input £temporary1305
x23860:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x23863:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x23868:	inc word [g_inChars]	; 4: 255 6 8 92

scanString$44:	; Goto 22
x23872:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1308 string index
x23874:	mov si, [bp + 6]	; 3: 139 118 6
x23877:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1307 -> £temporary1308 £temporary1308 0

scanString$47:	; Assign £temporary1307 -> £temporary1308 0
x23880:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x23883:	inc word [g_inChars]	; 4: 255 6 8 92

scanString$49:	; Goto 126
x23887:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1310 precision
x23890:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x23893:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1310 0
x23896:	cmp ax, 0	; 3: 131 248 0
x23899:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1312 input
x23901:	mov al, [bp + 12]	; 3: 138 70 12
x23904:	and ax, 255	; 3: 37 255 0
x23907:	cmp al, 0	; 2: 60 0
x23909:	jge scanString$55	; 2: 125 4
x23911:	neg al	; 2: 246 216
x23913:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1312 6
x23915:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x23918:	mov word [bp + 15], scanString$57	; 5: 199 70 15 124 93
x23923:	mov [bp + 17], bp	; 3: 137 110 17
x23926:	add bp, 15	; 3: 131 197 15
x23929:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1313

scanString$59:	; NotEqual 76 £temporary1313 0
x23932:	cmp bx, 0	; 3: 131 251 0
x23935:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1316 input
x23937:	mov al, [bp + 12]	; 3: 138 70 12
x23940:	and ax, 255	; 3: 37 255 0
x23943:	cmp al, 0	; 2: 60 0
x23945:	jge scanString$61	; 2: 125 4
x23947:	neg al	; 2: 246 216
x23949:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1316 -1
x23951:	cmp ax, -1	; 3: 131 248 255
x23954:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x23956:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x23960:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1322 index
x23962:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x23965:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1324 string £temporary1322
x23968:	mov si, [bp + 6]	; 3: 139 118 6
x23971:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1323 -> £temporary1324 £temporary1324 0

scanString$67:	; Assign £temporary1323 -> £temporary1324 input
x23973:	mov al, [bp + 12]	; 3: 138 70 12
x23976:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x23978:	mov word [bp + 15], scanString$70	; 5: 199 70 15 184 93
x23983:	mov [bp + 17], bp	; 3: 137 110 17
x23986:	add bp, 15	; 3: 131 197 15
x23989:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1325

scanString$72:	; Assign input £temporary1325
x23992:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x23995:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x24000:	inc word [g_inChars]	; 4: 255 6 8 92

scanString$75:	; Goto 50
x24004:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x24006:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x24010:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1329 string index
x24014:	mov si, [bp + 6]	; 3: 139 118 6
x24017:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1328 -> £temporary1329 £temporary1329 0

scanString$79:	; Assign £temporary1328 -> £temporary1329 0
x24020:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x24023:	inc word [g_inChars]	; 4: 255 6 8 92

scanString$81:	; Goto 126
x24027:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x24030:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x24034:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1332 input
x24036:	mov al, [bp + 12]	; 3: 138 70 12
x24039:	and ax, 255	; 3: 37 255 0
x24042:	cmp al, 0	; 2: 60 0
x24044:	jge scanString$85	; 2: 125 4
x24046:	neg al	; 2: 246 216
x24048:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1332 6
x24050:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x24053:	mov word [bp + 15], scanString$87	; 5: 199 70 15 3 94
x24058:	mov [bp + 17], bp	; 3: 137 110 17
x24061:	add bp, 15	; 3: 131 197 15
x24064:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1333

scanString$89:	; NotEqual 101 £temporary1333 0
x24067:	cmp bx, 0	; 3: 131 251 0
x24070:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1336 input
x24072:	mov al, [bp + 12]	; 3: 138 70 12
x24075:	and ax, 255	; 3: 37 255 0
x24078:	cmp al, 0	; 2: 60 0
x24080:	jge scanString$91	; 2: 125 4
x24082:	neg al	; 2: 246 216
x24084:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1336 -1
x24086:	cmp ax, -1	; 3: 131 248 255
x24089:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x24091:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x24095:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x24097:	mov word [bp + 15], scanString$95	; 5: 199 70 15 47 94
x24102:	mov [bp + 17], bp	; 3: 137 110 17
x24105:	add bp, 15	; 3: 131 197 15
x24108:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1341

scanString$97:	; Assign input £temporary1341
x24111:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x24114:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x24119:	inc word [g_inChars]	; 4: 255 6 8 92

scanString$100:	; Goto 83
x24123:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x24125:	inc word [g_inChars]	; 4: 255 6 8 92

scanString$102:	; Goto 126
x24129:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1344 precision
x24131:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x24134:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1344 0
x24137:	cmp ax, 0	; 3: 131 248 0
x24140:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1346 input
x24142:	mov al, [bp + 12]	; 3: 138 70 12
x24145:	and ax, 255	; 3: 37 255 0
x24148:	cmp al, 0	; 2: 60 0
x24150:	jge scanString$108	; 2: 125 4
x24152:	neg al	; 2: 246 216
x24154:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1346 6
x24156:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x24159:	mov word [bp + 15], scanString$110	; 5: 199 70 15 109 94
x24164:	mov [bp + 17], bp	; 3: 137 110 17
x24167:	add bp, 15	; 3: 131 197 15
x24170:	nop	; 1: 144
x24171:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1347

scanString$112:	; NotEqual 124 £temporary1347 0
x24173:	cmp bx, 0	; 3: 131 251 0
x24176:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1350 input
x24178:	mov al, [bp + 12]	; 3: 138 70 12
x24181:	and ax, 255	; 3: 37 255 0
x24184:	cmp al, 0	; 2: 60 0
x24186:	jge scanString$114	; 2: 125 4
x24188:	neg al	; 2: 246 216
x24190:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1350 -1
x24192:	cmp ax, -1	; 3: 131 248 255
x24195:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x24197:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x24201:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x24203:	mov word [bp + 15], scanString$118	; 5: 199 70 15 153 94
x24208:	mov [bp + 17], bp	; 3: 137 110 17
x24211:	add bp, 15	; 3: 131 197 15
x24214:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1356

scanString$120:	; Assign input £temporary1356
x24217:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x24220:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x24225:	inc word [g_inChars]	; 4: 255 6 8 92

scanString$123:	; Goto 103
x24229:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x24231:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x24235:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x24237:	inc word [g_inChars]	; 4: 255 6 8 92

scanString$126:	; Equal 128 found 0
x24241:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x24245:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x24247:	inc word [g_inCount]	; 4: 255 6 6 92

scanString$128:	; Return 0
x24251:	mov ax, [bp]	; 3: 139 70 0
x24254:	mov di, [bp + 4]	; 3: 139 126 4
x24257:	mov bp, [bp + 2]	; 3: 139 110 2
x24260:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x24262:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x24266:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x24268:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x24272:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x24274:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x24278:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x24280:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x24284:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x24286:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x24290:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x24292:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x24296:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary439 1
x24298:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x24301:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary439 0
x24303:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary439

isspace$10:	; Return £temporary439
x24306:	mov ax, [bp]	; 3: 139 70 0
x24309:	mov di, [bp + 4]	; 3: 139 126 4
x24312:	mov bp, [bp + 2]	; 3: 139 110 2
x24315:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x24317:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x24325:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x24330:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x24335:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 29 95
x24340:	mov [bp + 18], bp	; 3: 137 110 18
x24343:	add bp, 16	; 3: 131 197 16
x24346:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1419

scanLongInt$7:	; Assign input £temporary1419
x24349:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1420 input
x24352:	mov al, [bp + 16]	; 3: 138 70 16
x24355:	and ax, 255	; 3: 37 255 0
x24358:	cmp al, 0	; 2: 60 0
x24360:	jge scanLongInt$10	; 2: 125 4
x24362:	neg al	; 2: 246 216
x24364:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1420 6
x24366:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x24369:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 63 95
x24374:	mov [bp + 19], bp	; 3: 137 110 19
x24377:	add bp, 17	; 3: 131 197 17
x24380:	nop	; 1: 144
x24381:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1421

scanLongInt$14:	; Equal 21 £temporary1421 0
x24383:	cmp bx, 0	; 3: 131 251 0
x24386:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x24388:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 82 95
x24393:	mov [bp + 19], bp	; 3: 137 110 19
x24396:	add bp, 17	; 3: 131 197 17
x24399:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1422

scanLongInt$19:	; Assign input £temporary1422
x24402:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x24405:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x24407:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x24411:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x24413:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 107 95
x24418:	mov [bp + 19], bp	; 3: 137 110 19
x24421:	add bp, 17	; 3: 131 197 17
x24424:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1425

scanLongInt$26:	; Assign input £temporary1425
x24427:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x24430:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x24432:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x24436:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x24438:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x24443:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 137 95
x24448:	mov [bp + 19], bp	; 3: 137 110 19
x24451:	add bp, 17	; 3: 131 197 17
x24454:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1427

scanLongInt$34:	; Assign input £temporary1427
x24457:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x24460:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x24464:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x24466:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x24470:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x24472:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 166 95
x24477:	mov [bp + 19], bp	; 3: 137 110 19
x24480:	add bp, 17	; 3: 131 197 17
x24483:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1430

scanLongInt$41:	; Assign input £temporary1430
x24486:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1431 input
x24489:	mov al, [bp + 16]	; 3: 138 70 16
x24492:	and ax, 255	; 3: 37 255 0
x24495:	cmp al, 0	; 2: 60 0
x24497:	jge scanLongInt$44	; 2: 125 4
x24499:	neg al	; 2: 246 216
x24501:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1431 6
x24503:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x24506:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 200 95
x24511:	mov [bp + 19], bp	; 3: 137 110 19
x24514:	add bp, 17	; 3: 131 197 17
x24517:	jmp tolower	; 3: 233 15 197

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1432

scanLongInt$48:	; NotEqual 56 £temporary1432 120
x24520:	cmp bx, 120	; 3: 131 251 120
x24523:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x24525:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x24530:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 224 95
x24535:	mov [bp + 19], bp	; 3: 137 110 19
x24538:	add bp, 17	; 3: 131 197 17
x24541:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1434

scanLongInt$54:	; Assign input £temporary1434
x24544:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x24547:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x24549:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x24554:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x24556:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x24561:	mov al, [bp + 16]	; 3: 138 70 16
x24564:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x24567:	mov ax, [bp + 6]	; 3: 139 70 6
x24570:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x24573:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 11 96
x24578:	mov [bp + 19], bp	; 3: 137 110 19
x24581:	add bp, 17	; 3: 131 197 17
x24584:	jmp @1636$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1435

scanLongInt$65:	; Equal 82 £temporary1435 0
x24587:	cmp bx, 0	; 3: 131 251 0
x24590:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1436 base
x24592:	mov bx, [bp + 6]	; 3: 139 94 6
x24595:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x24602:	cmp bx, 0	; 3: 131 251 0
x24605:	jge scanLongInt$67	; 2: 125 5
x24607:	neg bx	; 2: 247 219
x24609:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1436
x24612:	mov eax, [bp + 8]	; 4: 102 139 70 8
x24616:	xor edx, edx	; 3: 102 49 210
x24619:	imul ebx	; 3: 102 247 235
x24622:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x24626:	mov al, [bp + 16]	; 3: 138 70 16
x24629:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x24632:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 70 96
x24637:	mov [bp + 19], bp	; 3: 137 110 19
x24640:	add bp, 17	; 3: 131 197 17
x24643:	jmp @1672$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1438

scanLongInt$73:	; IntegralToIntegral £temporary1439 £temporary1438
x24646:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x24653:	cmp bx, 0	; 3: 131 251 0
x24656:	jge scanLongInt$74	; 2: 125 5
x24658:	neg bx	; 2: 247 219
x24660:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1439
x24663:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x24667:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 105 96
x24672:	mov [bp + 19], bp	; 3: 137 110 19
x24675:	add bp, 17	; 3: 131 197 17
x24678:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1441

scanLongInt$79:	; Assign input £temporary1441
x24681:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x24684:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x24689:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x24692:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x24696:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1443 longValue
x24698:	mov eax, [bp + 8]	; 4: 102 139 70 8
x24702:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1443
x24705:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x24709:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x24713:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x24715:	inc word [g_inCount]	; 4: 255 6 6 92

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x24719:	mov al, [bp + 16]	; 3: 138 70 16
x24722:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x24725:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 163 96
x24730:	mov [bp + 19], bp	; 3: 137 110 19
x24733:	add bp, 17	; 3: 131 197 17
x24736:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x24739:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x24743:	mov ax, [bp]	; 3: 139 70 0
x24746:	mov di, [bp + 4]	; 3: 139 126 4
x24749:	mov bp, [bp + 2]	; 3: 139 110 2
x24752:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@1636$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1636$isDigitInBase$1:	; IntegralToIntegral £temporary1367 c
x24754:	mov al, [bp + 6]	; 3: 138 70 6
x24757:	and ax, 255	; 3: 37 255 0
x24760:	cmp al, 0	; 2: 60 0
x24762:	jge @1636$isDigitInBase$2	; 2: 125 4
x24764:	neg al	; 2: 246 216
x24766:	neg ax	; 2: 247 216

@1636$isDigitInBase$2:	; Parameter 9 £temporary1367 6
x24768:	mov [bp + 15], ax	; 3: 137 70 15

@1636$isDigitInBase$3:	; Call 9 isdigit 0
x24771:	mov word [bp + 9], @1636$isDigitInBase$4	; 5: 199 70 9 209 96
x24776:	mov [bp + 11], bp	; 3: 137 110 11
x24779:	add bp, 9	; 3: 131 197 9
x24782:	jmp isdigit	; 3: 233 44 202

@1636$isDigitInBase$4:	; PostCall 9

@1636$isDigitInBase$5:	; GetReturnValue £temporary1368

@1636$isDigitInBase$6:	; Equal 17 £temporary1368 0
x24785:	cmp bx, 0	; 3: 131 251 0
x24788:	je @1636$isDigitInBase$17	; 2: 116 52

@1636$isDigitInBase$7:	; BinarySubtract £temporary1369 c 48
x24790:	mov al, [bp + 6]	; 3: 138 70 6
x24793:	sub al, 48	; 2: 44 48

@1636$isDigitInBase$8:	; IntegralToIntegral £temporary1370 £temporary1369
x24795:	and ax, 255	; 3: 37 255 0
x24798:	cmp al, 0	; 2: 60 0
x24800:	jge @1636$isDigitInBase$9	; 2: 125 4
x24802:	neg al	; 2: 246 216
x24804:	neg ax	; 2: 247 216

@1636$isDigitInBase$9:	; Assign value £temporary1370
x24806:	mov [bp + 9], ax	; 3: 137 70 9

@1636$isDigitInBase$10:	; SignedLessThan 14 value 0
x24809:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x24813:	jl @1636$isDigitInBase$14	; 2: 124 13

@1636$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x24815:	mov ax, [bp + 7]	; 3: 139 70 7
x24818:	cmp [bp + 9], ax	; 3: 57 70 9
x24821:	jge @1636$isDigitInBase$14	; 2: 125 5

@1636$isDigitInBase$12:	; Assign £temporary1374 1
x24823:	mov bx, 1	; 3: 187 1 0

@1636$isDigitInBase$13:	; Goto 15
x24826:	jmp @1636$isDigitInBase$15	; 2: 235 3

@1636$isDigitInBase$14:	; Assign £temporary1374 0
x24828:	mov bx, 0	; 3: 187 0 0

@1636$isDigitInBase$15:	; SetReturnValue £temporary1374

@1636$isDigitInBase$16:	; Return £temporary1374
x24831:	mov ax, [bp]	; 3: 139 70 0
x24834:	mov di, [bp + 4]	; 3: 139 126 4
x24837:	mov bp, [bp + 2]	; 3: 139 110 2
x24840:	jmp ax	; 2: 255 224

@1636$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1636$isDigitInBase$18:	; IntegralToIntegral £temporary1375 c
x24842:	mov al, [bp + 6]	; 3: 138 70 6
x24845:	and ax, 255	; 3: 37 255 0
x24848:	cmp al, 0	; 2: 60 0
x24850:	jge @1636$isDigitInBase$19	; 2: 125 4
x24852:	neg al	; 2: 246 216
x24854:	neg ax	; 2: 247 216

@1636$isDigitInBase$19:	; Parameter 9 £temporary1375 6
x24856:	mov [bp + 15], ax	; 3: 137 70 15

@1636$isDigitInBase$20:	; Call 9 islower 0
x24859:	mov word [bp + 9], @1636$isDigitInBase$21	; 5: 199 70 9 41 97
x24864:	mov [bp + 11], bp	; 3: 137 110 11
x24867:	add bp, 9	; 3: 131 197 9
x24870:	jmp islower	; 3: 233 165 0

@1636$isDigitInBase$21:	; PostCall 9

@1636$isDigitInBase$22:	; GetReturnValue £temporary1376

@1636$isDigitInBase$23:	; Equal 34 £temporary1376 0
x24873:	cmp bx, 0	; 3: 131 251 0
x24876:	je @1636$isDigitInBase$34	; 2: 116 55

@1636$isDigitInBase$24:	; BinarySubtract £temporary1377 c 97
x24878:	mov al, [bp + 6]	; 3: 138 70 6
x24881:	sub al, 97	; 2: 44 97

@1636$isDigitInBase$25:	; IntegralToIntegral £temporary1378 £temporary1377
x24883:	and ax, 255	; 3: 37 255 0
x24886:	cmp al, 0	; 2: 60 0
x24888:	jge @1636$isDigitInBase$26	; 2: 125 4
x24890:	neg al	; 2: 246 216
x24892:	neg ax	; 2: 247 216

@1636$isDigitInBase$26:	; BinaryAdd value £temporary1378 10
x24894:	add ax, 10	; 3: 131 192 10
x24897:	mov [bp + 9], ax	; 3: 137 70 9

@1636$isDigitInBase$27:	; SignedLessThan 31 value 0
x24900:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x24904:	jl @1636$isDigitInBase$31	; 2: 124 13

@1636$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x24906:	mov ax, [bp + 7]	; 3: 139 70 7
x24909:	cmp [bp + 9], ax	; 3: 57 70 9
x24912:	jge @1636$isDigitInBase$31	; 2: 125 5

@1636$isDigitInBase$29:	; Assign £temporary1383 1
x24914:	mov bx, 1	; 3: 187 1 0

@1636$isDigitInBase$30:	; Goto 32
x24917:	jmp @1636$isDigitInBase$32	; 2: 235 3

@1636$isDigitInBase$31:	; Assign £temporary1383 0
x24919:	mov bx, 0	; 3: 187 0 0

@1636$isDigitInBase$32:	; SetReturnValue £temporary1383

@1636$isDigitInBase$33:	; Return £temporary1383
x24922:	mov ax, [bp]	; 3: 139 70 0
x24925:	mov di, [bp + 4]	; 3: 139 126 4
x24928:	mov bp, [bp + 2]	; 3: 139 110 2
x24931:	jmp ax	; 2: 255 224

@1636$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1636$isDigitInBase$35:	; IntegralToIntegral £temporary1384 c
x24933:	mov al, [bp + 6]	; 3: 138 70 6
x24936:	and ax, 255	; 3: 37 255 0
x24939:	cmp al, 0	; 2: 60 0
x24941:	jge @1636$isDigitInBase$36	; 2: 125 4
x24943:	neg al	; 2: 246 216
x24945:	neg ax	; 2: 247 216

@1636$isDigitInBase$36:	; Parameter 9 £temporary1384 6
x24947:	mov [bp + 15], ax	; 3: 137 70 15

@1636$isDigitInBase$37:	; Call 9 isupper 0
x24950:	mov word [bp + 9], @1636$isDigitInBase$38	; 5: 199 70 9 132 97
x24955:	mov [bp + 11], bp	; 3: 137 110 11
x24958:	add bp, 9	; 3: 131 197 9
x24961:	jmp isupper	; 3: 233 69 188

@1636$isDigitInBase$38:	; PostCall 9

@1636$isDigitInBase$39:	; GetReturnValue £temporary1385

@1636$isDigitInBase$40:	; Equal 51 £temporary1385 0
x24964:	cmp bx, 0	; 3: 131 251 0
x24967:	je @1636$isDigitInBase$51	; 2: 116 55

@1636$isDigitInBase$41:	; BinarySubtract £temporary1386 c 65
x24969:	mov al, [bp + 6]	; 3: 138 70 6
x24972:	sub al, 65	; 2: 44 65

@1636$isDigitInBase$42:	; IntegralToIntegral £temporary1387 £temporary1386
x24974:	and ax, 255	; 3: 37 255 0
x24977:	cmp al, 0	; 2: 60 0
x24979:	jge @1636$isDigitInBase$43	; 2: 125 4
x24981:	neg al	; 2: 246 216
x24983:	neg ax	; 2: 247 216

@1636$isDigitInBase$43:	; BinaryAdd value £temporary1387 10
x24985:	add ax, 10	; 3: 131 192 10
x24988:	mov [bp + 9], ax	; 3: 137 70 9

@1636$isDigitInBase$44:	; SignedLessThan 48 value 0
x24991:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x24995:	jl @1636$isDigitInBase$48	; 2: 124 13

@1636$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x24997:	mov ax, [bp + 7]	; 3: 139 70 7
x25000:	cmp [bp + 9], ax	; 3: 57 70 9
x25003:	jge @1636$isDigitInBase$48	; 2: 125 5

@1636$isDigitInBase$46:	; Assign £temporary1392 1
x25005:	mov bx, 1	; 3: 187 1 0

@1636$isDigitInBase$47:	; Goto 49
x25008:	jmp @1636$isDigitInBase$49	; 2: 235 3

@1636$isDigitInBase$48:	; Assign £temporary1392 0
x25010:	mov bx, 0	; 3: 187 0 0

@1636$isDigitInBase$49:	; SetReturnValue £temporary1392

@1636$isDigitInBase$50:	; Return £temporary1392
x25013:	mov ax, [bp]	; 3: 139 70 0
x25016:	mov di, [bp + 4]	; 3: 139 126 4
x25019:	mov bp, [bp + 2]	; 3: 139 110 2
x25022:	jmp ax	; 2: 255 224

@1636$isDigitInBase$51:	; SetReturnValue 0
x25024:	mov bx, 0	; 3: 187 0 0

@1636$isDigitInBase$52:	; Return 0
x25027:	mov ax, [bp]	; 3: 139 70 0
x25030:	mov di, [bp + 4]	; 3: 139 126 4
x25033:	mov bp, [bp + 2]	; 3: 139 110 2
x25036:	jmp ax	; 2: 255 224

@1636$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x25038:	mov word [bp + 8], islower$2	; 5: 199 70 8 220 97
x25043:	mov [bp + 10], bp	; 3: 137 110 10
x25046:	add bp, 8	; 3: 131 197 8
x25049:	jmp localeconv	; 3: 233 88 188

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary348

islower$4:	; Assign localeConvPtr £temporary348
x25052:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x25055:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x25059:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary350 -> localeConvPtr localeConvPtr 12
x25061:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary350 -> localeConvPtr 6
x25064:	mov ax, [si + 12]	; 3: 139 68 12
x25067:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x25070:	mov ax, [bp + 6]	; 3: 139 70 6
x25073:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x25076:	mov word [bp + 10], islower$11	; 5: 199 70 10 2 98
x25081:	mov [bp + 12], bp	; 3: 137 110 12
x25084:	add bp, 10	; 3: 131 197 10
x25087:	jmp strchr	; 3: 233 116 191

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary351

islower$13:	; Equal 16 £temporary351 0
x25090:	cmp bx, 0	; 3: 131 251 0
x25093:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary353 1
x25095:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x25098:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary353 0
x25100:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary353

islower$18:	; Return £temporary353
x25103:	mov ax, [bp]	; 3: 139 70 0
x25106:	mov di, [bp + 4]	; 3: 139 126 4
x25109:	mov bp, [bp + 2]	; 3: 139 110 2
x25112:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x25114:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x25118:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x25120:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x25124:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary357 1
x25126:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x25129:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary357 0
x25131:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary357

islower$25:	; Return £temporary357
x25134:	mov ax, [bp]	; 3: 139 70 0
x25137:	mov di, [bp + 4]	; 3: 139 126 4
x25140:	mov bp, [bp + 2]	; 3: 139 110 2
x25143:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@1672$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1672$digitToValue$1:	; IntegralToIntegral £temporary1399 c
x25145:	mov al, [bp + 6]	; 3: 138 70 6
x25148:	and ax, 255	; 3: 37 255 0
x25151:	cmp al, 0	; 2: 60 0
x25153:	jge @1672$digitToValue$2	; 2: 125 4
x25155:	neg al	; 2: 246 216
x25157:	neg ax	; 2: 247 216

@1672$digitToValue$2:	; Parameter 7 £temporary1399 6
x25159:	mov [bp + 13], ax	; 3: 137 70 13

@1672$digitToValue$3:	; Call 7 isdigit 0
x25162:	mov word [bp + 7], @1672$digitToValue$4	; 5: 199 70 7 88 98
x25167:	mov [bp + 9], bp	; 3: 137 110 9
x25170:	add bp, 7	; 3: 131 197 7
x25173:	jmp isdigit	; 3: 233 165 200

@1672$digitToValue$4:	; PostCall 7

@1672$digitToValue$5:	; GetReturnValue £temporary1400

@1672$digitToValue$6:	; Equal 11 £temporary1400 0
x25176:	cmp bx, 0	; 3: 131 251 0
x25179:	je @1672$digitToValue$11	; 2: 116 30

@1672$digitToValue$7:	; BinarySubtract £temporary1401 c 48
x25181:	mov bl, [bp + 6]	; 3: 138 94 6
x25184:	sub bl, 48	; 3: 128 235 48

@1672$digitToValue$8:	; IntegralToIntegral £temporary1402 £temporary1401
x25187:	and bx, 255	; 4: 129 227 255 0
x25191:	cmp bl, 0	; 3: 128 251 0
x25194:	jge @1672$digitToValue$9	; 2: 125 4
x25196:	neg bl	; 2: 246 219
x25198:	neg bx	; 2: 247 219

@1672$digitToValue$9:	; SetReturnValue £temporary1402

@1672$digitToValue$10:	; Return £temporary1402
x25200:	mov ax, [bp]	; 3: 139 70 0
x25203:	mov di, [bp + 4]	; 3: 139 126 4
x25206:	mov bp, [bp + 2]	; 3: 139 110 2
x25209:	jmp ax	; 2: 255 224

@1672$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1672$digitToValue$12:	; IntegralToIntegral £temporary1403 c
x25211:	mov al, [bp + 6]	; 3: 138 70 6
x25214:	and ax, 255	; 3: 37 255 0
x25217:	cmp al, 0	; 2: 60 0
x25219:	jge @1672$digitToValue$13	; 2: 125 4
x25221:	neg al	; 2: 246 216
x25223:	neg ax	; 2: 247 216

@1672$digitToValue$13:	; Parameter 7 £temporary1403 6
x25225:	mov [bp + 13], ax	; 3: 137 70 13

@1672$digitToValue$14:	; Call 7 islower 0
x25228:	mov word [bp + 7], @1672$digitToValue$15	; 5: 199 70 7 154 98
x25233:	mov [bp + 9], bp	; 3: 137 110 9
x25236:	add bp, 7	; 3: 131 197 7
x25239:	jmp islower	; 3: 233 52 255

@1672$digitToValue$15:	; PostCall 7

@1672$digitToValue$16:	; GetReturnValue £temporary1404

@1672$digitToValue$17:	; Equal 23 £temporary1404 0
x25242:	cmp bx, 0	; 3: 131 251 0
x25245:	je @1672$digitToValue$23	; 2: 116 33

@1672$digitToValue$18:	; BinarySubtract £temporary1405 c 97
x25247:	mov bl, [bp + 6]	; 3: 138 94 6
x25250:	sub bl, 97	; 3: 128 235 97

@1672$digitToValue$19:	; IntegralToIntegral £temporary1406 £temporary1405
x25253:	and bx, 255	; 4: 129 227 255 0
x25257:	cmp bl, 0	; 3: 128 251 0
x25260:	jge @1672$digitToValue$20	; 2: 125 4
x25262:	neg bl	; 2: 246 219
x25264:	neg bx	; 2: 247 219

@1672$digitToValue$20:	; BinaryAdd £temporary1407 £temporary1406 10
x25266:	add bx, 10	; 3: 131 195 10

@1672$digitToValue$21:	; SetReturnValue £temporary1407

@1672$digitToValue$22:	; Return £temporary1407
x25269:	mov ax, [bp]	; 3: 139 70 0
x25272:	mov di, [bp + 4]	; 3: 139 126 4
x25275:	mov bp, [bp + 2]	; 3: 139 110 2
x25278:	jmp ax	; 2: 255 224

@1672$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1672$digitToValue$24:	; IntegralToIntegral £temporary1408 c
x25280:	mov al, [bp + 6]	; 3: 138 70 6
x25283:	and ax, 255	; 3: 37 255 0
x25286:	cmp al, 0	; 2: 60 0
x25288:	jge @1672$digitToValue$25	; 2: 125 4
x25290:	neg al	; 2: 246 216
x25292:	neg ax	; 2: 247 216

@1672$digitToValue$25:	; Parameter 7 £temporary1408 6
x25294:	mov [bp + 13], ax	; 3: 137 70 13

@1672$digitToValue$26:	; Call 7 isupper 0
x25297:	mov word [bp + 7], @1672$digitToValue$27	; 5: 199 70 7 223 98
x25302:	mov [bp + 9], bp	; 3: 137 110 9
x25305:	add bp, 7	; 3: 131 197 7
x25308:	jmp isupper	; 3: 233 234 186

@1672$digitToValue$27:	; PostCall 7

@1672$digitToValue$28:	; GetReturnValue £temporary1409

@1672$digitToValue$29:	; Equal 35 £temporary1409 0
x25311:	cmp bx, 0	; 3: 131 251 0
x25314:	je @1672$digitToValue$35	; 2: 116 33

@1672$digitToValue$30:	; BinarySubtract £temporary1410 c 65
x25316:	mov bl, [bp + 6]	; 3: 138 94 6
x25319:	sub bl, 65	; 3: 128 235 65

@1672$digitToValue$31:	; IntegralToIntegral £temporary1411 £temporary1410
x25322:	and bx, 255	; 4: 129 227 255 0
x25326:	cmp bl, 0	; 3: 128 251 0
x25329:	jge @1672$digitToValue$32	; 2: 125 4
x25331:	neg bl	; 2: 246 219
x25333:	neg bx	; 2: 247 219

@1672$digitToValue$32:	; BinaryAdd £temporary1412 £temporary1411 10
x25335:	add bx, 10	; 3: 131 195 10

@1672$digitToValue$33:	; SetReturnValue £temporary1412

@1672$digitToValue$34:	; Return £temporary1412
x25338:	mov ax, [bp]	; 3: 139 70 0
x25341:	mov di, [bp + 4]	; 3: 139 126 4
x25344:	mov bp, [bp + 2]	; 3: 139 110 2
x25347:	jmp ax	; 2: 255 224

@1672$digitToValue$35:	; SetReturnValue 0
x25349:	mov bx, 0	; 3: 187 0 0

@1672$digitToValue$36:	; Return 0
x25352:	mov ax, [bp]	; 3: 139 70 0
x25355:	mov di, [bp + 4]	; 3: 139 126 4
x25358:	mov bp, [bp + 2]	; 3: 139 110 2
x25361:	jmp ax	; 2: 255 224

@1672$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x25363:	mov ax, [g_inStatus]	; 3: 161 227 86
x25366:	cmp ax, 0	; 3: 131 248 0
x25369:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x25371:	cmp ax, 1	; 3: 131 248 1
x25374:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x25376:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x25378:	dec word [g_inChars]	; 4: 255 14 8 92

unscanChar$5:	; Goto 7
x25382:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x25384:	dec word [g_inChars]	; 4: 255 14 8 92

unscanChar$7:	; Return 0
x25388:	mov ax, [bp]	; 3: 139 70 0
x25391:	mov di, [bp + 4]	; 3: 139 126 4
x25394:	mov bp, [bp + 2]	; 3: 139 110 2
x25397:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x25399:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x25407:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 77 99
x25412:	mov [bp + 18], bp	; 3: 137 110 18
x25415:	add bp, 16	; 3: 131 197 16
x25418:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1454

scanUnsignedLongInt$5:	; Assign input £temporary1454
x25421:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x25424:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1455 input
x25429:	mov al, [bp + 16]	; 3: 138 70 16
x25432:	and ax, 255	; 3: 37 255 0
x25435:	cmp al, 0	; 2: 60 0
x25437:	jge scanUnsignedLongInt$9	; 2: 125 4
x25439:	neg al	; 2: 246 216
x25441:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1455 6
x25443:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x25446:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 116 99
x25451:	mov [bp + 21], bp	; 3: 137 110 21
x25454:	add bp, 19	; 3: 131 197 19
x25457:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1456

scanUnsignedLongInt$13:	; Equal 20 £temporary1456 0
x25460:	cmp bx, 0	; 3: 131 251 0
x25463:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x25465:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 135 99
x25470:	mov [bp + 21], bp	; 3: 137 110 21
x25473:	add bp, 19	; 3: 131 197 19
x25476:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1457

scanUnsignedLongInt$18:	; Assign input £temporary1457
x25479:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x25482:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x25484:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x25488:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x25490:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 160 99
x25495:	mov [bp + 21], bp	; 3: 137 110 21
x25498:	add bp, 19	; 3: 131 197 19
x25501:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1460

scanUnsignedLongInt$25:	; Assign input £temporary1460
x25504:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x25507:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x25511:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x25513:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x25517:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x25519:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 189 99
x25524:	mov [bp + 21], bp	; 3: 137 110 21
x25527:	add bp, 19	; 3: 131 197 19
x25530:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1463

scanUnsignedLongInt$32:	; Assign input £temporary1463
x25533:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1464 input
x25536:	mov al, [bp + 16]	; 3: 138 70 16
x25539:	and ax, 255	; 3: 37 255 0
x25542:	cmp al, 0	; 2: 60 0
x25544:	jge scanUnsignedLongInt$35	; 2: 125 4
x25546:	neg al	; 2: 246 216
x25548:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1464 6
x25550:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x25553:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 223 99
x25558:	mov [bp + 21], bp	; 3: 137 110 21
x25561:	add bp, 19	; 3: 131 197 19
x25564:	jmp tolower	; 3: 233 248 192

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1465

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1465 120
x25567:	cmp bx, 120	; 3: 131 251 120
x25570:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x25572:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x25577:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 247 99
x25582:	mov [bp + 21], bp	; 3: 137 110 21
x25585:	add bp, 19	; 3: 131 197 19
x25588:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1467

scanUnsignedLongInt$45:	; Assign input £temporary1467
x25591:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x25594:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x25596:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x25601:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x25603:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x25608:	mov al, [bp + 16]	; 3: 138 70 16
x25611:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x25614:	mov ax, [bp + 6]	; 3: 139 70 6
x25617:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x25620:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 34 100
x25625:	mov [bp + 21], bp	; 3: 137 110 21
x25628:	add bp, 19	; 3: 131 197 19
x25631:	jmp @1636$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1468

scanUnsignedLongInt$56:	; Equal 73 £temporary1468 0
x25634:	cmp bx, 0	; 3: 131 251 0
x25637:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1469 base
x25639:	mov bx, [bp + 6]	; 3: 139 94 6
x25642:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1469
x25649:	mov eax, [bp + 8]	; 4: 102 139 70 8
x25653:	xor edx, edx	; 3: 102 49 210
x25656:	mul ebx	; 3: 102 247 227
x25659:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x25663:	mov al, [bp + 16]	; 3: 138 70 16
x25666:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x25669:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 83 100
x25674:	mov [bp + 21], bp	; 3: 137 110 21
x25677:	add bp, 19	; 3: 131 197 19
x25680:	jmp @1672$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1471

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1472 £temporary1471
x25683:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1472
x25690:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x25694:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x25699:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 113 100
x25704:	mov [bp + 21], bp	; 3: 137 110 21
x25707:	add bp, 19	; 3: 131 197 19
x25710:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1474

scanUnsignedLongInt$71:	; Assign input £temporary1474
x25713:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x25716:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x25718:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25722:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x25724:	inc word [g_inCount]	; 4: 255 6 6 92

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x25728:	mov al, [bp + 16]	; 3: 138 70 16
x25731:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x25734:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 148 100
x25739:	mov [bp + 21], bp	; 3: 137 110 21
x25742:	add bp, 19	; 3: 131 197 19
x25745:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x25748:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x25752:	mov ax, [bp]	; 3: 139 70 0
x25755:	mov di, [bp + 4]	; 3: 139 126 4
x25758:	mov bp, [bp + 2]	; 3: 139 110 2
x25761:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x25763:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x25768:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x25773:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x25775:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x25778:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x25780:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x25783:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 197 100
x25788:	mov [bp + 28], bp	; 3: 137 110 28
x25791:	add bp, 26	; 3: 131 197 26
x25794:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1485

scanLongDouble$10:	; Assign input £temporary1485
x25797:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1486 input
x25800:	mov al, [bp + 26]	; 3: 138 70 26
x25803:	and ax, 255	; 3: 37 255 0
x25806:	cmp al, 0	; 2: 60 0
x25808:	jge scanLongDouble$13	; 2: 125 4
x25810:	neg al	; 2: 246 216
x25812:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1486 6
x25814:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x25817:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 231 100
x25822:	mov [bp + 29], bp	; 3: 137 110 29
x25825:	add bp, 27	; 3: 131 197 27
x25828:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1487

scanLongDouble$17:	; Equal 24 £temporary1487 0
x25831:	cmp bx, 0	; 3: 131 251 0
x25834:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x25836:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 250 100
x25841:	mov [bp + 29], bp	; 3: 137 110 29
x25844:	add bp, 27	; 3: 131 197 27
x25847:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1488

scanLongDouble$22:	; Assign input £temporary1488
x25850:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x25853:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x25855:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x25859:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x25861:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 19 101
x25866:	mov [bp + 29], bp	; 3: 137 110 29
x25869:	add bp, 27	; 3: 131 197 27
x25872:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1491

scanLongDouble$29:	; Assign input £temporary1491
x25875:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x25878:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x25880:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x25884:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x25886:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x25891:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 49 101
x25896:	mov [bp + 29], bp	; 3: 137 110 29
x25899:	add bp, 27	; 3: 131 197 27
x25902:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1493

scanLongDouble$37:	; Assign input £temporary1493
x25905:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1494 input
x25908:	mov al, [bp + 26]	; 3: 138 70 26
x25911:	and ax, 255	; 3: 37 255 0
x25914:	cmp al, 0	; 2: 60 0
x25916:	jge scanLongDouble$40	; 2: 125 4
x25918:	neg al	; 2: 246 216
x25920:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1494 6
x25922:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x25925:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 83 101
x25930:	mov [bp + 29], bp	; 3: 137 110 29
x25933:	add bp, 27	; 3: 131 197 27
x25936:	jmp isdigit	; 3: 233 170 197

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1495

scanLongDouble$44:	; Equal 60 £temporary1495 0
x25939:	cmp bx, 0	; 3: 131 251 0
x25942:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x25944:	fld qword [float8$10.0#]	; 4: 221 6 173 36

scanLongDouble$46:	; PushFloat value
x25948:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1496 10.0 value
x25951:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1497 input 48
x25953:	mov al, [bp + 26]	; 3: 138 70 26
x25956:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1499 £temporary1497
x25958:	and ax, 255	; 3: 37 255 0
x25961:	cmp al, 0	; 2: 60 0
x25963:	jge scanLongDouble$50	; 2: 125 4
x25965:	neg al	; 2: 246 216
x25967:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1498 £temporary1499
x25969:	mov [container2bytes#], ax	; 3: 163 16 27
x25972:	fild word [container2bytes#]	; 4: 223 6 16 27

scanLongDouble$51:	; BinaryAdd £temporary1500 £temporary1496 £temporary1498
x25976:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x25978:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x25981:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 139 101
x25986:	mov [bp + 29], bp	; 3: 137 110 29
x25989:	add bp, 27	; 3: 131 197 27
x25992:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1501

scanLongDouble$57:	; Assign input £temporary1501
x25995:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x25998:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x26003:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x26005:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x26009:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x26011:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 169 101
x26016:	mov [bp + 29], bp	; 3: 137 110 29
x26019:	add bp, 27	; 3: 131 197 27
x26022:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1504

scanLongDouble$65:	; Assign input £temporary1504
x26025:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1505 input
x26028:	mov al, [bp + 26]	; 3: 138 70 26
x26031:	and ax, 255	; 3: 37 255 0
x26034:	cmp al, 0	; 2: 60 0
x26036:	jge scanLongDouble$68	; 2: 125 4
x26038:	neg al	; 2: 246 216
x26040:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1505 6
x26042:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x26045:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 203 101
x26050:	mov [bp + 29], bp	; 3: 137 110 29
x26053:	add bp, 27	; 3: 131 197 27
x26056:	jmp isdigit	; 3: 233 50 197

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1506

scanLongDouble$72:	; Equal 92 £temporary1506 0
x26059:	cmp bx, 0	; 3: 131 251 0
x26062:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x26064:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x26067:	fld qword [float8$10.0#]	; 4: 221 6 173 36

scanLongDouble$75:	; SignedDivide £temporary1507 factor 10.0
x26071:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x26073:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x26076:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x26079:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1508 input 48
x26082:	mov al, [bp + 26]	; 3: 138 70 26
x26085:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1510 £temporary1508
x26087:	and ax, 255	; 3: 37 255 0
x26090:	cmp al, 0	; 2: 60 0
x26092:	jge scanLongDouble$81	; 2: 125 4
x26094:	neg al	; 2: 246 216
x26096:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1509 £temporary1510
x26098:	mov [container2bytes#], ax	; 3: 163 16 27
x26101:	fild word [container2bytes#]	; 4: 223 6 16 27

scanLongDouble$82:	; SignedMultiply £temporary1511 factor £temporary1509
x26105:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1512 value £temporary1511
x26107:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x26109:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x26112:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 14 102
x26117:	mov [bp + 29], bp	; 3: 137 110 29
x26120:	add bp, 27	; 3: 131 197 27
x26123:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1513

scanLongDouble$89:	; Assign input £temporary1513
x26126:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x26129:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x26134:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1515 input
x26136:	mov al, [bp + 26]	; 3: 138 70 26
x26139:	and ax, 255	; 3: 37 255 0
x26142:	cmp al, 0	; 2: 60 0
x26144:	jge scanLongDouble$94	; 2: 125 4
x26146:	neg al	; 2: 246 216
x26148:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1515 6
x26150:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x26153:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 55 102
x26158:	mov [bp + 29], bp	; 3: 137 110 29
x26161:	add bp, 27	; 3: 131 197 27
x26164:	jmp tolower	; 3: 233 160 190

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1516

scanLongDouble$98:	; NotEqual 118 £temporary1516 101
x26167:	cmp bx, 101	; 3: 131 251 101
x26170:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x26172:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x26177:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 79 102
x26182:	mov [bp + 29], bp	; 3: 137 110 29
x26185:	add bp, 27	; 3: 131 197 27
x26188:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1518

scanLongDouble$104:	; IntegralToFloating £temporary1519 £temporary1518
x26191:	mov [container4bytes#], ebx	; 5: 102 137 30 9 36
x26196:	fild dword [container4bytes#]	; 4: 219 6 9 36

scanLongDouble$105:	; PopFloat exponent
x26200:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x26203:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x26206:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x26209:	fld qword [float8$10.0#]	; 4: 221 6 173 36

scanLongDouble$109:	; Parameter 35 10.0 6
x26213:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x26216:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x26219:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x26222:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 124 102
x26227:	mov [bp + 45], bp	; 3: 137 110 45
x26230:	add bp, 43	; 3: 131 197 43
x26233:	jmp pow	; 3: 233 184 193

scanLongDouble$113:	; PostCall 35
x26236:	fstp qword [bp + 43]	; 3: 221 94 43
x26239:	fld qword [bp + 35]	; 3: 221 70 35
x26242:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1520

scanLongDouble$115:	; SignedMultiply £temporary1521 value £temporary1520
x26245:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x26247:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x26250:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x26252:	mov al, [bp + 26]	; 3: 138 70 26
x26255:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x26258:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 160 102
x26263:	mov [bp + 29], bp	; 3: 137 110 29
x26266:	add bp, 27	; 3: 131 197 27
x26269:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x26272:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26276:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x26278:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1523 value
x26281:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x26283:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x26286:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26290:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x26292:	inc word [g_inCount]	; 4: 255 6 6 92

scanLongDouble$128:	; PushFloat value
x26296:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x26299:	mov ax, [bp]	; 3: 139 70 0
x26302:	mov di, [bp + 4]	; 3: 139 126 4
x26305:	mov bp, [bp + 2]	; 3: 139 110 2
x26308:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

scanPattern:	; Assign index 0
x26310:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 16 scanChar 0
x26315:	mov word [bp + 16], scanPattern$3	; 5: 199 70 16 217 102
x26320:	mov [bp + 18], bp	; 3: 137 110 18
x26323:	add bp, 16	; 3: 131 197 16
x26326:	jmp scanChar	; 3: 233 49 245

scanPattern$3:	; PostCall 16

scanPattern$4:	; GetReturnValue £temporary1234

scanPattern$5:	; Assign input £temporary1234
x26329:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1235 input
x26332:	mov al, [bp + 16]	; 3: 138 70 16
x26335:	and ax, 255	; 3: 37 255 0
x26338:	cmp al, 0	; 2: 60 0
x26340:	jge scanPattern$8	; 2: 125 4
x26342:	neg al	; 2: 246 216
x26344:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 17 £temporary1235 6
x26346:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$9:	; Call 17 isspace 0
x26349:	mov word [bp + 17], scanPattern$10	; 5: 199 70 17 251 102
x26354:	mov [bp + 19], bp	; 3: 137 110 19
x26357:	add bp, 17	; 3: 131 197 17
x26360:	jmp isspace	; 3: 233 203 247

scanPattern$10:	; PostCall 17

scanPattern$11:	; GetReturnValue £temporary1236

scanPattern$12:	; Equal 19 £temporary1236 0
x26363:	cmp bx, 0	; 3: 131 251 0
x26366:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 17 scanChar 0
x26368:	mov word [bp + 17], scanPattern$15	; 5: 199 70 17 14 103
x26373:	mov [bp + 19], bp	; 3: 137 110 19
x26376:	add bp, 17	; 3: 131 197 17
x26379:	jmp scanChar	; 3: 233 252 244

scanPattern$15:	; PostCall 17

scanPattern$16:	; GetReturnValue £temporary1237

scanPattern$17:	; Assign input £temporary1237
x26382:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$18:	; Goto 6
x26385:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 55 string 0
x26387:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26391:	je scanPattern$55	; 4: 15 132 156 0

scanPattern$20:	; NotEqual 30 not 0
x26395:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x26399:	jne scanPattern$30	; 2: 117 48

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 17 pattern 6
x26401:	mov ax, [bp + 8]	; 3: 139 70 8
x26404:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$23:	; Parameter 17 size 8
x26407:	mov ax, [bp + 10]	; 3: 139 70 10
x26410:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$24:	; IntegralToIntegral £temporary1242 input
x26413:	mov al, [bp + 16]	; 3: 138 70 16
x26416:	and ax, 255	; 3: 37 255 0
x26419:	cmp al, 0	; 2: 60 0
x26421:	jge scanPattern$25	; 2: 125 4
x26423:	neg al	; 2: 246 216
x26425:	neg ax	; 2: 247 216

scanPattern$25:	; Parameter 17 £temporary1242 10
x26427:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$26:	; Call 17 strnchr 0
x26430:	mov word [bp + 17], scanPattern$27	; 5: 199 70 17 76 103
x26435:	mov [bp + 19], bp	; 3: 137 110 19
x26438:	add bp, 17	; 3: 131 197 17
x26441:	jmp @1486$strnchr	; 3: 233 245 0

scanPattern$27:	; PostCall 17

scanPattern$28:	; GetReturnValue £temporary1243

scanPattern$29:	; NotEqual 40 £temporary1243 0
x26444:	cmp bx, 0	; 3: 131 251 0
x26447:	jne scanPattern$40	; 2: 117 54

scanPattern$30:	; Equal 51 not 0
x26449:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x26453:	je scanPattern$51	; 2: 116 84

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$32:	; Parameter 17 pattern 6
x26455:	mov ax, [bp + 8]	; 3: 139 70 8
x26458:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$33:	; Parameter 17 size 8
x26461:	mov ax, [bp + 10]	; 3: 139 70 10
x26464:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$34:	; IntegralToIntegral £temporary1246 input
x26467:	mov al, [bp + 16]	; 3: 138 70 16
x26470:	and ax, 255	; 3: 37 255 0
x26473:	cmp al, 0	; 2: 60 0
x26475:	jge scanPattern$35	; 2: 125 4
x26477:	neg al	; 2: 246 216
x26479:	neg ax	; 2: 247 216

scanPattern$35:	; Parameter 17 £temporary1246 10
x26481:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$36:	; Call 17 strnchr 0
x26484:	mov word [bp + 17], scanPattern$37	; 5: 199 70 17 130 103
x26489:	mov [bp + 19], bp	; 3: 137 110 19
x26492:	add bp, 17	; 3: 131 197 17
x26495:	jmp @1486$strnchr	; 3: 233 191 0

scanPattern$37:	; PostCall 17

scanPattern$38:	; GetReturnValue £temporary1247

scanPattern$39:	; NotEqual 51 £temporary1247 0
x26498:	cmp bx, 0	; 3: 131 251 0
x26501:	jne scanPattern$51	; 2: 117 36

scanPattern$40:	; Assign £temporary1253 index
x26503:	mov ax, [bp + 14]	; 3: 139 70 14

scanPattern$41:	; Increment index
x26506:	inc word [bp + 14]	; 3: 255 70 14

scanPattern$42:	; BinaryAdd £temporary1255 string £temporary1253
x26509:	mov si, [bp + 6]	; 3: 139 118 6
x26512:	add si, ax	; 2: 1 198

scanPattern$43:	; Deref £temporary1254 -> £temporary1255 £temporary1255 0

scanPattern$44:	; Assign £temporary1254 -> £temporary1255 input
x26514:	mov al, [bp + 16]	; 3: 138 70 16
x26517:	mov [si], al	; 2: 136 4

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$46:	; Call 17 scanChar 0
x26519:	mov word [bp + 17], scanPattern$47	; 5: 199 70 17 165 103
x26524:	mov [bp + 19], bp	; 3: 137 110 19
x26527:	add bp, 17	; 3: 131 197 17
x26530:	jmp scanChar	; 3: 233 101 244

scanPattern$47:	; PostCall 17

scanPattern$48:	; GetReturnValue £temporary1256

scanPattern$49:	; Assign input £temporary1256
x26533:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$50:	; Goto 20
x26536:	jmp scanPattern$20	; 3: 233 112 255

scanPattern$51:	; BinaryAdd £temporary1258 string index
x26539:	mov si, [bp + 6]	; 3: 139 118 6
x26542:	add si, [bp + 14]	; 3: 3 118 14

scanPattern$52:	; Deref £temporary1257 -> £temporary1258 £temporary1258 0

scanPattern$53:	; Assign £temporary1257 -> £temporary1258 0
x26545:	mov byte [si], 0	; 3: 198 4 0

scanPattern$54:	; Goto 81
x26548:	jmp scanPattern$81	; 3: 233 127 0

scanPattern$55:	; NotEqual 65 not 0
x26551:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x26555:	jne scanPattern$65	; 2: 117 48

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$57:	; Parameter 17 pattern 6
x26557:	mov ax, [bp + 8]	; 3: 139 70 8
x26560:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Parameter 17 size 8
x26563:	mov ax, [bp + 10]	; 3: 139 70 10
x26566:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$59:	; IntegralToIntegral £temporary1261 input
x26569:	mov al, [bp + 16]	; 3: 138 70 16
x26572:	and ax, 255	; 3: 37 255 0
x26575:	cmp al, 0	; 2: 60 0
x26577:	jge scanPattern$60	; 2: 125 4
x26579:	neg al	; 2: 246 216
x26581:	neg ax	; 2: 247 216

scanPattern$60:	; Parameter 17 £temporary1261 10
x26583:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$61:	; Call 17 strnchr 0
x26586:	mov word [bp + 17], scanPattern$62	; 5: 199 70 17 232 103
x26591:	mov [bp + 19], bp	; 3: 137 110 19
x26594:	add bp, 17	; 3: 131 197 17
x26597:	nop	; 1: 144
x26598:	jmp @1486$strnchr	; 2: 235 89

scanPattern$62:	; PostCall 17

scanPattern$63:	; GetReturnValue £temporary1262

scanPattern$64:	; NotEqual 75 £temporary1262 0
x26600:	cmp bx, 0	; 3: 131 251 0
x26603:	jne scanPattern$75	; 2: 117 54

scanPattern$65:	; Equal 81 not 0
x26605:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x26609:	je scanPattern$81	; 2: 116 67

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$67:	; Parameter 17 pattern 6
x26611:	mov ax, [bp + 8]	; 3: 139 70 8
x26614:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$68:	; Parameter 17 size 8
x26617:	mov ax, [bp + 10]	; 3: 139 70 10
x26620:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$69:	; IntegralToIntegral £temporary1265 input
x26623:	mov al, [bp + 16]	; 3: 138 70 16
x26626:	and ax, 255	; 3: 37 255 0
x26629:	cmp al, 0	; 2: 60 0
x26631:	jge scanPattern$70	; 2: 125 4
x26633:	neg al	; 2: 246 216
x26635:	neg ax	; 2: 247 216

scanPattern$70:	; Parameter 17 £temporary1265 10
x26637:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$71:	; Call 17 strnchr 0
x26640:	mov word [bp + 17], scanPattern$72	; 5: 199 70 17 30 104
x26645:	mov [bp + 19], bp	; 3: 137 110 19
x26648:	add bp, 17	; 3: 131 197 17
x26651:	nop	; 1: 144
x26652:	jmp @1486$strnchr	; 2: 235 35

scanPattern$72:	; PostCall 17

scanPattern$73:	; GetReturnValue £temporary1266

scanPattern$74:	; NotEqual 81 £temporary1266 0
x26654:	cmp bx, 0	; 3: 131 251 0
x26657:	jne scanPattern$81	; 2: 117 19

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$76:	; Call 17 scanChar 0
x26659:	mov word [bp + 17], scanPattern$77	; 5: 199 70 17 49 104
x26664:	mov [bp + 19], bp	; 3: 137 110 19
x26667:	add bp, 17	; 3: 131 197 17
x26670:	jmp scanChar	; 3: 233 217 243

scanPattern$77:	; PostCall 17

scanPattern$78:	; GetReturnValue £temporary1272

scanPattern$79:	; Assign input £temporary1272
x26673:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$80:	; Goto 55
x26676:	jmp scanPattern$55	; 2: 235 129

scanPattern$81:	; Return 0
x26678:	mov ax, [bp]	; 3: 139 70 0
x26681:	mov di, [bp + 4]	; 3: 139 126 4
x26684:	mov bp, [bp + 2]	; 3: 139 110 2
x26687:	jmp ax	; 2: 255 224

scanPattern$82:	; FunctionEnd scanPattern

@1486$strnchr:	; IntegralToIntegral £temporary1225 i
x26689:	mov ax, [bp + 10]	; 3: 139 70 10
x26692:	cmp ax, 0	; 3: 131 248 0
x26695:	jge @1486$strnchr$1	; 2: 125 4
x26697:	neg ax	; 2: 247 216
x26699:	neg al	; 2: 246 216

@1486$strnchr$1:	; Assign c £temporary1225
x26701:	mov [bp + 14], al	; 3: 136 70 14

@1486$strnchr$2:	; Assign index 0
x26704:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@1486$strnchr$3:	; SignedGreaterThanEqual 14 index size
x26709:	mov ax, [bp + 8]	; 3: 139 70 8
x26712:	cmp [bp + 12], ax	; 3: 57 70 12
x26715:	jge @1486$strnchr$14	; 2: 125 35

@1486$strnchr$4:	; BinaryAdd £temporary1229 text index
x26717:	mov si, [bp + 6]	; 3: 139 118 6
x26720:	add si, [bp + 12]	; 3: 3 118 12

@1486$strnchr$5:	; Deref £temporary1228 -> £temporary1229 £temporary1229 0

@1486$strnchr$6:	; NotEqual 12 £temporary1228 -> £temporary1229 c
x26723:	mov al, [bp + 14]	; 3: 138 70 14
x26726:	cmp [si], al	; 2: 56 4
x26728:	jne @1486$strnchr$12	; 2: 117 17

@1486$strnchr$7:	; BinaryAdd £temporary1232 text index
x26730:	mov bx, [bp + 6]	; 3: 139 94 6
x26733:	add bx, [bp + 12]	; 3: 3 94 12

@1486$strnchr$8:	; Deref £temporary1231 -> £temporary1232 £temporary1232 0

@1486$strnchr$9:	; address £temporary1233 £temporary1231 -> £temporary1232

@1486$strnchr$10:	; SetReturnValue £temporary1233

@1486$strnchr$11:	; Return £temporary1233
x26736:	mov ax, [bp]	; 3: 139 70 0
x26739:	mov di, [bp + 4]	; 3: 139 126 4
x26742:	mov bp, [bp + 2]	; 3: 139 110 2
x26745:	jmp ax	; 2: 255 224

@1486$strnchr$12:	; Increment index
x26747:	inc word [bp + 12]	; 3: 255 70 12

@1486$strnchr$13:	; Goto 3
x26750:	jmp @1486$strnchr$3	; 2: 235 213

@1486$strnchr$14:	; SetReturnValue 0
x26752:	mov bx, 0	; 3: 187 0 0

@1486$strnchr$15:	; Return 0
x26755:	mov ax, [bp]	; 3: 139 70 0
x26758:	mov di, [bp + 4]	; 3: 139 126 4
x26761:	mov bp, [bp + 2]	; 3: 139 110 2
x26764:	jmp ax	; 2: 255 224

@1486$strnchr$16:	; FunctionEnd strnchr

fclose:	; Equal 20 stream 0
x26766:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26770:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x26772:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary988 -> stream stream 2
x26774:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary988 -> stream
x26777:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x26780:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x26782:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x26784:	mov word [errno], 11	; 6: 199 6 182 10 11 0

fclose$7:	; SetReturnValue -1
x26790:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x26793:	mov ax, [bp]	; 3: 139 70 0
x26796:	mov di, [bp + 4]	; 3: 139 126 4
x26799:	mov bp, [bp + 2]	; 3: 139 110 2
x26802:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary990 -> stream stream 27
x26804:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary990 -> stream 0
x26807:	cmp word [si + 27], 0	; 4: 131 124 27 0
x26811:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary991 -> stream stream 4
x26813:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary991 -> stream 6
x26816:	mov [bp + 14], si	; 3: 137 118 14
x26819:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x26823:	mov word [bp + 8], fclose$15	; 5: 199 70 8 213 104
x26828:	mov [bp + 10], bp	; 3: 137 110 10
x26831:	add bp, 8	; 3: 131 197 8
x26834:	nop	; 1: 144
x26835:	jmp remove	; 2: 235 120

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary994 -> stream stream 0
x26837:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary994 -> stream 0
x26840:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x26844:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x26847:	mov ax, [bp]	; 3: 139 70 0
x26850:	mov di, [bp + 4]	; 3: 139 126 4
x26853:	mov bp, [bp + 2]	; 3: 139 110 2
x26856:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x26858:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x26863:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x26867:	jge fclose$40	; 2: 125 74

fclose$22:	; UnsignedMultiply £temporary998 index 29
x26869:	mov ax, [bp + 8]	; 3: 139 70 8
x26872:	xor dx, dx	; 2: 49 210
x26874:	mul word [int2$29#]	; 4: 247 38 107 81

fclose$23:	; BinaryAdd £temporary999 g_fileArray £temporary998
x26878:	mov si, g_fileArray	; 3: 190 39 13
x26881:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary997 -> £temporary999 £temporary999 0

fclose$25:	; Equal 38 £temporary997.open$0 -> £temporary999 0
x26883:	cmp word [si], 0	; 3: 131 60 0
x26886:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; UnsignedMultiply £temporary1001 index 29
x26888:	mov ax, [bp + 8]	; 3: 139 70 8
x26891:	xor dx, dx	; 2: 49 210
x26893:	mul word [int2$29#]	; 4: 247 38 107 81

fclose$28:	; BinaryAdd £temporary1002 g_fileArray £temporary1001
x26897:	mov si, g_fileArray	; 3: 190 39 13
x26900:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary1000 -> £temporary1002 £temporary1002 0

fclose$30:	; address £temporary1003 £temporary1000 -> £temporary1002

fclose$31:	; Parameter 10 £temporary1003 6
x26902:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x26905:	mov word [bp + 10], fclose$33	; 5: 199 70 10 39 105
x26910:	mov [bp + 12], bp	; 3: 137 110 12
x26913:	add bp, 10	; 3: 131 197 10
x26916:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary1004

fclose$35:	; NotEqual 38 £temporary1004 -1
x26919:	cmp bx, -1	; 3: 131 251 255
x26922:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x26924:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x26927:	mov ax, [bp]	; 3: 139 70 0
x26930:	mov di, [bp + 4]	; 3: 139 126 4
x26933:	mov bp, [bp + 2]	; 3: 139 110 2
x26936:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x26938:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x26941:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x26943:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x26946:	mov ax, [bp]	; 3: 139 70 0
x26949:	mov di, [bp + 4]	; 3: 139 126 4
x26952:	mov bp, [bp + 2]	; 3: 139 110 2
x26955:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

remove:	; AssignRegister ah 65
x26957:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x26959:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x26961:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x26964:	int 33	; 2: 205 33

remove$4:	; Carry 7
x26966:	jc remove$7	; 2: 114 14

remove$5:	; SetReturnValue 0
x26968:	mov bx, 0	; 3: 187 0 0

remove$6:	; Return 0
x26971:	mov ax, [bp]	; 3: 139 70 0
x26974:	mov di, [bp + 4]	; 3: 139 126 4
x26977:	mov bp, [bp + 2]	; 3: 139 110 2
x26980:	jmp ax	; 2: 255 224

remove$7:	; Assign errno 18
x26982:	mov word [errno], 18	; 6: 199 6 182 10 18 0

remove$8:	; SetReturnValue -1
x26988:	mov bx, -1	; 3: 187 255 255

remove$9:	; Return -1
x26991:	mov ax, [bp]	; 3: 139 70 0
x26994:	mov di, [bp + 4]	; 3: 139 126 4
x26997:	mov bp, [bp + 2]	; 3: 139 110 2
x27000:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x27002:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x27004:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x27006:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x27009:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x27012:	int 33	; 2: 205 33

rename$5:	; Carry 8
x27014:	jc rename$8	; 2: 114 14

rename$6:	; SetReturnValue 0
x27016:	mov bx, 0	; 3: 187 0 0

rename$7:	; Return 0
x27019:	mov ax, [bp]	; 3: 139 70 0
x27022:	mov di, [bp + 4]	; 3: 139 126 4
x27025:	mov bp, [bp + 2]	; 3: 139 110 2
x27028:	jmp ax	; 2: 255 224

rename$8:	; Assign errno 19
x27030:	mov word [errno], 19	; 6: 199 6 182 10 19 0

rename$9:	; SetReturnValue -1
x27036:	mov bx, -1	; 3: 187 255 255

rename$10:	; Return -1
x27039:	mov ax, [bp]	; 3: 139 70 0
x27042:	mov di, [bp + 4]	; 3: 139 126 4
x27045:	mov bp, [bp + 2]	; 3: 139 110 2
x27048:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary1101 -> stream stream 2
x27050:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary1101 -> stream
x27053:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary1103 size nobj
x27056:	mov ax, [bp + 8]	; 3: 139 70 8
x27059:	xor dx, dx	; 2: 49 210
x27061:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary1103
x27064:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x27066:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x27068:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x27071:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x27073:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary1107 -> stream stream 21
x27075:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x27078:	mov word [errno], 13	; 6: 199 6 182 10 13 0

fwrite$10:	; Assign £temporary1107 -> stream errno
x27084:	mov ax, [errno]	; 3: 161 182 10
x27087:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x27090:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x27093:	mov ax, [bp]	; 3: 139 70 0
x27096:	mov di, [bp + 4]	; 3: 139 126 4
x27099:	mov bp, [bp + 2]	; 3: 139 110 2
x27102:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary1108 ax

fwrite$14:	; SetReturnValue £temporary1108
x27104:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary1108
x27106:	mov ax, [bp]	; 3: 139 70 0
x27109:	mov di, [bp + 4]	; 3: 139 126 4
x27112:	mov bp, [bp + 2]	; 3: 139 110 2
x27115:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary1092 -> stream stream 2
x27117:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary1092 -> stream
x27120:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary1094 size nobj
x27123:	mov ax, [bp + 8]	; 3: 139 70 8
x27126:	xor dx, dx	; 2: 49 210
x27128:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary1094
x27131:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x27133:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x27135:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x27138:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x27140:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary1098 -> stream stream 21
x27142:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x27145:	mov word [errno], 14	; 6: 199 6 182 10 14 0

fread$10:	; Assign £temporary1098 -> stream errno
x27151:	mov ax, [errno]	; 3: 161 182 10
x27154:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x27157:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x27160:	mov ax, [bp]	; 3: 139 70 0
x27163:	mov di, [bp + 4]	; 3: 139 126 4
x27166:	mov bp, [bp + 2]	; 3: 139 110 2
x27169:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary1099 ax

fread$14:	; SetReturnValue £temporary1099
x27171:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary1099
x27173:	mov ax, [bp]	; 3: 139 70 0
x27176:	mov di, [bp + 4]	; 3: 139 126 4
x27179:	mov bp, [bp + 2]	; 3: 139 110 2
x27182:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary213 memorySize
x27184:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary213 4
x27187:	add ax, 4	; 3: 131 192 4
x27190:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x27193:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x27198:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x27203:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x27208:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x27213:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x27218:	mov ax, [g_firstBlockPtr]	; 3: 161 190 107
x27221:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x27224:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27228:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x27230:	mov ax, [stderr]	; 3: 161 223 76
x27233:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x27236:	mov word [bp + 30], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 225 76

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x27241:	mov word [bp + 32], string_memorySize203E3D200#	; 5: 199 70 32 192 107

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x27246:	mov word [bp + 34], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 208 107

malloc$14:	; Parameter 22 41 14
x27251:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x27256:	mov word [bp + 22], malloc$16	; 5: 199 70 22 139 106
x27261:	mov [bp + 24], bp	; 3: 137 110 24
x27264:	add bp, 22	; 3: 131 197 22
x27267:	mov di, bp	; 2: 137 239
x27269:	add di, 6	; 3: 131 199 6
x27272:	jmp fprintf	; 3: 233 11 235

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x27275:	mov word [bp + 22], malloc$19	; 5: 199 70 22 153 106
x27280:	mov [bp + 24], bp	; 3: 137 110 24
x27283:	add bp, 22	; 3: 131 197 22
x27286:	jmp abort	; 3: 233 56 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x27289:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27293:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x27295:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x27298:	mov ax, [bp]	; 3: 139 70 0
x27301:	mov di, [bp + 4]	; 3: 139 126 4
x27304:	mov bp, [bp + 2]	; 3: 139 110 2
x27307:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x27309:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x27313:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary221 currBlockPtr
x27315:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary221
x27318:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary222 -> currBlockPtr currBlockPtr 0
x27321:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary223 currAddress £temporary222 -> currBlockPtr
x27324:	mov ax, [bp + 22]	; 3: 139 70 22
x27327:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary224 £temporary223 4
x27329:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary224
x27332:	mov bx, [bp + 12]	; 3: 139 94 12
x27335:	sub bx, ax	; 2: 41 195
x27337:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x27340:	mov ax, [bp + 24]	; 3: 139 70 24
x27343:	cmp [bp + 8], ax	; 3: 57 70 8
x27346:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x27348:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x27352:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x27354:	mov ax, [bp + 10]	; 3: 139 70 10
x27357:	cmp [bp + 24], ax	; 3: 57 70 24
x27360:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x27362:	mov ax, [bp + 24]	; 3: 139 70 24
x27365:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x27368:	mov ax, [bp + 20]	; 3: 139 70 20
x27371:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x27374:	mov ax, [bp + 18]	; 3: 139 70 18
x27377:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x27380:	mov ax, [bp + 22]	; 3: 139 70 22
x27383:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x27386:	mov ax, [bp + 20]	; 3: 139 70 20
x27389:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary231 -> currBlockPtr currBlockPtr 2
x27392:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary231 -> currBlockPtr
x27395:	mov ax, [si + 2]	; 3: 139 68 2
x27398:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x27401:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x27403:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x27407:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary233 minBlockPtr
x27409:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary234 -> minBlockPtr minBlockPtr 0
x27412:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary235 £temporary233 £temporary234 -> minBlockPtr
x27415:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary235 4
x27417:	add ax, 4	; 3: 131 192 4
x27420:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary237 newAddress
x27423:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary237
x27426:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary238 -> newBlockPtr newBlockPtr 0
x27429:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary238 -> newBlockPtr memorySize
x27432:	mov ax, [bp + 6]	; 3: 139 70 6
x27435:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary239 -> newBlockPtr newBlockPtr 2
x27437:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary239 -> newBlockPtr minBlockPtr
x27440:	mov ax, [bp + 14]	; 3: 139 70 14
x27443:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x27446:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x27450:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary241 -> minPrevBlockPtr minPrevBlockPtr 2
x27452:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary241 -> minPrevBlockPtr newBlockPtr
x27455:	mov ax, [bp + 24]	; 3: 139 70 24
x27458:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x27461:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x27463:	mov ax, [bp + 24]	; 3: 139 70 24
x27466:	mov [g_firstBlockPtr], ax	; 3: 163 190 107

malloc$57:	; BinaryAdd £temporary242 newAddress 4
x27469:	mov bx, [bp + 22]	; 3: 139 94 22
x27472:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary243 £temporary242

malloc$59:	; SetReturnValue £temporary243

malloc$60:	; Return £temporary243
x27475:	mov ax, [bp]	; 3: 139 70 0
x27478:	mov di, [bp + 4]	; 3: 139 126 4
x27481:	mov bp, [bp + 2]	; 3: 139 110 2
x27484:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x27486:	mov ax, [bp + 12]	; 3: 139 70 12
x27489:	sub ax, [bp + 8]	; 3: 43 70 8
x27492:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary245 bp

malloc$63:	; Assign stackTop £temporary245
x27495:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x27498:	mov ax, [bp + 22]	; 3: 139 70 22
x27501:	cmp [bp + 24], ax	; 3: 57 70 24
x27504:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary247 newAddress
x27506:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary247
x27509:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary248 -> newBlockPtr newBlockPtr 0
x27512:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary248 -> newBlockPtr memorySize
x27515:	mov ax, [bp + 6]	; 3: 139 70 6
x27518:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary249 -> newBlockPtr newBlockPtr 2
x27520:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary249 -> newBlockPtr 0
x27523:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x27528:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x27532:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary251 -> prevBlockPtr prevBlockPtr 2
x27534:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary251 -> prevBlockPtr newBlockPtr
x27537:	mov ax, [bp + 26]	; 3: 139 70 26
x27540:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x27543:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x27545:	mov ax, [bp + 26]	; 3: 139 70 26
x27548:	mov [g_firstBlockPtr], ax	; 3: 163 190 107

malloc$76:	; BinaryAdd £temporary252 newAddress 4
x27551:	mov bx, [bp + 22]	; 3: 139 94 22
x27554:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary253 £temporary252

malloc$78:	; SetReturnValue £temporary253

malloc$79:	; Return £temporary253
x27557:	mov ax, [bp]	; 3: 139 70 0
x27560:	mov di, [bp + 4]	; 3: 139 126 4
x27563:	mov bp, [bp + 2]	; 3: 139 110 2
x27566:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x27568:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x27571:	mov ax, [bp]	; 3: 139 70 0
x27574:	mov di, [bp + 4]	; 3: 139 126 4
x27577:	mov bp, [bp + 2]	; 3: 139 110 2
x27580:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x27582:	dw 0	; 2: 0 0

string_memorySize203E3D200#:
x27584:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x27600:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary267 freeMemoryPtr
x27663:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary268 £temporary267 4
x27666:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary269 £temporary268

free$3:	; Assign freeBlockPtr £temporary269
x27669:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x27672:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x27677:	mov ax, [g_firstBlockPtr]	; 3: 161 190 107
x27680:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x27683:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27687:	jne free$8	; 2: 117 11

free$7:	; Return
x27689:	mov ax, [bp]	; 3: 139 70 0
x27692:	mov di, [bp + 4]	; 3: 139 126 4
x27695:	mov bp, [bp + 2]	; 3: 139 110 2
x27698:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x27700:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x27704:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x27706:	mov ax, [bp + 8]	; 3: 139 70 8
x27709:	cmp [bp + 12], ax	; 3: 57 70 12
x27712:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x27714:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x27718:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary274 -> currBlockPtr currBlockPtr 2
x27720:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary274 -> currBlockPtr 0
x27723:	cmp word [si + 2], 0	; 4: 131 124 2 0
x27727:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x27729:	mov word [g_firstBlockPtr], 0	; 6: 199 6 190 107 0 0

free$14:	; Goto 27
x27735:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x27737:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x27741:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary278 -> currBlockPtr currBlockPtr 2
x27743:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary278 -> currBlockPtr
x27746:	mov ax, [si + 2]	; 3: 139 68 2
x27749:	mov [g_firstBlockPtr], ax	; 3: 163 190 107

free$18:	; Goto 27
x27752:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary279 -> currBlockPtr currBlockPtr 2
x27754:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary279 -> currBlockPtr 0
x27757:	cmp word [si + 2], 0	; 4: 131 124 2 0
x27761:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary281 -> prevBlockPtr prevBlockPtr 2
x27763:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary281 -> prevBlockPtr 0
x27766:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x27771:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary282 -> prevBlockPtr prevBlockPtr 2
x27773:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary283 -> currBlockPtr currBlockPtr 2
x27776:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary282 -> prevBlockPtr £temporary283 -> currBlockPtr
x27779:	mov ax, [di + 2]	; 3: 139 69 2
x27782:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x27785:	mov ax, [bp]	; 3: 139 70 0
x27788:	mov di, [bp + 4]	; 3: 139 126 4
x27791:	mov bp, [bp + 2]	; 3: 139 110 2
x27794:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x27796:	mov ax, [bp + 12]	; 3: 139 70 12
x27799:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary284 -> currBlockPtr currBlockPtr 2
x27802:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary284 -> currBlockPtr
x27805:	mov ax, [si + 2]	; 3: 139 68 2
x27808:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x27811:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x27813:	mov ax, [bp]	; 3: 139 70 0
x27816:	mov di, [bp + 4]	; 3: 139 126 4
x27819:	mov bp, [bp + 2]	; 3: 139 110 2
x27822:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x27824:	mov ax, [bp + 6]	; 3: 139 70 6
x27827:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x27830:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x27835:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x27840:	mov word [bp + 8], ftell$5	; 5: 199 70 8 206 108
x27845:	mov [bp + 10], bp	; 3: 137 110 10
x27848:	add bp, 8	; 3: 131 197 8
x27851:	jmp fseek	; 3: 233 35 232

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary1123

ftell$7:	; SetReturnValue £temporary1123

ftell$8:	; Return £temporary1123
x27854:	mov ax, [bp]	; 3: 139 70 0
x27857:	mov di, [bp + 4]	; 3: 139 126 4
x27860:	mov bp, [bp + 2]	; 3: 139 110 2
x27863:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x27865:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary1020 c
x27869:	mov si, bp	; 2: 137 238
x27871:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary1020 6
x27874:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x27877:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x27882:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x27887:	mov ax, [bp + 6]	; 3: 139 70 6
x27890:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x27893:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 3 109
x27898:	mov [bp + 11], bp	; 3: 137 110 11
x27901:	add bp, 9	; 3: 131 197 9
x27904:	jmp fread	; 3: 233 234 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary1021

fgetc$10:	; SignedLessThanEqual 14 £temporary1021 0
x27907:	cmp bx, 0	; 3: 131 251 0
x27910:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary1023 c
x27912:	mov bl, [bp + 8]	; 3: 138 94 8
x27915:	and bx, 255	; 4: 129 227 255 0
x27919:	cmp bl, 0	; 3: 128 251 0
x27922:	jge fgetc$12	; 2: 125 4
x27924:	neg bl	; 2: 246 219
x27926:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary1023

fgetc$13:	; Return £temporary1023
x27928:	mov ax, [bp]	; 3: 139 70 0
x27931:	mov di, [bp + 4]	; 3: 139 126 4
x27934:	mov bp, [bp + 2]	; 3: 139 110 2
x27937:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x27939:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x27942:	mov ax, [bp]	; 3: 139 70 0
x27945:	mov di, [bp + 4]	; 3: 139 126 4
x27948:	mov bp, [bp + 2]	; 3: 139 110 2
x27951:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

stdio_test:	; Assign n 0
x27953:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5758 n
x27958:	mov si, bp	; 2: 137 238
x27960:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5758
x27963:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x27966:	mov word [bp + 16], string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 25 117

stdio_test$5:	; Parameter 10 123 8
x27971:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x27976:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x27981:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x27989:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x27997:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x28002:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x28010:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 125 109
x28015:	mov [bp + 12], bp	; 3: 137 110 12
x28018:	add bp, 10	; 3: 131 197 10
x28021:	mov di, bp	; 2: 137 239
x28023:	add di, 18	; 3: 131 199 18
x28026:	jmp printf	; 3: 233 72 159

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x28029:	mov word [bp + 16], string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 60 117

stdio_test$15:	; Parameter 10 123 8
x28034:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x28039:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x28044:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x28052:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x28060:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x28065:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x28073:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 188 109
x28078:	mov [bp + 12], bp	; 3: 137 110 12
x28081:	add bp, 10	; 3: 131 197 10
x28084:	mov di, bp	; 2: 137 239
x28086:	add di, 18	; 3: 131 199 18
x28089:	jmp printf	; 3: 233 9 159

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x28092:	mov word [bp + 16], string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 100 117

stdio_test$25:	; Parameter 10 123 8
x28097:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x28102:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x28107:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x28115:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x28123:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x28128:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x28136:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 251 109
x28141:	mov [bp + 12], bp	; 3: 137 110 12
x28144:	add bp, 10	; 3: 131 197 10
x28147:	mov di, bp	; 2: 137 239
x28149:	add di, 18	; 3: 131 199 18
x28152:	jmp printf	; 3: 233 202 158

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x28155:	mov word [bp + 16], string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 146 117

stdio_test$35:	; Parameter 10 123 8
x28160:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x28165:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x28170:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x28178:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x28186:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x28191:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x28199:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 58 110
x28204:	mov [bp + 12], bp	; 3: 137 110 12
x28207:	add bp, 10	; 3: 131 197 10
x28210:	mov di, bp	; 2: 137 239
x28212:	add di, 18	; 3: 131 199 18
x28215:	jmp printf	; 3: 233 139 158

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x28218:	mov word [bp + 16], string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 192 117

stdio_test$45:	; Parameter 10 123 8
x28223:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x28228:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x28233:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x28241:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x28249:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x28254:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x28262:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 121 110
x28267:	mov [bp + 12], bp	; 3: 137 110 12
x28270:	add bp, 10	; 3: 131 197 10
x28273:	mov di, bp	; 2: 137 239
x28275:	add di, 18	; 3: 131 199 18
x28278:	jmp printf	; 3: 233 76 158

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x28281:	mov word [bp + 16], string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 245 117

stdio_test$55:	; Parameter 10 123 8
x28286:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x28291:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x28296:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x28304:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x28312:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x28317:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x28325:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 184 110
x28330:	mov [bp + 12], bp	; 3: 137 110 12
x28333:	add bp, 10	; 3: 131 197 10
x28336:	mov di, bp	; 2: 137 239
x28338:	add di, 18	; 3: 131 199 18
x28341:	jmp printf	; 3: 233 13 158

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x28344:	mov word [bp + 16], string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 35 118

stdio_test$65:	; Parameter 10 123 8
x28349:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x28354:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x28359:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x28367:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x28375:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x28380:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x28388:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 247 110
x28393:	mov [bp + 12], bp	; 3: 137 110 12
x28396:	add bp, 10	; 3: 131 197 10
x28399:	mov di, bp	; 2: 137 239
x28401:	add di, 18	; 3: 131 199 18
x28404:	jmp printf	; 3: 233 206 157

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x28407:	mov word [bp + 16], string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 87 118

stdio_test$75:	; Parameter 10 123 8
x28412:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x28417:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x28422:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x28430:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x28438:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x28443:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x28451:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 54 111
x28456:	mov [bp + 12], bp	; 3: 137 110 12
x28459:	add bp, 10	; 3: 131 197 10
x28462:	mov di, bp	; 2: 137 239
x28464:	add di, 18	; 3: 131 199 18
x28467:	jmp printf	; 3: 233 143 157

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x28470:	mov word [bp + 16], string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 139 118

stdio_test$85:	; Parameter 10 123 8
x28475:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x28480:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x28485:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x28493:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x28501:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x28506:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x28514:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 117 111
x28519:	mov [bp + 12], bp	; 3: 137 110 12
x28522:	add bp, 10	; 3: 131 197 10
x28525:	mov di, bp	; 2: 137 239
x28527:	add di, 18	; 3: 131 199 18
x28530:	jmp printf	; 3: 233 80 157

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x28533:	mov word [bp + 16], string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 198 118

stdio_test$95:	; Parameter 10 123 8
x28538:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x28543:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x28548:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x28556:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x28564:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x28569:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x28577:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 180 111
x28582:	mov [bp + 12], bp	; 3: 137 110 12
x28585:	add bp, 10	; 3: 131 197 10
x28588:	mov di, bp	; 2: 137 239
x28590:	add di, 18	; 3: 131 199 18
x28593:	jmp printf	; 3: 233 17 157

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x28596:	mov word [bp + 16], string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 244 118

stdio_test$105:	; Parameter 10 123 8
x28601:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x28606:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x28611:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x28619:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x28627:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x28632:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x28640:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 243 111
x28645:	mov [bp + 12], bp	; 3: 137 110 12
x28648:	add bp, 10	; 3: 131 197 10
x28651:	mov di, bp	; 2: 137 239
x28653:	add di, 18	; 3: 131 199 18
x28656:	jmp printf	; 3: 233 210 156

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x28659:	mov word [bp + 16], string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 40 119

stdio_test$115:	; Parameter 10 123 8
x28664:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x28669:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x28674:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x28682:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x28690:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x28695:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x28703:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 50 112
x28708:	mov [bp + 12], bp	; 3: 137 110 12
x28711:	add bp, 10	; 3: 131 197 10
x28714:	mov di, bp	; 2: 137 239
x28716:	add di, 18	; 3: 131 199 18
x28719:	jmp printf	; 3: 233 147 156

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x28722:	mov word [bp + 16], string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 92 119

stdio_test$125:	; Parameter 10 123 8
x28727:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x28732:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x28737:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x28745:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x28753:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x28758:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x28766:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 113 112
x28771:	mov [bp + 12], bp	; 3: 137 110 12
x28774:	add bp, 10	; 3: 131 197 10
x28777:	mov di, bp	; 2: 137 239
x28779:	add di, 18	; 3: 131 199 18
x28782:	jmp printf	; 3: 233 84 156

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x28785:	mov word [bp + 16], string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 151 119

stdio_test$135:	; Parameter 10 123 8
x28790:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x28795:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x28800:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x28805:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x28813:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x28821:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x28829:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 176 112
x28834:	mov [bp + 12], bp	; 3: 137 110 12
x28837:	add bp, 10	; 3: 131 197 10
x28840:	mov di, bp	; 2: 137 239
x28842:	add di, 18	; 3: 131 199 18
x28845:	jmp printf	; 3: 233 21 156

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x28848:	mov word [bp + 16], string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 185 119

stdio_test$145:	; Parameter 10 123 8
x28853:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x28858:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x28863:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x28868:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x28876:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x28884:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x28892:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 239 112
x28897:	mov [bp + 12], bp	; 3: 137 110 12
x28900:	add bp, 10	; 3: 131 197 10
x28903:	mov di, bp	; 2: 137 239
x28905:	add di, 18	; 3: 131 199 18
x28908:	jmp printf	; 3: 233 214 155

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x28911:	mov word [bp + 16], string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 225 119

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x28916:	mov word [bp + 18], string_Hello2C20World21#	; 5: 199 70 18 247 119

stdio_test$156:	; Parameter 10 88 10
x28921:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x28926:	mov ax, [bp + 8]	; 3: 139 70 8
x28929:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x28932:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 23 113
x28937:	mov [bp + 12], bp	; 3: 137 110 12
x28940:	add bp, 10	; 3: 131 197 10
x28943:	mov di, bp	; 2: 137 239
x28945:	add di, 6	; 3: 131 199 6
x28948:	jmp printf	; 3: 233 174 155

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x28951:	mov word [bp + 16], string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 5 120

stdio_test$162:	; PushFloat 123.456
x28956:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$163:	; Parameter 10 123.456 8
x28960:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x28963:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$165:	; Parameter 10 123.456 16
x28967:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x28970:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$167:	; Parameter 10 123.456 24
x28974:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x28977:	fld qword [float8$123456.1#]	; 4: 221 6 39 120

stdio_test$169:	; Parameter 10 123456.1 32
x28981:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x28984:	fld qword [float8$123456.1#]	; 4: 221 6 39 120

stdio_test$171:	; Parameter 10 123456.1 40
x28988:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x28991:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 82 113
x28996:	mov [bp + 12], bp	; 3: 137 110 12
x28999:	add bp, 10	; 3: 131 197 10
x29002:	mov di, bp	; 2: 137 239
x29004:	add di, 40	; 3: 131 199 40
x29007:	jmp printf	; 3: 233 115 155

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x29010:	mov word [bp + 16], string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 47 120

stdio_test$176:	; PushFloat 123.456
x29015:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$177:	; Parameter 10 123.456 8
x29019:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x29022:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$179:	; Parameter 10 123.456 16
x29026:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x29029:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$181:	; Parameter 10 123.456 24
x29033:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x29036:	fld qword [float8$123456.1#]	; 4: 221 6 39 120

stdio_test$183:	; Parameter 10 123456.1 32
x29040:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x29043:	fld qword [float8$123456.1#]	; 4: 221 6 39 120

stdio_test$185:	; Parameter 10 123456.1 40
x29047:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x29050:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 141 113
x29055:	mov [bp + 12], bp	; 3: 137 110 12
x29058:	add bp, 10	; 3: 131 197 10
x29061:	mov di, bp	; 2: 137 239
x29063:	add di, 40	; 3: 131 199 40
x29066:	jmp printf	; 3: 233 56 155

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x29069:	mov word [bp + 16], string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 78 120

stdio_test$190:	; PushFloat 123.456
x29074:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$191:	; Parameter 10 123.456 8
x29078:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x29081:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$193:	; Parameter 10 123.456 16
x29085:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x29088:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$195:	; Parameter 10 123.456 24
x29092:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x29095:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$197:	; Parameter 10 123.456 32
x29099:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x29102:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$199:	; Parameter 10 123.456 40
x29106:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x29109:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 200 113
x29114:	mov [bp + 12], bp	; 3: 137 110 12
x29117:	add bp, 10	; 3: 131 197 10
x29120:	mov di, bp	; 2: 137 239
x29122:	add di, 40	; 3: 131 199 40
x29125:	jmp printf	; 3: 233 253 154

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x29128:	mov word [bp + 16], string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 109 120

stdio_test$204:	; PushFloat 123.456
x29133:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$205:	; Parameter 10 123.456 8
x29137:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x29140:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$207:	; Parameter 10 123.456 16
x29144:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x29147:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$209:	; Parameter 10 123.456 24
x29151:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x29154:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$211:	; Parameter 10 123.456 32
x29158:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x29161:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$213:	; Parameter 10 123.456 40
x29165:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x29168:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 3 114
x29173:	mov [bp + 12], bp	; 3: 137 110 12
x29176:	add bp, 10	; 3: 131 197 10
x29179:	mov di, bp	; 2: 137 239
x29181:	add di, 40	; 3: 131 199 40
x29184:	jmp printf	; 3: 233 194 154

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x29187:	mov word [bp + 16], string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 145 120

stdio_test$218:	; PushFloat 123.456
x29192:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$219:	; Parameter 10 123.456 8
x29196:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x29199:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$221:	; Parameter 10 123.456 16
x29203:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x29206:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$223:	; Parameter 10 123.456 24
x29210:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x29213:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$225:	; Parameter 10 123.456 32
x29217:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x29220:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$227:	; Parameter 10 123.456 40
x29224:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x29227:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 62 114
x29232:	mov [bp + 12], bp	; 3: 137 110 12
x29235:	add bp, 10	; 3: 131 197 10
x29238:	mov di, bp	; 2: 137 239
x29240:	add di, 40	; 3: 131 199 40
x29243:	jmp printf	; 3: 233 135 154

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x29246:	mov word [bp + 16], string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 186 120

stdio_test$232:	; PushFloat 123.456
x29251:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$233:	; Parameter 10 123.456 8
x29255:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x29258:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$235:	; Parameter 10 123.456 16
x29262:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x29265:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$237:	; Parameter 10 123.456 24
x29269:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x29272:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$239:	; Parameter 10 123.456 32
x29276:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x29279:	fld qword [float8$123.456#]	; 4: 221 6 31 120

stdio_test$241:	; Parameter 10 123.456 40
x29283:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x29286:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 121 114
x29291:	mov [bp + 12], bp	; 3: 137 110 12
x29294:	add bp, 10	; 3: 131 197 10
x29297:	mov di, bp	; 2: 137 239
x29299:	add di, 40	; 3: 131 199 40
x29302:	jmp printf	; 3: 233 76 154

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x29305:	mov word [bp + 16], string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 5 120

stdio_test$246:	; PushFloat -123.456
x29310:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$247:	; Parameter 10 -123.456 8
x29314:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x29317:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$249:	; Parameter 10 -123.456 16
x29321:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x29324:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$251:	; Parameter 10 -123.456 24
x29328:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x29331:	fld qword [float8$minus0.000000123456#]	; 4: 221 6 241 120

stdio_test$253:	; Parameter 10 -0.000000123456 32
x29335:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x29338:	fld qword [float8$minus0.000000123456#]	; 4: 221 6 241 120

stdio_test$255:	; Parameter 10 -0.000000123456 40
x29342:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x29345:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 180 114
x29350:	mov [bp + 12], bp	; 3: 137 110 12
x29353:	add bp, 10	; 3: 131 197 10
x29356:	mov di, bp	; 2: 137 239
x29358:	add di, 40	; 3: 131 199 40
x29361:	jmp printf	; 3: 233 17 154

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x29364:	mov word [bp + 16], string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 47 120

stdio_test$260:	; PushFloat -123.456
x29369:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$261:	; Parameter 10 -123.456 8
x29373:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x29376:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$263:	; Parameter 10 -123.456 16
x29380:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x29383:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$265:	; Parameter 10 -123.456 24
x29387:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x29390:	fld qword [float8$minus0.000000123456#]	; 4: 221 6 241 120

stdio_test$267:	; Parameter 10 -0.000000123456 32
x29394:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x29397:	fld qword [float8$minus0.000000123456#]	; 4: 221 6 241 120

stdio_test$269:	; Parameter 10 -0.000000123456 40
x29401:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x29404:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 239 114
x29409:	mov [bp + 12], bp	; 3: 137 110 12
x29412:	add bp, 10	; 3: 131 197 10
x29415:	mov di, bp	; 2: 137 239
x29417:	add di, 40	; 3: 131 199 40
x29420:	jmp printf	; 3: 233 214 153

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x29423:	mov word [bp + 16], string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 78 120

stdio_test$274:	; PushFloat -123.456
x29428:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$275:	; Parameter 10 -123.456 8
x29432:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x29435:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$277:	; Parameter 10 -123.456 16
x29439:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x29442:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$279:	; Parameter 10 -123.456 24
x29446:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x29449:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$281:	; Parameter 10 -123.456 32
x29453:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x29456:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$283:	; Parameter 10 -123.456 40
x29460:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x29463:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 42 115
x29468:	mov [bp + 12], bp	; 3: 137 110 12
x29471:	add bp, 10	; 3: 131 197 10
x29474:	mov di, bp	; 2: 137 239
x29476:	add di, 40	; 3: 131 199 40
x29479:	jmp printf	; 3: 233 155 153

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x29482:	mov word [bp + 16], string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 109 120

stdio_test$288:	; PushFloat -123.456
x29487:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$289:	; Parameter 10 -123.456 8
x29491:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x29494:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$291:	; Parameter 10 -123.456 16
x29498:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x29501:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$293:	; Parameter 10 -123.456 24
x29505:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x29508:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$295:	; Parameter 10 -123.456 32
x29512:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x29515:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$297:	; Parameter 10 -123.456 40
x29519:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x29522:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 101 115
x29527:	mov [bp + 12], bp	; 3: 137 110 12
x29530:	add bp, 10	; 3: 131 197 10
x29533:	mov di, bp	; 2: 137 239
x29535:	add di, 40	; 3: 131 199 40
x29538:	jmp printf	; 3: 233 96 153

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x29541:	mov word [bp + 16], string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 145 120

stdio_test$302:	; PushFloat -123.456
x29546:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$303:	; Parameter 10 -123.456 8
x29550:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x29553:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$305:	; Parameter 10 -123.456 16
x29557:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x29560:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$307:	; Parameter 10 -123.456 24
x29564:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x29567:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$309:	; Parameter 10 -123.456 32
x29571:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x29574:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$311:	; Parameter 10 -123.456 40
x29578:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x29581:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 160 115
x29586:	mov [bp + 12], bp	; 3: 137 110 12
x29589:	add bp, 10	; 3: 131 197 10
x29592:	mov di, bp	; 2: 137 239
x29594:	add di, 40	; 3: 131 199 40
x29597:	jmp printf	; 3: 233 37 153

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x29600:	mov word [bp + 16], string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 186 120

stdio_test$316:	; PushFloat -123.456
x29605:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$317:	; Parameter 10 -123.456 8
x29609:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x29612:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$319:	; Parameter 10 -123.456 16
x29616:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x29619:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$321:	; Parameter 10 -123.456 24
x29623:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x29626:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$323:	; Parameter 10 -123.456 32
x29630:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x29633:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

stdio_test$325:	; Parameter 10 -123.456 40
x29637:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x29640:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 219 115
x29645:	mov [bp + 12], bp	; 3: 137 110 12
x29648:	add bp, 10	; 3: 131 197 10
x29651:	mov di, bp	; 2: 137 239
x29653:	add di, 40	; 3: 131 199 40
x29656:	jmp printf	; 3: 233 234 152

stdio_test$327:	; PostCall 10

stdio_test$328:	; Assign a 0
x29659:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$329:	; Assign b 0
x29664:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

stdio_test$330:	; Assign n 0
x29669:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

stdio_test$331:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$332:	; Parameter 12 string_Please20write20three20integers3A20# 6
x29674:	mov word [bp + 18], string_Please20write20three20integers3A20#	; 5: 199 70 18 249 120

stdio_test$333:	; Call 12 printf 0
x29679:	mov word [bp + 12], stdio_test$334	; 5: 199 70 12 255 115
x29684:	mov [bp + 14], bp	; 3: 137 110 14
x29687:	add bp, 12	; 3: 131 197 12
x29690:	mov di, bp	; 2: 137 239
x29692:	jmp printf	; 3: 233 198 152

stdio_test$334:	; PostCall 12

stdio_test$335:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$336:	; Parameter 12 string_1232045620789# 6
x29695:	mov word [bp + 18], string_1232045620789#	; 5: 199 70 18 23 121

stdio_test$337:	; Parameter 12 string_25i20252Ai2025i2025n# 8
x29700:	mov word [bp + 20], string_25i20252Ai2025i2025n#	; 5: 199 70 20 35 121

stdio_test$338:	; address £temporary5788 a
x29705:	mov si, bp	; 2: 137 238
x29707:	add si, 6	; 3: 131 198 6

stdio_test$339:	; Parameter 12 £temporary5788 10
x29710:	mov [bp + 22], si	; 3: 137 118 22

stdio_test$340:	; address £temporary5789 b
x29713:	mov si, bp	; 2: 137 238
x29715:	add si, 8	; 3: 131 198 8

stdio_test$341:	; Parameter 12 £temporary5789 12
x29718:	mov [bp + 24], si	; 3: 137 118 24

stdio_test$342:	; address £temporary5790 n
x29721:	mov si, bp	; 2: 137 238
x29723:	add si, 10	; 3: 131 198 10

stdio_test$343:	; Parameter 12 £temporary5790 14
x29726:	mov [bp + 26], si	; 3: 137 118 26

stdio_test$344:	; Call 12 sscanf 0
x29729:	mov word [bp + 12], stdio_test$345	; 5: 199 70 12 52 116
x29734:	mov [bp + 14], bp	; 3: 137 110 14
x29737:	add bp, 12	; 3: 131 197 12
x29740:	mov di, bp	; 2: 137 239
x29742:	add di, 6	; 3: 131 199 6
x29745:	jmp sscanf	; 3: 233 123 5

stdio_test$345:	; PostCall 12

stdio_test$346:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$347:	; Parameter 12 string_3C25i3E203C25i3E203C25i3E0A# 6
x29748:	mov word [bp + 18], string_3C25i3E203C25i3E203C25i3E0A#	; 5: 199 70 18 48 121

stdio_test$348:	; Parameter 12 a 8
x29753:	mov ax, [bp + 6]	; 3: 139 70 6
x29756:	mov [bp + 20], ax	; 3: 137 70 20

stdio_test$349:	; Parameter 12 b 10
x29759:	mov ax, [bp + 8]	; 3: 139 70 8
x29762:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$350:	; Parameter 12 n 12
x29765:	mov ax, [bp + 10]	; 3: 139 70 10
x29768:	mov [bp + 24], ax	; 3: 137 70 24

stdio_test$351:	; Call 12 printf 0
x29771:	mov word [bp + 12], stdio_test$352	; 5: 199 70 12 94 116
x29776:	mov [bp + 14], bp	; 3: 137 110 14
x29779:	add bp, 12	; 3: 131 197 12
x29782:	mov di, bp	; 2: 137 239
x29784:	add di, 6	; 3: 131 199 6
x29787:	jmp printf	; 3: 233 103 152

stdio_test$352:	; PostCall 12

stdio_test$353:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$354:	; Parameter 106 string_Please20write20the20patterns205Babc5D3A20# 6
x29790:	mov word [bp + 112], string_Please20write20the20patterns205Babc5D3A20#	; 5: 199 70 112 64 121

stdio_test$355:	; Call 106 printf 0
x29795:	mov word [bp + 106], stdio_test$356	; 5: 199 70 106 115 116
x29800:	mov [bp + 108], bp	; 3: 137 110 108
x29803:	add bp, 106	; 3: 131 197 106
x29806:	mov di, bp	; 2: 137 239
x29808:	jmp printf	; 3: 233 82 152

stdio_test$356:	; PostCall 106

stdio_test$357:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$358:	; Parameter 106 string_abcdef# 6
x29811:	mov word [bp + 112], string_abcdef#	; 5: 199 70 112 98 121

stdio_test$359:	; Parameter 106 string_255Babc5D# 8
x29816:	mov word [bp + 114], string_255Babc5D#	; 5: 199 70 114 105 121

stdio_test$360:	; Parameter 106 s 10
x29821:	mov [bp + 116], bp	; 3: 137 110 116
x29824:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$361:	; Call 106 sscanf 0
x29828:	mov word [bp + 106], stdio_test$362	; 5: 199 70 106 151 116
x29833:	mov [bp + 108], bp	; 3: 137 110 108
x29836:	add bp, 106	; 3: 131 197 106
x29839:	mov di, bp	; 2: 137 239
x29841:	add di, 2	; 3: 131 199 2
x29844:	jmp sscanf	; 3: 233 24 5

stdio_test$362:	; PostCall 106

stdio_test$363:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$364:	; Parameter 106 string_3C25s3E0A# 6
x29847:	mov word [bp + 112], string_3C25s3E0A#	; 5: 199 70 112 112 121

stdio_test$365:	; Parameter 106 s 8
x29852:	mov [bp + 114], bp	; 3: 137 110 114
x29855:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$366:	; Call 106 printf 0
x29859:	mov word [bp + 106], stdio_test$367	; 5: 199 70 106 182 116
x29864:	mov [bp + 108], bp	; 3: 137 110 108
x29867:	add bp, 106	; 3: 131 197 106
x29870:	mov di, bp	; 2: 137 239
x29872:	add di, 2	; 3: 131 199 2
x29875:	jmp printf	; 3: 233 15 152

stdio_test$367:	; PostCall 106

stdio_test$368:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$369:	; Parameter 106 string_Please20write20the20patterns205B5Eabc5D3A20# 6
x29878:	mov word [bp + 112], string_Please20write20the20patterns205B5Eabc5D3A20#	; 5: 199 70 112 118 121

stdio_test$370:	; Call 106 printf 0
x29883:	mov word [bp + 106], stdio_test$371	; 5: 199 70 106 203 116
x29888:	mov [bp + 108], bp	; 3: 137 110 108
x29891:	add bp, 106	; 3: 131 197 106
x29894:	mov di, bp	; 2: 137 239
x29896:	jmp printf	; 3: 233 250 151

stdio_test$371:	; PostCall 106

stdio_test$372:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$373:	; Parameter 106 string_defabc# 6
x29899:	mov word [bp + 112], string_defabc#	; 5: 199 70 112 153 121

stdio_test$374:	; Parameter 106 string_255B5Eabc5D# 8
x29904:	mov word [bp + 114], string_255B5Eabc5D#	; 5: 199 70 114 160 121

stdio_test$375:	; Parameter 106 s 10
x29909:	mov [bp + 116], bp	; 3: 137 110 116
x29912:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$376:	; Call 106 sscanf 0
x29916:	mov word [bp + 106], stdio_test$377	; 5: 199 70 106 239 116
x29921:	mov [bp + 108], bp	; 3: 137 110 108
x29924:	add bp, 106	; 3: 131 197 106
x29927:	mov di, bp	; 2: 137 239
x29929:	add di, 2	; 3: 131 199 2
x29932:	jmp sscanf	; 3: 233 192 4

stdio_test$377:	; PostCall 106

stdio_test$378:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$379:	; Parameter 106 string_3C25s3E0A0A# 6
x29935:	mov word [bp + 112], string_3C25s3E0A0A#	; 5: 199 70 112 168 121

stdio_test$380:	; Parameter 106 s 8
x29940:	mov [bp + 114], bp	; 3: 137 110 114
x29943:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$381:	; Call 106 printf 0
x29947:	mov word [bp + 106], stdio_test$382	; 5: 199 70 106 14 117
x29952:	mov [bp + 108], bp	; 3: 137 110 108
x29955:	add bp, 106	; 3: 131 197 106
x29958:	mov di, bp	; 2: 137 239
x29960:	add di, 2	; 3: 131 199 2
x29963:	jmp printf	; 3: 233 183 151

stdio_test$382:	; PostCall 106

stdio_test$383:	; Return 0
x29966:	mov ax, [bp]	; 3: 139 70 0
x29969:	mov di, [bp + 4]	; 3: 139 126 4
x29972:	mov bp, [bp + 2]	; 3: 139 110 2
x29975:	jmp ax	; 2: 255 224

stdio_test$384:	; FunctionEnd stdio_test

string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x29977:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x30012:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x30052:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x30098:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x30144:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x30197:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x30243:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x30295:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x30347:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x30406:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x30452:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x30504:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x30556:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x30615:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x30649:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x30689:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

string_Hello2C20World21#:
x30711:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x30725:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

float8$123.456#:
x30751:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

float8$123456.1#:
x30759:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x30767:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x30798:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x30829:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x30865:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x30906:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

float8$minus123.456#:
x30953:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

float8$minus0.000000123456#:
x30961:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

string_Please20write20three20integers3A20#:
x30969:	db "Please write three integers: ", 0	; 30: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 114 101 101 32 105 110 116 101 103 101 114 115 58 32 0

string_1232045620789#:
x30999:	db "123 456 789", 0	; 12: 49 50 51 32 52 53 54 32 55 56 57 0

string_25i20252Ai2025i2025n#:
x31011:	db "%i %*i %i %n", 0	; 13: 37 105 32 37 42 105 32 37 105 32 37 110 0

string_3C25i3E203C25i3E203C25i3E0A#:
x31024:	db "<%i> <%i> <%i>", 10, 0	; 16: 60 37 105 62 32 60 37 105 62 32 60 37 105 62 10 0

string_Please20write20the20patterns205Babc5D3A20#:
x31040:	db "Please write the patterns [abc]: ", 0	; 34: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 97 98 99 93 58 32 0

string_abcdef#:
x31074:	db "abcdef", 0	; 7: 97 98 99 100 101 102 0

string_255Babc5D#:
x31081:	db "%[abc]", 0	; 7: 37 91 97 98 99 93 0

string_3C25s3E0A#:
x31088:	db "<%s>", 10, 0	; 6: 60 37 115 62 10 0

string_Please20write20the20patterns205B5Eabc5D3A20#:
x31094:	db "Please write the patterns [^abc]: ", 0	; 35: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 94 97 98 99 93 58 32 0

string_defabc#:
x31129:	db "defabc", 0	; 7: 100 101 102 97 98 99 0

string_255B5Eabc5D#:
x31136:	db "%[^abc]", 0	; 8: 37 91 94 97 98 99 93 0

string_3C25s3E0A0A#:
x31144:	db "<%s>", 10, 10, 0	; 7: 60 37 115 62 10 10 0

sscanf:	; address £temporary1753 format
x31151:	mov si, bp	; 2: 137 238
x31153:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1754 £temporary1753

sscanf$2:	; BinaryAdd arg_list £temporary1754 2
x31156:	add si, 2	; 3: 131 198 2
x31159:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x31162:	mov ax, [bp + 6]	; 3: 139 70 6
x31165:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x31168:	mov ax, [bp + 8]	; 3: 139 70 8
x31171:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x31174:	mov ax, [di + 10]	; 3: 139 69 10
x31177:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x31180:	mov word [di + 12], sscanf$8	; 5: 199 69 12 223 121
x31185:	mov [di + 14], bp	; 3: 137 109 14
x31188:	mov [di + 16], di	; 3: 137 125 16
x31191:	add di, 12	; 3: 131 199 12
x31194:	mov bp, di	; 2: 137 253
x31196:	nop	; 1: 144
x31197:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1756

sscanf$10:	; SetReturnValue £temporary1756

sscanf$11:	; Return £temporary1756
x31199:	mov ax, [bp]	; 3: 139 70 0
x31202:	mov di, [bp + 4]	; 3: 139 126 4
x31205:	mov bp, [bp + 2]	; 3: 139 110 2
x31208:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x31210:	mov word [g_inStatus], 1	; 6: 199 6 227 86 1 0

vsscanf$1:	; IntegralToIntegral £temporary1761 inString
x31216:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1761
x31219:	mov [g_inDevice], ax	; 3: 163 229 86

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x31222:	mov ax, [bp + 8]	; 3: 139 70 8
x31225:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x31228:	mov ax, [bp + 10]	; 3: 139 70 10
x31231:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x31234:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 16 122
x31239:	mov [bp + 14], bp	; 3: 137 110 14
x31242:	add bp, 12	; 3: 131 197 12
x31245:	jmp scanFormat	; 3: 233 215 220

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1762

vsscanf$9:	; SetReturnValue £temporary1762

vsscanf$10:	; Return £temporary1762
x31248:	mov ax, [bp]	; 3: 139 70 0
x31251:	mov di, [bp + 4]	; 3: 139 126 4
x31254:	mov bp, [bp + 2]	; 3: 139 110 2
x31257:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

time_test:	; Assign weekdays[0] string_Sun#
x31259:	mov word [bp + 6], string_Sun#	; 5: 199 70 6 129 30

time_test$1:	; Assign weekdays[1] string_Mon#
x31264:	mov word [bp + 8], string_Mon#	; 5: 199 70 8 133 30

time_test$2:	; Assign weekdays[2] string_Tue#
x31269:	mov word [bp + 10], string_Tue#	; 5: 199 70 10 137 30

time_test$3:	; Assign weekdays[3] string_Wed#
x31274:	mov word [bp + 12], string_Wed#	; 5: 199 70 12 141 30

time_test$4:	; Assign weekdays[4] string_Thu#
x31279:	mov word [bp + 14], string_Thu#	; 5: 199 70 14 145 30

time_test$5:	; Assign weekdays[5] string_Fri#
x31284:	mov word [bp + 16], string_Fri#	; 5: 199 70 16 149 30

time_test$6:	; Assign weekdays[6] string_Sat#
x31289:	mov word [bp + 18], string_Sat#	; 5: 199 70 18 153 30

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x31294:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x31299:	mov word [bp + 20], time_test$10	; 5: 199 70 20 81 122
x31304:	mov [bp + 22], bp	; 3: 137 110 22
x31307:	add bp, 20	; 3: 131 197 20
x31310:	jmp time	; 3: 233 169 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6376

time_test$12:	; Assign now1 £temporary6376
x31313:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6377 now1
x31317:	mov si, bp	; 2: 137 238
x31319:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6377 6
x31322:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x31325:	mov word [bp + 24], time_test$17	; 5: 199 70 24 107 122
x31330:	mov [bp + 26], bp	; 3: 137 110 26
x31333:	add bp, 24	; 3: 131 197 24
x31336:	jmp gmtime	; 3: 233 34 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6378

time_test$19:	; Deref £temporary6379 -> £temporary6378 £temporary6378 0

time_test$20:	; Assign s £temporary6379 -> £temporary6378
x31339:	mov si, bp	; 2: 137 238
x31341:	add si, 24	; 3: 131 198 24
x31344:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x31346:	mov ah, [bx]	; 2: 138 39
x31348:	mov [si], ah	; 2: 136 36
x31350:	inc bx	; 1: 67
x31351:	inc si	; 1: 70
x31352:	dec al	; 2: 254 200
x31354:	cmp al, 0	; 2: 60 0
x31356:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6380 now1
x31358:	mov si, bp	; 2: 137 238
x31360:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6380 6
x31363:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x31366:	mov word [bp + 42], time_test$25	; 5: 199 70 42 148 122
x31371:	mov [bp + 44], bp	; 3: 137 110 44
x31374:	add bp, 42	; 3: 131 197 42
x31377:	jmp localtime	; 3: 233 184 9

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6381

time_test$27:	; Deref £temporary6382 -> £temporary6381 £temporary6381 0

time_test$28:	; Assign t £temporary6382 -> £temporary6381
x31380:	mov si, bp	; 2: 137 238
x31382:	add si, 42	; 3: 131 198 42
x31385:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x31387:	mov ah, [bx]	; 2: 138 39
x31389:	mov [si], ah	; 2: 136 36
x31391:	inc bx	; 1: 67
x31392:	inc si	; 1: 70
x31393:	dec al	; 2: 254 200
x31395:	cmp al, 0	; 2: 60 0
x31397:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6383 s
x31399:	mov si, bp	; 2: 137 238
x31401:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6383 6
x31404:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x31407:	mov word [bp + 60], time_test$33	; 5: 199 70 60 189 122
x31412:	mov [bp + 62], bp	; 3: 137 110 62
x31415:	add bp, 60	; 3: 131 197 60
x31418:	jmp mktime	; 3: 233 209 5

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6384

time_test$35:	; Assign now2 £temporary6384
x31421:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x31425:	mov word [bp + 70], string_now2013A2025lu0A#	; 5: 199 70 70 251 124

time_test$38:	; Parameter 64 now1 8
x31430:	mov eax, [bp + 20]	; 4: 102 139 70 20
x31434:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x31438:	mov word [bp + 64], time_test$40	; 5: 199 70 64 225 122
x31443:	mov [bp + 66], bp	; 3: 137 110 66
x31446:	add bp, 64	; 3: 131 197 64
x31449:	mov di, bp	; 2: 137 239
x31451:	add di, 4	; 3: 131 199 4
x31454:	jmp printf	; 3: 233 228 145

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x31457:	mov word [bp + 70], string_now2023A2025lu0A#	; 5: 199 70 70 7 125

time_test$43:	; Parameter 64 now2 8
x31462:	mov eax, [bp + 60]	; 4: 102 139 70 60
x31466:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x31470:	mov word [bp + 64], time_test$45	; 5: 199 70 64 1 123
x31475:	mov [bp + 66], bp	; 3: 137 110 66
x31478:	add bp, 64	; 3: 131 197 64
x31481:	mov di, bp	; 2: 137 239
x31483:	add di, 4	; 3: 131 199 4
x31486:	jmp printf	; 3: 233 196 145

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x31489:	mov word [bp + 70], string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 19 125

time_test$48:	; UnsignedMultiply £temporary6389 s$tm_wday 2
x31494:	mov ax, [bp + 36]	; 3: 139 70 36
x31497:	xor dx, dx	; 2: 49 210
x31499:	mul word [int2$2#]	; 4: 247 38 96 51

time_test$49:	; BinaryAdd £temporary6390 weekdays £temporary6389
x31503:	mov si, bp	; 2: 137 238
x31505:	add si, 6	; 3: 131 198 6
x31508:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6388 -> £temporary6390 £temporary6390 0

time_test$51:	; Parameter 64 £temporary6388 -> £temporary6390 8
x31510:	mov ax, [si]	; 2: 139 4
x31512:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6392 s$tm_year 1900
x31515:	mov ax, [bp + 34]	; 3: 139 70 34
x31518:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6392 10
x31521:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6394 s$tm_mon 1
x31524:	mov ax, [bp + 32]	; 3: 139 70 32
x31527:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6394 12
x31528:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x31531:	mov ax, [bp + 30]	; 3: 139 70 30
x31534:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x31537:	mov ax, [bp + 28]	; 3: 139 70 28
x31540:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x31543:	mov ax, [bp + 26]	; 3: 139 70 26
x31546:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x31549:	mov ax, [bp + 24]	; 3: 139 70 24
x31552:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x31555:	mov ax, [bp + 38]	; 3: 139 70 38
x31558:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x31561:	mov ax, [bp + 36]	; 3: 139 70 36
x31564:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x31567:	mov ax, [bp + 40]	; 3: 139 70 40
x31570:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x31573:	mov word [bp + 64], time_test$64	; 5: 199 70 64 104 123
x31578:	mov [bp + 66], bp	; 3: 137 110 66
x31581:	add bp, 64	; 3: 131 197 64
x31584:	mov di, bp	; 2: 137 239
x31586:	add di, 20	; 3: 131 199 20
x31589:	jmp printf	; 3: 233 93 145

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x31592:	mov word [bp + 70], string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 116 125

time_test$67:	; UnsignedMultiply £temporary6405 t$tm_wday 2
x31597:	mov ax, [bp + 54]	; 3: 139 70 54
x31600:	xor dx, dx	; 2: 49 210
x31602:	mul word [int2$2#]	; 4: 247 38 96 51

time_test$68:	; BinaryAdd £temporary6406 weekdays £temporary6405
x31606:	mov si, bp	; 2: 137 238
x31608:	add si, 6	; 3: 131 198 6
x31611:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6404 -> £temporary6406 £temporary6406 0

time_test$70:	; Parameter 64 £temporary6404 -> £temporary6406 8
x31613:	mov ax, [si]	; 2: 139 4
x31615:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6408 t$tm_year 1900
x31618:	mov ax, [bp + 52]	; 3: 139 70 52
x31621:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6408 10
x31624:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6410 t$tm_mon 1
x31627:	mov ax, [bp + 50]	; 3: 139 70 50
x31630:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6410 12
x31631:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x31634:	mov ax, [bp + 48]	; 3: 139 70 48
x31637:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x31640:	mov ax, [bp + 46]	; 3: 139 70 46
x31643:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x31646:	mov ax, [bp + 44]	; 3: 139 70 44
x31649:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x31652:	mov ax, [bp + 42]	; 3: 139 70 42
x31655:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x31658:	mov ax, [bp + 56]	; 3: 139 70 56
x31661:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x31664:	mov ax, [bp + 54]	; 3: 139 70 54
x31667:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x31670:	mov ax, [bp + 58]	; 3: 139 70 58
x31673:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x31676:	mov word [bp + 64], time_test$83	; 5: 199 70 64 207 123
x31681:	mov [bp + 66], bp	; 3: 137 110 66
x31684:	add bp, 64	; 3: 131 197 64
x31687:	mov di, bp	; 2: 137 239
x31689:	add di, 20	; 3: 131 199 20
x31692:	jmp printf	; 3: 233 246 144

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 566 buffer1 6
x31695:	mov [bp + 572], bp	; 4: 137 174 60 2
x31699:	add word [bp + 572], 64	; 5: 131 134 60 2 64

time_test$86:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6419 s
x31704:	mov si, bp	; 2: 137 238
x31706:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 566 £temporary6419 14
x31709:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$89:	; Call 566 asctime 8
x31713:	mov word [bp + 574], time_test$90	; 6: 199 134 62 2 242 123
x31719:	mov [bp + 576], bp	; 4: 137 174 64 2
x31723:	add bp, 574	; 4: 129 197 62 2
x31727:	jmp asctime	; 3: 233 239 8

time_test$90:	; PostCall 566

time_test$91:	; GetReturnValue £temporary6420

time_test$92:	; Parameter 566 £temporary6420 8
x31730:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$93:	; Call 566 strcpy 0
x31734:	mov word [bp + 566], time_test$94	; 6: 199 134 54 2 7 124
x31740:	mov [bp + 568], bp	; 4: 137 174 56 2
x31744:	add bp, 566	; 4: 129 197 54 2
x31748:	jmp strcpy	; 3: 233 83 217

time_test$94:	; PostCall 566

time_test$95:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 566 buffer2 6
x31751:	mov [bp + 572], bp	; 4: 137 174 60 2
x31755:	add word [bp + 572], 164	; 6: 129 134 60 2 164 0

time_test$97:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6422 now1
x31761:	mov si, bp	; 2: 137 238
x31763:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 566 £temporary6422 14
x31766:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$100:	; Call 566 ctime 8
x31770:	mov word [bp + 574], time_test$101	; 6: 199 134 62 2 43 124
x31776:	mov [bp + 576], bp	; 4: 137 174 64 2
x31780:	add bp, 574	; 4: 129 197 62 2
x31784:	jmp ctime	; 3: 233 56 11

time_test$101:	; PostCall 566

time_test$102:	; GetReturnValue £temporary6423

time_test$103:	; Parameter 566 £temporary6423 8
x31787:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$104:	; Call 566 strcpy 0
x31791:	mov word [bp + 566], time_test$105	; 6: 199 134 54 2 64 124
x31797:	mov [bp + 568], bp	; 4: 137 174 56 2
x31801:	add bp, 566	; 4: 129 197 54 2
x31805:	jmp strcpy	; 3: 233 26 217

time_test$105:	; PostCall 566

time_test$106:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 566 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x31808:	mov word [bp + 572], string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 60 2 213 125

time_test$108:	; Parameter 566 buffer1 8
x31814:	mov [bp + 574], bp	; 4: 137 174 62 2
x31818:	add word [bp + 574], 64	; 5: 131 134 62 2 64

time_test$109:	; Parameter 566 buffer2 10
x31823:	mov [bp + 576], bp	; 4: 137 174 64 2
x31827:	add word [bp + 576], 164	; 6: 129 134 64 2 164 0

time_test$110:	; Call 566 printf 0
x31833:	mov word [bp + 566], time_test$111	; 6: 199 134 54 2 111 124
x31839:	mov [bp + 568], bp	; 4: 137 174 56 2
x31843:	add bp, 566	; 4: 129 197 54 2
x31847:	mov di, bp	; 2: 137 239
x31849:	add di, 4	; 3: 131 199 4
x31852:	jmp printf	; 3: 233 86 144

time_test$111:	; PostCall 566

time_test$112:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 566 buffer 6
x31855:	mov [bp + 572], bp	; 4: 137 174 60 2
x31859:	add word [bp + 572], 264	; 6: 129 134 60 2 8 1

time_test$114:	; Parameter 566 300 8
x31865:	mov word [bp + 574], 300	; 6: 199 134 62 2 44 1

time_test$115:	; Parameter 566 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y# 10
x31871:	mov word [bp + 576], string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#	; 6: 199 134 64 2 239 125

time_test$116:	; address £temporary6426 t
x31877:	mov si, bp	; 2: 137 238
x31879:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 566 £temporary6426 12
x31882:	mov [bp + 578], si	; 4: 137 182 66 2

time_test$118:	; Call 566 strftime 0
x31886:	mov word [bp + 566], time_test$119	; 6: 199 134 54 2 159 124
x31892:	mov [bp + 568], bp	; 4: 137 174 56 2
x31896:	add bp, 566	; 4: 129 197 54 2
x31900:	jmp strftime	; 3: 233 244 10

time_test$119:	; PostCall 566

time_test$120:	; GetReturnValue £temporary6427

time_test$121:	; Assign i £temporary6427
x31903:	mov [bp + 564], bx	; 4: 137 158 52 2

time_test$122:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 566 string_strftime2025i2025i203C25s3E0A# 6
x31907:	mov word [bp + 572], string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 60 2 229 126

time_test$124:	; Parameter 566 i 8
x31913:	mov ax, [bp + 564]	; 4: 139 134 52 2
x31917:	mov [bp + 574], ax	; 4: 137 134 62 2

time_test$125:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 566 buffer 16
x31921:	mov [bp + 582], bp	; 4: 137 174 70 2
x31925:	add word [bp + 582], 264	; 6: 129 134 70 2 8 1

time_test$127:	; Call 566 strlen 10
x31931:	mov word [bp + 576], time_test$128	; 6: 199 134 64 2 204 124
x31937:	mov [bp + 578], bp	; 4: 137 174 66 2
x31941:	add bp, 576	; 4: 129 197 64 2
x31945:	jmp strlen	; 3: 233 1 18

time_test$128:	; PostCall 566

time_test$129:	; GetReturnValue £temporary6428

time_test$130:	; Parameter 566 £temporary6428 10
x31948:	mov [bp + 576], bx	; 4: 137 158 64 2

time_test$131:	; Parameter 566 buffer 12
x31952:	mov [bp + 578], bp	; 4: 137 174 66 2
x31956:	add word [bp + 578], 264	; 6: 129 134 66 2 8 1

time_test$132:	; Call 566 printf 0
x31962:	mov word [bp + 566], time_test$133	; 6: 199 134 54 2 240 124
x31968:	mov [bp + 568], bp	; 4: 137 174 56 2
x31972:	add bp, 566	; 4: 129 197 54 2
x31976:	mov di, bp	; 2: 137 239
x31978:	add di, 6	; 3: 131 199 6
x31981:	jmp printf	; 3: 233 213 143

time_test$133:	; PostCall 566

time_test$134:	; Return 0
x31984:	mov ax, [bp]	; 3: 139 70 0
x31987:	mov di, [bp + 4]	; 3: 139 126 4
x31990:	mov bp, [bp + 2]	; 3: 139 110 2
x31993:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

string_now2013A2025lu0A#:
x31995:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

string_now2023A2025lu0A#:
x32007:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x32019:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x32116:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

string_asctime203C25s3E2C20ctime203C25s3E0A#:
x32213:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#:
x32239:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y", 0	; 246: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 0

string_strftime2025i2025i203C25s3E0A#:
x32485:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$1:	; Call 19 localeconv 0
x32506:	mov word [bp + 19], time$2	; 5: 199 70 19 8 127
x32511:	mov [bp + 21], bp	; 3: 137 110 21
x32514:	add bp, 19	; 3: 131 197 19
x32517:	jmp localeconv	; 3: 233 44 159

time$2:	; PostCall 19

time$3:	; GetReturnValue £temporary3407

time$4:	; Assign localeConvPtr £temporary3407
x32520:	mov [bp + 19], bx	; 3: 137 94 19

time$5:	; AssignRegister ah 42
x32523:	mov ah, 42	; 2: 180 42

time$6:	; Interrupt 33
x32525:	int 33	; 2: 205 33

time$7:	; InspectRegister £temporary3409 cx

time$8:	; BinarySubtract year £temporary3409 1900
x32527:	sub cx, 1900	; 4: 129 233 108 7
x32531:	mov [bp + 12], cx	; 3: 137 78 12

time$9:	; InspectRegister £temporary3411 dh

time$10:	; BinarySubtract month £temporary3411 1
x32534:	dec dh	; 2: 254 206
x32536:	mov [bp + 14], dh	; 3: 136 118 14

time$11:	; InspectRegister £temporary3413 dl

time$12:	; Assign monthDay £temporary3413
x32539:	mov [bp + 15], dl	; 3: 136 86 15

time$13:	; AssignRegister ah 44
x32542:	mov ah, 44	; 2: 180 44

time$14:	; Interrupt 33
x32544:	int 33	; 2: 205 33

time$15:	; InspectRegister £temporary3415 ch

time$16:	; Assign hour £temporary3415
x32546:	mov [bp + 16], ch	; 3: 136 110 16

time$17:	; InspectRegister £temporary3416 cl

time$18:	; Assign min £temporary3416
x32549:	mov [bp + 17], cl	; 3: 136 78 17

time$19:	; InspectRegister £temporary3417 dh

time$20:	; Assign sec £temporary3417
x32552:	mov [bp + 18], dh	; 3: 136 118 18

time$21:	; Equal 25 localeConvPtr 0
x32555:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x32559:	je time$25	; 2: 116 18

time$22:	; Deref £temporary3419 -> localeConvPtr localeConvPtr 2
x32561:	mov si, [bp + 19]	; 3: 139 118 19

time$23:	; IntegralToIntegral £temporary3420 £temporary3419 -> localeConvPtr
x32564:	mov ax, [si + 2]	; 3: 139 68 2
x32567:	cmp ax, 0	; 3: 131 248 0
x32570:	jge time$24	; 2: 125 4
x32572:	neg ax	; 2: 247 216
x32574:	neg al	; 2: 246 216

time$24:	; BinarySubtract hour hour £temporary3420
x32576:	sub [bp + 16], al	; 3: 40 70 16

time$25:	; SignedModulo £temporary3422 year 4
x32579:	mov ax, [bp + 12]	; 3: 139 70 12
x32582:	xor dx, dx	; 2: 49 210
x32584:	idiv word [int2$4#]	; 4: 247 62 140 128

time$26:	; NotEqual 29 £temporary3422 0
x32588:	cmp dx, 0	; 3: 131 250 0
x32591:	jne time$29	; 2: 117 5

time$27:	; Assign £temporary3424 1
x32593:	mov ax, 1	; 3: 184 1 0

time$28:	; Goto 30
x32596:	jmp time$30	; 2: 235 3

time$29:	; Assign £temporary3424 0
x32598:	mov ax, 0	; 3: 184 0 0

time$30:	; Assign leapYear £temporary3424
x32601:	mov [bp + 21], ax	; 3: 137 70 21

time$31:	; Assign daysOfMonthsX[0] 31
x32604:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$32:	; Equal 35 leapYear 0
x32609:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x32613:	je time$35	; 2: 116 5

time$33:	; Assign £temporary3429 29
x32615:	mov ax, 29	; 3: 184 29 0

time$34:	; Goto 36
x32618:	jmp time$36	; 2: 235 3

time$35:	; Assign £temporary3429 28
x32620:	mov ax, 28	; 3: 184 28 0

time$36:	; Assign daysOfMonthsX[1] £temporary3429
x32623:	mov [bp + 25], ax	; 3: 137 70 25

time$37:	; Assign daysOfMonthsX[2] 31
x32626:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$38:	; Assign daysOfMonthsX[3] 30
x32631:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$39:	; Assign daysOfMonthsX[4] 31
x32636:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$40:	; Assign daysOfMonthsX[5] 30
x32641:	mov word [bp + 33], 30	; 5: 199 70 33 30 0

time$41:	; Assign daysOfMonthsX[6] 31
x32646:	mov word [bp + 35], 31	; 5: 199 70 35 31 0

time$42:	; Assign daysOfMonthsX[7] 31
x32651:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$43:	; Assign daysOfMonthsX[8] 30
x32656:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$44:	; Assign daysOfMonthsX[9] 31
x32661:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$45:	; Assign daysOfMonthsX[10] 30
x32666:	mov word [bp + 43], 30	; 5: 199 70 43 30 0

time$46:	; Assign daysOfMonthsX[11] 31
x32671:	mov word [bp + 45], 31	; 5: 199 70 45 31 0

time$47:	; IntegralToIntegral £temporary3442 monthDay
x32676:	mov al, [bp + 15]	; 3: 138 70 15
x32679:	and ax, 255	; 3: 37 255 0
x32682:	cmp al, 0	; 2: 60 0
x32684:	jge time$48	; 2: 125 4
x32686:	neg al	; 2: 246 216
x32688:	neg ax	; 2: 247 216

time$48:	; BinarySubtract yearDay £temporary3442 1
x32690:	dec ax	; 1: 72
x32691:	mov [bp + 47], ax	; 3: 137 70 47

time$49:	; Assign mon 0
x32694:	mov word [bp + 49], 0	; 5: 199 70 49 0 0

time$50:	; IntegralToIntegral £temporary3444 month
x32699:	mov al, [bp + 14]	; 3: 138 70 14
x32702:	and ax, 255	; 3: 37 255 0
x32705:	cmp al, 0	; 2: 60 0
x32707:	jge time$51	; 2: 125 4
x32709:	neg al	; 2: 246 216
x32711:	neg ax	; 2: 247 216

time$51:	; SignedGreaterThanEqual 58 mon £temporary3444
x32713:	cmp [bp + 49], ax	; 3: 57 70 49
x32716:	jge time$58	; 2: 125 26

time$52:	; UnsignedMultiply £temporary3448 mon 2
x32718:	mov ax, [bp + 49]	; 3: 139 70 49
x32721:	xor dx, dx	; 2: 49 210
x32723:	mul word [int2$2#]	; 4: 247 38 96 51

time$53:	; BinaryAdd £temporary3449 daysOfMonthsX £temporary3448
x32727:	mov si, bp	; 2: 137 238
x32729:	add si, 23	; 3: 131 198 23
x32732:	add si, ax	; 2: 1 198

time$54:	; Deref £temporary3447 -> £temporary3449 £temporary3449 0

time$55:	; BinaryAdd yearDay yearDay £temporary3447 -> £temporary3449
x32734:	mov ax, [si]	; 2: 139 4
x32736:	add [bp + 47], ax	; 3: 1 70 47

time$56:	; Increment mon
x32739:	inc word [bp + 49]	; 3: 255 70 49

time$57:	; Goto 50
x32742:	jmp time$50	; 2: 235 211

time$58:	; IntegralToIntegral £temporary3452 sec
x32744:	mov al, [bp + 18]	; 3: 138 70 18
x32747:	and ax, 255	; 3: 37 255 0
x32750:	cmp al, 0	; 2: 60 0
x32752:	jge time$59	; 2: 125 4
x32754:	neg al	; 2: 246 216
x32756:	neg ax	; 2: 247 216

time$59:	; Assign s$tm_sec £temporary3452
x32758:	mov [bp + 51], ax	; 3: 137 70 51

time$60:	; IntegralToIntegral £temporary3454 min
x32761:	mov al, [bp + 17]	; 3: 138 70 17
x32764:	and ax, 255	; 3: 37 255 0
x32767:	cmp al, 0	; 2: 60 0
x32769:	jge time$61	; 2: 125 4
x32771:	neg al	; 2: 246 216
x32773:	neg ax	; 2: 247 216

time$61:	; Assign s$tm_min £temporary3454
x32775:	mov [bp + 53], ax	; 3: 137 70 53

time$62:	; IntegralToIntegral £temporary3456 hour
x32778:	mov al, [bp + 16]	; 3: 138 70 16
x32781:	and ax, 255	; 3: 37 255 0
x32784:	cmp al, 0	; 2: 60 0
x32786:	jge time$63	; 2: 125 4
x32788:	neg al	; 2: 246 216
x32790:	neg ax	; 2: 247 216

time$63:	; Assign s$tm_hour £temporary3456
x32792:	mov [bp + 55], ax	; 3: 137 70 55

time$64:	; IntegralToIntegral £temporary3458 monthDay
x32795:	mov al, [bp + 15]	; 3: 138 70 15
x32798:	and ax, 255	; 3: 37 255 0
x32801:	cmp al, 0	; 2: 60 0
x32803:	jge time$65	; 2: 125 4
x32805:	neg al	; 2: 246 216
x32807:	neg ax	; 2: 247 216

time$65:	; Assign s$tm_mday £temporary3458
x32809:	mov [bp + 57], ax	; 3: 137 70 57

time$66:	; IntegralToIntegral £temporary3460 month
x32812:	mov al, [bp + 14]	; 3: 138 70 14
x32815:	and ax, 255	; 3: 37 255 0
x32818:	cmp al, 0	; 2: 60 0
x32820:	jge time$67	; 2: 125 4
x32822:	neg al	; 2: 246 216
x32824:	neg ax	; 2: 247 216

time$67:	; Assign s$tm_mon £temporary3460
x32826:	mov [bp + 59], ax	; 3: 137 70 59

time$68:	; Assign s$tm_year year
x32829:	mov ax, [bp + 12]	; 3: 139 70 12
x32832:	mov [bp + 61], ax	; 3: 137 70 61

time$69:	; Assign s$tm_wday 0
x32835:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$70:	; Assign s$tm_yday yearDay
x32840:	mov ax, [bp + 47]	; 3: 139 70 47
x32843:	mov [bp + 65], ax	; 3: 137 70 65

time$71:	; Assign s$tm_isdst 0
x32846:	mov word [bp + 67], 0	; 5: 199 70 67 0 0

time$72:	; CallHeader 69 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$73:	; address £temporary3465 s
x32851:	mov si, bp	; 2: 137 238
x32853:	add si, 51	; 3: 131 198 51

time$74:	; Parameter 69 £temporary3465 6
x32856:	mov [bp + 75], si	; 3: 137 118 75

time$75:	; Call 69 mktime 0
x32859:	mov word [bp + 69], time$76	; 5: 199 70 69 105 128
x32864:	mov [bp + 71], bp	; 3: 137 110 71
x32867:	add bp, 69	; 3: 131 197 69
x32870:	nop	; 1: 144
x32871:	jmp mktime	; 2: 235 37

time$76:	; PostCall 69

time$77:	; GetReturnValue £temporary3466

time$78:	; Assign time £temporary3466
x32873:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$79:	; Equal 82 timePtr 0
x32877:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32881:	je time$82	; 2: 116 10

time$80:	; Deref £temporary3468 -> timePtr timePtr 0
x32883:	mov si, [bp + 6]	; 3: 139 118 6

time$81:	; Assign £temporary3468 -> timePtr time
x32886:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32890:	mov [si], eax	; 3: 102 137 4

time$82:	; SetReturnValue time
x32893:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$83:	; Return time
x32897:	mov ax, [bp]	; 3: 139 70 0
x32900:	mov di, [bp + 4]	; 3: 139 126 4
x32903:	mov bp, [bp + 2]	; 3: 139 110 2
x32906:	jmp ax	; 2: 255 224

time$84:	; FunctionEnd time

int2$4#:
x32908:	dw 4	; 2: 4 0

mktime:	; Equal 28 tp 0
x32910:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32914:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3472 -> tp tp 10
x32918:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3473 £temporary3472 -> tp 69
x32921:	mov ax, [si + 10]	; 3: 139 68 10
x32924:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3474 £temporary3473 4
x32927:	xor dx, dx	; 2: 49 210
x32929:	idiv word [int2$4#]	; 4: 247 62 140 128

mktime$4:	; IntegralToIntegral £temporary3475 £temporary3474
x32933:	and eax, 65535	; 6: 102 37 255 255 0 0
x32939:	cmp ax, 0	; 3: 131 248 0
x32942:	jge mktime$5	; 2: 125 5
x32944:	neg ax	; 2: 247 216
x32946:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3475
x32949:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3476 -> tp tp 10
x32953:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3477 £temporary3476 -> tp 70
x32956:	mov ax, [si + 10]	; 3: 139 68 10
x32959:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3478 £temporary3477 365
x32962:	xor dx, dx	; 2: 49 210
x32964:	imul word [int2$365#]	; 4: 247 46 127 129

mktime$9:	; IntegralToIntegral £temporary3479 £temporary3478
x32968:	and eax, 65535	; 6: 102 37 255 255 0 0
x32974:	cmp ax, 0	; 3: 131 248 0
x32977:	jge mktime$10	; 2: 125 5
x32979:	neg ax	; 2: 247 216
x32981:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3480 £temporary3479 leapDays
x32984:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3481 -> tp tp 14
x32988:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3482 £temporary3481 -> tp
x32991:	mov bx, [si + 14]	; 3: 139 92 14
x32994:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x33001:	cmp bx, 0	; 3: 131 251 0
x33004:	jge mktime$13	; 2: 125 5
x33006:	neg bx	; 2: 247 219
x33008:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3480 £temporary3482
x33011:	add eax, ebx	; 3: 102 1 216
x33014:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3484 totalDays 86400
x33018:	mov eax, [bp + 12]	; 4: 102 139 70 12
x33022:	xor edx, edx	; 3: 102 49 210
x33025:	imul dword [int4$86400#]	; 5: 102 247 46 129 129
x33030:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3485 -> tp tp 4
x33033:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3486 £temporary3485 -> tp
x33036:	mov ax, [si + 4]	; 3: 139 68 4
x33039:	and eax, 65535	; 6: 102 37 255 255 0 0
x33045:	cmp ax, 0	; 3: 131 248 0
x33048:	jge mktime$17	; 2: 125 5
x33050:	neg ax	; 2: 247 216
x33052:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3487 £temporary3486 3600
x33055:	xor edx, edx	; 3: 102 49 210
x33058:	imul dword [int4$3600#]	; 5: 102 247 46 133 129

mktime$18:	; BinaryAdd £temporary3488 £temporary3484 £temporary3487
x33063:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3489 -> tp tp 2
x33066:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3490 £temporary3489 -> tp
x33069:	mov ax, [si + 2]	; 3: 139 68 2
x33072:	and eax, 65535	; 6: 102 37 255 255 0 0
x33078:	cmp ax, 0	; 3: 131 248 0
x33081:	jge mktime$21	; 2: 125 5
x33083:	neg ax	; 2: 247 216
x33085:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3491 £temporary3490 60
x33088:	xor edx, edx	; 3: 102 49 210
x33091:	imul dword [int4$60#]	; 5: 102 247 46 137 129

mktime$22:	; BinaryAdd £temporary3492 £temporary3488 £temporary3491
x33096:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3493 -> tp tp 0
x33099:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3494 £temporary3493 -> tp
x33102:	mov ax, [si]	; 2: 139 4
x33104:	and eax, 65535	; 6: 102 37 255 255 0 0
x33110:	cmp ax, 0	; 3: 131 248 0
x33113:	jge mktime$25	; 2: 125 5
x33115:	neg ax	; 2: 247 216
x33117:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3495 £temporary3492 £temporary3494
x33120:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3495

mktime$27:	; Return £temporary3495
x33123:	mov ax, [bp]	; 3: 139 70 0
x33126:	mov di, [bp + 4]	; 3: 139 126 4
x33129:	mov bp, [bp + 2]	; 3: 139 110 2
x33132:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x33134:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x33140:	mov ax, [bp]	; 3: 139 70 0
x33143:	mov di, [bp + 4]	; 3: 139 126 4
x33146:	mov bp, [bp + 2]	; 3: 139 110 2
x33149:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

int2$365#:
x33151:	dw 365	; 2: 109 1

int4$86400#:
x33153:	dd 86400	; 4: 128 81 1 0

int4$3600#:
x33157:	dd 3600	; 4: 16 14 0 0

int4$60#:
x33161:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x33165:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x33169:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3506 -> timePtr timePtr 0
x33173:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3506 -> timePtr
x33176:	mov eax, [si]	; 3: 102 139 4
x33179:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x33183:	mov eax, [bp + 8]	; 4: 102 139 70 8
x33187:	xor edx, edx	; 3: 102 49 210
x33190:	idiv dword [int4$86400#]	; 5: 102 247 62 129 129
x33195:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x33199:	mov eax, [bp + 12]	; 4: 102 139 70 12
x33203:	xor edx, edx	; 3: 102 49 210
x33206:	idiv dword [int4$3600#]	; 5: 102 247 62 133 129
x33211:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3510 secondsOfDay 3600
x33215:	mov eax, [bp + 12]	; 4: 102 139 70 12
x33219:	xor edx, edx	; 3: 102 49 210
x33222:	idiv dword [int4$3600#]	; 5: 102 247 62 133 129

gmtime$6:	; IntegralToIntegral £temporary3511 £temporary3510
x33227:	cmp eax, 0	; 4: 102 131 248 0
x33231:	jge gmtime$7	; 2: 125 5
x33233:	neg eax	; 3: 102 247 216
x33236:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3511
x33238:	mov [@4110$g_timeStruct + 4], ax	; 3: 163 245 131

gmtime$8:	; SignedDivide £temporary3513 secondsOfHour 60
x33241:	mov eax, [bp + 16]	; 4: 102 139 70 16
x33245:	xor edx, edx	; 3: 102 49 210
x33248:	idiv dword [int4$60#]	; 5: 102 247 62 137 129

gmtime$9:	; IntegralToIntegral £temporary3514 £temporary3513
x33253:	cmp eax, 0	; 4: 102 131 248 0
x33257:	jge gmtime$10	; 2: 125 5
x33259:	neg eax	; 3: 102 247 216
x33262:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3514
x33264:	mov [@4110$g_timeStruct + 2], ax	; 3: 163 243 131

gmtime$11:	; SignedModulo £temporary3516 secondsOfHour 60
x33267:	mov eax, [bp + 16]	; 4: 102 139 70 16
x33271:	xor edx, edx	; 3: 102 49 210
x33274:	idiv dword [int4$60#]	; 5: 102 247 62 137 129

gmtime$12:	; IntegralToIntegral £temporary3517 £temporary3516
x33279:	cmp edx, 0	; 4: 102 131 250 0
x33283:	jge gmtime$13	; 2: 125 5
x33285:	neg edx	; 3: 102 247 218
x33288:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3517
x33290:	mov [@4110$g_timeStruct], dx	; 4: 137 22 241 131

gmtime$14:	; SignedDivide totalDays time 86400
x33294:	mov eax, [bp + 8]	; 4: 102 139 70 8
x33298:	xor edx, edx	; 3: 102 49 210
x33301:	idiv dword [int4$86400#]	; 5: 102 247 62 129 129
x33306:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x33310:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x33315:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3521 totalDays 4
x33317:	mov eax, [bp + 20]	; 4: 102 139 70 20
x33321:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3522 £temporary3521
x33325:	cmp eax, 0	; 4: 102 131 248 0
x33329:	jge gmtime$18	; 2: 125 5
x33331:	neg eax	; 3: 102 247 216
x33334:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3522
x33336:	mov [@4110$g_timeStruct + 12], ax	; 3: 163 253 131

gmtime$19:	; Goto 24
x33339:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3524 totalDays 3
x33341:	mov eax, [bp + 20]	; 4: 102 139 70 20
x33345:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3525 £temporary3524 7
x33349:	xor edx, edx	; 3: 102 49 210
x33352:	idiv dword [int4$7#]	; 5: 102 247 62 3 132

gmtime$22:	; IntegralToIntegral £temporary3526 £temporary3525
x33357:	cmp edx, 0	; 4: 102 131 250 0
x33361:	jge gmtime$23	; 2: 125 5
x33363:	neg edx	; 3: 102 247 218
x33366:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3526
x33368:	mov [@4110$g_timeStruct + 12], dx	; 4: 137 22 253 131

gmtime$24:	; SignedDivide £temporary3527 totalDays 365
x33372:	mov eax, [bp + 20]	; 4: 102 139 70 20
x33376:	xor edx, edx	; 3: 102 49 210
x33379:	idiv dword [int4$365#]	; 5: 102 247 62 7 132

gmtime$25:	; BinaryAdd £temporary3528 £temporary3527 1970
x33384:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3529 £temporary3528
x33390:	cmp eax, 0	; 4: 102 131 248 0
x33394:	jge gmtime$27	; 2: 125 5
x33396:	neg eax	; 3: 102 247 216
x33399:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3529
x33401:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3530 year 1969
x33404:	mov ax, [bp + 24]	; 3: 139 70 24
x33407:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3530 4
x33410:	xor dx, dx	; 2: 49 210
x33412:	idiv word [int2$4#]	; 4: 247 62 140 128
x33416:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x33419:	mov eax, [bp + 20]	; 4: 102 139 70 20
x33423:	xor edx, edx	; 3: 102 49 210
x33426:	idiv dword [int4$365#]	; 5: 102 247 62 7 132
x33431:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3533 leapDays
x33435:	mov ax, [bp + 26]	; 3: 139 70 26
x33438:	and eax, 65535	; 6: 102 37 255 255 0 0
x33444:	cmp ax, 0	; 3: 131 248 0
x33447:	jge gmtime$32	; 2: 125 5
x33449:	neg ax	; 2: 247 216
x33451:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3533
x33454:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x33458:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x33463:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x33465:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x33468:	mov ax, [bp + 24]	; 3: 139 70 24
x33471:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x33474:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 208 130
x33479:	mov [bp + 30], bp	; 3: 137 110 30
x33482:	add bp, 28	; 3: 131 197 28
x33485:	jmp @4111$isLeapYear	; 3: 233 59 1

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3537

gmtime$40:	; Equal 43 £temporary3537 0
x33488:	cmp bx, 0	; 3: 131 251 0
x33491:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x33493:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x33501:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x33503:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x33511:	mov ax, [bp + 24]	; 3: 139 70 24
x33514:	sub ax, 1900	; 3: 45 108 7
x33517:	mov [@4110$g_timeStruct + 10], ax	; 3: 163 251 131

gmtime$45:	; IntegralToIntegral £temporary3544 totalDays
x33520:	mov eax, [bp + 20]	; 4: 102 139 70 20
x33524:	cmp eax, 0	; 4: 102 131 248 0
x33528:	jge gmtime$46	; 2: 125 5
x33530:	neg eax	; 3: 102 247 216
x33533:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3544
x33535:	mov [@4110$g_timeStruct + 14], ax	; 3: 163 255 131

gmtime$47:	; Assign daysOfMonths[0] 31
x33538:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x33543:	mov ax, [bp + 24]	; 3: 139 70 24
x33546:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x33549:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 27 131
x33554:	mov [bp + 32], bp	; 3: 137 110 32
x33557:	add bp, 30	; 3: 131 197 30
x33560:	jmp @4111$isLeapYear	; 3: 233 240 0

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3545

gmtime$53:	; Equal 56 £temporary3545 0
x33563:	cmp bx, 0	; 3: 131 251 0
x33566:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3550 29
x33568:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x33571:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3550 28
x33573:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3550
x33576:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x33579:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x33584:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x33589:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x33594:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x33599:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x33604:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x33609:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x33614:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x33619:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x33624:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x33629:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; UnsignedMultiply £temporary3564 month 2
x33634:	mov ax, [bp + 52]	; 3: 139 70 52
x33637:	xor dx, dx	; 2: 49 210
x33639:	mul word [int2$2#]	; 4: 247 38 96 51

gmtime$70:	; BinaryAdd £temporary3565 daysOfMonths £temporary3564
x33643:	mov si, bp	; 2: 137 238
x33645:	add si, 28	; 3: 131 198 28
x33648:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3563 -> £temporary3565 £temporary3565 0

gmtime$72:	; IntegralToIntegral £temporary3566 £temporary3563 -> £temporary3565
x33650:	mov ax, [si]	; 2: 139 4
x33652:	and eax, 65535	; 6: 102 37 255 255 0 0
x33658:	cmp ax, 0	; 3: 131 248 0
x33661:	jge gmtime$73	; 2: 125 5
x33663:	neg ax	; 2: 247 216
x33665:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3566
x33668:	cmp [bp + 20], eax	; 4: 102 57 70 20
x33672:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3568 month
x33674:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x33677:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; UnsignedMultiply £temporary3570 £temporary3568 2
x33680:	xor dx, dx	; 2: 49 210
x33682:	mul word [int2$2#]	; 4: 247 38 96 51

gmtime$77:	; BinaryAdd £temporary3571 daysOfMonths £temporary3570
x33686:	mov si, bp	; 2: 137 238
x33688:	add si, 28	; 3: 131 198 28
x33691:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3569 -> £temporary3571 £temporary3571 0

gmtime$79:	; IntegralToIntegral £temporary3572 £temporary3569 -> £temporary3571
x33693:	mov ax, [si]	; 2: 139 4
x33695:	and eax, 65535	; 6: 102 37 255 255 0 0
x33701:	cmp ax, 0	; 3: 131 248 0
x33704:	jge gmtime$80	; 2: 125 5
x33706:	neg ax	; 2: 247 216
x33708:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3572
x33711:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x33715:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x33717:	mov ax, [bp + 52]	; 3: 139 70 52
x33720:	mov [@4110$g_timeStruct + 8], ax	; 3: 163 249 131

gmtime$83:	; BinaryAdd £temporary3576 totalDays 1
x33723:	mov eax, [bp + 20]	; 4: 102 139 70 20
x33727:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3577 £temporary3576
x33729:	cmp eax, 0	; 4: 102 131 248 0
x33733:	jge gmtime$85	; 2: 125 5
x33735:	neg eax	; 3: 102 247 216
x33738:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3577
x33740:	mov [@4110$g_timeStruct + 6], ax	; 3: 163 247 131

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x33743:	mov word [@4110$g_timeStruct + 16], -1	; 6: 199 6 1 132 255 255

gmtime$87:	; SetReturnValue (@4110$g_timeStruct,0)
x33749:	mov bx, @4110$g_timeStruct	; 3: 187 241 131

gmtime$88:	; Return (@4110$g_timeStruct,0)
x33752:	mov ax, [bp]	; 3: 139 70 0
x33755:	mov di, [bp + 4]	; 3: 139 126 4
x33758:	mov bp, [bp + 2]	; 3: 139 110 2
x33761:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x33763:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x33766:	mov ax, [bp]	; 3: 139 70 0
x33769:	mov di, [bp + 4]	; 3: 139 126 4
x33772:	mov bp, [bp + 2]	; 3: 139 110 2
x33775:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@4110$g_timeStruct:
x33777:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

int4$7#:
x33795:	dd 7	; 4: 7 0 0 0

int4$365#:
x33799:	dd 365	; 4: 109 1 0 0

@4111$isLeapYear:	; SignedModulo £temporary3496 year 4
x33803:	mov ax, [bp + 6]	; 3: 139 70 6
x33806:	xor dx, dx	; 2: 49 210
x33808:	idiv word [int2$4#]	; 4: 247 62 140 128

@4111$isLeapYear$1:	; NotEqual 4 £temporary3496 0
x33812:	cmp dx, 0	; 3: 131 250 0
x33815:	jne @4111$isLeapYear$4	; 2: 117 14

@4111$isLeapYear$2:	; SignedModulo £temporary3498 year 100
x33817:	mov ax, [bp + 6]	; 3: 139 70 6
x33820:	xor dx, dx	; 2: 49 210
x33822:	idiv word [int2$100#]	; 4: 247 62 72 132

@4111$isLeapYear$3:	; NotEqual 6 £temporary3498 0
x33826:	cmp dx, 0	; 3: 131 250 0
x33829:	jne @4111$isLeapYear$6	; 2: 117 14

@4111$isLeapYear$4:	; SignedModulo £temporary3501 year 400
x33831:	mov ax, [bp + 6]	; 3: 139 70 6
x33834:	xor dx, dx	; 2: 49 210
x33836:	idiv word [int2$400#]	; 4: 247 62 74 132

@4111$isLeapYear$5:	; NotEqual 8 £temporary3501 0
x33840:	cmp dx, 0	; 3: 131 250 0
x33843:	jne @4111$isLeapYear$8	; 2: 117 5

@4111$isLeapYear$6:	; Assign £temporary3504 1
x33845:	mov bx, 1	; 3: 187 1 0

@4111$isLeapYear$7:	; Goto 9
x33848:	jmp @4111$isLeapYear$9	; 2: 235 3

@4111$isLeapYear$8:	; Assign £temporary3504 0
x33850:	mov bx, 0	; 3: 187 0 0

@4111$isLeapYear$9:	; SetReturnValue £temporary3504

@4111$isLeapYear$10:	; Return £temporary3504
x33853:	mov ax, [bp]	; 3: 139 70 0
x33856:	mov di, [bp + 4]	; 3: 139 126 4
x33859:	mov bp, [bp + 2]	; 3: 139 110 2
x33862:	jmp ax	; 2: 255 224

@4111$isLeapYear$11:	; FunctionEnd isLeapYear

int2$100#:
x33864:	dw 100	; 2: 100 0

int2$400#:
x33866:	dw 400	; 2: 144 1

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x33868:	mov ax, [bp + 6]	; 3: 139 70 6
x33871:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x33874:	mov word [bp + 8], localtime$3	; 5: 199 70 8 96 132
x33879:	mov [bp + 10], bp	; 3: 137 110 10
x33882:	add bp, 8	; 3: 131 197 8
x33885:	jmp gmtime	; 3: 233 45 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3633

localtime$5:	; Assign tmPtr £temporary3633
x33888:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$7:	; Call 10 localeconv 0
x33891:	mov word [bp + 10], localtime$8	; 5: 199 70 10 113 132
x33896:	mov [bp + 12], bp	; 3: 137 110 12
x33899:	add bp, 10	; 3: 131 197 10
x33902:	jmp localeconv	; 3: 233 195 153

localtime$8:	; PostCall 10

localtime$9:	; GetReturnValue £temporary3634

localtime$10:	; Assign localeConvPtr £temporary3634
x33905:	mov [bp + 10], bx	; 3: 137 94 10

localtime$11:	; Assign timeZone 0
x33908:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

localtime$12:	; Equal 21 localeConvPtr 0
x33913:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x33917:	je localtime$21	; 2: 116 25

localtime$13:	; Deref £temporary3636 -> tmPtr tmPtr 16
x33919:	mov si, [bp + 8]	; 3: 139 118 8

localtime$14:	; NotEqual 18 £temporary3636 -> tmPtr 1
x33922:	cmp word [si + 16], 1	; 4: 131 124 16 1
x33926:	jne localtime$18	; 2: 117 7

localtime$15:	; Deref £temporary3638 -> localeConvPtr localeConvPtr 0
x33928:	mov si, [bp + 10]	; 3: 139 118 10

localtime$16:	; Assign £temporary3643 £temporary3638 -> localeConvPtr
x33931:	mov ax, [si]	; 2: 139 4

localtime$17:	; Goto 20
x33933:	jmp localtime$20	; 2: 235 6

localtime$18:	; Deref £temporary3639 -> localeConvPtr localeConvPtr 2
x33935:	mov si, [bp + 10]	; 3: 139 118 10

localtime$19:	; Assign £temporary3643 £temporary3639 -> localeConvPtr
x33938:	mov ax, [si + 2]	; 3: 139 68 2

localtime$20:	; Assign timeZone £temporary3643
x33941:	mov [bp + 12], ax	; 3: 137 70 12

localtime$21:	; Deref £temporary3644 -> timePtr timePtr 0
x33944:	mov si, [bp + 6]	; 3: 139 118 6

localtime$22:	; IntegralToIntegral £temporary3645 timeZone
x33947:	mov ax, [bp + 12]	; 3: 139 70 12
x33950:	and eax, 65535	; 6: 102 37 255 255 0 0
x33956:	cmp ax, 0	; 3: 131 248 0
x33959:	jge localtime$23	; 2: 125 5
x33961:	neg ax	; 2: 247 216
x33963:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3646 £temporary3645 3600
x33966:	xor edx, edx	; 3: 102 49 210
x33969:	imul dword [int4$3600#]	; 5: 102 247 46 133 129

localtime$24:	; BinaryAdd t £temporary3644 -> timePtr £temporary3646
x33974:	mov ebx, [si]	; 3: 102 139 28
x33977:	add ebx, eax	; 3: 102 1 195
x33980:	mov [bp + 14], ebx	; 4: 102 137 94 14

localtime$25:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3648 t
x33984:	mov si, bp	; 2: 137 238
x33986:	add si, 14	; 3: 131 198 14

localtime$27:	; Parameter 18 £temporary3648 6
x33989:	mov [bp + 24], si	; 3: 137 118 24

localtime$28:	; Call 18 gmtime 0
x33992:	mov word [bp + 18], localtime$29	; 5: 199 70 18 214 132
x33997:	mov [bp + 20], bp	; 3: 137 110 20
x34000:	add bp, 18	; 3: 131 197 18
x34003:	jmp gmtime	; 3: 233 183 252

localtime$29:	; PostCall 18

localtime$30:	; GetReturnValue £temporary3649

localtime$31:	; SetReturnValue £temporary3649

localtime$32:	; Return £temporary3649
x34006:	mov ax, [bp]	; 3: 139 70 0
x34009:	mov di, [bp + 4]	; 3: 139 126 4
x34012:	mov bp, [bp + 2]	; 3: 139 110 2
x34015:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

asctime:	; Assign localeConvPtr 0
x34017:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 5 localeConvPtr 0
x34022:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x34026:	je asctime$5	; 2: 116 8

asctime$2:	; Deref £temporary3584 -> localeConvPtr localeConvPtr 4
x34028:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Assign £temporary3588 £temporary3584 -> localeConvPtr
x34031:	mov ax, [si + 4]	; 3: 139 68 4

asctime$4:	; Goto 6
x34034:	jmp asctime$6	; 2: 235 3

asctime$5:	; Assign £temporary3588 0
x34036:	mov ax, 0	; 3: 184 0 0

asctime$6:	; Assign shortDayList £temporary3588
x34039:	mov [bp + 10], ax	; 3: 137 70 10

asctime$7:	; Equal 11 localeConvPtr 0
x34042:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x34046:	je asctime$11	; 2: 116 8

asctime$8:	; Deref £temporary3590 -> localeConvPtr localeConvPtr 8
x34048:	mov si, [bp + 8]	; 3: 139 118 8

asctime$9:	; Assign £temporary3594 £temporary3590 -> localeConvPtr
x34051:	mov ax, [si + 8]	; 3: 139 68 8

asctime$10:	; Goto 12
x34054:	jmp asctime$12	; 2: 235 3

asctime$11:	; Assign £temporary3594 0
x34056:	mov ax, 0	; 3: 184 0 0

asctime$12:	; Assign shortMonthList £temporary3594
x34059:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Equal 16 shortDayList 0
x34062:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x34066:	je asctime$16	; 2: 116 5

asctime$14:	; Assign £temporary3599 shortDayList
x34068:	mov ax, [bp + 10]	; 3: 139 70 10

asctime$15:	; Goto 17
x34071:	jmp asctime$17	; 2: 235 3

asctime$16:	; Assign £temporary3599 g_defaultShortDayList
x34073:	mov ax, @4208$g_defaultShortDayList	; 3: 184 182 133

asctime$17:	; Assign shortDayList £temporary3599
x34076:	mov [bp + 10], ax	; 3: 137 70 10

asctime$18:	; Equal 21 shortMonthList 0
x34079:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x34083:	je asctime$21	; 2: 116 5

asctime$19:	; Assign £temporary3604 shortMonthList
x34085:	mov ax, [bp + 12]	; 3: 139 70 12

asctime$20:	; Goto 22
x34088:	jmp asctime$22	; 2: 235 3

asctime$21:	; Assign £temporary3604 g_defaultShortMonthList
x34090:	mov ax, @4210$g_defaultShortMonthList	; 3: 184 196 133

asctime$22:	; Assign shortMonthList £temporary3604
x34093:	mov [bp + 12], ax	; 3: 137 70 12

asctime$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$24:	; Parameter 14 g_timeString 6
x34096:	mov word [bp + 20], @4207$g_timeString	; 5: 199 70 20 220 133

asctime$25:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x34101:	mov word [bp + 22], string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 220 134

asctime$26:	; Deref £temporary3605 -> tp tp 12
x34106:	mov si, [bp + 6]	; 3: 139 118 6

asctime$27:	; UnsignedMultiply £temporary3607 £temporary3605 -> tp 2
x34109:	mov ax, [si + 12]	; 3: 139 68 12
x34112:	xor dx, dx	; 2: 49 210
x34114:	mul word [int2$2#]	; 4: 247 38 96 51

asctime$28:	; BinaryAdd £temporary3608 shortDayList £temporary3607
x34118:	mov si, [bp + 10]	; 3: 139 118 10
x34121:	add si, ax	; 2: 1 198

asctime$29:	; Deref £temporary3606 -> £temporary3608 £temporary3608 0

asctime$30:	; Parameter 14 £temporary3606 -> £temporary3608 10
x34123:	mov ax, [si]	; 2: 139 4
x34125:	mov [bp + 24], ax	; 3: 137 70 24

asctime$31:	; Deref £temporary3609 -> tp tp 8
x34128:	mov si, [bp + 6]	; 3: 139 118 6

asctime$32:	; UnsignedMultiply £temporary3611 £temporary3609 -> tp 2
x34131:	mov ax, [si + 8]	; 3: 139 68 8
x34134:	xor dx, dx	; 2: 49 210
x34136:	mul word [int2$2#]	; 4: 247 38 96 51

asctime$33:	; BinaryAdd £temporary3612 shortMonthList £temporary3611
x34140:	mov si, [bp + 12]	; 3: 139 118 12
x34143:	add si, ax	; 2: 1 198

asctime$34:	; Deref £temporary3610 -> £temporary3612 £temporary3612 0

asctime$35:	; Parameter 14 £temporary3610 -> £temporary3612 12
x34145:	mov ax, [si]	; 2: 139 4
x34147:	mov [bp + 26], ax	; 3: 137 70 26

asctime$36:	; Deref £temporary3613 -> tp tp 6
x34150:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; Parameter 14 £temporary3613 -> tp 14
x34153:	mov ax, [si + 6]	; 3: 139 68 6
x34156:	mov [bp + 28], ax	; 3: 137 70 28

asctime$38:	; Deref £temporary3614 -> tp tp 4
x34159:	mov si, [bp + 6]	; 3: 139 118 6

asctime$39:	; Parameter 14 £temporary3614 -> tp 16
x34162:	mov ax, [si + 4]	; 3: 139 68 4
x34165:	mov [bp + 30], ax	; 3: 137 70 30

asctime$40:	; Deref £temporary3615 -> tp tp 2
x34168:	mov si, [bp + 6]	; 3: 139 118 6

asctime$41:	; Parameter 14 £temporary3615 -> tp 18
x34171:	mov ax, [si + 2]	; 3: 139 68 2
x34174:	mov [bp + 32], ax	; 3: 137 70 32

asctime$42:	; Deref £temporary3616 -> tp tp 0
x34177:	mov si, [bp + 6]	; 3: 139 118 6

asctime$43:	; Parameter 14 £temporary3616 -> tp 20
x34180:	mov ax, [si]	; 2: 139 4
x34182:	mov [bp + 34], ax	; 3: 137 70 34

asctime$44:	; Deref £temporary3617 -> tp tp 10
x34185:	mov si, [bp + 6]	; 3: 139 118 6

asctime$45:	; BinaryAdd £temporary3618 £temporary3617 -> tp 1900
x34188:	mov ax, [si + 10]	; 3: 139 68 10
x34191:	add ax, 1900	; 3: 5 108 7

asctime$46:	; Parameter 14 £temporary3618 22
x34194:	mov [bp + 36], ax	; 3: 137 70 36

asctime$47:	; Call 14 sprintf 0
x34197:	mov word [bp + 14], asctime$48	; 5: 199 70 14 168 133
x34202:	mov [bp + 16], bp	; 3: 137 110 16
x34205:	add bp, 14	; 3: 131 197 14
x34208:	mov di, bp	; 2: 137 239
x34210:	add di, 14	; 3: 131 199 14
x34213:	jmp sprintf	; 3: 233 79 1

asctime$48:	; PostCall 14

asctime$49:	; SetReturnValue g_timeString
x34216:	mov bx, @4207$g_timeString	; 3: 187 220 133

asctime$50:	; Return g_timeString
x34219:	mov ax, [bp]	; 3: 139 70 0
x34222:	mov di, [bp + 4]	; 3: 139 126 4
x34225:	mov bp, [bp + 2]	; 3: 139 110 2
x34228:	jmp ax	; 2: 255 224

asctime$51:	; FunctionEnd asctime

@4208$g_defaultShortDayList:
x34230:	dw string_Sun# ; 2: 129 30
x34232:	dw string_Mon# ; 2: 133 30
x34234:	dw string_Tue# ; 2: 137 30
x34236:	dw string_Wed# ; 2: 141 30
x34238:	dw string_Thu# ; 2: 145 30
x34240:	dw string_Fri# ; 2: 149 30
x34242:	dw string_Sat# ; 2: 153 30

@4210$g_defaultShortMonthList:
x34244:	dw string_Jan# ; 2: 252 30
x34246:	dw string_Feb# ; 2: 0 31
x34248:	dw string_Mar# ; 2: 4 31
x34250:	dw string_Apr# ; 2: 8 31
x34252:	dw string_May# ; 2: 12 31
x34254:	dw string_Jun# ; 2: 16 31
x34256:	dw string_Jul# ; 2: 20 31
x34258:	dw string_Aug# ; 2: 24 31
x34260:	dw string_Sep# ; 2: 28 31
x34262:	dw string_Oct# ; 2: 32 31
x34264:	dw string_Nov# ; 2: 36 31
x34266:	dw string_Dec# ; 2: 40 31

@4207$g_timeString:
x34268:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x34524:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

sprintf:	; address £temporary2394 format
x34551:	mov si, bp	; 2: 137 238
x34553:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2395 £temporary2394

sprintf$2:	; BinaryAdd arg_list £temporary2395 2
x34556:	add si, 2	; 3: 131 198 2
x34559:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x34562:	mov ax, [bp + 6]	; 3: 139 70 6
x34565:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x34568:	mov ax, [bp + 8]	; 3: 139 70 8
x34571:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x34574:	mov ax, [di + 10]	; 3: 139 69 10
x34577:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x34580:	mov word [di + 12], sprintf$8	; 5: 199 69 12 39 135
x34585:	mov [di + 14], bp	; 3: 137 109 14
x34588:	mov [di + 16], di	; 3: 137 125 16
x34591:	add di, 12	; 3: 131 199 12
x34594:	mov bp, di	; 2: 137 253
x34596:	nop	; 1: 144
x34597:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2397

sprintf$10:	; SetReturnValue £temporary2397

sprintf$11:	; Return £temporary2397
x34599:	mov ax, [bp]	; 3: 139 70 0
x34602:	mov di, [bp + 4]	; 3: 139 126 4
x34605:	mov bp, [bp + 2]	; 3: 139 110 2
x34608:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x34610:	mov word [g_outStatus], 1	; 6: 199 6 156 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2402 outString
x34616:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2402
x34619:	mov [g_outDevice], ax	; 3: 163 158 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x34622:	mov ax, [bp + 8]	; 3: 139 70 8
x34625:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x34628:	mov ax, [bp + 10]	; 3: 139 70 10
x34631:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x34634:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 88 135
x34639:	mov [bp + 14], bp	; 3: 137 110 14
x34642:	add bp, 12	; 3: 131 197 12
x34645:	jmp printFormat	; 3: 233 72 136

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2403

vsprintf$9:	; SetReturnValue £temporary2403

vsprintf$10:	; Return £temporary2403
x34648:	mov ax, [bp]	; 3: 139 70 0
x34651:	mov di, [bp + 4]	; 3: 139 126 4
x34654:	mov bp, [bp + 2]	; 3: 139 110 2
x34657:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x34659:	mov ax, [bp + 6]	; 3: 139 70 6
x34662:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x34665:	mov word [bp + 8], ctime$4	; 5: 199 70 8 119 135
x34670:	mov [bp + 10], bp	; 3: 137 110 10
x34673:	add bp, 8	; 3: 131 197 8
x34676:	jmp localtime	; 3: 233 213 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3629

ctime$6:	; Parameter 8 £temporary3629 6
x34679:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x34682:	mov word [bp + 8], ctime$8	; 5: 199 70 8 136 135
x34687:	mov [bp + 10], bp	; 3: 137 110 10
x34690:	add bp, 8	; 3: 131 197 8
x34693:	jmp asctime	; 3: 233 89 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3630

ctime$10:	; SetReturnValue £temporary3630

ctime$11:	; Return £temporary3630
x34696:	mov ax, [bp]	; 3: 139 70 0
x34699:	mov di, [bp + 4]	; 3: 139 126 4
x34702:	mov bp, [bp + 2]	; 3: 139 110 2
x34705:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x34707:	mov word [bp + 14], strftime$2	; 5: 199 70 14 161 135
x34712:	mov [bp + 16], bp	; 3: 137 110 16
x34715:	add bp, 14	; 3: 131 197 14
x34718:	jmp localeconv	; 3: 233 147 150

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3653

strftime$4:	; Assign localeConvPtr £temporary3653
x34721:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 9 localeConvPtr 0
x34724:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34728:	je strftime$9	; 2: 116 8

strftime$6:	; Deref £temporary3655 -> localeConvPtr localeConvPtr 4
x34730:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Assign £temporary3659 £temporary3655 -> localeConvPtr
x34733:	mov ax, [si + 4]	; 3: 139 68 4

strftime$8:	; Goto 10
x34736:	jmp strftime$10	; 2: 235 3

strftime$9:	; Assign £temporary3659 0
x34738:	mov ax, 0	; 3: 184 0 0

strftime$10:	; Assign shortDayList £temporary3659
x34741:	mov [bp + 16], ax	; 3: 137 70 16

strftime$11:	; Equal 15 localeConvPtr 0
x34744:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34748:	je strftime$15	; 2: 116 8

strftime$12:	; Deref £temporary3661 -> localeConvPtr localeConvPtr 8
x34750:	mov si, [bp + 14]	; 3: 139 118 14

strftime$13:	; Assign £temporary3665 £temporary3661 -> localeConvPtr
x34753:	mov ax, [si + 8]	; 3: 139 68 8

strftime$14:	; Goto 16
x34756:	jmp strftime$16	; 2: 235 3

strftime$15:	; Assign £temporary3665 0
x34758:	mov ax, 0	; 3: 184 0 0

strftime$16:	; Assign shortMonthList £temporary3665
x34761:	mov [bp + 18], ax	; 3: 137 70 18

strftime$17:	; Equal 21 localeConvPtr 0
x34764:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34768:	je strftime$21	; 2: 116 8

strftime$18:	; Deref £temporary3667 -> localeConvPtr localeConvPtr 6
x34770:	mov si, [bp + 14]	; 3: 139 118 14

strftime$19:	; Assign £temporary3671 £temporary3667 -> localeConvPtr
x34773:	mov ax, [si + 6]	; 3: 139 68 6

strftime$20:	; Goto 22
x34776:	jmp strftime$22	; 2: 235 3

strftime$21:	; Assign £temporary3671 0
x34778:	mov ax, 0	; 3: 184 0 0

strftime$22:	; Assign longDayList £temporary3671
x34781:	mov [bp + 20], ax	; 3: 137 70 20

strftime$23:	; Equal 27 localeConvPtr 0
x34784:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34788:	je strftime$27	; 2: 116 8

strftime$24:	; Deref £temporary3673 -> localeConvPtr localeConvPtr 10
x34790:	mov si, [bp + 14]	; 3: 139 118 14

strftime$25:	; Assign £temporary3677 £temporary3673 -> localeConvPtr
x34793:	mov ax, [si + 10]	; 3: 139 68 10

strftime$26:	; Goto 28
x34796:	jmp strftime$28	; 2: 235 3

strftime$27:	; Assign £temporary3677 0
x34798:	mov ax, 0	; 3: 184 0 0

strftime$28:	; Assign longMonthList £temporary3677
x34801:	mov [bp + 22], ax	; 3: 137 70 22

strftime$29:	; Deref £temporary3678 -> tp tp 10
x34804:	mov si, [bp + 12]	; 3: 139 118 12

strftime$30:	; BinarySubtract £temporary3679 £temporary3678 -> tp 69
x34807:	mov ax, [si + 10]	; 3: 139 68 10
x34810:	sub ax, 69	; 3: 131 232 69

strftime$31:	; SignedDivide leapDays £temporary3679 4
x34813:	xor dx, dx	; 2: 49 210
x34815:	idiv word [int2$4#]	; 4: 247 62 140 128
x34819:	mov [bp + 24], ax	; 3: 137 70 24

strftime$32:	; Deref £temporary3681 -> tp tp 10
x34822:	mov si, [bp + 12]	; 3: 139 118 12

strftime$33:	; BinarySubtract £temporary3682 £temporary3681 -> tp 70
x34825:	mov ax, [si + 10]	; 3: 139 68 10
x34828:	sub ax, 70	; 3: 131 232 70

strftime$34:	; SignedMultiply £temporary3683 £temporary3682 365
x34831:	xor dx, dx	; 2: 49 210
x34833:	imul word [int2$365#]	; 4: 247 46 127 129

strftime$35:	; BinaryAdd £temporary3684 £temporary3683 leapDays
x34837:	add ax, [bp + 24]	; 3: 3 70 24

strftime$36:	; Deref £temporary3685 -> tp tp 14
x34840:	mov si, [bp + 12]	; 3: 139 118 12

strftime$37:	; BinaryAdd £temporary3686 £temporary3684 £temporary3685 -> tp
x34843:	add ax, [si + 14]	; 3: 3 68 14

strftime$38:	; IntegralToIntegral £temporary3687 £temporary3686
x34846:	and eax, 65535	; 6: 102 37 255 255 0 0
x34852:	cmp ax, 0	; 3: 131 248 0
x34855:	jge strftime$39	; 2: 125 5
x34857:	neg ax	; 2: 247 216
x34859:	neg eax	; 3: 102 247 216

strftime$39:	; Assign totalDays £temporary3687
x34862:	mov [bp + 26], eax	; 4: 102 137 70 26

strftime$40:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$41:	; Parameter 34 s 6
x34866:	mov ax, [bp + 6]	; 3: 139 70 6
x34869:	mov [bp + 40], ax	; 3: 137 70 40

strftime$42:	; Parameter 34 string_# 8
x34872:	mov word [bp + 42], string_#	; 5: 199 70 42 96 30

strftime$43:	; Call 34 strcpy 0
x34877:	mov word [bp + 34], strftime$44	; 5: 199 70 34 75 136
x34882:	mov [bp + 36], bp	; 3: 137 110 36
x34885:	add bp, 34	; 3: 131 197 34
x34888:	jmp strcpy	; 3: 233 15 205

strftime$44:	; PostCall 34

strftime$45:	; Equal 48 shortDayList 0
x34891:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x34895:	je strftime$48	; 2: 116 5

strftime$46:	; Assign £temporary3693 shortDayList
x34897:	mov ax, [bp + 16]	; 3: 139 70 16

strftime$47:	; Goto 49
x34900:	jmp strftime$49	; 2: 235 3

strftime$48:	; Assign £temporary3693 g_defaultShortDayList
x34902:	mov ax, @4208$g_defaultShortDayList	; 3: 184 182 133

strftime$49:	; Assign shortDayList £temporary3693
x34905:	mov [bp + 16], ax	; 3: 137 70 16

strftime$50:	; Equal 53 longDayList 0
x34908:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x34912:	je strftime$53	; 2: 116 5

strftime$51:	; Assign £temporary3698 longDayList
x34914:	mov ax, [bp + 20]	; 3: 139 70 20

strftime$52:	; Goto 54
x34917:	jmp strftime$54	; 2: 235 3

strftime$53:	; Assign £temporary3698 g_defaultLongDayList
x34919:	mov ax, @4209$g_defaultLongDayList	; 3: 184 109 142

strftime$54:	; Assign longDayList £temporary3698
x34922:	mov [bp + 20], ax	; 3: 137 70 20

strftime$55:	; Equal 58 shortMonthList 0
x34925:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x34929:	je strftime$58	; 2: 116 5

strftime$56:	; Assign £temporary3703 shortMonthList
x34931:	mov ax, [bp + 18]	; 3: 139 70 18

strftime$57:	; Goto 59
x34934:	jmp strftime$59	; 2: 235 3

strftime$58:	; Assign £temporary3703 g_defaultShortMonthList
x34936:	mov ax, @4210$g_defaultShortMonthList	; 3: 184 196 133

strftime$59:	; Assign shortMonthList £temporary3703
x34939:	mov [bp + 18], ax	; 3: 137 70 18

strftime$60:	; Equal 63 longMonthList 0
x34942:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x34946:	je strftime$63	; 2: 116 5

strftime$61:	; Assign £temporary3708 longMonthList
x34948:	mov ax, [bp + 22]	; 3: 139 70 22

strftime$62:	; Goto 64
x34951:	jmp strftime$64	; 2: 235 3

strftime$63:	; Assign £temporary3708 g_defaultLongMonthList
x34953:	mov ax, @4211$g_defaultLongMonthList	; 3: 184 123 142

strftime$64:	; Assign longMonthList £temporary3708
x34956:	mov [bp + 22], ax	; 3: 137 70 22

strftime$65:	; SignedGreaterThanEqual 70 totalDays 3
x34959:	cmp dword [bp + 26], 3	; 5: 102 131 126 26 3
x34964:	jge strftime$70	; 2: 125 24

strftime$66:	; BinaryAdd £temporary3710 totalDays 4
x34966:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34970:	add eax, 4	; 4: 102 131 192 4

strftime$67:	; IntegralToIntegral £temporary3711 £temporary3710
x34974:	cmp eax, 0	; 4: 102 131 248 0
x34978:	jge strftime$68	; 2: 125 5
x34980:	neg eax	; 3: 102 247 216
x34983:	neg ax	; 2: 247 216

strftime$68:	; Assign yearDaySunday £temporary3711
x34985:	mov [bp + 30], ax	; 3: 137 70 30

strftime$69:	; Goto 74
x34988:	jmp strftime$74	; 2: 235 30

strftime$70:	; BinarySubtract £temporary3712 totalDays 3
x34990:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34994:	sub eax, 3	; 4: 102 131 232 3

strftime$71:	; SignedModulo £temporary3713 £temporary3712 7
x34998:	xor edx, edx	; 3: 102 49 210
x35001:	idiv dword [int4$7#]	; 5: 102 247 62 3 132

strftime$72:	; IntegralToIntegral £temporary3714 £temporary3713
x35006:	cmp edx, 0	; 4: 102 131 250 0
x35010:	jge strftime$73	; 2: 125 5
x35012:	neg edx	; 3: 102 247 218
x35015:	neg dx	; 2: 247 218

strftime$73:	; Assign yearDaySunday £temporary3714
x35017:	mov [bp + 30], dx	; 3: 137 86 30

strftime$74:	; SignedGreaterThanEqual 79 totalDays 4
x35020:	cmp dword [bp + 26], 4	; 5: 102 131 126 26 4
x35025:	jge strftime$79	; 2: 125 24

strftime$75:	; BinaryAdd £temporary3716 totalDays 3
x35027:	mov eax, [bp + 26]	; 4: 102 139 70 26
x35031:	add eax, 3	; 4: 102 131 192 3

strftime$76:	; IntegralToIntegral £temporary3717 £temporary3716
x35035:	cmp eax, 0	; 4: 102 131 248 0
x35039:	jge strftime$77	; 2: 125 5
x35041:	neg eax	; 3: 102 247 216
x35044:	neg ax	; 2: 247 216

strftime$77:	; Assign yearDayMonday £temporary3717
x35046:	mov [bp + 32], ax	; 3: 137 70 32

strftime$78:	; Goto 83
x35049:	jmp strftime$83	; 2: 235 30

strftime$79:	; BinarySubtract £temporary3718 totalDays 4
x35051:	mov eax, [bp + 26]	; 4: 102 139 70 26
x35055:	sub eax, 4	; 4: 102 131 232 4

strftime$80:	; SignedModulo £temporary3719 £temporary3718 7
x35059:	xor edx, edx	; 3: 102 49 210
x35062:	idiv dword [int4$7#]	; 5: 102 247 62 3 132

strftime$81:	; IntegralToIntegral £temporary3720 £temporary3719
x35067:	cmp edx, 0	; 4: 102 131 250 0
x35071:	jge strftime$82	; 2: 125 5
x35073:	neg edx	; 3: 102 247 218
x35076:	neg dx	; 2: 247 218

strftime$82:	; Assign yearDayMonday £temporary3720
x35078:	mov [bp + 32], dx	; 3: 137 86 32

strftime$83:	; Assign index 0
x35081:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

strftime$84:	; BinaryAdd £temporary3722 fmt index
x35086:	mov si, [bp + 10]	; 3: 139 118 10
x35089:	add si, [bp + 34]	; 3: 3 118 34

strftime$85:	; Deref £temporary3721 -> £temporary3722 £temporary3722 0

strftime$86:	; Equal 356 £temporary3721 -> £temporary3722 0
x35092:	cmp byte [si], 0	; 3: 128 60 0
x35095:	je strftime$356	; 4: 15 132 51 5

strftime$87:	; BinaryAdd £temporary3726 fmt index
x35099:	mov si, [bp + 10]	; 3: 139 118 10
x35102:	add si, [bp + 34]	; 3: 3 118 34

strftime$88:	; Deref £temporary3725 -> £temporary3726 £temporary3726 0

strftime$89:	; NotEqual 329 £temporary3725 -> £temporary3726 37
x35105:	cmp byte [si], 37	; 3: 128 60 37
x35108:	jne strftime$329	; 4: 15 133 179 4

strftime$90:	; Increment index
x35112:	inc word [bp + 34]	; 3: 255 70 34

strftime$91:	; Assign £temporary3728 index
x35115:	mov ax, [bp + 34]	; 3: 139 70 34

strftime$92:	; BinaryAdd £temporary3730 fmt £temporary3728
x35118:	mov si, [bp + 10]	; 3: 139 118 10
x35121:	add si, ax	; 2: 1 198

strftime$93:	; Deref £temporary3729 -> £temporary3730 £temporary3730 0

strftime$94:	; Case 118 £temporary3729 -> £temporary3730 97
x35123:	mov al, [si]	; 2: 138 4
x35125:	cmp al, 97	; 2: 60 97
x35127:	je strftime$118	; 4: 15 132 129 0

strftime$95:	; Case 128 £temporary3729 -> £temporary3730 65
x35131:	cmp al, 65	; 2: 60 65
x35133:	je strftime$128	; 4: 15 132 169 0

strftime$96:	; Case 138 £temporary3729 -> £temporary3730 98
x35137:	cmp al, 98	; 2: 60 98
x35139:	je strftime$138	; 4: 15 132 209 0

strftime$97:	; Case 148 £temporary3729 -> £temporary3730 66
x35143:	cmp al, 66	; 2: 60 66
x35145:	je strftime$148	; 4: 15 132 249 0

strftime$98:	; Case 158 £temporary3729 -> £temporary3730 99
x35149:	cmp al, 99	; 2: 60 99
x35151:	je strftime$158	; 4: 15 132 33 1

strftime$99:	; Case 178 £temporary3729 -> £temporary3730 100
x35155:	cmp al, 100	; 2: 60 100
x35157:	je strftime$178	; 4: 15 132 118 1

strftime$100:	; Case 186 £temporary3729 -> £temporary3730 72
x35161:	cmp al, 72	; 2: 60 72
x35163:	je strftime$186	; 4: 15 132 155 1

strftime$101:	; Case 194 £temporary3729 -> £temporary3730 73
x35167:	cmp al, 73	; 2: 60 73
x35169:	je strftime$194	; 4: 15 132 192 1

strftime$102:	; Case 203 £temporary3729 -> £temporary3730 106
x35173:	cmp al, 106	; 2: 60 106
x35175:	je strftime$203	; 4: 15 132 235 1

strftime$103:	; Case 211 £temporary3729 -> £temporary3730 109
x35179:	cmp al, 109	; 2: 60 109
x35181:	je strftime$211	; 4: 15 132 16 2

strftime$104:	; Case 220 £temporary3729 -> £temporary3730 77
x35185:	cmp al, 77	; 2: 60 77
x35187:	je strftime$220	; 4: 15 132 54 2

strftime$105:	; Case 228 £temporary3729 -> £temporary3730 112
x35191:	cmp al, 112	; 2: 60 112
x35193:	je strftime$228	; 4: 15 132 91 2

strftime$106:	; Case 240 £temporary3729 -> £temporary3730 83
x35197:	cmp al, 83	; 2: 60 83
x35199:	je strftime$240	; 4: 15 132 139 2

strftime$107:	; Case 248 £temporary3729 -> £temporary3730 85
x35203:	cmp al, 85	; 2: 60 85
x35205:	je strftime$248	; 4: 15 132 175 2

strftime$108:	; Case 255 £temporary3729 -> £temporary3730 119
x35209:	cmp al, 119	; 2: 60 119
x35211:	je strftime$255	; 4: 15 132 209 2

strftime$109:	; Case 263 £temporary3729 -> £temporary3730 87
x35215:	cmp al, 87	; 2: 60 87
x35217:	je strftime$263	; 4: 15 132 246 2

strftime$110:	; Case 270 £temporary3729 -> £temporary3730 120
x35221:	cmp al, 120	; 2: 60 120
x35223:	je strftime$270	; 4: 15 132 24 3

strftime$111:	; Case 282 £temporary3729 -> £temporary3730 88
x35227:	cmp al, 88	; 2: 60 88
x35229:	je strftime$282	; 4: 15 132 78 3

strftime$112:	; Case 294 £temporary3729 -> £temporary3730 121
x35233:	cmp al, 121	; 2: 60 121
x35235:	je strftime$294	; 4: 15 132 132 3

strftime$113:	; Case 303 £temporary3729 -> £temporary3730 89
x35239:	cmp al, 89	; 2: 60 89
x35241:	je strftime$303	; 4: 15 132 175 3

strftime$114:	; Case 312 £temporary3729 -> £temporary3730 90
x35245:	cmp al, 90	; 2: 60 90
x35247:	je strftime$312	; 4: 15 132 214 3

strftime$115:	; Case 318 £temporary3729 -> £temporary3730 37
x35251:	cmp al, 37	; 2: 60 37
x35253:	je strftime$318	; 4: 15 132 236 3

strftime$116:	; CaseEnd £temporary3729 -> £temporary3730

strftime$117:	; Goto 323
x35257:	jmp strftime$323	; 3: 233 3 4

strftime$118:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$119:	; Parameter 56 add 6
x35260:	mov [bp + 62], bp	; 3: 137 110 62
x35263:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$120:	; Deref £temporary3731 -> tp tp 12
x35267:	mov si, [bp + 12]	; 3: 139 118 12

strftime$121:	; UnsignedMultiply £temporary3733 £temporary3731 -> tp 2
x35270:	mov ax, [si + 12]	; 3: 139 68 12
x35273:	xor dx, dx	; 2: 49 210
x35275:	mul word [int2$2#]	; 4: 247 38 96 51

strftime$122:	; BinaryAdd £temporary3734 shortDayList £temporary3733
x35279:	mov si, [bp + 16]	; 3: 139 118 16
x35282:	add si, ax	; 2: 1 198

strftime$123:	; Deref £temporary3732 -> £temporary3734 £temporary3734 0

strftime$124:	; Parameter 56 £temporary3732 -> £temporary3734 8
x35284:	mov ax, [si]	; 2: 139 4
x35286:	mov [bp + 64], ax	; 3: 137 70 64

strftime$125:	; Call 56 strcpy 0
x35289:	mov word [bp + 56], strftime$126	; 5: 199 70 56 231 137
x35294:	mov [bp + 58], bp	; 3: 137 110 58
x35297:	add bp, 56	; 3: 131 197 56
x35300:	jmp strcpy	; 3: 233 115 203

strftime$126:	; PostCall 56

strftime$127:	; Goto 335
x35303:	jmp strftime$335	; 3: 233 9 4

strftime$128:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$129:	; Parameter 56 add 6
x35306:	mov [bp + 62], bp	; 3: 137 110 62
x35309:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$130:	; Deref £temporary3736 -> tp tp 12
x35313:	mov si, [bp + 12]	; 3: 139 118 12

strftime$131:	; UnsignedMultiply £temporary3738 £temporary3736 -> tp 2
x35316:	mov ax, [si + 12]	; 3: 139 68 12
x35319:	xor dx, dx	; 2: 49 210
x35321:	mul word [int2$2#]	; 4: 247 38 96 51

strftime$132:	; BinaryAdd £temporary3739 longDayList £temporary3738
x35325:	mov si, [bp + 20]	; 3: 139 118 20
x35328:	add si, ax	; 2: 1 198

strftime$133:	; Deref £temporary3737 -> £temporary3739 £temporary3739 0

strftime$134:	; Parameter 56 £temporary3737 -> £temporary3739 8
x35330:	mov ax, [si]	; 2: 139 4
x35332:	mov [bp + 64], ax	; 3: 137 70 64

strftime$135:	; Call 56 strcpy 0
x35335:	mov word [bp + 56], strftime$136	; 5: 199 70 56 21 138
x35340:	mov [bp + 58], bp	; 3: 137 110 58
x35343:	add bp, 56	; 3: 131 197 56
x35346:	jmp strcpy	; 3: 233 69 203

strftime$136:	; PostCall 56

strftime$137:	; Goto 335
x35349:	jmp strftime$335	; 3: 233 219 3

strftime$138:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$139:	; Parameter 56 add 6
x35352:	mov [bp + 62], bp	; 3: 137 110 62
x35355:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$140:	; Deref £temporary3741 -> tp tp 8
x35359:	mov si, [bp + 12]	; 3: 139 118 12

strftime$141:	; UnsignedMultiply £temporary3743 £temporary3741 -> tp 2
x35362:	mov ax, [si + 8]	; 3: 139 68 8
x35365:	xor dx, dx	; 2: 49 210
x35367:	mul word [int2$2#]	; 4: 247 38 96 51

strftime$142:	; BinaryAdd £temporary3744 shortMonthList £temporary3743
x35371:	mov si, [bp + 18]	; 3: 139 118 18
x35374:	add si, ax	; 2: 1 198

strftime$143:	; Deref £temporary3742 -> £temporary3744 £temporary3744 0

strftime$144:	; Parameter 56 £temporary3742 -> £temporary3744 8
x35376:	mov ax, [si]	; 2: 139 4
x35378:	mov [bp + 64], ax	; 3: 137 70 64

strftime$145:	; Call 56 strcpy 0
x35381:	mov word [bp + 56], strftime$146	; 5: 199 70 56 67 138
x35386:	mov [bp + 58], bp	; 3: 137 110 58
x35389:	add bp, 56	; 3: 131 197 56
x35392:	jmp strcpy	; 3: 233 23 203

strftime$146:	; PostCall 56

strftime$147:	; Goto 335
x35395:	jmp strftime$335	; 3: 233 173 3

strftime$148:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$149:	; Parameter 56 add 6
x35398:	mov [bp + 62], bp	; 3: 137 110 62
x35401:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$150:	; Deref £temporary3746 -> tp tp 8
x35405:	mov si, [bp + 12]	; 3: 139 118 12

strftime$151:	; UnsignedMultiply £temporary3748 £temporary3746 -> tp 2
x35408:	mov ax, [si + 8]	; 3: 139 68 8
x35411:	xor dx, dx	; 2: 49 210
x35413:	mul word [int2$2#]	; 4: 247 38 96 51

strftime$152:	; BinaryAdd £temporary3749 longMonthList £temporary3748
x35417:	mov si, [bp + 22]	; 3: 139 118 22
x35420:	add si, ax	; 2: 1 198

strftime$153:	; Deref £temporary3747 -> £temporary3749 £temporary3749 0

strftime$154:	; Parameter 56 £temporary3747 -> £temporary3749 8
x35422:	mov ax, [si]	; 2: 139 4
x35424:	mov [bp + 64], ax	; 3: 137 70 64

strftime$155:	; Call 56 strcpy 0
x35427:	mov word [bp + 56], strftime$156	; 5: 199 70 56 113 138
x35432:	mov [bp + 58], bp	; 3: 137 110 58
x35435:	add bp, 56	; 3: 131 197 56
x35438:	jmp strcpy	; 3: 233 233 202

strftime$156:	; PostCall 56

strftime$157:	; Goto 335
x35441:	jmp strftime$335	; 3: 233 127 3

strftime$158:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 56 add 6
x35444:	mov [bp + 62], bp	; 3: 137 110 62
x35447:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$160:	; Parameter 56 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x35451:	mov word [bp + 64], string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 64 147 142

strftime$161:	; Deref £temporary3751 -> tp tp 10
x35456:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; BinaryAdd £temporary3752 £temporary3751 -> tp 1900
x35459:	mov ax, [si + 10]	; 3: 139 68 10
x35462:	add ax, 1900	; 3: 5 108 7

strftime$163:	; Parameter 56 £temporary3752 10
x35465:	mov [bp + 66], ax	; 3: 137 70 66

strftime$164:	; Deref £temporary3753 -> tp tp 8
x35468:	mov si, [bp + 12]	; 3: 139 118 12

strftime$165:	; BinaryAdd £temporary3754 £temporary3753 -> tp 1
x35471:	mov ax, [si + 8]	; 3: 139 68 8
x35474:	inc ax	; 1: 64

strftime$166:	; Parameter 56 £temporary3754 12
x35475:	mov [bp + 68], ax	; 3: 137 70 68

strftime$167:	; Deref £temporary3755 -> tp tp 6
x35478:	mov si, [bp + 12]	; 3: 139 118 12

strftime$168:	; Parameter 56 £temporary3755 -> tp 14
x35481:	mov ax, [si + 6]	; 3: 139 68 6
x35484:	mov [bp + 70], ax	; 3: 137 70 70

strftime$169:	; Deref £temporary3756 -> tp tp 4
x35487:	mov si, [bp + 12]	; 3: 139 118 12

strftime$170:	; Parameter 56 £temporary3756 -> tp 16
x35490:	mov ax, [si + 4]	; 3: 139 68 4
x35493:	mov [bp + 72], ax	; 3: 137 70 72

strftime$171:	; Deref £temporary3757 -> tp tp 2
x35496:	mov si, [bp + 12]	; 3: 139 118 12

strftime$172:	; Parameter 56 £temporary3757 -> tp 18
x35499:	mov ax, [si + 2]	; 3: 139 68 2
x35502:	mov [bp + 74], ax	; 3: 137 70 74

strftime$173:	; Deref £temporary3758 -> tp tp 0
x35505:	mov si, [bp + 12]	; 3: 139 118 12

strftime$174:	; Parameter 56 £temporary3758 -> tp 20
x35508:	mov ax, [si]	; 2: 139 4
x35510:	mov [bp + 76], ax	; 3: 137 70 76

strftime$175:	; Call 56 sprintf 0
x35513:	mov word [bp + 56], strftime$176	; 5: 199 70 56 204 138
x35518:	mov [bp + 58], bp	; 3: 137 110 58
x35521:	add bp, 56	; 3: 131 197 56
x35524:	mov di, bp	; 2: 137 239
x35526:	add di, 12	; 3: 131 199 12
x35529:	jmp sprintf	; 3: 233 43 252

strftime$176:	; PostCall 56

strftime$177:	; Goto 335
x35532:	jmp strftime$335	; 3: 233 36 3

strftime$178:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$179:	; Parameter 56 add 6
x35535:	mov [bp + 62], bp	; 3: 137 110 62
x35538:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$180:	; Parameter 56 string_25i# 8
x35542:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$181:	; Deref £temporary3760 -> tp tp 6
x35547:	mov si, [bp + 12]	; 3: 139 118 12

strftime$182:	; Parameter 56 £temporary3760 -> tp 10
x35550:	mov ax, [si + 6]	; 3: 139 68 6
x35553:	mov [bp + 66], ax	; 3: 137 70 66

strftime$183:	; Call 56 sprintf 0
x35556:	mov word [bp + 56], strftime$184	; 5: 199 70 56 247 138
x35561:	mov [bp + 58], bp	; 3: 137 110 58
x35564:	add bp, 56	; 3: 131 197 56
x35567:	mov di, bp	; 2: 137 239
x35569:	add di, 2	; 3: 131 199 2
x35572:	jmp sprintf	; 3: 233 0 252

strftime$184:	; PostCall 56

strftime$185:	; Goto 335
x35575:	jmp strftime$335	; 3: 233 249 2

strftime$186:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$187:	; Parameter 56 add 6
x35578:	mov [bp + 62], bp	; 3: 137 110 62
x35581:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$188:	; Parameter 56 string_25i# 8
x35585:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$189:	; Deref £temporary3762 -> tp tp 4
x35590:	mov si, [bp + 12]	; 3: 139 118 12

strftime$190:	; Parameter 56 £temporary3762 -> tp 10
x35593:	mov ax, [si + 4]	; 3: 139 68 4
x35596:	mov [bp + 66], ax	; 3: 137 70 66

strftime$191:	; Call 56 sprintf 0
x35599:	mov word [bp + 56], strftime$192	; 5: 199 70 56 34 139
x35604:	mov [bp + 58], bp	; 3: 137 110 58
x35607:	add bp, 56	; 3: 131 197 56
x35610:	mov di, bp	; 2: 137 239
x35612:	add di, 2	; 3: 131 199 2
x35615:	jmp sprintf	; 3: 233 213 251

strftime$192:	; PostCall 56

strftime$193:	; Goto 335
x35618:	jmp strftime$335	; 3: 233 206 2

strftime$194:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$195:	; Parameter 56 add 6
x35621:	mov [bp + 62], bp	; 3: 137 110 62
x35624:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$196:	; Parameter 56 string_25i# 8
x35628:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$197:	; Deref £temporary3764 -> tp tp 4
x35633:	mov si, [bp + 12]	; 3: 139 118 12

strftime$198:	; SignedModulo £temporary3765 £temporary3764 -> tp 12
x35636:	mov ax, [si + 4]	; 3: 139 68 4
x35639:	xor dx, dx	; 2: 49 210
x35641:	idiv word [int2$12#]	; 4: 247 62 177 142

strftime$199:	; Parameter 56 £temporary3765 10
x35645:	mov [bp + 66], dx	; 3: 137 86 66

strftime$200:	; Call 56 sprintf 0
x35648:	mov word [bp + 56], strftime$201	; 5: 199 70 56 83 139
x35653:	mov [bp + 58], bp	; 3: 137 110 58
x35656:	add bp, 56	; 3: 131 197 56
x35659:	mov di, bp	; 2: 137 239
x35661:	add di, 2	; 3: 131 199 2
x35664:	jmp sprintf	; 3: 233 164 251

strftime$201:	; PostCall 56

strftime$202:	; Goto 335
x35667:	jmp strftime$335	; 3: 233 157 2

strftime$203:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 56 add 6
x35670:	mov [bp + 62], bp	; 3: 137 110 62
x35673:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$205:	; Parameter 56 string_25i# 8
x35677:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$206:	; Deref £temporary3767 -> tp tp 14
x35682:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 56 £temporary3767 -> tp 10
x35685:	mov ax, [si + 14]	; 3: 139 68 14
x35688:	mov [bp + 66], ax	; 3: 137 70 66

strftime$208:	; Call 56 sprintf 0
x35691:	mov word [bp + 56], strftime$209	; 5: 199 70 56 126 139
x35696:	mov [bp + 58], bp	; 3: 137 110 58
x35699:	add bp, 56	; 3: 131 197 56
x35702:	mov di, bp	; 2: 137 239
x35704:	add di, 2	; 3: 131 199 2
x35707:	jmp sprintf	; 3: 233 121 251

strftime$209:	; PostCall 56

strftime$210:	; Goto 335
x35710:	jmp strftime$335	; 3: 233 114 2

strftime$211:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 56 add 6
x35713:	mov [bp + 62], bp	; 3: 137 110 62
x35716:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$213:	; Parameter 56 string_25i# 8
x35720:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$214:	; Deref £temporary3769 -> tp tp 8
x35725:	mov si, [bp + 12]	; 3: 139 118 12

strftime$215:	; BinaryAdd £temporary3770 £temporary3769 -> tp 1
x35728:	mov ax, [si + 8]	; 3: 139 68 8
x35731:	inc ax	; 1: 64

strftime$216:	; Parameter 56 £temporary3770 10
x35732:	mov [bp + 66], ax	; 3: 137 70 66

strftime$217:	; Call 56 sprintf 0
x35735:	mov word [bp + 56], strftime$218	; 5: 199 70 56 170 139
x35740:	mov [bp + 58], bp	; 3: 137 110 58
x35743:	add bp, 56	; 3: 131 197 56
x35746:	mov di, bp	; 2: 137 239
x35748:	add di, 2	; 3: 131 199 2
x35751:	jmp sprintf	; 3: 233 77 251

strftime$218:	; PostCall 56

strftime$219:	; Goto 335
x35754:	jmp strftime$335	; 3: 233 70 2

strftime$220:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$221:	; Parameter 56 add 6
x35757:	mov [bp + 62], bp	; 3: 137 110 62
x35760:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$222:	; Parameter 56 string_25i# 8
x35764:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$223:	; Deref £temporary3772 -> tp tp 2
x35769:	mov si, [bp + 12]	; 3: 139 118 12

strftime$224:	; Parameter 56 £temporary3772 -> tp 10
x35772:	mov ax, [si + 2]	; 3: 139 68 2
x35775:	mov [bp + 66], ax	; 3: 137 70 66

strftime$225:	; Call 56 sprintf 0
x35778:	mov word [bp + 56], strftime$226	; 5: 199 70 56 213 139
x35783:	mov [bp + 58], bp	; 3: 137 110 58
x35786:	add bp, 56	; 3: 131 197 56
x35789:	mov di, bp	; 2: 137 239
x35791:	add di, 2	; 3: 131 199 2
x35794:	jmp sprintf	; 3: 233 34 251

strftime$226:	; PostCall 56

strftime$227:	; Goto 335
x35797:	jmp strftime$335	; 3: 233 27 2

strftime$228:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$229:	; Parameter 56 add 6
x35800:	mov [bp + 62], bp	; 3: 137 110 62
x35803:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$230:	; Parameter 56 string_25s# 8
x35807:	mov word [bp + 64], string_25s#	; 5: 199 70 64 179 142

strftime$231:	; Deref £temporary3774 -> tp tp 4
x35812:	mov si, [bp + 12]	; 3: 139 118 12

strftime$232:	; SignedGreaterThanEqual 235 £temporary3774 -> tp 12
x35815:	cmp word [si + 4], 12	; 4: 131 124 4 12
x35819:	jge strftime$235	; 2: 125 5

strftime$233:	; Assign £temporary3779 string_AM#
x35821:	mov ax, string_AM#	; 3: 184 182 142

strftime$234:	; Goto 236
x35824:	jmp strftime$236	; 2: 235 3

strftime$235:	; Assign £temporary3779 string_PM#
x35826:	mov ax, string_PM#	; 3: 184 185 142

strftime$236:	; Parameter 56 £temporary3779 10
x35829:	mov [bp + 66], ax	; 3: 137 70 66

strftime$237:	; Call 56 sprintf 0
x35832:	mov word [bp + 56], strftime$238	; 5: 199 70 56 11 140
x35837:	mov [bp + 58], bp	; 3: 137 110 58
x35840:	add bp, 56	; 3: 131 197 56
x35843:	mov di, bp	; 2: 137 239
x35845:	add di, 2	; 3: 131 199 2
x35848:	jmp sprintf	; 3: 233 236 250

strftime$238:	; PostCall 56

strftime$239:	; Goto 335
x35851:	jmp strftime$335	; 3: 233 229 1

strftime$240:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$241:	; Parameter 56 add 6
x35854:	mov [bp + 62], bp	; 3: 137 110 62
x35857:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$242:	; Parameter 56 string_25i# 8
x35861:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$243:	; Deref £temporary3781 -> tp tp 0
x35866:	mov si, [bp + 12]	; 3: 139 118 12

strftime$244:	; Parameter 56 £temporary3781 -> tp 10
x35869:	mov ax, [si]	; 2: 139 4
x35871:	mov [bp + 66], ax	; 3: 137 70 66

strftime$245:	; Call 56 sprintf 0
x35874:	mov word [bp + 56], strftime$246	; 5: 199 70 56 53 140
x35879:	mov [bp + 58], bp	; 3: 137 110 58
x35882:	add bp, 56	; 3: 131 197 56
x35885:	mov di, bp	; 2: 137 239
x35887:	add di, 2	; 3: 131 199 2
x35890:	jmp sprintf	; 3: 233 194 250

strftime$246:	; PostCall 56

strftime$247:	; Goto 335
x35893:	jmp strftime$335	; 3: 233 187 1

strftime$248:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$249:	; Parameter 56 add 6
x35896:	mov [bp + 62], bp	; 3: 137 110 62
x35899:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$250:	; Parameter 56 string_25i# 8
x35903:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$251:	; Parameter 56 yearDaySunday 10
x35908:	mov ax, [bp + 30]	; 3: 139 70 30
x35911:	mov [bp + 66], ax	; 3: 137 70 66

strftime$252:	; Call 56 sprintf 0
x35914:	mov word [bp + 56], strftime$253	; 5: 199 70 56 93 140
x35919:	mov [bp + 58], bp	; 3: 137 110 58
x35922:	add bp, 56	; 3: 131 197 56
x35925:	mov di, bp	; 2: 137 239
x35927:	add di, 2	; 3: 131 199 2
x35930:	jmp sprintf	; 3: 233 154 250

strftime$253:	; PostCall 56

strftime$254:	; Goto 335
x35933:	jmp strftime$335	; 3: 233 147 1

strftime$255:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$256:	; Parameter 56 add 6
x35936:	mov [bp + 62], bp	; 3: 137 110 62
x35939:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$257:	; Parameter 56 string_25i# 8
x35943:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$258:	; Deref £temporary3784 -> tp tp 12
x35948:	mov si, [bp + 12]	; 3: 139 118 12

strftime$259:	; Parameter 56 £temporary3784 -> tp 10
x35951:	mov ax, [si + 12]	; 3: 139 68 12
x35954:	mov [bp + 66], ax	; 3: 137 70 66

strftime$260:	; Call 56 sprintf 0
x35957:	mov word [bp + 56], strftime$261	; 5: 199 70 56 136 140
x35962:	mov [bp + 58], bp	; 3: 137 110 58
x35965:	add bp, 56	; 3: 131 197 56
x35968:	mov di, bp	; 2: 137 239
x35970:	add di, 2	; 3: 131 199 2
x35973:	jmp sprintf	; 3: 233 111 250

strftime$261:	; PostCall 56

strftime$262:	; Goto 335
x35976:	jmp strftime$335	; 3: 233 104 1

strftime$263:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$264:	; Parameter 56 add 6
x35979:	mov [bp + 62], bp	; 3: 137 110 62
x35982:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$265:	; Parameter 56 string_25i# 8
x35986:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$266:	; Parameter 56 yearDayMonday 10
x35991:	mov ax, [bp + 32]	; 3: 139 70 32
x35994:	mov [bp + 66], ax	; 3: 137 70 66

strftime$267:	; Call 56 sprintf 0
x35997:	mov word [bp + 56], strftime$268	; 5: 199 70 56 176 140
x36002:	mov [bp + 58], bp	; 3: 137 110 58
x36005:	add bp, 56	; 3: 131 197 56
x36008:	mov di, bp	; 2: 137 239
x36010:	add di, 2	; 3: 131 199 2
x36013:	jmp sprintf	; 3: 233 71 250

strftime$268:	; PostCall 56

strftime$269:	; Goto 335
x36016:	jmp strftime$335	; 3: 233 64 1

strftime$270:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$271:	; Parameter 56 add 6
x36019:	mov [bp + 62], bp	; 3: 137 110 62
x36022:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$272:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x36026:	mov word [bp + 64], string_2502i3A2502i3A2502i#	; 5: 199 70 64 188 142

strftime$273:	; Deref £temporary3787 -> tp tp 4
x36031:	mov si, [bp + 12]	; 3: 139 118 12

strftime$274:	; Parameter 56 £temporary3787 -> tp 10
x36034:	mov ax, [si + 4]	; 3: 139 68 4
x36037:	mov [bp + 66], ax	; 3: 137 70 66

strftime$275:	; Deref £temporary3788 -> tp tp 2
x36040:	mov si, [bp + 12]	; 3: 139 118 12

strftime$276:	; Parameter 56 £temporary3788 -> tp 12
x36043:	mov ax, [si + 2]	; 3: 139 68 2
x36046:	mov [bp + 68], ax	; 3: 137 70 68

strftime$277:	; Deref £temporary3789 -> tp tp 0
x36049:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Parameter 56 £temporary3789 -> tp 14
x36052:	mov ax, [si]	; 2: 139 4
x36054:	mov [bp + 70], ax	; 3: 137 70 70

strftime$279:	; Call 56 sprintf 0
x36057:	mov word [bp + 56], strftime$280	; 5: 199 70 56 236 140
x36062:	mov [bp + 58], bp	; 3: 137 110 58
x36065:	add bp, 56	; 3: 131 197 56
x36068:	mov di, bp	; 2: 137 239
x36070:	add di, 6	; 3: 131 199 6
x36073:	jmp sprintf	; 3: 233 11 250

strftime$280:	; PostCall 56

strftime$281:	; Goto 335
x36076:	jmp strftime$335	; 3: 233 4 1

strftime$282:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$283:	; Parameter 56 add 6
x36079:	mov [bp + 62], bp	; 3: 137 110 62
x36082:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$284:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x36086:	mov word [bp + 64], string_2502i3A2502i3A2502i#	; 5: 199 70 64 188 142

strftime$285:	; Deref £temporary3791 -> tp tp 4
x36091:	mov si, [bp + 12]	; 3: 139 118 12

strftime$286:	; Parameter 56 £temporary3791 -> tp 10
x36094:	mov ax, [si + 4]	; 3: 139 68 4
x36097:	mov [bp + 66], ax	; 3: 137 70 66

strftime$287:	; Deref £temporary3792 -> tp tp 2
x36100:	mov si, [bp + 12]	; 3: 139 118 12

strftime$288:	; Parameter 56 £temporary3792 -> tp 12
x36103:	mov ax, [si + 2]	; 3: 139 68 2
x36106:	mov [bp + 68], ax	; 3: 137 70 68

strftime$289:	; Deref £temporary3793 -> tp tp 0
x36109:	mov si, [bp + 12]	; 3: 139 118 12

strftime$290:	; Parameter 56 £temporary3793 -> tp 14
x36112:	mov ax, [si]	; 2: 139 4
x36114:	mov [bp + 70], ax	; 3: 137 70 70

strftime$291:	; Call 56 sprintf 0
x36117:	mov word [bp + 56], strftime$292	; 5: 199 70 56 40 141
x36122:	mov [bp + 58], bp	; 3: 137 110 58
x36125:	add bp, 56	; 3: 131 197 56
x36128:	mov di, bp	; 2: 137 239
x36130:	add di, 6	; 3: 131 199 6
x36133:	jmp sprintf	; 3: 233 207 249

strftime$292:	; PostCall 56

strftime$293:	; Goto 335
x36136:	jmp strftime$335	; 3: 233 200 0

strftime$294:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$295:	; Parameter 56 add 6
x36139:	mov [bp + 62], bp	; 3: 137 110 62
x36142:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$296:	; Parameter 56 string_25i# 8
x36146:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$297:	; Deref £temporary3795 -> tp tp 10
x36151:	mov si, [bp + 12]	; 3: 139 118 12

strftime$298:	; SignedModulo £temporary3796 £temporary3795 -> tp 100
x36154:	mov ax, [si + 10]	; 3: 139 68 10
x36157:	xor dx, dx	; 2: 49 210
x36159:	idiv word [int2$100#]	; 4: 247 62 72 132

strftime$299:	; Parameter 56 £temporary3796 10
x36163:	mov [bp + 66], dx	; 3: 137 86 66

strftime$300:	; Call 56 sprintf 0
x36166:	mov word [bp + 56], strftime$301	; 5: 199 70 56 89 141
x36171:	mov [bp + 58], bp	; 3: 137 110 58
x36174:	add bp, 56	; 3: 131 197 56
x36177:	mov di, bp	; 2: 137 239
x36179:	add di, 2	; 3: 131 199 2
x36182:	jmp sprintf	; 3: 233 158 249

strftime$301:	; PostCall 56

strftime$302:	; Goto 335
x36185:	jmp strftime$335	; 3: 233 151 0

strftime$303:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 56 add 6
x36188:	mov [bp + 62], bp	; 3: 137 110 62
x36191:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$305:	; Parameter 56 string_25i# 8
x36195:	mov word [bp + 64], string_25i#	; 5: 199 70 64 144 77

strftime$306:	; Deref £temporary3798 -> tp tp 10
x36200:	mov si, [bp + 12]	; 3: 139 118 12

strftime$307:	; BinaryAdd £temporary3799 £temporary3798 -> tp 1900
x36203:	mov ax, [si + 10]	; 3: 139 68 10
x36206:	add ax, 1900	; 3: 5 108 7

strftime$308:	; Parameter 56 £temporary3799 10
x36209:	mov [bp + 66], ax	; 3: 137 70 66

strftime$309:	; Call 56 sprintf 0
x36212:	mov word [bp + 56], strftime$310	; 5: 199 70 56 135 141
x36217:	mov [bp + 58], bp	; 3: 137 110 58
x36220:	add bp, 56	; 3: 131 197 56
x36223:	mov di, bp	; 2: 137 239
x36225:	add di, 2	; 3: 131 199 2
x36228:	jmp sprintf	; 3: 233 112 249

strftime$310:	; PostCall 56

strftime$311:	; Goto 335
x36231:	jmp strftime$335	; 2: 235 106

strftime$312:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$313:	; Parameter 56 add 6
x36233:	mov [bp + 62], bp	; 3: 137 110 62
x36236:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$314:	; Parameter 56 string_# 8
x36240:	mov word [bp + 64], string_#	; 5: 199 70 64 96 30

strftime$315:	; Call 56 strcpy 0
x36245:	mov word [bp + 56], strftime$316	; 5: 199 70 56 163 141
x36250:	mov [bp + 58], bp	; 3: 137 110 58
x36253:	add bp, 56	; 3: 131 197 56
x36256:	jmp strcpy	; 3: 233 183 199

strftime$316:	; PostCall 56

strftime$317:	; Goto 335
x36259:	jmp strftime$335	; 2: 235 78

strftime$318:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$319:	; Parameter 56 add 6
x36261:	mov [bp + 62], bp	; 3: 137 110 62
x36264:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$320:	; Parameter 56 string_25# 8
x36268:	mov word [bp + 64], string_25#	; 5: 199 70 64 203 142

strftime$321:	; Call 56 strcpy 0
x36273:	mov word [bp + 56], strftime$322	; 5: 199 70 56 191 141
x36278:	mov [bp + 58], bp	; 3: 137 110 58
x36281:	add bp, 56	; 3: 131 197 56
x36284:	jmp strcpy	; 3: 233 155 199

strftime$322:	; PostCall 56

strftime$323:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$324:	; Parameter 56 add 6
x36287:	mov [bp + 62], bp	; 3: 137 110 62
x36290:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$325:	; Parameter 56 string_# 8
x36294:	mov word [bp + 64], string_#	; 5: 199 70 64 96 30

strftime$326:	; Call 56 strcpy 0
x36299:	mov word [bp + 56], strftime$327	; 5: 199 70 56 217 141
x36304:	mov [bp + 58], bp	; 3: 137 110 58
x36307:	add bp, 56	; 3: 131 197 56
x36310:	jmp strcpy	; 3: 233 129 199

strftime$327:	; PostCall 56

strftime$328:	; Goto 335
x36313:	jmp strftime$335	; 2: 235 24

strftime$329:	; Deref £temporary3804 -> add add 0
x36315:	mov si, bp	; 2: 137 238
x36317:	add si, 36	; 3: 131 198 36

strftime$330:	; BinaryAdd £temporary3806 fmt index
x36320:	mov di, [bp + 10]	; 3: 139 126 10
x36323:	add di, [bp + 34]	; 3: 3 126 34

strftime$331:	; Deref £temporary3805 -> £temporary3806 £temporary3806 0

strftime$332:	; Assign £temporary3804 -> add £temporary3805 -> £temporary3806
x36326:	mov al, [di]	; 2: 138 5
x36328:	mov [si], al	; 2: 136 4

strftime$333:	; Deref £temporary3807 -> add add 1
x36330:	mov si, bp	; 2: 137 238
x36332:	add si, 36	; 3: 131 198 36

strftime$334:	; Assign £temporary3807 -> add 0
x36335:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$335:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$336:	; Parameter 56 s 6
x36339:	mov ax, [bp + 6]	; 3: 139 70 6
x36342:	mov [bp + 62], ax	; 3: 137 70 62

strftime$337:	; Call 56 strlen 0
x36345:	mov word [bp + 56], strftime$338	; 5: 199 70 56 7 142
x36350:	mov [bp + 58], bp	; 3: 137 110 58
x36353:	add bp, 56	; 3: 131 197 56
x36356:	jmp strlen	; 3: 233 198 0

strftime$338:	; PostCall 56

strftime$339:	; GetReturnValue £temporary3808

strftime$340:	; Assign x £temporary3808
x36359:	mov [bp + 56], bx	; 3: 137 94 56

strftime$341:	; CallHeader 58 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$342:	; Parameter 58 add 6
x36362:	mov [bp + 64], bp	; 3: 137 110 64
x36365:	add word [bp + 64], 36	; 4: 131 70 64 36

strftime$343:	; Call 58 strlen 0
x36369:	mov word [bp + 58], strftime$344	; 5: 199 70 58 31 142
x36374:	mov [bp + 60], bp	; 3: 137 110 60
x36377:	add bp, 58	; 3: 131 197 58
x36380:	jmp strlen	; 3: 233 174 0

strftime$344:	; PostCall 58

strftime$345:	; GetReturnValue £temporary3809

strftime$346:	; Assign y £temporary3809
x36383:	mov [bp + 58], bx	; 3: 137 94 58

strftime$347:	; BinaryAdd £temporary3810 x y
x36386:	mov ax, [bp + 56]	; 3: 139 70 56
x36389:	add ax, [bp + 58]	; 3: 3 70 58

strftime$348:	; SignedGreaterThanEqual 356 £temporary3810 smax
x36392:	cmp ax, [bp + 8]	; 3: 59 70 8
x36395:	jge strftime$356	; 2: 125 33

strftime$349:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$350:	; Parameter 60 s 6
x36397:	mov ax, [bp + 6]	; 3: 139 70 6
x36400:	mov [bp + 66], ax	; 3: 137 70 66

strftime$351:	; Parameter 60 add 8
x36403:	mov [bp + 68], bp	; 3: 137 110 68
x36406:	add word [bp + 68], 36	; 4: 131 70 68 36

strftime$352:	; Call 60 strcat 0
x36410:	mov word [bp + 60], strftime$353	; 5: 199 70 60 72 142
x36415:	mov [bp + 62], bp	; 3: 137 110 62
x36418:	add bp, 60	; 3: 131 197 60
x36421:	jmp strcat	; 3: 233 168 0

strftime$353:	; PostCall 60

strftime$354:	; Increment index
x36424:	inc word [bp + 34]	; 3: 255 70 34

strftime$355:	; Goto 84
x36427:	jmp strftime$84	; 3: 233 192 250

strftime$356:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$357:	; Parameter 34 s 6
x36430:	mov ax, [bp + 6]	; 3: 139 70 6
x36433:	mov [bp + 40], ax	; 3: 137 70 40

strftime$358:	; Call 34 strlen 0
x36436:	mov word [bp + 34], strftime$359	; 5: 199 70 34 98 142
x36441:	mov [bp + 36], bp	; 3: 137 110 36
x36444:	add bp, 34	; 3: 131 197 34
x36447:	nop	; 1: 144
x36448:	jmp strlen	; 2: 235 107

strftime$359:	; PostCall 34

strftime$360:	; GetReturnValue £temporary3813

strftime$361:	; SetReturnValue £temporary3813

strftime$362:	; Return £temporary3813
x36450:	mov ax, [bp]	; 3: 139 70 0
x36453:	mov di, [bp + 4]	; 3: 139 126 4
x36456:	mov bp, [bp + 2]	; 3: 139 110 2
x36459:	jmp ax	; 2: 255 224

strftime$363:	; FunctionEnd strftime

@4209$g_defaultLongDayList:
x36461:	dw string_Sunday# ; 2: 171 30
x36463:	dw string_Monday# ; 2: 178 30
x36465:	dw string_Tuesday# ; 2: 185 30
x36467:	dw string_Wednesday# ; 2: 193 30
x36469:	dw string_Thursday# ; 2: 203 30
x36471:	dw string_Friday# ; 2: 212 30
x36473:	dw string_Saturday# ; 2: 219 30

@4211$g_defaultLongMonthList:
x36475:	dw string_January# ; 2: 68 31
x36477:	dw string_February# ; 2: 76 31
x36479:	dw string_March# ; 2: 85 31
x36481:	dw string_April# ; 2: 91 31
x36483:	dw string_May# ; 2: 12 31
x36485:	dw string_June# ; 2: 97 31
x36487:	dw string_July# ; 2: 102 31
x36489:	dw string_August# ; 2: 107 31
x36491:	dw string_September# ; 2: 114 31
x36493:	dw string_October# ; 2: 124 31
x36495:	dw string_November# ; 2: 132 31
x36497:	dw string_December# ; 2: 141 31

string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x36499:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

int2$12#:
x36529:	dw 12	; 2: 12 0

string_25s#:
x36531:	db "%s", 0	; 3: 37 115 0

string_AM#:
x36534:	db "AM", 0	; 3: 65 77 0

string_PM#:
x36537:	db "PM", 0	; 3: 80 77 0

string_2502i3A2502i3A2502i#:
x36540:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

string_25#:
x36555:	db "%", 0	; 2: 37 0

strlen:	; Assign index 0
x36557:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary4069 string index
x36562:	mov si, [bp + 6]	; 3: 139 118 6
x36565:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary4068 -> £temporary4069 £temporary4069 0

strlen$3:	; Equal 6 £temporary4068 -> £temporary4069 0
x36568:	cmp byte [si], 0	; 3: 128 60 0
x36571:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x36573:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x36576:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x36578:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x36581:	mov ax, [bp]	; 3: 139 70 0
x36584:	mov di, [bp + 4]	; 3: 139 126 4
x36587:	mov bp, [bp + 2]	; 3: 139 110 2
x36590:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x36592:	mov ax, [bp + 6]	; 3: 139 70 6
x36595:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x36598:	mov word [bp + 12], strcat$3	; 5: 199 70 12 4 143
x36603:	mov [bp + 14], bp	; 3: 137 110 14
x36606:	add bp, 12	; 3: 131 197 12
x36609:	nop	; 1: 144
x36610:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3916

strcat$5:	; Assign targetLength £temporary3916
x36612:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x36615:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3918 source index
x36620:	mov si, [bp + 8]	; 3: 139 118 8
x36623:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3917 -> £temporary3918 £temporary3918 0

strcat$9:	; Equal 18 £temporary3917 -> £temporary3918 0
x36626:	cmp byte [si], 0	; 3: 128 60 0
x36629:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3921 targetLength index
x36631:	mov ax, [bp + 12]	; 3: 139 70 12
x36634:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3923 target £temporary3921
x36637:	mov si, [bp + 6]	; 3: 139 118 6
x36640:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3922 -> £temporary3923 £temporary3923 0

strcat$13:	; BinaryAdd £temporary3925 source index
x36642:	mov di, [bp + 8]	; 3: 139 126 8
x36645:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3924 -> £temporary3925 £temporary3925 0

strcat$15:	; Assign £temporary3922 -> £temporary3923 £temporary3924 -> £temporary3925
x36648:	mov al, [di]	; 2: 138 5
x36650:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x36652:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x36655:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3926 targetLength index
x36657:	mov ax, [bp + 12]	; 3: 139 70 12
x36660:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3928 target £temporary3926
x36663:	mov si, [bp + 6]	; 3: 139 118 6
x36666:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3927 -> £temporary3928 £temporary3928 0

strcat$21:	; Assign £temporary3927 -> £temporary3928 0
x36668:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x36671:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x36674:	mov ax, [bp]	; 3: 139 70 0
x36677:	mov di, [bp + 4]	; 3: 139 126 4
x36680:	mov bp, [bp + 2]	; 3: 139 110 2
x36683:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x36685:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x36690:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x36694:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x36696:	mov ax, [stderr]	; 3: 161 223 76
x36699:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36702:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 225 76

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x36707:	mov word [bp + 18], string_n203D3D201#	; 5: 199 70 18 158 143

assert_test$6:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x36712:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 165 143

assert_test$7:	; Parameter 8 8 14
x36717:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x36722:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 133 143
x36727:	mov [bp + 10], bp	; 3: 137 110 10
x36730:	add bp, 8	; 3: 131 197 8
x36733:	mov di, bp	; 2: 137 239
x36735:	add di, 6	; 3: 131 199 6
x36738:	jmp fprintf	; 3: 233 17 198

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x36741:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 147 143
x36746:	mov [bp + 10], bp	; 3: 137 110 10
x36749:	add bp, 8	; 3: 131 197 8
x36752:	jmp abort	; 3: 233 62 198

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x36755:	mov ax, [bp]	; 3: 139 70 0
x36758:	mov di, [bp + 4]	; 3: 139 126 4
x36761:	mov bp, [bp + 2]	; 3: 139 110 2
x36764:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

string_n203D3D201#:
x36766:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x36773:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 67: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x36840:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x36845:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 251 143
x36850:	mov [bp + 8], bp	; 3: 137 110 8
x36853:	add bp, 6	; 3: 131 197 6
x36856:	jmp malloc	; 3: 233 53 218

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary6107

malloc_test$5:	; Assign b £temporary6107
x36859:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x36862:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x36867:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 17 144
x36872:	mov [bp + 10], bp	; 3: 137 110 10
x36875:	add bp, 8	; 3: 131 197 8
x36878:	jmp malloc	; 3: 233 31 218

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary6108

malloc_test$11:	; Assign c £temporary6108
x36881:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x36884:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x36889:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 39 144
x36894:	mov [bp + 12], bp	; 3: 137 110 12
x36897:	add bp, 10	; 3: 131 197 10
x36900:	jmp malloc	; 3: 233 9 218

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary6109

malloc_test$17:	; Assign d £temporary6109
x36903:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x36906:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 56 144
x36911:	mov [bp + 14], bp	; 3: 137 110 14
x36914:	add bp, 12	; 3: 131 197 12
x36917:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x36920:	mov ax, [bp + 8]	; 3: 139 70 8
x36923:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x36926:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x36931:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 81 144
x36936:	mov [bp + 14], bp	; 3: 137 110 14
x36939:	add bp, 12	; 3: 131 197 12
x36942:	jmp realloc	; 3: 233 14 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x36945:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 95 144
x36950:	mov [bp + 14], bp	; 3: 137 110 14
x36953:	add bp, 12	; 3: 131 197 12
x36956:	nop	; 1: 144
x36957:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x36959:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x36964:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 114 144
x36969:	mov [bp + 14], bp	; 3: 137 110 14
x36972:	add bp, 12	; 3: 131 197 12
x36975:	jmp malloc	; 3: 233 190 217

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x36978:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 128 144
x36983:	mov [bp + 14], bp	; 3: 137 110 14
x36986:	add bp, 12	; 3: 131 197 12
x36989:	nop	; 1: 144
x36990:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x36992:	mov ax, [bp + 6]	; 3: 139 70 6
x36995:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x36998:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 148 144
x37003:	mov [bp + 14], bp	; 3: 137 110 14
x37006:	add bp, 12	; 3: 131 197 12
x37009:	jmp free	; 3: 233 123 219

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x37012:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 162 144
x37017:	mov [bp + 14], bp	; 3: 137 110 14
x37020:	add bp, 12	; 3: 131 197 12
x37023:	nop	; 1: 144
x37024:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x37026:	mov ax, [bp + 10]	; 3: 139 70 10
x37029:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x37032:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 182 144
x37037:	mov [bp + 14], bp	; 3: 137 110 14
x37040:	add bp, 12	; 3: 131 197 12
x37043:	jmp free	; 3: 233 89 219

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x37046:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 196 144
x37051:	mov [bp + 14], bp	; 3: 137 110 14
x37054:	add bp, 12	; 3: 131 197 12
x37057:	nop	; 1: 144
x37058:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x37060:	mov ax, [bp]	; 3: 139 70 0
x37063:	mov di, [bp + 4]	; 3: 139 126 4
x37066:	mov bp, [bp + 2]	; 3: 139 110 2
x37069:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x37071:	mov ax, [g_firstBlockPtr]	; 3: 161 190 107
x37074:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x37077:	mov word [bp + 14], string_Heap3A0A#	; 5: 199 70 14 65 145

print_heap$3:	; Call 8 printf 0
x37082:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 234 144
x37087:	mov [bp + 10], bp	; 3: 137 110 10
x37090:	add bp, 8	; 3: 131 197 8
x37093:	mov di, bp	; 2: 137 239
x37095:	jmp printf	; 3: 233 219 123

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x37098:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x37102:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x37104:	mov word [bp + 14], string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 72 145

print_heap$8:	; IntegralToIntegral £temporary338 currBlockPtr
x37109:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary338 8
x37112:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary339 -> currBlockPtr currBlockPtr 0
x37115:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary339 -> currBlockPtr 10
x37118:	mov ax, [si]	; 2: 139 4
x37120:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x37123:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 22 145
x37128:	mov [bp + 10], bp	; 3: 137 110 10
x37131:	add bp, 8	; 3: 131 197 8
x37134:	mov di, bp	; 2: 137 239
x37136:	add di, 4	; 3: 131 199 4
x37139:	jmp printf	; 3: 233 175 123

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary341 -> currBlockPtr currBlockPtr 2
x37142:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary341 -> currBlockPtr
x37145:	mov ax, [si + 2]	; 3: 139 68 2
x37148:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x37151:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x37153:	mov word [bp + 14], string_0A#	; 5: 199 70 14 195 12

print_heap$19:	; Call 8 printf 0
x37158:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 54 145
x37163:	mov [bp + 10], bp	; 3: 137 110 10
x37166:	add bp, 8	; 3: 131 197 8
x37169:	mov di, bp	; 2: 137 239
x37171:	jmp printf	; 3: 233 143 123

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x37174:	mov ax, [bp]	; 3: 139 70 0
x37177:	mov di, [bp + 4]	; 3: 139 126 4
x37180:	mov bp, [bp + 2]	; 3: 139 110 2
x37183:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

string_Heap3A0A#:
x37185:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

string_2020Address2025u2C20Size2025u0A#:
x37192:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x37215:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x37219:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x37221:	mov ax, [stderr]	; 3: 161 223 76
x37224:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x37227:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 225 76

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x37232:	mov word [bp + 20], string_newMemorySize203E3D200#	; 5: 199 70 20 38 147

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x37237:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 208 107

realloc$6:	; Parameter 10 259 14
x37242:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x37247:	mov word [bp + 10], realloc$8	; 5: 199 70 10 146 145
x37252:	mov [bp + 12], bp	; 3: 137 110 12
x37255:	add bp, 10	; 3: 131 197 10
x37258:	mov di, bp	; 2: 137 239
x37260:	add di, 6	; 3: 131 199 6
x37263:	jmp fprintf	; 3: 233 4 196

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x37266:	mov word [bp + 10], realloc$11	; 5: 199 70 10 160 145
x37271:	mov [bp + 12], bp	; 3: 137 110 12
x37274:	add bp, 10	; 3: 131 197 10
x37277:	jmp abort	; 3: 233 49 196

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x37280:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x37284:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x37286:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x37290:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x37292:	mov ax, [stderr]	; 3: 161 223 76
x37295:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x37298:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 225 76

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x37303:	mov word [bp + 20], string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 57 147

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x37308:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 208 107

realloc$19:	; Parameter 10 260 14
x37313:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x37318:	mov word [bp + 10], realloc$21	; 5: 199 70 10 217 145
x37323:	mov [bp + 12], bp	; 3: 137 110 12
x37326:	add bp, 10	; 3: 131 197 10
x37329:	mov di, bp	; 2: 137 239
x37331:	add di, 6	; 3: 131 199 6
x37334:	jmp fprintf	; 3: 233 189 195

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x37337:	mov word [bp + 10], realloc$24	; 5: 199 70 10 231 145
x37342:	mov [bp + 12], bp	; 3: 137 110 12
x37345:	add bp, 10	; 3: 131 197 10
x37348:	jmp abort	; 3: 233 234 195

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x37351:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x37355:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x37357:	mov ax, [bp + 8]	; 3: 139 70 8
x37360:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x37363:	mov word [bp + 10], realloc$29	; 5: 199 70 10 1 146
x37368:	mov [bp + 12], bp	; 3: 137 110 12
x37371:	add bp, 10	; 3: 131 197 10
x37374:	jmp malloc	; 3: 233 47 216

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary296

realloc$31:	; SetReturnValue £temporary296

realloc$32:	; Return £temporary296
x37377:	mov ax, [bp]	; 3: 139 70 0
x37380:	mov di, [bp + 4]	; 3: 139 126 4
x37383:	mov bp, [bp + 2]	; 3: 139 110 2
x37386:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x37388:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x37392:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x37394:	mov ax, [bp + 6]	; 3: 139 70 6
x37397:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x37400:	mov word [bp + 10], realloc$37	; 5: 199 70 10 38 146
x37405:	mov [bp + 12], bp	; 3: 137 110 12
x37408:	add bp, 10	; 3: 131 197 10
x37411:	jmp free	; 3: 233 233 217

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x37414:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x37417:	mov ax, [bp]	; 3: 139 70 0
x37420:	mov di, [bp + 4]	; 3: 139 126 4
x37423:	mov bp, [bp + 2]	; 3: 139 110 2
x37426:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary299 newMemorySize
x37428:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary299 4
x37431:	add ax, 4	; 3: 131 192 4
x37434:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary301 oldMemoryPtr
x37437:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary302 £temporary301 4
x37440:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary303 £temporary302

realloc$45:	; Assign oldBlockPtr £temporary303
x37443:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary304 -> oldBlockPtr oldBlockPtr 0
x37446:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary304 -> oldBlockPtr
x37449:	mov ax, [si]	; 2: 139 4
x37451:	cmp [bp + 10], ax	; 3: 57 70 10
x37454:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary306 -> oldBlockPtr oldBlockPtr 0
x37456:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary306 -> oldBlockPtr newBlockSize
x37459:	mov ax, [bp + 10]	; 3: 139 70 10
x37462:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x37464:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x37467:	mov ax, [bp]	; 3: 139 70 0
x37470:	mov di, [bp + 4]	; 3: 139 126 4
x37473:	mov bp, [bp + 2]	; 3: 139 110 2
x37476:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x37478:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x37483:	mov ax, [g_firstBlockPtr]	; 3: 161 190 107
x37486:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x37489:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x37493:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x37495:	mov ax, [bp + 12]	; 3: 139 70 12
x37498:	cmp [bp + 16], ax	; 3: 57 70 16
x37501:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary309 currBlockPtr
x37503:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary309
x37506:	mov bx, [bp + 14]	; 3: 139 94 14
x37509:	sub bx, ax	; 2: 41 195
x37511:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x37514:	mov ax, [bp + 10]	; 3: 139 70 10
x37517:	cmp [bp + 18], ax	; 3: 57 70 18
x37520:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary312 -> oldBlockPtr oldBlockPtr 0
x37522:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary312 -> oldBlockPtr newBlockSize
x37525:	mov ax, [bp + 10]	; 3: 139 70 10
x37528:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x37530:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x37533:	mov ax, [bp]	; 3: 139 70 0
x37536:	mov di, [bp + 4]	; 3: 139 126 4
x37539:	mov bp, [bp + 2]	; 3: 139 110 2
x37542:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary313 currBlockPtr
x37544:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary313
x37547:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary314 -> currBlockPtr currBlockPtr 2
x37550:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary314 -> currBlockPtr
x37553:	mov ax, [si + 2]	; 3: 139 68 2
x37556:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x37559:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x37561:	mov ax, [bp + 8]	; 3: 139 70 8
x37564:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x37567:	mov word [bp + 14], realloc$71	; 5: 199 70 14 205 146
x37572:	mov [bp + 16], bp	; 3: 137 110 16
x37575:	add bp, 14	; 3: 131 197 14
x37578:	jmp malloc	; 3: 233 99 215

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary315

realloc$73:	; Assign newMemoryPtr £temporary315
x37581:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x37584:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x37588:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x37590:	mov ax, [bp + 14]	; 3: 139 70 14
x37593:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x37596:	mov ax, [bp + 6]	; 3: 139 70 6
x37599:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x37602:	mov ax, [bp + 8]	; 3: 139 70 8
x37605:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x37608:	mov word [bp + 16], realloc$80	; 5: 199 70 16 246 146
x37613:	mov [bp + 18], bp	; 3: 137 110 18
x37616:	add bp, 16	; 3: 131 197 16
x37619:	nop	; 1: 144
x37620:	jmp memcpy	; 2: 235 117

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x37622:	mov ax, [bp + 6]	; 3: 139 70 6
x37625:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x37628:	mov word [bp + 16], realloc$84	; 5: 199 70 16 10 147
x37633:	mov [bp + 18], bp	; 3: 137 110 18
x37636:	add bp, 16	; 3: 131 197 16
x37639:	jmp free	; 3: 233 5 217

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x37642:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x37645:	mov ax, [bp]	; 3: 139 70 0
x37648:	mov di, [bp + 4]	; 3: 139 126 4
x37651:	mov bp, [bp + 2]	; 3: 139 110 2
x37654:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x37656:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x37659:	mov ax, [bp]	; 3: 139 70 0
x37662:	mov di, [bp + 4]	; 3: 139 126 4
x37665:	mov bp, [bp + 2]	; 3: 139 110 2
x37668:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

string_newMemorySize203E3D200#:
x37670:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x37689:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

memcpy:	; IntegralToIntegral £temporary4133 target
x37739:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary4133
x37742:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary4134 source
x37745:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary4134
x37748:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x37751:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x37756:	mov ax, [bp + 10]	; 3: 139 70 10
x37759:	cmp [bp + 16], ax	; 3: 57 70 16
x37762:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary4138 charTarget index
x37764:	mov si, [bp + 12]	; 3: 139 118 12
x37767:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary4137 -> £temporary4138 £temporary4138 0

memcpy$8:	; BinaryAdd £temporary4140 charSource index
x37770:	mov di, [bp + 14]	; 3: 139 126 14
x37773:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary4139 -> £temporary4140 £temporary4140 0

memcpy$10:	; Assign £temporary4137 -> £temporary4138 £temporary4139 -> £temporary4140
x37776:	mov al, [di]	; 2: 138 5
x37778:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x37780:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x37783:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary4141 target
x37785:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary4141

memcpy$15:	; Return £temporary4141
x37788:	mov ax, [bp]	; 3: 139 70 0
x37791:	mov di, [bp + 4]	; 3: 139 126 4
x37794:	mov bp, [bp + 2]	; 3: 139 110 2
x37797:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37799:	mov word [bp + 12], string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 146 149

print_test$2:	; Parameter 6 123 8
x37804:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x37809:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x37814:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x37819:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x37824:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x37829:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x37834:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x37839:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x37844:	mov word [bp + 6], print_test$11	; 5: 199 70 6 231 147
x37849:	mov [bp + 8], bp	; 3: 137 110 8
x37852:	add bp, 6	; 3: 131 197 6
x37855:	mov di, bp	; 2: 137 239
x37857:	add di, 16	; 3: 131 199 16
x37860:	jmp printf	; 3: 233 222 120

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37863:	mov word [bp + 12], string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 146 149

print_test$14:	; Parameter 6 -123 8
x37868:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x37873:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x37878:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x37883:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x37888:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x37893:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x37898:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x37903:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x37908:	mov word [bp + 6], print_test$23	; 5: 199 70 6 39 148
x37913:	mov [bp + 8], bp	; 3: 137 110 8
x37916:	add bp, 6	; 3: 131 197 6
x37919:	mov di, bp	; 2: 137 239
x37921:	add di, 16	; 3: 131 199 16
x37924:	jmp printf	; 3: 233 158 120

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37927:	mov word [bp + 12], string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 206 149

print_test$26:	; Parameter 6 123 8
x37932:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x37937:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x37942:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x37947:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x37952:	mov word [bp + 6], print_test$31	; 5: 199 70 6 83 148
x37957:	mov [bp + 8], bp	; 3: 137 110 8
x37960:	add bp, 6	; 3: 131 197 6
x37963:	mov di, bp	; 2: 137 239
x37965:	add di, 8	; 3: 131 199 8
x37968:	jmp printf	; 3: 233 114 120

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37971:	mov word [bp + 12], string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 206 149

print_test$34:	; Parameter 6 -123 8
x37976:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x37981:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x37986:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x37991:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x37996:	mov word [bp + 6], print_test$39	; 5: 199 70 6 127 148
x38001:	mov [bp + 8], bp	; 3: 137 110 8
x38004:	add bp, 6	; 3: 131 197 6
x38007:	mov di, bp	; 2: 137 239
x38009:	add di, 8	; 3: 131 199 8
x38012:	jmp printf	; 3: 233 70 120

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x38015:	mov word [bp + 12], string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 238 149

print_test$42:	; PushFloat 123.456
x38020:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$43:	; Parameter 6 123.456 8
x38024:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x38027:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$45:	; Parameter 6 123.456 16
x38031:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x38034:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$47:	; Parameter 6 123.456 24
x38038:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x38041:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$49:	; Parameter 6 123.456 32
x38045:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x38048:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$51:	; Parameter 6 123.456 40
x38052:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x38055:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$53:	; Parameter 6 123.456 48
x38059:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x38062:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$55:	; Parameter 6 123.456 56
x38066:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x38069:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$57:	; Parameter 6 123.456 64
x38073:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x38076:	mov word [bp + 6], print_test$59	; 5: 199 70 6 207 148
x38081:	mov [bp + 8], bp	; 3: 137 110 8
x38084:	add bp, 6	; 3: 131 197 6
x38087:	mov di, bp	; 2: 137 239
x38089:	add di, 64	; 3: 131 199 64
x38092:	jmp printf	; 3: 233 246 119

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x38095:	mov word [bp + 12], string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 238 149

print_test$62:	; PushFloat -123.456
x38100:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$63:	; Parameter 6 -123.456 8
x38104:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x38107:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$65:	; Parameter 6 -123.456 16
x38111:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x38114:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$67:	; Parameter 6 -123.456 24
x38118:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x38121:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$69:	; Parameter 6 -123.456 32
x38125:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x38128:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$71:	; Parameter 6 -123.456 40
x38132:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x38135:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$73:	; Parameter 6 -123.456 48
x38139:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x38142:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$75:	; Parameter 6 -123.456 56
x38146:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x38149:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$77:	; Parameter 6 -123.456 64
x38153:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x38156:	mov word [bp + 6], print_test$79	; 5: 199 70 6 31 149
x38161:	mov [bp + 8], bp	; 3: 137 110 8
x38164:	add bp, 6	; 3: 131 197 6
x38167:	mov di, bp	; 2: 137 239
x38169:	add di, 64	; 3: 131 199 64
x38172:	jmp printf	; 3: 233 166 119

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38175:	mov word [bp + 12], string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 66 150

print_test$82:	; PushFloat 123.456
x38180:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$83:	; Parameter 6 123.456 8
x38184:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x38187:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$85:	; Parameter 6 123.456 16
x38191:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x38194:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$87:	; Parameter 6 123.456 24
x38198:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x38201:	fld qword [float8$123.456#]	; 4: 221 6 31 120

print_test$89:	; Parameter 6 123.456 32
x38205:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x38208:	mov word [bp + 6], print_test$91	; 5: 199 70 6 83 149
x38213:	mov [bp + 8], bp	; 3: 137 110 8
x38216:	add bp, 6	; 3: 131 197 6
x38219:	mov di, bp	; 2: 137 239
x38221:	add di, 32	; 3: 131 199 32
x38224:	jmp printf	; 3: 233 114 119

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38227:	mov word [bp + 12], string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 66 150

print_test$94:	; PushFloat -123.456
x38232:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$95:	; Parameter 6 -123.456 8
x38236:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x38239:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$97:	; Parameter 6 -123.456 16
x38243:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x38246:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$99:	; Parameter 6 -123.456 24
x38250:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x38253:	fld qword [float8$minus123.456#]	; 4: 221 6 233 120

print_test$101:	; Parameter 6 -123.456 32
x38257:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x38260:	mov word [bp + 6], print_test$103	; 5: 199 70 6 135 149
x38265:	mov [bp + 8], bp	; 3: 137 110 8
x38268:	add bp, 6	; 3: 131 197 6
x38271:	mov di, bp	; 2: 137 239
x38273:	add di, 32	; 3: 131 199 32
x38276:	jmp printf	; 3: 233 62 119

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x38279:	mov ax, [bp]	; 3: 139 70 0
x38282:	mov di, [bp + 4]	; 3: 139 126 4
x38285:	mov bp, [bp + 2]	; 3: 139 110 2
x38288:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38290:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38350:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38382:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38466:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x38510:	mov word [bp + 12], string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 59 152

limits_test$2:	; Parameter 6 8 8
x38515:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x38520:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 139 150
x38525:	mov [bp + 8], bp	; 3: 137 110 8
x38528:	add bp, 6	; 3: 131 197 6
x38531:	mov di, bp	; 2: 137 239
x38533:	add di, 2	; 3: 131 199 2
x38536:	jmp printf	; 3: 233 58 118

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x38539:	mov word [bp + 12], string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 74 152

limits_test$7:	; Parameter 6 -128 8
x38544:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x38549:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 168 150
x38554:	mov [bp + 8], bp	; 3: 137 110 8
x38557:	add bp, 6	; 3: 131 197 6
x38560:	mov di, bp	; 2: 137 239
x38562:	add di, 2	; 3: 131 199 2
x38565:	jmp printf	; 3: 233 29 118

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x38568:	mov word [bp + 12], string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 90 152

limits_test$12:	; Parameter 6 127 8
x38573:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x38578:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 197 150
x38583:	mov [bp + 8], bp	; 3: 137 110 8
x38586:	add bp, 6	; 3: 131 197 6
x38589:	mov di, bp	; 2: 137 239
x38591:	add di, 2	; 3: 131 199 2
x38594:	jmp printf	; 3: 233 0 118

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x38597:	mov word [bp + 12], string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 105 152

limits_test$17:	; Parameter 6 255 8
x38602:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x38607:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 226 150
x38612:	mov [bp + 8], bp	; 3: 137 110 8
x38615:	add bp, 6	; 3: 131 197 6
x38618:	mov di, bp	; 2: 137 239
x38620:	add di, 2	; 3: 131 199 2
x38623:	jmp printf	; 3: 233 227 117

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x38626:	mov word [bp + 12], string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 122 152

limits_test$22:	; Parameter 6 -128 8
x38631:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x38636:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 255 150
x38641:	mov [bp + 8], bp	; 3: 137 110 8
x38644:	add bp, 6	; 3: 131 197 6
x38647:	mov di, bp	; 2: 137 239
x38649:	add di, 2	; 3: 131 199 2
x38652:	jmp printf	; 3: 233 198 117

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x38655:	mov word [bp + 12], string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 137 152

limits_test$27:	; Parameter 6 127 8
x38660:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x38665:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 28 151
x38670:	mov [bp + 8], bp	; 3: 137 110 8
x38673:	add bp, 6	; 3: 131 197 6
x38676:	mov di, bp	; 2: 137 239
x38678:	add di, 2	; 3: 131 199 2
x38681:	jmp printf	; 3: 233 169 117

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x38684:	mov word [bp + 12], string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 152 152

limits_test$32:	; Parameter 6 255 8
x38689:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x38694:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 57 151
x38699:	mov [bp + 8], bp	; 3: 137 110 8
x38702:	add bp, 6	; 3: 131 197 6
x38705:	mov di, bp	; 2: 137 239
x38707:	add di, 2	; 3: 131 199 2
x38710:	jmp printf	; 3: 233 140 117

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x38713:	mov word [bp + 12], string_INT_MIN203D2025i0A#	; 5: 199 70 12 169 152

limits_test$37:	; Parameter 6 -32768 8
x38718:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x38723:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 86 151
x38728:	mov [bp + 8], bp	; 3: 137 110 8
x38731:	add bp, 6	; 3: 131 197 6
x38734:	mov di, bp	; 2: 137 239
x38736:	add di, 2	; 3: 131 199 2
x38739:	jmp printf	; 3: 233 111 117

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x38742:	mov word [bp + 12], string_INT_MAX203D2025i0A#	; 5: 199 70 12 183 152

limits_test$42:	; Parameter 6 32767 8
x38747:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x38752:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 115 151
x38757:	mov [bp + 8], bp	; 3: 137 110 8
x38760:	add bp, 6	; 3: 131 197 6
x38763:	mov di, bp	; 2: 137 239
x38765:	add di, 2	; 3: 131 199 2
x38768:	jmp printf	; 3: 233 82 117

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x38771:	mov word [bp + 12], string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 197 152

limits_test$47:	; Parameter 6 65535 8
x38776:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x38781:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 144 151
x38786:	mov [bp + 8], bp	; 3: 137 110 8
x38789:	add bp, 6	; 3: 131 197 6
x38792:	mov di, bp	; 2: 137 239
x38794:	add di, 2	; 3: 131 199 2
x38797:	jmp printf	; 3: 233 53 117

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x38800:	mov word [bp + 12], string_LONG_MIN203D2025li0A#	; 5: 199 70 12 213 152

limits_test$52:	; Parameter 6 -2147483648 8
x38805:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x38813:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 176 151
x38818:	mov [bp + 8], bp	; 3: 137 110 8
x38821:	add bp, 6	; 3: 131 197 6
x38824:	mov di, bp	; 2: 137 239
x38826:	add di, 4	; 3: 131 199 4
x38829:	jmp printf	; 3: 233 21 117

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x38832:	mov word [bp + 12], string_LONG_MAX203D2025li0A#	; 5: 199 70 12 229 152

limits_test$57:	; Parameter 6 2147483647 8
x38837:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x38845:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 208 151
x38850:	mov [bp + 8], bp	; 3: 137 110 8
x38853:	add bp, 6	; 3: 131 197 6
x38856:	mov di, bp	; 2: 137 239
x38858:	add di, 4	; 3: 131 199 4
x38861:	jmp printf	; 3: 233 245 116

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x38864:	mov word [bp + 12], string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 245 152

limits_test$62:	; Parameter 6 4294967295 8
x38869:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x38877:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 240 151
x38882:	mov [bp + 8], bp	; 3: 137 110 8
x38885:	add bp, 6	; 3: 131 197 6
x38888:	mov di, bp	; 2: 137 239
x38890:	add di, 4	; 3: 131 199 4
x38893:	jmp printf	; 3: 233 213 116

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x38896:	mov word [bp + 12], string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 6 153

limits_test$67:	; Parameter 6 4294967295 8
x38901:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x38909:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 16 152
x38914:	mov [bp + 8], bp	; 3: 137 110 8
x38917:	add bp, 6	; 3: 131 197 6
x38920:	mov di, bp	; 2: 137 239
x38922:	add di, 4	; 3: 131 199 4
x38925:	jmp printf	; 3: 233 181 116

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x38928:	mov word [bp + 12], string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 23 153

limits_test$72:	; Parameter 6 4294967295 8
x38933:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x38941:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 48 152
x38946:	mov [bp + 8], bp	; 3: 137 110 8
x38949:	add bp, 6	; 3: 131 197 6
x38952:	mov di, bp	; 2: 137 239
x38954:	add di, 4	; 3: 131 199 4
x38957:	jmp printf	; 3: 233 149 116

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x38960:	mov ax, [bp]	; 3: 139 70 0
x38963:	mov di, [bp + 4]	; 3: 139 126 4
x38966:	mov bp, [bp + 2]	; 3: 139 110 2
x38969:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

string_CHAR_BIT203D2025i0A#:
x38971:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

string_CHAR_MIN203D2025i0A0A#:
x38986:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

string_CHAR_MAX203D2025i0A#:
x39002:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

string_UCHAR_MAX203D2025u0A0A#:
x39017:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

string_SHRT_MIN203D2025i0A#:
x39034:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

string_SHRT_MAX203D2025i0A#:
x39049:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

string_USHRT_MAX203D2025u0A0A#:
x39064:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

string_INT_MIN203D2025i0A#:
x39081:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

string_INT_MAX203D2025i0A#:
x39095:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

string_UINT_MAX203D2025u0A0A#:
x39109:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

string_LONG_MIN203D2025li0A#:
x39125:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

string_LONG_MAX203D2025li0A#:
x39141:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

string_ULONG_MAX203D2025lu0A#:
x39157:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

string_ULONG_MAX203D2025lx0A#:
x39174:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

string_ULONG_MAX203D2025lX0A#:
x39191:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x39208:	mov ax, [bp]	; 3: 139 70 0
x39211:	mov di, [bp + 4]	; 3: 139 126 4
x39214:	mov bp, [bp + 2]	; 3: 139 110 2
x39217:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

string_test:	; Assign s string_Hello2C20World21#
x39219:	mov word [bp + 8], string_Hello2C20World21#	; 5: 199 70 8 247 119

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x39224:	mov word [bp + 218], string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 77 159

string_test$3:	; Parameter 212 s 8
x39230:	mov ax, [bp + 8]	; 3: 139 70 8
x39233:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x39237:	mov ax, [bp + 8]	; 3: 139 70 8
x39240:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x39244:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 93 153
x39250:	mov [bp + 224], bp	; 4: 137 174 224 0
x39254:	add bp, 222	; 4: 129 197 222 0
x39258:	jmp strlen	; 3: 233 112 245

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4516

string_test$9:	; Parameter 212 £temporary4516 10
x39261:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x39265:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 119 153
x39271:	mov [bp + 214], bp	; 4: 137 174 214 0
x39275:	add bp, 212	; 4: 129 197 212 0
x39279:	mov di, bp	; 2: 137 239
x39281:	add di, 4	; 3: 131 199 4
x39284:	jmp printf	; 3: 233 78 115

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x39287:	mov [bp + 218], bp	; 4: 137 174 218 0
x39291:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x39296:	mov ax, [bp + 8]	; 3: 139 70 8
x39299:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x39303:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 152 153
x39309:	mov [bp + 214], bp	; 4: 137 174 214 0
x39313:	add bp, 212	; 4: 129 197 212 0
x39317:	jmp strcpy	; 3: 233 194 187

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x39320:	mov [bp + 218], bp	; 4: 137 174 218 0
x39324:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x39329:	mov ax, [bp + 8]	; 3: 139 70 8
x39332:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x39336:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x39342:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 191 153
x39348:	mov [bp + 214], bp	; 4: 137 174 214 0
x39352:	add bp, 212	; 4: 129 197 212 0
x39356:	jmp strncpy	; 3: 233 70 7

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4520 -> u u 5
x39359:	mov si, bp	; 2: 137 238
x39361:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4520 -> u 0
x39364:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x39368:	mov word [bp + 218], string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 96 159

string_test$27:	; Parameter 212 t 8
x39374:	mov [bp + 220], bp	; 4: 137 174 220 0
x39378:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x39383:	mov [bp + 222], bp	; 4: 137 174 222 0
x39387:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x39392:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 246 153
x39398:	mov [bp + 214], bp	; 4: 137 174 214 0
x39402:	add bp, 212	; 4: 129 197 212 0
x39406:	mov di, bp	; 2: 137 239
x39408:	add di, 4	; 3: 131 199 4
x39411:	jmp printf	; 3: 233 207 114

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x39414:	mov [bp + 218], bp	; 4: 137 174 218 0
x39418:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x39423:	mov word [bp + 220], string_abc#	; 6: 199 134 220 0 116 159

string_test$34:	; Call 212 strcat 0
x39429:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 22 154
x39435:	mov [bp + 214], bp	; 4: 137 174 214 0
x39439:	add bp, 212	; 4: 129 197 212 0
x39443:	jmp strcat	; 3: 233 218 244

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x39446:	mov [bp + 218], bp	; 4: 137 174 218 0
x39450:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x39455:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 48 154
x39461:	mov [bp + 214], bp	; 4: 137 174 214 0
x39465:	add bp, 212	; 4: 129 197 212 0
x39469:	jmp strlen	; 3: 233 157 244

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4523

string_test$41:	; Assign i £temporary4523
x39472:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x39475:	mov [bp + 218], bp	; 4: 137 174 218 0
x39479:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x39484:	mov word [bp + 220], string_abc#	; 6: 199 134 220 0 116 159

string_test$45:	; Parameter 212 2 10
x39490:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x39496:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 89 154
x39502:	mov [bp + 214], bp	; 4: 137 174 214 0
x39506:	add bp, 212	; 4: 129 197 212 0
x39510:	jmp strncat	; 3: 233 253 6

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4525 i 2
x39513:	mov ax, [bp + 6]	; 3: 139 70 6
x39516:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4527 u £temporary4525
x39519:	mov si, bp	; 2: 137 238
x39521:	add si, 110	; 3: 131 198 110
x39524:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4526 -> £temporary4527 £temporary4527 0

string_test$51:	; Assign £temporary4526 -> £temporary4527 0
x39526:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x39529:	mov word [bp + 218], string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 96 159

string_test$54:	; Parameter 212 t 8
x39535:	mov [bp + 220], bp	; 4: 137 174 220 0
x39539:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x39544:	mov [bp + 222], bp	; 4: 137 174 222 0
x39548:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x39553:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 151 154
x39559:	mov [bp + 214], bp	; 4: 137 174 214 0
x39563:	add bp, 212	; 4: 129 197 212 0
x39567:	mov di, bp	; 2: 137 239
x39569:	add di, 4	; 3: 131 199 4
x39572:	jmp printf	; 3: 233 46 114

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x39575:	mov word [bp + 218], string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 120 159

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x39581:	mov ax, [bp + 8]	; 3: 139 70 8
x39584:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x39588:	mov [bp + 228], bp	; 4: 137 174 228 0
x39592:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x39597:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 190 154
x39603:	mov [bp + 222], bp	; 4: 137 174 222 0
x39607:	add bp, 220	; 4: 129 197 220 0
x39611:	jmp strcmp	; 3: 233 52 185

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4529

string_test$66:	; Parameter 212 £temporary4529 8
x39614:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x39618:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 216 154
x39624:	mov [bp + 214], bp	; 4: 137 174 214 0
x39628:	add bp, 212	; 4: 129 197 212 0
x39632:	mov di, bp	; 2: 137 239
x39634:	add di, 2	; 3: 131 199 2
x39637:	jmp printf	; 3: 233 237 113

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x39640:	mov word [bp + 218], string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 139 159

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x39646:	mov ax, [bp + 8]	; 3: 139 70 8
x39649:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x39653:	mov [bp + 228], bp	; 4: 137 174 228 0
x39657:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x39662:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x39668:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 5 155
x39674:	mov [bp + 222], bp	; 4: 137 174 222 0
x39678:	add bp, 220	; 4: 129 197 220 0
x39682:	jmp strncmp	; 3: 233 184 6

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4531

string_test$78:	; Parameter 212 £temporary4531 8
x39685:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x39689:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 31 155
x39695:	mov [bp + 214], bp	; 4: 137 174 214 0
x39699:	add bp, 212	; 4: 129 197 212 0
x39703:	mov di, bp	; 2: 137 239
x39705:	add di, 2	; 3: 131 199 2
x39708:	jmp printf	; 3: 233 166 113

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x39711:	mov ax, [bp + 8]	; 3: 139 70 8
x39714:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x39718:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x39724:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 61 155
x39730:	mov [bp + 214], bp	; 4: 137 174 214 0
x39734:	add bp, 212	; 4: 129 197 212 0
x39738:	jmp strchr	; 3: 233 57 134

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4533

string_test$87:	; Assign p £temporary4533
x39741:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x39745:	mov word [bp + 218], string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 162 159

string_test$90:	; Equal 93 p 0
x39751:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x39756:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4539 p s
x39758:	mov ax, [bp + 210]	; 4: 139 134 210 0
x39762:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x39765:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4539 -1
x39767:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4539 8
x39770:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x39774:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 116 155
x39780:	mov [bp + 214], bp	; 4: 137 174 214 0
x39784:	add bp, 212	; 4: 129 197 212 0
x39788:	mov di, bp	; 2: 137 239
x39790:	add di, 2	; 3: 131 199 2
x39793:	jmp printf	; 3: 233 81 113

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x39796:	mov ax, [bp + 8]	; 3: 139 70 8
x39799:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x39803:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x39809:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 146 155
x39815:	mov [bp + 214], bp	; 4: 137 174 214 0
x39819:	add bp, 212	; 4: 129 197 212 0
x39823:	jmp strrchr	; 3: 233 228 6

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4541

string_test$103:	; Assign p £temporary4541
x39826:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x39830:	mov word [bp + 218], string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 183 159

string_test$106:	; Equal 109 p 0
x39836:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x39841:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4547 p s
x39843:	mov ax, [bp + 210]	; 4: 139 134 210 0
x39847:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x39850:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4547 -1
x39852:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4547 8
x39855:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x39859:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 201 155
x39865:	mov [bp + 214], bp	; 4: 137 174 214 0
x39869:	add bp, 212	; 4: 129 197 212 0
x39873:	mov di, bp	; 2: 137 239
x39875:	add di, 2	; 3: 131 199 2
x39878:	jmp printf	; 3: 233 252 112

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x39881:	mov ax, [bp + 8]	; 3: 139 70 8
x39884:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x39888:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x39894:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 231 155
x39900:	mov [bp + 214], bp	; 4: 137 174 214 0
x39904:	add bp, 212	; 4: 129 197 212 0
x39908:	jmp strchr	; 3: 233 143 133

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4549

string_test$119:	; Assign p £temporary4549
x39911:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x39915:	mov word [bp + 218], string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 205 159

string_test$122:	; Equal 125 p 0
x39921:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x39926:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4555 p s
x39928:	mov ax, [bp + 210]	; 4: 139 134 210 0
x39932:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x39935:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4555 -1
x39937:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4555 8
x39940:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x39944:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 30 156
x39950:	mov [bp + 214], bp	; 4: 137 174 214 0
x39954:	add bp, 212	; 4: 129 197 212 0
x39958:	mov di, bp	; 2: 137 239
x39960:	add di, 2	; 3: 131 199 2
x39963:	jmp printf	; 3: 233 167 112

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x39966:	mov ax, [bp + 8]	; 3: 139 70 8
x39969:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x39973:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x39979:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 60 156
x39985:	mov [bp + 214], bp	; 4: 137 174 214 0
x39989:	add bp, 212	; 4: 129 197 212 0
x39993:	jmp strrchr	; 3: 233 58 6

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4557

string_test$135:	; Assign p £temporary4557
x39996:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x40000:	mov word [bp + 218], string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 226 159

string_test$138:	; Equal 141 p 0
x40006:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x40011:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4563 p s
x40013:	mov ax, [bp + 210]	; 4: 139 134 210 0
x40017:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x40020:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4563 -1
x40022:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4563 8
x40025:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x40029:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 115 156
x40035:	mov [bp + 214], bp	; 4: 137 174 214 0
x40039:	add bp, 212	; 4: 129 197 212 0
x40043:	mov di, bp	; 2: 137 239
x40045:	add di, 2	; 3: 131 199 2
x40048:	jmp printf	; 3: 233 82 112

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x40051:	mov ax, [bp + 8]	; 3: 139 70 8
x40054:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x40058:	mov word [bp + 220], string_Hello2C20World21#	; 6: 199 134 220 0 247 119

string_test$148:	; Parameter 212 20 10
x40064:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x40070:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 151 156
x40076:	mov [bp + 214], bp	; 4: 137 174 214 0
x40080:	add bp, 212	; 4: 129 197 212 0
x40084:	jmp memcpy	; 3: 233 212 246

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x40087:	mov [bp + 218], bp	; 4: 137 174 218 0
x40091:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x40096:	mov word [bp + 220], string_Hello2C20World21#	; 6: 199 134 220 0 247 119

string_test$154:	; Parameter 212 20 10
x40102:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x40108:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 189 156
x40114:	mov [bp + 214], bp	; 4: 137 174 214 0
x40118:	add bp, 212	; 4: 129 197 212 0
x40122:	jmp memmove	; 3: 233 6 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x40125:	mov [bp + 218], bp	; 4: 137 174 218 0
x40129:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x40134:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x40140:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x40146:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 227 156
x40152:	mov [bp + 214], bp	; 4: 137 174 214 0
x40156:	add bp, 212	; 4: 129 197 212 0
x40160:	jmp memset	; 3: 233 70 6

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4568 -> u u 19
x40163:	mov si, bp	; 2: 137 238
x40165:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4568 -> u 0
x40168:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x40172:	mov word [bp + 218], string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 248 159

string_test$167:	; Parameter 212 s 8
x40178:	mov ax, [bp + 8]	; 3: 139 70 8
x40181:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x40185:	mov [bp + 222], bp	; 4: 137 174 222 0
x40189:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x40194:	mov [bp + 224], bp	; 4: 137 174 224 0
x40198:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x40203:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 33 157
x40209:	mov [bp + 214], bp	; 4: 137 174 214 0
x40213:	add bp, 212	; 4: 129 197 212 0
x40217:	mov di, bp	; 2: 137 239
x40219:	add di, 6	; 3: 131 199 6
x40222:	jmp printf	; 3: 233 164 111

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x40225:	mov ax, [bp + 8]	; 3: 139 70 8
x40228:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x40232:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x40238:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x40244:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 69 157
x40250:	mov [bp + 214], bp	; 4: 137 174 214 0
x40254:	add bp, 212	; 4: 129 197 212 0
x40258:	jmp memchr	; 3: 233 36 6

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4570

string_test$179:	; Assign p £temporary4570
x40261:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x40265:	mov word [bp + 218], string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 22 160

string_test$182:	; Equal 185 p 0
x40271:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x40276:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4576 p s
x40278:	mov ax, [bp + 210]	; 4: 139 134 210 0
x40282:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x40285:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4576 -1
x40287:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4576 8
x40290:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x40294:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 124 157
x40300:	mov [bp + 214], bp	; 4: 137 174 214 0
x40304:	add bp, 212	; 4: 129 197 212 0
x40308:	mov di, bp	; 2: 137 239
x40310:	add di, 2	; 3: 131 199 2
x40313:	jmp printf	; 3: 233 73 111

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x40316:	mov ax, [bp + 8]	; 3: 139 70 8
x40319:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x40323:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x40329:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x40335:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 160 157
x40341:	mov [bp + 214], bp	; 4: 137 174 214 0
x40345:	add bp, 212	; 4: 129 197 212 0
x40349:	jmp memchr	; 3: 233 201 5

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4578

string_test$196:	; Assign p £temporary4578
x40352:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x40356:	mov word [bp + 218], string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 64 160

string_test$199:	; Equal 202 p 0
x40362:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x40367:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4584 p s
x40369:	mov ax, [bp + 210]	; 4: 139 134 210 0
x40373:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x40376:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4584 -1
x40378:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4584 8
x40381:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x40385:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 215 157
x40391:	mov [bp + 214], bp	; 4: 137 174 214 0
x40395:	add bp, 212	; 4: 129 197 212 0
x40399:	mov di, bp	; 2: 137 239
x40401:	add di, 2	; 3: 131 199 2
x40404:	jmp printf	; 3: 233 238 110

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x40407:	mov word [bp + 218], string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 106 160

string_test$208:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$209:	; Parameter 212 s 14
x40413:	mov ax, [bp + 8]	; 3: 139 70 8
x40416:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$210:	; Parameter 212 t 16
x40420:	mov [bp + 228], bp	; 4: 137 174 228 0
x40424:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$211:	; Parameter 212 20 18
x40429:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$212:	; Call 212 memcmp 8
x40435:	mov word [bp + 220], string_test$213	; 6: 199 134 220 0 4 158
x40441:	mov [bp + 222], bp	; 4: 137 174 222 0
x40445:	add bp, 220	; 4: 129 197 220 0
x40449:	jmp memcmp	; 3: 233 184 5

string_test$213:	; PostCall 212

string_test$214:	; GetReturnValue £temporary4586

string_test$215:	; Parameter 212 £temporary4586 8
x40452:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$216:	; Call 212 printf 0
x40456:	mov word [bp + 212], string_test$217	; 6: 199 134 212 0 30 158
x40462:	mov [bp + 214], bp	; 4: 137 174 214 0
x40466:	add bp, 212	; 4: 129 197 212 0
x40470:	mov di, bp	; 2: 137 239
x40472:	add di, 2	; 3: 131 199 2
x40475:	jmp printf	; 3: 233 167 110

string_test$217:	; PostCall 212

string_test$218:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$219:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x40478:	mov word [bp + 218], string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 146 160

string_test$220:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$221:	; Parameter 212 s 14
x40484:	mov ax, [bp + 8]	; 3: 139 70 8
x40487:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$222:	; Parameter 212 string_Hello2C20C# 16
x40491:	mov word [bp + 228], string_Hello2C20C#	; 6: 199 134 228 0 174 160

string_test$223:	; Call 212 strspn 8
x40497:	mov word [bp + 220], string_test$224	; 6: 199 134 220 0 66 158
x40503:	mov [bp + 222], bp	; 4: 137 174 222 0
x40507:	add bp, 220	; 4: 129 197 220 0
x40511:	jmp strspn	; 3: 233 230 5

string_test$224:	; PostCall 212

string_test$225:	; GetReturnValue £temporary4588

string_test$226:	; Parameter 212 £temporary4588 8
x40514:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$227:	; Call 212 printf 0
x40518:	mov word [bp + 212], string_test$228	; 6: 199 134 212 0 92 158
x40524:	mov [bp + 214], bp	; 4: 137 174 214 0
x40528:	add bp, 212	; 4: 129 197 212 0
x40532:	mov di, bp	; 2: 137 239
x40534:	add di, 2	; 3: 131 199 2
x40537:	jmp printf	; 3: 233 105 110

string_test$228:	; PostCall 212

string_test$229:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$230:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x40540:	mov word [bp + 218], string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 183 160

string_test$231:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$232:	; Parameter 212 s 14
x40546:	mov ax, [bp + 8]	; 3: 139 70 8
x40549:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$233:	; Parameter 212 string_Hello2C20C# 16
x40553:	mov word [bp + 228], string_Hello2C20C#	; 6: 199 134 228 0 174 160

string_test$234:	; Call 212 strcspn 8
x40559:	mov word [bp + 220], string_test$235	; 6: 199 134 220 0 128 158
x40565:	mov [bp + 222], bp	; 4: 137 174 222 0
x40569:	add bp, 220	; 4: 129 197 220 0
x40573:	jmp strcspn	; 3: 233 8 6

string_test$235:	; PostCall 212

string_test$236:	; GetReturnValue £temporary4590

string_test$237:	; Parameter 212 £temporary4590 8
x40576:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$238:	; Call 212 printf 0
x40580:	mov word [bp + 212], string_test$239	; 6: 199 134 212 0 154 158
x40586:	mov [bp + 214], bp	; 4: 137 174 214 0
x40590:	add bp, 212	; 4: 129 197 212 0
x40594:	mov di, bp	; 2: 137 239
x40596:	add di, 2	; 3: 131 199 2
x40599:	jmp printf	; 3: 233 43 110

string_test$239:	; PostCall 212

string_test$240:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$241:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x40602:	mov word [bp + 218], string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 212 160

string_test$242:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$243:	; Parameter 212 errno 14
x40608:	mov ax, [errno]	; 3: 161 182 10
x40611:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$244:	; Call 212 strerror 8
x40615:	mov word [bp + 220], string_test$245	; 6: 199 134 220 0 184 158
x40621:	mov [bp + 222], bp	; 4: 137 174 222 0
x40625:	add bp, 220	; 4: 129 197 220 0
x40629:	jmp strerror	; 3: 233 87 148

string_test$245:	; PostCall 212

string_test$246:	; GetReturnValue £temporary4592

string_test$247:	; Parameter 212 £temporary4592 8
x40632:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$248:	; Call 212 printf 0
x40636:	mov word [bp + 212], string_test$249	; 6: 199 134 212 0 210 158
x40642:	mov [bp + 214], bp	; 4: 137 174 214 0
x40646:	add bp, 212	; 4: 129 197 212 0
x40650:	mov di, bp	; 2: 137 239
x40652:	add di, 2	; 3: 131 199 2
x40655:	jmp printf	; 3: 233 243 109

string_test$249:	; PostCall 212

string_test$250:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$251:	; Parameter 212 s 6
x40658:	mov ax, [bp + 8]	; 3: 139 70 8
x40661:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$252:	; Parameter 212 string_2C# 8
x40665:	mov word [bp + 220], string_2C#	; 6: 199 134 220 0 236 160

string_test$253:	; Call 212 strtok 0
x40671:	mov word [bp + 212], string_test$254	; 6: 199 134 212 0 240 158
x40677:	mov [bp + 214], bp	; 4: 137 174 214 0
x40681:	add bp, 212	; 4: 129 197 212 0
x40685:	jmp strtok	; 3: 233 248 5

string_test$254:	; PostCall 212

string_test$255:	; GetReturnValue £temporary4594

string_test$256:	; Assign p £temporary4594
x40688:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$257:	; Equal 271 p 0
x40692:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x40697:	je string_test$271	; 2: 116 71

string_test$258:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$259:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x40699:	mov word [bp + 218], string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 238 160

string_test$260:	; Parameter 212 p 8
x40705:	mov ax, [bp + 210]	; 4: 139 134 210 0
x40709:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$261:	; Call 212 printf 0
x40713:	mov word [bp + 212], string_test$262	; 6: 199 134 212 0 31 159
x40719:	mov [bp + 214], bp	; 4: 137 174 214 0
x40723:	add bp, 212	; 4: 129 197 212 0
x40727:	mov di, bp	; 2: 137 239
x40729:	add di, 2	; 3: 131 199 2
x40732:	jmp printf	; 3: 233 166 109

string_test$262:	; PostCall 212

string_test$263:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$264:	; Parameter 212 0 6
x40735:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$265:	; Parameter 212 string_2C# 8
x40741:	mov word [bp + 220], string_2C#	; 6: 199 134 220 0 236 160

string_test$266:	; Call 212 strtok 0
x40747:	mov word [bp + 212], string_test$267	; 6: 199 134 212 0 60 159
x40753:	mov [bp + 214], bp	; 4: 137 174 214 0
x40757:	add bp, 212	; 4: 129 197 212 0
x40761:	jmp strtok	; 3: 233 172 5

string_test$267:	; PostCall 212

string_test$268:	; GetReturnValue £temporary4597

string_test$269:	; Assign p £temporary4597
x40764:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$270:	; Goto 257
x40768:	jmp string_test$257	; 2: 235 178

string_test$271:	; Return 0
x40770:	mov ax, [bp]	; 3: 139 70 0
x40773:	mov di, [bp + 4]	; 3: 139 126 4
x40776:	mov bp, [bp + 2]	; 3: 139 110 2
x40779:	jmp ax	; 2: 255 224

string_test$272:	; FunctionEnd string_test

string_strlen282225s2229203D2025i0A#:
x40781:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

string_t203D202225s222C20u203D202225s220A#:
x40800:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

string_abc#:
x40820:	db "abc", 0	; 4: 97 98 99 0

string_strcmp28s2C20u29203D2025i0A#:
x40824:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

string_strncmp28s2C20u2C20229203D2025i0A#:
x40843:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

string_strchr28s2C2027l2729203D2025i0A#:
x40866:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

string_strrchr28s2C2027l2729203D2025i0A#:
x40887:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

string_strchr28s2C2027x2729203D2025i0A#:
x40909:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

string_strrchr28s2C2027x2729203D2025i0A#:
x40930:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x40952:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x40982:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x41024:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x41066:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x41106:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

string_Hello2C20C#:
x41134:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x41143:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

string_strerror28errno29203D202225s220A#:
x41172:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

string_2C#:
x41196:	db ",", 0	; 2: 44 0

string_strtok28s2C20222C2229203D202225s220A#:
x41198:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

strncpy:	; Assign index 0
x41221:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x41226:	mov ax, [bp + 10]	; 3: 139 70 10
x41229:	cmp [bp + 12], ax	; 3: 57 70 12
x41232:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3904 source index
x41234:	mov si, [bp + 8]	; 3: 139 118 8
x41237:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3903 -> £temporary3904 £temporary3904 0

strncpy$4:	; Equal 12 £temporary3903 -> £temporary3904 0
x41240:	cmp byte [si], 0	; 3: 128 60 0
x41243:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3909 target index
x41245:	mov si, [bp + 6]	; 3: 139 118 6
x41248:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3908 -> £temporary3909 £temporary3909 0

strncpy$7:	; BinaryAdd £temporary3911 source index
x41251:	mov di, [bp + 8]	; 3: 139 126 8
x41254:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3910 -> £temporary3911 £temporary3911 0

strncpy$9:	; Assign £temporary3908 -> £temporary3909 £temporary3910 -> £temporary3911
x41257:	mov al, [di]	; 2: 138 5
x41259:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x41261:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x41264:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x41266:	mov ax, [bp + 10]	; 3: 139 70 10
x41269:	cmp [bp + 12], ax	; 3: 57 70 12
x41272:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3915 target index
x41274:	mov si, [bp + 6]	; 3: 139 118 6
x41277:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0

strncpy$15:	; Assign £temporary3914 -> £temporary3915 0
x41280:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x41283:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x41286:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x41288:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x41291:	mov ax, [bp]	; 3: 139 70 0
x41294:	mov di, [bp + 4]	; 3: 139 126 4
x41297:	mov bp, [bp + 2]	; 3: 139 110 2
x41300:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x41302:	mov ax, [bp + 6]	; 3: 139 70 6
x41305:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x41308:	mov word [bp + 14], strncat$3	; 5: 199 70 14 106 161
x41313:	mov [bp + 16], bp	; 3: 137 110 16
x41316:	add bp, 14	; 3: 131 197 14
x41319:	jmp strlen	; 3: 233 99 237

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3930

strncat$5:	; Assign targetLength £temporary3930
x41322:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x41325:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3931 size 1
x41330:	mov ax, [bp + 10]	; 3: 139 70 10
x41333:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3931
x41334:	cmp [bp + 12], ax	; 3: 57 70 12
x41337:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3934 source index
x41339:	mov si, [bp + 8]	; 3: 139 118 8
x41342:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3933 -> £temporary3934 £temporary3934 0

strncat$11:	; Equal 20 £temporary3933 -> £temporary3934 0
x41345:	cmp byte [si], 0	; 3: 128 60 0
x41348:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3938 targetLength index
x41350:	mov ax, [bp + 14]	; 3: 139 70 14
x41353:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3940 target £temporary3938
x41356:	mov si, [bp + 6]	; 3: 139 118 6
x41359:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3939 -> £temporary3940 £temporary3940 0

strncat$15:	; BinaryAdd £temporary3942 source index
x41361:	mov di, [bp + 8]	; 3: 139 126 8
x41364:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3941 -> £temporary3942 £temporary3942 0

strncat$17:	; Assign £temporary3939 -> £temporary3940 £temporary3941 -> £temporary3942
x41367:	mov al, [di]	; 2: 138 5
x41369:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x41371:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x41374:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3943 targetLength size
x41376:	mov ax, [bp + 14]	; 3: 139 70 14
x41379:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3944 £temporary3943 1
x41382:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3946 target £temporary3944
x41383:	mov si, [bp + 6]	; 3: 139 118 6
x41386:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3945 -> £temporary3946 £temporary3946 0

strncat$24:	; Assign £temporary3945 -> £temporary3946 0
x41388:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x41391:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x41394:	mov ax, [bp]	; 3: 139 70 0
x41397:	mov di, [bp + 4]	; 3: 139 126 4
x41400:	mov bp, [bp + 2]	; 3: 139 110 2
x41403:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x41405:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 36 index size
x41410:	mov ax, [bp + 10]	; 3: 139 70 10
x41413:	cmp [bp + 12], ax	; 3: 57 70 12
x41416:	jge strncmp$36	; 4: 15 141 156 0

strncmp$2:	; BinaryAdd £temporary3976 left index
x41420:	mov si, [bp + 6]	; 3: 139 118 6
x41423:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3975 -> £temporary3976 £temporary3976 0

strncmp$4:	; NotEqual 10 £temporary3975 -> £temporary3976 0
x41426:	cmp byte [si], 0	; 3: 128 60 0
x41429:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3979 right index
x41431:	mov si, [bp + 8]	; 3: 139 118 8
x41434:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3978 -> £temporary3979 £temporary3979 0

strncmp$7:	; NotEqual 10 £temporary3978 -> £temporary3979 0
x41437:	cmp byte [si], 0	; 3: 128 60 0
x41440:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x41442:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x41445:	mov ax, [bp]	; 3: 139 70 0
x41448:	mov di, [bp + 4]	; 3: 139 126 4
x41451:	mov bp, [bp + 2]	; 3: 139 110 2
x41454:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3983 left index
x41456:	mov si, [bp + 6]	; 3: 139 118 6
x41459:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3982 -> £temporary3983 £temporary3983 0

strncmp$12:	; NotEqual 15 £temporary3982 -> £temporary3983 0
x41462:	cmp byte [si], 0	; 3: 128 60 0
x41465:	jne strncmp$15	; 2: 117 14

strncmp$13:	; SetReturnValue -1
x41467:	mov bx, -1	; 3: 187 255 255

strncmp$14:	; Return -1
x41470:	mov ax, [bp]	; 3: 139 70 0
x41473:	mov di, [bp + 4]	; 3: 139 126 4
x41476:	mov bp, [bp + 2]	; 3: 139 110 2
x41479:	jmp ax	; 2: 255 224

strncmp$15:	; BinaryAdd £temporary3986 right index
x41481:	mov si, [bp + 8]	; 3: 139 118 8
x41484:	add si, [bp + 12]	; 3: 3 118 12

strncmp$16:	; Deref £temporary3985 -> £temporary3986 £temporary3986 0

strncmp$17:	; NotEqual 20 £temporary3985 -> £temporary3986 0
x41487:	cmp byte [si], 0	; 3: 128 60 0
x41490:	jne strncmp$20	; 2: 117 14

strncmp$18:	; SetReturnValue 1
x41492:	mov bx, 1	; 3: 187 1 0

strncmp$19:	; Return 1
x41495:	mov ax, [bp]	; 3: 139 70 0
x41498:	mov di, [bp + 4]	; 3: 139 126 4
x41501:	mov bp, [bp + 2]	; 3: 139 110 2
x41504:	jmp ax	; 2: 255 224

strncmp$20:	; BinaryAdd £temporary3989 left index
x41506:	mov si, [bp + 6]	; 3: 139 118 6
x41509:	add si, [bp + 12]	; 3: 3 118 12

strncmp$21:	; Deref £temporary3988 -> £temporary3989 £temporary3989 0

strncmp$22:	; BinaryAdd £temporary3991 right index
x41512:	mov di, [bp + 8]	; 3: 139 126 8
x41515:	add di, [bp + 12]	; 3: 3 126 12

strncmp$23:	; Deref £temporary3990 -> £temporary3991 £temporary3991 0

strncmp$24:	; SignedGreaterThanEqual 27 £temporary3988 -> £temporary3989 £temporary3990 -> £temporary3991
x41518:	mov al, [di]	; 2: 138 5
x41520:	cmp [si], al	; 2: 56 4
x41522:	jge strncmp$27	; 2: 125 14

strncmp$25:	; SetReturnValue -1
x41524:	mov bx, -1	; 3: 187 255 255

strncmp$26:	; Return -1
x41527:	mov ax, [bp]	; 3: 139 70 0
x41530:	mov di, [bp + 4]	; 3: 139 126 4
x41533:	mov bp, [bp + 2]	; 3: 139 110 2
x41536:	jmp ax	; 2: 255 224

strncmp$27:	; BinaryAdd £temporary3994 left index
x41538:	mov si, [bp + 6]	; 3: 139 118 6
x41541:	add si, [bp + 12]	; 3: 3 118 12

strncmp$28:	; Deref £temporary3993 -> £temporary3994 £temporary3994 0

strncmp$29:	; BinaryAdd £temporary3996 right index
x41544:	mov di, [bp + 8]	; 3: 139 126 8
x41547:	add di, [bp + 12]	; 3: 3 126 12

strncmp$30:	; Deref £temporary3995 -> £temporary3996 £temporary3996 0

strncmp$31:	; SignedLessThanEqual 34 £temporary3993 -> £temporary3994 £temporary3995 -> £temporary3996
x41550:	mov al, [di]	; 2: 138 5
x41552:	cmp [si], al	; 2: 56 4
x41554:	jle strncmp$34	; 2: 126 14

strncmp$32:	; SetReturnValue 1
x41556:	mov bx, 1	; 3: 187 1 0

strncmp$33:	; Return 1
x41559:	mov ax, [bp]	; 3: 139 70 0
x41562:	mov di, [bp + 4]	; 3: 139 126 4
x41565:	mov bp, [bp + 2]	; 3: 139 110 2
x41568:	jmp ax	; 2: 255 224

strncmp$34:	; Increment index
x41570:	inc word [bp + 12]	; 3: 255 70 12

strncmp$35:	; Goto 1
x41573:	jmp strncmp$1	; 3: 233 90 255

strncmp$36:	; SetReturnValue 0
x41576:	mov bx, 0	; 3: 187 0 0

strncmp$37:	; Return 0
x41579:	mov ax, [bp]	; 3: 139 70 0
x41582:	mov di, [bp + 4]	; 3: 139 126 4
x41585:	mov bp, [bp + 2]	; 3: 139 110 2
x41588:	jmp ax	; 2: 255 224

strncmp$38:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x41590:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary4009 i
x41595:	mov ax, [bp + 8]	; 3: 139 70 8
x41598:	cmp ax, 0	; 3: 131 248 0
x41601:	jge strrchr$2	; 2: 125 4
x41603:	neg ax	; 2: 247 216
x41605:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary4009
x41607:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x41610:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary4011 text index
x41615:	mov si, [bp + 6]	; 3: 139 118 6
x41618:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary4010 -> £temporary4011 £temporary4011 0

strrchr$6:	; Equal 16 £temporary4010 -> £temporary4011 0
x41621:	cmp byte [si], 0	; 3: 128 60 0
x41624:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary4015 text index
x41626:	mov si, [bp + 6]	; 3: 139 118 6
x41629:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary4014 -> £temporary4015 £temporary4015 0

strrchr$9:	; NotEqual 14 £temporary4014 -> £temporary4015 c
x41632:	mov al, [bp + 14]	; 3: 138 70 14
x41635:	cmp [si], al	; 2: 56 4
x41637:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary4018 text index
x41639:	mov si, [bp + 6]	; 3: 139 118 6
x41642:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary4017 -> £temporary4018 £temporary4018 0

strrchr$12:	; address £temporary4019 £temporary4017 -> £temporary4018

strrchr$13:	; Assign result £temporary4019
x41645:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x41648:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x41651:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x41653:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x41656:	mov ax, [bp]	; 3: 139 70 0
x41659:	mov di, [bp + 4]	; 3: 139 126 4
x41662:	mov bp, [bp + 2]	; 3: 139 110 2
x41665:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary4142 target
x41667:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary4142
x41670:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary4143 source
x41673:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary4143
x41676:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x41679:	mov ax, [bp + 6]	; 3: 139 70 6
x41682:	cmp [bp + 8], ax	; 3: 57 70 8
x41685:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x41687:	mov ax, [bp + 10]	; 3: 139 70 10
x41690:	dec ax	; 1: 72
x41691:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x41694:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x41698:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary4149 charTarget index
x41700:	mov si, [bp + 12]	; 3: 139 118 12
x41703:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary4148 -> £temporary4149 £temporary4149 0

memmove$9:	; BinaryAdd £temporary4151 charSource index
x41706:	mov di, [bp + 14]	; 3: 139 126 14
x41709:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary4150 -> £temporary4151 £temporary4151 0

memmove$11:	; Assign £temporary4148 -> £temporary4149 £temporary4150 -> £temporary4151
x41712:	mov al, [di]	; 2: 138 5
x41714:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x41716:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x41719:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x41721:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x41726:	mov ax, [bp + 10]	; 3: 139 70 10
x41729:	cmp [bp + 16], ax	; 3: 57 70 16
x41732:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary4155 charTarget index
x41734:	mov si, [bp + 12]	; 3: 139 118 12
x41737:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary4154 -> £temporary4155 £temporary4155 0

memmove$18:	; BinaryAdd £temporary4157 charSource index
x41740:	mov di, [bp + 14]	; 3: 139 126 14
x41743:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary4156 -> £temporary4157 £temporary4157 0

memmove$20:	; Assign £temporary4154 -> £temporary4155 £temporary4156 -> £temporary4157
x41746:	mov al, [di]	; 2: 138 5
x41748:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x41750:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x41753:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary4158 target
x41755:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary4158

memmove$25:	; Return £temporary4158
x41758:	mov ax, [bp]	; 3: 139 70 0
x41761:	mov di, [bp + 4]	; 3: 139 126 4
x41764:	mov bp, [bp + 2]	; 3: 139 110 2
x41767:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary4184 block
x41769:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary4184
x41772:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary4185 i
x41775:	mov ax, [bp + 8]	; 3: 139 70 8
x41778:	cmp ax, 0	; 3: 131 248 0
x41781:	jge memset$3	; 2: 125 4
x41783:	neg ax	; 2: 247 216
x41785:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary4185
x41787:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x41790:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x41795:	mov ax, [bp + 10]	; 3: 139 70 10
x41798:	cmp [bp + 15], ax	; 3: 57 70 15
x41801:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary4189 charBlock index
x41803:	mov si, [bp + 12]	; 3: 139 118 12
x41806:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary4188 -> £temporary4189 £temporary4189 0

memset$8:	; Assign £temporary4188 -> £temporary4189 c
x41809:	mov al, [bp + 14]	; 3: 138 70 14
x41812:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x41814:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x41817:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x41819:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x41822:	mov ax, [bp]	; 3: 139 70 0
x41825:	mov di, [bp + 4]	; 3: 139 126 4
x41828:	mov bp, [bp + 2]	; 3: 139 110 2
x41831:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary4173 block
x41833:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary4173
x41836:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary4174 i
x41839:	mov ax, [bp + 8]	; 3: 139 70 8
x41842:	cmp ax, 0	; 3: 131 248 0
x41845:	jge memchr$3	; 2: 125 4
x41847:	neg ax	; 2: 247 216
x41849:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary4174
x41851:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x41854:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x41859:	mov ax, [bp + 10]	; 3: 139 70 10
x41862:	cmp [bp + 12], ax	; 3: 57 70 12
x41865:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary4178 charBlock index
x41867:	mov si, [bp + 14]	; 3: 139 118 14
x41870:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary4177 -> £temporary4178 £temporary4178 0

memchr$8:	; NotEqual 15 £temporary4177 -> £temporary4178 c
x41873:	mov al, [bp + 16]	; 3: 138 70 16
x41876:	cmp [si], al	; 2: 56 4
x41878:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary4181 charBlock index
x41880:	mov bx, [bp + 14]	; 3: 139 94 14
x41883:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary4180 -> £temporary4181 £temporary4181 0

memchr$11:	; address £temporary4182 £temporary4180 -> £temporary4181

memchr$12:	; IntegralToIntegral £temporary4183 £temporary4182

memchr$13:	; SetReturnValue £temporary4183

memchr$14:	; Return £temporary4183
x41886:	mov ax, [bp]	; 3: 139 70 0
x41889:	mov di, [bp + 4]	; 3: 139 126 4
x41892:	mov bp, [bp + 2]	; 3: 139 110 2
x41895:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x41897:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x41900:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x41902:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x41905:	mov ax, [bp]	; 3: 139 70 0
x41908:	mov di, [bp + 4]	; 3: 139 126 4
x41911:	mov bp, [bp + 2]	; 3: 139 110 2
x41914:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary4159 left
x41916:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary4159
x41919:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary4160 right
x41922:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary4160
x41925:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x41928:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x41933:	mov ax, [bp + 10]	; 3: 139 70 10
x41936:	cmp [bp + 16], ax	; 3: 57 70 16
x41939:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary4164 charLeft index
x41941:	mov si, [bp + 12]	; 3: 139 118 12
x41944:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary4163 -> £temporary4164 £temporary4164 0

memcmp$8:	; BinaryAdd £temporary4166 charRight index
x41947:	mov di, [bp + 14]	; 3: 139 126 14
x41950:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary4165 -> £temporary4166 £temporary4166 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary4163 -> £temporary4164 £temporary4165 -> £temporary4166
x41953:	mov al, [di]	; 2: 138 5
x41955:	cmp [si], al	; 2: 56 4
x41957:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x41959:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x41962:	mov ax, [bp]	; 3: 139 70 0
x41965:	mov di, [bp + 4]	; 3: 139 126 4
x41968:	mov bp, [bp + 2]	; 3: 139 110 2
x41971:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary4169 charLeft index
x41973:	mov si, [bp + 12]	; 3: 139 118 12
x41976:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary4168 -> £temporary4169 £temporary4169 0

memcmp$15:	; BinaryAdd £temporary4171 charRight index
x41979:	mov di, [bp + 14]	; 3: 139 126 14
x41982:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary4170 -> £temporary4171 £temporary4171 0

memcmp$17:	; SignedLessThanEqual 20 £temporary4168 -> £temporary4169 £temporary4170 -> £temporary4171
x41985:	mov al, [di]	; 2: 138 5
x41987:	cmp [si], al	; 2: 56 4
x41989:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x41991:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x41994:	mov ax, [bp]	; 3: 139 70 0
x41997:	mov di, [bp + 4]	; 3: 139 126 4
x42000:	mov bp, [bp + 2]	; 3: 139 110 2
x42003:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x42005:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x42008:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x42010:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x42013:	mov ax, [bp]	; 3: 139 70 0
x42016:	mov di, [bp + 4]	; 3: 139 126 4
x42019:	mov bp, [bp + 2]	; 3: 139 110 2
x42022:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x42024:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary4021 mainString index
x42029:	mov si, [bp + 6]	; 3: 139 118 6
x42032:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary4020 -> £temporary4021 £temporary4021 0

strspn$3:	; Equal 18 £temporary4020 -> £temporary4021 0
x42035:	cmp byte [si], 0	; 3: 128 60 0
x42038:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x42040:	mov ax, [bp + 8]	; 3: 139 70 8
x42043:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary4025 mainString index
x42046:	mov si, [bp + 6]	; 3: 139 118 6
x42049:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary4024 -> £temporary4025 £temporary4025 0

strspn$8:	; IntegralToIntegral £temporary4026 £temporary4024 -> £temporary4025
x42052:	mov al, [si]	; 2: 138 4
x42054:	and ax, 255	; 3: 37 255 0
x42057:	cmp al, 0	; 2: 60 0
x42059:	jge strspn$9	; 2: 125 4
x42061:	neg al	; 2: 246 216
x42063:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary4026 8
x42065:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x42068:	mov word [bp + 12], strspn$11	; 5: 199 70 12 98 164
x42073:	mov [bp + 14], bp	; 3: 137 110 14
x42076:	add bp, 12	; 3: 131 197 12
x42079:	jmp strchr	; 3: 233 20 125

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary4027

strspn$13:	; NotEqual 16 £temporary4027 0
x42082:	cmp bx, 0	; 3: 131 251 0
x42085:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x42087:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x42090:	mov ax, [bp]	; 3: 139 70 0
x42093:	mov di, [bp + 4]	; 3: 139 126 4
x42096:	mov bp, [bp + 2]	; 3: 139 110 2
x42099:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x42101:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x42104:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x42106:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x42109:	mov ax, [bp]	; 3: 139 70 0
x42112:	mov di, [bp + 4]	; 3: 139 126 4
x42115:	mov bp, [bp + 2]	; 3: 139 110 2
x42118:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x42120:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary4032 mainString index
x42125:	mov si, [bp + 6]	; 3: 139 118 6
x42128:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary4031 -> £temporary4032 £temporary4032 0

strcspn$3:	; Equal 18 £temporary4031 -> £temporary4032 0
x42131:	cmp byte [si], 0	; 3: 128 60 0
x42134:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x42136:	mov ax, [bp + 8]	; 3: 139 70 8
x42139:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary4036 mainString index
x42142:	mov si, [bp + 6]	; 3: 139 118 6
x42145:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary4035 -> £temporary4036 £temporary4036 0

strcspn$8:	; IntegralToIntegral £temporary4037 £temporary4035 -> £temporary4036
x42148:	mov al, [si]	; 2: 138 4
x42150:	and ax, 255	; 3: 37 255 0
x42153:	cmp al, 0	; 2: 60 0
x42155:	jge strcspn$9	; 2: 125 4
x42157:	neg al	; 2: 246 216
x42159:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary4037 8
x42161:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x42164:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 194 164
x42169:	mov [bp + 14], bp	; 3: 137 110 14
x42172:	add bp, 12	; 3: 131 197 12
x42175:	jmp strchr	; 3: 233 180 124

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary4038

strcspn$13:	; Equal 16 £temporary4038 0
x42178:	cmp bx, 0	; 3: 131 251 0
x42181:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x42183:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x42186:	mov ax, [bp]	; 3: 139 70 0
x42189:	mov di, [bp + 4]	; 3: 139 126 4
x42192:	mov bp, [bp + 2]	; 3: 139 110 2
x42195:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x42197:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x42200:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x42202:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x42205:	mov ax, [bp]	; 3: 139 70 0
x42208:	mov di, [bp + 4]	; 3: 139 126 4
x42211:	mov bp, [bp + 2]	; 3: 139 110 2
x42214:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x42216:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x42220:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary4088 -> string string 0
x42224:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary4088 -> string 0
x42227:	cmp byte [si], 0	; 3: 128 60 0
x42230:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x42232:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x42235:	mov ax, [bp]	; 3: 139 70 0
x42238:	mov di, [bp + 4]	; 3: 139 126 4
x42241:	mov bp, [bp + 2]	; 3: 139 110 2
x42244:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x42246:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary4091 string index
x42251:	mov si, [bp + 6]	; 3: 139 118 6
x42254:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary4090 -> £temporary4091 £temporary4091 0

strtok$8:	; Equal 31 £temporary4090 -> £temporary4091 0
x42257:	cmp byte [si], 0	; 3: 128 60 0
x42260:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x42262:	mov ax, [bp + 8]	; 3: 139 70 8
x42265:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary4095 string index
x42268:	mov si, [bp + 6]	; 3: 139 118 6
x42271:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary4094 -> £temporary4095 £temporary4095 0

strtok$13:	; IntegralToIntegral £temporary4096 £temporary4094 -> £temporary4095
x42274:	mov al, [si]	; 2: 138 4
x42276:	and ax, 255	; 3: 37 255 0
x42279:	cmp al, 0	; 2: 60 0
x42281:	jge strtok$14	; 2: 125 4
x42283:	neg al	; 2: 246 216
x42285:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary4096 8
x42287:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x42290:	mov word [bp + 14], strtok$16	; 5: 199 70 14 64 165
x42295:	mov [bp + 16], bp	; 3: 137 110 16
x42298:	add bp, 14	; 3: 131 197 14
x42301:	jmp strchr	; 3: 233 54 124

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary4097

strtok$18:	; Equal 29 £temporary4097 0
x42304:	cmp bx, 0	; 3: 131 251 0
x42307:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary4100 string index
x42309:	mov si, [bp + 6]	; 3: 139 118 6
x42312:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary4099 -> £temporary4100 £temporary4100 0

strtok$21:	; Assign £temporary4099 -> £temporary4100 0
x42315:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary4101 index 1
x42318:	mov ax, [bp + 10]	; 3: 139 70 10
x42321:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary4103 string £temporary4101
x42322:	mov si, [bp + 6]	; 3: 139 118 6
x42325:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary4102 -> £temporary4103 £temporary4103 0

strtok$25:	; address £temporary4104 £temporary4102 -> £temporary4103

strtok$26:	; Assign token £temporary4104
x42327:	mov [token], si	; 4: 137 54 67 166

strtok$27:	; SetReturnValue string
x42331:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x42334:	mov ax, [bp]	; 3: 139 70 0
x42337:	mov di, [bp + 4]	; 3: 139 126 4
x42340:	mov bp, [bp + 2]	; 3: 139 110 2
x42343:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x42345:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x42348:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary4106 string index
x42350:	mov si, [bp + 6]	; 3: 139 118 6
x42353:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary4105 -> £temporary4106 £temporary4106 0

strtok$33:	; address £temporary4107 £temporary4105 -> £temporary4106

strtok$34:	; Assign token £temporary4107
x42356:	mov [token], si	; 4: 137 54 67 166

strtok$35:	; SetReturnValue string
x42360:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x42363:	mov ax, [bp]	; 3: 139 70 0
x42366:	mov di, [bp + 4]	; 3: 139 126 4
x42369:	mov bp, [bp + 2]	; 3: 139 110 2
x42372:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x42374:	cmp word [token], 0	; 5: 131 62 67 166 0
x42379:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x42381:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x42384:	mov ax, [bp]	; 3: 139 70 0
x42387:	mov di, [bp + 4]	; 3: 139 126 4
x42390:	mov bp, [bp + 2]	; 3: 139 110 2
x42393:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (token,0) 0
x42395:	mov si, [token]	; 4: 139 54 67 166
x42399:	cmp byte [si], 0	; 3: 128 60 0
x42402:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x42404:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x42407:	mov ax, [bp]	; 3: 139 70 0
x42410:	mov di, [bp + 4]	; 3: 139 126 4
x42413:	mov bp, [bp + 2]	; 3: 139 110 2
x42416:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x42418:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary4112 token index
x42423:	mov si, [token]	; 4: 139 54 67 166
x42427:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary4111 -> £temporary4112 £temporary4112 0

strtok$46:	; Equal 70 £temporary4111 -> £temporary4112 0
x42430:	cmp byte [si], 0	; 3: 128 60 0
x42433:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x42435:	mov ax, [bp + 8]	; 3: 139 70 8
x42438:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary4116 token index
x42441:	mov si, [token]	; 4: 139 54 67 166
x42445:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary4115 -> £temporary4116 £temporary4116 0

strtok$51:	; IntegralToIntegral £temporary4117 £temporary4115 -> £temporary4116
x42448:	mov al, [si]	; 2: 138 4
x42450:	and ax, 255	; 3: 37 255 0
x42453:	cmp al, 0	; 2: 60 0
x42455:	jge strtok$52	; 2: 125 4
x42457:	neg al	; 2: 246 216
x42459:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary4117 8
x42461:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x42464:	mov word [bp + 14], strtok$54	; 5: 199 70 14 238 165
x42469:	mov [bp + 16], bp	; 3: 137 110 16
x42472:	add bp, 14	; 3: 131 197 14
x42475:	jmp strchr	; 3: 233 136 123

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary4118

strtok$56:	; Equal 68 £temporary4118 0
x42478:	cmp bx, 0	; 3: 131 251 0
x42481:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x42483:	mov ax, [token]	; 3: 161 67 166
x42486:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary4121 token index
x42489:	mov si, [token]	; 4: 139 54 67 166
x42493:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary4120 -> £temporary4121 £temporary4121 0

strtok$60:	; Assign £temporary4120 -> £temporary4121 0
x42496:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary4122 index 1
x42499:	mov ax, [bp + 10]	; 3: 139 70 10
x42502:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary4124 token £temporary4122
x42503:	mov si, [token]	; 4: 139 54 67 166
x42507:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary4123 -> £temporary4124 £temporary4124 0

strtok$64:	; address £temporary4125 £temporary4123 -> £temporary4124

strtok$65:	; Assign token £temporary4125
x42509:	mov [token], si	; 4: 137 54 67 166

strtok$66:	; SetReturnValue tokenStart2
x42513:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x42516:	mov ax, [bp]	; 3: 139 70 0
x42519:	mov di, [bp + 4]	; 3: 139 126 4
x42522:	mov bp, [bp + 2]	; 3: 139 110 2
x42525:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x42527:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x42530:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x42532:	mov ax, [token]	; 3: 161 67 166
x42535:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary4127 token index
x42538:	mov si, [token]	; 4: 139 54 67 166
x42542:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary4126 -> £temporary4127 £temporary4127 0

strtok$73:	; address £temporary4128 £temporary4126 -> £temporary4127

strtok$74:	; Assign token £temporary4128
x42545:	mov [token], si	; 4: 137 54 67 166

strtok$75:	; SetReturnValue tokenStart
x42549:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x42552:	mov ax, [bp]	; 3: 139 70 0
x42555:	mov di, [bp + 4]	; 3: 139 126 4
x42558:	mov bp, [bp + 2]	; 3: 139 110 2
x42561:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

token:
x42563:	dw 0	; 2: 0 0

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x42565:	fld qword [float8$10#]	; 4: 221 6 141 166

setjmp_test$2:	; Parameter 6 10 6
x42569:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x42572:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 90 166
x42577:	mov [bp + 8], bp	; 3: 137 110 8
x42580:	add bp, 6	; 3: 131 197 6
x42583:	nop	; 1: 144
x42584:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x42586:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x42588:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x42591:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 109 166
x42596:	mov [bp + 8], bp	; 3: 137 110 8
x42599:	add bp, 6	; 3: 131 197 6
x42602:	nop	; 1: 144
x42603:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x42605:	fld qword [float8$0.1#]	; 4: 221 6 149 166

setjmp_test$12:	; Parameter 6 0.1 6
x42609:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x42612:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 130 166
x42617:	mov [bp + 8], bp	; 3: 137 110 8
x42620:	add bp, 6	; 3: 131 197 6
x42623:	nop	; 1: 144
x42624:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x42626:	mov ax, [bp]	; 3: 139 70 0
x42629:	mov di, [bp + 4]	; 3: 139 126 4
x42632:	mov bp, [bp + 2]	; 3: 139 110 2
x42635:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

float8$10#:
x42637:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

float8$0.1#:
x42645:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x42653:	mov word [bp + 22], buffer	; 5: 199 70 22 25 167

test$2:	; Call 16 setjmp 0
x42658:	mov word [bp + 16], test$3	; 5: 199 70 16 176 166
x42663:	mov [bp + 18], bp	; 3: 137 110 18
x42666:	add bp, 16	; 3: 131 197 16
x42669:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4716

test$5:	; Assign message £temporary4716
x42672:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x42675:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x42679:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x42681:	mov word [bp + 22], string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 31 167

test$9:	; PushFloat x
x42686:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x42689:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x42692:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x42695:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x42698:	mov word [bp + 32], test$15	; 5: 199 70 32 216 166
x42703:	mov [bp + 34], bp	; 3: 137 110 34
x42706:	add bp, 32	; 3: 131 197 32
x42709:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4718

test$17:	; Parameter 16 £temporary4718 16
x42712:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x42715:	mov word [bp + 16], test$19	; 5: 199 70 16 238 166
x42720:	mov [bp + 18], bp	; 3: 137 110 18
x42723:	add bp, 16	; 3: 131 197 16
x42726:	mov di, bp	; 2: 137 239
x42728:	add di, 16	; 3: 131 199 16
x42731:	jmp printf	; 3: 233 215 101

test$19:	; PostCall 16

test$20:	; Goto 26
x42734:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x42736:	mov word [bp + 22], string_25s0A#	; 5: 199 70 22 46 167

test$23:	; Parameter 16 message 8
x42741:	mov ax, [bp + 14]	; 3: 139 70 14
x42744:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x42747:	mov word [bp + 16], test$25	; 5: 199 70 16 14 167
x42752:	mov [bp + 18], bp	; 3: 137 110 18
x42755:	add bp, 16	; 3: 131 197 16
x42758:	mov di, bp	; 2: 137 239
x42760:	add di, 2	; 3: 131 199 2
x42763:	jmp printf	; 3: 233 183 101

test$25:	; PostCall 16

test$26:	; Return 0
x42766:	mov ax, [bp]	; 3: 139 70 0
x42769:	mov di, [bp + 4]	; 3: 139 126 4
x42772:	mov bp, [bp + 2]	; 3: 139 110 2
x42775:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x42777:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

string_12E0202F2025f203D2025f0A#:
x42783:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

string_25s0A#:
x42798:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary811 bp

setjmp$1:	; Assign bp_pointer £temporary811
x42802:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary812 -> buf buf 0
x42805:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary813 -> bp_pointer bp_pointer 0
x42808:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary812 -> buf £temporary813 -> bp_pointer
x42811:	mov ax, [di]	; 2: 139 5
x42813:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary814 -> buf buf 2
x42815:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary815 -> bp_pointer bp_pointer 2
x42818:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary814 -> buf £temporary815 -> bp_pointer
x42821:	mov ax, [di + 2]	; 3: 139 69 2
x42824:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary816 -> buf buf 4
x42827:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary817 -> bp_pointer bp_pointer 4
x42830:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary816 -> buf £temporary817 -> bp_pointer
x42833:	mov ax, [di + 4]	; 3: 139 69 4
x42836:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x42839:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x42842:	mov ax, [bp]	; 3: 139 70 0
x42845:	mov di, [bp + 4]	; 3: 139 126 4
x42848:	mov bp, [bp + 2]	; 3: 139 110 2
x42851:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x42853:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x42855:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x42858:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x42861:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x42864:	mov word [bp + 14], inverse$6	; 5: 199 70 14 126 167
x42869:	mov [bp + 16], bp	; 3: 137 110 16
x42872:	add bp, 14	; 3: 131 197 14
x42875:	nop	; 1: 144
x42876:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4708

inverse$8:	; SetReturnValue £temporary4708

inverse$9:	; Return £temporary4708
x42878:	mov ax, [bp]	; 3: 139 70 0
x42881:	mov di, [bp + 4]	; 3: 139 126 4
x42884:	mov bp, [bp + 2]	; 3: 139 110 2
x42887:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x42889:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x42892:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x42894:	fcompp	; 2: 222 217
x42896:	fstsw ax	; 3: 155 223 224
x42899:	sahf	; 1: 158
x42900:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x42902:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x42905:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4712 x y
x42908:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4712

divide$7:	; Return £temporary4712
x42910:	mov ax, [bp]	; 3: 139 70 0
x42913:	mov di, [bp + 4]	; 3: 139 126 4
x42916:	mov bp, [bp + 2]	; 3: 139 110 2
x42919:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x42921:	mov word [bp + 28], buffer	; 5: 199 70 28 25 167

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x42926:	mov word [bp + 30], string_Division20by20Zero2E#	; 5: 199 70 30 206 167

divide$11:	; Call 22 longjmp 0
x42931:	mov word [bp + 22], divide$12	; 5: 199 70 22 193 167
x42936:	mov [bp + 24], bp	; 3: 137 110 24
x42939:	add bp, 22	; 3: 131 197 22
x42942:	nop	; 1: 144
x42943:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x42945:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x42947:	mov ax, [bp]	; 3: 139 70 0
x42950:	mov di, [bp + 4]	; 3: 139 126 4
x42953:	mov bp, [bp + 2]	; 3: 139 110 2
x42956:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

string_Division20by20Zero2E#:
x42958:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x42976:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary820 -> buf buf 0
x42979:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary820 -> buf
x42982:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary822 -> buf buf 4
x42984:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary822 -> buf
x42987:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary824 -> buf buf 2
x42990:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary824 -> buf
x42993:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x42996:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x42998:	mov ax, [bp]	; 3: 139 70 0
x43001:	mov di, [bp + 4]	; 3: 139 126 4
x43004:	mov bp, [bp + 2]	; 3: 139 110 2
x43007:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x43009:	mov word [bp + 14], string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 205 172

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x43014:	mov word [bp + 22], string_1232E456#	; 5: 199 70 22 227 172

stdlib_test$4:	; Call 8 atof 8
x43019:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 25 168
x43024:	mov [bp + 18], bp	; 3: 137 110 18
x43027:	add bp, 16	; 3: 131 197 16
x43030:	jmp atof	; 3: 233 143 6

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6210

stdlib_test$7:	; Parameter 8 £temporary6210 8
x43033:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x43036:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 47 168
x43041:	mov [bp + 10], bp	; 3: 137 110 10
x43044:	add bp, 8	; 3: 131 197 8
x43047:	mov di, bp	; 2: 137 239
x43049:	add di, 8	; 3: 131 199 8
x43052:	jmp printf	; 3: 233 150 100

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x43055:	mov word [bp + 14], string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 235 172

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x43060:	mov word [bp + 22], string_1232E456789abc#	; 5: 199 70 22 19 173

stdlib_test$14:	; address £temporary6212 p
x43065:	mov si, bp	; 2: 137 238
x43067:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6212 16
x43070:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x43073:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 79 168
x43078:	mov [bp + 18], bp	; 3: 137 110 18
x43081:	add bp, 16	; 3: 131 197 16
x43084:	jmp strtod	; 3: 233 125 6

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6213

stdlib_test$19:	; Parameter 8 £temporary6213 8
x43087:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x43090:	mov ax, [bp + 6]	; 3: 139 70 6
x43093:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x43096:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 107 168
x43101:	mov [bp + 10], bp	; 3: 137 110 10
x43104:	add bp, 8	; 3: 131 197 8
x43107:	mov di, bp	; 2: 137 239
x43109:	add di, 10	; 3: 131 199 10
x43112:	jmp printf	; 3: 233 90 100

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x43115:	mov word [bp + 12], string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 33 173

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x43120:	mov word [bp + 20], string_path#	; 5: 199 70 20 55 173

stdlib_test$27:	; Call 6 getenv 8
x43125:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 131 168
x43130:	mov [bp + 16], bp	; 3: 137 110 16
x43133:	add bp, 14	; 3: 131 197 14
x43136:	jmp getenv	; 3: 233 166 6

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6215

stdlib_test$30:	; Parameter 6 £temporary6215 8
x43139:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x43142:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 153 168
x43147:	mov [bp + 8], bp	; 3: 137 110 8
x43150:	add bp, 6	; 3: 131 197 6
x43153:	mov di, bp	; 2: 137 239
x43155:	add di, 2	; 3: 131 199 2
x43158:	jmp printf	; 3: 233 44 100

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x43161:	mov word [bp + 12], string_system2822dir22290A#	; 5: 199 70 12 60 173

stdlib_test$35:	; Call 6 printf 0
x43166:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 174 168
x43171:	mov [bp + 8], bp	; 3: 137 110 8
x43174:	add bp, 6	; 3: 131 197 6
x43177:	mov di, bp	; 2: 137 239
x43179:	jmp printf	; 3: 233 23 100

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x43182:	mov word [bp + 12], string_dir#	; 5: 199 70 12 75 173

stdlib_test$39:	; Call 6 system 0
x43187:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 193 168
x43192:	mov [bp + 8], bp	; 3: 137 110 8
x43195:	add bp, 6	; 3: 131 197 6
x43198:	jmp system	; 3: 233 118 6

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x43201:	mov word [bp + 12], string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 79 173

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x43206:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x43211:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 217 168
x43216:	mov [bp + 16], bp	; 3: 137 110 16
x43219:	add bp, 14	; 3: 131 197 14
x43222:	jmp _abs	; 3: 233 108 6

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6219

stdlib_test$48:	; Parameter 6 £temporary6219 8
x43225:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x43228:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x43233:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 239 168
x43238:	mov [bp + 18], bp	; 3: 137 110 18
x43241:	add bp, 16	; 3: 131 197 16
x43244:	jmp _abs	; 3: 233 86 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6220

stdlib_test$54:	; Parameter 6 £temporary6220 10
x43247:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x43250:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 5 169
x43255:	mov [bp + 8], bp	; 3: 137 110 8
x43258:	add bp, 6	; 3: 131 197 6
x43261:	mov di, bp	; 2: 137 239
x43263:	add di, 4	; 3: 131 199 4
x43266:	jmp printf	; 3: 233 192 99

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x43269:	mov word [bp + 12], string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 107 173

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x43274:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x43282:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 32 169
x43287:	mov [bp + 16], bp	; 3: 137 110 16
x43290:	add bp, 14	; 3: 131 197 14
x43293:	jmp labs	; 3: 233 242 113

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6222

stdlib_test$64:	; Parameter 6 £temporary6222 8
x43296:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x43300:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x43308:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 58 169
x43313:	mov [bp + 20], bp	; 3: 137 110 20
x43316:	add bp, 18	; 3: 131 197 18
x43319:	jmp labs	; 3: 233 216 113

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6223

stdlib_test$70:	; Parameter 6 £temporary6223 12
x43322:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x43326:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 81 169
x43331:	mov [bp + 8], bp	; 3: 137 110 8
x43334:	add bp, 6	; 3: 131 197 6
x43337:	mov di, bp	; 2: 137 239
x43339:	add di, 8	; 3: 131 199 8
x43342:	jmp printf	; 3: 233 116 99

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x43345:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x43350:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x43355:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 105 169
x43360:	mov [bp + 8], bp	; 3: 137 110 8
x43363:	add bp, 6	; 3: 131 197 6
x43366:	jmp div	; 3: 233 247 5

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6225 -> £temporary6226

stdlib_test$79:	; Assign i £temporary6225 -> £temporary6226
x43369:	mov si, bp	; 2: 137 238
x43371:	add si, 6	; 3: 131 198 6
x43374:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x43376:	mov ah, [bx]	; 2: 138 39
x43378:	mov [si], ah	; 2: 136 36
x43380:	inc bx	; 1: 67
x43381:	inc si	; 1: 70
x43382:	dec al	; 2: 254 200
x43384:	cmp al, 0	; 2: 60 0
x43386:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x43388:	mov word [bp + 16], string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 141 173

stdlib_test$82:	; Parameter 10 i$quot 8
x43393:	mov ax, [bp + 6]	; 3: 139 70 6
x43396:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x43399:	mov ax, [bp + 8]	; 3: 139 70 8
x43402:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x43405:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 160 169
x43410:	mov [bp + 12], bp	; 3: 137 110 12
x43413:	add bp, 10	; 3: 131 197 10
x43416:	mov di, bp	; 2: 137 239
x43418:	add di, 4	; 3: 131 199 4
x43421:	jmp printf	; 3: 233 37 99

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x43424:	mov si, bp	; 2: 137 238
x43426:	add si, 6	; 3: 131 198 6
x43429:	mov di, bp	; 2: 137 239
x43431:	add di, 16	; 3: 131 199 16
x43434:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x43436:	mov ah, [si]	; 2: 138 36
x43438:	mov [di], ah	; 2: 136 37
x43440:	inc si	; 1: 70
x43441:	inc di	; 1: 71
x43442:	dec al	; 2: 254 200
x43444:	cmp al, 0	; 2: 60 0
x43446:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x43448:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 198 169
x43453:	mov [bp + 12], bp	; 3: 137 110 12
x43456:	add bp, 10	; 3: 131 197 10
x43459:	jmp print_div	; 3: 233 230 5

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6230 -> £temporary6231

stdlib_test$92:	; Assign j £temporary6230 -> £temporary6231
x43462:	mov si, bp	; 2: 137 238
x43464:	add si, 10	; 3: 131 198 10
x43467:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x43469:	mov ah, [bx]	; 2: 138 39
x43471:	mov [si], ah	; 2: 136 36
x43473:	inc bx	; 1: 67
x43474:	inc si	; 1: 70
x43475:	dec al	; 2: 254 200
x43477:	cmp al, 0	; 2: 60 0
x43479:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x43481:	mov word [bp + 20], string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 166 173

stdlib_test$95:	; Parameter 14 j$quot 8
x43486:	mov ax, [bp + 10]	; 3: 139 70 10
x43489:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x43492:	mov ax, [bp + 12]	; 3: 139 70 12
x43495:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x43498:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 253 169
x43503:	mov [bp + 16], bp	; 3: 137 110 16
x43506:	add bp, 14	; 3: 131 197 14
x43509:	mov di, bp	; 2: 137 239
x43511:	add di, 4	; 3: 131 199 4
x43514:	jmp printf	; 3: 233 200 98

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x43517:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x43525:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x43533:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 27 170
x43538:	mov [bp + 8], bp	; 3: 137 110 8
x43541:	add bp, 6	; 3: 131 197 6
x43544:	jmp ldiv	; 3: 233 225 5

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6235 -> £temporary6236

stdlib_test$105:	; Assign li £temporary6235 -> £temporary6236
x43547:	mov si, bp	; 2: 137 238
x43549:	add si, 6	; 3: 131 198 6
x43552:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x43554:	mov ah, [bx]	; 2: 138 39
x43556:	mov [si], ah	; 2: 136 36
x43558:	inc bx	; 1: 67
x43559:	inc si	; 1: 70
x43560:	dec al	; 2: 254 200
x43562:	cmp al, 0	; 2: 60 0
x43564:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x43566:	mov word [bp + 20], string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 192 173

stdlib_test$108:	; Parameter 14 li$quot 8
x43571:	mov eax, [bp + 6]	; 4: 102 139 70 6
x43575:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x43579:	mov eax, [bp + 10]	; 4: 102 139 70 10
x43583:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x43587:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 86 170
x43592:	mov [bp + 16], bp	; 3: 137 110 16
x43595:	add bp, 14	; 3: 131 197 14
x43598:	mov di, bp	; 2: 137 239
x43600:	add di, 8	; 3: 131 199 8
x43603:	jmp printf	; 3: 233 111 98

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x43606:	mov si, bp	; 2: 137 238
x43608:	add si, 6	; 3: 131 198 6
x43611:	mov di, bp	; 2: 137 239
x43613:	add di, 20	; 3: 131 199 20
x43616:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x43618:	mov ah, [si]	; 2: 138 36
x43620:	mov [di], ah	; 2: 136 37
x43622:	inc si	; 1: 70
x43623:	inc di	; 1: 71
x43624:	dec al	; 2: 254 200
x43626:	cmp al, 0	; 2: 60 0
x43628:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x43630:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 124 170
x43635:	mov [bp + 16], bp	; 3: 137 110 16
x43638:	add bp, 14	; 3: 131 197 14
x43641:	jmp print_ldiv	; 3: 233 219 5

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6240 -> £temporary6241

stdlib_test$118:	; Assign lj £temporary6240 -> £temporary6241
x43644:	mov si, bp	; 2: 137 238
x43646:	add si, 14	; 3: 131 198 14
x43649:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x43651:	mov ah, [bx]	; 2: 138 39
x43653:	mov [si], ah	; 2: 136 36
x43655:	inc bx	; 1: 67
x43656:	inc si	; 1: 70
x43657:	dec al	; 2: 254 200
x43659:	cmp al, 0	; 2: 60 0
x43661:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x43663:	mov word [bp + 28], string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 220 173

stdlib_test$121:	; Parameter 22 lj$quot 8
x43668:	mov eax, [bp + 14]	; 4: 102 139 70 14
x43672:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x43676:	mov eax, [bp + 18]	; 4: 102 139 70 18
x43680:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x43684:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 183 170
x43689:	mov [bp + 24], bp	; 3: 137 110 24
x43692:	add bp, 22	; 3: 131 197 22
x43695:	mov di, bp	; 2: 137 239
x43697:	add di, 8	; 3: 131 199 8
x43700:	jmp printf	; 3: 233 14 98

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x43703:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x43708:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x43713:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x43718:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x43723:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x43728:	mov word [bp + 24], string_0AA20List2013A20#	; 5: 199 70 24 249 173

stdlib_test$132:	; Call 18 printf 0
x43733:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 229 170
x43738:	mov [bp + 20], bp	; 3: 137 110 20
x43741:	add bp, 18	; 3: 131 197 18
x43744:	mov di, bp	; 2: 137 239
x43746:	jmp printf	; 3: 233 224 97

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x43749:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x43754:	mov ax, [bp + 14]	; 3: 139 70 14
x43757:	cmp [bp + 16], ax	; 3: 57 70 16
x43760:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x43762:	mov word [bp + 24], string_25i20#	; 5: 199 70 24 5 174

stdlib_test$138:	; UnsignedMultiply £temporary6253 index 2
x43767:	mov ax, [bp + 16]	; 3: 139 70 16
x43770:	xor dx, dx	; 2: 49 210
x43772:	mul word [int2$2#]	; 4: 247 38 96 51

stdlib_test$139:	; BinaryAdd £temporary6254 list £temporary6253
x43776:	mov si, bp	; 2: 137 238
x43778:	add si, 6	; 3: 131 198 6
x43781:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6255 -> £temporary6254 £temporary6254 0

stdlib_test$141:	; Parameter 18 £temporary6255 -> £temporary6254 8
x43783:	mov ax, [si]	; 2: 139 4
x43785:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x43788:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 31 171
x43793:	mov [bp + 20], bp	; 3: 137 110 20
x43796:	add bp, 18	; 3: 131 197 18
x43799:	mov di, bp	; 2: 137 239
x43801:	add di, 2	; 3: 131 199 2
x43804:	jmp printf	; 3: 233 166 97

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x43807:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x43810:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x43812:	mov word [bp + 24], string_0AB20List2023A20#	; 5: 199 70 24 9 174

stdlib_test$148:	; Call 18 printf 0
x43817:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 57 171
x43822:	mov [bp + 20], bp	; 3: 137 110 20
x43825:	add bp, 18	; 3: 131 197 18
x43828:	mov di, bp	; 2: 137 239
x43830:	jmp printf	; 3: 233 140 97

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x43833:	mov [bp + 24], bp	; 3: 137 110 24
x43836:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x43840:	mov ax, [bp + 14]	; 3: 139 70 14
x43843:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x43846:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x43851:	mov word [bp + 30], compare	; 5: 199 70 30 21 174

stdlib_test$155:	; Call 18 qsort 0
x43856:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 94 171
x43861:	mov [bp + 20], bp	; 3: 137 110 20
x43864:	add bp, 18	; 3: 131 197 18
x43867:	jmp qsort	; 3: 233 82 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x43870:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x43875:	mov ax, [bp + 14]	; 3: 139 70 14
x43878:	cmp [bp + 16], ax	; 3: 57 70 16
x43881:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x43883:	mov word [bp + 24], string_25i20#	; 5: 199 70 24 5 174

stdlib_test$161:	; UnsignedMultiply £temporary6262 index 2
x43888:	mov ax, [bp + 16]	; 3: 139 70 16
x43891:	xor dx, dx	; 2: 49 210
x43893:	mul word [int2$2#]	; 4: 247 38 96 51

stdlib_test$162:	; BinaryAdd £temporary6263 list £temporary6262
x43897:	mov si, bp	; 2: 137 238
x43899:	add si, 6	; 3: 131 198 6
x43902:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6264 -> £temporary6263 £temporary6263 0

stdlib_test$164:	; Parameter 18 £temporary6264 -> £temporary6263 8
x43904:	mov ax, [si]	; 2: 139 4
x43906:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x43909:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 152 171
x43914:	mov [bp + 20], bp	; 3: 137 110 20
x43917:	add bp, 18	; 3: 131 197 18
x43920:	mov di, bp	; 2: 137 239
x43922:	add di, 2	; 3: 131 199 2
x43925:	jmp printf	; 3: 233 45 97

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x43928:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x43931:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x43933:	mov word [bp + 24], string_0AC20List2033A20#	; 5: 199 70 24 77 174

stdlib_test$171:	; Call 18 printf 0
x43938:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 178 171
x43943:	mov [bp + 20], bp	; 3: 137 110 20
x43946:	add bp, 18	; 3: 131 197 18
x43949:	mov di, bp	; 2: 137 239
x43951:	jmp printf	; 3: 233 19 97

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x43954:	mov [bp + 24], bp	; 3: 137 110 24
x43957:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x43961:	mov ax, [bp + 14]	; 3: 139 70 14
x43964:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x43967:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x43972:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 89 174

stdlib_test$178:	; Call 18 qsort 0
x43977:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 215 171
x43982:	mov [bp + 20], bp	; 3: 137 110 20
x43985:	add bp, 18	; 3: 131 197 18
x43988:	jmp qsort	; 3: 233 217 4

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x43991:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x43996:	mov ax, [bp + 14]	; 3: 139 70 14
x43999:	cmp [bp + 16], ax	; 3: 57 70 16
x44002:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x44004:	mov word [bp + 24], string_25i20#	; 5: 199 70 24 5 174

stdlib_test$184:	; UnsignedMultiply £temporary6271 index 2
x44009:	mov ax, [bp + 16]	; 3: 139 70 16
x44012:	xor dx, dx	; 2: 49 210
x44014:	mul word [int2$2#]	; 4: 247 38 96 51

stdlib_test$185:	; BinaryAdd £temporary6272 list £temporary6271
x44018:	mov si, bp	; 2: 137 238
x44020:	add si, 6	; 3: 131 198 6
x44023:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6273 -> £temporary6272 £temporary6272 0

stdlib_test$187:	; Parameter 18 £temporary6273 -> £temporary6272 8
x44025:	mov ax, [si]	; 2: 139 4
x44027:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x44030:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 17 172
x44035:	mov [bp + 20], bp	; 3: 137 110 20
x44038:	add bp, 18	; 3: 131 197 18
x44041:	mov di, bp	; 2: 137 239
x44043:	add di, 2	; 3: 131 199 2
x44046:	jmp printf	; 3: 233 180 96

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x44049:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x44052:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0A0ASearch3A0A# 6
x44054:	mov word [bp + 24], string_0A0ASearch3A0A#	; 5: 199 70 24 145 174

stdlib_test$194:	; Call 18 printf 0
x44059:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 43 172
x44064:	mov [bp + 20], bp	; 3: 137 110 20
x44067:	add bp, 18	; 3: 131 197 18
x44070:	mov di, bp	; 2: 137 239
x44072:	jmp printf	; 3: 233 154 96

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; Assign key 0
x44075:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$197:	; SignedGreaterThanEqual 224 key 6
x44080:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x44084:	jge stdlib_test$224	; 2: 125 119

stdlib_test$198:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$199:	; address £temporary6278 key
x44086:	mov si, bp	; 2: 137 238
x44088:	add si, 16	; 3: 131 198 16

stdlib_test$200:	; Parameter 18 £temporary6278 6
x44091:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$201:	; Parameter 18 list 8
x44094:	mov [bp + 26], bp	; 3: 137 110 26
x44097:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$202:	; Parameter 18 size 10
x44101:	mov ax, [bp + 14]	; 3: 139 70 14
x44104:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$203:	; Parameter 18 2 12
x44107:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$204:	; Parameter 18 compare 14
x44112:	mov word [bp + 32], compare	; 5: 199 70 32 21 174

stdlib_test$205:	; Call 18 bsearch 0
x44117:	mov word [bp + 18], stdlib_test$206	; 5: 199 70 18 99 172
x44122:	mov [bp + 20], bp	; 3: 137 110 20
x44125:	add bp, 18	; 3: 131 197 18
x44128:	jmp bsearch	; 3: 233 58 5

stdlib_test$206:	; PostCall 18

stdlib_test$207:	; GetReturnValue £temporary6280

stdlib_test$208:	; IntegralToIntegral £temporary6281 £temporary6280

stdlib_test$209:	; Assign p £temporary6281
x44131:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$210:	; Equal 214 p 0
x44134:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x44138:	je stdlib_test$214	; 2: 116 18

stdlib_test$211:	; BinarySubtract £temporary6283 p list
x44140:	mov ax, [bp + 18]	; 3: 139 70 18
x44143:	mov bx, bp	; 2: 137 235
x44145:	add bx, 6	; 3: 131 195 6
x44148:	sub ax, bx	; 2: 41 216

stdlib_test$212:	; UnsignedDivide £temporary6288 £temporary6283 2
x44150:	xor dx, dx	; 2: 49 210
x44152:	div word [int2$2#]	; 4: 247 54 96 51

stdlib_test$213:	; Goto 215
x44156:	jmp stdlib_test$215	; 2: 235 3

stdlib_test$214:	; Assign £temporary6288 -1
x44158:	mov ax, -1	; 3: 184 255 255

stdlib_test$215:	; Assign index £temporary6288
x44161:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$216:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$217:	; Parameter 22 string_20202825i2C2025i290A# 6
x44164:	mov word [bp + 28], string_20202825i2C2025i290A#	; 5: 199 70 28 156 174

stdlib_test$218:	; Parameter 22 key 8
x44169:	mov ax, [bp + 16]	; 3: 139 70 16
x44172:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$219:	; Parameter 22 index 10
x44175:	mov ax, [bp + 20]	; 3: 139 70 20
x44178:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$220:	; Call 22 printf 0
x44181:	mov word [bp + 22], stdlib_test$221	; 5: 199 70 22 168 172
x44186:	mov [bp + 24], bp	; 3: 137 110 24
x44189:	add bp, 22	; 3: 131 197 22
x44192:	mov di, bp	; 2: 137 239
x44194:	add di, 4	; 3: 131 199 4
x44197:	jmp printf	; 3: 233 29 96

stdlib_test$221:	; PostCall 22

stdlib_test$222:	; Increment key
x44200:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$223:	; Goto 197
x44203:	jmp stdlib_test$197	; 2: 235 131

stdlib_test$224:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$225:	; Parameter 16 string_0A# 6
x44205:	mov word [bp + 22], string_0A#	; 5: 199 70 22 195 12

stdlib_test$226:	; Call 16 printf 0
x44210:	mov word [bp + 16], stdlib_test$227	; 5: 199 70 16 194 172
x44215:	mov [bp + 18], bp	; 3: 137 110 18
x44218:	add bp, 16	; 3: 131 197 16
x44221:	mov di, bp	; 2: 137 239
x44223:	jmp printf	; 3: 233 3 96

stdlib_test$227:	; PostCall 16

stdlib_test$228:	; Return 0
x44226:	mov ax, [bp]	; 3: 139 70 0
x44229:	mov di, [bp + 4]	; 3: 139 126 4
x44232:	mov bp, [bp + 2]	; 3: 139 110 2
x44235:	jmp ax	; 2: 255 224

stdlib_test$229:	; FunctionEnd stdlib_test

string_atof28221232E4562229203D2025f0A#:
x44237:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

string_1232E456#:
x44259:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x44267:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

string_1232E456789abc#:
x44307:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

string_0Agetenv2822path2229203D2025s0A#:
x44321:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

string_path#:
x44343:	db "path", 0	; 5: 112 97 116 104 0

string_system2822dir22290A#:
x44348:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

string_dir#:
x44363:	db "dir", 0	; 4: 100 105 114 0

string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x44367:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x44395:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

string_div_t28102C20329203D202825i2C2025i290A#:
x44429:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

string_div_t28102C20329203D202825i2C2025i290A0A#:
x44454:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

string_ldiv_t28102C20329203D202825li2C2025li290A#:
x44480:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x44508:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

string_0AA20List2013A20#:
x44537:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

string_25i20#:
x44549:	db "%i ", 0	; 4: 37 105 32 0

string_0AB20List2023A20#:
x44553:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary6139 valuePtr1
x44565:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary6140 -> £temporary6139 £temporary6139 0

compare$2:	; Assign intValue1 £temporary6140 -> £temporary6139
x44568:	mov ax, [si]	; 2: 139 4
x44570:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary6141 valuePtr2
x44573:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary6142 -> £temporary6141 £temporary6141 0

compare$5:	; Assign intValue2 £temporary6142 -> £temporary6141
x44576:	mov ax, [si]	; 2: 139 4
x44578:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x44581:	mov ax, [bp + 12]	; 3: 139 70 12
x44584:	cmp [bp + 10], ax	; 3: 57 70 10
x44587:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary6152 -1
x44589:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x44592:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x44594:	mov ax, [bp + 12]	; 3: 139 70 12
x44597:	cmp [bp + 10], ax	; 3: 57 70 10
x44600:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary6148 0
x44602:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x44605:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary6148 1
x44607:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary6152 £temporary6148

compare$14:	; SetReturnValue £temporary6152

compare$15:	; Return £temporary6152
x44610:	mov ax, [bp]	; 3: 139 70 0
x44613:	mov di, [bp + 4]	; 3: 139 126 4
x44616:	mov bp, [bp + 2]	; 3: 139 110 2
x44619:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

string_0AC20List2033A20#:
x44621:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary6153 valuePtr1
x44633:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary6154 -> £temporary6153 £temporary6153 0

reverse_compare$2:	; Assign intValue1 £temporary6154 -> £temporary6153
x44636:	mov ax, [si]	; 2: 139 4
x44638:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary6155 valuePtr2
x44641:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary6156 -> £temporary6155 £temporary6155 0

reverse_compare$5:	; Assign intValue2 £temporary6156 -> £temporary6155
x44644:	mov ax, [si]	; 2: 139 4
x44646:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x44649:	mov ax, [bp + 12]	; 3: 139 70 12
x44652:	cmp [bp + 10], ax	; 3: 57 70 10
x44655:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary6166 1
x44657:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x44660:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x44662:	mov ax, [bp + 12]	; 3: 139 70 12
x44665:	cmp [bp + 10], ax	; 3: 57 70 10
x44668:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary6162 0
x44670:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x44673:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary6162 -1
x44675:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary6166 £temporary6162

reverse_compare$14:	; SetReturnValue £temporary6166

reverse_compare$15:	; Return £temporary6166
x44678:	mov ax, [bp]	; 3: 139 70 0
x44681:	mov di, [bp + 4]	; 3: 139 126 4
x44684:	mov bp, [bp + 2]	; 3: 139 110 2
x44687:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

string_0A0ASearch3A0A#:
x44689:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

string_20202825i2C2025i290A#:
x44700:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x44712:	mov ax, [bp + 6]	; 3: 139 70 6
x44715:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x44718:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x44723:	mov word [bp + 8], atof$4	; 5: 199 70 8 193 174
x44728:	mov [bp + 10], bp	; 3: 137 110 10
x44731:	add bp, 8	; 3: 131 197 8
x44734:	nop	; 1: 144
x44735:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary3273

atof$6:	; SetReturnValue £temporary3273

atof$7:	; Return £temporary3273
x44737:	mov ax, [bp]	; 3: 139 70 0
x44740:	mov di, [bp + 4]	; 3: 139 126 4
x44743:	mov bp, [bp + 2]	; 3: 139 110 2
x44746:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x44748:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x44753:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x44755:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x44758:	mov ax, [bp + 6]	; 3: 139 70 6
x44761:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x44764:	mov word [bp + 28], string_25lf25n#	; 5: 199 70 28 35 175

strtod$6:	; address £temporary3276 value
x44769:	mov si, bp	; 2: 137 238
x44771:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary3276 10
x44774:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary3277 chars
x44777:	mov si, bp	; 2: 137 238
x44779:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary3277 12
x44782:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x44785:	mov word [bp + 20], strtod$11	; 5: 199 70 20 4 175
x44790:	mov [bp + 22], bp	; 3: 137 110 22
x44793:	add bp, 20	; 3: 131 197 20
x44796:	mov di, bp	; 2: 137 239
x44798:	add di, 4	; 3: 131 199 4
x44801:	jmp sscanf	; 3: 233 171 202

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x44804:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x44808:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary3280 -> endp endp 0
x44810:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary3280 -> endp s chars
x44813:	mov ax, [bp + 6]	; 3: 139 70 6
x44816:	add ax, [bp + 10]	; 3: 3 70 10
x44819:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x44821:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x44824:	mov ax, [bp]	; 3: 139 70 0
x44827:	mov di, [bp + 4]	; 3: 139 126 4
x44830:	mov bp, [bp + 2]	; 3: 139 110 2
x44833:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

string_25lf25n#:
x44835:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

getenv:	; SetReturnValue 0
x44841:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x44844:	mov ax, [bp]	; 3: 139 70 0
x44847:	mov di, [bp + 4]	; 3: 139 126 4
x44850:	mov bp, [bp + 2]	; 3: 139 110 2
x44853:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x44855:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x44858:	mov ax, [bp]	; 3: 139 70 0
x44861:	mov di, [bp + 4]	; 3: 139 126 4
x44864:	mov bp, [bp + 2]	; 3: 139 110 2
x44867:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x44869:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x44873:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3378 value
x44875:	mov bx, [bp + 6]	; 3: 139 94 6
x44878:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3382 £temporary3378

_abs$3:	; Goto 5
x44880:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3382 value
x44882:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3382

_abs$6:	; Return £temporary3382
x44885:	mov ax, [bp]	; 3: 139 70 0
x44888:	mov di, [bp + 4]	; 3: 139 126 4
x44891:	mov bp, [bp + 2]	; 3: 139 110 2
x44894:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x44896:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x44901:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x44906:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x44910:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x44912:	mov word [errno], 6	; 6: 199 6 182 10 6 0

div$4:	; SetReturnValue result
x44918:	mov bx, bp	; 2: 137 235
x44920:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x44923:	mov ax, [bp]	; 3: 139 70 0
x44926:	mov di, [bp + 4]	; 3: 139 126 4
x44929:	mov bp, [bp + 2]	; 3: 139 110 2
x44932:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x44934:	mov ax, [bp + 6]	; 3: 139 70 6
x44937:	xor dx, dx	; 2: 49 210
x44939:	idiv word [bp + 8]	; 3: 247 126 8
x44942:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x44945:	mov ax, [bp + 6]	; 3: 139 70 6
x44948:	xor dx, dx	; 2: 49 210
x44950:	idiv word [bp + 8]	; 3: 247 126 8
x44953:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x44956:	mov bx, bp	; 2: 137 235
x44958:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x44961:	mov ax, [bp]	; 3: 139 70 0
x44964:	mov di, [bp + 4]	; 3: 139 126 4
x44967:	mov bp, [bp + 2]	; 3: 139 110 2
x44970:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x44972:	mov word [bp + 16], string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 230 175

print_div$2:	; Parameter 10 d$quot 8
x44977:	mov ax, [bp + 6]	; 3: 139 70 6
x44980:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x44983:	mov ax, [bp + 8]	; 3: 139 70 8
x44986:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x44989:	mov word [bp + 10], print_div$5	; 5: 199 70 10 208 175
x44994:	mov [bp + 12], bp	; 3: 137 110 12
x44997:	add bp, 10	; 3: 131 197 10
x45000:	mov di, bp	; 2: 137 239
x45002:	add di, 4	; 3: 131 199 4
x45005:	jmp printf	; 3: 233 245 92

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x45008:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Increment d$rem
x45011:	inc word [bp + 8]	; 3: 255 70 8

print_div$8:	; SetReturnValue d
x45014:	mov bx, bp	; 2: 137 235
x45016:	add bx, 6	; 3: 131 195 6

print_div$9:	; Return d
x45019:	mov ax, [bp]	; 3: 139 70 0
x45022:	mov di, [bp + 4]	; 3: 139 126 4
x45025:	mov bp, [bp + 2]	; 3: 139 110 2
x45028:	jmp ax	; 2: 255 224

print_div$10:	; FunctionEnd print_div

string_div_t20quot2025i20rem2025i0A#:
x45030:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x45052:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x45060:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x45068:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x45073:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x45075:	mov word [errno], 6	; 6: 199 6 182 10 6 0

ldiv$4:	; SetReturnValue result
x45081:	mov bx, bp	; 2: 137 235
x45083:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x45086:	mov ax, [bp]	; 3: 139 70 0
x45089:	mov di, [bp + 4]	; 3: 139 126 4
x45092:	mov bp, [bp + 2]	; 3: 139 110 2
x45095:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x45097:	mov eax, [bp + 6]	; 4: 102 139 70 6
x45101:	xor edx, edx	; 3: 102 49 210
x45104:	idiv dword [bp + 10]	; 4: 102 247 126 10
x45108:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x45112:	mov eax, [bp + 6]	; 4: 102 139 70 6
x45116:	xor edx, edx	; 3: 102 49 210
x45119:	idiv dword [bp + 10]	; 4: 102 247 126 10
x45123:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x45127:	mov bx, bp	; 2: 137 235
x45129:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x45132:	mov ax, [bp]	; 3: 139 70 0
x45135:	mov di, [bp + 4]	; 3: 139 126 4
x45138:	mov bp, [bp + 2]	; 3: 139 110 2
x45141:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x45143:	mov word [bp + 20], string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 151 176

print_ldiv$2:	; Parameter 14 ld$quot 8
x45148:	mov eax, [bp + 6]	; 4: 102 139 70 6
x45152:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x45156:	mov eax, [bp + 10]	; 4: 102 139 70 10
x45160:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x45164:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 127 176
x45169:	mov [bp + 16], bp	; 3: 137 110 16
x45172:	add bp, 14	; 3: 131 197 14
x45175:	mov di, bp	; 2: 137 239
x45177:	add di, 8	; 3: 131 199 8
x45180:	jmp printf	; 3: 233 70 92

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x45183:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Decrement ld$rem
x45187:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$8:	; SetReturnValue ld
x45191:	mov bx, bp	; 2: 137 235
x45193:	add bx, 6	; 3: 131 195 6

print_ldiv$9:	; Return ld
x45196:	mov ax, [bp]	; 3: 139 70 0
x45199:	mov di, [bp + 4]	; 3: 139 126 4
x45202:	mov bp, [bp + 2]	; 3: 139 110 2
x45205:	jmp ax	; 2: 255 224

print_ldiv$10:	; FunctionEnd print_ldiv

string_ldiv_t20quot2025li20rem2025li0A#:
x45207:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3356 valueList
x45232:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3356
x45235:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x45238:	mov ax, [bp + 8]	; 3: 139 70 8
x45241:	dec ax	; 1: 72
x45242:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x45245:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x45249:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x45253:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x45258:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x45263:	mov ax, [bp + 16]	; 3: 139 70 16
x45266:	cmp [bp + 18], ax	; 3: 57 70 18
x45269:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3362 index valueSize
x45271:	mov ax, [bp + 18]	; 3: 139 70 18
x45274:	xor dx, dx	; 2: 49 210
x45276:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3362
x45279:	mov bx, [bp + 14]	; 3: 139 94 14
x45282:	add bx, ax	; 2: 1 195
x45284:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3364 index 1
x45287:	mov ax, [bp + 18]	; 3: 139 70 18
x45290:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3365 £temporary3364 valueSize
x45291:	xor dx, dx	; 2: 49 210
x45293:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3365
x45296:	mov bx, [bp + 14]	; 3: 139 94 14
x45299:	add bx, ax	; 2: 1 195
x45301:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x45304:	mov ax, [bp + 22]	; 3: 139 70 22
x45307:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x45310:	mov ax, [bp + 24]	; 3: 139 70 24
x45313:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x45316:	mov word [bp + 26], qsort$16	; 5: 199 70 26 20 177
x45321:	mov [bp + 28], bp	; 3: 137 110 28
x45324:	mov ax, [bp + 12]	; 3: 139 70 12
x45327:	add bp, 26	; 3: 131 197 26
x45330:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3367

qsort$18:	; SignedLessThanEqual 26 £temporary3367 0
x45332:	cmp bx, 0	; 3: 131 251 0
x45335:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x45337:	mov ax, [bp + 22]	; 3: 139 70 22
x45340:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x45343:	mov ax, [bp + 24]	; 3: 139 70 24
x45346:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x45349:	mov ax, [bp + 10]	; 3: 139 70 10
x45352:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x45355:	mov word [bp + 26], qsort$24	; 5: 199 70 26 57 177
x45360:	mov [bp + 28], bp	; 3: 137 110 28
x45363:	add bp, 26	; 3: 131 197 26
x45366:	nop	; 1: 144
x45367:	jmp @3900$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x45369:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x45374:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x45377:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x45379:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x45383:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x45385:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x45388:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x45391:	mov ax, [bp]	; 3: 139 70 0
x45394:	mov di, [bp + 4]	; 3: 139 126 4
x45397:	mov bp, [bp + 2]	; 3: 139 110 2
x45400:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@3900$memswap:	; Assign index 0
x45402:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@3900$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x45407:	mov ax, [bp + 10]	; 3: 139 70 10
x45410:	cmp [bp + 12], ax	; 3: 57 70 12
x45413:	jge @3900$memswap$15	; 2: 125 43

@3900$memswap$2:	; BinaryAdd £temporary3349 value1 index
x45415:	mov si, [bp + 6]	; 3: 139 118 6
x45418:	add si, [bp + 12]	; 3: 3 118 12

@3900$memswap$3:	; Deref £temporary3348 -> £temporary3349 £temporary3349 0

@3900$memswap$4:	; Assign tempValue £temporary3348 -> £temporary3349
x45421:	mov al, [si]	; 2: 138 4
x45423:	mov [bp + 14], al	; 3: 136 70 14

@3900$memswap$5:	; BinaryAdd £temporary3351 value1 index
x45426:	mov si, [bp + 6]	; 3: 139 118 6
x45429:	add si, [bp + 12]	; 3: 3 118 12

@3900$memswap$6:	; Deref £temporary3350 -> £temporary3351 £temporary3351 0

@3900$memswap$7:	; BinaryAdd £temporary3353 value2 index
x45432:	mov di, [bp + 8]	; 3: 139 126 8
x45435:	add di, [bp + 12]	; 3: 3 126 12

@3900$memswap$8:	; Deref £temporary3352 -> £temporary3353 £temporary3353 0

@3900$memswap$9:	; Assign £temporary3350 -> £temporary3351 £temporary3352 -> £temporary3353
x45438:	mov al, [di]	; 2: 138 5
x45440:	mov [si], al	; 2: 136 4

@3900$memswap$10:	; BinaryAdd £temporary3355 value2 index
x45442:	mov si, [bp + 8]	; 3: 139 118 8
x45445:	add si, [bp + 12]	; 3: 3 118 12

@3900$memswap$11:	; Deref £temporary3354 -> £temporary3355 £temporary3355 0

@3900$memswap$12:	; Assign £temporary3354 -> £temporary3355 tempValue
x45448:	mov al, [bp + 14]	; 3: 138 70 14
x45451:	mov [si], al	; 2: 136 4

@3900$memswap$13:	; Increment index
x45453:	inc word [bp + 12]	; 3: 255 70 12

@3900$memswap$14:	; Goto 1
x45456:	jmp @3900$memswap$1	; 2: 235 205

@3900$memswap$15:	; Return 0
x45458:	mov ax, [bp]	; 3: 139 70 0
x45461:	mov di, [bp + 4]	; 3: 139 126 4
x45464:	mov bp, [bp + 2]	; 3: 139 110 2
x45467:	jmp ax	; 2: 255 224

@3900$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x45469:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x45474:	mov ax, [bp + 10]	; 3: 139 70 10
x45477:	dec ax	; 1: 72
x45478:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x45481:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x45485:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x45487:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x45490:	mov ax, [bp]	; 3: 139 70 0
x45493:	mov di, [bp + 4]	; 3: 139 126 4
x45496:	mov bp, [bp + 2]	; 3: 139 110 2
x45499:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3292 valueList
x45501:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3293 firstIndex valueSize
x45504:	mov ax, [bp + 16]	; 3: 139 70 16
x45507:	xor dx, dx	; 2: 49 210
x45509:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3292 £temporary3293
x45512:	add bx, ax	; 2: 1 195
x45514:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x45517:	mov ax, [bp + 6]	; 3: 139 70 6
x45520:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x45523:	mov ax, [bp + 20]	; 3: 139 70 20
x45526:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x45529:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 233 177
x45534:	mov [bp + 24], bp	; 3: 137 110 24
x45537:	mov ax, [bp + 14]	; 3: 139 70 14
x45540:	add bp, 22	; 3: 131 197 22
x45543:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3295

bsearch$14:	; Assign firstCompare £temporary3295
x45545:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x45548:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x45552:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x45554:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x45557:	mov ax, [bp]	; 3: 139 70 0
x45560:	mov di, [bp + 4]	; 3: 139 126 4
x45563:	mov bp, [bp + 2]	; 3: 139 110 2
x45566:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x45568:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x45572:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x45574:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x45577:	mov ax, [bp]	; 3: 139 70 0
x45580:	mov di, [bp + 4]	; 3: 139 126 4
x45583:	mov bp, [bp + 2]	; 3: 139 110 2
x45586:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3298 valueList
x45588:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3299 lastIndex valueSize
x45591:	mov ax, [bp + 18]	; 3: 139 70 18
x45594:	xor dx, dx	; 2: 49 210
x45596:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3298 £temporary3299
x45599:	add bx, ax	; 2: 1 195
x45601:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x45604:	mov ax, [bp + 6]	; 3: 139 70 6
x45607:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x45610:	mov ax, [bp + 20]	; 3: 139 70 20
x45613:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x45616:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 64 178
x45621:	mov [bp + 24], bp	; 3: 137 110 24
x45624:	mov ax, [bp + 14]	; 3: 139 70 14
x45627:	add bp, 22	; 3: 131 197 22
x45630:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3301

bsearch$30:	; Assign lastCompare £temporary3301
x45632:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x45635:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x45639:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x45641:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x45644:	mov ax, [bp]	; 3: 139 70 0
x45647:	mov di, [bp + 4]	; 3: 139 126 4
x45650:	mov bp, [bp + 2]	; 3: 139 110 2
x45653:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x45655:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x45659:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x45661:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x45664:	mov ax, [bp]	; 3: 139 70 0
x45667:	mov di, [bp + 4]	; 3: 139 126 4
x45670:	mov bp, [bp + 2]	; 3: 139 110 2
x45673:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3304 firstIndex lastIndex
x45675:	mov ax, [bp + 16]	; 3: 139 70 16
x45678:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3304 2
x45681:	xor dx, dx	; 2: 49 210
x45683:	idiv word [int2$2#]	; 4: 247 62 96 51
x45687:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3306 valueList
x45690:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3307 middleIndex valueSize
x45693:	mov ax, [bp + 20]	; 3: 139 70 20
x45696:	xor dx, dx	; 2: 49 210
x45698:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3306 £temporary3307
x45701:	add bx, ax	; 2: 1 195
x45703:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x45706:	mov ax, [bp + 6]	; 3: 139 70 6
x45709:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x45712:	mov ax, [bp + 22]	; 3: 139 70 22
x45715:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x45718:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 166 178
x45723:	mov [bp + 26], bp	; 3: 137 110 26
x45726:	mov ax, [bp + 14]	; 3: 139 70 14
x45729:	add bp, 24	; 3: 131 197 24
x45732:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3309

bsearch$48:	; Assign middleCompare £temporary3309
x45734:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x45737:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x45741:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x45743:	mov ax, [bp + 20]	; 3: 139 70 20
x45746:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x45749:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x45752:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x45756:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x45758:	mov ax, [bp + 20]	; 3: 139 70 20
x45761:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x45764:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x45767:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x45770:	mov ax, [bp]	; 3: 139 70 0
x45773:	mov di, [bp + 4]	; 3: 139 126 4
x45776:	mov bp, [bp + 2]	; 3: 139 110 2
x45779:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

strtol_test:	; Assign base 0
x45781:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x45786:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x45790:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x45794:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x45798:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x45802:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x45806:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x45810:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x45814:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x45818:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x45822:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x45826:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x45830:	mov [bp + 27], bp	; 3: 137 110 27
x45833:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2431 pointer
x45837:	mov si, bp	; 2: 137 238
x45839:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2431 8
x45842:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x45845:	mov ax, [bp + 6]	; 3: 139 70 6
x45848:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x45851:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 41 179
x45856:	mov [bp + 23], bp	; 3: 137 110 23
x45859:	add bp, 21	; 3: 131 197 21
x45862:	jmp strtol	; 3: 233 187 9

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2432

strtol_test$20:	; Assign value £temporary2432
x45865:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x45869:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$23:	; Parameter 25 text 8
x45874:	mov [bp + 33], bp	; 3: 137 110 33
x45877:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x45881:	mov eax, [bp + 21]	; 4: 102 139 70 21
x45885:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x45889:	mov ax, [bp + 19]	; 3: 139 70 19
x45892:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x45895:	mov ax, [bp + 6]	; 3: 139 70 6
x45898:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x45901:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 96 179
x45906:	mov [bp + 27], bp	; 3: 137 110 27
x45909:	add bp, 25	; 3: 131 197 25
x45912:	mov di, bp	; 2: 137 239
x45914:	add di, 10	; 3: 131 199 10
x45917:	jmp printf	; 3: 233 101 89

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x45920:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x45925:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x45929:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x45933:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x45937:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x45941:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x45945:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x45949:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x45953:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x45957:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x45961:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x45965:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x45969:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x45973:	mov [bp + 28], bp	; 3: 137 110 28
x45976:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2446 pointer
x45980:	mov si, bp	; 2: 137 238
x45982:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2446 8
x45985:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x45988:	mov ax, [bp + 6]	; 3: 139 70 6
x45991:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x45994:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 184 179
x45999:	mov [bp + 24], bp	; 3: 137 110 24
x46002:	add bp, 22	; 3: 131 197 22
x46005:	jmp strtol	; 3: 233 44 9

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2447

strtol_test$50:	; Assign value £temporary2447
x46008:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46012:	mov word [bp + 32], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 206 188

strtol_test$53:	; Parameter 26 text 8
x46017:	mov [bp + 34], bp	; 3: 137 110 34
x46020:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x46024:	mov eax, [bp + 22]	; 4: 102 139 70 22
x46028:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x46032:	mov ax, [bp + 20]	; 3: 139 70 20
x46035:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x46038:	mov ax, [bp + 6]	; 3: 139 70 6
x46041:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x46044:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 239 179
x46049:	mov [bp + 28], bp	; 3: 137 110 28
x46052:	add bp, 26	; 3: 131 197 26
x46055:	mov di, bp	; 2: 137 239
x46057:	add di, 10	; 3: 131 199 10
x46060:	jmp printf	; 3: 233 214 88

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x46063:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x46068:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x46072:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x46076:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x46080:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x46084:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x46088:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x46092:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x46096:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x46100:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x46104:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x46108:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x46112:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x46116:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x46120:	mov [bp + 29], bp	; 3: 137 110 29
x46123:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2462 pointer
x46127:	mov si, bp	; 2: 137 238
x46129:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2462 8
x46132:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x46135:	mov ax, [bp + 6]	; 3: 139 70 6
x46138:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x46141:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 75 180
x46146:	mov [bp + 25], bp	; 3: 137 110 25
x46149:	add bp, 23	; 3: 131 197 23
x46152:	jmp strtol	; 3: 233 153 8

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2463

strtol_test$81:	; Assign value £temporary2463
x46155:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46159:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 188

strtol_test$84:	; Parameter 27 text 8
x46164:	mov [bp + 35], bp	; 3: 137 110 35
x46167:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x46171:	mov eax, [bp + 23]	; 4: 102 139 70 23
x46175:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x46179:	mov ax, [bp + 21]	; 3: 139 70 21
x46182:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x46185:	mov ax, [bp + 6]	; 3: 139 70 6
x46188:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x46191:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 130 180
x46196:	mov [bp + 29], bp	; 3: 137 110 29
x46199:	add bp, 27	; 3: 131 197 27
x46202:	mov di, bp	; 2: 137 239
x46204:	add di, 10	; 3: 131 199 10
x46207:	jmp printf	; 3: 233 67 88

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x46210:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x46215:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x46219:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x46223:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x46227:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x46231:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x46235:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x46239:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x46243:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x46247:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x46251:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x46255:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x46259:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x46263:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x46267:	mov [bp + 29], bp	; 3: 137 110 29
x46270:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2478 pointer
x46274:	mov si, bp	; 2: 137 238
x46276:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2478 8
x46279:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x46282:	mov ax, [bp + 6]	; 3: 139 70 6
x46285:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x46288:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 222 180
x46293:	mov [bp + 25], bp	; 3: 137 110 25
x46296:	add bp, 23	; 3: 131 197 23
x46299:	jmp strtol	; 3: 233 6 8

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2479

strtol_test$112:	; Assign value £temporary2479
x46302:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46306:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 188

strtol_test$115:	; Parameter 27 text 8
x46311:	mov [bp + 35], bp	; 3: 137 110 35
x46314:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x46318:	mov eax, [bp + 23]	; 4: 102 139 70 23
x46322:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x46326:	mov ax, [bp + 21]	; 3: 139 70 21
x46329:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x46332:	mov ax, [bp + 6]	; 3: 139 70 6
x46335:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x46338:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 21 181
x46343:	mov [bp + 29], bp	; 3: 137 110 29
x46346:	add bp, 27	; 3: 131 197 27
x46349:	mov di, bp	; 2: 137 239
x46351:	add di, 10	; 3: 131 199 10
x46354:	jmp printf	; 3: 233 176 87

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x46357:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x46362:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x46366:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x46370:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x46374:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x46378:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x46382:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x46386:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x46390:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x46394:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x46398:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x46402:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x46406:	mov [bp + 27], bp	; 3: 137 110 27
x46409:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2492 pointer
x46413:	mov si, bp	; 2: 137 238
x46415:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2492 8
x46418:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x46421:	mov ax, [bp + 6]	; 3: 139 70 6
x46424:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x46427:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 105 181
x46432:	mov [bp + 23], bp	; 3: 137 110 23
x46435:	add bp, 21	; 3: 131 197 21
x46438:	jmp strtol	; 3: 233 123 7

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2493

strtol_test$141:	; Assign value £temporary2493
x46441:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46445:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$144:	; Parameter 25 text 8
x46450:	mov [bp + 33], bp	; 3: 137 110 33
x46453:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x46457:	mov eax, [bp + 21]	; 4: 102 139 70 21
x46461:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x46465:	mov ax, [bp + 19]	; 3: 139 70 19
x46468:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x46471:	mov ax, [bp + 6]	; 3: 139 70 6
x46474:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x46477:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 160 181
x46482:	mov [bp + 27], bp	; 3: 137 110 27
x46485:	add bp, 25	; 3: 131 197 25
x46488:	mov di, bp	; 2: 137 239
x46490:	add di, 10	; 3: 131 199 10
x46493:	jmp printf	; 3: 233 37 87

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x46496:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x46501:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x46505:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x46509:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x46513:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x46517:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x46521:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x46525:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x46529:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x46533:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x46537:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x46541:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x46545:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x46549:	mov [bp + 28], bp	; 3: 137 110 28
x46552:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2507 pointer
x46556:	mov si, bp	; 2: 137 238
x46558:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2507 8
x46561:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x46564:	mov ax, [bp + 6]	; 3: 139 70 6
x46567:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x46570:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 248 181
x46575:	mov [bp + 24], bp	; 3: 137 110 24
x46578:	add bp, 22	; 3: 131 197 22
x46581:	jmp strtol	; 3: 233 236 6

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2508

strtol_test$171:	; Assign value £temporary2508
x46584:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46588:	mov word [bp + 32], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 206 188

strtol_test$174:	; Parameter 26 text 8
x46593:	mov [bp + 34], bp	; 3: 137 110 34
x46596:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x46600:	mov eax, [bp + 22]	; 4: 102 139 70 22
x46604:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x46608:	mov ax, [bp + 20]	; 3: 139 70 20
x46611:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x46614:	mov ax, [bp + 6]	; 3: 139 70 6
x46617:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x46620:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 47 182
x46625:	mov [bp + 28], bp	; 3: 137 110 28
x46628:	add bp, 26	; 3: 131 197 26
x46631:	mov di, bp	; 2: 137 239
x46633:	add di, 10	; 3: 131 199 10
x46636:	jmp printf	; 3: 233 150 86

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x46639:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x46644:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x46648:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x46652:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x46656:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x46660:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x46664:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x46668:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x46672:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x46676:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x46680:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x46684:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x46688:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x46692:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x46696:	mov [bp + 29], bp	; 3: 137 110 29
x46699:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2523 pointer
x46703:	mov si, bp	; 2: 137 238
x46705:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2523 8
x46708:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x46711:	mov ax, [bp + 6]	; 3: 139 70 6
x46714:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x46717:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 139 182
x46722:	mov [bp + 25], bp	; 3: 137 110 25
x46725:	add bp, 23	; 3: 131 197 23
x46728:	jmp strtol	; 3: 233 89 6

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2524

strtol_test$202:	; Assign value £temporary2524
x46731:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46735:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 188

strtol_test$205:	; Parameter 27 text 8
x46740:	mov [bp + 35], bp	; 3: 137 110 35
x46743:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x46747:	mov eax, [bp + 23]	; 4: 102 139 70 23
x46751:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x46755:	mov ax, [bp + 21]	; 3: 139 70 21
x46758:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x46761:	mov ax, [bp + 6]	; 3: 139 70 6
x46764:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x46767:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 194 182
x46772:	mov [bp + 29], bp	; 3: 137 110 29
x46775:	add bp, 27	; 3: 131 197 27
x46778:	mov di, bp	; 2: 137 239
x46780:	add di, 10	; 3: 131 199 10
x46783:	jmp printf	; 3: 233 3 86

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x46786:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x46791:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x46795:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x46799:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x46803:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x46807:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x46811:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x46815:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x46819:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x46823:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x46827:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x46831:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x46835:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x46839:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x46843:	mov [bp + 29], bp	; 3: 137 110 29
x46846:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2539 pointer
x46850:	mov si, bp	; 2: 137 238
x46852:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2539 8
x46855:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x46858:	mov ax, [bp + 6]	; 3: 139 70 6
x46861:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x46864:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 30 183
x46869:	mov [bp + 25], bp	; 3: 137 110 25
x46872:	add bp, 23	; 3: 131 197 23
x46875:	jmp strtol	; 3: 233 198 5

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2540

strtol_test$233:	; Assign value £temporary2540
x46878:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46882:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 188

strtol_test$236:	; Parameter 27 text 8
x46887:	mov [bp + 35], bp	; 3: 137 110 35
x46890:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x46894:	mov eax, [bp + 23]	; 4: 102 139 70 23
x46898:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x46902:	mov ax, [bp + 21]	; 3: 139 70 21
x46905:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x46908:	mov ax, [bp + 6]	; 3: 139 70 6
x46911:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x46914:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 85 183
x46919:	mov [bp + 29], bp	; 3: 137 110 29
x46922:	add bp, 27	; 3: 131 197 27
x46925:	mov di, bp	; 2: 137 239
x46927:	add di, 10	; 3: 131 199 10
x46930:	jmp printf	; 3: 233 112 85

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x46933:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x46938:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x46942:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x46946:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x46950:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x46954:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x46958:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x46962:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x46966:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x46970:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x46974:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x46978:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x46982:	mov [bp + 27], bp	; 3: 137 110 27
x46985:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2553 pointer
x46989:	mov si, bp	; 2: 137 238
x46991:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2553 8
x46994:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x46997:	mov ax, [bp + 6]	; 3: 139 70 6
x47000:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x47003:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 169 183
x47008:	mov [bp + 23], bp	; 3: 137 110 23
x47011:	add bp, 21	; 3: 131 197 21
x47014:	jmp strtol	; 3: 233 59 5

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2554

strtol_test$262:	; Assign value £temporary2554
x47017:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47021:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$265:	; Parameter 25 text 8
x47026:	mov [bp + 33], bp	; 3: 137 110 33
x47029:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x47033:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47037:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x47041:	mov ax, [bp + 19]	; 3: 139 70 19
x47044:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x47047:	mov ax, [bp + 6]	; 3: 139 70 6
x47050:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x47053:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 224 183
x47058:	mov [bp + 27], bp	; 3: 137 110 27
x47061:	add bp, 25	; 3: 131 197 25
x47064:	mov di, bp	; 2: 137 239
x47066:	add di, 10	; 3: 131 199 10
x47069:	jmp printf	; 3: 233 229 84

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x47072:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x47077:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x47081:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x47085:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x47089:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x47093:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x47097:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x47101:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x47105:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x47109:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x47113:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x47117:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x47121:	mov [bp + 27], bp	; 3: 137 110 27
x47124:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2567 pointer
x47128:	mov si, bp	; 2: 137 238
x47130:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2567 8
x47133:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x47136:	mov ax, [bp + 6]	; 3: 139 70 6
x47139:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x47142:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 52 184
x47147:	mov [bp + 23], bp	; 3: 137 110 23
x47150:	add bp, 21	; 3: 131 197 21
x47153:	jmp strtol	; 3: 233 176 4

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2568

strtol_test$291:	; Assign value £temporary2568
x47156:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47160:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$294:	; Parameter 25 text 8
x47165:	mov [bp + 33], bp	; 3: 137 110 33
x47168:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x47172:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47176:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x47180:	mov ax, [bp + 19]	; 3: 139 70 19
x47183:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x47186:	mov ax, [bp + 6]	; 3: 139 70 6
x47189:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x47192:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 107 184
x47197:	mov [bp + 27], bp	; 3: 137 110 27
x47200:	add bp, 25	; 3: 131 197 25
x47203:	mov di, bp	; 2: 137 239
x47205:	add di, 10	; 3: 131 199 10
x47208:	jmp printf	; 3: 233 90 84

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x47211:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x47216:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x47220:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x47224:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x47228:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x47232:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x47236:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x47240:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x47244:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x47248:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x47252:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x47256:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x47260:	mov [bp + 27], bp	; 3: 137 110 27
x47263:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2581 pointer
x47267:	mov si, bp	; 2: 137 238
x47269:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2581 8
x47272:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x47275:	mov ax, [bp + 6]	; 3: 139 70 6
x47278:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x47281:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 191 184
x47286:	mov [bp + 23], bp	; 3: 137 110 23
x47289:	add bp, 21	; 3: 131 197 21
x47292:	jmp strtol	; 3: 233 37 4

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2582

strtol_test$320:	; Assign value £temporary2582
x47295:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47299:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$323:	; Parameter 25 text 8
x47304:	mov [bp + 33], bp	; 3: 137 110 33
x47307:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x47311:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47315:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x47319:	mov ax, [bp + 19]	; 3: 139 70 19
x47322:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x47325:	mov ax, [bp + 6]	; 3: 139 70 6
x47328:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x47331:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 246 184
x47336:	mov [bp + 27], bp	; 3: 137 110 27
x47339:	add bp, 25	; 3: 131 197 25
x47342:	mov di, bp	; 2: 137 239
x47344:	add di, 10	; 3: 131 199 10
x47347:	jmp printf	; 3: 233 207 83

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x47350:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x47355:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x47359:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x47363:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x47367:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x47371:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x47375:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x47379:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x47383:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x47387:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x47391:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x47395:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x47399:	mov [bp + 27], bp	; 3: 137 110 27
x47402:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2595 pointer
x47406:	mov si, bp	; 2: 137 238
x47408:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2595 8
x47411:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x47414:	mov ax, [bp + 6]	; 3: 139 70 6
x47417:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x47420:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 74 185
x47425:	mov [bp + 23], bp	; 3: 137 110 23
x47428:	add bp, 21	; 3: 131 197 21
x47431:	jmp strtol	; 3: 233 154 3

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2596

strtol_test$349:	; Assign value £temporary2596
x47434:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47438:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$352:	; Parameter 25 text 8
x47443:	mov [bp + 33], bp	; 3: 137 110 33
x47446:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x47450:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47454:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x47458:	mov ax, [bp + 19]	; 3: 139 70 19
x47461:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x47464:	mov ax, [bp + 6]	; 3: 139 70 6
x47467:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x47470:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 129 185
x47475:	mov [bp + 27], bp	; 3: 137 110 27
x47478:	add bp, 25	; 3: 131 197 25
x47481:	mov di, bp	; 2: 137 239
x47483:	add di, 10	; 3: 131 199 10
x47486:	jmp printf	; 3: 233 68 83

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x47489:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x47494:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x47498:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x47502:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x47506:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x47510:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x47514:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x47518:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x47522:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x47526:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x47530:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x47534:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x47538:	mov [bp + 27], bp	; 3: 137 110 27
x47541:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2609 pointer
x47545:	mov si, bp	; 2: 137 238
x47547:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2609 8
x47550:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x47553:	mov ax, [bp + 6]	; 3: 139 70 6
x47556:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x47559:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 213 185
x47564:	mov [bp + 23], bp	; 3: 137 110 23
x47567:	add bp, 21	; 3: 131 197 21
x47570:	jmp strtol	; 3: 233 15 3

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2610

strtol_test$378:	; Assign value £temporary2610
x47573:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47577:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$381:	; Parameter 25 text 8
x47582:	mov [bp + 33], bp	; 3: 137 110 33
x47585:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x47589:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47593:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x47597:	mov ax, [bp + 19]	; 3: 139 70 19
x47600:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x47603:	mov ax, [bp + 6]	; 3: 139 70 6
x47606:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x47609:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 12 186
x47614:	mov [bp + 27], bp	; 3: 137 110 27
x47617:	add bp, 25	; 3: 131 197 25
x47620:	mov di, bp	; 2: 137 239
x47622:	add di, 10	; 3: 131 199 10
x47625:	jmp printf	; 3: 233 185 82

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x47628:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x47633:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x47637:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x47641:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x47645:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x47649:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x47653:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x47657:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x47661:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x47665:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x47669:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x47673:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x47677:	mov [bp + 27], bp	; 3: 137 110 27
x47680:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2623 pointer
x47684:	mov si, bp	; 2: 137 238
x47686:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2623 8
x47689:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x47692:	mov ax, [bp + 6]	; 3: 139 70 6
x47695:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x47698:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 96 186
x47703:	mov [bp + 23], bp	; 3: 137 110 23
x47706:	add bp, 21	; 3: 131 197 21
x47709:	jmp strtol	; 3: 233 132 2

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2624

strtol_test$407:	; Assign value £temporary2624
x47712:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47716:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$410:	; Parameter 25 text 8
x47721:	mov [bp + 33], bp	; 3: 137 110 33
x47724:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x47728:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47732:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x47736:	mov ax, [bp + 19]	; 3: 139 70 19
x47739:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x47742:	mov ax, [bp + 6]	; 3: 139 70 6
x47745:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x47748:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 151 186
x47753:	mov [bp + 27], bp	; 3: 137 110 27
x47756:	add bp, 25	; 3: 131 197 25
x47759:	mov di, bp	; 2: 137 239
x47761:	add di, 10	; 3: 131 199 10
x47764:	jmp printf	; 3: 233 46 82

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x47767:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x47772:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x47776:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x47780:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x47784:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x47788:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x47792:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x47796:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x47800:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x47804:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x47808:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x47812:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x47816:	mov [bp + 27], bp	; 3: 137 110 27
x47819:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2637 pointer
x47823:	mov si, bp	; 2: 137 238
x47825:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2637 8
x47828:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x47831:	mov ax, [bp + 6]	; 3: 139 70 6
x47834:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x47837:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 235 186
x47842:	mov [bp + 23], bp	; 3: 137 110 23
x47845:	add bp, 21	; 3: 131 197 21
x47848:	jmp strtol	; 3: 233 249 1

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2638

strtol_test$436:	; Assign value £temporary2638
x47851:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47855:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$439:	; Parameter 25 text 8
x47860:	mov [bp + 33], bp	; 3: 137 110 33
x47863:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x47867:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47871:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x47875:	mov ax, [bp + 19]	; 3: 139 70 19
x47878:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x47881:	mov ax, [bp + 6]	; 3: 139 70 6
x47884:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x47887:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 34 187
x47892:	mov [bp + 27], bp	; 3: 137 110 27
x47895:	add bp, 25	; 3: 131 197 25
x47898:	mov di, bp	; 2: 137 239
x47900:	add di, 10	; 3: 131 199 10
x47903:	jmp printf	; 3: 233 163 81

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x47906:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x47911:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x47915:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x47919:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x47923:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x47927:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x47931:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x47935:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x47939:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x47943:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x47947:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x47951:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x47955:	mov [bp + 27], bp	; 3: 137 110 27
x47958:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2651 pointer
x47962:	mov si, bp	; 2: 137 238
x47964:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2651 8
x47967:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x47970:	mov ax, [bp + 6]	; 3: 139 70 6
x47973:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x47976:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 118 187
x47981:	mov [bp + 23], bp	; 3: 137 110 23
x47984:	add bp, 21	; 3: 131 197 21
x47987:	jmp strtol	; 3: 233 110 1

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2652

strtol_test$465:	; Assign value £temporary2652
x47990:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47994:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$468:	; Parameter 25 text 8
x47999:	mov [bp + 33], bp	; 3: 137 110 33
x48002:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x48006:	mov eax, [bp + 21]	; 4: 102 139 70 21
x48010:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x48014:	mov ax, [bp + 19]	; 3: 139 70 19
x48017:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x48020:	mov ax, [bp + 6]	; 3: 139 70 6
x48023:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x48026:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 173 187
x48031:	mov [bp + 27], bp	; 3: 137 110 27
x48034:	add bp, 25	; 3: 131 197 25
x48037:	mov di, bp	; 2: 137 239
x48039:	add di, 10	; 3: 131 199 10
x48042:	jmp printf	; 3: 233 24 81

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x48045:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x48050:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x48054:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x48058:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x48062:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x48066:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x48070:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x48074:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x48078:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x48082:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x48086:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x48090:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x48094:	mov [bp + 27], bp	; 3: 137 110 27
x48097:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2665 pointer
x48101:	mov si, bp	; 2: 137 238
x48103:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2665 8
x48106:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x48109:	mov ax, [bp + 6]	; 3: 139 70 6
x48112:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x48115:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 1 188
x48120:	mov [bp + 23], bp	; 3: 137 110 23
x48123:	add bp, 21	; 3: 131 197 21
x48126:	jmp strtol	; 3: 233 227 0

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2666

strtol_test$494:	; Assign value £temporary2666
x48129:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48133:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$497:	; Parameter 25 text 8
x48138:	mov [bp + 33], bp	; 3: 137 110 33
x48141:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x48145:	mov eax, [bp + 21]	; 4: 102 139 70 21
x48149:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x48153:	mov ax, [bp + 19]	; 3: 139 70 19
x48156:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x48159:	mov ax, [bp + 6]	; 3: 139 70 6
x48162:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x48165:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 56 188
x48170:	mov [bp + 27], bp	; 3: 137 110 27
x48173:	add bp, 25	; 3: 131 197 25
x48176:	mov di, bp	; 2: 137 239
x48178:	add di, 10	; 3: 131 199 10
x48181:	jmp printf	; 3: 233 141 80

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x48184:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x48189:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x48193:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x48197:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x48201:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x48205:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x48209:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x48213:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x48217:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x48221:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x48225:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x48229:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x48233:	mov [bp + 27], bp	; 3: 137 110 27
x48236:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2679 pointer
x48240:	mov si, bp	; 2: 137 238
x48242:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2679 8
x48245:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x48248:	mov ax, [bp + 6]	; 3: 139 70 6
x48251:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x48254:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 140 188
x48259:	mov [bp + 23], bp	; 3: 137 110 23
x48262:	add bp, 21	; 3: 131 197 21
x48265:	nop	; 1: 144
x48266:	jmp strtol	; 2: 235 88

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2680

strtol_test$523:	; Assign value £temporary2680
x48268:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48272:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtol_test$526:	; Parameter 25 text 8
x48277:	mov [bp + 33], bp	; 3: 137 110 33
x48280:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x48284:	mov eax, [bp + 21]	; 4: 102 139 70 21
x48288:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x48292:	mov ax, [bp + 19]	; 3: 139 70 19
x48295:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x48298:	mov ax, [bp + 6]	; 3: 139 70 6
x48301:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x48304:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 195 188
x48309:	mov [bp + 27], bp	; 3: 137 110 27
x48312:	add bp, 25	; 3: 131 197 25
x48315:	mov di, bp	; 2: 137 239
x48317:	add di, 10	; 3: 131 199 10
x48320:	jmp printf	; 3: 233 2 80

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x48323:	mov ax, [bp]	; 3: 139 70 0
x48326:	mov di, [bp + 4]	; 3: 139 126 4
x48329:	mov bp, [bp + 2]	; 3: 139 110 2
x48332:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x48334:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x48356:	mov word [g_inStatus], 1	; 6: 199 6 227 86 1 0

strtol$1:	; Assign g_inDevice s
x48362:	mov ax, [bp + 6]	; 3: 139 70 6
x48365:	mov [g_inDevice], ax	; 3: 163 229 86

strtol$2:	; Assign g_inChars 0
x48368:	mov word [g_inChars], 0	; 6: 199 6 8 92 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x48374:	mov ax, [bp + 10]	; 3: 139 70 10
x48377:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x48380:	mov word [bp + 12], strtol$6	; 5: 199 70 12 10 189
x48385:	mov [bp + 14], bp	; 3: 137 110 14
x48388:	add bp, 12	; 3: 131 197 12
x48391:	jmp scanLongInt	; 3: 233 243 161

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2415

strtol$8:	; Assign value £temporary2415
x48394:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x48398:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x48402:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2417 -> endp endp 0
x48404:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2417 -> endp s g_inChars
x48407:	mov ax, [bp + 6]	; 3: 139 70 6
x48410:	add ax, [g_inChars]	; 4: 3 6 8 92
x48414:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x48416:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x48420:	mov ax, [bp]	; 3: 139 70 0
x48423:	mov di, [bp + 4]	; 3: 139 126 4
x48426:	mov bp, [bp + 2]	; 3: 139 110 2
x48429:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x48431:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x48436:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x48440:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x48444:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x48448:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x48452:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x48456:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x48460:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x48464:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x48468:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x48472:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x48476:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x48480:	mov [bp + 27], bp	; 3: 137 110 27
x48483:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2860 pointer
x48487:	mov si, bp	; 2: 137 238
x48489:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2860 8
x48492:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x48495:	mov ax, [bp + 6]	; 3: 139 70 6
x48498:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x48501:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 131 189
x48506:	mov [bp + 23], bp	; 3: 137 110 23
x48509:	add bp, 21	; 3: 131 197 21
x48512:	jmp strtoul	; 3: 233 165 9

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2861

strtoul_test$20:	; Assign value £temporary2861
x48515:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48519:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$23:	; Parameter 25 text 8
x48524:	mov [bp + 33], bp	; 3: 137 110 33
x48527:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x48531:	mov eax, [bp + 21]	; 4: 102 139 70 21
x48535:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x48539:	mov ax, [bp + 19]	; 3: 139 70 19
x48542:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x48545:	mov ax, [bp + 6]	; 3: 139 70 6
x48548:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x48551:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 186 189
x48556:	mov [bp + 27], bp	; 3: 137 110 27
x48559:	add bp, 25	; 3: 131 197 25
x48562:	mov di, bp	; 2: 137 239
x48564:	add di, 10	; 3: 131 199 10
x48567:	jmp printf	; 3: 233 11 79

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x48570:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x48575:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x48579:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x48583:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x48587:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x48591:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x48595:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x48599:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x48603:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x48607:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x48611:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x48615:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x48619:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x48623:	mov [bp + 28], bp	; 3: 137 110 28
x48626:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2875 pointer
x48630:	mov si, bp	; 2: 137 238
x48632:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2875 8
x48635:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x48638:	mov ax, [bp + 6]	; 3: 139 70 6
x48641:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x48644:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 18 190
x48649:	mov [bp + 24], bp	; 3: 137 110 24
x48652:	add bp, 22	; 3: 131 197 22
x48655:	jmp strtoul	; 3: 233 22 9

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2876

strtoul_test$50:	; Assign value £temporary2876
x48658:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48662:	mov word [bp + 32], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 206 188

strtoul_test$53:	; Parameter 26 text 8
x48667:	mov [bp + 34], bp	; 3: 137 110 34
x48670:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x48674:	mov eax, [bp + 22]	; 4: 102 139 70 22
x48678:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x48682:	mov ax, [bp + 20]	; 3: 139 70 20
x48685:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x48688:	mov ax, [bp + 6]	; 3: 139 70 6
x48691:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x48694:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 73 190
x48699:	mov [bp + 28], bp	; 3: 137 110 28
x48702:	add bp, 26	; 3: 131 197 26
x48705:	mov di, bp	; 2: 137 239
x48707:	add di, 10	; 3: 131 199 10
x48710:	jmp printf	; 3: 233 124 78

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x48713:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x48718:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x48722:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x48726:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x48730:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x48734:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x48738:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x48742:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x48746:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x48750:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x48754:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x48758:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x48762:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x48766:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x48770:	mov [bp + 29], bp	; 3: 137 110 29
x48773:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2891 pointer
x48777:	mov si, bp	; 2: 137 238
x48779:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2891 8
x48782:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x48785:	mov ax, [bp + 6]	; 3: 139 70 6
x48788:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x48791:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 165 190
x48796:	mov [bp + 25], bp	; 3: 137 110 25
x48799:	add bp, 23	; 3: 131 197 23
x48802:	jmp strtoul	; 3: 233 131 8

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2892

strtoul_test$81:	; Assign value £temporary2892
x48805:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48809:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 188

strtoul_test$84:	; Parameter 27 text 8
x48814:	mov [bp + 35], bp	; 3: 137 110 35
x48817:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x48821:	mov eax, [bp + 23]	; 4: 102 139 70 23
x48825:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x48829:	mov ax, [bp + 21]	; 3: 139 70 21
x48832:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x48835:	mov ax, [bp + 6]	; 3: 139 70 6
x48838:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x48841:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 220 190
x48846:	mov [bp + 29], bp	; 3: 137 110 29
x48849:	add bp, 27	; 3: 131 197 27
x48852:	mov di, bp	; 2: 137 239
x48854:	add di, 10	; 3: 131 199 10
x48857:	jmp printf	; 3: 233 233 77

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x48860:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x48865:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x48869:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x48873:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x48877:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x48881:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x48885:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x48889:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x48893:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x48897:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x48901:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x48905:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x48909:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x48913:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x48917:	mov [bp + 29], bp	; 3: 137 110 29
x48920:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2907 pointer
x48924:	mov si, bp	; 2: 137 238
x48926:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2907 8
x48929:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x48932:	mov ax, [bp + 6]	; 3: 139 70 6
x48935:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x48938:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 56 191
x48943:	mov [bp + 25], bp	; 3: 137 110 25
x48946:	add bp, 23	; 3: 131 197 23
x48949:	jmp strtoul	; 3: 233 240 7

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2908

strtoul_test$112:	; Assign value £temporary2908
x48952:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48956:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 188

strtoul_test$115:	; Parameter 27 text 8
x48961:	mov [bp + 35], bp	; 3: 137 110 35
x48964:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x48968:	mov eax, [bp + 23]	; 4: 102 139 70 23
x48972:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x48976:	mov ax, [bp + 21]	; 3: 139 70 21
x48979:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x48982:	mov ax, [bp + 6]	; 3: 139 70 6
x48985:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x48988:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 111 191
x48993:	mov [bp + 29], bp	; 3: 137 110 29
x48996:	add bp, 27	; 3: 131 197 27
x48999:	mov di, bp	; 2: 137 239
x49001:	add di, 10	; 3: 131 199 10
x49004:	jmp printf	; 3: 233 86 77

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x49007:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x49012:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x49016:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x49020:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x49024:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x49028:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x49032:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x49036:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x49040:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x49044:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x49048:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x49052:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x49056:	mov [bp + 27], bp	; 3: 137 110 27
x49059:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2921 pointer
x49063:	mov si, bp	; 2: 137 238
x49065:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2921 8
x49068:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x49071:	mov ax, [bp + 6]	; 3: 139 70 6
x49074:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x49077:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 195 191
x49082:	mov [bp + 23], bp	; 3: 137 110 23
x49085:	add bp, 21	; 3: 131 197 21
x49088:	jmp strtoul	; 3: 233 101 7

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2922

strtoul_test$141:	; Assign value £temporary2922
x49091:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49095:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$144:	; Parameter 25 text 8
x49100:	mov [bp + 33], bp	; 3: 137 110 33
x49103:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x49107:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49111:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x49115:	mov ax, [bp + 19]	; 3: 139 70 19
x49118:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x49121:	mov ax, [bp + 6]	; 3: 139 70 6
x49124:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x49127:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 250 191
x49132:	mov [bp + 27], bp	; 3: 137 110 27
x49135:	add bp, 25	; 3: 131 197 25
x49138:	mov di, bp	; 2: 137 239
x49140:	add di, 10	; 3: 131 199 10
x49143:	jmp printf	; 3: 233 203 76

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x49146:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x49151:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x49155:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x49159:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x49163:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x49167:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x49171:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x49175:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x49179:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x49183:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x49187:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x49191:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x49195:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x49199:	mov [bp + 28], bp	; 3: 137 110 28
x49202:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2936 pointer
x49206:	mov si, bp	; 2: 137 238
x49208:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2936 8
x49211:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x49214:	mov ax, [bp + 6]	; 3: 139 70 6
x49217:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x49220:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 82 192
x49225:	mov [bp + 24], bp	; 3: 137 110 24
x49228:	add bp, 22	; 3: 131 197 22
x49231:	jmp strtoul	; 3: 233 214 6

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2937

strtoul_test$171:	; Assign value £temporary2937
x49234:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49238:	mov word [bp + 32], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 206 188

strtoul_test$174:	; Parameter 26 text 8
x49243:	mov [bp + 34], bp	; 3: 137 110 34
x49246:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x49250:	mov eax, [bp + 22]	; 4: 102 139 70 22
x49254:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x49258:	mov ax, [bp + 20]	; 3: 139 70 20
x49261:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x49264:	mov ax, [bp + 6]	; 3: 139 70 6
x49267:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x49270:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 137 192
x49275:	mov [bp + 28], bp	; 3: 137 110 28
x49278:	add bp, 26	; 3: 131 197 26
x49281:	mov di, bp	; 2: 137 239
x49283:	add di, 10	; 3: 131 199 10
x49286:	jmp printf	; 3: 233 60 76

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x49289:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x49294:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x49298:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x49302:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x49306:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x49310:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x49314:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x49318:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x49322:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x49326:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x49330:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x49334:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x49338:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x49342:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x49346:	mov [bp + 29], bp	; 3: 137 110 29
x49349:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2952 pointer
x49353:	mov si, bp	; 2: 137 238
x49355:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2952 8
x49358:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x49361:	mov ax, [bp + 6]	; 3: 139 70 6
x49364:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x49367:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 229 192
x49372:	mov [bp + 25], bp	; 3: 137 110 25
x49375:	add bp, 23	; 3: 131 197 23
x49378:	jmp strtoul	; 3: 233 67 6

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2953

strtoul_test$202:	; Assign value £temporary2953
x49381:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49385:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 188

strtoul_test$205:	; Parameter 27 text 8
x49390:	mov [bp + 35], bp	; 3: 137 110 35
x49393:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x49397:	mov eax, [bp + 23]	; 4: 102 139 70 23
x49401:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x49405:	mov ax, [bp + 21]	; 3: 139 70 21
x49408:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x49411:	mov ax, [bp + 6]	; 3: 139 70 6
x49414:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x49417:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 28 193
x49422:	mov [bp + 29], bp	; 3: 137 110 29
x49425:	add bp, 27	; 3: 131 197 27
x49428:	mov di, bp	; 2: 137 239
x49430:	add di, 10	; 3: 131 199 10
x49433:	jmp printf	; 3: 233 169 75

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x49436:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x49441:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x49445:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x49449:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x49453:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x49457:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x49461:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x49465:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x49469:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x49473:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x49477:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x49481:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x49485:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x49489:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x49493:	mov [bp + 29], bp	; 3: 137 110 29
x49496:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2968 pointer
x49500:	mov si, bp	; 2: 137 238
x49502:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2968 8
x49505:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x49508:	mov ax, [bp + 6]	; 3: 139 70 6
x49511:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x49514:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 120 193
x49519:	mov [bp + 25], bp	; 3: 137 110 25
x49522:	add bp, 23	; 3: 131 197 23
x49525:	jmp strtoul	; 3: 233 176 5

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2969

strtoul_test$233:	; Assign value £temporary2969
x49528:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49532:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 188

strtoul_test$236:	; Parameter 27 text 8
x49537:	mov [bp + 35], bp	; 3: 137 110 35
x49540:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x49544:	mov eax, [bp + 23]	; 4: 102 139 70 23
x49548:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x49552:	mov ax, [bp + 21]	; 3: 139 70 21
x49555:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x49558:	mov ax, [bp + 6]	; 3: 139 70 6
x49561:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x49564:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 175 193
x49569:	mov [bp + 29], bp	; 3: 137 110 29
x49572:	add bp, 27	; 3: 131 197 27
x49575:	mov di, bp	; 2: 137 239
x49577:	add di, 10	; 3: 131 199 10
x49580:	jmp printf	; 3: 233 22 75

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x49583:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x49588:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x49592:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x49596:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x49600:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x49604:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x49608:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x49612:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x49616:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x49620:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x49624:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x49628:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x49632:	mov [bp + 27], bp	; 3: 137 110 27
x49635:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2982 pointer
x49639:	mov si, bp	; 2: 137 238
x49641:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2982 8
x49644:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x49647:	mov ax, [bp + 6]	; 3: 139 70 6
x49650:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x49653:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 3 194
x49658:	mov [bp + 23], bp	; 3: 137 110 23
x49661:	add bp, 21	; 3: 131 197 21
x49664:	jmp strtoul	; 3: 233 37 5

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2983

strtoul_test$262:	; Assign value £temporary2983
x49667:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49671:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$265:	; Parameter 25 text 8
x49676:	mov [bp + 33], bp	; 3: 137 110 33
x49679:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x49683:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49687:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x49691:	mov ax, [bp + 19]	; 3: 139 70 19
x49694:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x49697:	mov ax, [bp + 6]	; 3: 139 70 6
x49700:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x49703:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 58 194
x49708:	mov [bp + 27], bp	; 3: 137 110 27
x49711:	add bp, 25	; 3: 131 197 25
x49714:	mov di, bp	; 2: 137 239
x49716:	add di, 10	; 3: 131 199 10
x49719:	jmp printf	; 3: 233 139 74

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x49722:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x49727:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x49731:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x49735:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x49739:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x49743:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x49747:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x49751:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x49755:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x49759:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x49763:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x49767:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x49771:	mov [bp + 27], bp	; 3: 137 110 27
x49774:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary2996 pointer
x49778:	mov si, bp	; 2: 137 238
x49780:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary2996 8
x49783:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x49786:	mov ax, [bp + 6]	; 3: 139 70 6
x49789:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x49792:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 142 194
x49797:	mov [bp + 23], bp	; 3: 137 110 23
x49800:	add bp, 21	; 3: 131 197 21
x49803:	jmp strtoul	; 3: 233 154 4

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary2997

strtoul_test$291:	; Assign value £temporary2997
x49806:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49810:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$294:	; Parameter 25 text 8
x49815:	mov [bp + 33], bp	; 3: 137 110 33
x49818:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x49822:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49826:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x49830:	mov ax, [bp + 19]	; 3: 139 70 19
x49833:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x49836:	mov ax, [bp + 6]	; 3: 139 70 6
x49839:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x49842:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 197 194
x49847:	mov [bp + 27], bp	; 3: 137 110 27
x49850:	add bp, 25	; 3: 131 197 25
x49853:	mov di, bp	; 2: 137 239
x49855:	add di, 10	; 3: 131 199 10
x49858:	jmp printf	; 3: 233 0 74

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x49861:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x49866:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x49870:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x49874:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x49878:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x49882:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x49886:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x49890:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x49894:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x49898:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x49902:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x49906:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x49910:	mov [bp + 27], bp	; 3: 137 110 27
x49913:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary3010 pointer
x49917:	mov si, bp	; 2: 137 238
x49919:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary3010 8
x49922:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x49925:	mov ax, [bp + 6]	; 3: 139 70 6
x49928:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x49931:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 25 195
x49936:	mov [bp + 23], bp	; 3: 137 110 23
x49939:	add bp, 21	; 3: 131 197 21
x49942:	jmp strtoul	; 3: 233 15 4

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary3011

strtoul_test$320:	; Assign value £temporary3011
x49945:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49949:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$323:	; Parameter 25 text 8
x49954:	mov [bp + 33], bp	; 3: 137 110 33
x49957:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x49961:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49965:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x49969:	mov ax, [bp + 19]	; 3: 139 70 19
x49972:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x49975:	mov ax, [bp + 6]	; 3: 139 70 6
x49978:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x49981:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 80 195
x49986:	mov [bp + 27], bp	; 3: 137 110 27
x49989:	add bp, 25	; 3: 131 197 25
x49992:	mov di, bp	; 2: 137 239
x49994:	add di, 10	; 3: 131 199 10
x49997:	jmp printf	; 3: 233 117 73

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x50000:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x50005:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x50009:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x50013:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x50017:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x50021:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x50025:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x50029:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x50033:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x50037:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x50041:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x50045:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x50049:	mov [bp + 27], bp	; 3: 137 110 27
x50052:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary3024 pointer
x50056:	mov si, bp	; 2: 137 238
x50058:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary3024 8
x50061:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x50064:	mov ax, [bp + 6]	; 3: 139 70 6
x50067:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x50070:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 164 195
x50075:	mov [bp + 23], bp	; 3: 137 110 23
x50078:	add bp, 21	; 3: 131 197 21
x50081:	jmp strtoul	; 3: 233 132 3

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary3025

strtoul_test$349:	; Assign value £temporary3025
x50084:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50088:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$352:	; Parameter 25 text 8
x50093:	mov [bp + 33], bp	; 3: 137 110 33
x50096:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x50100:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50104:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x50108:	mov ax, [bp + 19]	; 3: 139 70 19
x50111:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x50114:	mov ax, [bp + 6]	; 3: 139 70 6
x50117:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x50120:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 219 195
x50125:	mov [bp + 27], bp	; 3: 137 110 27
x50128:	add bp, 25	; 3: 131 197 25
x50131:	mov di, bp	; 2: 137 239
x50133:	add di, 10	; 3: 131 199 10
x50136:	jmp printf	; 3: 233 234 72

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x50139:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x50144:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x50148:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x50152:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x50156:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x50160:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x50164:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x50168:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x50172:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x50176:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x50180:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x50184:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x50188:	mov [bp + 27], bp	; 3: 137 110 27
x50191:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary3038 pointer
x50195:	mov si, bp	; 2: 137 238
x50197:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary3038 8
x50200:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x50203:	mov ax, [bp + 6]	; 3: 139 70 6
x50206:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x50209:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 47 196
x50214:	mov [bp + 23], bp	; 3: 137 110 23
x50217:	add bp, 21	; 3: 131 197 21
x50220:	jmp strtoul	; 3: 233 249 2

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary3039

strtoul_test$378:	; Assign value £temporary3039
x50223:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50227:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$381:	; Parameter 25 text 8
x50232:	mov [bp + 33], bp	; 3: 137 110 33
x50235:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x50239:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50243:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x50247:	mov ax, [bp + 19]	; 3: 139 70 19
x50250:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x50253:	mov ax, [bp + 6]	; 3: 139 70 6
x50256:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x50259:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 102 196
x50264:	mov [bp + 27], bp	; 3: 137 110 27
x50267:	add bp, 25	; 3: 131 197 25
x50270:	mov di, bp	; 2: 137 239
x50272:	add di, 10	; 3: 131 199 10
x50275:	jmp printf	; 3: 233 95 72

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x50278:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x50283:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x50287:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x50291:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x50295:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x50299:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x50303:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x50307:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x50311:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x50315:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x50319:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x50323:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x50327:	mov [bp + 27], bp	; 3: 137 110 27
x50330:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary3052 pointer
x50334:	mov si, bp	; 2: 137 238
x50336:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary3052 8
x50339:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x50342:	mov ax, [bp + 6]	; 3: 139 70 6
x50345:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x50348:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 186 196
x50353:	mov [bp + 23], bp	; 3: 137 110 23
x50356:	add bp, 21	; 3: 131 197 21
x50359:	jmp strtoul	; 3: 233 110 2

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary3053

strtoul_test$407:	; Assign value £temporary3053
x50362:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50366:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$410:	; Parameter 25 text 8
x50371:	mov [bp + 33], bp	; 3: 137 110 33
x50374:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x50378:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50382:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x50386:	mov ax, [bp + 19]	; 3: 139 70 19
x50389:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x50392:	mov ax, [bp + 6]	; 3: 139 70 6
x50395:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x50398:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 241 196
x50403:	mov [bp + 27], bp	; 3: 137 110 27
x50406:	add bp, 25	; 3: 131 197 25
x50409:	mov di, bp	; 2: 137 239
x50411:	add di, 10	; 3: 131 199 10
x50414:	jmp printf	; 3: 233 212 71

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x50417:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x50422:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x50426:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x50430:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x50434:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x50438:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x50442:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x50446:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x50450:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x50454:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x50458:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x50462:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x50466:	mov [bp + 27], bp	; 3: 137 110 27
x50469:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary3066 pointer
x50473:	mov si, bp	; 2: 137 238
x50475:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary3066 8
x50478:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x50481:	mov ax, [bp + 6]	; 3: 139 70 6
x50484:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x50487:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 69 197
x50492:	mov [bp + 23], bp	; 3: 137 110 23
x50495:	add bp, 21	; 3: 131 197 21
x50498:	jmp strtoul	; 3: 233 227 1

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary3067

strtoul_test$436:	; Assign value £temporary3067
x50501:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50505:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$439:	; Parameter 25 text 8
x50510:	mov [bp + 33], bp	; 3: 137 110 33
x50513:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x50517:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50521:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x50525:	mov ax, [bp + 19]	; 3: 139 70 19
x50528:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x50531:	mov ax, [bp + 6]	; 3: 139 70 6
x50534:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x50537:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 124 197
x50542:	mov [bp + 27], bp	; 3: 137 110 27
x50545:	add bp, 25	; 3: 131 197 25
x50548:	mov di, bp	; 2: 137 239
x50550:	add di, 10	; 3: 131 199 10
x50553:	jmp printf	; 3: 233 73 71

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x50556:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x50561:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x50565:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x50569:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x50573:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x50577:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x50581:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x50585:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x50589:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x50593:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x50597:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x50601:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x50605:	mov [bp + 27], bp	; 3: 137 110 27
x50608:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary3080 pointer
x50612:	mov si, bp	; 2: 137 238
x50614:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary3080 8
x50617:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x50620:	mov ax, [bp + 6]	; 3: 139 70 6
x50623:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x50626:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 208 197
x50631:	mov [bp + 23], bp	; 3: 137 110 23
x50634:	add bp, 21	; 3: 131 197 21
x50637:	jmp strtoul	; 3: 233 88 1

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary3081

strtoul_test$465:	; Assign value £temporary3081
x50640:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50644:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$468:	; Parameter 25 text 8
x50649:	mov [bp + 33], bp	; 3: 137 110 33
x50652:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x50656:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50660:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x50664:	mov ax, [bp + 19]	; 3: 139 70 19
x50667:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x50670:	mov ax, [bp + 6]	; 3: 139 70 6
x50673:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x50676:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 7 198
x50681:	mov [bp + 27], bp	; 3: 137 110 27
x50684:	add bp, 25	; 3: 131 197 25
x50687:	mov di, bp	; 2: 137 239
x50689:	add di, 10	; 3: 131 199 10
x50692:	jmp printf	; 3: 233 190 70

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x50695:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x50700:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x50704:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x50708:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x50712:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x50716:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x50720:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x50724:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x50728:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x50732:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x50736:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x50740:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x50744:	mov [bp + 27], bp	; 3: 137 110 27
x50747:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary3094 pointer
x50751:	mov si, bp	; 2: 137 238
x50753:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary3094 8
x50756:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x50759:	mov ax, [bp + 6]	; 3: 139 70 6
x50762:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x50765:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 91 198
x50770:	mov [bp + 23], bp	; 3: 137 110 23
x50773:	add bp, 21	; 3: 131 197 21
x50776:	jmp strtoul	; 3: 233 205 0

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary3095

strtoul_test$494:	; Assign value £temporary3095
x50779:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50783:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$497:	; Parameter 25 text 8
x50788:	mov [bp + 33], bp	; 3: 137 110 33
x50791:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x50795:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50799:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x50803:	mov ax, [bp + 19]	; 3: 139 70 19
x50806:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x50809:	mov ax, [bp + 6]	; 3: 139 70 6
x50812:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x50815:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 146 198
x50820:	mov [bp + 27], bp	; 3: 137 110 27
x50823:	add bp, 25	; 3: 131 197 25
x50826:	mov di, bp	; 2: 137 239
x50828:	add di, 10	; 3: 131 199 10
x50831:	jmp printf	; 3: 233 51 70

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x50834:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x50839:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x50843:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x50847:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x50851:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x50855:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x50859:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x50863:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x50867:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x50871:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x50875:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x50879:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x50883:	mov [bp + 27], bp	; 3: 137 110 27
x50886:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary3108 pointer
x50890:	mov si, bp	; 2: 137 238
x50892:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary3108 8
x50895:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x50898:	mov ax, [bp + 6]	; 3: 139 70 6
x50901:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x50904:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 230 198
x50909:	mov [bp + 23], bp	; 3: 137 110 23
x50912:	add bp, 21	; 3: 131 197 21
x50915:	nop	; 1: 144
x50916:	jmp strtoul	; 2: 235 66

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary3109

strtoul_test$523:	; Assign value £temporary3109
x50918:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50922:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 188

strtoul_test$526:	; Parameter 25 text 8
x50927:	mov [bp + 33], bp	; 3: 137 110 33
x50930:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x50934:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50938:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x50942:	mov ax, [bp + 19]	; 3: 139 70 19
x50945:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x50948:	mov ax, [bp + 6]	; 3: 139 70 6
x50951:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x50954:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 29 199
x50959:	mov [bp + 27], bp	; 3: 137 110 27
x50962:	add bp, 25	; 3: 131 197 25
x50965:	mov di, bp	; 2: 137 239
x50967:	add di, 10	; 3: 131 199 10
x50970:	jmp printf	; 3: 233 168 69

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x50973:	mov ax, [bp]	; 3: 139 70 0
x50976:	mov di, [bp + 4]	; 3: 139 126 4
x50979:	mov bp, [bp + 2]	; 3: 139 110 2
x50982:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

strtoul:	; Assign g_inStatus 1
x50984:	mov word [g_inStatus], 1	; 6: 199 6 227 86 1 0

strtoul$1:	; Assign g_inDevice s
x50990:	mov ax, [bp + 6]	; 3: 139 70 6
x50993:	mov [g_inDevice], ax	; 3: 163 229 86

strtoul$2:	; Assign g_inChars 0
x50996:	mov word [g_inChars], 0	; 6: 199 6 8 92 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x51002:	mov ax, [bp + 10]	; 3: 139 70 10
x51005:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x51008:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 78 199
x51013:	mov [bp + 14], bp	; 3: 137 110 14
x51016:	add bp, 12	; 3: 131 197 12
x51019:	jmp scanUnsignedLongInt	; 3: 233 233 155

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2844

strtoul$8:	; Assign unsignedLongValue £temporary2844
x51022:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x51026:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x51030:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2846 -> endp endp 0
x51032:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2846 -> endp s g_inChars
x51035:	mov ax, [bp + 6]	; 3: 139 70 6
x51038:	add ax, [g_inChars]	; 4: 3 6 8 92
x51042:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x51044:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x51048:	mov ax, [bp]	; 3: 139 70 0
x51051:	mov di, [bp + 4]	; 3: 139 126 4
x51054:	mov bp, [bp + 2]	; 3: 139 110 2
x51057:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x51059:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x51063:	mov word [bp + 6], character_test$3	; 5: 199 70 6 133 199
x51068:	mov [bp + 8], bp	; 3: 137 110 8
x51071:	add bp, 6	; 3: 131 197 6
x51074:	nop	; 1: 144
x51075:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x51077:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x51081:	mov word [bp + 6], character_test$7	; 5: 199 70 6 151 199
x51086:	mov [bp + 8], bp	; 3: 137 110 8
x51089:	add bp, 6	; 3: 131 197 6
x51092:	nop	; 1: 144
x51093:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x51095:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x51099:	mov word [bp + 6], character_test$11	; 5: 199 70 6 169 199
x51104:	mov [bp + 8], bp	; 3: 137 110 8
x51107:	add bp, 6	; 3: 131 197 6
x51110:	nop	; 1: 144
x51111:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x51113:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x51117:	mov word [bp + 6], character_test$15	; 5: 199 70 6 187 199
x51122:	mov [bp + 8], bp	; 3: 137 110 8
x51125:	add bp, 6	; 3: 131 197 6
x51128:	nop	; 1: 144
x51129:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x51131:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x51135:	mov word [bp + 6], character_test$19	; 5: 199 70 6 205 199
x51140:	mov [bp + 8], bp	; 3: 137 110 8
x51143:	add bp, 6	; 3: 131 197 6
x51146:	nop	; 1: 144
x51147:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x51149:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x51153:	mov word [bp + 6], character_test$23	; 5: 199 70 6 223 199
x51158:	mov [bp + 8], bp	; 3: 137 110 8
x51161:	add bp, 6	; 3: 131 197 6
x51164:	nop	; 1: 144
x51165:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x51167:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x51171:	mov word [bp + 6], character_test$27	; 5: 199 70 6 241 199
x51176:	mov [bp + 8], bp	; 3: 137 110 8
x51179:	add bp, 6	; 3: 131 197 6
x51182:	nop	; 1: 144
x51183:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x51185:	mov ax, [bp]	; 3: 139 70 0
x51188:	mov di, [bp + 4]	; 3: 139 126 4
x51191:	mov bp, [bp + 2]	; 3: 139 110 2
x51194:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x51196:	mov word [bp + 13], string_ascii2025i0A#	; 5: 199 70 13 186 204

character_testX$2:	; IntegralToIntegral £temporary4254 c
x51201:	mov al, [bp + 6]	; 3: 138 70 6
x51204:	and ax, 255	; 3: 37 255 0
x51207:	cmp al, 0	; 2: 60 0
x51209:	jge character_testX$3	; 2: 125 4
x51211:	neg al	; 2: 246 216
x51213:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4254 8
x51215:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x51218:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 37 200
x51223:	mov [bp + 9], bp	; 3: 137 110 9
x51226:	add bp, 7	; 3: 131 197 7
x51229:	mov di, bp	; 2: 137 239
x51231:	add di, 2	; 3: 131 199 2
x51234:	jmp printf	; 3: 233 160 68

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x51237:	mov word [bp + 13], string_islower282725c2729203D2025s0A#	; 5: 199 70 13 196 204

character_testX$8:	; IntegralToIntegral £temporary4256 c
x51242:	mov al, [bp + 6]	; 3: 138 70 6
x51245:	and ax, 255	; 3: 37 255 0
x51248:	cmp al, 0	; 2: 60 0
x51250:	jge character_testX$9	; 2: 125 4
x51252:	neg al	; 2: 246 216
x51254:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4256 8
x51256:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4257 c
x51259:	mov al, [bp + 6]	; 3: 138 70 6
x51262:	and ax, 255	; 3: 37 255 0
x51265:	cmp al, 0	; 2: 60 0
x51267:	jge character_testX$12	; 2: 125 4
x51269:	neg al	; 2: 246 216
x51271:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4257 16
x51273:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x51276:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 90 200
x51281:	mov [bp + 19], bp	; 3: 137 110 19
x51284:	add bp, 17	; 3: 131 197 17
x51287:	jmp islower	; 3: 233 116 153

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4258

character_testX$16:	; Equal 19 £temporary4258 0
x51290:	cmp bx, 0	; 3: 131 251 0
x51293:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4263 string_Yes#
x51295:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$18:	; Goto 20
x51298:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4263 string_No#
x51300:	mov ax, string_No#	; 3: 184 161 79

character_testX$20:	; Parameter 7 £temporary4263 10
x51303:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x51306:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 125 200
x51311:	mov [bp + 9], bp	; 3: 137 110 9
x51314:	add bp, 7	; 3: 131 197 7
x51317:	mov di, bp	; 2: 137 239
x51319:	add di, 4	; 3: 131 199 4
x51322:	jmp printf	; 3: 233 72 68

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x51325:	mov word [bp + 13], string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 216 204

character_testX$25:	; IntegralToIntegral £temporary4265 c
x51330:	mov al, [bp + 6]	; 3: 138 70 6
x51333:	and ax, 255	; 3: 37 255 0
x51336:	cmp al, 0	; 2: 60 0
x51338:	jge character_testX$26	; 2: 125 4
x51340:	neg al	; 2: 246 216
x51342:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4265 8
x51344:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4266 c
x51347:	mov al, [bp + 6]	; 3: 138 70 6
x51350:	and ax, 255	; 3: 37 255 0
x51353:	cmp al, 0	; 2: 60 0
x51355:	jge character_testX$29	; 2: 125 4
x51357:	neg al	; 2: 246 216
x51359:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4266 16
x51361:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x51364:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 178 200
x51369:	mov [bp + 19], bp	; 3: 137 110 19
x51372:	add bp, 17	; 3: 131 197 17
x51375:	jmp isupper	; 3: 233 23 85

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4267

character_testX$33:	; Equal 36 £temporary4267 0
x51378:	cmp bx, 0	; 3: 131 251 0
x51381:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4272 string_Yes#
x51383:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$35:	; Goto 37
x51386:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4272 string_No#
x51388:	mov ax, string_No#	; 3: 184 161 79

character_testX$37:	; Parameter 7 £temporary4272 10
x51391:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x51394:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 213 200
x51399:	mov [bp + 9], bp	; 3: 137 110 9
x51402:	add bp, 7	; 3: 131 197 7
x51405:	mov di, bp	; 2: 137 239
x51407:	add di, 4	; 3: 131 199 4
x51410:	jmp printf	; 3: 233 240 67

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x51413:	mov word [bp + 13], string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 236 204

character_testX$42:	; IntegralToIntegral £temporary4274 c
x51418:	mov al, [bp + 6]	; 3: 138 70 6
x51421:	and ax, 255	; 3: 37 255 0
x51424:	cmp al, 0	; 2: 60 0
x51426:	jge character_testX$43	; 2: 125 4
x51428:	neg al	; 2: 246 216
x51430:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4274 8
x51432:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4275 c
x51435:	mov al, [bp + 6]	; 3: 138 70 6
x51438:	and ax, 255	; 3: 37 255 0
x51441:	cmp al, 0	; 2: 60 0
x51443:	jge character_testX$46	; 2: 125 4
x51445:	neg al	; 2: 246 216
x51447:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4275 16
x51449:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x51452:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 10 201
x51457:	mov [bp + 19], bp	; 3: 137 110 19
x51460:	add bp, 17	; 3: 131 197 17
x51463:	jmp isalpha	; 3: 233 196 4

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4276

character_testX$50:	; Equal 53 £temporary4276 0
x51466:	cmp bx, 0	; 3: 131 251 0
x51469:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4281 string_Yes#
x51471:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$52:	; Goto 54
x51474:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4281 string_No#
x51476:	mov ax, string_No#	; 3: 184 161 79

character_testX$54:	; Parameter 7 £temporary4281 10
x51479:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x51482:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 45 201
x51487:	mov [bp + 9], bp	; 3: 137 110 9
x51490:	add bp, 7	; 3: 131 197 7
x51493:	mov di, bp	; 2: 137 239
x51495:	add di, 4	; 3: 131 199 4
x51498:	jmp printf	; 3: 233 152 67

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x51501:	mov word [bp + 13], string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 0 205

character_testX$59:	; IntegralToIntegral £temporary4283 c
x51506:	mov al, [bp + 6]	; 3: 138 70 6
x51509:	and ax, 255	; 3: 37 255 0
x51512:	cmp al, 0	; 2: 60 0
x51514:	jge character_testX$60	; 2: 125 4
x51516:	neg al	; 2: 246 216
x51518:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4283 8
x51520:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4284 c
x51523:	mov al, [bp + 6]	; 3: 138 70 6
x51526:	and ax, 255	; 3: 37 255 0
x51529:	cmp al, 0	; 2: 60 0
x51531:	jge character_testX$63	; 2: 125 4
x51533:	neg al	; 2: 246 216
x51535:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4284 16
x51537:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x51540:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 98 201
x51545:	mov [bp + 19], bp	; 3: 137 110 19
x51548:	add bp, 17	; 3: 131 197 17
x51551:	jmp isdigit	; 3: 233 155 97

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4285

character_testX$67:	; Equal 70 £temporary4285 0
x51554:	cmp bx, 0	; 3: 131 251 0
x51557:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4290 string_Yes#
x51559:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$69:	; Goto 71
x51562:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4290 string_No#
x51564:	mov ax, string_No#	; 3: 184 161 79

character_testX$71:	; Parameter 7 £temporary4290 10
x51567:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x51570:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 133 201
x51575:	mov [bp + 9], bp	; 3: 137 110 9
x51578:	add bp, 7	; 3: 131 197 7
x51581:	mov di, bp	; 2: 137 239
x51583:	add di, 4	; 3: 131 199 4
x51586:	jmp printf	; 3: 233 64 67

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x51589:	mov word [bp + 13], string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 20 205

character_testX$76:	; IntegralToIntegral £temporary4292 c
x51594:	mov al, [bp + 6]	; 3: 138 70 6
x51597:	and ax, 255	; 3: 37 255 0
x51600:	cmp al, 0	; 2: 60 0
x51602:	jge character_testX$77	; 2: 125 4
x51604:	neg al	; 2: 246 216
x51606:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4292 8
x51608:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4293 c
x51611:	mov al, [bp + 6]	; 3: 138 70 6
x51614:	and ax, 255	; 3: 37 255 0
x51617:	cmp al, 0	; 2: 60 0
x51619:	jge character_testX$80	; 2: 125 4
x51621:	neg al	; 2: 246 216
x51623:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4293 16
x51625:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x51628:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 186 201
x51633:	mov [bp + 19], bp	; 3: 137 110 19
x51636:	add bp, 17	; 3: 131 197 17
x51639:	jmp isalnum	; 3: 233 89 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4294

character_testX$84:	; Equal 87 £temporary4294 0
x51642:	cmp bx, 0	; 3: 131 251 0
x51645:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4299 string_Yes#
x51647:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$86:	; Goto 88
x51650:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4299 string_No#
x51652:	mov ax, string_No#	; 3: 184 161 79

character_testX$88:	; Parameter 7 £temporary4299 10
x51655:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x51658:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 221 201
x51663:	mov [bp + 9], bp	; 3: 137 110 9
x51666:	add bp, 7	; 3: 131 197 7
x51669:	mov di, bp	; 2: 137 239
x51671:	add di, 4	; 3: 131 199 4
x51674:	jmp printf	; 3: 233 232 66

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x51677:	mov word [bp + 13], string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 40 205

character_testX$93:	; IntegralToIntegral £temporary4301 c
x51682:	mov al, [bp + 6]	; 3: 138 70 6
x51685:	and ax, 255	; 3: 37 255 0
x51688:	cmp al, 0	; 2: 60 0
x51690:	jge character_testX$94	; 2: 125 4
x51692:	neg al	; 2: 246 216
x51694:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4301 8
x51696:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4302 c
x51699:	mov al, [bp + 6]	; 3: 138 70 6
x51702:	and ax, 255	; 3: 37 255 0
x51705:	cmp al, 0	; 2: 60 0
x51707:	jge character_testX$97	; 2: 125 4
x51709:	neg al	; 2: 246 216
x51711:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4302 16
x51713:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x51716:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 18 202
x51721:	mov [bp + 19], bp	; 3: 137 110 19
x51724:	add bp, 17	; 3: 131 197 17
x51727:	jmp isxdigit	; 3: 233 70 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4303

character_testX$101:	; Equal 104 £temporary4303 0
x51730:	cmp bx, 0	; 3: 131 251 0
x51733:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4308 string_Yes#
x51735:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$103:	; Goto 105
x51738:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4308 string_No#
x51740:	mov ax, string_No#	; 3: 184 161 79

character_testX$105:	; Parameter 7 £temporary4308 10
x51743:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x51746:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 53 202
x51751:	mov [bp + 9], bp	; 3: 137 110 9
x51754:	add bp, 7	; 3: 131 197 7
x51757:	mov di, bp	; 2: 137 239
x51759:	add di, 4	; 3: 131 199 4
x51762:	jmp printf	; 3: 233 144 66

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x51765:	mov word [bp + 13], string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 61 205

character_testX$110:	; IntegralToIntegral £temporary4310 c
x51770:	mov al, [bp + 6]	; 3: 138 70 6
x51773:	and ax, 255	; 3: 37 255 0
x51776:	cmp al, 0	; 2: 60 0
x51778:	jge character_testX$111	; 2: 125 4
x51780:	neg al	; 2: 246 216
x51782:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4310 8
x51784:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4311 c
x51787:	mov al, [bp + 6]	; 3: 138 70 6
x51790:	and ax, 255	; 3: 37 255 0
x51793:	cmp al, 0	; 2: 60 0
x51795:	jge character_testX$114	; 2: 125 4
x51797:	neg al	; 2: 246 216
x51799:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4311 16
x51801:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x51804:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 106 202
x51809:	mov [bp + 19], bp	; 3: 137 110 19
x51812:	add bp, 17	; 3: 131 197 17
x51815:	jmp isgraph	; 3: 233 50 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4312

character_testX$118:	; Equal 121 £temporary4312 0
x51818:	cmp bx, 0	; 3: 131 251 0
x51821:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4317 string_Yes#
x51823:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$120:	; Goto 122
x51826:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4317 string_No#
x51828:	mov ax, string_No#	; 3: 184 161 79

character_testX$122:	; Parameter 7 £temporary4317 10
x51831:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x51834:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 141 202
x51839:	mov [bp + 9], bp	; 3: 137 110 9
x51842:	add bp, 7	; 3: 131 197 7
x51845:	mov di, bp	; 2: 137 239
x51847:	add di, 4	; 3: 131 199 4
x51850:	jmp printf	; 3: 233 56 66

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x51853:	mov word [bp + 13], string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 81 205

character_testX$127:	; IntegralToIntegral £temporary4319 c
x51858:	mov al, [bp + 6]	; 3: 138 70 6
x51861:	and ax, 255	; 3: 37 255 0
x51864:	cmp al, 0	; 2: 60 0
x51866:	jge character_testX$128	; 2: 125 4
x51868:	neg al	; 2: 246 216
x51870:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4319 8
x51872:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4320 c
x51875:	mov al, [bp + 6]	; 3: 138 70 6
x51878:	and ax, 255	; 3: 37 255 0
x51881:	cmp al, 0	; 2: 60 0
x51883:	jge character_testX$131	; 2: 125 4
x51885:	neg al	; 2: 246 216
x51887:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4320 16
x51889:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x51892:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 194 202
x51897:	mov [bp + 19], bp	; 3: 137 110 19
x51900:	add bp, 17	; 3: 131 197 17
x51903:	jmp isprint	; 3: 233 249 3

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4321

character_testX$135:	; Equal 138 £temporary4321 0
x51906:	cmp bx, 0	; 3: 131 251 0
x51909:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4326 string_Yes#
x51911:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$137:	; Goto 139
x51914:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4326 string_No#
x51916:	mov ax, string_No#	; 3: 184 161 79

character_testX$139:	; Parameter 7 £temporary4326 10
x51919:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x51922:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 229 202
x51927:	mov [bp + 9], bp	; 3: 137 110 9
x51930:	add bp, 7	; 3: 131 197 7
x51933:	mov di, bp	; 2: 137 239
x51935:	add di, 4	; 3: 131 199 4
x51938:	jmp printf	; 3: 233 224 65

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x51941:	mov word [bp + 13], string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 101 205

character_testX$144:	; IntegralToIntegral £temporary4328 c
x51946:	mov al, [bp + 6]	; 3: 138 70 6
x51949:	and ax, 255	; 3: 37 255 0
x51952:	cmp al, 0	; 2: 60 0
x51954:	jge character_testX$145	; 2: 125 4
x51956:	neg al	; 2: 246 216
x51958:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4328 8
x51960:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4329 c
x51963:	mov al, [bp + 6]	; 3: 138 70 6
x51966:	and ax, 255	; 3: 37 255 0
x51969:	cmp al, 0	; 2: 60 0
x51971:	jge character_testX$148	; 2: 125 4
x51973:	neg al	; 2: 246 216
x51975:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4329 16
x51977:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x51980:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 26 203
x51985:	mov [bp + 19], bp	; 3: 137 110 19
x51988:	add bp, 17	; 3: 131 197 17
x51991:	jmp ispunct	; 3: 233 211 3

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4330

character_testX$152:	; Equal 155 £temporary4330 0
x51994:	cmp bx, 0	; 3: 131 251 0
x51997:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4335 string_Yes#
x51999:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$154:	; Goto 156
x52002:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4335 string_No#
x52004:	mov ax, string_No#	; 3: 184 161 79

character_testX$156:	; Parameter 7 £temporary4335 10
x52007:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x52010:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 61 203
x52015:	mov [bp + 9], bp	; 3: 137 110 9
x52018:	add bp, 7	; 3: 131 197 7
x52021:	mov di, bp	; 2: 137 239
x52023:	add di, 4	; 3: 131 199 4
x52026:	jmp printf	; 3: 233 136 65

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x52029:	mov word [bp + 13], string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 121 205

character_testX$161:	; IntegralToIntegral £temporary4337 c
x52034:	mov al, [bp + 6]	; 3: 138 70 6
x52037:	and ax, 255	; 3: 37 255 0
x52040:	cmp al, 0	; 2: 60 0
x52042:	jge character_testX$162	; 2: 125 4
x52044:	neg al	; 2: 246 216
x52046:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4337 8
x52048:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4338 c
x52051:	mov al, [bp + 6]	; 3: 138 70 6
x52054:	and ax, 255	; 3: 37 255 0
x52057:	cmp al, 0	; 2: 60 0
x52059:	jge character_testX$165	; 2: 125 4
x52061:	neg al	; 2: 246 216
x52063:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4338 16
x52065:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x52068:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 114 203
x52073:	mov [bp + 19], bp	; 3: 137 110 19
x52076:	add bp, 17	; 3: 131 197 17
x52079:	jmp iscntrl	; 3: 233 192 3

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4339

character_testX$169:	; Equal 172 £temporary4339 0
x52082:	cmp bx, 0	; 3: 131 251 0
x52085:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4344 string_Yes#
x52087:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$171:	; Goto 173
x52090:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4344 string_No#
x52092:	mov ax, string_No#	; 3: 184 161 79

character_testX$173:	; Parameter 7 £temporary4344 10
x52095:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x52098:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 149 203
x52103:	mov [bp + 9], bp	; 3: 137 110 9
x52106:	add bp, 7	; 3: 131 197 7
x52109:	mov di, bp	; 2: 137 239
x52111:	add di, 4	; 3: 131 199 4
x52114:	jmp printf	; 3: 233 48 65

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x52117:	mov word [bp + 13], string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 141 205

character_testX$178:	; IntegralToIntegral £temporary4346 c
x52122:	mov al, [bp + 6]	; 3: 138 70 6
x52125:	and ax, 255	; 3: 37 255 0
x52128:	cmp al, 0	; 2: 60 0
x52130:	jge character_testX$179	; 2: 125 4
x52132:	neg al	; 2: 246 216
x52134:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4346 8
x52136:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4347 c
x52139:	mov al, [bp + 6]	; 3: 138 70 6
x52142:	and ax, 255	; 3: 37 255 0
x52145:	cmp al, 0	; 2: 60 0
x52147:	jge character_testX$182	; 2: 125 4
x52149:	neg al	; 2: 246 216
x52151:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4347 16
x52153:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x52156:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 202 203
x52161:	mov [bp + 19], bp	; 3: 137 110 19
x52164:	add bp, 17	; 3: 131 197 17
x52167:	jmp isspace	; 3: 233 252 146

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4348

character_testX$186:	; Equal 189 £temporary4348 0
x52170:	cmp bx, 0	; 3: 131 251 0
x52173:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4353 string_Yes#
x52175:	mov ax, string_Yes#	; 3: 184 157 79

character_testX$188:	; Goto 190
x52178:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4353 string_No#
x52180:	mov ax, string_No#	; 3: 184 161 79

character_testX$190:	; Parameter 7 £temporary4353 10
x52183:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x52186:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 237 203
x52191:	mov [bp + 9], bp	; 3: 137 110 9
x52194:	add bp, 7	; 3: 131 197 7
x52197:	mov di, bp	; 2: 137 239
x52199:	add di, 4	; 3: 131 199 4
x52202:	jmp printf	; 3: 233 216 64

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x52205:	mov word [bp + 13], string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 161 205

character_testX$195:	; IntegralToIntegral £temporary4355 c
x52210:	mov al, [bp + 6]	; 3: 138 70 6
x52213:	and ax, 255	; 3: 37 255 0
x52216:	cmp al, 0	; 2: 60 0
x52218:	jge character_testX$196	; 2: 125 4
x52220:	neg al	; 2: 246 216
x52222:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4355 8
x52224:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4356 c
x52227:	mov al, [bp + 6]	; 3: 138 70 6
x52230:	and ax, 255	; 3: 37 255 0
x52233:	cmp al, 0	; 2: 60 0
x52235:	jge character_testX$199	; 2: 125 4
x52237:	neg al	; 2: 246 216
x52239:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4356 16
x52241:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x52244:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 34 204
x52249:	mov [bp + 19], bp	; 3: 137 110 19
x52252:	add bp, 17	; 3: 131 197 17
x52255:	jmp tolower	; 3: 233 181 88

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4357

character_testX$203:	; IntegralToIntegral £temporary4358 £temporary4357
x52258:	cmp bx, 0	; 3: 131 251 0
x52261:	jge character_testX$204	; 2: 125 4
x52263:	neg bx	; 2: 247 219
x52265:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4359 £temporary4358
x52267:	and bx, 255	; 4: 129 227 255 0
x52271:	cmp bl, 0	; 3: 128 251 0
x52274:	jge character_testX$205	; 2: 125 4
x52276:	neg bl	; 2: 246 219
x52278:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4359 10
x52280:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x52283:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 78 204
x52288:	mov [bp + 9], bp	; 3: 137 110 9
x52291:	add bp, 7	; 3: 131 197 7
x52294:	mov di, bp	; 2: 137 239
x52296:	add di, 4	; 3: 131 199 4
x52299:	jmp printf	; 3: 233 119 64

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x52302:	mov word [bp + 13], string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 183 205

character_testX$210:	; IntegralToIntegral £temporary4361 c
x52307:	mov al, [bp + 6]	; 3: 138 70 6
x52310:	and ax, 255	; 3: 37 255 0
x52313:	cmp al, 0	; 2: 60 0
x52315:	jge character_testX$211	; 2: 125 4
x52317:	neg al	; 2: 246 216
x52319:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4361 8
x52321:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4362 c
x52324:	mov al, [bp + 6]	; 3: 138 70 6
x52327:	and ax, 255	; 3: 37 255 0
x52330:	cmp al, 0	; 2: 60 0
x52332:	jge character_testX$214	; 2: 125 4
x52334:	neg al	; 2: 246 216
x52336:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4362 16
x52338:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x52341:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 131 204
x52346:	mov [bp + 19], bp	; 3: 137 110 19
x52349:	add bp, 17	; 3: 131 197 17
x52352:	jmp toupper	; 3: 233 219 2

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4363

character_testX$218:	; IntegralToIntegral £temporary4364 £temporary4363
x52355:	cmp bx, 0	; 3: 131 251 0
x52358:	jge character_testX$219	; 2: 125 4
x52360:	neg bx	; 2: 247 219
x52362:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4365 £temporary4364
x52364:	and bx, 255	; 4: 129 227 255 0
x52368:	cmp bl, 0	; 3: 128 251 0
x52371:	jge character_testX$220	; 2: 125 4
x52373:	neg bl	; 2: 246 219
x52375:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4365 10
x52377:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x52380:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 175 204
x52385:	mov [bp + 9], bp	; 3: 137 110 9
x52388:	add bp, 7	; 3: 131 197 7
x52391:	mov di, bp	; 2: 137 239
x52393:	add di, 4	; 3: 131 199 4
x52396:	jmp printf	; 3: 233 22 64

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x52399:	mov ax, [bp]	; 3: 139 70 0
x52402:	mov di, [bp + 4]	; 3: 139 126 4
x52405:	mov bp, [bp + 2]	; 3: 139 110 2
x52408:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

string_ascii2025i0A#:
x52410:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

string_islower282725c2729203D2025s0A#:
x52420:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isupper282725c2729203D2025s0A#:
x52440:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isalpha282725c2729203D2025s0A#:
x52460:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isdigit282725c2729203D2025s0A#:
x52480:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isalnum282725c2729203D2025s0A#:
x52500:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isxdigit282725c2729203D2025s0A#:
x52520:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isgraph282725c2729203D2025s0A#:
x52541:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isprint282725c2729203D2025s0A#:
x52561:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

string_ispunct282725c2729203D2025s0A#:
x52581:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

string_iscntrl282725c2729203D2025s0A#:
x52601:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isspace282725c2729203D2025s0A#:
x52621:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

string_tolower282725c2729203D202725c270A#:
x52641:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

string_toupper282725c2729203D202725c270A0A#:
x52663:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x52686:	mov ax, [bp + 6]	; 3: 139 70 6
x52689:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x52692:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 226 205
x52697:	mov [bp + 10], bp	; 3: 137 110 10
x52700:	add bp, 8	; 3: 131 197 8
x52703:	jmp islower	; 3: 233 236 147

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary372

isalpha$5:	; NotEqual 12 £temporary372 0
x52706:	cmp bx, 0	; 3: 131 251 0
x52709:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x52711:	mov ax, [bp + 6]	; 3: 139 70 6
x52714:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x52717:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 251 205
x52722:	mov [bp + 10], bp	; 3: 137 110 10
x52725:	add bp, 8	; 3: 131 197 8
x52728:	jmp isupper	; 3: 233 206 79

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary373

isalpha$11:	; Equal 14 £temporary373 0
x52731:	cmp bx, 0	; 3: 131 251 0
x52734:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary377 1
x52736:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x52739:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary377 0
x52741:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary377

isalpha$16:	; Return £temporary377
x52744:	mov ax, [bp]	; 3: 139 70 0
x52747:	mov di, [bp + 4]	; 3: 139 126 4
x52750:	mov bp, [bp + 2]	; 3: 139 110 2
x52753:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x52755:	mov ax, [bp + 6]	; 3: 139 70 6
x52758:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x52761:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 39 206
x52766:	mov [bp + 10], bp	; 3: 137 110 10
x52769:	add bp, 8	; 3: 131 197 8
x52772:	nop	; 1: 144
x52773:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary384

isalnum$5:	; NotEqual 12 £temporary384 0
x52775:	cmp bx, 0	; 3: 131 251 0
x52778:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x52780:	mov ax, [bp + 6]	; 3: 139 70 6
x52783:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x52786:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 64 206
x52791:	mov [bp + 10], bp	; 3: 137 110 10
x52794:	add bp, 8	; 3: 131 197 8
x52797:	jmp isdigit	; 3: 233 189 92

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary385

isalnum$11:	; Equal 14 £temporary385 0
x52800:	cmp bx, 0	; 3: 131 251 0
x52803:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary389 1
x52805:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x52808:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary389 0
x52810:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary389

isalnum$16:	; Return £temporary389
x52813:	mov ax, [bp]	; 3: 139 70 0
x52816:	mov di, [bp + 4]	; 3: 139 126 4
x52819:	mov bp, [bp + 2]	; 3: 139 110 2
x52822:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x52824:	mov ax, [bp + 6]	; 3: 139 70 6
x52827:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x52830:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 108 206
x52835:	mov [bp + 10], bp	; 3: 137 110 10
x52838:	add bp, 8	; 3: 131 197 8
x52841:	jmp isdigit	; 3: 233 145 92

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary392

isxdigit$5:	; NotEqual 10 £temporary392 0
x52844:	cmp bx, 0	; 3: 131 251 0
x52847:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x52849:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x52853:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x52855:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x52859:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x52861:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x52865:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x52867:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x52871:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary402 1
x52873:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x52876:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary402 0
x52878:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary402

isxdigit$14:	; Return £temporary402
x52881:	mov ax, [bp]	; 3: 139 70 0
x52884:	mov di, [bp + 4]	; 3: 139 126 4
x52887:	mov bp, [bp + 2]	; 3: 139 110 2
x52890:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x52892:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x52896:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x52898:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x52902:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary407 1
x52904:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x52907:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary407 0
x52909:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary407

isgraph$6:	; Return £temporary407
x52912:	mov ax, [bp]	; 3: 139 70 0
x52915:	mov di, [bp + 4]	; 3: 139 126 4
x52918:	mov bp, [bp + 2]	; 3: 139 110 2
x52921:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x52923:	mov ax, [bp + 6]	; 3: 139 70 6
x52926:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x52929:	mov word [bp + 8], isprint$3	; 5: 199 70 8 207 206
x52934:	mov [bp + 10], bp	; 3: 137 110 10
x52937:	add bp, 8	; 3: 131 197 8
x52940:	nop	; 1: 144
x52941:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary408

isprint$5:	; Equal 9 £temporary408 0
x52943:	cmp bx, 0	; 3: 131 251 0
x52946:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x52948:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x52952:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary412 1
x52954:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x52957:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary412 0
x52959:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary412

isprint$11:	; Return £temporary412
x52962:	mov ax, [bp]	; 3: 139 70 0
x52965:	mov di, [bp + 4]	; 3: 139 126 4
x52968:	mov bp, [bp + 2]	; 3: 139 110 2
x52971:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x52973:	mov ax, [bp + 6]	; 3: 139 70 6
x52976:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x52979:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 1 207
x52984:	mov [bp + 10], bp	; 3: 137 110 10
x52987:	add bp, 8	; 3: 131 197 8
x52990:	nop	; 1: 144
x52991:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary414

ispunct$5:	; Equal 14 £temporary414 0
x52993:	cmp bx, 0	; 3: 131 251 0
x52996:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x52998:	mov ax, [bp + 6]	; 3: 139 70 6
x53001:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x53004:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 26 207
x53009:	mov [bp + 10], bp	; 3: 137 110 10
x53012:	add bp, 8	; 3: 131 197 8
x53015:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary415

ispunct$11:	; NotEqual 14 £temporary415 0
x53018:	cmp bx, 0	; 3: 131 251 0
x53021:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary420 1
x53023:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x53026:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary420 0
x53028:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary420

ispunct$16:	; Return £temporary420
x53031:	mov ax, [bp]	; 3: 139 70 0
x53034:	mov di, [bp + 4]	; 3: 139 126 4
x53037:	mov bp, [bp + 2]	; 3: 139 110 2
x53040:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x53042:	mov ax, [bp + 6]	; 3: 139 70 6
x53045:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x53048:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 70 207
x53053:	mov [bp + 10], bp	; 3: 137 110 10
x53056:	add bp, 8	; 3: 131 197 8
x53059:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary423

iscntrl$5:	; NotEqual 8 £temporary423 0
x53062:	cmp bx, 0	; 3: 131 251 0
x53065:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary426 1
x53067:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x53070:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary426 0
x53072:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary426

iscntrl$10:	; Return £temporary426
x53075:	mov ax, [bp]	; 3: 139 70 0
x53078:	mov di, [bp + 4]	; 3: 139 126 4
x53081:	mov bp, [bp + 2]	; 3: 139 110 2
x53084:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x53086:	mov ax, [bp + 6]	; 3: 139 70 6
x53089:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x53092:	mov word [bp + 8], toupper$3	; 5: 199 70 8 114 207
x53097:	mov [bp + 10], bp	; 3: 137 110 10
x53100:	add bp, 8	; 3: 131 197 8
x53103:	jmp islower	; 3: 233 92 146

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary455

toupper$5:	; Equal 31 £temporary455 0
x53106:	cmp bx, 0	; 3: 131 251 0
x53109:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x53111:	mov word [bp + 8], toupper$8	; 5: 199 70 8 133 207
x53116:	mov [bp + 10], bp	; 3: 137 110 10
x53119:	add bp, 8	; 3: 131 197 8
x53122:	jmp localeconv	; 3: 233 175 78

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary456

toupper$10:	; Assign localeConvPtr £temporary456
x53125:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x53128:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x53132:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary458 -> localeConvPtr localeConvPtr 12
x53134:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary458 -> localeConvPtr
x53137:	mov ax, [si + 12]	; 3: 139 68 12
x53140:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary459 -> localeConvPtr localeConvPtr 14
x53143:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary459 -> localeConvPtr
x53146:	mov ax, [si + 14]	; 3: 139 68 14
x53149:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x53152:	mov ax, [bp + 10]	; 3: 139 70 10
x53155:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x53158:	mov ax, [bp + 6]	; 3: 139 70 6
x53161:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x53164:	mov word [bp + 14], toupper$20	; 5: 199 70 14 186 207
x53169:	mov [bp + 16], bp	; 3: 137 110 16
x53172:	add bp, 14	; 3: 131 197 14
x53175:	jmp strchr	; 3: 233 188 81

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary460

toupper$22:	; BinarySubtract index £temporary460 lowerCase
x53178:	sub bx, [bp + 10]	; 3: 43 94 10
x53181:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary463 upperCase index
x53184:	mov si, [bp + 12]	; 3: 139 118 12
x53187:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary462 -> £temporary463 £temporary463 0

toupper$25:	; IntegralToIntegral £temporary464 £temporary462 -> £temporary463
x53190:	mov bl, [si]	; 2: 138 28
x53192:	and bx, 255	; 4: 129 227 255 0
x53196:	cmp bl, 0	; 3: 128 251 0
x53199:	jge toupper$26	; 2: 125 4
x53201:	neg bl	; 2: 246 219
x53203:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary464

toupper$27:	; Return £temporary464
x53205:	mov ax, [bp]	; 3: 139 70 0
x53208:	mov di, [bp + 4]	; 3: 139 126 4
x53211:	mov bp, [bp + 2]	; 3: 139 110 2
x53214:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary465 c 32
x53216:	mov bx, [bp + 6]	; 3: 139 94 6
x53219:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary465

toupper$30:	; Return £temporary465
x53222:	mov ax, [bp]	; 3: 139 70 0
x53225:	mov di, [bp + 4]	; 3: 139 126 4
x53228:	mov bp, [bp + 2]	; 3: 139 110 2
x53231:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x53233:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x53236:	mov ax, [bp]	; 3: 139 70 0
x53239:	mov di, [bp + 4]	; 3: 139 126 4
x53242:	mov bp, [bp + 2]	; 3: 139 110 2
x53245:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x53247:	mov ax, [bp]	; 3: 139 70 0
x53250:	mov di, [bp + 4]	; 3: 139 126 4
x53253:	mov bp, [bp + 2]	; 3: 139 110 2
x53256:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x53258:
