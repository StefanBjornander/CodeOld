	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 230 203
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 230 203 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 220 53

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 stdio_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp stdio_test	; 3: 233 177 105

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 time_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp time_test	; 3: 233 56 116

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 assert_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp assert_test	; 3: 233 92 137

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 malloc_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp malloc_test	; 3: 233 233 137

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 print_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp print_test	; 3: 233 154 141

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 limits_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp limits_test	; 3: 233 83 144

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 float_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp float_test	; 3: 233 255 146

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 string_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp string_test	; 3: 233 252 146

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 setjmp_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp setjmp_test	; 3: 233 0 160

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 51 105

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 160 161

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 210 172

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 30 183

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 84 193

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 210 201

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 41 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 20 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 255 2

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 236 2

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 215 2

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 194 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 175 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 154 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 133 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 112 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 91 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 70 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 49 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 28 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 7 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 242 1

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 221 1

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 67 48

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 39 48

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [float8$2.0#]	; 4: 221 6 38 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 13 48

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [float8$minus2.0#]	; 4: 221 6 62 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 243 47

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [float8$2.0#]	; 4: 221 6 38 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 217 47

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [float8$minus2.0#]	; 4: 221 6 62 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 191 47

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 167 47

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [float8$2#]	; 4: 221 6 70 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 141 47

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [float8$minus2#]	; 4: 221 6 78 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 115 47

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [float8$minus1.0#]	; 4: 221 6 230 4

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [float8$minus1.0#]	; 4: 221 6 230 4

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 87 47

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [float8$minus2.0#]	; 4: 221 6 62 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [float8$minus4.0#]	; 4: 221 6 86 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 59 47

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

float8$minus2.0#:
x1342:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

float8$2#:
x1350:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

float8$minus2#:
x1358:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

float8$minus4.0#:
x1366:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1374:	mov word [bp + 20], string_3C25f3E0A#	; 5: 199 70 20 148 10

math_test_1$2:	; PushFloat x
x1379:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1382:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1385:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 124 5
x1390:	mov [bp + 16], bp	; 3: 137 110 16
x1393:	add bp, 14	; 3: 131 197 14
x1396:	mov di, bp	; 2: 137 239
x1398:	add di, 8	; 3: 131 199 8
x1401:	jmp printf	; 3: 233 73 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1404:	mov word [bp + 20], string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 154 10

math_test_1$8:	; PushFloat x
x1409:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1412:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1415:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1418:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1421:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 155 5
x1426:	mov [bp + 32], bp	; 3: 137 110 32
x1429:	add bp, 30	; 3: 131 197 30
x1432:	jmp sin	; 3: 233 129 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4812

math_test_1$16:	; Parameter 14 £temporary4812 16
x1435:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1438:	mov ax, [errno]	; 3: 161 182 10
x1441:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1444:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 183 5
x1449:	mov [bp + 16], bp	; 3: 137 110 16
x1452:	add bp, 14	; 3: 131 197 14
x1455:	mov di, bp	; 2: 137 239
x1457:	add di, 18	; 3: 131 199 18
x1460:	jmp printf	; 3: 233 14 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1463:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1469:	mov word [bp + 20], string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 184 10

math_test_1$23:	; PushFloat x
x1474:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1477:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1480:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1483:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1486:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 220 5
x1491:	mov [bp + 32], bp	; 3: 137 110 32
x1494:	add bp, 30	; 3: 131 197 30
x1497:	jmp cos	; 3: 233 153 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4814

math_test_1$31:	; Parameter 14 £temporary4814 16
x1500:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1503:	mov ax, [errno]	; 3: 161 182 10
x1506:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1509:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 248 5
x1514:	mov [bp + 16], bp	; 3: 137 110 16
x1517:	add bp, 14	; 3: 131 197 14
x1520:	mov di, bp	; 2: 137 239
x1522:	add di, 18	; 3: 131 199 18
x1525:	jmp printf	; 3: 233 205 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1528:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1534:	mov word [bp + 20], string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 212 10

math_test_1$38:	; PushFloat x
x1539:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1542:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1545:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1548:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1551:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 29 6
x1556:	mov [bp + 32], bp	; 3: 137 110 32
x1559:	add bp, 30	; 3: 131 197 30
x1562:	jmp tan	; 3: 233 50 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4816

math_test_1$46:	; Parameter 14 £temporary4816 16
x1565:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1568:	mov ax, [errno]	; 3: 161 182 10
x1571:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1574:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 57 6
x1579:	mov [bp + 16], bp	; 3: 137 110 16
x1582:	add bp, 14	; 3: 131 197 14
x1585:	mov di, bp	; 2: 137 239
x1587:	add di, 18	; 3: 131 199 18
x1590:	jmp printf	; 3: 233 140 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1593:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1599:	mov word [bp + 20], string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 240 10

math_test_1$53:	; PushFloat x
x1604:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1607:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1610:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1613:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1616:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 94 6
x1621:	mov [bp + 32], bp	; 3: 137 110 32
x1624:	add bp, 30	; 3: 131 197 30
x1627:	jmp asin	; 3: 233 76 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4818

math_test_1$61:	; Parameter 14 £temporary4818 16
x1630:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1633:	mov ax, [errno]	; 3: 161 182 10
x1636:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1639:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 122 6
x1644:	mov [bp + 16], bp	; 3: 137 110 16
x1647:	add bp, 14	; 3: 131 197 14
x1650:	mov di, bp	; 2: 137 239
x1652:	add di, 18	; 3: 131 199 18
x1655:	jmp printf	; 3: 233 75 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1658:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1664:	mov word [bp + 20], string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 13 11

math_test_1$68:	; PushFloat x
x1669:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1672:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1675:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1678:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1681:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 159 6
x1686:	mov [bp + 32], bp	; 3: 137 110 32
x1689:	add bp, 30	; 3: 131 197 30
x1692:	jmp acos	; 3: 233 166 41

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4820

math_test_1$76:	; Parameter 14 £temporary4820 16
x1695:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1698:	mov ax, [errno]	; 3: 161 182 10
x1701:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1704:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 187 6
x1709:	mov [bp + 16], bp	; 3: 137 110 16
x1712:	add bp, 14	; 3: 131 197 14
x1715:	mov di, bp	; 2: 137 239
x1717:	add di, 18	; 3: 131 199 18
x1720:	jmp printf	; 3: 233 10 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1723:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1729:	mov word [bp + 20], string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 42 11

math_test_1$83:	; PushFloat x
x1734:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1737:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1740:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1743:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1746:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 224 6
x1751:	mov [bp + 32], bp	; 3: 137 110 32
x1754:	add bp, 30	; 3: 131 197 30
x1757:	jmp atan	; 3: 233 244 39

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4822

math_test_1$91:	; Parameter 14 £temporary4822 16
x1760:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1763:	mov ax, [errno]	; 3: 161 182 10
x1766:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1769:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 252 6
x1774:	mov [bp + 16], bp	; 3: 137 110 16
x1777:	add bp, 14	; 3: 131 197 14
x1780:	mov di, bp	; 2: 137 239
x1782:	add di, 18	; 3: 131 199 18
x1785:	jmp printf	; 3: 233 201 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1788:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1794:	mov word [bp + 20], string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 71 11

math_test_1$98:	; PushFloat x
x1799:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1802:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1805:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1808:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1811:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 33 7
x1816:	mov [bp + 32], bp	; 3: 137 110 32
x1819:	add bp, 30	; 3: 131 197 30
x1822:	jmp exp	; 3: 233 188 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4824

math_test_1$106:	; Parameter 14 £temporary4824 16
x1825:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1828:	mov ax, [errno]	; 3: 161 182 10
x1831:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1834:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 61 7
x1839:	mov [bp + 16], bp	; 3: 137 110 16
x1842:	add bp, 14	; 3: 131 197 14
x1845:	mov di, bp	; 2: 137 239
x1847:	add di, 18	; 3: 131 199 18
x1850:	jmp printf	; 3: 233 136 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1853:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1859:	mov word [bp + 20], string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 99 11

math_test_1$113:	; PushFloat x
x1864:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1867:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1870:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1873:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1876:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 98 7
x1881:	mov [bp + 32], bp	; 3: 137 110 32
x1884:	add bp, 30	; 3: 131 197 30
x1887:	jmp log	; 3: 233 170 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4826

math_test_1$121:	; Parameter 14 £temporary4826 16
x1890:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1893:	mov ax, [errno]	; 3: 161 182 10
x1896:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1899:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 126 7
x1904:	mov [bp + 16], bp	; 3: 137 110 16
x1907:	add bp, 14	; 3: 131 197 14
x1910:	mov di, bp	; 2: 137 239
x1912:	add di, 18	; 3: 131 199 18
x1915:	jmp printf	; 3: 233 71 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1918:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1924:	mov word [bp + 20], string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 127 11

math_test_1$128:	; PushFloat x
x1929:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1932:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1935:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1938:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1941:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 163 7
x1946:	mov [bp + 32], bp	; 3: 137 110 32
x1949:	add bp, 30	; 3: 131 197 30
x1952:	jmp log10	; 3: 233 60 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4828

math_test_1$136:	; Parameter 14 £temporary4828 16
x1955:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x1958:	mov ax, [errno]	; 3: 161 182 10
x1961:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x1964:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 191 7
x1969:	mov [bp + 16], bp	; 3: 137 110 16
x1972:	add bp, 14	; 3: 131 197 14
x1975:	mov di, bp	; 2: 137 239
x1977:	add di, 18	; 3: 131 199 18
x1980:	jmp printf	; 3: 233 6 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x1983:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x1989:	mov word [bp + 20], string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 157 11

math_test_1$143:	; PushFloat x
x1994:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x1997:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2000:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2003:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2006:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 228 7
x2011:	mov [bp + 32], bp	; 3: 137 110 32
x2014:	add bp, 30	; 3: 131 197 30
x2017:	jmp sinh	; 3: 233 27 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4830

math_test_1$151:	; Parameter 14 £temporary4830 16
x2020:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2023:	mov ax, [errno]	; 3: 161 182 10
x2026:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2029:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 0 8
x2034:	mov [bp + 16], bp	; 3: 137 110 16
x2037:	add bp, 14	; 3: 131 197 14
x2040:	mov di, bp	; 2: 137 239
x2042:	add di, 18	; 3: 131 199 18
x2045:	jmp printf	; 3: 233 197 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2048:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2054:	mov word [bp + 20], string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 186 11

math_test_1$158:	; PushFloat x
x2059:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2062:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2065:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2068:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2071:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 37 8
x2076:	mov [bp + 32], bp	; 3: 137 110 32
x2079:	add bp, 30	; 3: 131 197 30
x2082:	jmp cosh	; 3: 233 35 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4832

math_test_1$166:	; Parameter 14 £temporary4832 16
x2085:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2088:	mov ax, [errno]	; 3: 161 182 10
x2091:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2094:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 65 8
x2099:	mov [bp + 16], bp	; 3: 137 110 16
x2102:	add bp, 14	; 3: 131 197 14
x2105:	mov di, bp	; 2: 137 239
x2107:	add di, 18	; 3: 131 199 18
x2110:	jmp printf	; 3: 233 132 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2113:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2119:	mov word [bp + 20], string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 215 11

math_test_1$173:	; PushFloat x
x2124:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2127:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2130:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2133:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2136:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 102 8
x2141:	mov [bp + 32], bp	; 3: 137 110 32
x2144:	add bp, 30	; 3: 131 197 30
x2147:	jmp tanh	; 3: 233 43 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4834

math_test_1$181:	; Parameter 14 £temporary4834 16
x2150:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2153:	mov ax, [errno]	; 3: 161 182 10
x2156:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2159:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 130 8
x2164:	mov [bp + 16], bp	; 3: 137 110 16
x2167:	add bp, 14	; 3: 131 197 14
x2170:	mov di, bp	; 2: 137 239
x2172:	add di, 18	; 3: 131 199 18
x2175:	jmp printf	; 3: 233 67 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2178:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2184:	mov word [bp + 20], string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 244 11

math_test_1$188:	; PushFloat x
x2189:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2192:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2195:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2198:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2201:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 167 8
x2206:	mov [bp + 32], bp	; 3: 137 110 32
x2209:	add bp, 30	; 3: 131 197 30
x2212:	jmp sqrt	; 3: 233 185 37

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4836

math_test_1$196:	; Parameter 14 £temporary4836 16
x2215:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2218:	mov ax, [errno]	; 3: 161 182 10
x2221:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2224:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 195 8
x2229:	mov [bp + 16], bp	; 3: 137 110 16
x2232:	add bp, 14	; 3: 131 197 14
x2235:	mov di, bp	; 2: 137 239
x2237:	add di, 18	; 3: 131 199 18
x2240:	jmp printf	; 3: 233 2 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2243:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2249:	mov word [bp + 20], string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 17 12

math_test_1$203:	; PushFloat x
x2254:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2257:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2260:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2263:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2266:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 232 8
x2271:	mov [bp + 32], bp	; 3: 137 110 32
x2274:	add bp, 30	; 3: 131 197 30
x2277:	jmp floor	; 3: 233 107 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4838

math_test_1$211:	; Parameter 14 £temporary4838 16
x2280:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2283:	mov ax, [errno]	; 3: 161 182 10
x2286:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2289:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 4 9
x2294:	mov [bp + 16], bp	; 3: 137 110 16
x2297:	add bp, 14	; 3: 131 197 14
x2300:	mov di, bp	; 2: 137 239
x2302:	add di, 18	; 3: 131 199 18
x2305:	jmp printf	; 3: 233 193 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2308:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2314:	mov word [bp + 20], string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 47 12

math_test_1$218:	; PushFloat x
x2319:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2322:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2325:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2328:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2331:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 41 9
x2336:	mov [bp + 32], bp	; 3: 137 110 32
x2339:	add bp, 30	; 3: 131 197 30
x2342:	jmp ceil	; 3: 233 120 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4840

math_test_1$226:	; Parameter 14 £temporary4840 16
x2345:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2348:	mov ax, [errno]	; 3: 161 182 10
x2351:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2354:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 69 9
x2359:	mov [bp + 16], bp	; 3: 137 110 16
x2362:	add bp, 14	; 3: 131 197 14
x2365:	mov di, bp	; 2: 137 239
x2367:	add di, 18	; 3: 131 199 18
x2370:	jmp printf	; 3: 233 128 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2373:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2379:	mov word [bp + 20], string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 76 12

math_test_1$233:	; PushFloat x
x2384:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2387:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2390:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2393:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2396:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 106 9
x2401:	mov [bp + 32], bp	; 3: 137 110 32
x2404:	add bp, 30	; 3: 131 197 30
x2407:	jmp fabs	; 3: 233 75 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4842

math_test_1$241:	; Parameter 14 £temporary4842 16
x2410:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2413:	mov ax, [errno]	; 3: 161 182 10
x2416:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2419:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 134 9
x2424:	mov [bp + 16], bp	; 3: 137 110 16
x2427:	add bp, 14	; 3: 131 197 14
x2430:	mov di, bp	; 2: 137 239
x2432:	add di, 18	; 3: 131 199 18
x2435:	jmp printf	; 3: 233 63 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2438:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$246:	; Assign j 0
x2444:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2449:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2452:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4844 j
x2455:	mov si, bp	; 2: 137 238
x2457:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4844 14
x2460:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2463:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 173 9
x2468:	mov [bp + 18], bp	; 3: 137 110 18
x2471:	add bp, 16	; 3: 131 197 16
x2474:	jmp frexp	; 3: 233 37 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4845

math_test_1$255:	; PopFloat z
x2477:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2480:	mov word [bp + 30], string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 105 12

math_test_1$258:	; PushFloat x
x2485:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2488:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2491:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2494:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2497:	mov ax, [bp + 14]	; 3: 139 70 14
x2500:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2503:	mov ax, [errno]	; 3: 161 182 10
x2506:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2509:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 224 9
x2514:	mov [bp + 26], bp	; 3: 137 110 26
x2517:	add bp, 24	; 3: 131 197 24
x2520:	mov di, bp	; 2: 137 239
x2522:	add di, 20	; 3: 131 199 20
x2525:	jmp printf	; 3: 233 229 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2528:	cmp word [errno], 0	; 5: 131 62 182 10 0
x2533:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2535:	mov word [bp + 30], string_Error20message3A#	; 5: 199 70 30 143 12

math_test_1$269:	; Call 24 perror 0
x2540:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 250 9
x2545:	mov [bp + 26], bp	; 3: 137 110 26
x2548:	add bp, 24	; 3: 131 197 24
x2551:	jmp perror	; 3: 233 204 40

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2554:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$272:	; PushZero
x2560:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2562:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2565:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2568:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4849 w
x2571:	mov si, bp	; 2: 137 238
x2573:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4849 14
x2576:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2579:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 33 10
x2584:	mov [bp + 24], bp	; 3: 137 110 24
x2587:	add bp, 22	; 3: 131 197 22
x2590:	jmp modf	; 3: 233 65 41

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4850

math_test_1$282:	; PopFloat z
x2593:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2596:	mov word [bp + 36], string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 158 12

math_test_1$285:	; PushFloat x
x2601:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2604:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2607:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2610:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2613:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2616:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2619:	mov ax, [errno]	; 3: 161 182 10
x2622:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2625:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 84 10
x2630:	mov [bp + 32], bp	; 3: 137 110 32
x2633:	add bp, 30	; 3: 131 197 30
x2636:	mov di, bp	; 2: 137 239
x2638:	add di, 26	; 3: 131 199 26
x2641:	jmp printf	; 3: 233 113 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2644:	cmp word [errno], 0	; 5: 131 62 182 10 0
x2649:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2651:	mov word [bp + 36], string_Error20message3A#	; 5: 199 70 36 143 12

math_test_1$297:	; Call 30 perror 0
x2656:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 110 10
x2661:	mov [bp + 32], bp	; 3: 137 110 32
x2664:	add bp, 30	; 3: 131 197 30
x2667:	jmp perror	; 3: 233 88 40

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2670:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2676:	mov word [bp + 20], string_0A#	; 5: 199 70 20 195 12

math_test_1$302:	; Call 14 printf 0
x2681:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 137 10
x2686:	mov [bp + 16], bp	; 3: 137 110 16
x2689:	add bp, 14	; 3: 131 197 14
x2692:	mov di, bp	; 2: 137 239
x2694:	jmp printf	; 3: 233 60 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2697:	mov ax, [bp]	; 3: 139 70 0
x2700:	mov di, [bp + 4]	; 3: 139 126 4
x2703:	mov bp, [bp + 2]	; 3: 139 110 2
x2706:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

string_3C25f3E0A#:
x2708:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2714:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2742:	dw 0	; 2: 0 0

string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2744:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2772:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2800:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2829:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2858:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2887:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2915:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2943:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x2973:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3002:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3031:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3060:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3089:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3119:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3148:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3177:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_Error20message3A#:
x3215:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3230:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_0A#:
x3267:	db 10, 0	; 2: 10 0

printf:	; address £temporary2349 format
x3269:	mov si, bp	; 2: 137 238
x3271:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2350 £temporary2349

printf$2:	; BinaryAdd arg_list £temporary2350 2
x3274:	add si, 2	; 3: 131 198 2
x3277:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3280:	mov ax, [bp + 6]	; 3: 139 70 6
x3283:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3286:	mov ax, [di + 8]	; 3: 139 69 8
x3289:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3292:	mov word [di + 10], printf$7	; 5: 199 69 10 239 12
x3297:	mov [di + 12], bp	; 3: 137 109 12
x3300:	mov [di + 14], di	; 3: 137 125 14
x3303:	add di, 10	; 3: 131 199 10
x3306:	mov bp, di	; 2: 137 253
x3308:	nop	; 1: 144
x3309:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2352

printf$9:	; SetReturnValue £temporary2352

printf$10:	; Return £temporary2352
x3311:	mov ax, [bp]	; 3: 139 70 0
x3314:	mov di, [bp + 4]	; 3: 139 126 4
x3317:	mov bp, [bp + 2]	; 3: 139 110 2
x3320:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3322:	mov ax, [stdout]	; 3: 161 37 13
x3325:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3328:	mov ax, [bp + 6]	; 3: 139 70 6
x3331:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3334:	mov ax, [bp + 8]	; 3: 139 70 8
x3337:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3340:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 26 13
x3345:	mov [bp + 12], bp	; 3: 137 110 12
x3348:	add bp, 10	; 3: 131 197 10
x3351:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2356

vprintf$7:	; SetReturnValue £temporary2356

vprintf$8:	; Return £temporary2356
x3354:	mov ax, [bp]	; 3: 139 70 0
x3357:	mov di, [bp + 4]	; 3: 139 126 4
x3360:	mov bp, [bp + 2]	; 3: 139 110 2
x3363:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3365:	dw g_fileArray + 29	; 2: 68 13

g_fileArray:
x3367:	dw 1	; 2: 1 0
x3369:	dw 0	; 2: 0 0
x3371:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3396:	dw 1	; 2: 1 0
x3398:	dw 1	; 2: 1 0
x3400:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3425:	dw 1	; 2: 1 0
x3427:	dw 2	; 2: 2 0
x3429:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3454:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x3947:	mov word [g_outStatus], 0	; 6: 199 6 156 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2368 outStream
x3953:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2368
x3956:	mov [g_outDevice], ax	; 3: 163 158 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x3959:	mov ax, [bp + 8]	; 3: 139 70 8
x3962:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x3965:	mov ax, [bp + 10]	; 3: 139 70 10
x3968:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x3971:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 145 15
x3976:	mov [bp + 14], bp	; 3: 137 110 14
x3979:	add bp, 12	; 3: 131 197 12
x3982:	nop	; 1: 144
x3983:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2369

vfprintf$9:	; SetReturnValue £temporary2369

vfprintf$10:	; Return £temporary2369
x3985:	mov ax, [bp]	; 3: 139 70 0
x3988:	mov di, [bp + 4]	; 3: 139 126 4
x3991:	mov bp, [bp + 2]	; 3: 139 110 2
x3994:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x3996:	db 0, 0	; 2: 0 0

g_outDevice:
x3998:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4000:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4005:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4010:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4015:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4020:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4025:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4030:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4035:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4040:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4045:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4050:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4055:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4060:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4065:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4070:	mov word [g_outChars], 0	; 6: 199 6 250 20 0 0

printFormat$15:	; Assign index 0
x4076:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2203 format index
x4081:	mov si, [bp + 6]	; 3: 139 118 6
x4084:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2202 -> £temporary2203 £temporary2203 0

printFormat$18:	; Equal 285 £temporary2202 -> £temporary2203 0
x4087:	cmp byte [si], 0	; 3: 128 60 0
x4090:	je printFormat$285	; 4: 15 132 214 4

printFormat$19:	; BinaryAdd £temporary2207 format index
x4094:	mov si, [bp + 6]	; 3: 139 118 6
x4097:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2206 -> £temporary2207 £temporary2207 0

printFormat$21:	; Assign c £temporary2206 -> £temporary2207
x4100:	mov al, [si]	; 2: 138 4
x4102:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 263 percent 0
x4105:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4109:	je printFormat$263	; 4: 15 132 91 4

printFormat$23:	; Case 52 c 43
x4113:	mov al, [bp + 40]	; 3: 138 70 40
x4116:	cmp al, 43	; 2: 60 43
x4118:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4122:	cmp al, 45	; 2: 60 45
x4124:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4128:	cmp al, 32	; 2: 60 32
x4130:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4134:	cmp al, 48	; 2: 60 48
x4136:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4140:	cmp al, 35	; 2: 60 35
x4142:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4146:	cmp al, 46	; 2: 60 46
x4148:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4152:	cmp al, 42	; 2: 60 42
x4154:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4158:	cmp al, 104	; 2: 60 104
x4160:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4164:	cmp al, 108	; 2: 60 108
x4166:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4170:	cmp al, 76	; 2: 60 76
x4172:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4176:	cmp al, 37	; 2: 60 37
x4178:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4182:	cmp al, 110	; 2: 60 110
x4184:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4188:	cmp al, 112	; 2: 60 112
x4190:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4194:	cmp al, 71	; 2: 60 71
x4196:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4200:	cmp al, 103	; 2: 60 103
x4202:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4206:	cmp al, 69	; 2: 60 69
x4208:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4212:	cmp al, 101	; 2: 60 101
x4214:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4218:	cmp al, 102	; 2: 60 102
x4220:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4224:	cmp al, 115	; 2: 60 115
x4226:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4230:	cmp al, 99	; 2: 60 99
x4232:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4234:	cmp al, 88	; 2: 60 88
x4236:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4238:	cmp al, 120	; 2: 60 120
x4240:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4242:	cmp al, 111	; 2: 60 111
x4244:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4246:	cmp al, 98	; 2: 60 98
x4248:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4250:	cmp al, 117	; 2: 60 117
x4252:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4254:	cmp al, 100	; 2: 60 100
x4256:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4258:	cmp al, 105	; 2: 60 105
x4260:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4262:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4265:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 283
x4270:	jmp printFormat$283	; 3: 233 29 4

printFormat$54:	; Assign minus 1
x4273:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 283
x4278:	jmp printFormat$283	; 3: 233 21 4

printFormat$56:	; Assign space 1
x4281:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 283
x4286:	jmp printFormat$283	; 3: 233 13 4

printFormat$58:	; Assign zero 1
x4289:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 283
x4294:	jmp printFormat$283	; 3: 233 5 4

printFormat$60:	; Assign grid 1
x4297:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 283
x4302:	jmp printFormat$283	; 3: 233 253 3

printFormat$62:	; Assign period 1
x4305:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 283
x4310:	jmp printFormat$283	; 3: 233 245 3

printFormat$64:	; NotEqual 67 period 0
x4313:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4317:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4319:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 283
x4324:	jmp printFormat$283	; 3: 233 231 3

printFormat$67:	; Assign precision -1
x4327:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 283
x4332:	jmp printFormat$283	; 3: 233 223 3

printFormat$69:	; Assign shortInt 1
x4335:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 283
x4340:	jmp printFormat$283	; 3: 233 215 3

printFormat$71:	; Assign longInt 1
x4343:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 283
x4348:	jmp printFormat$283	; 3: 233 207 3

printFormat$73:	; Assign longDouble 1
x4351:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 283
x4356:	jmp printFormat$283	; 3: 233 199 3

printFormat$75:	; Equal 107 minus 0
x4359:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4363:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4367:	mov ax, [g_outChars]	; 3: 161 250 20
x4370:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2211 format index
x4373:	mov si, [bp + 6]	; 3: 139 118 6
x4376:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2210 -> £temporary2211 £temporary2211 0

printFormat$80:	; address £temporary2212 £temporary2210 -> £temporary2211

printFormat$81:	; Parameter 43 £temporary2212 6
x4379:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4382:	mov ax, [bp + 8]	; 3: 139 70 8
x4385:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4388:	mov ax, [bp + 18]	; 3: 139 70 18
x4391:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4394:	mov ax, [bp + 22]	; 3: 139 70 22
x4397:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4400:	mov ax, [bp + 26]	; 3: 139 70 26
x4403:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2213 width
x4406:	mov si, bp	; 2: 137 238
x4408:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2213 16
x4411:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4414:	mov ax, [bp + 14]	; 3: 139 70 14
x4417:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4420:	mov ax, [bp + 34]	; 3: 139 70 34
x4423:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4426:	mov ax, [bp + 36]	; 3: 139 70 36
x4429:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4432:	mov ax, [bp + 38]	; 3: 139 70 38
x4435:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4438:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4443:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4448:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 110 17
x4453:	mov [bp + 45], bp	; 3: 137 110 45
x4456:	add bp, 43	; 3: 131 197 43
x4459:	jmp printArgument	; 3: 233 144 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2214

printFormat$97:	; Assign arg_list £temporary2214
x4462:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4465:	mov ax, [g_outChars]	; 3: 161 250 20
x4468:	sub ax, [bp + 41]	; 3: 43 70 41
x4471:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2216 field
x4474:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4477:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2216 width
x4480:	cmp ax, [bp + 12]	; 3: 59 70 12
x4483:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4487:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4491:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 153 17
x4496:	mov [bp + 47], bp	; 3: 137 110 47
x4499:	add bp, 45	; 3: 131 197 45
x4502:	jmp printChar	; 3: 233 120 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4505:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4507:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4511:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4515:	mov ax, [g_outChars]	; 3: 161 250 20
x4518:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4521:	mov ax, [g_outStatus]	; 3: 161 156 15
x4524:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4527:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4532:	mov word [g_outStatus], 2	; 6: 199 6 156 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2220 format index
x4538:	mov si, [bp + 6]	; 3: 139 118 6
x4541:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2219 -> £temporary2220 £temporary2220 0

printFormat$115:	; address £temporary2221 £temporary2219 -> £temporary2220

printFormat$116:	; Parameter 47 £temporary2221 6
x4544:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4547:	mov ax, [bp + 8]	; 3: 139 70 8
x4550:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4553:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4558:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4563:	mov ax, [bp + 26]	; 3: 139 70 26
x4566:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2222 width
x4569:	mov si, bp	; 2: 137 238
x4571:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2222 16
x4574:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4577:	mov ax, [bp + 14]	; 3: 139 70 14
x4580:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4583:	mov ax, [bp + 34]	; 3: 139 70 34
x4586:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4589:	mov ax, [bp + 36]	; 3: 139 70 36
x4592:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4595:	mov ax, [bp + 38]	; 3: 139 70 38
x4598:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4601:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2223 negative
x4606:	mov si, bp	; 2: 137 238
x4608:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2223 28
x4611:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4614:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 20 18
x4619:	mov [bp + 49], bp	; 3: 137 110 49
x4622:	add bp, 47	; 3: 131 197 47
x4625:	jmp printArgument	; 3: 233 234 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4628:	mov ax, [bp + 43]	; 3: 139 70 43
x4631:	mov [g_outStatus], ax	; 3: 163 156 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4634:	mov ax, [g_outChars]	; 3: 161 250 20
x4637:	sub ax, [bp + 41]	; 3: 43 70 41
x4640:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4643:	mov ax, [bp + 41]	; 3: 139 70 41
x4646:	mov [g_outChars], ax	; 3: 163 250 20

printFormat$135:	; Equal 142 negative 0
x4649:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4653:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4655:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4659:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 65 18
x4664:	mov [bp + 51], bp	; 3: 137 110 51
x4667:	add bp, 49	; 3: 131 197 49
x4670:	jmp printChar	; 3: 233 208 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4673:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4676:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4678:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4682:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4684:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4688:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 94 18
x4693:	mov [bp + 51], bp	; 3: 137 110 51
x4696:	add bp, 49	; 3: 131 197 49
x4699:	jmp printChar	; 3: 233 179 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4702:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4705:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4707:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4711:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4713:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4717:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 123 18
x4722:	mov [bp + 51], bp	; 3: 137 110 51
x4725:	add bp, 49	; 3: 131 197 49
x4728:	jmp printChar	; 3: 233 150 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4731:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2235 field
x4734:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4737:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2235 width
x4740:	cmp ax, [bp + 12]	; 3: 59 70 12
x4743:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4745:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4749:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 155 18
x4754:	mov [bp + 51], bp	; 3: 137 110 51
x4757:	add bp, 49	; 3: 131 197 49
x4760:	jmp printChar	; 3: 233 118 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4763:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2239 format index
x4765:	mov si, [bp + 6]	; 3: 139 118 6
x4768:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2238 -> £temporary2239 £temporary2239 0

printFormat$166:	; address £temporary2240 £temporary2238 -> £temporary2239

printFormat$167:	; Parameter 49 £temporary2240 6
x4771:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4774:	mov ax, [bp + 8]	; 3: 139 70 8
x4777:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4780:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4785:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4790:	mov ax, [bp + 26]	; 3: 139 70 26
x4793:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4796:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4801:	mov ax, [bp + 14]	; 3: 139 70 14
x4804:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4807:	mov ax, [bp + 34]	; 3: 139 70 34
x4810:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4813:	mov ax, [bp + 36]	; 3: 139 70 36
x4816:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4819:	mov ax, [bp + 38]	; 3: 139 70 38
x4822:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4825:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4830:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4835:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 241 18
x4840:	mov [bp + 51], bp	; 3: 137 110 51
x4843:	add bp, 49	; 3: 131 197 49
x4846:	jmp printArgument	; 3: 233 13 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2241

printFormat$182:	; Assign arg_list £temporary2241
x4849:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4852:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4855:	mov ax, [g_outChars]	; 3: 161 250 20
x4858:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4861:	mov ax, [g_outStatus]	; 3: 161 156 15
x4864:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4867:	mov word [g_outStatus], 2	; 6: 199 6 156 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2243 format index
x4873:	mov si, [bp + 6]	; 3: 139 118 6
x4876:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2242 -> £temporary2243 £temporary2243 0

printFormat$190:	; address £temporary2244 £temporary2242 -> £temporary2243

printFormat$191:	; Parameter 45 £temporary2244 6
x4879:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4882:	mov ax, [bp + 8]	; 3: 139 70 8
x4885:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4888:	mov ax, [bp + 18]	; 3: 139 70 18
x4891:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4894:	mov ax, [bp + 22]	; 3: 139 70 22
x4897:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4900:	mov ax, [bp + 26]	; 3: 139 70 26
x4903:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2245 width
x4906:	mov si, bp	; 2: 137 238
x4908:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2245 16
x4911:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4914:	mov ax, [bp + 14]	; 3: 139 70 14
x4917:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4920:	mov ax, [bp + 34]	; 3: 139 70 34
x4923:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4926:	mov ax, [bp + 36]	; 3: 139 70 36
x4929:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4932:	mov ax, [bp + 38]	; 3: 139 70 38
x4935:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x4938:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x4943:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x4948:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 98 19
x4953:	mov [bp + 47], bp	; 3: 137 110 47
x4956:	add bp, 45	; 3: 131 197 45
x4959:	jmp printArgument	; 3: 233 156 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x4962:	mov ax, [bp + 43]	; 3: 139 70 43
x4965:	mov [g_outStatus], ax	; 3: 163 156 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x4968:	mov ax, [g_outChars]	; 3: 161 250 20
x4971:	sub ax, [bp + 41]	; 3: 43 70 41
x4974:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x4977:	mov ax, [bp + 41]	; 3: 139 70 41
x4980:	mov [g_outChars], ax	; 3: 163 250 20

printFormat$209:	; Assign £temporary2248 field
x4983:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x4986:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2248 width
x4989:	cmp ax, [bp + 12]	; 3: 59 70 12
x4992:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x4994:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x4998:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 148 19
x5003:	mov [bp + 49], bp	; 3: 137 110 49
x5006:	add bp, 47	; 3: 131 197 47
x5009:	jmp printChar	; 3: 233 125 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5012:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2252 format index
x5014:	mov si, [bp + 6]	; 3: 139 118 6
x5017:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2251 -> £temporary2252 £temporary2252 0

printFormat$220:	; address £temporary2253 £temporary2251 -> £temporary2252

printFormat$221:	; Parameter 47 £temporary2253 6
x5020:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5023:	mov ax, [bp + 8]	; 3: 139 70 8
x5026:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5029:	mov ax, [bp + 18]	; 3: 139 70 18
x5032:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5035:	mov ax, [bp + 22]	; 3: 139 70 22
x5038:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5041:	mov ax, [bp + 26]	; 3: 139 70 26
x5044:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5047:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5052:	mov ax, [bp + 14]	; 3: 139 70 14
x5055:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5058:	mov ax, [bp + 34]	; 3: 139 70 34
x5061:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5064:	mov ax, [bp + 36]	; 3: 139 70 36
x5067:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5070:	mov ax, [bp + 38]	; 3: 139 70 38
x5073:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5076:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5081:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5086:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 236 19
x5091:	mov [bp + 49], bp	; 3: 137 110 49
x5094:	add bp, 47	; 3: 131 197 47
x5097:	jmp printArgument	; 3: 233 18 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2254

printFormat$236:	; Assign arg_list £temporary2254
x5100:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5103:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 283
x5108:	jmp printFormat$283	; 3: 233 215 0

printFormat$239:	; Assign value 0
x5111:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2257 c
x5116:	mov al, [bp + 40]	; 3: 138 70 40
x5119:	and ax, 255	; 3: 37 255 0
x5122:	cmp al, 0	; 2: 60 0
x5124:	jge printFormat$242	; 2: 125 4
x5126:	neg al	; 2: 246 216
x5128:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2257 6
x5130:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5133:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 27 20
x5138:	mov [bp + 45], bp	; 3: 137 110 45
x5141:	add bp, 43	; 3: 131 197 43
x5144:	jmp isdigit	; 3: 233 226 22

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2258

printFormat$246:	; Equal 257 £temporary2258 0
x5147:	cmp bx, 0	; 3: 131 251 0
x5150:	je printFormat$257	; 2: 116 51

printFormat$247:	; SignedMultiply £temporary2259 value 10
x5152:	mov ax, [bp + 41]	; 3: 139 70 41
x5155:	xor dx, dx	; 2: 49 210
x5157:	imul word [int2$10#]	; 4: 247 46 252 20

printFormat$248:	; BinarySubtract £temporary2260 c 48
x5161:	mov bl, [bp + 40]	; 3: 138 94 40
x5164:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2261 £temporary2260
x5167:	and bx, 255	; 4: 129 227 255 0
x5171:	cmp bl, 0	; 3: 128 251 0
x5174:	jge printFormat$250	; 2: 125 4
x5176:	neg bl	; 2: 246 219
x5178:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2259 £temporary2261
x5180:	add ax, bx	; 2: 1 216
x5182:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5185:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; Assign £temporary2263 index
x5188:	mov ax, [bp + 10]	; 3: 139 70 10

printFormat$253:	; BinaryAdd £temporary2265 format £temporary2263
x5191:	mov si, [bp + 6]	; 3: 139 118 6
x5194:	add si, ax	; 2: 1 198

printFormat$254:	; Deref £temporary2264 -> £temporary2265 £temporary2265 0

printFormat$255:	; Assign c £temporary2264 -> £temporary2265
x5196:	mov al, [si]	; 2: 138 4
x5198:	mov [bp + 40], al	; 3: 136 70 40

printFormat$256:	; Goto 240
x5201:	jmp printFormat$240	; 2: 235 169

printFormat$257:	; Decrement index
x5203:	dec word [bp + 10]	; 3: 255 78 10

printFormat$258:	; NotEqual 261 period 0
x5206:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5210:	jne printFormat$261	; 2: 117 8

printFormat$259:	; Assign width value
x5212:	mov ax, [bp + 41]	; 3: 139 70 41
x5215:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$260:	; Goto 283
x5218:	jmp printFormat$283	; 2: 235 106

printFormat$261:	; Assign precision value
x5220:	mov ax, [bp + 41]	; 3: 139 70 41
x5223:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$262:	; Goto 283
x5226:	jmp printFormat$283	; 2: 235 98

printFormat$263:	; NotEqual 279 c 37
x5228:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5232:	jne printFormat$279	; 2: 117 72

printFormat$264:	; Assign percent 1
x5234:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$265:	; Assign plus 0
x5239:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$266:	; Assign minus 0
x5244:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$267:	; Assign space 0
x5249:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$268:	; Assign zero 0
x5254:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$269:	; Assign grid 0
x5259:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$270:	; Assign widthStar 0
x5264:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$271:	; Assign period 0
x5269:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$272:	; Assign precisionStar 0
x5274:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$273:	; Assign shortInt 0
x5279:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$274:	; Assign longInt 0
x5284:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$275:	; Assign longDouble 0
x5289:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$276:	; Assign width 0
x5294:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$277:	; Assign precision 0
x5299:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$278:	; Goto 283
x5304:	jmp printFormat$283	; 2: 235 20

printFormat$279:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$280:	; Parameter 41 c 6
x5306:	mov al, [bp + 40]	; 3: 138 70 40
x5309:	mov [bp + 47], al	; 3: 136 70 47

printFormat$281:	; Call 41 printChar 0
x5312:	mov word [bp + 41], printFormat$282	; 5: 199 70 41 206 20
x5317:	mov [bp + 43], bp	; 3: 137 110 43
x5320:	add bp, 41	; 3: 131 197 41
x5323:	jmp printChar	; 3: 233 67 7

printFormat$282:	; PostCall 41

printFormat$283:	; Increment index
x5326:	inc word [bp + 10]	; 3: 255 70 10

printFormat$284:	; Goto 16
x5329:	jmp printFormat$16	; 3: 233 29 251

printFormat$285:	; NotEqual 291 g_outStatus 1
x5332:	cmp word [g_outStatus], 1	; 5: 131 62 156 15 1
x5337:	jne printFormat$291	; 2: 117 16

printFormat$286:	; IntegralToIntegral £temporary2274 g_outDevice
x5339:	mov ax, [g_outDevice]	; 3: 161 158 15

printFormat$287:	; Assign outString £temporary2274
x5342:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$288:	; BinaryAdd £temporary2276 outString g_outChars
x5345:	mov si, [bp + 40]	; 3: 139 118 40
x5348:	add si, [g_outChars]	; 4: 3 54 250 20

printFormat$289:	; Deref £temporary2275 -> £temporary2276 £temporary2276 0

printFormat$290:	; Assign £temporary2275 -> £temporary2276 0
x5352:	mov byte [si], 0	; 3: 198 4 0

printFormat$291:	; SetReturnValue g_outChars
x5355:	mov bx, [g_outChars]	; 4: 139 30 250 20

printFormat$292:	; Return g_outChars
x5359:	mov ax, [bp]	; 3: 139 70 0
x5362:	mov di, [bp + 4]	; 3: 139 126 4
x5365:	mov bp, [bp + 2]	; 3: 139 110 2
x5368:	jmp ax	; 2: 255 224

printFormat$293:	; FunctionEnd printFormat

g_outChars:
x5370:	db 0, 0	; 2: 0 0

int2$10#:
x5372:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary1975 -> format format 0
x5374:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary1975 -> format
x5377:	mov al, [si]	; 2: 138 4
x5379:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5382:	mov al, [bp + 30]	; 3: 138 70 30
x5385:	cmp al, 100	; 2: 60 100
x5387:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5389:	cmp al, 105	; 2: 60 105
x5391:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5393:	cmp al, 99	; 2: 60 99
x5395:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5399:	cmp al, 115	; 2: 60 115
x5401:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5405:	cmp al, 88	; 2: 60 88
x5407:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5411:	cmp al, 120	; 2: 60 120
x5413:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5417:	cmp al, 98	; 2: 60 98
x5419:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5423:	cmp al, 111	; 2: 60 111
x5425:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5429:	cmp al, 117	; 2: 60 117
x5431:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5435:	cmp al, 71	; 2: 60 71
x5437:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5441:	cmp al, 103	; 2: 60 103
x5443:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5447:	cmp al, 69	; 2: 60 69
x5449:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5453:	cmp al, 101	; 2: 60 101
x5455:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5459:	cmp al, 102	; 2: 60 102
x5461:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5465:	cmp al, 112	; 2: 60 112
x5467:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5471:	cmp al, 110	; 2: 60 110
x5473:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5477:	cmp al, 37	; 2: 60 37
x5479:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5483:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5486:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5490:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5492:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary1977 arg_list 2
x5496:	mov si, [bp + 8]	; 3: 139 118 8
x5499:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary1978 £temporary1977

printArgument$25:	; Deref £temporary1979 -> £temporary1978 £temporary1978 0

printArgument$26:	; IntegralToIntegral £temporary1980 £temporary1979 -> £temporary1978
x5502:	mov ax, [si]	; 2: 139 4
x5504:	cmp ax, 0	; 3: 131 248 0
x5507:	jge printArgument$27	; 2: 125 4
x5509:	neg ax	; 2: 247 216
x5511:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary1981 £temporary1980
x5513:	and eax, 255	; 6: 102 37 255 0 0 0
x5519:	cmp al, 0	; 2: 60 0
x5521:	jge printArgument$28	; 2: 125 5
x5523:	neg al	; 2: 246 216
x5525:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary1981
x5528:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5532:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5534:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5538:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5540:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary1983 arg_list 4
x5544:	mov si, [bp + 8]	; 3: 139 118 8
x5547:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary1984 £temporary1983

printArgument$34:	; Deref £temporary1985 -> £temporary1984 £temporary1984 0

printArgument$35:	; Assign longValue £temporary1985 -> £temporary1984
x5550:	mov eax, [si]	; 3: 102 139 4
x5553:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5557:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5559:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary1987 arg_list 2
x5563:	mov si, [bp + 8]	; 3: 139 118 8
x5566:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary1988 £temporary1987

printArgument$40:	; Deref £temporary1989 -> £temporary1988 £temporary1988 0

printArgument$41:	; IntegralToIntegral £temporary1990 £temporary1989 -> £temporary1988
x5569:	mov ax, [si]	; 2: 139 4
x5571:	and eax, 65535	; 6: 102 37 255 255 0 0
x5577:	cmp ax, 0	; 3: 131 248 0
x5580:	jge printArgument$42	; 2: 125 5
x5582:	neg ax	; 2: 247 216
x5584:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary1990
x5587:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5591:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5595:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary1994 -> negativePtr negativePtr 0
x5597:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5600:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5605:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary1996 1
x5607:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5610:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary1996 0
x5612:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary1994 -> negativePtr £temporary1996
x5615:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5617:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5621:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5623:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5627:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5631:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 13 22
x5636:	mov [bp + 50], bp	; 3: 137 110 50
x5639:	add bp, 48	; 3: 131 197 48
x5642:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary1999

printArgument$56:	; Assign longValue £temporary1999
x5645:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5649:	mov ax, [bp + 8]	; 3: 139 70 8
x5652:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5655:	mov ax, [bp + 16]	; 3: 139 70 16
x5658:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary2000 precision
x5661:	mov si, bp	; 2: 137 238
x5663:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary2000 10
x5666:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5669:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 51 22
x5674:	mov [bp + 50], bp	; 3: 137 110 50
x5677:	add bp, 48	; 3: 131 197 48
x5680:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary2001

printArgument$65:	; Assign arg_list £temporary2001
x5683:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5686:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5690:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5694:	mov ax, [bp + 10]	; 3: 139 70 10
x5697:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5700:	mov ax, [bp + 12]	; 3: 139 70 12
x5703:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5706:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 88 22
x5711:	mov [bp + 50], bp	; 3: 137 110 50
x5714:	add bp, 48	; 3: 131 197 48
x5717:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5720:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5723:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary2004 arg_list 2
x5727:	mov si, [bp + 8]	; 3: 139 118 8
x5730:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary2005 £temporary2004

printArgument$76:	; Deref £temporary2006 -> £temporary2005 £temporary2005 0

printArgument$77:	; IntegralToIntegral £temporary2007 £temporary2006 -> £temporary2005
x5733:	mov ax, [si]	; 2: 139 4
x5735:	cmp ax, 0	; 3: 131 248 0
x5738:	jge printArgument$78	; 2: 125 4
x5740:	neg ax	; 2: 247 216
x5742:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary2007
x5744:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5747:	mov ax, [bp + 8]	; 3: 139 70 8
x5750:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5753:	mov ax, [bp + 16]	; 3: 139 70 16
x5756:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary2008 precision
x5759:	mov si, bp	; 2: 137 238
x5761:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary2008 10
x5764:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5767:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 149 22
x5772:	mov [bp + 46], bp	; 3: 137 110 46
x5775:	add bp, 44	; 3: 131 197 44
x5778:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary2009

printArgument$87:	; Assign arg_list £temporary2009
x5781:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5784:	mov al, [bp + 31]	; 3: 138 70 31
x5787:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5790:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 172 22
x5795:	mov [bp + 46], bp	; 3: 137 110 46
x5798:	add bp, 44	; 3: 131 197 44
x5801:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5804:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5807:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary2012 arg_list 2
x5811:	mov si, [bp + 8]	; 3: 139 118 8
x5814:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary2013 £temporary2012

printArgument$96:	; Deref £temporary2014 -> £temporary2013 £temporary2013 0

printArgument$97:	; Assign stringValue £temporary2014 -> £temporary2013
x5817:	mov ax, [si]	; 2: 139 4
x5819:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5822:	mov ax, [bp + 8]	; 3: 139 70 8
x5825:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5828:	mov ax, [bp + 16]	; 3: 139 70 16
x5831:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary2015 precision
x5834:	mov si, bp	; 2: 137 238
x5836:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary2015 10
x5839:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5842:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 224 22
x5847:	mov [bp + 48], bp	; 3: 137 110 48
x5850:	add bp, 46	; 3: 131 197 46
x5853:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary2016

printArgument$106:	; Assign arg_list £temporary2016
x5856:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5859:	mov ax, [bp + 44]	; 3: 139 70 44
x5862:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5865:	mov ax, [bp + 18]	; 3: 139 70 18
x5868:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5871:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 253 22
x5876:	mov [bp + 48], bp	; 3: 137 110 48
x5879:	add bp, 46	; 3: 131 197 46
x5882:	jmp printString	; 3: 233 220 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5885:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5888:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5892:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary2032 10
x5894:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5900:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5902:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5906:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary2028 8
x5908:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5914:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5916:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5920:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary2024 2
x5922:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5928:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary2024 16
x5930:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary2028 £temporary2024

printArgument$124:	; Assign £temporary2032 £temporary2028

printArgument$125:	; Assign base £temporary2032
x5936:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x5940:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5944:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x5946:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary2034 arg_list 2
x5950:	mov si, [bp + 8]	; 3: 139 118 8
x5953:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary2035 £temporary2034

printArgument$130:	; Deref £temporary2036 -> £temporary2035 £temporary2035 0

printArgument$131:	; IntegralToIntegral £temporary2037 £temporary2036 -> £temporary2035
x5956:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary2038 £temporary2037
x5958:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary2038
x5964:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x5968:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x5970:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5974:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x5976:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary2040 arg_list 4
x5980:	mov si, [bp + 8]	; 3: 139 118 8
x5983:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary2041 £temporary2040

printArgument$139:	; Deref £temporary2042 -> £temporary2041 £temporary2041 0

printArgument$140:	; Assign value £temporary2042 -> £temporary2041
x5986:	mov eax, [si]	; 3: 102 139 4
x5989:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x5993:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x5995:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary2044 arg_list 2
x5999:	mov si, [bp + 8]	; 3: 139 118 8
x6002:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary2045 £temporary2044

printArgument$145:	; Deref £temporary2046 -> £temporary2045 £temporary2045 0

printArgument$146:	; IntegralToIntegral £temporary2047 £temporary2046 -> £temporary2045
x6005:	mov ax, [si]	; 2: 139 4
x6007:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary2047
x6013:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6017:	mov ax, [bp + 8]	; 3: 139 70 8
x6020:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6023:	mov ax, [bp + 16]	; 3: 139 70 16
x6026:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary2050 precision
x6029:	mov si, bp	; 2: 137 238
x6031:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary2050 10
x6034:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6037:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 163 23
x6042:	mov [bp + 54], bp	; 3: 137 110 54
x6045:	add bp, 52	; 3: 131 197 52
x6048:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary2051

printArgument$156:	; Assign arg_list £temporary2051
x6051:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6054:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6058:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6062:	mov ax, [bp + 10]	; 3: 139 70 10
x6065:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6068:	mov ax, [bp + 12]	; 3: 139 70 12
x6071:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6074:	mov ax, [bp + 14]	; 3: 139 70 14
x6077:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6080:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6084:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary2052 c
x6088:	mov al, [bp + 30]	; 3: 138 70 30
x6091:	and ax, 255	; 3: 37 255 0
x6094:	cmp al, 0	; 2: 60 0
x6096:	jge printArgument$165	; 2: 125 4
x6098:	neg al	; 2: 246 216
x6100:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary2052 26
x6102:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6105:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 231 23
x6110:	mov [bp + 74], bp	; 3: 137 110 74
x6113:	add bp, 72	; 3: 131 197 72
x6116:	jmp isupper	; 3: 233 226 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary2053

printArgument$169:	; Parameter 52 £temporary2053 20
x6119:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6122:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 248 23
x6127:	mov [bp + 54], bp	; 3: 137 110 54
x6130:	add bp, 52	; 3: 131 197 52
x6133:	jmp printUnsignedLong	; 3: 233 206 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6136:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6139:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6143:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6145:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary2056 arg_list 8
x6149:	mov si, [bp + 8]	; 3: 139 118 8
x6152:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary2057 £temporary2056

printArgument$177:	; Deref £temporary2058 -> £temporary2057 £temporary2057 0

printArgument$178:	; PushFloat £temporary2058 -> £temporary2057
x6155:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6157:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6160:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6163:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6166:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6171:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6176:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6181:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6186:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 56 24
x6191:	mov [bp + 46], bp	; 3: 137 110 46
x6194:	add bp, 44	; 3: 131 197 44
x6197:	jmp printLongDoublePlain	; 3: 233 57 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6200:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6202:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary2061 arg_list 8
x6206:	mov si, [bp + 8]	; 3: 139 118 8
x6209:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary2062 £temporary2061

printArgument$193:	; Deref £temporary2063 -> £temporary2062 £temporary2062 0

printArgument$194:	; PushFloat £temporary2063 -> £temporary2062
x6212:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6214:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6217:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6221:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary2067 -> negativePtr negativePtr 0
x6223:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6226:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6229:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6231:	fcompp	; 2: 222 217
x6233:	fstsw ax	; 3: 155 223 224
x6236:	sahf	; 1: 158
x6237:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary2069 1
x6239:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6242:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary2069 0
x6244:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary2067 -> negativePtr £temporary2069
x6247:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6249:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6253:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6255:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6258:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6261:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 131 24
x6266:	mov [bp + 46], bp	; 3: 137 110 46
x6269:	add bp, 44	; 3: 131 197 44
x6272:	jmp fabs	; 3: 233 50 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary2072

printArgument$212:	; PopFloat longDoubleValue
x6275:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6278:	mov ax, [bp + 8]	; 3: 139 70 8
x6281:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6284:	mov ax, [bp + 16]	; 3: 139 70 16
x6287:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary2073 precision
x6290:	mov si, bp	; 2: 137 238
x6292:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary2073 10
x6295:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6298:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 168 24
x6303:	mov [bp + 46], bp	; 3: 137 110 46
x6306:	add bp, 44	; 3: 131 197 44
x6309:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary2074

printArgument$221:	; Assign arg_list £temporary2074
x6312:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6315:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6319:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6321:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6324:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6327:	mov ax, [bp + 10]	; 3: 139 70 10
x6330:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6333:	mov ax, [bp + 12]	; 3: 139 70 12
x6336:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6339:	mov ax, [bp + 14]	; 3: 139 70 14
x6342:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6345:	mov ax, [bp + 18]	; 3: 139 70 18
x6348:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6351:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 221 24
x6356:	mov [bp + 46], bp	; 3: 137 110 46
x6359:	add bp, 44	; 3: 131 197 44
x6362:	jmp printLongDoublePlain	; 3: 233 148 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6365:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary2077 c
x6368:	mov al, [bp + 30]	; 3: 138 70 30
x6371:	and ax, 255	; 3: 37 255 0
x6374:	cmp al, 0	; 2: 60 0
x6376:	jge printArgument$235	; 2: 125 4
x6378:	neg al	; 2: 246 216
x6380:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary2077 6
x6382:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6385:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 255 24
x6390:	mov [bp + 46], bp	; 3: 137 110 46
x6393:	add bp, 44	; 3: 131 197 44
x6396:	jmp tolower	; 3: 233 216 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary2078

printArgument$239:	; NotEqual 257 £temporary2078 101
x6399:	cmp bx, 101	; 3: 131 251 101
x6402:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6404:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6407:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6410:	mov ax, [bp + 10]	; 3: 139 70 10
x6413:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6416:	mov ax, [bp + 12]	; 3: 139 70 12
x6419:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6422:	mov ax, [bp + 14]	; 3: 139 70 14
x6425:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6428:	mov ax, [bp + 18]	; 3: 139 70 18
x6431:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary2080 c
x6434:	mov al, [bp + 30]	; 3: 138 70 30
x6437:	and ax, 255	; 3: 37 255 0
x6440:	cmp al, 0	; 2: 60 0
x6442:	jge printArgument$249	; 2: 125 4
x6444:	neg al	; 2: 246 216
x6446:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary2080 28
x6448:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6451:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 65 25
x6456:	mov [bp + 68], bp	; 3: 137 110 68
x6459:	add bp, 66	; 3: 131 197 66
x6462:	jmp isupper	; 3: 233 136 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary2081

printArgument$253:	; Parameter 44 £temporary2081 22
x6465:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6468:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 82 25
x6473:	mov [bp + 46], bp	; 3: 137 110 46
x6476:	add bp, 44	; 3: 131 197 44
x6479:	jmp printLongDoubleExpo	; 3: 233 38 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6482:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6485:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6488:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6491:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 105 25
x6496:	mov [bp + 46], bp	; 3: 137 110 46
x6499:	add bp, 44	; 3: 131 197 44
x6502:	jmp fabs	; 3: 233 76 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary2083

printArgument$264:	; Parameter 44 £temporary2083 6
x6505:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6508:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 122 25
x6513:	mov [bp + 46], bp	; 3: 137 110 46
x6516:	add bp, 44	; 3: 131 197 44
x6519:	jmp log10	; 3: 233 101 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary2084

printArgument$268:	; FloatingToIntegral £temporary2085 £temporary2084
x6522:	fistp word [container2bytes#]	; 4: 223 30 16 27
x6526:	mov ax, [container2bytes#]	; 3: 161 16 27

printArgument$269:	; Assign expo £temporary2085
x6529:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6532:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6536:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6538:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6542:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6544:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6547:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6550:	mov ax, [bp + 10]	; 3: 139 70 10
x6553:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6556:	mov ax, [bp + 12]	; 3: 139 70 12
x6559:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6562:	mov ax, [bp + 14]	; 3: 139 70 14
x6565:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6568:	mov ax, [bp + 18]	; 3: 139 70 18
x6571:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6574:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 188 25
x6579:	mov [bp + 48], bp	; 3: 137 110 48
x6582:	add bp, 46	; 3: 131 197 46
x6585:	jmp printLongDoublePlain	; 3: 233 181 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6588:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6591:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6594:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6597:	mov ax, [bp + 10]	; 3: 139 70 10
x6600:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6603:	mov ax, [bp + 12]	; 3: 139 70 12
x6606:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6609:	mov ax, [bp + 14]	; 3: 139 70 14
x6612:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6615:	mov ax, [bp + 18]	; 3: 139 70 18
x6618:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary2090 c
x6621:	mov al, [bp + 30]	; 3: 138 70 30
x6624:	and ax, 255	; 3: 37 255 0
x6627:	cmp al, 0	; 2: 60 0
x6629:	jge printArgument$291	; 2: 125 4
x6631:	neg al	; 2: 246 216
x6633:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary2090 28
x6635:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6638:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 252 25
x6643:	mov [bp + 70], bp	; 3: 137 110 70
x6646:	add bp, 68	; 3: 131 197 68
x6649:	jmp isupper	; 3: 233 205 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary2091

printArgument$295:	; Parameter 46 £temporary2091 22
x6652:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6655:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 13 26
x6660:	mov [bp + 48], bp	; 3: 137 110 48
x6663:	add bp, 46	; 3: 131 197 46
x6666:	jmp printLongDoubleExpo	; 3: 233 107 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6669:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6672:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary2094 arg_list 2
x6676:	mov si, [bp + 8]	; 3: 139 118 8
x6679:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary2095 £temporary2094

printArgument$302:	; Deref £temporary2096 -> £temporary2095 £temporary2095 0

printArgument$303:	; Assign ptrValue £temporary2096 -> £temporary2095
x6682:	mov ax, [si]	; 2: 139 4
x6684:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6687:	mov ax, [bp + 8]	; 3: 139 70 8
x6690:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6693:	mov ax, [bp + 16]	; 3: 139 70 16
x6696:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary2097 precision
x6699:	mov si, bp	; 2: 137 238
x6701:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary2097 10
x6704:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6707:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 65 26
x6712:	mov [bp + 46], bp	; 3: 137 110 46
x6715:	add bp, 44	; 3: 131 197 44
x6718:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary2098

printArgument$312:	; Assign arg_list £temporary2098
x6721:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary2099 ptrValue
x6724:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary2100 £temporary2099
x6727:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary2100 6
x6733:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6737:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6742:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6747:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6752:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6760:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6765:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 123 26
x6770:	mov [bp + 46], bp	; 3: 137 110 46
x6773:	add bp, 44	; 3: 131 197 44
x6776:	jmp printUnsignedLong	; 3: 233 75 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6779:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6782:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary2103 arg_list 2
x6786:	mov si, [bp + 8]	; 3: 139 118 8
x6789:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary2104 £temporary2103

printArgument$328:	; Deref £temporary2105 -> £temporary2104 £temporary2104 0

printArgument$329:	; Assign ptrValue £temporary2105 -> £temporary2104
x6792:	mov ax, [si]	; 2: 139 4
x6794:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6797:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary2107 arg_list 2
x6801:	mov si, [bp + 8]	; 3: 139 118 8
x6804:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary2108 £temporary2107

printArgument$333:	; Deref £temporary2109 -> £temporary2108 £temporary2108 0

printArgument$334:	; Assign intPtr £temporary2109 -> £temporary2108
x6807:	mov ax, [si]	; 2: 139 4
x6809:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6812:	mov ax, [bp + 8]	; 3: 139 70 8
x6815:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6818:	mov ax, [bp + 16]	; 3: 139 70 16
x6821:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary2110 precision
x6824:	mov si, bp	; 2: 137 238
x6826:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary2110 10
x6829:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6832:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 190 26
x6837:	mov [bp + 46], bp	; 3: 137 110 46
x6840:	add bp, 44	; 3: 131 197 44
x6843:	nop	; 1: 144
x6844:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary2111

printArgument$343:	; Assign arg_list £temporary2111
x6846:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary2112 -> intPtr intPtr 0
x6849:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary2112 -> intPtr g_outChars
x6852:	mov ax, [g_outChars]	; 3: 161 250 20
x6855:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6857:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6859:	mov ax, [bp + 8]	; 3: 139 70 8
x6862:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6865:	mov ax, [bp + 16]	; 3: 139 70 16
x6868:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary2113 precision
x6871:	mov si, bp	; 2: 137 238
x6873:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary2113 10
x6876:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6879:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 237 26
x6884:	mov [bp + 46], bp	; 3: 137 110 46
x6887:	add bp, 44	; 3: 131 197 44
x6890:	nop	; 1: 144
x6891:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary2114

printArgument$355:	; Assign arg_list £temporary2114
x6893:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6896:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6900:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 2 27
x6905:	mov [bp + 46], bp	; 3: 137 110 46
x6908:	add bp, 44	; 3: 131 197 44
x6911:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6914:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6917:	mov ax, [bp]	; 3: 139 70 0
x6920:	mov di, [bp + 4]	; 3: 139 126 4
x6923:	mov bp, [bp + 2]	; 3: 139 110 2
x6926:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6928:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6930:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6935:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3362 value
x6937:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x6941:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3366 £temporary3362

labs$3:	; Goto 5
x6944:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3366 value
x6946:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3366

labs$6:	; Return £temporary3366
x6950:	mov ax, [bp]	; 3: 139 70 0
x6953:	mov di, [bp + 4]	; 3: 139 126 4
x6956:	mov bp, [bp + 2]	; 3: 139 110 2
x6959:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x6961:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x6965:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1958 -> widthPtr widthPtr 0
x6967:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1958 -> widthPtr -1
x6970:	cmp word [si], -1	; 3: 131 60 255
x6973:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1961 -> widthPtr widthPtr 0
x6975:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x6978:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1963 arg_list 2
x6982:	mov di, [bp + 6]	; 3: 139 126 6
x6985:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1964 £temporary1963

checkWidthAndPrecision$7:	; Deref £temporary1965 -> £temporary1964 £temporary1964 0

checkWidthAndPrecision$8:	; Assign £temporary1961 -> widthPtr £temporary1965 -> £temporary1964
x6988:	mov ax, [di]	; 2: 139 5
x6990:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x6992:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x6996:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary1967 -> precisionPtr precisionPtr 0
x6998:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1967 -> precisionPtr -1
x7001:	cmp word [si], -1	; 3: 131 60 255
x7004:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary1970 -> precisionPtr precisionPtr 0
x7006:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7009:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary1972 arg_list 2
x7013:	mov di, [bp + 6]	; 3: 139 126 6
x7016:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1973 £temporary1972

checkWidthAndPrecision$16:	; Deref £temporary1974 -> £temporary1973 £temporary1973 0

checkWidthAndPrecision$17:	; Assign £temporary1970 -> precisionPtr £temporary1974 -> £temporary1973
x7019:	mov ax, [di]	; 2: 139 5
x7021:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7023:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7026:	mov ax, [bp]	; 3: 139 70 0
x7029:	mov di, [bp + 4]	; 3: 139 126 4
x7032:	mov bp, [bp + 2]	; 3: 139 110 2
x7035:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7037:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7042:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1813 longValue
x7044:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7048:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1813
x7051:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7055:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7059:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 161 27
x7064:	mov [bp + 16], bp	; 3: 137 110 16
x7067:	add bp, 14	; 3: 131 197 14
x7070:	nop	; 1: 144
x7071:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7073:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7075:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7079:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7081:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7085:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 187 27
x7090:	mov [bp + 16], bp	; 3: 137 110 16
x7093:	add bp, 14	; 3: 131 197 14
x7096:	nop	; 1: 144
x7097:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7099:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7101:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7105:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7107:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7111:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 213 27
x7116:	mov [bp + 16], bp	; 3: 137 110 16
x7119:	add bp, 14	; 3: 131 197 14
x7122:	nop	; 1: 144
x7123:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7125:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7130:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7132:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7136:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 238 27
x7141:	mov [bp + 16], bp	; 3: 137 110 16
x7144:	add bp, 14	; 3: 131 197 14
x7147:	nop	; 1: 144
x7148:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7150:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7152:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7156:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7160:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 6 28
x7165:	mov [bp + 16], bp	; 3: 137 110 16
x7168:	add bp, 14	; 3: 131 197 14
x7171:	nop	; 1: 144
x7172:	jmp printLongIntRec	; 2: 235 101

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7174:	mov ax, [bp]	; 3: 139 70 0
x7177:	mov di, [bp + 4]	; 3: 139 126 4
x7180:	mov bp, [bp + 2]	; 3: 139 110 2
x7183:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7185:	mov ax, [g_outStatus]	; 3: 161 156 15
x7188:	cmp ax, 0	; 3: 131 248 0
x7191:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7193:	cmp ax, 1	; 3: 131 248 1
x7196:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7198:	cmp ax, 2	; 3: 131 248 2
x7201:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 25
x7203:	jmp printChar$25	; 2: 235 59

printChar$5:	; IntegralToIntegral £temporary1755 g_outDevice
x7205:	mov ax, [g_outDevice]	; 3: 161 158 15

printChar$6:	; Assign stream £temporary1755
x7208:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7211:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1758 -> stream stream 2
x7213:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1758 -> stream
x7216:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7219:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1761 c
x7222:	mov dx, bp	; 2: 137 234
x7224:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1761

printChar$13:	; Interrupt 33
x7227:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7229:	inc word [g_outChars]	; 4: 255 6 250 20

printChar$15:	; Goto 25
x7233:	jmp printChar$25	; 2: 235 29

printChar$16:	; IntegralToIntegral £temporary1763 g_outDevice
x7235:	mov ax, [g_outDevice]	; 3: 161 158 15

printChar$17:	; Assign outString £temporary1763
x7238:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1764 g_outChars
x7241:	mov ax, [g_outChars]	; 3: 161 250 20

printChar$19:	; Increment g_outChars
x7244:	inc word [g_outChars]	; 4: 255 6 250 20

printChar$20:	; BinaryAdd £temporary1766 outString £temporary1764
x7248:	mov si, [bp + 9]	; 3: 139 118 9
x7251:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1765 -> £temporary1766 £temporary1766 0

printChar$22:	; Assign £temporary1765 -> £temporary1766 c
x7253:	mov al, [bp + 6]	; 3: 138 70 6
x7256:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 25
x7258:	jmp printChar$25	; 2: 235 4

printChar$24:	; Increment g_outChars
x7260:	inc word [g_outChars]	; 4: 255 6 250 20

printChar$25:	; Return 0
x7264:	mov ax, [bp]	; 3: 139 70 0
x7267:	mov di, [bp + 4]	; 3: 139 126 4
x7270:	mov bp, [bp + 2]	; 3: 139 110 2
x7273:	jmp ax	; 2: 255 224

printChar$26:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7275:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7280:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1803 longValue 10
x7282:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7286:	xor edx, edx	; 3: 102 49 210
x7289:	idiv dword [int4$10#]	; 5: 102 247 62 213 28

printLongIntRec$2:	; IntegralToIntegral £temporary1804 £temporary1803
x7294:	cmp edx, 0	; 4: 102 131 250 0
x7298:	jge printLongIntRec$3	; 2: 125 5
x7300:	neg edx	; 3: 102 247 218
x7303:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1804
x7305:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1805 longValue 10
x7308:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7312:	xor edx, edx	; 3: 102 49 210
x7315:	idiv dword [int4$10#]	; 5: 102 247 62 213 28

printLongIntRec$6:	; Parameter 12 £temporary1805 6
x7320:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7324:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 170 28
x7329:	mov [bp + 14], bp	; 3: 137 110 14
x7332:	add bp, 12	; 3: 131 197 12
x7335:	nop	; 1: 144
x7336:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1807 digit 48
x7338:	mov ax, [bp + 10]	; 3: 139 70 10
x7341:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1808 £temporary1807
x7344:	cmp ax, 0	; 3: 131 248 0
x7347:	jge printLongIntRec$12	; 2: 125 4
x7349:	neg ax	; 2: 247 216
x7351:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1808 6
x7353:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7356:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 202 28
x7361:	mov [bp + 14], bp	; 3: 137 110 14
x7364:	add bp, 12	; 3: 131 197 12
x7367:	jmp printChar	; 3: 233 71 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7370:	mov ax, [bp]	; 3: 139 70 0
x7373:	mov di, [bp + 4]	; 3: 139 126 4
x7376:	mov bp, [bp + 2]	; 3: 139 110 2
x7379:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

int4$10#:
x7381:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7385:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7389:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7391:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7395:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7397:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1772 s index
x7402:	mov si, [bp + 6]	; 3: 139 118 6
x7405:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1771 -> £temporary1772 £temporary1772 0

printString$5:	; Equal 53 £temporary1771 -> £temporary1772 0
x7408:	cmp byte [si], 0	; 3: 128 60 0
x7411:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1776 s index
x7415:	mov si, [bp + 6]	; 3: 139 118 6
x7418:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1775 -> £temporary1776 £temporary1776 0

printString$9:	; Parameter 12 £temporary1775 -> £temporary1776 6
x7421:	mov al, [si]	; 2: 138 4
x7423:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7426:	mov word [bp + 12], printString$11	; 5: 199 70 12 16 29
x7431:	mov [bp + 14], bp	; 3: 137 110 14
x7434:	add bp, 12	; 3: 131 197 12
x7437:	jmp printChar	; 3: 233 1 255

printString$11:	; PostCall 12

printString$12:	; Increment index
x7440:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7443:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7445:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1778 precision
x7450:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7453:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1778 0
x7456:	cmp ax, 0	; 3: 131 248 0
x7459:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1781 s index
x7463:	mov si, [bp + 6]	; 3: 139 118 6
x7466:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1780 -> £temporary1781 £temporary1781 0

printString$20:	; Equal 53 £temporary1780 -> £temporary1781 0
x7469:	cmp byte [si], 0	; 3: 128 60 0
x7472:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1786 s index
x7476:	mov si, [bp + 6]	; 3: 139 118 6
x7479:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1785 -> £temporary1786 £temporary1786 0

printString$24:	; Parameter 12 £temporary1785 -> £temporary1786 6
x7482:	mov al, [si]	; 2: 138 4
x7484:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7487:	mov word [bp + 12], printString$26	; 5: 199 70 12 77 29
x7492:	mov [bp + 14], bp	; 3: 137 110 14
x7495:	add bp, 12	; 3: 131 197 12
x7498:	jmp printChar	; 3: 233 196 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7501:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7504:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7506:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7510:	mov word [bp + 10], printString$32	; 5: 199 70 10 100 29
x7515:	mov [bp + 12], bp	; 3: 137 110 12
x7518:	add bp, 10	; 3: 131 197 10
x7521:	jmp printChar	; 3: 233 173 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7524:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7528:	mov word [bp + 10], printString$36	; 5: 199 70 10 118 29
x7533:	mov [bp + 12], bp	; 3: 137 110 12
x7536:	add bp, 10	; 3: 131 197 10
x7539:	jmp printChar	; 3: 233 155 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7542:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7546:	mov word [bp + 10], printString$40	; 5: 199 70 10 136 29
x7551:	mov [bp + 12], bp	; 3: 137 110 12
x7554:	add bp, 10	; 3: 131 197 10
x7557:	jmp printChar	; 3: 233 137 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7560:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7564:	mov word [bp + 10], printString$44	; 5: 199 70 10 154 29
x7569:	mov [bp + 12], bp	; 3: 137 110 12
x7572:	add bp, 10	; 3: 131 197 10
x7575:	jmp printChar	; 3: 233 119 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7578:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7582:	mov word [bp + 10], printString$48	; 5: 199 70 10 172 29
x7587:	mov [bp + 12], bp	; 3: 137 110 12
x7590:	add bp, 10	; 3: 131 197 10
x7593:	jmp printChar	; 3: 233 101 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7596:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7600:	mov word [bp + 10], printString$52	; 5: 199 70 10 190 29
x7605:	mov [bp + 12], bp	; 3: 137 110 12
x7608:	add bp, 10	; 3: 131 197 10
x7611:	jmp printChar	; 3: 233 83 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7614:	mov ax, [bp]	; 3: 139 70 0
x7617:	mov di, [bp + 4]	; 3: 139 126 4
x7620:	mov bp, [bp + 2]	; 3: 139 110 2
x7623:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7625:	mov word [bp + 8], isupper$2	; 5: 199 70 8 215 29
x7630:	mov [bp + 10], bp	; 3: 137 110 10
x7633:	add bp, 8	; 3: 131 197 8
x7636:	nop	; 1: 144
x7637:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary360

isupper$4:	; Assign localeConvPtr £temporary360
x7639:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7642:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7646:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary362 -> localeConvPtr localeConvPtr 14
x7648:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary362 -> localeConvPtr 6
x7651:	mov ax, [si + 14]	; 3: 139 68 14
x7654:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7657:	mov ax, [bp + 6]	; 3: 139 70 6
x7660:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7663:	mov word [bp + 10], isupper$11	; 5: 199 70 10 253 29
x7668:	mov [bp + 12], bp	; 3: 137 110 12
x7671:	add bp, 10	; 3: 131 197 10
x7674:	jmp strchr	; 3: 233 121 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary363

isupper$13:	; Equal 16 £temporary363 0
x7677:	cmp bx, 0	; 3: 131 251 0
x7680:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary365 1
x7682:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7685:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary365 0
x7687:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary365

isupper$18:	; Return £temporary365
x7690:	mov ax, [bp]	; 3: 139 70 0
x7693:	mov di, [bp + 4]	; 3: 139 126 4
x7696:	mov bp, [bp + 2]	; 3: 139 110 2
x7699:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7701:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7705:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7707:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7711:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary369 1
x7713:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7716:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary369 0
x7718:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary369

isupper$25:	; Return £temporary369
x7721:	mov ax, [bp]	; 3: 139 70 0
x7724:	mov di, [bp + 4]	; 3: 139 126 4
x7727:	mov bp, [bp + 2]	; 3: 139 110 2
x7730:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7732:	cmp word [@614$g_currStructPtr], 0	; 5: 131 62 82 30 0
x7737:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary493 -> g_currStructPtr g_currStructPtr 2
x7739:	mov si, [@614$g_currStructPtr]	; 4: 139 54 82 30

localeconv$2:	; Assign £temporary497 £temporary493 -> g_currStructPtr
x7743:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7746:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary497 0
x7748:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary497

localeconv$6:	; Return £temporary497
x7751:	mov ax, [bp]	; 3: 139 70 0
x7754:	mov di, [bp + 4]	; 3: 139 126 4
x7757:	mov bp, [bp + 2]	; 3: 139 110 2
x7760:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@614$g_currStructPtr:
x7762:	dw @612$sArray	; 2: 84 30

@612$sArray:
x7764:	dw string_# ; 2: 96 30
x7766:	dw @609$en_US_utf8	; 2: 97 30
x7768:	dw string_C# ; 2: 113 33
x7770:	dw @609$en_US_utf8	; 2: 97 30
x7772:	dw string_US# ; 2: 115 33
x7774:	dw @609$en_US_utf8	; 2: 97 30

string_#:
x7776:	db 0	; 1: 0

@609$en_US_utf8:
x7777:	dw 1	; 2: 1 0
x7779:	dw 1	; 2: 1 0
x7781:	dw @605$enShortDayList ; 2: 115 30
x7783:	dw @606$enLongDayList ; 2: 157 30
x7785:	dw @607$enShortMonthList ; 2: 228 30
x7787:	dw @608$enLongMonthList ; 2: 44 31
x7789:	dw string_abcdefghijklmnopqrstuvwxyz# ; 2: 150 31
x7791:	dw string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 177 31
x7793:	dw enMessageList ; 2: 204 31

@605$enShortDayList:
x7795:	dw string_Sun# ; 2: 129 30
x7797:	dw string_Mon# ; 2: 133 30
x7799:	dw string_Tue# ; 2: 137 30
x7801:	dw string_Wed# ; 2: 141 30
x7803:	dw string_Thu# ; 2: 145 30
x7805:	dw string_Fri# ; 2: 149 30
x7807:	dw string_Sat# ; 2: 153 30

string_Sun#:
x7809:	db "Sun", 0	; 4: 83 117 110 0

string_Mon#:
x7813:	db "Mon", 0	; 4: 77 111 110 0

string_Tue#:
x7817:	db "Tue", 0	; 4: 84 117 101 0

string_Wed#:
x7821:	db "Wed", 0	; 4: 87 101 100 0

string_Thu#:
x7825:	db "Thu", 0	; 4: 84 104 117 0

string_Fri#:
x7829:	db "Fri", 0	; 4: 70 114 105 0

string_Sat#:
x7833:	db "Sat", 0	; 4: 83 97 116 0

@606$enLongDayList:
x7837:	dw string_Sunday# ; 2: 171 30
x7839:	dw string_Monday# ; 2: 178 30
x7841:	dw string_Tuesday# ; 2: 185 30
x7843:	dw string_Wednesday# ; 2: 193 30
x7845:	dw string_Thursday# ; 2: 203 30
x7847:	dw string_Friday# ; 2: 212 30
x7849:	dw string_Saturday# ; 2: 219 30

string_Sunday#:
x7851:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

string_Monday#:
x7858:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

string_Tuesday#:
x7865:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

string_Wednesday#:
x7873:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

string_Thursday#:
x7883:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

string_Friday#:
x7892:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

string_Saturday#:
x7899:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@607$enShortMonthList:
x7908:	dw string_Jan# ; 2: 252 30
x7910:	dw string_Feb# ; 2: 0 31
x7912:	dw string_Mar# ; 2: 4 31
x7914:	dw string_Apr# ; 2: 8 31
x7916:	dw string_May# ; 2: 12 31
x7918:	dw string_Jun# ; 2: 16 31
x7920:	dw string_Jul# ; 2: 20 31
x7922:	dw string_Aug# ; 2: 24 31
x7924:	dw string_Sep# ; 2: 28 31
x7926:	dw string_Oct# ; 2: 32 31
x7928:	dw string_Nov# ; 2: 36 31
x7930:	dw string_Dec# ; 2: 40 31

string_Jan#:
x7932:	db "Jan", 0	; 4: 74 97 110 0

string_Feb#:
x7936:	db "Feb", 0	; 4: 70 101 98 0

string_Mar#:
x7940:	db "Mar", 0	; 4: 77 97 114 0

string_Apr#:
x7944:	db "Apr", 0	; 4: 65 112 114 0

string_May#:
x7948:	db "May", 0	; 4: 77 97 121 0

string_Jun#:
x7952:	db "Jun", 0	; 4: 74 117 110 0

string_Jul#:
x7956:	db "Jul", 0	; 4: 74 117 108 0

string_Aug#:
x7960:	db "Aug", 0	; 4: 65 117 103 0

string_Sep#:
x7964:	db "Sep", 0	; 4: 83 101 112 0

string_Oct#:
x7968:	db "Oct", 0	; 4: 79 99 116 0

string_Nov#:
x7972:	db "Nov", 0	; 4: 78 111 118 0

string_Dec#:
x7976:	db "Dec", 0	; 4: 68 101 99 0

@608$enLongMonthList:
x7980:	dw string_January# ; 2: 68 31
x7982:	dw string_February# ; 2: 76 31
x7984:	dw string_March# ; 2: 85 31
x7986:	dw string_April# ; 2: 91 31
x7988:	dw string_May# ; 2: 12 31
x7990:	dw string_June# ; 2: 97 31
x7992:	dw string_July# ; 2: 102 31
x7994:	dw string_August# ; 2: 107 31
x7996:	dw string_September# ; 2: 114 31
x7998:	dw string_October# ; 2: 124 31
x8000:	dw string_November# ; 2: 132 31
x8002:	dw string_December# ; 2: 141 31

string_January#:
x8004:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

string_February#:
x8012:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

string_March#:
x8021:	db "March", 0	; 6: 77 97 114 99 104 0

string_April#:
x8027:	db "April", 0	; 6: 65 112 114 105 108 0

string_June#:
x8033:	db "June", 0	; 5: 74 117 110 101 0

string_July#:
x8038:	db "July", 0	; 5: 74 117 108 121 0

string_August#:
x8043:	db "August", 0	; 7: 65 117 103 117 115 116 0

string_September#:
x8050:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

string_October#:
x8060:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

string_November#:
x8068:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

string_December#:
x8077:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

string_abcdefghijklmnopqrstuvwxyz#:
x8086:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8113:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8140:	dw string_no20error# ; 2: 244 31
x8142:	dw string_function20number20invalid# ; 2: 253 31
x8144:	dw string_file20not20found# ; 2: 21 32
x8146:	dw string_path20not20found# ; 2: 36 32
x8148:	dw string_no20handle20available# ; 2: 51 32
x8150:	dw string_access20denied# ; 2: 71 32
x8152:	dw string_out20of20domain# ; 2: 85 32
x8154:	dw string_out20of20range# ; 2: 99 32
x8156:	dw string_invalid20multibyte20sequence# ; 2: 112 32
x8158:	dw string_error20while20opening# ; 2: 139 32
x8160:	dw string_error20while20flushing# ; 2: 159 32
x8162:	dw string_error20while20closing# ; 2: 180 32
x8164:	dw string_open20mode20invalid# ; 2: 200 32
x8166:	dw string_error20while20writing# ; 2: 218 32
x8168:	dw string_error20while20reading# ; 2: 238 32
x8170:	dw string_error20while20seeking# ; 2: 2 33
x8172:	dw string_error20while20telling# ; 2: 22 33
x8174:	dw string_error20while20sizing# ; 2: 42 33
x8176:	dw string_error20while20removing20file# ; 2: 61 33
x8178:	dw string_error20while20renaming20file# ; 2: 87 33

string_no20error#:
x8180:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

string_function20number20invalid#:
x8189:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

string_file20not20found#:
x8213:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

string_path20not20found#:
x8228:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

string_no20handle20available#:
x8243:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

string_access20denied#:
x8263:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

string_out20of20domain#:
x8277:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

string_out20of20range#:
x8291:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

string_invalid20multibyte20sequence#:
x8304:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

string_error20while20opening#:
x8331:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

string_error20while20flushing#:
x8351:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

string_error20while20closing#:
x8372:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

string_open20mode20invalid#:
x8392:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

string_error20while20writing#:
x8410:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

string_error20while20reading#:
x8430:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

string_error20while20seeking#:
x8450:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

string_error20while20telling#:
x8470:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

string_error20while20sizing#:
x8490:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

string_error20while20removing20file#:
x8509:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

string_error20while20renaming20file#:
x8535:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

string_C#:
x8561:	db "C", 0	; 2: 67 0

string_US#:
x8563:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary3976 i
x8566:	mov ax, [bp + 8]	; 3: 139 70 8
x8569:	cmp ax, 0	; 3: 131 248 0
x8572:	jge strchr$1	; 2: 125 4
x8574:	neg ax	; 2: 247 216
x8576:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary3976
x8578:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8581:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary3978 text index
x8586:	mov si, [bp + 6]	; 3: 139 118 6
x8589:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary3977 -> £temporary3978 £temporary3978 0

strchr$5:	; Equal 16 £temporary3977 -> £temporary3978 0
x8592:	cmp byte [si], 0	; 3: 128 60 0
x8595:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary3982 text index
x8597:	mov si, [bp + 6]	; 3: 139 118 6
x8600:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary3981 -> £temporary3982 £temporary3982 0

strchr$8:	; NotEqual 14 £temporary3981 -> £temporary3982 c
x8603:	mov al, [bp + 12]	; 3: 138 70 12
x8606:	cmp [si], al	; 2: 56 4
x8608:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary3985 text index
x8610:	mov bx, [bp + 6]	; 3: 139 94 6
x8613:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary3984 -> £temporary3985 £temporary3985 0

strchr$11:	; address £temporary3986 £temporary3984 -> £temporary3985

strchr$12:	; SetReturnValue £temporary3986

strchr$13:	; Return £temporary3986
x8616:	mov ax, [bp]	; 3: 139 70 0
x8619:	mov di, [bp + 4]	; 3: 139 126 4
x8622:	mov bp, [bp + 2]	; 3: 139 110 2
x8625:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8627:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8630:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8632:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8635:	mov ax, [bp]	; 3: 139 70 0
x8638:	mov di, [bp + 4]	; 3: 139 126 4
x8641:	mov bp, [bp + 2]	; 3: 139 110 2
x8644:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8646:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8650:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8652:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8656:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 222 33
x8661:	mov [bp + 24], bp	; 3: 137 110 24
x8664:	add bp, 22	; 3: 131 197 22
x8667:	jmp printChar	; 3: 233 51 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8670:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8674:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8676:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8680:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 246 33
x8685:	mov [bp + 24], bp	; 3: 137 110 24
x8688:	add bp, 22	; 3: 131 197 22
x8691:	jmp printChar	; 3: 233 27 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8694:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8698:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8700:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8705:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8707:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8711:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 21 34
x8716:	mov [bp + 24], bp	; 3: 137 110 24
x8719:	add bp, 22	; 3: 131 197 22
x8722:	jmp printChar	; 3: 233 252 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8725:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8730:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8732:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8736:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 46 34
x8741:	mov [bp + 24], bp	; 3: 137 110 24
x8744:	add bp, 22	; 3: 131 197 22
x8747:	jmp printChar	; 3: 233 227 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8750:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8754:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1862 88
x8756:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8758:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1862 120
x8760:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1862 6
x8762:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8765:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 75 34
x8770:	mov [bp + 24], bp	; 3: 137 110 24
x8773:	add bp, 22	; 3: 131 197 22
x8776:	jmp printChar	; 3: 233 198 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8779:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8784:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8786:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8790:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 100 34
x8795:	mov [bp + 24], bp	; 3: 137 110 24
x8798:	add bp, 22	; 3: 131 197 22
x8801:	jmp printChar	; 3: 233 173 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8804:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8806:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8810:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8814:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8818:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8822:	mov ax, [bp + 20]	; 3: 139 70 20
x8825:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8828:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 138 34
x8833:	mov [bp + 24], bp	; 3: 137 110 24
x8836:	add bp, 22	; 3: 131 197 22
x8839:	nop	; 1: 144
x8840:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8842:	mov ax, [bp]	; 3: 139 70 0
x8845:	mov di, [bp + 4]	; 3: 139 126 4
x8848:	mov bp, [bp + 2]	; 3: 139 110 2
x8851:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8853:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8858:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1838 unsignedValue base
x8860:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8864:	xor edx, edx	; 3: 102 49 210
x8867:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1839 £temporary1838

printUnsignedLongRec$3:	; Assign digit £temporary1839
x8871:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1840 unsignedValue base
x8874:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8878:	xor edx, edx	; 3: 102 49 210
x8881:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1840 6
x8885:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8889:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8893:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8897:	mov ax, [bp + 14]	; 3: 139 70 14
x8900:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8903:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 213 34
x8908:	mov [bp + 20], bp	; 3: 137 110 20
x8911:	add bp, 18	; 3: 131 197 18
x8914:	nop	; 1: 144
x8915:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8917:	mov ax, [bp + 16]	; 3: 139 70 16
x8920:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8923:	mov ax, [bp + 14]	; 3: 139 70 14
x8926:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x8929:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 239 34
x8934:	mov [bp + 20], bp	; 3: 137 110 20
x8937:	add bp, 18	; 3: 131 197 18
x8940:	nop	; 1: 144
x8941:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1842

printUnsignedLongRec$17:	; Assign c £temporary1842
x8943:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x8946:	mov al, [bp + 18]	; 3: 138 70 18
x8949:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x8952:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 6 35
x8957:	mov [bp + 21], bp	; 3: 137 110 21
x8960:	add bp, 19	; 3: 131 197 19
x8963:	jmp printChar	; 3: 233 11 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x8966:	mov ax, [bp]	; 3: 139 70 0
x8969:	mov di, [bp + 4]	; 3: 139 126 4
x8972:	mov bp, [bp + 2]	; 3: 139 110 2
x8975:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x8977:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x8981:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1828 digit 48
x8983:	mov bx, [bp + 6]	; 3: 139 94 6
x8986:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1829 £temporary1828
x8989:	cmp bx, 0	; 3: 131 251 0
x8992:	jge digitToChar$3	; 2: 125 4
x8994:	neg bx	; 2: 247 219
x8996:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1829

digitToChar$4:	; Return £temporary1829
x8998:	mov ax, [bp]	; 3: 139 70 0
x9001:	mov di, [bp + 4]	; 3: 139 126 4
x9004:	mov bp, [bp + 2]	; 3: 139 110 2
x9007:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9009:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9013:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1830 digit 10
x9015:	mov bx, [bp + 6]	; 3: 139 94 6
x9018:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1831 £temporary1830 65
x9021:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1832 £temporary1831
x9024:	cmp bx, 0	; 3: 131 251 0
x9027:	jge digitToChar$9	; 2: 125 4
x9029:	neg bx	; 2: 247 219
x9031:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1832

digitToChar$10:	; Return £temporary1832
x9033:	mov ax, [bp]	; 3: 139 70 0
x9036:	mov di, [bp + 4]	; 3: 139 126 4
x9039:	mov bp, [bp + 2]	; 3: 139 110 2
x9042:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1833 digit 10
x9044:	mov bx, [bp + 6]	; 3: 139 94 6
x9047:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1834 £temporary1833 97
x9050:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1835 £temporary1834
x9053:	cmp bx, 0	; 3: 131 251 0
x9056:	jge digitToChar$14	; 2: 125 4
x9058:	neg bx	; 2: 247 219
x9060:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1835

digitToChar$15:	; Return £temporary1835
x9062:	mov ax, [bp]	; 3: 139 70 0
x9065:	mov di, [bp + 4]	; 3: 139 126 4
x9068:	mov bp, [bp + 2]	; 3: 139 110 2
x9071:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9073:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9076:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9078:	fcompp	; 2: 222 217
x9080:	fstsw ax	; 3: 155 223 224
x9083:	sahf	; 1: 158
x9084:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9086:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9090:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 144 35
x9095:	mov [bp + 24], bp	; 3: 137 110 24
x9098:	add bp, 22	; 3: 131 197 22
x9101:	jmp printChar	; 3: 233 129 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9104:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1898 longDoubleValue
x9107:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9109:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9112:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9117:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9122:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1899 longDoubleValue
x9125:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x9129:	mov eax, [container4bytes#]	; 4: 102 161 9 36

printLongDoublePlain$14:	; Assign longValue £temporary1899
x9133:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9137:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9141:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9145:	mov ax, [bp + 14]	; 3: 139 70 14
x9148:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9151:	mov ax, [bp + 16]	; 3: 139 70 16
x9154:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9157:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 211 35
x9162:	mov [bp + 28], bp	; 3: 137 110 28
x9165:	add bp, 26	; 3: 131 197 26
x9168:	jmp printLongInt	; 3: 233 170 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9171:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1901 longValue
x9174:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1902 longDoubleValue £temporary1901
x9177:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9179:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9182:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9185:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9188:	mov ax, [bp + 18]	; 3: 139 70 18
x9191:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9194:	mov ax, [bp + 20]	; 3: 139 70 20
x9197:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9200:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 254 35
x9205:	mov [bp + 28], bp	; 3: 137 110 28
x9208:	add bp, 26	; 3: 131 197 26
x9211:	nop	; 1: 144
x9212:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9214:	mov ax, [bp]	; 3: 139 70 0
x9217:	mov di, [bp + 4]	; 3: 139 126 4
x9220:	mov bp, [bp + 2]	; 3: 139 110 2
x9223:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9225:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9229:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9232:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1877 longDoubleValue
x9235:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x9239:	mov eax, [container4bytes#]	; 4: 102 161 9 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1878 £temporary1877
x9243:	mov [container4bytes#], eax	; 4: 102 163 9 36
x9247:	fild dword [container4bytes#]	; 4: 219 6 9 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1879 longDoubleValue £temporary1878
x9251:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9253:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9256:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9260:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9262:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9267:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9271:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9273:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9277:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9279:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9283:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 81 36
x9288:	mov [bp + 20], bp	; 3: 137 110 20
x9291:	add bp, 18	; 3: 131 197 18
x9294:	jmp printChar	; 3: 233 192 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1885 precision
x9297:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9300:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1885 0
x9303:	cmp ax, 0	; 3: 131 248 0
x9306:	jle printLongDoubleFraction$35	; 2: 126 70

printLongDoubleFraction$17:	; PushFloat 10.0
x9308:	fld qword [float8$10.0#]	; 4: 221 6 173 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9312:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1887 10.0 longDoubleValue
x9315:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
x9317:	fstp qword [bp + 18]	; 3: 221 94 18

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
x9320:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1888 longDoubleValue10
x9323:	fistp word [container2bytes#]	; 4: 223 30 16 27
x9327:	mov ax, [container2bytes#]	; 3: 161 16 27

printLongDoubleFraction$23:	; Assign digitValue £temporary1888
x9330:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$25:	; BinaryAdd £temporary1889 digitValue 48
x9333:	mov ax, [bp + 26]	; 3: 139 70 26
x9336:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1890 £temporary1889
x9339:	cmp ax, 0	; 3: 131 248 0
x9342:	jge printLongDoubleFraction$27	; 2: 125 4
x9344:	neg ax	; 2: 247 216
x9346:	neg al	; 2: 246 216

printLongDoubleFraction$27:	; Parameter 28 £temporary1890 6
x9348:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$28:	; Call 28 printChar 0
x9351:	mov word [bp + 28], printLongDoubleFraction$29	; 5: 199 70 28 149 36
x9356:	mov [bp + 30], bp	; 3: 137 110 30
x9359:	add bp, 28	; 3: 131 197 28
x9362:	jmp printChar	; 3: 233 124 247

printLongDoubleFraction$29:	; PostCall 28

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
x9365:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$31:	; IntegralToFloating £temporary1892 digitValue
x9368:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$32:	; BinarySubtract £temporary1893 longDoubleValue10 £temporary1892
x9371:	fsub	; 2: 222 233

printLongDoubleFraction$33:	; PopFloat longDoubleValue
x9373:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$34:	; Goto 14
x9376:	jmp printLongDoubleFraction$14	; 2: 235 175

printLongDoubleFraction$35:	; Return 0
x9378:	mov ax, [bp]	; 3: 139 70 0
x9381:	mov di, [bp + 4]	; 3: 139 126 4
x9384:	mov bp, [bp + 2]	; 3: 139 110 2
x9387:	jmp ax	; 2: 255 224

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction

float8$10.0#:
x9389:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9397:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9400:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9402:	fcompp	; 2: 222 217
x9404:	fstsw ax	; 3: 155 223 224
x9407:	sahf	; 1: 158
x9408:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9410:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary806 x
x9413:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9415:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9417:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary810

fabs$9:	; Return £temporary810
x9420:	mov ax, [bp]	; 3: 139 70 0
x9423:	mov di, [bp + 4]	; 3: 139 126 4
x9426:	mov bp, [bp + 2]	; 3: 139 110 2
x9429:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9431:	mov ax, [bp + 6]	; 3: 139 70 6
x9434:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9437:	mov word [bp + 8], tolower$3	; 5: 199 70 8 235 36
x9442:	mov [bp + 10], bp	; 3: 137 110 10
x9445:	add bp, 8	; 3: 131 197 8
x9448:	jmp isupper	; 3: 233 222 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary440

tolower$5:	; Equal 31 £temporary440 0
x9451:	cmp bx, 0	; 3: 131 251 0
x9454:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9456:	mov word [bp + 8], tolower$8	; 5: 199 70 8 254 36
x9461:	mov [bp + 10], bp	; 3: 137 110 10
x9464:	add bp, 8	; 3: 131 197 8
x9467:	jmp localeconv	; 3: 233 54 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary441

tolower$10:	; Assign localeConvPtr £temporary441
x9470:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9473:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9477:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary443 -> localeConvPtr localeConvPtr 12
x9479:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary443 -> localeConvPtr
x9482:	mov ax, [si + 12]	; 3: 139 68 12
x9485:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary444 -> localeConvPtr localeConvPtr 14
x9488:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary444 -> localeConvPtr
x9491:	mov ax, [si + 14]	; 3: 139 68 14
x9494:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9497:	mov ax, [bp + 12]	; 3: 139 70 12
x9500:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9503:	mov ax, [bp + 6]	; 3: 139 70 6
x9506:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9509:	mov word [bp + 14], tolower$20	; 5: 199 70 14 51 37
x9514:	mov [bp + 16], bp	; 3: 137 110 16
x9517:	add bp, 14	; 3: 131 197 14
x9520:	jmp strchr	; 3: 233 67 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary445

tolower$22:	; BinarySubtract index £temporary445 upperCase
x9523:	sub bx, [bp + 12]	; 3: 43 94 12
x9526:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary448 lowerCase index
x9529:	mov si, [bp + 10]	; 3: 139 118 10
x9532:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary447 -> £temporary448 £temporary448 0

tolower$25:	; IntegralToIntegral £temporary449 £temporary447 -> £temporary448
x9535:	mov bl, [si]	; 2: 138 28
x9537:	and bx, 255	; 4: 129 227 255 0
x9541:	cmp bl, 0	; 3: 128 251 0
x9544:	jge tolower$26	; 2: 125 4
x9546:	neg bl	; 2: 246 219
x9548:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary449

tolower$27:	; Return £temporary449
x9550:	mov ax, [bp]	; 3: 139 70 0
x9553:	mov di, [bp + 4]	; 3: 139 126 4
x9556:	mov bp, [bp + 2]	; 3: 139 110 2
x9559:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary450 c 32
x9561:	mov bx, [bp + 6]	; 3: 139 94 6
x9564:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary450

tolower$30:	; Return £temporary450
x9567:	mov ax, [bp]	; 3: 139 70 0
x9570:	mov di, [bp + 4]	; 3: 139 126 4
x9573:	mov bp, [bp + 2]	; 3: 139 110 2
x9576:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9578:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9581:	mov ax, [bp]	; 3: 139 70 0
x9584:	mov di, [bp + 4]	; 3: 139 126 4
x9587:	mov bp, [bp + 2]	; 3: 139 110 2
x9590:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9592:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9595:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9597:	fcompp	; 2: 222 217
x9599:	fstsw ax	; 3: 155 223 224
x9602:	sahf	; 1: 158
x9603:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9605:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9609:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 151 37
x9614:	mov [bp + 26], bp	; 3: 137 110 26
x9617:	add bp, 24	; 3: 131 197 24
x9620:	jmp printChar	; 3: 233 122 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9623:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9625:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9628:	mov ax, [bp + 20]	; 3: 139 70 20
x9631:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9634:	mov ax, [bp + 18]	; 3: 139 70 18
x9637:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9640:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 182 37
x9645:	mov [bp + 26], bp	; 3: 137 110 26
x9648:	add bp, 24	; 3: 131 197 24
x9651:	jmp printLongDoubleFraction	; 3: 233 87 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9654:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9658:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1918 69
x9660:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9662:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1918 101
x9664:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1918 6
x9666:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9669:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 211 37
x9674:	mov [bp + 26], bp	; 3: 137 110 26
x9677:	add bp, 24	; 3: 131 197 24
x9680:	jmp printChar	; 3: 233 62 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9683:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9687:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 229 37
x9692:	mov [bp + 26], bp	; 3: 137 110 26
x9695:	add bp, 24	; 3: 131 197 24
x9698:	jmp printChar	; 3: 233 44 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9701:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9704:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9707:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9709:	fcompp	; 2: 222 217
x9711:	fstsw ax	; 3: 155 223 224
x9714:	sahf	; 1: 158
x9715:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9717:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9721:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 7 38
x9726:	mov [bp + 26], bp	; 3: 137 110 26
x9729:	add bp, 24	; 3: 131 197 24
x9732:	jmp printChar	; 3: 233 10 246

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9735:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1923 value
x9738:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9740:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9743:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9746:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9749:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 35 38
x9754:	mov [bp + 26], bp	; 3: 137 110 26
x9757:	add bp, 24	; 3: 131 197 24
x9760:	jmp log10	; 3: 233 188 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1924

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1925 £temporary1924
x9763:	fistp word [container2bytes#]	; 4: 223 30 16 27
x9767:	mov ax, [container2bytes#]	; 3: 161 16 27

printLongDoubleExpo$44:	; Assign expo £temporary1925
x9770:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9773:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9776:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9779:	fld qword [float8$10.0#]	; 4: 221 6 173 36

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9783:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1926 expo
x9786:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1926 14
x9789:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9792:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 78 38
x9797:	mov [bp + 36], bp	; 3: 137 110 36
x9800:	add bp, 34	; 3: 131 197 34
x9803:	jmp pow	; 3: 233 230 1

printLongDoubleExpo$52:	; PostCall 26
x9806:	fstp qword [bp + 34]	; 3: 221 94 34
x9809:	fld qword [bp + 26]	; 3: 221 70 26
x9812:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1927

printLongDoubleExpo$54:	; SignedDivide £temporary1928 value £temporary1927
x9815:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9817:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9820:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9823:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9826:	mov ax, [bp + 14]	; 3: 139 70 14
x9829:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9832:	mov ax, [bp + 16]	; 3: 139 70 16
x9835:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9838:	mov ax, [bp + 18]	; 3: 139 70 18
x9841:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9844:	mov ax, [bp + 20]	; 3: 139 70 20
x9847:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9850:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 136 38
x9855:	mov [bp + 28], bp	; 3: 137 110 28
x9858:	add bp, 26	; 3: 131 197 26
x9861:	jmp printLongDoublePlain	; 3: 233 233 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9864:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9868:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1934 69
x9870:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9872:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1934 101
x9874:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1934 6
x9876:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9879:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 165 38
x9884:	mov [bp + 28], bp	; 3: 137 110 28
x9887:	add bp, 26	; 3: 131 197 26
x9890:	jmp printChar	; 3: 233 108 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1936 expo
x9893:	mov ax, [bp + 24]	; 3: 139 70 24
x9896:	and eax, 65535	; 6: 102 37 255 255 0 0
x9902:	cmp ax, 0	; 3: 131 248 0
x9905:	jge printLongDoubleExpo$75	; 2: 125 5
x9907:	neg ax	; 2: 247 216
x9909:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1936 6
x9912:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9916:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9921:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9926:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 212 38
x9931:	mov [bp + 28], bp	; 3: 137 110 28
x9934:	add bp, 26	; 3: 131 197 26
x9937:	jmp printLongInt	; 3: 233 169 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x9940:	mov ax, [bp]	; 3: 139 70 0
x9943:	mov di, [bp + 4]	; 3: 139 126 4
x9946:	mov bp, [bp + 2]	; 3: 139 110 2
x9949:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x9951:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x9954:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x9957:	mov word [bp + 14], log10$4	; 5: 199 70 14 243 38
x9962:	mov [bp + 16], bp	; 3: 137 110 16
x9965:	add bp, 14	; 3: 131 197 14
x9968:	nop	; 1: 144
x9969:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary527

log10$6:	; PushFloat 2.30
x9971:	fld qword [float8$2.30#]	; 4: 221 6 4 39

log10$7:	; SignedDivide £temporary528 £temporary527 2.30
x9975:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary528

log10$9:	; Return £temporary528
x9977:	mov ax, [bp]	; 3: 139 70 0
x9980:	mov di, [bp + 4]	; 3: 139 126 4
x9983:	mov bp, [bp + 2]	; 3: 139 110 2
x9986:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

float8$2.30#:
x9988:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x9996:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x9999:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 76 x 0
x10001:	fcompp	; 2: 222 217
x10003:	fstsw ax	; 3: 155 223 224
x10006:	sahf	; 1: 158
x10007:	jae log$76	; 4: 15 131 238 0

log$3:	; Assign n 0
x10011:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10016:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10019:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10021:	fcompp	; 2: 222 217
x10023:	fstsw ax	; 3: 155 223 224
x10026:	sahf	; 1: 158
x10027:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10029:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10032:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10034:	fcompp	; 2: 222 217
x10036:	fstsw ax	; 3: 155 223 224
x10039:	sahf	; 1: 158
x10040:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10042:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10045:	fld qword [float8$2.71#]	; 4: 221 6 28 40

log$12:	; SignedDivide £temporary509 x 2.71
x10049:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10051:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10054:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10057:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10059:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10062:	fld qword [float8$0.368#]	; 4: 221 6 36 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10066:	fcompp	; 2: 222 217
x10068:	fstsw ax	; 3: 155 223 224
x10071:	sahf	; 1: 158
x10072:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10074:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10077:	fld qword [float8$0.368#]	; 4: 221 6 36 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10081:	fcompp	; 2: 222 217
x10083:	fstsw ax	; 3: 155 223 224
x10086:	sahf	; 1: 158
x10087:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10089:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10092:	fld qword [float8$2.71#]	; 4: 221 6 28 40

log$24:	; SignedMultiply £temporary513 x 2.71
x10096:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10098:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10101:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10104:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10106:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10108:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10111:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10113:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10116:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10118:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10121:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10124:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary515 x 1
x10126:	fsub	; 2: 222 233

log$37:	; PopFloat x_minus_1
x10128:	fstp qword [bp + 48]	; 3: 221 94 48

log$38:	; PushFloat x_minus_1
x10131:	fld qword [bp + 48]	; 3: 221 70 48

log$39:	; PopFloat power
x10134:	fstp qword [bp + 56]	; 3: 221 94 56

log$40:	; PushFloat sign
x10137:	fld qword [bp + 40]	; 3: 221 70 40

log$41:	; PushFloat power
x10140:	fld qword [bp + 56]	; 3: 221 70 56

log$42:	; SignedMultiply £temporary516 sign power
x10143:	fmul	; 2: 222 201

log$43:	; PushFloat index
x10145:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushOne
x10148:	fld1	; 2: 217 232

log$45:	; BinaryAdd index index 1
x10150:	fadd	; 2: 222 193

log$46:	; TopFloat index
x10152:	fst qword [bp + 16]	; 3: 221 86 16

log$47:	; PushOne
x10155:	fld1	; 2: 217 232

log$48:	; BinarySubtract index index 1
x10157:	fsub	; 2: 222 233

log$49:	; SignedDivide £temporary518 £temporary516 £temporary517
x10159:	fdiv	; 2: 222 249

log$50:	; PopFloat term
x10161:	fstp qword [bp + 24]	; 3: 221 94 24

log$51:	; PushFloat sum
x10164:	fld qword [bp + 32]	; 3: 221 70 32

log$52:	; PushFloat term
x10167:	fld qword [bp + 24]	; 3: 221 70 24

log$53:	; BinaryAdd £temporary519 sum term
x10170:	fadd	; 2: 222 193

log$54:	; PopFloat sum
x10172:	fstp qword [bp + 32]	; 3: 221 94 32

log$55:	; PushFloat power
x10175:	fld qword [bp + 56]	; 3: 221 70 56

log$56:	; PushFloat x_minus_1
x10178:	fld qword [bp + 48]	; 3: 221 70 48

log$57:	; SignedMultiply £temporary520 power x_minus_1
x10181:	fmul	; 2: 222 201

log$58:	; PopFloat power
x10183:	fstp qword [bp + 56]	; 3: 221 94 56

log$59:	; PushFloat sign
x10186:	fld qword [bp + 40]	; 3: 221 70 40

log$60:	; PushFloat -1.0
x10189:	fld qword [float8$minus1.0#]	; 4: 221 6 230 4

log$61:	; SignedMultiply £temporary521 sign -1.0
x10193:	fmul	; 2: 222 201

log$62:	; PopFloat sign
x10195:	fstp qword [bp + 40]	; 3: 221 94 40

log$63:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$64:	; PushFloat term
x10198:	fld qword [bp + 24]	; 3: 221 70 24

log$65:	; Parameter 64 term 6
x10201:	fstp qword [bp + 70]	; 3: 221 94 70

log$66:	; Call 64 fabs 0
x10204:	mov word [bp + 64], log$67	; 5: 199 70 64 234 39
x10209:	mov [bp + 66], bp	; 3: 137 110 66
x10212:	add bp, 64	; 3: 131 197 64
x10215:	jmp fabs	; 3: 233 203 252

log$67:	; PostCall 64

log$68:	; GetReturnValue £temporary522

log$69:	; PushFloat 0.000000001
x10218:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

log$70:	; SignedGreaterThanEqual 40 £temporary522 0.000000001
x10222:	fcompp	; 2: 222 217
x10224:	fstsw ax	; 3: 155 223 224
x10227:	sahf	; 1: 158
x10228:	jbe log$40	; 2: 118 163

log$71:	; PushFloat sum
x10230:	fld qword [bp + 32]	; 3: 221 70 32

log$72:	; IntegralToFloating £temporary524 n
x10233:	fild word [bp + 14]	; 3: 223 70 14

log$73:	; BinaryAdd £temporary525 sum £temporary524
x10236:	fadd	; 2: 222 193

log$74:	; SetReturnValue £temporary525

log$75:	; Return £temporary525
x10238:	mov ax, [bp]	; 3: 139 70 0
x10241:	mov di, [bp + 4]	; 3: 139 126 4
x10244:	mov bp, [bp + 2]	; 3: 139 110 2
x10247:	jmp ax	; 2: 255 224

log$76:	; Assign errno 6
x10249:	mov word [errno], 6	; 6: 199 6 182 10 6 0

log$77:	; PushZero
x10255:	fldz	; 2: 217 238

log$78:	; SetReturnValue 0

log$79:	; Return 0
x10257:	mov ax, [bp]	; 3: 139 70 0
x10260:	mov di, [bp + 4]	; 3: 139 126 4
x10263:	mov bp, [bp + 2]	; 3: 139 110 2
x10266:	jmp ax	; 2: 255 224

log$80:	; FunctionEnd log

float8$2.71#:
x10268:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

float8$0.368#:
x10276:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

float8$0.000000001#:
x10284:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10292:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10295:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10297:	fcompp	; 2: 222 217
x10299:	fstsw ax	; 3: 155 223 224
x10302:	sahf	; 1: 158
x10303:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10305:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10308:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10311:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10314:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10317:	mov word [bp + 30], pow$9	; 5: 199 70 30 91 40
x10322:	mov [bp + 32], bp	; 3: 137 110 32
x10325:	add bp, 30	; 3: 131 197 30
x10328:	jmp log	; 3: 233 177 254

pow$9:	; PostCall 22
x10331:	fstp qword [bp + 30]	; 3: 221 94 30
x10334:	fld qword [bp + 22]	; 3: 221 70 22
x10337:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary531

pow$11:	; SignedMultiply £temporary532 y £temporary531
x10340:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary532 6
x10342:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10345:	mov word [bp + 22], pow$14	; 5: 199 70 22 119 40
x10350:	mov [bp + 24], bp	; 3: 137 110 24
x10353:	add bp, 22	; 3: 131 197 22
x10356:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary533

pow$16:	; SetReturnValue £temporary533

pow$17:	; Return £temporary533
x10359:	mov ax, [bp]	; 3: 139 70 0
x10362:	mov di, [bp + 4]	; 3: 139 126 4
x10365:	mov bp, [bp + 2]	; 3: 139 110 2
x10368:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10370:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10373:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10375:	fcompp	; 2: 222 217
x10377:	fstsw ax	; 3: 155 223 224
x10380:	sahf	; 1: 158
x10381:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10383:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10386:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10388:	fcompp	; 2: 222 217
x10390:	fstsw ax	; 3: 155 223 224
x10393:	sahf	; 1: 158
x10394:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10396:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10398:	mov ax, [bp]	; 3: 139 70 0
x10401:	mov di, [bp + 4]	; 3: 139 126 4
x10404:	mov bp, [bp + 2]	; 3: 139 110 2
x10407:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10409:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10412:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10414:	fcompp	; 2: 222 217
x10416:	fstsw ax	; 3: 155 223 224
x10419:	sahf	; 1: 158
x10420:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10422:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10425:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10427:	fcompp	; 2: 222 217
x10429:	fstsw ax	; 3: 155 223 224
x10432:	sahf	; 1: 158
x10433:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10435:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10437:	mov ax, [bp]	; 3: 139 70 0
x10440:	mov di, [bp + 4]	; 3: 139 126 4
x10443:	mov bp, [bp + 2]	; 3: 139 110 2
x10446:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10448:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10451:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10453:	fcompp	; 2: 222 217
x10455:	fstsw ax	; 3: 155 223 224
x10458:	sahf	; 1: 158
x10459:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10463:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10466:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10469:	mov word [bp + 22], pow$43	; 5: 199 70 22 243 40
x10474:	mov [bp + 24], bp	; 3: 137 110 24
x10477:	add bp, 22	; 3: 131 197 22
x10480:	jmp floor	; 3: 233 96 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary541

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10483:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10486:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10489:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10492:	mov word [bp + 30], pow$49	; 5: 199 70 30 10 41
x10497:	mov [bp + 32], bp	; 3: 137 110 32
x10500:	add bp, 30	; 3: 131 197 30
x10503:	jmp ceil	; 3: 233 151 1

pow$49:	; PostCall 22
x10506:	fstp qword [bp + 30]	; 3: 221 94 30
x10509:	fld qword [bp + 22]	; 3: 221 70 22
x10512:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary542

pow$51:	; NotEqual 90 £temporary541 £temporary542
x10515:	fcompp	; 2: 222 217
x10517:	fstsw ax	; 3: 155 223 224
x10520:	sahf	; 1: 158
x10521:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10525:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary545 y
x10528:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x10532:	mov eax, [container4bytes#]	; 4: 102 161 9 36

pow$54:	; Assign long_y £temporary545
x10536:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary546 long_y 2
x10540:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10544:	xor edx, edx	; 3: 102 49 210
x10547:	idiv dword [int4$2#]	; 5: 102 247 62 217 41

pow$56:	; NotEqual 73 £temporary546 0
x10552:	cmp edx, 0	; 4: 102 131 250 0
x10556:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10558:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10561:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10564:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary548 x
x10567:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary548 6
x10569:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10572:	mov word [bp + 34], pow$64	; 5: 199 70 34 90 41
x10577:	mov [bp + 36], bp	; 3: 137 110 36
x10580:	add bp, 34	; 3: 131 197 34
x10583:	jmp log	; 3: 233 178 253

pow$64:	; PostCall 26
x10586:	fstp qword [bp + 34]	; 3: 221 94 34
x10589:	fld qword [bp + 26]	; 3: 221 70 26
x10592:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary549

pow$66:	; SignedMultiply £temporary550 y £temporary549
x10595:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary550 6
x10597:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10600:	mov word [bp + 26], pow$69	; 5: 199 70 26 118 41
x10605:	mov [bp + 28], bp	; 3: 137 110 28
x10608:	add bp, 26	; 3: 131 197 26
x10611:	nop	; 1: 144
x10612:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary551

pow$71:	; SetReturnValue £temporary551

pow$72:	; Return £temporary551
x10614:	mov ax, [bp]	; 3: 139 70 0
x10617:	mov di, [bp + 4]	; 3: 139 126 4
x10620:	mov bp, [bp + 2]	; 3: 139 110 2
x10623:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10625:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10628:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10631:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary552 x
x10634:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary552 6
x10636:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10639:	mov word [bp + 34], pow$80	; 5: 199 70 34 157 41
x10644:	mov [bp + 36], bp	; 3: 137 110 36
x10647:	add bp, 34	; 3: 131 197 34
x10650:	jmp log	; 3: 233 111 253

pow$80:	; PostCall 26
x10653:	fstp qword [bp + 34]	; 3: 221 94 34
x10656:	fld qword [bp + 26]	; 3: 221 70 26
x10659:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary553

pow$82:	; SignedMultiply £temporary554 y £temporary553
x10662:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary554 6
x10664:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10667:	mov word [bp + 26], pow$85	; 5: 199 70 26 185 41
x10672:	mov [bp + 28], bp	; 3: 137 110 28
x10675:	add bp, 26	; 3: 131 197 26
x10678:	nop	; 1: 144
x10679:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary555

pow$87:	; UnarySubtract £temporary556 £temporary555
x10681:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary556

pow$89:	; Return £temporary556
x10683:	mov ax, [bp]	; 3: 139 70 0
x10686:	mov di, [bp + 4]	; 3: 139 126 4
x10689:	mov bp, [bp + 2]	; 3: 139 110 2
x10692:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10694:	mov word [errno], 6	; 6: 199 6 182 10 6 0

pow$91:	; PushZero
x10700:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10702:	mov ax, [bp]	; 3: 139 70 0
x10705:	mov di, [bp + 4]	; 3: 139 126 4
x10708:	mov bp, [bp + 2]	; 3: 139 110 2
x10711:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

int4$2#:
x10713:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10717:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10719:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10722:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10724:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10727:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10729:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10732:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10735:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10738:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10741:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary498 power faculty
x10744:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10746:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10749:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10752:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary499 sum term
x10755:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10757:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10760:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10763:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary500 power x
x10766:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10768:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10771:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10774:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10777:	fld1	; 2: 217 232

exp$23:	; BinaryAdd index index 1
x10779:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10781:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary502 faculty £temporary501
x10784:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10786:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10789:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10792:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10795:	mov word [bp + 54], exp$31	; 5: 199 70 54 57 42
x10800:	mov [bp + 56], bp	; 3: 137 110 56
x10803:	add bp, 54	; 3: 131 197 54
x10806:	jmp fabs	; 3: 233 124 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary503

exp$33:	; PushFloat 0.000000001
x10809:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

exp$34:	; SignedGreaterThanEqual 8 £temporary503 0.000000001
x10813:	fcompp	; 2: 222 217
x10815:	fstsw ax	; 3: 155 223 224
x10818:	sahf	; 1: 158
x10819:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10821:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10824:	mov ax, [bp]	; 3: 139 70 0
x10827:	mov di, [bp + 4]	; 3: 139 126 4
x10830:	mov bp, [bp + 2]	; 3: 139 110 2
x10833:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

floor:	; PushFloat x
x10835:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10838:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10840:	fcompp	; 2: 222 217
x10842:	fstsw ax	; 3: 155 223 224
x10845:	sahf	; 1: 158
x10846:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10848:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary782 x
x10851:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary782 6
x10853:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10856:	mov word [bp + 14], floor$8	; 5: 199 70 14 118 42
x10861:	mov [bp + 16], bp	; 3: 137 110 16
x10864:	add bp, 14	; 3: 131 197 14
x10867:	nop	; 1: 144
x10868:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary783

floor$10:	; UnarySubtract £temporary784 £temporary783
x10870:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary784

floor$12:	; Return £temporary784
x10872:	mov ax, [bp]	; 3: 139 70 0
x10875:	mov di, [bp + 4]	; 3: 139 126 4
x10878:	mov bp, [bp + 2]	; 3: 139 110 2
x10881:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10883:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary785 x
x10886:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x10890:	mov eax, [container4bytes#]	; 4: 102 161 9 36

floor$15:	; IntegralToFloating £temporary786 £temporary785
x10894:	mov [container4bytes#], eax	; 4: 102 163 9 36
x10898:	fild dword [container4bytes#]	; 4: 219 6 9 36

floor$16:	; SetReturnValue £temporary786

floor$17:	; Return £temporary786
x10902:	mov ax, [bp]	; 3: 139 70 0
x10905:	mov di, [bp + 4]	; 3: 139 126 4
x10908:	mov bp, [bp + 2]	; 3: 139 110 2
x10911:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x10913:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x10916:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x10918:	fcompp	; 2: 222 217
x10920:	fstsw ax	; 3: 155 223 224
x10923:	sahf	; 1: 158
x10924:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x10926:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary789 x
x10929:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary789 6
x10931:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x10934:	mov word [bp + 14], ceil$8	; 5: 199 70 14 196 42
x10939:	mov [bp + 16], bp	; 3: 137 110 16
x10942:	add bp, 14	; 3: 131 197 14
x10945:	nop	; 1: 144
x10946:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary790

ceil$10:	; UnarySubtract £temporary791 £temporary790
x10948:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary791

ceil$12:	; Return £temporary791
x10950:	mov ax, [bp]	; 3: 139 70 0
x10953:	mov di, [bp + 4]	; 3: 139 126 4
x10956:	mov bp, [bp + 2]	; 3: 139 110 2
x10959:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x10961:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x10964:	fld qword [float8$0.999999999999#]	; 4: 221 6 245 42

ceil$15:	; BinaryAdd £temporary792 x 0.999999999999
x10968:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary793 £temporary792
x10970:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x10974:	mov eax, [container4bytes#]	; 4: 102 161 9 36

ceil$17:	; IntegralToFloating £temporary794 £temporary793
x10978:	mov [container4bytes#], eax	; 4: 102 163 9 36
x10982:	fild dword [container4bytes#]	; 4: 219 6 9 36

ceil$18:	; SetReturnValue £temporary794

ceil$19:	; Return £temporary794
x10986:	mov ax, [bp]	; 3: 139 70 0
x10989:	mov di, [bp + 4]	; 3: 139 126 4
x10992:	mov bp, [bp + 2]	; 3: 139 110 2
x10995:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

float8$0.999999999999#:
x10997:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11005:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11009:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11011:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11015:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary383 1
x11017:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11020:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary383 0
x11022:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary383

isdigit$6:	; Return £temporary383
x11025:	mov ax, [bp]	; 3: 139 70 0
x11028:	mov di, [bp + 4]	; 3: 139 126 4
x11031:	mov bp, [bp + 2]	; 3: 139 110 2
x11034:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11036:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11039:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11042:	mov word [bp + 14], sin$4	; 5: 199 70 14 48 43
x11047:	mov [bp + 16], bp	; 3: 137 110 16
x11050:	add bp, 14	; 3: 131 197 14
x11053:	jmp fabs	; 3: 233 133 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary636

sin$6:	; PushFloat 6.28
x11056:	fld qword [float8$6.28#]	; 4: 221 6 246 4

sin$7:	; SignedLessThanEqual 17 £temporary636 6.28
x11060:	fcompp	; 2: 222 217
x11062:	fstsw ax	; 3: 155 223 224
x11065:	sahf	; 1: 158
x11066:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11068:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11071:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11074:	fld qword [float8$6.28#]	; 4: 221 6 246 4

sin$12:	; Parameter 14 6.28 14
x11078:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11081:	mov word [bp + 14], sin$14	; 5: 199 70 14 87 43
x11086:	mov [bp + 16], bp	; 3: 137 110 16
x11089:	add bp, 14	; 3: 131 197 14
x11092:	jmp fmod	; 3: 233 168 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary638

sin$16:	; PopFloat x
x11095:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11098:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11100:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11103:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11105:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11108:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11110:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11113:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11116:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11119:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11121:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11124:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11127:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary639 sign power
x11130:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11132:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary640 £temporary639 faculty
x11135:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11137:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11140:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11143:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary641 sum term
x11146:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11148:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11151:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11154:	fld qword [float8$minus1#]	; 4: 221 6 247 43

sin$39:	; SignedMultiply £temporary642 sign -1
x11158:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11160:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11163:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11166:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11169:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary643 x x
x11172:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary644 power £temporary643
x11174:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11176:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11179:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11182:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11185:	fld1	; 2: 217 232

sin$50:	; BinaryAdd index index 1
x11187:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11189:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11192:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11195:	fld1	; 2: 217 232

sin$54:	; BinaryAdd index index 1
x11197:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11199:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary647 £temporary645 £temporary646
x11202:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary648 faculty £temporary647
x11204:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11206:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11209:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11212:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11215:	mov word [bp + 62], sin$63	; 5: 199 70 62 221 43
x11220:	mov [bp + 64], bp	; 3: 137 110 64
x11223:	add bp, 62	; 3: 131 197 62
x11226:	jmp fabs	; 3: 233 216 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary649

sin$65:	; PushFloat 0.000000001
x11229:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

sin$66:	; SignedGreaterThanEqual 27 £temporary649 0.000000001
x11233:	fcompp	; 2: 222 217
x11235:	fstsw ax	; 3: 155 223 224
x11238:	sahf	; 1: 158
x11239:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11241:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11244:	mov ax, [bp]	; 3: 139 70 0
x11247:	mov di, [bp + 4]	; 3: 139 126 4
x11250:	mov bp, [bp + 2]	; 3: 139 110 2
x11253:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

float8$minus1#:
x11255:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

fmod:	; PushFloat y
x11263:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11266:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11268:	fcompp	; 2: 222 217
x11270:	fstsw ax	; 3: 155 223 224
x11273:	sahf	; 1: 158
x11274:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11276:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11279:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11282:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11285:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary623 x y
x11288:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary624 £temporary623
x11290:	fistp word [container2bytes#]	; 4: 223 30 16 27
x11294:	mov ax, [container2bytes#]	; 3: 161 16 27

fmod$10:	; IntegralToFloating £temporary625 £temporary624
x11297:	mov [container2bytes#], ax	; 3: 163 16 27
x11300:	fild word [container2bytes#]	; 4: 223 6 16 27

fmod$11:	; SignedMultiply £temporary626 y £temporary625
x11304:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary627 x £temporary626
x11306:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary627 6
x11308:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11311:	mov word [bp + 22], fmod$15	; 5: 199 70 22 61 44
x11316:	mov [bp + 24], bp	; 3: 137 110 24
x11319:	add bp, 22	; 3: 131 197 22
x11322:	jmp fabs	; 3: 233 120 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary628

fmod$17:	; PopFloat remainder
x11325:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11328:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11331:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11333:	fcompp	; 2: 222 217
x11335:	fstsw ax	; 3: 155 223 224
x11338:	sahf	; 1: 158
x11339:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11341:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11344:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11346:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary630 remainder
x11349:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary634

fmod$27:	; Return £temporary634
x11351:	mov ax, [bp]	; 3: 139 70 0
x11354:	mov di, [bp + 4]	; 3: 139 126 4
x11357:	mov bp, [bp + 2]	; 3: 139 110 2
x11360:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11362:	mov word [errno], 6	; 6: 199 6 182 10 6 0

fmod$29:	; PushZero
x11368:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11370:	mov ax, [bp]	; 3: 139 70 0
x11373:	mov di, [bp + 4]	; 3: 139 126 4
x11376:	mov bp, [bp + 2]	; 3: 139 110 2
x11379:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11381:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11384:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11387:	mov word [bp + 14], cos$4	; 5: 199 70 14 137 44
x11392:	mov [bp + 16], bp	; 3: 137 110 16
x11395:	add bp, 14	; 3: 131 197 14
x11398:	jmp fabs	; 3: 233 44 248

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary655

cos$6:	; PushFloat 6.28
x11401:	fld qword [float8$6.28#]	; 4: 221 6 246 4

cos$7:	; SignedLessThanEqual 17 £temporary655 6.28
x11405:	fcompp	; 2: 222 217
x11407:	fstsw ax	; 3: 155 223 224
x11410:	sahf	; 1: 158
x11411:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11413:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11416:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11419:	fld qword [float8$6.28#]	; 4: 221 6 246 4

cos$12:	; Parameter 14 6.28 14
x11423:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11426:	mov word [bp + 14], cos$14	; 5: 199 70 14 176 44
x11431:	mov [bp + 16], bp	; 3: 137 110 16
x11434:	add bp, 14	; 3: 131 197 14
x11437:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary657

cos$16:	; PopFloat x
x11440:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11443:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11445:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11448:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11450:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11453:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11455:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11458:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11460:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11463:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11465:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11468:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11471:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary658 sign power
x11474:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11476:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary659 £temporary658 faculty
x11479:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11481:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11484:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11487:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary660 sum term
x11490:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11492:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11495:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11498:	fld qword [float8$minus1#]	; 4: 221 6 247 43

cos$39:	; SignedMultiply £temporary661 sign -1
x11502:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11504:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11507:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11510:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11513:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary662 x x
x11516:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary663 power £temporary662
x11518:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11520:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11523:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11526:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11529:	fld1	; 2: 217 232

cos$50:	; BinaryAdd index index 1
x11531:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11533:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11536:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11539:	fld1	; 2: 217 232

cos$54:	; BinaryAdd index index 1
x11541:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11543:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary666 £temporary664 £temporary665
x11546:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary667 faculty £temporary666
x11548:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11550:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11553:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11556:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11559:	mov word [bp + 62], cos$63	; 5: 199 70 62 53 45
x11564:	mov [bp + 64], bp	; 3: 137 110 64
x11567:	add bp, 62	; 3: 131 197 62
x11570:	jmp fabs	; 3: 233 128 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary668

cos$65:	; PushFloat 0.000000001
x11573:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

cos$66:	; SignedGreaterThanEqual 27 £temporary668 0.000000001
x11577:	fcompp	; 2: 222 217
x11579:	fstsw ax	; 3: 155 223 224
x11582:	sahf	; 1: 158
x11583:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11585:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11588:	mov ax, [bp]	; 3: 139 70 0
x11591:	mov di, [bp + 4]	; 3: 139 126 4
x11594:	mov bp, [bp + 2]	; 3: 139 110 2
x11597:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11599:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11602:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11605:	mov word [bp + 14], tan$4	; 5: 199 70 14 99 45
x11610:	mov [bp + 16], bp	; 3: 137 110 16
x11613:	add bp, 14	; 3: 131 197 14
x11616:	jmp cos	; 3: 233 18 255

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary674

tan$6:	; PopFloat cos_of_x
x11619:	fstp qword [bp + 14]	; 3: 221 94 14

tan$7:	; PushFloat cos_of_x
x11622:	fld qword [bp + 14]	; 3: 221 70 14

tan$8:	; PushZero
x11625:	fldz	; 2: 217 238

tan$9:	; Equal 20 cos_of_x 0
x11627:	fcompp	; 2: 222 217
x11629:	fstsw ax	; 3: 155 223 224
x11632:	sahf	; 1: 158
x11633:	je tan$20	; 2: 116 36

tan$10:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$11:	; PushFloat x
x11635:	fld qword [bp + 6]	; 3: 221 70 6

tan$12:	; Parameter 22 x 6
x11638:	fstp qword [bp + 28]	; 3: 221 94 28

tan$13:	; Call 22 sin 0
x11641:	mov word [bp + 22], tan$14	; 5: 199 70 22 135 45
x11646:	mov [bp + 24], bp	; 3: 137 110 24
x11649:	add bp, 22	; 3: 131 197 22
x11652:	jmp sin	; 3: 233 149 253

tan$14:	; PostCall 22

tan$15:	; GetReturnValue £temporary676

tan$16:	; PushFloat cos_of_x
x11655:	fld qword [bp + 14]	; 3: 221 70 14

tan$17:	; SignedDivide £temporary677 £temporary676 cos_of_x
x11658:	fdiv	; 2: 222 249

tan$18:	; SetReturnValue £temporary677

tan$19:	; Return £temporary677
x11660:	mov ax, [bp]	; 3: 139 70 0
x11663:	mov di, [bp + 4]	; 3: 139 126 4
x11666:	mov bp, [bp + 2]	; 3: 139 110 2
x11669:	jmp ax	; 2: 255 224

tan$20:	; Assign errno 6
x11671:	mov word [errno], 6	; 6: 199 6 182 10 6 0

tan$21:	; PushZero
x11677:	fldz	; 2: 217 238

tan$22:	; SetReturnValue 0

tan$23:	; Return 0
x11679:	mov ax, [bp]	; 3: 139 70 0
x11682:	mov di, [bp + 4]	; 3: 139 126 4
x11685:	mov bp, [bp + 2]	; 3: 139 110 2
x11688:	jmp ax	; 2: 255 224

tan$24:	; FunctionEnd tan

asin:	; PushFloat x
x11690:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11693:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11695:	fcompp	; 2: 222 217
x11697:	fstsw ax	; 3: 155 223 224
x11700:	sahf	; 1: 158
x11701:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11703:	fld qword [float8$1.57#]	; 4: 221 6 6 5

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11707:	mov ax, [bp]	; 3: 139 70 0
x11710:	mov di, [bp + 4]	; 3: 139 126 4
x11713:	mov bp, [bp + 2]	; 3: 139 110 2
x11716:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11718:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11721:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11723:	fcompp	; 2: 222 217
x11725:	fstsw ax	; 3: 155 223 224
x11728:	sahf	; 1: 158
x11729:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11731:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary682 x
x11734:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary682 6
x11736:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11739:	mov word [bp + 14], asin$14	; 5: 199 70 14 233 45
x11744:	mov [bp + 16], bp	; 3: 137 110 16
x11747:	add bp, 14	; 3: 131 197 14
x11750:	nop	; 1: 144
x11751:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary683

asin$16:	; UnarySubtract £temporary684 £temporary683
x11753:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary684

asin$18:	; Return £temporary684
x11755:	mov ax, [bp]	; 3: 139 70 0
x11758:	mov di, [bp + 4]	; 3: 139 126 4
x11761:	mov bp, [bp + 2]	; 3: 139 110 2
x11764:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11766:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11769:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11771:	fcompp	; 2: 222 217
x11773:	fstsw ax	; 3: 155 223 224
x11776:	sahf	; 1: 158
x11777:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11779:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11782:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11785:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11787:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11790:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary686 x x
x11793:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary687 1 £temporary686
x11795:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary687 6
x11797:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11800:	mov word [bp + 22], asin$32	; 5: 199 70 22 38 46
x11805:	mov [bp + 24], bp	; 3: 137 110 24
x11808:	add bp, 22	; 3: 131 197 22
x11811:	nop	; 1: 144
x11812:	jmp sqrt	; 2: 235 58

asin$32:	; PostCall 14
x11814:	fstp qword [bp + 22]	; 3: 221 94 22
x11817:	fld qword [bp + 14]	; 3: 221 70 14
x11820:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary688

asin$34:	; SignedDivide £temporary689 x £temporary688
x11823:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary689 6
x11825:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11828:	mov word [bp + 14], asin$37	; 5: 199 70 14 66 46
x11833:	mov [bp + 16], bp	; 3: 137 110 16
x11836:	add bp, 14	; 3: 131 197 14
x11839:	jmp atan	; 3: 233 146 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary690

asin$39:	; SetReturnValue £temporary690

asin$40:	; Return £temporary690
x11842:	mov ax, [bp]	; 3: 139 70 0
x11845:	mov di, [bp + 4]	; 3: 139 126 4
x11848:	mov bp, [bp + 2]	; 3: 139 110 2
x11851:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x11853:	mov word [errno], 6	; 6: 199 6 182 10 6 0

asin$42:	; PushZero
x11859:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x11861:	mov ax, [bp]	; 3: 139 70 0
x11864:	mov di, [bp + 4]	; 3: 139 126 4
x11867:	mov bp, [bp + 2]	; 3: 139 110 2
x11870:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

sqrt:	; PushFloat x
x11872:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x11875:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 28 x 0
x11877:	fcompp	; 2: 222 217
x11879:	fstsw ax	; 3: 155 223 224
x11882:	sahf	; 1: 158
x11883:	ja sqrt$28	; 2: 119 84

sqrt$3:	; PushOne
x11885:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x11887:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x11890:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; PopFloat root_i
x11893:	fstp qword [bp + 14]	; 3: 221 94 14

sqrt$7:	; PushFloat root_i
x11896:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$8:	; PushFloat x
x11899:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$9:	; PushFloat root_i
x11902:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$10:	; SignedDivide £temporary596 x root_i
x11905:	fdiv	; 2: 222 249

sqrt$11:	; BinaryAdd £temporary597 root_i £temporary596
x11907:	fadd	; 2: 222 193

sqrt$12:	; PushFloat 2
x11909:	fld qword [float8$2#]	; 4: 221 6 70 5

sqrt$13:	; SignedDivide £temporary598 £temporary597 2
x11913:	fdiv	; 2: 222 249

sqrt$14:	; PopFloat root_i_plus_1
x11915:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$15:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$16:	; PushFloat root_i_plus_1
x11918:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$17:	; PushFloat root_i
x11921:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$18:	; BinarySubtract £temporary599 root_i_plus_1 root_i
x11924:	fsub	; 2: 222 233

sqrt$19:	; Parameter 30 £temporary599 6
x11926:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$20:	; Call 30 fabs 0
x11929:	mov word [bp + 30], sqrt$21	; 5: 199 70 30 167 46
x11934:	mov [bp + 32], bp	; 3: 137 110 32
x11937:	add bp, 30	; 3: 131 197 30
x11940:	jmp fabs	; 3: 233 14 246

sqrt$21:	; PostCall 30

sqrt$22:	; GetReturnValue £temporary600

sqrt$23:	; PushFloat 0.000000001
x11943:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

sqrt$24:	; SignedGreaterThanEqual 5 £temporary600 0.000000001
x11947:	fcompp	; 2: 222 217
x11949:	fstsw ax	; 3: 155 223 224
x11952:	sahf	; 1: 158
x11953:	jbe sqrt$5	; 2: 118 191

sqrt$25:	; PushFloat root_i_plus_1
x11955:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$26:	; SetReturnValue root_i_plus_1

sqrt$27:	; Return root_i_plus_1
x11958:	mov ax, [bp]	; 3: 139 70 0
x11961:	mov di, [bp + 4]	; 3: 139 126 4
x11964:	mov bp, [bp + 2]	; 3: 139 110 2
x11967:	jmp ax	; 2: 255 224

sqrt$28:	; Assign errno 6
x11969:	mov word [errno], 6	; 6: 199 6 182 10 6 0

sqrt$29:	; PushZero
x11975:	fldz	; 2: 217 238

sqrt$30:	; SetReturnValue 0

sqrt$31:	; Return 0
x11977:	mov ax, [bp]	; 3: 139 70 0
x11980:	mov di, [bp + 4]	; 3: 139 126 4
x11983:	mov bp, [bp + 2]	; 3: 139 110 2
x11986:	jmp ax	; 2: 255 224

sqrt$32:	; FunctionEnd sqrt

atan:	; PushFloat x
x11988:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x11991:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x11993:	fcompp	; 2: 222 217
x11995:	fstsw ax	; 3: 155 223 224
x11998:	sahf	; 1: 158
x11999:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12001:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary709 x
x12004:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary709 6
x12006:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12009:	mov word [bp + 14], atan$8	; 5: 199 70 14 247 46
x12014:	mov [bp + 16], bp	; 3: 137 110 16
x12017:	add bp, 14	; 3: 131 197 14
x12020:	nop	; 1: 144
x12021:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary710

atan$10:	; UnarySubtract £temporary711 £temporary710
x12023:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary711

atan$12:	; Return £temporary711
x12025:	mov ax, [bp]	; 3: 139 70 0
x12028:	mov di, [bp + 4]	; 3: 139 126 4
x12031:	mov bp, [bp + 2]	; 3: 139 110 2
x12034:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12036:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12039:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12041:	fcompp	; 2: 222 217
x12043:	fstsw ax	; 3: 155 223 224
x12046:	sahf	; 1: 158
x12047:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12049:	fld qword [float8$1.57#]	; 4: 221 6 6 5

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12053:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12056:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12058:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary713 1 x
x12061:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary713 6
x12063:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12066:	mov word [bp + 22], atan$23	; 5: 199 70 22 48 47
x12071:	mov [bp + 24], bp	; 3: 137 110 24
x12074:	add bp, 22	; 3: 131 197 22
x12077:	nop	; 1: 144
x12078:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12080:	fstp qword [bp + 22]	; 3: 221 94 22
x12083:	fld qword [bp + 14]	; 3: 221 70 14
x12086:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary714

atan$25:	; BinarySubtract £temporary715 1.57 £temporary714
x12089:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary715

atan$27:	; Return £temporary715
x12091:	mov ax, [bp]	; 3: 139 70 0
x12094:	mov di, [bp + 4]	; 3: 139 126 4
x12097:	mov bp, [bp + 2]	; 3: 139 110 2
x12100:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12102:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12105:	fld qword [float8$0.5#]	; 4: 221 6 61 48

atan$30:	; SignedLessThanEqual 54 x 0.5
x12109:	fcompp	; 2: 222 217
x12111:	fstsw ax	; 3: 155 223 224
x12114:	sahf	; 1: 158
x12115:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12117:	fld qword [float8$2#]	; 4: 221 6 70 5

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12121:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12124:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12127:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12129:	fstp qword [bp + 22]	; 3: 221 94 22
x12132:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12135:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12137:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12140:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary717 x x
x12143:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary718 1 £temporary717
x12145:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary718 6
x12147:	fstp qword [bp + 44]	; 3: 221 94 44

atan$42:	; Call 14 sqrt 0
x12150:	mov word [bp + 46], atan$43	; 5: 199 70 46 132 47
x12155:	mov [bp + 48], bp	; 3: 137 110 48
x12158:	add bp, 46	; 3: 131 197 46
x12161:	jmp sqrt	; 3: 233 220 254

atan$43:	; PostCall 14
x12164:	fstp qword [bp + 38]	; 3: 221 94 38
x12167:	fld qword [bp + 30]	; 3: 221 70 30
x12170:	fld qword [bp + 22]	; 3: 221 70 22
x12173:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary719

atan$45:	; BinaryAdd £temporary720 1 £temporary719
x12176:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary721 x £temporary720
x12178:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary721 6
x12180:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12183:	mov word [bp + 22], atan$49	; 5: 199 70 22 165 47
x12188:	mov [bp + 24], bp	; 3: 137 110 24
x12191:	add bp, 22	; 3: 131 197 22
x12194:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12197:	fstp qword [bp + 22]	; 3: 221 94 22
x12200:	fld qword [bp + 14]	; 3: 221 70 14
x12203:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary722

atan$51:	; SignedMultiply £temporary723 2 £temporary722
x12206:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary723

atan$53:	; Return £temporary723
x12208:	mov ax, [bp]	; 3: 139 70 0
x12211:	mov di, [bp + 4]	; 3: 139 126 4
x12214:	mov bp, [bp + 2]	; 3: 139 110 2
x12217:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12219:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12221:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12224:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12226:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12229:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12231:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12234:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12237:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12240:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12243:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary724 sign product
x12246:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12248:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary725 £temporary724 denominator
x12251:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12253:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12256:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12259:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary726 sum term
x12262:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12264:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12267:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary727 sign
x12270:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12272:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12275:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12278:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12281:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary728 x x
x12284:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary729 product £temporary728
x12286:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12288:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12291:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12294:	fld qword [float8$2#]	; 4: 221 6 70 5

atan$83:	; BinaryAdd £temporary730 denominator 2
x12298:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12300:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12303:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12306:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12309:	mov word [bp + 54], atan$89	; 5: 199 70 54 35 48
x12314:	mov [bp + 56], bp	; 3: 137 110 56
x12317:	add bp, 54	; 3: 131 197 54
x12320:	jmp fabs	; 3: 233 146 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary731

atan$91:	; PushFloat 0.000000001
x12323:	fld qword [float8$0.000000001#]	; 4: 221 6 44 40

atan$92:	; SignedGreaterThanEqual 62 £temporary731 0.000000001
x12327:	fcompp	; 2: 222 217
x12329:	fstsw ax	; 3: 155 223 224
x12332:	sahf	; 1: 158
x12333:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12335:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12338:	mov ax, [bp]	; 3: 139 70 0
x12341:	mov di, [bp + 4]	; 3: 139 126 4
x12344:	mov bp, [bp + 2]	; 3: 139 110 2
x12347:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

float8$0.5#:
x12349:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

acos:	; PushFloat x
x12357:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12360:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12362:	fcompp	; 2: 222 217
x12364:	fstsw ax	; 3: 155 223 224
x12367:	sahf	; 1: 158
x12368:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12370:	fld qword [float8$1.57#]	; 4: 221 6 6 5

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12374:	mov ax, [bp]	; 3: 139 70 0
x12377:	mov di, [bp + 4]	; 3: 139 126 4
x12380:	mov bp, [bp + 2]	; 3: 139 110 2
x12383:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12385:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12388:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12390:	fcompp	; 2: 222 217
x12392:	fstsw ax	; 3: 155 223 224
x12395:	sahf	; 1: 158
x12396:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12398:	fld qword [float8$3.14#]	; 4: 221 6 254 4

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12402:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12405:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary696 x
x12408:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary696 6
x12410:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12413:	mov word [bp + 22], acos$15	; 5: 199 70 22 139 48
x12418:	mov [bp + 24], bp	; 3: 137 110 24
x12421:	add bp, 22	; 3: 131 197 22
x12424:	nop	; 1: 144
x12425:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12427:	fstp qword [bp + 22]	; 3: 221 94 22
x12430:	fld qword [bp + 14]	; 3: 221 70 14
x12433:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary697

acos$17:	; BinarySubtract £temporary698 3.14 £temporary697
x12436:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary698

acos$19:	; Return £temporary698
x12438:	mov ax, [bp]	; 3: 139 70 0
x12441:	mov di, [bp + 4]	; 3: 139 126 4
x12444:	mov bp, [bp + 2]	; 3: 139 110 2
x12447:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12449:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12452:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12454:	fcompp	; 2: 222 217
x12456:	fstsw ax	; 3: 155 223 224
x12459:	sahf	; 1: 158
x12460:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12462:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12464:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12467:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary700 x x
x12470:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary701 1 £temporary700
x12472:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary701 6
x12474:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12477:	mov word [bp + 14], acos$32	; 5: 199 70 14 203 48
x12482:	mov [bp + 16], bp	; 3: 137 110 16
x12485:	add bp, 14	; 3: 131 197 14
x12488:	jmp sqrt	; 3: 233 149 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary702

acos$34:	; PushFloat x
x12491:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary703 £temporary702 x
x12494:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary703 6
x12496:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12499:	mov word [bp + 14], acos$38	; 5: 199 70 14 225 48
x12504:	mov [bp + 16], bp	; 3: 137 110 16
x12507:	add bp, 14	; 3: 131 197 14
x12510:	jmp atan	; 3: 233 243 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary704

acos$40:	; SetReturnValue £temporary704

acos$41:	; Return £temporary704
x12513:	mov ax, [bp]	; 3: 139 70 0
x12516:	mov di, [bp + 4]	; 3: 139 126 4
x12519:	mov bp, [bp + 2]	; 3: 139 110 2
x12522:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12524:	mov word [errno], 6	; 6: 199 6 182 10 6 0

acos$43:	; PushZero
x12530:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12532:	mov ax, [bp]	; 3: 139 70 0
x12535:	mov di, [bp + 4]	; 3: 139 126 4
x12538:	mov bp, [bp + 2]	; 3: 139 110 2
x12541:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12543:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12546:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12549:	mov word [bp + 14], sinh$4	; 5: 199 70 14 19 49
x12554:	mov [bp + 16], bp	; 3: 137 110 16
x12557:	add bp, 14	; 3: 131 197 14
x12560:	jmp exp	; 3: 233 202 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary762

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12563:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12566:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary763 x
x12569:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary763 6
x12571:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12574:	mov word [bp + 22], sinh$11	; 5: 199 70 22 44 49
x12579:	mov [bp + 24], bp	; 3: 137 110 24
x12582:	add bp, 22	; 3: 131 197 22
x12585:	jmp exp	; 3: 233 177 248

sinh$11:	; PostCall 14
x12588:	fstp qword [bp + 22]	; 3: 221 94 22
x12591:	fld qword [bp + 14]	; 3: 221 70 14
x12594:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary764

sinh$13:	; BinarySubtract £temporary765 £temporary762 £temporary764
x12597:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12599:	fld qword [float8$2#]	; 4: 221 6 70 5

sinh$15:	; SignedDivide £temporary766 £temporary765 2
x12603:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary766

sinh$17:	; Return £temporary766
x12605:	mov ax, [bp]	; 3: 139 70 0
x12608:	mov di, [bp + 4]	; 3: 139 126 4
x12611:	mov bp, [bp + 2]	; 3: 139 110 2
x12614:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12616:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12619:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12622:	mov word [bp + 14], cosh$4	; 5: 199 70 14 92 49
x12627:	mov [bp + 16], bp	; 3: 137 110 16
x12630:	add bp, 14	; 3: 131 197 14
x12633:	jmp exp	; 3: 233 129 248

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary769

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12636:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12639:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary770 x
x12642:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary770 6
x12644:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12647:	mov word [bp + 22], cosh$11	; 5: 199 70 22 117 49
x12652:	mov [bp + 24], bp	; 3: 137 110 24
x12655:	add bp, 22	; 3: 131 197 22
x12658:	jmp exp	; 3: 233 104 248

cosh$11:	; PostCall 14
x12661:	fstp qword [bp + 22]	; 3: 221 94 22
x12664:	fld qword [bp + 14]	; 3: 221 70 14
x12667:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary771

cosh$13:	; BinaryAdd £temporary772 £temporary769 £temporary771
x12670:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12672:	fld qword [float8$2#]	; 4: 221 6 70 5

cosh$15:	; SignedDivide £temporary773 £temporary772 2
x12676:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary773

cosh$17:	; Return £temporary773
x12678:	mov ax, [bp]	; 3: 139 70 0
x12681:	mov di, [bp + 4]	; 3: 139 126 4
x12684:	mov bp, [bp + 2]	; 3: 139 110 2
x12687:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12689:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12692:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12695:	mov word [bp + 14], tanh$4	; 5: 199 70 14 165 49
x12700:	mov [bp + 16], bp	; 3: 137 110 16
x12703:	add bp, 14	; 3: 131 197 14
x12706:	jmp sinh	; 3: 233 90 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary776

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12709:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12712:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12715:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12718:	mov word [bp + 22], tanh$10	; 5: 199 70 22 188 49
x12723:	mov [bp + 24], bp	; 3: 137 110 24
x12726:	add bp, 22	; 3: 131 197 22
x12729:	nop	; 1: 144
x12730:	jmp cosh	; 2: 235 140

tanh$10:	; PostCall 14
x12732:	fstp qword [bp + 22]	; 3: 221 94 22
x12735:	fld qword [bp + 14]	; 3: 221 70 14
x12738:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary777

tanh$12:	; SignedDivide £temporary778 £temporary776 £temporary777
x12741:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary778

tanh$14:	; Return £temporary778
x12743:	mov ax, [bp]	; 3: 139 70 0
x12746:	mov di, [bp + 4]	; 3: 139 126 4
x12749:	mov bp, [bp + 2]	; 3: 139 110 2
x12752:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x12754:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x12757:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x12759:	fcompp	; 2: 222 217
x12761:	fstsw ax	; 3: 155 223 224
x12764:	sahf	; 1: 158
x12765:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x12769:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x12772:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x12775:	mov word [bp + 16], frexp$8	; 5: 199 70 16 245 49
x12780:	mov [bp + 18], bp	; 3: 137 110 18
x12783:	add bp, 16	; 3: 131 197 16
x12786:	jmp fabs	; 3: 233 192 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary575

frexp$10:	; Parameter 16 £temporary575 6
x12789:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x12792:	mov word [bp + 16], frexp$12	; 5: 199 70 16 6 50
x12797:	mov [bp + 18], bp	; 3: 137 110 18
x12800:	add bp, 16	; 3: 131 197 16
x12803:	jmp @733$log2	; 3: 233 139 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary576

frexp$14:	; IntegralToIntegral £temporary577 £temporary576

frexp$15:	; Assign exponent £temporary577
x12806:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x12809:	fld qword [float8$2#]	; 4: 221 6 70 5

frexp$18:	; Parameter 18 2 6
x12813:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary578 exponent
x12816:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary578 14
x12819:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x12822:	mov word [bp + 18], frexp$22	; 5: 199 70 18 36 50
x12827:	mov [bp + 20], bp	; 3: 137 110 20
x12830:	add bp, 18	; 3: 131 197 18
x12833:	jmp pow	; 3: 233 16 246

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary579

frexp$24:	; PushFloat x
x12836:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary579 x
x12839:	fcompp	; 2: 222 217
x12841:	fstsw ax	; 3: 155 223 224
x12844:	sahf	; 1: 158
x12845:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x12847:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x12850:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x12854:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary583 -> p p 0
x12856:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary583 -> p exponent
x12859:	mov ax, [bp + 16]	; 3: 139 70 16
x12862:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x12864:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12867:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x12870:	fld qword [float8$2#]	; 4: 221 6 70 5

frexp$33:	; Parameter 18 2 6
x12874:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary584 exponent
x12877:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary584 14
x12880:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x12883:	mov word [bp + 26], frexp$37	; 5: 199 70 26 97 50
x12888:	mov [bp + 28], bp	; 3: 137 110 28
x12891:	add bp, 26	; 3: 131 197 26
x12894:	jmp pow	; 3: 233 211 245

frexp$37:	; PostCall 18
x12897:	fstp qword [bp + 26]	; 3: 221 94 26
x12900:	fld qword [bp + 18]	; 3: 221 70 18
x12903:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary585

frexp$39:	; SignedDivide £temporary586 x £temporary585
x12906:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary586

frexp$41:	; Return £temporary586
x12908:	mov ax, [bp]	; 3: 139 70 0
x12911:	mov di, [bp + 4]	; 3: 139 126 4
x12914:	mov bp, [bp + 2]	; 3: 139 110 2
x12917:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x12919:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x12923:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary588 -> p p 0
x12925:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary588 -> p 0
x12928:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x12932:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x12934:	mov ax, [bp]	; 3: 139 70 0
x12937:	mov di, [bp + 4]	; 3: 139 126 4
x12940:	mov bp, [bp + 2]	; 3: 139 110 2
x12943:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@733$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@733$log2$1:	; PushFloat x
x12945:	fld qword [bp + 6]	; 3: 221 70 6

@733$log2$2:	; Parameter 14 x 6
x12948:	fstp qword [bp + 20]	; 3: 221 94 20

@733$log2$3:	; Call 14 log 0
x12951:	mov word [bp + 14], @733$log2$4	; 5: 199 70 14 165 50
x12956:	mov [bp + 16], bp	; 3: 137 110 16
x12959:	add bp, 14	; 3: 131 197 14
x12962:	jmp log	; 3: 233 103 244

@733$log2$4:	; PostCall 14

@733$log2$5:	; GetReturnValue £temporary570

@733$log2$6:	; PushFloat 0.693
x12965:	fld qword [float8$0.693#]	; 4: 221 6 190 50

@733$log2$7:	; SignedDivide £temporary571 £temporary570 0.693
x12969:	fdiv	; 2: 222 249

@733$log2$8:	; FloatingToIntegral £temporary572 £temporary571
x12971:	fistp word [container2bytes#]	; 4: 223 30 16 27
x12975:	mov bx, [container2bytes#]	; 4: 139 30 16 27

@733$log2$9:	; SetReturnValue £temporary572

@733$log2$10:	; Return £temporary572
x12979:	mov ax, [bp]	; 3: 139 70 0
x12982:	mov di, [bp + 4]	; 3: 139 126 4
x12985:	mov bp, [bp + 2]	; 3: 139 110 2
x12988:	jmp ax	; 2: 255 224

@733$log2$11:	; FunctionEnd log2

float8$0.693#:
x12990:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x12998:	mov word [bp + 14], string_25s3A2025s2E0A#	; 5: 199 70 14 6 51

perror$2:	; Parameter 8 s 8
x13003:	mov ax, [bp + 6]	; 3: 139 70 6
x13006:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13009:	mov ax, [errno]	; 3: 161 182 10
x13012:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13015:	mov word [bp + 18], perror$6	; 5: 199 70 18 229 50
x13020:	mov [bp + 20], bp	; 3: 137 110 20
x13023:	add bp, 18	; 3: 131 197 18
x13026:	nop	; 1: 144
x13027:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary1155

perror$8:	; Parameter 8 £temporary1155 10
x13029:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13032:	mov word [bp + 8], perror$10	; 5: 199 70 8 251 50
x13037:	mov [bp + 10], bp	; 3: 137 110 10
x13040:	add bp, 8	; 3: 131 197 8
x13043:	mov di, bp	; 2: 137 239
x13045:	add di, 4	; 3: 131 199 4
x13048:	jmp printf	; 3: 233 202 217

perror$10:	; PostCall 8

perror$11:	; Return 0
x13051:	mov ax, [bp]	; 3: 139 70 0
x13054:	mov di, [bp + 4]	; 3: 139 126 4
x13057:	mov bp, [bp + 2]	; 3: 139 110 2
x13060:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

string_25s3A2025s2E0A#:
x13062:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13071:	mov word [bp + 8], strerror$2	; 5: 199 70 8 29 51
x13076:	mov [bp + 10], bp	; 3: 137 110 10
x13079:	add bp, 8	; 3: 131 197 8
x13082:	jmp localeconv	; 3: 233 23 235

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary4050

strerror$4:	; Assign localeConvPtr £temporary4050
x13085:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 9 localeConvPtr 0
x13088:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13092:	je strerror$9	; 2: 116 8

strerror$6:	; Deref £temporary4052 -> localeConvPtr localeConvPtr 16
x13094:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign £temporary4056 £temporary4052 -> localeConvPtr
x13097:	mov ax, [si + 16]	; 3: 139 68 16

strerror$8:	; Goto 10
x13100:	jmp strerror$10	; 2: 235 3

strerror$9:	; Assign £temporary4056 0
x13102:	mov ax, 0	; 3: 184 0 0

strerror$10:	; Assign messageList £temporary4056
x13105:	mov [bp + 10], ax	; 3: 137 70 10

strerror$11:	; Equal 14 messageList 0
x13108:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13112:	je strerror$14	; 2: 116 5

strerror$12:	; Assign £temporary4061 messageList
x13114:	mov ax, [bp + 10]	; 3: 139 70 10

strerror$13:	; Goto 15
x13117:	jmp strerror$15	; 2: 235 3

strerror$14:	; Assign £temporary4061 enMessageList
x13119:	mov ax, enMessageList	; 3: 184 204 31

strerror$15:	; Assign messageList £temporary4061
x13122:	mov [bp + 10], ax	; 3: 137 70 10

strerror$16:	; UnsignedMultiply £temporary4063 errno 2
x13125:	mov ax, [bp + 6]	; 3: 139 70 6
x13128:	xor dx, dx	; 2: 49 210
x13130:	mul word [int2$2#]	; 4: 247 38 96 51

strerror$17:	; BinaryAdd £temporary4064 messageList £temporary4063
x13134:	mov si, [bp + 10]	; 3: 139 118 10
x13137:	add si, ax	; 2: 1 198

strerror$18:	; Deref £temporary4062 -> £temporary4064 £temporary4064 0

strerror$19:	; SetReturnValue £temporary4062 -> £temporary4064
x13139:	mov bx, [si]	; 2: 139 28

strerror$20:	; Return £temporary4062 -> £temporary4064
x13141:	mov ax, [bp]	; 3: 139 70 0
x13144:	mov di, [bp + 4]	; 3: 139 126 4
x13147:	mov bp, [bp + 2]	; 3: 139 110 2
x13150:	jmp ax	; 2: 255 224

strerror$21:	; FunctionEnd strerror

int2$2#:
x13152:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13154:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13157:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13160:	mov word [bp + 16], modf$4	; 5: 199 70 16 118 51
x13165:	mov [bp + 18], bp	; 3: 137 110 18
x13168:	add bp, 16	; 3: 131 197 16
x13171:	jmp fabs	; 3: 233 63 241

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary603

modf$6:	; PopFloat abs_x
x13174:	fstp qword [bp + 16]	; 3: 221 94 16

modf$7:	; PushFloat abs_x
x13177:	fld qword [bp + 16]	; 3: 221 70 16

modf$8:	; FloatingToIntegral £temporary604 abs_x
x13180:	fistp dword [container4bytes#]	; 4: 219 30 9 36
x13184:	mov eax, [container4bytes#]	; 4: 102 161 9 36

modf$9:	; IntegralToFloating £temporary605 £temporary604
x13188:	mov [container4bytes#], eax	; 4: 102 163 9 36
x13192:	fild dword [container4bytes#]	; 4: 219 6 9 36

modf$10:	; PopFloat integral
x13196:	fstp qword [bp + 24]	; 3: 221 94 24

modf$11:	; PushFloat abs_x
x13199:	fld qword [bp + 16]	; 3: 221 70 16

modf$12:	; PushFloat integral
x13202:	fld qword [bp + 24]	; 3: 221 70 24

modf$13:	; BinarySubtract £temporary606 abs_x integral
x13205:	fsub	; 2: 222 233

modf$14:	; PopFloat fractional
x13207:	fstp qword [bp + 32]	; 3: 221 94 32

modf$15:	; Equal 26 p 0
x13210:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13214:	je modf$26	; 2: 116 28

modf$16:	; Deref £temporary608 -> p p 0
x13216:	mov si, [bp + 14]	; 3: 139 118 14

modf$17:	; PushFloat x
x13219:	fld qword [bp + 6]	; 3: 221 70 6

modf$18:	; PushZero
x13222:	fldz	; 2: 217 238

modf$19:	; SignedLessThanEqual 23 x 0
x13224:	fcompp	; 2: 222 217
x13226:	fstsw ax	; 3: 155 223 224
x13229:	sahf	; 1: 158
x13230:	jae modf$23	; 2: 115 5

modf$20:	; PushFloat integral
x13232:	fld qword [bp + 24]	; 3: 221 70 24

modf$21:	; DecreaseStack

modf$22:	; Goto 25
x13235:	jmp modf$25	; 2: 235 5

modf$23:	; PushFloat integral
x13237:	fld qword [bp + 24]	; 3: 221 70 24

modf$24:	; UnarySubtract £temporary610 integral
x13240:	fchs	; 2: 217 224

modf$25:	; PopFloat £temporary608 -> p
x13242:	fstp qword [si]	; 2: 221 28

modf$26:	; PushFloat x
x13244:	fld qword [bp + 6]	; 3: 221 70 6

modf$27:	; PushZero
x13247:	fldz	; 2: 217 238

modf$28:	; SignedLessThanEqual 32 x 0
x13249:	fcompp	; 2: 222 217
x13251:	fstsw ax	; 3: 155 223 224
x13254:	sahf	; 1: 158
x13255:	jae modf$32	; 2: 115 5

modf$29:	; PushFloat fractional
x13257:	fld qword [bp + 32]	; 3: 221 70 32

modf$30:	; DecreaseStack

modf$31:	; Goto 34
x13260:	jmp modf$34	; 2: 235 5

modf$32:	; PushFloat fractional
x13262:	fld qword [bp + 32]	; 3: 221 70 32

modf$33:	; UnarySubtract £temporary616 fractional
x13265:	fchs	; 2: 217 224

modf$34:	; SetReturnValue £temporary620

modf$35:	; Return £temporary620
x13267:	mov ax, [bp]	; 3: 139 70 0
x13270:	mov di, [bp + 4]	; 3: 139 126 4
x13273:	mov bp, [bp + 2]	; 3: 139 110 2
x13276:	jmp ax	; 2: 255 224

modf$36:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13278:	mov word [bp + 28], string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 52 53

math_test_2$2:	; PushFloat x
x13283:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13286:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13289:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13292:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13295:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13298:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13301:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13304:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13307:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 9 52
x13312:	mov [bp + 48], bp	; 3: 137 110 48
x13315:	add bp, 46	; 3: 131 197 46
x13318:	jmp fmod	; 3: 233 246 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary4956

math_test_2$14:	; Parameter 22 £temporary4956 24
x13321:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13324:	mov ax, [errno]	; 3: 161 182 10
x13327:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13330:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 37 52
x13335:	mov [bp + 24], bp	; 3: 137 110 24
x13338:	add bp, 22	; 3: 131 197 22
x13341:	mov di, bp	; 2: 137 239
x13343:	add di, 26	; 3: 131 199 26
x13346:	jmp printf	; 3: 233 160 216

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13349:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13355:	mov word [bp + 28], string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 83 53

math_test_2$21:	; PushFloat x
x13360:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13363:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13366:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13369:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13372:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13375:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13378:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13381:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13384:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 86 52
x13389:	mov [bp + 48], bp	; 3: 137 110 48
x13392:	add bp, 46	; 3: 131 197 46
x13395:	jmp atan2	; 3: 233 80 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary4958

math_test_2$33:	; Parameter 22 £temporary4958 24
x13398:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13401:	mov ax, [errno]	; 3: 161 182 10
x13404:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13407:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 114 52
x13412:	mov [bp + 24], bp	; 3: 137 110 24
x13415:	add bp, 22	; 3: 131 197 22
x13418:	mov di, bp	; 2: 137 239
x13420:	add di, 26	; 3: 131 199 26
x13423:	jmp printf	; 3: 233 83 216

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13426:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13432:	mov word [bp + 28], string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 115 53

math_test_2$40:	; PushFloat x
x13437:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13440:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13443:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13446:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13449:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13452:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13455:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13458:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13461:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 163 52
x13466:	mov [bp + 48], bp	; 3: 137 110 48
x13469:	add bp, 46	; 3: 131 197 46
x13472:	jmp pow	; 3: 233 145 243

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary4960

math_test_2$52:	; Parameter 22 £temporary4960 24
x13475:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13478:	mov ax, [errno]	; 3: 161 182 10
x13481:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13484:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 191 52
x13489:	mov [bp + 24], bp	; 3: 137 110 24
x13492:	add bp, 22	; 3: 131 197 22
x13495:	mov di, bp	; 2: 137 239
x13497:	add di, 26	; 3: 131 199 26
x13500:	jmp printf	; 3: 233 6 216

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13503:	mov word [errno], 0	; 6: 199 6 182 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13509:	mov word [bp + 28], string_0A#	; 5: 199 70 28 195 12

math_test_2$59:	; Call 22 printf 0
x13514:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 218 52
x13519:	mov [bp + 24], bp	; 3: 137 110 24
x13522:	add bp, 22	; 3: 131 197 22
x13525:	mov di, bp	; 2: 137 239
x13527:	jmp printf	; 3: 233 235 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13530:	mov word [bp + 28], string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 145 53

math_test_2$63:	; PushFloat x
x13535:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13538:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13541:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary4963 y
x13544:	fistp word [container2bytes#]	; 4: 223 30 16 27
x13548:	mov ax, [container2bytes#]	; 3: 161 16 27

math_test_2$67:	; Parameter 22 £temporary4963 16
x13551:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13554:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13557:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13560:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary4964 y
x13563:	fistp word [container2bytes#]	; 4: 223 30 16 27
x13567:	mov ax, [container2bytes#]	; 3: 161 16 27

math_test_2$73:	; Parameter 22 £temporary4964 32
x13570:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13573:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 19 53
x13578:	mov [bp + 42], bp	; 3: 137 110 42
x13581:	add bp, 40	; 3: 131 197 40
x13584:	jmp ldexp	; 3: 233 201 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary4965

math_test_2$77:	; Parameter 22 £temporary4965 18
x13587:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13590:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 41 53
x13595:	mov [bp + 24], bp	; 3: 137 110 24
x13598:	add bp, 22	; 3: 131 197 22
x13601:	mov di, bp	; 2: 137 239
x13603:	add di, 18	; 3: 131 199 18
x13606:	jmp printf	; 3: 233 156 215

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13609:	mov ax, [bp]	; 3: 139 70 0
x13612:	mov di, [bp + 4]	; 3: 139 126 4
x13615:	mov bp, [bp + 2]	; 3: 139 110 2
x13618:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13620:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13651:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13683:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

string_ldexp2825f2C2025i29203D2025f0A0A#:
x13713:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x13734:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x13737:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x13739:	fcompp	; 2: 222 217
x13741:	fstsw ax	; 3: 155 223 224
x13744:	sahf	; 1: 158
x13745:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x13747:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x13750:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary739 x y
x13753:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary739 6
x13755:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x13758:	mov word [bp + 22], atan2$9	; 5: 199 70 22 204 53
x13763:	mov [bp + 24], bp	; 3: 137 110 24
x13766:	add bp, 22	; 3: 131 197 22
x13769:	jmp atan	; 3: 233 8 249

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary740

atan2$11:	; SetReturnValue £temporary740

atan2$12:	; Return £temporary740
x13772:	mov ax, [bp]	; 3: 139 70 0
x13775:	mov di, [bp + 4]	; 3: 139 126 4
x13778:	mov bp, [bp + 2]	; 3: 139 110 2
x13781:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x13783:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x13786:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x13788:	fcompp	; 2: 222 217
x13790:	fstsw ax	; 3: 155 223 224
x13793:	sahf	; 1: 158
x13794:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x13796:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x13799:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x13801:	fcompp	; 2: 222 217
x13803:	fstsw ax	; 3: 155 223 224
x13806:	sahf	; 1: 158
x13807:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x13809:	fld qword [float8$3.14#]	; 4: 221 6 254 4

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13813:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x13816:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x13819:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary744 x y
x13822:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary744 6
x13824:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x13827:	mov word [bp + 30], atan2$26	; 5: 199 70 30 17 54
x13832:	mov [bp + 32], bp	; 3: 137 110 32
x13835:	add bp, 30	; 3: 131 197 30
x13838:	jmp atan	; 3: 233 195 248

atan2$26:	; PostCall 22
x13841:	fstp qword [bp + 30]	; 3: 221 94 30
x13844:	fld qword [bp + 22]	; 3: 221 70 22
x13847:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary745

atan2$28:	; BinaryAdd £temporary746 3.14 £temporary745
x13850:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary746

atan2$30:	; Return £temporary746
x13852:	mov ax, [bp]	; 3: 139 70 0
x13855:	mov di, [bp + 4]	; 3: 139 126 4
x13858:	mov bp, [bp + 2]	; 3: 139 110 2
x13861:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x13863:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x13866:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x13868:	fcompp	; 2: 222 217
x13870:	fstsw ax	; 3: 155 223 224
x13873:	sahf	; 1: 158
x13874:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x13876:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x13879:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x13881:	fcompp	; 2: 222 217
x13883:	fstsw ax	; 3: 155 223 224
x13886:	sahf	; 1: 158
x13887:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x13889:	fld qword [float8$minus3.14#]	; 4: 221 6 22 5

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13893:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x13896:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x13899:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary750 x y
x13902:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary750 6
x13904:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x13907:	mov word [bp + 30], atan2$44	; 5: 199 70 30 97 54
x13912:	mov [bp + 32], bp	; 3: 137 110 32
x13915:	add bp, 30	; 3: 131 197 30
x13918:	jmp atan	; 3: 233 115 248

atan2$44:	; PostCall 22
x13921:	fstp qword [bp + 30]	; 3: 221 94 30
x13924:	fld qword [bp + 22]	; 3: 221 70 22
x13927:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary751

atan2$46:	; BinaryAdd £temporary752 -3.14 £temporary751
x13930:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary752

atan2$48:	; Return £temporary752
x13932:	mov ax, [bp]	; 3: 139 70 0
x13935:	mov di, [bp + 4]	; 3: 139 126 4
x13938:	mov bp, [bp + 2]	; 3: 139 110 2
x13941:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x13943:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x13946:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x13948:	fcompp	; 2: 222 217
x13950:	fstsw ax	; 3: 155 223 224
x13953:	sahf	; 1: 158
x13954:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x13956:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x13959:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x13961:	fcompp	; 2: 222 217
x13963:	fstsw ax	; 3: 155 223 224
x13966:	sahf	; 1: 158
x13967:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x13969:	fld qword [float8$1.57#]	; 4: 221 6 6 5

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x13973:	mov ax, [bp]	; 3: 139 70 0
x13976:	mov di, [bp + 4]	; 3: 139 126 4
x13979:	mov bp, [bp + 2]	; 3: 139 110 2
x13982:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x13984:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x13987:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x13989:	fcompp	; 2: 222 217
x13991:	fstsw ax	; 3: 155 223 224
x13994:	sahf	; 1: 158
x13995:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x13997:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14000:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14002:	fcompp	; 2: 222 217
x14004:	fstsw ax	; 3: 155 223 224
x14007:	sahf	; 1: 158
x14008:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14010:	fld qword [float8$minus1.57#]	; 4: 221 6 14 5

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14014:	mov ax, [bp]	; 3: 139 70 0
x14017:	mov di, [bp + 4]	; 3: 139 126 4
x14020:	mov bp, [bp + 2]	; 3: 139 110 2
x14023:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14025:	mov word [errno], 6	; 6: 199 6 182 10 6 0

atan2$68:	; PushZero
x14031:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14033:	mov ax, [bp]	; 3: 139 70 0
x14036:	mov di, [bp + 4]	; 3: 139 126 4
x14039:	mov bp, [bp + 2]	; 3: 139 110 2
x14042:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

ldexp:	; PushFloat x
x14044:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14047:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14050:	fld qword [float8$2#]	; 4: 221 6 70 5

ldexp$3:	; Parameter 16 2 6
x14054:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary565 n
x14057:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary565 14
x14060:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14063:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 253 54
x14068:	mov [bp + 26], bp	; 3: 137 110 26
x14071:	add bp, 24	; 3: 131 197 24
x14074:	jmp pow	; 3: 233 55 241

ldexp$7:	; PostCall 16
x14077:	fstp qword [bp + 24]	; 3: 221 94 24
x14080:	fld qword [bp + 16]	; 3: 221 70 16
x14083:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary566

ldexp$9:	; SignedMultiply £temporary567 x £temporary566
x14086:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary567

ldexp$11:	; Return £temporary567
x14088:	mov ax, [bp]	; 3: 139 70 0
x14091:	mov di, [bp + 4]	; 3: 139 126 4
x14094:	mov bp, [bp + 2]	; 3: 139 110 2
x14097:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14099:	mov word [bp + 12], string_in2Etxt#	; 5: 199 70 12 54 75

file_test$2:	; Parameter 6 string_r# 8
x14104:	mov word [bp + 14], string_r#	; 5: 199 70 14 61 75

file_test$3:	; Call 6 fopen 0
x14109:	mov word [bp + 6], file_test$4	; 5: 199 70 6 43 55
x14114:	mov [bp + 8], bp	; 3: 137 110 8
x14117:	add bp, 6	; 3: 131 197 6
x14120:	jmp fopen	; 3: 233 238 23

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary4995

file_test$6:	; Assign inFilePtr £temporary4995
x14123:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14126:	mov word [bp + 14], string_outX2Etxt#	; 5: 199 70 14 63 75

file_test$9:	; Parameter 8 string_w# 8
x14131:	mov word [bp + 16], string_w#	; 5: 199 70 16 72 75

file_test$10:	; Call 8 fopen 0
x14136:	mov word [bp + 8], file_test$11	; 5: 199 70 8 70 55
x14141:	mov [bp + 10], bp	; 3: 137 110 10
x14144:	add bp, 8	; 3: 131 197 8
x14147:	jmp fopen	; 3: 233 211 23

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary4996

file_test$13:	; Assign outFilePtr £temporary4996
x14150:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14153:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14157:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14159:	mov ax, [stderr]	; 3: 161 74 75
x14162:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14165:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 76 75

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14170:	mov word [bp + 20], string_inFilePtr20213D20NULL#	; 5: 199 70 20 122 75

file_test$19:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14175:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 140 75

file_test$20:	; Parameter 10 14 14
x14180:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14185:	mov word [bp + 10], file_test$22	; 5: 199 70 10 124 55
x14190:	mov [bp + 12], bp	; 3: 137 110 12
x14193:	add bp, 10	; 3: 131 197 10
x14196:	mov di, bp	; 2: 137 239
x14198:	add di, 6	; 3: 131 199 6
x14201:	jmp fprintf	; 3: 233 47 28

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14204:	mov word [bp + 10], file_test$25	; 5: 199 70 10 138 55
x14209:	mov [bp + 12], bp	; 3: 137 110 12
x14212:	add bp, 10	; 3: 131 197 10
x14215:	jmp abort	; 3: 233 92 28

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14218:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14222:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14224:	mov ax, [stderr]	; 3: 161 74 75
x14227:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14230:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 76 75

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14235:	mov word [bp + 20], string_outFilePtr20213D20NULL#	; 5: 199 70 20 205 75

file_test$31:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14240:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 140 75

file_test$32:	; Parameter 10 15 14
x14245:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14250:	mov word [bp + 10], file_test$34	; 5: 199 70 10 189 55
x14255:	mov [bp + 12], bp	; 3: 137 110 12
x14258:	add bp, 10	; 3: 131 197 10
x14261:	mov di, bp	; 2: 137 239
x14263:	add di, 6	; 3: 131 199 6
x14266:	jmp fprintf	; 3: 233 238 27

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14269:	mov word [bp + 10], file_test$37	; 5: 199 70 10 203 55
x14274:	mov [bp + 12], bp	; 3: 137 110 12
x14277:	add bp, 10	; 3: 131 197 10
x14280:	jmp abort	; 3: 233 27 28

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14283:	mov ax, [bp + 6]	; 3: 139 70 6
x14286:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14289:	mov word [bp + 10], file_test$41	; 5: 199 70 10 223 55
x14294:	mov [bp + 12], bp	; 3: 137 110 12
x14297:	add bp, 10	; 3: 131 197 10
x14300:	jmp feof	; 3: 233 24 28

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary5005

file_test$43:	; NotEqual 75 £temporary5005 0
x14303:	cmp bx, 0	; 3: 131 251 0
x14306:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14310:	mov ax, [bp + 6]	; 3: 139 70 6
x14313:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14316:	mov word [bp + 26], string_25lf#	; 5: 199 70 26 224 75

file_test$47:	; address £temporary5008 value
x14321:	mov si, bp	; 2: 137 238
x14323:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary5008 10
x14326:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14329:	mov word [bp + 18], file_test$50	; 5: 199 70 18 12 56
x14334:	mov [bp + 20], bp	; 3: 137 110 20
x14337:	add bp, 18	; 3: 131 197 18
x14340:	mov di, bp	; 2: 137 239
x14342:	add di, 2	; 3: 131 199 2
x14345:	jmp fscanf	; 3: 233 128 28

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14348:	mov word [bp + 24], string_X12025f0A#	; 5: 199 70 24 228 75

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14353:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14356:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14359:	mov word [bp + 26], file_test$57	; 5: 199 70 26 37 56
x14364:	mov [bp + 28], bp	; 3: 137 110 28
x14367:	add bp, 26	; 3: 131 197 26
x14370:	jmp sqrt	; 3: 233 59 246

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary5010

file_test$59:	; Parameter 18 £temporary5010 8
x14373:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14376:	mov word [bp + 18], file_test$61	; 5: 199 70 18 59 56
x14381:	mov [bp + 20], bp	; 3: 137 110 20
x14384:	add bp, 18	; 3: 131 197 18
x14387:	mov di, bp	; 2: 137 239
x14389:	add di, 8	; 3: 131 199 8
x14392:	jmp printf	; 3: 233 138 212

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14395:	mov ax, [bp + 8]	; 3: 139 70 8
x14398:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14401:	mov word [bp + 26], string_X22025f0A#	; 5: 199 70 26 235 75

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14406:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14409:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14412:	mov word [bp + 28], file_test$69	; 5: 199 70 28 90 56
x14417:	mov [bp + 30], bp	; 3: 137 110 30
x14420:	add bp, 28	; 3: 131 197 28
x14423:	jmp sqrt	; 3: 233 6 246

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary5012

file_test$71:	; Parameter 18 £temporary5012 10
x14426:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14429:	mov word [bp + 18], file_test$73	; 5: 199 70 18 112 56
x14434:	mov [bp + 20], bp	; 3: 137 110 20
x14437:	add bp, 18	; 3: 131 197 18
x14440:	mov di, bp	; 2: 137 239
x14442:	add di, 8	; 3: 131 199 8
x14445:	jmp fprintf	; 3: 233 59 27

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14448:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14451:	mov word [bp + 16], string_0A#	; 5: 199 70 16 195 12

file_test$77:	; Call 10 printf 0
x14456:	mov word [bp + 10], file_test$78	; 5: 199 70 10 136 56
x14461:	mov [bp + 12], bp	; 3: 137 110 12
x14464:	add bp, 10	; 3: 131 197 10
x14467:	mov di, bp	; 2: 137 239
x14469:	jmp printf	; 3: 233 61 212

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14472:	mov ax, [bp + 6]	; 3: 139 70 6
x14475:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14478:	mov word [bp + 10], file_test$82	; 5: 199 70 10 156 56
x14483:	mov [bp + 12], bp	; 3: 137 110 12
x14486:	add bp, 10	; 3: 131 197 10
x14489:	jmp fclose	; 3: 233 183 45

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14492:	mov ax, [bp + 8]	; 3: 139 70 8
x14495:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14498:	mov word [bp + 10], file_test$86	; 5: 199 70 10 176 56
x14503:	mov [bp + 12], bp	; 3: 137 110 12
x14506:	add bp, 10	; 3: 131 197 10
x14509:	jmp fclose	; 3: 233 163 45

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14512:	mov word [bp + 12], string_in2Etxt#	; 5: 199 70 12 54 75

file_test$89:	; Parameter 6 string_r# 8
x14517:	mov word [bp + 14], string_r#	; 5: 199 70 14 61 75

file_test$90:	; Call 6 fopen 0
x14522:	mov word [bp + 6], file_test$91	; 5: 199 70 6 200 56
x14527:	mov [bp + 8], bp	; 3: 137 110 8
x14530:	add bp, 6	; 3: 131 197 6
x14533:	jmp fopen	; 3: 233 81 22

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary5017

file_test$93:	; Assign inFilePtr £temporary5017
x14536:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14539:	mov word [bp + 14], string_outY2Etxt#	; 5: 199 70 14 242 75

file_test$96:	; Parameter 8 string_w# 8
x14544:	mov word [bp + 16], string_w#	; 5: 199 70 16 72 75

file_test$97:	; Call 8 fopen 0
x14549:	mov word [bp + 8], file_test$98	; 5: 199 70 8 227 56
x14554:	mov [bp + 10], bp	; 3: 137 110 10
x14557:	add bp, 8	; 3: 131 197 8
x14560:	jmp fopen	; 3: 233 54 22

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary5018

file_test$100:	; Assign outFilePtr £temporary5018
x14563:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14566:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14570:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14572:	mov ax, [stderr]	; 3: 161 74 75
x14575:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14578:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 76 75

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14583:	mov word [bp + 20], string_inFilePtr20213D20NULL#	; 5: 199 70 20 122 75

file_test$106:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14588:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 140 75

file_test$107:	; Parameter 10 34 14
x14593:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14598:	mov word [bp + 10], file_test$109	; 5: 199 70 10 25 57
x14603:	mov [bp + 12], bp	; 3: 137 110 12
x14606:	add bp, 10	; 3: 131 197 10
x14609:	mov di, bp	; 2: 137 239
x14611:	add di, 6	; 3: 131 199 6
x14614:	jmp fprintf	; 3: 233 146 26

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14617:	mov word [bp + 10], file_test$112	; 5: 199 70 10 39 57
x14622:	mov [bp + 12], bp	; 3: 137 110 12
x14625:	add bp, 10	; 3: 131 197 10
x14628:	jmp abort	; 3: 233 191 26

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14631:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14635:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14637:	mov ax, [stderr]	; 3: 161 74 75
x14640:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14643:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 76 75

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14648:	mov word [bp + 20], string_outFilePtr20213D20NULL#	; 5: 199 70 20 205 75

file_test$118:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14653:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 140 75

file_test$119:	; Parameter 10 35 14
x14658:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14663:	mov word [bp + 10], file_test$121	; 5: 199 70 10 90 57
x14668:	mov [bp + 12], bp	; 3: 137 110 12
x14671:	add bp, 10	; 3: 131 197 10
x14674:	mov di, bp	; 2: 137 239
x14676:	add di, 6	; 3: 131 199 6
x14679:	jmp fprintf	; 3: 233 81 26

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14682:	mov word [bp + 10], file_test$124	; 5: 199 70 10 104 57
x14687:	mov [bp + 12], bp	; 3: 137 110 12
x14690:	add bp, 10	; 3: 131 197 10
x14693:	jmp abort	; 3: 233 126 26

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x14696:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x14701:	mov ax, [bp + 6]	; 3: 139 70 6
x14704:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x14707:	mov word [bp + 22], string_25i#	; 5: 199 70 22 251 75

file_test$129:	; address £temporary5027 size
x14712:	mov si, bp	; 2: 137 238
x14714:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary5027 10
x14717:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x14720:	mov word [bp + 14], file_test$132	; 5: 199 70 14 147 57
x14725:	mov [bp + 16], bp	; 3: 137 110 16
x14728:	add bp, 14	; 3: 131 197 14
x14731:	mov di, bp	; 2: 137 239
x14733:	add di, 2	; 3: 131 199 2
x14736:	jmp fscanf	; 3: 233 249 26

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x14739:	mov word [bp + 20], string_size2025i0A#	; 5: 199 70 20 254 75

file_test$135:	; Parameter 14 size 8
x14744:	mov ax, [bp + 10]	; 3: 139 70 10
x14747:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x14750:	mov word [bp + 14], file_test$137	; 5: 199 70 14 177 57
x14755:	mov [bp + 16], bp	; 3: 137 110 16
x14758:	add bp, 14	; 3: 131 197 14
x14761:	mov di, bp	; 2: 137 239
x14763:	add di, 2	; 3: 131 199 2
x14766:	jmp printf	; 3: 233 20 211

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x14769:	mov ax, [bp + 8]	; 3: 139 70 8
x14772:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x14775:	mov word [bp + 22], string_Y20size2025i0A#	; 5: 199 70 22 7 76

file_test$141:	; Parameter 14 size 10
x14780:	mov ax, [bp + 10]	; 3: 139 70 10
x14783:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x14786:	mov word [bp + 14], file_test$143	; 5: 199 70 14 213 57
x14791:	mov [bp + 16], bp	; 3: 137 110 16
x14794:	add bp, 14	; 3: 131 197 14
x14797:	mov di, bp	; 2: 137 239
x14799:	add di, 2	; 3: 131 199 2
x14802:	jmp fprintf	; 3: 233 214 25

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x14805:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x14810:	mov ax, [bp + 10]	; 3: 139 70 10
x14813:	cmp [bp + 12], ax	; 3: 57 70 12
x14816:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x14820:	mov ax, [bp + 6]	; 3: 139 70 6
x14823:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x14826:	mov word [bp + 30], string_25lf#	; 5: 199 70 30 224 75

file_test$149:	; address £temporary5033 value
x14831:	mov si, bp	; 2: 137 238
x14833:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary5033 10
x14836:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x14839:	mov word [bp + 22], file_test$152	; 5: 199 70 22 10 58
x14844:	mov [bp + 24], bp	; 3: 137 110 24
x14847:	add bp, 22	; 3: 131 197 22
x14850:	mov di, bp	; 2: 137 239
x14852:	add di, 2	; 3: 131 199 2
x14855:	jmp fscanf	; 3: 233 130 26

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x14858:	mov word [bp + 28], string_Y12025f0A#	; 5: 199 70 28 18 76

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x14863:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x14866:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x14869:	mov word [bp + 30], file_test$159	; 5: 199 70 30 35 58
x14874:	mov [bp + 32], bp	; 3: 137 110 32
x14877:	add bp, 30	; 3: 131 197 30
x14880:	jmp sqrt	; 3: 233 61 244

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary5035

file_test$161:	; Parameter 22 £temporary5035 8
x14883:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x14886:	mov word [bp + 22], file_test$163	; 5: 199 70 22 57 58
x14891:	mov [bp + 24], bp	; 3: 137 110 24
x14894:	add bp, 22	; 3: 131 197 22
x14897:	mov di, bp	; 2: 137 239
x14899:	add di, 8	; 3: 131 199 8
x14902:	jmp printf	; 3: 233 140 210

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x14905:	mov ax, [bp + 8]	; 3: 139 70 8
x14908:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x14911:	mov word [bp + 30], string_Y22025f0A#	; 5: 199 70 30 25 76

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x14916:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x14919:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x14922:	mov word [bp + 32], file_test$171	; 5: 199 70 32 88 58
x14927:	mov [bp + 34], bp	; 3: 137 110 34
x14930:	add bp, 32	; 3: 131 197 32
x14933:	jmp sqrt	; 3: 233 8 244

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary5037

file_test$173:	; Parameter 22 £temporary5037 10
x14936:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x14939:	mov word [bp + 22], file_test$175	; 5: 199 70 22 110 58
x14944:	mov [bp + 24], bp	; 3: 137 110 24
x14947:	add bp, 22	; 3: 131 197 22
x14950:	mov di, bp	; 2: 137 239
x14952:	add di, 8	; 3: 131 199 8
x14955:	jmp fprintf	; 3: 233 61 25

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x14958:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x14961:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x14964:	mov word [bp + 20], string_0A#	; 5: 199 70 20 195 12

file_test$180:	; Call 14 printf 0
x14969:	mov word [bp + 14], file_test$181	; 5: 199 70 14 137 58
x14974:	mov [bp + 16], bp	; 3: 137 110 16
x14977:	add bp, 14	; 3: 131 197 14
x14980:	mov di, bp	; 2: 137 239
x14982:	jmp printf	; 3: 233 60 210

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x14985:	mov ax, [bp + 6]	; 3: 139 70 6
x14988:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x14991:	mov word [bp + 10], file_test$185	; 5: 199 70 10 157 58
x14996:	mov [bp + 12], bp	; 3: 137 110 12
x14999:	add bp, 10	; 3: 131 197 10
x15002:	jmp fclose	; 3: 233 182 43

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15005:	mov ax, [bp + 8]	; 3: 139 70 8
x15008:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15011:	mov word [bp + 10], file_test$189	; 5: 199 70 10 177 58
x15016:	mov [bp + 12], bp	; 3: 137 110 12
x15019:	add bp, 10	; 3: 131 197 10
x15022:	jmp fclose	; 3: 233 162 43

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_X#
x15025:	mov word [bp + 6], string_X#	; 5: 199 70 6 32 76

file_test$191:	; Assign targetFile string_Y#
x15030:	mov word [bp + 8], string_Y#	; 5: 199 70 8 34 76

file_test$192:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$193:	; Parameter 10 sourceFile 6
x15035:	mov ax, [bp + 6]	; 3: 139 70 6
x15038:	mov [bp + 16], ax	; 3: 137 70 16

file_test$194:	; Parameter 10 string_w# 8
x15041:	mov word [bp + 18], string_w#	; 5: 199 70 18 72 75

file_test$195:	; Call 10 fopen 0
x15046:	mov word [bp + 10], file_test$196	; 5: 199 70 10 212 58
x15051:	mov [bp + 12], bp	; 3: 137 110 12
x15054:	add bp, 10	; 3: 131 197 10
x15057:	jmp fopen	; 3: 233 69 20

file_test$196:	; PostCall 10

file_test$197:	; GetReturnValue £temporary5042

file_test$198:	; Assign filePtr £temporary5042
x15060:	mov [bp + 10], bx	; 3: 137 94 10

file_test$199:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$200:	; Parameter 12 filePtr 6
x15063:	mov ax, [bp + 10]	; 3: 139 70 10
x15066:	mov [bp + 18], ax	; 3: 137 70 18

file_test$201:	; Parameter 12 string_Hello20X# 8
x15069:	mov word [bp + 20], string_Hello20X#	; 5: 199 70 20 36 76

file_test$202:	; Call 12 fprintf 0
x15074:	mov word [bp + 12], file_test$203	; 5: 199 70 12 242 58
x15079:	mov [bp + 14], bp	; 3: 137 110 14
x15082:	add bp, 12	; 3: 131 197 12
x15085:	mov di, bp	; 2: 137 239
x15087:	jmp fprintf	; 3: 233 185 24

file_test$203:	; PostCall 12

file_test$204:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$205:	; Parameter 12 filePtr 6
x15090:	mov ax, [bp + 10]	; 3: 139 70 10
x15093:	mov [bp + 18], ax	; 3: 137 70 18

file_test$206:	; Call 12 fclose 0
x15096:	mov word [bp + 12], file_test$207	; 5: 199 70 12 6 59
x15101:	mov [bp + 14], bp	; 3: 137 110 14
x15104:	add bp, 12	; 3: 131 197 12
x15107:	jmp fclose	; 3: 233 77 43

file_test$207:	; PostCall 12

file_test$208:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$209:	; Parameter 12 sourceFile 6
x15110:	mov ax, [bp + 6]	; 3: 139 70 6
x15113:	mov [bp + 18], ax	; 3: 137 70 18

file_test$210:	; Parameter 12 targetFile 8
x15116:	mov ax, [bp + 8]	; 3: 139 70 8
x15119:	mov [bp + 20], ax	; 3: 137 70 20

file_test$211:	; Call 12 rename 0
x15122:	mov word [bp + 12], file_test$212	; 5: 199 70 12 32 59
x15127:	mov [bp + 14], bp	; 3: 137 110 14
x15130:	add bp, 12	; 3: 131 197 12
x15133:	jmp rename	; 3: 233 31 44

file_test$212:	; PostCall 12

file_test$213:	; GetReturnValue £temporary5045

file_test$214:	; NotEqual 222 £temporary5045 0
x15136:	cmp bx, 0	; 3: 131 251 0
x15139:	jne file_test$222	; 2: 117 38

file_test$215:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$216:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15141:	mov word [bp + 18], string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 44 76

file_test$217:	; Parameter 12 sourceFile 8
x15146:	mov ax, [bp + 6]	; 3: 139 70 6
x15149:	mov [bp + 20], ax	; 3: 137 70 20

file_test$218:	; Parameter 12 targetFile 10
x15152:	mov ax, [bp + 8]	; 3: 139 70 8
x15155:	mov [bp + 22], ax	; 3: 137 70 22

file_test$219:	; Call 12 printf 0
x15158:	mov word [bp + 12], file_test$220	; 5: 199 70 12 73 59
x15163:	mov [bp + 14], bp	; 3: 137 110 14
x15166:	add bp, 12	; 3: 131 197 12
x15169:	mov di, bp	; 2: 137 239
x15171:	add di, 4	; 3: 131 199 4
x15174:	jmp printf	; 3: 233 124 209

file_test$220:	; PostCall 12

file_test$221:	; Goto 233
x15177:	jmp file_test$233	; 2: 235 53

file_test$222:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$223:	; Parameter 12 string_Error2025i3A2025s2E0A# 6
x15179:	mov word [bp + 18], string_Error2025i3A2025s2E0A#	; 5: 199 70 18 76 76

file_test$224:	; Parameter 12 errno 8
x15184:	mov ax, [errno]	; 3: 161 182 10
x15187:	mov [bp + 20], ax	; 3: 137 70 20

file_test$225:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$226:	; Parameter 12 errno 16
x15190:	mov ax, [errno]	; 3: 161 182 10
x15193:	mov [bp + 28], ax	; 3: 137 70 28

file_test$227:	; Call 12 strerror 10
x15196:	mov word [bp + 22], file_test$228	; 5: 199 70 22 106 59
x15201:	mov [bp + 24], bp	; 3: 137 110 24
x15204:	add bp, 22	; 3: 131 197 22
x15207:	jmp strerror	; 3: 233 165 247

file_test$228:	; PostCall 12

file_test$229:	; GetReturnValue £temporary5048

file_test$230:	; Parameter 12 £temporary5048 10
x15210:	mov [bp + 22], bx	; 3: 137 94 22

file_test$231:	; Call 12 printf 0
x15213:	mov word [bp + 12], file_test$232	; 5: 199 70 12 128 59
x15218:	mov [bp + 14], bp	; 3: 137 110 14
x15221:	add bp, 12	; 3: 131 197 12
x15224:	mov di, bp	; 2: 137 239
x15226:	add di, 4	; 3: 131 199 4
x15229:	jmp printf	; 3: 233 69 209

file_test$232:	; PostCall 12

file_test$233:	; Assign targetFilePtr string_Z#
x15232:	mov word [bp + 6], string_Z#	; 5: 199 70 6 91 76

file_test$234:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$235:	; Parameter 8 string_Z# 6
x15237:	mov word [bp + 14], string_Z#	; 5: 199 70 14 91 76

file_test$236:	; Parameter 8 string_w# 8
x15242:	mov word [bp + 16], string_w#	; 5: 199 70 16 72 75

file_test$237:	; Call 8 fopen 0
x15247:	mov word [bp + 8], file_test$238	; 5: 199 70 8 157 59
x15252:	mov [bp + 10], bp	; 3: 137 110 10
x15255:	add bp, 8	; 3: 131 197 8
x15258:	jmp fopen	; 3: 233 124 19

file_test$238:	; PostCall 8

file_test$239:	; GetReturnValue £temporary5050

file_test$240:	; Assign filePtr £temporary5050
x15261:	mov [bp + 8], bx	; 3: 137 94 8

file_test$241:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$242:	; Parameter 10 filePtr 6
x15264:	mov ax, [bp + 8]	; 3: 139 70 8
x15267:	mov [bp + 16], ax	; 3: 137 70 16

file_test$243:	; Parameter 10 string_Hello20Z# 8
x15270:	mov word [bp + 18], string_Hello20Z#	; 5: 199 70 18 93 76

file_test$244:	; Call 10 fprintf 0
x15275:	mov word [bp + 10], file_test$245	; 5: 199 70 10 187 59
x15280:	mov [bp + 12], bp	; 3: 137 110 12
x15283:	add bp, 10	; 3: 131 197 10
x15286:	mov di, bp	; 2: 137 239
x15288:	jmp fprintf	; 3: 233 240 23

file_test$245:	; PostCall 10

file_test$246:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$247:	; Parameter 10 filePtr 6
x15291:	mov ax, [bp + 8]	; 3: 139 70 8
x15294:	mov [bp + 16], ax	; 3: 137 70 16

file_test$248:	; Call 10 fclose 0
x15297:	mov word [bp + 10], file_test$249	; 5: 199 70 10 207 59
x15302:	mov [bp + 12], bp	; 3: 137 110 12
x15305:	add bp, 10	; 3: 131 197 10
x15308:	jmp fclose	; 3: 233 132 42

file_test$249:	; PostCall 10

file_test$250:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$251:	; Parameter 10 targetFilePtr 6
x15311:	mov ax, [bp + 6]	; 3: 139 70 6
x15314:	mov [bp + 16], ax	; 3: 137 70 16

file_test$252:	; Call 10 remove 0
x15317:	mov word [bp + 10], file_test$253	; 5: 199 70 10 227 59
x15322:	mov [bp + 12], bp	; 3: 137 110 12
x15325:	add bp, 10	; 3: 131 197 10
x15328:	jmp remove	; 3: 233 47 43

file_test$253:	; PostCall 10

file_test$254:	; GetReturnValue £temporary5053

file_test$255:	; NotEqual 262 £temporary5053 0
x15331:	cmp bx, 0	; 3: 131 251 0
x15334:	jne file_test$262	; 2: 117 32

file_test$256:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$257:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15336:	mov word [bp + 16], string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 101 76

file_test$258:	; Parameter 10 targetFilePtr 8
x15341:	mov ax, [bp + 6]	; 3: 139 70 6
x15344:	mov [bp + 18], ax	; 3: 137 70 18

file_test$259:	; Call 10 printf 0
x15347:	mov word [bp + 10], file_test$260	; 5: 199 70 10 6 60
x15352:	mov [bp + 12], bp	; 3: 137 110 12
x15355:	add bp, 10	; 3: 131 197 10
x15358:	mov di, bp	; 2: 137 239
x15360:	add di, 2	; 3: 131 199 2
x15363:	jmp printf	; 3: 233 191 208

file_test$260:	; PostCall 10

file_test$261:	; Goto 273
x15366:	jmp file_test$273	; 2: 235 53

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 string_Error2025i3A2025s2E0A# 6
x15368:	mov word [bp + 16], string_Error2025i3A2025s2E0A#	; 5: 199 70 16 76 76

file_test$264:	; Parameter 10 errno 8
x15373:	mov ax, [errno]	; 3: 161 182 10
x15376:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$266:	; Parameter 10 errno 16
x15379:	mov ax, [errno]	; 3: 161 182 10
x15382:	mov [bp + 26], ax	; 3: 137 70 26

file_test$267:	; Call 10 strerror 10
x15385:	mov word [bp + 20], file_test$268	; 5: 199 70 20 39 60
x15390:	mov [bp + 22], bp	; 3: 137 110 22
x15393:	add bp, 20	; 3: 131 197 20
x15396:	jmp strerror	; 3: 233 232 246

file_test$268:	; PostCall 10

file_test$269:	; GetReturnValue £temporary5056

file_test$270:	; Parameter 10 £temporary5056 10
x15399:	mov [bp + 20], bx	; 3: 137 94 20

file_test$271:	; Call 10 printf 0
x15402:	mov word [bp + 10], file_test$272	; 5: 199 70 10 61 60
x15407:	mov [bp + 12], bp	; 3: 137 110 12
x15410:	add bp, 10	; 3: 131 197 10
x15413:	mov di, bp	; 2: 137 239
x15415:	add di, 4	; 3: 131 199 4
x15418:	jmp printf	; 3: 233 136 208

file_test$272:	; PostCall 10

file_test$273:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$274:	; Parameter 6 string_PBook2Etxt# 6
x15421:	mov word [bp + 12], string_PBook2Etxt#	; 5: 199 70 12 125 76

file_test$275:	; Parameter 6 string_r# 8
x15426:	mov word [bp + 14], string_r#	; 5: 199 70 14 61 75

file_test$276:	; Call 6 fopen 0
x15431:	mov word [bp + 6], file_test$277	; 5: 199 70 6 85 60
x15436:	mov [bp + 8], bp	; 3: 137 110 8
x15439:	add bp, 6	; 3: 131 197 6
x15442:	jmp fopen	; 3: 233 196 18

file_test$277:	; PostCall 6

file_test$278:	; GetReturnValue £temporary5058

file_test$279:	; Assign inFilePtr £temporary5058
x15445:	mov [bp + 6], bx	; 3: 137 94 6

file_test$280:	; NotEqual 292 inFilePtr 0
x15448:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x15452:	jne file_test$292	; 2: 117 59

file_test$281:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 8 stderr 6
x15454:	mov ax, [stderr]	; 3: 161 74 75
x15457:	mov [bp + 14], ax	; 3: 137 70 14

file_test$283:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x15460:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 76 75

file_test$284:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x15465:	mov word [bp + 18], string_inFilePtr20213D20NULL#	; 5: 199 70 18 122 75

file_test$285:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x15470:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 140 75

file_test$286:	; Parameter 8 88 14
x15475:	mov word [bp + 22], 88	; 5: 199 70 22 88 0

file_test$287:	; Call 8 fprintf 0
x15480:	mov word [bp + 8], file_test$288	; 5: 199 70 8 139 60
x15485:	mov [bp + 10], bp	; 3: 137 110 10
x15488:	add bp, 8	; 3: 131 197 8
x15491:	mov di, bp	; 2: 137 239
x15493:	add di, 6	; 3: 131 199 6
x15496:	jmp fprintf	; 3: 233 32 23

file_test$288:	; PostCall 8

file_test$289:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$290:	; Call 8 abort 0
x15499:	mov word [bp + 8], file_test$291	; 5: 199 70 8 153 60
x15504:	mov [bp + 10], bp	; 3: 137 110 10
x15507:	add bp, 8	; 3: 131 197 8
x15510:	jmp abort	; 3: 233 77 23

file_test$291:	; PostCall 8

file_test$292:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$293:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x15513:	mov word [bp + 14], string_0A252D24s20252D24s0A#	; 5: 199 70 14 135 76

file_test$294:	; Parameter 8 string_Name# 8
x15518:	mov word [bp + 16], string_Name#	; 5: 199 70 16 149 76

file_test$295:	; Parameter 8 string_Phone# 10
x15523:	mov word [bp + 18], string_Phone#	; 5: 199 70 18 154 76

file_test$296:	; Call 8 printf 0
x15528:	mov word [bp + 8], file_test$297	; 5: 199 70 8 187 60
x15533:	mov [bp + 10], bp	; 3: 137 110 10
x15536:	add bp, 8	; 3: 131 197 8
x15539:	mov di, bp	; 2: 137 239
x15541:	add di, 4	; 3: 131 199 4
x15544:	jmp printf	; 3: 233 10 208

file_test$297:	; PostCall 8

file_test$298:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$299:	; Parameter 8 string_252D24s20252D24s0A# 6
x15547:	mov word [bp + 14], string_252D24s20252D24s0A#	; 5: 199 70 14 160 76

file_test$300:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x15552:	mov word [bp + 16], string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 173 76

file_test$301:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x15557:	mov word [bp + 18], string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 173 76

file_test$302:	; Call 8 printf 0
x15562:	mov word [bp + 8], file_test$303	; 5: 199 70 8 221 60
x15567:	mov [bp + 10], bp	; 3: 137 110 10
x15570:	add bp, 8	; 3: 131 197 8
x15573:	mov di, bp	; 2: 137 239
x15575:	add di, 4	; 3: 131 199 4
x15578:	jmp printf	; 3: 233 232 207

file_test$303:	; PostCall 8

file_test$304:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$305:	; Parameter 12 inFilePtr 6
x15581:	mov ax, [bp + 6]	; 3: 139 70 6
x15584:	mov [bp + 18], ax	; 3: 137 70 18

file_test$306:	; Parameter 12 string_25i# 8
x15587:	mov word [bp + 20], string_25i#	; 5: 199 70 20 251 75

file_test$307:	; address £temporary5065 size
x15592:	mov si, bp	; 2: 137 238
x15594:	add si, 10	; 3: 131 198 10

file_test$308:	; Parameter 12 £temporary5065 10
x15597:	mov [bp + 22], si	; 3: 137 118 22

file_test$309:	; Call 12 fscanf 0
x15600:	mov word [bp + 12], file_test$310	; 5: 199 70 12 3 61
x15605:	mov [bp + 14], bp	; 3: 137 110 14
x15608:	add bp, 12	; 3: 131 197 12
x15611:	mov di, bp	; 2: 137 239
x15613:	add di, 2	; 3: 131 199 2
x15616:	jmp fscanf	; 3: 233 137 23

file_test$310:	; PostCall 12

file_test$311:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$312:	; Parameter 12 string_size2025i0A# 6
x15619:	mov word [bp + 18], string_size2025i0A#	; 5: 199 70 18 254 75

file_test$313:	; Parameter 12 size 8
x15624:	mov ax, [bp + 10]	; 3: 139 70 10
x15627:	mov [bp + 20], ax	; 3: 137 70 20

file_test$314:	; Call 12 printf 0
x15630:	mov word [bp + 12], file_test$315	; 5: 199 70 12 33 61
x15635:	mov [bp + 14], bp	; 3: 137 110 14
x15638:	add bp, 12	; 3: 131 197 12
x15641:	mov di, bp	; 2: 137 239
x15643:	add di, 2	; 3: 131 199 2
x15646:	jmp printf	; 3: 233 164 207

file_test$315:	; PostCall 12

file_test$316:	; Assign count 0
x15649:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$317:	; SignedGreaterThanEqual 333 count size
x15654:	mov ax, [bp + 10]	; 3: 139 70 10
x15657:	cmp [bp + 8], ax	; 3: 57 70 8
x15660:	jge file_test$333	; 2: 125 87

file_test$318:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 52 inFilePtr 6
x15662:	mov ax, [bp + 6]	; 3: 139 70 6
x15665:	mov [bp + 58], ax	; 3: 137 70 58

file_test$320:	; Parameter 52 string_25s25s# 8
x15668:	mov word [bp + 60], string_25s25s#	; 5: 199 70 60 198 76

file_test$321:	; Parameter 52 name 10
x15673:	mov [bp + 62], bp	; 3: 137 110 62
x15676:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$322:	; Parameter 52 phone 12
x15680:	mov [bp + 64], bp	; 3: 137 110 64
x15683:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$323:	; Call 52 fscanf 0
x15687:	mov word [bp + 52], file_test$324	; 5: 199 70 52 90 61
x15692:	mov [bp + 54], bp	; 3: 137 110 54
x15695:	add bp, 52	; 3: 131 197 52
x15698:	mov di, bp	; 2: 137 239
x15700:	add di, 4	; 3: 131 199 4
x15703:	jmp fscanf	; 3: 233 50 23

file_test$324:	; PostCall 52

file_test$325:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$326:	; Parameter 52 string_252D24s20252D24s0A# 6
x15706:	mov word [bp + 58], string_252D24s20252D24s0A#	; 5: 199 70 58 160 76

file_test$327:	; Parameter 52 name 8
x15711:	mov [bp + 60], bp	; 3: 137 110 60
x15714:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$328:	; Parameter 52 phone 10
x15718:	mov [bp + 62], bp	; 3: 137 110 62
x15721:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$329:	; Call 52 printf 0
x15725:	mov word [bp + 52], file_test$330	; 5: 199 70 52 128 61
x15730:	mov [bp + 54], bp	; 3: 137 110 54
x15733:	add bp, 52	; 3: 131 197 52
x15736:	mov di, bp	; 2: 137 239
x15738:	add di, 4	; 3: 131 199 4
x15741:	jmp printf	; 3: 233 69 207

file_test$330:	; PostCall 52

file_test$331:	; Increment count
x15744:	inc word [bp + 8]	; 3: 255 70 8

file_test$332:	; Goto 317
x15747:	jmp file_test$317	; 2: 235 161

file_test$333:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$334:	; Parameter 8 string_0A# 6
x15749:	mov word [bp + 14], string_0A#	; 5: 199 70 14 195 12

file_test$335:	; Call 8 printf 0
x15754:	mov word [bp + 8], file_test$336	; 5: 199 70 8 154 61
x15759:	mov [bp + 10], bp	; 3: 137 110 10
x15762:	add bp, 8	; 3: 131 197 8
x15765:	mov di, bp	; 2: 137 239
x15767:	jmp printf	; 3: 233 43 207

file_test$336:	; PostCall 8

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 inFilePtr 6
x15770:	mov ax, [bp + 6]	; 3: 139 70 6
x15773:	mov [bp + 14], ax	; 3: 137 70 14

file_test$339:	; Call 8 fclose 0
x15776:	mov word [bp + 8], file_test$340	; 5: 199 70 8 174 61
x15781:	mov [bp + 10], bp	; 3: 137 110 10
x15784:	add bp, 8	; 3: 131 197 8
x15787:	jmp fclose	; 3: 233 165 40

file_test$340:	; PostCall 8

file_test$341:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$342:	; Parameter 6 string_TestX2Ebin# 6
x15790:	mov word [bp + 12], string_TestX2Ebin#	; 5: 199 70 12 203 76

file_test$343:	; Parameter 6 string_w# 8
x15795:	mov word [bp + 14], string_w#	; 5: 199 70 14 72 75

file_test$344:	; Call 6 fopen 0
x15800:	mov word [bp + 6], file_test$345	; 5: 199 70 6 198 61
x15805:	mov [bp + 8], bp	; 3: 137 110 8
x15808:	add bp, 6	; 3: 131 197 6
x15811:	jmp fopen	; 3: 233 83 17

file_test$345:	; PostCall 6

file_test$346:	; GetReturnValue £temporary5074

file_test$347:	; Assign outFilePtr £temporary5074
x15814:	mov [bp + 6], bx	; 3: 137 94 6

file_test$348:	; NotEqual 360 outFilePtr 0
x15817:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x15821:	jne file_test$360	; 2: 117 59

file_test$349:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$350:	; Parameter 8 stderr 6
x15823:	mov ax, [stderr]	; 3: 161 74 75
x15826:	mov [bp + 14], ax	; 3: 137 70 14

file_test$351:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x15829:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 76 75

file_test$352:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x15834:	mov word [bp + 18], string_outFilePtr20213D20NULL#	; 5: 199 70 18 205 75

file_test$353:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x15839:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 140 75

file_test$354:	; Parameter 8 140 14
x15844:	mov word [bp + 22], 140	; 5: 199 70 22 140 0

file_test$355:	; Call 8 fprintf 0
x15849:	mov word [bp + 8], file_test$356	; 5: 199 70 8 252 61
x15854:	mov [bp + 10], bp	; 3: 137 110 10
x15857:	add bp, 8	; 3: 131 197 8
x15860:	mov di, bp	; 2: 137 239
x15862:	add di, 6	; 3: 131 199 6
x15865:	jmp fprintf	; 3: 233 175 21

file_test$356:	; PostCall 8

file_test$357:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$358:	; Call 8 abort 0
x15868:	mov word [bp + 8], file_test$359	; 5: 199 70 8 10 62
x15873:	mov [bp + 10], bp	; 3: 137 110 10
x15876:	add bp, 8	; 3: 131 197 8
x15879:	jmp abort	; 3: 233 220 21

file_test$359:	; PostCall 8

file_test$360:	; Assign size 10
x15882:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$361:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$362:	; address £temporary5079 size
x15887:	mov si, bp	; 2: 137 238
x15889:	add si, 8	; 3: 131 198 8

file_test$363:	; Parameter 12 £temporary5079 6
x15892:	mov [bp + 18], si	; 3: 137 118 18

file_test$364:	; Parameter 12 2 8
x15895:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$365:	; Parameter 12 1 10
x15900:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$366:	; Parameter 12 outFilePtr 12
x15905:	mov ax, [bp + 6]	; 3: 139 70 6
x15908:	mov [bp + 24], ax	; 3: 137 70 24

file_test$367:	; Call 12 fwrite 0
x15911:	mov word [bp + 12], file_test$368	; 5: 199 70 12 53 62
x15916:	mov [bp + 14], bp	; 3: 137 110 14
x15919:	add bp, 12	; 3: 131 197 12
x15922:	jmp fwrite	; 3: 233 58 41

file_test$368:	; PostCall 12

file_test$369:	; Assign index 0
x15925:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$370:	; SignedGreaterThanEqual 384 index size
x15930:	mov ax, [bp + 8]	; 3: 139 70 8
x15933:	cmp [bp + 10], ax	; 3: 57 70 10
x15936:	jge file_test$384	; 2: 125 61

file_test$371:	; SignedMultiply £temporary5083 index index
x15938:	mov ax, [bp + 10]	; 3: 139 70 10
x15941:	xor dx, dx	; 2: 49 210
x15943:	imul word [bp + 10]	; 3: 247 110 10

file_test$372:	; IntegralToFloating £temporary5084 £temporary5083
x15946:	mov [container2bytes#], ax	; 3: 163 16 27
x15949:	fild word [container2bytes#]	; 4: 223 6 16 27

file_test$373:	; PopFloat value
x15953:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$374:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; address £temporary5085 value
x15956:	mov si, bp	; 2: 137 238
x15958:	add si, 12	; 3: 131 198 12

file_test$376:	; Parameter 20 £temporary5085 6
x15961:	mov [bp + 26], si	; 3: 137 118 26

file_test$377:	; Parameter 20 8 8
x15964:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$378:	; Parameter 20 1 10
x15969:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$379:	; Parameter 20 outFilePtr 12
x15974:	mov ax, [bp + 6]	; 3: 139 70 6
x15977:	mov [bp + 32], ax	; 3: 137 70 32

file_test$380:	; Call 20 fwrite 0
x15980:	mov word [bp + 20], file_test$381	; 5: 199 70 20 122 62
x15985:	mov [bp + 22], bp	; 3: 137 110 22
x15988:	add bp, 20	; 3: 131 197 20
x15991:	jmp fwrite	; 3: 233 245 40

file_test$381:	; PostCall 20

file_test$382:	; Increment index
x15994:	inc word [bp + 10]	; 3: 255 70 10

file_test$383:	; Goto 370
x15997:	jmp file_test$370	; 2: 235 187

file_test$384:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$385:	; Parameter 12 outFilePtr 6
x15999:	mov ax, [bp + 6]	; 3: 139 70 6
x16002:	mov [bp + 18], ax	; 3: 137 70 18

file_test$386:	; Call 12 fclose 0
x16005:	mov word [bp + 12], file_test$387	; 5: 199 70 12 147 62
x16010:	mov [bp + 14], bp	; 3: 137 110 14
x16013:	add bp, 12	; 3: 131 197 12
x16016:	jmp fclose	; 3: 233 192 39

file_test$387:	; PostCall 12

file_test$388:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$389:	; Parameter 6 string_TestX2Ebin# 6
x16019:	mov word [bp + 12], string_TestX2Ebin#	; 5: 199 70 12 203 76

file_test$390:	; Parameter 6 string_r# 8
x16024:	mov word [bp + 14], string_r#	; 5: 199 70 14 61 75

file_test$391:	; Call 6 fopen 0
x16029:	mov word [bp + 6], file_test$392	; 5: 199 70 6 171 62
x16034:	mov [bp + 8], bp	; 3: 137 110 8
x16037:	add bp, 6	; 3: 131 197 6
x16040:	jmp fopen	; 3: 233 110 16

file_test$392:	; PostCall 6

file_test$393:	; GetReturnValue £temporary5088

file_test$394:	; Assign inFilePtr £temporary5088
x16043:	mov [bp + 6], bx	; 3: 137 94 6

file_test$395:	; NotEqual 407 inFilePtr 0
x16046:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16050:	jne file_test$407	; 2: 117 59

file_test$396:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$397:	; Parameter 12 stderr 6
x16052:	mov ax, [stderr]	; 3: 161 74 75
x16055:	mov [bp + 18], ax	; 3: 137 70 18

file_test$398:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16058:	mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 76 75

file_test$399:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16063:	mov word [bp + 22], string_inFilePtr20213D20NULL#	; 5: 199 70 22 122 75

file_test$400:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16068:	mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 140 75

file_test$401:	; Parameter 12 157 14
x16073:	mov word [bp + 26], 157	; 5: 199 70 26 157 0

file_test$402:	; Call 12 fprintf 0
x16078:	mov word [bp + 12], file_test$403	; 5: 199 70 12 225 62
x16083:	mov [bp + 14], bp	; 3: 137 110 14
x16086:	add bp, 12	; 3: 131 197 12
x16089:	mov di, bp	; 2: 137 239
x16091:	add di, 6	; 3: 131 199 6
x16094:	jmp fprintf	; 3: 233 202 20

file_test$403:	; PostCall 12

file_test$404:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$405:	; Call 12 abort 0
x16097:	mov word [bp + 12], file_test$406	; 5: 199 70 12 239 62
x16102:	mov [bp + 14], bp	; 3: 137 110 14
x16105:	add bp, 12	; 3: 131 197 12
x16108:	jmp abort	; 3: 233 247 20

file_test$406:	; PostCall 12

file_test$407:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; address £temporary5093 size
x16111:	mov si, bp	; 2: 137 238
x16113:	add si, 8	; 3: 131 198 8

file_test$409:	; Parameter 12 £temporary5093 6
x16116:	mov [bp + 18], si	; 3: 137 118 18

file_test$410:	; Parameter 12 2 8
x16119:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$411:	; Parameter 12 1 10
x16124:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$412:	; Parameter 12 inFilePtr 12
x16129:	mov ax, [bp + 6]	; 3: 139 70 6
x16132:	mov [bp + 24], ax	; 3: 137 70 24

file_test$413:	; Call 12 fread 0
x16135:	mov word [bp + 12], file_test$414	; 5: 199 70 12 21 63
x16140:	mov [bp + 14], bp	; 3: 137 110 14
x16143:	add bp, 12	; 3: 131 197 12
x16146:	jmp fread	; 3: 233 157 40

file_test$414:	; PostCall 12

file_test$415:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 12 string_size13A2025i0A# 6
x16149:	mov word [bp + 18], string_size13A2025i0A#	; 5: 199 70 18 213 76

file_test$417:	; Parameter 12 size 8
x16154:	mov ax, [bp + 8]	; 3: 139 70 8
x16157:	mov [bp + 20], ax	; 3: 137 70 20

file_test$418:	; Call 12 printf 0
x16160:	mov word [bp + 12], file_test$419	; 5: 199 70 12 51 63
x16165:	mov [bp + 14], bp	; 3: 137 110 14
x16168:	add bp, 12	; 3: 131 197 12
x16171:	mov di, bp	; 2: 137 239
x16173:	add di, 2	; 3: 131 199 2
x16176:	jmp printf	; 3: 233 146 205

file_test$419:	; PostCall 12

file_test$420:	; Assign index 0
x16179:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$421:	; SignedGreaterThanEqual 439 index size
x16184:	mov ax, [bp + 8]	; 3: 139 70 8
x16187:	cmp [bp + 10], ax	; 3: 57 70 10
x16190:	jge file_test$439	; 2: 125 79

file_test$422:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$423:	; address £temporary5098 value
x16192:	mov si, bp	; 2: 137 238
x16194:	add si, 12	; 3: 131 198 12

file_test$424:	; Parameter 20 £temporary5098 6
x16197:	mov [bp + 26], si	; 3: 137 118 26

file_test$425:	; Parameter 20 8 8
x16200:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$426:	; Parameter 20 1 10
x16205:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$427:	; Parameter 20 inFilePtr 12
x16210:	mov ax, [bp + 6]	; 3: 139 70 6
x16213:	mov [bp + 32], ax	; 3: 137 70 32

file_test$428:	; Call 20 fread 0
x16216:	mov word [bp + 20], file_test$429	; 5: 199 70 20 102 63
x16221:	mov [bp + 22], bp	; 3: 137 110 22
x16224:	add bp, 20	; 3: 131 197 20
x16227:	jmp fread	; 3: 233 76 40

file_test$429:	; PostCall 20

file_test$430:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$431:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16230:	mov word [bp + 26], string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 224 76

file_test$432:	; Parameter 20 index 8
x16235:	mov ax, [bp + 10]	; 3: 139 70 10
x16238:	mov [bp + 28], ax	; 3: 137 70 28

file_test$433:	; PushFloat value
x16241:	fld qword [bp + 12]	; 3: 221 70 12

file_test$434:	; Parameter 20 value 10
x16244:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$435:	; Call 20 printf 0
x16247:	mov word [bp + 20], file_test$436	; 5: 199 70 20 138 63
x16252:	mov [bp + 22], bp	; 3: 137 110 22
x16255:	add bp, 20	; 3: 131 197 20
x16258:	mov di, bp	; 2: 137 239
x16260:	add di, 10	; 3: 131 199 10
x16263:	jmp printf	; 3: 233 59 205

file_test$436:	; PostCall 20

file_test$437:	; Increment index
x16266:	inc word [bp + 10]	; 3: 255 70 10

file_test$438:	; Goto 421
x16269:	jmp file_test$421	; 2: 235 169

file_test$439:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Parameter 12 string_0A# 6
x16271:	mov word [bp + 18], string_0A#	; 5: 199 70 18 195 12

file_test$441:	; Call 12 printf 0
x16276:	mov word [bp + 12], file_test$442	; 5: 199 70 12 164 63
x16281:	mov [bp + 14], bp	; 3: 137 110 14
x16284:	add bp, 12	; 3: 131 197 12
x16287:	mov di, bp	; 2: 137 239
x16289:	jmp printf	; 3: 233 33 205

file_test$442:	; PostCall 12

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; Parameter 12 inFilePtr 6
x16292:	mov ax, [bp + 6]	; 3: 139 70 6
x16295:	mov [bp + 18], ax	; 3: 137 70 18

file_test$445:	; Call 12 fclose 0
x16298:	mov word [bp + 12], file_test$446	; 5: 199 70 12 184 63
x16303:	mov [bp + 14], bp	; 3: 137 110 14
x16306:	add bp, 12	; 3: 131 197 12
x16309:	jmp fclose	; 3: 233 155 38

file_test$446:	; PostCall 12

file_test$447:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$448:	; Parameter 6 string_TestY2Ebin# 6
x16312:	mov word [bp + 12], string_TestY2Ebin#	; 5: 199 70 12 246 76

file_test$449:	; Parameter 6 string_w# 8
x16317:	mov word [bp + 14], string_w#	; 5: 199 70 14 72 75

file_test$450:	; Call 6 fopen 0
x16322:	mov word [bp + 6], file_test$451	; 5: 199 70 6 208 63
x16327:	mov [bp + 8], bp	; 3: 137 110 8
x16330:	add bp, 6	; 3: 131 197 6
x16333:	jmp fopen	; 3: 233 73 15

file_test$451:	; PostCall 6

file_test$452:	; GetReturnValue £temporary5103

file_test$453:	; Assign outFilePtr £temporary5103
x16336:	mov [bp + 6], bx	; 3: 137 94 6

file_test$454:	; NotEqual 466 outFilePtr 0
x16339:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16343:	jne file_test$466	; 2: 117 59

file_test$455:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$456:	; Parameter 8 stderr 6
x16345:	mov ax, [stderr]	; 3: 161 74 75
x16348:	mov [bp + 14], ax	; 3: 137 70 14

file_test$457:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16351:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 76 75

file_test$458:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16356:	mov word [bp + 18], string_outFilePtr20213D20NULL#	; 5: 199 70 18 205 75

file_test$459:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16361:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 140 75

file_test$460:	; Parameter 8 172 14
x16366:	mov word [bp + 22], 172	; 5: 199 70 22 172 0

file_test$461:	; Call 8 fprintf 0
x16371:	mov word [bp + 8], file_test$462	; 5: 199 70 8 6 64
x16376:	mov [bp + 10], bp	; 3: 137 110 10
x16379:	add bp, 8	; 3: 131 197 8
x16382:	mov di, bp	; 2: 137 239
x16384:	add di, 6	; 3: 131 199 6
x16387:	jmp fprintf	; 3: 233 165 19

file_test$462:	; PostCall 8

file_test$463:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$464:	; Call 8 abort 0
x16390:	mov word [bp + 8], file_test$465	; 5: 199 70 8 20 64
x16395:	mov [bp + 10], bp	; 3: 137 110 10
x16398:	add bp, 8	; 3: 131 197 8
x16401:	jmp abort	; 3: 233 210 19

file_test$465:	; PostCall 8

file_test$466:	; Assign size 10
x16404:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$467:	; Assign index 0
x16409:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$468:	; SignedGreaterThanEqual 482 index size
x16414:	mov ax, [bp + 8]	; 3: 139 70 8
x16417:	cmp [bp + 10], ax	; 3: 57 70 10
x16420:	jge file_test$482	; 2: 125 61

file_test$469:	; SignedMultiply £temporary5110 index index
x16422:	mov ax, [bp + 10]	; 3: 139 70 10
x16425:	xor dx, dx	; 2: 49 210
x16427:	imul word [bp + 10]	; 3: 247 110 10

file_test$470:	; IntegralToFloating £temporary5111 £temporary5110
x16430:	mov [container2bytes#], ax	; 3: 163 16 27
x16433:	fild word [container2bytes#]	; 4: 223 6 16 27

file_test$471:	; PopFloat value
x16437:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$472:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$473:	; address £temporary5112 value
x16440:	mov si, bp	; 2: 137 238
x16442:	add si, 12	; 3: 131 198 12

file_test$474:	; Parameter 20 £temporary5112 6
x16445:	mov [bp + 26], si	; 3: 137 118 26

file_test$475:	; Parameter 20 8 8
x16448:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$476:	; Parameter 20 1 10
x16453:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$477:	; Parameter 20 outFilePtr 12
x16458:	mov ax, [bp + 6]	; 3: 139 70 6
x16461:	mov [bp + 32], ax	; 3: 137 70 32

file_test$478:	; Call 20 fwrite 0
x16464:	mov word [bp + 20], file_test$479	; 5: 199 70 20 94 64
x16469:	mov [bp + 22], bp	; 3: 137 110 22
x16472:	add bp, 20	; 3: 131 197 20
x16475:	jmp fwrite	; 3: 233 17 39

file_test$479:	; PostCall 20

file_test$480:	; Increment index
x16478:	inc word [bp + 10]	; 3: 255 70 10

file_test$481:	; Goto 468
x16481:	jmp file_test$468	; 2: 235 187

file_test$482:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$483:	; Parameter 12 outFilePtr 6
x16483:	mov ax, [bp + 6]	; 3: 139 70 6
x16486:	mov [bp + 18], ax	; 3: 137 70 18

file_test$484:	; Call 12 fclose 0
x16489:	mov word [bp + 12], file_test$485	; 5: 199 70 12 119 64
x16494:	mov [bp + 14], bp	; 3: 137 110 14
x16497:	add bp, 12	; 3: 131 197 12
x16500:	jmp fclose	; 3: 233 220 37

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Parameter 6 string_TestY2Ebin# 6
x16503:	mov word [bp + 12], string_TestY2Ebin#	; 5: 199 70 12 246 76

file_test$488:	; Parameter 6 string_r# 8
x16508:	mov word [bp + 14], string_r#	; 5: 199 70 14 61 75

file_test$489:	; Call 6 fopen 0
x16513:	mov word [bp + 6], file_test$490	; 5: 199 70 6 143 64
x16518:	mov [bp + 8], bp	; 3: 137 110 8
x16521:	add bp, 6	; 3: 131 197 6
x16524:	jmp fopen	; 3: 233 138 14

file_test$490:	; PostCall 6

file_test$491:	; GetReturnValue £temporary5115

file_test$492:	; Assign inFilePtr £temporary5115
x16527:	mov [bp + 6], bx	; 3: 137 94 6

file_test$493:	; NotEqual 505 inFilePtr 0
x16530:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16534:	jne file_test$505	; 2: 117 59

file_test$494:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$495:	; Parameter 8 stderr 6
x16536:	mov ax, [stderr]	; 3: 161 74 75
x16539:	mov [bp + 14], ax	; 3: 137 70 14

file_test$496:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16542:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 76 75

file_test$497:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16547:	mov word [bp + 18], string_inFilePtr20213D20NULL#	; 5: 199 70 18 122 75

file_test$498:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16552:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 140 75

file_test$499:	; Parameter 8 186 14
x16557:	mov word [bp + 22], 186	; 5: 199 70 22 186 0

file_test$500:	; Call 8 fprintf 0
x16562:	mov word [bp + 8], file_test$501	; 5: 199 70 8 197 64
x16567:	mov [bp + 10], bp	; 3: 137 110 10
x16570:	add bp, 8	; 3: 131 197 8
x16573:	mov di, bp	; 2: 137 239
x16575:	add di, 6	; 3: 131 199 6
x16578:	jmp fprintf	; 3: 233 230 18

file_test$501:	; PostCall 8

file_test$502:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$503:	; Call 8 abort 0
x16581:	mov word [bp + 8], file_test$504	; 5: 199 70 8 211 64
x16586:	mov [bp + 10], bp	; 3: 137 110 10
x16589:	add bp, 8	; 3: 131 197 8
x16592:	jmp abort	; 3: 233 19 19

file_test$504:	; PostCall 8

file_test$505:	; Assign index 0
x16595:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$506:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$507:	; address £temporary5120 value
x16600:	mov si, bp	; 2: 137 238
x16602:	add si, 10	; 3: 131 198 10

file_test$508:	; Parameter 18 £temporary5120 6
x16605:	mov [bp + 24], si	; 3: 137 118 24

file_test$509:	; Parameter 18 8 8
x16608:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$510:	; Parameter 18 1 10
x16613:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$511:	; Parameter 18 inFilePtr 12
x16618:	mov ax, [bp + 6]	; 3: 139 70 6
x16621:	mov [bp + 30], ax	; 3: 137 70 30

file_test$512:	; Call 18 fread 0
x16624:	mov word [bp + 18], file_test$513	; 5: 199 70 18 254 64
x16629:	mov [bp + 20], bp	; 3: 137 110 20
x16632:	add bp, 18	; 3: 131 197 18
x16635:	jmp fread	; 3: 233 180 38

file_test$513:	; PostCall 18

file_test$514:	; GetReturnValue £temporary5121

file_test$515:	; SignedLessThanEqual 526 £temporary5121 0
x16638:	cmp bx, 0	; 3: 131 251 0
x16641:	jle file_test$526	; 2: 126 41

file_test$516:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$517:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x16643:	mov word [bp + 24], string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 0 77

file_test$518:	; Assign £temporary5123 index
x16648:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$519:	; Increment index
x16651:	inc word [bp + 8]	; 3: 255 70 8

file_test$520:	; Parameter 18 £temporary5123 8
x16654:	mov [bp + 26], ax	; 3: 137 70 26

file_test$521:	; PushFloat value
x16657:	fld qword [bp + 10]	; 3: 221 70 10

file_test$522:	; Parameter 18 value 10
x16660:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$523:	; Call 18 printf 0
x16663:	mov word [bp + 18], file_test$524	; 5: 199 70 18 42 65
x16668:	mov [bp + 20], bp	; 3: 137 110 20
x16671:	add bp, 18	; 3: 131 197 18
x16674:	mov di, bp	; 2: 137 239
x16676:	add di, 10	; 3: 131 199 10
x16679:	jmp printf	; 3: 233 155 203

file_test$524:	; PostCall 18

file_test$525:	; Goto 506
x16682:	jmp file_test$506	; 2: 235 172

file_test$526:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$527:	; Parameter 8 string_0A# 6
x16684:	mov word [bp + 14], string_0A#	; 5: 199 70 14 195 12

file_test$528:	; Call 8 printf 0
x16689:	mov word [bp + 8], file_test$529	; 5: 199 70 8 65 65
x16694:	mov [bp + 10], bp	; 3: 137 110 10
x16697:	add bp, 8	; 3: 131 197 8
x16700:	mov di, bp	; 2: 137 239
x16702:	jmp printf	; 3: 233 132 203

file_test$529:	; PostCall 8

file_test$530:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$531:	; Parameter 8 inFilePtr 6
x16705:	mov ax, [bp + 6]	; 3: 139 70 6
x16708:	mov [bp + 14], ax	; 3: 137 70 14

file_test$532:	; Call 8 fclose 0
x16711:	mov word [bp + 8], file_test$533	; 5: 199 70 8 85 65
x16716:	mov [bp + 10], bp	; 3: 137 110 10
x16719:	add bp, 8	; 3: 131 197 8
x16722:	jmp fclose	; 3: 233 254 36

file_test$533:	; PostCall 8

file_test$534:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$535:	; Parameter 6 string_TestY2Ebin# 6
x16725:	mov word [bp + 12], string_TestY2Ebin#	; 5: 199 70 12 246 76

file_test$536:	; Parameter 6 string_r# 8
x16730:	mov word [bp + 14], string_r#	; 5: 199 70 14 61 75

file_test$537:	; Call 6 fopen 0
x16735:	mov word [bp + 6], file_test$538	; 5: 199 70 6 109 65
x16740:	mov [bp + 8], bp	; 3: 137 110 8
x16743:	add bp, 6	; 3: 131 197 6
x16746:	jmp fopen	; 3: 233 172 13

file_test$538:	; PostCall 6

file_test$539:	; GetReturnValue £temporary5127

file_test$540:	; Assign inFilePtr £temporary5127
x16749:	mov [bp + 6], bx	; 3: 137 94 6

file_test$541:	; NotEqual 553 inFilePtr 0
x16752:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16756:	jne file_test$553	; 2: 117 59

file_test$542:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$543:	; Parameter 8 stderr 6
x16758:	mov ax, [stderr]	; 3: 161 74 75
x16761:	mov [bp + 14], ax	; 3: 137 70 14

file_test$544:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16764:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 76 75

file_test$545:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16769:	mov word [bp + 18], string_inFilePtr20213D20NULL#	; 5: 199 70 18 122 75

file_test$546:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16774:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 140 75

file_test$547:	; Parameter 8 201 14
x16779:	mov word [bp + 22], 201	; 5: 199 70 22 201 0

file_test$548:	; Call 8 fprintf 0
x16784:	mov word [bp + 8], file_test$549	; 5: 199 70 8 163 65
x16789:	mov [bp + 10], bp	; 3: 137 110 10
x16792:	add bp, 8	; 3: 131 197 8
x16795:	mov di, bp	; 2: 137 239
x16797:	add di, 6	; 3: 131 199 6
x16800:	jmp fprintf	; 3: 233 8 18

file_test$549:	; PostCall 8

file_test$550:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$551:	; Call 8 abort 0
x16803:	mov word [bp + 8], file_test$552	; 5: 199 70 8 177 65
x16808:	mov [bp + 10], bp	; 3: 137 110 10
x16811:	add bp, 8	; 3: 131 197 8
x16814:	jmp abort	; 3: 233 53 18

file_test$552:	; PostCall 8

file_test$553:	; Assign index 0
x16817:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$554:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; Parameter 10 inFilePtr 6
x16822:	mov ax, [bp + 6]	; 3: 139 70 6
x16825:	mov [bp + 16], ax	; 3: 137 70 16

file_test$556:	; Call 10 feof 0
x16828:	mov word [bp + 10], file_test$557	; 5: 199 70 10 202 65
x16833:	mov [bp + 12], bp	; 3: 137 110 12
x16836:	add bp, 10	; 3: 131 197 10
x16839:	jmp feof	; 3: 233 45 18

file_test$557:	; PostCall 10

file_test$558:	; GetReturnValue £temporary5132

file_test$559:	; NotEqual 578 £temporary5132 0
x16842:	cmp bx, 0	; 3: 131 251 0
x16845:	jne file_test$578	; 2: 117 79

file_test$560:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$561:	; address £temporary5135 value
x16847:	mov si, bp	; 2: 137 238
x16849:	add si, 10	; 3: 131 198 10

file_test$562:	; Parameter 18 £temporary5135 6
x16852:	mov [bp + 24], si	; 3: 137 118 24

file_test$563:	; Parameter 18 8 8
x16855:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$564:	; Parameter 18 1 10
x16860:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$565:	; Parameter 18 inFilePtr 12
x16865:	mov ax, [bp + 6]	; 3: 139 70 6
x16868:	mov [bp + 30], ax	; 3: 137 70 30

file_test$566:	; Call 18 fread 0
x16871:	mov word [bp + 18], file_test$567	; 5: 199 70 18 245 65
x16876:	mov [bp + 20], bp	; 3: 137 110 20
x16879:	add bp, 18	; 3: 131 197 18
x16882:	jmp fread	; 3: 233 189 37

file_test$567:	; PostCall 18

file_test$568:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x16885:	mov word [bp + 24], string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 22 77

file_test$570:	; Assign £temporary5137 index
x16890:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$571:	; Increment index
x16893:	inc word [bp + 8]	; 3: 255 70 8

file_test$572:	; Parameter 18 £temporary5137 8
x16896:	mov [bp + 26], ax	; 3: 137 70 26

file_test$573:	; PushFloat value
x16899:	fld qword [bp + 10]	; 3: 221 70 10

file_test$574:	; Parameter 18 value 10
x16902:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$575:	; Call 18 printf 0
x16905:	mov word [bp + 18], file_test$576	; 5: 199 70 18 28 66
x16910:	mov [bp + 20], bp	; 3: 137 110 20
x16913:	add bp, 18	; 3: 131 197 18
x16916:	mov di, bp	; 2: 137 239
x16918:	add di, 10	; 3: 131 199 10
x16921:	jmp printf	; 3: 233 169 202

file_test$576:	; PostCall 18

file_test$577:	; Goto 554
x16924:	jmp file_test$554	; 2: 235 152

file_test$578:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$579:	; Parameter 8 string_0A# 6
x16926:	mov word [bp + 14], string_0A#	; 5: 199 70 14 195 12

file_test$580:	; Call 8 printf 0
x16931:	mov word [bp + 8], file_test$581	; 5: 199 70 8 51 66
x16936:	mov [bp + 10], bp	; 3: 137 110 10
x16939:	add bp, 8	; 3: 131 197 8
x16942:	mov di, bp	; 2: 137 239
x16944:	jmp printf	; 3: 233 146 202

file_test$581:	; PostCall 8

file_test$582:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$583:	; Parameter 8 inFilePtr 6
x16947:	mov ax, [bp + 6]	; 3: 139 70 6
x16950:	mov [bp + 14], ax	; 3: 137 70 14

file_test$584:	; Call 8 fclose 0
x16953:	mov word [bp + 8], file_test$585	; 5: 199 70 8 71 66
x16958:	mov [bp + 10], bp	; 3: 137 110 10
x16961:	add bp, 8	; 3: 131 197 8
x16964:	jmp fclose	; 3: 233 12 36

file_test$585:	; PostCall 8

file_test$586:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$587:	; Parameter 6 string_TestX2Ebin# 6
x16967:	mov word [bp + 12], string_TestX2Ebin#	; 5: 199 70 12 203 76

file_test$588:	; Parameter 6 string_r# 8
x16972:	mov word [bp + 14], string_r#	; 5: 199 70 14 61 75

file_test$589:	; Call 6 fopen 0
x16977:	mov word [bp + 6], file_test$590	; 5: 199 70 6 95 66
x16982:	mov [bp + 8], bp	; 3: 137 110 8
x16985:	add bp, 6	; 3: 131 197 6
x16988:	jmp fopen	; 3: 233 186 12

file_test$590:	; PostCall 6

file_test$591:	; GetReturnValue £temporary5141

file_test$592:	; Assign inFilePtr £temporary5141
x16991:	mov [bp + 6], bx	; 3: 137 94 6

file_test$593:	; NotEqual 605 inFilePtr 0
x16994:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16998:	jne file_test$605	; 2: 117 59

file_test$594:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$595:	; Parameter 10 stderr 6
x17000:	mov ax, [stderr]	; 3: 161 74 75
x17003:	mov [bp + 16], ax	; 3: 137 70 16

file_test$596:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17006:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 76 75

file_test$597:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17011:	mov word [bp + 20], string_inFilePtr20213D20NULL#	; 5: 199 70 20 122 75

file_test$598:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17016:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 140 75

file_test$599:	; Parameter 10 219 14
x17021:	mov word [bp + 24], 219	; 5: 199 70 24 219 0

file_test$600:	; Call 10 fprintf 0
x17026:	mov word [bp + 10], file_test$601	; 5: 199 70 10 149 66
x17031:	mov [bp + 12], bp	; 3: 137 110 12
x17034:	add bp, 10	; 3: 131 197 10
x17037:	mov di, bp	; 2: 137 239
x17039:	add di, 6	; 3: 131 199 6
x17042:	jmp fprintf	; 3: 233 22 17

file_test$601:	; PostCall 10

file_test$602:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$603:	; Call 10 abort 0
x17045:	mov word [bp + 10], file_test$604	; 5: 199 70 10 163 66
x17050:	mov [bp + 12], bp	; 3: 137 110 12
x17053:	add bp, 10	; 3: 131 197 10
x17056:	jmp abort	; 3: 233 67 17

file_test$604:	; PostCall 10

file_test$605:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$606:	; address £temporary5146 size
x17059:	mov si, bp	; 2: 137 238
x17061:	add si, 8	; 3: 131 198 8

file_test$607:	; Parameter 10 £temporary5146 6
x17064:	mov [bp + 16], si	; 3: 137 118 16

file_test$608:	; Parameter 10 2 8
x17067:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$609:	; Parameter 10 1 10
x17072:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$610:	; Parameter 10 inFilePtr 12
x17077:	mov ax, [bp + 6]	; 3: 139 70 6
x17080:	mov [bp + 22], ax	; 3: 137 70 22

file_test$611:	; Call 10 fread 0
x17083:	mov word [bp + 10], file_test$612	; 5: 199 70 10 201 66
x17088:	mov [bp + 12], bp	; 3: 137 110 12
x17091:	add bp, 10	; 3: 131 197 10
x17094:	jmp fread	; 3: 233 233 36

file_test$612:	; PostCall 10

file_test$613:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$614:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17097:	mov word [bp + 16], string_size43A2025i20total2025i0A#	; 5: 199 70 16 44 77

file_test$615:	; Parameter 10 size 8
x17102:	mov ax, [bp + 8]	; 3: 139 70 8
x17105:	mov [bp + 18], ax	; 3: 137 70 18

file_test$616:	; SignedMultiply £temporary5148 size 8
x17108:	mov ax, [bp + 8]	; 3: 139 70 8
x17111:	xor dx, dx	; 2: 49 210
x17113:	imul word [int2$8#]	; 4: 247 46 64 77

file_test$617:	; Parameter 10 £temporary5148 10
x17117:	mov [bp + 20], ax	; 3: 137 70 20

file_test$618:	; Call 10 printf 0
x17120:	mov word [bp + 10], file_test$619	; 5: 199 70 10 243 66
x17125:	mov [bp + 12], bp	; 3: 137 110 12
x17128:	add bp, 10	; 3: 131 197 10
x17131:	mov di, bp	; 2: 137 239
x17133:	add di, 4	; 3: 131 199 4
x17136:	jmp printf	; 3: 233 210 201

file_test$619:	; PostCall 10

file_test$620:	; SignedMultiply total size 8
x17139:	mov ax, [bp + 8]	; 3: 139 70 8
x17142:	xor dx, dx	; 2: 49 210
x17144:	imul word [int2$8#]	; 4: 247 46 64 77
x17148:	mov [bp + 10], ax	; 3: 137 70 10

file_test$621:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$622:	; Parameter 14 total 6
x17151:	mov ax, [bp + 10]	; 3: 139 70 10
x17154:	mov [bp + 20], ax	; 3: 137 70 20

file_test$623:	; Call 14 malloc 0
x17157:	mov word [bp + 14], file_test$624	; 5: 199 70 14 19 67
x17162:	mov [bp + 16], bp	; 3: 137 110 16
x17165:	add bp, 14	; 3: 131 197 14
x17168:	jmp malloc	; 3: 233 226 36

file_test$624:	; PostCall 14

file_test$625:	; GetReturnValue £temporary5151

file_test$626:	; Assign p £temporary5151
x17171:	mov [bp + 14], bx	; 3: 137 94 14

file_test$627:	; UnsignedMultiply £temporary5152 size 8
x17174:	mov ax, [bp + 8]	; 3: 139 70 8
x17177:	xor dx, dx	; 2: 49 210
x17179:	mul word [int2$8#]	; 4: 247 38 64 77

file_test$628:	; BinaryAdd endPtr p £temporary5152
x17183:	mov bx, [bp + 14]	; 3: 139 94 14
x17186:	add bx, ax	; 2: 1 195
x17188:	mov [bp + 16], bx	; 3: 137 94 16

file_test$629:	; NotEqual 641 p 0
x17191:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17195:	jne file_test$641	; 2: 117 59

file_test$630:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$631:	; Parameter 18 stderr 6
x17197:	mov ax, [stderr]	; 3: 161 74 75
x17200:	mov [bp + 24], ax	; 3: 137 70 24

file_test$632:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17203:	mov word [bp + 26], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 76 75

file_test$633:	; Parameter 18 string_p20213D20NULL# 10
x17208:	mov word [bp + 28], string_p20213D20NULL#	; 5: 199 70 28 66 77

file_test$634:	; Parameter 18 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17213:	mov word [bp + 30], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 140 75

file_test$635:	; Parameter 18 226 14
x17218:	mov word [bp + 32], 226	; 5: 199 70 32 226 0

file_test$636:	; Call 18 fprintf 0
x17223:	mov word [bp + 18], file_test$637	; 5: 199 70 18 90 67
x17228:	mov [bp + 20], bp	; 3: 137 110 20
x17231:	add bp, 18	; 3: 131 197 18
x17234:	mov di, bp	; 2: 137 239
x17236:	add di, 6	; 3: 131 199 6
x17239:	jmp fprintf	; 3: 233 81 16

file_test$637:	; PostCall 18

file_test$638:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$639:	; Call 18 abort 0
x17242:	mov word [bp + 18], file_test$640	; 5: 199 70 18 104 67
x17247:	mov [bp + 20], bp	; 3: 137 110 20
x17250:	add bp, 18	; 3: 131 197 18
x17253:	jmp abort	; 3: 233 126 16

file_test$640:	; PostCall 18

file_test$641:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$642:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17256:	mov word [bp + 24], string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 76 77

file_test$643:	; Parameter 18 p 8
x17261:	mov ax, [bp + 14]	; 3: 139 70 14
x17264:	mov [bp + 26], ax	; 3: 137 70 26

file_test$644:	; Parameter 18 total 10
x17267:	mov ax, [bp + 10]	; 3: 139 70 10
x17270:	mov [bp + 28], ax	; 3: 137 70 28

file_test$645:	; Parameter 18 endPtr 12
x17273:	mov ax, [bp + 16]	; 3: 139 70 16
x17276:	mov [bp + 30], ax	; 3: 137 70 30

file_test$646:	; Call 18 printf 0
x17279:	mov word [bp + 18], file_test$647	; 5: 199 70 18 146 67
x17284:	mov [bp + 20], bp	; 3: 137 110 20
x17287:	add bp, 18	; 3: 131 197 18
x17290:	mov di, bp	; 2: 137 239
x17292:	add di, 6	; 3: 131 199 6
x17295:	jmp printf	; 3: 233 51 201

file_test$647:	; PostCall 18

file_test$648:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$649:	; Parameter 18 p 6
x17298:	mov ax, [bp + 14]	; 3: 139 70 14
x17301:	mov [bp + 24], ax	; 3: 137 70 24

file_test$650:	; Parameter 18 total 8
x17304:	mov ax, [bp + 10]	; 3: 139 70 10
x17307:	mov [bp + 26], ax	; 3: 137 70 26

file_test$651:	; Parameter 18 1 10
x17310:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$652:	; Parameter 18 inFilePtr 12
x17315:	mov ax, [bp + 6]	; 3: 139 70 6
x17318:	mov [bp + 30], ax	; 3: 137 70 30

file_test$653:	; Call 18 fread 0
x17321:	mov word [bp + 18], file_test$654	; 5: 199 70 18 183 67
x17326:	mov [bp + 20], bp	; 3: 137 110 20
x17329:	add bp, 18	; 3: 131 197 18
x17332:	jmp fread	; 3: 233 251 35

file_test$654:	; PostCall 18

file_test$655:	; Assign index 0
x17335:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$656:	; SignedGreaterThanEqual 669 index size
x17340:	mov ax, [bp + 8]	; 3: 139 70 8
x17343:	cmp [bp + 12], ax	; 3: 57 70 12
x17346:	jge file_test$669	; 2: 125 54

file_test$657:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$658:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x17348:	mov word [bp + 24], string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 95 77

file_test$659:	; Parameter 18 index 8
x17353:	mov ax, [bp + 12]	; 3: 139 70 12
x17356:	mov [bp + 26], ax	; 3: 137 70 26

file_test$660:	; UnsignedMultiply £temporary5163 index 8
x17359:	mov ax, [bp + 12]	; 3: 139 70 12
x17362:	xor dx, dx	; 2: 49 210
x17364:	mul word [int2$8#]	; 4: 247 38 64 77

file_test$661:	; BinaryAdd £temporary5164 p £temporary5163
x17368:	mov si, [bp + 14]	; 3: 139 118 14
x17371:	add si, ax	; 2: 1 198

file_test$662:	; Deref £temporary5162 -> £temporary5164 £temporary5164 0

file_test$663:	; PushFloat £temporary5162 -> £temporary5164
x17373:	fld qword [si]	; 2: 221 4

file_test$664:	; Parameter 18 £temporary5162 -> £temporary5164 10
x17375:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$665:	; Call 18 printf 0
x17378:	mov word [bp + 18], file_test$666	; 5: 199 70 18 245 67
x17383:	mov [bp + 20], bp	; 3: 137 110 20
x17386:	add bp, 18	; 3: 131 197 18
x17389:	mov di, bp	; 2: 137 239
x17391:	add di, 10	; 3: 131 199 10
x17394:	jmp printf	; 3: 233 208 200

file_test$666:	; PostCall 18

file_test$667:	; Increment index
x17397:	inc word [bp + 12]	; 3: 255 70 12

file_test$668:	; Goto 656
x17400:	jmp file_test$656	; 2: 235 194

file_test$669:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$670:	; Parameter 18 string_0A# 6
x17402:	mov word [bp + 24], string_0A#	; 5: 199 70 24 195 12

file_test$671:	; Call 18 printf 0
x17407:	mov word [bp + 18], file_test$672	; 5: 199 70 18 15 68
x17412:	mov [bp + 20], bp	; 3: 137 110 20
x17415:	add bp, 18	; 3: 131 197 18
x17418:	mov di, bp	; 2: 137 239
x17420:	jmp printf	; 3: 233 182 200

file_test$672:	; PostCall 18

file_test$673:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$674:	; Parameter 18 p 6
x17423:	mov ax, [bp + 14]	; 3: 139 70 14
x17426:	mov [bp + 24], ax	; 3: 137 70 24

file_test$675:	; Call 18 free 0
x17429:	mov word [bp + 18], file_test$676	; 5: 199 70 18 35 68
x17434:	mov [bp + 20], bp	; 3: 137 110 20
x17437:	add bp, 18	; 3: 131 197 18
x17440:	jmp free	; 3: 233 177 37

file_test$676:	; PostCall 18

file_test$677:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$678:	; Parameter 10 inFilePtr 6
x17443:	mov ax, [bp + 6]	; 3: 139 70 6
x17446:	mov [bp + 16], ax	; 3: 137 70 16

file_test$679:	; Call 10 fclose 0
x17449:	mov word [bp + 10], file_test$680	; 5: 199 70 10 55 68
x17454:	mov [bp + 12], bp	; 3: 137 110 12
x17457:	add bp, 10	; 3: 131 197 10
x17460:	jmp fclose	; 3: 233 28 34

file_test$680:	; PostCall 10

file_test$681:	; Assign personVector[0]$name[0] 65
x17463:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$682:	; Assign personVector[0]$name[1] 100
x17467:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$683:	; Assign personVector[0]$name[2] 97
x17471:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$684:	; Assign personVector[0]$name[3] 109
x17475:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$685:	; Assign personVector[0]$name[4] 32
x17479:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$686:	; Assign personVector[0]$name[5] 66
x17483:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$687:	; Assign personVector[0]$name[6] 101
x17487:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$688:	; Assign personVector[0]$name[7] 114
x17491:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$689:	; Assign personVector[0]$name[8] 116
x17495:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$690:	; Assign personVector[0]$name[9] 105
x17499:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$691:	; Assign personVector[0]$name[10] 108
x17503:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$692:	; Assign personVector[0]$name[11] 115
x17507:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$693:	; Assign personVector[0]$name[12] 115
x17511:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$694:	; Assign personVector[0]$name[13] 111
x17515:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$695:	; Assign personVector[0]$name[14] 110
x17519:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$696:	; Assign personVector[0]$name[15] 0
x17523:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$697:	; Assign personVector[0]$phone 12345
x17527:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$698:	; Assign personVector[1]$name[0] 66
x17532:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$699:	; Assign personVector[1]$name[1] 101
x17536:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$700:	; Assign personVector[1]$name[2] 114
x17540:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$701:	; Assign personVector[1]$name[3] 116
x17544:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$702:	; Assign personVector[1]$name[4] 105
x17548:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$703:	; Assign personVector[1]$name[5] 108
x17552:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$704:	; Assign personVector[1]$name[6] 32
x17556:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$705:	; Assign personVector[1]$name[7] 67
x17560:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$706:	; Assign personVector[1]$name[8] 101
x17564:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$707:	; Assign personVector[1]$name[9] 97
x17568:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$708:	; Assign personVector[1]$name[10] 115
x17572:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$709:	; Assign personVector[1]$name[11] 97
x17576:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$710:	; Assign personVector[1]$name[12] 114
x17580:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$711:	; Assign personVector[1]$name[13] 115
x17584:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$712:	; Assign personVector[1]$name[14] 115
x17588:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$713:	; Assign personVector[1]$name[15] 111
x17592:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$714:	; Assign personVector[1]$name[16] 110
x17596:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$715:	; Assign personVector[1]$name[17] 0
x17600:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$716:	; Assign personVector[1]$phone 23456
x17604:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$717:	; Assign personVector[2]$name[0] 67
x17609:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$718:	; Assign personVector[2]$name[1] 101
x17613:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$719:	; Assign personVector[2]$name[2] 97
x17617:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$720:	; Assign personVector[2]$name[3] 115
x17621:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$721:	; Assign personVector[2]$name[4] 97
x17625:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$722:	; Assign personVector[2]$name[5] 114
x17629:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$723:	; Assign personVector[2]$name[6] 32
x17633:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$724:	; Assign personVector[2]$name[7] 68
x17637:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$725:	; Assign personVector[2]$name[8] 97
x17641:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$726:	; Assign personVector[2]$name[9] 118
x17645:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$727:	; Assign personVector[2]$name[10] 105
x17649:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$728:	; Assign personVector[2]$name[11] 100
x17653:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$729:	; Assign personVector[2]$name[12] 115
x17657:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$730:	; Assign personVector[2]$name[13] 115
x17661:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$731:	; Assign personVector[2]$name[14] 111
x17665:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$732:	; Assign personVector[2]$name[15] 110
x17669:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$733:	; Assign personVector[2]$name[16] 0
x17673:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$734:	; Assign personVector[2]$phone 24567
x17677:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$735:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$736:	; Parameter 206 string_Block2Ebin# 6
x17683:	mov word [bp + 212], string_Block2Ebin#	; 6: 199 134 212 0 117 77

file_test$737:	; Parameter 206 string_w# 8
x17689:	mov word [bp + 214], string_w#	; 6: 199 134 214 0 72 75

file_test$738:	; Call 206 fopen 0
x17695:	mov word [bp + 206], file_test$739	; 6: 199 134 206 0 48 69
x17701:	mov [bp + 208], bp	; 4: 137 174 208 0
x17705:	add bp, 206	; 4: 129 197 206 0
x17709:	jmp fopen	; 3: 233 233 9

file_test$739:	; PostCall 206

file_test$740:	; GetReturnValue £temporary5229

file_test$741:	; Assign outFilePtr £temporary5229
x17712:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$742:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$743:	; Parameter 208 string_Block2Ebin# 6
x17716:	mov word [bp + 214], string_Block2Ebin#	; 6: 199 134 214 0 117 77

file_test$744:	; Parameter 208 string_r# 8
x17722:	mov word [bp + 216], string_r#	; 6: 199 134 216 0 61 75

file_test$745:	; Call 208 fopen 0
x17728:	mov word [bp + 208], file_test$746	; 6: 199 134 208 0 81 69
x17734:	mov [bp + 210], bp	; 4: 137 174 210 0
x17738:	add bp, 208	; 4: 129 197 208 0
x17742:	jmp fopen	; 3: 233 200 9

file_test$746:	; PostCall 208

file_test$747:	; GetReturnValue £temporary5230

file_test$748:	; Assign inFilePtr £temporary5230
x17745:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$749:	; NotEqual 761 outFilePtr 0
x17749:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x17754:	jne file_test$761	; 2: 117 70

file_test$750:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$751:	; Parameter 210 stderr 6
x17756:	mov ax, [stderr]	; 3: 161 74 75
x17759:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$752:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17763:	mov word [bp + 218], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 76 75

file_test$753:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x17769:	mov word [bp + 220], string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 205 75

file_test$754:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17775:	mov word [bp + 222], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 140 75

file_test$755:	; Parameter 210 253 14
x17781:	mov word [bp + 224], 253	; 6: 199 134 224 0 253 0

file_test$756:	; Call 210 fprintf 0
x17787:	mov word [bp + 210], file_test$757	; 6: 199 134 210 0 145 69
x17793:	mov [bp + 212], bp	; 4: 137 174 212 0
x17797:	add bp, 210	; 4: 129 197 210 0
x17801:	mov di, bp	; 2: 137 239
x17803:	add di, 6	; 3: 131 199 6
x17806:	jmp fprintf	; 3: 233 26 14

file_test$757:	; PostCall 210

file_test$758:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$759:	; Call 210 abort 0
x17809:	mov word [bp + 210], file_test$760	; 6: 199 134 210 0 162 69
x17815:	mov [bp + 212], bp	; 4: 137 174 212 0
x17819:	add bp, 210	; 4: 129 197 210 0
x17823:	jmp abort	; 3: 233 68 14

file_test$760:	; PostCall 210

file_test$761:	; NotEqual 773 inFilePtr 0
x17826:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x17831:	jne file_test$773	; 2: 117 70

file_test$762:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$763:	; Parameter 210 stderr 6
x17833:	mov ax, [stderr]	; 3: 161 74 75
x17836:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$764:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17840:	mov word [bp + 218], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 76 75

file_test$765:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x17846:	mov word [bp + 220], string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 122 75

file_test$766:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17852:	mov word [bp + 222], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 140 75

file_test$767:	; Parameter 210 254 14
x17858:	mov word [bp + 224], 254	; 6: 199 134 224 0 254 0

file_test$768:	; Call 210 fprintf 0
x17864:	mov word [bp + 210], file_test$769	; 6: 199 134 210 0 222 69
x17870:	mov [bp + 212], bp	; 4: 137 174 212 0
x17874:	add bp, 210	; 4: 129 197 210 0
x17878:	mov di, bp	; 2: 137 239
x17880:	add di, 6	; 3: 131 199 6
x17883:	jmp fprintf	; 3: 233 205 13

file_test$769:	; PostCall 210

file_test$770:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$771:	; Call 210 abort 0
x17886:	mov word [bp + 210], file_test$772	; 6: 199 134 210 0 239 69
x17892:	mov [bp + 212], bp	; 4: 137 174 212 0
x17896:	add bp, 210	; 4: 129 197 210 0
x17900:	jmp abort	; 3: 233 247 13

file_test$772:	; PostCall 210

file_test$773:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$774:	; Parameter 210 personVector 6
x17903:	mov [bp + 216], bp	; 4: 137 174 216 0
x17907:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$775:	; Parameter 210 150 8
x17912:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$776:	; Parameter 210 1 10
x17918:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$777:	; Parameter 210 outFilePtr 12
x17924:	mov ax, [bp + 206]	; 4: 139 134 206 0
x17928:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$778:	; Call 210 fwrite 0
x17932:	mov word [bp + 210], file_test$779	; 6: 199 134 210 0 29 70
x17938:	mov [bp + 212], bp	; 4: 137 174 212 0
x17942:	add bp, 210	; 4: 129 197 210 0
x17946:	jmp fwrite	; 3: 233 82 33

file_test$779:	; PostCall 210

file_test$780:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$781:	; Parameter 210 outFilePtr 6
x17949:	mov ax, [bp + 206]	; 4: 139 134 206 0
x17953:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$782:	; Call 210 fclose 0
x17957:	mov word [bp + 210], file_test$783	; 6: 199 134 210 0 54 70
x17963:	mov [bp + 212], bp	; 4: 137 174 212 0
x17967:	add bp, 210	; 4: 129 197 210 0
x17971:	jmp fclose	; 3: 233 29 32

file_test$783:	; PostCall 210

file_test$784:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$785:	; Parameter 210 inFilePtr 6
x17974:	mov ax, [bp + 208]	; 4: 139 134 208 0
x17978:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$786:	; Call 210 feof 0
x17982:	mov word [bp + 210], file_test$787	; 6: 199 134 210 0 79 70
x17988:	mov [bp + 212], bp	; 4: 137 174 212 0
x17992:	add bp, 210	; 4: 129 197 210 0
x17996:	jmp feof	; 3: 233 168 13

file_test$787:	; PostCall 210

file_test$788:	; GetReturnValue £temporary5241

file_test$789:	; NotEqual 809 £temporary5241 0
x17999:	cmp bx, 0	; 3: 131 251 0
x18002:	jne file_test$809	; 2: 117 124

file_test$790:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$791:	; address £temporary5244 person
x18004:	mov si, bp	; 2: 137 238
x18006:	add si, 156	; 4: 129 198 156 0

file_test$792:	; Parameter 210 £temporary5244 6
x18010:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$793:	; Parameter 210 50 8
x18014:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$794:	; Parameter 210 1 10
x18020:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$795:	; Parameter 210 inFilePtr 12
x18026:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18030:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$796:	; Call 210 fread 0
x18034:	mov word [bp + 210], file_test$797	; 6: 199 134 210 0 131 70
x18040:	mov [bp + 212], bp	; 4: 137 174 212 0
x18044:	add bp, 210	; 4: 129 197 210 0
x18048:	jmp fread	; 3: 233 47 33

file_test$797:	; PostCall 210

file_test$798:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$799:	; Parameter 210 string_Name20203A2025s0A# 6
x18051:	mov word [bp + 216], string_Name20203A2025s0A#	; 6: 199 134 216 0 127 77

file_test$800:	; Parameter 210 person$name 8
x18057:	mov [bp + 218], bp	; 4: 137 174 218 0
x18061:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$801:	; Call 210 printf 0
x18067:	mov word [bp + 210], file_test$802	; 6: 199 134 210 0 169 70
x18073:	mov [bp + 212], bp	; 4: 137 174 212 0
x18077:	add bp, 210	; 4: 129 197 210 0
x18081:	mov di, bp	; 2: 137 239
x18083:	add di, 2	; 3: 131 199 2
x18086:	jmp printf	; 3: 233 28 198

file_test$802:	; PostCall 210

file_test$803:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$804:	; Parameter 210 string_Phone203A2025d0A# 6
x18089:	mov word [bp + 216], string_Phone203A2025d0A#	; 6: 199 134 216 0 139 77

file_test$805:	; Parameter 210 person$phone 8
x18095:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18099:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$806:	; Call 210 printf 0
x18103:	mov word [bp + 210], file_test$807	; 6: 199 134 210 0 205 70
x18109:	mov [bp + 212], bp	; 4: 137 174 212 0
x18113:	add bp, 210	; 4: 129 197 210 0
x18117:	mov di, bp	; 2: 137 239
x18119:	add di, 2	; 3: 131 199 2
x18122:	jmp printf	; 3: 233 248 197

file_test$807:	; PostCall 210

file_test$808:	; Goto 784
x18125:	jmp file_test$784	; 3: 233 102 255

file_test$809:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$810:	; Parameter 210 inFilePtr 6
x18128:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18132:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$811:	; Call 210 fclose 0
x18136:	mov word [bp + 210], file_test$812	; 6: 199 134 210 0 233 70
x18142:	mov [bp + 212], bp	; 4: 137 174 212 0
x18146:	add bp, 210	; 4: 129 197 210 0
x18150:	jmp fclose	; 3: 233 106 31

file_test$812:	; PostCall 210

file_test$813:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$814:	; Parameter 6 string_outx2Etxt# 6
x18153:	mov word [bp + 12], string_outx2Etxt#	; 5: 199 70 12 151 77

file_test$815:	; Parameter 6 string_r# 8
x18158:	mov word [bp + 14], string_r#	; 5: 199 70 14 61 75

file_test$816:	; Call 6 fopen 0
x18163:	mov word [bp + 6], file_test$817	; 5: 199 70 6 1 71
x18168:	mov [bp + 8], bp	; 3: 137 110 8
x18171:	add bp, 6	; 3: 131 197 6
x18174:	jmp fopen	; 3: 233 24 8

file_test$817:	; PostCall 6

file_test$818:	; GetReturnValue £temporary5251

file_test$819:	; Assign inFilePtr £temporary5251
x18177:	mov [bp + 6], bx	; 3: 137 94 6

file_test$820:	; NotEqual 832 inFilePtr 0
x18180:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18184:	jne file_test$832	; 2: 117 59

file_test$821:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$822:	; Parameter 12 stderr 6
x18186:	mov ax, [stderr]	; 3: 161 74 75
x18189:	mov [bp + 18], ax	; 3: 137 70 18

file_test$823:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18192:	mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 76 75

file_test$824:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x18197:	mov word [bp + 22], string_inFilePtr20213D20NULL#	; 5: 199 70 22 122 75

file_test$825:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18202:	mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 140 75

file_test$826:	; Parameter 12 271 14
x18207:	mov word [bp + 26], 271	; 5: 199 70 26 15 1

file_test$827:	; Call 12 fprintf 0
x18212:	mov word [bp + 12], file_test$828	; 5: 199 70 12 55 71
x18217:	mov [bp + 14], bp	; 3: 137 110 14
x18220:	add bp, 12	; 3: 131 197 12
x18223:	mov di, bp	; 2: 137 239
x18225:	add di, 6	; 3: 131 199 6
x18228:	jmp fprintf	; 3: 233 116 12

file_test$828:	; PostCall 12

file_test$829:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$830:	; Call 12 abort 0
x18231:	mov word [bp + 12], file_test$831	; 5: 199 70 12 69 71
x18236:	mov [bp + 14], bp	; 3: 137 110 14
x18239:	add bp, 12	; 3: 131 197 12
x18242:	jmp abort	; 3: 233 161 12

file_test$831:	; PostCall 12

file_test$832:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 12 inFilePtr 6
x18245:	mov ax, [bp + 6]	; 3: 139 70 6
x18248:	mov [bp + 18], ax	; 3: 137 70 18

file_test$834:	; Parameter 12 0 8
x18251:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$835:	; Parameter 12 2 10
x18256:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

file_test$836:	; Call 12 fseek 0
x18261:	mov word [bp + 12], file_test$837	; 5: 199 70 12 99 71
x18266:	mov [bp + 14], bp	; 3: 137 110 14
x18269:	add bp, 12	; 3: 131 197 12
x18272:	jmp fseek	; 3: 233 163 11

file_test$837:	; PostCall 12

file_test$838:	; GetReturnValue £temporary5256

file_test$839:	; Assign size £temporary5256
x18275:	mov [bp + 12], bx	; 3: 137 94 12

file_test$840:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Parameter 14 string_ftell2025i0A# 6
x18278:	mov word [bp + 20], string_ftell2025i0A#	; 5: 199 70 20 160 77

file_test$842:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$843:	; Parameter 14 inFilePtr 14
x18283:	mov ax, [bp + 6]	; 3: 139 70 6
x18286:	mov [bp + 28], ax	; 3: 137 70 28

file_test$844:	; Call 14 ftell 8
x18289:	mov word [bp + 22], file_test$845	; 5: 199 70 22 127 71
x18294:	mov [bp + 24], bp	; 3: 137 110 24
x18297:	add bp, 22	; 3: 131 197 22
x18300:	jmp ftell	; 3: 233 246 34

file_test$845:	; PostCall 14

file_test$846:	; GetReturnValue £temporary5257

file_test$847:	; Parameter 14 £temporary5257 8
x18303:	mov [bp + 22], bx	; 3: 137 94 22

file_test$848:	; Call 14 printf 0
x18306:	mov word [bp + 14], file_test$849	; 5: 199 70 14 149 71
x18311:	mov [bp + 16], bp	; 3: 137 110 16
x18314:	add bp, 14	; 3: 131 197 14
x18317:	mov di, bp	; 2: 137 239
x18319:	add di, 2	; 3: 131 199 2
x18322:	jmp printf	; 3: 233 48 197

file_test$849:	; PostCall 14

file_test$850:	; Assign index 0
x18325:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$851:	; SignedGreaterThanEqual 883 index size
x18330:	mov ax, [bp + 12]	; 3: 139 70 12
x18333:	cmp [bp + 10], ax	; 3: 57 70 10
x18336:	jge file_test$883	; 4: 15 141 154 0

file_test$852:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Parameter 14 inFilePtr 6
x18340:	mov ax, [bp + 6]	; 3: 139 70 6
x18343:	mov [bp + 20], ax	; 3: 137 70 20

file_test$854:	; Call 14 fgetc 0
x18346:	mov word [bp + 14], file_test$855	; 5: 199 70 14 184 71
x18351:	mov [bp + 16], bp	; 3: 137 110 16
x18354:	add bp, 14	; 3: 131 197 14
x18357:	jmp fgetc	; 3: 233 230 34

file_test$855:	; PostCall 14

file_test$856:	; GetReturnValue £temporary5261

file_test$857:	; IntegralToIntegral £temporary5262 £temporary5261
x18360:	cmp bx, 0	; 3: 131 251 0
x18363:	jge file_test$858	; 2: 125 4
x18365:	neg bx	; 2: 247 219
x18367:	neg bl	; 2: 246 219

file_test$858:	; Assign c £temporary5262
x18369:	mov [bp + 14], bl	; 3: 136 94 14

file_test$859:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$860:	; Parameter 15 string_3C25c3E2025i2025i0A# 6
x18372:	mov word [bp + 21], string_3C25c3E2025i2025i0A#	; 5: 199 70 21 170 77

file_test$861:	; IntegralToIntegral £temporary5263 c
x18377:	mov al, [bp + 14]	; 3: 138 70 14
x18380:	and ax, 255	; 3: 37 255 0
x18383:	cmp al, 0	; 2: 60 0
x18385:	jge file_test$862	; 2: 125 4
x18387:	neg al	; 2: 246 216
x18389:	neg ax	; 2: 247 216

file_test$862:	; Parameter 15 £temporary5263 8
x18391:	mov [bp + 23], ax	; 3: 137 70 23

file_test$863:	; IntegralToIntegral £temporary5264 c
x18394:	mov al, [bp + 14]	; 3: 138 70 14
x18397:	and ax, 255	; 3: 37 255 0
x18400:	cmp al, 0	; 2: 60 0
x18402:	jge file_test$864	; 2: 125 4
x18404:	neg al	; 2: 246 216
x18406:	neg ax	; 2: 247 216

file_test$864:	; Parameter 15 £temporary5264 10
x18408:	mov [bp + 25], ax	; 3: 137 70 25

file_test$865:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$866:	; Parameter 15 inFilePtr 18
x18411:	mov ax, [bp + 6]	; 3: 139 70 6
x18414:	mov [bp + 33], ax	; 3: 137 70 33

file_test$867:	; Call 15 ftell 12
x18417:	mov word [bp + 27], file_test$868	; 5: 199 70 27 255 71
x18422:	mov [bp + 29], bp	; 3: 137 110 29
x18425:	add bp, 27	; 3: 131 197 27
x18428:	jmp ftell	; 3: 233 118 34

file_test$868:	; PostCall 15

file_test$869:	; GetReturnValue £temporary5265

file_test$870:	; Parameter 15 £temporary5265 12
x18431:	mov [bp + 27], bx	; 3: 137 94 27

file_test$871:	; Call 15 printf 0
x18434:	mov word [bp + 15], file_test$872	; 5: 199 70 15 21 72
x18439:	mov [bp + 17], bp	; 3: 137 110 17
x18442:	add bp, 15	; 3: 131 197 15
x18445:	mov di, bp	; 2: 137 239
x18447:	add di, 6	; 3: 131 199 6
x18450:	jmp printf	; 3: 233 176 196

file_test$872:	; PostCall 15

file_test$873:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$874:	; Parameter 15 inFilePtr 6
x18453:	mov ax, [bp + 6]	; 3: 139 70 6
x18456:	mov [bp + 21], ax	; 3: 137 70 21

file_test$875:	; BinarySubtract £temporary5267 size index
x18459:	mov ax, [bp + 12]	; 3: 139 70 12
x18462:	sub ax, [bp + 10]	; 3: 43 70 10

file_test$876:	; BinarySubtract £temporary5268 £temporary5267 1
x18465:	dec ax	; 1: 72

file_test$877:	; Parameter 15 £temporary5268 8
x18466:	mov [bp + 23], ax	; 3: 137 70 23

file_test$878:	; Parameter 15 0 10
x18469:	mov word [bp + 25], 0	; 5: 199 70 25 0 0

file_test$879:	; Call 15 fseek 0
x18474:	mov word [bp + 15], file_test$880	; 5: 199 70 15 56 72
x18479:	mov [bp + 17], bp	; 3: 137 110 17
x18482:	add bp, 15	; 3: 131 197 15
x18485:	jmp fseek	; 3: 233 206 10

file_test$880:	; PostCall 15

file_test$881:	; Increment index
x18488:	inc word [bp + 10]	; 3: 255 70 10

file_test$882:	; Goto 851
x18491:	jmp file_test$851	; 3: 233 92 255

file_test$883:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$884:	; Parameter 12 string_0A# 6
x18494:	mov word [bp + 18], string_0A#	; 5: 199 70 18 195 12

file_test$885:	; Call 12 printf 0
x18499:	mov word [bp + 12], file_test$886	; 5: 199 70 12 83 72
x18504:	mov [bp + 14], bp	; 3: 137 110 14
x18507:	add bp, 12	; 3: 131 197 12
x18510:	mov di, bp	; 2: 137 239
x18512:	jmp printf	; 3: 233 114 196

file_test$886:	; PostCall 12

file_test$887:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$888:	; Parameter 12 inFilePtr 6
x18515:	mov ax, [bp + 6]	; 3: 139 70 6
x18518:	mov [bp + 18], ax	; 3: 137 70 18

file_test$889:	; Call 12 fclose 0
x18521:	mov word [bp + 12], file_test$890	; 5: 199 70 12 103 72
x18526:	mov [bp + 14], bp	; 3: 137 110 14
x18529:	add bp, 12	; 3: 131 197 12
x18532:	jmp fclose	; 3: 233 236 29

file_test$890:	; PostCall 12

file_test$891:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 6 string_fileexists20X3A2025s0A# 6
x18535:	mov word [bp + 12], string_fileexists20X3A2025s0A#	; 5: 199 70 12 182 77

file_test$893:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$894:	; Parameter 6 string_X# 14
x18540:	mov word [bp + 20], string_X#	; 5: 199 70 20 32 76

file_test$895:	; Call 6 fileexists 8
x18545:	mov word [bp + 14], file_test$896	; 5: 199 70 14 127 72
x18550:	mov [bp + 16], bp	; 3: 137 110 16
x18553:	add bp, 14	; 3: 131 197 14
x18556:	jmp fileexists	; 3: 233 210 10

file_test$896:	; PostCall 6

file_test$897:	; GetReturnValue £temporary5272

file_test$898:	; Equal 901 £temporary5272 0
x18559:	cmp bx, 0	; 3: 131 251 0
x18562:	je file_test$901	; 2: 116 5

file_test$899:	; Assign £temporary5277 string_Yes#
x18564:	mov ax, string_Yes#	; 3: 184 200 77

file_test$900:	; Goto 902
x18567:	jmp file_test$902	; 2: 235 3

file_test$901:	; Assign £temporary5277 string_No#
x18569:	mov ax, string_No#	; 3: 184 204 77

file_test$902:	; Parameter 6 £temporary5277 8
x18572:	mov [bp + 14], ax	; 3: 137 70 14

file_test$903:	; Call 6 printf 0
x18575:	mov word [bp + 6], file_test$904	; 5: 199 70 6 162 72
x18580:	mov [bp + 8], bp	; 3: 137 110 8
x18583:	add bp, 6	; 3: 131 197 6
x18586:	mov di, bp	; 2: 137 239
x18588:	add di, 2	; 3: 131 199 2
x18591:	jmp printf	; 3: 233 35 196

file_test$904:	; PostCall 6

file_test$905:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$906:	; Parameter 6 string_fileexists20Y3A2025s0A# 6
x18594:	mov word [bp + 12], string_fileexists20Y3A2025s0A#	; 5: 199 70 12 207 77

file_test$907:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$908:	; Parameter 6 string_Y# 14
x18599:	mov word [bp + 20], string_Y#	; 5: 199 70 20 34 76

file_test$909:	; Call 6 fileexists 8
x18604:	mov word [bp + 14], file_test$910	; 5: 199 70 14 186 72
x18609:	mov [bp + 16], bp	; 3: 137 110 16
x18612:	add bp, 14	; 3: 131 197 14
x18615:	jmp fileexists	; 3: 233 151 10

file_test$910:	; PostCall 6

file_test$911:	; GetReturnValue £temporary5279

file_test$912:	; Equal 915 £temporary5279 0
x18618:	cmp bx, 0	; 3: 131 251 0
x18621:	je file_test$915	; 2: 116 5

file_test$913:	; Assign £temporary5284 string_Yes#
x18623:	mov ax, string_Yes#	; 3: 184 200 77

file_test$914:	; Goto 916
x18626:	jmp file_test$916	; 2: 235 3

file_test$915:	; Assign £temporary5284 string_No#
x18628:	mov ax, string_No#	; 3: 184 204 77

file_test$916:	; Parameter 6 £temporary5284 8
x18631:	mov [bp + 14], ax	; 3: 137 70 14

file_test$917:	; Call 6 printf 0
x18634:	mov word [bp + 6], file_test$918	; 5: 199 70 6 221 72
x18639:	mov [bp + 8], bp	; 3: 137 110 8
x18642:	add bp, 6	; 3: 131 197 6
x18645:	mov di, bp	; 2: 137 239
x18647:	add di, 2	; 3: 131 199 2
x18650:	jmp printf	; 3: 233 232 195

file_test$918:	; PostCall 6

file_test$919:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$920:	; Parameter 6 string_fileexists20Main2Easm3A2025s0A# 6
x18653:	mov word [bp + 12], string_fileexists20Main2Easm3A2025s0A#	; 5: 199 70 12 225 77

file_test$921:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$922:	; Parameter 6 string_Main2Easm# 14
x18658:	mov word [bp + 20], string_Main2Easm#	; 5: 199 70 20 250 77

file_test$923:	; Call 6 fileexists 8
x18663:	mov word [bp + 14], file_test$924	; 5: 199 70 14 245 72
x18668:	mov [bp + 16], bp	; 3: 137 110 16
x18671:	add bp, 14	; 3: 131 197 14
x18674:	jmp fileexists	; 3: 233 92 10

file_test$924:	; PostCall 6

file_test$925:	; GetReturnValue £temporary5286

file_test$926:	; Equal 929 £temporary5286 0
x18677:	cmp bx, 0	; 3: 131 251 0
x18680:	je file_test$929	; 2: 116 5

file_test$927:	; Assign £temporary5291 string_Yes#
x18682:	mov ax, string_Yes#	; 3: 184 200 77

file_test$928:	; Goto 930
x18685:	jmp file_test$930	; 2: 235 3

file_test$929:	; Assign £temporary5291 string_No#
x18687:	mov ax, string_No#	; 3: 184 204 77

file_test$930:	; Parameter 6 £temporary5291 8
x18690:	mov [bp + 14], ax	; 3: 137 70 14

file_test$931:	; Call 6 printf 0
x18693:	mov word [bp + 6], file_test$932	; 5: 199 70 6 24 73
x18698:	mov [bp + 8], bp	; 3: 137 110 8
x18701:	add bp, 6	; 3: 131 197 6
x18704:	mov di, bp	; 2: 137 239
x18706:	add di, 2	; 3: 131 199 2
x18709:	jmp printf	; 3: 233 173 195

file_test$932:	; PostCall 6

file_test$933:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$934:	; Parameter 6 string_fileexists20MainX2Easm3A2025s0A# 6
x18712:	mov word [bp + 12], string_fileexists20MainX2Easm3A2025s0A#	; 5: 199 70 12 3 78

file_test$935:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$936:	; Parameter 6 string_MainX2Easm# 14
x18717:	mov word [bp + 20], string_MainX2Easm#	; 5: 199 70 20 29 78

file_test$937:	; Call 6 fileexists 8
x18722:	mov word [bp + 14], file_test$938	; 5: 199 70 14 48 73
x18727:	mov [bp + 16], bp	; 3: 137 110 16
x18730:	add bp, 14	; 3: 131 197 14
x18733:	jmp fileexists	; 3: 233 33 10

file_test$938:	; PostCall 6

file_test$939:	; GetReturnValue £temporary5293

file_test$940:	; Equal 943 £temporary5293 0
x18736:	cmp bx, 0	; 3: 131 251 0
x18739:	je file_test$943	; 2: 116 5

file_test$941:	; Assign £temporary5298 string_Yes#
x18741:	mov ax, string_Yes#	; 3: 184 200 77

file_test$942:	; Goto 944
x18744:	jmp file_test$944	; 2: 235 3

file_test$943:	; Assign £temporary5298 string_No#
x18746:	mov ax, string_No#	; 3: 184 204 77

file_test$944:	; Parameter 6 £temporary5298 8
x18749:	mov [bp + 14], ax	; 3: 137 70 14

file_test$945:	; Call 6 printf 0
x18752:	mov word [bp + 6], file_test$946	; 5: 199 70 6 83 73
x18757:	mov [bp + 8], bp	; 3: 137 110 8
x18760:	add bp, 6	; 3: 131 197 6
x18763:	mov di, bp	; 2: 137 239
x18765:	add di, 2	; 3: 131 199 2
x18768:	jmp printf	; 3: 233 114 195

file_test$946:	; PostCall 6

file_test$947:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$948:	; Parameter 6 string_fileexists20Main2Ec3A2025s0A# 6
x18771:	mov word [bp + 12], string_fileexists20Main2Ec3A2025s0A#	; 5: 199 70 12 39 78

file_test$949:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$950:	; Parameter 6 string_Main2Ec# 14
x18776:	mov word [bp + 20], string_Main2Ec#	; 5: 199 70 20 62 78

file_test$951:	; Call 6 fileexists 8
x18781:	mov word [bp + 14], file_test$952	; 5: 199 70 14 107 73
x18786:	mov [bp + 16], bp	; 3: 137 110 16
x18789:	add bp, 14	; 3: 131 197 14
x18792:	jmp fileexists	; 3: 233 230 9

file_test$952:	; PostCall 6

file_test$953:	; GetReturnValue £temporary5300

file_test$954:	; Equal 957 £temporary5300 0
x18795:	cmp bx, 0	; 3: 131 251 0
x18798:	je file_test$957	; 2: 116 5

file_test$955:	; Assign £temporary5305 string_Yes#
x18800:	mov ax, string_Yes#	; 3: 184 200 77

file_test$956:	; Goto 958
x18803:	jmp file_test$958	; 2: 235 3

file_test$957:	; Assign £temporary5305 string_No#
x18805:	mov ax, string_No#	; 3: 184 204 77

file_test$958:	; Parameter 6 £temporary5305 8
x18808:	mov [bp + 14], ax	; 3: 137 70 14

file_test$959:	; Call 6 printf 0
x18811:	mov word [bp + 6], file_test$960	; 5: 199 70 6 142 73
x18816:	mov [bp + 8], bp	; 3: 137 110 8
x18819:	add bp, 6	; 3: 131 197 6
x18822:	mov di, bp	; 2: 137 239
x18824:	add di, 2	; 3: 131 199 2
x18827:	jmp printf	; 3: 233 55 195

file_test$960:	; PostCall 6

file_test$961:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$962:	; Parameter 6 string_fileexists20MainX2Ec3A2025s0A# 6
x18830:	mov word [bp + 12], string_fileexists20MainX2Ec3A2025s0A#	; 5: 199 70 12 69 78

file_test$963:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$964:	; Parameter 6 string_MainX2Ec# 14
x18835:	mov word [bp + 20], string_MainX2Ec#	; 5: 199 70 20 93 78

file_test$965:	; Call 6 fileexists 8
x18840:	mov word [bp + 14], file_test$966	; 5: 199 70 14 166 73
x18845:	mov [bp + 16], bp	; 3: 137 110 16
x18848:	add bp, 14	; 3: 131 197 14
x18851:	jmp fileexists	; 3: 233 171 9

file_test$966:	; PostCall 6

file_test$967:	; GetReturnValue £temporary5307

file_test$968:	; Equal 971 £temporary5307 0
x18854:	cmp bx, 0	; 3: 131 251 0
x18857:	je file_test$971	; 2: 116 5

file_test$969:	; Assign £temporary5312 string_Yes#
x18859:	mov ax, string_Yes#	; 3: 184 200 77

file_test$970:	; Goto 972
x18862:	jmp file_test$972	; 2: 235 3

file_test$971:	; Assign £temporary5312 string_No#
x18864:	mov ax, string_No#	; 3: 184 204 77

file_test$972:	; Parameter 6 £temporary5312 8
x18867:	mov [bp + 14], ax	; 3: 137 70 14

file_test$973:	; Call 6 printf 0
x18870:	mov word [bp + 6], file_test$974	; 5: 199 70 6 201 73
x18875:	mov [bp + 8], bp	; 3: 137 110 8
x18878:	add bp, 6	; 3: 131 197 6
x18881:	mov di, bp	; 2: 137 239
x18883:	add di, 2	; 3: 131 199 2
x18886:	jmp printf	; 3: 233 252 194

file_test$974:	; PostCall 6

file_test$975:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$976:	; Parameter 6 string_fileexists20File2Ec3A2025s0A# 6
x18889:	mov word [bp + 12], string_fileexists20File2Ec3A2025s0A#	; 5: 199 70 12 101 78

file_test$977:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$978:	; Parameter 6 string_File2Ec# 14
x18894:	mov word [bp + 20], string_File2Ec#	; 5: 199 70 20 124 78

file_test$979:	; Call 6 fileexists 8
x18899:	mov word [bp + 14], file_test$980	; 5: 199 70 14 225 73
x18904:	mov [bp + 16], bp	; 3: 137 110 16
x18907:	add bp, 14	; 3: 131 197 14
x18910:	jmp fileexists	; 3: 233 112 9

file_test$980:	; PostCall 6

file_test$981:	; GetReturnValue £temporary5314

file_test$982:	; Equal 985 £temporary5314 0
x18913:	cmp bx, 0	; 3: 131 251 0
x18916:	je file_test$985	; 2: 116 5

file_test$983:	; Assign £temporary5319 string_Yes#
x18918:	mov ax, string_Yes#	; 3: 184 200 77

file_test$984:	; Goto 986
x18921:	jmp file_test$986	; 2: 235 3

file_test$985:	; Assign £temporary5319 string_No#
x18923:	mov ax, string_No#	; 3: 184 204 77

file_test$986:	; Parameter 6 £temporary5319 8
x18926:	mov [bp + 14], ax	; 3: 137 70 14

file_test$987:	; Call 6 printf 0
x18929:	mov word [bp + 6], file_test$988	; 5: 199 70 6 4 74
x18934:	mov [bp + 8], bp	; 3: 137 110 8
x18937:	add bp, 6	; 3: 131 197 6
x18940:	mov di, bp	; 2: 137 239
x18942:	add di, 2	; 3: 131 199 2
x18945:	jmp printf	; 3: 233 193 194

file_test$988:	; PostCall 6

file_test$989:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$990:	; Parameter 6 string_fileexists20File2Ex3A2025s0A# 6
x18948:	mov word [bp + 12], string_fileexists20File2Ex3A2025s0A#	; 5: 199 70 12 131 78

file_test$991:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$992:	; Parameter 6 string_File2Ex# 14
x18953:	mov word [bp + 20], string_File2Ex#	; 5: 199 70 20 154 78

file_test$993:	; Call 6 fileexists 8
x18958:	mov word [bp + 14], file_test$994	; 5: 199 70 14 28 74
x18963:	mov [bp + 16], bp	; 3: 137 110 16
x18966:	add bp, 14	; 3: 131 197 14
x18969:	jmp fileexists	; 3: 233 53 9

file_test$994:	; PostCall 6

file_test$995:	; GetReturnValue £temporary5321

file_test$996:	; Equal 999 £temporary5321 0
x18972:	cmp bx, 0	; 3: 131 251 0
x18975:	je file_test$999	; 2: 116 5

file_test$997:	; Assign £temporary5326 string_Yes#
x18977:	mov ax, string_Yes#	; 3: 184 200 77

file_test$998:	; Goto 1000
x18980:	jmp file_test$1000	; 2: 235 3

file_test$999:	; Assign £temporary5326 string_No#
x18982:	mov ax, string_No#	; 3: 184 204 77

file_test$1000:	; Parameter 6 £temporary5326 8
x18985:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1001:	; Call 6 printf 0
x18988:	mov word [bp + 6], file_test$1002	; 5: 199 70 6 63 74
x18993:	mov [bp + 8], bp	; 3: 137 110 8
x18996:	add bp, 6	; 3: 131 197 6
x18999:	mov di, bp	; 2: 137 239
x19001:	add di, 2	; 3: 131 199 2
x19004:	jmp printf	; 3: 233 134 194

file_test$1002:	; PostCall 6

file_test$1003:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1004:	; Parameter 6 string_fileexists20File2Eh3A2025s0A# 6
x19007:	mov word [bp + 12], string_fileexists20File2Eh3A2025s0A#	; 5: 199 70 12 161 78

file_test$1005:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1006:	; Parameter 6 string_File2Eh# 14
x19012:	mov word [bp + 20], string_File2Eh#	; 5: 199 70 20 184 78

file_test$1007:	; Call 6 fileexists 8
x19017:	mov word [bp + 14], file_test$1008	; 5: 199 70 14 87 74
x19022:	mov [bp + 16], bp	; 3: 137 110 16
x19025:	add bp, 14	; 3: 131 197 14
x19028:	jmp fileexists	; 3: 233 250 8

file_test$1008:	; PostCall 6

file_test$1009:	; GetReturnValue £temporary5328

file_test$1010:	; Equal 1013 £temporary5328 0
x19031:	cmp bx, 0	; 3: 131 251 0
x19034:	je file_test$1013	; 2: 116 5

file_test$1011:	; Assign £temporary5333 string_Yes#
x19036:	mov ax, string_Yes#	; 3: 184 200 77

file_test$1012:	; Goto 1014
x19039:	jmp file_test$1014	; 2: 235 3

file_test$1013:	; Assign £temporary5333 string_No#
x19041:	mov ax, string_No#	; 3: 184 204 77

file_test$1014:	; Parameter 6 £temporary5333 8
x19044:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1015:	; Call 6 printf 0
x19047:	mov word [bp + 6], file_test$1016	; 5: 199 70 6 122 74
x19052:	mov [bp + 8], bp	; 3: 137 110 8
x19055:	add bp, 6	; 3: 131 197 6
x19058:	mov di, bp	; 2: 137 239
x19060:	add di, 2	; 3: 131 199 2
x19063:	jmp printf	; 3: 233 75 194

file_test$1016:	; PostCall 6

file_test$1017:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1018:	; Parameter 6 string_fileexists20File2Ey3A2025s0A# 6
x19066:	mov word [bp + 12], string_fileexists20File2Ey3A2025s0A#	; 5: 199 70 12 191 78

file_test$1019:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1020:	; Parameter 6 string_File2Ey# 14
x19071:	mov word [bp + 20], string_File2Ey#	; 5: 199 70 20 214 78

file_test$1021:	; Call 6 fileexists 8
x19076:	mov word [bp + 14], file_test$1022	; 5: 199 70 14 146 74
x19081:	mov [bp + 16], bp	; 3: 137 110 16
x19084:	add bp, 14	; 3: 131 197 14
x19087:	jmp fileexists	; 3: 233 191 8

file_test$1022:	; PostCall 6

file_test$1023:	; GetReturnValue £temporary5335

file_test$1024:	; Equal 1027 £temporary5335 0
x19090:	cmp bx, 0	; 3: 131 251 0
x19093:	je file_test$1027	; 2: 116 5

file_test$1025:	; Assign £temporary5340 string_Yes#
x19095:	mov ax, string_Yes#	; 3: 184 200 77

file_test$1026:	; Goto 1028
x19098:	jmp file_test$1028	; 2: 235 3

file_test$1027:	; Assign £temporary5340 string_No#
x19100:	mov ax, string_No#	; 3: 184 204 77

file_test$1028:	; Parameter 6 £temporary5340 8
x19103:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1029:	; Call 6 printf 0
x19106:	mov word [bp + 6], file_test$1030	; 5: 199 70 6 181 74
x19111:	mov [bp + 8], bp	; 3: 137 110 8
x19114:	add bp, 6	; 3: 131 197 6
x19117:	mov di, bp	; 2: 137 239
x19119:	add di, 2	; 3: 131 199 2
x19122:	jmp printf	; 3: 233 16 194

file_test$1030:	; PostCall 6

file_test$1031:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1032:	; Parameter 6 string_fileexists20File2Ep3A2025s0A# 6
x19125:	mov word [bp + 12], string_fileexists20File2Ep3A2025s0A#	; 5: 199 70 12 221 78

file_test$1033:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1034:	; Parameter 6 string_File2Ep# 14
x19130:	mov word [bp + 20], string_File2Ep#	; 5: 199 70 20 244 78

file_test$1035:	; Call 6 fileexists 8
x19135:	mov word [bp + 14], file_test$1036	; 5: 199 70 14 205 74
x19140:	mov [bp + 16], bp	; 3: 137 110 16
x19143:	add bp, 14	; 3: 131 197 14
x19146:	jmp fileexists	; 3: 233 132 8

file_test$1036:	; PostCall 6

file_test$1037:	; GetReturnValue £temporary5342

file_test$1038:	; Equal 1041 £temporary5342 0
x19149:	cmp bx, 0	; 3: 131 251 0
x19152:	je file_test$1041	; 2: 116 5

file_test$1039:	; Assign £temporary5347 string_Yes#
x19154:	mov ax, string_Yes#	; 3: 184 200 77

file_test$1040:	; Goto 1042
x19157:	jmp file_test$1042	; 2: 235 3

file_test$1041:	; Assign £temporary5347 string_No#
x19159:	mov ax, string_No#	; 3: 184 204 77

file_test$1042:	; Parameter 6 £temporary5347 8
x19162:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1043:	; Call 6 printf 0
x19165:	mov word [bp + 6], file_test$1044	; 5: 199 70 6 240 74
x19170:	mov [bp + 8], bp	; 3: 137 110 8
x19173:	add bp, 6	; 3: 131 197 6
x19176:	mov di, bp	; 2: 137 239
x19178:	add di, 2	; 3: 131 199 2
x19181:	jmp printf	; 3: 233 213 193

file_test$1044:	; PostCall 6

file_test$1045:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1046:	; Parameter 6 string_fileexists20File2Ez3A2025s0A# 6
x19184:	mov word [bp + 12], string_fileexists20File2Ez3A2025s0A#	; 5: 199 70 12 251 78

file_test$1047:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1048:	; Parameter 6 string_File2Ez# 14
x19189:	mov word [bp + 20], string_File2Ez#	; 5: 199 70 20 18 79

file_test$1049:	; Call 6 fileexists 8
x19194:	mov word [bp + 14], file_test$1050	; 5: 199 70 14 8 75
x19199:	mov [bp + 16], bp	; 3: 137 110 16
x19202:	add bp, 14	; 3: 131 197 14
x19205:	jmp fileexists	; 3: 233 73 8

file_test$1050:	; PostCall 6

file_test$1051:	; GetReturnValue £temporary5349

file_test$1052:	; Equal 1055 £temporary5349 0
x19208:	cmp bx, 0	; 3: 131 251 0
x19211:	je file_test$1055	; 2: 116 5

file_test$1053:	; Assign £temporary5354 string_Yes#
x19213:	mov ax, string_Yes#	; 3: 184 200 77

file_test$1054:	; Goto 1056
x19216:	jmp file_test$1056	; 2: 235 3

file_test$1055:	; Assign £temporary5354 string_No#
x19218:	mov ax, string_No#	; 3: 184 204 77

file_test$1056:	; Parameter 6 £temporary5354 8
x19221:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1057:	; Call 6 printf 0
x19224:	mov word [bp + 6], file_test$1058	; 5: 199 70 6 43 75
x19229:	mov [bp + 8], bp	; 3: 137 110 8
x19232:	add bp, 6	; 3: 131 197 6
x19235:	mov di, bp	; 2: 137 239
x19237:	add di, 2	; 3: 131 199 2
x19240:	jmp printf	; 3: 233 154 193

file_test$1058:	; PostCall 6

file_test$1059:	; Return 0
x19243:	mov ax, [bp]	; 3: 139 70 0
x19246:	mov di, [bp + 4]	; 3: 139 126 4
x19249:	mov bp, [bp + 2]	; 3: 139 110 2
x19252:	jmp ax	; 2: 255 224

file_test$1060:	; FunctionEnd file_test

string_in2Etxt#:
x19254:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

string_r#:
x19261:	db "r", 0	; 2: 114 0

string_outX2Etxt#:
x19263:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

string_w#:
x19272:	db "w", 0	; 2: 119 0

stderr:
x19274:	dw g_fileArray + 58	; 2: 97 13

string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19276:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

string_inFilePtr20213D20NULL#:
x19322:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x19340:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

string_outFilePtr20213D20NULL#:
x19405:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

string_25lf#:
x19424:	db "%lf", 0	; 4: 37 108 102 0

string_X12025f0A#:
x19428:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

string_X22025f0A#:
x19435:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

string_outY2Etxt#:
x19442:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

string_25i#:
x19451:	db "%i", 0	; 3: 37 105 0

string_size2025i0A#:
x19454:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

string_Y20size2025i0A#:
x19463:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

string_Y12025f0A#:
x19474:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

string_Y22025f0A#:
x19481:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

string_X#:
x19488:	db "X", 0	; 2: 88 0

string_Y#:
x19490:	db "Y", 0	; 2: 89 0

string_Hello20X#:
x19492:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

string_2225s2220has20been20renamed20to202225s222E0A#:
x19500:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

string_Error2025i3A2025s2E0A#:
x19532:	db "Error %i: %s.", 10, 0	; 15: 69 114 114 111 114 32 37 105 58 32 37 115 46 10 0

string_Z#:
x19547:	db "Z", 0	; 2: 90 0

string_Hello20Z#:
x19549:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

string_2225s2220has20been20removed2E0A#:
x19557:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

string_PBook2Etxt#:
x19581:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

string_0A252D24s20252D24s0A#:
x19591:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

string_Name#:
x19605:	db "Name", 0	; 5: 78 97 109 101 0

string_Phone#:
x19610:	db "Phone", 0	; 6: 80 104 111 110 101 0

string_252D24s20252D24s0A#:
x19616:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x19629:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

string_25s25s#:
x19654:	db "%s%s", 0	; 5: 37 115 37 115 0

string_TestX2Ebin#:
x19659:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

string_size13A2025i0A#:
x19669:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

string_index13A2025i3A20value2025f0A#:
x19680:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

string_TestY2Ebin#:
x19702:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

string_index23A2025i3A20value2025f0A#:
x19712:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

string_index33A2025i3A20value2025f0A#:
x19734:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

string_size43A2025i20total2025i0A#:
x19756:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

int2$8#:
x19776:	dw 8	; 2: 8 0

string_p20213D20NULL#:
x19778:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

string_malloc43A2025u2025u2025u0A#:
x19788:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

string_index43A2025i3A20value2025f0A#:
x19807:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

string_Block2Ebin#:
x19829:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

string_Name20203A2025s0A#:
x19839:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

string_Phone203A2025d0A#:
x19851:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

string_outx2Etxt#:
x19863:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

string_ftell2025i0A#:
x19872:	db "ftell %i", 10, 0	; 10: 102 116 101 108 108 32 37 105 10 0

string_3C25c3E2025i2025i0A#:
x19882:	db "<%c> %i %i", 10, 0	; 12: 60 37 99 62 32 37 105 32 37 105 10 0

string_fileexists20X3A2025s0A#:
x19894:	db "fileexists X: %s", 10, 0	; 18: 102 105 108 101 101 120 105 115 116 115 32 88 58 32 37 115 10 0

string_Yes#:
x19912:	db "Yes", 0	; 4: 89 101 115 0

string_No#:
x19916:	db "No", 0	; 3: 78 111 0

string_fileexists20Y3A2025s0A#:
x19919:	db "fileexists Y: %s", 10, 0	; 18: 102 105 108 101 101 120 105 115 116 115 32 89 58 32 37 115 10 0

string_fileexists20Main2Easm3A2025s0A#:
x19937:	db "fileexists Main.asm: %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 77 97 105 110 46 97 115 109 58 32 37 115 10 0

string_Main2Easm#:
x19962:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

string_fileexists20MainX2Easm3A2025s0A#:
x19971:	db "fileexists MainX.asm: %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 77 97 105 110 88 46 97 115 109 58 32 37 115 10 0

string_MainX2Easm#:
x19997:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

string_fileexists20Main2Ec3A2025s0A#:
x20007:	db "fileexists Main.c: %s", 10, 0	; 23: 102 105 108 101 101 120 105 115 116 115 32 77 97 105 110 46 99 58 32 37 115 10 0

string_Main2Ec#:
x20030:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

string_fileexists20MainX2Ec3A2025s0A#:
x20037:	db "fileexists MainX.c: %s", 10, 0	; 24: 102 105 108 101 101 120 105 115 116 115 32 77 97 105 110 88 46 99 58 32 37 115 10 0

string_MainX2Ec#:
x20061:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

string_fileexists20File2Ec3A2025s0A#:
x20069:	db "fileexists File.c: %s", 10, 0	; 23: 102 105 108 101 101 120 105 115 116 115 32 70 105 108 101 46 99 58 32 37 115 10 0

string_File2Ec#:
x20092:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

string_fileexists20File2Ex3A2025s0A#:
x20099:	db "fileexists File.x: %s", 10, 0	; 23: 102 105 108 101 101 120 105 115 116 115 32 70 105 108 101 46 120 58 32 37 115 10 0

string_File2Ex#:
x20122:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

string_fileexists20File2Eh3A2025s0A#:
x20129:	db "fileexists File.h: %s", 10, 0	; 23: 102 105 108 101 101 120 105 115 116 115 32 70 105 108 101 46 104 58 32 37 115 10 0

string_File2Eh#:
x20152:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

string_fileexists20File2Ey3A2025s0A#:
x20159:	db "fileexists File.y: %s", 10, 0	; 23: 102 105 108 101 101 120 105 115 116 115 32 70 105 108 101 46 121 58 32 37 115 10 0

string_File2Ey#:
x20182:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

string_fileexists20File2Ep3A2025s0A#:
x20189:	db "fileexists File.p: %s", 10, 0	; 23: 102 105 108 101 101 120 105 115 116 115 32 70 105 108 101 46 112 58 32 37 115 10 0

string_File2Ep#:
x20212:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

string_fileexists20File2Ez3A2025s0A#:
x20219:	db "fileexists File.z: %s", 10, 0	; 23: 102 105 108 101 101 120 105 115 116 115 32 70 105 108 101 46 122 58 32 37 115 10 0

string_File2Ez#:
x20242:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

fopen:	; Assign index 0
x20249:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x20254:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x20258:	jge fopen$21	; 2: 125 78

fopen$2:	; UnsignedMultiply £temporary885 index 29
x20260:	mov ax, [bp + 10]	; 3: 139 70 10
x20263:	xor dx, dx	; 2: 49 210
x20265:	mul word [int2$29#]	; 4: 247 38 128 79

fopen$3:	; BinaryAdd £temporary886 g_fileArray £temporary885
x20269:	mov si, g_fileArray	; 3: 190 39 13
x20272:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary884 -> £temporary886 £temporary886 0

fopen$5:	; NotEqual 19 £temporary884.open$0 -> £temporary886 0
x20274:	cmp word [si], 0	; 3: 131 60 0
x20277:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x20279:	mov ax, [bp + 6]	; 3: 139 70 6
x20282:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x20285:	mov ax, [bp + 8]	; 3: 139 70 8
x20288:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; UnsignedMultiply £temporary890 index 29
x20291:	mov ax, [bp + 10]	; 3: 139 70 10
x20294:	xor dx, dx	; 2: 49 210
x20296:	mul word [int2$29#]	; 4: 247 38 128 79

fopen$10:	; BinaryAdd £temporary891 g_fileArray £temporary890
x20300:	mov si, g_fileArray	; 3: 190 39 13
x20303:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary889 -> £temporary891 £temporary891 0

fopen$12:	; address £temporary892 £temporary889 -> £temporary891

fopen$13:	; Parameter 12 £temporary892 10
x20305:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x20308:	mov word [bp + 12], fopen$15	; 5: 199 70 12 98 79
x20313:	mov [bp + 14], bp	; 3: 137 110 14
x20316:	add bp, 12	; 3: 131 197 12
x20319:	nop	; 1: 144
x20320:	jmp freopen	; 2: 235 32

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary893

fopen$17:	; SetReturnValue £temporary893

fopen$18:	; Return £temporary893
x20322:	mov ax, [bp]	; 3: 139 70 0
x20325:	mov di, [bp + 4]	; 3: 139 126 4
x20328:	mov bp, [bp + 2]	; 3: 139 110 2
x20331:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x20333:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x20336:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x20338:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x20341:	mov ax, [bp]	; 3: 139 70 0
x20344:	mov di, [bp + 4]	; 3: 139 126 4
x20347:	mov bp, [bp + 2]	; 3: 139 110 2
x20350:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

int2$29#:
x20352:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x20354:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x20359:	mov ax, [bp + 8]	; 3: 139 70 8
x20362:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x20365:	mov word [bp + 22], string_r#	; 5: 199 70 22 61 75

freopen$4:	; Call 14 strcmp 0
x20370:	mov word [bp + 14], freopen$5	; 5: 199 70 14 160 79
x20375:	mov [bp + 16], bp	; 3: 137 110 16
x20378:	add bp, 14	; 3: 131 197 14
x20381:	jmp strcmp	; 3: 233 103 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary897

freopen$7:	; NotEqual 16 £temporary897 0
x20384:	cmp bx, 0	; 3: 131 251 0
x20387:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x20389:	mov ax, [bp + 6]	; 3: 139 70 6
x20392:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x20395:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x20399:	mov word [bp + 14], freopen$12	; 5: 199 70 14 189 79
x20404:	mov [bp + 16], bp	; 3: 137 110 16
x20407:	add bp, 14	; 3: 131 197 14
x20410:	jmp @1092$fileopen	; 3: 233 235 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary899

freopen$14:	; Assign handle £temporary899
x20413:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 130
x20416:	jmp freopen$130	; 3: 233 210 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x20419:	mov ax, [bp + 8]	; 3: 139 70 8
x20422:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x20425:	mov word [bp + 22], string_w#	; 5: 199 70 22 72 75

freopen$19:	; Call 14 strcmp 0
x20430:	mov word [bp + 14], freopen$20	; 5: 199 70 14 220 79
x20435:	mov [bp + 16], bp	; 3: 137 110 16
x20438:	add bp, 14	; 3: 131 197 14
x20441:	jmp strcmp	; 3: 233 43 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary900

freopen$22:	; NotEqual 30 £temporary900 0
x20444:	cmp bx, 0	; 3: 131 251 0
x20447:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x20449:	mov ax, [bp + 6]	; 3: 139 70 6
x20452:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x20455:	mov word [bp + 14], freopen$26	; 5: 199 70 14 245 79
x20460:	mov [bp + 16], bp	; 3: 137 110 16
x20463:	add bp, 14	; 3: 131 197 14
x20466:	jmp filecreate	; 3: 233 224 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary902

freopen$28:	; Assign handle £temporary902
x20469:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 130
x20472:	jmp freopen$130	; 3: 233 154 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x20475:	mov ax, [bp + 8]	; 3: 139 70 8
x20478:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x20481:	mov word [bp + 22], string_a#	; 5: 199 70 22 252 81

freopen$33:	; Call 14 strcmp 0
x20486:	mov word [bp + 14], freopen$34	; 5: 199 70 14 20 80
x20491:	mov [bp + 16], bp	; 3: 137 110 16
x20494:	add bp, 14	; 3: 131 197 14
x20497:	jmp strcmp	; 3: 233 243 1

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary903

freopen$36:	; NotEqual 59 £temporary903 0
x20500:	cmp bx, 0	; 3: 131 251 0
x20503:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x20505:	mov ax, [bp + 6]	; 3: 139 70 6
x20508:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x20511:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x20515:	mov word [bp + 14], freopen$41	; 5: 199 70 14 49 80
x20520:	mov [bp + 16], bp	; 3: 137 110 16
x20523:	add bp, 14	; 3: 131 197 14
x20526:	jmp @1092$fileopen	; 3: 233 119 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary905

freopen$43:	; Assign handle £temporary905
x20529:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x20532:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x20536:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x20538:	mov ax, [bp + 10]	; 3: 139 70 10
x20541:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x20544:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x20549:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x20554:	mov word [bp + 14], freopen$50	; 5: 199 70 14 88 80
x20559:	mov [bp + 16], bp	; 3: 137 110 16
x20562:	add bp, 14	; 3: 131 197 14
x20565:	jmp fseek	; 3: 233 174 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 130
x20568:	jmp freopen$130	; 3: 233 58 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x20571:	mov ax, [bp + 6]	; 3: 139 70 6
x20574:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x20577:	mov word [bp + 14], freopen$55	; 5: 199 70 14 111 80
x20582:	mov [bp + 16], bp	; 3: 137 110 16
x20585:	add bp, 14	; 3: 131 197 14
x20588:	jmp filecreate	; 3: 233 102 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary908

freopen$57:	; Assign handle £temporary908
x20591:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 130
x20594:	jmp freopen$130	; 3: 233 32 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x20597:	mov ax, [bp + 8]	; 3: 139 70 8
x20600:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x20603:	mov word [bp + 22], string_r2B#	; 5: 199 70 22 254 81

freopen$62:	; Call 14 strcmp 0
x20608:	mov word [bp + 14], freopen$63	; 5: 199 70 14 142 80
x20613:	mov [bp + 16], bp	; 3: 137 110 16
x20616:	add bp, 14	; 3: 131 197 14
x20619:	jmp strcmp	; 3: 233 121 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary909

freopen$65:	; NotEqual 74 £temporary909 0
x20622:	cmp bx, 0	; 3: 131 251 0
x20625:	jne freopen$74	; 2: 117 30

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 name 6
x20627:	mov ax, [bp + 6]	; 3: 139 70 6
x20630:	mov [bp + 20], ax	; 3: 137 70 20

freopen$68:	; Parameter 14 66 8
x20633:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$69:	; Call 14 fileopen 0
x20637:	mov word [bp + 14], freopen$70	; 5: 199 70 14 171 80
x20642:	mov [bp + 16], bp	; 3: 137 110 16
x20645:	add bp, 14	; 3: 131 197 14
x20648:	jmp @1092$fileopen	; 3: 233 253 1

freopen$70:	; PostCall 14

freopen$71:	; GetReturnValue £temporary911

freopen$72:	; Assign handle £temporary911
x20651:	mov [bp + 12], bx	; 3: 137 94 12

freopen$73:	; Goto 130
x20654:	jmp freopen$130	; 3: 233 228 0

freopen$74:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$75:	; Parameter 14 mode 6
x20657:	mov ax, [bp + 8]	; 3: 139 70 8
x20660:	mov [bp + 20], ax	; 3: 137 70 20

freopen$76:	; Parameter 14 string_w2B# 8
x20663:	mov word [bp + 22], string_w2B#	; 5: 199 70 22 1 82

freopen$77:	; Call 14 strcmp 0
x20668:	mov word [bp + 14], freopen$78	; 5: 199 70 14 202 80
x20673:	mov [bp + 16], bp	; 3: 137 110 16
x20676:	add bp, 14	; 3: 131 197 14
x20679:	jmp strcmp	; 3: 233 61 1

freopen$78:	; PostCall 14

freopen$79:	; GetReturnValue £temporary912

freopen$80:	; NotEqual 102 £temporary912 0
x20682:	cmp bx, 0	; 3: 131 251 0
x20685:	jne freopen$102	; 2: 117 80

freopen$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$82:	; Parameter 14 name 6
x20687:	mov ax, [bp + 6]	; 3: 139 70 6
x20690:	mov [bp + 20], ax	; 3: 137 70 20

freopen$83:	; Call 14 fileexists 0
x20693:	mov word [bp + 14], freopen$84	; 5: 199 70 14 227 80
x20698:	mov [bp + 16], bp	; 3: 137 110 16
x20701:	add bp, 14	; 3: 131 197 14
x20704:	jmp fileexists	; 3: 233 110 2

freopen$84:	; PostCall 14

freopen$85:	; GetReturnValue £temporary914

freopen$86:	; Equal 95 £temporary914 0
x20707:	cmp bx, 0	; 3: 131 251 0
x20710:	je freopen$95	; 2: 116 30

freopen$87:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$88:	; Parameter 14 name 6
x20712:	mov ax, [bp + 6]	; 3: 139 70 6
x20715:	mov [bp + 20], ax	; 3: 137 70 20

freopen$89:	; Parameter 14 66 8
x20718:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$90:	; Call 14 fileopen 0
x20722:	mov word [bp + 14], freopen$91	; 5: 199 70 14 0 81
x20727:	mov [bp + 16], bp	; 3: 137 110 16
x20730:	add bp, 14	; 3: 131 197 14
x20733:	jmp @1092$fileopen	; 3: 233 168 1

freopen$91:	; PostCall 14

freopen$92:	; GetReturnValue £temporary915

freopen$93:	; Assign handle £temporary915
x20736:	mov [bp + 12], bx	; 3: 137 94 12

freopen$94:	; Goto 130
x20739:	jmp freopen$130	; 3: 233 143 0

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x20742:	mov ax, [bp + 6]	; 3: 139 70 6
x20745:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Call 14 filecreate 0
x20748:	mov word [bp + 14], freopen$98	; 5: 199 70 14 26 81
x20753:	mov [bp + 16], bp	; 3: 137 110 16
x20756:	add bp, 14	; 3: 131 197 14
x20759:	jmp filecreate	; 3: 233 187 1

freopen$98:	; PostCall 14

freopen$99:	; GetReturnValue £temporary916

freopen$100:	; Assign handle £temporary916
x20762:	mov [bp + 12], bx	; 3: 137 94 12

freopen$101:	; Goto 130
x20765:	jmp freopen$130	; 2: 235 118

freopen$102:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$103:	; Parameter 14 mode 6
x20767:	mov ax, [bp + 8]	; 3: 139 70 8
x20770:	mov [bp + 20], ax	; 3: 137 70 20

freopen$104:	; Parameter 14 string_a2B# 8
x20773:	mov word [bp + 22], string_a2B#	; 5: 199 70 22 4 82

freopen$105:	; Call 14 strcmp 0
x20778:	mov word [bp + 14], freopen$106	; 5: 199 70 14 56 81
x20783:	mov [bp + 16], bp	; 3: 137 110 16
x20786:	add bp, 14	; 3: 131 197 14
x20789:	jmp strcmp	; 3: 233 207 0

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary918

freopen$108:	; NotEqual 130 £temporary918 0
x20792:	cmp bx, 0	; 3: 131 251 0
x20795:	jne freopen$130	; 2: 117 88

freopen$109:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$110:	; Parameter 14 name 6
x20797:	mov ax, [bp + 6]	; 3: 139 70 6
x20800:	mov [bp + 20], ax	; 3: 137 70 20

freopen$111:	; Parameter 14 66 8
x20803:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$112:	; Call 14 fileopen 0
x20807:	mov word [bp + 14], freopen$113	; 5: 199 70 14 85 81
x20812:	mov [bp + 16], bp	; 3: 137 110 16
x20815:	add bp, 14	; 3: 131 197 14
x20818:	jmp @1092$fileopen	; 3: 233 83 1

freopen$113:	; PostCall 14

freopen$114:	; GetReturnValue £temporary920

freopen$115:	; Assign handle £temporary920
x20821:	mov [bp + 12], bx	; 3: 137 94 12

freopen$116:	; Equal 124 handle -1
x20824:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x20828:	je freopen$124	; 2: 116 32

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 stream 6
x20830:	mov ax, [bp + 10]	; 3: 139 70 10
x20833:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 0 8
x20836:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$120:	; Parameter 14 2 10
x20841:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$121:	; Call 14 fseek 0
x20846:	mov word [bp + 14], freopen$122	; 5: 199 70 14 124 81
x20851:	mov [bp + 16], bp	; 3: 137 110 16
x20854:	add bp, 14	; 3: 131 197 14
x20857:	jmp fseek	; 3: 233 138 1

freopen$122:	; PostCall 14

freopen$123:	; Goto 130
x20860:	jmp freopen$130	; 2: 235 23

freopen$124:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$125:	; Parameter 14 name 6
x20862:	mov ax, [bp + 6]	; 3: 139 70 6
x20865:	mov [bp + 20], ax	; 3: 137 70 20

freopen$126:	; Call 14 filecreate 0
x20868:	mov word [bp + 14], freopen$127	; 5: 199 70 14 146 81
x20873:	mov [bp + 16], bp	; 3: 137 110 16
x20876:	add bp, 14	; 3: 131 197 14
x20879:	jmp filecreate	; 3: 233 67 1

freopen$127:	; PostCall 14

freopen$128:	; GetReturnValue £temporary923

freopen$129:	; Assign handle £temporary923
x20882:	mov [bp + 12], bx	; 3: 137 94 12

freopen$130:	; Equal 147 handle -1
x20885:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x20889:	je freopen$147	; 2: 116 76

freopen$131:	; Deref £temporary925 -> stream stream 0
x20891:	mov si, [bp + 10]	; 3: 139 118 10

freopen$132:	; Assign £temporary925 -> stream 1
x20894:	mov word [si], 1	; 4: 199 4 1 0

freopen$133:	; Deref £temporary926 -> stream stream 2
x20898:	mov si, [bp + 10]	; 3: 139 118 10

freopen$134:	; Assign £temporary926 -> stream handle
x20901:	mov ax, [bp + 12]	; 3: 139 70 12
x20904:	mov [si + 2], ax	; 3: 137 68 2

freopen$135:	; Deref £temporary927 -> stream stream 25
x20907:	mov si, [bp + 10]	; 3: 139 118 10

freopen$136:	; Assign £temporary927 -> stream 0
x20910:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$137:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$138:	; Deref £temporary928 -> stream stream 4
x20915:	mov si, [bp + 10]	; 3: 139 118 10

freopen$139:	; Parameter 14 £temporary928 -> stream 6
x20918:	mov [bp + 20], si	; 3: 137 118 20
x20921:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$140:	; Parameter 14 name 8
x20925:	mov ax, [bp + 6]	; 3: 139 70 6
x20928:	mov [bp + 22], ax	; 3: 137 70 22

freopen$141:	; Call 14 strcpy 0
x20931:	mov word [bp + 14], freopen$142	; 5: 199 70 14 209 81
x20936:	mov [bp + 16], bp	; 3: 137 110 16
x20939:	add bp, 14	; 3: 131 197 14
x20942:	jmp strcpy	; 3: 233 158 1

freopen$142:	; PostCall 14

freopen$143:	; Deref £temporary930 -> stream stream 27
x20945:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary930 -> stream 0
x20948:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$145:	; SetReturnValue stream
x20953:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$146:	; Return stream
x20956:	mov ax, [bp]	; 3: 139 70 0
x20959:	mov di, [bp + 4]	; 3: 139 126 4
x20962:	mov bp, [bp + 2]	; 3: 139 110 2
x20965:	jmp ax	; 2: 255 224

freopen$147:	; Deref £temporary931 -> stream stream 0
x20967:	mov si, [bp + 10]	; 3: 139 118 10

freopen$148:	; Assign £temporary931 -> stream 0
x20970:	mov word [si], 0	; 4: 199 4 0 0

freopen$149:	; SetReturnValue 0
x20974:	mov bx, 0	; 3: 187 0 0

freopen$150:	; Return 0
x20977:	mov ax, [bp]	; 3: 139 70 0
x20980:	mov di, [bp + 4]	; 3: 139 126 4
x20983:	mov bp, [bp + 2]	; 3: 139 110 2
x20986:	jmp ax	; 2: 255 224

freopen$151:	; FunctionEnd freopen

string_a#:
x20988:	db "a", 0	; 2: 97 0

string_r2B#:
x20990:	db "r+", 0	; 3: 114 43 0

string_w2B#:
x20993:	db "w+", 0	; 3: 119 43 0

string_a2B#:
x20996:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x20999:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3928 left index
x21004:	mov si, [bp + 6]	; 3: 139 118 6
x21007:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3927 -> £temporary3928 £temporary3928 0

strcmp$3:	; NotEqual 9 £temporary3927 -> £temporary3928 0
x21010:	cmp byte [si], 0	; 3: 128 60 0
x21013:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3931 right index
x21015:	mov si, [bp + 8]	; 3: 139 118 8
x21018:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3930 -> £temporary3931 £temporary3931 0

strcmp$6:	; NotEqual 9 £temporary3930 -> £temporary3931 0
x21021:	cmp byte [si], 0	; 3: 128 60 0
x21024:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x21026:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x21029:	mov ax, [bp]	; 3: 139 70 0
x21032:	mov di, [bp + 4]	; 3: 139 126 4
x21035:	mov bp, [bp + 2]	; 3: 139 110 2
x21038:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3935 left index
x21040:	mov si, [bp + 6]	; 3: 139 118 6
x21043:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3934 -> £temporary3935 £temporary3935 0

strcmp$11:	; NotEqual 14 £temporary3934 -> £temporary3935 0
x21046:	cmp byte [si], 0	; 3: 128 60 0
x21049:	jne strcmp$14	; 2: 117 14

strcmp$12:	; SetReturnValue -1
x21051:	mov bx, -1	; 3: 187 255 255

strcmp$13:	; Return -1
x21054:	mov ax, [bp]	; 3: 139 70 0
x21057:	mov di, [bp + 4]	; 3: 139 126 4
x21060:	mov bp, [bp + 2]	; 3: 139 110 2
x21063:	jmp ax	; 2: 255 224

strcmp$14:	; BinaryAdd £temporary3938 right index
x21065:	mov si, [bp + 8]	; 3: 139 118 8
x21068:	add si, [bp + 10]	; 3: 3 118 10

strcmp$15:	; Deref £temporary3937 -> £temporary3938 £temporary3938 0

strcmp$16:	; NotEqual 19 £temporary3937 -> £temporary3938 0
x21071:	cmp byte [si], 0	; 3: 128 60 0
x21074:	jne strcmp$19	; 2: 117 14

strcmp$17:	; SetReturnValue 1
x21076:	mov bx, 1	; 3: 187 1 0

strcmp$18:	; Return 1
x21079:	mov ax, [bp]	; 3: 139 70 0
x21082:	mov di, [bp + 4]	; 3: 139 126 4
x21085:	mov bp, [bp + 2]	; 3: 139 110 2
x21088:	jmp ax	; 2: 255 224

strcmp$19:	; BinaryAdd £temporary3941 left index
x21090:	mov si, [bp + 6]	; 3: 139 118 6
x21093:	add si, [bp + 10]	; 3: 3 118 10

strcmp$20:	; Deref £temporary3940 -> £temporary3941 £temporary3941 0

strcmp$21:	; BinaryAdd £temporary3943 right index
x21096:	mov di, [bp + 8]	; 3: 139 126 8
x21099:	add di, [bp + 10]	; 3: 3 126 10

strcmp$22:	; Deref £temporary3942 -> £temporary3943 £temporary3943 0

strcmp$23:	; SignedGreaterThanEqual 26 £temporary3940 -> £temporary3941 £temporary3942 -> £temporary3943
x21102:	mov al, [di]	; 2: 138 5
x21104:	cmp [si], al	; 2: 56 4
x21106:	jge strcmp$26	; 2: 125 14

strcmp$24:	; SetReturnValue -1
x21108:	mov bx, -1	; 3: 187 255 255

strcmp$25:	; Return -1
x21111:	mov ax, [bp]	; 3: 139 70 0
x21114:	mov di, [bp + 4]	; 3: 139 126 4
x21117:	mov bp, [bp + 2]	; 3: 139 110 2
x21120:	jmp ax	; 2: 255 224

strcmp$26:	; BinaryAdd £temporary3946 left index
x21122:	mov si, [bp + 6]	; 3: 139 118 6
x21125:	add si, [bp + 10]	; 3: 3 118 10

strcmp$27:	; Deref £temporary3945 -> £temporary3946 £temporary3946 0

strcmp$28:	; BinaryAdd £temporary3948 right index
x21128:	mov di, [bp + 8]	; 3: 139 126 8
x21131:	add di, [bp + 10]	; 3: 3 126 10

strcmp$29:	; Deref £temporary3947 -> £temporary3948 £temporary3948 0

strcmp$30:	; SignedLessThanEqual 33 £temporary3945 -> £temporary3946 £temporary3947 -> £temporary3948
x21134:	mov al, [di]	; 2: 138 5
x21136:	cmp [si], al	; 2: 56 4
x21138:	jle strcmp$33	; 2: 126 14

strcmp$31:	; SetReturnValue 1
x21140:	mov bx, 1	; 3: 187 1 0

strcmp$32:	; Return 1
x21143:	mov ax, [bp]	; 3: 139 70 0
x21146:	mov di, [bp + 4]	; 3: 139 126 4
x21149:	mov bp, [bp + 2]	; 3: 139 110 2
x21152:	jmp ax	; 2: 255 224

strcmp$33:	; Increment index
x21154:	inc word [bp + 10]	; 3: 255 70 10

strcmp$34:	; Goto 1
x21157:	jmp strcmp$1	; 3: 233 100 255

strcmp$35:	; FunctionEnd strcmp

@1092$fileopen:	; AssignRegister ah 61
x21160:	mov ah, 61	; 2: 180 61

@1092$fileopen$1:	; AssignRegister al mode
x21162:	mov al, [bp + 8]	; 3: 138 70 8

@1092$fileopen$2:	; AssignRegister dx name
x21165:	mov dx, [bp + 6]	; 3: 139 86 6

@1092$fileopen$3:	; Interrupt 33
x21168:	int 33	; 2: 205 33

@1092$fileopen$4:	; NotCarry 8
x21170:	jnc @1092$fileopen$8	; 2: 115 20

@1092$fileopen$5:	; Assign errno 9
x21172:	mov word [errno], 9	; 6: 199 6 182 10 9 0

@1092$fileopen$6:	; SetReturnValue -1
x21178:	mov bx, -1	; 3: 187 255 255

@1092$fileopen$7:	; Return -1
x21181:	mov ax, [bp]	; 3: 139 70 0
x21184:	mov di, [bp + 4]	; 3: 139 126 4
x21187:	mov bp, [bp + 2]	; 3: 139 110 2
x21190:	jmp ax	; 2: 255 224

@1092$fileopen$8:	; InspectRegister £temporary881 ax

@1092$fileopen$9:	; SetReturnValue £temporary881
x21192:	mov bx, ax	; 2: 137 195

@1092$fileopen$10:	; Return £temporary881
x21194:	mov ax, [bp]	; 3: 139 70 0
x21197:	mov di, [bp + 4]	; 3: 139 126 4
x21200:	mov bp, [bp + 2]	; 3: 139 110 2
x21203:	jmp ax	; 2: 255 224

@1092$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x21205:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x21207:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x21210:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x21213:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary863 ax

filecreate$5:	; Assign handle £temporary863
x21215:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x21218:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x21220:	mov word [errno], 9	; 6: 199 6 182 10 9 0

filecreate$8:	; SetReturnValue -1
x21226:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x21229:	mov ax, [bp]	; 3: 139 70 0
x21232:	mov di, [bp + 4]	; 3: 139 126 4
x21235:	mov bp, [bp + 2]	; 3: 139 110 2
x21238:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x21240:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x21243:	mov ax, [bp]	; 3: 139 70 0
x21246:	mov di, [bp + 4]	; 3: 139 126 4
x21249:	mov bp, [bp + 2]	; 3: 139 110 2
x21252:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary1104 origin
x21254:	mov ax, [bp + 10]	; 3: 139 70 10
x21257:	cmp ax, 0	; 3: 131 248 0
x21260:	jge fseek$1	; 2: 125 4
x21262:	neg ax	; 2: 247 216
x21264:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary1104

fseek$2:	; AssignRegister ah 66
x21266:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary1107 -> stream stream 2
x21268:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary1107 -> stream
x21271:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x21274:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary1110 offset
x21277:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary1110

fseek$8:	; Interrupt 33
x21280:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x21282:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary1113 -> stream stream 23
x21284:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary1114 ax

fseek$12:	; Assign £temporary1113 -> stream £temporary1114
x21287:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary1115 -> stream stream 23
x21290:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary1115 -> stream
x21293:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary1115 -> stream
x21296:	mov ax, [bp]	; 3: 139 70 0
x21299:	mov di, [bp + 4]	; 3: 139 126 4
x21302:	mov bp, [bp + 2]	; 3: 139 110 2
x21305:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary1116 -> stream stream 21
x21307:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary1116 -> stream 15
x21310:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x21315:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x21318:	mov ax, [bp]	; 3: 139 70 0
x21321:	mov di, [bp + 4]	; 3: 139 126 4
x21324:	mov bp, [bp + 2]	; 3: 139 110 2
x21327:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x21329:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x21331:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x21333:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x21336:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x21338:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary876 1
x21340:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x21343:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary876 0
x21345:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary876

fileexists$9:	; Return £temporary876
x21348:	mov ax, [bp]	; 3: 139 70 0
x21351:	mov di, [bp + 4]	; 3: 139 126 4
x21354:	mov bp, [bp + 2]	; 3: 139 110 2
x21357:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x21359:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3871 source index
x21364:	mov si, [bp + 8]	; 3: 139 118 8
x21367:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3870 -> £temporary3871 £temporary3871 0

strcpy$3:	; Equal 11 £temporary3870 -> £temporary3871 0
x21370:	cmp byte [si], 0	; 3: 128 60 0
x21373:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3875 target index
x21375:	mov si, [bp + 6]	; 3: 139 118 6
x21378:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3874 -> £temporary3875 £temporary3875 0

strcpy$6:	; BinaryAdd £temporary3877 source index
x21381:	mov di, [bp + 8]	; 3: 139 126 8
x21384:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3876 -> £temporary3877 £temporary3877 0

strcpy$8:	; Assign £temporary3874 -> £temporary3875 £temporary3876 -> £temporary3877
x21387:	mov al, [di]	; 2: 138 5
x21389:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x21391:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x21394:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3879 target index
x21396:	mov si, [bp + 6]	; 3: 139 118 6
x21399:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3878 -> £temporary3879 £temporary3879 0

strcpy$13:	; Assign £temporary3878 -> £temporary3879 0
x21402:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x21405:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x21408:	mov ax, [bp]	; 3: 139 70 0
x21411:	mov di, [bp + 4]	; 3: 139 126 4
x21414:	mov bp, [bp + 2]	; 3: 139 110 2
x21417:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2360 format
x21419:	mov si, bp	; 2: 137 238
x21421:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2361 £temporary2360

fprintf$2:	; BinaryAdd arg_list £temporary2361 2
x21424:	add si, 2	; 3: 131 198 2
x21427:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x21430:	mov ax, [bp + 6]	; 3: 139 70 6
x21433:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x21436:	mov ax, [bp + 8]	; 3: 139 70 8
x21439:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x21442:	mov ax, [di + 10]	; 3: 139 69 10
x21445:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x21448:	mov word [di + 12], fprintf$8	; 5: 199 69 12 219 83
x21453:	mov [di + 14], bp	; 3: 137 109 14
x21456:	mov [di + 16], di	; 3: 137 125 16
x21459:	add di, 12	; 3: 131 199 12
x21462:	mov bp, di	; 2: 137 253
x21464:	jmp vfprintf	; 3: 233 144 187

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2363

fprintf$10:	; SetReturnValue £temporary2363

fprintf$11:	; Return £temporary2363
x21467:	mov ax, [bp]	; 3: 139 70 0
x21470:	mov di, [bp + 4]	; 3: 139 126 4
x21473:	mov bp, [bp + 2]	; 3: 139 110 2
x21476:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x21478:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x21480:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x21482:	int 33	; 2: 205 33

abort$3:	; Return 0
x21484:	mov ax, [bp]	; 3: 139 70 0
x21487:	mov di, [bp + 4]	; 3: 139 126 4
x21490:	mov bp, [bp + 2]	; 3: 139 110 2
x21493:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x21495:	mov ax, [bp + 6]	; 3: 139 70 6
x21498:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x21501:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x21506:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x21511:	mov word [bp + 8], feof$5	; 5: 199 70 8 21 84
x21516:	mov [bp + 10], bp	; 3: 137 110 10
x21519:	add bp, 8	; 3: 131 197 8
x21522:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary1137

feof$7:	; IntegralToIntegral £temporary1138 £temporary1137
x21525:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary1138
x21532:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x21536:	mov ax, [bp + 6]	; 3: 139 70 6
x21539:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x21542:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x21547:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x21552:	mov word [bp + 12], feof$14	; 5: 199 70 12 62 84
x21557:	mov [bp + 14], bp	; 3: 137 110 14
x21560:	add bp, 12	; 3: 131 197 12
x21563:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary1139

feof$16:	; IntegralToIntegral £temporary1140 £temporary1139
x21566:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary1140
x21573:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x21577:	mov ax, [bp + 6]	; 3: 139 70 6
x21580:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary1141 currPosition
x21583:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary1141 8
x21587:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x21590:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x21595:	mov word [bp + 16], feof$24	; 5: 199 70 16 105 84
x21600:	mov [bp + 18], bp	; 3: 137 110 18
x21603:	add bp, 16	; 3: 131 197 16
x21606:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x21609:	mov eax, [bp + 12]	; 4: 102 139 70 12
x21613:	cmp [bp + 8], eax	; 4: 102 57 70 8
x21617:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary1144 1
x21619:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x21622:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary1144 0
x21624:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary1144
x21627:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x21630:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x21633:	mov ax, [bp]	; 3: 139 70 0
x21636:	mov di, [bp + 4]	; 3: 139 126 4
x21639:	mov bp, [bp + 2]	; 3: 139 110 2
x21642:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1719 format
x21644:	mov si, bp	; 2: 137 238
x21646:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1720 £temporary1719

fscanf$2:	; BinaryAdd arg_list £temporary1720 2
x21649:	add si, 2	; 3: 131 198 2
x21652:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x21655:	mov ax, [bp + 6]	; 3: 139 70 6
x21658:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x21661:	mov ax, [bp + 8]	; 3: 139 70 8
x21664:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x21667:	mov ax, [di + 10]	; 3: 139 69 10
x21670:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x21673:	mov word [di + 12], fscanf$8	; 5: 199 69 12 188 84
x21678:	mov [di + 14], bp	; 3: 137 109 14
x21681:	mov [di + 16], di	; 3: 137 125 16
x21684:	add di, 12	; 3: 131 199 12
x21687:	mov bp, di	; 2: 137 253
x21689:	nop	; 1: 144
x21690:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1722

fscanf$10:	; SetReturnValue £temporary1722

fscanf$11:	; Return £temporary1722
x21692:	mov ax, [bp]	; 3: 139 70 0
x21695:	mov di, [bp + 4]	; 3: 139 126 4
x21698:	mov bp, [bp + 2]	; 3: 139 110 2
x21701:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x21703:	mov word [g_inStatus], 0	; 6: 199 6 248 84 0 0

vfscanf$1:	; IntegralToIntegral £temporary1727 inStream
x21709:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1727
x21712:	mov [g_inDevice], ax	; 3: 163 250 84

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x21715:	mov ax, [bp + 8]	; 3: 139 70 8
x21718:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x21721:	mov ax, [bp + 10]	; 3: 139 70 10
x21724:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x21727:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 237 84
x21732:	mov [bp + 14], bp	; 3: 137 110 14
x21735:	add bp, 12	; 3: 131 197 12
x21738:	nop	; 1: 144
x21739:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1728

vfscanf$9:	; SetReturnValue £temporary1728

vfscanf$10:	; Return £temporary1728
x21741:	mov ax, [bp]	; 3: 139 70 0
x21744:	mov di, [bp + 4]	; 3: 139 126 4
x21747:	mov bp, [bp + 2]	; 3: 139 110 2
x21750:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x21752:	db 0, 0	; 2: 0 0

g_inDevice:
x21754:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x21756:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x21761:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x21766:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x21771:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x21776:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x21781:	mov word [g_inCount], 0	; 6: 199 6 28 90 0 0

scanFormat$6:	; Assign g_inChars 0
x21787:	mov word [g_inChars], 0	; 6: 199 6 30 90 0 0

scanFormat$7:	; Assign index 0
x21793:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1517 format index
x21798:	mov si, [bp + 6]	; 3: 139 118 6
x21801:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1516 -> £temporary1517 £temporary1517 0

scanFormat$10:	; Equal 327 £temporary1516 -> £temporary1517 0
x21804:	cmp byte [si], 0	; 3: 128 60 0
x21807:	je scanFormat$327	; 4: 15 132 218 4

scanFormat$11:	; BinaryAdd £temporary1521 format index
x21811:	mov si, [bp + 6]	; 3: 139 118 6
x21814:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1520 -> £temporary1521 £temporary1521 0

scanFormat$13:	; Assign c £temporary1520 -> £temporary1521
x21817:	mov al, [si]	; 2: 138 4
x21819:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1522 c
x21822:	mov al, [bp + 10]	; 3: 138 70 10
x21825:	and ax, 255	; 3: 37 255 0
x21828:	cmp al, 0	; 2: 60 0
x21830:	jge scanFormat$15	; 2: 125 4
x21832:	neg al	; 2: 246 216
x21834:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1522 1
x21836:	inc ax	; 1: 64
x21837:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 319 percent 0
x21840:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x21844:	je scanFormat$319	; 4: 15 132 144 4

scanFormat$17:	; BinarySubtract £temporary1524 d 1
x21848:	mov ax, [bp + 55]	; 3: 139 70 55
x21851:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1524 104
x21852:	cmp ax, 104	; 3: 131 248 104
x21855:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1524 108
x21857:	cmp ax, 108	; 3: 131 248 108
x21860:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1524 76
x21862:	cmp ax, 76	; 3: 131 248 76
x21865:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1524 42
x21867:	cmp ax, 42	; 3: 131 248 42
x21870:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1524 99
x21872:	cmp ax, 99	; 3: 131 248 99
x21875:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1524 115
x21877:	cmp ax, 115	; 3: 131 248 115
x21880:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1524 100
x21884:	cmp ax, 100	; 3: 131 248 100
x21887:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1524 105
x21891:	cmp ax, 105	; 3: 131 248 105
x21894:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1524 111
x21898:	cmp ax, 111	; 3: 131 248 111
x21901:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1524 120
x21905:	cmp ax, 120	; 3: 131 248 120
x21908:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1524 117
x21912:	cmp ax, 117	; 3: 131 248 117
x21915:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1524 103
x21919:	cmp ax, 103	; 3: 131 248 103
x21922:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1524 102
x21926:	cmp ax, 102	; 3: 131 248 102
x21929:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1524 101
x21933:	cmp ax, 101	; 3: 131 248 101
x21936:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1524 91
x21940:	cmp ax, 91	; 3: 131 248 91
x21943:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 303 £temporary1524 110
x21947:	cmp ax, 110	; 3: 131 248 110
x21950:	je scanFormat$303	; 4: 15 132 221 3

scanFormat$34:	; CaseEnd £temporary1524

scanFormat$35:	; Goto 312
x21954:	jmp scanFormat$312	; 3: 233 248 3

scanFormat$36:	; Assign shortInt 1
x21957:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 325
x21962:	jmp scanFormat$325	; 3: 233 58 4

scanFormat$38:	; Assign longIntOrDouble 1
x21965:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 325
x21970:	jmp scanFormat$325	; 3: 233 50 4

scanFormat$40:	; Assign longDouble 1
x21973:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 325
x21978:	jmp scanFormat$325	; 3: 233 42 4

scanFormat$42:	; Assign star 1
x21981:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 325
x21986:	jmp scanFormat$325	; 3: 233 34 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x21989:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 243 85
x21994:	mov [bp + 59], bp	; 3: 137 110 59
x21997:	add bp, 57	; 3: 131 197 57
x22000:	jmp scanChar	; 3: 233 66 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1525

scanFormat$48:	; Assign charValue £temporary1525
x22003:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x22006:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22010:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x22012:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1529 arg_list 2
x22016:	mov si, [bp + 8]	; 3: 139 118 8
x22019:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1530 £temporary1529

scanFormat$53:	; Deref £temporary1531 -> £temporary1530 £temporary1530 0

scanFormat$54:	; Assign charPtr £temporary1531 -> £temporary1530
x22022:	mov ax, [si]	; 2: 139 4
x22024:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1532 -> charPtr charPtr 0
x22027:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1532 -> charPtr charValue
x22030:	mov al, [bp + 57]	; 3: 138 70 57
x22033:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x22035:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1533 charValue
x22040:	mov al, [bp + 57]	; 3: 138 70 57
x22043:	and ax, 255	; 3: 37 255 0
x22046:	cmp al, 0	; 2: 60 0
x22048:	jge scanFormat$59	; 2: 125 4
x22050:	neg al	; 2: 246 216
x22052:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 325 £temporary1533 -1
x22054:	cmp ax, -1	; 3: 131 248 255
x22057:	je scanFormat$325	; 4: 15 132 218 3

scanFormat$60:	; Increment g_inCount
x22061:	inc word [g_inCount]	; 4: 255 6 28 90

scanFormat$61:	; Goto 325
x22065:	jmp scanFormat$325	; 3: 233 211 3

scanFormat$62:	; NotEqual 74 star 0
x22068:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22072:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x22074:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1539 arg_list 2
x22078:	mov si, [bp + 8]	; 3: 139 118 8
x22081:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1540 £temporary1539

scanFormat$66:	; Deref £temporary1541 -> £temporary1540 £temporary1540 0

scanFormat$67:	; Assign charPtr £temporary1541 -> £temporary1540
x22084:	mov ax, [si]	; 2: 139 4
x22086:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x22089:	mov ax, [bp + 11]	; 3: 139 70 11
x22092:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x22095:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x22100:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 98 86
x22105:	mov [bp + 59], bp	; 3: 137 110 59
x22108:	add bp, 57	; 3: 131 197 57
x22111:	jmp scanString	; 3: 233 66 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x22114:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x22116:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x22121:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x22126:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 124 86
x22131:	mov [bp + 59], bp	; 3: 137 110 59
x22134:	add bp, 57	; 3: 131 197 57
x22137:	jmp scanString	; 3: 233 40 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x22140:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 325
x22145:	jmp scanFormat$325	; 3: 233 131 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x22148:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x22153:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 151 86
x22158:	mov [bp + 59], bp	; 3: 137 110 59
x22161:	add bp, 57	; 3: 131 197 57
x22164:	jmp scanLongInt	; 3: 233 145 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1544

scanFormat$86:	; Assign longValue £temporary1544
x22167:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x22171:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22175:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x22177:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x22181:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x22183:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1548 arg_list 2
x22187:	mov si, [bp + 8]	; 3: 139 118 8
x22190:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1549 £temporary1548

scanFormat$92:	; Deref £temporary1550 -> £temporary1549 £temporary1549 0

scanFormat$93:	; Assign shortPtr £temporary1550 -> £temporary1549
x22193:	mov ax, [si]	; 2: 139 4
x22195:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1551 -> shortPtr shortPtr 0
x22198:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1552 longValue
x22201:	mov eax, [bp + 23]	; 4: 102 139 70 23
x22205:	cmp eax, 0	; 4: 102 131 248 0
x22209:	jge scanFormat$96	; 2: 125 5
x22211:	neg eax	; 3: 102 247 216
x22214:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1551 -> shortPtr £temporary1552
x22216:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x22218:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x22220:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x22224:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x22226:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1556 arg_list 2
x22230:	mov si, [bp + 8]	; 3: 139 118 8
x22233:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1557 £temporary1556

scanFormat$102:	; Deref £temporary1558 -> £temporary1557 £temporary1557 0

scanFormat$103:	; Assign intPtr £temporary1558 -> £temporary1557
x22236:	mov ax, [si]	; 2: 139 4
x22238:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1559 -> intPtr intPtr 0
x22241:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1560 longValue
x22244:	mov eax, [bp + 23]	; 4: 102 139 70 23
x22248:	cmp eax, 0	; 4: 102 131 248 0
x22252:	jge scanFormat$106	; 2: 125 5
x22254:	neg eax	; 3: 102 247 216
x22257:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1559 -> intPtr £temporary1560
x22259:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x22261:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x22263:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1562 arg_list 2
x22267:	mov si, [bp + 8]	; 3: 139 118 8
x22270:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1563 £temporary1562

scanFormat$111:	; Deref £temporary1564 -> £temporary1563 £temporary1563 0

scanFormat$112:	; Assign longPtr £temporary1564 -> £temporary1563
x22273:	mov ax, [si]	; 2: 139 4
x22275:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1565 -> longPtr longPtr 0
x22278:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1565 -> longPtr longValue
x22281:	mov eax, [bp + 23]	; 4: 102 139 70 23
x22285:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x22288:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 325
x22293:	jmp scanFormat$325	; 3: 233 239 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x22296:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x22301:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 43 87
x22306:	mov [bp + 59], bp	; 3: 137 110 59
x22309:	add bp, 57	; 3: 131 197 57
x22312:	jmp scanUnsignedLongInt	; 3: 233 55 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1567

scanFormat$122:	; Assign unsignedLongValue £temporary1567
x22315:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x22319:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22323:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x22325:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x22329:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x22331:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1571 arg_list 2
x22335:	mov si, [bp + 8]	; 3: 139 118 8
x22338:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1572 £temporary1571

scanFormat$128:	; Deref £temporary1573 -> £temporary1572 £temporary1572 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1573 -> £temporary1572
x22341:	mov ax, [si]	; 2: 139 4
x22343:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1574 -> unsignedShortPtr unsignedShortPtr 0
x22346:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1575 unsignedLongValue
x22349:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1574 -> unsignedShortPtr £temporary1575
x22353:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x22355:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x22357:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x22361:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x22363:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1579 arg_list 2
x22367:	mov si, [bp + 8]	; 3: 139 118 8
x22370:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1580 £temporary1579

scanFormat$138:	; Deref £temporary1581 -> £temporary1580 £temporary1580 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1581 -> £temporary1580
x22373:	mov ax, [si]	; 2: 139 4
x22375:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1582 -> unsignedIntPtr unsignedIntPtr 0
x22378:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1583 unsignedLongValue
x22381:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1582 -> unsignedIntPtr £temporary1583
x22385:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x22387:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x22389:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1585 arg_list 2
x22393:	mov si, [bp + 8]	; 3: 139 118 8
x22396:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1586 £temporary1585

scanFormat$147:	; Deref £temporary1587 -> £temporary1586 £temporary1586 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1587 -> £temporary1586
x22399:	mov ax, [si]	; 2: 139 4
x22401:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1588 -> unsignedLongPtr unsignedLongPtr 0
x22404:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1588 -> unsignedLongPtr unsignedLongValue
x22407:	mov eax, [bp + 37]	; 4: 102 139 70 37
x22411:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x22414:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 325
x22419:	jmp scanFormat$325	; 3: 233 113 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x22422:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x22427:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 169 87
x22432:	mov [bp + 59], bp	; 3: 137 110 59
x22435:	add bp, 57	; 3: 131 197 57
x22438:	jmp scanUnsignedLongInt	; 3: 233 185 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1590

scanFormat$158:	; Assign unsignedLongValue £temporary1590
x22441:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x22445:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22449:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x22451:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x22455:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x22457:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1594 arg_list 2
x22461:	mov si, [bp + 8]	; 3: 139 118 8
x22464:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1595 £temporary1594

scanFormat$164:	; Deref £temporary1596 -> £temporary1595 £temporary1595 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1596 -> £temporary1595
x22467:	mov ax, [si]	; 2: 139 4
x22469:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1597 -> unsignedShortPtr unsignedShortPtr 0
x22472:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1598 unsignedLongValue
x22475:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1597 -> unsignedShortPtr £temporary1598
x22479:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x22481:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x22483:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x22487:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x22489:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1602 arg_list 2
x22493:	mov si, [bp + 8]	; 3: 139 118 8
x22496:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1603 £temporary1602

scanFormat$174:	; Deref £temporary1604 -> £temporary1603 £temporary1603 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1604 -> £temporary1603
x22499:	mov ax, [si]	; 2: 139 4
x22501:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1605 -> unsignedIntPtr unsignedIntPtr 0
x22504:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1606 unsignedLongValue
x22507:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1605 -> unsignedIntPtr £temporary1606
x22511:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x22513:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x22515:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1608 arg_list 2
x22519:	mov si, [bp + 8]	; 3: 139 118 8
x22522:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1609 £temporary1608

scanFormat$183:	; Deref £temporary1610 -> £temporary1609 £temporary1609 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1610 -> £temporary1609
x22525:	mov ax, [si]	; 2: 139 4
x22527:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1611 -> unsignedLongPtr unsignedLongPtr 0
x22530:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1611 -> unsignedLongPtr unsignedLongValue
x22533:	mov eax, [bp + 37]	; 4: 102 139 70 37
x22537:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x22540:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 325
x22545:	jmp scanFormat$325	; 3: 233 243 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x22548:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x22553:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 39 88
x22558:	mov [bp + 59], bp	; 3: 137 110 59
x22561:	add bp, 57	; 3: 131 197 57
x22564:	jmp scanUnsignedLongInt	; 3: 233 59 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1613

scanFormat$194:	; Assign unsignedLongValue £temporary1613
x22567:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x22571:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22575:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x22577:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x22581:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x22583:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1617 arg_list 2
x22587:	mov si, [bp + 8]	; 3: 139 118 8
x22590:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1618 £temporary1617

scanFormat$200:	; Deref £temporary1619 -> £temporary1618 £temporary1618 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1619 -> £temporary1618
x22593:	mov ax, [si]	; 2: 139 4
x22595:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1620 -> unsignedShortPtr unsignedShortPtr 0
x22598:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1621 unsignedLongValue
x22601:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1620 -> unsignedShortPtr £temporary1621
x22605:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x22607:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x22609:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x22613:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x22615:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1625 arg_list 2
x22619:	mov si, [bp + 8]	; 3: 139 118 8
x22622:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1626 £temporary1625

scanFormat$210:	; Deref £temporary1627 -> £temporary1626 £temporary1626 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1627 -> £temporary1626
x22625:	mov ax, [si]	; 2: 139 4
x22627:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1628 -> unsignedIntPtr unsignedIntPtr 0
x22630:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1629 unsignedLongValue
x22633:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1628 -> unsignedIntPtr £temporary1629
x22637:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x22639:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x22641:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1631 arg_list 2
x22645:	mov si, [bp + 8]	; 3: 139 118 8
x22648:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1632 £temporary1631

scanFormat$219:	; Deref £temporary1633 -> £temporary1632 £temporary1632 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1633 -> £temporary1632
x22651:	mov ax, [si]	; 2: 139 4
x22653:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1634 -> unsignedLongPtr unsignedLongPtr 0
x22656:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1634 -> unsignedLongPtr unsignedLongValue
x22659:	mov eax, [bp + 37]	; 4: 102 139 70 37
x22663:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x22666:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 325
x22671:	jmp scanFormat$325	; 3: 233 117 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x22674:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 160 88
x22679:	mov [bp + 59], bp	; 3: 137 110 59
x22682:	add bp, 57	; 3: 131 197 57
x22685:	jmp scanLongDouble	; 3: 233 46 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1636

scanFormat$229:	; PopFloat longDoubleValue
x22688:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x22691:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22695:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x22697:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x22701:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x22703:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1640 arg_list 2
x22707:	mov si, [bp + 8]	; 3: 139 118 8
x22710:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1641 £temporary1640

scanFormat$235:	; Deref £temporary1642 -> £temporary1641 £temporary1641 0

scanFormat$236:	; Assign doublePtr £temporary1642 -> £temporary1641
x22713:	mov ax, [si]	; 2: 139 4
x22715:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1643 -> doublePtr doublePtr 0
x22718:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x22721:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1643 -> doublePtr
x22724:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x22726:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x22728:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x22732:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x22734:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1646 arg_list 2
x22738:	mov si, [bp + 8]	; 3: 139 118 8
x22741:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1647 £temporary1646

scanFormat$245:	; Deref £temporary1648 -> £temporary1647 £temporary1647 0

scanFormat$246:	; Assign longDoublePtr £temporary1648 -> £temporary1647
x22744:	mov ax, [si]	; 2: 139 4
x22746:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1649 -> longDoublePtr longDoublePtr 0
x22749:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x22752:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1649 -> longDoublePtr
x22755:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x22757:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x22759:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1651 arg_list 2
x22763:	mov si, [bp + 8]	; 3: 139 118 8
x22766:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1652 £temporary1651

scanFormat$254:	; Deref £temporary1653 -> £temporary1652 £temporary1652 0

scanFormat$255:	; Assign floatPtr £temporary1653 -> £temporary1652
x22769:	mov ax, [si]	; 2: 139 4
x22771:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1654 -> floatPtr floatPtr 0
x22774:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x22777:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1654 -> floatPtr
x22780:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x22782:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 325
x22787:	jmp scanFormat$325	; 3: 233 1 1

scanFormat$261:	; Assign not 0
x22790:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x22795:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1660 format index
x22798:	mov si, [bp + 6]	; 3: 139 118 6
x22801:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1659 -> £temporary1660 £temporary1660 0

scanFormat$265:	; NotEqual 268 £temporary1659 -> £temporary1660 94
x22804:	cmp byte [si], 94	; 3: 128 60 94
x22807:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x22809:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x22814:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x22817:	mov ax, [bp + 31]	; 3: 139 70 31
x22820:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1664 format index
x22823:	mov si, [bp + 6]	; 3: 139 118 6
x22826:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1663 -> £temporary1664 £temporary1664 0

scanFormat$271:	; Equal 274 £temporary1663 -> £temporary1664 93
x22829:	cmp byte [si], 93	; 3: 128 60 93
x22832:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x22834:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x22837:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinaryAdd £temporary1668 format index
x22839:	mov si, [bp + 6]	; 3: 139 118 6
x22842:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$275:	; Deref £temporary1667 -> £temporary1668 £temporary1668 0

scanFormat$276:	; Assign £temporary1667 -> £temporary1668 0
x22845:	mov byte [si], 0	; 3: 198 4 0

scanFormat$277:	; NotEqual 293 star 0
x22848:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x22852:	jne scanFormat$293	; 2: 117 53

scanFormat$278:	; BinaryAdd arg_list arg_list 2
x22854:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$279:	; BinarySubtract £temporary1672 arg_list 2
x22858:	mov si, [bp + 8]	; 3: 139 118 8
x22861:	sub si, 2	; 3: 131 238 2

scanFormat$280:	; IntegralToIntegral £temporary1673 £temporary1672

scanFormat$281:	; Deref £temporary1674 -> £temporary1673 £temporary1673 0

scanFormat$282:	; Assign string £temporary1674 -> £temporary1673
x22864:	mov ax, [si]	; 2: 139 4
x22866:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$283:	; CallHeader 63 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$284:	; Parameter 63 string 6
x22869:	mov ax, [bp + 61]	; 3: 139 70 61
x22872:	mov [bp + 69], ax	; 3: 137 70 69

scanFormat$285:	; BinaryAdd £temporary1676 format startIndex
x22875:	mov si, [bp + 6]	; 3: 139 118 6
x22878:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$286:	; Deref £temporary1675 -> £temporary1676 £temporary1676 0

scanFormat$287:	; address £temporary1677 £temporary1675 -> £temporary1676

scanFormat$288:	; Parameter 63 £temporary1677 8
x22881:	mov [bp + 71], si	; 3: 137 118 71

scanFormat$289:	; Parameter 63 not 10
x22884:	mov ax, [bp + 57]	; 3: 139 70 57
x22887:	mov [bp + 73], ax	; 3: 137 70 73

scanFormat$290:	; Call 63 scanPattern 0
x22890:	mov word [bp + 63], scanFormat$291	; 5: 199 70 63 120 89
x22895:	mov [bp + 65], bp	; 3: 137 110 65
x22898:	add bp, 63	; 3: 131 197 63
x22901:	jmp scanPattern	; 3: 233 121 11

scanFormat$291:	; PostCall 63

scanFormat$292:	; Goto 325
x22904:	jmp scanFormat$325	; 3: 233 140 0

scanFormat$293:	; CallHeader 61 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$294:	; Parameter 61 0 6
x22907:	mov word [bp + 67], 0	; 5: 199 70 67 0 0

scanFormat$295:	; BinaryAdd £temporary1680 format startIndex
x22912:	mov si, [bp + 6]	; 3: 139 118 6
x22915:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$296:	; Deref £temporary1679 -> £temporary1680 £temporary1680 0

scanFormat$297:	; address £temporary1681 £temporary1679 -> £temporary1680

scanFormat$298:	; Parameter 61 £temporary1681 8
x22918:	mov [bp + 69], si	; 3: 137 118 69

scanFormat$299:	; Parameter 61 not 10
x22921:	mov ax, [bp + 57]	; 3: 139 70 57
x22924:	mov [bp + 71], ax	; 3: 137 70 71

scanFormat$300:	; Call 61 scanPattern 0
x22927:	mov word [bp + 61], scanFormat$301	; 5: 199 70 61 157 89
x22932:	mov [bp + 63], bp	; 3: 137 110 63
x22935:	add bp, 61	; 3: 131 197 61
x22938:	jmp scanPattern	; 3: 233 84 11

scanFormat$301:	; PostCall 61

scanFormat$302:	; Goto 325
x22941:	jmp scanFormat$325	; 2: 235 104

scanFormat$303:	; BinaryAdd arg_list arg_list 2
x22943:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$304:	; BinarySubtract £temporary1684 arg_list 2
x22947:	mov si, [bp + 8]	; 3: 139 118 8
x22950:	sub si, 2	; 3: 131 238 2

scanFormat$305:	; IntegralToIntegral £temporary1685 £temporary1684

scanFormat$306:	; Deref £temporary1686 -> £temporary1685 £temporary1685 0

scanFormat$307:	; Assign charsPtr £temporary1686 -> £temporary1685
x22953:	mov ax, [si]	; 2: 139 4
x22955:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$308:	; Deref £temporary1687 -> charsPtr charsPtr 0
x22958:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$309:	; Assign £temporary1687 -> charsPtr g_inChars
x22961:	mov ax, [g_inChars]	; 3: 161 30 90
x22964:	mov [si], ax	; 2: 137 4

scanFormat$310:	; Assign percent 0
x22966:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$311:	; Goto 325
x22971:	jmp scanFormat$325	; 2: 235 74

scanFormat$312:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$313:	; Parameter 57 string_scanFormat20c203D202725c270A# 6
x22973:	mov word [bp + 63], string_scanFormat20c203D202725c270A#	; 5: 199 70 63 32 90

scanFormat$314:	; IntegralToIntegral £temporary1688 c
x22978:	mov al, [bp + 10]	; 3: 138 70 10
x22981:	and ax, 255	; 3: 37 255 0
x22984:	cmp al, 0	; 2: 60 0
x22986:	jge scanFormat$315	; 2: 125 4
x22988:	neg al	; 2: 246 216
x22990:	neg ax	; 2: 247 216

scanFormat$315:	; Parameter 57 £temporary1688 8
x22992:	mov [bp + 65], ax	; 3: 137 70 65

scanFormat$316:	; Call 57 printf 0
x22995:	mov word [bp + 57], scanFormat$317	; 5: 199 70 57 230 89
x23000:	mov [bp + 59], bp	; 3: 137 110 59
x23003:	add bp, 57	; 3: 131 197 57
x23006:	mov di, bp	; 2: 137 239
x23008:	add di, 2	; 3: 131 199 2
x23011:	jmp printf	; 3: 233 223 178

scanFormat$317:	; PostCall 57

scanFormat$318:	; Goto 325
x23014:	jmp scanFormat$325	; 2: 235 31

scanFormat$319:	; NotEqual 325 c 37
x23016:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x23020:	jne scanFormat$325	; 2: 117 25

scanFormat$320:	; Assign percent 1
x23022:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$321:	; Assign shortInt 0
x23027:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$322:	; Assign longIntOrDouble 0
x23032:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$323:	; Assign longDouble 0
x23037:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$324:	; Assign star 0
x23042:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$325:	; Increment index
x23047:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$326:	; Goto 8
x23050:	jmp scanFormat$8	; 3: 233 25 251

scanFormat$327:	; SetReturnValue g_inCount
x23053:	mov bx, [g_inCount]	; 4: 139 30 28 90

scanFormat$328:	; Return g_inCount
x23057:	mov ax, [bp]	; 3: 139 70 0
x23060:	mov di, [bp + 4]	; 3: 139 126 4
x23063:	mov bp, [bp + 2]	; 3: 139 110 2
x23066:	jmp ax	; 2: 255 224

scanFormat$329:	; FunctionEnd scanFormat

g_inCount:
x23068:	db 0, 0	; 2: 0 0

g_inChars:
x23070:	db 0, 0	; 2: 0 0

string_scanFormat20c203D202725c270A#:
x23072:	db "scanFormat c = ", 39, "%c", 39, 10, 0	; 21: 115 99 97 110 70 111 114 109 97 116 32 99 32 61 32 39 37 99 39 10 0

scanChar:	; Assign c 0
x23093:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x23097:	mov ax, [g_inStatus]	; 3: 161 248 84
x23100:	cmp ax, 0	; 3: 131 248 0
x23103:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x23105:	cmp ax, 1	; 3: 131 248 1
x23108:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x23110:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1204 g_inDevice
x23112:	mov ax, [g_inDevice]	; 3: 161 250 84

scanChar$6:	; Assign stream £temporary1204
x23115:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1205 -> stream stream 2
x23118:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1205 -> stream
x23121:	mov ax, [si + 2]	; 3: 139 68 2
x23124:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x23127:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x23129:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x23132:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1210 c
x23135:	mov dx, bp	; 2: 137 234
x23137:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1210

scanChar$14:	; Interrupt 33
x23140:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x23142:	inc word [g_inChars]	; 4: 255 6 30 90

scanChar$16:	; SetReturnValue c
x23146:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x23149:	mov ax, [bp]	; 3: 139 70 0
x23152:	mov di, [bp + 4]	; 3: 139 126 4
x23155:	mov bp, [bp + 2]	; 3: 139 110 2
x23158:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1212 g_inDevice
x23160:	mov ax, [g_inDevice]	; 3: 161 250 84

scanChar$19:	; Assign inString £temporary1212
x23163:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1213 g_inChars
x23166:	mov ax, [g_inChars]	; 3: 161 30 90

scanChar$21:	; Increment g_inChars
x23169:	inc word [g_inChars]	; 4: 255 6 30 90

scanChar$22:	; BinaryAdd £temporary1215 inString £temporary1213
x23173:	mov si, [bp + 11]	; 3: 139 118 11
x23176:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1214 -> £temporary1215 £temporary1215 0

scanChar$24:	; SetReturnValue £temporary1214 -> £temporary1215
x23178:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1214 -> £temporary1215
x23180:	mov ax, [bp]	; 3: 139 70 0
x23183:	mov di, [bp + 4]	; 3: 139 126 4
x23186:	mov bp, [bp + 2]	; 3: 139 110 2
x23189:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x23191:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x23193:	mov ax, [bp]	; 3: 139 70 0
x23196:	mov di, [bp + 4]	; 3: 139 126 4
x23199:	mov bp, [bp + 2]	; 3: 139 110 2
x23202:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x23204:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x23209:	mov word [bp + 12], scanString$3	; 5: 199 70 12 183 90
x23214:	mov [bp + 14], bp	; 3: 137 110 14
x23217:	add bp, 12	; 3: 131 197 12
x23220:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1267

scanString$5:	; Assign input £temporary1267
x23223:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x23226:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1268 input
x23231:	mov al, [bp + 12]	; 3: 138 70 12
x23234:	and ax, 255	; 3: 37 255 0
x23237:	cmp al, 0	; 2: 60 0
x23239:	jge scanString$9	; 2: 125 4
x23241:	neg al	; 2: 246 216
x23243:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1268 6
x23245:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x23248:	mov word [bp + 15], scanString$11	; 5: 199 70 15 222 90
x23253:	mov [bp + 17], bp	; 3: 137 110 17
x23256:	add bp, 15	; 3: 131 197 15
x23259:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1269

scanString$13:	; Equal 20 £temporary1269 0
x23262:	cmp bx, 0	; 3: 131 251 0
x23265:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x23267:	mov word [bp + 15], scanString$16	; 5: 199 70 15 241 90
x23272:	mov [bp + 17], bp	; 3: 137 110 17
x23275:	add bp, 15	; 3: 131 197 15
x23278:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1270

scanString$18:	; Assign input £temporary1270
x23281:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x23284:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x23286:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x23290:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x23294:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x23298:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1274 input
x23300:	mov al, [bp + 12]	; 3: 138 70 12
x23303:	and ax, 255	; 3: 37 255 0
x23306:	cmp al, 0	; 2: 60 0
x23308:	jge scanString$24	; 2: 125 4
x23310:	neg al	; 2: 246 216
x23312:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1274 6
x23314:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x23317:	mov word [bp + 15], scanString$26	; 5: 199 70 15 35 91
x23322:	mov [bp + 17], bp	; 3: 137 110 17
x23325:	add bp, 15	; 3: 131 197 15
x23328:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1275

scanString$28:	; NotEqual 45 £temporary1275 0
x23331:	cmp bx, 0	; 3: 131 251 0
x23334:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1278 input
x23336:	mov al, [bp + 12]	; 3: 138 70 12
x23339:	and ax, 255	; 3: 37 255 0
x23342:	cmp al, 0	; 2: 60 0
x23344:	jge scanString$30	; 2: 125 4
x23346:	neg al	; 2: 246 216
x23348:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1278 -1
x23350:	cmp ax, -1	; 3: 131 248 255
x23353:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x23355:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x23359:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1283 index
x23361:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x23364:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1285 string £temporary1283
x23367:	mov si, [bp + 6]	; 3: 139 118 6
x23370:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1284 -> £temporary1285 £temporary1285 0

scanString$36:	; Assign £temporary1284 -> £temporary1285 input
x23372:	mov al, [bp + 12]	; 3: 138 70 12
x23375:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x23377:	mov word [bp + 15], scanString$39	; 5: 199 70 15 95 91
x23382:	mov [bp + 17], bp	; 3: 137 110 17
x23385:	add bp, 15	; 3: 131 197 15
x23388:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1286

scanString$41:	; Assign input £temporary1286
x23391:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x23394:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x23399:	inc word [g_inChars]	; 4: 255 6 30 90

scanString$44:	; Goto 22
x23403:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1289 string index
x23405:	mov si, [bp + 6]	; 3: 139 118 6
x23408:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1288 -> £temporary1289 £temporary1289 0

scanString$47:	; Assign £temporary1288 -> £temporary1289 0
x23411:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x23414:	inc word [g_inChars]	; 4: 255 6 30 90

scanString$49:	; Goto 126
x23418:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1291 precision
x23421:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x23424:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1291 0
x23427:	cmp ax, 0	; 3: 131 248 0
x23430:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1293 input
x23432:	mov al, [bp + 12]	; 3: 138 70 12
x23435:	and ax, 255	; 3: 37 255 0
x23438:	cmp al, 0	; 2: 60 0
x23440:	jge scanString$55	; 2: 125 4
x23442:	neg al	; 2: 246 216
x23444:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1293 6
x23446:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x23449:	mov word [bp + 15], scanString$57	; 5: 199 70 15 167 91
x23454:	mov [bp + 17], bp	; 3: 137 110 17
x23457:	add bp, 15	; 3: 131 197 15
x23460:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1294

scanString$59:	; NotEqual 76 £temporary1294 0
x23463:	cmp bx, 0	; 3: 131 251 0
x23466:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1297 input
x23468:	mov al, [bp + 12]	; 3: 138 70 12
x23471:	and ax, 255	; 3: 37 255 0
x23474:	cmp al, 0	; 2: 60 0
x23476:	jge scanString$61	; 2: 125 4
x23478:	neg al	; 2: 246 216
x23480:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1297 -1
x23482:	cmp ax, -1	; 3: 131 248 255
x23485:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x23487:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x23491:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1303 index
x23493:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x23496:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1305 string £temporary1303
x23499:	mov si, [bp + 6]	; 3: 139 118 6
x23502:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1304 -> £temporary1305 £temporary1305 0

scanString$67:	; Assign £temporary1304 -> £temporary1305 input
x23504:	mov al, [bp + 12]	; 3: 138 70 12
x23507:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x23509:	mov word [bp + 15], scanString$70	; 5: 199 70 15 227 91
x23514:	mov [bp + 17], bp	; 3: 137 110 17
x23517:	add bp, 15	; 3: 131 197 15
x23520:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1306

scanString$72:	; Assign input £temporary1306
x23523:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x23526:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x23531:	inc word [g_inChars]	; 4: 255 6 30 90

scanString$75:	; Goto 50
x23535:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x23537:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x23541:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1310 string index
x23545:	mov si, [bp + 6]	; 3: 139 118 6
x23548:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1309 -> £temporary1310 £temporary1310 0

scanString$79:	; Assign £temporary1309 -> £temporary1310 0
x23551:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x23554:	inc word [g_inChars]	; 4: 255 6 30 90

scanString$81:	; Goto 126
x23558:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x23561:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x23565:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1313 input
x23567:	mov al, [bp + 12]	; 3: 138 70 12
x23570:	and ax, 255	; 3: 37 255 0
x23573:	cmp al, 0	; 2: 60 0
x23575:	jge scanString$85	; 2: 125 4
x23577:	neg al	; 2: 246 216
x23579:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1313 6
x23581:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x23584:	mov word [bp + 15], scanString$87	; 5: 199 70 15 46 92
x23589:	mov [bp + 17], bp	; 3: 137 110 17
x23592:	add bp, 15	; 3: 131 197 15
x23595:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1314

scanString$89:	; NotEqual 101 £temporary1314 0
x23598:	cmp bx, 0	; 3: 131 251 0
x23601:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1317 input
x23603:	mov al, [bp + 12]	; 3: 138 70 12
x23606:	and ax, 255	; 3: 37 255 0
x23609:	cmp al, 0	; 2: 60 0
x23611:	jge scanString$91	; 2: 125 4
x23613:	neg al	; 2: 246 216
x23615:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1317 -1
x23617:	cmp ax, -1	; 3: 131 248 255
x23620:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x23622:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x23626:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x23628:	mov word [bp + 15], scanString$95	; 5: 199 70 15 90 92
x23633:	mov [bp + 17], bp	; 3: 137 110 17
x23636:	add bp, 15	; 3: 131 197 15
x23639:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1322

scanString$97:	; Assign input £temporary1322
x23642:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x23645:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x23650:	inc word [g_inChars]	; 4: 255 6 30 90

scanString$100:	; Goto 83
x23654:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x23656:	inc word [g_inChars]	; 4: 255 6 30 90

scanString$102:	; Goto 126
x23660:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1325 precision
x23662:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x23665:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1325 0
x23668:	cmp ax, 0	; 3: 131 248 0
x23671:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1327 input
x23673:	mov al, [bp + 12]	; 3: 138 70 12
x23676:	and ax, 255	; 3: 37 255 0
x23679:	cmp al, 0	; 2: 60 0
x23681:	jge scanString$108	; 2: 125 4
x23683:	neg al	; 2: 246 216
x23685:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1327 6
x23687:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x23690:	mov word [bp + 15], scanString$110	; 5: 199 70 15 152 92
x23695:	mov [bp + 17], bp	; 3: 137 110 17
x23698:	add bp, 15	; 3: 131 197 15
x23701:	nop	; 1: 144
x23702:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1328

scanString$112:	; NotEqual 124 £temporary1328 0
x23704:	cmp bx, 0	; 3: 131 251 0
x23707:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1331 input
x23709:	mov al, [bp + 12]	; 3: 138 70 12
x23712:	and ax, 255	; 3: 37 255 0
x23715:	cmp al, 0	; 2: 60 0
x23717:	jge scanString$114	; 2: 125 4
x23719:	neg al	; 2: 246 216
x23721:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1331 -1
x23723:	cmp ax, -1	; 3: 131 248 255
x23726:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x23728:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x23732:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x23734:	mov word [bp + 15], scanString$118	; 5: 199 70 15 196 92
x23739:	mov [bp + 17], bp	; 3: 137 110 17
x23742:	add bp, 15	; 3: 131 197 15
x23745:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1337

scanString$120:	; Assign input £temporary1337
x23748:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x23751:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x23756:	inc word [g_inChars]	; 4: 255 6 30 90

scanString$123:	; Goto 103
x23760:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x23762:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x23766:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x23768:	inc word [g_inChars]	; 4: 255 6 30 90

scanString$126:	; Equal 128 found 0
x23772:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x23776:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x23778:	inc word [g_inCount]	; 4: 255 6 28 90

scanString$128:	; Return 0
x23782:	mov ax, [bp]	; 3: 139 70 0
x23785:	mov di, [bp + 4]	; 3: 139 126 4
x23788:	mov bp, [bp + 2]	; 3: 139 110 2
x23791:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x23793:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x23797:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x23799:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x23803:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x23805:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x23809:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x23811:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x23815:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x23817:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x23821:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x23823:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x23827:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary439 1
x23829:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x23832:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary439 0
x23834:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary439

isspace$10:	; Return £temporary439
x23837:	mov ax, [bp]	; 3: 139 70 0
x23840:	mov di, [bp + 4]	; 3: 139 126 4
x23843:	mov bp, [bp + 2]	; 3: 139 110 2
x23846:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x23848:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x23856:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x23861:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x23866:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 72 93
x23871:	mov [bp + 18], bp	; 3: 137 110 18
x23874:	add bp, 16	; 3: 131 197 16
x23877:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1400

scanLongInt$7:	; Assign input £temporary1400
x23880:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1401 input
x23883:	mov al, [bp + 16]	; 3: 138 70 16
x23886:	and ax, 255	; 3: 37 255 0
x23889:	cmp al, 0	; 2: 60 0
x23891:	jge scanLongInt$10	; 2: 125 4
x23893:	neg al	; 2: 246 216
x23895:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1401 6
x23897:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x23900:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 106 93
x23905:	mov [bp + 19], bp	; 3: 137 110 19
x23908:	add bp, 17	; 3: 131 197 17
x23911:	nop	; 1: 144
x23912:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1402

scanLongInt$14:	; Equal 21 £temporary1402 0
x23914:	cmp bx, 0	; 3: 131 251 0
x23917:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x23919:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 125 93
x23924:	mov [bp + 19], bp	; 3: 137 110 19
x23927:	add bp, 17	; 3: 131 197 17
x23930:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1403

scanLongInt$19:	; Assign input £temporary1403
x23933:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x23936:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x23938:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x23942:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x23944:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 150 93
x23949:	mov [bp + 19], bp	; 3: 137 110 19
x23952:	add bp, 17	; 3: 131 197 17
x23955:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1406

scanLongInt$26:	; Assign input £temporary1406
x23958:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x23961:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x23963:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x23967:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x23969:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x23974:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 180 93
x23979:	mov [bp + 19], bp	; 3: 137 110 19
x23982:	add bp, 17	; 3: 131 197 17
x23985:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1408

scanLongInt$34:	; Assign input £temporary1408
x23988:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x23991:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x23995:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x23997:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x24001:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x24003:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 209 93
x24008:	mov [bp + 19], bp	; 3: 137 110 19
x24011:	add bp, 17	; 3: 131 197 17
x24014:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1411

scanLongInt$41:	; Assign input £temporary1411
x24017:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1412 input
x24020:	mov al, [bp + 16]	; 3: 138 70 16
x24023:	and ax, 255	; 3: 37 255 0
x24026:	cmp al, 0	; 2: 60 0
x24028:	jge scanLongInt$44	; 2: 125 4
x24030:	neg al	; 2: 246 216
x24032:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1412 6
x24034:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x24037:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 243 93
x24042:	mov [bp + 19], bp	; 3: 137 110 19
x24045:	add bp, 17	; 3: 131 197 17
x24048:	jmp tolower	; 3: 233 228 198

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1413

scanLongInt$48:	; NotEqual 56 £temporary1413 120
x24051:	cmp bx, 120	; 3: 131 251 120
x24054:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x24056:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x24061:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 11 94
x24066:	mov [bp + 19], bp	; 3: 137 110 19
x24069:	add bp, 17	; 3: 131 197 17
x24072:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1415

scanLongInt$54:	; Assign input £temporary1415
x24075:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x24078:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x24080:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x24085:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x24087:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x24092:	mov al, [bp + 16]	; 3: 138 70 16
x24095:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x24098:	mov ax, [bp + 6]	; 3: 139 70 6
x24101:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x24104:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 54 94
x24109:	mov [bp + 19], bp	; 3: 137 110 19
x24112:	add bp, 17	; 3: 131 197 17
x24115:	jmp @1614$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1416

scanLongInt$65:	; Equal 82 £temporary1416 0
x24118:	cmp bx, 0	; 3: 131 251 0
x24121:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1417 base
x24123:	mov bx, [bp + 6]	; 3: 139 94 6
x24126:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x24133:	cmp bx, 0	; 3: 131 251 0
x24136:	jge scanLongInt$67	; 2: 125 5
x24138:	neg bx	; 2: 247 219
x24140:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1417
x24143:	mov eax, [bp + 8]	; 4: 102 139 70 8
x24147:	xor edx, edx	; 3: 102 49 210
x24150:	imul ebx	; 3: 102 247 235
x24153:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x24157:	mov al, [bp + 16]	; 3: 138 70 16
x24160:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x24163:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 113 94
x24168:	mov [bp + 19], bp	; 3: 137 110 19
x24171:	add bp, 17	; 3: 131 197 17
x24174:	jmp @1650$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1419

scanLongInt$73:	; IntegralToIntegral £temporary1420 £temporary1419
x24177:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x24184:	cmp bx, 0	; 3: 131 251 0
x24187:	jge scanLongInt$74	; 2: 125 5
x24189:	neg bx	; 2: 247 219
x24191:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1420
x24194:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x24198:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 148 94
x24203:	mov [bp + 19], bp	; 3: 137 110 19
x24206:	add bp, 17	; 3: 131 197 17
x24209:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1422

scanLongInt$79:	; Assign input £temporary1422
x24212:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x24215:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x24220:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x24223:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x24227:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1424 longValue
x24229:	mov eax, [bp + 8]	; 4: 102 139 70 8
x24233:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1424
x24236:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x24240:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x24244:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x24246:	inc word [g_inCount]	; 4: 255 6 28 90

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x24250:	mov al, [bp + 16]	; 3: 138 70 16
x24253:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x24256:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 206 94
x24261:	mov [bp + 19], bp	; 3: 137 110 19
x24264:	add bp, 17	; 3: 131 197 17
x24267:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x24270:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x24274:	mov ax, [bp]	; 3: 139 70 0
x24277:	mov di, [bp + 4]	; 3: 139 126 4
x24280:	mov bp, [bp + 2]	; 3: 139 110 2
x24283:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@1614$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1614$isDigitInBase$1:	; IntegralToIntegral £temporary1348 c
x24285:	mov al, [bp + 6]	; 3: 138 70 6
x24288:	and ax, 255	; 3: 37 255 0
x24291:	cmp al, 0	; 2: 60 0
x24293:	jge @1614$isDigitInBase$2	; 2: 125 4
x24295:	neg al	; 2: 246 216
x24297:	neg ax	; 2: 247 216

@1614$isDigitInBase$2:	; Parameter 9 £temporary1348 6
x24299:	mov [bp + 15], ax	; 3: 137 70 15

@1614$isDigitInBase$3:	; Call 9 isdigit 0
x24302:	mov word [bp + 9], @1614$isDigitInBase$4	; 5: 199 70 9 252 94
x24307:	mov [bp + 11], bp	; 3: 137 110 11
x24310:	add bp, 9	; 3: 131 197 9
x24313:	jmp isdigit	; 3: 233 1 204

@1614$isDigitInBase$4:	; PostCall 9

@1614$isDigitInBase$5:	; GetReturnValue £temporary1349

@1614$isDigitInBase$6:	; Equal 17 £temporary1349 0
x24316:	cmp bx, 0	; 3: 131 251 0
x24319:	je @1614$isDigitInBase$17	; 2: 116 52

@1614$isDigitInBase$7:	; BinarySubtract £temporary1350 c 48
x24321:	mov al, [bp + 6]	; 3: 138 70 6
x24324:	sub al, 48	; 2: 44 48

@1614$isDigitInBase$8:	; IntegralToIntegral £temporary1351 £temporary1350
x24326:	and ax, 255	; 3: 37 255 0
x24329:	cmp al, 0	; 2: 60 0
x24331:	jge @1614$isDigitInBase$9	; 2: 125 4
x24333:	neg al	; 2: 246 216
x24335:	neg ax	; 2: 247 216

@1614$isDigitInBase$9:	; Assign value £temporary1351
x24337:	mov [bp + 9], ax	; 3: 137 70 9

@1614$isDigitInBase$10:	; SignedLessThan 14 value 0
x24340:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x24344:	jl @1614$isDigitInBase$14	; 2: 124 13

@1614$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x24346:	mov ax, [bp + 7]	; 3: 139 70 7
x24349:	cmp [bp + 9], ax	; 3: 57 70 9
x24352:	jge @1614$isDigitInBase$14	; 2: 125 5

@1614$isDigitInBase$12:	; Assign £temporary1355 1
x24354:	mov bx, 1	; 3: 187 1 0

@1614$isDigitInBase$13:	; Goto 15
x24357:	jmp @1614$isDigitInBase$15	; 2: 235 3

@1614$isDigitInBase$14:	; Assign £temporary1355 0
x24359:	mov bx, 0	; 3: 187 0 0

@1614$isDigitInBase$15:	; SetReturnValue £temporary1355

@1614$isDigitInBase$16:	; Return £temporary1355
x24362:	mov ax, [bp]	; 3: 139 70 0
x24365:	mov di, [bp + 4]	; 3: 139 126 4
x24368:	mov bp, [bp + 2]	; 3: 139 110 2
x24371:	jmp ax	; 2: 255 224

@1614$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1614$isDigitInBase$18:	; IntegralToIntegral £temporary1356 c
x24373:	mov al, [bp + 6]	; 3: 138 70 6
x24376:	and ax, 255	; 3: 37 255 0
x24379:	cmp al, 0	; 2: 60 0
x24381:	jge @1614$isDigitInBase$19	; 2: 125 4
x24383:	neg al	; 2: 246 216
x24385:	neg ax	; 2: 247 216

@1614$isDigitInBase$19:	; Parameter 9 £temporary1356 6
x24387:	mov [bp + 15], ax	; 3: 137 70 15

@1614$isDigitInBase$20:	; Call 9 islower 0
x24390:	mov word [bp + 9], @1614$isDigitInBase$21	; 5: 199 70 9 84 95
x24395:	mov [bp + 11], bp	; 3: 137 110 11
x24398:	add bp, 9	; 3: 131 197 9
x24401:	jmp islower	; 3: 233 165 0

@1614$isDigitInBase$21:	; PostCall 9

@1614$isDigitInBase$22:	; GetReturnValue £temporary1357

@1614$isDigitInBase$23:	; Equal 34 £temporary1357 0
x24404:	cmp bx, 0	; 3: 131 251 0
x24407:	je @1614$isDigitInBase$34	; 2: 116 55

@1614$isDigitInBase$24:	; BinarySubtract £temporary1358 c 97
x24409:	mov al, [bp + 6]	; 3: 138 70 6
x24412:	sub al, 97	; 2: 44 97

@1614$isDigitInBase$25:	; IntegralToIntegral £temporary1359 £temporary1358
x24414:	and ax, 255	; 3: 37 255 0
x24417:	cmp al, 0	; 2: 60 0
x24419:	jge @1614$isDigitInBase$26	; 2: 125 4
x24421:	neg al	; 2: 246 216
x24423:	neg ax	; 2: 247 216

@1614$isDigitInBase$26:	; BinaryAdd value £temporary1359 10
x24425:	add ax, 10	; 3: 131 192 10
x24428:	mov [bp + 9], ax	; 3: 137 70 9

@1614$isDigitInBase$27:	; SignedLessThan 31 value 0
x24431:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x24435:	jl @1614$isDigitInBase$31	; 2: 124 13

@1614$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x24437:	mov ax, [bp + 7]	; 3: 139 70 7
x24440:	cmp [bp + 9], ax	; 3: 57 70 9
x24443:	jge @1614$isDigitInBase$31	; 2: 125 5

@1614$isDigitInBase$29:	; Assign £temporary1364 1
x24445:	mov bx, 1	; 3: 187 1 0

@1614$isDigitInBase$30:	; Goto 32
x24448:	jmp @1614$isDigitInBase$32	; 2: 235 3

@1614$isDigitInBase$31:	; Assign £temporary1364 0
x24450:	mov bx, 0	; 3: 187 0 0

@1614$isDigitInBase$32:	; SetReturnValue £temporary1364

@1614$isDigitInBase$33:	; Return £temporary1364
x24453:	mov ax, [bp]	; 3: 139 70 0
x24456:	mov di, [bp + 4]	; 3: 139 126 4
x24459:	mov bp, [bp + 2]	; 3: 139 110 2
x24462:	jmp ax	; 2: 255 224

@1614$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1614$isDigitInBase$35:	; IntegralToIntegral £temporary1365 c
x24464:	mov al, [bp + 6]	; 3: 138 70 6
x24467:	and ax, 255	; 3: 37 255 0
x24470:	cmp al, 0	; 2: 60 0
x24472:	jge @1614$isDigitInBase$36	; 2: 125 4
x24474:	neg al	; 2: 246 216
x24476:	neg ax	; 2: 247 216

@1614$isDigitInBase$36:	; Parameter 9 £temporary1365 6
x24478:	mov [bp + 15], ax	; 3: 137 70 15

@1614$isDigitInBase$37:	; Call 9 isupper 0
x24481:	mov word [bp + 9], @1614$isDigitInBase$38	; 5: 199 70 9 175 95
x24486:	mov [bp + 11], bp	; 3: 137 110 11
x24489:	add bp, 9	; 3: 131 197 9
x24492:	jmp isupper	; 3: 233 26 190

@1614$isDigitInBase$38:	; PostCall 9

@1614$isDigitInBase$39:	; GetReturnValue £temporary1366

@1614$isDigitInBase$40:	; Equal 51 £temporary1366 0
x24495:	cmp bx, 0	; 3: 131 251 0
x24498:	je @1614$isDigitInBase$51	; 2: 116 55

@1614$isDigitInBase$41:	; BinarySubtract £temporary1367 c 65
x24500:	mov al, [bp + 6]	; 3: 138 70 6
x24503:	sub al, 65	; 2: 44 65

@1614$isDigitInBase$42:	; IntegralToIntegral £temporary1368 £temporary1367
x24505:	and ax, 255	; 3: 37 255 0
x24508:	cmp al, 0	; 2: 60 0
x24510:	jge @1614$isDigitInBase$43	; 2: 125 4
x24512:	neg al	; 2: 246 216
x24514:	neg ax	; 2: 247 216

@1614$isDigitInBase$43:	; BinaryAdd value £temporary1368 10
x24516:	add ax, 10	; 3: 131 192 10
x24519:	mov [bp + 9], ax	; 3: 137 70 9

@1614$isDigitInBase$44:	; SignedLessThan 48 value 0
x24522:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x24526:	jl @1614$isDigitInBase$48	; 2: 124 13

@1614$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x24528:	mov ax, [bp + 7]	; 3: 139 70 7
x24531:	cmp [bp + 9], ax	; 3: 57 70 9
x24534:	jge @1614$isDigitInBase$48	; 2: 125 5

@1614$isDigitInBase$46:	; Assign £temporary1373 1
x24536:	mov bx, 1	; 3: 187 1 0

@1614$isDigitInBase$47:	; Goto 49
x24539:	jmp @1614$isDigitInBase$49	; 2: 235 3

@1614$isDigitInBase$48:	; Assign £temporary1373 0
x24541:	mov bx, 0	; 3: 187 0 0

@1614$isDigitInBase$49:	; SetReturnValue £temporary1373

@1614$isDigitInBase$50:	; Return £temporary1373
x24544:	mov ax, [bp]	; 3: 139 70 0
x24547:	mov di, [bp + 4]	; 3: 139 126 4
x24550:	mov bp, [bp + 2]	; 3: 139 110 2
x24553:	jmp ax	; 2: 255 224

@1614$isDigitInBase$51:	; SetReturnValue 0
x24555:	mov bx, 0	; 3: 187 0 0

@1614$isDigitInBase$52:	; Return 0
x24558:	mov ax, [bp]	; 3: 139 70 0
x24561:	mov di, [bp + 4]	; 3: 139 126 4
x24564:	mov bp, [bp + 2]	; 3: 139 110 2
x24567:	jmp ax	; 2: 255 224

@1614$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x24569:	mov word [bp + 8], islower$2	; 5: 199 70 8 7 96
x24574:	mov [bp + 10], bp	; 3: 137 110 10
x24577:	add bp, 8	; 3: 131 197 8
x24580:	jmp localeconv	; 3: 233 45 190

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary348

islower$4:	; Assign localeConvPtr £temporary348
x24583:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x24586:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x24590:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary350 -> localeConvPtr localeConvPtr 12
x24592:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary350 -> localeConvPtr 6
x24595:	mov ax, [si + 12]	; 3: 139 68 12
x24598:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x24601:	mov ax, [bp + 6]	; 3: 139 70 6
x24604:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x24607:	mov word [bp + 10], islower$11	; 5: 199 70 10 45 96
x24612:	mov [bp + 12], bp	; 3: 137 110 12
x24615:	add bp, 10	; 3: 131 197 10
x24618:	jmp strchr	; 3: 233 73 193

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary351

islower$13:	; Equal 16 £temporary351 0
x24621:	cmp bx, 0	; 3: 131 251 0
x24624:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary353 1
x24626:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x24629:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary353 0
x24631:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary353

islower$18:	; Return £temporary353
x24634:	mov ax, [bp]	; 3: 139 70 0
x24637:	mov di, [bp + 4]	; 3: 139 126 4
x24640:	mov bp, [bp + 2]	; 3: 139 110 2
x24643:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x24645:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x24649:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x24651:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x24655:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary357 1
x24657:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x24660:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary357 0
x24662:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary357

islower$25:	; Return £temporary357
x24665:	mov ax, [bp]	; 3: 139 70 0
x24668:	mov di, [bp + 4]	; 3: 139 126 4
x24671:	mov bp, [bp + 2]	; 3: 139 110 2
x24674:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@1650$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1650$digitToValue$1:	; IntegralToIntegral £temporary1380 c
x24676:	mov al, [bp + 6]	; 3: 138 70 6
x24679:	and ax, 255	; 3: 37 255 0
x24682:	cmp al, 0	; 2: 60 0
x24684:	jge @1650$digitToValue$2	; 2: 125 4
x24686:	neg al	; 2: 246 216
x24688:	neg ax	; 2: 247 216

@1650$digitToValue$2:	; Parameter 7 £temporary1380 6
x24690:	mov [bp + 13], ax	; 3: 137 70 13

@1650$digitToValue$3:	; Call 7 isdigit 0
x24693:	mov word [bp + 7], @1650$digitToValue$4	; 5: 199 70 7 131 96
x24698:	mov [bp + 9], bp	; 3: 137 110 9
x24701:	add bp, 7	; 3: 131 197 7
x24704:	jmp isdigit	; 3: 233 122 202

@1650$digitToValue$4:	; PostCall 7

@1650$digitToValue$5:	; GetReturnValue £temporary1381

@1650$digitToValue$6:	; Equal 11 £temporary1381 0
x24707:	cmp bx, 0	; 3: 131 251 0
x24710:	je @1650$digitToValue$11	; 2: 116 30

@1650$digitToValue$7:	; BinarySubtract £temporary1382 c 48
x24712:	mov bl, [bp + 6]	; 3: 138 94 6
x24715:	sub bl, 48	; 3: 128 235 48

@1650$digitToValue$8:	; IntegralToIntegral £temporary1383 £temporary1382
x24718:	and bx, 255	; 4: 129 227 255 0
x24722:	cmp bl, 0	; 3: 128 251 0
x24725:	jge @1650$digitToValue$9	; 2: 125 4
x24727:	neg bl	; 2: 246 219
x24729:	neg bx	; 2: 247 219

@1650$digitToValue$9:	; SetReturnValue £temporary1383

@1650$digitToValue$10:	; Return £temporary1383
x24731:	mov ax, [bp]	; 3: 139 70 0
x24734:	mov di, [bp + 4]	; 3: 139 126 4
x24737:	mov bp, [bp + 2]	; 3: 139 110 2
x24740:	jmp ax	; 2: 255 224

@1650$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1650$digitToValue$12:	; IntegralToIntegral £temporary1384 c
x24742:	mov al, [bp + 6]	; 3: 138 70 6
x24745:	and ax, 255	; 3: 37 255 0
x24748:	cmp al, 0	; 2: 60 0
x24750:	jge @1650$digitToValue$13	; 2: 125 4
x24752:	neg al	; 2: 246 216
x24754:	neg ax	; 2: 247 216

@1650$digitToValue$13:	; Parameter 7 £temporary1384 6
x24756:	mov [bp + 13], ax	; 3: 137 70 13

@1650$digitToValue$14:	; Call 7 islower 0
x24759:	mov word [bp + 7], @1650$digitToValue$15	; 5: 199 70 7 197 96
x24764:	mov [bp + 9], bp	; 3: 137 110 9
x24767:	add bp, 7	; 3: 131 197 7
x24770:	jmp islower	; 3: 233 52 255

@1650$digitToValue$15:	; PostCall 7

@1650$digitToValue$16:	; GetReturnValue £temporary1385

@1650$digitToValue$17:	; Equal 23 £temporary1385 0
x24773:	cmp bx, 0	; 3: 131 251 0
x24776:	je @1650$digitToValue$23	; 2: 116 33

@1650$digitToValue$18:	; BinarySubtract £temporary1386 c 97
x24778:	mov bl, [bp + 6]	; 3: 138 94 6
x24781:	sub bl, 97	; 3: 128 235 97

@1650$digitToValue$19:	; IntegralToIntegral £temporary1387 £temporary1386
x24784:	and bx, 255	; 4: 129 227 255 0
x24788:	cmp bl, 0	; 3: 128 251 0
x24791:	jge @1650$digitToValue$20	; 2: 125 4
x24793:	neg bl	; 2: 246 219
x24795:	neg bx	; 2: 247 219

@1650$digitToValue$20:	; BinaryAdd £temporary1388 £temporary1387 10
x24797:	add bx, 10	; 3: 131 195 10

@1650$digitToValue$21:	; SetReturnValue £temporary1388

@1650$digitToValue$22:	; Return £temporary1388
x24800:	mov ax, [bp]	; 3: 139 70 0
x24803:	mov di, [bp + 4]	; 3: 139 126 4
x24806:	mov bp, [bp + 2]	; 3: 139 110 2
x24809:	jmp ax	; 2: 255 224

@1650$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1650$digitToValue$24:	; IntegralToIntegral £temporary1389 c
x24811:	mov al, [bp + 6]	; 3: 138 70 6
x24814:	and ax, 255	; 3: 37 255 0
x24817:	cmp al, 0	; 2: 60 0
x24819:	jge @1650$digitToValue$25	; 2: 125 4
x24821:	neg al	; 2: 246 216
x24823:	neg ax	; 2: 247 216

@1650$digitToValue$25:	; Parameter 7 £temporary1389 6
x24825:	mov [bp + 13], ax	; 3: 137 70 13

@1650$digitToValue$26:	; Call 7 isupper 0
x24828:	mov word [bp + 7], @1650$digitToValue$27	; 5: 199 70 7 10 97
x24833:	mov [bp + 9], bp	; 3: 137 110 9
x24836:	add bp, 7	; 3: 131 197 7
x24839:	jmp isupper	; 3: 233 191 188

@1650$digitToValue$27:	; PostCall 7

@1650$digitToValue$28:	; GetReturnValue £temporary1390

@1650$digitToValue$29:	; Equal 35 £temporary1390 0
x24842:	cmp bx, 0	; 3: 131 251 0
x24845:	je @1650$digitToValue$35	; 2: 116 33

@1650$digitToValue$30:	; BinarySubtract £temporary1391 c 65
x24847:	mov bl, [bp + 6]	; 3: 138 94 6
x24850:	sub bl, 65	; 3: 128 235 65

@1650$digitToValue$31:	; IntegralToIntegral £temporary1392 £temporary1391
x24853:	and bx, 255	; 4: 129 227 255 0
x24857:	cmp bl, 0	; 3: 128 251 0
x24860:	jge @1650$digitToValue$32	; 2: 125 4
x24862:	neg bl	; 2: 246 219
x24864:	neg bx	; 2: 247 219

@1650$digitToValue$32:	; BinaryAdd £temporary1393 £temporary1392 10
x24866:	add bx, 10	; 3: 131 195 10

@1650$digitToValue$33:	; SetReturnValue £temporary1393

@1650$digitToValue$34:	; Return £temporary1393
x24869:	mov ax, [bp]	; 3: 139 70 0
x24872:	mov di, [bp + 4]	; 3: 139 126 4
x24875:	mov bp, [bp + 2]	; 3: 139 110 2
x24878:	jmp ax	; 2: 255 224

@1650$digitToValue$35:	; SetReturnValue 0
x24880:	mov bx, 0	; 3: 187 0 0

@1650$digitToValue$36:	; Return 0
x24883:	mov ax, [bp]	; 3: 139 70 0
x24886:	mov di, [bp + 4]	; 3: 139 126 4
x24889:	mov bp, [bp + 2]	; 3: 139 110 2
x24892:	jmp ax	; 2: 255 224

@1650$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x24894:	mov ax, [g_inStatus]	; 3: 161 248 84
x24897:	cmp ax, 0	; 3: 131 248 0
x24900:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x24902:	cmp ax, 1	; 3: 131 248 1
x24905:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x24907:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x24909:	dec word [g_inChars]	; 4: 255 14 30 90

unscanChar$5:	; Goto 7
x24913:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x24915:	dec word [g_inChars]	; 4: 255 14 30 90

unscanChar$7:	; Return 0
x24919:	mov ax, [bp]	; 3: 139 70 0
x24922:	mov di, [bp + 4]	; 3: 139 126 4
x24925:	mov bp, [bp + 2]	; 3: 139 110 2
x24928:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x24930:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x24938:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 120 97
x24943:	mov [bp + 18], bp	; 3: 137 110 18
x24946:	add bp, 16	; 3: 131 197 16
x24949:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1435

scanUnsignedLongInt$5:	; Assign input £temporary1435
x24952:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x24955:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1436 input
x24960:	mov al, [bp + 16]	; 3: 138 70 16
x24963:	and ax, 255	; 3: 37 255 0
x24966:	cmp al, 0	; 2: 60 0
x24968:	jge scanUnsignedLongInt$9	; 2: 125 4
x24970:	neg al	; 2: 246 216
x24972:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1436 6
x24974:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x24977:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 159 97
x24982:	mov [bp + 21], bp	; 3: 137 110 21
x24985:	add bp, 19	; 3: 131 197 19
x24988:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1437

scanUnsignedLongInt$13:	; Equal 20 £temporary1437 0
x24991:	cmp bx, 0	; 3: 131 251 0
x24994:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x24996:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 178 97
x25001:	mov [bp + 21], bp	; 3: 137 110 21
x25004:	add bp, 19	; 3: 131 197 19
x25007:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1438

scanUnsignedLongInt$18:	; Assign input £temporary1438
x25010:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x25013:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x25015:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x25019:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x25021:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 203 97
x25026:	mov [bp + 21], bp	; 3: 137 110 21
x25029:	add bp, 19	; 3: 131 197 19
x25032:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1441

scanUnsignedLongInt$25:	; Assign input £temporary1441
x25035:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x25038:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x25042:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x25044:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x25048:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x25050:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 232 97
x25055:	mov [bp + 21], bp	; 3: 137 110 21
x25058:	add bp, 19	; 3: 131 197 19
x25061:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1444

scanUnsignedLongInt$32:	; Assign input £temporary1444
x25064:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1445 input
x25067:	mov al, [bp + 16]	; 3: 138 70 16
x25070:	and ax, 255	; 3: 37 255 0
x25073:	cmp al, 0	; 2: 60 0
x25075:	jge scanUnsignedLongInt$35	; 2: 125 4
x25077:	neg al	; 2: 246 216
x25079:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1445 6
x25081:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x25084:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 10 98
x25089:	mov [bp + 21], bp	; 3: 137 110 21
x25092:	add bp, 19	; 3: 131 197 19
x25095:	jmp tolower	; 3: 233 205 194

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1446

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1446 120
x25098:	cmp bx, 120	; 3: 131 251 120
x25101:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x25103:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x25108:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 34 98
x25113:	mov [bp + 21], bp	; 3: 137 110 21
x25116:	add bp, 19	; 3: 131 197 19
x25119:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1448

scanUnsignedLongInt$45:	; Assign input £temporary1448
x25122:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x25125:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x25127:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x25132:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x25134:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x25139:	mov al, [bp + 16]	; 3: 138 70 16
x25142:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x25145:	mov ax, [bp + 6]	; 3: 139 70 6
x25148:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x25151:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 77 98
x25156:	mov [bp + 21], bp	; 3: 137 110 21
x25159:	add bp, 19	; 3: 131 197 19
x25162:	jmp @1614$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1449

scanUnsignedLongInt$56:	; Equal 73 £temporary1449 0
x25165:	cmp bx, 0	; 3: 131 251 0
x25168:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1450 base
x25170:	mov bx, [bp + 6]	; 3: 139 94 6
x25173:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1450
x25180:	mov eax, [bp + 8]	; 4: 102 139 70 8
x25184:	xor edx, edx	; 3: 102 49 210
x25187:	mul ebx	; 3: 102 247 227
x25190:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x25194:	mov al, [bp + 16]	; 3: 138 70 16
x25197:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x25200:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 126 98
x25205:	mov [bp + 21], bp	; 3: 137 110 21
x25208:	add bp, 19	; 3: 131 197 19
x25211:	jmp @1650$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1452

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1453 £temporary1452
x25214:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1453
x25221:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x25225:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x25230:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 156 98
x25235:	mov [bp + 21], bp	; 3: 137 110 21
x25238:	add bp, 19	; 3: 131 197 19
x25241:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1455

scanUnsignedLongInt$71:	; Assign input £temporary1455
x25244:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x25247:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x25249:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25253:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x25255:	inc word [g_inCount]	; 4: 255 6 28 90

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x25259:	mov al, [bp + 16]	; 3: 138 70 16
x25262:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x25265:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 191 98
x25270:	mov [bp + 21], bp	; 3: 137 110 21
x25273:	add bp, 19	; 3: 131 197 19
x25276:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x25279:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x25283:	mov ax, [bp]	; 3: 139 70 0
x25286:	mov di, [bp + 4]	; 3: 139 126 4
x25289:	mov bp, [bp + 2]	; 3: 139 110 2
x25292:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x25294:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x25299:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x25304:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x25306:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x25309:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x25311:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x25314:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 240 98
x25319:	mov [bp + 28], bp	; 3: 137 110 28
x25322:	add bp, 26	; 3: 131 197 26
x25325:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1466

scanLongDouble$10:	; Assign input £temporary1466
x25328:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1467 input
x25331:	mov al, [bp + 26]	; 3: 138 70 26
x25334:	and ax, 255	; 3: 37 255 0
x25337:	cmp al, 0	; 2: 60 0
x25339:	jge scanLongDouble$13	; 2: 125 4
x25341:	neg al	; 2: 246 216
x25343:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1467 6
x25345:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x25348:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 18 99
x25353:	mov [bp + 29], bp	; 3: 137 110 29
x25356:	add bp, 27	; 3: 131 197 27
x25359:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1468

scanLongDouble$17:	; Equal 24 £temporary1468 0
x25362:	cmp bx, 0	; 3: 131 251 0
x25365:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x25367:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 37 99
x25372:	mov [bp + 29], bp	; 3: 137 110 29
x25375:	add bp, 27	; 3: 131 197 27
x25378:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1469

scanLongDouble$22:	; Assign input £temporary1469
x25381:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x25384:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x25386:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x25390:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x25392:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 62 99
x25397:	mov [bp + 29], bp	; 3: 137 110 29
x25400:	add bp, 27	; 3: 131 197 27
x25403:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1472

scanLongDouble$29:	; Assign input £temporary1472
x25406:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x25409:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x25411:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x25415:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x25417:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x25422:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 92 99
x25427:	mov [bp + 29], bp	; 3: 137 110 29
x25430:	add bp, 27	; 3: 131 197 27
x25433:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1474

scanLongDouble$37:	; Assign input £temporary1474
x25436:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1475 input
x25439:	mov al, [bp + 26]	; 3: 138 70 26
x25442:	and ax, 255	; 3: 37 255 0
x25445:	cmp al, 0	; 2: 60 0
x25447:	jge scanLongDouble$40	; 2: 125 4
x25449:	neg al	; 2: 246 216
x25451:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1475 6
x25453:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x25456:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 126 99
x25461:	mov [bp + 29], bp	; 3: 137 110 29
x25464:	add bp, 27	; 3: 131 197 27
x25467:	jmp isdigit	; 3: 233 127 199

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1476

scanLongDouble$44:	; Equal 60 £temporary1476 0
x25470:	cmp bx, 0	; 3: 131 251 0
x25473:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x25475:	fld qword [float8$10.0#]	; 4: 221 6 173 36

scanLongDouble$46:	; PushFloat value
x25479:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1477 10.0 value
x25482:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1478 input 48
x25484:	mov al, [bp + 26]	; 3: 138 70 26
x25487:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1480 £temporary1478
x25489:	and ax, 255	; 3: 37 255 0
x25492:	cmp al, 0	; 2: 60 0
x25494:	jge scanLongDouble$50	; 2: 125 4
x25496:	neg al	; 2: 246 216
x25498:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1479 £temporary1480
x25500:	mov [container2bytes#], ax	; 3: 163 16 27
x25503:	fild word [container2bytes#]	; 4: 223 6 16 27

scanLongDouble$51:	; BinaryAdd £temporary1481 £temporary1477 £temporary1479
x25507:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x25509:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x25512:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 182 99
x25517:	mov [bp + 29], bp	; 3: 137 110 29
x25520:	add bp, 27	; 3: 131 197 27
x25523:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1482

scanLongDouble$57:	; Assign input £temporary1482
x25526:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x25529:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x25534:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x25536:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x25540:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x25542:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 212 99
x25547:	mov [bp + 29], bp	; 3: 137 110 29
x25550:	add bp, 27	; 3: 131 197 27
x25553:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1485

scanLongDouble$65:	; Assign input £temporary1485
x25556:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1486 input
x25559:	mov al, [bp + 26]	; 3: 138 70 26
x25562:	and ax, 255	; 3: 37 255 0
x25565:	cmp al, 0	; 2: 60 0
x25567:	jge scanLongDouble$68	; 2: 125 4
x25569:	neg al	; 2: 246 216
x25571:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1486 6
x25573:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x25576:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 246 99
x25581:	mov [bp + 29], bp	; 3: 137 110 29
x25584:	add bp, 27	; 3: 131 197 27
x25587:	jmp isdigit	; 3: 233 7 199

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1487

scanLongDouble$72:	; Equal 92 £temporary1487 0
x25590:	cmp bx, 0	; 3: 131 251 0
x25593:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x25595:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x25598:	fld qword [float8$10.0#]	; 4: 221 6 173 36

scanLongDouble$75:	; SignedDivide £temporary1488 factor 10.0
x25602:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x25604:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x25607:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x25610:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1489 input 48
x25613:	mov al, [bp + 26]	; 3: 138 70 26
x25616:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1491 £temporary1489
x25618:	and ax, 255	; 3: 37 255 0
x25621:	cmp al, 0	; 2: 60 0
x25623:	jge scanLongDouble$81	; 2: 125 4
x25625:	neg al	; 2: 246 216
x25627:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1490 £temporary1491
x25629:	mov [container2bytes#], ax	; 3: 163 16 27
x25632:	fild word [container2bytes#]	; 4: 223 6 16 27

scanLongDouble$82:	; SignedMultiply £temporary1492 factor £temporary1490
x25636:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1493 value £temporary1492
x25638:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x25640:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x25643:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 57 100
x25648:	mov [bp + 29], bp	; 3: 137 110 29
x25651:	add bp, 27	; 3: 131 197 27
x25654:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1494

scanLongDouble$89:	; Assign input £temporary1494
x25657:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x25660:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x25665:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1496 input
x25667:	mov al, [bp + 26]	; 3: 138 70 26
x25670:	and ax, 255	; 3: 37 255 0
x25673:	cmp al, 0	; 2: 60 0
x25675:	jge scanLongDouble$94	; 2: 125 4
x25677:	neg al	; 2: 246 216
x25679:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1496 6
x25681:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x25684:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 98 100
x25689:	mov [bp + 29], bp	; 3: 137 110 29
x25692:	add bp, 27	; 3: 131 197 27
x25695:	jmp tolower	; 3: 233 117 192

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1497

scanLongDouble$98:	; NotEqual 118 £temporary1497 101
x25698:	cmp bx, 101	; 3: 131 251 101
x25701:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x25703:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x25708:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 122 100
x25713:	mov [bp + 29], bp	; 3: 137 110 29
x25716:	add bp, 27	; 3: 131 197 27
x25719:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1499

scanLongDouble$104:	; IntegralToFloating £temporary1500 £temporary1499
x25722:	mov [container4bytes#], ebx	; 5: 102 137 30 9 36
x25727:	fild dword [container4bytes#]	; 4: 219 6 9 36

scanLongDouble$105:	; PopFloat exponent
x25731:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x25734:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x25737:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x25740:	fld qword [float8$10.0#]	; 4: 221 6 173 36

scanLongDouble$109:	; Parameter 35 10.0 6
x25744:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x25747:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x25750:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x25753:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 167 100
x25758:	mov [bp + 45], bp	; 3: 137 110 45
x25761:	add bp, 43	; 3: 131 197 43
x25764:	jmp pow	; 3: 233 141 195

scanLongDouble$113:	; PostCall 35
x25767:	fstp qword [bp + 43]	; 3: 221 94 43
x25770:	fld qword [bp + 35]	; 3: 221 70 35
x25773:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1501

scanLongDouble$115:	; SignedMultiply £temporary1502 value £temporary1501
x25776:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x25778:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x25781:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x25783:	mov al, [bp + 26]	; 3: 138 70 26
x25786:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x25789:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 203 100
x25794:	mov [bp + 29], bp	; 3: 137 110 29
x25797:	add bp, 27	; 3: 131 197 27
x25800:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x25803:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x25807:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x25809:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1504 value
x25812:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x25814:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x25817:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x25821:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x25823:	inc word [g_inCount]	; 4: 255 6 28 90

scanLongDouble$128:	; PushFloat value
x25827:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x25830:	mov ax, [bp]	; 3: 139 70 0
x25833:	mov di, [bp + 4]	; 3: 139 126 4
x25836:	mov bp, [bp + 2]	; 3: 139 110 2
x25839:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

scanPattern:	; Assign index 0
x25841:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanPattern$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 14 scanChar 0
x25846:	mov word [bp + 14], scanPattern$3	; 5: 199 70 14 4 101
x25851:	mov [bp + 16], bp	; 3: 137 110 16
x25854:	add bp, 14	; 3: 131 197 14
x25857:	jmp scanChar	; 3: 233 49 245

scanPattern$3:	; PostCall 14

scanPattern$4:	; GetReturnValue £temporary1219

scanPattern$5:	; Assign input £temporary1219
x25860:	mov [bp + 14], bl	; 3: 136 94 14

scanPattern$6:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1220 input
x25863:	mov al, [bp + 14]	; 3: 138 70 14
x25866:	and ax, 255	; 3: 37 255 0
x25869:	cmp al, 0	; 2: 60 0
x25871:	jge scanPattern$8	; 2: 125 4
x25873:	neg al	; 2: 246 216
x25875:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 15 £temporary1220 6
x25877:	mov [bp + 21], ax	; 3: 137 70 21

scanPattern$9:	; Call 15 isspace 0
x25880:	mov word [bp + 15], scanPattern$10	; 5: 199 70 15 38 101
x25885:	mov [bp + 17], bp	; 3: 137 110 17
x25888:	add bp, 15	; 3: 131 197 15
x25891:	jmp isspace	; 3: 233 203 247

scanPattern$10:	; PostCall 15

scanPattern$11:	; GetReturnValue £temporary1221

scanPattern$12:	; Equal 19 £temporary1221 0
x25894:	cmp bx, 0	; 3: 131 251 0
x25897:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 15 scanChar 0
x25899:	mov word [bp + 15], scanPattern$15	; 5: 199 70 15 57 101
x25904:	mov [bp + 17], bp	; 3: 137 110 17
x25907:	add bp, 15	; 3: 131 197 15
x25910:	jmp scanChar	; 3: 233 252 244

scanPattern$15:	; PostCall 15

scanPattern$16:	; GetReturnValue £temporary1222

scanPattern$17:	; Assign input £temporary1222
x25913:	mov [bp + 14], bl	; 3: 136 94 14

scanPattern$18:	; Goto 6
x25916:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 53 string 0
x25918:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x25922:	je scanPattern$53	; 4: 15 132 143 0

scanPattern$20:	; NotEqual 29 not 0
x25926:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x25930:	jne scanPattern$29	; 2: 117 42

scanPattern$21:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 15 pattern 6
x25932:	mov ax, [bp + 8]	; 3: 139 70 8
x25935:	mov [bp + 21], ax	; 3: 137 70 21

scanPattern$23:	; IntegralToIntegral £temporary1227 input
x25938:	mov al, [bp + 14]	; 3: 138 70 14
x25941:	and ax, 255	; 3: 37 255 0
x25944:	cmp al, 0	; 2: 60 0
x25946:	jge scanPattern$24	; 2: 125 4
x25948:	neg al	; 2: 246 216
x25950:	neg ax	; 2: 247 216

scanPattern$24:	; Parameter 15 £temporary1227 8
x25952:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$25:	; Call 15 strchr 0
x25955:	mov word [bp + 15], scanPattern$26	; 5: 199 70 15 113 101
x25960:	mov [bp + 17], bp	; 3: 137 110 17
x25963:	add bp, 15	; 3: 131 197 15
x25966:	jmp strchr	; 3: 233 5 188

scanPattern$26:	; PostCall 15

scanPattern$27:	; GetReturnValue £temporary1228

scanPattern$28:	; NotEqual 38 £temporary1228 0
x25969:	cmp bx, 0	; 3: 131 251 0
x25972:	jne scanPattern$38	; 2: 117 48

scanPattern$29:	; Equal 49 not 0
x25974:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x25978:	je scanPattern$49	; 2: 116 78

scanPattern$30:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$31:	; Parameter 15 pattern 6
x25980:	mov ax, [bp + 8]	; 3: 139 70 8
x25983:	mov [bp + 21], ax	; 3: 137 70 21

scanPattern$32:	; IntegralToIntegral £temporary1231 input
x25986:	mov al, [bp + 14]	; 3: 138 70 14
x25989:	and ax, 255	; 3: 37 255 0
x25992:	cmp al, 0	; 2: 60 0
x25994:	jge scanPattern$33	; 2: 125 4
x25996:	neg al	; 2: 246 216
x25998:	neg ax	; 2: 247 216

scanPattern$33:	; Parameter 15 £temporary1231 8
x26000:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$34:	; Call 15 strchr 0
x26003:	mov word [bp + 15], scanPattern$35	; 5: 199 70 15 161 101
x26008:	mov [bp + 17], bp	; 3: 137 110 17
x26011:	add bp, 15	; 3: 131 197 15
x26014:	jmp strchr	; 3: 233 213 187

scanPattern$35:	; PostCall 15

scanPattern$36:	; GetReturnValue £temporary1232

scanPattern$37:	; NotEqual 49 £temporary1232 0
x26017:	cmp bx, 0	; 3: 131 251 0
x26020:	jne scanPattern$49	; 2: 117 36

scanPattern$38:	; Assign £temporary1238 index
x26022:	mov ax, [bp + 12]	; 3: 139 70 12

scanPattern$39:	; Increment index
x26025:	inc word [bp + 12]	; 3: 255 70 12

scanPattern$40:	; BinaryAdd £temporary1240 string £temporary1238
x26028:	mov si, [bp + 6]	; 3: 139 118 6
x26031:	add si, ax	; 2: 1 198

scanPattern$41:	; Deref £temporary1239 -> £temporary1240 £temporary1240 0

scanPattern$42:	; Assign £temporary1239 -> £temporary1240 input
x26033:	mov al, [bp + 14]	; 3: 138 70 14
x26036:	mov [si], al	; 2: 136 4

scanPattern$43:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$44:	; Call 15 scanChar 0
x26038:	mov word [bp + 15], scanPattern$45	; 5: 199 70 15 196 101
x26043:	mov [bp + 17], bp	; 3: 137 110 17
x26046:	add bp, 15	; 3: 131 197 15
x26049:	jmp scanChar	; 3: 233 113 244

scanPattern$45:	; PostCall 15

scanPattern$46:	; GetReturnValue £temporary1241

scanPattern$47:	; Assign input £temporary1241
x26052:	mov [bp + 14], bl	; 3: 136 94 14

scanPattern$48:	; Goto 20
x26055:	jmp scanPattern$20	; 3: 233 124 255

scanPattern$49:	; BinaryAdd £temporary1243 string index
x26058:	mov si, [bp + 6]	; 3: 139 118 6
x26061:	add si, [bp + 12]	; 3: 3 118 12

scanPattern$50:	; Deref £temporary1242 -> £temporary1243 £temporary1243 0

scanPattern$51:	; Assign £temporary1242 -> £temporary1243 0
x26064:	mov byte [si], 0	; 3: 198 4 0

scanPattern$52:	; Goto 77
x26067:	jmp scanPattern$77	; 2: 235 115

scanPattern$53:	; NotEqual 62 not 0
x26069:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x26073:	jne scanPattern$62	; 2: 117 42

scanPattern$54:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$55:	; Parameter 15 pattern 6
x26075:	mov ax, [bp + 8]	; 3: 139 70 8
x26078:	mov [bp + 21], ax	; 3: 137 70 21

scanPattern$56:	; IntegralToIntegral £temporary1246 input
x26081:	mov al, [bp + 14]	; 3: 138 70 14
x26084:	and ax, 255	; 3: 37 255 0
x26087:	cmp al, 0	; 2: 60 0
x26089:	jge scanPattern$57	; 2: 125 4
x26091:	neg al	; 2: 246 216
x26093:	neg ax	; 2: 247 216

scanPattern$57:	; Parameter 15 £temporary1246 8
x26095:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Call 15 strchr 0
x26098:	mov word [bp + 15], scanPattern$59	; 5: 199 70 15 0 102
x26103:	mov [bp + 17], bp	; 3: 137 110 17
x26106:	add bp, 15	; 3: 131 197 15
x26109:	jmp strchr	; 3: 233 118 187

scanPattern$59:	; PostCall 15

scanPattern$60:	; GetReturnValue £temporary1247

scanPattern$61:	; NotEqual 71 £temporary1247 0
x26112:	cmp bx, 0	; 3: 131 251 0
x26115:	jne scanPattern$71	; 2: 117 48

scanPattern$62:	; Equal 77 not 0
x26117:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x26121:	je scanPattern$77	; 2: 116 61

scanPattern$63:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$64:	; Parameter 15 pattern 6
x26123:	mov ax, [bp + 8]	; 3: 139 70 8
x26126:	mov [bp + 21], ax	; 3: 137 70 21

scanPattern$65:	; IntegralToIntegral £temporary1250 input
x26129:	mov al, [bp + 14]	; 3: 138 70 14
x26132:	and ax, 255	; 3: 37 255 0
x26135:	cmp al, 0	; 2: 60 0
x26137:	jge scanPattern$66	; 2: 125 4
x26139:	neg al	; 2: 246 216
x26141:	neg ax	; 2: 247 216

scanPattern$66:	; Parameter 15 £temporary1250 8
x26143:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$67:	; Call 15 strchr 0
x26146:	mov word [bp + 15], scanPattern$68	; 5: 199 70 15 48 102
x26151:	mov [bp + 17], bp	; 3: 137 110 17
x26154:	add bp, 15	; 3: 131 197 15
x26157:	jmp strchr	; 3: 233 70 187

scanPattern$68:	; PostCall 15

scanPattern$69:	; GetReturnValue £temporary1251

scanPattern$70:	; NotEqual 77 £temporary1251 0
x26160:	cmp bx, 0	; 3: 131 251 0
x26163:	jne scanPattern$77	; 2: 117 19

scanPattern$71:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$72:	; Call 15 scanChar 0
x26165:	mov word [bp + 15], scanPattern$73	; 5: 199 70 15 67 102
x26170:	mov [bp + 17], bp	; 3: 137 110 17
x26173:	add bp, 15	; 3: 131 197 15
x26176:	jmp scanChar	; 3: 233 242 243

scanPattern$73:	; PostCall 15

scanPattern$74:	; GetReturnValue £temporary1257

scanPattern$75:	; Assign input £temporary1257
x26179:	mov [bp + 14], bl	; 3: 136 94 14

scanPattern$76:	; Goto 53
x26182:	jmp scanPattern$53	; 2: 235 141

scanPattern$77:	; Return 0
x26184:	mov ax, [bp]	; 3: 139 70 0
x26187:	mov di, [bp + 4]	; 3: 139 126 4
x26190:	mov bp, [bp + 2]	; 3: 139 110 2
x26193:	jmp ax	; 2: 255 224

scanPattern$78:	; FunctionEnd scanPattern

fclose:	; Equal 20 stream 0
x26195:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26199:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x26201:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary984 -> stream stream 2
x26203:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary984 -> stream
x26206:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x26209:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x26211:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x26213:	mov word [errno], 11	; 6: 199 6 182 10 11 0

fclose$7:	; SetReturnValue -1
x26219:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x26222:	mov ax, [bp]	; 3: 139 70 0
x26225:	mov di, [bp + 4]	; 3: 139 126 4
x26228:	mov bp, [bp + 2]	; 3: 139 110 2
x26231:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary986 -> stream stream 27
x26233:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary986 -> stream 0
x26236:	cmp word [si + 27], 0	; 4: 131 124 27 0
x26240:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary987 -> stream stream 4
x26242:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary987 -> stream 6
x26245:	mov [bp + 14], si	; 3: 137 118 14
x26248:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x26252:	mov word [bp + 8], fclose$15	; 5: 199 70 8 154 102
x26257:	mov [bp + 10], bp	; 3: 137 110 10
x26260:	add bp, 8	; 3: 131 197 8
x26263:	nop	; 1: 144
x26264:	jmp remove	; 2: 235 120

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary990 -> stream stream 0
x26266:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary990 -> stream 0
x26269:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x26273:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x26276:	mov ax, [bp]	; 3: 139 70 0
x26279:	mov di, [bp + 4]	; 3: 139 126 4
x26282:	mov bp, [bp + 2]	; 3: 139 110 2
x26285:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x26287:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x26292:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x26296:	jge fclose$40	; 2: 125 74

fclose$22:	; UnsignedMultiply £temporary994 index 29
x26298:	mov ax, [bp + 8]	; 3: 139 70 8
x26301:	xor dx, dx	; 2: 49 210
x26303:	mul word [int2$29#]	; 4: 247 38 128 79

fclose$23:	; BinaryAdd £temporary995 g_fileArray £temporary994
x26307:	mov si, g_fileArray	; 3: 190 39 13
x26310:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary993 -> £temporary995 £temporary995 0

fclose$25:	; Equal 38 £temporary993.open$0 -> £temporary995 0
x26312:	cmp word [si], 0	; 3: 131 60 0
x26315:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; UnsignedMultiply £temporary997 index 29
x26317:	mov ax, [bp + 8]	; 3: 139 70 8
x26320:	xor dx, dx	; 2: 49 210
x26322:	mul word [int2$29#]	; 4: 247 38 128 79

fclose$28:	; BinaryAdd £temporary998 g_fileArray £temporary997
x26326:	mov si, g_fileArray	; 3: 190 39 13
x26329:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary996 -> £temporary998 £temporary998 0

fclose$30:	; address £temporary999 £temporary996 -> £temporary998

fclose$31:	; Parameter 10 £temporary999 6
x26331:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x26334:	mov word [bp + 10], fclose$33	; 5: 199 70 10 236 102
x26339:	mov [bp + 12], bp	; 3: 137 110 12
x26342:	add bp, 10	; 3: 131 197 10
x26345:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary1000

fclose$35:	; NotEqual 38 £temporary1000 -1
x26348:	cmp bx, -1	; 3: 131 251 255
x26351:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x26353:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x26356:	mov ax, [bp]	; 3: 139 70 0
x26359:	mov di, [bp + 4]	; 3: 139 126 4
x26362:	mov bp, [bp + 2]	; 3: 139 110 2
x26365:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x26367:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x26370:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x26372:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x26375:	mov ax, [bp]	; 3: 139 70 0
x26378:	mov di, [bp + 4]	; 3: 139 126 4
x26381:	mov bp, [bp + 2]	; 3: 139 110 2
x26384:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

remove:	; AssignRegister ah 65
x26386:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x26388:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x26390:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x26393:	int 33	; 2: 205 33

remove$4:	; NotCarry 8
x26395:	jnc remove$8	; 2: 115 20

remove$5:	; Assign errno 18
x26397:	mov word [errno], 18	; 6: 199 6 182 10 18 0

remove$6:	; SetReturnValue -1
x26403:	mov bx, -1	; 3: 187 255 255

remove$7:	; Return -1
x26406:	mov ax, [bp]	; 3: 139 70 0
x26409:	mov di, [bp + 4]	; 3: 139 126 4
x26412:	mov bp, [bp + 2]	; 3: 139 110 2
x26415:	jmp ax	; 2: 255 224

remove$8:	; SetReturnValue 0
x26417:	mov bx, 0	; 3: 187 0 0

remove$9:	; Return 0
x26420:	mov ax, [bp]	; 3: 139 70 0
x26423:	mov di, [bp + 4]	; 3: 139 126 4
x26426:	mov bp, [bp + 2]	; 3: 139 110 2
x26429:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x26431:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x26433:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x26435:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x26438:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x26441:	int 33	; 2: 205 33

rename$5:	; NotCarry 9
x26443:	jnc rename$9	; 2: 115 20

rename$6:	; Assign errno 19
x26445:	mov word [errno], 19	; 6: 199 6 182 10 19 0

rename$7:	; SetReturnValue -1
x26451:	mov bx, -1	; 3: 187 255 255

rename$8:	; Return -1
x26454:	mov ax, [bp]	; 3: 139 70 0
x26457:	mov di, [bp + 4]	; 3: 139 126 4
x26460:	mov bp, [bp + 2]	; 3: 139 110 2
x26463:	jmp ax	; 2: 255 224

rename$9:	; SetReturnValue 0
x26465:	mov bx, 0	; 3: 187 0 0

rename$10:	; Return 0
x26468:	mov ax, [bp]	; 3: 139 70 0
x26471:	mov di, [bp + 4]	; 3: 139 126 4
x26474:	mov bp, [bp + 2]	; 3: 139 110 2
x26477:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary1095 -> stream stream 2
x26479:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary1095 -> stream
x26482:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary1097 size nobj
x26485:	mov ax, [bp + 8]	; 3: 139 70 8
x26488:	xor dx, dx	; 2: 49 210
x26490:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary1097
x26493:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x26495:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x26497:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x26500:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x26502:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary1101 -> stream stream 21
x26504:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x26507:	mov word [errno], 13	; 6: 199 6 182 10 13 0

fwrite$10:	; Assign £temporary1101 -> stream errno
x26513:	mov ax, [errno]	; 3: 161 182 10
x26516:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x26519:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x26522:	mov ax, [bp]	; 3: 139 70 0
x26525:	mov di, [bp + 4]	; 3: 139 126 4
x26528:	mov bp, [bp + 2]	; 3: 139 110 2
x26531:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary1102 ax

fwrite$14:	; SetReturnValue £temporary1102
x26533:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary1102
x26535:	mov ax, [bp]	; 3: 139 70 0
x26538:	mov di, [bp + 4]	; 3: 139 126 4
x26541:	mov bp, [bp + 2]	; 3: 139 110 2
x26544:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary1086 -> stream stream 2
x26546:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary1086 -> stream
x26549:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary1088 size nobj
x26552:	mov ax, [bp + 8]	; 3: 139 70 8
x26555:	xor dx, dx	; 2: 49 210
x26557:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary1088
x26560:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x26562:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x26564:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x26567:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x26569:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary1092 -> stream stream 21
x26571:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x26574:	mov word [errno], 14	; 6: 199 6 182 10 14 0

fread$10:	; Assign £temporary1092 -> stream errno
x26580:	mov ax, [errno]	; 3: 161 182 10
x26583:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x26586:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x26589:	mov ax, [bp]	; 3: 139 70 0
x26592:	mov di, [bp + 4]	; 3: 139 126 4
x26595:	mov bp, [bp + 2]	; 3: 139 110 2
x26598:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary1093 ax

fread$14:	; SetReturnValue £temporary1093
x26600:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary1093
x26602:	mov ax, [bp]	; 3: 139 70 0
x26605:	mov di, [bp + 4]	; 3: 139 126 4
x26608:	mov bp, [bp + 2]	; 3: 139 110 2
x26611:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary213 memorySize
x26613:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary213 4
x26616:	add ax, 4	; 3: 131 192 4
x26619:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x26622:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x26627:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x26632:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x26637:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x26642:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x26647:	mov ax, [g_firstBlockPtr]	; 3: 161 131 105
x26650:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x26653:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26657:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x26659:	mov ax, [stderr]	; 3: 161 74 75
x26662:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x26665:	mov word [bp + 30], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 76 75

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x26670:	mov word [bp + 32], string_memorySize203E3D200#	; 5: 199 70 32 133 105

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x26675:	mov word [bp + 34], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 149 105

malloc$14:	; Parameter 22 41 14
x26680:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x26685:	mov word [bp + 22], malloc$16	; 5: 199 70 22 80 104
x26690:	mov [bp + 24], bp	; 3: 137 110 24
x26693:	add bp, 22	; 3: 131 197 22
x26696:	mov di, bp	; 2: 137 239
x26698:	add di, 6	; 3: 131 199 6
x26701:	jmp fprintf	; 3: 233 91 235

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x26704:	mov word [bp + 22], malloc$19	; 5: 199 70 22 94 104
x26709:	mov [bp + 24], bp	; 3: 137 110 24
x26712:	add bp, 22	; 3: 131 197 22
x26715:	jmp abort	; 3: 233 136 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x26718:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26722:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x26724:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x26727:	mov ax, [bp]	; 3: 139 70 0
x26730:	mov di, [bp + 4]	; 3: 139 126 4
x26733:	mov bp, [bp + 2]	; 3: 139 110 2
x26736:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x26738:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x26742:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary221 currBlockPtr
x26744:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary221
x26747:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary222 -> currBlockPtr currBlockPtr 0
x26750:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary223 currAddress £temporary222 -> currBlockPtr
x26753:	mov ax, [bp + 22]	; 3: 139 70 22
x26756:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary224 £temporary223 4
x26758:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary224
x26761:	mov bx, [bp + 12]	; 3: 139 94 12
x26764:	sub bx, ax	; 2: 41 195
x26766:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x26769:	mov ax, [bp + 24]	; 3: 139 70 24
x26772:	cmp [bp + 8], ax	; 3: 57 70 8
x26775:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x26777:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x26781:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x26783:	mov ax, [bp + 10]	; 3: 139 70 10
x26786:	cmp [bp + 24], ax	; 3: 57 70 24
x26789:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x26791:	mov ax, [bp + 24]	; 3: 139 70 24
x26794:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x26797:	mov ax, [bp + 20]	; 3: 139 70 20
x26800:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x26803:	mov ax, [bp + 18]	; 3: 139 70 18
x26806:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x26809:	mov ax, [bp + 22]	; 3: 139 70 22
x26812:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x26815:	mov ax, [bp + 20]	; 3: 139 70 20
x26818:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary231 -> currBlockPtr currBlockPtr 2
x26821:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary231 -> currBlockPtr
x26824:	mov ax, [si + 2]	; 3: 139 68 2
x26827:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x26830:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x26832:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x26836:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary233 minBlockPtr
x26838:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary234 -> minBlockPtr minBlockPtr 0
x26841:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary235 £temporary233 £temporary234 -> minBlockPtr
x26844:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary235 4
x26846:	add ax, 4	; 3: 131 192 4
x26849:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary237 newAddress
x26852:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary237
x26855:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary238 -> newBlockPtr newBlockPtr 0
x26858:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary238 -> newBlockPtr memorySize
x26861:	mov ax, [bp + 6]	; 3: 139 70 6
x26864:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary239 -> newBlockPtr newBlockPtr 2
x26866:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary239 -> newBlockPtr minBlockPtr
x26869:	mov ax, [bp + 14]	; 3: 139 70 14
x26872:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x26875:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x26879:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary241 -> minPrevBlockPtr minPrevBlockPtr 2
x26881:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary241 -> minPrevBlockPtr newBlockPtr
x26884:	mov ax, [bp + 24]	; 3: 139 70 24
x26887:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x26890:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x26892:	mov ax, [bp + 24]	; 3: 139 70 24
x26895:	mov [g_firstBlockPtr], ax	; 3: 163 131 105

malloc$57:	; BinaryAdd £temporary242 newAddress 4
x26898:	mov bx, [bp + 22]	; 3: 139 94 22
x26901:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary243 £temporary242

malloc$59:	; SetReturnValue £temporary243

malloc$60:	; Return £temporary243
x26904:	mov ax, [bp]	; 3: 139 70 0
x26907:	mov di, [bp + 4]	; 3: 139 126 4
x26910:	mov bp, [bp + 2]	; 3: 139 110 2
x26913:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x26915:	mov ax, [bp + 12]	; 3: 139 70 12
x26918:	sub ax, [bp + 8]	; 3: 43 70 8
x26921:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary245 bp

malloc$63:	; Assign stackTop £temporary245
x26924:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x26927:	mov ax, [bp + 22]	; 3: 139 70 22
x26930:	cmp [bp + 24], ax	; 3: 57 70 24
x26933:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary247 newAddress
x26935:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary247
x26938:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary248 -> newBlockPtr newBlockPtr 0
x26941:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary248 -> newBlockPtr memorySize
x26944:	mov ax, [bp + 6]	; 3: 139 70 6
x26947:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary249 -> newBlockPtr newBlockPtr 2
x26949:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary249 -> newBlockPtr 0
x26952:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x26957:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x26961:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary251 -> prevBlockPtr prevBlockPtr 2
x26963:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary251 -> prevBlockPtr newBlockPtr
x26966:	mov ax, [bp + 26]	; 3: 139 70 26
x26969:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x26972:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x26974:	mov ax, [bp + 26]	; 3: 139 70 26
x26977:	mov [g_firstBlockPtr], ax	; 3: 163 131 105

malloc$76:	; BinaryAdd £temporary252 newAddress 4
x26980:	mov bx, [bp + 22]	; 3: 139 94 22
x26983:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary253 £temporary252

malloc$78:	; SetReturnValue £temporary253

malloc$79:	; Return £temporary253
x26986:	mov ax, [bp]	; 3: 139 70 0
x26989:	mov di, [bp + 4]	; 3: 139 126 4
x26992:	mov bp, [bp + 2]	; 3: 139 110 2
x26995:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x26997:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x27000:	mov ax, [bp]	; 3: 139 70 0
x27003:	mov di, [bp + 4]	; 3: 139 126 4
x27006:	mov bp, [bp + 2]	; 3: 139 110 2
x27009:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x27011:	dw 0	; 2: 0 0

string_memorySize203E3D200#:
x27013:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x27029:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary267 freeMemoryPtr
x27092:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary268 £temporary267 4
x27095:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary269 £temporary268

free$3:	; Assign freeBlockPtr £temporary269
x27098:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x27101:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x27106:	mov ax, [g_firstBlockPtr]	; 3: 161 131 105
x27109:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x27112:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27116:	jne free$8	; 2: 117 11

free$7:	; Return
x27118:	mov ax, [bp]	; 3: 139 70 0
x27121:	mov di, [bp + 4]	; 3: 139 126 4
x27124:	mov bp, [bp + 2]	; 3: 139 110 2
x27127:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x27129:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x27133:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x27135:	mov ax, [bp + 8]	; 3: 139 70 8
x27138:	cmp [bp + 12], ax	; 3: 57 70 12
x27141:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x27143:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x27147:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary274 -> currBlockPtr currBlockPtr 2
x27149:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary274 -> currBlockPtr 0
x27152:	cmp word [si + 2], 0	; 4: 131 124 2 0
x27156:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x27158:	mov word [g_firstBlockPtr], 0	; 6: 199 6 131 105 0 0

free$14:	; Goto 27
x27164:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x27166:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x27170:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary278 -> currBlockPtr currBlockPtr 2
x27172:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary278 -> currBlockPtr
x27175:	mov ax, [si + 2]	; 3: 139 68 2
x27178:	mov [g_firstBlockPtr], ax	; 3: 163 131 105

free$18:	; Goto 27
x27181:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary279 -> currBlockPtr currBlockPtr 2
x27183:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary279 -> currBlockPtr 0
x27186:	cmp word [si + 2], 0	; 4: 131 124 2 0
x27190:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary281 -> prevBlockPtr prevBlockPtr 2
x27192:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary281 -> prevBlockPtr 0
x27195:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x27200:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary282 -> prevBlockPtr prevBlockPtr 2
x27202:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary283 -> currBlockPtr currBlockPtr 2
x27205:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary282 -> prevBlockPtr £temporary283 -> currBlockPtr
x27208:	mov ax, [di + 2]	; 3: 139 69 2
x27211:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x27214:	mov ax, [bp]	; 3: 139 70 0
x27217:	mov di, [bp + 4]	; 3: 139 126 4
x27220:	mov bp, [bp + 2]	; 3: 139 110 2
x27223:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x27225:	mov ax, [bp + 12]	; 3: 139 70 12
x27228:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary284 -> currBlockPtr currBlockPtr 2
x27231:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary284 -> currBlockPtr
x27234:	mov ax, [si + 2]	; 3: 139 68 2
x27237:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x27240:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x27242:	mov ax, [bp]	; 3: 139 70 0
x27245:	mov di, [bp + 4]	; 3: 139 126 4
x27248:	mov bp, [bp + 2]	; 3: 139 110 2
x27251:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x27253:	mov ax, [bp + 6]	; 3: 139 70 6
x27256:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x27259:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x27264:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x27269:	mov word [bp + 8], ftell$5	; 5: 199 70 8 147 106
x27274:	mov [bp + 10], bp	; 3: 137 110 10
x27277:	add bp, 8	; 3: 131 197 8
x27280:	jmp fseek	; 3: 233 115 232

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary1117

ftell$7:	; SetReturnValue £temporary1117

ftell$8:	; Return £temporary1117
x27283:	mov ax, [bp]	; 3: 139 70 0
x27286:	mov di, [bp + 4]	; 3: 139 126 4
x27289:	mov bp, [bp + 2]	; 3: 139 110 2
x27292:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x27294:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary1014 c
x27298:	mov si, bp	; 2: 137 238
x27300:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary1014 6
x27303:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x27306:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x27311:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x27316:	mov ax, [bp + 6]	; 3: 139 70 6
x27319:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x27322:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 200 106
x27327:	mov [bp + 11], bp	; 3: 137 110 11
x27330:	add bp, 9	; 3: 131 197 9
x27333:	jmp fread	; 3: 233 234 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary1015

fgetc$10:	; SignedLessThanEqual 14 £temporary1015 0
x27336:	cmp bx, 0	; 3: 131 251 0
x27339:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary1017 c
x27341:	mov bl, [bp + 8]	; 3: 138 94 8
x27344:	and bx, 255	; 4: 129 227 255 0
x27348:	cmp bl, 0	; 3: 128 251 0
x27351:	jge fgetc$12	; 2: 125 4
x27353:	neg bl	; 2: 246 219
x27355:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary1017

fgetc$13:	; Return £temporary1017
x27357:	mov ax, [bp]	; 3: 139 70 0
x27360:	mov di, [bp + 4]	; 3: 139 126 4
x27363:	mov bp, [bp + 2]	; 3: 139 110 2
x27366:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x27368:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x27371:	mov ax, [bp]	; 3: 139 70 0
x27374:	mov di, [bp + 4]	; 3: 139 126 4
x27377:	mov bp, [bp + 2]	; 3: 139 110 2
x27380:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

stdio_test:	; Assign n 0
x27382:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5691 n
x27387:	mov si, bp	; 2: 137 238
x27389:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5691
x27392:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x27395:	mov word [bp + 16], string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 171 113

stdio_test$5:	; Parameter 10 123 8
x27400:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x27405:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x27410:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x27418:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x27426:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x27431:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x27439:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 66 107
x27444:	mov [bp + 12], bp	; 3: 137 110 12
x27447:	add bp, 10	; 3: 131 197 10
x27450:	mov di, bp	; 2: 137 239
x27452:	add di, 18	; 3: 131 199 18
x27455:	jmp printf	; 3: 233 131 161

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x27458:	mov word [bp + 16], string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 206 113

stdio_test$15:	; Parameter 10 123 8
x27463:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x27468:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x27473:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x27481:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x27489:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x27494:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x27502:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 129 107
x27507:	mov [bp + 12], bp	; 3: 137 110 12
x27510:	add bp, 10	; 3: 131 197 10
x27513:	mov di, bp	; 2: 137 239
x27515:	add di, 18	; 3: 131 199 18
x27518:	jmp printf	; 3: 233 68 161

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x27521:	mov word [bp + 16], string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 246 113

stdio_test$25:	; Parameter 10 123 8
x27526:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x27531:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x27536:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x27544:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x27552:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x27557:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x27565:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 192 107
x27570:	mov [bp + 12], bp	; 3: 137 110 12
x27573:	add bp, 10	; 3: 131 197 10
x27576:	mov di, bp	; 2: 137 239
x27578:	add di, 18	; 3: 131 199 18
x27581:	jmp printf	; 3: 233 5 161

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x27584:	mov word [bp + 16], string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 36 114

stdio_test$35:	; Parameter 10 123 8
x27589:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x27594:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x27599:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x27607:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x27615:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x27620:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x27628:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 255 107
x27633:	mov [bp + 12], bp	; 3: 137 110 12
x27636:	add bp, 10	; 3: 131 197 10
x27639:	mov di, bp	; 2: 137 239
x27641:	add di, 18	; 3: 131 199 18
x27644:	jmp printf	; 3: 233 198 160

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x27647:	mov word [bp + 16], string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 82 114

stdio_test$45:	; Parameter 10 123 8
x27652:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x27657:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x27662:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x27670:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x27678:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x27683:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x27691:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 62 108
x27696:	mov [bp + 12], bp	; 3: 137 110 12
x27699:	add bp, 10	; 3: 131 197 10
x27702:	mov di, bp	; 2: 137 239
x27704:	add di, 18	; 3: 131 199 18
x27707:	jmp printf	; 3: 233 135 160

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x27710:	mov word [bp + 16], string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 135 114

stdio_test$55:	; Parameter 10 123 8
x27715:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x27720:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x27725:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x27733:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x27741:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x27746:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x27754:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 125 108
x27759:	mov [bp + 12], bp	; 3: 137 110 12
x27762:	add bp, 10	; 3: 131 197 10
x27765:	mov di, bp	; 2: 137 239
x27767:	add di, 18	; 3: 131 199 18
x27770:	jmp printf	; 3: 233 72 160

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x27773:	mov word [bp + 16], string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 181 114

stdio_test$65:	; Parameter 10 123 8
x27778:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x27783:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x27788:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x27796:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x27804:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x27809:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x27817:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 188 108
x27822:	mov [bp + 12], bp	; 3: 137 110 12
x27825:	add bp, 10	; 3: 131 197 10
x27828:	mov di, bp	; 2: 137 239
x27830:	add di, 18	; 3: 131 199 18
x27833:	jmp printf	; 3: 233 9 160

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x27836:	mov word [bp + 16], string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 233 114

stdio_test$75:	; Parameter 10 123 8
x27841:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x27846:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x27851:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x27859:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x27867:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x27872:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x27880:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 251 108
x27885:	mov [bp + 12], bp	; 3: 137 110 12
x27888:	add bp, 10	; 3: 131 197 10
x27891:	mov di, bp	; 2: 137 239
x27893:	add di, 18	; 3: 131 199 18
x27896:	jmp printf	; 3: 233 202 159

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x27899:	mov word [bp + 16], string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 29 115

stdio_test$85:	; Parameter 10 123 8
x27904:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x27909:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x27914:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x27922:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x27930:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x27935:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x27943:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 58 109
x27948:	mov [bp + 12], bp	; 3: 137 110 12
x27951:	add bp, 10	; 3: 131 197 10
x27954:	mov di, bp	; 2: 137 239
x27956:	add di, 18	; 3: 131 199 18
x27959:	jmp printf	; 3: 233 139 159

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x27962:	mov word [bp + 16], string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 88 115

stdio_test$95:	; Parameter 10 123 8
x27967:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x27972:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x27977:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x27985:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x27993:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x27998:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x28006:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 121 109
x28011:	mov [bp + 12], bp	; 3: 137 110 12
x28014:	add bp, 10	; 3: 131 197 10
x28017:	mov di, bp	; 2: 137 239
x28019:	add di, 18	; 3: 131 199 18
x28022:	jmp printf	; 3: 233 76 159

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x28025:	mov word [bp + 16], string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 134 115

stdio_test$105:	; Parameter 10 123 8
x28030:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x28035:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x28040:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x28048:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x28056:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x28061:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x28069:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 184 109
x28074:	mov [bp + 12], bp	; 3: 137 110 12
x28077:	add bp, 10	; 3: 131 197 10
x28080:	mov di, bp	; 2: 137 239
x28082:	add di, 18	; 3: 131 199 18
x28085:	jmp printf	; 3: 233 13 159

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x28088:	mov word [bp + 16], string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 186 115

stdio_test$115:	; Parameter 10 123 8
x28093:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x28098:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x28103:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x28111:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x28119:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x28124:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x28132:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 247 109
x28137:	mov [bp + 12], bp	; 3: 137 110 12
x28140:	add bp, 10	; 3: 131 197 10
x28143:	mov di, bp	; 2: 137 239
x28145:	add di, 18	; 3: 131 199 18
x28148:	jmp printf	; 3: 233 206 158

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x28151:	mov word [bp + 16], string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 238 115

stdio_test$125:	; Parameter 10 123 8
x28156:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x28161:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x28166:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x28174:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x28182:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x28187:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x28195:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 54 110
x28200:	mov [bp + 12], bp	; 3: 137 110 12
x28203:	add bp, 10	; 3: 131 197 10
x28206:	mov di, bp	; 2: 137 239
x28208:	add di, 18	; 3: 131 199 18
x28211:	jmp printf	; 3: 233 143 158

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x28214:	mov word [bp + 16], string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 41 116

stdio_test$135:	; Parameter 10 123 8
x28219:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x28224:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x28229:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x28234:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x28242:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x28250:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x28258:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 117 110
x28263:	mov [bp + 12], bp	; 3: 137 110 12
x28266:	add bp, 10	; 3: 131 197 10
x28269:	mov di, bp	; 2: 137 239
x28271:	add di, 18	; 3: 131 199 18
x28274:	jmp printf	; 3: 233 80 158

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x28277:	mov word [bp + 16], string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 75 116

stdio_test$145:	; Parameter 10 123 8
x28282:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x28287:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x28292:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x28297:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x28305:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x28313:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x28321:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 180 110
x28326:	mov [bp + 12], bp	; 3: 137 110 12
x28329:	add bp, 10	; 3: 131 197 10
x28332:	mov di, bp	; 2: 137 239
x28334:	add di, 18	; 3: 131 199 18
x28337:	jmp printf	; 3: 233 17 158

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x28340:	mov word [bp + 16], string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 115 116

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x28345:	mov word [bp + 18], string_Hello2C20World21#	; 5: 199 70 18 137 116

stdio_test$156:	; Parameter 10 88 10
x28350:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x28355:	mov ax, [bp + 8]	; 3: 139 70 8
x28358:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x28361:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 220 110
x28366:	mov [bp + 12], bp	; 3: 137 110 12
x28369:	add bp, 10	; 3: 131 197 10
x28372:	mov di, bp	; 2: 137 239
x28374:	add di, 6	; 3: 131 199 6
x28377:	jmp printf	; 3: 233 233 157

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x28380:	mov word [bp + 16], string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 151 116

stdio_test$162:	; PushFloat 123.456
x28385:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$163:	; Parameter 10 123.456 8
x28389:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x28392:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$165:	; Parameter 10 123.456 16
x28396:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x28399:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$167:	; Parameter 10 123.456 24
x28403:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x28406:	fld qword [float8$123456.1#]	; 4: 221 6 185 116

stdio_test$169:	; Parameter 10 123456.1 32
x28410:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x28413:	fld qword [float8$123456.1#]	; 4: 221 6 185 116

stdio_test$171:	; Parameter 10 123456.1 40
x28417:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x28420:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 23 111
x28425:	mov [bp + 12], bp	; 3: 137 110 12
x28428:	add bp, 10	; 3: 131 197 10
x28431:	mov di, bp	; 2: 137 239
x28433:	add di, 40	; 3: 131 199 40
x28436:	jmp printf	; 3: 233 174 157

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x28439:	mov word [bp + 16], string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 193 116

stdio_test$176:	; PushFloat 123.456
x28444:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$177:	; Parameter 10 123.456 8
x28448:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x28451:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$179:	; Parameter 10 123.456 16
x28455:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x28458:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$181:	; Parameter 10 123.456 24
x28462:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x28465:	fld qword [float8$123456.1#]	; 4: 221 6 185 116

stdio_test$183:	; Parameter 10 123456.1 32
x28469:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x28472:	fld qword [float8$123456.1#]	; 4: 221 6 185 116

stdio_test$185:	; Parameter 10 123456.1 40
x28476:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x28479:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 82 111
x28484:	mov [bp + 12], bp	; 3: 137 110 12
x28487:	add bp, 10	; 3: 131 197 10
x28490:	mov di, bp	; 2: 137 239
x28492:	add di, 40	; 3: 131 199 40
x28495:	jmp printf	; 3: 233 115 157

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x28498:	mov word [bp + 16], string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 224 116

stdio_test$190:	; PushFloat 123.456
x28503:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$191:	; Parameter 10 123.456 8
x28507:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x28510:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$193:	; Parameter 10 123.456 16
x28514:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x28517:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$195:	; Parameter 10 123.456 24
x28521:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x28524:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$197:	; Parameter 10 123.456 32
x28528:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x28531:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$199:	; Parameter 10 123.456 40
x28535:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x28538:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 141 111
x28543:	mov [bp + 12], bp	; 3: 137 110 12
x28546:	add bp, 10	; 3: 131 197 10
x28549:	mov di, bp	; 2: 137 239
x28551:	add di, 40	; 3: 131 199 40
x28554:	jmp printf	; 3: 233 56 157

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x28557:	mov word [bp + 16], string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 255 116

stdio_test$204:	; PushFloat 123.456
x28562:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$205:	; Parameter 10 123.456 8
x28566:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x28569:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$207:	; Parameter 10 123.456 16
x28573:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x28576:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$209:	; Parameter 10 123.456 24
x28580:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x28583:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$211:	; Parameter 10 123.456 32
x28587:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x28590:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$213:	; Parameter 10 123.456 40
x28594:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x28597:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 200 111
x28602:	mov [bp + 12], bp	; 3: 137 110 12
x28605:	add bp, 10	; 3: 131 197 10
x28608:	mov di, bp	; 2: 137 239
x28610:	add di, 40	; 3: 131 199 40
x28613:	jmp printf	; 3: 233 253 156

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x28616:	mov word [bp + 16], string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 35 117

stdio_test$218:	; PushFloat 123.456
x28621:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$219:	; Parameter 10 123.456 8
x28625:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x28628:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$221:	; Parameter 10 123.456 16
x28632:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x28635:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$223:	; Parameter 10 123.456 24
x28639:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x28642:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$225:	; Parameter 10 123.456 32
x28646:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x28649:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$227:	; Parameter 10 123.456 40
x28653:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x28656:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 3 112
x28661:	mov [bp + 12], bp	; 3: 137 110 12
x28664:	add bp, 10	; 3: 131 197 10
x28667:	mov di, bp	; 2: 137 239
x28669:	add di, 40	; 3: 131 199 40
x28672:	jmp printf	; 3: 233 194 156

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x28675:	mov word [bp + 16], string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 76 117

stdio_test$232:	; PushFloat 123.456
x28680:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$233:	; Parameter 10 123.456 8
x28684:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x28687:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$235:	; Parameter 10 123.456 16
x28691:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x28694:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$237:	; Parameter 10 123.456 24
x28698:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x28701:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$239:	; Parameter 10 123.456 32
x28705:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x28708:	fld qword [float8$123.456#]	; 4: 221 6 177 116

stdio_test$241:	; Parameter 10 123.456 40
x28712:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x28715:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 62 112
x28720:	mov [bp + 12], bp	; 3: 137 110 12
x28723:	add bp, 10	; 3: 131 197 10
x28726:	mov di, bp	; 2: 137 239
x28728:	add di, 40	; 3: 131 199 40
x28731:	jmp printf	; 3: 233 135 156

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x28734:	mov word [bp + 16], string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 151 116

stdio_test$246:	; PushFloat -123.456
x28739:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$247:	; Parameter 10 -123.456 8
x28743:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x28746:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$249:	; Parameter 10 -123.456 16
x28750:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x28753:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$251:	; Parameter 10 -123.456 24
x28757:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x28760:	fld qword [float8$minus0.000000123456#]	; 4: 221 6 131 117

stdio_test$253:	; Parameter 10 -0.000000123456 32
x28764:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x28767:	fld qword [float8$minus0.000000123456#]	; 4: 221 6 131 117

stdio_test$255:	; Parameter 10 -0.000000123456 40
x28771:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x28774:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 121 112
x28779:	mov [bp + 12], bp	; 3: 137 110 12
x28782:	add bp, 10	; 3: 131 197 10
x28785:	mov di, bp	; 2: 137 239
x28787:	add di, 40	; 3: 131 199 40
x28790:	jmp printf	; 3: 233 76 156

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x28793:	mov word [bp + 16], string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 193 116

stdio_test$260:	; PushFloat -123.456
x28798:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$261:	; Parameter 10 -123.456 8
x28802:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x28805:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$263:	; Parameter 10 -123.456 16
x28809:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x28812:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$265:	; Parameter 10 -123.456 24
x28816:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x28819:	fld qword [float8$minus0.000000123456#]	; 4: 221 6 131 117

stdio_test$267:	; Parameter 10 -0.000000123456 32
x28823:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x28826:	fld qword [float8$minus0.000000123456#]	; 4: 221 6 131 117

stdio_test$269:	; Parameter 10 -0.000000123456 40
x28830:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x28833:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 180 112
x28838:	mov [bp + 12], bp	; 3: 137 110 12
x28841:	add bp, 10	; 3: 131 197 10
x28844:	mov di, bp	; 2: 137 239
x28846:	add di, 40	; 3: 131 199 40
x28849:	jmp printf	; 3: 233 17 156

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x28852:	mov word [bp + 16], string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 224 116

stdio_test$274:	; PushFloat -123.456
x28857:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$275:	; Parameter 10 -123.456 8
x28861:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x28864:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$277:	; Parameter 10 -123.456 16
x28868:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x28871:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$279:	; Parameter 10 -123.456 24
x28875:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x28878:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$281:	; Parameter 10 -123.456 32
x28882:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x28885:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$283:	; Parameter 10 -123.456 40
x28889:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x28892:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 239 112
x28897:	mov [bp + 12], bp	; 3: 137 110 12
x28900:	add bp, 10	; 3: 131 197 10
x28903:	mov di, bp	; 2: 137 239
x28905:	add di, 40	; 3: 131 199 40
x28908:	jmp printf	; 3: 233 214 155

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x28911:	mov word [bp + 16], string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 255 116

stdio_test$288:	; PushFloat -123.456
x28916:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$289:	; Parameter 10 -123.456 8
x28920:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x28923:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$291:	; Parameter 10 -123.456 16
x28927:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x28930:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$293:	; Parameter 10 -123.456 24
x28934:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x28937:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$295:	; Parameter 10 -123.456 32
x28941:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x28944:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$297:	; Parameter 10 -123.456 40
x28948:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x28951:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 42 113
x28956:	mov [bp + 12], bp	; 3: 137 110 12
x28959:	add bp, 10	; 3: 131 197 10
x28962:	mov di, bp	; 2: 137 239
x28964:	add di, 40	; 3: 131 199 40
x28967:	jmp printf	; 3: 233 155 155

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x28970:	mov word [bp + 16], string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 35 117

stdio_test$302:	; PushFloat -123.456
x28975:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$303:	; Parameter 10 -123.456 8
x28979:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x28982:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$305:	; Parameter 10 -123.456 16
x28986:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x28989:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$307:	; Parameter 10 -123.456 24
x28993:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x28996:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$309:	; Parameter 10 -123.456 32
x29000:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x29003:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$311:	; Parameter 10 -123.456 40
x29007:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x29010:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 101 113
x29015:	mov [bp + 12], bp	; 3: 137 110 12
x29018:	add bp, 10	; 3: 131 197 10
x29021:	mov di, bp	; 2: 137 239
x29023:	add di, 40	; 3: 131 199 40
x29026:	jmp printf	; 3: 233 96 155

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x29029:	mov word [bp + 16], string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 76 117

stdio_test$316:	; PushFloat -123.456
x29034:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$317:	; Parameter 10 -123.456 8
x29038:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x29041:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$319:	; Parameter 10 -123.456 16
x29045:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x29048:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$321:	; Parameter 10 -123.456 24
x29052:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x29055:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$323:	; Parameter 10 -123.456 32
x29059:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x29062:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

stdio_test$325:	; Parameter 10 -123.456 40
x29066:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x29069:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 160 113
x29074:	mov [bp + 12], bp	; 3: 137 110 12
x29077:	add bp, 10	; 3: 131 197 10
x29080:	mov di, bp	; 2: 137 239
x29082:	add di, 40	; 3: 131 199 40
x29085:	jmp printf	; 3: 233 37 155

stdio_test$327:	; PostCall 10

stdio_test$328:	; Return 0
x29088:	mov ax, [bp]	; 3: 139 70 0
x29091:	mov di, [bp + 4]	; 3: 139 126 4
x29094:	mov bp, [bp + 2]	; 3: 139 110 2
x29097:	jmp ax	; 2: 255 224

stdio_test$329:	; FunctionEnd stdio_test

string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x29099:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x29134:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x29174:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x29220:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x29266:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x29319:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x29365:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x29417:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x29469:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x29528:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x29574:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x29626:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x29678:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x29737:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x29771:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x29811:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

string_Hello2C20World21#:
x29833:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x29847:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

float8$123.456#:
x29873:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

float8$123456.1#:
x29881:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x29889:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x29920:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x29951:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x29987:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x30028:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

float8$minus123.456#:
x30075:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

float8$minus0.000000123456#:
x30083:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

time_test:	; Assign weekdays[0] string_Sun#
x30091:	mov word [bp + 6], string_Sun#	; 5: 199 70 6 129 30

time_test$1:	; Assign weekdays[1] string_Mon#
x30096:	mov word [bp + 8], string_Mon#	; 5: 199 70 8 133 30

time_test$2:	; Assign weekdays[2] string_Tue#
x30101:	mov word [bp + 10], string_Tue#	; 5: 199 70 10 137 30

time_test$3:	; Assign weekdays[3] string_Wed#
x30106:	mov word [bp + 12], string_Wed#	; 5: 199 70 12 141 30

time_test$4:	; Assign weekdays[4] string_Thu#
x30111:	mov word [bp + 14], string_Thu#	; 5: 199 70 14 145 30

time_test$5:	; Assign weekdays[5] string_Fri#
x30116:	mov word [bp + 16], string_Fri#	; 5: 199 70 16 149 30

time_test$6:	; Assign weekdays[6] string_Sat#
x30121:	mov word [bp + 18], string_Sat#	; 5: 199 70 18 153 30

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x30126:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x30131:	mov word [bp + 20], time_test$10	; 5: 199 70 20 193 117
x30136:	mov [bp + 22], bp	; 3: 137 110 22
x30139:	add bp, 20	; 3: 131 197 20
x30142:	jmp time	; 3: 233 169 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6272

time_test$12:	; Assign now1 £temporary6272
x30145:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6273 now1
x30149:	mov si, bp	; 2: 137 238
x30151:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6273 6
x30154:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x30157:	mov word [bp + 24], time_test$17	; 5: 199 70 24 219 117
x30162:	mov [bp + 26], bp	; 3: 137 110 26
x30165:	add bp, 24	; 3: 131 197 24
x30168:	jmp gmtime	; 3: 233 34 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6274

time_test$19:	; Deref £temporary6275 -> £temporary6274 £temporary6274 0

time_test$20:	; Assign s £temporary6275 -> £temporary6274
x30171:	mov si, bp	; 2: 137 238
x30173:	add si, 24	; 3: 131 198 24
x30176:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x30178:	mov ah, [bx]	; 2: 138 39
x30180:	mov [si], ah	; 2: 136 36
x30182:	inc bx	; 1: 67
x30183:	inc si	; 1: 70
x30184:	dec al	; 2: 254 200
x30186:	cmp al, 0	; 2: 60 0
x30188:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6276 now1
x30190:	mov si, bp	; 2: 137 238
x30192:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6276 6
x30195:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x30198:	mov word [bp + 42], time_test$25	; 5: 199 70 42 4 118
x30203:	mov [bp + 44], bp	; 3: 137 110 44
x30206:	add bp, 42	; 3: 131 197 42
x30209:	jmp localtime	; 3: 233 184 9

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6277

time_test$27:	; Deref £temporary6278 -> £temporary6277 £temporary6277 0

time_test$28:	; Assign t £temporary6278 -> £temporary6277
x30212:	mov si, bp	; 2: 137 238
x30214:	add si, 42	; 3: 131 198 42
x30217:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x30219:	mov ah, [bx]	; 2: 138 39
x30221:	mov [si], ah	; 2: 136 36
x30223:	inc bx	; 1: 67
x30224:	inc si	; 1: 70
x30225:	dec al	; 2: 254 200
x30227:	cmp al, 0	; 2: 60 0
x30229:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6279 s
x30231:	mov si, bp	; 2: 137 238
x30233:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6279 6
x30236:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x30239:	mov word [bp + 60], time_test$33	; 5: 199 70 60 45 118
x30244:	mov [bp + 62], bp	; 3: 137 110 62
x30247:	add bp, 60	; 3: 131 197 60
x30250:	jmp mktime	; 3: 233 209 5

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6280

time_test$35:	; Assign now2 £temporary6280
x30253:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x30257:	mov word [bp + 70], string_now2013A2025lu0A#	; 5: 199 70 70 107 120

time_test$38:	; Parameter 64 now1 8
x30262:	mov eax, [bp + 20]	; 4: 102 139 70 20
x30266:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x30270:	mov word [bp + 64], time_test$40	; 5: 199 70 64 81 118
x30275:	mov [bp + 66], bp	; 3: 137 110 66
x30278:	add bp, 64	; 3: 131 197 64
x30281:	mov di, bp	; 2: 137 239
x30283:	add di, 4	; 3: 131 199 4
x30286:	jmp printf	; 3: 233 116 150

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x30289:	mov word [bp + 70], string_now2023A2025lu0A#	; 5: 199 70 70 119 120

time_test$43:	; Parameter 64 now2 8
x30294:	mov eax, [bp + 60]	; 4: 102 139 70 60
x30298:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x30302:	mov word [bp + 64], time_test$45	; 5: 199 70 64 113 118
x30307:	mov [bp + 66], bp	; 3: 137 110 66
x30310:	add bp, 64	; 3: 131 197 64
x30313:	mov di, bp	; 2: 137 239
x30315:	add di, 4	; 3: 131 199 4
x30318:	jmp printf	; 3: 233 84 150

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30321:	mov word [bp + 70], string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 131 120

time_test$48:	; UnsignedMultiply £temporary6285 s$tm_wday 2
x30326:	mov ax, [bp + 36]	; 3: 139 70 36
x30329:	xor dx, dx	; 2: 49 210
x30331:	mul word [int2$2#]	; 4: 247 38 96 51

time_test$49:	; BinaryAdd £temporary6286 weekdays £temporary6285
x30335:	mov si, bp	; 2: 137 238
x30337:	add si, 6	; 3: 131 198 6
x30340:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6284 -> £temporary6286 £temporary6286 0

time_test$51:	; Parameter 64 £temporary6284 -> £temporary6286 8
x30342:	mov ax, [si]	; 2: 139 4
x30344:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6288 s$tm_year 1900
x30347:	mov ax, [bp + 34]	; 3: 139 70 34
x30350:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6288 10
x30353:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6290 s$tm_mon 1
x30356:	mov ax, [bp + 32]	; 3: 139 70 32
x30359:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6290 12
x30360:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x30363:	mov ax, [bp + 30]	; 3: 139 70 30
x30366:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x30369:	mov ax, [bp + 28]	; 3: 139 70 28
x30372:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x30375:	mov ax, [bp + 26]	; 3: 139 70 26
x30378:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x30381:	mov ax, [bp + 24]	; 3: 139 70 24
x30384:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x30387:	mov ax, [bp + 38]	; 3: 139 70 38
x30390:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x30393:	mov ax, [bp + 36]	; 3: 139 70 36
x30396:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x30399:	mov ax, [bp + 40]	; 3: 139 70 40
x30402:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x30405:	mov word [bp + 64], time_test$64	; 5: 199 70 64 216 118
x30410:	mov [bp + 66], bp	; 3: 137 110 66
x30413:	add bp, 64	; 3: 131 197 64
x30416:	mov di, bp	; 2: 137 239
x30418:	add di, 20	; 3: 131 199 20
x30421:	jmp printf	; 3: 233 237 149

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30424:	mov word [bp + 70], string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 228 120

time_test$67:	; UnsignedMultiply £temporary6301 t$tm_wday 2
x30429:	mov ax, [bp + 54]	; 3: 139 70 54
x30432:	xor dx, dx	; 2: 49 210
x30434:	mul word [int2$2#]	; 4: 247 38 96 51

time_test$68:	; BinaryAdd £temporary6302 weekdays £temporary6301
x30438:	mov si, bp	; 2: 137 238
x30440:	add si, 6	; 3: 131 198 6
x30443:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6300 -> £temporary6302 £temporary6302 0

time_test$70:	; Parameter 64 £temporary6300 -> £temporary6302 8
x30445:	mov ax, [si]	; 2: 139 4
x30447:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6304 t$tm_year 1900
x30450:	mov ax, [bp + 52]	; 3: 139 70 52
x30453:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6304 10
x30456:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6306 t$tm_mon 1
x30459:	mov ax, [bp + 50]	; 3: 139 70 50
x30462:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6306 12
x30463:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x30466:	mov ax, [bp + 48]	; 3: 139 70 48
x30469:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x30472:	mov ax, [bp + 46]	; 3: 139 70 46
x30475:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x30478:	mov ax, [bp + 44]	; 3: 139 70 44
x30481:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x30484:	mov ax, [bp + 42]	; 3: 139 70 42
x30487:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x30490:	mov ax, [bp + 56]	; 3: 139 70 56
x30493:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x30496:	mov ax, [bp + 54]	; 3: 139 70 54
x30499:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x30502:	mov ax, [bp + 58]	; 3: 139 70 58
x30505:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x30508:	mov word [bp + 64], time_test$83	; 5: 199 70 64 63 119
x30513:	mov [bp + 66], bp	; 3: 137 110 66
x30516:	add bp, 64	; 3: 131 197 64
x30519:	mov di, bp	; 2: 137 239
x30521:	add di, 20	; 3: 131 199 20
x30524:	jmp printf	; 3: 233 134 149

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 566 buffer1 6
x30527:	mov [bp + 572], bp	; 4: 137 174 60 2
x30531:	add word [bp + 572], 64	; 5: 131 134 60 2 64

time_test$86:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6315 s
x30536:	mov si, bp	; 2: 137 238
x30538:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 566 £temporary6315 14
x30541:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$89:	; Call 566 asctime 8
x30545:	mov word [bp + 574], time_test$90	; 6: 199 134 62 2 98 119
x30551:	mov [bp + 576], bp	; 4: 137 174 64 2
x30555:	add bp, 574	; 4: 129 197 62 2
x30559:	jmp asctime	; 3: 233 239 8

time_test$90:	; PostCall 566

time_test$91:	; GetReturnValue £temporary6316

time_test$92:	; Parameter 566 £temporary6316 8
x30562:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$93:	; Call 566 strcpy 0
x30566:	mov word [bp + 566], time_test$94	; 6: 199 134 54 2 119 119
x30572:	mov [bp + 568], bp	; 4: 137 174 56 2
x30576:	add bp, 566	; 4: 129 197 54 2
x30580:	jmp strcpy	; 3: 233 248 219

time_test$94:	; PostCall 566

time_test$95:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 566 buffer2 6
x30583:	mov [bp + 572], bp	; 4: 137 174 60 2
x30587:	add word [bp + 572], 164	; 6: 129 134 60 2 164 0

time_test$97:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6318 now1
x30593:	mov si, bp	; 2: 137 238
x30595:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 566 £temporary6318 14
x30598:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$100:	; Call 566 ctime 8
x30602:	mov word [bp + 574], time_test$101	; 6: 199 134 62 2 155 119
x30608:	mov [bp + 576], bp	; 4: 137 174 64 2
x30612:	add bp, 574	; 4: 129 197 62 2
x30616:	jmp ctime	; 3: 233 56 11

time_test$101:	; PostCall 566

time_test$102:	; GetReturnValue £temporary6319

time_test$103:	; Parameter 566 £temporary6319 8
x30619:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$104:	; Call 566 strcpy 0
x30623:	mov word [bp + 566], time_test$105	; 6: 199 134 54 2 176 119
x30629:	mov [bp + 568], bp	; 4: 137 174 56 2
x30633:	add bp, 566	; 4: 129 197 54 2
x30637:	jmp strcpy	; 3: 233 191 219

time_test$105:	; PostCall 566

time_test$106:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 566 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x30640:	mov word [bp + 572], string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 60 2 69 121

time_test$108:	; Parameter 566 buffer1 8
x30646:	mov [bp + 574], bp	; 4: 137 174 62 2
x30650:	add word [bp + 574], 64	; 5: 131 134 62 2 64

time_test$109:	; Parameter 566 buffer2 10
x30655:	mov [bp + 576], bp	; 4: 137 174 64 2
x30659:	add word [bp + 576], 164	; 6: 129 134 64 2 164 0

time_test$110:	; Call 566 printf 0
x30665:	mov word [bp + 566], time_test$111	; 6: 199 134 54 2 223 119
x30671:	mov [bp + 568], bp	; 4: 137 174 56 2
x30675:	add bp, 566	; 4: 129 197 54 2
x30679:	mov di, bp	; 2: 137 239
x30681:	add di, 4	; 3: 131 199 4
x30684:	jmp printf	; 3: 233 230 148

time_test$111:	; PostCall 566

time_test$112:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 566 buffer 6
x30687:	mov [bp + 572], bp	; 4: 137 174 60 2
x30691:	add word [bp + 572], 264	; 6: 129 134 60 2 8 1

time_test$114:	; Parameter 566 300 8
x30697:	mov word [bp + 574], 300	; 6: 199 134 62 2 44 1

time_test$115:	; Parameter 566 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y# 10
x30703:	mov word [bp + 576], string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#	; 6: 199 134 64 2 95 121

time_test$116:	; address £temporary6322 t
x30709:	mov si, bp	; 2: 137 238
x30711:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 566 £temporary6322 12
x30714:	mov [bp + 578], si	; 4: 137 182 66 2

time_test$118:	; Call 566 strftime 0
x30718:	mov word [bp + 566], time_test$119	; 6: 199 134 54 2 15 120
x30724:	mov [bp + 568], bp	; 4: 137 174 56 2
x30728:	add bp, 566	; 4: 129 197 54 2
x30732:	jmp strftime	; 3: 233 244 10

time_test$119:	; PostCall 566

time_test$120:	; GetReturnValue £temporary6323

time_test$121:	; Assign i £temporary6323
x30735:	mov [bp + 564], bx	; 4: 137 158 52 2

time_test$122:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 566 string_strftime2025i2025i203C25s3E0A# 6
x30739:	mov word [bp + 572], string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 60 2 85 122

time_test$124:	; Parameter 566 i 8
x30745:	mov ax, [bp + 564]	; 4: 139 134 52 2
x30749:	mov [bp + 574], ax	; 4: 137 134 62 2

time_test$125:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 566 buffer 16
x30753:	mov [bp + 582], bp	; 4: 137 174 70 2
x30757:	add word [bp + 582], 264	; 6: 129 134 70 2 8 1

time_test$127:	; Call 566 strlen 10
x30763:	mov word [bp + 576], time_test$128	; 6: 199 134 64 2 60 120
x30769:	mov [bp + 578], bp	; 4: 137 174 66 2
x30773:	add bp, 576	; 4: 129 197 64 2
x30777:	jmp strlen	; 3: 233 1 18

time_test$128:	; PostCall 566

time_test$129:	; GetReturnValue £temporary6324

time_test$130:	; Parameter 566 £temporary6324 10
x30780:	mov [bp + 576], bx	; 4: 137 158 64 2

time_test$131:	; Parameter 566 buffer 12
x30784:	mov [bp + 578], bp	; 4: 137 174 66 2
x30788:	add word [bp + 578], 264	; 6: 129 134 66 2 8 1

time_test$132:	; Call 566 printf 0
x30794:	mov word [bp + 566], time_test$133	; 6: 199 134 54 2 96 120
x30800:	mov [bp + 568], bp	; 4: 137 174 56 2
x30804:	add bp, 566	; 4: 129 197 54 2
x30808:	mov di, bp	; 2: 137 239
x30810:	add di, 6	; 3: 131 199 6
x30813:	jmp printf	; 3: 233 101 148

time_test$133:	; PostCall 566

time_test$134:	; Return 0
x30816:	mov ax, [bp]	; 3: 139 70 0
x30819:	mov di, [bp + 4]	; 3: 139 126 4
x30822:	mov bp, [bp + 2]	; 3: 139 110 2
x30825:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

string_now2013A2025lu0A#:
x30827:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

string_now2023A2025lu0A#:
x30839:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x30851:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x30948:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

string_asctime203C25s3E2C20ctime203C25s3E0A#:
x31045:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#:
x31071:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y", 0	; 246: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 0

string_strftime2025i2025i203C25s3E0A#:
x31317:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$1:	; Call 19 localeconv 0
x31338:	mov word [bp + 19], time$2	; 5: 199 70 19 120 122
x31343:	mov [bp + 21], bp	; 3: 137 110 21
x31346:	add bp, 19	; 3: 131 197 19
x31349:	jmp localeconv	; 3: 233 188 163

time$2:	; PostCall 19

time$3:	; GetReturnValue £temporary3385

time$4:	; Assign localeConvPtr £temporary3385
x31352:	mov [bp + 19], bx	; 3: 137 94 19

time$5:	; AssignRegister ah 42
x31355:	mov ah, 42	; 2: 180 42

time$6:	; Interrupt 33
x31357:	int 33	; 2: 205 33

time$7:	; InspectRegister £temporary3387 cx

time$8:	; BinarySubtract year £temporary3387 1900
x31359:	sub cx, 1900	; 4: 129 233 108 7
x31363:	mov [bp + 12], cx	; 3: 137 78 12

time$9:	; InspectRegister £temporary3389 dh

time$10:	; BinarySubtract month £temporary3389 1
x31366:	dec dh	; 2: 254 206
x31368:	mov [bp + 14], dh	; 3: 136 118 14

time$11:	; InspectRegister £temporary3391 dl

time$12:	; Assign monthDay £temporary3391
x31371:	mov [bp + 15], dl	; 3: 136 86 15

time$13:	; AssignRegister ah 44
x31374:	mov ah, 44	; 2: 180 44

time$14:	; Interrupt 33
x31376:	int 33	; 2: 205 33

time$15:	; InspectRegister £temporary3393 ch

time$16:	; Assign hour £temporary3393
x31378:	mov [bp + 16], ch	; 3: 136 110 16

time$17:	; InspectRegister £temporary3394 cl

time$18:	; Assign min £temporary3394
x31381:	mov [bp + 17], cl	; 3: 136 78 17

time$19:	; InspectRegister £temporary3395 dh

time$20:	; Assign sec £temporary3395
x31384:	mov [bp + 18], dh	; 3: 136 118 18

time$21:	; Equal 25 localeConvPtr 0
x31387:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x31391:	je time$25	; 2: 116 18

time$22:	; Deref £temporary3397 -> localeConvPtr localeConvPtr 2
x31393:	mov si, [bp + 19]	; 3: 139 118 19

time$23:	; IntegralToIntegral £temporary3398 £temporary3397 -> localeConvPtr
x31396:	mov ax, [si + 2]	; 3: 139 68 2
x31399:	cmp ax, 0	; 3: 131 248 0
x31402:	jge time$24	; 2: 125 4
x31404:	neg ax	; 2: 247 216
x31406:	neg al	; 2: 246 216

time$24:	; BinarySubtract hour hour £temporary3398
x31408:	sub [bp + 16], al	; 3: 40 70 16

time$25:	; SignedModulo £temporary3400 year 4
x31411:	mov ax, [bp + 12]	; 3: 139 70 12
x31414:	xor dx, dx	; 2: 49 210
x31416:	idiv word [int2$4#]	; 4: 247 62 252 123

time$26:	; NotEqual 29 £temporary3400 0
x31420:	cmp dx, 0	; 3: 131 250 0
x31423:	jne time$29	; 2: 117 5

time$27:	; Assign £temporary3402 1
x31425:	mov ax, 1	; 3: 184 1 0

time$28:	; Goto 30
x31428:	jmp time$30	; 2: 235 3

time$29:	; Assign £temporary3402 0
x31430:	mov ax, 0	; 3: 184 0 0

time$30:	; Assign leapYear £temporary3402
x31433:	mov [bp + 21], ax	; 3: 137 70 21

time$31:	; Assign daysOfMonthsX[0] 31
x31436:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$32:	; Equal 35 leapYear 0
x31441:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x31445:	je time$35	; 2: 116 5

time$33:	; Assign £temporary3407 29
x31447:	mov ax, 29	; 3: 184 29 0

time$34:	; Goto 36
x31450:	jmp time$36	; 2: 235 3

time$35:	; Assign £temporary3407 28
x31452:	mov ax, 28	; 3: 184 28 0

time$36:	; Assign daysOfMonthsX[1] £temporary3407
x31455:	mov [bp + 25], ax	; 3: 137 70 25

time$37:	; Assign daysOfMonthsX[2] 31
x31458:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$38:	; Assign daysOfMonthsX[3] 30
x31463:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$39:	; Assign daysOfMonthsX[4] 31
x31468:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$40:	; Assign daysOfMonthsX[5] 30
x31473:	mov word [bp + 33], 30	; 5: 199 70 33 30 0

time$41:	; Assign daysOfMonthsX[6] 31
x31478:	mov word [bp + 35], 31	; 5: 199 70 35 31 0

time$42:	; Assign daysOfMonthsX[7] 31
x31483:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$43:	; Assign daysOfMonthsX[8] 30
x31488:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$44:	; Assign daysOfMonthsX[9] 31
x31493:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$45:	; Assign daysOfMonthsX[10] 30
x31498:	mov word [bp + 43], 30	; 5: 199 70 43 30 0

time$46:	; Assign daysOfMonthsX[11] 31
x31503:	mov word [bp + 45], 31	; 5: 199 70 45 31 0

time$47:	; IntegralToIntegral £temporary3420 monthDay
x31508:	mov al, [bp + 15]	; 3: 138 70 15
x31511:	and ax, 255	; 3: 37 255 0
x31514:	cmp al, 0	; 2: 60 0
x31516:	jge time$48	; 2: 125 4
x31518:	neg al	; 2: 246 216
x31520:	neg ax	; 2: 247 216

time$48:	; BinarySubtract yearDay £temporary3420 1
x31522:	dec ax	; 1: 72
x31523:	mov [bp + 47], ax	; 3: 137 70 47

time$49:	; Assign mon 0
x31526:	mov word [bp + 49], 0	; 5: 199 70 49 0 0

time$50:	; IntegralToIntegral £temporary3422 month
x31531:	mov al, [bp + 14]	; 3: 138 70 14
x31534:	and ax, 255	; 3: 37 255 0
x31537:	cmp al, 0	; 2: 60 0
x31539:	jge time$51	; 2: 125 4
x31541:	neg al	; 2: 246 216
x31543:	neg ax	; 2: 247 216

time$51:	; SignedGreaterThanEqual 58 mon £temporary3422
x31545:	cmp [bp + 49], ax	; 3: 57 70 49
x31548:	jge time$58	; 2: 125 26

time$52:	; UnsignedMultiply £temporary3426 mon 2
x31550:	mov ax, [bp + 49]	; 3: 139 70 49
x31553:	xor dx, dx	; 2: 49 210
x31555:	mul word [int2$2#]	; 4: 247 38 96 51

time$53:	; BinaryAdd £temporary3427 daysOfMonthsX £temporary3426
x31559:	mov si, bp	; 2: 137 238
x31561:	add si, 23	; 3: 131 198 23
x31564:	add si, ax	; 2: 1 198

time$54:	; Deref £temporary3425 -> £temporary3427 £temporary3427 0

time$55:	; BinaryAdd yearDay yearDay £temporary3425 -> £temporary3427
x31566:	mov ax, [si]	; 2: 139 4
x31568:	add [bp + 47], ax	; 3: 1 70 47

time$56:	; Increment mon
x31571:	inc word [bp + 49]	; 3: 255 70 49

time$57:	; Goto 50
x31574:	jmp time$50	; 2: 235 211

time$58:	; IntegralToIntegral £temporary3430 sec
x31576:	mov al, [bp + 18]	; 3: 138 70 18
x31579:	and ax, 255	; 3: 37 255 0
x31582:	cmp al, 0	; 2: 60 0
x31584:	jge time$59	; 2: 125 4
x31586:	neg al	; 2: 246 216
x31588:	neg ax	; 2: 247 216

time$59:	; Assign s$tm_sec £temporary3430
x31590:	mov [bp + 51], ax	; 3: 137 70 51

time$60:	; IntegralToIntegral £temporary3432 min
x31593:	mov al, [bp + 17]	; 3: 138 70 17
x31596:	and ax, 255	; 3: 37 255 0
x31599:	cmp al, 0	; 2: 60 0
x31601:	jge time$61	; 2: 125 4
x31603:	neg al	; 2: 246 216
x31605:	neg ax	; 2: 247 216

time$61:	; Assign s$tm_min £temporary3432
x31607:	mov [bp + 53], ax	; 3: 137 70 53

time$62:	; IntegralToIntegral £temporary3434 hour
x31610:	mov al, [bp + 16]	; 3: 138 70 16
x31613:	and ax, 255	; 3: 37 255 0
x31616:	cmp al, 0	; 2: 60 0
x31618:	jge time$63	; 2: 125 4
x31620:	neg al	; 2: 246 216
x31622:	neg ax	; 2: 247 216

time$63:	; Assign s$tm_hour £temporary3434
x31624:	mov [bp + 55], ax	; 3: 137 70 55

time$64:	; IntegralToIntegral £temporary3436 monthDay
x31627:	mov al, [bp + 15]	; 3: 138 70 15
x31630:	and ax, 255	; 3: 37 255 0
x31633:	cmp al, 0	; 2: 60 0
x31635:	jge time$65	; 2: 125 4
x31637:	neg al	; 2: 246 216
x31639:	neg ax	; 2: 247 216

time$65:	; Assign s$tm_mday £temporary3436
x31641:	mov [bp + 57], ax	; 3: 137 70 57

time$66:	; IntegralToIntegral £temporary3438 month
x31644:	mov al, [bp + 14]	; 3: 138 70 14
x31647:	and ax, 255	; 3: 37 255 0
x31650:	cmp al, 0	; 2: 60 0
x31652:	jge time$67	; 2: 125 4
x31654:	neg al	; 2: 246 216
x31656:	neg ax	; 2: 247 216

time$67:	; Assign s$tm_mon £temporary3438
x31658:	mov [bp + 59], ax	; 3: 137 70 59

time$68:	; Assign s$tm_year year
x31661:	mov ax, [bp + 12]	; 3: 139 70 12
x31664:	mov [bp + 61], ax	; 3: 137 70 61

time$69:	; Assign s$tm_wday 0
x31667:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$70:	; Assign s$tm_yday yearDay
x31672:	mov ax, [bp + 47]	; 3: 139 70 47
x31675:	mov [bp + 65], ax	; 3: 137 70 65

time$71:	; Assign s$tm_isdst 0
x31678:	mov word [bp + 67], 0	; 5: 199 70 67 0 0

time$72:	; CallHeader 69 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$73:	; address £temporary3443 s
x31683:	mov si, bp	; 2: 137 238
x31685:	add si, 51	; 3: 131 198 51

time$74:	; Parameter 69 £temporary3443 6
x31688:	mov [bp + 75], si	; 3: 137 118 75

time$75:	; Call 69 mktime 0
x31691:	mov word [bp + 69], time$76	; 5: 199 70 69 217 123
x31696:	mov [bp + 71], bp	; 3: 137 110 71
x31699:	add bp, 69	; 3: 131 197 69
x31702:	nop	; 1: 144
x31703:	jmp mktime	; 2: 235 37

time$76:	; PostCall 69

time$77:	; GetReturnValue £temporary3444

time$78:	; Assign time £temporary3444
x31705:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$79:	; Equal 82 timePtr 0
x31709:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x31713:	je time$82	; 2: 116 10

time$80:	; Deref £temporary3446 -> timePtr timePtr 0
x31715:	mov si, [bp + 6]	; 3: 139 118 6

time$81:	; Assign £temporary3446 -> timePtr time
x31718:	mov eax, [bp + 8]	; 4: 102 139 70 8
x31722:	mov [si], eax	; 3: 102 137 4

time$82:	; SetReturnValue time
x31725:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$83:	; Return time
x31729:	mov ax, [bp]	; 3: 139 70 0
x31732:	mov di, [bp + 4]	; 3: 139 126 4
x31735:	mov bp, [bp + 2]	; 3: 139 110 2
x31738:	jmp ax	; 2: 255 224

time$84:	; FunctionEnd time

int2$4#:
x31740:	dw 4	; 2: 4 0

mktime:	; Equal 28 tp 0
x31742:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x31746:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3450 -> tp tp 10
x31750:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3451 £temporary3450 -> tp 69
x31753:	mov ax, [si + 10]	; 3: 139 68 10
x31756:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3452 £temporary3451 4
x31759:	xor dx, dx	; 2: 49 210
x31761:	idiv word [int2$4#]	; 4: 247 62 252 123

mktime$4:	; IntegralToIntegral £temporary3453 £temporary3452
x31765:	and eax, 65535	; 6: 102 37 255 255 0 0
x31771:	cmp ax, 0	; 3: 131 248 0
x31774:	jge mktime$5	; 2: 125 5
x31776:	neg ax	; 2: 247 216
x31778:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3453
x31781:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3454 -> tp tp 10
x31785:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3455 £temporary3454 -> tp 70
x31788:	mov ax, [si + 10]	; 3: 139 68 10
x31791:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3456 £temporary3455 365
x31794:	xor dx, dx	; 2: 49 210
x31796:	imul word [int2$365#]	; 4: 247 46 239 124

mktime$9:	; IntegralToIntegral £temporary3457 £temporary3456
x31800:	and eax, 65535	; 6: 102 37 255 255 0 0
x31806:	cmp ax, 0	; 3: 131 248 0
x31809:	jge mktime$10	; 2: 125 5
x31811:	neg ax	; 2: 247 216
x31813:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3458 £temporary3457 leapDays
x31816:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3459 -> tp tp 14
x31820:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3460 £temporary3459 -> tp
x31823:	mov bx, [si + 14]	; 3: 139 92 14
x31826:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x31833:	cmp bx, 0	; 3: 131 251 0
x31836:	jge mktime$13	; 2: 125 5
x31838:	neg bx	; 2: 247 219
x31840:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3458 £temporary3460
x31843:	add eax, ebx	; 3: 102 1 216
x31846:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3462 totalDays 86400
x31850:	mov eax, [bp + 12]	; 4: 102 139 70 12
x31854:	xor edx, edx	; 3: 102 49 210
x31857:	imul dword [int4$86400#]	; 5: 102 247 46 241 124
x31862:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3463 -> tp tp 4
x31865:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3464 £temporary3463 -> tp
x31868:	mov ax, [si + 4]	; 3: 139 68 4
x31871:	and eax, 65535	; 6: 102 37 255 255 0 0
x31877:	cmp ax, 0	; 3: 131 248 0
x31880:	jge mktime$17	; 2: 125 5
x31882:	neg ax	; 2: 247 216
x31884:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3465 £temporary3464 3600
x31887:	xor edx, edx	; 3: 102 49 210
x31890:	imul dword [int4$3600#]	; 5: 102 247 46 245 124

mktime$18:	; BinaryAdd £temporary3466 £temporary3462 £temporary3465
x31895:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3467 -> tp tp 2
x31898:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3468 £temporary3467 -> tp
x31901:	mov ax, [si + 2]	; 3: 139 68 2
x31904:	and eax, 65535	; 6: 102 37 255 255 0 0
x31910:	cmp ax, 0	; 3: 131 248 0
x31913:	jge mktime$21	; 2: 125 5
x31915:	neg ax	; 2: 247 216
x31917:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3469 £temporary3468 60
x31920:	xor edx, edx	; 3: 102 49 210
x31923:	imul dword [int4$60#]	; 5: 102 247 46 249 124

mktime$22:	; BinaryAdd £temporary3470 £temporary3466 £temporary3469
x31928:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3471 -> tp tp 0
x31931:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3472 £temporary3471 -> tp
x31934:	mov ax, [si]	; 2: 139 4
x31936:	and eax, 65535	; 6: 102 37 255 255 0 0
x31942:	cmp ax, 0	; 3: 131 248 0
x31945:	jge mktime$25	; 2: 125 5
x31947:	neg ax	; 2: 247 216
x31949:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3473 £temporary3470 £temporary3472
x31952:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3473

mktime$27:	; Return £temporary3473
x31955:	mov ax, [bp]	; 3: 139 70 0
x31958:	mov di, [bp + 4]	; 3: 139 126 4
x31961:	mov bp, [bp + 2]	; 3: 139 110 2
x31964:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x31966:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x31972:	mov ax, [bp]	; 3: 139 70 0
x31975:	mov di, [bp + 4]	; 3: 139 126 4
x31978:	mov bp, [bp + 2]	; 3: 139 110 2
x31981:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

int2$365#:
x31983:	dw 365	; 2: 109 1

int4$86400#:
x31985:	dd 86400	; 4: 128 81 1 0

int4$3600#:
x31989:	dd 3600	; 4: 16 14 0 0

int4$60#:
x31993:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x31997:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32001:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3484 -> timePtr timePtr 0
x32005:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3484 -> timePtr
x32008:	mov eax, [si]	; 3: 102 139 4
x32011:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x32015:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32019:	xor edx, edx	; 3: 102 49 210
x32022:	idiv dword [int4$86400#]	; 5: 102 247 62 241 124
x32027:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x32031:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32035:	xor edx, edx	; 3: 102 49 210
x32038:	idiv dword [int4$3600#]	; 5: 102 247 62 245 124
x32043:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3488 secondsOfDay 3600
x32047:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32051:	xor edx, edx	; 3: 102 49 210
x32054:	idiv dword [int4$3600#]	; 5: 102 247 62 245 124

gmtime$6:	; IntegralToIntegral £temporary3489 £temporary3488
x32059:	cmp eax, 0	; 4: 102 131 248 0
x32063:	jge gmtime$7	; 2: 125 5
x32065:	neg eax	; 3: 102 247 216
x32068:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3489
x32070:	mov [@4083$g_timeStruct + 4], ax	; 3: 163 101 127

gmtime$8:	; SignedDivide £temporary3491 secondsOfHour 60
x32073:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32077:	xor edx, edx	; 3: 102 49 210
x32080:	idiv dword [int4$60#]	; 5: 102 247 62 249 124

gmtime$9:	; IntegralToIntegral £temporary3492 £temporary3491
x32085:	cmp eax, 0	; 4: 102 131 248 0
x32089:	jge gmtime$10	; 2: 125 5
x32091:	neg eax	; 3: 102 247 216
x32094:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3492
x32096:	mov [@4083$g_timeStruct + 2], ax	; 3: 163 99 127

gmtime$11:	; SignedModulo £temporary3494 secondsOfHour 60
x32099:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32103:	xor edx, edx	; 3: 102 49 210
x32106:	idiv dword [int4$60#]	; 5: 102 247 62 249 124

gmtime$12:	; IntegralToIntegral £temporary3495 £temporary3494
x32111:	cmp edx, 0	; 4: 102 131 250 0
x32115:	jge gmtime$13	; 2: 125 5
x32117:	neg edx	; 3: 102 247 218
x32120:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3495
x32122:	mov [@4083$g_timeStruct], dx	; 4: 137 22 97 127

gmtime$14:	; SignedDivide totalDays time 86400
x32126:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32130:	xor edx, edx	; 3: 102 49 210
x32133:	idiv dword [int4$86400#]	; 5: 102 247 62 241 124
x32138:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x32142:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x32147:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3499 totalDays 4
x32149:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32153:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3500 £temporary3499
x32157:	cmp eax, 0	; 4: 102 131 248 0
x32161:	jge gmtime$18	; 2: 125 5
x32163:	neg eax	; 3: 102 247 216
x32166:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3500
x32168:	mov [@4083$g_timeStruct + 12], ax	; 3: 163 109 127

gmtime$19:	; Goto 24
x32171:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3502 totalDays 3
x32173:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32177:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3503 £temporary3502 7
x32181:	xor edx, edx	; 3: 102 49 210
x32184:	idiv dword [int4$7#]	; 5: 102 247 62 115 127

gmtime$22:	; IntegralToIntegral £temporary3504 £temporary3503
x32189:	cmp edx, 0	; 4: 102 131 250 0
x32193:	jge gmtime$23	; 2: 125 5
x32195:	neg edx	; 3: 102 247 218
x32198:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3504
x32200:	mov [@4083$g_timeStruct + 12], dx	; 4: 137 22 109 127

gmtime$24:	; SignedDivide £temporary3505 totalDays 365
x32204:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32208:	xor edx, edx	; 3: 102 49 210
x32211:	idiv dword [int4$365#]	; 5: 102 247 62 119 127

gmtime$25:	; BinaryAdd £temporary3506 £temporary3505 1970
x32216:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3507 £temporary3506
x32222:	cmp eax, 0	; 4: 102 131 248 0
x32226:	jge gmtime$27	; 2: 125 5
x32228:	neg eax	; 3: 102 247 216
x32231:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3507
x32233:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3508 year 1969
x32236:	mov ax, [bp + 24]	; 3: 139 70 24
x32239:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3508 4
x32242:	xor dx, dx	; 2: 49 210
x32244:	idiv word [int2$4#]	; 4: 247 62 252 123
x32248:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x32251:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32255:	xor edx, edx	; 3: 102 49 210
x32258:	idiv dword [int4$365#]	; 5: 102 247 62 119 127
x32263:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3511 leapDays
x32267:	mov ax, [bp + 26]	; 3: 139 70 26
x32270:	and eax, 65535	; 6: 102 37 255 255 0 0
x32276:	cmp ax, 0	; 3: 131 248 0
x32279:	jge gmtime$32	; 2: 125 5
x32281:	neg ax	; 2: 247 216
x32283:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3511
x32286:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x32290:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x32295:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x32297:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x32300:	mov ax, [bp + 24]	; 3: 139 70 24
x32303:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x32306:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 64 126
x32311:	mov [bp + 30], bp	; 3: 137 110 30
x32314:	add bp, 28	; 3: 131 197 28
x32317:	jmp @4084$isLeapYear	; 3: 233 59 1

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3515

gmtime$40:	; Equal 43 £temporary3515 0
x32320:	cmp bx, 0	; 3: 131 251 0
x32323:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x32325:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x32333:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x32335:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x32343:	mov ax, [bp + 24]	; 3: 139 70 24
x32346:	sub ax, 1900	; 3: 45 108 7
x32349:	mov [@4083$g_timeStruct + 10], ax	; 3: 163 107 127

gmtime$45:	; IntegralToIntegral £temporary3522 totalDays
x32352:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32356:	cmp eax, 0	; 4: 102 131 248 0
x32360:	jge gmtime$46	; 2: 125 5
x32362:	neg eax	; 3: 102 247 216
x32365:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3522
x32367:	mov [@4083$g_timeStruct + 14], ax	; 3: 163 111 127

gmtime$47:	; Assign daysOfMonths[0] 31
x32370:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x32375:	mov ax, [bp + 24]	; 3: 139 70 24
x32378:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x32381:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 139 126
x32386:	mov [bp + 32], bp	; 3: 137 110 32
x32389:	add bp, 30	; 3: 131 197 30
x32392:	jmp @4084$isLeapYear	; 3: 233 240 0

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3523

gmtime$53:	; Equal 56 £temporary3523 0
x32395:	cmp bx, 0	; 3: 131 251 0
x32398:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3528 29
x32400:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x32403:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3528 28
x32405:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3528
x32408:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x32411:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x32416:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x32421:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x32426:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x32431:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x32436:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x32441:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x32446:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x32451:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x32456:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x32461:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; UnsignedMultiply £temporary3542 month 2
x32466:	mov ax, [bp + 52]	; 3: 139 70 52
x32469:	xor dx, dx	; 2: 49 210
x32471:	mul word [int2$2#]	; 4: 247 38 96 51

gmtime$70:	; BinaryAdd £temporary3543 daysOfMonths £temporary3542
x32475:	mov si, bp	; 2: 137 238
x32477:	add si, 28	; 3: 131 198 28
x32480:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3541 -> £temporary3543 £temporary3543 0

gmtime$72:	; IntegralToIntegral £temporary3544 £temporary3541 -> £temporary3543
x32482:	mov ax, [si]	; 2: 139 4
x32484:	and eax, 65535	; 6: 102 37 255 255 0 0
x32490:	cmp ax, 0	; 3: 131 248 0
x32493:	jge gmtime$73	; 2: 125 5
x32495:	neg ax	; 2: 247 216
x32497:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3544
x32500:	cmp [bp + 20], eax	; 4: 102 57 70 20
x32504:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3546 month
x32506:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x32509:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; UnsignedMultiply £temporary3548 £temporary3546 2
x32512:	xor dx, dx	; 2: 49 210
x32514:	mul word [int2$2#]	; 4: 247 38 96 51

gmtime$77:	; BinaryAdd £temporary3549 daysOfMonths £temporary3548
x32518:	mov si, bp	; 2: 137 238
x32520:	add si, 28	; 3: 131 198 28
x32523:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3547 -> £temporary3549 £temporary3549 0

gmtime$79:	; IntegralToIntegral £temporary3550 £temporary3547 -> £temporary3549
x32525:	mov ax, [si]	; 2: 139 4
x32527:	and eax, 65535	; 6: 102 37 255 255 0 0
x32533:	cmp ax, 0	; 3: 131 248 0
x32536:	jge gmtime$80	; 2: 125 5
x32538:	neg ax	; 2: 247 216
x32540:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3550
x32543:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x32547:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x32549:	mov ax, [bp + 52]	; 3: 139 70 52
x32552:	mov [@4083$g_timeStruct + 8], ax	; 3: 163 105 127

gmtime$83:	; BinaryAdd £temporary3554 totalDays 1
x32555:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32559:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3555 £temporary3554
x32561:	cmp eax, 0	; 4: 102 131 248 0
x32565:	jge gmtime$85	; 2: 125 5
x32567:	neg eax	; 3: 102 247 216
x32570:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3555
x32572:	mov [@4083$g_timeStruct + 6], ax	; 3: 163 103 127

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x32575:	mov word [@4083$g_timeStruct + 16], -1	; 6: 199 6 113 127 255 255

gmtime$87:	; SetReturnValue (@4083$g_timeStruct,0)
x32581:	mov bx, @4083$g_timeStruct	; 3: 187 97 127

gmtime$88:	; Return (@4083$g_timeStruct,0)
x32584:	mov ax, [bp]	; 3: 139 70 0
x32587:	mov di, [bp + 4]	; 3: 139 126 4
x32590:	mov bp, [bp + 2]	; 3: 139 110 2
x32593:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x32595:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x32598:	mov ax, [bp]	; 3: 139 70 0
x32601:	mov di, [bp + 4]	; 3: 139 126 4
x32604:	mov bp, [bp + 2]	; 3: 139 110 2
x32607:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@4083$g_timeStruct:
x32609:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

int4$7#:
x32627:	dd 7	; 4: 7 0 0 0

int4$365#:
x32631:	dd 365	; 4: 109 1 0 0

@4084$isLeapYear:	; SignedModulo £temporary3474 year 4
x32635:	mov ax, [bp + 6]	; 3: 139 70 6
x32638:	xor dx, dx	; 2: 49 210
x32640:	idiv word [int2$4#]	; 4: 247 62 252 123

@4084$isLeapYear$1:	; NotEqual 4 £temporary3474 0
x32644:	cmp dx, 0	; 3: 131 250 0
x32647:	jne @4084$isLeapYear$4	; 2: 117 14

@4084$isLeapYear$2:	; SignedModulo £temporary3476 year 100
x32649:	mov ax, [bp + 6]	; 3: 139 70 6
x32652:	xor dx, dx	; 2: 49 210
x32654:	idiv word [int2$100#]	; 4: 247 62 184 127

@4084$isLeapYear$3:	; NotEqual 6 £temporary3476 0
x32658:	cmp dx, 0	; 3: 131 250 0
x32661:	jne @4084$isLeapYear$6	; 2: 117 14

@4084$isLeapYear$4:	; SignedModulo £temporary3479 year 400
x32663:	mov ax, [bp + 6]	; 3: 139 70 6
x32666:	xor dx, dx	; 2: 49 210
x32668:	idiv word [int2$400#]	; 4: 247 62 186 127

@4084$isLeapYear$5:	; NotEqual 8 £temporary3479 0
x32672:	cmp dx, 0	; 3: 131 250 0
x32675:	jne @4084$isLeapYear$8	; 2: 117 5

@4084$isLeapYear$6:	; Assign £temporary3482 1
x32677:	mov bx, 1	; 3: 187 1 0

@4084$isLeapYear$7:	; Goto 9
x32680:	jmp @4084$isLeapYear$9	; 2: 235 3

@4084$isLeapYear$8:	; Assign £temporary3482 0
x32682:	mov bx, 0	; 3: 187 0 0

@4084$isLeapYear$9:	; SetReturnValue £temporary3482

@4084$isLeapYear$10:	; Return £temporary3482
x32685:	mov ax, [bp]	; 3: 139 70 0
x32688:	mov di, [bp + 4]	; 3: 139 126 4
x32691:	mov bp, [bp + 2]	; 3: 139 110 2
x32694:	jmp ax	; 2: 255 224

@4084$isLeapYear$11:	; FunctionEnd isLeapYear

int2$100#:
x32696:	dw 100	; 2: 100 0

int2$400#:
x32698:	dw 400	; 2: 144 1

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x32700:	mov ax, [bp + 6]	; 3: 139 70 6
x32703:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x32706:	mov word [bp + 8], localtime$3	; 5: 199 70 8 208 127
x32711:	mov [bp + 10], bp	; 3: 137 110 10
x32714:	add bp, 8	; 3: 131 197 8
x32717:	jmp gmtime	; 3: 233 45 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3611

localtime$5:	; Assign tmPtr £temporary3611
x32720:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$7:	; Call 10 localeconv 0
x32723:	mov word [bp + 10], localtime$8	; 5: 199 70 10 225 127
x32728:	mov [bp + 12], bp	; 3: 137 110 12
x32731:	add bp, 10	; 3: 131 197 10
x32734:	jmp localeconv	; 3: 233 83 158

localtime$8:	; PostCall 10

localtime$9:	; GetReturnValue £temporary3612

localtime$10:	; Assign localeConvPtr £temporary3612
x32737:	mov [bp + 10], bx	; 3: 137 94 10

localtime$11:	; Assign timeZone 0
x32740:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

localtime$12:	; Equal 21 localeConvPtr 0
x32745:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x32749:	je localtime$21	; 2: 116 25

localtime$13:	; Deref £temporary3614 -> tmPtr tmPtr 16
x32751:	mov si, [bp + 8]	; 3: 139 118 8

localtime$14:	; NotEqual 18 £temporary3614 -> tmPtr 1
x32754:	cmp word [si + 16], 1	; 4: 131 124 16 1
x32758:	jne localtime$18	; 2: 117 7

localtime$15:	; Deref £temporary3616 -> localeConvPtr localeConvPtr 0
x32760:	mov si, [bp + 10]	; 3: 139 118 10

localtime$16:	; Assign £temporary3621 £temporary3616 -> localeConvPtr
x32763:	mov ax, [si]	; 2: 139 4

localtime$17:	; Goto 20
x32765:	jmp localtime$20	; 2: 235 6

localtime$18:	; Deref £temporary3617 -> localeConvPtr localeConvPtr 2
x32767:	mov si, [bp + 10]	; 3: 139 118 10

localtime$19:	; Assign £temporary3621 £temporary3617 -> localeConvPtr
x32770:	mov ax, [si + 2]	; 3: 139 68 2

localtime$20:	; Assign timeZone £temporary3621
x32773:	mov [bp + 12], ax	; 3: 137 70 12

localtime$21:	; Deref £temporary3622 -> timePtr timePtr 0
x32776:	mov si, [bp + 6]	; 3: 139 118 6

localtime$22:	; IntegralToIntegral £temporary3623 timeZone
x32779:	mov ax, [bp + 12]	; 3: 139 70 12
x32782:	and eax, 65535	; 6: 102 37 255 255 0 0
x32788:	cmp ax, 0	; 3: 131 248 0
x32791:	jge localtime$23	; 2: 125 5
x32793:	neg ax	; 2: 247 216
x32795:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3624 £temporary3623 3600
x32798:	xor edx, edx	; 3: 102 49 210
x32801:	imul dword [int4$3600#]	; 5: 102 247 46 245 124

localtime$24:	; BinaryAdd t £temporary3622 -> timePtr £temporary3624
x32806:	mov ebx, [si]	; 3: 102 139 28
x32809:	add ebx, eax	; 3: 102 1 195
x32812:	mov [bp + 14], ebx	; 4: 102 137 94 14

localtime$25:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3626 t
x32816:	mov si, bp	; 2: 137 238
x32818:	add si, 14	; 3: 131 198 14

localtime$27:	; Parameter 18 £temporary3626 6
x32821:	mov [bp + 24], si	; 3: 137 118 24

localtime$28:	; Call 18 gmtime 0
x32824:	mov word [bp + 18], localtime$29	; 5: 199 70 18 70 128
x32829:	mov [bp + 20], bp	; 3: 137 110 20
x32832:	add bp, 18	; 3: 131 197 18
x32835:	jmp gmtime	; 3: 233 183 252

localtime$29:	; PostCall 18

localtime$30:	; GetReturnValue £temporary3627

localtime$31:	; SetReturnValue £temporary3627

localtime$32:	; Return £temporary3627
x32838:	mov ax, [bp]	; 3: 139 70 0
x32841:	mov di, [bp + 4]	; 3: 139 126 4
x32844:	mov bp, [bp + 2]	; 3: 139 110 2
x32847:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

asctime:	; Assign localeConvPtr 0
x32849:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 5 localeConvPtr 0
x32854:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x32858:	je asctime$5	; 2: 116 8

asctime$2:	; Deref £temporary3562 -> localeConvPtr localeConvPtr 4
x32860:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Assign £temporary3566 £temporary3562 -> localeConvPtr
x32863:	mov ax, [si + 4]	; 3: 139 68 4

asctime$4:	; Goto 6
x32866:	jmp asctime$6	; 2: 235 3

asctime$5:	; Assign £temporary3566 0
x32868:	mov ax, 0	; 3: 184 0 0

asctime$6:	; Assign shortDayList £temporary3566
x32871:	mov [bp + 10], ax	; 3: 137 70 10

asctime$7:	; Equal 11 localeConvPtr 0
x32874:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x32878:	je asctime$11	; 2: 116 8

asctime$8:	; Deref £temporary3568 -> localeConvPtr localeConvPtr 8
x32880:	mov si, [bp + 8]	; 3: 139 118 8

asctime$9:	; Assign £temporary3572 £temporary3568 -> localeConvPtr
x32883:	mov ax, [si + 8]	; 3: 139 68 8

asctime$10:	; Goto 12
x32886:	jmp asctime$12	; 2: 235 3

asctime$11:	; Assign £temporary3572 0
x32888:	mov ax, 0	; 3: 184 0 0

asctime$12:	; Assign shortMonthList £temporary3572
x32891:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Equal 16 shortDayList 0
x32894:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x32898:	je asctime$16	; 2: 116 5

asctime$14:	; Assign £temporary3577 shortDayList
x32900:	mov ax, [bp + 10]	; 3: 139 70 10

asctime$15:	; Goto 17
x32903:	jmp asctime$17	; 2: 235 3

asctime$16:	; Assign £temporary3577 g_defaultShortDayList
x32905:	mov ax, @4181$g_defaultShortDayList	; 3: 184 38 129

asctime$17:	; Assign shortDayList £temporary3577
x32908:	mov [bp + 10], ax	; 3: 137 70 10

asctime$18:	; Equal 21 shortMonthList 0
x32911:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x32915:	je asctime$21	; 2: 116 5

asctime$19:	; Assign £temporary3582 shortMonthList
x32917:	mov ax, [bp + 12]	; 3: 139 70 12

asctime$20:	; Goto 22
x32920:	jmp asctime$22	; 2: 235 3

asctime$21:	; Assign £temporary3582 g_defaultShortMonthList
x32922:	mov ax, @4183$g_defaultShortMonthList	; 3: 184 52 129

asctime$22:	; Assign shortMonthList £temporary3582
x32925:	mov [bp + 12], ax	; 3: 137 70 12

asctime$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$24:	; Parameter 14 g_timeString 6
x32928:	mov word [bp + 20], @4180$g_timeString	; 5: 199 70 20 76 129

asctime$25:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x32933:	mov word [bp + 22], string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 76 130

asctime$26:	; Deref £temporary3583 -> tp tp 12
x32938:	mov si, [bp + 6]	; 3: 139 118 6

asctime$27:	; UnsignedMultiply £temporary3585 £temporary3583 -> tp 2
x32941:	mov ax, [si + 12]	; 3: 139 68 12
x32944:	xor dx, dx	; 2: 49 210
x32946:	mul word [int2$2#]	; 4: 247 38 96 51

asctime$28:	; BinaryAdd £temporary3586 shortDayList £temporary3585
x32950:	mov si, [bp + 10]	; 3: 139 118 10
x32953:	add si, ax	; 2: 1 198

asctime$29:	; Deref £temporary3584 -> £temporary3586 £temporary3586 0

asctime$30:	; Parameter 14 £temporary3584 -> £temporary3586 10
x32955:	mov ax, [si]	; 2: 139 4
x32957:	mov [bp + 24], ax	; 3: 137 70 24

asctime$31:	; Deref £temporary3587 -> tp tp 8
x32960:	mov si, [bp + 6]	; 3: 139 118 6

asctime$32:	; UnsignedMultiply £temporary3589 £temporary3587 -> tp 2
x32963:	mov ax, [si + 8]	; 3: 139 68 8
x32966:	xor dx, dx	; 2: 49 210
x32968:	mul word [int2$2#]	; 4: 247 38 96 51

asctime$33:	; BinaryAdd £temporary3590 shortMonthList £temporary3589
x32972:	mov si, [bp + 12]	; 3: 139 118 12
x32975:	add si, ax	; 2: 1 198

asctime$34:	; Deref £temporary3588 -> £temporary3590 £temporary3590 0

asctime$35:	; Parameter 14 £temporary3588 -> £temporary3590 12
x32977:	mov ax, [si]	; 2: 139 4
x32979:	mov [bp + 26], ax	; 3: 137 70 26

asctime$36:	; Deref £temporary3591 -> tp tp 6
x32982:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; Parameter 14 £temporary3591 -> tp 14
x32985:	mov ax, [si + 6]	; 3: 139 68 6
x32988:	mov [bp + 28], ax	; 3: 137 70 28

asctime$38:	; Deref £temporary3592 -> tp tp 4
x32991:	mov si, [bp + 6]	; 3: 139 118 6

asctime$39:	; Parameter 14 £temporary3592 -> tp 16
x32994:	mov ax, [si + 4]	; 3: 139 68 4
x32997:	mov [bp + 30], ax	; 3: 137 70 30

asctime$40:	; Deref £temporary3593 -> tp tp 2
x33000:	mov si, [bp + 6]	; 3: 139 118 6

asctime$41:	; Parameter 14 £temporary3593 -> tp 18
x33003:	mov ax, [si + 2]	; 3: 139 68 2
x33006:	mov [bp + 32], ax	; 3: 137 70 32

asctime$42:	; Deref £temporary3594 -> tp tp 0
x33009:	mov si, [bp + 6]	; 3: 139 118 6

asctime$43:	; Parameter 14 £temporary3594 -> tp 20
x33012:	mov ax, [si]	; 2: 139 4
x33014:	mov [bp + 34], ax	; 3: 137 70 34

asctime$44:	; Deref £temporary3595 -> tp tp 10
x33017:	mov si, [bp + 6]	; 3: 139 118 6

asctime$45:	; BinaryAdd £temporary3596 £temporary3595 -> tp 1900
x33020:	mov ax, [si + 10]	; 3: 139 68 10
x33023:	add ax, 1900	; 3: 5 108 7

asctime$46:	; Parameter 14 £temporary3596 22
x33026:	mov [bp + 36], ax	; 3: 137 70 36

asctime$47:	; Call 14 sprintf 0
x33029:	mov word [bp + 14], asctime$48	; 5: 199 70 14 24 129
x33034:	mov [bp + 16], bp	; 3: 137 110 16
x33037:	add bp, 14	; 3: 131 197 14
x33040:	mov di, bp	; 2: 137 239
x33042:	add di, 14	; 3: 131 199 14
x33045:	jmp sprintf	; 3: 233 79 1

asctime$48:	; PostCall 14

asctime$49:	; SetReturnValue g_timeString
x33048:	mov bx, @4180$g_timeString	; 3: 187 76 129

asctime$50:	; Return g_timeString
x33051:	mov ax, [bp]	; 3: 139 70 0
x33054:	mov di, [bp + 4]	; 3: 139 126 4
x33057:	mov bp, [bp + 2]	; 3: 139 110 2
x33060:	jmp ax	; 2: 255 224

asctime$51:	; FunctionEnd asctime

@4181$g_defaultShortDayList:
x33062:	dw string_Sun# ; 2: 129 30
x33064:	dw string_Mon# ; 2: 133 30
x33066:	dw string_Tue# ; 2: 137 30
x33068:	dw string_Wed# ; 2: 141 30
x33070:	dw string_Thu# ; 2: 145 30
x33072:	dw string_Fri# ; 2: 149 30
x33074:	dw string_Sat# ; 2: 153 30

@4183$g_defaultShortMonthList:
x33076:	dw string_Jan# ; 2: 252 30
x33078:	dw string_Feb# ; 2: 0 31
x33080:	dw string_Mar# ; 2: 4 31
x33082:	dw string_Apr# ; 2: 8 31
x33084:	dw string_May# ; 2: 12 31
x33086:	dw string_Jun# ; 2: 16 31
x33088:	dw string_Jul# ; 2: 20 31
x33090:	dw string_Aug# ; 2: 24 31
x33092:	dw string_Sep# ; 2: 28 31
x33094:	dw string_Oct# ; 2: 32 31
x33096:	dw string_Nov# ; 2: 36 31
x33098:	dw string_Dec# ; 2: 40 31

@4180$g_timeString:
x33100:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x33356:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

sprintf:	; address £temporary2372 format
x33383:	mov si, bp	; 2: 137 238
x33385:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2373 £temporary2372

sprintf$2:	; BinaryAdd arg_list £temporary2373 2
x33388:	add si, 2	; 3: 131 198 2
x33391:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x33394:	mov ax, [bp + 6]	; 3: 139 70 6
x33397:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x33400:	mov ax, [bp + 8]	; 3: 139 70 8
x33403:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x33406:	mov ax, [di + 10]	; 3: 139 69 10
x33409:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x33412:	mov word [di + 12], sprintf$8	; 5: 199 69 12 151 130
x33417:	mov [di + 14], bp	; 3: 137 109 14
x33420:	mov [di + 16], di	; 3: 137 125 16
x33423:	add di, 12	; 3: 131 199 12
x33426:	mov bp, di	; 2: 137 253
x33428:	nop	; 1: 144
x33429:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2375

sprintf$10:	; SetReturnValue £temporary2375

sprintf$11:	; Return £temporary2375
x33431:	mov ax, [bp]	; 3: 139 70 0
x33434:	mov di, [bp + 4]	; 3: 139 126 4
x33437:	mov bp, [bp + 2]	; 3: 139 110 2
x33440:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x33442:	mov word [g_outStatus], 1	; 6: 199 6 156 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2380 outString
x33448:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2380
x33451:	mov [g_outDevice], ax	; 3: 163 158 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x33454:	mov ax, [bp + 8]	; 3: 139 70 8
x33457:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x33460:	mov ax, [bp + 10]	; 3: 139 70 10
x33463:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x33466:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 200 130
x33471:	mov [bp + 14], bp	; 3: 137 110 14
x33474:	add bp, 12	; 3: 131 197 12
x33477:	jmp printFormat	; 3: 233 216 140

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2381

vsprintf$9:	; SetReturnValue £temporary2381

vsprintf$10:	; Return £temporary2381
x33480:	mov ax, [bp]	; 3: 139 70 0
x33483:	mov di, [bp + 4]	; 3: 139 126 4
x33486:	mov bp, [bp + 2]	; 3: 139 110 2
x33489:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x33491:	mov ax, [bp + 6]	; 3: 139 70 6
x33494:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x33497:	mov word [bp + 8], ctime$4	; 5: 199 70 8 231 130
x33502:	mov [bp + 10], bp	; 3: 137 110 10
x33505:	add bp, 8	; 3: 131 197 8
x33508:	jmp localtime	; 3: 233 213 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3607

ctime$6:	; Parameter 8 £temporary3607 6
x33511:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x33514:	mov word [bp + 8], ctime$8	; 5: 199 70 8 248 130
x33519:	mov [bp + 10], bp	; 3: 137 110 10
x33522:	add bp, 8	; 3: 131 197 8
x33525:	jmp asctime	; 3: 233 89 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3608

ctime$10:	; SetReturnValue £temporary3608

ctime$11:	; Return £temporary3608
x33528:	mov ax, [bp]	; 3: 139 70 0
x33531:	mov di, [bp + 4]	; 3: 139 126 4
x33534:	mov bp, [bp + 2]	; 3: 139 110 2
x33537:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x33539:	mov word [bp + 14], strftime$2	; 5: 199 70 14 17 131
x33544:	mov [bp + 16], bp	; 3: 137 110 16
x33547:	add bp, 14	; 3: 131 197 14
x33550:	jmp localeconv	; 3: 233 35 155

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3631

strftime$4:	; Assign localeConvPtr £temporary3631
x33553:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 9 localeConvPtr 0
x33556:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33560:	je strftime$9	; 2: 116 8

strftime$6:	; Deref £temporary3633 -> localeConvPtr localeConvPtr 4
x33562:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Assign £temporary3637 £temporary3633 -> localeConvPtr
x33565:	mov ax, [si + 4]	; 3: 139 68 4

strftime$8:	; Goto 10
x33568:	jmp strftime$10	; 2: 235 3

strftime$9:	; Assign £temporary3637 0
x33570:	mov ax, 0	; 3: 184 0 0

strftime$10:	; Assign shortDayList £temporary3637
x33573:	mov [bp + 16], ax	; 3: 137 70 16

strftime$11:	; Equal 15 localeConvPtr 0
x33576:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33580:	je strftime$15	; 2: 116 8

strftime$12:	; Deref £temporary3639 -> localeConvPtr localeConvPtr 8
x33582:	mov si, [bp + 14]	; 3: 139 118 14

strftime$13:	; Assign £temporary3643 £temporary3639 -> localeConvPtr
x33585:	mov ax, [si + 8]	; 3: 139 68 8

strftime$14:	; Goto 16
x33588:	jmp strftime$16	; 2: 235 3

strftime$15:	; Assign £temporary3643 0
x33590:	mov ax, 0	; 3: 184 0 0

strftime$16:	; Assign shortMonthList £temporary3643
x33593:	mov [bp + 18], ax	; 3: 137 70 18

strftime$17:	; Equal 21 localeConvPtr 0
x33596:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33600:	je strftime$21	; 2: 116 8

strftime$18:	; Deref £temporary3645 -> localeConvPtr localeConvPtr 6
x33602:	mov si, [bp + 14]	; 3: 139 118 14

strftime$19:	; Assign £temporary3649 £temporary3645 -> localeConvPtr
x33605:	mov ax, [si + 6]	; 3: 139 68 6

strftime$20:	; Goto 22
x33608:	jmp strftime$22	; 2: 235 3

strftime$21:	; Assign £temporary3649 0
x33610:	mov ax, 0	; 3: 184 0 0

strftime$22:	; Assign longDayList £temporary3649
x33613:	mov [bp + 20], ax	; 3: 137 70 20

strftime$23:	; Equal 27 localeConvPtr 0
x33616:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33620:	je strftime$27	; 2: 116 8

strftime$24:	; Deref £temporary3651 -> localeConvPtr localeConvPtr 10
x33622:	mov si, [bp + 14]	; 3: 139 118 14

strftime$25:	; Assign £temporary3655 £temporary3651 -> localeConvPtr
x33625:	mov ax, [si + 10]	; 3: 139 68 10

strftime$26:	; Goto 28
x33628:	jmp strftime$28	; 2: 235 3

strftime$27:	; Assign £temporary3655 0
x33630:	mov ax, 0	; 3: 184 0 0

strftime$28:	; Assign longMonthList £temporary3655
x33633:	mov [bp + 22], ax	; 3: 137 70 22

strftime$29:	; Deref £temporary3656 -> tp tp 10
x33636:	mov si, [bp + 12]	; 3: 139 118 12

strftime$30:	; BinarySubtract £temporary3657 £temporary3656 -> tp 69
x33639:	mov ax, [si + 10]	; 3: 139 68 10
x33642:	sub ax, 69	; 3: 131 232 69

strftime$31:	; SignedDivide leapDays £temporary3657 4
x33645:	xor dx, dx	; 2: 49 210
x33647:	idiv word [int2$4#]	; 4: 247 62 252 123
x33651:	mov [bp + 24], ax	; 3: 137 70 24

strftime$32:	; Deref £temporary3659 -> tp tp 10
x33654:	mov si, [bp + 12]	; 3: 139 118 12

strftime$33:	; BinarySubtract £temporary3660 £temporary3659 -> tp 70
x33657:	mov ax, [si + 10]	; 3: 139 68 10
x33660:	sub ax, 70	; 3: 131 232 70

strftime$34:	; SignedMultiply £temporary3661 £temporary3660 365
x33663:	xor dx, dx	; 2: 49 210
x33665:	imul word [int2$365#]	; 4: 247 46 239 124

strftime$35:	; BinaryAdd £temporary3662 £temporary3661 leapDays
x33669:	add ax, [bp + 24]	; 3: 3 70 24

strftime$36:	; Deref £temporary3663 -> tp tp 14
x33672:	mov si, [bp + 12]	; 3: 139 118 12

strftime$37:	; BinaryAdd £temporary3664 £temporary3662 £temporary3663 -> tp
x33675:	add ax, [si + 14]	; 3: 3 68 14

strftime$38:	; IntegralToIntegral £temporary3665 £temporary3664
x33678:	and eax, 65535	; 6: 102 37 255 255 0 0
x33684:	cmp ax, 0	; 3: 131 248 0
x33687:	jge strftime$39	; 2: 125 5
x33689:	neg ax	; 2: 247 216
x33691:	neg eax	; 3: 102 247 216

strftime$39:	; Assign totalDays £temporary3665
x33694:	mov [bp + 26], eax	; 4: 102 137 70 26

strftime$40:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$41:	; Parameter 34 s 6
x33698:	mov ax, [bp + 6]	; 3: 139 70 6
x33701:	mov [bp + 40], ax	; 3: 137 70 40

strftime$42:	; Parameter 34 string_# 8
x33704:	mov word [bp + 42], string_#	; 5: 199 70 42 96 30

strftime$43:	; Call 34 strcpy 0
x33709:	mov word [bp + 34], strftime$44	; 5: 199 70 34 187 131
x33714:	mov [bp + 36], bp	; 3: 137 110 36
x33717:	add bp, 34	; 3: 131 197 34
x33720:	jmp strcpy	; 3: 233 180 207

strftime$44:	; PostCall 34

strftime$45:	; Equal 48 shortDayList 0
x33723:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x33727:	je strftime$48	; 2: 116 5

strftime$46:	; Assign £temporary3671 shortDayList
x33729:	mov ax, [bp + 16]	; 3: 139 70 16

strftime$47:	; Goto 49
x33732:	jmp strftime$49	; 2: 235 3

strftime$48:	; Assign £temporary3671 g_defaultShortDayList
x33734:	mov ax, @4181$g_defaultShortDayList	; 3: 184 38 129

strftime$49:	; Assign shortDayList £temporary3671
x33737:	mov [bp + 16], ax	; 3: 137 70 16

strftime$50:	; Equal 53 longDayList 0
x33740:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x33744:	je strftime$53	; 2: 116 5

strftime$51:	; Assign £temporary3676 longDayList
x33746:	mov ax, [bp + 20]	; 3: 139 70 20

strftime$52:	; Goto 54
x33749:	jmp strftime$54	; 2: 235 3

strftime$53:	; Assign £temporary3676 g_defaultLongDayList
x33751:	mov ax, @4182$g_defaultLongDayList	; 3: 184 221 137

strftime$54:	; Assign longDayList £temporary3676
x33754:	mov [bp + 20], ax	; 3: 137 70 20

strftime$55:	; Equal 58 shortMonthList 0
x33757:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x33761:	je strftime$58	; 2: 116 5

strftime$56:	; Assign £temporary3681 shortMonthList
x33763:	mov ax, [bp + 18]	; 3: 139 70 18

strftime$57:	; Goto 59
x33766:	jmp strftime$59	; 2: 235 3

strftime$58:	; Assign £temporary3681 g_defaultShortMonthList
x33768:	mov ax, @4183$g_defaultShortMonthList	; 3: 184 52 129

strftime$59:	; Assign shortMonthList £temporary3681
x33771:	mov [bp + 18], ax	; 3: 137 70 18

strftime$60:	; Equal 63 longMonthList 0
x33774:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x33778:	je strftime$63	; 2: 116 5

strftime$61:	; Assign £temporary3686 longMonthList
x33780:	mov ax, [bp + 22]	; 3: 139 70 22

strftime$62:	; Goto 64
x33783:	jmp strftime$64	; 2: 235 3

strftime$63:	; Assign £temporary3686 g_defaultLongMonthList
x33785:	mov ax, @4184$g_defaultLongMonthList	; 3: 184 235 137

strftime$64:	; Assign longMonthList £temporary3686
x33788:	mov [bp + 22], ax	; 3: 137 70 22

strftime$65:	; SignedGreaterThanEqual 70 totalDays 3
x33791:	cmp dword [bp + 26], 3	; 5: 102 131 126 26 3
x33796:	jge strftime$70	; 2: 125 24

strftime$66:	; BinaryAdd £temporary3688 totalDays 4
x33798:	mov eax, [bp + 26]	; 4: 102 139 70 26
x33802:	add eax, 4	; 4: 102 131 192 4

strftime$67:	; IntegralToIntegral £temporary3689 £temporary3688
x33806:	cmp eax, 0	; 4: 102 131 248 0
x33810:	jge strftime$68	; 2: 125 5
x33812:	neg eax	; 3: 102 247 216
x33815:	neg ax	; 2: 247 216

strftime$68:	; Assign yearDaySunday £temporary3689
x33817:	mov [bp + 30], ax	; 3: 137 70 30

strftime$69:	; Goto 74
x33820:	jmp strftime$74	; 2: 235 30

strftime$70:	; BinarySubtract £temporary3690 totalDays 3
x33822:	mov eax, [bp + 26]	; 4: 102 139 70 26
x33826:	sub eax, 3	; 4: 102 131 232 3

strftime$71:	; SignedModulo £temporary3691 £temporary3690 7
x33830:	xor edx, edx	; 3: 102 49 210
x33833:	idiv dword [int4$7#]	; 5: 102 247 62 115 127

strftime$72:	; IntegralToIntegral £temporary3692 £temporary3691
x33838:	cmp edx, 0	; 4: 102 131 250 0
x33842:	jge strftime$73	; 2: 125 5
x33844:	neg edx	; 3: 102 247 218
x33847:	neg dx	; 2: 247 218

strftime$73:	; Assign yearDaySunday £temporary3692
x33849:	mov [bp + 30], dx	; 3: 137 86 30

strftime$74:	; SignedGreaterThanEqual 79 totalDays 4
x33852:	cmp dword [bp + 26], 4	; 5: 102 131 126 26 4
x33857:	jge strftime$79	; 2: 125 24

strftime$75:	; BinaryAdd £temporary3694 totalDays 3
x33859:	mov eax, [bp + 26]	; 4: 102 139 70 26
x33863:	add eax, 3	; 4: 102 131 192 3

strftime$76:	; IntegralToIntegral £temporary3695 £temporary3694
x33867:	cmp eax, 0	; 4: 102 131 248 0
x33871:	jge strftime$77	; 2: 125 5
x33873:	neg eax	; 3: 102 247 216
x33876:	neg ax	; 2: 247 216

strftime$77:	; Assign yearDayMonday £temporary3695
x33878:	mov [bp + 32], ax	; 3: 137 70 32

strftime$78:	; Goto 83
x33881:	jmp strftime$83	; 2: 235 30

strftime$79:	; BinarySubtract £temporary3696 totalDays 4
x33883:	mov eax, [bp + 26]	; 4: 102 139 70 26
x33887:	sub eax, 4	; 4: 102 131 232 4

strftime$80:	; SignedModulo £temporary3697 £temporary3696 7
x33891:	xor edx, edx	; 3: 102 49 210
x33894:	idiv dword [int4$7#]	; 5: 102 247 62 115 127

strftime$81:	; IntegralToIntegral £temporary3698 £temporary3697
x33899:	cmp edx, 0	; 4: 102 131 250 0
x33903:	jge strftime$82	; 2: 125 5
x33905:	neg edx	; 3: 102 247 218
x33908:	neg dx	; 2: 247 218

strftime$82:	; Assign yearDayMonday £temporary3698
x33910:	mov [bp + 32], dx	; 3: 137 86 32

strftime$83:	; Assign index 0
x33913:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

strftime$84:	; BinaryAdd £temporary3700 fmt index
x33918:	mov si, [bp + 10]	; 3: 139 118 10
x33921:	add si, [bp + 34]	; 3: 3 118 34

strftime$85:	; Deref £temporary3699 -> £temporary3700 £temporary3700 0

strftime$86:	; Equal 356 £temporary3699 -> £temporary3700 0
x33924:	cmp byte [si], 0	; 3: 128 60 0
x33927:	je strftime$356	; 4: 15 132 51 5

strftime$87:	; BinaryAdd £temporary3704 fmt index
x33931:	mov si, [bp + 10]	; 3: 139 118 10
x33934:	add si, [bp + 34]	; 3: 3 118 34

strftime$88:	; Deref £temporary3703 -> £temporary3704 £temporary3704 0

strftime$89:	; NotEqual 329 £temporary3703 -> £temporary3704 37
x33937:	cmp byte [si], 37	; 3: 128 60 37
x33940:	jne strftime$329	; 4: 15 133 179 4

strftime$90:	; Increment index
x33944:	inc word [bp + 34]	; 3: 255 70 34

strftime$91:	; Assign £temporary3706 index
x33947:	mov ax, [bp + 34]	; 3: 139 70 34

strftime$92:	; BinaryAdd £temporary3708 fmt £temporary3706
x33950:	mov si, [bp + 10]	; 3: 139 118 10
x33953:	add si, ax	; 2: 1 198

strftime$93:	; Deref £temporary3707 -> £temporary3708 £temporary3708 0

strftime$94:	; Case 118 £temporary3707 -> £temporary3708 97
x33955:	mov al, [si]	; 2: 138 4
x33957:	cmp al, 97	; 2: 60 97
x33959:	je strftime$118	; 4: 15 132 129 0

strftime$95:	; Case 128 £temporary3707 -> £temporary3708 65
x33963:	cmp al, 65	; 2: 60 65
x33965:	je strftime$128	; 4: 15 132 169 0

strftime$96:	; Case 138 £temporary3707 -> £temporary3708 98
x33969:	cmp al, 98	; 2: 60 98
x33971:	je strftime$138	; 4: 15 132 209 0

strftime$97:	; Case 148 £temporary3707 -> £temporary3708 66
x33975:	cmp al, 66	; 2: 60 66
x33977:	je strftime$148	; 4: 15 132 249 0

strftime$98:	; Case 158 £temporary3707 -> £temporary3708 99
x33981:	cmp al, 99	; 2: 60 99
x33983:	je strftime$158	; 4: 15 132 33 1

strftime$99:	; Case 178 £temporary3707 -> £temporary3708 100
x33987:	cmp al, 100	; 2: 60 100
x33989:	je strftime$178	; 4: 15 132 118 1

strftime$100:	; Case 186 £temporary3707 -> £temporary3708 72
x33993:	cmp al, 72	; 2: 60 72
x33995:	je strftime$186	; 4: 15 132 155 1

strftime$101:	; Case 194 £temporary3707 -> £temporary3708 73
x33999:	cmp al, 73	; 2: 60 73
x34001:	je strftime$194	; 4: 15 132 192 1

strftime$102:	; Case 203 £temporary3707 -> £temporary3708 106
x34005:	cmp al, 106	; 2: 60 106
x34007:	je strftime$203	; 4: 15 132 235 1

strftime$103:	; Case 211 £temporary3707 -> £temporary3708 109
x34011:	cmp al, 109	; 2: 60 109
x34013:	je strftime$211	; 4: 15 132 16 2

strftime$104:	; Case 220 £temporary3707 -> £temporary3708 77
x34017:	cmp al, 77	; 2: 60 77
x34019:	je strftime$220	; 4: 15 132 54 2

strftime$105:	; Case 228 £temporary3707 -> £temporary3708 112
x34023:	cmp al, 112	; 2: 60 112
x34025:	je strftime$228	; 4: 15 132 91 2

strftime$106:	; Case 240 £temporary3707 -> £temporary3708 83
x34029:	cmp al, 83	; 2: 60 83
x34031:	je strftime$240	; 4: 15 132 139 2

strftime$107:	; Case 248 £temporary3707 -> £temporary3708 85
x34035:	cmp al, 85	; 2: 60 85
x34037:	je strftime$248	; 4: 15 132 175 2

strftime$108:	; Case 255 £temporary3707 -> £temporary3708 119
x34041:	cmp al, 119	; 2: 60 119
x34043:	je strftime$255	; 4: 15 132 209 2

strftime$109:	; Case 263 £temporary3707 -> £temporary3708 87
x34047:	cmp al, 87	; 2: 60 87
x34049:	je strftime$263	; 4: 15 132 246 2

strftime$110:	; Case 270 £temporary3707 -> £temporary3708 120
x34053:	cmp al, 120	; 2: 60 120
x34055:	je strftime$270	; 4: 15 132 24 3

strftime$111:	; Case 282 £temporary3707 -> £temporary3708 88
x34059:	cmp al, 88	; 2: 60 88
x34061:	je strftime$282	; 4: 15 132 78 3

strftime$112:	; Case 294 £temporary3707 -> £temporary3708 121
x34065:	cmp al, 121	; 2: 60 121
x34067:	je strftime$294	; 4: 15 132 132 3

strftime$113:	; Case 303 £temporary3707 -> £temporary3708 89
x34071:	cmp al, 89	; 2: 60 89
x34073:	je strftime$303	; 4: 15 132 175 3

strftime$114:	; Case 312 £temporary3707 -> £temporary3708 90
x34077:	cmp al, 90	; 2: 60 90
x34079:	je strftime$312	; 4: 15 132 214 3

strftime$115:	; Case 318 £temporary3707 -> £temporary3708 37
x34083:	cmp al, 37	; 2: 60 37
x34085:	je strftime$318	; 4: 15 132 236 3

strftime$116:	; CaseEnd £temporary3707 -> £temporary3708

strftime$117:	; Goto 323
x34089:	jmp strftime$323	; 3: 233 3 4

strftime$118:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$119:	; Parameter 56 add 6
x34092:	mov [bp + 62], bp	; 3: 137 110 62
x34095:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$120:	; Deref £temporary3709 -> tp tp 12
x34099:	mov si, [bp + 12]	; 3: 139 118 12

strftime$121:	; UnsignedMultiply £temporary3711 £temporary3709 -> tp 2
x34102:	mov ax, [si + 12]	; 3: 139 68 12
x34105:	xor dx, dx	; 2: 49 210
x34107:	mul word [int2$2#]	; 4: 247 38 96 51

strftime$122:	; BinaryAdd £temporary3712 shortDayList £temporary3711
x34111:	mov si, [bp + 16]	; 3: 139 118 16
x34114:	add si, ax	; 2: 1 198

strftime$123:	; Deref £temporary3710 -> £temporary3712 £temporary3712 0

strftime$124:	; Parameter 56 £temporary3710 -> £temporary3712 8
x34116:	mov ax, [si]	; 2: 139 4
x34118:	mov [bp + 64], ax	; 3: 137 70 64

strftime$125:	; Call 56 strcpy 0
x34121:	mov word [bp + 56], strftime$126	; 5: 199 70 56 87 133
x34126:	mov [bp + 58], bp	; 3: 137 110 58
x34129:	add bp, 56	; 3: 131 197 56
x34132:	jmp strcpy	; 3: 233 24 206

strftime$126:	; PostCall 56

strftime$127:	; Goto 335
x34135:	jmp strftime$335	; 3: 233 9 4

strftime$128:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$129:	; Parameter 56 add 6
x34138:	mov [bp + 62], bp	; 3: 137 110 62
x34141:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$130:	; Deref £temporary3714 -> tp tp 12
x34145:	mov si, [bp + 12]	; 3: 139 118 12

strftime$131:	; UnsignedMultiply £temporary3716 £temporary3714 -> tp 2
x34148:	mov ax, [si + 12]	; 3: 139 68 12
x34151:	xor dx, dx	; 2: 49 210
x34153:	mul word [int2$2#]	; 4: 247 38 96 51

strftime$132:	; BinaryAdd £temporary3717 longDayList £temporary3716
x34157:	mov si, [bp + 20]	; 3: 139 118 20
x34160:	add si, ax	; 2: 1 198

strftime$133:	; Deref £temporary3715 -> £temporary3717 £temporary3717 0

strftime$134:	; Parameter 56 £temporary3715 -> £temporary3717 8
x34162:	mov ax, [si]	; 2: 139 4
x34164:	mov [bp + 64], ax	; 3: 137 70 64

strftime$135:	; Call 56 strcpy 0
x34167:	mov word [bp + 56], strftime$136	; 5: 199 70 56 133 133
x34172:	mov [bp + 58], bp	; 3: 137 110 58
x34175:	add bp, 56	; 3: 131 197 56
x34178:	jmp strcpy	; 3: 233 234 205

strftime$136:	; PostCall 56

strftime$137:	; Goto 335
x34181:	jmp strftime$335	; 3: 233 219 3

strftime$138:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$139:	; Parameter 56 add 6
x34184:	mov [bp + 62], bp	; 3: 137 110 62
x34187:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$140:	; Deref £temporary3719 -> tp tp 8
x34191:	mov si, [bp + 12]	; 3: 139 118 12

strftime$141:	; UnsignedMultiply £temporary3721 £temporary3719 -> tp 2
x34194:	mov ax, [si + 8]	; 3: 139 68 8
x34197:	xor dx, dx	; 2: 49 210
x34199:	mul word [int2$2#]	; 4: 247 38 96 51

strftime$142:	; BinaryAdd £temporary3722 shortMonthList £temporary3721
x34203:	mov si, [bp + 18]	; 3: 139 118 18
x34206:	add si, ax	; 2: 1 198

strftime$143:	; Deref £temporary3720 -> £temporary3722 £temporary3722 0

strftime$144:	; Parameter 56 £temporary3720 -> £temporary3722 8
x34208:	mov ax, [si]	; 2: 139 4
x34210:	mov [bp + 64], ax	; 3: 137 70 64

strftime$145:	; Call 56 strcpy 0
x34213:	mov word [bp + 56], strftime$146	; 5: 199 70 56 179 133
x34218:	mov [bp + 58], bp	; 3: 137 110 58
x34221:	add bp, 56	; 3: 131 197 56
x34224:	jmp strcpy	; 3: 233 188 205

strftime$146:	; PostCall 56

strftime$147:	; Goto 335
x34227:	jmp strftime$335	; 3: 233 173 3

strftime$148:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$149:	; Parameter 56 add 6
x34230:	mov [bp + 62], bp	; 3: 137 110 62
x34233:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$150:	; Deref £temporary3724 -> tp tp 8
x34237:	mov si, [bp + 12]	; 3: 139 118 12

strftime$151:	; UnsignedMultiply £temporary3726 £temporary3724 -> tp 2
x34240:	mov ax, [si + 8]	; 3: 139 68 8
x34243:	xor dx, dx	; 2: 49 210
x34245:	mul word [int2$2#]	; 4: 247 38 96 51

strftime$152:	; BinaryAdd £temporary3727 longMonthList £temporary3726
x34249:	mov si, [bp + 22]	; 3: 139 118 22
x34252:	add si, ax	; 2: 1 198

strftime$153:	; Deref £temporary3725 -> £temporary3727 £temporary3727 0

strftime$154:	; Parameter 56 £temporary3725 -> £temporary3727 8
x34254:	mov ax, [si]	; 2: 139 4
x34256:	mov [bp + 64], ax	; 3: 137 70 64

strftime$155:	; Call 56 strcpy 0
x34259:	mov word [bp + 56], strftime$156	; 5: 199 70 56 225 133
x34264:	mov [bp + 58], bp	; 3: 137 110 58
x34267:	add bp, 56	; 3: 131 197 56
x34270:	jmp strcpy	; 3: 233 142 205

strftime$156:	; PostCall 56

strftime$157:	; Goto 335
x34273:	jmp strftime$335	; 3: 233 127 3

strftime$158:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 56 add 6
x34276:	mov [bp + 62], bp	; 3: 137 110 62
x34279:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$160:	; Parameter 56 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x34283:	mov word [bp + 64], string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 64 3 138

strftime$161:	; Deref £temporary3729 -> tp tp 10
x34288:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; BinaryAdd £temporary3730 £temporary3729 -> tp 1900
x34291:	mov ax, [si + 10]	; 3: 139 68 10
x34294:	add ax, 1900	; 3: 5 108 7

strftime$163:	; Parameter 56 £temporary3730 10
x34297:	mov [bp + 66], ax	; 3: 137 70 66

strftime$164:	; Deref £temporary3731 -> tp tp 8
x34300:	mov si, [bp + 12]	; 3: 139 118 12

strftime$165:	; BinaryAdd £temporary3732 £temporary3731 -> tp 1
x34303:	mov ax, [si + 8]	; 3: 139 68 8
x34306:	inc ax	; 1: 64

strftime$166:	; Parameter 56 £temporary3732 12
x34307:	mov [bp + 68], ax	; 3: 137 70 68

strftime$167:	; Deref £temporary3733 -> tp tp 6
x34310:	mov si, [bp + 12]	; 3: 139 118 12

strftime$168:	; Parameter 56 £temporary3733 -> tp 14
x34313:	mov ax, [si + 6]	; 3: 139 68 6
x34316:	mov [bp + 70], ax	; 3: 137 70 70

strftime$169:	; Deref £temporary3734 -> tp tp 4
x34319:	mov si, [bp + 12]	; 3: 139 118 12

strftime$170:	; Parameter 56 £temporary3734 -> tp 16
x34322:	mov ax, [si + 4]	; 3: 139 68 4
x34325:	mov [bp + 72], ax	; 3: 137 70 72

strftime$171:	; Deref £temporary3735 -> tp tp 2
x34328:	mov si, [bp + 12]	; 3: 139 118 12

strftime$172:	; Parameter 56 £temporary3735 -> tp 18
x34331:	mov ax, [si + 2]	; 3: 139 68 2
x34334:	mov [bp + 74], ax	; 3: 137 70 74

strftime$173:	; Deref £temporary3736 -> tp tp 0
x34337:	mov si, [bp + 12]	; 3: 139 118 12

strftime$174:	; Parameter 56 £temporary3736 -> tp 20
x34340:	mov ax, [si]	; 2: 139 4
x34342:	mov [bp + 76], ax	; 3: 137 70 76

strftime$175:	; Call 56 sprintf 0
x34345:	mov word [bp + 56], strftime$176	; 5: 199 70 56 60 134
x34350:	mov [bp + 58], bp	; 3: 137 110 58
x34353:	add bp, 56	; 3: 131 197 56
x34356:	mov di, bp	; 2: 137 239
x34358:	add di, 12	; 3: 131 199 12
x34361:	jmp sprintf	; 3: 233 43 252

strftime$176:	; PostCall 56

strftime$177:	; Goto 335
x34364:	jmp strftime$335	; 3: 233 36 3

strftime$178:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$179:	; Parameter 56 add 6
x34367:	mov [bp + 62], bp	; 3: 137 110 62
x34370:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$180:	; Parameter 56 string_25i# 8
x34374:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$181:	; Deref £temporary3738 -> tp tp 6
x34379:	mov si, [bp + 12]	; 3: 139 118 12

strftime$182:	; Parameter 56 £temporary3738 -> tp 10
x34382:	mov ax, [si + 6]	; 3: 139 68 6
x34385:	mov [bp + 66], ax	; 3: 137 70 66

strftime$183:	; Call 56 sprintf 0
x34388:	mov word [bp + 56], strftime$184	; 5: 199 70 56 103 134
x34393:	mov [bp + 58], bp	; 3: 137 110 58
x34396:	add bp, 56	; 3: 131 197 56
x34399:	mov di, bp	; 2: 137 239
x34401:	add di, 2	; 3: 131 199 2
x34404:	jmp sprintf	; 3: 233 0 252

strftime$184:	; PostCall 56

strftime$185:	; Goto 335
x34407:	jmp strftime$335	; 3: 233 249 2

strftime$186:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$187:	; Parameter 56 add 6
x34410:	mov [bp + 62], bp	; 3: 137 110 62
x34413:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$188:	; Parameter 56 string_25i# 8
x34417:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$189:	; Deref £temporary3740 -> tp tp 4
x34422:	mov si, [bp + 12]	; 3: 139 118 12

strftime$190:	; Parameter 56 £temporary3740 -> tp 10
x34425:	mov ax, [si + 4]	; 3: 139 68 4
x34428:	mov [bp + 66], ax	; 3: 137 70 66

strftime$191:	; Call 56 sprintf 0
x34431:	mov word [bp + 56], strftime$192	; 5: 199 70 56 146 134
x34436:	mov [bp + 58], bp	; 3: 137 110 58
x34439:	add bp, 56	; 3: 131 197 56
x34442:	mov di, bp	; 2: 137 239
x34444:	add di, 2	; 3: 131 199 2
x34447:	jmp sprintf	; 3: 233 213 251

strftime$192:	; PostCall 56

strftime$193:	; Goto 335
x34450:	jmp strftime$335	; 3: 233 206 2

strftime$194:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$195:	; Parameter 56 add 6
x34453:	mov [bp + 62], bp	; 3: 137 110 62
x34456:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$196:	; Parameter 56 string_25i# 8
x34460:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$197:	; Deref £temporary3742 -> tp tp 4
x34465:	mov si, [bp + 12]	; 3: 139 118 12

strftime$198:	; SignedModulo £temporary3743 £temporary3742 -> tp 12
x34468:	mov ax, [si + 4]	; 3: 139 68 4
x34471:	xor dx, dx	; 2: 49 210
x34473:	idiv word [int2$12#]	; 4: 247 62 33 138

strftime$199:	; Parameter 56 £temporary3743 10
x34477:	mov [bp + 66], dx	; 3: 137 86 66

strftime$200:	; Call 56 sprintf 0
x34480:	mov word [bp + 56], strftime$201	; 5: 199 70 56 195 134
x34485:	mov [bp + 58], bp	; 3: 137 110 58
x34488:	add bp, 56	; 3: 131 197 56
x34491:	mov di, bp	; 2: 137 239
x34493:	add di, 2	; 3: 131 199 2
x34496:	jmp sprintf	; 3: 233 164 251

strftime$201:	; PostCall 56

strftime$202:	; Goto 335
x34499:	jmp strftime$335	; 3: 233 157 2

strftime$203:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 56 add 6
x34502:	mov [bp + 62], bp	; 3: 137 110 62
x34505:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$205:	; Parameter 56 string_25i# 8
x34509:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$206:	; Deref £temporary3745 -> tp tp 14
x34514:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 56 £temporary3745 -> tp 10
x34517:	mov ax, [si + 14]	; 3: 139 68 14
x34520:	mov [bp + 66], ax	; 3: 137 70 66

strftime$208:	; Call 56 sprintf 0
x34523:	mov word [bp + 56], strftime$209	; 5: 199 70 56 238 134
x34528:	mov [bp + 58], bp	; 3: 137 110 58
x34531:	add bp, 56	; 3: 131 197 56
x34534:	mov di, bp	; 2: 137 239
x34536:	add di, 2	; 3: 131 199 2
x34539:	jmp sprintf	; 3: 233 121 251

strftime$209:	; PostCall 56

strftime$210:	; Goto 335
x34542:	jmp strftime$335	; 3: 233 114 2

strftime$211:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 56 add 6
x34545:	mov [bp + 62], bp	; 3: 137 110 62
x34548:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$213:	; Parameter 56 string_25i# 8
x34552:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$214:	; Deref £temporary3747 -> tp tp 8
x34557:	mov si, [bp + 12]	; 3: 139 118 12

strftime$215:	; BinaryAdd £temporary3748 £temporary3747 -> tp 1
x34560:	mov ax, [si + 8]	; 3: 139 68 8
x34563:	inc ax	; 1: 64

strftime$216:	; Parameter 56 £temporary3748 10
x34564:	mov [bp + 66], ax	; 3: 137 70 66

strftime$217:	; Call 56 sprintf 0
x34567:	mov word [bp + 56], strftime$218	; 5: 199 70 56 26 135
x34572:	mov [bp + 58], bp	; 3: 137 110 58
x34575:	add bp, 56	; 3: 131 197 56
x34578:	mov di, bp	; 2: 137 239
x34580:	add di, 2	; 3: 131 199 2
x34583:	jmp sprintf	; 3: 233 77 251

strftime$218:	; PostCall 56

strftime$219:	; Goto 335
x34586:	jmp strftime$335	; 3: 233 70 2

strftime$220:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$221:	; Parameter 56 add 6
x34589:	mov [bp + 62], bp	; 3: 137 110 62
x34592:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$222:	; Parameter 56 string_25i# 8
x34596:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$223:	; Deref £temporary3750 -> tp tp 2
x34601:	mov si, [bp + 12]	; 3: 139 118 12

strftime$224:	; Parameter 56 £temporary3750 -> tp 10
x34604:	mov ax, [si + 2]	; 3: 139 68 2
x34607:	mov [bp + 66], ax	; 3: 137 70 66

strftime$225:	; Call 56 sprintf 0
x34610:	mov word [bp + 56], strftime$226	; 5: 199 70 56 69 135
x34615:	mov [bp + 58], bp	; 3: 137 110 58
x34618:	add bp, 56	; 3: 131 197 56
x34621:	mov di, bp	; 2: 137 239
x34623:	add di, 2	; 3: 131 199 2
x34626:	jmp sprintf	; 3: 233 34 251

strftime$226:	; PostCall 56

strftime$227:	; Goto 335
x34629:	jmp strftime$335	; 3: 233 27 2

strftime$228:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$229:	; Parameter 56 add 6
x34632:	mov [bp + 62], bp	; 3: 137 110 62
x34635:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$230:	; Parameter 56 string_25s# 8
x34639:	mov word [bp + 64], string_25s#	; 5: 199 70 64 35 138

strftime$231:	; Deref £temporary3752 -> tp tp 4
x34644:	mov si, [bp + 12]	; 3: 139 118 12

strftime$232:	; SignedGreaterThanEqual 235 £temporary3752 -> tp 12
x34647:	cmp word [si + 4], 12	; 4: 131 124 4 12
x34651:	jge strftime$235	; 2: 125 5

strftime$233:	; Assign £temporary3757 string_AM#
x34653:	mov ax, string_AM#	; 3: 184 38 138

strftime$234:	; Goto 236
x34656:	jmp strftime$236	; 2: 235 3

strftime$235:	; Assign £temporary3757 string_PM#
x34658:	mov ax, string_PM#	; 3: 184 41 138

strftime$236:	; Parameter 56 £temporary3757 10
x34661:	mov [bp + 66], ax	; 3: 137 70 66

strftime$237:	; Call 56 sprintf 0
x34664:	mov word [bp + 56], strftime$238	; 5: 199 70 56 123 135
x34669:	mov [bp + 58], bp	; 3: 137 110 58
x34672:	add bp, 56	; 3: 131 197 56
x34675:	mov di, bp	; 2: 137 239
x34677:	add di, 2	; 3: 131 199 2
x34680:	jmp sprintf	; 3: 233 236 250

strftime$238:	; PostCall 56

strftime$239:	; Goto 335
x34683:	jmp strftime$335	; 3: 233 229 1

strftime$240:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$241:	; Parameter 56 add 6
x34686:	mov [bp + 62], bp	; 3: 137 110 62
x34689:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$242:	; Parameter 56 string_25i# 8
x34693:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$243:	; Deref £temporary3759 -> tp tp 0
x34698:	mov si, [bp + 12]	; 3: 139 118 12

strftime$244:	; Parameter 56 £temporary3759 -> tp 10
x34701:	mov ax, [si]	; 2: 139 4
x34703:	mov [bp + 66], ax	; 3: 137 70 66

strftime$245:	; Call 56 sprintf 0
x34706:	mov word [bp + 56], strftime$246	; 5: 199 70 56 165 135
x34711:	mov [bp + 58], bp	; 3: 137 110 58
x34714:	add bp, 56	; 3: 131 197 56
x34717:	mov di, bp	; 2: 137 239
x34719:	add di, 2	; 3: 131 199 2
x34722:	jmp sprintf	; 3: 233 194 250

strftime$246:	; PostCall 56

strftime$247:	; Goto 335
x34725:	jmp strftime$335	; 3: 233 187 1

strftime$248:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$249:	; Parameter 56 add 6
x34728:	mov [bp + 62], bp	; 3: 137 110 62
x34731:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$250:	; Parameter 56 string_25i# 8
x34735:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$251:	; Parameter 56 yearDaySunday 10
x34740:	mov ax, [bp + 30]	; 3: 139 70 30
x34743:	mov [bp + 66], ax	; 3: 137 70 66

strftime$252:	; Call 56 sprintf 0
x34746:	mov word [bp + 56], strftime$253	; 5: 199 70 56 205 135
x34751:	mov [bp + 58], bp	; 3: 137 110 58
x34754:	add bp, 56	; 3: 131 197 56
x34757:	mov di, bp	; 2: 137 239
x34759:	add di, 2	; 3: 131 199 2
x34762:	jmp sprintf	; 3: 233 154 250

strftime$253:	; PostCall 56

strftime$254:	; Goto 335
x34765:	jmp strftime$335	; 3: 233 147 1

strftime$255:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$256:	; Parameter 56 add 6
x34768:	mov [bp + 62], bp	; 3: 137 110 62
x34771:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$257:	; Parameter 56 string_25i# 8
x34775:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$258:	; Deref £temporary3762 -> tp tp 12
x34780:	mov si, [bp + 12]	; 3: 139 118 12

strftime$259:	; Parameter 56 £temporary3762 -> tp 10
x34783:	mov ax, [si + 12]	; 3: 139 68 12
x34786:	mov [bp + 66], ax	; 3: 137 70 66

strftime$260:	; Call 56 sprintf 0
x34789:	mov word [bp + 56], strftime$261	; 5: 199 70 56 248 135
x34794:	mov [bp + 58], bp	; 3: 137 110 58
x34797:	add bp, 56	; 3: 131 197 56
x34800:	mov di, bp	; 2: 137 239
x34802:	add di, 2	; 3: 131 199 2
x34805:	jmp sprintf	; 3: 233 111 250

strftime$261:	; PostCall 56

strftime$262:	; Goto 335
x34808:	jmp strftime$335	; 3: 233 104 1

strftime$263:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$264:	; Parameter 56 add 6
x34811:	mov [bp + 62], bp	; 3: 137 110 62
x34814:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$265:	; Parameter 56 string_25i# 8
x34818:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$266:	; Parameter 56 yearDayMonday 10
x34823:	mov ax, [bp + 32]	; 3: 139 70 32
x34826:	mov [bp + 66], ax	; 3: 137 70 66

strftime$267:	; Call 56 sprintf 0
x34829:	mov word [bp + 56], strftime$268	; 5: 199 70 56 32 136
x34834:	mov [bp + 58], bp	; 3: 137 110 58
x34837:	add bp, 56	; 3: 131 197 56
x34840:	mov di, bp	; 2: 137 239
x34842:	add di, 2	; 3: 131 199 2
x34845:	jmp sprintf	; 3: 233 71 250

strftime$268:	; PostCall 56

strftime$269:	; Goto 335
x34848:	jmp strftime$335	; 3: 233 64 1

strftime$270:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$271:	; Parameter 56 add 6
x34851:	mov [bp + 62], bp	; 3: 137 110 62
x34854:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$272:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x34858:	mov word [bp + 64], string_2502i3A2502i3A2502i#	; 5: 199 70 64 44 138

strftime$273:	; Deref £temporary3765 -> tp tp 4
x34863:	mov si, [bp + 12]	; 3: 139 118 12

strftime$274:	; Parameter 56 £temporary3765 -> tp 10
x34866:	mov ax, [si + 4]	; 3: 139 68 4
x34869:	mov [bp + 66], ax	; 3: 137 70 66

strftime$275:	; Deref £temporary3766 -> tp tp 2
x34872:	mov si, [bp + 12]	; 3: 139 118 12

strftime$276:	; Parameter 56 £temporary3766 -> tp 12
x34875:	mov ax, [si + 2]	; 3: 139 68 2
x34878:	mov [bp + 68], ax	; 3: 137 70 68

strftime$277:	; Deref £temporary3767 -> tp tp 0
x34881:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Parameter 56 £temporary3767 -> tp 14
x34884:	mov ax, [si]	; 2: 139 4
x34886:	mov [bp + 70], ax	; 3: 137 70 70

strftime$279:	; Call 56 sprintf 0
x34889:	mov word [bp + 56], strftime$280	; 5: 199 70 56 92 136
x34894:	mov [bp + 58], bp	; 3: 137 110 58
x34897:	add bp, 56	; 3: 131 197 56
x34900:	mov di, bp	; 2: 137 239
x34902:	add di, 6	; 3: 131 199 6
x34905:	jmp sprintf	; 3: 233 11 250

strftime$280:	; PostCall 56

strftime$281:	; Goto 335
x34908:	jmp strftime$335	; 3: 233 4 1

strftime$282:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$283:	; Parameter 56 add 6
x34911:	mov [bp + 62], bp	; 3: 137 110 62
x34914:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$284:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x34918:	mov word [bp + 64], string_2502i3A2502i3A2502i#	; 5: 199 70 64 44 138

strftime$285:	; Deref £temporary3769 -> tp tp 4
x34923:	mov si, [bp + 12]	; 3: 139 118 12

strftime$286:	; Parameter 56 £temporary3769 -> tp 10
x34926:	mov ax, [si + 4]	; 3: 139 68 4
x34929:	mov [bp + 66], ax	; 3: 137 70 66

strftime$287:	; Deref £temporary3770 -> tp tp 2
x34932:	mov si, [bp + 12]	; 3: 139 118 12

strftime$288:	; Parameter 56 £temporary3770 -> tp 12
x34935:	mov ax, [si + 2]	; 3: 139 68 2
x34938:	mov [bp + 68], ax	; 3: 137 70 68

strftime$289:	; Deref £temporary3771 -> tp tp 0
x34941:	mov si, [bp + 12]	; 3: 139 118 12

strftime$290:	; Parameter 56 £temporary3771 -> tp 14
x34944:	mov ax, [si]	; 2: 139 4
x34946:	mov [bp + 70], ax	; 3: 137 70 70

strftime$291:	; Call 56 sprintf 0
x34949:	mov word [bp + 56], strftime$292	; 5: 199 70 56 152 136
x34954:	mov [bp + 58], bp	; 3: 137 110 58
x34957:	add bp, 56	; 3: 131 197 56
x34960:	mov di, bp	; 2: 137 239
x34962:	add di, 6	; 3: 131 199 6
x34965:	jmp sprintf	; 3: 233 207 249

strftime$292:	; PostCall 56

strftime$293:	; Goto 335
x34968:	jmp strftime$335	; 3: 233 200 0

strftime$294:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$295:	; Parameter 56 add 6
x34971:	mov [bp + 62], bp	; 3: 137 110 62
x34974:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$296:	; Parameter 56 string_25i# 8
x34978:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$297:	; Deref £temporary3773 -> tp tp 10
x34983:	mov si, [bp + 12]	; 3: 139 118 12

strftime$298:	; SignedModulo £temporary3774 £temporary3773 -> tp 100
x34986:	mov ax, [si + 10]	; 3: 139 68 10
x34989:	xor dx, dx	; 2: 49 210
x34991:	idiv word [int2$100#]	; 4: 247 62 184 127

strftime$299:	; Parameter 56 £temporary3774 10
x34995:	mov [bp + 66], dx	; 3: 137 86 66

strftime$300:	; Call 56 sprintf 0
x34998:	mov word [bp + 56], strftime$301	; 5: 199 70 56 201 136
x35003:	mov [bp + 58], bp	; 3: 137 110 58
x35006:	add bp, 56	; 3: 131 197 56
x35009:	mov di, bp	; 2: 137 239
x35011:	add di, 2	; 3: 131 199 2
x35014:	jmp sprintf	; 3: 233 158 249

strftime$301:	; PostCall 56

strftime$302:	; Goto 335
x35017:	jmp strftime$335	; 3: 233 151 0

strftime$303:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 56 add 6
x35020:	mov [bp + 62], bp	; 3: 137 110 62
x35023:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$305:	; Parameter 56 string_25i# 8
x35027:	mov word [bp + 64], string_25i#	; 5: 199 70 64 251 75

strftime$306:	; Deref £temporary3776 -> tp tp 10
x35032:	mov si, [bp + 12]	; 3: 139 118 12

strftime$307:	; BinaryAdd £temporary3777 £temporary3776 -> tp 1900
x35035:	mov ax, [si + 10]	; 3: 139 68 10
x35038:	add ax, 1900	; 3: 5 108 7

strftime$308:	; Parameter 56 £temporary3777 10
x35041:	mov [bp + 66], ax	; 3: 137 70 66

strftime$309:	; Call 56 sprintf 0
x35044:	mov word [bp + 56], strftime$310	; 5: 199 70 56 247 136
x35049:	mov [bp + 58], bp	; 3: 137 110 58
x35052:	add bp, 56	; 3: 131 197 56
x35055:	mov di, bp	; 2: 137 239
x35057:	add di, 2	; 3: 131 199 2
x35060:	jmp sprintf	; 3: 233 112 249

strftime$310:	; PostCall 56

strftime$311:	; Goto 335
x35063:	jmp strftime$335	; 2: 235 106

strftime$312:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$313:	; Parameter 56 add 6
x35065:	mov [bp + 62], bp	; 3: 137 110 62
x35068:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$314:	; Parameter 56 string_# 8
x35072:	mov word [bp + 64], string_#	; 5: 199 70 64 96 30

strftime$315:	; Call 56 strcpy 0
x35077:	mov word [bp + 56], strftime$316	; 5: 199 70 56 19 137
x35082:	mov [bp + 58], bp	; 3: 137 110 58
x35085:	add bp, 56	; 3: 131 197 56
x35088:	jmp strcpy	; 3: 233 92 202

strftime$316:	; PostCall 56

strftime$317:	; Goto 335
x35091:	jmp strftime$335	; 2: 235 78

strftime$318:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$319:	; Parameter 56 add 6
x35093:	mov [bp + 62], bp	; 3: 137 110 62
x35096:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$320:	; Parameter 56 string_25# 8
x35100:	mov word [bp + 64], string_25#	; 5: 199 70 64 59 138

strftime$321:	; Call 56 strcpy 0
x35105:	mov word [bp + 56], strftime$322	; 5: 199 70 56 47 137
x35110:	mov [bp + 58], bp	; 3: 137 110 58
x35113:	add bp, 56	; 3: 131 197 56
x35116:	jmp strcpy	; 3: 233 64 202

strftime$322:	; PostCall 56

strftime$323:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$324:	; Parameter 56 add 6
x35119:	mov [bp + 62], bp	; 3: 137 110 62
x35122:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$325:	; Parameter 56 string_# 8
x35126:	mov word [bp + 64], string_#	; 5: 199 70 64 96 30

strftime$326:	; Call 56 strcpy 0
x35131:	mov word [bp + 56], strftime$327	; 5: 199 70 56 73 137
x35136:	mov [bp + 58], bp	; 3: 137 110 58
x35139:	add bp, 56	; 3: 131 197 56
x35142:	jmp strcpy	; 3: 233 38 202

strftime$327:	; PostCall 56

strftime$328:	; Goto 335
x35145:	jmp strftime$335	; 2: 235 24

strftime$329:	; Deref £temporary3782 -> add add 0
x35147:	mov si, bp	; 2: 137 238
x35149:	add si, 36	; 3: 131 198 36

strftime$330:	; BinaryAdd £temporary3784 fmt index
x35152:	mov di, [bp + 10]	; 3: 139 126 10
x35155:	add di, [bp + 34]	; 3: 3 126 34

strftime$331:	; Deref £temporary3783 -> £temporary3784 £temporary3784 0

strftime$332:	; Assign £temporary3782 -> add £temporary3783 -> £temporary3784
x35158:	mov al, [di]	; 2: 138 5
x35160:	mov [si], al	; 2: 136 4

strftime$333:	; Deref £temporary3785 -> add add 1
x35162:	mov si, bp	; 2: 137 238
x35164:	add si, 36	; 3: 131 198 36

strftime$334:	; Assign £temporary3785 -> add 0
x35167:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$335:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$336:	; Parameter 56 s 6
x35171:	mov ax, [bp + 6]	; 3: 139 70 6
x35174:	mov [bp + 62], ax	; 3: 137 70 62

strftime$337:	; Call 56 strlen 0
x35177:	mov word [bp + 56], strftime$338	; 5: 199 70 56 119 137
x35182:	mov [bp + 58], bp	; 3: 137 110 58
x35185:	add bp, 56	; 3: 131 197 56
x35188:	jmp strlen	; 3: 233 198 0

strftime$338:	; PostCall 56

strftime$339:	; GetReturnValue £temporary3786

strftime$340:	; Assign x £temporary3786
x35191:	mov [bp + 56], bx	; 3: 137 94 56

strftime$341:	; CallHeader 58 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$342:	; Parameter 58 add 6
x35194:	mov [bp + 64], bp	; 3: 137 110 64
x35197:	add word [bp + 64], 36	; 4: 131 70 64 36

strftime$343:	; Call 58 strlen 0
x35201:	mov word [bp + 58], strftime$344	; 5: 199 70 58 143 137
x35206:	mov [bp + 60], bp	; 3: 137 110 60
x35209:	add bp, 58	; 3: 131 197 58
x35212:	jmp strlen	; 3: 233 174 0

strftime$344:	; PostCall 58

strftime$345:	; GetReturnValue £temporary3787

strftime$346:	; Assign y £temporary3787
x35215:	mov [bp + 58], bx	; 3: 137 94 58

strftime$347:	; BinaryAdd £temporary3788 x y
x35218:	mov ax, [bp + 56]	; 3: 139 70 56
x35221:	add ax, [bp + 58]	; 3: 3 70 58

strftime$348:	; SignedGreaterThanEqual 356 £temporary3788 smax
x35224:	cmp ax, [bp + 8]	; 3: 59 70 8
x35227:	jge strftime$356	; 2: 125 33

strftime$349:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$350:	; Parameter 60 s 6
x35229:	mov ax, [bp + 6]	; 3: 139 70 6
x35232:	mov [bp + 66], ax	; 3: 137 70 66

strftime$351:	; Parameter 60 add 8
x35235:	mov [bp + 68], bp	; 3: 137 110 68
x35238:	add word [bp + 68], 36	; 4: 131 70 68 36

strftime$352:	; Call 60 strcat 0
x35242:	mov word [bp + 60], strftime$353	; 5: 199 70 60 184 137
x35247:	mov [bp + 62], bp	; 3: 137 110 62
x35250:	add bp, 60	; 3: 131 197 60
x35253:	jmp strcat	; 3: 233 168 0

strftime$353:	; PostCall 60

strftime$354:	; Increment index
x35256:	inc word [bp + 34]	; 3: 255 70 34

strftime$355:	; Goto 84
x35259:	jmp strftime$84	; 3: 233 192 250

strftime$356:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$357:	; Parameter 34 s 6
x35262:	mov ax, [bp + 6]	; 3: 139 70 6
x35265:	mov [bp + 40], ax	; 3: 137 70 40

strftime$358:	; Call 34 strlen 0
x35268:	mov word [bp + 34], strftime$359	; 5: 199 70 34 210 137
x35273:	mov [bp + 36], bp	; 3: 137 110 36
x35276:	add bp, 34	; 3: 131 197 34
x35279:	nop	; 1: 144
x35280:	jmp strlen	; 2: 235 107

strftime$359:	; PostCall 34

strftime$360:	; GetReturnValue £temporary3791

strftime$361:	; SetReturnValue £temporary3791

strftime$362:	; Return £temporary3791
x35282:	mov ax, [bp]	; 3: 139 70 0
x35285:	mov di, [bp + 4]	; 3: 139 126 4
x35288:	mov bp, [bp + 2]	; 3: 139 110 2
x35291:	jmp ax	; 2: 255 224

strftime$363:	; FunctionEnd strftime

@4182$g_defaultLongDayList:
x35293:	dw string_Sunday# ; 2: 171 30
x35295:	dw string_Monday# ; 2: 178 30
x35297:	dw string_Tuesday# ; 2: 185 30
x35299:	dw string_Wednesday# ; 2: 193 30
x35301:	dw string_Thursday# ; 2: 203 30
x35303:	dw string_Friday# ; 2: 212 30
x35305:	dw string_Saturday# ; 2: 219 30

@4184$g_defaultLongMonthList:
x35307:	dw string_January# ; 2: 68 31
x35309:	dw string_February# ; 2: 76 31
x35311:	dw string_March# ; 2: 85 31
x35313:	dw string_April# ; 2: 91 31
x35315:	dw string_May# ; 2: 12 31
x35317:	dw string_June# ; 2: 97 31
x35319:	dw string_July# ; 2: 102 31
x35321:	dw string_August# ; 2: 107 31
x35323:	dw string_September# ; 2: 114 31
x35325:	dw string_October# ; 2: 124 31
x35327:	dw string_November# ; 2: 132 31
x35329:	dw string_December# ; 2: 141 31

string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x35331:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

int2$12#:
x35361:	dw 12	; 2: 12 0

string_25s#:
x35363:	db "%s", 0	; 3: 37 115 0

string_AM#:
x35366:	db "AM", 0	; 3: 65 77 0

string_PM#:
x35369:	db "PM", 0	; 3: 80 77 0

string_2502i3A2502i3A2502i#:
x35372:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

string_25#:
x35387:	db "%", 0	; 2: 37 0

strlen:	; Assign index 0
x35389:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary4047 string index
x35394:	mov si, [bp + 6]	; 3: 139 118 6
x35397:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary4046 -> £temporary4047 £temporary4047 0

strlen$3:	; Equal 6 £temporary4046 -> £temporary4047 0
x35400:	cmp byte [si], 0	; 3: 128 60 0
x35403:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x35405:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x35408:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x35410:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x35413:	mov ax, [bp]	; 3: 139 70 0
x35416:	mov di, [bp + 4]	; 3: 139 126 4
x35419:	mov bp, [bp + 2]	; 3: 139 110 2
x35422:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x35424:	mov ax, [bp + 6]	; 3: 139 70 6
x35427:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x35430:	mov word [bp + 12], strcat$3	; 5: 199 70 12 116 138
x35435:	mov [bp + 14], bp	; 3: 137 110 14
x35438:	add bp, 12	; 3: 131 197 12
x35441:	nop	; 1: 144
x35442:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3894

strcat$5:	; Assign targetLength £temporary3894
x35444:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x35447:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3896 source index
x35452:	mov si, [bp + 8]	; 3: 139 118 8
x35455:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3895 -> £temporary3896 £temporary3896 0

strcat$9:	; Equal 18 £temporary3895 -> £temporary3896 0
x35458:	cmp byte [si], 0	; 3: 128 60 0
x35461:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3899 targetLength index
x35463:	mov ax, [bp + 12]	; 3: 139 70 12
x35466:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3901 target £temporary3899
x35469:	mov si, [bp + 6]	; 3: 139 118 6
x35472:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3900 -> £temporary3901 £temporary3901 0

strcat$13:	; BinaryAdd £temporary3903 source index
x35474:	mov di, [bp + 8]	; 3: 139 126 8
x35477:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3902 -> £temporary3903 £temporary3903 0

strcat$15:	; Assign £temporary3900 -> £temporary3901 £temporary3902 -> £temporary3903
x35480:	mov al, [di]	; 2: 138 5
x35482:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x35484:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x35487:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3904 targetLength index
x35489:	mov ax, [bp + 12]	; 3: 139 70 12
x35492:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3906 target £temporary3904
x35495:	mov si, [bp + 6]	; 3: 139 118 6
x35498:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3905 -> £temporary3906 £temporary3906 0

strcat$21:	; Assign £temporary3905 -> £temporary3906 0
x35500:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x35503:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x35506:	mov ax, [bp]	; 3: 139 70 0
x35509:	mov di, [bp + 4]	; 3: 139 126 4
x35512:	mov bp, [bp + 2]	; 3: 139 110 2
x35515:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x35517:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x35522:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x35526:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x35528:	mov ax, [stderr]	; 3: 161 74 75
x35531:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x35534:	mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 76 75

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x35539:	mov word [bp + 18], string_n203D3D201#	; 5: 199 70 18 14 139

assert_test$6:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x35544:	mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 21 139

assert_test$7:	; Parameter 8 8 14
x35549:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x35554:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 245 138
x35559:	mov [bp + 10], bp	; 3: 137 110 10
x35562:	add bp, 8	; 3: 131 197 8
x35565:	mov di, bp	; 2: 137 239
x35567:	add di, 6	; 3: 131 199 6
x35570:	jmp fprintf	; 3: 233 182 200

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x35573:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 3 139
x35578:	mov [bp + 10], bp	; 3: 137 110 10
x35581:	add bp, 8	; 3: 131 197 8
x35584:	jmp abort	; 3: 233 227 200

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x35587:	mov ax, [bp]	; 3: 139 70 0
x35590:	mov di, [bp + 4]	; 3: 139 126 4
x35593:	mov bp, [bp + 2]	; 3: 139 110 2
x35596:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

string_n203D3D201#:
x35598:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x35605:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 67: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x35672:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x35677:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 107 139
x35682:	mov [bp + 8], bp	; 3: 137 110 8
x35685:	add bp, 6	; 3: 131 197 6
x35688:	jmp malloc	; 3: 233 138 220

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary6003

malloc_test$5:	; Assign b £temporary6003
x35691:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x35694:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x35699:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 129 139
x35704:	mov [bp + 10], bp	; 3: 137 110 10
x35707:	add bp, 8	; 3: 131 197 8
x35710:	jmp malloc	; 3: 233 116 220

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary6004

malloc_test$11:	; Assign c £temporary6004
x35713:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x35716:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x35721:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 151 139
x35726:	mov [bp + 12], bp	; 3: 137 110 12
x35729:	add bp, 10	; 3: 131 197 10
x35732:	jmp malloc	; 3: 233 94 220

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary6005

malloc_test$17:	; Assign d £temporary6005
x35735:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x35738:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 168 139
x35743:	mov [bp + 14], bp	; 3: 137 110 14
x35746:	add bp, 12	; 3: 131 197 12
x35749:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x35752:	mov ax, [bp + 8]	; 3: 139 70 8
x35755:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x35758:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x35763:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 193 139
x35768:	mov [bp + 14], bp	; 3: 137 110 14
x35771:	add bp, 12	; 3: 131 197 12
x35774:	jmp realloc	; 3: 233 14 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x35777:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 207 139
x35782:	mov [bp + 14], bp	; 3: 137 110 14
x35785:	add bp, 12	; 3: 131 197 12
x35788:	nop	; 1: 144
x35789:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x35791:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x35796:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 226 139
x35801:	mov [bp + 14], bp	; 3: 137 110 14
x35804:	add bp, 12	; 3: 131 197 12
x35807:	jmp malloc	; 3: 233 19 220

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x35810:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 240 139
x35815:	mov [bp + 14], bp	; 3: 137 110 14
x35818:	add bp, 12	; 3: 131 197 12
x35821:	nop	; 1: 144
x35822:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x35824:	mov ax, [bp + 6]	; 3: 139 70 6
x35827:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x35830:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 4 140
x35835:	mov [bp + 14], bp	; 3: 137 110 14
x35838:	add bp, 12	; 3: 131 197 12
x35841:	jmp free	; 3: 233 208 221

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x35844:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 18 140
x35849:	mov [bp + 14], bp	; 3: 137 110 14
x35852:	add bp, 12	; 3: 131 197 12
x35855:	nop	; 1: 144
x35856:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x35858:	mov ax, [bp + 10]	; 3: 139 70 10
x35861:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x35864:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 38 140
x35869:	mov [bp + 14], bp	; 3: 137 110 14
x35872:	add bp, 12	; 3: 131 197 12
x35875:	jmp free	; 3: 233 174 221

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x35878:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 52 140
x35883:	mov [bp + 14], bp	; 3: 137 110 14
x35886:	add bp, 12	; 3: 131 197 12
x35889:	nop	; 1: 144
x35890:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x35892:	mov ax, [bp]	; 3: 139 70 0
x35895:	mov di, [bp + 4]	; 3: 139 126 4
x35898:	mov bp, [bp + 2]	; 3: 139 110 2
x35901:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x35903:	mov ax, [g_firstBlockPtr]	; 3: 161 131 105
x35906:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x35909:	mov word [bp + 14], string_Heap3A0A#	; 5: 199 70 14 177 140

print_heap$3:	; Call 8 printf 0
x35914:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 90 140
x35919:	mov [bp + 10], bp	; 3: 137 110 10
x35922:	add bp, 8	; 3: 131 197 8
x35925:	mov di, bp	; 2: 137 239
x35927:	jmp printf	; 3: 233 107 128

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x35930:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x35934:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x35936:	mov word [bp + 14], string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 184 140

print_heap$8:	; IntegralToIntegral £temporary338 currBlockPtr
x35941:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary338 8
x35944:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary339 -> currBlockPtr currBlockPtr 0
x35947:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary339 -> currBlockPtr 10
x35950:	mov ax, [si]	; 2: 139 4
x35952:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x35955:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 134 140
x35960:	mov [bp + 10], bp	; 3: 137 110 10
x35963:	add bp, 8	; 3: 131 197 8
x35966:	mov di, bp	; 2: 137 239
x35968:	add di, 4	; 3: 131 199 4
x35971:	jmp printf	; 3: 233 63 128

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary341 -> currBlockPtr currBlockPtr 2
x35974:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary341 -> currBlockPtr
x35977:	mov ax, [si + 2]	; 3: 139 68 2
x35980:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x35983:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x35985:	mov word [bp + 14], string_0A#	; 5: 199 70 14 195 12

print_heap$19:	; Call 8 printf 0
x35990:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 166 140
x35995:	mov [bp + 10], bp	; 3: 137 110 10
x35998:	add bp, 8	; 3: 131 197 8
x36001:	mov di, bp	; 2: 137 239
x36003:	jmp printf	; 3: 233 31 128

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x36006:	mov ax, [bp]	; 3: 139 70 0
x36009:	mov di, [bp + 4]	; 3: 139 126 4
x36012:	mov bp, [bp + 2]	; 3: 139 110 2
x36015:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

string_Heap3A0A#:
x36017:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

string_2020Address2025u2C20Size2025u0A#:
x36024:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x36047:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36051:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x36053:	mov ax, [stderr]	; 3: 161 74 75
x36056:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36059:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 76 75

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x36064:	mov word [bp + 20], string_newMemorySize203E3D200#	; 5: 199 70 20 150 142

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36069:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 149 105

realloc$6:	; Parameter 10 259 14
x36074:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x36079:	mov word [bp + 10], realloc$8	; 5: 199 70 10 2 141
x36084:	mov [bp + 12], bp	; 3: 137 110 12
x36087:	add bp, 10	; 3: 131 197 10
x36090:	mov di, bp	; 2: 137 239
x36092:	add di, 6	; 3: 131 199 6
x36095:	jmp fprintf	; 3: 233 169 198

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x36098:	mov word [bp + 10], realloc$11	; 5: 199 70 10 16 141
x36103:	mov [bp + 12], bp	; 3: 137 110 12
x36106:	add bp, 10	; 3: 131 197 10
x36109:	jmp abort	; 3: 233 214 198

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x36112:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36116:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x36118:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36122:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x36124:	mov ax, [stderr]	; 3: 161 74 75
x36127:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36130:	mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 76 75

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x36135:	mov word [bp + 20], string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 169 142

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36140:	mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 149 105

realloc$19:	; Parameter 10 260 14
x36145:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x36150:	mov word [bp + 10], realloc$21	; 5: 199 70 10 73 141
x36155:	mov [bp + 12], bp	; 3: 137 110 12
x36158:	add bp, 10	; 3: 131 197 10
x36161:	mov di, bp	; 2: 137 239
x36163:	add di, 6	; 3: 131 199 6
x36166:	jmp fprintf	; 3: 233 98 198

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x36169:	mov word [bp + 10], realloc$24	; 5: 199 70 10 87 141
x36174:	mov [bp + 12], bp	; 3: 137 110 12
x36177:	add bp, 10	; 3: 131 197 10
x36180:	jmp abort	; 3: 233 143 198

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x36183:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36187:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x36189:	mov ax, [bp + 8]	; 3: 139 70 8
x36192:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x36195:	mov word [bp + 10], realloc$29	; 5: 199 70 10 113 141
x36200:	mov [bp + 12], bp	; 3: 137 110 12
x36203:	add bp, 10	; 3: 131 197 10
x36206:	jmp malloc	; 3: 233 132 218

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary296

realloc$31:	; SetReturnValue £temporary296

realloc$32:	; Return £temporary296
x36209:	mov ax, [bp]	; 3: 139 70 0
x36212:	mov di, [bp + 4]	; 3: 139 126 4
x36215:	mov bp, [bp + 2]	; 3: 139 110 2
x36218:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x36220:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36224:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x36226:	mov ax, [bp + 6]	; 3: 139 70 6
x36229:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x36232:	mov word [bp + 10], realloc$37	; 5: 199 70 10 150 141
x36237:	mov [bp + 12], bp	; 3: 137 110 12
x36240:	add bp, 10	; 3: 131 197 10
x36243:	jmp free	; 3: 233 62 220

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x36246:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x36249:	mov ax, [bp]	; 3: 139 70 0
x36252:	mov di, [bp + 4]	; 3: 139 126 4
x36255:	mov bp, [bp + 2]	; 3: 139 110 2
x36258:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary299 newMemorySize
x36260:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary299 4
x36263:	add ax, 4	; 3: 131 192 4
x36266:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary301 oldMemoryPtr
x36269:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary302 £temporary301 4
x36272:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary303 £temporary302

realloc$45:	; Assign oldBlockPtr £temporary303
x36275:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary304 -> oldBlockPtr oldBlockPtr 0
x36278:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary304 -> oldBlockPtr
x36281:	mov ax, [si]	; 2: 139 4
x36283:	cmp [bp + 10], ax	; 3: 57 70 10
x36286:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary306 -> oldBlockPtr oldBlockPtr 0
x36288:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary306 -> oldBlockPtr newBlockSize
x36291:	mov ax, [bp + 10]	; 3: 139 70 10
x36294:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x36296:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x36299:	mov ax, [bp]	; 3: 139 70 0
x36302:	mov di, [bp + 4]	; 3: 139 126 4
x36305:	mov bp, [bp + 2]	; 3: 139 110 2
x36308:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x36310:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x36315:	mov ax, [g_firstBlockPtr]	; 3: 161 131 105
x36318:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x36321:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x36325:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x36327:	mov ax, [bp + 12]	; 3: 139 70 12
x36330:	cmp [bp + 16], ax	; 3: 57 70 16
x36333:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary309 currBlockPtr
x36335:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary309
x36338:	mov bx, [bp + 14]	; 3: 139 94 14
x36341:	sub bx, ax	; 2: 41 195
x36343:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x36346:	mov ax, [bp + 10]	; 3: 139 70 10
x36349:	cmp [bp + 18], ax	; 3: 57 70 18
x36352:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary312 -> oldBlockPtr oldBlockPtr 0
x36354:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary312 -> oldBlockPtr newBlockSize
x36357:	mov ax, [bp + 10]	; 3: 139 70 10
x36360:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x36362:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x36365:	mov ax, [bp]	; 3: 139 70 0
x36368:	mov di, [bp + 4]	; 3: 139 126 4
x36371:	mov bp, [bp + 2]	; 3: 139 110 2
x36374:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary313 currBlockPtr
x36376:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary313
x36379:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary314 -> currBlockPtr currBlockPtr 2
x36382:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary314 -> currBlockPtr
x36385:	mov ax, [si + 2]	; 3: 139 68 2
x36388:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x36391:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x36393:	mov ax, [bp + 8]	; 3: 139 70 8
x36396:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x36399:	mov word [bp + 14], realloc$71	; 5: 199 70 14 61 142
x36404:	mov [bp + 16], bp	; 3: 137 110 16
x36407:	add bp, 14	; 3: 131 197 14
x36410:	jmp malloc	; 3: 233 184 217

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary315

realloc$73:	; Assign newMemoryPtr £temporary315
x36413:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x36416:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x36420:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x36422:	mov ax, [bp + 14]	; 3: 139 70 14
x36425:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x36428:	mov ax, [bp + 6]	; 3: 139 70 6
x36431:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x36434:	mov ax, [bp + 8]	; 3: 139 70 8
x36437:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x36440:	mov word [bp + 16], realloc$80	; 5: 199 70 16 102 142
x36445:	mov [bp + 18], bp	; 3: 137 110 18
x36448:	add bp, 16	; 3: 131 197 16
x36451:	nop	; 1: 144
x36452:	jmp memcpy	; 2: 235 117

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x36454:	mov ax, [bp + 6]	; 3: 139 70 6
x36457:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x36460:	mov word [bp + 16], realloc$84	; 5: 199 70 16 122 142
x36465:	mov [bp + 18], bp	; 3: 137 110 18
x36468:	add bp, 16	; 3: 131 197 16
x36471:	jmp free	; 3: 233 90 219

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x36474:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x36477:	mov ax, [bp]	; 3: 139 70 0
x36480:	mov di, [bp + 4]	; 3: 139 126 4
x36483:	mov bp, [bp + 2]	; 3: 139 110 2
x36486:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x36488:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x36491:	mov ax, [bp]	; 3: 139 70 0
x36494:	mov di, [bp + 4]	; 3: 139 126 4
x36497:	mov bp, [bp + 2]	; 3: 139 110 2
x36500:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

string_newMemorySize203E3D200#:
x36502:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x36521:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

memcpy:	; IntegralToIntegral £temporary4111 target
x36571:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary4111
x36574:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary4112 source
x36577:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary4112
x36580:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x36583:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x36588:	mov ax, [bp + 10]	; 3: 139 70 10
x36591:	cmp [bp + 16], ax	; 3: 57 70 16
x36594:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary4116 charTarget index
x36596:	mov si, [bp + 12]	; 3: 139 118 12
x36599:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary4115 -> £temporary4116 £temporary4116 0

memcpy$8:	; BinaryAdd £temporary4118 charSource index
x36602:	mov di, [bp + 14]	; 3: 139 126 14
x36605:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary4117 -> £temporary4118 £temporary4118 0

memcpy$10:	; Assign £temporary4115 -> £temporary4116 £temporary4117 -> £temporary4118
x36608:	mov al, [di]	; 2: 138 5
x36610:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x36612:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x36615:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary4119 target
x36617:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary4119

memcpy$15:	; Return £temporary4119
x36620:	mov ax, [bp]	; 3: 139 70 0
x36623:	mov di, [bp + 4]	; 3: 139 126 4
x36626:	mov bp, [bp + 2]	; 3: 139 110 2
x36629:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x36631:	mov word [bp + 12], string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 2 145

print_test$2:	; Parameter 6 123 8
x36636:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x36641:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x36646:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x36651:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x36656:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x36661:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x36666:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x36671:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x36676:	mov word [bp + 6], print_test$11	; 5: 199 70 6 87 143
x36681:	mov [bp + 8], bp	; 3: 137 110 8
x36684:	add bp, 6	; 3: 131 197 6
x36687:	mov di, bp	; 2: 137 239
x36689:	add di, 16	; 3: 131 199 16
x36692:	jmp printf	; 3: 233 110 125

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x36695:	mov word [bp + 12], string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 2 145

print_test$14:	; Parameter 6 -123 8
x36700:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x36705:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x36710:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x36715:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x36720:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x36725:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x36730:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x36735:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x36740:	mov word [bp + 6], print_test$23	; 5: 199 70 6 151 143
x36745:	mov [bp + 8], bp	; 3: 137 110 8
x36748:	add bp, 6	; 3: 131 197 6
x36751:	mov di, bp	; 2: 137 239
x36753:	add di, 16	; 3: 131 199 16
x36756:	jmp printf	; 3: 233 46 125

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x36759:	mov word [bp + 12], string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 62 145

print_test$26:	; Parameter 6 123 8
x36764:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x36769:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x36774:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x36779:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x36784:	mov word [bp + 6], print_test$31	; 5: 199 70 6 195 143
x36789:	mov [bp + 8], bp	; 3: 137 110 8
x36792:	add bp, 6	; 3: 131 197 6
x36795:	mov di, bp	; 2: 137 239
x36797:	add di, 8	; 3: 131 199 8
x36800:	jmp printf	; 3: 233 2 125

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x36803:	mov word [bp + 12], string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 62 145

print_test$34:	; Parameter 6 -123 8
x36808:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x36813:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x36818:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x36823:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x36828:	mov word [bp + 6], print_test$39	; 5: 199 70 6 239 143
x36833:	mov [bp + 8], bp	; 3: 137 110 8
x36836:	add bp, 6	; 3: 131 197 6
x36839:	mov di, bp	; 2: 137 239
x36841:	add di, 8	; 3: 131 199 8
x36844:	jmp printf	; 3: 233 214 124

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x36847:	mov word [bp + 12], string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 94 145

print_test$42:	; PushFloat 123.456
x36852:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$43:	; Parameter 6 123.456 8
x36856:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x36859:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$45:	; Parameter 6 123.456 16
x36863:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x36866:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$47:	; Parameter 6 123.456 24
x36870:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x36873:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$49:	; Parameter 6 123.456 32
x36877:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x36880:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$51:	; Parameter 6 123.456 40
x36884:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x36887:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$53:	; Parameter 6 123.456 48
x36891:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x36894:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$55:	; Parameter 6 123.456 56
x36898:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x36901:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$57:	; Parameter 6 123.456 64
x36905:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x36908:	mov word [bp + 6], print_test$59	; 5: 199 70 6 63 144
x36913:	mov [bp + 8], bp	; 3: 137 110 8
x36916:	add bp, 6	; 3: 131 197 6
x36919:	mov di, bp	; 2: 137 239
x36921:	add di, 64	; 3: 131 199 64
x36924:	jmp printf	; 3: 233 134 124

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x36927:	mov word [bp + 12], string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 94 145

print_test$62:	; PushFloat -123.456
x36932:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$63:	; Parameter 6 -123.456 8
x36936:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x36939:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$65:	; Parameter 6 -123.456 16
x36943:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x36946:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$67:	; Parameter 6 -123.456 24
x36950:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x36953:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$69:	; Parameter 6 -123.456 32
x36957:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x36960:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$71:	; Parameter 6 -123.456 40
x36964:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x36967:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$73:	; Parameter 6 -123.456 48
x36971:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x36974:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$75:	; Parameter 6 -123.456 56
x36978:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x36981:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$77:	; Parameter 6 -123.456 64
x36985:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x36988:	mov word [bp + 6], print_test$79	; 5: 199 70 6 143 144
x36993:	mov [bp + 8], bp	; 3: 137 110 8
x36996:	add bp, 6	; 3: 131 197 6
x36999:	mov di, bp	; 2: 137 239
x37001:	add di, 64	; 3: 131 199 64
x37004:	jmp printf	; 3: 233 54 124

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x37007:	mov word [bp + 12], string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 178 145

print_test$82:	; PushFloat 123.456
x37012:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$83:	; Parameter 6 123.456 8
x37016:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x37019:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$85:	; Parameter 6 123.456 16
x37023:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x37026:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$87:	; Parameter 6 123.456 24
x37030:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x37033:	fld qword [float8$123.456#]	; 4: 221 6 177 116

print_test$89:	; Parameter 6 123.456 32
x37037:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x37040:	mov word [bp + 6], print_test$91	; 5: 199 70 6 195 144
x37045:	mov [bp + 8], bp	; 3: 137 110 8
x37048:	add bp, 6	; 3: 131 197 6
x37051:	mov di, bp	; 2: 137 239
x37053:	add di, 32	; 3: 131 199 32
x37056:	jmp printf	; 3: 233 2 124

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x37059:	mov word [bp + 12], string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 178 145

print_test$94:	; PushFloat -123.456
x37064:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$95:	; Parameter 6 -123.456 8
x37068:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x37071:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$97:	; Parameter 6 -123.456 16
x37075:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x37078:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$99:	; Parameter 6 -123.456 24
x37082:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x37085:	fld qword [float8$minus123.456#]	; 4: 221 6 123 117

print_test$101:	; Parameter 6 -123.456 32
x37089:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x37092:	mov word [bp + 6], print_test$103	; 5: 199 70 6 247 144
x37097:	mov [bp + 8], bp	; 3: 137 110 8
x37100:	add bp, 6	; 3: 131 197 6
x37103:	mov di, bp	; 2: 137 239
x37105:	add di, 32	; 3: 131 199 32
x37108:	jmp printf	; 3: 233 206 123

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x37111:	mov ax, [bp]	; 3: 139 70 0
x37114:	mov di, [bp + 4]	; 3: 139 126 4
x37117:	mov bp, [bp + 2]	; 3: 139 110 2
x37120:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x37122:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x37182:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x37214:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x37298:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x37342:	mov word [bp + 12], string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 171 147

limits_test$2:	; Parameter 6 8 8
x37347:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x37352:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 251 145
x37357:	mov [bp + 8], bp	; 3: 137 110 8
x37360:	add bp, 6	; 3: 131 197 6
x37363:	mov di, bp	; 2: 137 239
x37365:	add di, 2	; 3: 131 199 2
x37368:	jmp printf	; 3: 233 202 122

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x37371:	mov word [bp + 12], string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 186 147

limits_test$7:	; Parameter 6 -128 8
x37376:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x37381:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 24 146
x37386:	mov [bp + 8], bp	; 3: 137 110 8
x37389:	add bp, 6	; 3: 131 197 6
x37392:	mov di, bp	; 2: 137 239
x37394:	add di, 2	; 3: 131 199 2
x37397:	jmp printf	; 3: 233 173 122

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x37400:	mov word [bp + 12], string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 202 147

limits_test$12:	; Parameter 6 127 8
x37405:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x37410:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 53 146
x37415:	mov [bp + 8], bp	; 3: 137 110 8
x37418:	add bp, 6	; 3: 131 197 6
x37421:	mov di, bp	; 2: 137 239
x37423:	add di, 2	; 3: 131 199 2
x37426:	jmp printf	; 3: 233 144 122

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x37429:	mov word [bp + 12], string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 217 147

limits_test$17:	; Parameter 6 255 8
x37434:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x37439:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 82 146
x37444:	mov [bp + 8], bp	; 3: 137 110 8
x37447:	add bp, 6	; 3: 131 197 6
x37450:	mov di, bp	; 2: 137 239
x37452:	add di, 2	; 3: 131 199 2
x37455:	jmp printf	; 3: 233 115 122

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x37458:	mov word [bp + 12], string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 234 147

limits_test$22:	; Parameter 6 -128 8
x37463:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x37468:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 111 146
x37473:	mov [bp + 8], bp	; 3: 137 110 8
x37476:	add bp, 6	; 3: 131 197 6
x37479:	mov di, bp	; 2: 137 239
x37481:	add di, 2	; 3: 131 199 2
x37484:	jmp printf	; 3: 233 86 122

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x37487:	mov word [bp + 12], string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 249 147

limits_test$27:	; Parameter 6 127 8
x37492:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x37497:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 140 146
x37502:	mov [bp + 8], bp	; 3: 137 110 8
x37505:	add bp, 6	; 3: 131 197 6
x37508:	mov di, bp	; 2: 137 239
x37510:	add di, 2	; 3: 131 199 2
x37513:	jmp printf	; 3: 233 57 122

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x37516:	mov word [bp + 12], string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 8 148

limits_test$32:	; Parameter 6 255 8
x37521:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x37526:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 169 146
x37531:	mov [bp + 8], bp	; 3: 137 110 8
x37534:	add bp, 6	; 3: 131 197 6
x37537:	mov di, bp	; 2: 137 239
x37539:	add di, 2	; 3: 131 199 2
x37542:	jmp printf	; 3: 233 28 122

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x37545:	mov word [bp + 12], string_INT_MIN203D2025i0A#	; 5: 199 70 12 25 148

limits_test$37:	; Parameter 6 -32768 8
x37550:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x37555:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 198 146
x37560:	mov [bp + 8], bp	; 3: 137 110 8
x37563:	add bp, 6	; 3: 131 197 6
x37566:	mov di, bp	; 2: 137 239
x37568:	add di, 2	; 3: 131 199 2
x37571:	jmp printf	; 3: 233 255 121

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x37574:	mov word [bp + 12], string_INT_MAX203D2025i0A#	; 5: 199 70 12 39 148

limits_test$42:	; Parameter 6 32767 8
x37579:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x37584:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 227 146
x37589:	mov [bp + 8], bp	; 3: 137 110 8
x37592:	add bp, 6	; 3: 131 197 6
x37595:	mov di, bp	; 2: 137 239
x37597:	add di, 2	; 3: 131 199 2
x37600:	jmp printf	; 3: 233 226 121

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x37603:	mov word [bp + 12], string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 53 148

limits_test$47:	; Parameter 6 65535 8
x37608:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x37613:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 0 147
x37618:	mov [bp + 8], bp	; 3: 137 110 8
x37621:	add bp, 6	; 3: 131 197 6
x37624:	mov di, bp	; 2: 137 239
x37626:	add di, 2	; 3: 131 199 2
x37629:	jmp printf	; 3: 233 197 121

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x37632:	mov word [bp + 12], string_LONG_MIN203D2025li0A#	; 5: 199 70 12 69 148

limits_test$52:	; Parameter 6 -2147483648 8
x37637:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x37645:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 32 147
x37650:	mov [bp + 8], bp	; 3: 137 110 8
x37653:	add bp, 6	; 3: 131 197 6
x37656:	mov di, bp	; 2: 137 239
x37658:	add di, 4	; 3: 131 199 4
x37661:	jmp printf	; 3: 233 165 121

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x37664:	mov word [bp + 12], string_LONG_MAX203D2025li0A#	; 5: 199 70 12 85 148

limits_test$57:	; Parameter 6 2147483647 8
x37669:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x37677:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 64 147
x37682:	mov [bp + 8], bp	; 3: 137 110 8
x37685:	add bp, 6	; 3: 131 197 6
x37688:	mov di, bp	; 2: 137 239
x37690:	add di, 4	; 3: 131 199 4
x37693:	jmp printf	; 3: 233 133 121

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x37696:	mov word [bp + 12], string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 101 148

limits_test$62:	; Parameter 6 4294967295 8
x37701:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x37709:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 96 147
x37714:	mov [bp + 8], bp	; 3: 137 110 8
x37717:	add bp, 6	; 3: 131 197 6
x37720:	mov di, bp	; 2: 137 239
x37722:	add di, 4	; 3: 131 199 4
x37725:	jmp printf	; 3: 233 101 121

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x37728:	mov word [bp + 12], string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 118 148

limits_test$67:	; Parameter 6 4294967295 8
x37733:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x37741:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 128 147
x37746:	mov [bp + 8], bp	; 3: 137 110 8
x37749:	add bp, 6	; 3: 131 197 6
x37752:	mov di, bp	; 2: 137 239
x37754:	add di, 4	; 3: 131 199 4
x37757:	jmp printf	; 3: 233 69 121

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x37760:	mov word [bp + 12], string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 135 148

limits_test$72:	; Parameter 6 4294967295 8
x37765:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x37773:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 160 147
x37778:	mov [bp + 8], bp	; 3: 137 110 8
x37781:	add bp, 6	; 3: 131 197 6
x37784:	mov di, bp	; 2: 137 239
x37786:	add di, 4	; 3: 131 199 4
x37789:	jmp printf	; 3: 233 37 121

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x37792:	mov ax, [bp]	; 3: 139 70 0
x37795:	mov di, [bp + 4]	; 3: 139 126 4
x37798:	mov bp, [bp + 2]	; 3: 139 110 2
x37801:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

string_CHAR_BIT203D2025i0A#:
x37803:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

string_CHAR_MIN203D2025i0A0A#:
x37818:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

string_CHAR_MAX203D2025i0A#:
x37834:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

string_UCHAR_MAX203D2025u0A0A#:
x37849:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

string_SHRT_MIN203D2025i0A#:
x37866:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

string_SHRT_MAX203D2025i0A#:
x37881:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

string_USHRT_MAX203D2025u0A0A#:
x37896:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

string_INT_MIN203D2025i0A#:
x37913:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

string_INT_MAX203D2025i0A#:
x37927:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

string_UINT_MAX203D2025u0A0A#:
x37941:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

string_LONG_MIN203D2025li0A#:
x37957:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

string_LONG_MAX203D2025li0A#:
x37973:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

string_ULONG_MAX203D2025lu0A#:
x37989:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

string_ULONG_MAX203D2025lx0A#:
x38006:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

string_ULONG_MAX203D2025lX0A#:
x38023:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x38040:	mov ax, [bp]	; 3: 139 70 0
x38043:	mov di, [bp + 4]	; 3: 139 126 4
x38046:	mov bp, [bp + 2]	; 3: 139 110 2
x38049:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

string_test:	; Assign s string_Hello2C20World21#
x38051:	mov word [bp + 8], string_Hello2C20World21#	; 5: 199 70 8 137 116

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x38056:	mov word [bp + 218], string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 189 154

string_test$3:	; Parameter 212 s 8
x38062:	mov ax, [bp + 8]	; 3: 139 70 8
x38065:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x38069:	mov ax, [bp + 8]	; 3: 139 70 8
x38072:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x38076:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 205 148
x38082:	mov [bp + 224], bp	; 4: 137 174 224 0
x38086:	add bp, 222	; 4: 129 197 222 0
x38090:	jmp strlen	; 3: 233 112 245

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4494

string_test$9:	; Parameter 212 £temporary4494 10
x38093:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x38097:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 231 148
x38103:	mov [bp + 214], bp	; 4: 137 174 214 0
x38107:	add bp, 212	; 4: 129 197 212 0
x38111:	mov di, bp	; 2: 137 239
x38113:	add di, 4	; 3: 131 199 4
x38116:	jmp printf	; 3: 233 222 119

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x38119:	mov [bp + 218], bp	; 4: 137 174 218 0
x38123:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x38128:	mov ax, [bp + 8]	; 3: 139 70 8
x38131:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x38135:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 8 149
x38141:	mov [bp + 214], bp	; 4: 137 174 214 0
x38145:	add bp, 212	; 4: 129 197 212 0
x38149:	jmp strcpy	; 3: 233 103 190

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x38152:	mov [bp + 218], bp	; 4: 137 174 218 0
x38156:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x38161:	mov ax, [bp + 8]	; 3: 139 70 8
x38164:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x38168:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x38174:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 47 149
x38180:	mov [bp + 214], bp	; 4: 137 174 214 0
x38184:	add bp, 212	; 4: 129 197 212 0
x38188:	jmp strncpy	; 3: 233 70 7

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4498 -> u u 5
x38191:	mov si, bp	; 2: 137 238
x38193:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4498 -> u 0
x38196:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x38200:	mov word [bp + 218], string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 208 154

string_test$27:	; Parameter 212 t 8
x38206:	mov [bp + 220], bp	; 4: 137 174 220 0
x38210:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x38215:	mov [bp + 222], bp	; 4: 137 174 222 0
x38219:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x38224:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 102 149
x38230:	mov [bp + 214], bp	; 4: 137 174 214 0
x38234:	add bp, 212	; 4: 129 197 212 0
x38238:	mov di, bp	; 2: 137 239
x38240:	add di, 4	; 3: 131 199 4
x38243:	jmp printf	; 3: 233 95 119

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x38246:	mov [bp + 218], bp	; 4: 137 174 218 0
x38250:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x38255:	mov word [bp + 220], string_abc#	; 6: 199 134 220 0 228 154

string_test$34:	; Call 212 strcat 0
x38261:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 134 149
x38267:	mov [bp + 214], bp	; 4: 137 174 214 0
x38271:	add bp, 212	; 4: 129 197 212 0
x38275:	jmp strcat	; 3: 233 218 244

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x38278:	mov [bp + 218], bp	; 4: 137 174 218 0
x38282:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x38287:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 160 149
x38293:	mov [bp + 214], bp	; 4: 137 174 214 0
x38297:	add bp, 212	; 4: 129 197 212 0
x38301:	jmp strlen	; 3: 233 157 244

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4501

string_test$41:	; Assign i £temporary4501
x38304:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x38307:	mov [bp + 218], bp	; 4: 137 174 218 0
x38311:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x38316:	mov word [bp + 220], string_abc#	; 6: 199 134 220 0 228 154

string_test$45:	; Parameter 212 2 10
x38322:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x38328:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 201 149
x38334:	mov [bp + 214], bp	; 4: 137 174 214 0
x38338:	add bp, 212	; 4: 129 197 212 0
x38342:	jmp strncat	; 3: 233 253 6

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4503 i 2
x38345:	mov ax, [bp + 6]	; 3: 139 70 6
x38348:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4505 u £temporary4503
x38351:	mov si, bp	; 2: 137 238
x38353:	add si, 110	; 3: 131 198 110
x38356:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4504 -> £temporary4505 £temporary4505 0

string_test$51:	; Assign £temporary4504 -> £temporary4505 0
x38358:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x38361:	mov word [bp + 218], string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 208 154

string_test$54:	; Parameter 212 t 8
x38367:	mov [bp + 220], bp	; 4: 137 174 220 0
x38371:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x38376:	mov [bp + 222], bp	; 4: 137 174 222 0
x38380:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x38385:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 7 150
x38391:	mov [bp + 214], bp	; 4: 137 174 214 0
x38395:	add bp, 212	; 4: 129 197 212 0
x38399:	mov di, bp	; 2: 137 239
x38401:	add di, 4	; 3: 131 199 4
x38404:	jmp printf	; 3: 233 190 118

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x38407:	mov word [bp + 218], string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 232 154

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x38413:	mov ax, [bp + 8]	; 3: 139 70 8
x38416:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x38420:	mov [bp + 228], bp	; 4: 137 174 228 0
x38424:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x38429:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 46 150
x38435:	mov [bp + 222], bp	; 4: 137 174 222 0
x38439:	add bp, 220	; 4: 129 197 220 0
x38443:	jmp strcmp	; 3: 233 217 187

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4507

string_test$66:	; Parameter 212 £temporary4507 8
x38446:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x38450:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 72 150
x38456:	mov [bp + 214], bp	; 4: 137 174 214 0
x38460:	add bp, 212	; 4: 129 197 212 0
x38464:	mov di, bp	; 2: 137 239
x38466:	add di, 2	; 3: 131 199 2
x38469:	jmp printf	; 3: 233 125 118

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x38472:	mov word [bp + 218], string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 251 154

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x38478:	mov ax, [bp + 8]	; 3: 139 70 8
x38481:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x38485:	mov [bp + 228], bp	; 4: 137 174 228 0
x38489:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x38494:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x38500:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 117 150
x38506:	mov [bp + 222], bp	; 4: 137 174 222 0
x38510:	add bp, 220	; 4: 129 197 220 0
x38514:	jmp strncmp	; 3: 233 184 6

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4509

string_test$78:	; Parameter 212 £temporary4509 8
x38517:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x38521:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 143 150
x38527:	mov [bp + 214], bp	; 4: 137 174 214 0
x38531:	add bp, 212	; 4: 129 197 212 0
x38535:	mov di, bp	; 2: 137 239
x38537:	add di, 2	; 3: 131 199 2
x38540:	jmp printf	; 3: 233 54 118

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x38543:	mov ax, [bp + 8]	; 3: 139 70 8
x38546:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x38550:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x38556:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 173 150
x38562:	mov [bp + 214], bp	; 4: 137 174 214 0
x38566:	add bp, 212	; 4: 129 197 212 0
x38570:	jmp strchr	; 3: 233 201 138

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4511

string_test$87:	; Assign p £temporary4511
x38573:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x38577:	mov word [bp + 218], string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 18 155

string_test$90:	; Equal 93 p 0
x38583:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x38588:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4517 p s
x38590:	mov ax, [bp + 210]	; 4: 139 134 210 0
x38594:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x38597:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4517 -1
x38599:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4517 8
x38602:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x38606:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 228 150
x38612:	mov [bp + 214], bp	; 4: 137 174 214 0
x38616:	add bp, 212	; 4: 129 197 212 0
x38620:	mov di, bp	; 2: 137 239
x38622:	add di, 2	; 3: 131 199 2
x38625:	jmp printf	; 3: 233 225 117

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x38628:	mov ax, [bp + 8]	; 3: 139 70 8
x38631:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x38635:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x38641:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 2 151
x38647:	mov [bp + 214], bp	; 4: 137 174 214 0
x38651:	add bp, 212	; 4: 129 197 212 0
x38655:	jmp strrchr	; 3: 233 228 6

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4519

string_test$103:	; Assign p £temporary4519
x38658:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x38662:	mov word [bp + 218], string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 39 155

string_test$106:	; Equal 109 p 0
x38668:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x38673:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4525 p s
x38675:	mov ax, [bp + 210]	; 4: 139 134 210 0
x38679:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x38682:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4525 -1
x38684:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4525 8
x38687:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x38691:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 57 151
x38697:	mov [bp + 214], bp	; 4: 137 174 214 0
x38701:	add bp, 212	; 4: 129 197 212 0
x38705:	mov di, bp	; 2: 137 239
x38707:	add di, 2	; 3: 131 199 2
x38710:	jmp printf	; 3: 233 140 117

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x38713:	mov ax, [bp + 8]	; 3: 139 70 8
x38716:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x38720:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x38726:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 87 151
x38732:	mov [bp + 214], bp	; 4: 137 174 214 0
x38736:	add bp, 212	; 4: 129 197 212 0
x38740:	jmp strchr	; 3: 233 31 138

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4527

string_test$119:	; Assign p £temporary4527
x38743:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x38747:	mov word [bp + 218], string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 61 155

string_test$122:	; Equal 125 p 0
x38753:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x38758:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4533 p s
x38760:	mov ax, [bp + 210]	; 4: 139 134 210 0
x38764:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x38767:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4533 -1
x38769:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4533 8
x38772:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x38776:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 142 151
x38782:	mov [bp + 214], bp	; 4: 137 174 214 0
x38786:	add bp, 212	; 4: 129 197 212 0
x38790:	mov di, bp	; 2: 137 239
x38792:	add di, 2	; 3: 131 199 2
x38795:	jmp printf	; 3: 233 55 117

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x38798:	mov ax, [bp + 8]	; 3: 139 70 8
x38801:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x38805:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x38811:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 172 151
x38817:	mov [bp + 214], bp	; 4: 137 174 214 0
x38821:	add bp, 212	; 4: 129 197 212 0
x38825:	jmp strrchr	; 3: 233 58 6

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4535

string_test$135:	; Assign p £temporary4535
x38828:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x38832:	mov word [bp + 218], string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 82 155

string_test$138:	; Equal 141 p 0
x38838:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x38843:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4541 p s
x38845:	mov ax, [bp + 210]	; 4: 139 134 210 0
x38849:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x38852:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4541 -1
x38854:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4541 8
x38857:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x38861:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 227 151
x38867:	mov [bp + 214], bp	; 4: 137 174 214 0
x38871:	add bp, 212	; 4: 129 197 212 0
x38875:	mov di, bp	; 2: 137 239
x38877:	add di, 2	; 3: 131 199 2
x38880:	jmp printf	; 3: 233 226 116

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x38883:	mov ax, [bp + 8]	; 3: 139 70 8
x38886:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x38890:	mov word [bp + 220], string_Hello2C20World21#	; 6: 199 134 220 0 137 116

string_test$148:	; Parameter 212 20 10
x38896:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x38902:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 7 152
x38908:	mov [bp + 214], bp	; 4: 137 174 214 0
x38912:	add bp, 212	; 4: 129 197 212 0
x38916:	jmp memcpy	; 3: 233 212 246

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x38919:	mov [bp + 218], bp	; 4: 137 174 218 0
x38923:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x38928:	mov word [bp + 220], string_Hello2C20World21#	; 6: 199 134 220 0 137 116

string_test$154:	; Parameter 212 20 10
x38934:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x38940:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 45 152
x38946:	mov [bp + 214], bp	; 4: 137 174 214 0
x38950:	add bp, 212	; 4: 129 197 212 0
x38954:	jmp memmove	; 3: 233 6 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x38957:	mov [bp + 218], bp	; 4: 137 174 218 0
x38961:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x38966:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x38972:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x38978:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 83 152
x38984:	mov [bp + 214], bp	; 4: 137 174 214 0
x38988:	add bp, 212	; 4: 129 197 212 0
x38992:	jmp memset	; 3: 233 70 6

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4546 -> u u 19
x38995:	mov si, bp	; 2: 137 238
x38997:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4546 -> u 0
x39000:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x39004:	mov word [bp + 218], string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 104 155

string_test$167:	; Parameter 212 s 8
x39010:	mov ax, [bp + 8]	; 3: 139 70 8
x39013:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x39017:	mov [bp + 222], bp	; 4: 137 174 222 0
x39021:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x39026:	mov [bp + 224], bp	; 4: 137 174 224 0
x39030:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x39035:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 145 152
x39041:	mov [bp + 214], bp	; 4: 137 174 214 0
x39045:	add bp, 212	; 4: 129 197 212 0
x39049:	mov di, bp	; 2: 137 239
x39051:	add di, 6	; 3: 131 199 6
x39054:	jmp printf	; 3: 233 52 116

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x39057:	mov ax, [bp + 8]	; 3: 139 70 8
x39060:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x39064:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x39070:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x39076:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 181 152
x39082:	mov [bp + 214], bp	; 4: 137 174 214 0
x39086:	add bp, 212	; 4: 129 197 212 0
x39090:	jmp memchr	; 3: 233 36 6

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4548

string_test$179:	; Assign p £temporary4548
x39093:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x39097:	mov word [bp + 218], string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 134 155

string_test$182:	; Equal 185 p 0
x39103:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x39108:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4554 p s
x39110:	mov ax, [bp + 210]	; 4: 139 134 210 0
x39114:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x39117:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4554 -1
x39119:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4554 8
x39122:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x39126:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 236 152
x39132:	mov [bp + 214], bp	; 4: 137 174 214 0
x39136:	add bp, 212	; 4: 129 197 212 0
x39140:	mov di, bp	; 2: 137 239
x39142:	add di, 2	; 3: 131 199 2
x39145:	jmp printf	; 3: 233 217 115

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x39148:	mov ax, [bp + 8]	; 3: 139 70 8
x39151:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x39155:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x39161:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x39167:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 16 153
x39173:	mov [bp + 214], bp	; 4: 137 174 214 0
x39177:	add bp, 212	; 4: 129 197 212 0
x39181:	jmp memchr	; 3: 233 201 5

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4556

string_test$196:	; Assign p £temporary4556
x39184:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x39188:	mov word [bp + 218], string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 176 155

string_test$199:	; Equal 202 p 0
x39194:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x39199:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4562 p s
x39201:	mov ax, [bp + 210]	; 4: 139 134 210 0
x39205:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x39208:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4562 -1
x39210:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4562 8
x39213:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x39217:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 71 153
x39223:	mov [bp + 214], bp	; 4: 137 174 214 0
x39227:	add bp, 212	; 4: 129 197 212 0
x39231:	mov di, bp	; 2: 137 239
x39233:	add di, 2	; 3: 131 199 2
x39236:	jmp printf	; 3: 233 126 115

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x39239:	mov word [bp + 218], string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 218 155

string_test$208:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$209:	; Parameter 212 s 14
x39245:	mov ax, [bp + 8]	; 3: 139 70 8
x39248:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$210:	; Parameter 212 t 16
x39252:	mov [bp + 228], bp	; 4: 137 174 228 0
x39256:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$211:	; Parameter 212 20 18
x39261:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$212:	; Call 212 memcmp 8
x39267:	mov word [bp + 220], string_test$213	; 6: 199 134 220 0 116 153
x39273:	mov [bp + 222], bp	; 4: 137 174 222 0
x39277:	add bp, 220	; 4: 129 197 220 0
x39281:	jmp memcmp	; 3: 233 184 5

string_test$213:	; PostCall 212

string_test$214:	; GetReturnValue £temporary4564

string_test$215:	; Parameter 212 £temporary4564 8
x39284:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$216:	; Call 212 printf 0
x39288:	mov word [bp + 212], string_test$217	; 6: 199 134 212 0 142 153
x39294:	mov [bp + 214], bp	; 4: 137 174 214 0
x39298:	add bp, 212	; 4: 129 197 212 0
x39302:	mov di, bp	; 2: 137 239
x39304:	add di, 2	; 3: 131 199 2
x39307:	jmp printf	; 3: 233 55 115

string_test$217:	; PostCall 212

string_test$218:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$219:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x39310:	mov word [bp + 218], string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 2 156

string_test$220:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$221:	; Parameter 212 s 14
x39316:	mov ax, [bp + 8]	; 3: 139 70 8
x39319:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$222:	; Parameter 212 string_Hello2C20C# 16
x39323:	mov word [bp + 228], string_Hello2C20C#	; 6: 199 134 228 0 30 156

string_test$223:	; Call 212 strspn 8
x39329:	mov word [bp + 220], string_test$224	; 6: 199 134 220 0 178 153
x39335:	mov [bp + 222], bp	; 4: 137 174 222 0
x39339:	add bp, 220	; 4: 129 197 220 0
x39343:	jmp strspn	; 3: 233 230 5

string_test$224:	; PostCall 212

string_test$225:	; GetReturnValue £temporary4566

string_test$226:	; Parameter 212 £temporary4566 8
x39346:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$227:	; Call 212 printf 0
x39350:	mov word [bp + 212], string_test$228	; 6: 199 134 212 0 204 153
x39356:	mov [bp + 214], bp	; 4: 137 174 214 0
x39360:	add bp, 212	; 4: 129 197 212 0
x39364:	mov di, bp	; 2: 137 239
x39366:	add di, 2	; 3: 131 199 2
x39369:	jmp printf	; 3: 233 249 114

string_test$228:	; PostCall 212

string_test$229:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$230:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x39372:	mov word [bp + 218], string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 39 156

string_test$231:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$232:	; Parameter 212 s 14
x39378:	mov ax, [bp + 8]	; 3: 139 70 8
x39381:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$233:	; Parameter 212 string_Hello2C20C# 16
x39385:	mov word [bp + 228], string_Hello2C20C#	; 6: 199 134 228 0 30 156

string_test$234:	; Call 212 strcspn 8
x39391:	mov word [bp + 220], string_test$235	; 6: 199 134 220 0 240 153
x39397:	mov [bp + 222], bp	; 4: 137 174 222 0
x39401:	add bp, 220	; 4: 129 197 220 0
x39405:	jmp strcspn	; 3: 233 8 6

string_test$235:	; PostCall 212

string_test$236:	; GetReturnValue £temporary4568

string_test$237:	; Parameter 212 £temporary4568 8
x39408:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$238:	; Call 212 printf 0
x39412:	mov word [bp + 212], string_test$239	; 6: 199 134 212 0 10 154
x39418:	mov [bp + 214], bp	; 4: 137 174 214 0
x39422:	add bp, 212	; 4: 129 197 212 0
x39426:	mov di, bp	; 2: 137 239
x39428:	add di, 2	; 3: 131 199 2
x39431:	jmp printf	; 3: 233 187 114

string_test$239:	; PostCall 212

string_test$240:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$241:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x39434:	mov word [bp + 218], string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 68 156

string_test$242:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$243:	; Parameter 212 errno 14
x39440:	mov ax, [errno]	; 3: 161 182 10
x39443:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$244:	; Call 212 strerror 8
x39447:	mov word [bp + 220], string_test$245	; 6: 199 134 220 0 40 154
x39453:	mov [bp + 222], bp	; 4: 137 174 222 0
x39457:	add bp, 220	; 4: 129 197 220 0
x39461:	jmp strerror	; 3: 233 231 152

string_test$245:	; PostCall 212

string_test$246:	; GetReturnValue £temporary4570

string_test$247:	; Parameter 212 £temporary4570 8
x39464:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$248:	; Call 212 printf 0
x39468:	mov word [bp + 212], string_test$249	; 6: 199 134 212 0 66 154
x39474:	mov [bp + 214], bp	; 4: 137 174 214 0
x39478:	add bp, 212	; 4: 129 197 212 0
x39482:	mov di, bp	; 2: 137 239
x39484:	add di, 2	; 3: 131 199 2
x39487:	jmp printf	; 3: 233 131 114

string_test$249:	; PostCall 212

string_test$250:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$251:	; Parameter 212 s 6
x39490:	mov ax, [bp + 8]	; 3: 139 70 8
x39493:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$252:	; Parameter 212 string_2C# 8
x39497:	mov word [bp + 220], string_2C#	; 6: 199 134 220 0 92 156

string_test$253:	; Call 212 strtok 0
x39503:	mov word [bp + 212], string_test$254	; 6: 199 134 212 0 96 154
x39509:	mov [bp + 214], bp	; 4: 137 174 214 0
x39513:	add bp, 212	; 4: 129 197 212 0
x39517:	jmp strtok	; 3: 233 248 5

string_test$254:	; PostCall 212

string_test$255:	; GetReturnValue £temporary4572

string_test$256:	; Assign p £temporary4572
x39520:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$257:	; Equal 271 p 0
x39524:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x39529:	je string_test$271	; 2: 116 71

string_test$258:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$259:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x39531:	mov word [bp + 218], string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 94 156

string_test$260:	; Parameter 212 p 8
x39537:	mov ax, [bp + 210]	; 4: 139 134 210 0
x39541:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$261:	; Call 212 printf 0
x39545:	mov word [bp + 212], string_test$262	; 6: 199 134 212 0 143 154
x39551:	mov [bp + 214], bp	; 4: 137 174 214 0
x39555:	add bp, 212	; 4: 129 197 212 0
x39559:	mov di, bp	; 2: 137 239
x39561:	add di, 2	; 3: 131 199 2
x39564:	jmp printf	; 3: 233 54 114

string_test$262:	; PostCall 212

string_test$263:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$264:	; Parameter 212 0 6
x39567:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$265:	; Parameter 212 string_2C# 8
x39573:	mov word [bp + 220], string_2C#	; 6: 199 134 220 0 92 156

string_test$266:	; Call 212 strtok 0
x39579:	mov word [bp + 212], string_test$267	; 6: 199 134 212 0 172 154
x39585:	mov [bp + 214], bp	; 4: 137 174 214 0
x39589:	add bp, 212	; 4: 129 197 212 0
x39593:	jmp strtok	; 3: 233 172 5

string_test$267:	; PostCall 212

string_test$268:	; GetReturnValue £temporary4575

string_test$269:	; Assign p £temporary4575
x39596:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$270:	; Goto 257
x39600:	jmp string_test$257	; 2: 235 178

string_test$271:	; Return 0
x39602:	mov ax, [bp]	; 3: 139 70 0
x39605:	mov di, [bp + 4]	; 3: 139 126 4
x39608:	mov bp, [bp + 2]	; 3: 139 110 2
x39611:	jmp ax	; 2: 255 224

string_test$272:	; FunctionEnd string_test

string_strlen282225s2229203D2025i0A#:
x39613:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

string_t203D202225s222C20u203D202225s220A#:
x39632:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

string_abc#:
x39652:	db "abc", 0	; 4: 97 98 99 0

string_strcmp28s2C20u29203D2025i0A#:
x39656:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

string_strncmp28s2C20u2C20229203D2025i0A#:
x39675:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

string_strchr28s2C2027l2729203D2025i0A#:
x39698:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

string_strrchr28s2C2027l2729203D2025i0A#:
x39719:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

string_strchr28s2C2027x2729203D2025i0A#:
x39741:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

string_strrchr28s2C2027x2729203D2025i0A#:
x39762:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x39784:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x39814:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x39856:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x39898:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x39938:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

string_Hello2C20C#:
x39966:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x39975:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

string_strerror28errno29203D202225s220A#:
x40004:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

string_2C#:
x40028:	db ",", 0	; 2: 44 0

string_strtok28s2C20222C2229203D202225s220A#:
x40030:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

strncpy:	; Assign index 0
x40053:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x40058:	mov ax, [bp + 10]	; 3: 139 70 10
x40061:	cmp [bp + 12], ax	; 3: 57 70 12
x40064:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3882 source index
x40066:	mov si, [bp + 8]	; 3: 139 118 8
x40069:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3881 -> £temporary3882 £temporary3882 0

strncpy$4:	; Equal 12 £temporary3881 -> £temporary3882 0
x40072:	cmp byte [si], 0	; 3: 128 60 0
x40075:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3887 target index
x40077:	mov si, [bp + 6]	; 3: 139 118 6
x40080:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3886 -> £temporary3887 £temporary3887 0

strncpy$7:	; BinaryAdd £temporary3889 source index
x40083:	mov di, [bp + 8]	; 3: 139 126 8
x40086:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3888 -> £temporary3889 £temporary3889 0

strncpy$9:	; Assign £temporary3886 -> £temporary3887 £temporary3888 -> £temporary3889
x40089:	mov al, [di]	; 2: 138 5
x40091:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x40093:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x40096:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x40098:	mov ax, [bp + 10]	; 3: 139 70 10
x40101:	cmp [bp + 12], ax	; 3: 57 70 12
x40104:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3893 target index
x40106:	mov si, [bp + 6]	; 3: 139 118 6
x40109:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3892 -> £temporary3893 £temporary3893 0

strncpy$15:	; Assign £temporary3892 -> £temporary3893 0
x40112:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x40115:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x40118:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x40120:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x40123:	mov ax, [bp]	; 3: 139 70 0
x40126:	mov di, [bp + 4]	; 3: 139 126 4
x40129:	mov bp, [bp + 2]	; 3: 139 110 2
x40132:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x40134:	mov ax, [bp + 6]	; 3: 139 70 6
x40137:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x40140:	mov word [bp + 14], strncat$3	; 5: 199 70 14 218 156
x40145:	mov [bp + 16], bp	; 3: 137 110 16
x40148:	add bp, 14	; 3: 131 197 14
x40151:	jmp strlen	; 3: 233 99 237

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3908

strncat$5:	; Assign targetLength £temporary3908
x40154:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x40157:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3909 size 1
x40162:	mov ax, [bp + 10]	; 3: 139 70 10
x40165:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3909
x40166:	cmp [bp + 12], ax	; 3: 57 70 12
x40169:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3912 source index
x40171:	mov si, [bp + 8]	; 3: 139 118 8
x40174:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3911 -> £temporary3912 £temporary3912 0

strncat$11:	; Equal 20 £temporary3911 -> £temporary3912 0
x40177:	cmp byte [si], 0	; 3: 128 60 0
x40180:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3916 targetLength index
x40182:	mov ax, [bp + 14]	; 3: 139 70 14
x40185:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3918 target £temporary3916
x40188:	mov si, [bp + 6]	; 3: 139 118 6
x40191:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3917 -> £temporary3918 £temporary3918 0

strncat$15:	; BinaryAdd £temporary3920 source index
x40193:	mov di, [bp + 8]	; 3: 139 126 8
x40196:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3919 -> £temporary3920 £temporary3920 0

strncat$17:	; Assign £temporary3917 -> £temporary3918 £temporary3919 -> £temporary3920
x40199:	mov al, [di]	; 2: 138 5
x40201:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x40203:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x40206:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3921 targetLength size
x40208:	mov ax, [bp + 14]	; 3: 139 70 14
x40211:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3922 £temporary3921 1
x40214:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3924 target £temporary3922
x40215:	mov si, [bp + 6]	; 3: 139 118 6
x40218:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3923 -> £temporary3924 £temporary3924 0

strncat$24:	; Assign £temporary3923 -> £temporary3924 0
x40220:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x40223:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x40226:	mov ax, [bp]	; 3: 139 70 0
x40229:	mov di, [bp + 4]	; 3: 139 126 4
x40232:	mov bp, [bp + 2]	; 3: 139 110 2
x40235:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x40237:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 36 index size
x40242:	mov ax, [bp + 10]	; 3: 139 70 10
x40245:	cmp [bp + 12], ax	; 3: 57 70 12
x40248:	jge strncmp$36	; 4: 15 141 156 0

strncmp$2:	; BinaryAdd £temporary3954 left index
x40252:	mov si, [bp + 6]	; 3: 139 118 6
x40255:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3953 -> £temporary3954 £temporary3954 0

strncmp$4:	; NotEqual 10 £temporary3953 -> £temporary3954 0
x40258:	cmp byte [si], 0	; 3: 128 60 0
x40261:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3957 right index
x40263:	mov si, [bp + 8]	; 3: 139 118 8
x40266:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3956 -> £temporary3957 £temporary3957 0

strncmp$7:	; NotEqual 10 £temporary3956 -> £temporary3957 0
x40269:	cmp byte [si], 0	; 3: 128 60 0
x40272:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x40274:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x40277:	mov ax, [bp]	; 3: 139 70 0
x40280:	mov di, [bp + 4]	; 3: 139 126 4
x40283:	mov bp, [bp + 2]	; 3: 139 110 2
x40286:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3961 left index
x40288:	mov si, [bp + 6]	; 3: 139 118 6
x40291:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3960 -> £temporary3961 £temporary3961 0

strncmp$12:	; NotEqual 15 £temporary3960 -> £temporary3961 0
x40294:	cmp byte [si], 0	; 3: 128 60 0
x40297:	jne strncmp$15	; 2: 117 14

strncmp$13:	; SetReturnValue -1
x40299:	mov bx, -1	; 3: 187 255 255

strncmp$14:	; Return -1
x40302:	mov ax, [bp]	; 3: 139 70 0
x40305:	mov di, [bp + 4]	; 3: 139 126 4
x40308:	mov bp, [bp + 2]	; 3: 139 110 2
x40311:	jmp ax	; 2: 255 224

strncmp$15:	; BinaryAdd £temporary3964 right index
x40313:	mov si, [bp + 8]	; 3: 139 118 8
x40316:	add si, [bp + 12]	; 3: 3 118 12

strncmp$16:	; Deref £temporary3963 -> £temporary3964 £temporary3964 0

strncmp$17:	; NotEqual 20 £temporary3963 -> £temporary3964 0
x40319:	cmp byte [si], 0	; 3: 128 60 0
x40322:	jne strncmp$20	; 2: 117 14

strncmp$18:	; SetReturnValue 1
x40324:	mov bx, 1	; 3: 187 1 0

strncmp$19:	; Return 1
x40327:	mov ax, [bp]	; 3: 139 70 0
x40330:	mov di, [bp + 4]	; 3: 139 126 4
x40333:	mov bp, [bp + 2]	; 3: 139 110 2
x40336:	jmp ax	; 2: 255 224

strncmp$20:	; BinaryAdd £temporary3967 left index
x40338:	mov si, [bp + 6]	; 3: 139 118 6
x40341:	add si, [bp + 12]	; 3: 3 118 12

strncmp$21:	; Deref £temporary3966 -> £temporary3967 £temporary3967 0

strncmp$22:	; BinaryAdd £temporary3969 right index
x40344:	mov di, [bp + 8]	; 3: 139 126 8
x40347:	add di, [bp + 12]	; 3: 3 126 12

strncmp$23:	; Deref £temporary3968 -> £temporary3969 £temporary3969 0

strncmp$24:	; SignedGreaterThanEqual 27 £temporary3966 -> £temporary3967 £temporary3968 -> £temporary3969
x40350:	mov al, [di]	; 2: 138 5
x40352:	cmp [si], al	; 2: 56 4
x40354:	jge strncmp$27	; 2: 125 14

strncmp$25:	; SetReturnValue -1
x40356:	mov bx, -1	; 3: 187 255 255

strncmp$26:	; Return -1
x40359:	mov ax, [bp]	; 3: 139 70 0
x40362:	mov di, [bp + 4]	; 3: 139 126 4
x40365:	mov bp, [bp + 2]	; 3: 139 110 2
x40368:	jmp ax	; 2: 255 224

strncmp$27:	; BinaryAdd £temporary3972 left index
x40370:	mov si, [bp + 6]	; 3: 139 118 6
x40373:	add si, [bp + 12]	; 3: 3 118 12

strncmp$28:	; Deref £temporary3971 -> £temporary3972 £temporary3972 0

strncmp$29:	; BinaryAdd £temporary3974 right index
x40376:	mov di, [bp + 8]	; 3: 139 126 8
x40379:	add di, [bp + 12]	; 3: 3 126 12

strncmp$30:	; Deref £temporary3973 -> £temporary3974 £temporary3974 0

strncmp$31:	; SignedLessThanEqual 34 £temporary3971 -> £temporary3972 £temporary3973 -> £temporary3974
x40382:	mov al, [di]	; 2: 138 5
x40384:	cmp [si], al	; 2: 56 4
x40386:	jle strncmp$34	; 2: 126 14

strncmp$32:	; SetReturnValue 1
x40388:	mov bx, 1	; 3: 187 1 0

strncmp$33:	; Return 1
x40391:	mov ax, [bp]	; 3: 139 70 0
x40394:	mov di, [bp + 4]	; 3: 139 126 4
x40397:	mov bp, [bp + 2]	; 3: 139 110 2
x40400:	jmp ax	; 2: 255 224

strncmp$34:	; Increment index
x40402:	inc word [bp + 12]	; 3: 255 70 12

strncmp$35:	; Goto 1
x40405:	jmp strncmp$1	; 3: 233 90 255

strncmp$36:	; SetReturnValue 0
x40408:	mov bx, 0	; 3: 187 0 0

strncmp$37:	; Return 0
x40411:	mov ax, [bp]	; 3: 139 70 0
x40414:	mov di, [bp + 4]	; 3: 139 126 4
x40417:	mov bp, [bp + 2]	; 3: 139 110 2
x40420:	jmp ax	; 2: 255 224

strncmp$38:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x40422:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary3987 i
x40427:	mov ax, [bp + 8]	; 3: 139 70 8
x40430:	cmp ax, 0	; 3: 131 248 0
x40433:	jge strrchr$2	; 2: 125 4
x40435:	neg ax	; 2: 247 216
x40437:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary3987
x40439:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x40442:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary3989 text index
x40447:	mov si, [bp + 6]	; 3: 139 118 6
x40450:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary3988 -> £temporary3989 £temporary3989 0

strrchr$6:	; Equal 16 £temporary3988 -> £temporary3989 0
x40453:	cmp byte [si], 0	; 3: 128 60 0
x40456:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary3993 text index
x40458:	mov si, [bp + 6]	; 3: 139 118 6
x40461:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary3992 -> £temporary3993 £temporary3993 0

strrchr$9:	; NotEqual 14 £temporary3992 -> £temporary3993 c
x40464:	mov al, [bp + 14]	; 3: 138 70 14
x40467:	cmp [si], al	; 2: 56 4
x40469:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary3996 text index
x40471:	mov si, [bp + 6]	; 3: 139 118 6
x40474:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary3995 -> £temporary3996 £temporary3996 0

strrchr$12:	; address £temporary3997 £temporary3995 -> £temporary3996

strrchr$13:	; Assign result £temporary3997
x40477:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x40480:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x40483:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x40485:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x40488:	mov ax, [bp]	; 3: 139 70 0
x40491:	mov di, [bp + 4]	; 3: 139 126 4
x40494:	mov bp, [bp + 2]	; 3: 139 110 2
x40497:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary4120 target
x40499:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary4120
x40502:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary4121 source
x40505:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary4121
x40508:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x40511:	mov ax, [bp + 6]	; 3: 139 70 6
x40514:	cmp [bp + 8], ax	; 3: 57 70 8
x40517:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x40519:	mov ax, [bp + 10]	; 3: 139 70 10
x40522:	dec ax	; 1: 72
x40523:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x40526:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x40530:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary4127 charTarget index
x40532:	mov si, [bp + 12]	; 3: 139 118 12
x40535:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary4126 -> £temporary4127 £temporary4127 0

memmove$9:	; BinaryAdd £temporary4129 charSource index
x40538:	mov di, [bp + 14]	; 3: 139 126 14
x40541:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary4128 -> £temporary4129 £temporary4129 0

memmove$11:	; Assign £temporary4126 -> £temporary4127 £temporary4128 -> £temporary4129
x40544:	mov al, [di]	; 2: 138 5
x40546:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x40548:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x40551:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x40553:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x40558:	mov ax, [bp + 10]	; 3: 139 70 10
x40561:	cmp [bp + 16], ax	; 3: 57 70 16
x40564:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary4133 charTarget index
x40566:	mov si, [bp + 12]	; 3: 139 118 12
x40569:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary4132 -> £temporary4133 £temporary4133 0

memmove$18:	; BinaryAdd £temporary4135 charSource index
x40572:	mov di, [bp + 14]	; 3: 139 126 14
x40575:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary4134 -> £temporary4135 £temporary4135 0

memmove$20:	; Assign £temporary4132 -> £temporary4133 £temporary4134 -> £temporary4135
x40578:	mov al, [di]	; 2: 138 5
x40580:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x40582:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x40585:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary4136 target
x40587:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary4136

memmove$25:	; Return £temporary4136
x40590:	mov ax, [bp]	; 3: 139 70 0
x40593:	mov di, [bp + 4]	; 3: 139 126 4
x40596:	mov bp, [bp + 2]	; 3: 139 110 2
x40599:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary4162 block
x40601:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary4162
x40604:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary4163 i
x40607:	mov ax, [bp + 8]	; 3: 139 70 8
x40610:	cmp ax, 0	; 3: 131 248 0
x40613:	jge memset$3	; 2: 125 4
x40615:	neg ax	; 2: 247 216
x40617:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary4163
x40619:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x40622:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x40627:	mov ax, [bp + 10]	; 3: 139 70 10
x40630:	cmp [bp + 15], ax	; 3: 57 70 15
x40633:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary4167 charBlock index
x40635:	mov si, [bp + 12]	; 3: 139 118 12
x40638:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary4166 -> £temporary4167 £temporary4167 0

memset$8:	; Assign £temporary4166 -> £temporary4167 c
x40641:	mov al, [bp + 14]	; 3: 138 70 14
x40644:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x40646:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x40649:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x40651:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x40654:	mov ax, [bp]	; 3: 139 70 0
x40657:	mov di, [bp + 4]	; 3: 139 126 4
x40660:	mov bp, [bp + 2]	; 3: 139 110 2
x40663:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary4151 block
x40665:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary4151
x40668:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary4152 i
x40671:	mov ax, [bp + 8]	; 3: 139 70 8
x40674:	cmp ax, 0	; 3: 131 248 0
x40677:	jge memchr$3	; 2: 125 4
x40679:	neg ax	; 2: 247 216
x40681:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary4152
x40683:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x40686:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x40691:	mov ax, [bp + 10]	; 3: 139 70 10
x40694:	cmp [bp + 12], ax	; 3: 57 70 12
x40697:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary4156 charBlock index
x40699:	mov si, [bp + 14]	; 3: 139 118 14
x40702:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary4155 -> £temporary4156 £temporary4156 0

memchr$8:	; NotEqual 15 £temporary4155 -> £temporary4156 c
x40705:	mov al, [bp + 16]	; 3: 138 70 16
x40708:	cmp [si], al	; 2: 56 4
x40710:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary4159 charBlock index
x40712:	mov bx, [bp + 14]	; 3: 139 94 14
x40715:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary4158 -> £temporary4159 £temporary4159 0

memchr$11:	; address £temporary4160 £temporary4158 -> £temporary4159

memchr$12:	; IntegralToIntegral £temporary4161 £temporary4160

memchr$13:	; SetReturnValue £temporary4161

memchr$14:	; Return £temporary4161
x40718:	mov ax, [bp]	; 3: 139 70 0
x40721:	mov di, [bp + 4]	; 3: 139 126 4
x40724:	mov bp, [bp + 2]	; 3: 139 110 2
x40727:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x40729:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x40732:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x40734:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x40737:	mov ax, [bp]	; 3: 139 70 0
x40740:	mov di, [bp + 4]	; 3: 139 126 4
x40743:	mov bp, [bp + 2]	; 3: 139 110 2
x40746:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary4137 left
x40748:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary4137
x40751:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary4138 right
x40754:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary4138
x40757:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x40760:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x40765:	mov ax, [bp + 10]	; 3: 139 70 10
x40768:	cmp [bp + 16], ax	; 3: 57 70 16
x40771:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary4142 charLeft index
x40773:	mov si, [bp + 12]	; 3: 139 118 12
x40776:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary4141 -> £temporary4142 £temporary4142 0

memcmp$8:	; BinaryAdd £temporary4144 charRight index
x40779:	mov di, [bp + 14]	; 3: 139 126 14
x40782:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary4143 -> £temporary4144 £temporary4144 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary4141 -> £temporary4142 £temporary4143 -> £temporary4144
x40785:	mov al, [di]	; 2: 138 5
x40787:	cmp [si], al	; 2: 56 4
x40789:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x40791:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x40794:	mov ax, [bp]	; 3: 139 70 0
x40797:	mov di, [bp + 4]	; 3: 139 126 4
x40800:	mov bp, [bp + 2]	; 3: 139 110 2
x40803:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary4147 charLeft index
x40805:	mov si, [bp + 12]	; 3: 139 118 12
x40808:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary4146 -> £temporary4147 £temporary4147 0

memcmp$15:	; BinaryAdd £temporary4149 charRight index
x40811:	mov di, [bp + 14]	; 3: 139 126 14
x40814:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary4148 -> £temporary4149 £temporary4149 0

memcmp$17:	; SignedLessThanEqual 20 £temporary4146 -> £temporary4147 £temporary4148 -> £temporary4149
x40817:	mov al, [di]	; 2: 138 5
x40819:	cmp [si], al	; 2: 56 4
x40821:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x40823:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x40826:	mov ax, [bp]	; 3: 139 70 0
x40829:	mov di, [bp + 4]	; 3: 139 126 4
x40832:	mov bp, [bp + 2]	; 3: 139 110 2
x40835:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x40837:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x40840:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x40842:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x40845:	mov ax, [bp]	; 3: 139 70 0
x40848:	mov di, [bp + 4]	; 3: 139 126 4
x40851:	mov bp, [bp + 2]	; 3: 139 110 2
x40854:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x40856:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary3999 mainString index
x40861:	mov si, [bp + 6]	; 3: 139 118 6
x40864:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary3998 -> £temporary3999 £temporary3999 0

strspn$3:	; Equal 18 £temporary3998 -> £temporary3999 0
x40867:	cmp byte [si], 0	; 3: 128 60 0
x40870:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x40872:	mov ax, [bp + 8]	; 3: 139 70 8
x40875:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary4003 mainString index
x40878:	mov si, [bp + 6]	; 3: 139 118 6
x40881:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary4002 -> £temporary4003 £temporary4003 0

strspn$8:	; IntegralToIntegral £temporary4004 £temporary4002 -> £temporary4003
x40884:	mov al, [si]	; 2: 138 4
x40886:	and ax, 255	; 3: 37 255 0
x40889:	cmp al, 0	; 2: 60 0
x40891:	jge strspn$9	; 2: 125 4
x40893:	neg al	; 2: 246 216
x40895:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary4004 8
x40897:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x40900:	mov word [bp + 12], strspn$11	; 5: 199 70 12 210 159
x40905:	mov [bp + 14], bp	; 3: 137 110 14
x40908:	add bp, 12	; 3: 131 197 12
x40911:	jmp strchr	; 3: 233 164 129

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary4005

strspn$13:	; NotEqual 16 £temporary4005 0
x40914:	cmp bx, 0	; 3: 131 251 0
x40917:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x40919:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x40922:	mov ax, [bp]	; 3: 139 70 0
x40925:	mov di, [bp + 4]	; 3: 139 126 4
x40928:	mov bp, [bp + 2]	; 3: 139 110 2
x40931:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x40933:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x40936:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x40938:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x40941:	mov ax, [bp]	; 3: 139 70 0
x40944:	mov di, [bp + 4]	; 3: 139 126 4
x40947:	mov bp, [bp + 2]	; 3: 139 110 2
x40950:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x40952:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary4010 mainString index
x40957:	mov si, [bp + 6]	; 3: 139 118 6
x40960:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary4009 -> £temporary4010 £temporary4010 0

strcspn$3:	; Equal 18 £temporary4009 -> £temporary4010 0
x40963:	cmp byte [si], 0	; 3: 128 60 0
x40966:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x40968:	mov ax, [bp + 8]	; 3: 139 70 8
x40971:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary4014 mainString index
x40974:	mov si, [bp + 6]	; 3: 139 118 6
x40977:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary4013 -> £temporary4014 £temporary4014 0

strcspn$8:	; IntegralToIntegral £temporary4015 £temporary4013 -> £temporary4014
x40980:	mov al, [si]	; 2: 138 4
x40982:	and ax, 255	; 3: 37 255 0
x40985:	cmp al, 0	; 2: 60 0
x40987:	jge strcspn$9	; 2: 125 4
x40989:	neg al	; 2: 246 216
x40991:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary4015 8
x40993:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x40996:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 50 160
x41001:	mov [bp + 14], bp	; 3: 137 110 14
x41004:	add bp, 12	; 3: 131 197 12
x41007:	jmp strchr	; 3: 233 68 129

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary4016

strcspn$13:	; Equal 16 £temporary4016 0
x41010:	cmp bx, 0	; 3: 131 251 0
x41013:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x41015:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x41018:	mov ax, [bp]	; 3: 139 70 0
x41021:	mov di, [bp + 4]	; 3: 139 126 4
x41024:	mov bp, [bp + 2]	; 3: 139 110 2
x41027:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x41029:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x41032:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x41034:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x41037:	mov ax, [bp]	; 3: 139 70 0
x41040:	mov di, [bp + 4]	; 3: 139 126 4
x41043:	mov bp, [bp + 2]	; 3: 139 110 2
x41046:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x41048:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x41052:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary4066 -> string string 0
x41056:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary4066 -> string 0
x41059:	cmp byte [si], 0	; 3: 128 60 0
x41062:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x41064:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x41067:	mov ax, [bp]	; 3: 139 70 0
x41070:	mov di, [bp + 4]	; 3: 139 126 4
x41073:	mov bp, [bp + 2]	; 3: 139 110 2
x41076:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x41078:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary4069 string index
x41083:	mov si, [bp + 6]	; 3: 139 118 6
x41086:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary4068 -> £temporary4069 £temporary4069 0

strtok$8:	; Equal 31 £temporary4068 -> £temporary4069 0
x41089:	cmp byte [si], 0	; 3: 128 60 0
x41092:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x41094:	mov ax, [bp + 8]	; 3: 139 70 8
x41097:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary4073 string index
x41100:	mov si, [bp + 6]	; 3: 139 118 6
x41103:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary4072 -> £temporary4073 £temporary4073 0

strtok$13:	; IntegralToIntegral £temporary4074 £temporary4072 -> £temporary4073
x41106:	mov al, [si]	; 2: 138 4
x41108:	and ax, 255	; 3: 37 255 0
x41111:	cmp al, 0	; 2: 60 0
x41113:	jge strtok$14	; 2: 125 4
x41115:	neg al	; 2: 246 216
x41117:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary4074 8
x41119:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x41122:	mov word [bp + 14], strtok$16	; 5: 199 70 14 176 160
x41127:	mov [bp + 16], bp	; 3: 137 110 16
x41130:	add bp, 14	; 3: 131 197 14
x41133:	jmp strchr	; 3: 233 198 128

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary4075

strtok$18:	; Equal 29 £temporary4075 0
x41136:	cmp bx, 0	; 3: 131 251 0
x41139:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary4078 string index
x41141:	mov si, [bp + 6]	; 3: 139 118 6
x41144:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary4077 -> £temporary4078 £temporary4078 0

strtok$21:	; Assign £temporary4077 -> £temporary4078 0
x41147:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary4079 index 1
x41150:	mov ax, [bp + 10]	; 3: 139 70 10
x41153:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary4081 string £temporary4079
x41154:	mov si, [bp + 6]	; 3: 139 118 6
x41157:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary4080 -> £temporary4081 £temporary4081 0

strtok$25:	; address £temporary4082 £temporary4080 -> £temporary4081

strtok$26:	; Assign token £temporary4082
x41159:	mov [token], si	; 4: 137 54 179 161

strtok$27:	; SetReturnValue string
x41163:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x41166:	mov ax, [bp]	; 3: 139 70 0
x41169:	mov di, [bp + 4]	; 3: 139 126 4
x41172:	mov bp, [bp + 2]	; 3: 139 110 2
x41175:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x41177:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x41180:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary4084 string index
x41182:	mov si, [bp + 6]	; 3: 139 118 6
x41185:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary4083 -> £temporary4084 £temporary4084 0

strtok$33:	; address £temporary4085 £temporary4083 -> £temporary4084

strtok$34:	; Assign token £temporary4085
x41188:	mov [token], si	; 4: 137 54 179 161

strtok$35:	; SetReturnValue string
x41192:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x41195:	mov ax, [bp]	; 3: 139 70 0
x41198:	mov di, [bp + 4]	; 3: 139 126 4
x41201:	mov bp, [bp + 2]	; 3: 139 110 2
x41204:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x41206:	cmp word [token], 0	; 5: 131 62 179 161 0
x41211:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x41213:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x41216:	mov ax, [bp]	; 3: 139 70 0
x41219:	mov di, [bp + 4]	; 3: 139 126 4
x41222:	mov bp, [bp + 2]	; 3: 139 110 2
x41225:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (token,0) 0
x41227:	mov si, [token]	; 4: 139 54 179 161
x41231:	cmp byte [si], 0	; 3: 128 60 0
x41234:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x41236:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x41239:	mov ax, [bp]	; 3: 139 70 0
x41242:	mov di, [bp + 4]	; 3: 139 126 4
x41245:	mov bp, [bp + 2]	; 3: 139 110 2
x41248:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x41250:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary4090 token index
x41255:	mov si, [token]	; 4: 139 54 179 161
x41259:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary4089 -> £temporary4090 £temporary4090 0

strtok$46:	; Equal 70 £temporary4089 -> £temporary4090 0
x41262:	cmp byte [si], 0	; 3: 128 60 0
x41265:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x41267:	mov ax, [bp + 8]	; 3: 139 70 8
x41270:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary4094 token index
x41273:	mov si, [token]	; 4: 139 54 179 161
x41277:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary4093 -> £temporary4094 £temporary4094 0

strtok$51:	; IntegralToIntegral £temporary4095 £temporary4093 -> £temporary4094
x41280:	mov al, [si]	; 2: 138 4
x41282:	and ax, 255	; 3: 37 255 0
x41285:	cmp al, 0	; 2: 60 0
x41287:	jge strtok$52	; 2: 125 4
x41289:	neg al	; 2: 246 216
x41291:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary4095 8
x41293:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x41296:	mov word [bp + 14], strtok$54	; 5: 199 70 14 94 161
x41301:	mov [bp + 16], bp	; 3: 137 110 16
x41304:	add bp, 14	; 3: 131 197 14
x41307:	jmp strchr	; 3: 233 24 128

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary4096

strtok$56:	; Equal 68 £temporary4096 0
x41310:	cmp bx, 0	; 3: 131 251 0
x41313:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x41315:	mov ax, [token]	; 3: 161 179 161
x41318:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary4099 token index
x41321:	mov si, [token]	; 4: 139 54 179 161
x41325:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary4098 -> £temporary4099 £temporary4099 0

strtok$60:	; Assign £temporary4098 -> £temporary4099 0
x41328:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary4100 index 1
x41331:	mov ax, [bp + 10]	; 3: 139 70 10
x41334:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary4102 token £temporary4100
x41335:	mov si, [token]	; 4: 139 54 179 161
x41339:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary4101 -> £temporary4102 £temporary4102 0

strtok$64:	; address £temporary4103 £temporary4101 -> £temporary4102

strtok$65:	; Assign token £temporary4103
x41341:	mov [token], si	; 4: 137 54 179 161

strtok$66:	; SetReturnValue tokenStart2
x41345:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x41348:	mov ax, [bp]	; 3: 139 70 0
x41351:	mov di, [bp + 4]	; 3: 139 126 4
x41354:	mov bp, [bp + 2]	; 3: 139 110 2
x41357:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x41359:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x41362:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x41364:	mov ax, [token]	; 3: 161 179 161
x41367:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary4105 token index
x41370:	mov si, [token]	; 4: 139 54 179 161
x41374:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary4104 -> £temporary4105 £temporary4105 0

strtok$73:	; address £temporary4106 £temporary4104 -> £temporary4105

strtok$74:	; Assign token £temporary4106
x41377:	mov [token], si	; 4: 137 54 179 161

strtok$75:	; SetReturnValue tokenStart
x41381:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x41384:	mov ax, [bp]	; 3: 139 70 0
x41387:	mov di, [bp + 4]	; 3: 139 126 4
x41390:	mov bp, [bp + 2]	; 3: 139 110 2
x41393:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

token:
x41395:	dw 0	; 2: 0 0

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x41397:	fld qword [float8$10#]	; 4: 221 6 253 161

setjmp_test$2:	; Parameter 6 10 6
x41401:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x41404:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 202 161
x41409:	mov [bp + 8], bp	; 3: 137 110 8
x41412:	add bp, 6	; 3: 131 197 6
x41415:	nop	; 1: 144
x41416:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x41418:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x41420:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x41423:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 221 161
x41428:	mov [bp + 8], bp	; 3: 137 110 8
x41431:	add bp, 6	; 3: 131 197 6
x41434:	nop	; 1: 144
x41435:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x41437:	fld qword [float8$0.1#]	; 4: 221 6 5 162

setjmp_test$12:	; Parameter 6 0.1 6
x41441:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x41444:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 242 161
x41449:	mov [bp + 8], bp	; 3: 137 110 8
x41452:	add bp, 6	; 3: 131 197 6
x41455:	nop	; 1: 144
x41456:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x41458:	mov ax, [bp]	; 3: 139 70 0
x41461:	mov di, [bp + 4]	; 3: 139 126 4
x41464:	mov bp, [bp + 2]	; 3: 139 110 2
x41467:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

float8$10#:
x41469:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

float8$0.1#:
x41477:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x41485:	mov word [bp + 22], buffer	; 5: 199 70 22 137 162

test$2:	; Call 16 setjmp 0
x41490:	mov word [bp + 16], test$3	; 5: 199 70 16 32 162
x41495:	mov [bp + 18], bp	; 3: 137 110 18
x41498:	add bp, 16	; 3: 131 197 16
x41501:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4694

test$5:	; Assign message £temporary4694
x41504:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x41507:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x41511:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x41513:	mov word [bp + 22], string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 143 162

test$9:	; PushFloat x
x41518:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x41521:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x41524:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x41527:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x41530:	mov word [bp + 32], test$15	; 5: 199 70 32 72 162
x41535:	mov [bp + 34], bp	; 3: 137 110 34
x41538:	add bp, 32	; 3: 131 197 32
x41541:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4696

test$17:	; Parameter 16 £temporary4696 16
x41544:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x41547:	mov word [bp + 16], test$19	; 5: 199 70 16 94 162
x41552:	mov [bp + 18], bp	; 3: 137 110 18
x41555:	add bp, 16	; 3: 131 197 16
x41558:	mov di, bp	; 2: 137 239
x41560:	add di, 16	; 3: 131 199 16
x41563:	jmp printf	; 3: 233 103 106

test$19:	; PostCall 16

test$20:	; Goto 26
x41566:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x41568:	mov word [bp + 22], string_25s0A#	; 5: 199 70 22 158 162

test$23:	; Parameter 16 message 8
x41573:	mov ax, [bp + 14]	; 3: 139 70 14
x41576:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x41579:	mov word [bp + 16], test$25	; 5: 199 70 16 126 162
x41584:	mov [bp + 18], bp	; 3: 137 110 18
x41587:	add bp, 16	; 3: 131 197 16
x41590:	mov di, bp	; 2: 137 239
x41592:	add di, 2	; 3: 131 199 2
x41595:	jmp printf	; 3: 233 71 106

test$25:	; PostCall 16

test$26:	; Return 0
x41598:	mov ax, [bp]	; 3: 139 70 0
x41601:	mov di, [bp + 4]	; 3: 139 126 4
x41604:	mov bp, [bp + 2]	; 3: 139 110 2
x41607:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x41609:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

string_12E0202F2025f203D2025f0A#:
x41615:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

string_25s0A#:
x41630:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary811 bp

setjmp$1:	; Assign bp_pointer £temporary811
x41634:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary812 -> buf buf 0
x41637:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary813 -> bp_pointer bp_pointer 0
x41640:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary812 -> buf £temporary813 -> bp_pointer
x41643:	mov ax, [di]	; 2: 139 5
x41645:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary814 -> buf buf 2
x41647:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary815 -> bp_pointer bp_pointer 2
x41650:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary814 -> buf £temporary815 -> bp_pointer
x41653:	mov ax, [di + 2]	; 3: 139 69 2
x41656:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary816 -> buf buf 4
x41659:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary817 -> bp_pointer bp_pointer 4
x41662:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary816 -> buf £temporary817 -> bp_pointer
x41665:	mov ax, [di + 4]	; 3: 139 69 4
x41668:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x41671:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x41674:	mov ax, [bp]	; 3: 139 70 0
x41677:	mov di, [bp + 4]	; 3: 139 126 4
x41680:	mov bp, [bp + 2]	; 3: 139 110 2
x41683:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x41685:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x41687:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x41690:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x41693:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x41696:	mov word [bp + 14], inverse$6	; 5: 199 70 14 238 162
x41701:	mov [bp + 16], bp	; 3: 137 110 16
x41704:	add bp, 14	; 3: 131 197 14
x41707:	nop	; 1: 144
x41708:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4686

inverse$8:	; SetReturnValue £temporary4686

inverse$9:	; Return £temporary4686
x41710:	mov ax, [bp]	; 3: 139 70 0
x41713:	mov di, [bp + 4]	; 3: 139 126 4
x41716:	mov bp, [bp + 2]	; 3: 139 110 2
x41719:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x41721:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x41724:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x41726:	fcompp	; 2: 222 217
x41728:	fstsw ax	; 3: 155 223 224
x41731:	sahf	; 1: 158
x41732:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x41734:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x41737:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4690 x y
x41740:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4690

divide$7:	; Return £temporary4690
x41742:	mov ax, [bp]	; 3: 139 70 0
x41745:	mov di, [bp + 4]	; 3: 139 126 4
x41748:	mov bp, [bp + 2]	; 3: 139 110 2
x41751:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x41753:	mov word [bp + 28], buffer	; 5: 199 70 28 137 162

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x41758:	mov word [bp + 30], string_Division20by20Zero2E#	; 5: 199 70 30 62 163

divide$11:	; Call 22 longjmp 0
x41763:	mov word [bp + 22], divide$12	; 5: 199 70 22 49 163
x41768:	mov [bp + 24], bp	; 3: 137 110 24
x41771:	add bp, 22	; 3: 131 197 22
x41774:	nop	; 1: 144
x41775:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x41777:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x41779:	mov ax, [bp]	; 3: 139 70 0
x41782:	mov di, [bp + 4]	; 3: 139 126 4
x41785:	mov bp, [bp + 2]	; 3: 139 110 2
x41788:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

string_Division20by20Zero2E#:
x41790:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x41808:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary820 -> buf buf 0
x41811:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary820 -> buf
x41814:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary822 -> buf buf 4
x41816:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary822 -> buf
x41819:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary824 -> buf buf 2
x41822:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary824 -> buf
x41825:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x41828:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x41830:	mov ax, [bp]	; 3: 139 70 0
x41833:	mov di, [bp + 4]	; 3: 139 126 4
x41836:	mov bp, [bp + 2]	; 3: 139 110 2
x41839:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x41841:	mov word [bp + 14], string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 61 168

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x41846:	mov word [bp + 22], string_1232E456#	; 5: 199 70 22 83 168

stdlib_test$4:	; Call 8 atof 8
x41851:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 137 163
x41856:	mov [bp + 18], bp	; 3: 137 110 18
x41859:	add bp, 16	; 3: 131 197 16
x41862:	jmp atof	; 3: 233 143 6

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6106

stdlib_test$7:	; Parameter 8 £temporary6106 8
x41865:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x41868:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 159 163
x41873:	mov [bp + 10], bp	; 3: 137 110 10
x41876:	add bp, 8	; 3: 131 197 8
x41879:	mov di, bp	; 2: 137 239
x41881:	add di, 8	; 3: 131 199 8
x41884:	jmp printf	; 3: 233 38 105

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x41887:	mov word [bp + 14], string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 91 168

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x41892:	mov word [bp + 22], string_1232E456789abc#	; 5: 199 70 22 131 168

stdlib_test$14:	; address £temporary6108 p
x41897:	mov si, bp	; 2: 137 238
x41899:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6108 16
x41902:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x41905:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 191 163
x41910:	mov [bp + 18], bp	; 3: 137 110 18
x41913:	add bp, 16	; 3: 131 197 16
x41916:	jmp strtod	; 3: 233 125 6

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6109

stdlib_test$19:	; Parameter 8 £temporary6109 8
x41919:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x41922:	mov ax, [bp + 6]	; 3: 139 70 6
x41925:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x41928:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 219 163
x41933:	mov [bp + 10], bp	; 3: 137 110 10
x41936:	add bp, 8	; 3: 131 197 8
x41939:	mov di, bp	; 2: 137 239
x41941:	add di, 10	; 3: 131 199 10
x41944:	jmp printf	; 3: 233 234 104

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x41947:	mov word [bp + 12], string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 145 168

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x41952:	mov word [bp + 20], string_path#	; 5: 199 70 20 167 168

stdlib_test$27:	; Call 6 getenv 8
x41957:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 243 163
x41962:	mov [bp + 16], bp	; 3: 137 110 16
x41965:	add bp, 14	; 3: 131 197 14
x41968:	jmp getenv	; 3: 233 18 7

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6111

stdlib_test$30:	; Parameter 6 £temporary6111 8
x41971:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x41974:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 9 164
x41979:	mov [bp + 8], bp	; 3: 137 110 8
x41982:	add bp, 6	; 3: 131 197 6
x41985:	mov di, bp	; 2: 137 239
x41987:	add di, 2	; 3: 131 199 2
x41990:	jmp printf	; 3: 233 188 104

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x41993:	mov word [bp + 12], string_system2822dir22290A#	; 5: 199 70 12 172 168

stdlib_test$35:	; Call 6 printf 0
x41998:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 30 164
x42003:	mov [bp + 8], bp	; 3: 137 110 8
x42006:	add bp, 6	; 3: 131 197 6
x42009:	mov di, bp	; 2: 137 239
x42011:	jmp printf	; 3: 233 167 104

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x42014:	mov word [bp + 12], string_dir#	; 5: 199 70 12 187 168

stdlib_test$39:	; Call 6 system 0
x42019:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 49 164
x42024:	mov [bp + 8], bp	; 3: 137 110 8
x42027:	add bp, 6	; 3: 131 197 6
x42030:	jmp system	; 3: 233 226 6

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x42033:	mov word [bp + 12], string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 191 168

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x42038:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x42043:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 73 164
x42048:	mov [bp + 16], bp	; 3: 137 110 16
x42051:	add bp, 14	; 3: 131 197 14
x42054:	jmp _abs	; 3: 233 216 6

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6115

stdlib_test$48:	; Parameter 6 £temporary6115 8
x42057:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x42060:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x42065:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 95 164
x42070:	mov [bp + 18], bp	; 3: 137 110 18
x42073:	add bp, 16	; 3: 131 197 16
x42076:	jmp _abs	; 3: 233 194 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6116

stdlib_test$54:	; Parameter 6 £temporary6116 10
x42079:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x42082:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 117 164
x42087:	mov [bp + 8], bp	; 3: 137 110 8
x42090:	add bp, 6	; 3: 131 197 6
x42093:	mov di, bp	; 2: 137 239
x42095:	add di, 4	; 3: 131 199 4
x42098:	jmp printf	; 3: 233 80 104

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x42101:	mov word [bp + 12], string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 219 168

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x42106:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x42114:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 144 164
x42119:	mov [bp + 16], bp	; 3: 137 110 16
x42122:	add bp, 14	; 3: 131 197 14
x42125:	jmp labs	; 3: 233 130 118

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6118

stdlib_test$64:	; Parameter 6 £temporary6118 8
x42128:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x42132:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x42140:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 170 164
x42145:	mov [bp + 20], bp	; 3: 137 110 20
x42148:	add bp, 18	; 3: 131 197 18
x42151:	jmp labs	; 3: 233 104 118

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6119

stdlib_test$70:	; Parameter 6 £temporary6119 12
x42154:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x42158:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 193 164
x42163:	mov [bp + 8], bp	; 3: 137 110 8
x42166:	add bp, 6	; 3: 131 197 6
x42169:	mov di, bp	; 2: 137 239
x42171:	add di, 8	; 3: 131 199 8
x42174:	jmp printf	; 3: 233 4 104

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x42177:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x42182:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x42187:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 217 164
x42192:	mov [bp + 8], bp	; 3: 137 110 8
x42195:	add bp, 6	; 3: 131 197 6
x42198:	jmp div	; 3: 233 99 6

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6121 -> £temporary6122

stdlib_test$79:	; Assign i £temporary6121 -> £temporary6122
x42201:	mov si, bp	; 2: 137 238
x42203:	add si, 6	; 3: 131 198 6
x42206:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x42208:	mov ah, [bx]	; 2: 138 39
x42210:	mov [si], ah	; 2: 136 36
x42212:	inc bx	; 1: 67
x42213:	inc si	; 1: 70
x42214:	dec al	; 2: 254 200
x42216:	cmp al, 0	; 2: 60 0
x42218:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x42220:	mov word [bp + 16], string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 253 168

stdlib_test$82:	; Parameter 10 i$quot 8
x42225:	mov ax, [bp + 6]	; 3: 139 70 6
x42228:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x42231:	mov ax, [bp + 8]	; 3: 139 70 8
x42234:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x42237:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 16 165
x42242:	mov [bp + 12], bp	; 3: 137 110 12
x42245:	add bp, 10	; 3: 131 197 10
x42248:	mov di, bp	; 2: 137 239
x42250:	add di, 4	; 3: 131 199 4
x42253:	jmp printf	; 3: 233 181 103

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x42256:	mov si, bp	; 2: 137 238
x42258:	add si, 6	; 3: 131 198 6
x42261:	mov di, bp	; 2: 137 239
x42263:	add di, 16	; 3: 131 199 16
x42266:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x42268:	mov ah, [si]	; 2: 138 36
x42270:	mov [di], ah	; 2: 136 37
x42272:	inc si	; 1: 70
x42273:	inc di	; 1: 71
x42274:	dec al	; 2: 254 200
x42276:	cmp al, 0	; 2: 60 0
x42278:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x42280:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 54 165
x42285:	mov [bp + 12], bp	; 3: 137 110 12
x42288:	add bp, 10	; 3: 131 197 10
x42291:	jmp print_div	; 3: 233 82 6

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6126 -> £temporary6127

stdlib_test$92:	; Assign j £temporary6126 -> £temporary6127
x42294:	mov si, bp	; 2: 137 238
x42296:	add si, 10	; 3: 131 198 10
x42299:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x42301:	mov ah, [bx]	; 2: 138 39
x42303:	mov [si], ah	; 2: 136 36
x42305:	inc bx	; 1: 67
x42306:	inc si	; 1: 70
x42307:	dec al	; 2: 254 200
x42309:	cmp al, 0	; 2: 60 0
x42311:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x42313:	mov word [bp + 20], string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 22 169

stdlib_test$95:	; Parameter 14 j$quot 8
x42318:	mov ax, [bp + 10]	; 3: 139 70 10
x42321:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x42324:	mov ax, [bp + 12]	; 3: 139 70 12
x42327:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x42330:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 109 165
x42335:	mov [bp + 16], bp	; 3: 137 110 16
x42338:	add bp, 14	; 3: 131 197 14
x42341:	mov di, bp	; 2: 137 239
x42343:	add di, 4	; 3: 131 199 4
x42346:	jmp printf	; 3: 233 88 103

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x42349:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x42357:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x42365:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 139 165
x42370:	mov [bp + 8], bp	; 3: 137 110 8
x42373:	add bp, 6	; 3: 131 197 6
x42376:	jmp ldiv	; 3: 233 77 6

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6131 -> £temporary6132

stdlib_test$105:	; Assign li £temporary6131 -> £temporary6132
x42379:	mov si, bp	; 2: 137 238
x42381:	add si, 6	; 3: 131 198 6
x42384:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x42386:	mov ah, [bx]	; 2: 138 39
x42388:	mov [si], ah	; 2: 136 36
x42390:	inc bx	; 1: 67
x42391:	inc si	; 1: 70
x42392:	dec al	; 2: 254 200
x42394:	cmp al, 0	; 2: 60 0
x42396:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x42398:	mov word [bp + 20], string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 48 169

stdlib_test$108:	; Parameter 14 li$quot 8
x42403:	mov eax, [bp + 6]	; 4: 102 139 70 6
x42407:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x42411:	mov eax, [bp + 10]	; 4: 102 139 70 10
x42415:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x42419:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 198 165
x42424:	mov [bp + 16], bp	; 3: 137 110 16
x42427:	add bp, 14	; 3: 131 197 14
x42430:	mov di, bp	; 2: 137 239
x42432:	add di, 8	; 3: 131 199 8
x42435:	jmp printf	; 3: 233 255 102

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x42438:	mov si, bp	; 2: 137 238
x42440:	add si, 6	; 3: 131 198 6
x42443:	mov di, bp	; 2: 137 239
x42445:	add di, 20	; 3: 131 199 20
x42448:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x42450:	mov ah, [si]	; 2: 138 36
x42452:	mov [di], ah	; 2: 136 37
x42454:	inc si	; 1: 70
x42455:	inc di	; 1: 71
x42456:	dec al	; 2: 254 200
x42458:	cmp al, 0	; 2: 60 0
x42460:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x42462:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 236 165
x42467:	mov [bp + 16], bp	; 3: 137 110 16
x42470:	add bp, 14	; 3: 131 197 14
x42473:	jmp print_ldiv	; 3: 233 71 6

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6136 -> £temporary6137

stdlib_test$118:	; Assign lj £temporary6136 -> £temporary6137
x42476:	mov si, bp	; 2: 137 238
x42478:	add si, 14	; 3: 131 198 14
x42481:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x42483:	mov ah, [bx]	; 2: 138 39
x42485:	mov [si], ah	; 2: 136 36
x42487:	inc bx	; 1: 67
x42488:	inc si	; 1: 70
x42489:	dec al	; 2: 254 200
x42491:	cmp al, 0	; 2: 60 0
x42493:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x42495:	mov word [bp + 28], string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 76 169

stdlib_test$121:	; Parameter 22 lj$quot 8
x42500:	mov eax, [bp + 14]	; 4: 102 139 70 14
x42504:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x42508:	mov eax, [bp + 18]	; 4: 102 139 70 18
x42512:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x42516:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 39 166
x42521:	mov [bp + 24], bp	; 3: 137 110 24
x42524:	add bp, 22	; 3: 131 197 22
x42527:	mov di, bp	; 2: 137 239
x42529:	add di, 8	; 3: 131 199 8
x42532:	jmp printf	; 3: 233 158 102

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x42535:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x42540:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x42545:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x42550:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x42555:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x42560:	mov word [bp + 24], string_0AA20List2013A20#	; 5: 199 70 24 105 169

stdlib_test$132:	; Call 18 printf 0
x42565:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 85 166
x42570:	mov [bp + 20], bp	; 3: 137 110 20
x42573:	add bp, 18	; 3: 131 197 18
x42576:	mov di, bp	; 2: 137 239
x42578:	jmp printf	; 3: 233 112 102

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x42581:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x42586:	mov ax, [bp + 14]	; 3: 139 70 14
x42589:	cmp [bp + 16], ax	; 3: 57 70 16
x42592:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x42594:	mov word [bp + 24], string_25i20#	; 5: 199 70 24 117 169

stdlib_test$138:	; UnsignedMultiply £temporary6149 index 2
x42599:	mov ax, [bp + 16]	; 3: 139 70 16
x42602:	xor dx, dx	; 2: 49 210
x42604:	mul word [int2$2#]	; 4: 247 38 96 51

stdlib_test$139:	; BinaryAdd £temporary6150 list £temporary6149
x42608:	mov si, bp	; 2: 137 238
x42610:	add si, 6	; 3: 131 198 6
x42613:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6151 -> £temporary6150 £temporary6150 0

stdlib_test$141:	; Parameter 18 £temporary6151 -> £temporary6150 8
x42615:	mov ax, [si]	; 2: 139 4
x42617:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x42620:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 143 166
x42625:	mov [bp + 20], bp	; 3: 137 110 20
x42628:	add bp, 18	; 3: 131 197 18
x42631:	mov di, bp	; 2: 137 239
x42633:	add di, 2	; 3: 131 199 2
x42636:	jmp printf	; 3: 233 54 102

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x42639:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x42642:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x42644:	mov word [bp + 24], string_0AB20List2023A20#	; 5: 199 70 24 121 169

stdlib_test$148:	; Call 18 printf 0
x42649:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 169 166
x42654:	mov [bp + 20], bp	; 3: 137 110 20
x42657:	add bp, 18	; 3: 131 197 18
x42660:	mov di, bp	; 2: 137 239
x42662:	jmp printf	; 3: 233 28 102

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x42665:	mov [bp + 24], bp	; 3: 137 110 24
x42668:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x42672:	mov ax, [bp + 14]	; 3: 139 70 14
x42675:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x42678:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x42683:	mov word [bp + 30], compare	; 5: 199 70 30 133 169

stdlib_test$155:	; Call 18 qsort 0
x42688:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 206 166
x42693:	mov [bp + 20], bp	; 3: 137 110 20
x42696:	add bp, 18	; 3: 131 197 18
x42699:	jmp qsort	; 3: 233 190 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x42702:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x42707:	mov ax, [bp + 14]	; 3: 139 70 14
x42710:	cmp [bp + 16], ax	; 3: 57 70 16
x42713:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x42715:	mov word [bp + 24], string_25i20#	; 5: 199 70 24 117 169

stdlib_test$161:	; UnsignedMultiply £temporary6158 index 2
x42720:	mov ax, [bp + 16]	; 3: 139 70 16
x42723:	xor dx, dx	; 2: 49 210
x42725:	mul word [int2$2#]	; 4: 247 38 96 51

stdlib_test$162:	; BinaryAdd £temporary6159 list £temporary6158
x42729:	mov si, bp	; 2: 137 238
x42731:	add si, 6	; 3: 131 198 6
x42734:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6160 -> £temporary6159 £temporary6159 0

stdlib_test$164:	; Parameter 18 £temporary6160 -> £temporary6159 8
x42736:	mov ax, [si]	; 2: 139 4
x42738:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x42741:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 8 167
x42746:	mov [bp + 20], bp	; 3: 137 110 20
x42749:	add bp, 18	; 3: 131 197 18
x42752:	mov di, bp	; 2: 137 239
x42754:	add di, 2	; 3: 131 199 2
x42757:	jmp printf	; 3: 233 189 101

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x42760:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x42763:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x42765:	mov word [bp + 24], string_0AC20List2033A20#	; 5: 199 70 24 189 169

stdlib_test$171:	; Call 18 printf 0
x42770:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 34 167
x42775:	mov [bp + 20], bp	; 3: 137 110 20
x42778:	add bp, 18	; 3: 131 197 18
x42781:	mov di, bp	; 2: 137 239
x42783:	jmp printf	; 3: 233 163 101

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x42786:	mov [bp + 24], bp	; 3: 137 110 24
x42789:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x42793:	mov ax, [bp + 14]	; 3: 139 70 14
x42796:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x42799:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x42804:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 201 169

stdlib_test$178:	; Call 18 qsort 0
x42809:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 71 167
x42814:	mov [bp + 20], bp	; 3: 137 110 20
x42817:	add bp, 18	; 3: 131 197 18
x42820:	jmp qsort	; 3: 233 69 5

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x42823:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x42828:	mov ax, [bp + 14]	; 3: 139 70 14
x42831:	cmp [bp + 16], ax	; 3: 57 70 16
x42834:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x42836:	mov word [bp + 24], string_25i20#	; 5: 199 70 24 117 169

stdlib_test$184:	; UnsignedMultiply £temporary6167 index 2
x42841:	mov ax, [bp + 16]	; 3: 139 70 16
x42844:	xor dx, dx	; 2: 49 210
x42846:	mul word [int2$2#]	; 4: 247 38 96 51

stdlib_test$185:	; BinaryAdd £temporary6168 list £temporary6167
x42850:	mov si, bp	; 2: 137 238
x42852:	add si, 6	; 3: 131 198 6
x42855:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6169 -> £temporary6168 £temporary6168 0

stdlib_test$187:	; Parameter 18 £temporary6169 -> £temporary6168 8
x42857:	mov ax, [si]	; 2: 139 4
x42859:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x42862:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 129 167
x42867:	mov [bp + 20], bp	; 3: 137 110 20
x42870:	add bp, 18	; 3: 131 197 18
x42873:	mov di, bp	; 2: 137 239
x42875:	add di, 2	; 3: 131 199 2
x42878:	jmp printf	; 3: 233 68 101

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x42881:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x42884:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0A0ASearch3A0A# 6
x42886:	mov word [bp + 24], string_0A0ASearch3A0A#	; 5: 199 70 24 1 170

stdlib_test$194:	; Call 18 printf 0
x42891:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 155 167
x42896:	mov [bp + 20], bp	; 3: 137 110 20
x42899:	add bp, 18	; 3: 131 197 18
x42902:	mov di, bp	; 2: 137 239
x42904:	jmp printf	; 3: 233 42 101

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; Assign key 0
x42907:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$197:	; SignedGreaterThanEqual 224 key 6
x42912:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x42916:	jge stdlib_test$224	; 2: 125 119

stdlib_test$198:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$199:	; address £temporary6174 key
x42918:	mov si, bp	; 2: 137 238
x42920:	add si, 16	; 3: 131 198 16

stdlib_test$200:	; Parameter 18 £temporary6174 6
x42923:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$201:	; Parameter 18 list 8
x42926:	mov [bp + 26], bp	; 3: 137 110 26
x42929:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$202:	; Parameter 18 size 10
x42933:	mov ax, [bp + 14]	; 3: 139 70 14
x42936:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$203:	; Parameter 18 2 12
x42939:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$204:	; Parameter 18 compare 14
x42944:	mov word [bp + 32], compare	; 5: 199 70 32 133 169

stdlib_test$205:	; Call 18 bsearch 0
x42949:	mov word [bp + 18], stdlib_test$206	; 5: 199 70 18 211 167
x42954:	mov [bp + 20], bp	; 3: 137 110 20
x42957:	add bp, 18	; 3: 131 197 18
x42960:	jmp bsearch	; 3: 233 166 5

stdlib_test$206:	; PostCall 18

stdlib_test$207:	; GetReturnValue £temporary6176

stdlib_test$208:	; IntegralToIntegral £temporary6177 £temporary6176

stdlib_test$209:	; Assign p £temporary6177
x42963:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$210:	; Equal 214 p 0
x42966:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x42970:	je stdlib_test$214	; 2: 116 18

stdlib_test$211:	; BinarySubtract £temporary6179 p list
x42972:	mov ax, [bp + 18]	; 3: 139 70 18
x42975:	mov bx, bp	; 2: 137 235
x42977:	add bx, 6	; 3: 131 195 6
x42980:	sub ax, bx	; 2: 41 216

stdlib_test$212:	; UnsignedDivide £temporary6184 £temporary6179 2
x42982:	xor dx, dx	; 2: 49 210
x42984:	div word [int2$2#]	; 4: 247 54 96 51

stdlib_test$213:	; Goto 215
x42988:	jmp stdlib_test$215	; 2: 235 3

stdlib_test$214:	; Assign £temporary6184 -1
x42990:	mov ax, -1	; 3: 184 255 255

stdlib_test$215:	; Assign index £temporary6184
x42993:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$216:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$217:	; Parameter 22 string_20202825i2C2025i290A# 6
x42996:	mov word [bp + 28], string_20202825i2C2025i290A#	; 5: 199 70 28 12 170

stdlib_test$218:	; Parameter 22 key 8
x43001:	mov ax, [bp + 16]	; 3: 139 70 16
x43004:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$219:	; Parameter 22 index 10
x43007:	mov ax, [bp + 20]	; 3: 139 70 20
x43010:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$220:	; Call 22 printf 0
x43013:	mov word [bp + 22], stdlib_test$221	; 5: 199 70 22 24 168
x43018:	mov [bp + 24], bp	; 3: 137 110 24
x43021:	add bp, 22	; 3: 131 197 22
x43024:	mov di, bp	; 2: 137 239
x43026:	add di, 4	; 3: 131 199 4
x43029:	jmp printf	; 3: 233 173 100

stdlib_test$221:	; PostCall 22

stdlib_test$222:	; Increment key
x43032:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$223:	; Goto 197
x43035:	jmp stdlib_test$197	; 2: 235 131

stdlib_test$224:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$225:	; Parameter 16 string_0A# 6
x43037:	mov word [bp + 22], string_0A#	; 5: 199 70 22 195 12

stdlib_test$226:	; Call 16 printf 0
x43042:	mov word [bp + 16], stdlib_test$227	; 5: 199 70 16 50 168
x43047:	mov [bp + 18], bp	; 3: 137 110 18
x43050:	add bp, 16	; 3: 131 197 16
x43053:	mov di, bp	; 2: 137 239
x43055:	jmp printf	; 3: 233 147 100

stdlib_test$227:	; PostCall 16

stdlib_test$228:	; Return 0
x43058:	mov ax, [bp]	; 3: 139 70 0
x43061:	mov di, [bp + 4]	; 3: 139 126 4
x43064:	mov bp, [bp + 2]	; 3: 139 110 2
x43067:	jmp ax	; 2: 255 224

stdlib_test$229:	; FunctionEnd stdlib_test

string_atof28221232E4562229203D2025f0A#:
x43069:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

string_1232E456#:
x43091:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x43099:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

string_1232E456789abc#:
x43139:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

string_0Agetenv2822path2229203D2025s0A#:
x43153:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

string_path#:
x43175:	db "path", 0	; 5: 112 97 116 104 0

string_system2822dir22290A#:
x43180:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

string_dir#:
x43195:	db "dir", 0	; 4: 100 105 114 0

string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x43199:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x43227:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

string_div_t28102C20329203D202825i2C2025i290A#:
x43261:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

string_div_t28102C20329203D202825i2C2025i290A0A#:
x43286:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

string_ldiv_t28102C20329203D202825li2C2025li290A#:
x43312:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x43340:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

string_0AA20List2013A20#:
x43369:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

string_25i20#:
x43381:	db "%i ", 0	; 4: 37 105 32 0

string_0AB20List2023A20#:
x43385:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary6035 valuePtr1
x43397:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary6036 -> £temporary6035 £temporary6035 0

compare$2:	; Assign intValue1 £temporary6036 -> £temporary6035
x43400:	mov ax, [si]	; 2: 139 4
x43402:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary6037 valuePtr2
x43405:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary6038 -> £temporary6037 £temporary6037 0

compare$5:	; Assign intValue2 £temporary6038 -> £temporary6037
x43408:	mov ax, [si]	; 2: 139 4
x43410:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x43413:	mov ax, [bp + 12]	; 3: 139 70 12
x43416:	cmp [bp + 10], ax	; 3: 57 70 10
x43419:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary6048 -1
x43421:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x43424:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x43426:	mov ax, [bp + 12]	; 3: 139 70 12
x43429:	cmp [bp + 10], ax	; 3: 57 70 10
x43432:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary6044 0
x43434:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x43437:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary6044 1
x43439:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary6048 £temporary6044

compare$14:	; SetReturnValue £temporary6048

compare$15:	; Return £temporary6048
x43442:	mov ax, [bp]	; 3: 139 70 0
x43445:	mov di, [bp + 4]	; 3: 139 126 4
x43448:	mov bp, [bp + 2]	; 3: 139 110 2
x43451:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

string_0AC20List2033A20#:
x43453:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary6049 valuePtr1
x43465:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary6050 -> £temporary6049 £temporary6049 0

reverse_compare$2:	; Assign intValue1 £temporary6050 -> £temporary6049
x43468:	mov ax, [si]	; 2: 139 4
x43470:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary6051 valuePtr2
x43473:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary6052 -> £temporary6051 £temporary6051 0

reverse_compare$5:	; Assign intValue2 £temporary6052 -> £temporary6051
x43476:	mov ax, [si]	; 2: 139 4
x43478:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x43481:	mov ax, [bp + 12]	; 3: 139 70 12
x43484:	cmp [bp + 10], ax	; 3: 57 70 10
x43487:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary6062 1
x43489:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x43492:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x43494:	mov ax, [bp + 12]	; 3: 139 70 12
x43497:	cmp [bp + 10], ax	; 3: 57 70 10
x43500:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary6058 0
x43502:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x43505:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary6058 -1
x43507:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary6062 £temporary6058

reverse_compare$14:	; SetReturnValue £temporary6062

reverse_compare$15:	; Return £temporary6062
x43510:	mov ax, [bp]	; 3: 139 70 0
x43513:	mov di, [bp + 4]	; 3: 139 126 4
x43516:	mov bp, [bp + 2]	; 3: 139 110 2
x43519:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

string_0A0ASearch3A0A#:
x43521:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

string_20202825i2C2025i290A#:
x43532:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x43544:	mov ax, [bp + 6]	; 3: 139 70 6
x43547:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x43550:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x43555:	mov word [bp + 8], atof$4	; 5: 199 70 8 49 170
x43560:	mov [bp + 10], bp	; 3: 137 110 10
x43563:	add bp, 8	; 3: 131 197 8
x43566:	nop	; 1: 144
x43567:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary3251

atof$6:	; SetReturnValue £temporary3251

atof$7:	; Return £temporary3251
x43569:	mov ax, [bp]	; 3: 139 70 0
x43572:	mov di, [bp + 4]	; 3: 139 126 4
x43575:	mov bp, [bp + 2]	; 3: 139 110 2
x43578:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x43580:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x43585:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x43587:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x43590:	mov ax, [bp + 6]	; 3: 139 70 6
x43593:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x43596:	mov word [bp + 28], string_25lf25n#	; 5: 199 70 28 147 170

strtod$6:	; address £temporary3254 value
x43601:	mov si, bp	; 2: 137 238
x43603:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary3254 10
x43606:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary3255 chars
x43609:	mov si, bp	; 2: 137 238
x43611:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary3255 12
x43614:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x43617:	mov word [bp + 20], strtod$11	; 5: 199 70 20 116 170
x43622:	mov [bp + 22], bp	; 3: 137 110 22
x43625:	add bp, 20	; 3: 131 197 20
x43628:	mov di, bp	; 2: 137 239
x43630:	add di, 4	; 3: 131 199 4
x43633:	nop	; 1: 144
x43634:	jmp sscanf	; 2: 235 37

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x43636:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x43640:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary3258 -> endp endp 0
x43642:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary3258 -> endp s chars
x43645:	mov ax, [bp + 6]	; 3: 139 70 6
x43648:	add ax, [bp + 10]	; 3: 3 70 10
x43651:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x43653:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x43656:	mov ax, [bp]	; 3: 139 70 0
x43659:	mov di, [bp + 4]	; 3: 139 126 4
x43662:	mov bp, [bp + 2]	; 3: 139 110 2
x43665:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

string_25lf25n#:
x43667:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

sscanf:	; address £temporary1731 format
x43673:	mov si, bp	; 2: 137 238
x43675:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1732 £temporary1731

sscanf$2:	; BinaryAdd arg_list £temporary1732 2
x43678:	add si, 2	; 3: 131 198 2
x43681:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x43684:	mov ax, [bp + 6]	; 3: 139 70 6
x43687:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x43690:	mov ax, [bp + 8]	; 3: 139 70 8
x43693:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x43696:	mov ax, [di + 10]	; 3: 139 69 10
x43699:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x43702:	mov word [di + 12], sscanf$8	; 5: 199 69 12 201 170
x43707:	mov [di + 14], bp	; 3: 137 109 14
x43710:	mov [di + 16], di	; 3: 137 125 16
x43713:	add di, 12	; 3: 131 199 12
x43716:	mov bp, di	; 2: 137 253
x43718:	nop	; 1: 144
x43719:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1734

sscanf$10:	; SetReturnValue £temporary1734

sscanf$11:	; Return £temporary1734
x43721:	mov ax, [bp]	; 3: 139 70 0
x43724:	mov di, [bp + 4]	; 3: 139 126 4
x43727:	mov bp, [bp + 2]	; 3: 139 110 2
x43730:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x43732:	mov word [g_inStatus], 1	; 6: 199 6 248 84 1 0

vsscanf$1:	; IntegralToIntegral £temporary1739 inString
x43738:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1739
x43741:	mov [g_inDevice], ax	; 3: 163 250 84

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x43744:	mov ax, [bp + 8]	; 3: 139 70 8
x43747:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x43750:	mov ax, [bp + 10]	; 3: 139 70 10
x43753:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x43756:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 250 170
x43761:	mov [bp + 14], bp	; 3: 137 110 14
x43764:	add bp, 12	; 3: 131 197 12
x43767:	jmp scanFormat	; 3: 233 2 170

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1740

vsscanf$9:	; SetReturnValue £temporary1740

vsscanf$10:	; Return £temporary1740
x43770:	mov ax, [bp]	; 3: 139 70 0
x43773:	mov di, [bp + 4]	; 3: 139 126 4
x43776:	mov bp, [bp + 2]	; 3: 139 110 2
x43779:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

getenv:	; SetReturnValue 0
x43781:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x43784:	mov ax, [bp]	; 3: 139 70 0
x43787:	mov di, [bp + 4]	; 3: 139 126 4
x43790:	mov bp, [bp + 2]	; 3: 139 110 2
x43793:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x43795:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x43798:	mov ax, [bp]	; 3: 139 70 0
x43801:	mov di, [bp + 4]	; 3: 139 126 4
x43804:	mov bp, [bp + 2]	; 3: 139 110 2
x43807:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x43809:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x43813:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3356 value
x43815:	mov bx, [bp + 6]	; 3: 139 94 6
x43818:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3360 £temporary3356

_abs$3:	; Goto 5
x43820:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3360 value
x43822:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3360

_abs$6:	; Return £temporary3360
x43825:	mov ax, [bp]	; 3: 139 70 0
x43828:	mov di, [bp + 4]	; 3: 139 126 4
x43831:	mov bp, [bp + 2]	; 3: 139 110 2
x43834:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x43836:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x43841:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x43846:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x43850:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x43852:	mov word [errno], 6	; 6: 199 6 182 10 6 0

div$4:	; SetReturnValue result
x43858:	mov bx, bp	; 2: 137 235
x43860:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x43863:	mov ax, [bp]	; 3: 139 70 0
x43866:	mov di, [bp + 4]	; 3: 139 126 4
x43869:	mov bp, [bp + 2]	; 3: 139 110 2
x43872:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x43874:	mov ax, [bp + 6]	; 3: 139 70 6
x43877:	xor dx, dx	; 2: 49 210
x43879:	idiv word [bp + 8]	; 3: 247 126 8
x43882:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x43885:	mov ax, [bp + 6]	; 3: 139 70 6
x43888:	xor dx, dx	; 2: 49 210
x43890:	idiv word [bp + 8]	; 3: 247 126 8
x43893:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x43896:	mov bx, bp	; 2: 137 235
x43898:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x43901:	mov ax, [bp]	; 3: 139 70 0
x43904:	mov di, [bp + 4]	; 3: 139 126 4
x43907:	mov bp, [bp + 2]	; 3: 139 110 2
x43910:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x43912:	mov word [bp + 16], string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 194 171

print_div$2:	; Parameter 10 d$quot 8
x43917:	mov ax, [bp + 6]	; 3: 139 70 6
x43920:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x43923:	mov ax, [bp + 8]	; 3: 139 70 8
x43926:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x43929:	mov word [bp + 10], print_div$5	; 5: 199 70 10 172 171
x43934:	mov [bp + 12], bp	; 3: 137 110 12
x43937:	add bp, 10	; 3: 131 197 10
x43940:	mov di, bp	; 2: 137 239
x43942:	add di, 4	; 3: 131 199 4
x43945:	jmp printf	; 3: 233 25 97

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x43948:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Increment d$rem
x43951:	inc word [bp + 8]	; 3: 255 70 8

print_div$8:	; SetReturnValue d
x43954:	mov bx, bp	; 2: 137 235
x43956:	add bx, 6	; 3: 131 195 6

print_div$9:	; Return d
x43959:	mov ax, [bp]	; 3: 139 70 0
x43962:	mov di, [bp + 4]	; 3: 139 126 4
x43965:	mov bp, [bp + 2]	; 3: 139 110 2
x43968:	jmp ax	; 2: 255 224

print_div$10:	; FunctionEnd print_div

string_div_t20quot2025i20rem2025i0A#:
x43970:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x43992:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x44000:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x44008:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x44013:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x44015:	mov word [errno], 6	; 6: 199 6 182 10 6 0

ldiv$4:	; SetReturnValue result
x44021:	mov bx, bp	; 2: 137 235
x44023:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x44026:	mov ax, [bp]	; 3: 139 70 0
x44029:	mov di, [bp + 4]	; 3: 139 126 4
x44032:	mov bp, [bp + 2]	; 3: 139 110 2
x44035:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x44037:	mov eax, [bp + 6]	; 4: 102 139 70 6
x44041:	xor edx, edx	; 3: 102 49 210
x44044:	idiv dword [bp + 10]	; 4: 102 247 126 10
x44048:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x44052:	mov eax, [bp + 6]	; 4: 102 139 70 6
x44056:	xor edx, edx	; 3: 102 49 210
x44059:	idiv dword [bp + 10]	; 4: 102 247 126 10
x44063:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x44067:	mov bx, bp	; 2: 137 235
x44069:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x44072:	mov ax, [bp]	; 3: 139 70 0
x44075:	mov di, [bp + 4]	; 3: 139 126 4
x44078:	mov bp, [bp + 2]	; 3: 139 110 2
x44081:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x44083:	mov word [bp + 20], string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 115 172

print_ldiv$2:	; Parameter 14 ld$quot 8
x44088:	mov eax, [bp + 6]	; 4: 102 139 70 6
x44092:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x44096:	mov eax, [bp + 10]	; 4: 102 139 70 10
x44100:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x44104:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 91 172
x44109:	mov [bp + 16], bp	; 3: 137 110 16
x44112:	add bp, 14	; 3: 131 197 14
x44115:	mov di, bp	; 2: 137 239
x44117:	add di, 8	; 3: 131 199 8
x44120:	jmp printf	; 3: 233 106 96

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x44123:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Decrement ld$rem
x44127:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$8:	; SetReturnValue ld
x44131:	mov bx, bp	; 2: 137 235
x44133:	add bx, 6	; 3: 131 195 6

print_ldiv$9:	; Return ld
x44136:	mov ax, [bp]	; 3: 139 70 0
x44139:	mov di, [bp + 4]	; 3: 139 126 4
x44142:	mov bp, [bp + 2]	; 3: 139 110 2
x44145:	jmp ax	; 2: 255 224

print_ldiv$10:	; FunctionEnd print_ldiv

string_ldiv_t20quot2025li20rem2025li0A#:
x44147:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3334 valueList
x44172:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3334
x44175:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x44178:	mov ax, [bp + 8]	; 3: 139 70 8
x44181:	dec ax	; 1: 72
x44182:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x44185:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x44189:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x44193:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x44198:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x44203:	mov ax, [bp + 16]	; 3: 139 70 16
x44206:	cmp [bp + 18], ax	; 3: 57 70 18
x44209:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3340 index valueSize
x44211:	mov ax, [bp + 18]	; 3: 139 70 18
x44214:	xor dx, dx	; 2: 49 210
x44216:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3340
x44219:	mov bx, [bp + 14]	; 3: 139 94 14
x44222:	add bx, ax	; 2: 1 195
x44224:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3342 index 1
x44227:	mov ax, [bp + 18]	; 3: 139 70 18
x44230:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3343 £temporary3342 valueSize
x44231:	xor dx, dx	; 2: 49 210
x44233:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3343
x44236:	mov bx, [bp + 14]	; 3: 139 94 14
x44239:	add bx, ax	; 2: 1 195
x44241:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x44244:	mov ax, [bp + 22]	; 3: 139 70 22
x44247:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x44250:	mov ax, [bp + 24]	; 3: 139 70 24
x44253:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x44256:	mov word [bp + 26], qsort$16	; 5: 199 70 26 240 172
x44261:	mov [bp + 28], bp	; 3: 137 110 28
x44264:	mov ax, [bp + 12]	; 3: 139 70 12
x44267:	add bp, 26	; 3: 131 197 26
x44270:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3345

qsort$18:	; SignedLessThanEqual 26 £temporary3345 0
x44272:	cmp bx, 0	; 3: 131 251 0
x44275:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x44277:	mov ax, [bp + 22]	; 3: 139 70 22
x44280:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x44283:	mov ax, [bp + 24]	; 3: 139 70 24
x44286:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x44289:	mov ax, [bp + 10]	; 3: 139 70 10
x44292:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x44295:	mov word [bp + 26], qsort$24	; 5: 199 70 26 21 173
x44300:	mov [bp + 28], bp	; 3: 137 110 28
x44303:	add bp, 26	; 3: 131 197 26
x44306:	nop	; 1: 144
x44307:	jmp @3873$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x44309:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x44314:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x44317:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x44319:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x44323:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x44325:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x44328:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x44331:	mov ax, [bp]	; 3: 139 70 0
x44334:	mov di, [bp + 4]	; 3: 139 126 4
x44337:	mov bp, [bp + 2]	; 3: 139 110 2
x44340:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@3873$memswap:	; Assign index 0
x44342:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@3873$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x44347:	mov ax, [bp + 10]	; 3: 139 70 10
x44350:	cmp [bp + 12], ax	; 3: 57 70 12
x44353:	jge @3873$memswap$15	; 2: 125 43

@3873$memswap$2:	; BinaryAdd £temporary3327 value1 index
x44355:	mov si, [bp + 6]	; 3: 139 118 6
x44358:	add si, [bp + 12]	; 3: 3 118 12

@3873$memswap$3:	; Deref £temporary3326 -> £temporary3327 £temporary3327 0

@3873$memswap$4:	; Assign tempValue £temporary3326 -> £temporary3327
x44361:	mov al, [si]	; 2: 138 4
x44363:	mov [bp + 14], al	; 3: 136 70 14

@3873$memswap$5:	; BinaryAdd £temporary3329 value1 index
x44366:	mov si, [bp + 6]	; 3: 139 118 6
x44369:	add si, [bp + 12]	; 3: 3 118 12

@3873$memswap$6:	; Deref £temporary3328 -> £temporary3329 £temporary3329 0

@3873$memswap$7:	; BinaryAdd £temporary3331 value2 index
x44372:	mov di, [bp + 8]	; 3: 139 126 8
x44375:	add di, [bp + 12]	; 3: 3 126 12

@3873$memswap$8:	; Deref £temporary3330 -> £temporary3331 £temporary3331 0

@3873$memswap$9:	; Assign £temporary3328 -> £temporary3329 £temporary3330 -> £temporary3331
x44378:	mov al, [di]	; 2: 138 5
x44380:	mov [si], al	; 2: 136 4

@3873$memswap$10:	; BinaryAdd £temporary3333 value2 index
x44382:	mov si, [bp + 8]	; 3: 139 118 8
x44385:	add si, [bp + 12]	; 3: 3 118 12

@3873$memswap$11:	; Deref £temporary3332 -> £temporary3333 £temporary3333 0

@3873$memswap$12:	; Assign £temporary3332 -> £temporary3333 tempValue
x44388:	mov al, [bp + 14]	; 3: 138 70 14
x44391:	mov [si], al	; 2: 136 4

@3873$memswap$13:	; Increment index
x44393:	inc word [bp + 12]	; 3: 255 70 12

@3873$memswap$14:	; Goto 1
x44396:	jmp @3873$memswap$1	; 2: 235 205

@3873$memswap$15:	; Return 0
x44398:	mov ax, [bp]	; 3: 139 70 0
x44401:	mov di, [bp + 4]	; 3: 139 126 4
x44404:	mov bp, [bp + 2]	; 3: 139 110 2
x44407:	jmp ax	; 2: 255 224

@3873$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x44409:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x44414:	mov ax, [bp + 10]	; 3: 139 70 10
x44417:	dec ax	; 1: 72
x44418:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x44421:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x44425:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x44427:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x44430:	mov ax, [bp]	; 3: 139 70 0
x44433:	mov di, [bp + 4]	; 3: 139 126 4
x44436:	mov bp, [bp + 2]	; 3: 139 110 2
x44439:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3270 valueList
x44441:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3271 firstIndex valueSize
x44444:	mov ax, [bp + 16]	; 3: 139 70 16
x44447:	xor dx, dx	; 2: 49 210
x44449:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3270 £temporary3271
x44452:	add bx, ax	; 2: 1 195
x44454:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x44457:	mov ax, [bp + 6]	; 3: 139 70 6
x44460:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x44463:	mov ax, [bp + 20]	; 3: 139 70 20
x44466:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x44469:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 197 173
x44474:	mov [bp + 24], bp	; 3: 137 110 24
x44477:	mov ax, [bp + 14]	; 3: 139 70 14
x44480:	add bp, 22	; 3: 131 197 22
x44483:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3273

bsearch$14:	; Assign firstCompare £temporary3273
x44485:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x44488:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x44492:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x44494:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x44497:	mov ax, [bp]	; 3: 139 70 0
x44500:	mov di, [bp + 4]	; 3: 139 126 4
x44503:	mov bp, [bp + 2]	; 3: 139 110 2
x44506:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x44508:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x44512:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x44514:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x44517:	mov ax, [bp]	; 3: 139 70 0
x44520:	mov di, [bp + 4]	; 3: 139 126 4
x44523:	mov bp, [bp + 2]	; 3: 139 110 2
x44526:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3276 valueList
x44528:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3277 lastIndex valueSize
x44531:	mov ax, [bp + 18]	; 3: 139 70 18
x44534:	xor dx, dx	; 2: 49 210
x44536:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3276 £temporary3277
x44539:	add bx, ax	; 2: 1 195
x44541:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x44544:	mov ax, [bp + 6]	; 3: 139 70 6
x44547:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x44550:	mov ax, [bp + 20]	; 3: 139 70 20
x44553:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x44556:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 28 174
x44561:	mov [bp + 24], bp	; 3: 137 110 24
x44564:	mov ax, [bp + 14]	; 3: 139 70 14
x44567:	add bp, 22	; 3: 131 197 22
x44570:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3279

bsearch$30:	; Assign lastCompare £temporary3279
x44572:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x44575:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x44579:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x44581:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x44584:	mov ax, [bp]	; 3: 139 70 0
x44587:	mov di, [bp + 4]	; 3: 139 126 4
x44590:	mov bp, [bp + 2]	; 3: 139 110 2
x44593:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x44595:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x44599:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x44601:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x44604:	mov ax, [bp]	; 3: 139 70 0
x44607:	mov di, [bp + 4]	; 3: 139 126 4
x44610:	mov bp, [bp + 2]	; 3: 139 110 2
x44613:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3282 firstIndex lastIndex
x44615:	mov ax, [bp + 16]	; 3: 139 70 16
x44618:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3282 2
x44621:	xor dx, dx	; 2: 49 210
x44623:	idiv word [int2$2#]	; 4: 247 62 96 51
x44627:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3284 valueList
x44630:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3285 middleIndex valueSize
x44633:	mov ax, [bp + 20]	; 3: 139 70 20
x44636:	xor dx, dx	; 2: 49 210
x44638:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3284 £temporary3285
x44641:	add bx, ax	; 2: 1 195
x44643:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x44646:	mov ax, [bp + 6]	; 3: 139 70 6
x44649:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x44652:	mov ax, [bp + 22]	; 3: 139 70 22
x44655:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x44658:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 130 174
x44663:	mov [bp + 26], bp	; 3: 137 110 26
x44666:	mov ax, [bp + 14]	; 3: 139 70 14
x44669:	add bp, 24	; 3: 131 197 24
x44672:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3287

bsearch$48:	; Assign middleCompare £temporary3287
x44674:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x44677:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x44681:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x44683:	mov ax, [bp + 20]	; 3: 139 70 20
x44686:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x44689:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x44692:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x44696:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x44698:	mov ax, [bp + 20]	; 3: 139 70 20
x44701:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x44704:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x44707:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x44710:	mov ax, [bp]	; 3: 139 70 0
x44713:	mov di, [bp + 4]	; 3: 139 126 4
x44716:	mov bp, [bp + 2]	; 3: 139 110 2
x44719:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

strtol_test:	; Assign base 0
x44721:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x44726:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x44730:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x44734:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x44738:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x44742:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x44746:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x44750:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x44754:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x44758:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x44762:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x44766:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x44770:	mov [bp + 27], bp	; 3: 137 110 27
x44773:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2409 pointer
x44777:	mov si, bp	; 2: 137 238
x44779:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2409 8
x44782:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x44785:	mov ax, [bp + 6]	; 3: 139 70 6
x44788:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x44791:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 5 175
x44796:	mov [bp + 23], bp	; 3: 137 110 23
x44799:	add bp, 21	; 3: 131 197 21
x44802:	jmp strtol	; 3: 233 187 9

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2410

strtol_test$20:	; Assign value £temporary2410
x44805:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x44809:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$23:	; Parameter 25 text 8
x44814:	mov [bp + 33], bp	; 3: 137 110 33
x44817:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x44821:	mov eax, [bp + 21]	; 4: 102 139 70 21
x44825:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x44829:	mov ax, [bp + 19]	; 3: 139 70 19
x44832:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x44835:	mov ax, [bp + 6]	; 3: 139 70 6
x44838:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x44841:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 60 175
x44846:	mov [bp + 27], bp	; 3: 137 110 27
x44849:	add bp, 25	; 3: 131 197 25
x44852:	mov di, bp	; 2: 137 239
x44854:	add di, 10	; 3: 131 199 10
x44857:	jmp printf	; 3: 233 137 93

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x44860:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x44865:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x44869:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x44873:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x44877:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x44881:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x44885:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x44889:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x44893:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x44897:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x44901:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x44905:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x44909:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x44913:	mov [bp + 28], bp	; 3: 137 110 28
x44916:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2424 pointer
x44920:	mov si, bp	; 2: 137 238
x44922:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2424 8
x44925:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x44928:	mov ax, [bp + 6]	; 3: 139 70 6
x44931:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x44934:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 148 175
x44939:	mov [bp + 24], bp	; 3: 137 110 24
x44942:	add bp, 22	; 3: 131 197 22
x44945:	jmp strtol	; 3: 233 44 9

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2425

strtol_test$50:	; Assign value £temporary2425
x44948:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x44952:	mov word [bp + 32], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 170 184

strtol_test$53:	; Parameter 26 text 8
x44957:	mov [bp + 34], bp	; 3: 137 110 34
x44960:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x44964:	mov eax, [bp + 22]	; 4: 102 139 70 22
x44968:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x44972:	mov ax, [bp + 20]	; 3: 139 70 20
x44975:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x44978:	mov ax, [bp + 6]	; 3: 139 70 6
x44981:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x44984:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 203 175
x44989:	mov [bp + 28], bp	; 3: 137 110 28
x44992:	add bp, 26	; 3: 131 197 26
x44995:	mov di, bp	; 2: 137 239
x44997:	add di, 10	; 3: 131 199 10
x45000:	jmp printf	; 3: 233 250 92

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x45003:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x45008:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x45012:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x45016:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x45020:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x45024:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x45028:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x45032:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x45036:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x45040:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x45044:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x45048:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x45052:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x45056:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x45060:	mov [bp + 29], bp	; 3: 137 110 29
x45063:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2440 pointer
x45067:	mov si, bp	; 2: 137 238
x45069:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2440 8
x45072:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x45075:	mov ax, [bp + 6]	; 3: 139 70 6
x45078:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x45081:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 39 176
x45086:	mov [bp + 25], bp	; 3: 137 110 25
x45089:	add bp, 23	; 3: 131 197 23
x45092:	jmp strtol	; 3: 233 153 8

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2441

strtol_test$81:	; Assign value £temporary2441
x45095:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x45099:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 184

strtol_test$84:	; Parameter 27 text 8
x45104:	mov [bp + 35], bp	; 3: 137 110 35
x45107:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x45111:	mov eax, [bp + 23]	; 4: 102 139 70 23
x45115:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x45119:	mov ax, [bp + 21]	; 3: 139 70 21
x45122:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x45125:	mov ax, [bp + 6]	; 3: 139 70 6
x45128:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x45131:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 94 176
x45136:	mov [bp + 29], bp	; 3: 137 110 29
x45139:	add bp, 27	; 3: 131 197 27
x45142:	mov di, bp	; 2: 137 239
x45144:	add di, 10	; 3: 131 199 10
x45147:	jmp printf	; 3: 233 103 92

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x45150:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x45155:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x45159:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x45163:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x45167:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x45171:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x45175:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x45179:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x45183:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x45187:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x45191:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x45195:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x45199:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x45203:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x45207:	mov [bp + 29], bp	; 3: 137 110 29
x45210:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2456 pointer
x45214:	mov si, bp	; 2: 137 238
x45216:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2456 8
x45219:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x45222:	mov ax, [bp + 6]	; 3: 139 70 6
x45225:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x45228:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 186 176
x45233:	mov [bp + 25], bp	; 3: 137 110 25
x45236:	add bp, 23	; 3: 131 197 23
x45239:	jmp strtol	; 3: 233 6 8

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2457

strtol_test$112:	; Assign value £temporary2457
x45242:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x45246:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 184

strtol_test$115:	; Parameter 27 text 8
x45251:	mov [bp + 35], bp	; 3: 137 110 35
x45254:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x45258:	mov eax, [bp + 23]	; 4: 102 139 70 23
x45262:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x45266:	mov ax, [bp + 21]	; 3: 139 70 21
x45269:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x45272:	mov ax, [bp + 6]	; 3: 139 70 6
x45275:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x45278:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 241 176
x45283:	mov [bp + 29], bp	; 3: 137 110 29
x45286:	add bp, 27	; 3: 131 197 27
x45289:	mov di, bp	; 2: 137 239
x45291:	add di, 10	; 3: 131 199 10
x45294:	jmp printf	; 3: 233 212 91

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x45297:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x45302:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x45306:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x45310:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x45314:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x45318:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x45322:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x45326:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x45330:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x45334:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x45338:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x45342:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x45346:	mov [bp + 27], bp	; 3: 137 110 27
x45349:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2470 pointer
x45353:	mov si, bp	; 2: 137 238
x45355:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2470 8
x45358:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x45361:	mov ax, [bp + 6]	; 3: 139 70 6
x45364:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x45367:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 69 177
x45372:	mov [bp + 23], bp	; 3: 137 110 23
x45375:	add bp, 21	; 3: 131 197 21
x45378:	jmp strtol	; 3: 233 123 7

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2471

strtol_test$141:	; Assign value £temporary2471
x45381:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x45385:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$144:	; Parameter 25 text 8
x45390:	mov [bp + 33], bp	; 3: 137 110 33
x45393:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x45397:	mov eax, [bp + 21]	; 4: 102 139 70 21
x45401:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x45405:	mov ax, [bp + 19]	; 3: 139 70 19
x45408:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x45411:	mov ax, [bp + 6]	; 3: 139 70 6
x45414:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x45417:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 124 177
x45422:	mov [bp + 27], bp	; 3: 137 110 27
x45425:	add bp, 25	; 3: 131 197 25
x45428:	mov di, bp	; 2: 137 239
x45430:	add di, 10	; 3: 131 199 10
x45433:	jmp printf	; 3: 233 73 91

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x45436:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x45441:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x45445:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x45449:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x45453:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x45457:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x45461:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x45465:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x45469:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x45473:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x45477:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x45481:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x45485:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x45489:	mov [bp + 28], bp	; 3: 137 110 28
x45492:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2485 pointer
x45496:	mov si, bp	; 2: 137 238
x45498:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2485 8
x45501:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x45504:	mov ax, [bp + 6]	; 3: 139 70 6
x45507:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x45510:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 212 177
x45515:	mov [bp + 24], bp	; 3: 137 110 24
x45518:	add bp, 22	; 3: 131 197 22
x45521:	jmp strtol	; 3: 233 236 6

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2486

strtol_test$171:	; Assign value £temporary2486
x45524:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x45528:	mov word [bp + 32], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 170 184

strtol_test$174:	; Parameter 26 text 8
x45533:	mov [bp + 34], bp	; 3: 137 110 34
x45536:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x45540:	mov eax, [bp + 22]	; 4: 102 139 70 22
x45544:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x45548:	mov ax, [bp + 20]	; 3: 139 70 20
x45551:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x45554:	mov ax, [bp + 6]	; 3: 139 70 6
x45557:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x45560:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 11 178
x45565:	mov [bp + 28], bp	; 3: 137 110 28
x45568:	add bp, 26	; 3: 131 197 26
x45571:	mov di, bp	; 2: 137 239
x45573:	add di, 10	; 3: 131 199 10
x45576:	jmp printf	; 3: 233 186 90

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x45579:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x45584:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x45588:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x45592:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x45596:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x45600:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x45604:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x45608:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x45612:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x45616:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x45620:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x45624:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x45628:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x45632:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x45636:	mov [bp + 29], bp	; 3: 137 110 29
x45639:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2501 pointer
x45643:	mov si, bp	; 2: 137 238
x45645:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2501 8
x45648:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x45651:	mov ax, [bp + 6]	; 3: 139 70 6
x45654:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x45657:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 103 178
x45662:	mov [bp + 25], bp	; 3: 137 110 25
x45665:	add bp, 23	; 3: 131 197 23
x45668:	jmp strtol	; 3: 233 89 6

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2502

strtol_test$202:	; Assign value £temporary2502
x45671:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x45675:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 184

strtol_test$205:	; Parameter 27 text 8
x45680:	mov [bp + 35], bp	; 3: 137 110 35
x45683:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x45687:	mov eax, [bp + 23]	; 4: 102 139 70 23
x45691:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x45695:	mov ax, [bp + 21]	; 3: 139 70 21
x45698:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x45701:	mov ax, [bp + 6]	; 3: 139 70 6
x45704:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x45707:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 158 178
x45712:	mov [bp + 29], bp	; 3: 137 110 29
x45715:	add bp, 27	; 3: 131 197 27
x45718:	mov di, bp	; 2: 137 239
x45720:	add di, 10	; 3: 131 199 10
x45723:	jmp printf	; 3: 233 39 90

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x45726:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x45731:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x45735:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x45739:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x45743:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x45747:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x45751:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x45755:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x45759:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x45763:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x45767:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x45771:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x45775:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x45779:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x45783:	mov [bp + 29], bp	; 3: 137 110 29
x45786:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2517 pointer
x45790:	mov si, bp	; 2: 137 238
x45792:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2517 8
x45795:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x45798:	mov ax, [bp + 6]	; 3: 139 70 6
x45801:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x45804:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 250 178
x45809:	mov [bp + 25], bp	; 3: 137 110 25
x45812:	add bp, 23	; 3: 131 197 23
x45815:	jmp strtol	; 3: 233 198 5

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2518

strtol_test$233:	; Assign value £temporary2518
x45818:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x45822:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 184

strtol_test$236:	; Parameter 27 text 8
x45827:	mov [bp + 35], bp	; 3: 137 110 35
x45830:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x45834:	mov eax, [bp + 23]	; 4: 102 139 70 23
x45838:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x45842:	mov ax, [bp + 21]	; 3: 139 70 21
x45845:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x45848:	mov ax, [bp + 6]	; 3: 139 70 6
x45851:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x45854:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 49 179
x45859:	mov [bp + 29], bp	; 3: 137 110 29
x45862:	add bp, 27	; 3: 131 197 27
x45865:	mov di, bp	; 2: 137 239
x45867:	add di, 10	; 3: 131 199 10
x45870:	jmp printf	; 3: 233 148 89

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x45873:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x45878:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x45882:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x45886:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x45890:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x45894:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x45898:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x45902:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x45906:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x45910:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x45914:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x45918:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x45922:	mov [bp + 27], bp	; 3: 137 110 27
x45925:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2531 pointer
x45929:	mov si, bp	; 2: 137 238
x45931:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2531 8
x45934:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x45937:	mov ax, [bp + 6]	; 3: 139 70 6
x45940:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x45943:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 133 179
x45948:	mov [bp + 23], bp	; 3: 137 110 23
x45951:	add bp, 21	; 3: 131 197 21
x45954:	jmp strtol	; 3: 233 59 5

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2532

strtol_test$262:	; Assign value £temporary2532
x45957:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x45961:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$265:	; Parameter 25 text 8
x45966:	mov [bp + 33], bp	; 3: 137 110 33
x45969:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x45973:	mov eax, [bp + 21]	; 4: 102 139 70 21
x45977:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x45981:	mov ax, [bp + 19]	; 3: 139 70 19
x45984:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x45987:	mov ax, [bp + 6]	; 3: 139 70 6
x45990:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x45993:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 188 179
x45998:	mov [bp + 27], bp	; 3: 137 110 27
x46001:	add bp, 25	; 3: 131 197 25
x46004:	mov di, bp	; 2: 137 239
x46006:	add di, 10	; 3: 131 199 10
x46009:	jmp printf	; 3: 233 9 89

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x46012:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x46017:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x46021:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x46025:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x46029:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x46033:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x46037:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x46041:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x46045:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x46049:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x46053:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x46057:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x46061:	mov [bp + 27], bp	; 3: 137 110 27
x46064:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2545 pointer
x46068:	mov si, bp	; 2: 137 238
x46070:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2545 8
x46073:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x46076:	mov ax, [bp + 6]	; 3: 139 70 6
x46079:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x46082:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 16 180
x46087:	mov [bp + 23], bp	; 3: 137 110 23
x46090:	add bp, 21	; 3: 131 197 21
x46093:	jmp strtol	; 3: 233 176 4

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2546

strtol_test$291:	; Assign value £temporary2546
x46096:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46100:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$294:	; Parameter 25 text 8
x46105:	mov [bp + 33], bp	; 3: 137 110 33
x46108:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x46112:	mov eax, [bp + 21]	; 4: 102 139 70 21
x46116:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x46120:	mov ax, [bp + 19]	; 3: 139 70 19
x46123:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x46126:	mov ax, [bp + 6]	; 3: 139 70 6
x46129:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x46132:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 71 180
x46137:	mov [bp + 27], bp	; 3: 137 110 27
x46140:	add bp, 25	; 3: 131 197 25
x46143:	mov di, bp	; 2: 137 239
x46145:	add di, 10	; 3: 131 199 10
x46148:	jmp printf	; 3: 233 126 88

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x46151:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x46156:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x46160:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x46164:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x46168:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x46172:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x46176:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x46180:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x46184:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x46188:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x46192:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x46196:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x46200:	mov [bp + 27], bp	; 3: 137 110 27
x46203:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2559 pointer
x46207:	mov si, bp	; 2: 137 238
x46209:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2559 8
x46212:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x46215:	mov ax, [bp + 6]	; 3: 139 70 6
x46218:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x46221:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 155 180
x46226:	mov [bp + 23], bp	; 3: 137 110 23
x46229:	add bp, 21	; 3: 131 197 21
x46232:	jmp strtol	; 3: 233 37 4

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2560

strtol_test$320:	; Assign value £temporary2560
x46235:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46239:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$323:	; Parameter 25 text 8
x46244:	mov [bp + 33], bp	; 3: 137 110 33
x46247:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x46251:	mov eax, [bp + 21]	; 4: 102 139 70 21
x46255:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x46259:	mov ax, [bp + 19]	; 3: 139 70 19
x46262:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x46265:	mov ax, [bp + 6]	; 3: 139 70 6
x46268:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x46271:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 210 180
x46276:	mov [bp + 27], bp	; 3: 137 110 27
x46279:	add bp, 25	; 3: 131 197 25
x46282:	mov di, bp	; 2: 137 239
x46284:	add di, 10	; 3: 131 199 10
x46287:	jmp printf	; 3: 233 243 87

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x46290:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x46295:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x46299:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x46303:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x46307:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x46311:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x46315:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x46319:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x46323:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x46327:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x46331:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x46335:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x46339:	mov [bp + 27], bp	; 3: 137 110 27
x46342:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2573 pointer
x46346:	mov si, bp	; 2: 137 238
x46348:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2573 8
x46351:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x46354:	mov ax, [bp + 6]	; 3: 139 70 6
x46357:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x46360:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 38 181
x46365:	mov [bp + 23], bp	; 3: 137 110 23
x46368:	add bp, 21	; 3: 131 197 21
x46371:	jmp strtol	; 3: 233 154 3

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2574

strtol_test$349:	; Assign value £temporary2574
x46374:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46378:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$352:	; Parameter 25 text 8
x46383:	mov [bp + 33], bp	; 3: 137 110 33
x46386:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x46390:	mov eax, [bp + 21]	; 4: 102 139 70 21
x46394:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x46398:	mov ax, [bp + 19]	; 3: 139 70 19
x46401:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x46404:	mov ax, [bp + 6]	; 3: 139 70 6
x46407:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x46410:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 93 181
x46415:	mov [bp + 27], bp	; 3: 137 110 27
x46418:	add bp, 25	; 3: 131 197 25
x46421:	mov di, bp	; 2: 137 239
x46423:	add di, 10	; 3: 131 199 10
x46426:	jmp printf	; 3: 233 104 87

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x46429:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x46434:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x46438:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x46442:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x46446:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x46450:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x46454:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x46458:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x46462:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x46466:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x46470:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x46474:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x46478:	mov [bp + 27], bp	; 3: 137 110 27
x46481:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2587 pointer
x46485:	mov si, bp	; 2: 137 238
x46487:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2587 8
x46490:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x46493:	mov ax, [bp + 6]	; 3: 139 70 6
x46496:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x46499:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 177 181
x46504:	mov [bp + 23], bp	; 3: 137 110 23
x46507:	add bp, 21	; 3: 131 197 21
x46510:	jmp strtol	; 3: 233 15 3

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2588

strtol_test$378:	; Assign value £temporary2588
x46513:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46517:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$381:	; Parameter 25 text 8
x46522:	mov [bp + 33], bp	; 3: 137 110 33
x46525:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x46529:	mov eax, [bp + 21]	; 4: 102 139 70 21
x46533:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x46537:	mov ax, [bp + 19]	; 3: 139 70 19
x46540:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x46543:	mov ax, [bp + 6]	; 3: 139 70 6
x46546:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x46549:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 232 181
x46554:	mov [bp + 27], bp	; 3: 137 110 27
x46557:	add bp, 25	; 3: 131 197 25
x46560:	mov di, bp	; 2: 137 239
x46562:	add di, 10	; 3: 131 199 10
x46565:	jmp printf	; 3: 233 221 86

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x46568:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x46573:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x46577:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x46581:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x46585:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x46589:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x46593:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x46597:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x46601:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x46605:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x46609:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x46613:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x46617:	mov [bp + 27], bp	; 3: 137 110 27
x46620:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2601 pointer
x46624:	mov si, bp	; 2: 137 238
x46626:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2601 8
x46629:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x46632:	mov ax, [bp + 6]	; 3: 139 70 6
x46635:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x46638:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 60 182
x46643:	mov [bp + 23], bp	; 3: 137 110 23
x46646:	add bp, 21	; 3: 131 197 21
x46649:	jmp strtol	; 3: 233 132 2

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2602

strtol_test$407:	; Assign value £temporary2602
x46652:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46656:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$410:	; Parameter 25 text 8
x46661:	mov [bp + 33], bp	; 3: 137 110 33
x46664:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x46668:	mov eax, [bp + 21]	; 4: 102 139 70 21
x46672:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x46676:	mov ax, [bp + 19]	; 3: 139 70 19
x46679:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x46682:	mov ax, [bp + 6]	; 3: 139 70 6
x46685:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x46688:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 115 182
x46693:	mov [bp + 27], bp	; 3: 137 110 27
x46696:	add bp, 25	; 3: 131 197 25
x46699:	mov di, bp	; 2: 137 239
x46701:	add di, 10	; 3: 131 199 10
x46704:	jmp printf	; 3: 233 82 86

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x46707:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x46712:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x46716:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x46720:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x46724:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x46728:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x46732:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x46736:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x46740:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x46744:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x46748:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x46752:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x46756:	mov [bp + 27], bp	; 3: 137 110 27
x46759:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2615 pointer
x46763:	mov si, bp	; 2: 137 238
x46765:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2615 8
x46768:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x46771:	mov ax, [bp + 6]	; 3: 139 70 6
x46774:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x46777:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 199 182
x46782:	mov [bp + 23], bp	; 3: 137 110 23
x46785:	add bp, 21	; 3: 131 197 21
x46788:	jmp strtol	; 3: 233 249 1

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2616

strtol_test$436:	; Assign value £temporary2616
x46791:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46795:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$439:	; Parameter 25 text 8
x46800:	mov [bp + 33], bp	; 3: 137 110 33
x46803:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x46807:	mov eax, [bp + 21]	; 4: 102 139 70 21
x46811:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x46815:	mov ax, [bp + 19]	; 3: 139 70 19
x46818:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x46821:	mov ax, [bp + 6]	; 3: 139 70 6
x46824:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x46827:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 254 182
x46832:	mov [bp + 27], bp	; 3: 137 110 27
x46835:	add bp, 25	; 3: 131 197 25
x46838:	mov di, bp	; 2: 137 239
x46840:	add di, 10	; 3: 131 199 10
x46843:	jmp printf	; 3: 233 199 85

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x46846:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x46851:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x46855:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x46859:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x46863:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x46867:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x46871:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x46875:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x46879:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x46883:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x46887:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x46891:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x46895:	mov [bp + 27], bp	; 3: 137 110 27
x46898:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2629 pointer
x46902:	mov si, bp	; 2: 137 238
x46904:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2629 8
x46907:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x46910:	mov ax, [bp + 6]	; 3: 139 70 6
x46913:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x46916:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 82 183
x46921:	mov [bp + 23], bp	; 3: 137 110 23
x46924:	add bp, 21	; 3: 131 197 21
x46927:	jmp strtol	; 3: 233 110 1

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2630

strtol_test$465:	; Assign value £temporary2630
x46930:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x46934:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$468:	; Parameter 25 text 8
x46939:	mov [bp + 33], bp	; 3: 137 110 33
x46942:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x46946:	mov eax, [bp + 21]	; 4: 102 139 70 21
x46950:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x46954:	mov ax, [bp + 19]	; 3: 139 70 19
x46957:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x46960:	mov ax, [bp + 6]	; 3: 139 70 6
x46963:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x46966:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 137 183
x46971:	mov [bp + 27], bp	; 3: 137 110 27
x46974:	add bp, 25	; 3: 131 197 25
x46977:	mov di, bp	; 2: 137 239
x46979:	add di, 10	; 3: 131 199 10
x46982:	jmp printf	; 3: 233 60 85

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x46985:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x46990:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x46994:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x46998:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x47002:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x47006:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x47010:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x47014:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x47018:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x47022:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x47026:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x47030:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x47034:	mov [bp + 27], bp	; 3: 137 110 27
x47037:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2643 pointer
x47041:	mov si, bp	; 2: 137 238
x47043:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2643 8
x47046:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x47049:	mov ax, [bp + 6]	; 3: 139 70 6
x47052:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x47055:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 221 183
x47060:	mov [bp + 23], bp	; 3: 137 110 23
x47063:	add bp, 21	; 3: 131 197 21
x47066:	jmp strtol	; 3: 233 227 0

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2644

strtol_test$494:	; Assign value £temporary2644
x47069:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47073:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$497:	; Parameter 25 text 8
x47078:	mov [bp + 33], bp	; 3: 137 110 33
x47081:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x47085:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47089:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x47093:	mov ax, [bp + 19]	; 3: 139 70 19
x47096:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x47099:	mov ax, [bp + 6]	; 3: 139 70 6
x47102:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x47105:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 20 184
x47110:	mov [bp + 27], bp	; 3: 137 110 27
x47113:	add bp, 25	; 3: 131 197 25
x47116:	mov di, bp	; 2: 137 239
x47118:	add di, 10	; 3: 131 199 10
x47121:	jmp printf	; 3: 233 177 84

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x47124:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x47129:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x47133:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x47137:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x47141:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x47145:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x47149:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x47153:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x47157:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x47161:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x47165:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x47169:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x47173:	mov [bp + 27], bp	; 3: 137 110 27
x47176:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2657 pointer
x47180:	mov si, bp	; 2: 137 238
x47182:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2657 8
x47185:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x47188:	mov ax, [bp + 6]	; 3: 139 70 6
x47191:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x47194:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 104 184
x47199:	mov [bp + 23], bp	; 3: 137 110 23
x47202:	add bp, 21	; 3: 131 197 21
x47205:	nop	; 1: 144
x47206:	jmp strtol	; 2: 235 88

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2658

strtol_test$523:	; Assign value £temporary2658
x47208:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47212:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtol_test$526:	; Parameter 25 text 8
x47217:	mov [bp + 33], bp	; 3: 137 110 33
x47220:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x47224:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47228:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x47232:	mov ax, [bp + 19]	; 3: 139 70 19
x47235:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x47238:	mov ax, [bp + 6]	; 3: 139 70 6
x47241:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x47244:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 159 184
x47249:	mov [bp + 27], bp	; 3: 137 110 27
x47252:	add bp, 25	; 3: 131 197 25
x47255:	mov di, bp	; 2: 137 239
x47257:	add di, 10	; 3: 131 199 10
x47260:	jmp printf	; 3: 233 38 84

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x47263:	mov ax, [bp]	; 3: 139 70 0
x47266:	mov di, [bp + 4]	; 3: 139 126 4
x47269:	mov bp, [bp + 2]	; 3: 139 110 2
x47272:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x47274:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x47296:	mov word [g_inStatus], 1	; 6: 199 6 248 84 1 0

strtol$1:	; Assign g_inDevice s
x47302:	mov ax, [bp + 6]	; 3: 139 70 6
x47305:	mov [g_inDevice], ax	; 3: 163 250 84

strtol$2:	; Assign g_inChars 0
x47308:	mov word [g_inChars], 0	; 6: 199 6 30 90 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x47314:	mov ax, [bp + 10]	; 3: 139 70 10
x47317:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x47320:	mov word [bp + 12], strtol$6	; 5: 199 70 12 230 184
x47325:	mov [bp + 14], bp	; 3: 137 110 14
x47328:	add bp, 12	; 3: 131 197 12
x47331:	jmp scanLongInt	; 3: 233 66 164

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2393

strtol$8:	; Assign value £temporary2393
x47334:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x47338:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x47342:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2395 -> endp endp 0
x47344:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2395 -> endp s g_inChars
x47347:	mov ax, [bp + 6]	; 3: 139 70 6
x47350:	add ax, [g_inChars]	; 4: 3 6 30 90
x47354:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x47356:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x47360:	mov ax, [bp]	; 3: 139 70 0
x47363:	mov di, [bp + 4]	; 3: 139 126 4
x47366:	mov bp, [bp + 2]	; 3: 139 110 2
x47369:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x47371:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x47376:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x47380:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x47384:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x47388:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x47392:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x47396:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x47400:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x47404:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x47408:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x47412:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x47416:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x47420:	mov [bp + 27], bp	; 3: 137 110 27
x47423:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2838 pointer
x47427:	mov si, bp	; 2: 137 238
x47429:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2838 8
x47432:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x47435:	mov ax, [bp + 6]	; 3: 139 70 6
x47438:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x47441:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 95 185
x47446:	mov [bp + 23], bp	; 3: 137 110 23
x47449:	add bp, 21	; 3: 131 197 21
x47452:	jmp strtoul	; 3: 233 165 9

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2839

strtoul_test$20:	; Assign value £temporary2839
x47455:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47459:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$23:	; Parameter 25 text 8
x47464:	mov [bp + 33], bp	; 3: 137 110 33
x47467:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x47471:	mov eax, [bp + 21]	; 4: 102 139 70 21
x47475:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x47479:	mov ax, [bp + 19]	; 3: 139 70 19
x47482:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x47485:	mov ax, [bp + 6]	; 3: 139 70 6
x47488:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x47491:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 150 185
x47496:	mov [bp + 27], bp	; 3: 137 110 27
x47499:	add bp, 25	; 3: 131 197 25
x47502:	mov di, bp	; 2: 137 239
x47504:	add di, 10	; 3: 131 199 10
x47507:	jmp printf	; 3: 233 47 83

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x47510:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x47515:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x47519:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x47523:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x47527:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x47531:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x47535:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x47539:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x47543:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x47547:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x47551:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x47555:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x47559:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x47563:	mov [bp + 28], bp	; 3: 137 110 28
x47566:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2853 pointer
x47570:	mov si, bp	; 2: 137 238
x47572:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2853 8
x47575:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x47578:	mov ax, [bp + 6]	; 3: 139 70 6
x47581:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x47584:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 238 185
x47589:	mov [bp + 24], bp	; 3: 137 110 24
x47592:	add bp, 22	; 3: 131 197 22
x47595:	jmp strtoul	; 3: 233 22 9

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2854

strtoul_test$50:	; Assign value £temporary2854
x47598:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47602:	mov word [bp + 32], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 170 184

strtoul_test$53:	; Parameter 26 text 8
x47607:	mov [bp + 34], bp	; 3: 137 110 34
x47610:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x47614:	mov eax, [bp + 22]	; 4: 102 139 70 22
x47618:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x47622:	mov ax, [bp + 20]	; 3: 139 70 20
x47625:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x47628:	mov ax, [bp + 6]	; 3: 139 70 6
x47631:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x47634:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 37 186
x47639:	mov [bp + 28], bp	; 3: 137 110 28
x47642:	add bp, 26	; 3: 131 197 26
x47645:	mov di, bp	; 2: 137 239
x47647:	add di, 10	; 3: 131 199 10
x47650:	jmp printf	; 3: 233 160 82

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x47653:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x47658:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x47662:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x47666:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x47670:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x47674:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x47678:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x47682:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x47686:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x47690:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x47694:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x47698:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x47702:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x47706:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x47710:	mov [bp + 29], bp	; 3: 137 110 29
x47713:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2869 pointer
x47717:	mov si, bp	; 2: 137 238
x47719:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2869 8
x47722:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x47725:	mov ax, [bp + 6]	; 3: 139 70 6
x47728:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x47731:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 129 186
x47736:	mov [bp + 25], bp	; 3: 137 110 25
x47739:	add bp, 23	; 3: 131 197 23
x47742:	jmp strtoul	; 3: 233 131 8

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2870

strtoul_test$81:	; Assign value £temporary2870
x47745:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47749:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 184

strtoul_test$84:	; Parameter 27 text 8
x47754:	mov [bp + 35], bp	; 3: 137 110 35
x47757:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x47761:	mov eax, [bp + 23]	; 4: 102 139 70 23
x47765:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x47769:	mov ax, [bp + 21]	; 3: 139 70 21
x47772:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x47775:	mov ax, [bp + 6]	; 3: 139 70 6
x47778:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x47781:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 184 186
x47786:	mov [bp + 29], bp	; 3: 137 110 29
x47789:	add bp, 27	; 3: 131 197 27
x47792:	mov di, bp	; 2: 137 239
x47794:	add di, 10	; 3: 131 199 10
x47797:	jmp printf	; 3: 233 13 82

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x47800:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x47805:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x47809:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x47813:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x47817:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x47821:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x47825:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x47829:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x47833:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x47837:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x47841:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x47845:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x47849:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x47853:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x47857:	mov [bp + 29], bp	; 3: 137 110 29
x47860:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2885 pointer
x47864:	mov si, bp	; 2: 137 238
x47866:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2885 8
x47869:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x47872:	mov ax, [bp + 6]	; 3: 139 70 6
x47875:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x47878:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 20 187
x47883:	mov [bp + 25], bp	; 3: 137 110 25
x47886:	add bp, 23	; 3: 131 197 23
x47889:	jmp strtoul	; 3: 233 240 7

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2886

strtoul_test$112:	; Assign value £temporary2886
x47892:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x47896:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 184

strtoul_test$115:	; Parameter 27 text 8
x47901:	mov [bp + 35], bp	; 3: 137 110 35
x47904:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x47908:	mov eax, [bp + 23]	; 4: 102 139 70 23
x47912:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x47916:	mov ax, [bp + 21]	; 3: 139 70 21
x47919:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x47922:	mov ax, [bp + 6]	; 3: 139 70 6
x47925:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x47928:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 75 187
x47933:	mov [bp + 29], bp	; 3: 137 110 29
x47936:	add bp, 27	; 3: 131 197 27
x47939:	mov di, bp	; 2: 137 239
x47941:	add di, 10	; 3: 131 199 10
x47944:	jmp printf	; 3: 233 122 81

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x47947:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x47952:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x47956:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x47960:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x47964:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x47968:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x47972:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x47976:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x47980:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x47984:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x47988:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x47992:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x47996:	mov [bp + 27], bp	; 3: 137 110 27
x47999:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2899 pointer
x48003:	mov si, bp	; 2: 137 238
x48005:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2899 8
x48008:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x48011:	mov ax, [bp + 6]	; 3: 139 70 6
x48014:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x48017:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 159 187
x48022:	mov [bp + 23], bp	; 3: 137 110 23
x48025:	add bp, 21	; 3: 131 197 21
x48028:	jmp strtoul	; 3: 233 101 7

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2900

strtoul_test$141:	; Assign value £temporary2900
x48031:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48035:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$144:	; Parameter 25 text 8
x48040:	mov [bp + 33], bp	; 3: 137 110 33
x48043:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x48047:	mov eax, [bp + 21]	; 4: 102 139 70 21
x48051:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x48055:	mov ax, [bp + 19]	; 3: 139 70 19
x48058:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x48061:	mov ax, [bp + 6]	; 3: 139 70 6
x48064:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x48067:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 214 187
x48072:	mov [bp + 27], bp	; 3: 137 110 27
x48075:	add bp, 25	; 3: 131 197 25
x48078:	mov di, bp	; 2: 137 239
x48080:	add di, 10	; 3: 131 199 10
x48083:	jmp printf	; 3: 233 239 80

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x48086:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x48091:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x48095:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x48099:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x48103:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x48107:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x48111:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x48115:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x48119:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x48123:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x48127:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x48131:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x48135:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x48139:	mov [bp + 28], bp	; 3: 137 110 28
x48142:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2914 pointer
x48146:	mov si, bp	; 2: 137 238
x48148:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2914 8
x48151:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x48154:	mov ax, [bp + 6]	; 3: 139 70 6
x48157:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x48160:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 46 188
x48165:	mov [bp + 24], bp	; 3: 137 110 24
x48168:	add bp, 22	; 3: 131 197 22
x48171:	jmp strtoul	; 3: 233 214 6

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2915

strtoul_test$171:	; Assign value £temporary2915
x48174:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48178:	mov word [bp + 32], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 170 184

strtoul_test$174:	; Parameter 26 text 8
x48183:	mov [bp + 34], bp	; 3: 137 110 34
x48186:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x48190:	mov eax, [bp + 22]	; 4: 102 139 70 22
x48194:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x48198:	mov ax, [bp + 20]	; 3: 139 70 20
x48201:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x48204:	mov ax, [bp + 6]	; 3: 139 70 6
x48207:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x48210:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 101 188
x48215:	mov [bp + 28], bp	; 3: 137 110 28
x48218:	add bp, 26	; 3: 131 197 26
x48221:	mov di, bp	; 2: 137 239
x48223:	add di, 10	; 3: 131 199 10
x48226:	jmp printf	; 3: 233 96 80

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x48229:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x48234:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x48238:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x48242:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x48246:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x48250:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x48254:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x48258:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x48262:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x48266:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x48270:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x48274:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x48278:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x48282:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x48286:	mov [bp + 29], bp	; 3: 137 110 29
x48289:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2930 pointer
x48293:	mov si, bp	; 2: 137 238
x48295:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2930 8
x48298:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x48301:	mov ax, [bp + 6]	; 3: 139 70 6
x48304:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x48307:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 193 188
x48312:	mov [bp + 25], bp	; 3: 137 110 25
x48315:	add bp, 23	; 3: 131 197 23
x48318:	jmp strtoul	; 3: 233 67 6

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2931

strtoul_test$202:	; Assign value £temporary2931
x48321:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48325:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 184

strtoul_test$205:	; Parameter 27 text 8
x48330:	mov [bp + 35], bp	; 3: 137 110 35
x48333:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x48337:	mov eax, [bp + 23]	; 4: 102 139 70 23
x48341:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x48345:	mov ax, [bp + 21]	; 3: 139 70 21
x48348:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x48351:	mov ax, [bp + 6]	; 3: 139 70 6
x48354:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x48357:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 248 188
x48362:	mov [bp + 29], bp	; 3: 137 110 29
x48365:	add bp, 27	; 3: 131 197 27
x48368:	mov di, bp	; 2: 137 239
x48370:	add di, 10	; 3: 131 199 10
x48373:	jmp printf	; 3: 233 205 79

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x48376:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x48381:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x48385:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x48389:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x48393:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x48397:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x48401:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x48405:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x48409:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x48413:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x48417:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x48421:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x48425:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x48429:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x48433:	mov [bp + 29], bp	; 3: 137 110 29
x48436:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2946 pointer
x48440:	mov si, bp	; 2: 137 238
x48442:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2946 8
x48445:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x48448:	mov ax, [bp + 6]	; 3: 139 70 6
x48451:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x48454:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 84 189
x48459:	mov [bp + 25], bp	; 3: 137 110 25
x48462:	add bp, 23	; 3: 131 197 23
x48465:	jmp strtoul	; 3: 233 176 5

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2947

strtoul_test$233:	; Assign value £temporary2947
x48468:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48472:	mov word [bp + 33], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 184

strtoul_test$236:	; Parameter 27 text 8
x48477:	mov [bp + 35], bp	; 3: 137 110 35
x48480:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x48484:	mov eax, [bp + 23]	; 4: 102 139 70 23
x48488:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x48492:	mov ax, [bp + 21]	; 3: 139 70 21
x48495:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x48498:	mov ax, [bp + 6]	; 3: 139 70 6
x48501:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x48504:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 139 189
x48509:	mov [bp + 29], bp	; 3: 137 110 29
x48512:	add bp, 27	; 3: 131 197 27
x48515:	mov di, bp	; 2: 137 239
x48517:	add di, 10	; 3: 131 199 10
x48520:	jmp printf	; 3: 233 58 79

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x48523:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x48528:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x48532:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x48536:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x48540:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x48544:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x48548:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x48552:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x48556:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x48560:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x48564:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x48568:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x48572:	mov [bp + 27], bp	; 3: 137 110 27
x48575:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2960 pointer
x48579:	mov si, bp	; 2: 137 238
x48581:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2960 8
x48584:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x48587:	mov ax, [bp + 6]	; 3: 139 70 6
x48590:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x48593:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 223 189
x48598:	mov [bp + 23], bp	; 3: 137 110 23
x48601:	add bp, 21	; 3: 131 197 21
x48604:	jmp strtoul	; 3: 233 37 5

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2961

strtoul_test$262:	; Assign value £temporary2961
x48607:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48611:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$265:	; Parameter 25 text 8
x48616:	mov [bp + 33], bp	; 3: 137 110 33
x48619:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x48623:	mov eax, [bp + 21]	; 4: 102 139 70 21
x48627:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x48631:	mov ax, [bp + 19]	; 3: 139 70 19
x48634:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x48637:	mov ax, [bp + 6]	; 3: 139 70 6
x48640:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x48643:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 22 190
x48648:	mov [bp + 27], bp	; 3: 137 110 27
x48651:	add bp, 25	; 3: 131 197 25
x48654:	mov di, bp	; 2: 137 239
x48656:	add di, 10	; 3: 131 199 10
x48659:	jmp printf	; 3: 233 175 78

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x48662:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x48667:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x48671:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x48675:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x48679:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x48683:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x48687:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x48691:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x48695:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x48699:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x48703:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x48707:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x48711:	mov [bp + 27], bp	; 3: 137 110 27
x48714:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary2974 pointer
x48718:	mov si, bp	; 2: 137 238
x48720:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary2974 8
x48723:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x48726:	mov ax, [bp + 6]	; 3: 139 70 6
x48729:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x48732:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 106 190
x48737:	mov [bp + 23], bp	; 3: 137 110 23
x48740:	add bp, 21	; 3: 131 197 21
x48743:	jmp strtoul	; 3: 233 154 4

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary2975

strtoul_test$291:	; Assign value £temporary2975
x48746:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48750:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$294:	; Parameter 25 text 8
x48755:	mov [bp + 33], bp	; 3: 137 110 33
x48758:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x48762:	mov eax, [bp + 21]	; 4: 102 139 70 21
x48766:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x48770:	mov ax, [bp + 19]	; 3: 139 70 19
x48773:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x48776:	mov ax, [bp + 6]	; 3: 139 70 6
x48779:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x48782:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 161 190
x48787:	mov [bp + 27], bp	; 3: 137 110 27
x48790:	add bp, 25	; 3: 131 197 25
x48793:	mov di, bp	; 2: 137 239
x48795:	add di, 10	; 3: 131 199 10
x48798:	jmp printf	; 3: 233 36 78

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x48801:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x48806:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x48810:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x48814:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x48818:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x48822:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x48826:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x48830:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x48834:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x48838:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x48842:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x48846:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x48850:	mov [bp + 27], bp	; 3: 137 110 27
x48853:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary2988 pointer
x48857:	mov si, bp	; 2: 137 238
x48859:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary2988 8
x48862:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x48865:	mov ax, [bp + 6]	; 3: 139 70 6
x48868:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x48871:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 245 190
x48876:	mov [bp + 23], bp	; 3: 137 110 23
x48879:	add bp, 21	; 3: 131 197 21
x48882:	jmp strtoul	; 3: 233 15 4

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary2989

strtoul_test$320:	; Assign value £temporary2989
x48885:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x48889:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$323:	; Parameter 25 text 8
x48894:	mov [bp + 33], bp	; 3: 137 110 33
x48897:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x48901:	mov eax, [bp + 21]	; 4: 102 139 70 21
x48905:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x48909:	mov ax, [bp + 19]	; 3: 139 70 19
x48912:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x48915:	mov ax, [bp + 6]	; 3: 139 70 6
x48918:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x48921:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 44 191
x48926:	mov [bp + 27], bp	; 3: 137 110 27
x48929:	add bp, 25	; 3: 131 197 25
x48932:	mov di, bp	; 2: 137 239
x48934:	add di, 10	; 3: 131 199 10
x48937:	jmp printf	; 3: 233 153 77

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x48940:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x48945:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x48949:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x48953:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x48957:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x48961:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x48965:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x48969:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x48973:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x48977:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x48981:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x48985:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x48989:	mov [bp + 27], bp	; 3: 137 110 27
x48992:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary3002 pointer
x48996:	mov si, bp	; 2: 137 238
x48998:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary3002 8
x49001:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x49004:	mov ax, [bp + 6]	; 3: 139 70 6
x49007:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x49010:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 128 191
x49015:	mov [bp + 23], bp	; 3: 137 110 23
x49018:	add bp, 21	; 3: 131 197 21
x49021:	jmp strtoul	; 3: 233 132 3

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary3003

strtoul_test$349:	; Assign value £temporary3003
x49024:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49028:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$352:	; Parameter 25 text 8
x49033:	mov [bp + 33], bp	; 3: 137 110 33
x49036:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x49040:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49044:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x49048:	mov ax, [bp + 19]	; 3: 139 70 19
x49051:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x49054:	mov ax, [bp + 6]	; 3: 139 70 6
x49057:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x49060:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 183 191
x49065:	mov [bp + 27], bp	; 3: 137 110 27
x49068:	add bp, 25	; 3: 131 197 25
x49071:	mov di, bp	; 2: 137 239
x49073:	add di, 10	; 3: 131 199 10
x49076:	jmp printf	; 3: 233 14 77

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x49079:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x49084:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x49088:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x49092:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x49096:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x49100:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x49104:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x49108:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x49112:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x49116:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x49120:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x49124:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x49128:	mov [bp + 27], bp	; 3: 137 110 27
x49131:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary3016 pointer
x49135:	mov si, bp	; 2: 137 238
x49137:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary3016 8
x49140:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x49143:	mov ax, [bp + 6]	; 3: 139 70 6
x49146:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x49149:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 11 192
x49154:	mov [bp + 23], bp	; 3: 137 110 23
x49157:	add bp, 21	; 3: 131 197 21
x49160:	jmp strtoul	; 3: 233 249 2

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary3017

strtoul_test$378:	; Assign value £temporary3017
x49163:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49167:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$381:	; Parameter 25 text 8
x49172:	mov [bp + 33], bp	; 3: 137 110 33
x49175:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x49179:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49183:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x49187:	mov ax, [bp + 19]	; 3: 139 70 19
x49190:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x49193:	mov ax, [bp + 6]	; 3: 139 70 6
x49196:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x49199:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 66 192
x49204:	mov [bp + 27], bp	; 3: 137 110 27
x49207:	add bp, 25	; 3: 131 197 25
x49210:	mov di, bp	; 2: 137 239
x49212:	add di, 10	; 3: 131 199 10
x49215:	jmp printf	; 3: 233 131 76

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x49218:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x49223:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x49227:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x49231:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x49235:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x49239:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x49243:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x49247:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x49251:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x49255:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x49259:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x49263:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x49267:	mov [bp + 27], bp	; 3: 137 110 27
x49270:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary3030 pointer
x49274:	mov si, bp	; 2: 137 238
x49276:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary3030 8
x49279:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x49282:	mov ax, [bp + 6]	; 3: 139 70 6
x49285:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x49288:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 150 192
x49293:	mov [bp + 23], bp	; 3: 137 110 23
x49296:	add bp, 21	; 3: 131 197 21
x49299:	jmp strtoul	; 3: 233 110 2

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary3031

strtoul_test$407:	; Assign value £temporary3031
x49302:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49306:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$410:	; Parameter 25 text 8
x49311:	mov [bp + 33], bp	; 3: 137 110 33
x49314:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x49318:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49322:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x49326:	mov ax, [bp + 19]	; 3: 139 70 19
x49329:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x49332:	mov ax, [bp + 6]	; 3: 139 70 6
x49335:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x49338:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 205 192
x49343:	mov [bp + 27], bp	; 3: 137 110 27
x49346:	add bp, 25	; 3: 131 197 25
x49349:	mov di, bp	; 2: 137 239
x49351:	add di, 10	; 3: 131 199 10
x49354:	jmp printf	; 3: 233 248 75

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x49357:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x49362:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x49366:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x49370:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x49374:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x49378:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x49382:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x49386:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x49390:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x49394:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x49398:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x49402:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x49406:	mov [bp + 27], bp	; 3: 137 110 27
x49409:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary3044 pointer
x49413:	mov si, bp	; 2: 137 238
x49415:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary3044 8
x49418:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x49421:	mov ax, [bp + 6]	; 3: 139 70 6
x49424:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x49427:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 33 193
x49432:	mov [bp + 23], bp	; 3: 137 110 23
x49435:	add bp, 21	; 3: 131 197 21
x49438:	jmp strtoul	; 3: 233 227 1

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary3045

strtoul_test$436:	; Assign value £temporary3045
x49441:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49445:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$439:	; Parameter 25 text 8
x49450:	mov [bp + 33], bp	; 3: 137 110 33
x49453:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x49457:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49461:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x49465:	mov ax, [bp + 19]	; 3: 139 70 19
x49468:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x49471:	mov ax, [bp + 6]	; 3: 139 70 6
x49474:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x49477:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 88 193
x49482:	mov [bp + 27], bp	; 3: 137 110 27
x49485:	add bp, 25	; 3: 131 197 25
x49488:	mov di, bp	; 2: 137 239
x49490:	add di, 10	; 3: 131 199 10
x49493:	jmp printf	; 3: 233 109 75

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x49496:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x49501:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x49505:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x49509:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x49513:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x49517:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x49521:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x49525:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x49529:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x49533:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x49537:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x49541:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x49545:	mov [bp + 27], bp	; 3: 137 110 27
x49548:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary3058 pointer
x49552:	mov si, bp	; 2: 137 238
x49554:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary3058 8
x49557:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x49560:	mov ax, [bp + 6]	; 3: 139 70 6
x49563:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x49566:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 172 193
x49571:	mov [bp + 23], bp	; 3: 137 110 23
x49574:	add bp, 21	; 3: 131 197 21
x49577:	jmp strtoul	; 3: 233 88 1

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary3059

strtoul_test$465:	; Assign value £temporary3059
x49580:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49584:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$468:	; Parameter 25 text 8
x49589:	mov [bp + 33], bp	; 3: 137 110 33
x49592:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x49596:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49600:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x49604:	mov ax, [bp + 19]	; 3: 139 70 19
x49607:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x49610:	mov ax, [bp + 6]	; 3: 139 70 6
x49613:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x49616:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 227 193
x49621:	mov [bp + 27], bp	; 3: 137 110 27
x49624:	add bp, 25	; 3: 131 197 25
x49627:	mov di, bp	; 2: 137 239
x49629:	add di, 10	; 3: 131 199 10
x49632:	jmp printf	; 3: 233 226 74

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x49635:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x49640:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x49644:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x49648:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x49652:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x49656:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x49660:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x49664:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x49668:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x49672:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x49676:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x49680:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x49684:	mov [bp + 27], bp	; 3: 137 110 27
x49687:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary3072 pointer
x49691:	mov si, bp	; 2: 137 238
x49693:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary3072 8
x49696:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x49699:	mov ax, [bp + 6]	; 3: 139 70 6
x49702:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x49705:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 55 194
x49710:	mov [bp + 23], bp	; 3: 137 110 23
x49713:	add bp, 21	; 3: 131 197 21
x49716:	jmp strtoul	; 3: 233 205 0

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary3073

strtoul_test$494:	; Assign value £temporary3073
x49719:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49723:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$497:	; Parameter 25 text 8
x49728:	mov [bp + 33], bp	; 3: 137 110 33
x49731:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x49735:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49739:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x49743:	mov ax, [bp + 19]	; 3: 139 70 19
x49746:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x49749:	mov ax, [bp + 6]	; 3: 139 70 6
x49752:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x49755:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 110 194
x49760:	mov [bp + 27], bp	; 3: 137 110 27
x49763:	add bp, 25	; 3: 131 197 25
x49766:	mov di, bp	; 2: 137 239
x49768:	add di, 10	; 3: 131 199 10
x49771:	jmp printf	; 3: 233 87 74

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x49774:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x49779:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x49783:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x49787:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x49791:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x49795:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x49799:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x49803:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x49807:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x49811:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x49815:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x49819:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x49823:	mov [bp + 27], bp	; 3: 137 110 27
x49826:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary3086 pointer
x49830:	mov si, bp	; 2: 137 238
x49832:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary3086 8
x49835:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x49838:	mov ax, [bp + 6]	; 3: 139 70 6
x49841:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x49844:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 194 194
x49849:	mov [bp + 23], bp	; 3: 137 110 23
x49852:	add bp, 21	; 3: 131 197 21
x49855:	nop	; 1: 144
x49856:	jmp strtoul	; 2: 235 66

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary3087

strtoul_test$523:	; Assign value £temporary3087
x49858:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x49862:	mov word [bp + 31], string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 184

strtoul_test$526:	; Parameter 25 text 8
x49867:	mov [bp + 33], bp	; 3: 137 110 33
x49870:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x49874:	mov eax, [bp + 21]	; 4: 102 139 70 21
x49878:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x49882:	mov ax, [bp + 19]	; 3: 139 70 19
x49885:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x49888:	mov ax, [bp + 6]	; 3: 139 70 6
x49891:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x49894:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 249 194
x49899:	mov [bp + 27], bp	; 3: 137 110 27
x49902:	add bp, 25	; 3: 131 197 25
x49905:	mov di, bp	; 2: 137 239
x49907:	add di, 10	; 3: 131 199 10
x49910:	jmp printf	; 3: 233 204 73

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x49913:	mov ax, [bp]	; 3: 139 70 0
x49916:	mov di, [bp + 4]	; 3: 139 126 4
x49919:	mov bp, [bp + 2]	; 3: 139 110 2
x49922:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

strtoul:	; Assign g_inStatus 1
x49924:	mov word [g_inStatus], 1	; 6: 199 6 248 84 1 0

strtoul$1:	; Assign g_inDevice s
x49930:	mov ax, [bp + 6]	; 3: 139 70 6
x49933:	mov [g_inDevice], ax	; 3: 163 250 84

strtoul$2:	; Assign g_inChars 0
x49936:	mov word [g_inChars], 0	; 6: 199 6 30 90 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x49942:	mov ax, [bp + 10]	; 3: 139 70 10
x49945:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x49948:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 42 195
x49953:	mov [bp + 14], bp	; 3: 137 110 14
x49956:	add bp, 12	; 3: 131 197 12
x49959:	jmp scanUnsignedLongInt	; 3: 233 56 158

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2822

strtoul$8:	; Assign unsignedLongValue £temporary2822
x49962:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x49966:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49970:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2824 -> endp endp 0
x49972:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2824 -> endp s g_inChars
x49975:	mov ax, [bp + 6]	; 3: 139 70 6
x49978:	add ax, [g_inChars]	; 4: 3 6 30 90
x49982:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x49984:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x49988:	mov ax, [bp]	; 3: 139 70 0
x49991:	mov di, [bp + 4]	; 3: 139 126 4
x49994:	mov bp, [bp + 2]	; 3: 139 110 2
x49997:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x49999:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x50003:	mov word [bp + 6], character_test$3	; 5: 199 70 6 97 195
x50008:	mov [bp + 8], bp	; 3: 137 110 8
x50011:	add bp, 6	; 3: 131 197 6
x50014:	nop	; 1: 144
x50015:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x50017:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x50021:	mov word [bp + 6], character_test$7	; 5: 199 70 6 115 195
x50026:	mov [bp + 8], bp	; 3: 137 110 8
x50029:	add bp, 6	; 3: 131 197 6
x50032:	nop	; 1: 144
x50033:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x50035:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x50039:	mov word [bp + 6], character_test$11	; 5: 199 70 6 133 195
x50044:	mov [bp + 8], bp	; 3: 137 110 8
x50047:	add bp, 6	; 3: 131 197 6
x50050:	nop	; 1: 144
x50051:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x50053:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x50057:	mov word [bp + 6], character_test$15	; 5: 199 70 6 151 195
x50062:	mov [bp + 8], bp	; 3: 137 110 8
x50065:	add bp, 6	; 3: 131 197 6
x50068:	nop	; 1: 144
x50069:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x50071:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x50075:	mov word [bp + 6], character_test$19	; 5: 199 70 6 169 195
x50080:	mov [bp + 8], bp	; 3: 137 110 8
x50083:	add bp, 6	; 3: 131 197 6
x50086:	nop	; 1: 144
x50087:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x50089:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x50093:	mov word [bp + 6], character_test$23	; 5: 199 70 6 187 195
x50098:	mov [bp + 8], bp	; 3: 137 110 8
x50101:	add bp, 6	; 3: 131 197 6
x50104:	nop	; 1: 144
x50105:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x50107:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x50111:	mov word [bp + 6], character_test$27	; 5: 199 70 6 205 195
x50116:	mov [bp + 8], bp	; 3: 137 110 8
x50119:	add bp, 6	; 3: 131 197 6
x50122:	nop	; 1: 144
x50123:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x50125:	mov ax, [bp]	; 3: 139 70 0
x50128:	mov di, [bp + 4]	; 3: 139 126 4
x50131:	mov bp, [bp + 2]	; 3: 139 110 2
x50134:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x50136:	mov word [bp + 13], string_ascii2025i0A#	; 5: 199 70 13 150 200

character_testX$2:	; IntegralToIntegral £temporary4232 c
x50141:	mov al, [bp + 6]	; 3: 138 70 6
x50144:	and ax, 255	; 3: 37 255 0
x50147:	cmp al, 0	; 2: 60 0
x50149:	jge character_testX$3	; 2: 125 4
x50151:	neg al	; 2: 246 216
x50153:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4232 8
x50155:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x50158:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 1 196
x50163:	mov [bp + 9], bp	; 3: 137 110 9
x50166:	add bp, 7	; 3: 131 197 7
x50169:	mov di, bp	; 2: 137 239
x50171:	add di, 2	; 3: 131 199 2
x50174:	jmp printf	; 3: 233 196 72

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x50177:	mov word [bp + 13], string_islower282725c2729203D2025s0A#	; 5: 199 70 13 160 200

character_testX$8:	; IntegralToIntegral £temporary4234 c
x50182:	mov al, [bp + 6]	; 3: 138 70 6
x50185:	and ax, 255	; 3: 37 255 0
x50188:	cmp al, 0	; 2: 60 0
x50190:	jge character_testX$9	; 2: 125 4
x50192:	neg al	; 2: 246 216
x50194:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4234 8
x50196:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4235 c
x50199:	mov al, [bp + 6]	; 3: 138 70 6
x50202:	and ax, 255	; 3: 37 255 0
x50205:	cmp al, 0	; 2: 60 0
x50207:	jge character_testX$12	; 2: 125 4
x50209:	neg al	; 2: 246 216
x50211:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4235 16
x50213:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x50216:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 54 196
x50221:	mov [bp + 19], bp	; 3: 137 110 19
x50224:	add bp, 17	; 3: 131 197 17
x50227:	jmp islower	; 3: 233 195 155

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4236

character_testX$16:	; Equal 19 £temporary4236 0
x50230:	cmp bx, 0	; 3: 131 251 0
x50233:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4241 string_Yes#
x50235:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$18:	; Goto 20
x50238:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4241 string_No#
x50240:	mov ax, string_No#	; 3: 184 204 77

character_testX$20:	; Parameter 7 £temporary4241 10
x50243:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x50246:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 89 196
x50251:	mov [bp + 9], bp	; 3: 137 110 9
x50254:	add bp, 7	; 3: 131 197 7
x50257:	mov di, bp	; 2: 137 239
x50259:	add di, 4	; 3: 131 199 4
x50262:	jmp printf	; 3: 233 108 72

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x50265:	mov word [bp + 13], string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 180 200

character_testX$25:	; IntegralToIntegral £temporary4243 c
x50270:	mov al, [bp + 6]	; 3: 138 70 6
x50273:	and ax, 255	; 3: 37 255 0
x50276:	cmp al, 0	; 2: 60 0
x50278:	jge character_testX$26	; 2: 125 4
x50280:	neg al	; 2: 246 216
x50282:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4243 8
x50284:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4244 c
x50287:	mov al, [bp + 6]	; 3: 138 70 6
x50290:	and ax, 255	; 3: 37 255 0
x50293:	cmp al, 0	; 2: 60 0
x50295:	jge character_testX$29	; 2: 125 4
x50297:	neg al	; 2: 246 216
x50299:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4244 16
x50301:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x50304:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 142 196
x50309:	mov [bp + 19], bp	; 3: 137 110 19
x50312:	add bp, 17	; 3: 131 197 17
x50315:	jmp isupper	; 3: 233 59 89

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4245

character_testX$33:	; Equal 36 £temporary4245 0
x50318:	cmp bx, 0	; 3: 131 251 0
x50321:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4250 string_Yes#
x50323:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$35:	; Goto 37
x50326:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4250 string_No#
x50328:	mov ax, string_No#	; 3: 184 204 77

character_testX$37:	; Parameter 7 £temporary4250 10
x50331:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x50334:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 177 196
x50339:	mov [bp + 9], bp	; 3: 137 110 9
x50342:	add bp, 7	; 3: 131 197 7
x50345:	mov di, bp	; 2: 137 239
x50347:	add di, 4	; 3: 131 199 4
x50350:	jmp printf	; 3: 233 20 72

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x50353:	mov word [bp + 13], string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 200 200

character_testX$42:	; IntegralToIntegral £temporary4252 c
x50358:	mov al, [bp + 6]	; 3: 138 70 6
x50361:	and ax, 255	; 3: 37 255 0
x50364:	cmp al, 0	; 2: 60 0
x50366:	jge character_testX$43	; 2: 125 4
x50368:	neg al	; 2: 246 216
x50370:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4252 8
x50372:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4253 c
x50375:	mov al, [bp + 6]	; 3: 138 70 6
x50378:	and ax, 255	; 3: 37 255 0
x50381:	cmp al, 0	; 2: 60 0
x50383:	jge character_testX$46	; 2: 125 4
x50385:	neg al	; 2: 246 216
x50387:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4253 16
x50389:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x50392:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 230 196
x50397:	mov [bp + 19], bp	; 3: 137 110 19
x50400:	add bp, 17	; 3: 131 197 17
x50403:	jmp isalpha	; 3: 233 196 4

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4254

character_testX$50:	; Equal 53 £temporary4254 0
x50406:	cmp bx, 0	; 3: 131 251 0
x50409:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4259 string_Yes#
x50411:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$52:	; Goto 54
x50414:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4259 string_No#
x50416:	mov ax, string_No#	; 3: 184 204 77

character_testX$54:	; Parameter 7 £temporary4259 10
x50419:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x50422:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 9 197
x50427:	mov [bp + 9], bp	; 3: 137 110 9
x50430:	add bp, 7	; 3: 131 197 7
x50433:	mov di, bp	; 2: 137 239
x50435:	add di, 4	; 3: 131 199 4
x50438:	jmp printf	; 3: 233 188 71

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x50441:	mov word [bp + 13], string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 220 200

character_testX$59:	; IntegralToIntegral £temporary4261 c
x50446:	mov al, [bp + 6]	; 3: 138 70 6
x50449:	and ax, 255	; 3: 37 255 0
x50452:	cmp al, 0	; 2: 60 0
x50454:	jge character_testX$60	; 2: 125 4
x50456:	neg al	; 2: 246 216
x50458:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4261 8
x50460:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4262 c
x50463:	mov al, [bp + 6]	; 3: 138 70 6
x50466:	and ax, 255	; 3: 37 255 0
x50469:	cmp al, 0	; 2: 60 0
x50471:	jge character_testX$63	; 2: 125 4
x50473:	neg al	; 2: 246 216
x50475:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4262 16
x50477:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x50480:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 62 197
x50485:	mov [bp + 19], bp	; 3: 137 110 19
x50488:	add bp, 17	; 3: 131 197 17
x50491:	jmp isdigit	; 3: 233 191 101

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4263

character_testX$67:	; Equal 70 £temporary4263 0
x50494:	cmp bx, 0	; 3: 131 251 0
x50497:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4268 string_Yes#
x50499:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$69:	; Goto 71
x50502:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4268 string_No#
x50504:	mov ax, string_No#	; 3: 184 204 77

character_testX$71:	; Parameter 7 £temporary4268 10
x50507:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x50510:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 97 197
x50515:	mov [bp + 9], bp	; 3: 137 110 9
x50518:	add bp, 7	; 3: 131 197 7
x50521:	mov di, bp	; 2: 137 239
x50523:	add di, 4	; 3: 131 199 4
x50526:	jmp printf	; 3: 233 100 71

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x50529:	mov word [bp + 13], string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 240 200

character_testX$76:	; IntegralToIntegral £temporary4270 c
x50534:	mov al, [bp + 6]	; 3: 138 70 6
x50537:	and ax, 255	; 3: 37 255 0
x50540:	cmp al, 0	; 2: 60 0
x50542:	jge character_testX$77	; 2: 125 4
x50544:	neg al	; 2: 246 216
x50546:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4270 8
x50548:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4271 c
x50551:	mov al, [bp + 6]	; 3: 138 70 6
x50554:	and ax, 255	; 3: 37 255 0
x50557:	cmp al, 0	; 2: 60 0
x50559:	jge character_testX$80	; 2: 125 4
x50561:	neg al	; 2: 246 216
x50563:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4271 16
x50565:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x50568:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 150 197
x50573:	mov [bp + 19], bp	; 3: 137 110 19
x50576:	add bp, 17	; 3: 131 197 17
x50579:	jmp isalnum	; 3: 233 89 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4272

character_testX$84:	; Equal 87 £temporary4272 0
x50582:	cmp bx, 0	; 3: 131 251 0
x50585:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4277 string_Yes#
x50587:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$86:	; Goto 88
x50590:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4277 string_No#
x50592:	mov ax, string_No#	; 3: 184 204 77

character_testX$88:	; Parameter 7 £temporary4277 10
x50595:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x50598:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 185 197
x50603:	mov [bp + 9], bp	; 3: 137 110 9
x50606:	add bp, 7	; 3: 131 197 7
x50609:	mov di, bp	; 2: 137 239
x50611:	add di, 4	; 3: 131 199 4
x50614:	jmp printf	; 3: 233 12 71

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x50617:	mov word [bp + 13], string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 4 201

character_testX$93:	; IntegralToIntegral £temporary4279 c
x50622:	mov al, [bp + 6]	; 3: 138 70 6
x50625:	and ax, 255	; 3: 37 255 0
x50628:	cmp al, 0	; 2: 60 0
x50630:	jge character_testX$94	; 2: 125 4
x50632:	neg al	; 2: 246 216
x50634:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4279 8
x50636:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4280 c
x50639:	mov al, [bp + 6]	; 3: 138 70 6
x50642:	and ax, 255	; 3: 37 255 0
x50645:	cmp al, 0	; 2: 60 0
x50647:	jge character_testX$97	; 2: 125 4
x50649:	neg al	; 2: 246 216
x50651:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4280 16
x50653:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x50656:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 238 197
x50661:	mov [bp + 19], bp	; 3: 137 110 19
x50664:	add bp, 17	; 3: 131 197 17
x50667:	jmp isxdigit	; 3: 233 70 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4281

character_testX$101:	; Equal 104 £temporary4281 0
x50670:	cmp bx, 0	; 3: 131 251 0
x50673:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4286 string_Yes#
x50675:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$103:	; Goto 105
x50678:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4286 string_No#
x50680:	mov ax, string_No#	; 3: 184 204 77

character_testX$105:	; Parameter 7 £temporary4286 10
x50683:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x50686:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 17 198
x50691:	mov [bp + 9], bp	; 3: 137 110 9
x50694:	add bp, 7	; 3: 131 197 7
x50697:	mov di, bp	; 2: 137 239
x50699:	add di, 4	; 3: 131 199 4
x50702:	jmp printf	; 3: 233 180 70

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x50705:	mov word [bp + 13], string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 25 201

character_testX$110:	; IntegralToIntegral £temporary4288 c
x50710:	mov al, [bp + 6]	; 3: 138 70 6
x50713:	and ax, 255	; 3: 37 255 0
x50716:	cmp al, 0	; 2: 60 0
x50718:	jge character_testX$111	; 2: 125 4
x50720:	neg al	; 2: 246 216
x50722:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4288 8
x50724:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4289 c
x50727:	mov al, [bp + 6]	; 3: 138 70 6
x50730:	and ax, 255	; 3: 37 255 0
x50733:	cmp al, 0	; 2: 60 0
x50735:	jge character_testX$114	; 2: 125 4
x50737:	neg al	; 2: 246 216
x50739:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4289 16
x50741:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x50744:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 70 198
x50749:	mov [bp + 19], bp	; 3: 137 110 19
x50752:	add bp, 17	; 3: 131 197 17
x50755:	jmp isgraph	; 3: 233 50 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4290

character_testX$118:	; Equal 121 £temporary4290 0
x50758:	cmp bx, 0	; 3: 131 251 0
x50761:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4295 string_Yes#
x50763:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$120:	; Goto 122
x50766:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4295 string_No#
x50768:	mov ax, string_No#	; 3: 184 204 77

character_testX$122:	; Parameter 7 £temporary4295 10
x50771:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x50774:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 105 198
x50779:	mov [bp + 9], bp	; 3: 137 110 9
x50782:	add bp, 7	; 3: 131 197 7
x50785:	mov di, bp	; 2: 137 239
x50787:	add di, 4	; 3: 131 199 4
x50790:	jmp printf	; 3: 233 92 70

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x50793:	mov word [bp + 13], string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 45 201

character_testX$127:	; IntegralToIntegral £temporary4297 c
x50798:	mov al, [bp + 6]	; 3: 138 70 6
x50801:	and ax, 255	; 3: 37 255 0
x50804:	cmp al, 0	; 2: 60 0
x50806:	jge character_testX$128	; 2: 125 4
x50808:	neg al	; 2: 246 216
x50810:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4297 8
x50812:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4298 c
x50815:	mov al, [bp + 6]	; 3: 138 70 6
x50818:	and ax, 255	; 3: 37 255 0
x50821:	cmp al, 0	; 2: 60 0
x50823:	jge character_testX$131	; 2: 125 4
x50825:	neg al	; 2: 246 216
x50827:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4298 16
x50829:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x50832:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 158 198
x50837:	mov [bp + 19], bp	; 3: 137 110 19
x50840:	add bp, 17	; 3: 131 197 17
x50843:	jmp isprint	; 3: 233 249 3

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4299

character_testX$135:	; Equal 138 £temporary4299 0
x50846:	cmp bx, 0	; 3: 131 251 0
x50849:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4304 string_Yes#
x50851:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$137:	; Goto 139
x50854:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4304 string_No#
x50856:	mov ax, string_No#	; 3: 184 204 77

character_testX$139:	; Parameter 7 £temporary4304 10
x50859:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x50862:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 193 198
x50867:	mov [bp + 9], bp	; 3: 137 110 9
x50870:	add bp, 7	; 3: 131 197 7
x50873:	mov di, bp	; 2: 137 239
x50875:	add di, 4	; 3: 131 199 4
x50878:	jmp printf	; 3: 233 4 70

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x50881:	mov word [bp + 13], string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 65 201

character_testX$144:	; IntegralToIntegral £temporary4306 c
x50886:	mov al, [bp + 6]	; 3: 138 70 6
x50889:	and ax, 255	; 3: 37 255 0
x50892:	cmp al, 0	; 2: 60 0
x50894:	jge character_testX$145	; 2: 125 4
x50896:	neg al	; 2: 246 216
x50898:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4306 8
x50900:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4307 c
x50903:	mov al, [bp + 6]	; 3: 138 70 6
x50906:	and ax, 255	; 3: 37 255 0
x50909:	cmp al, 0	; 2: 60 0
x50911:	jge character_testX$148	; 2: 125 4
x50913:	neg al	; 2: 246 216
x50915:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4307 16
x50917:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x50920:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 246 198
x50925:	mov [bp + 19], bp	; 3: 137 110 19
x50928:	add bp, 17	; 3: 131 197 17
x50931:	jmp ispunct	; 3: 233 211 3

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4308

character_testX$152:	; Equal 155 £temporary4308 0
x50934:	cmp bx, 0	; 3: 131 251 0
x50937:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4313 string_Yes#
x50939:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$154:	; Goto 156
x50942:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4313 string_No#
x50944:	mov ax, string_No#	; 3: 184 204 77

character_testX$156:	; Parameter 7 £temporary4313 10
x50947:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x50950:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 25 199
x50955:	mov [bp + 9], bp	; 3: 137 110 9
x50958:	add bp, 7	; 3: 131 197 7
x50961:	mov di, bp	; 2: 137 239
x50963:	add di, 4	; 3: 131 199 4
x50966:	jmp printf	; 3: 233 172 69

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x50969:	mov word [bp + 13], string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 85 201

character_testX$161:	; IntegralToIntegral £temporary4315 c
x50974:	mov al, [bp + 6]	; 3: 138 70 6
x50977:	and ax, 255	; 3: 37 255 0
x50980:	cmp al, 0	; 2: 60 0
x50982:	jge character_testX$162	; 2: 125 4
x50984:	neg al	; 2: 246 216
x50986:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4315 8
x50988:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4316 c
x50991:	mov al, [bp + 6]	; 3: 138 70 6
x50994:	and ax, 255	; 3: 37 255 0
x50997:	cmp al, 0	; 2: 60 0
x50999:	jge character_testX$165	; 2: 125 4
x51001:	neg al	; 2: 246 216
x51003:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4316 16
x51005:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x51008:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 78 199
x51013:	mov [bp + 19], bp	; 3: 137 110 19
x51016:	add bp, 17	; 3: 131 197 17
x51019:	jmp iscntrl	; 3: 233 192 3

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4317

character_testX$169:	; Equal 172 £temporary4317 0
x51022:	cmp bx, 0	; 3: 131 251 0
x51025:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4322 string_Yes#
x51027:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$171:	; Goto 173
x51030:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4322 string_No#
x51032:	mov ax, string_No#	; 3: 184 204 77

character_testX$173:	; Parameter 7 £temporary4322 10
x51035:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x51038:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 113 199
x51043:	mov [bp + 9], bp	; 3: 137 110 9
x51046:	add bp, 7	; 3: 131 197 7
x51049:	mov di, bp	; 2: 137 239
x51051:	add di, 4	; 3: 131 199 4
x51054:	jmp printf	; 3: 233 84 69

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x51057:	mov word [bp + 13], string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 105 201

character_testX$178:	; IntegralToIntegral £temporary4324 c
x51062:	mov al, [bp + 6]	; 3: 138 70 6
x51065:	and ax, 255	; 3: 37 255 0
x51068:	cmp al, 0	; 2: 60 0
x51070:	jge character_testX$179	; 2: 125 4
x51072:	neg al	; 2: 246 216
x51074:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4324 8
x51076:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4325 c
x51079:	mov al, [bp + 6]	; 3: 138 70 6
x51082:	and ax, 255	; 3: 37 255 0
x51085:	cmp al, 0	; 2: 60 0
x51087:	jge character_testX$182	; 2: 125 4
x51089:	neg al	; 2: 246 216
x51091:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4325 16
x51093:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x51096:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 166 199
x51101:	mov [bp + 19], bp	; 3: 137 110 19
x51104:	add bp, 17	; 3: 131 197 17
x51107:	jmp isspace	; 3: 233 75 149

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4326

character_testX$186:	; Equal 189 £temporary4326 0
x51110:	cmp bx, 0	; 3: 131 251 0
x51113:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4331 string_Yes#
x51115:	mov ax, string_Yes#	; 3: 184 200 77

character_testX$188:	; Goto 190
x51118:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4331 string_No#
x51120:	mov ax, string_No#	; 3: 184 204 77

character_testX$190:	; Parameter 7 £temporary4331 10
x51123:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x51126:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 201 199
x51131:	mov [bp + 9], bp	; 3: 137 110 9
x51134:	add bp, 7	; 3: 131 197 7
x51137:	mov di, bp	; 2: 137 239
x51139:	add di, 4	; 3: 131 199 4
x51142:	jmp printf	; 3: 233 252 68

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x51145:	mov word [bp + 13], string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 125 201

character_testX$195:	; IntegralToIntegral £temporary4333 c
x51150:	mov al, [bp + 6]	; 3: 138 70 6
x51153:	and ax, 255	; 3: 37 255 0
x51156:	cmp al, 0	; 2: 60 0
x51158:	jge character_testX$196	; 2: 125 4
x51160:	neg al	; 2: 246 216
x51162:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4333 8
x51164:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4334 c
x51167:	mov al, [bp + 6]	; 3: 138 70 6
x51170:	and ax, 255	; 3: 37 255 0
x51173:	cmp al, 0	; 2: 60 0
x51175:	jge character_testX$199	; 2: 125 4
x51177:	neg al	; 2: 246 216
x51179:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4334 16
x51181:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x51184:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 254 199
x51189:	mov [bp + 19], bp	; 3: 137 110 19
x51192:	add bp, 17	; 3: 131 197 17
x51195:	jmp tolower	; 3: 233 217 92

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4335

character_testX$203:	; IntegralToIntegral £temporary4336 £temporary4335
x51198:	cmp bx, 0	; 3: 131 251 0
x51201:	jge character_testX$204	; 2: 125 4
x51203:	neg bx	; 2: 247 219
x51205:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4337 £temporary4336
x51207:	and bx, 255	; 4: 129 227 255 0
x51211:	cmp bl, 0	; 3: 128 251 0
x51214:	jge character_testX$205	; 2: 125 4
x51216:	neg bl	; 2: 246 219
x51218:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4337 10
x51220:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x51223:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 42 200
x51228:	mov [bp + 9], bp	; 3: 137 110 9
x51231:	add bp, 7	; 3: 131 197 7
x51234:	mov di, bp	; 2: 137 239
x51236:	add di, 4	; 3: 131 199 4
x51239:	jmp printf	; 3: 233 155 68

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x51242:	mov word [bp + 13], string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 147 201

character_testX$210:	; IntegralToIntegral £temporary4339 c
x51247:	mov al, [bp + 6]	; 3: 138 70 6
x51250:	and ax, 255	; 3: 37 255 0
x51253:	cmp al, 0	; 2: 60 0
x51255:	jge character_testX$211	; 2: 125 4
x51257:	neg al	; 2: 246 216
x51259:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4339 8
x51261:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4340 c
x51264:	mov al, [bp + 6]	; 3: 138 70 6
x51267:	and ax, 255	; 3: 37 255 0
x51270:	cmp al, 0	; 2: 60 0
x51272:	jge character_testX$214	; 2: 125 4
x51274:	neg al	; 2: 246 216
x51276:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4340 16
x51278:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x51281:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 95 200
x51286:	mov [bp + 19], bp	; 3: 137 110 19
x51289:	add bp, 17	; 3: 131 197 17
x51292:	jmp toupper	; 3: 233 219 2

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4341

character_testX$218:	; IntegralToIntegral £temporary4342 £temporary4341
x51295:	cmp bx, 0	; 3: 131 251 0
x51298:	jge character_testX$219	; 2: 125 4
x51300:	neg bx	; 2: 247 219
x51302:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4343 £temporary4342
x51304:	and bx, 255	; 4: 129 227 255 0
x51308:	cmp bl, 0	; 3: 128 251 0
x51311:	jge character_testX$220	; 2: 125 4
x51313:	neg bl	; 2: 246 219
x51315:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4343 10
x51317:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x51320:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 139 200
x51325:	mov [bp + 9], bp	; 3: 137 110 9
x51328:	add bp, 7	; 3: 131 197 7
x51331:	mov di, bp	; 2: 137 239
x51333:	add di, 4	; 3: 131 199 4
x51336:	jmp printf	; 3: 233 58 68

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x51339:	mov ax, [bp]	; 3: 139 70 0
x51342:	mov di, [bp + 4]	; 3: 139 126 4
x51345:	mov bp, [bp + 2]	; 3: 139 110 2
x51348:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

string_ascii2025i0A#:
x51350:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

string_islower282725c2729203D2025s0A#:
x51360:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isupper282725c2729203D2025s0A#:
x51380:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isalpha282725c2729203D2025s0A#:
x51400:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isdigit282725c2729203D2025s0A#:
x51420:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isalnum282725c2729203D2025s0A#:
x51440:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isxdigit282725c2729203D2025s0A#:
x51460:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isgraph282725c2729203D2025s0A#:
x51481:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isprint282725c2729203D2025s0A#:
x51501:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

string_ispunct282725c2729203D2025s0A#:
x51521:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

string_iscntrl282725c2729203D2025s0A#:
x51541:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

string_isspace282725c2729203D2025s0A#:
x51561:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

string_tolower282725c2729203D202725c270A#:
x51581:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

string_toupper282725c2729203D202725c270A0A#:
x51603:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x51626:	mov ax, [bp + 6]	; 3: 139 70 6
x51629:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x51632:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 190 201
x51637:	mov [bp + 10], bp	; 3: 137 110 10
x51640:	add bp, 8	; 3: 131 197 8
x51643:	jmp islower	; 3: 233 59 150

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary372

isalpha$5:	; NotEqual 12 £temporary372 0
x51646:	cmp bx, 0	; 3: 131 251 0
x51649:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x51651:	mov ax, [bp + 6]	; 3: 139 70 6
x51654:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x51657:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 215 201
x51662:	mov [bp + 10], bp	; 3: 137 110 10
x51665:	add bp, 8	; 3: 131 197 8
x51668:	jmp isupper	; 3: 233 242 83

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary373

isalpha$11:	; Equal 14 £temporary373 0
x51671:	cmp bx, 0	; 3: 131 251 0
x51674:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary377 1
x51676:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x51679:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary377 0
x51681:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary377

isalpha$16:	; Return £temporary377
x51684:	mov ax, [bp]	; 3: 139 70 0
x51687:	mov di, [bp + 4]	; 3: 139 126 4
x51690:	mov bp, [bp + 2]	; 3: 139 110 2
x51693:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x51695:	mov ax, [bp + 6]	; 3: 139 70 6
x51698:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x51701:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 3 202
x51706:	mov [bp + 10], bp	; 3: 137 110 10
x51709:	add bp, 8	; 3: 131 197 8
x51712:	nop	; 1: 144
x51713:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary384

isalnum$5:	; NotEqual 12 £temporary384 0
x51715:	cmp bx, 0	; 3: 131 251 0
x51718:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x51720:	mov ax, [bp + 6]	; 3: 139 70 6
x51723:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x51726:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 28 202
x51731:	mov [bp + 10], bp	; 3: 137 110 10
x51734:	add bp, 8	; 3: 131 197 8
x51737:	jmp isdigit	; 3: 233 225 96

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary385

isalnum$11:	; Equal 14 £temporary385 0
x51740:	cmp bx, 0	; 3: 131 251 0
x51743:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary389 1
x51745:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x51748:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary389 0
x51750:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary389

isalnum$16:	; Return £temporary389
x51753:	mov ax, [bp]	; 3: 139 70 0
x51756:	mov di, [bp + 4]	; 3: 139 126 4
x51759:	mov bp, [bp + 2]	; 3: 139 110 2
x51762:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x51764:	mov ax, [bp + 6]	; 3: 139 70 6
x51767:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x51770:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 72 202
x51775:	mov [bp + 10], bp	; 3: 137 110 10
x51778:	add bp, 8	; 3: 131 197 8
x51781:	jmp isdigit	; 3: 233 181 96

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary392

isxdigit$5:	; NotEqual 10 £temporary392 0
x51784:	cmp bx, 0	; 3: 131 251 0
x51787:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x51789:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x51793:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x51795:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x51799:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x51801:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x51805:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x51807:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x51811:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary402 1
x51813:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x51816:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary402 0
x51818:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary402

isxdigit$14:	; Return £temporary402
x51821:	mov ax, [bp]	; 3: 139 70 0
x51824:	mov di, [bp + 4]	; 3: 139 126 4
x51827:	mov bp, [bp + 2]	; 3: 139 110 2
x51830:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x51832:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x51836:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x51838:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x51842:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary407 1
x51844:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x51847:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary407 0
x51849:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary407

isgraph$6:	; Return £temporary407
x51852:	mov ax, [bp]	; 3: 139 70 0
x51855:	mov di, [bp + 4]	; 3: 139 126 4
x51858:	mov bp, [bp + 2]	; 3: 139 110 2
x51861:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x51863:	mov ax, [bp + 6]	; 3: 139 70 6
x51866:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x51869:	mov word [bp + 8], isprint$3	; 5: 199 70 8 171 202
x51874:	mov [bp + 10], bp	; 3: 137 110 10
x51877:	add bp, 8	; 3: 131 197 8
x51880:	nop	; 1: 144
x51881:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary408

isprint$5:	; Equal 9 £temporary408 0
x51883:	cmp bx, 0	; 3: 131 251 0
x51886:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x51888:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x51892:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary412 1
x51894:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x51897:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary412 0
x51899:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary412

isprint$11:	; Return £temporary412
x51902:	mov ax, [bp]	; 3: 139 70 0
x51905:	mov di, [bp + 4]	; 3: 139 126 4
x51908:	mov bp, [bp + 2]	; 3: 139 110 2
x51911:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x51913:	mov ax, [bp + 6]	; 3: 139 70 6
x51916:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x51919:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 221 202
x51924:	mov [bp + 10], bp	; 3: 137 110 10
x51927:	add bp, 8	; 3: 131 197 8
x51930:	nop	; 1: 144
x51931:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary414

ispunct$5:	; Equal 14 £temporary414 0
x51933:	cmp bx, 0	; 3: 131 251 0
x51936:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x51938:	mov ax, [bp + 6]	; 3: 139 70 6
x51941:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x51944:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 246 202
x51949:	mov [bp + 10], bp	; 3: 137 110 10
x51952:	add bp, 8	; 3: 131 197 8
x51955:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary415

ispunct$11:	; NotEqual 14 £temporary415 0
x51958:	cmp bx, 0	; 3: 131 251 0
x51961:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary420 1
x51963:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x51966:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary420 0
x51968:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary420

ispunct$16:	; Return £temporary420
x51971:	mov ax, [bp]	; 3: 139 70 0
x51974:	mov di, [bp + 4]	; 3: 139 126 4
x51977:	mov bp, [bp + 2]	; 3: 139 110 2
x51980:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x51982:	mov ax, [bp + 6]	; 3: 139 70 6
x51985:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x51988:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 34 203
x51993:	mov [bp + 10], bp	; 3: 137 110 10
x51996:	add bp, 8	; 3: 131 197 8
x51999:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary423

iscntrl$5:	; NotEqual 8 £temporary423 0
x52002:	cmp bx, 0	; 3: 131 251 0
x52005:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary426 1
x52007:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x52010:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary426 0
x52012:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary426

iscntrl$10:	; Return £temporary426
x52015:	mov ax, [bp]	; 3: 139 70 0
x52018:	mov di, [bp + 4]	; 3: 139 126 4
x52021:	mov bp, [bp + 2]	; 3: 139 110 2
x52024:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x52026:	mov ax, [bp + 6]	; 3: 139 70 6
x52029:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x52032:	mov word [bp + 8], toupper$3	; 5: 199 70 8 78 203
x52037:	mov [bp + 10], bp	; 3: 137 110 10
x52040:	add bp, 8	; 3: 131 197 8
x52043:	jmp islower	; 3: 233 171 148

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary455

toupper$5:	; Equal 31 £temporary455 0
x52046:	cmp bx, 0	; 3: 131 251 0
x52049:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x52051:	mov word [bp + 8], toupper$8	; 5: 199 70 8 97 203
x52056:	mov [bp + 10], bp	; 3: 137 110 10
x52059:	add bp, 8	; 3: 131 197 8
x52062:	jmp localeconv	; 3: 233 211 82

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary456

toupper$10:	; Assign localeConvPtr £temporary456
x52065:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x52068:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x52072:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary458 -> localeConvPtr localeConvPtr 12
x52074:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary458 -> localeConvPtr
x52077:	mov ax, [si + 12]	; 3: 139 68 12
x52080:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary459 -> localeConvPtr localeConvPtr 14
x52083:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary459 -> localeConvPtr
x52086:	mov ax, [si + 14]	; 3: 139 68 14
x52089:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x52092:	mov ax, [bp + 10]	; 3: 139 70 10
x52095:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x52098:	mov ax, [bp + 6]	; 3: 139 70 6
x52101:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x52104:	mov word [bp + 14], toupper$20	; 5: 199 70 14 150 203
x52109:	mov [bp + 16], bp	; 3: 137 110 16
x52112:	add bp, 14	; 3: 131 197 14
x52115:	jmp strchr	; 3: 233 224 85

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary460

toupper$22:	; BinarySubtract index £temporary460 lowerCase
x52118:	sub bx, [bp + 10]	; 3: 43 94 10
x52121:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary463 upperCase index
x52124:	mov si, [bp + 12]	; 3: 139 118 12
x52127:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary462 -> £temporary463 £temporary463 0

toupper$25:	; IntegralToIntegral £temporary464 £temporary462 -> £temporary463
x52130:	mov bl, [si]	; 2: 138 28
x52132:	and bx, 255	; 4: 129 227 255 0
x52136:	cmp bl, 0	; 3: 128 251 0
x52139:	jge toupper$26	; 2: 125 4
x52141:	neg bl	; 2: 246 219
x52143:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary464

toupper$27:	; Return £temporary464
x52145:	mov ax, [bp]	; 3: 139 70 0
x52148:	mov di, [bp + 4]	; 3: 139 126 4
x52151:	mov bp, [bp + 2]	; 3: 139 110 2
x52154:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary465 c 32
x52156:	mov bx, [bp + 6]	; 3: 139 94 6
x52159:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary465

toupper$30:	; Return £temporary465
x52162:	mov ax, [bp]	; 3: 139 70 0
x52165:	mov di, [bp + 4]	; 3: 139 126 4
x52168:	mov bp, [bp + 2]	; 3: 139 110 2
x52171:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x52173:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x52176:	mov ax, [bp]	; 3: 139 70 0
x52179:	mov di, [bp + 4]	; 3: 139 126 4
x52182:	mov bp, [bp + 2]	; 3: 139 110 2
x52185:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x52187:	mov ax, [bp]	; 3: 139 70 0
x52190:	mov di, [bp + 4]	; 3: 139 126 4
x52193:	mov bp, [bp + 2]	; 3: 139 110 2
x52196:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x52198:
