	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 225 228
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 225 228 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 21 55

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 time_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp time_test	; 3: 233 208 117

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 assert_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp assert_test	; 3: 233 107 140

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 malloc_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp malloc_test	; 3: 233 38 141

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 print_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp print_test	; 3: 233 179 145

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 limits_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp limits_test	; 3: 233 8 150

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 float_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp float_test	; 3: 233 180 152

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 setjmp_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp setjmp_test	; 3: 233 177 152

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 stdio_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp stdio_test	; 3: 233 95 154

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 string_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp string_test	; 3: 233 207 169

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 67 154

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 164 183

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 126 194

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 64 206

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 2 218

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 205 226

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [@10416$float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 89 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [@10419$float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 68 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [@10422$float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 47 3

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 28 3

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [@10428$float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 7 3

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [@10431$float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 242 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 223 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [@10437$float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 202 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [@10440$float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 181 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [@10443$float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 160 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [@10446$float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 139 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [@10451$float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 118 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [@10454$float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 97 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [@10459$float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 76 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [@10465$float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 55 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [@10469$float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 34 2

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [@10474$float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 13 2

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [@10479$float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 82 49

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [@10482$float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [@10484$float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 54 49

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [@10489$float8$2.0#]	; 4: 221 6 62 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 28 49

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [@10494$float8$minus2.0#]	; 4: 221 6 70 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 2 49

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [@10499$float8$2.0#]	; 4: 221 6 78 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 232 48

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [@10504$float8$minus2.0#]	; 4: 221 6 86 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 206 48

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 182 48

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [@10513$float8$2#]	; 4: 221 6 94 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 156 48

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [@10518$float8$minus2#]	; 4: 221 6 102 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 130 48

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [@10522$float8$minus1.0#]	; 4: 221 6 110 5

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [@10524$float8$minus1.0#]	; 4: 221 6 118 5

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 102 48

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [@10527$float8$minus2.0#]	; 4: 221 6 126 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [@10529$float8$minus4.0#]	; 4: 221 6 134 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 74 48

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

@10416$float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

@10419$float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

@10422$float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

@10428$float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

@10431$float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

@10437$float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

@10440$float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

@10443$float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10446$float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

@10451$float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@10454$float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@10459$float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@10465$float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

@10469$float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@10474$float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

@10479$float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10482$float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

@10484$float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

@10489$float8$2.0#:
x1342:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10494$float8$minus2.0#:
x1350:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10499$float8$2.0#:
x1358:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10504$float8$minus2.0#:
x1366:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10513$float8$2#:
x1374:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10518$float8$minus2#:
x1382:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10522$float8$minus1.0#:
x1390:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10524$float8$minus1.0#:
x1398:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10527$float8$minus2.0#:
x1406:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10529$float8$minus4.0#:
x1414:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1422:	mov word [bp + 20], @10572$string_3C25f3E0A#	; 5: 199 70 20 196 10

math_test_1$2:	; PushFloat x
x1427:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1430:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1433:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 172 5
x1438:	mov [bp + 16], bp	; 3: 137 110 16
x1441:	add bp, 14	; 3: 131 197 14
x1444:	mov di, bp	; 2: 137 239
x1446:	add di, 8	; 3: 131 199 8
x1449:	jmp printf	; 3: 233 88 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1452:	mov word [bp + 20], @10574$string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 202 10

math_test_1$8:	; PushFloat x
x1457:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1460:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1463:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1466:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1469:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 203 5
x1474:	mov [bp + 32], bp	; 3: 137 110 32
x1477:	add bp, 30	; 3: 131 197 30
x1480:	jmp sin	; 3: 233 192 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4858

math_test_1$16:	; Parameter 14 £temporary4858 16
x1483:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1486:	mov ax, [errno]	; 3: 161 230 10
x1489:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1492:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 231 5
x1497:	mov [bp + 16], bp	; 3: 137 110 16
x1500:	add bp, 14	; 3: 131 197 14
x1503:	mov di, bp	; 2: 137 239
x1505:	add di, 18	; 3: 131 199 18
x1508:	jmp printf	; 3: 233 29 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1511:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1517:	mov word [bp + 20], @10579$string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 232 10

math_test_1$23:	; PushFloat x
x1522:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1525:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1528:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1531:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1534:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 12 6
x1539:	mov [bp + 32], bp	; 3: 137 110 32
x1542:	add bp, 30	; 3: 131 197 30
x1545:	jmp cos	; 3: 233 240 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4860

math_test_1$31:	; Parameter 14 £temporary4860 16
x1548:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1551:	mov ax, [errno]	; 3: 161 230 10
x1554:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1557:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 40 6
x1562:	mov [bp + 16], bp	; 3: 137 110 16
x1565:	add bp, 14	; 3: 131 197 14
x1568:	mov di, bp	; 2: 137 239
x1570:	add di, 18	; 3: 131 199 18
x1573:	jmp printf	; 3: 233 220 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1576:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1582:	mov word [bp + 20], @10584$string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 4 11

math_test_1$38:	; PushFloat x
x1587:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1590:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1593:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1596:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1599:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 77 6
x1604:	mov [bp + 32], bp	; 3: 137 110 32
x1607:	add bp, 30	; 3: 131 197 30
x1610:	jmp tan	; 3: 233 169 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4862

math_test_1$46:	; Parameter 14 £temporary4862 16
x1613:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1616:	mov ax, [errno]	; 3: 161 230 10
x1619:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1622:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 105 6
x1627:	mov [bp + 16], bp	; 3: 137 110 16
x1630:	add bp, 14	; 3: 131 197 14
x1633:	mov di, bp	; 2: 137 239
x1635:	add di, 18	; 3: 131 199 18
x1638:	jmp printf	; 3: 233 155 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1641:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1647:	mov word [bp + 20], @10589$string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 32 11

math_test_1$53:	; PushFloat x
x1652:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1655:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1658:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1661:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1664:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 142 6
x1669:	mov [bp + 32], bp	; 3: 137 110 32
x1672:	add bp, 30	; 3: 131 197 30
x1675:	jmp asin	; 3: 233 195 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4864

math_test_1$61:	; Parameter 14 £temporary4864 16
x1678:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1681:	mov ax, [errno]	; 3: 161 230 10
x1684:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1687:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 170 6
x1692:	mov [bp + 16], bp	; 3: 137 110 16
x1695:	add bp, 14	; 3: 131 197 14
x1698:	mov di, bp	; 2: 137 239
x1700:	add di, 18	; 3: 131 199 18
x1703:	jmp printf	; 3: 233 90 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1706:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1712:	mov word [bp + 20], @10594$string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 61 11

math_test_1$68:	; PushFloat x
x1717:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1720:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1723:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1726:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1729:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 207 6
x1734:	mov [bp + 32], bp	; 3: 137 110 32
x1737:	add bp, 30	; 3: 131 197 30
x1740:	jmp acos	; 3: 233 85 42

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4866

math_test_1$76:	; Parameter 14 £temporary4866 16
x1743:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1746:	mov ax, [errno]	; 3: 161 230 10
x1749:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1752:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 235 6
x1757:	mov [bp + 16], bp	; 3: 137 110 16
x1760:	add bp, 14	; 3: 131 197 14
x1763:	mov di, bp	; 2: 137 239
x1765:	add di, 18	; 3: 131 199 18
x1768:	jmp printf	; 3: 233 25 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1771:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1777:	mov word [bp + 20], @10599$string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 90 11

math_test_1$83:	; PushFloat x
x1782:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1785:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1788:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1791:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1794:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 16 7
x1799:	mov [bp + 32], bp	; 3: 137 110 32
x1802:	add bp, 30	; 3: 131 197 30
x1805:	jmp atan	; 3: 233 131 40

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4868

math_test_1$91:	; Parameter 14 £temporary4868 16
x1808:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1811:	mov ax, [errno]	; 3: 161 230 10
x1814:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1817:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 44 7
x1822:	mov [bp + 16], bp	; 3: 137 110 16
x1825:	add bp, 14	; 3: 131 197 14
x1828:	mov di, bp	; 2: 137 239
x1830:	add di, 18	; 3: 131 199 18
x1833:	jmp printf	; 3: 233 216 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1836:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1842:	mov word [bp + 20], @10604$string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 119 11

math_test_1$98:	; PushFloat x
x1847:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1850:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1853:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1856:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1859:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 81 7
x1864:	mov [bp + 32], bp	; 3: 137 110 32
x1867:	add bp, 30	; 3: 131 197 30
x1870:	jmp exp	; 3: 233 243 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4870

math_test_1$106:	; Parameter 14 £temporary4870 16
x1873:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1876:	mov ax, [errno]	; 3: 161 230 10
x1879:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1882:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 109 7
x1887:	mov [bp + 16], bp	; 3: 137 110 16
x1890:	add bp, 14	; 3: 131 197 14
x1893:	mov di, bp	; 2: 137 239
x1895:	add di, 18	; 3: 131 199 18
x1898:	jmp printf	; 3: 233 151 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1901:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1907:	mov word [bp + 20], @10609$string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 147 11

math_test_1$113:	; PushFloat x
x1912:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1915:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1918:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1921:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1924:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 146 7
x1929:	mov [bp + 32], bp	; 3: 137 110 32
x1932:	add bp, 30	; 3: 131 197 30
x1935:	jmp log	; 3: 233 201 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4872

math_test_1$121:	; Parameter 14 £temporary4872 16
x1938:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1941:	mov ax, [errno]	; 3: 161 230 10
x1944:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1947:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 174 7
x1952:	mov [bp + 16], bp	; 3: 137 110 16
x1955:	add bp, 14	; 3: 131 197 14
x1958:	mov di, bp	; 2: 137 239
x1960:	add di, 18	; 3: 131 199 18
x1963:	jmp printf	; 3: 233 86 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1966:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1972:	mov word [bp + 20], @10614$string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 175 11

math_test_1$128:	; PushFloat x
x1977:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1980:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1983:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1986:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1989:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 211 7
x1994:	mov [bp + 32], bp	; 3: 137 110 32
x1997:	add bp, 30	; 3: 131 197 30
x2000:	jmp log10	; 3: 233 91 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4874

math_test_1$136:	; Parameter 14 £temporary4874 16
x2003:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x2006:	mov ax, [errno]	; 3: 161 230 10
x2009:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x2012:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 239 7
x2017:	mov [bp + 16], bp	; 3: 137 110 16
x2020:	add bp, 14	; 3: 131 197 14
x2023:	mov di, bp	; 2: 137 239
x2025:	add di, 18	; 3: 131 199 18
x2028:	jmp printf	; 3: 233 21 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x2031:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x2037:	mov word [bp + 20], @10619$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 205 11

math_test_1$143:	; PushFloat x
x2042:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x2045:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2048:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2051:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2054:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 20 8
x2059:	mov [bp + 32], bp	; 3: 137 110 32
x2062:	add bp, 30	; 3: 131 197 30
x2065:	jmp sinh	; 3: 233 218 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4876

math_test_1$151:	; Parameter 14 £temporary4876 16
x2068:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2071:	mov ax, [errno]	; 3: 161 230 10
x2074:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2077:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 48 8
x2082:	mov [bp + 16], bp	; 3: 137 110 16
x2085:	add bp, 14	; 3: 131 197 14
x2088:	mov di, bp	; 2: 137 239
x2090:	add di, 18	; 3: 131 199 18
x2093:	jmp printf	; 3: 233 212 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2096:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2102:	mov word [bp + 20], @10624$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 234 11

math_test_1$158:	; PushFloat x
x2107:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2110:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2113:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2116:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2119:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 85 8
x2124:	mov [bp + 32], bp	; 3: 137 110 32
x2127:	add bp, 30	; 3: 131 197 30
x2130:	jmp cosh	; 3: 233 234 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4878

math_test_1$166:	; Parameter 14 £temporary4878 16
x2133:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2136:	mov ax, [errno]	; 3: 161 230 10
x2139:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2142:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 113 8
x2147:	mov [bp + 16], bp	; 3: 137 110 16
x2150:	add bp, 14	; 3: 131 197 14
x2153:	mov di, bp	; 2: 137 239
x2155:	add di, 18	; 3: 131 199 18
x2158:	jmp printf	; 3: 233 147 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2161:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2167:	mov word [bp + 20], @10629$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 7 12

math_test_1$173:	; PushFloat x
x2172:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2175:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2178:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2181:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2184:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 150 8
x2189:	mov [bp + 32], bp	; 3: 137 110 32
x2192:	add bp, 30	; 3: 131 197 30
x2195:	jmp tanh	; 3: 233 250 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4880

math_test_1$181:	; Parameter 14 £temporary4880 16
x2198:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2201:	mov ax, [errno]	; 3: 161 230 10
x2204:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2207:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 178 8
x2212:	mov [bp + 16], bp	; 3: 137 110 16
x2215:	add bp, 14	; 3: 131 197 14
x2218:	mov di, bp	; 2: 137 239
x2220:	add di, 18	; 3: 131 199 18
x2223:	jmp printf	; 3: 233 82 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2226:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2232:	mov word [bp + 20], @10634$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 36 12

math_test_1$188:	; PushFloat x
x2237:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2240:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2243:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2246:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2249:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 215 8
x2254:	mov [bp + 32], bp	; 3: 137 110 32
x2257:	add bp, 30	; 3: 131 197 30
x2260:	jmp sqrt	; 3: 233 56 38

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4882

math_test_1$196:	; Parameter 14 £temporary4882 16
x2263:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2266:	mov ax, [errno]	; 3: 161 230 10
x2269:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2272:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 243 8
x2277:	mov [bp + 16], bp	; 3: 137 110 16
x2280:	add bp, 14	; 3: 131 197 14
x2283:	mov di, bp	; 2: 137 239
x2285:	add di, 18	; 3: 131 199 18
x2288:	jmp printf	; 3: 233 17 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2291:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2297:	mov word [bp + 20], @10639$string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 65 12

math_test_1$203:	; PushFloat x
x2302:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2305:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2308:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2311:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2314:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 24 9
x2319:	mov [bp + 32], bp	; 3: 137 110 32
x2322:	add bp, 30	; 3: 131 197 30
x2325:	jmp floor	; 3: 233 170 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4884

math_test_1$211:	; Parameter 14 £temporary4884 16
x2328:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2331:	mov ax, [errno]	; 3: 161 230 10
x2334:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2337:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 52 9
x2342:	mov [bp + 16], bp	; 3: 137 110 16
x2345:	add bp, 14	; 3: 131 197 14
x2348:	mov di, bp	; 2: 137 239
x2350:	add di, 18	; 3: 131 199 18
x2353:	jmp printf	; 3: 233 208 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2356:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2362:	mov word [bp + 20], @10644$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 95 12

math_test_1$218:	; PushFloat x
x2367:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2370:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2373:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2376:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2379:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 89 9
x2384:	mov [bp + 32], bp	; 3: 137 110 32
x2387:	add bp, 30	; 3: 131 197 30
x2390:	jmp ceil	; 3: 233 183 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4886

math_test_1$226:	; Parameter 14 £temporary4886 16
x2393:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2396:	mov ax, [errno]	; 3: 161 230 10
x2399:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2402:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 117 9
x2407:	mov [bp + 16], bp	; 3: 137 110 16
x2410:	add bp, 14	; 3: 131 197 14
x2413:	mov di, bp	; 2: 137 239
x2415:	add di, 18	; 3: 131 199 18
x2418:	jmp printf	; 3: 233 143 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2421:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2427:	mov word [bp + 20], @10649$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 124 12

math_test_1$233:	; PushFloat x
x2432:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2435:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2438:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2441:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2444:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 154 9
x2449:	mov [bp + 32], bp	; 3: 137 110 32
x2452:	add bp, 30	; 3: 131 197 30
x2455:	jmp fabs	; 3: 233 98 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4888

math_test_1$241:	; Parameter 14 £temporary4888 16
x2458:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2461:	mov ax, [errno]	; 3: 161 230 10
x2464:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2467:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 182 9
x2472:	mov [bp + 16], bp	; 3: 137 110 16
x2475:	add bp, 14	; 3: 131 197 14
x2478:	mov di, bp	; 2: 137 239
x2480:	add di, 18	; 3: 131 199 18
x2483:	jmp printf	; 3: 233 78 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2486:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$246:	; Assign j 0
x2492:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2497:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2500:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4890 j
x2503:	mov si, bp	; 2: 137 238
x2505:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4890 14
x2508:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2511:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 221 9
x2516:	mov [bp + 18], bp	; 3: 137 110 18
x2519:	add bp, 16	; 3: 131 197 16
x2522:	jmp frexp	; 3: 233 244 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4891

math_test_1$255:	; PopFloat z
x2525:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2528:	mov word [bp + 30], @10660$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 153 12

math_test_1$258:	; PushFloat x
x2533:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2536:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2539:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2542:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2545:	mov ax, [bp + 14]	; 3: 139 70 14
x2548:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2551:	mov ax, [errno]	; 3: 161 230 10
x2554:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2557:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 16 10
x2562:	mov [bp + 26], bp	; 3: 137 110 26
x2565:	add bp, 24	; 3: 131 197 24
x2568:	mov di, bp	; 2: 137 239
x2570:	add di, 20	; 3: 131 199 20
x2573:	jmp printf	; 3: 233 244 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2576:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2581:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2583:	mov word [bp + 30], @10665$string_Error20message3A#	; 5: 199 70 30 191 12

math_test_1$269:	; Call 24 perror 0
x2588:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 42 10
x2593:	mov [bp + 26], bp	; 3: 137 110 26
x2596:	add bp, 24	; 3: 131 197 24
x2599:	jmp perror	; 3: 233 171 41

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2602:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$272:	; PushZero
x2608:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2610:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2613:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2616:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4895 w
x2619:	mov si, bp	; 2: 137 238
x2621:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4895 14
x2624:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2627:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 81 10
x2632:	mov [bp + 24], bp	; 3: 137 110 24
x2635:	add bp, 22	; 3: 131 197 22
x2638:	jmp modf	; 3: 233 32 42

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4896

math_test_1$282:	; PopFloat z
x2641:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2644:	mov word [bp + 36], @10675$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 206 12

math_test_1$285:	; PushFloat x
x2649:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2652:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2655:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2658:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2661:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2664:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2667:	mov ax, [errno]	; 3: 161 230 10
x2670:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2673:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 132 10
x2678:	mov [bp + 32], bp	; 3: 137 110 32
x2681:	add bp, 30	; 3: 131 197 30
x2684:	mov di, bp	; 2: 137 239
x2686:	add di, 26	; 3: 131 199 26
x2689:	jmp printf	; 3: 233 128 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2692:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2697:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2699:	mov word [bp + 36], @10680$string_Error20message3A#	; 5: 199 70 36 243 12

math_test_1$297:	; Call 30 perror 0
x2704:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 158 10
x2709:	mov [bp + 32], bp	; 3: 137 110 32
x2712:	add bp, 30	; 3: 131 197 30
x2715:	jmp perror	; 3: 233 55 41

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2718:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2724:	mov word [bp + 20], @10684$string_0A#	; 5: 199 70 20 2 13

math_test_1$302:	; Call 14 printf 0
x2729:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 185 10
x2734:	mov [bp + 16], bp	; 3: 137 110 16
x2737:	add bp, 14	; 3: 131 197 14
x2740:	mov di, bp	; 2: 137 239
x2742:	jmp printf	; 3: 233 75 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2745:	mov ax, [bp]	; 3: 139 70 0
x2748:	mov di, [bp + 4]	; 3: 139 126 4
x2751:	mov bp, [bp + 2]	; 3: 139 110 2
x2754:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

@10572$string_3C25f3E0A#:
x2756:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

@10574$string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2762:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2790:	dw 0	; 2: 0 0

@10579$string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2792:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10584$string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2820:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10589$string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2848:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10594$string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2877:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10599$string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2906:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10604$string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2935:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10609$string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2963:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10614$string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2991:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10619$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x3021:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10624$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3050:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10629$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3079:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10634$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3108:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10639$string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3137:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10644$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3167:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10649$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3196:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10660$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3225:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10665$string_Error20message3A#:
x3263:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10675$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3278:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10680$string_Error20message3A#:
x3315:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10684$string_0A#:
x3330:	db 10, 0	; 2: 10 0

printf:	; address £temporary2385 format
x3332:	mov si, bp	; 2: 137 238
x3334:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2386 £temporary2385

printf$2:	; BinaryAdd arg_list £temporary2386 2
x3337:	add si, 2	; 3: 131 198 2
x3340:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3343:	mov ax, [bp + 6]	; 3: 139 70 6
x3346:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3349:	mov ax, [di + 8]	; 3: 139 69 8
x3352:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3355:	mov word [di + 10], printf$7	; 5: 199 69 10 46 13
x3360:	mov [di + 12], bp	; 3: 137 109 12
x3363:	mov [di + 14], di	; 3: 137 125 14
x3366:	add di, 10	; 3: 131 199 10
x3369:	mov bp, di	; 2: 137 253
x3371:	nop	; 1: 144
x3372:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2388

printf$9:	; SetReturnValue £temporary2388

printf$10:	; Return £temporary2388
x3374:	mov ax, [bp]	; 3: 139 70 0
x3377:	mov di, [bp + 4]	; 3: 139 126 4
x3380:	mov bp, [bp + 2]	; 3: 139 110 2
x3383:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3385:	mov ax, [stdout]	; 3: 161 100 13
x3388:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3391:	mov ax, [bp + 6]	; 3: 139 70 6
x3394:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3397:	mov ax, [bp + 8]	; 3: 139 70 8
x3400:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3403:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 89 13
x3408:	mov [bp + 12], bp	; 3: 137 110 12
x3411:	add bp, 10	; 3: 131 197 10
x3414:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2392

vprintf$7:	; SetReturnValue £temporary2392

vprintf$8:	; Return £temporary2392
x3417:	mov ax, [bp]	; 3: 139 70 0
x3420:	mov di, [bp + 4]	; 3: 139 126 4
x3423:	mov bp, [bp + 2]	; 3: 139 110 2
x3426:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3428:	dw g_fileArray + 29	; 2: 131 13

g_fileArray:
x3430:	dw 1	; 2: 1 0
x3432:	dw 0	; 2: 0 0
x3434:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3459:	dw 1	; 2: 1 0
x3461:	dw 1	; 2: 1 0
x3463:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3488:	dw 1	; 2: 1 0
x3490:	dw 2	; 2: 2 0
x3492:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3517:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x4010:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2404 outStream
x4016:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2404
x4019:	mov [g_outDevice], ax	; 3: 163 221 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x4022:	mov ax, [bp + 8]	; 3: 139 70 8
x4025:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x4028:	mov ax, [bp + 10]	; 3: 139 70 10
x4031:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x4034:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 208 15
x4039:	mov [bp + 14], bp	; 3: 137 110 14
x4042:	add bp, 12	; 3: 131 197 12
x4045:	nop	; 1: 144
x4046:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2405

vfprintf$9:	; SetReturnValue £temporary2405

vfprintf$10:	; Return £temporary2405
x4048:	mov ax, [bp]	; 3: 139 70 0
x4051:	mov di, [bp + 4]	; 3: 139 126 4
x4054:	mov bp, [bp + 2]	; 3: 139 110 2
x4057:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x4059:	db 0, 0	; 2: 0 0

g_outDevice:
x4061:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4063:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4068:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4073:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4078:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4083:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4088:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4093:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4098:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4103:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4108:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4113:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4118:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4123:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4128:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4133:	mov word [g_outChars], 0	; 6: 199 6 57 21 0 0

printFormat$15:	; Assign index 0
x4139:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2239 format index
x4144:	mov si, [bp + 6]	; 3: 139 118 6
x4147:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2238 -> £temporary2239 £temporary2239 0

printFormat$18:	; Equal 285 £temporary2238 -> £temporary2239 0
x4150:	cmp byte [si], 0	; 3: 128 60 0
x4153:	je printFormat$285	; 4: 15 132 214 4

printFormat$19:	; BinaryAdd £temporary2243 format index
x4157:	mov si, [bp + 6]	; 3: 139 118 6
x4160:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2242 -> £temporary2243 £temporary2243 0

printFormat$21:	; Assign c £temporary2242 -> £temporary2243
x4163:	mov al, [si]	; 2: 138 4
x4165:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 263 percent 0
x4168:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4172:	je printFormat$263	; 4: 15 132 91 4

printFormat$23:	; Case 52 c 43
x4176:	mov al, [bp + 40]	; 3: 138 70 40
x4179:	cmp al, 43	; 2: 60 43
x4181:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4185:	cmp al, 45	; 2: 60 45
x4187:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4191:	cmp al, 32	; 2: 60 32
x4193:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4197:	cmp al, 48	; 2: 60 48
x4199:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4203:	cmp al, 35	; 2: 60 35
x4205:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4209:	cmp al, 46	; 2: 60 46
x4211:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4215:	cmp al, 42	; 2: 60 42
x4217:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4221:	cmp al, 104	; 2: 60 104
x4223:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4227:	cmp al, 108	; 2: 60 108
x4229:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4233:	cmp al, 76	; 2: 60 76
x4235:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4239:	cmp al, 37	; 2: 60 37
x4241:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4245:	cmp al, 110	; 2: 60 110
x4247:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4251:	cmp al, 112	; 2: 60 112
x4253:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4257:	cmp al, 71	; 2: 60 71
x4259:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4263:	cmp al, 103	; 2: 60 103
x4265:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4269:	cmp al, 69	; 2: 60 69
x4271:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4275:	cmp al, 101	; 2: 60 101
x4277:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4281:	cmp al, 102	; 2: 60 102
x4283:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4287:	cmp al, 115	; 2: 60 115
x4289:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4293:	cmp al, 99	; 2: 60 99
x4295:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4297:	cmp al, 88	; 2: 60 88
x4299:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4301:	cmp al, 120	; 2: 60 120
x4303:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4305:	cmp al, 111	; 2: 60 111
x4307:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4309:	cmp al, 98	; 2: 60 98
x4311:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4313:	cmp al, 117	; 2: 60 117
x4315:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4317:	cmp al, 100	; 2: 60 100
x4319:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4321:	cmp al, 105	; 2: 60 105
x4323:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4325:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4328:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 283
x4333:	jmp printFormat$283	; 3: 233 29 4

printFormat$54:	; Assign minus 1
x4336:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 283
x4341:	jmp printFormat$283	; 3: 233 21 4

printFormat$56:	; Assign space 1
x4344:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 283
x4349:	jmp printFormat$283	; 3: 233 13 4

printFormat$58:	; Assign zero 1
x4352:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 283
x4357:	jmp printFormat$283	; 3: 233 5 4

printFormat$60:	; Assign grid 1
x4360:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 283
x4365:	jmp printFormat$283	; 3: 233 253 3

printFormat$62:	; Assign period 1
x4368:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 283
x4373:	jmp printFormat$283	; 3: 233 245 3

printFormat$64:	; NotEqual 67 period 0
x4376:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4380:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4382:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 283
x4387:	jmp printFormat$283	; 3: 233 231 3

printFormat$67:	; Assign precision -1
x4390:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 283
x4395:	jmp printFormat$283	; 3: 233 223 3

printFormat$69:	; Assign shortInt 1
x4398:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 283
x4403:	jmp printFormat$283	; 3: 233 215 3

printFormat$71:	; Assign longInt 1
x4406:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 283
x4411:	jmp printFormat$283	; 3: 233 207 3

printFormat$73:	; Assign longDouble 1
x4414:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 283
x4419:	jmp printFormat$283	; 3: 233 199 3

printFormat$75:	; Equal 107 minus 0
x4422:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4426:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4430:	mov ax, [g_outChars]	; 3: 161 57 21
x4433:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2247 format index
x4436:	mov si, [bp + 6]	; 3: 139 118 6
x4439:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2246 -> £temporary2247 £temporary2247 0

printFormat$80:	; address £temporary2248 £temporary2246 -> £temporary2247

printFormat$81:	; Parameter 43 £temporary2248 6
x4442:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4445:	mov ax, [bp + 8]	; 3: 139 70 8
x4448:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4451:	mov ax, [bp + 18]	; 3: 139 70 18
x4454:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4457:	mov ax, [bp + 22]	; 3: 139 70 22
x4460:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4463:	mov ax, [bp + 26]	; 3: 139 70 26
x4466:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2249 width
x4469:	mov si, bp	; 2: 137 238
x4471:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2249 16
x4474:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4477:	mov ax, [bp + 14]	; 3: 139 70 14
x4480:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4483:	mov ax, [bp + 34]	; 3: 139 70 34
x4486:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4489:	mov ax, [bp + 36]	; 3: 139 70 36
x4492:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4495:	mov ax, [bp + 38]	; 3: 139 70 38
x4498:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4501:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4506:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4511:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 173 17
x4516:	mov [bp + 45], bp	; 3: 137 110 45
x4519:	add bp, 43	; 3: 131 197 43
x4522:	jmp printArgument	; 3: 233 144 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2250

printFormat$97:	; Assign arg_list £temporary2250
x4525:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4528:	mov ax, [g_outChars]	; 3: 161 57 21
x4531:	sub ax, [bp + 41]	; 3: 43 70 41
x4534:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2252 field
x4537:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4540:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2252 width
x4543:	cmp ax, [bp + 12]	; 3: 59 70 12
x4546:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4550:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4554:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 216 17
x4559:	mov [bp + 47], bp	; 3: 137 110 47
x4562:	add bp, 45	; 3: 131 197 45
x4565:	jmp printChar	; 3: 233 120 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4568:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4570:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4574:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4578:	mov ax, [g_outChars]	; 3: 161 57 21
x4581:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4584:	mov ax, [g_outStatus]	; 3: 161 219 15
x4587:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4590:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4595:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2256 format index
x4601:	mov si, [bp + 6]	; 3: 139 118 6
x4604:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2255 -> £temporary2256 £temporary2256 0

printFormat$115:	; address £temporary2257 £temporary2255 -> £temporary2256

printFormat$116:	; Parameter 47 £temporary2257 6
x4607:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4610:	mov ax, [bp + 8]	; 3: 139 70 8
x4613:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4616:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4621:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4626:	mov ax, [bp + 26]	; 3: 139 70 26
x4629:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2258 width
x4632:	mov si, bp	; 2: 137 238
x4634:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2258 16
x4637:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4640:	mov ax, [bp + 14]	; 3: 139 70 14
x4643:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4646:	mov ax, [bp + 34]	; 3: 139 70 34
x4649:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4652:	mov ax, [bp + 36]	; 3: 139 70 36
x4655:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4658:	mov ax, [bp + 38]	; 3: 139 70 38
x4661:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4664:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2259 negative
x4669:	mov si, bp	; 2: 137 238
x4671:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2259 28
x4674:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4677:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 83 18
x4682:	mov [bp + 49], bp	; 3: 137 110 49
x4685:	add bp, 47	; 3: 131 197 47
x4688:	jmp printArgument	; 3: 233 234 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4691:	mov ax, [bp + 43]	; 3: 139 70 43
x4694:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4697:	mov ax, [g_outChars]	; 3: 161 57 21
x4700:	sub ax, [bp + 41]	; 3: 43 70 41
x4703:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4706:	mov ax, [bp + 41]	; 3: 139 70 41
x4709:	mov [g_outChars], ax	; 3: 163 57 21

printFormat$135:	; Equal 142 negative 0
x4712:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4716:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4718:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4722:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 128 18
x4727:	mov [bp + 51], bp	; 3: 137 110 51
x4730:	add bp, 49	; 3: 131 197 49
x4733:	jmp printChar	; 3: 233 208 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4736:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4739:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4741:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4745:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4747:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4751:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 157 18
x4756:	mov [bp + 51], bp	; 3: 137 110 51
x4759:	add bp, 49	; 3: 131 197 49
x4762:	jmp printChar	; 3: 233 179 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4765:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4768:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4770:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4774:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4776:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4780:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 186 18
x4785:	mov [bp + 51], bp	; 3: 137 110 51
x4788:	add bp, 49	; 3: 131 197 49
x4791:	jmp printChar	; 3: 233 150 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4794:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2271 field
x4797:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4800:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2271 width
x4803:	cmp ax, [bp + 12]	; 3: 59 70 12
x4806:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4808:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4812:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 218 18
x4817:	mov [bp + 51], bp	; 3: 137 110 51
x4820:	add bp, 49	; 3: 131 197 49
x4823:	jmp printChar	; 3: 233 118 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4826:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2275 format index
x4828:	mov si, [bp + 6]	; 3: 139 118 6
x4831:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2274 -> £temporary2275 £temporary2275 0

printFormat$166:	; address £temporary2276 £temporary2274 -> £temporary2275

printFormat$167:	; Parameter 49 £temporary2276 6
x4834:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4837:	mov ax, [bp + 8]	; 3: 139 70 8
x4840:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4843:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4848:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4853:	mov ax, [bp + 26]	; 3: 139 70 26
x4856:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4859:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4864:	mov ax, [bp + 14]	; 3: 139 70 14
x4867:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4870:	mov ax, [bp + 34]	; 3: 139 70 34
x4873:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4876:	mov ax, [bp + 36]	; 3: 139 70 36
x4879:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4882:	mov ax, [bp + 38]	; 3: 139 70 38
x4885:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4888:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4893:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4898:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 48 19
x4903:	mov [bp + 51], bp	; 3: 137 110 51
x4906:	add bp, 49	; 3: 131 197 49
x4909:	jmp printArgument	; 3: 233 13 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2277

printFormat$182:	; Assign arg_list £temporary2277
x4912:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4915:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4918:	mov ax, [g_outChars]	; 3: 161 57 21
x4921:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4924:	mov ax, [g_outStatus]	; 3: 161 219 15
x4927:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4930:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2279 format index
x4936:	mov si, [bp + 6]	; 3: 139 118 6
x4939:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2278 -> £temporary2279 £temporary2279 0

printFormat$190:	; address £temporary2280 £temporary2278 -> £temporary2279

printFormat$191:	; Parameter 45 £temporary2280 6
x4942:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4945:	mov ax, [bp + 8]	; 3: 139 70 8
x4948:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4951:	mov ax, [bp + 18]	; 3: 139 70 18
x4954:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4957:	mov ax, [bp + 22]	; 3: 139 70 22
x4960:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4963:	mov ax, [bp + 26]	; 3: 139 70 26
x4966:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2281 width
x4969:	mov si, bp	; 2: 137 238
x4971:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2281 16
x4974:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4977:	mov ax, [bp + 14]	; 3: 139 70 14
x4980:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4983:	mov ax, [bp + 34]	; 3: 139 70 34
x4986:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4989:	mov ax, [bp + 36]	; 3: 139 70 36
x4992:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4995:	mov ax, [bp + 38]	; 3: 139 70 38
x4998:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x5001:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x5006:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x5011:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 161 19
x5016:	mov [bp + 47], bp	; 3: 137 110 47
x5019:	add bp, 45	; 3: 131 197 45
x5022:	jmp printArgument	; 3: 233 156 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x5025:	mov ax, [bp + 43]	; 3: 139 70 43
x5028:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x5031:	mov ax, [g_outChars]	; 3: 161 57 21
x5034:	sub ax, [bp + 41]	; 3: 43 70 41
x5037:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x5040:	mov ax, [bp + 41]	; 3: 139 70 41
x5043:	mov [g_outChars], ax	; 3: 163 57 21

printFormat$209:	; Assign £temporary2284 field
x5046:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x5049:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2284 width
x5052:	cmp ax, [bp + 12]	; 3: 59 70 12
x5055:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x5057:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x5061:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 211 19
x5066:	mov [bp + 49], bp	; 3: 137 110 49
x5069:	add bp, 47	; 3: 131 197 47
x5072:	jmp printChar	; 3: 233 125 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5075:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2288 format index
x5077:	mov si, [bp + 6]	; 3: 139 118 6
x5080:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2287 -> £temporary2288 £temporary2288 0

printFormat$220:	; address £temporary2289 £temporary2287 -> £temporary2288

printFormat$221:	; Parameter 47 £temporary2289 6
x5083:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5086:	mov ax, [bp + 8]	; 3: 139 70 8
x5089:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5092:	mov ax, [bp + 18]	; 3: 139 70 18
x5095:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5098:	mov ax, [bp + 22]	; 3: 139 70 22
x5101:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5104:	mov ax, [bp + 26]	; 3: 139 70 26
x5107:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5110:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5115:	mov ax, [bp + 14]	; 3: 139 70 14
x5118:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5121:	mov ax, [bp + 34]	; 3: 139 70 34
x5124:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5127:	mov ax, [bp + 36]	; 3: 139 70 36
x5130:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5133:	mov ax, [bp + 38]	; 3: 139 70 38
x5136:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5139:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5144:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5149:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 43 20
x5154:	mov [bp + 49], bp	; 3: 137 110 49
x5157:	add bp, 47	; 3: 131 197 47
x5160:	jmp printArgument	; 3: 233 18 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2290

printFormat$236:	; Assign arg_list £temporary2290
x5163:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5166:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 283
x5171:	jmp printFormat$283	; 3: 233 215 0

printFormat$239:	; Assign value 0
x5174:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2293 c
x5179:	mov al, [bp + 40]	; 3: 138 70 40
x5182:	and ax, 255	; 3: 37 255 0
x5185:	cmp al, 0	; 2: 60 0
x5187:	jge printFormat$242	; 2: 125 4
x5189:	neg al	; 2: 246 216
x5191:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2293 6
x5193:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5196:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 90 20
x5201:	mov [bp + 45], bp	; 3: 137 110 45
x5204:	add bp, 43	; 3: 131 197 43
x5207:	jmp isdigit	; 3: 233 18 23

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2294

printFormat$246:	; Equal 257 £temporary2294 0
x5210:	cmp bx, 0	; 3: 131 251 0
x5213:	je printFormat$257	; 2: 116 51

printFormat$247:	; SignedMultiply £temporary2295 value 10
x5215:	mov ax, [bp + 41]	; 3: 139 70 41
x5218:	xor dx, dx	; 2: 49 210
x5220:	imul word [@5078$int2$10#]	; 4: 247 46 59 21

printFormat$248:	; BinarySubtract £temporary2296 c 48
x5224:	mov bl, [bp + 40]	; 3: 138 94 40
x5227:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2297 £temporary2296
x5230:	and bx, 255	; 4: 129 227 255 0
x5234:	cmp bl, 0	; 3: 128 251 0
x5237:	jge printFormat$250	; 2: 125 4
x5239:	neg bl	; 2: 246 219
x5241:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2295 £temporary2297
x5243:	add ax, bx	; 2: 1 216
x5245:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5248:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; Assign £temporary2299 index
x5251:	mov ax, [bp + 10]	; 3: 139 70 10

printFormat$253:	; BinaryAdd £temporary2301 format £temporary2299
x5254:	mov si, [bp + 6]	; 3: 139 118 6
x5257:	add si, ax	; 2: 1 198

printFormat$254:	; Deref £temporary2300 -> £temporary2301 £temporary2301 0

printFormat$255:	; Assign c £temporary2300 -> £temporary2301
x5259:	mov al, [si]	; 2: 138 4
x5261:	mov [bp + 40], al	; 3: 136 70 40

printFormat$256:	; Goto 240
x5264:	jmp printFormat$240	; 2: 235 169

printFormat$257:	; Decrement index
x5266:	dec word [bp + 10]	; 3: 255 78 10

printFormat$258:	; NotEqual 261 period 0
x5269:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5273:	jne printFormat$261	; 2: 117 8

printFormat$259:	; Assign width value
x5275:	mov ax, [bp + 41]	; 3: 139 70 41
x5278:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$260:	; Goto 283
x5281:	jmp printFormat$283	; 2: 235 106

printFormat$261:	; Assign precision value
x5283:	mov ax, [bp + 41]	; 3: 139 70 41
x5286:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$262:	; Goto 283
x5289:	jmp printFormat$283	; 2: 235 98

printFormat$263:	; NotEqual 279 c 37
x5291:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5295:	jne printFormat$279	; 2: 117 72

printFormat$264:	; Assign percent 1
x5297:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$265:	; Assign plus 0
x5302:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$266:	; Assign minus 0
x5307:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$267:	; Assign space 0
x5312:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$268:	; Assign zero 0
x5317:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$269:	; Assign grid 0
x5322:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$270:	; Assign widthStar 0
x5327:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$271:	; Assign period 0
x5332:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$272:	; Assign precisionStar 0
x5337:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$273:	; Assign shortInt 0
x5342:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$274:	; Assign longInt 0
x5347:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$275:	; Assign longDouble 0
x5352:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$276:	; Assign width 0
x5357:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$277:	; Assign precision 0
x5362:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$278:	; Goto 283
x5367:	jmp printFormat$283	; 2: 235 20

printFormat$279:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$280:	; Parameter 41 c 6
x5369:	mov al, [bp + 40]	; 3: 138 70 40
x5372:	mov [bp + 47], al	; 3: 136 70 47

printFormat$281:	; Call 41 printChar 0
x5375:	mov word [bp + 41], printFormat$282	; 5: 199 70 41 13 21
x5380:	mov [bp + 43], bp	; 3: 137 110 43
x5383:	add bp, 41	; 3: 131 197 41
x5386:	jmp printChar	; 3: 233 67 7

printFormat$282:	; PostCall 41

printFormat$283:	; Increment index
x5389:	inc word [bp + 10]	; 3: 255 70 10

printFormat$284:	; Goto 16
x5392:	jmp printFormat$16	; 3: 233 29 251

printFormat$285:	; NotEqual 291 g_outStatus 1
x5395:	cmp word [g_outStatus], 1	; 5: 131 62 219 15 1
x5400:	jne printFormat$291	; 2: 117 16

printFormat$286:	; IntegralToIntegral £temporary2310 g_outDevice
x5402:	mov ax, [g_outDevice]	; 3: 161 221 15

printFormat$287:	; Assign outString £temporary2310
x5405:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$288:	; BinaryAdd £temporary2312 outString g_outChars
x5408:	mov si, [bp + 40]	; 3: 139 118 40
x5411:	add si, [g_outChars]	; 4: 3 54 57 21

printFormat$289:	; Deref £temporary2311 -> £temporary2312 £temporary2312 0

printFormat$290:	; Assign £temporary2311 -> £temporary2312 0
x5415:	mov byte [si], 0	; 3: 198 4 0

printFormat$291:	; SetReturnValue g_outChars
x5418:	mov bx, [g_outChars]	; 4: 139 30 57 21

printFormat$292:	; Return g_outChars
x5422:	mov ax, [bp]	; 3: 139 70 0
x5425:	mov di, [bp + 4]	; 3: 139 126 4
x5428:	mov bp, [bp + 2]	; 3: 139 110 2
x5431:	jmp ax	; 2: 255 224

printFormat$293:	; FunctionEnd printFormat

g_outChars:
x5433:	db 0, 0	; 2: 0 0

@5078$int2$10#:
x5435:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary2011 -> format format 0
x5437:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary2011 -> format
x5440:	mov al, [si]	; 2: 138 4
x5442:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5445:	mov al, [bp + 30]	; 3: 138 70 30
x5448:	cmp al, 100	; 2: 60 100
x5450:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5452:	cmp al, 105	; 2: 60 105
x5454:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5456:	cmp al, 99	; 2: 60 99
x5458:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5462:	cmp al, 115	; 2: 60 115
x5464:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5468:	cmp al, 88	; 2: 60 88
x5470:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5474:	cmp al, 120	; 2: 60 120
x5476:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5480:	cmp al, 98	; 2: 60 98
x5482:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5486:	cmp al, 111	; 2: 60 111
x5488:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5492:	cmp al, 117	; 2: 60 117
x5494:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5498:	cmp al, 71	; 2: 60 71
x5500:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5504:	cmp al, 103	; 2: 60 103
x5506:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5510:	cmp al, 69	; 2: 60 69
x5512:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5516:	cmp al, 101	; 2: 60 101
x5518:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5522:	cmp al, 102	; 2: 60 102
x5524:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5528:	cmp al, 112	; 2: 60 112
x5530:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5534:	cmp al, 110	; 2: 60 110
x5536:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5540:	cmp al, 37	; 2: 60 37
x5542:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5546:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5549:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5553:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5555:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary2013 arg_list 2
x5559:	mov si, [bp + 8]	; 3: 139 118 8
x5562:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary2014 £temporary2013

printArgument$25:	; Deref £temporary2015 -> £temporary2014 £temporary2014 0

printArgument$26:	; IntegralToIntegral £temporary2016 £temporary2015 -> £temporary2014
x5565:	mov ax, [si]	; 2: 139 4
x5567:	cmp ax, 0	; 3: 131 248 0
x5570:	jge printArgument$27	; 2: 125 4
x5572:	neg ax	; 2: 247 216
x5574:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary2017 £temporary2016
x5576:	and eax, 255	; 6: 102 37 255 0 0 0
x5582:	cmp al, 0	; 2: 60 0
x5584:	jge printArgument$28	; 2: 125 5
x5586:	neg al	; 2: 246 216
x5588:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary2017
x5591:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5595:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5597:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5601:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5603:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary2019 arg_list 4
x5607:	mov si, [bp + 8]	; 3: 139 118 8
x5610:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary2020 £temporary2019

printArgument$34:	; Deref £temporary2021 -> £temporary2020 £temporary2020 0

printArgument$35:	; Assign longValue £temporary2021 -> £temporary2020
x5613:	mov eax, [si]	; 3: 102 139 4
x5616:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5620:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5622:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary2023 arg_list 2
x5626:	mov si, [bp + 8]	; 3: 139 118 8
x5629:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary2024 £temporary2023

printArgument$40:	; Deref £temporary2025 -> £temporary2024 £temporary2024 0

printArgument$41:	; IntegralToIntegral £temporary2026 £temporary2025 -> £temporary2024
x5632:	mov ax, [si]	; 2: 139 4
x5634:	and eax, 65535	; 6: 102 37 255 255 0 0
x5640:	cmp ax, 0	; 3: 131 248 0
x5643:	jge printArgument$42	; 2: 125 5
x5645:	neg ax	; 2: 247 216
x5647:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary2026
x5650:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5654:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5658:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary2030 -> negativePtr negativePtr 0
x5660:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5663:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5668:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary2032 1
x5670:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5673:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary2032 0
x5675:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary2030 -> negativePtr £temporary2032
x5678:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5680:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5684:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5686:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5690:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5694:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 76 22
x5699:	mov [bp + 50], bp	; 3: 137 110 50
x5702:	add bp, 48	; 3: 131 197 48
x5705:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary2035

printArgument$56:	; Assign longValue £temporary2035
x5708:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5712:	mov ax, [bp + 8]	; 3: 139 70 8
x5715:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5718:	mov ax, [bp + 16]	; 3: 139 70 16
x5721:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary2036 precision
x5724:	mov si, bp	; 2: 137 238
x5726:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary2036 10
x5729:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5732:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 114 22
x5737:	mov [bp + 50], bp	; 3: 137 110 50
x5740:	add bp, 48	; 3: 131 197 48
x5743:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary2037

printArgument$65:	; Assign arg_list £temporary2037
x5746:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5749:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5753:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5757:	mov ax, [bp + 10]	; 3: 139 70 10
x5760:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5763:	mov ax, [bp + 12]	; 3: 139 70 12
x5766:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5769:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 151 22
x5774:	mov [bp + 50], bp	; 3: 137 110 50
x5777:	add bp, 48	; 3: 131 197 48
x5780:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5783:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5786:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary2040 arg_list 2
x5790:	mov si, [bp + 8]	; 3: 139 118 8
x5793:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary2041 £temporary2040

printArgument$76:	; Deref £temporary2042 -> £temporary2041 £temporary2041 0

printArgument$77:	; IntegralToIntegral £temporary2043 £temporary2042 -> £temporary2041
x5796:	mov ax, [si]	; 2: 139 4
x5798:	cmp ax, 0	; 3: 131 248 0
x5801:	jge printArgument$78	; 2: 125 4
x5803:	neg ax	; 2: 247 216
x5805:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary2043
x5807:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5810:	mov ax, [bp + 8]	; 3: 139 70 8
x5813:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5816:	mov ax, [bp + 16]	; 3: 139 70 16
x5819:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary2044 precision
x5822:	mov si, bp	; 2: 137 238
x5824:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary2044 10
x5827:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5830:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 212 22
x5835:	mov [bp + 46], bp	; 3: 137 110 46
x5838:	add bp, 44	; 3: 131 197 44
x5841:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary2045

printArgument$87:	; Assign arg_list £temporary2045
x5844:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5847:	mov al, [bp + 31]	; 3: 138 70 31
x5850:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5853:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 235 22
x5858:	mov [bp + 46], bp	; 3: 137 110 46
x5861:	add bp, 44	; 3: 131 197 44
x5864:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5867:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5870:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary2048 arg_list 2
x5874:	mov si, [bp + 8]	; 3: 139 118 8
x5877:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary2049 £temporary2048

printArgument$96:	; Deref £temporary2050 -> £temporary2049 £temporary2049 0

printArgument$97:	; Assign stringValue £temporary2050 -> £temporary2049
x5880:	mov ax, [si]	; 2: 139 4
x5882:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5885:	mov ax, [bp + 8]	; 3: 139 70 8
x5888:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5891:	mov ax, [bp + 16]	; 3: 139 70 16
x5894:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary2051 precision
x5897:	mov si, bp	; 2: 137 238
x5899:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary2051 10
x5902:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5905:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 31 23
x5910:	mov [bp + 48], bp	; 3: 137 110 48
x5913:	add bp, 46	; 3: 131 197 46
x5916:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary2052

printArgument$106:	; Assign arg_list £temporary2052
x5919:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5922:	mov ax, [bp + 44]	; 3: 139 70 44
x5925:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5928:	mov ax, [bp + 18]	; 3: 139 70 18
x5931:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5934:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 60 23
x5939:	mov [bp + 48], bp	; 3: 137 110 48
x5942:	add bp, 46	; 3: 131 197 46
x5945:	jmp printString	; 3: 233 224 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5948:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5951:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5955:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary2068 10
x5957:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5963:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5965:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5969:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary2064 8
x5971:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5977:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5979:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5983:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary2060 2
x5985:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5991:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary2060 16
x5993:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary2064 £temporary2060

printArgument$124:	; Assign £temporary2068 £temporary2064

printArgument$125:	; Assign base £temporary2068
x5999:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x6003:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x6007:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x6009:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary2070 arg_list 2
x6013:	mov si, [bp + 8]	; 3: 139 118 8
x6016:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary2071 £temporary2070

printArgument$130:	; Deref £temporary2072 -> £temporary2071 £temporary2071 0

printArgument$131:	; IntegralToIntegral £temporary2073 £temporary2072 -> £temporary2071
x6019:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary2074 £temporary2073
x6021:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary2074
x6027:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x6031:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x6033:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x6037:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x6039:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary2076 arg_list 4
x6043:	mov si, [bp + 8]	; 3: 139 118 8
x6046:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary2077 £temporary2076

printArgument$139:	; Deref £temporary2078 -> £temporary2077 £temporary2077 0

printArgument$140:	; Assign value £temporary2078 -> £temporary2077
x6049:	mov eax, [si]	; 3: 102 139 4
x6052:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x6056:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x6058:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary2080 arg_list 2
x6062:	mov si, [bp + 8]	; 3: 139 118 8
x6065:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary2081 £temporary2080

printArgument$145:	; Deref £temporary2082 -> £temporary2081 £temporary2081 0

printArgument$146:	; IntegralToIntegral £temporary2083 £temporary2082 -> £temporary2081
x6068:	mov ax, [si]	; 2: 139 4
x6070:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary2083
x6076:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6080:	mov ax, [bp + 8]	; 3: 139 70 8
x6083:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6086:	mov ax, [bp + 16]	; 3: 139 70 16
x6089:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary2086 precision
x6092:	mov si, bp	; 2: 137 238
x6094:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary2086 10
x6097:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6100:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 226 23
x6105:	mov [bp + 54], bp	; 3: 137 110 54
x6108:	add bp, 52	; 3: 131 197 52
x6111:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary2087

printArgument$156:	; Assign arg_list £temporary2087
x6114:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6117:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6121:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6125:	mov ax, [bp + 10]	; 3: 139 70 10
x6128:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6131:	mov ax, [bp + 12]	; 3: 139 70 12
x6134:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6137:	mov ax, [bp + 14]	; 3: 139 70 14
x6140:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6143:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6147:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary2088 c
x6151:	mov al, [bp + 30]	; 3: 138 70 30
x6154:	and ax, 255	; 3: 37 255 0
x6157:	cmp al, 0	; 2: 60 0
x6159:	jge printArgument$165	; 2: 125 4
x6161:	neg al	; 2: 246 216
x6163:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary2088 26
x6165:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6168:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 38 24
x6173:	mov [bp + 74], bp	; 3: 137 110 74
x6176:	add bp, 72	; 3: 131 197 72
x6179:	jmp isupper	; 3: 233 230 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary2089

printArgument$169:	; Parameter 52 £temporary2089 20
x6182:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6185:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 55 24
x6190:	mov [bp + 54], bp	; 3: 137 110 54
x6193:	add bp, 52	; 3: 131 197 52
x6196:	jmp printUnsignedLong	; 3: 233 214 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6199:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6202:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6206:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6208:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary2092 arg_list 8
x6212:	mov si, [bp + 8]	; 3: 139 118 8
x6215:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary2093 £temporary2092

printArgument$177:	; Deref £temporary2094 -> £temporary2093 £temporary2093 0

printArgument$178:	; PushFloat £temporary2094 -> £temporary2093
x6218:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6220:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6223:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6226:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6229:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6234:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6239:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6244:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6249:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 119 24
x6254:	mov [bp + 46], bp	; 3: 137 110 46
x6257:	add bp, 44	; 3: 131 197 44
x6260:	jmp printLongDoublePlain	; 3: 233 65 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6263:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6265:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary2097 arg_list 8
x6269:	mov si, [bp + 8]	; 3: 139 118 8
x6272:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary2098 £temporary2097

printArgument$193:	; Deref £temporary2099 -> £temporary2098 £temporary2098 0

printArgument$194:	; PushFloat £temporary2099 -> £temporary2098
x6275:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6277:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6280:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6284:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary2103 -> negativePtr negativePtr 0
x6286:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6289:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6292:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6294:	fcompp	; 2: 222 217
x6296:	fstsw ax	; 3: 155 223 224
x6299:	sahf	; 1: 158
x6300:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary2105 1
x6302:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6305:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary2105 0
x6307:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary2103 -> negativePtr £temporary2105
x6310:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6312:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6316:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6318:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6321:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6324:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 194 24
x6329:	mov [bp + 46], bp	; 3: 137 110 46
x6332:	add bp, 44	; 3: 131 197 44
x6335:	jmp fabs	; 3: 233 58 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary2108

printArgument$212:	; PopFloat longDoubleValue
x6338:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6341:	mov ax, [bp + 8]	; 3: 139 70 8
x6344:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6347:	mov ax, [bp + 16]	; 3: 139 70 16
x6350:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary2109 precision
x6353:	mov si, bp	; 2: 137 238
x6355:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary2109 10
x6358:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6361:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 231 24
x6366:	mov [bp + 46], bp	; 3: 137 110 46
x6369:	add bp, 44	; 3: 131 197 44
x6372:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary2110

printArgument$221:	; Assign arg_list £temporary2110
x6375:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6378:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6382:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6384:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6387:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6390:	mov ax, [bp + 10]	; 3: 139 70 10
x6393:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6396:	mov ax, [bp + 12]	; 3: 139 70 12
x6399:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6402:	mov ax, [bp + 14]	; 3: 139 70 14
x6405:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6408:	mov ax, [bp + 18]	; 3: 139 70 18
x6411:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6414:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 28 25
x6419:	mov [bp + 46], bp	; 3: 137 110 46
x6422:	add bp, 44	; 3: 131 197 44
x6425:	jmp printLongDoublePlain	; 3: 233 156 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6428:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary2113 c
x6431:	mov al, [bp + 30]	; 3: 138 70 30
x6434:	and ax, 255	; 3: 37 255 0
x6437:	cmp al, 0	; 2: 60 0
x6439:	jge printArgument$235	; 2: 125 4
x6441:	neg al	; 2: 246 216
x6443:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary2113 6
x6445:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6448:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 62 25
x6453:	mov [bp + 46], bp	; 3: 137 110 46
x6456:	add bp, 44	; 3: 131 197 44
x6459:	jmp tolower	; 3: 233 224 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary2114

printArgument$239:	; NotEqual 257 £temporary2114 101
x6462:	cmp bx, 101	; 3: 131 251 101
x6465:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6467:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6470:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6473:	mov ax, [bp + 10]	; 3: 139 70 10
x6476:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6479:	mov ax, [bp + 12]	; 3: 139 70 12
x6482:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6485:	mov ax, [bp + 14]	; 3: 139 70 14
x6488:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6491:	mov ax, [bp + 18]	; 3: 139 70 18
x6494:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary2116 c
x6497:	mov al, [bp + 30]	; 3: 138 70 30
x6500:	and ax, 255	; 3: 37 255 0
x6503:	cmp al, 0	; 2: 60 0
x6505:	jge printArgument$249	; 2: 125 4
x6507:	neg al	; 2: 246 216
x6509:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary2116 28
x6511:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6514:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 128 25
x6519:	mov [bp + 68], bp	; 3: 137 110 68
x6522:	add bp, 66	; 3: 131 197 66
x6525:	jmp isupper	; 3: 233 140 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary2117

printArgument$253:	; Parameter 44 £temporary2117 22
x6528:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6531:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 145 25
x6536:	mov [bp + 46], bp	; 3: 137 110 46
x6539:	add bp, 44	; 3: 131 197 44
x6542:	jmp printLongDoubleExpo	; 3: 233 46 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6545:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6548:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6551:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6554:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 168 25
x6559:	mov [bp + 46], bp	; 3: 137 110 46
x6562:	add bp, 44	; 3: 131 197 44
x6565:	jmp fabs	; 3: 233 84 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary2119

printArgument$264:	; Parameter 44 £temporary2119 6
x6568:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6571:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 185 25
x6576:	mov [bp + 46], bp	; 3: 137 110 46
x6579:	add bp, 44	; 3: 131 197 44
x6582:	jmp log10	; 3: 233 117 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary2120

printArgument$268:	; FloatingToIntegral £temporary2121 £temporary2120
x6585:	fistp word [container2bytes#]	; 4: 223 30 79 27
x6589:	mov ax, [container2bytes#]	; 3: 161 79 27

printArgument$269:	; Assign expo £temporary2121
x6592:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6595:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6599:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6601:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6605:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6607:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6610:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6613:	mov ax, [bp + 10]	; 3: 139 70 10
x6616:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6619:	mov ax, [bp + 12]	; 3: 139 70 12
x6622:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6625:	mov ax, [bp + 14]	; 3: 139 70 14
x6628:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6631:	mov ax, [bp + 18]	; 3: 139 70 18
x6634:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6637:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 251 25
x6642:	mov [bp + 48], bp	; 3: 137 110 48
x6645:	add bp, 46	; 3: 131 197 46
x6648:	jmp printLongDoublePlain	; 3: 233 189 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6651:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6654:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6657:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6660:	mov ax, [bp + 10]	; 3: 139 70 10
x6663:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6666:	mov ax, [bp + 12]	; 3: 139 70 12
x6669:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6672:	mov ax, [bp + 14]	; 3: 139 70 14
x6675:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6678:	mov ax, [bp + 18]	; 3: 139 70 18
x6681:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary2126 c
x6684:	mov al, [bp + 30]	; 3: 138 70 30
x6687:	and ax, 255	; 3: 37 255 0
x6690:	cmp al, 0	; 2: 60 0
x6692:	jge printArgument$291	; 2: 125 4
x6694:	neg al	; 2: 246 216
x6696:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary2126 28
x6698:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6701:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 59 26
x6706:	mov [bp + 70], bp	; 3: 137 110 70
x6709:	add bp, 68	; 3: 131 197 68
x6712:	jmp isupper	; 3: 233 209 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary2127

printArgument$295:	; Parameter 46 £temporary2127 22
x6715:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6718:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 76 26
x6723:	mov [bp + 48], bp	; 3: 137 110 48
x6726:	add bp, 46	; 3: 131 197 46
x6729:	jmp printLongDoubleExpo	; 3: 233 115 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6732:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6735:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary2130 arg_list 2
x6739:	mov si, [bp + 8]	; 3: 139 118 8
x6742:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary2131 £temporary2130

printArgument$302:	; Deref £temporary2132 -> £temporary2131 £temporary2131 0

printArgument$303:	; Assign ptrValue £temporary2132 -> £temporary2131
x6745:	mov ax, [si]	; 2: 139 4
x6747:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6750:	mov ax, [bp + 8]	; 3: 139 70 8
x6753:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6756:	mov ax, [bp + 16]	; 3: 139 70 16
x6759:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary2133 precision
x6762:	mov si, bp	; 2: 137 238
x6764:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary2133 10
x6767:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6770:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 128 26
x6775:	mov [bp + 46], bp	; 3: 137 110 46
x6778:	add bp, 44	; 3: 131 197 44
x6781:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary2134

printArgument$312:	; Assign arg_list £temporary2134
x6784:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary2135 ptrValue
x6787:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary2136 £temporary2135
x6790:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary2136 6
x6796:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6800:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6805:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6810:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6815:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6823:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6828:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 186 26
x6833:	mov [bp + 46], bp	; 3: 137 110 46
x6836:	add bp, 44	; 3: 131 197 44
x6839:	jmp printUnsignedLong	; 3: 233 83 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6842:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6845:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary2139 arg_list 2
x6849:	mov si, [bp + 8]	; 3: 139 118 8
x6852:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary2140 £temporary2139

printArgument$328:	; Deref £temporary2141 -> £temporary2140 £temporary2140 0

printArgument$329:	; Assign ptrValue £temporary2141 -> £temporary2140
x6855:	mov ax, [si]	; 2: 139 4
x6857:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6860:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary2143 arg_list 2
x6864:	mov si, [bp + 8]	; 3: 139 118 8
x6867:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary2144 £temporary2143

printArgument$333:	; Deref £temporary2145 -> £temporary2144 £temporary2144 0

printArgument$334:	; Assign intPtr £temporary2145 -> £temporary2144
x6870:	mov ax, [si]	; 2: 139 4
x6872:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6875:	mov ax, [bp + 8]	; 3: 139 70 8
x6878:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6881:	mov ax, [bp + 16]	; 3: 139 70 16
x6884:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary2146 precision
x6887:	mov si, bp	; 2: 137 238
x6889:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary2146 10
x6892:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6895:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 253 26
x6900:	mov [bp + 46], bp	; 3: 137 110 46
x6903:	add bp, 44	; 3: 131 197 44
x6906:	nop	; 1: 144
x6907:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary2147

printArgument$343:	; Assign arg_list £temporary2147
x6909:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary2148 -> intPtr intPtr 0
x6912:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary2148 -> intPtr g_outChars
x6915:	mov ax, [g_outChars]	; 3: 161 57 21
x6918:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6920:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6922:	mov ax, [bp + 8]	; 3: 139 70 8
x6925:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6928:	mov ax, [bp + 16]	; 3: 139 70 16
x6931:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary2149 precision
x6934:	mov si, bp	; 2: 137 238
x6936:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary2149 10
x6939:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6942:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 44 27
x6947:	mov [bp + 46], bp	; 3: 137 110 46
x6950:	add bp, 44	; 3: 131 197 44
x6953:	nop	; 1: 144
x6954:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary2150

printArgument$355:	; Assign arg_list £temporary2150
x6956:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6959:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6963:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 65 27
x6968:	mov [bp + 46], bp	; 3: 137 110 46
x6971:	add bp, 44	; 3: 131 197 44
x6974:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6977:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6980:	mov ax, [bp]	; 3: 139 70 0
x6983:	mov di, [bp + 4]	; 3: 139 126 4
x6986:	mov bp, [bp + 2]	; 3: 139 110 2
x6989:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6991:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6993:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6998:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3398 value
x7000:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x7004:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3402 £temporary3398

labs$3:	; Goto 5
x7007:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3402 value
x7009:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3402

labs$6:	; Return £temporary3402
x7013:	mov ax, [bp]	; 3: 139 70 0
x7016:	mov di, [bp + 4]	; 3: 139 126 4
x7019:	mov bp, [bp + 2]	; 3: 139 110 2
x7022:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x7024:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7028:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1994 -> widthPtr widthPtr 0
x7030:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1994 -> widthPtr -1
x7033:	cmp word [si], -1	; 3: 131 60 255
x7036:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1997 -> widthPtr widthPtr 0
x7038:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x7041:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1999 arg_list 2
x7045:	mov di, [bp + 6]	; 3: 139 126 6
x7048:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary2000 £temporary1999

checkWidthAndPrecision$7:	; Deref £temporary2001 -> £temporary2000 £temporary2000 0

checkWidthAndPrecision$8:	; Assign £temporary1997 -> widthPtr £temporary2001 -> £temporary2000
x7051:	mov ax, [di]	; 2: 139 5
x7053:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x7055:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7059:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary2003 -> precisionPtr precisionPtr 0
x7061:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary2003 -> precisionPtr -1
x7064:	cmp word [si], -1	; 3: 131 60 255
x7067:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary2006 -> precisionPtr precisionPtr 0
x7069:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7072:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary2008 arg_list 2
x7076:	mov di, [bp + 6]	; 3: 139 126 6
x7079:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary2009 £temporary2008

checkWidthAndPrecision$16:	; Deref £temporary2010 -> £temporary2009 £temporary2009 0

checkWidthAndPrecision$17:	; Assign £temporary2006 -> precisionPtr £temporary2010 -> £temporary2009
x7082:	mov ax, [di]	; 2: 139 5
x7084:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7086:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7089:	mov ax, [bp]	; 3: 139 70 0
x7092:	mov di, [bp + 4]	; 3: 139 126 4
x7095:	mov bp, [bp + 2]	; 3: 139 110 2
x7098:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7100:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7105:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1849 longValue
x7107:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7111:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1849
x7114:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7118:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7122:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 224 27
x7127:	mov [bp + 16], bp	; 3: 137 110 16
x7130:	add bp, 14	; 3: 131 197 14
x7133:	nop	; 1: 144
x7134:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7136:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7138:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7142:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7144:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7148:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 250 27
x7153:	mov [bp + 16], bp	; 3: 137 110 16
x7156:	add bp, 14	; 3: 131 197 14
x7159:	nop	; 1: 144
x7160:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7162:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7164:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7168:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7170:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7174:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 20 28
x7179:	mov [bp + 16], bp	; 3: 137 110 16
x7182:	add bp, 14	; 3: 131 197 14
x7185:	nop	; 1: 144
x7186:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7188:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7193:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7195:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7199:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 45 28
x7204:	mov [bp + 16], bp	; 3: 137 110 16
x7207:	add bp, 14	; 3: 131 197 14
x7210:	nop	; 1: 144
x7211:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7213:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7215:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7219:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7223:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 69 28
x7228:	mov [bp + 16], bp	; 3: 137 110 16
x7231:	add bp, 14	; 3: 131 197 14
x7234:	nop	; 1: 144
x7235:	jmp printLongIntRec	; 2: 235 101

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7237:	mov ax, [bp]	; 3: 139 70 0
x7240:	mov di, [bp + 4]	; 3: 139 126 4
x7243:	mov bp, [bp + 2]	; 3: 139 110 2
x7246:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7248:	mov ax, [g_outStatus]	; 3: 161 219 15
x7251:	cmp ax, 0	; 3: 131 248 0
x7254:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7256:	cmp ax, 1	; 3: 131 248 1
x7259:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7261:	cmp ax, 2	; 3: 131 248 2
x7264:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 25
x7266:	jmp printChar$25	; 2: 235 59

printChar$5:	; IntegralToIntegral £temporary1791 g_outDevice
x7268:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$6:	; Assign stream £temporary1791
x7271:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7274:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1794 -> stream stream 2
x7276:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1794 -> stream
x7279:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7282:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1797 c
x7285:	mov dx, bp	; 2: 137 234
x7287:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1797

printChar$13:	; Interrupt 33
x7290:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7292:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$15:	; Goto 25
x7296:	jmp printChar$25	; 2: 235 29

printChar$16:	; IntegralToIntegral £temporary1799 g_outDevice
x7298:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$17:	; Assign outString £temporary1799
x7301:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1800 g_outChars
x7304:	mov ax, [g_outChars]	; 3: 161 57 21

printChar$19:	; Increment g_outChars
x7307:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$20:	; BinaryAdd £temporary1802 outString £temporary1800
x7311:	mov si, [bp + 9]	; 3: 139 118 9
x7314:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1801 -> £temporary1802 £temporary1802 0

printChar$22:	; Assign £temporary1801 -> £temporary1802 c
x7316:	mov al, [bp + 6]	; 3: 138 70 6
x7319:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 25
x7321:	jmp printChar$25	; 2: 235 4

printChar$24:	; Increment g_outChars
x7323:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$25:	; Return 0
x7327:	mov ax, [bp]	; 3: 139 70 0
x7330:	mov di, [bp + 4]	; 3: 139 126 4
x7333:	mov bp, [bp + 2]	; 3: 139 110 2
x7336:	jmp ax	; 2: 255 224

printChar$26:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7338:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7343:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1839 longValue 10
x7345:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7349:	xor edx, edx	; 3: 102 49 210
x7352:	idiv dword [@4080$int4$10#]	; 5: 102 247 62 20 29

printLongIntRec$2:	; IntegralToIntegral £temporary1840 £temporary1839
x7357:	cmp edx, 0	; 4: 102 131 250 0
x7361:	jge printLongIntRec$3	; 2: 125 5
x7363:	neg edx	; 3: 102 247 218
x7366:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1840
x7368:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1841 longValue 10
x7371:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7375:	xor edx, edx	; 3: 102 49 210
x7378:	idiv dword [@4085$int4$10#]	; 5: 102 247 62 24 29

printLongIntRec$6:	; Parameter 12 £temporary1841 6
x7383:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7387:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 233 28
x7392:	mov [bp + 14], bp	; 3: 137 110 14
x7395:	add bp, 12	; 3: 131 197 12
x7398:	nop	; 1: 144
x7399:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1843 digit 48
x7401:	mov ax, [bp + 10]	; 3: 139 70 10
x7404:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1844 £temporary1843
x7407:	cmp ax, 0	; 3: 131 248 0
x7410:	jge printLongIntRec$12	; 2: 125 4
x7412:	neg ax	; 2: 247 216
x7414:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1844 6
x7416:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7419:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 9 29
x7424:	mov [bp + 14], bp	; 3: 137 110 14
x7427:	add bp, 12	; 3: 131 197 12
x7430:	jmp printChar	; 3: 233 71 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7433:	mov ax, [bp]	; 3: 139 70 0
x7436:	mov di, [bp + 4]	; 3: 139 126 4
x7439:	mov bp, [bp + 2]	; 3: 139 110 2
x7442:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

@4080$int4$10#:
x7444:	dd 10	; 4: 10 0 0 0

@4085$int4$10#:
x7448:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7452:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7456:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7458:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7462:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7464:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1808 s index
x7469:	mov si, [bp + 6]	; 3: 139 118 6
x7472:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1807 -> £temporary1808 £temporary1808 0

printString$5:	; Equal 53 £temporary1807 -> £temporary1808 0
x7475:	cmp byte [si], 0	; 3: 128 60 0
x7478:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1812 s index
x7482:	mov si, [bp + 6]	; 3: 139 118 6
x7485:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1811 -> £temporary1812 £temporary1812 0

printString$9:	; Parameter 12 £temporary1811 -> £temporary1812 6
x7488:	mov al, [si]	; 2: 138 4
x7490:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7493:	mov word [bp + 12], printString$11	; 5: 199 70 12 83 29
x7498:	mov [bp + 14], bp	; 3: 137 110 14
x7501:	add bp, 12	; 3: 131 197 12
x7504:	jmp printChar	; 3: 233 253 254

printString$11:	; PostCall 12

printString$12:	; Increment index
x7507:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7510:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7512:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1814 precision
x7517:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7520:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1814 0
x7523:	cmp ax, 0	; 3: 131 248 0
x7526:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1817 s index
x7530:	mov si, [bp + 6]	; 3: 139 118 6
x7533:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1816 -> £temporary1817 £temporary1817 0

printString$20:	; Equal 53 £temporary1816 -> £temporary1817 0
x7536:	cmp byte [si], 0	; 3: 128 60 0
x7539:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1822 s index
x7543:	mov si, [bp + 6]	; 3: 139 118 6
x7546:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1821 -> £temporary1822 £temporary1822 0

printString$24:	; Parameter 12 £temporary1821 -> £temporary1822 6
x7549:	mov al, [si]	; 2: 138 4
x7551:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7554:	mov word [bp + 12], printString$26	; 5: 199 70 12 144 29
x7559:	mov [bp + 14], bp	; 3: 137 110 14
x7562:	add bp, 12	; 3: 131 197 12
x7565:	jmp printChar	; 3: 233 192 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7568:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7571:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7573:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7577:	mov word [bp + 10], printString$32	; 5: 199 70 10 167 29
x7582:	mov [bp + 12], bp	; 3: 137 110 12
x7585:	add bp, 10	; 3: 131 197 10
x7588:	jmp printChar	; 3: 233 169 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7591:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7595:	mov word [bp + 10], printString$36	; 5: 199 70 10 185 29
x7600:	mov [bp + 12], bp	; 3: 137 110 12
x7603:	add bp, 10	; 3: 131 197 10
x7606:	jmp printChar	; 3: 233 151 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7609:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7613:	mov word [bp + 10], printString$40	; 5: 199 70 10 203 29
x7618:	mov [bp + 12], bp	; 3: 137 110 12
x7621:	add bp, 10	; 3: 131 197 10
x7624:	jmp printChar	; 3: 233 133 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7627:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7631:	mov word [bp + 10], printString$44	; 5: 199 70 10 221 29
x7636:	mov [bp + 12], bp	; 3: 137 110 12
x7639:	add bp, 10	; 3: 131 197 10
x7642:	jmp printChar	; 3: 233 115 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7645:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7649:	mov word [bp + 10], printString$48	; 5: 199 70 10 239 29
x7654:	mov [bp + 12], bp	; 3: 137 110 12
x7657:	add bp, 10	; 3: 131 197 10
x7660:	jmp printChar	; 3: 233 97 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7663:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7667:	mov word [bp + 10], printString$52	; 5: 199 70 10 1 30
x7672:	mov [bp + 12], bp	; 3: 137 110 12
x7675:	add bp, 10	; 3: 131 197 10
x7678:	jmp printChar	; 3: 233 79 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7681:	mov ax, [bp]	; 3: 139 70 0
x7684:	mov di, [bp + 4]	; 3: 139 126 4
x7687:	mov bp, [bp + 2]	; 3: 139 110 2
x7690:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7692:	mov word [bp + 8], isupper$2	; 5: 199 70 8 26 30
x7697:	mov [bp + 10], bp	; 3: 137 110 10
x7700:	add bp, 8	; 3: 131 197 8
x7703:	nop	; 1: 144
x7704:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary360

isupper$4:	; Assign localeConvPtr £temporary360
x7706:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7709:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7713:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary362 -> localeConvPtr localeConvPtr 14
x7715:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary362 -> localeConvPtr 6
x7718:	mov ax, [si + 14]	; 3: 139 68 14
x7721:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7724:	mov ax, [bp + 6]	; 3: 139 70 6
x7727:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7730:	mov word [bp + 10], isupper$11	; 5: 199 70 10 64 30
x7735:	mov [bp + 12], bp	; 3: 137 110 12
x7738:	add bp, 10	; 3: 131 197 10
x7741:	jmp strchr	; 3: 233 125 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary363

isupper$13:	; Equal 16 £temporary363 0
x7744:	cmp bx, 0	; 3: 131 251 0
x7747:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary365 1
x7749:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7752:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary365 0
x7754:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary365

isupper$18:	; Return £temporary365
x7757:	mov ax, [bp]	; 3: 139 70 0
x7760:	mov di, [bp + 4]	; 3: 139 126 4
x7763:	mov bp, [bp + 2]	; 3: 139 110 2
x7766:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7768:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7772:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7774:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7778:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary369 1
x7780:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7783:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary369 0
x7785:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary369

isupper$25:	; Return £temporary369
x7788:	mov ax, [bp]	; 3: 139 70 0
x7791:	mov di, [bp + 4]	; 3: 139 126 4
x7794:	mov bp, [bp + 2]	; 3: 139 110 2
x7797:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7799:	cmp word [@1131$g_currStructPtr], 0	; 5: 131 62 149 30 0
x7804:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary493 -> g_currStructPtr g_currStructPtr 2
x7806:	mov si, [@1131$g_currStructPtr]	; 4: 139 54 149 30

localeconv$2:	; Assign £temporary497 £temporary493 -> g_currStructPtr
x7810:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7813:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary497 0
x7815:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary497

localeconv$6:	; Return £temporary497
x7818:	mov ax, [bp]	; 3: 139 70 0
x7821:	mov di, [bp + 4]	; 3: 139 126 4
x7824:	mov bp, [bp + 2]	; 3: 139 110 2
x7827:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@1131$g_currStructPtr:
x7829:	dw @1122$sArray	; 2: 151 30

@1122$sArray:
x7831:	dw @1116$string_# ; 2: 163 30
x7833:	dw @1111$en_US_utf8	; 2: 164 30
x7835:	dw @1118$string_C# ; 2: 184 33
x7837:	dw @1111$en_US_utf8	; 2: 164 30
x7839:	dw @1120$string_US# ; 2: 186 33
x7841:	dw @1111$en_US_utf8	; 2: 164 30

@1116$string_#:
x7843:	db 0	; 1: 0

@1111$en_US_utf8:
x7844:	dw 1	; 2: 1 0
x7846:	dw 1	; 2: 1 0
x7848:	dw @1052$enShortDayList ; 2: 182 30
x7850:	dw @1060$enLongDayList ; 2: 224 30
x7852:	dw @1073$enShortMonthList ; 2: 39 31
x7854:	dw @1086$enLongMonthList ; 2: 111 31
x7856:	dw @1109$string_abcdefghijklmnopqrstuvwxyz# ; 2: 221 31
x7858:	dw @1110$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 248 31
x7860:	dw enMessageList ; 2: 19 32

@1052$enShortDayList:
x7862:	dw @1045$string_Sun# ; 2: 196 30
x7864:	dw @1046$string_Mon# ; 2: 200 30
x7866:	dw @1047$string_Tue# ; 2: 204 30
x7868:	dw @1048$string_Wed# ; 2: 208 30
x7870:	dw @1049$string_Thu# ; 2: 212 30
x7872:	dw @1050$string_Fri# ; 2: 216 30
x7874:	dw @1051$string_Sat# ; 2: 220 30

@1045$string_Sun#:
x7876:	db "Sun", 0	; 4: 83 117 110 0

@1046$string_Mon#:
x7880:	db "Mon", 0	; 4: 77 111 110 0

@1047$string_Tue#:
x7884:	db "Tue", 0	; 4: 84 117 101 0

@1048$string_Wed#:
x7888:	db "Wed", 0	; 4: 87 101 100 0

@1049$string_Thu#:
x7892:	db "Thu", 0	; 4: 84 104 117 0

@1050$string_Fri#:
x7896:	db "Fri", 0	; 4: 70 114 105 0

@1051$string_Sat#:
x7900:	db "Sat", 0	; 4: 83 97 116 0

@1060$enLongDayList:
x7904:	dw @1053$string_Sunday# ; 2: 238 30
x7906:	dw @1054$string_Monday# ; 2: 245 30
x7908:	dw @1055$string_Tuesday# ; 2: 252 30
x7910:	dw @1056$string_Wednesday# ; 2: 4 31
x7912:	dw @1057$string_Thursday# ; 2: 14 31
x7914:	dw @1058$string_Friday# ; 2: 23 31
x7916:	dw @1059$string_Saturday# ; 2: 30 31

@1053$string_Sunday#:
x7918:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@1054$string_Monday#:
x7925:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@1055$string_Tuesday#:
x7932:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@1056$string_Wednesday#:
x7940:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@1057$string_Thursday#:
x7950:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@1058$string_Friday#:
x7959:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@1059$string_Saturday#:
x7966:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@1073$enShortMonthList:
x7975:	dw @1061$string_Jan# ; 2: 63 31
x7977:	dw @1062$string_Feb# ; 2: 67 31
x7979:	dw @1063$string_Mar# ; 2: 71 31
x7981:	dw @1064$string_Apr# ; 2: 75 31
x7983:	dw @1065$string_May# ; 2: 79 31
x7985:	dw @1066$string_Jun# ; 2: 83 31
x7987:	dw @1067$string_Jul# ; 2: 87 31
x7989:	dw @1068$string_Aug# ; 2: 91 31
x7991:	dw @1069$string_Sep# ; 2: 95 31
x7993:	dw @1070$string_Oct# ; 2: 99 31
x7995:	dw @1071$string_Nov# ; 2: 103 31
x7997:	dw @1072$string_Dec# ; 2: 107 31

@1061$string_Jan#:
x7999:	db "Jan", 0	; 4: 74 97 110 0

@1062$string_Feb#:
x8003:	db "Feb", 0	; 4: 70 101 98 0

@1063$string_Mar#:
x8007:	db "Mar", 0	; 4: 77 97 114 0

@1064$string_Apr#:
x8011:	db "Apr", 0	; 4: 65 112 114 0

@1065$string_May#:
x8015:	db "May", 0	; 4: 77 97 121 0

@1066$string_Jun#:
x8019:	db "Jun", 0	; 4: 74 117 110 0

@1067$string_Jul#:
x8023:	db "Jul", 0	; 4: 74 117 108 0

@1068$string_Aug#:
x8027:	db "Aug", 0	; 4: 65 117 103 0

@1069$string_Sep#:
x8031:	db "Sep", 0	; 4: 83 101 112 0

@1070$string_Oct#:
x8035:	db "Oct", 0	; 4: 79 99 116 0

@1071$string_Nov#:
x8039:	db "Nov", 0	; 4: 78 111 118 0

@1072$string_Dec#:
x8043:	db "Dec", 0	; 4: 68 101 99 0

@1086$enLongMonthList:
x8047:	dw @1074$string_January# ; 2: 135 31
x8049:	dw @1075$string_February# ; 2: 143 31
x8051:	dw @1076$string_March# ; 2: 152 31
x8053:	dw @1077$string_April# ; 2: 158 31
x8055:	dw @1078$string_May# ; 2: 164 31
x8057:	dw @1079$string_June# ; 2: 168 31
x8059:	dw @1080$string_July# ; 2: 173 31
x8061:	dw @1081$string_August# ; 2: 178 31
x8063:	dw @1082$string_September# ; 2: 185 31
x8065:	dw @1083$string_October# ; 2: 195 31
x8067:	dw @1084$string_November# ; 2: 203 31
x8069:	dw @1085$string_December# ; 2: 212 31

@1074$string_January#:
x8071:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@1075$string_February#:
x8079:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@1076$string_March#:
x8088:	db "March", 0	; 6: 77 97 114 99 104 0

@1077$string_April#:
x8094:	db "April", 0	; 6: 65 112 114 105 108 0

@1078$string_May#:
x8100:	db "May", 0	; 4: 77 97 121 0

@1079$string_June#:
x8104:	db "June", 0	; 5: 74 117 110 101 0

@1080$string_July#:
x8109:	db "July", 0	; 5: 74 117 108 121 0

@1081$string_August#:
x8114:	db "August", 0	; 7: 65 117 103 117 115 116 0

@1082$string_September#:
x8121:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@1083$string_October#:
x8131:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@1084$string_November#:
x8139:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@1085$string_December#:
x8148:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@1109$string_abcdefghijklmnopqrstuvwxyz#:
x8157:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

@1110$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8184:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8211:	dw @1087$string_no20error# ; 2: 59 32
x8213:	dw @1088$string_function20number20invalid# ; 2: 68 32
x8215:	dw @1089$string_file20not20found# ; 2: 92 32
x8217:	dw @1090$string_path20not20found# ; 2: 107 32
x8219:	dw @1091$string_no20handle20available# ; 2: 122 32
x8221:	dw @1092$string_access20denied# ; 2: 142 32
x8223:	dw @1093$string_out20of20domain# ; 2: 156 32
x8225:	dw @1094$string_out20of20range# ; 2: 170 32
x8227:	dw @1095$string_invalid20multibyte20sequence# ; 2: 183 32
x8229:	dw @1096$string_error20while20opening# ; 2: 210 32
x8231:	dw @1097$string_error20while20flushing# ; 2: 230 32
x8233:	dw @1098$string_error20while20closing# ; 2: 251 32
x8235:	dw @1099$string_open20mode20invalid# ; 2: 15 33
x8237:	dw @1100$string_error20while20writing# ; 2: 33 33
x8239:	dw @1101$string_error20while20reading# ; 2: 53 33
x8241:	dw @1102$string_error20while20seeking# ; 2: 73 33
x8243:	dw @1103$string_error20while20telling# ; 2: 93 33
x8245:	dw @1104$string_error20while20sizing# ; 2: 113 33
x8247:	dw @1105$string_error20while20removing20file# ; 2: 132 33
x8249:	dw @1106$string_error20while20renaming20file# ; 2: 158 33

@1087$string_no20error#:
x8251:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

@1088$string_function20number20invalid#:
x8260:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

@1089$string_file20not20found#:
x8284:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

@1090$string_path20not20found#:
x8299:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

@1091$string_no20handle20available#:
x8314:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

@1092$string_access20denied#:
x8334:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

@1093$string_out20of20domain#:
x8348:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

@1094$string_out20of20range#:
x8362:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

@1095$string_invalid20multibyte20sequence#:
x8375:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

@1096$string_error20while20opening#:
x8402:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

@1097$string_error20while20flushing#:
x8422:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

@1098$string_error20while20closing#:
x8443:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

@1099$string_open20mode20invalid#:
x8463:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

@1100$string_error20while20writing#:
x8481:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

@1101$string_error20while20reading#:
x8501:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

@1102$string_error20while20seeking#:
x8521:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

@1103$string_error20while20telling#:
x8541:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

@1104$string_error20while20sizing#:
x8561:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

@1105$string_error20while20removing20file#:
x8580:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

@1106$string_error20while20renaming20file#:
x8606:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

@1118$string_C#:
x8632:	db "C", 0	; 2: 67 0

@1120$string_US#:
x8634:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary4012 i
x8637:	mov ax, [bp + 8]	; 3: 139 70 8
x8640:	cmp ax, 0	; 3: 131 248 0
x8643:	jge strchr$1	; 2: 125 4
x8645:	neg ax	; 2: 247 216
x8647:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary4012
x8649:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8652:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary4014 text index
x8657:	mov si, [bp + 6]	; 3: 139 118 6
x8660:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary4013 -> £temporary4014 £temporary4014 0

strchr$5:	; Equal 16 £temporary4013 -> £temporary4014 0
x8663:	cmp byte [si], 0	; 3: 128 60 0
x8666:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary4018 text index
x8668:	mov si, [bp + 6]	; 3: 139 118 6
x8671:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary4017 -> £temporary4018 £temporary4018 0

strchr$8:	; NotEqual 14 £temporary4017 -> £temporary4018 c
x8674:	mov al, [bp + 12]	; 3: 138 70 12
x8677:	cmp [si], al	; 2: 56 4
x8679:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary4021 text index
x8681:	mov bx, [bp + 6]	; 3: 139 94 6
x8684:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary4020 -> £temporary4021 £temporary4021 0

strchr$11:	; address £temporary4022 £temporary4020 -> £temporary4021

strchr$12:	; SetReturnValue £temporary4022

strchr$13:	; Return £temporary4022
x8687:	mov ax, [bp]	; 3: 139 70 0
x8690:	mov di, [bp + 4]	; 3: 139 126 4
x8693:	mov bp, [bp + 2]	; 3: 139 110 2
x8696:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8698:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8701:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8703:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8706:	mov ax, [bp]	; 3: 139 70 0
x8709:	mov di, [bp + 4]	; 3: 139 126 4
x8712:	mov bp, [bp + 2]	; 3: 139 110 2
x8715:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8717:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8721:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8723:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8727:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 37 34
x8732:	mov [bp + 24], bp	; 3: 137 110 24
x8735:	add bp, 22	; 3: 131 197 22
x8738:	jmp printChar	; 3: 233 43 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8741:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8745:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8747:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8751:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 61 34
x8756:	mov [bp + 24], bp	; 3: 137 110 24
x8759:	add bp, 22	; 3: 131 197 22
x8762:	jmp printChar	; 3: 233 19 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8765:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8769:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8771:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8776:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8778:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8782:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 92 34
x8787:	mov [bp + 24], bp	; 3: 137 110 24
x8790:	add bp, 22	; 3: 131 197 22
x8793:	jmp printChar	; 3: 233 244 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8796:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8801:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8803:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8807:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 117 34
x8812:	mov [bp + 24], bp	; 3: 137 110 24
x8815:	add bp, 22	; 3: 131 197 22
x8818:	jmp printChar	; 3: 233 219 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8821:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8825:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1898 88
x8827:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8829:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1898 120
x8831:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1898 6
x8833:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8836:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 146 34
x8841:	mov [bp + 24], bp	; 3: 137 110 24
x8844:	add bp, 22	; 3: 131 197 22
x8847:	jmp printChar	; 3: 233 190 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8850:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8855:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8857:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8861:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 171 34
x8866:	mov [bp + 24], bp	; 3: 137 110 24
x8869:	add bp, 22	; 3: 131 197 22
x8872:	jmp printChar	; 3: 233 165 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8875:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8877:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8881:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8885:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8889:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8893:	mov ax, [bp + 20]	; 3: 139 70 20
x8896:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8899:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 209 34
x8904:	mov [bp + 24], bp	; 3: 137 110 24
x8907:	add bp, 22	; 3: 131 197 22
x8910:	nop	; 1: 144
x8911:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8913:	mov ax, [bp]	; 3: 139 70 0
x8916:	mov di, [bp + 4]	; 3: 139 126 4
x8919:	mov bp, [bp + 2]	; 3: 139 110 2
x8922:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8924:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8929:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1874 unsignedValue base
x8931:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8935:	xor edx, edx	; 3: 102 49 210
x8938:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1875 £temporary1874

printUnsignedLongRec$3:	; Assign digit £temporary1875
x8942:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1876 unsignedValue base
x8945:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8949:	xor edx, edx	; 3: 102 49 210
x8952:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1876 6
x8956:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8960:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8964:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8968:	mov ax, [bp + 14]	; 3: 139 70 14
x8971:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8974:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 28 35
x8979:	mov [bp + 20], bp	; 3: 137 110 20
x8982:	add bp, 18	; 3: 131 197 18
x8985:	nop	; 1: 144
x8986:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8988:	mov ax, [bp + 16]	; 3: 139 70 16
x8991:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8994:	mov ax, [bp + 14]	; 3: 139 70 14
x8997:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x9000:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 54 35
x9005:	mov [bp + 20], bp	; 3: 137 110 20
x9008:	add bp, 18	; 3: 131 197 18
x9011:	nop	; 1: 144
x9012:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1878

printUnsignedLongRec$17:	; Assign c £temporary1878
x9014:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x9017:	mov al, [bp + 18]	; 3: 138 70 18
x9020:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x9023:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 77 35
x9028:	mov [bp + 21], bp	; 3: 137 110 21
x9031:	add bp, 19	; 3: 131 197 19
x9034:	jmp printChar	; 3: 233 3 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x9037:	mov ax, [bp]	; 3: 139 70 0
x9040:	mov di, [bp + 4]	; 3: 139 126 4
x9043:	mov bp, [bp + 2]	; 3: 139 110 2
x9046:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x9048:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x9052:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1864 digit 48
x9054:	mov bx, [bp + 6]	; 3: 139 94 6
x9057:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1865 £temporary1864
x9060:	cmp bx, 0	; 3: 131 251 0
x9063:	jge digitToChar$3	; 2: 125 4
x9065:	neg bx	; 2: 247 219
x9067:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1865

digitToChar$4:	; Return £temporary1865
x9069:	mov ax, [bp]	; 3: 139 70 0
x9072:	mov di, [bp + 4]	; 3: 139 126 4
x9075:	mov bp, [bp + 2]	; 3: 139 110 2
x9078:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9080:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9084:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1866 digit 10
x9086:	mov bx, [bp + 6]	; 3: 139 94 6
x9089:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1867 £temporary1866 65
x9092:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1868 £temporary1867
x9095:	cmp bx, 0	; 3: 131 251 0
x9098:	jge digitToChar$9	; 2: 125 4
x9100:	neg bx	; 2: 247 219
x9102:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1868

digitToChar$10:	; Return £temporary1868
x9104:	mov ax, [bp]	; 3: 139 70 0
x9107:	mov di, [bp + 4]	; 3: 139 126 4
x9110:	mov bp, [bp + 2]	; 3: 139 110 2
x9113:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1869 digit 10
x9115:	mov bx, [bp + 6]	; 3: 139 94 6
x9118:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1870 £temporary1869 97
x9121:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1871 £temporary1870
x9124:	cmp bx, 0	; 3: 131 251 0
x9127:	jge digitToChar$14	; 2: 125 4
x9129:	neg bx	; 2: 247 219
x9131:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1871

digitToChar$15:	; Return £temporary1871
x9133:	mov ax, [bp]	; 3: 139 70 0
x9136:	mov di, [bp + 4]	; 3: 139 126 4
x9139:	mov bp, [bp + 2]	; 3: 139 110 2
x9142:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9144:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9147:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9149:	fcompp	; 2: 222 217
x9151:	fstsw ax	; 3: 155 223 224
x9154:	sahf	; 1: 158
x9155:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9157:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9161:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 215 35
x9166:	mov [bp + 24], bp	; 3: 137 110 24
x9169:	add bp, 22	; 3: 131 197 22
x9172:	jmp printChar	; 3: 233 121 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9175:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1934 longDoubleValue
x9178:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9180:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9183:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9188:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9193:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1935 longDoubleValue
x9196:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x9200:	mov eax, [container4bytes#]	; 4: 102 161 80 36

printLongDoublePlain$14:	; Assign longValue £temporary1935
x9204:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9208:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9212:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9216:	mov ax, [bp + 14]	; 3: 139 70 14
x9219:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9222:	mov ax, [bp + 16]	; 3: 139 70 16
x9225:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9228:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 26 36
x9233:	mov [bp + 28], bp	; 3: 137 110 28
x9236:	add bp, 26	; 3: 131 197 26
x9239:	jmp printLongInt	; 3: 233 162 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9242:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1937 longValue
x9245:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1938 longDoubleValue £temporary1937
x9248:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9250:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9253:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9256:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9259:	mov ax, [bp + 18]	; 3: 139 70 18
x9262:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9265:	mov ax, [bp + 20]	; 3: 139 70 20
x9268:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9271:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 69 36
x9276:	mov [bp + 28], bp	; 3: 137 110 28
x9279:	add bp, 26	; 3: 131 197 26
x9282:	nop	; 1: 144
x9283:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9285:	mov ax, [bp]	; 3: 139 70 0
x9288:	mov di, [bp + 4]	; 3: 139 126 4
x9291:	mov bp, [bp + 2]	; 3: 139 110 2
x9294:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9296:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9300:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9303:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1913 longDoubleValue
x9306:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x9310:	mov eax, [container4bytes#]	; 4: 102 161 80 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1914 £temporary1913
x9314:	mov [container4bytes#], eax	; 4: 102 163 80 36
x9318:	fild dword [container4bytes#]	; 4: 219 6 80 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1915 longDoubleValue £temporary1914
x9322:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9324:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9327:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9331:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9333:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9338:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9342:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9344:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9348:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9350:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9354:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 152 36
x9359:	mov [bp + 20], bp	; 3: 137 110 20
x9362:	add bp, 18	; 3: 131 197 18
x9365:	jmp printChar	; 3: 233 184 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1921 precision
x9368:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9371:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1921 0
x9374:	cmp ax, 0	; 3: 131 248 0
x9377:	jle printLongDoubleFraction$35	; 2: 126 70

printLongDoubleFraction$17:	; PushFloat 10.0
x9379:	fld qword [@4244$float8$10.0#]	; 4: 221 6 244 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9383:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1923 10.0 longDoubleValue
x9386:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
x9388:	fstp qword [bp + 18]	; 3: 221 94 18

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
x9391:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1924 longDoubleValue10
x9394:	fistp word [container2bytes#]	; 4: 223 30 79 27
x9398:	mov ax, [container2bytes#]	; 3: 161 79 27

printLongDoubleFraction$23:	; Assign digitValue £temporary1924
x9401:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$25:	; BinaryAdd £temporary1925 digitValue 48
x9404:	mov ax, [bp + 26]	; 3: 139 70 26
x9407:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1926 £temporary1925
x9410:	cmp ax, 0	; 3: 131 248 0
x9413:	jge printLongDoubleFraction$27	; 2: 125 4
x9415:	neg ax	; 2: 247 216
x9417:	neg al	; 2: 246 216

printLongDoubleFraction$27:	; Parameter 28 £temporary1926 6
x9419:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$28:	; Call 28 printChar 0
x9422:	mov word [bp + 28], printLongDoubleFraction$29	; 5: 199 70 28 220 36
x9427:	mov [bp + 30], bp	; 3: 137 110 30
x9430:	add bp, 28	; 3: 131 197 28
x9433:	jmp printChar	; 3: 233 116 247

printLongDoubleFraction$29:	; PostCall 28

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
x9436:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$31:	; IntegralToFloating £temporary1928 digitValue
x9439:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$32:	; BinarySubtract £temporary1929 longDoubleValue10 £temporary1928
x9442:	fsub	; 2: 222 233

printLongDoubleFraction$33:	; PopFloat longDoubleValue
x9444:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$34:	; Goto 14
x9447:	jmp printLongDoubleFraction$14	; 2: 235 175

printLongDoubleFraction$35:	; Return 0
x9449:	mov ax, [bp]	; 3: 139 70 0
x9452:	mov di, [bp + 4]	; 3: 139 126 4
x9455:	mov bp, [bp + 2]	; 3: 139 110 2
x9458:	jmp ax	; 2: 255 224

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction

@4244$float8$10.0#:
x9460:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9468:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9471:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9473:	fcompp	; 2: 222 217
x9475:	fstsw ax	; 3: 155 223 224
x9478:	sahf	; 1: 158
x9479:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9481:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary806 x
x9484:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9486:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9488:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary810

fabs$9:	; Return £temporary810
x9491:	mov ax, [bp]	; 3: 139 70 0
x9494:	mov di, [bp + 4]	; 3: 139 126 4
x9497:	mov bp, [bp + 2]	; 3: 139 110 2
x9500:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9502:	mov ax, [bp + 6]	; 3: 139 70 6
x9505:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9508:	mov word [bp + 8], tolower$3	; 5: 199 70 8 50 37
x9513:	mov [bp + 10], bp	; 3: 137 110 10
x9516:	add bp, 8	; 3: 131 197 8
x9519:	jmp isupper	; 3: 233 218 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary440

tolower$5:	; Equal 31 £temporary440 0
x9522:	cmp bx, 0	; 3: 131 251 0
x9525:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9527:	mov word [bp + 8], tolower$8	; 5: 199 70 8 69 37
x9532:	mov [bp + 10], bp	; 3: 137 110 10
x9535:	add bp, 8	; 3: 131 197 8
x9538:	jmp localeconv	; 3: 233 50 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary441

tolower$10:	; Assign localeConvPtr £temporary441
x9541:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9544:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9548:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary443 -> localeConvPtr localeConvPtr 12
x9550:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary443 -> localeConvPtr
x9553:	mov ax, [si + 12]	; 3: 139 68 12
x9556:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary444 -> localeConvPtr localeConvPtr 14
x9559:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary444 -> localeConvPtr
x9562:	mov ax, [si + 14]	; 3: 139 68 14
x9565:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9568:	mov ax, [bp + 12]	; 3: 139 70 12
x9571:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9574:	mov ax, [bp + 6]	; 3: 139 70 6
x9577:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9580:	mov word [bp + 14], tolower$20	; 5: 199 70 14 122 37
x9585:	mov [bp + 16], bp	; 3: 137 110 16
x9588:	add bp, 14	; 3: 131 197 14
x9591:	jmp strchr	; 3: 233 67 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary445

tolower$22:	; BinarySubtract index £temporary445 upperCase
x9594:	sub bx, [bp + 12]	; 3: 43 94 12
x9597:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary448 lowerCase index
x9600:	mov si, [bp + 10]	; 3: 139 118 10
x9603:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary447 -> £temporary448 £temporary448 0

tolower$25:	; IntegralToIntegral £temporary449 £temporary447 -> £temporary448
x9606:	mov bl, [si]	; 2: 138 28
x9608:	and bx, 255	; 4: 129 227 255 0
x9612:	cmp bl, 0	; 3: 128 251 0
x9615:	jge tolower$26	; 2: 125 4
x9617:	neg bl	; 2: 246 219
x9619:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary449

tolower$27:	; Return £temporary449
x9621:	mov ax, [bp]	; 3: 139 70 0
x9624:	mov di, [bp + 4]	; 3: 139 126 4
x9627:	mov bp, [bp + 2]	; 3: 139 110 2
x9630:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary450 c 32
x9632:	mov bx, [bp + 6]	; 3: 139 94 6
x9635:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary450

tolower$30:	; Return £temporary450
x9638:	mov ax, [bp]	; 3: 139 70 0
x9641:	mov di, [bp + 4]	; 3: 139 126 4
x9644:	mov bp, [bp + 2]	; 3: 139 110 2
x9647:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9649:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9652:	mov ax, [bp]	; 3: 139 70 0
x9655:	mov di, [bp + 4]	; 3: 139 126 4
x9658:	mov bp, [bp + 2]	; 3: 139 110 2
x9661:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9663:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9666:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9668:	fcompp	; 2: 222 217
x9670:	fstsw ax	; 3: 155 223 224
x9673:	sahf	; 1: 158
x9674:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9676:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9680:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 222 37
x9685:	mov [bp + 26], bp	; 3: 137 110 26
x9688:	add bp, 24	; 3: 131 197 24
x9691:	jmp printChar	; 3: 233 114 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9694:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9696:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9699:	mov ax, [bp + 20]	; 3: 139 70 20
x9702:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9705:	mov ax, [bp + 18]	; 3: 139 70 18
x9708:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9711:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 253 37
x9716:	mov [bp + 26], bp	; 3: 137 110 26
x9719:	add bp, 24	; 3: 131 197 24
x9722:	jmp printLongDoubleFraction	; 3: 233 87 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9725:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9729:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1954 69
x9731:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9733:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1954 101
x9735:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1954 6
x9737:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9740:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 26 38
x9745:	mov [bp + 26], bp	; 3: 137 110 26
x9748:	add bp, 24	; 3: 131 197 24
x9751:	jmp printChar	; 3: 233 54 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9754:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9758:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 44 38
x9763:	mov [bp + 26], bp	; 3: 137 110 26
x9766:	add bp, 24	; 3: 131 197 24
x9769:	jmp printChar	; 3: 233 36 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9772:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9775:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9778:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9780:	fcompp	; 2: 222 217
x9782:	fstsw ax	; 3: 155 223 224
x9785:	sahf	; 1: 158
x9786:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9788:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9792:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 78 38
x9797:	mov [bp + 26], bp	; 3: 137 110 26
x9800:	add bp, 24	; 3: 131 197 24
x9803:	jmp printChar	; 3: 233 2 246

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9806:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1959 value
x9809:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9811:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9814:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9817:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9820:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 106 38
x9825:	mov [bp + 26], bp	; 3: 137 110 26
x9828:	add bp, 24	; 3: 131 197 24
x9831:	jmp log10	; 3: 233 196 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1960

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1961 £temporary1960
x9834:	fistp word [container2bytes#]	; 4: 223 30 79 27
x9838:	mov ax, [container2bytes#]	; 3: 161 79 27

printLongDoubleExpo$44:	; Assign expo £temporary1961
x9841:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9844:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9847:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9850:	fld qword [@4320$float8$10.0#]	; 4: 221 6 38 39

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9854:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1962 expo
x9857:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1962 14
x9860:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9863:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 149 38
x9868:	mov [bp + 36], bp	; 3: 137 110 36
x9871:	add bp, 34	; 3: 131 197 34
x9874:	jmp pow	; 3: 233 6 2

printLongDoubleExpo$52:	; PostCall 26
x9877:	fstp qword [bp + 34]	; 3: 221 94 34
x9880:	fld qword [bp + 26]	; 3: 221 70 26
x9883:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1963

printLongDoubleExpo$54:	; SignedDivide £temporary1964 value £temporary1963
x9886:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9888:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9891:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9894:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9897:	mov ax, [bp + 14]	; 3: 139 70 14
x9900:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9903:	mov ax, [bp + 16]	; 3: 139 70 16
x9906:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9909:	mov ax, [bp + 18]	; 3: 139 70 18
x9912:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9915:	mov ax, [bp + 20]	; 3: 139 70 20
x9918:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9921:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 207 38
x9926:	mov [bp + 28], bp	; 3: 137 110 28
x9929:	add bp, 26	; 3: 131 197 26
x9932:	jmp printLongDoublePlain	; 3: 233 233 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9935:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9939:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1970 69
x9941:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9943:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1970 101
x9945:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1970 6
x9947:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9950:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 236 38
x9955:	mov [bp + 28], bp	; 3: 137 110 28
x9958:	add bp, 26	; 3: 131 197 26
x9961:	jmp printChar	; 3: 233 100 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1972 expo
x9964:	mov ax, [bp + 24]	; 3: 139 70 24
x9967:	and eax, 65535	; 6: 102 37 255 255 0 0
x9973:	cmp ax, 0	; 3: 131 248 0
x9976:	jge printLongDoubleExpo$75	; 2: 125 5
x9978:	neg ax	; 2: 247 216
x9980:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1972 6
x9983:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9987:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9992:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9997:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 27 39
x10002:	mov [bp + 28], bp	; 3: 137 110 28
x10005:	add bp, 26	; 3: 131 197 26
x10008:	jmp printLongInt	; 3: 233 161 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x10011:	mov ax, [bp]	; 3: 139 70 0
x10014:	mov di, [bp + 4]	; 3: 139 126 4
x10017:	mov bp, [bp + 2]	; 3: 139 110 2
x10020:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

@4320$float8$10.0#:
x10022:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x10030:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x10033:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x10036:	mov word [bp + 14], log10$4	; 5: 199 70 14 66 39
x10041:	mov [bp + 16], bp	; 3: 137 110 16
x10044:	add bp, 14	; 3: 131 197 14
x10047:	nop	; 1: 144
x10048:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary527

log10$6:	; PushFloat 2.30
x10050:	fld qword [@1283$float8$2.30#]	; 4: 221 6 83 39

log10$7:	; SignedDivide £temporary528 £temporary527 2.30
x10054:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary528

log10$9:	; Return £temporary528
x10056:	mov ax, [bp]	; 3: 139 70 0
x10059:	mov di, [bp + 4]	; 3: 139 126 4
x10062:	mov bp, [bp + 2]	; 3: 139 110 2
x10065:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

@1283$float8$2.30#:
x10067:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x10075:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x10078:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 76 x 0
x10080:	fcompp	; 2: 222 217
x10082:	fstsw ax	; 3: 155 223 224
x10085:	sahf	; 1: 158
x10086:	jae log$76	; 4: 15 131 238 0

log$3:	; Assign n 0
x10090:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10095:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10098:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10100:	fcompp	; 2: 222 217
x10102:	fstsw ax	; 3: 155 223 224
x10105:	sahf	; 1: 158
x10106:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10108:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10111:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10113:	fcompp	; 2: 222 217
x10115:	fstsw ax	; 3: 155 223 224
x10118:	sahf	; 1: 158
x10119:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10121:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10124:	fld qword [@1231$float8$2.71#]	; 4: 221 6 107 40

log$12:	; SignedDivide £temporary509 x 2.71
x10128:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10130:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10133:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10136:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10138:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10141:	fld qword [@1236$float8$0.368#]	; 4: 221 6 115 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10145:	fcompp	; 2: 222 217
x10147:	fstsw ax	; 3: 155 223 224
x10150:	sahf	; 1: 158
x10151:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10153:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10156:	fld qword [@1239$float8$0.368#]	; 4: 221 6 123 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10160:	fcompp	; 2: 222 217
x10162:	fstsw ax	; 3: 155 223 224
x10165:	sahf	; 1: 158
x10166:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10168:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10171:	fld qword [@1242$float8$2.71#]	; 4: 221 6 131 40

log$24:	; SignedMultiply £temporary513 x 2.71
x10175:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10177:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10180:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10183:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10185:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10187:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10190:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10192:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10195:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10197:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10200:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10203:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary515 x 1
x10205:	fsub	; 2: 222 233

log$37:	; PopFloat x_minus_1
x10207:	fstp qword [bp + 48]	; 3: 221 94 48

log$38:	; PushFloat x_minus_1
x10210:	fld qword [bp + 48]	; 3: 221 70 48

log$39:	; PopFloat power
x10213:	fstp qword [bp + 56]	; 3: 221 94 56

log$40:	; PushFloat sign
x10216:	fld qword [bp + 40]	; 3: 221 70 40

log$41:	; PushFloat power
x10219:	fld qword [bp + 56]	; 3: 221 70 56

log$42:	; SignedMultiply £temporary516 sign power
x10222:	fmul	; 2: 222 201

log$43:	; PushFloat index
x10224:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushOne
x10227:	fld1	; 2: 217 232

log$45:	; BinaryAdd index index 1
x10229:	fadd	; 2: 222 193

log$46:	; TopFloat index
x10231:	fst qword [bp + 16]	; 3: 221 86 16

log$47:	; PushOne
x10234:	fld1	; 2: 217 232

log$48:	; BinarySubtract index index 1
x10236:	fsub	; 2: 222 233

log$49:	; SignedDivide £temporary518 £temporary516 £temporary517
x10238:	fdiv	; 2: 222 249

log$50:	; PopFloat term
x10240:	fstp qword [bp + 24]	; 3: 221 94 24

log$51:	; PushFloat sum
x10243:	fld qword [bp + 32]	; 3: 221 70 32

log$52:	; PushFloat term
x10246:	fld qword [bp + 24]	; 3: 221 70 24

log$53:	; BinaryAdd £temporary519 sum term
x10249:	fadd	; 2: 222 193

log$54:	; PopFloat sum
x10251:	fstp qword [bp + 32]	; 3: 221 94 32

log$55:	; PushFloat power
x10254:	fld qword [bp + 56]	; 3: 221 70 56

log$56:	; PushFloat x_minus_1
x10257:	fld qword [bp + 48]	; 3: 221 70 48

log$57:	; SignedMultiply £temporary520 power x_minus_1
x10260:	fmul	; 2: 222 201

log$58:	; PopFloat power
x10262:	fstp qword [bp + 56]	; 3: 221 94 56

log$59:	; PushFloat sign
x10265:	fld qword [bp + 40]	; 3: 221 70 40

log$60:	; PushFloat -1.0
x10268:	fld qword [@1268$float8$minus1.0#]	; 4: 221 6 139 40

log$61:	; SignedMultiply £temporary521 sign -1.0
x10272:	fmul	; 2: 222 201

log$62:	; PopFloat sign
x10274:	fstp qword [bp + 40]	; 3: 221 94 40

log$63:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$64:	; PushFloat term
x10277:	fld qword [bp + 24]	; 3: 221 70 24

log$65:	; Parameter 64 term 6
x10280:	fstp qword [bp + 70]	; 3: 221 94 70

log$66:	; Call 64 fabs 0
x10283:	mov word [bp + 64], log$67	; 5: 199 70 64 57 40
x10288:	mov [bp + 66], bp	; 3: 137 110 66
x10291:	add bp, 64	; 3: 131 197 64
x10294:	jmp fabs	; 3: 233 195 252

log$67:	; PostCall 64

log$68:	; GetReturnValue £temporary522

log$69:	; PushFloat 0.000000001
x10297:	fld qword [@1272$float8$0.000000001#]	; 4: 221 6 147 40

log$70:	; SignedGreaterThanEqual 40 £temporary522 0.000000001
x10301:	fcompp	; 2: 222 217
x10303:	fstsw ax	; 3: 155 223 224
x10306:	sahf	; 1: 158
x10307:	jbe log$40	; 2: 118 163

log$71:	; PushFloat sum
x10309:	fld qword [bp + 32]	; 3: 221 70 32

log$72:	; IntegralToFloating £temporary524 n
x10312:	fild word [bp + 14]	; 3: 223 70 14

log$73:	; BinaryAdd £temporary525 sum £temporary524
x10315:	fadd	; 2: 222 193

log$74:	; SetReturnValue £temporary525

log$75:	; Return £temporary525
x10317:	mov ax, [bp]	; 3: 139 70 0
x10320:	mov di, [bp + 4]	; 3: 139 126 4
x10323:	mov bp, [bp + 2]	; 3: 139 110 2
x10326:	jmp ax	; 2: 255 224

log$76:	; Assign errno 6
x10328:	mov word [errno], 6	; 6: 199 6 230 10 6 0

log$77:	; PushZero
x10334:	fldz	; 2: 217 238

log$78:	; SetReturnValue 0

log$79:	; Return 0
x10336:	mov ax, [bp]	; 3: 139 70 0
x10339:	mov di, [bp + 4]	; 3: 139 126 4
x10342:	mov bp, [bp + 2]	; 3: 139 110 2
x10345:	jmp ax	; 2: 255 224

log$80:	; FunctionEnd log

@1231$float8$2.71#:
x10347:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@1236$float8$0.368#:
x10355:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@1239$float8$0.368#:
x10363:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@1242$float8$2.71#:
x10371:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@1268$float8$minus1.0#:
x10379:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1272$float8$0.000000001#:
x10387:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10395:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10398:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10400:	fcompp	; 2: 222 217
x10402:	fstsw ax	; 3: 155 223 224
x10405:	sahf	; 1: 158
x10406:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10408:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10411:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10414:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10417:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10420:	mov word [bp + 30], pow$9	; 5: 199 70 30 194 40
x10425:	mov [bp + 32], bp	; 3: 137 110 32
x10428:	add bp, 30	; 3: 131 197 30
x10431:	jmp log	; 3: 233 153 254

pow$9:	; PostCall 22
x10434:	fstp qword [bp + 30]	; 3: 221 94 30
x10437:	fld qword [bp + 22]	; 3: 221 70 22
x10440:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary531

pow$11:	; SignedMultiply £temporary532 y £temporary531
x10443:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary532 6
x10445:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10448:	mov word [bp + 22], pow$14	; 5: 199 70 22 222 40
x10453:	mov [bp + 24], bp	; 3: 137 110 24
x10456:	add bp, 22	; 3: 131 197 22
x10459:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary533

pow$16:	; SetReturnValue £temporary533

pow$17:	; Return £temporary533
x10462:	mov ax, [bp]	; 3: 139 70 0
x10465:	mov di, [bp + 4]	; 3: 139 126 4
x10468:	mov bp, [bp + 2]	; 3: 139 110 2
x10471:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10473:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10476:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10478:	fcompp	; 2: 222 217
x10480:	fstsw ax	; 3: 155 223 224
x10483:	sahf	; 1: 158
x10484:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10486:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10489:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10491:	fcompp	; 2: 222 217
x10493:	fstsw ax	; 3: 155 223 224
x10496:	sahf	; 1: 158
x10497:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10499:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10501:	mov ax, [bp]	; 3: 139 70 0
x10504:	mov di, [bp + 4]	; 3: 139 126 4
x10507:	mov bp, [bp + 2]	; 3: 139 110 2
x10510:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10512:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10515:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10517:	fcompp	; 2: 222 217
x10519:	fstsw ax	; 3: 155 223 224
x10522:	sahf	; 1: 158
x10523:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10525:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10528:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10530:	fcompp	; 2: 222 217
x10532:	fstsw ax	; 3: 155 223 224
x10535:	sahf	; 1: 158
x10536:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10538:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10540:	mov ax, [bp]	; 3: 139 70 0
x10543:	mov di, [bp + 4]	; 3: 139 126 4
x10546:	mov bp, [bp + 2]	; 3: 139 110 2
x10549:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10551:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10554:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10556:	fcompp	; 2: 222 217
x10558:	fstsw ax	; 3: 155 223 224
x10561:	sahf	; 1: 158
x10562:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10566:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10569:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10572:	mov word [bp + 22], pow$43	; 5: 199 70 22 90 41
x10577:	mov [bp + 24], bp	; 3: 137 110 24
x10580:	add bp, 22	; 3: 131 197 22
x10583:	jmp floor	; 3: 233 104 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary541

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10586:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10589:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10592:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10595:	mov word [bp + 30], pow$49	; 5: 199 70 30 113 41
x10600:	mov [bp + 32], bp	; 3: 137 110 32
x10603:	add bp, 30	; 3: 131 197 30
x10606:	jmp ceil	; 3: 233 159 1

pow$49:	; PostCall 22
x10609:	fstp qword [bp + 30]	; 3: 221 94 30
x10612:	fld qword [bp + 22]	; 3: 221 70 22
x10615:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary542

pow$51:	; NotEqual 90 £temporary541 £temporary542
x10618:	fcompp	; 2: 222 217
x10620:	fstsw ax	; 3: 155 223 224
x10623:	sahf	; 1: 158
x10624:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10628:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary545 y
x10631:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x10635:	mov eax, [container4bytes#]	; 4: 102 161 80 36

pow$54:	; Assign long_y £temporary545
x10639:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary546 long_y 2
x10643:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10647:	xor edx, edx	; 3: 102 49 210
x10650:	idiv dword [@1322$int4$2#]	; 5: 102 247 62 64 42

pow$56:	; NotEqual 73 £temporary546 0
x10655:	cmp edx, 0	; 4: 102 131 250 0
x10659:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10661:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10664:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10667:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary548 x
x10670:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary548 6
x10672:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10675:	mov word [bp + 34], pow$64	; 5: 199 70 34 193 41
x10680:	mov [bp + 36], bp	; 3: 137 110 36
x10683:	add bp, 34	; 3: 131 197 34
x10686:	jmp log	; 3: 233 154 253

pow$64:	; PostCall 26
x10689:	fstp qword [bp + 34]	; 3: 221 94 34
x10692:	fld qword [bp + 26]	; 3: 221 70 26
x10695:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary549

pow$66:	; SignedMultiply £temporary550 y £temporary549
x10698:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary550 6
x10700:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10703:	mov word [bp + 26], pow$69	; 5: 199 70 26 221 41
x10708:	mov [bp + 28], bp	; 3: 137 110 28
x10711:	add bp, 26	; 3: 131 197 26
x10714:	nop	; 1: 144
x10715:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary551

pow$71:	; SetReturnValue £temporary551

pow$72:	; Return £temporary551
x10717:	mov ax, [bp]	; 3: 139 70 0
x10720:	mov di, [bp + 4]	; 3: 139 126 4
x10723:	mov bp, [bp + 2]	; 3: 139 110 2
x10726:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10728:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10731:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10734:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary552 x
x10737:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary552 6
x10739:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10742:	mov word [bp + 34], pow$80	; 5: 199 70 34 4 42
x10747:	mov [bp + 36], bp	; 3: 137 110 36
x10750:	add bp, 34	; 3: 131 197 34
x10753:	jmp log	; 3: 233 87 253

pow$80:	; PostCall 26
x10756:	fstp qword [bp + 34]	; 3: 221 94 34
x10759:	fld qword [bp + 26]	; 3: 221 70 26
x10762:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary553

pow$82:	; SignedMultiply £temporary554 y £temporary553
x10765:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary554 6
x10767:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10770:	mov word [bp + 26], pow$85	; 5: 199 70 26 32 42
x10775:	mov [bp + 28], bp	; 3: 137 110 28
x10778:	add bp, 26	; 3: 131 197 26
x10781:	nop	; 1: 144
x10782:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary555

pow$87:	; UnarySubtract £temporary556 £temporary555
x10784:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary556

pow$89:	; Return £temporary556
x10786:	mov ax, [bp]	; 3: 139 70 0
x10789:	mov di, [bp + 4]	; 3: 139 126 4
x10792:	mov bp, [bp + 2]	; 3: 139 110 2
x10795:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10797:	mov word [errno], 6	; 6: 199 6 230 10 6 0

pow$91:	; PushZero
x10803:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10805:	mov ax, [bp]	; 3: 139 70 0
x10808:	mov di, [bp + 4]	; 3: 139 126 4
x10811:	mov bp, [bp + 2]	; 3: 139 110 2
x10814:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

@1322$int4$2#:
x10816:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10820:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10822:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10825:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10827:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10830:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10832:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10835:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10838:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10841:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10844:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary498 power faculty
x10847:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10849:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10852:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10855:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary499 sum term
x10858:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10860:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10863:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10866:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary500 power x
x10869:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10871:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10874:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10877:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10880:	fld1	; 2: 217 232

exp$23:	; BinaryAdd index index 1
x10882:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10884:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary502 faculty £temporary501
x10887:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10889:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10892:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10895:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10898:	mov word [bp + 54], exp$31	; 5: 199 70 54 160 42
x10903:	mov [bp + 56], bp	; 3: 137 110 56
x10906:	add bp, 54	; 3: 131 197 54
x10909:	jmp fabs	; 3: 233 92 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary503

exp$33:	; PushFloat 0.000000001
x10912:	fld qword [@1214$float8$0.000000001#]	; 4: 221 6 186 42

exp$34:	; SignedGreaterThanEqual 8 £temporary503 0.000000001
x10916:	fcompp	; 2: 222 217
x10918:	fstsw ax	; 3: 155 223 224
x10921:	sahf	; 1: 158
x10922:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10924:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10927:	mov ax, [bp]	; 3: 139 70 0
x10930:	mov di, [bp + 4]	; 3: 139 126 4
x10933:	mov bp, [bp + 2]	; 3: 139 110 2
x10936:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

@1214$float8$0.000000001#:
x10938:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

floor:	; PushFloat x
x10946:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10949:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10951:	fcompp	; 2: 222 217
x10953:	fstsw ax	; 3: 155 223 224
x10956:	sahf	; 1: 158
x10957:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10959:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary782 x
x10962:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary782 6
x10964:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10967:	mov word [bp + 14], floor$8	; 5: 199 70 14 229 42
x10972:	mov [bp + 16], bp	; 3: 137 110 16
x10975:	add bp, 14	; 3: 131 197 14
x10978:	nop	; 1: 144
x10979:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary783

floor$10:	; UnarySubtract £temporary784 £temporary783
x10981:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary784

floor$12:	; Return £temporary784
x10983:	mov ax, [bp]	; 3: 139 70 0
x10986:	mov di, [bp + 4]	; 3: 139 126 4
x10989:	mov bp, [bp + 2]	; 3: 139 110 2
x10992:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10994:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary785 x
x10997:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x11001:	mov eax, [container4bytes#]	; 4: 102 161 80 36

floor$15:	; IntegralToFloating £temporary786 £temporary785
x11005:	mov [container4bytes#], eax	; 4: 102 163 80 36
x11009:	fild dword [container4bytes#]	; 4: 219 6 80 36

floor$16:	; SetReturnValue £temporary786

floor$17:	; Return £temporary786
x11013:	mov ax, [bp]	; 3: 139 70 0
x11016:	mov di, [bp + 4]	; 3: 139 126 4
x11019:	mov bp, [bp + 2]	; 3: 139 110 2
x11022:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x11024:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x11027:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x11029:	fcompp	; 2: 222 217
x11031:	fstsw ax	; 3: 155 223 224
x11034:	sahf	; 1: 158
x11035:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x11037:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary789 x
x11040:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary789 6
x11042:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x11045:	mov word [bp + 14], ceil$8	; 5: 199 70 14 51 43
x11050:	mov [bp + 16], bp	; 3: 137 110 16
x11053:	add bp, 14	; 3: 131 197 14
x11056:	nop	; 1: 144
x11057:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary790

ceil$10:	; UnarySubtract £temporary791 £temporary790
x11059:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary791

ceil$12:	; Return £temporary791
x11061:	mov ax, [bp]	; 3: 139 70 0
x11064:	mov di, [bp + 4]	; 3: 139 126 4
x11067:	mov bp, [bp + 2]	; 3: 139 110 2
x11070:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x11072:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x11075:	fld qword [@1818$float8$0.999999999999#]	; 4: 221 6 100 43

ceil$15:	; BinaryAdd £temporary792 x 0.999999999999
x11079:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary793 £temporary792
x11081:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x11085:	mov eax, [container4bytes#]	; 4: 102 161 80 36

ceil$17:	; IntegralToFloating £temporary794 £temporary793
x11089:	mov [container4bytes#], eax	; 4: 102 163 80 36
x11093:	fild dword [container4bytes#]	; 4: 219 6 80 36

ceil$18:	; SetReturnValue £temporary794

ceil$19:	; Return £temporary794
x11097:	mov ax, [bp]	; 3: 139 70 0
x11100:	mov di, [bp + 4]	; 3: 139 126 4
x11103:	mov bp, [bp + 2]	; 3: 139 110 2
x11106:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

@1818$float8$0.999999999999#:
x11108:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11116:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11120:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11122:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11126:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary383 1
x11128:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11131:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary383 0
x11133:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary383

isdigit$6:	; Return £temporary383
x11136:	mov ax, [bp]	; 3: 139 70 0
x11139:	mov di, [bp + 4]	; 3: 139 126 4
x11142:	mov bp, [bp + 2]	; 3: 139 110 2
x11145:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11147:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11150:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11153:	mov word [bp + 14], sin$4	; 5: 199 70 14 159 43
x11158:	mov [bp + 16], bp	; 3: 137 110 16
x11161:	add bp, 14	; 3: 131 197 14
x11164:	jmp fabs	; 3: 233 93 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary636

sin$6:	; PushFloat 6.28
x11167:	fld qword [@1482$float8$6.28#]	; 4: 221 6 102 44

sin$7:	; SignedLessThanEqual 17 £temporary636 6.28
x11171:	fcompp	; 2: 222 217
x11173:	fstsw ax	; 3: 155 223 224
x11176:	sahf	; 1: 158
x11177:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11179:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11182:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11185:	fld qword [@1487$float8$6.28#]	; 4: 221 6 110 44

sin$12:	; Parameter 14 6.28 14
x11189:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11192:	mov word [bp + 14], sin$14	; 5: 199 70 14 198 43
x11197:	mov [bp + 16], bp	; 3: 137 110 16
x11200:	add bp, 14	; 3: 131 197 14
x11203:	jmp fmod	; 3: 233 192 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary638

sin$16:	; PopFloat x
x11206:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11209:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11211:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11214:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11216:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11219:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11221:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11224:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11227:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11230:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11232:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11235:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11238:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary639 sign power
x11241:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11243:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary640 £temporary639 faculty
x11246:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11248:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11251:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11254:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary641 sum term
x11257:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11259:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11262:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11265:	fld qword [@1508$float8$minus1#]	; 4: 221 6 118 44

sin$39:	; SignedMultiply £temporary642 sign -1
x11269:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11271:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11274:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11277:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11280:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary643 x x
x11283:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary644 power £temporary643
x11285:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11287:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11290:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11293:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11296:	fld1	; 2: 217 232

sin$50:	; BinaryAdd index index 1
x11298:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11300:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11303:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11306:	fld1	; 2: 217 232

sin$54:	; BinaryAdd index index 1
x11308:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11310:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary647 £temporary645 £temporary646
x11313:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary648 faculty £temporary647
x11315:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11317:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11320:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11323:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11326:	mov word [bp + 62], sin$63	; 5: 199 70 62 76 44
x11331:	mov [bp + 64], bp	; 3: 137 110 64
x11334:	add bp, 62	; 3: 131 197 62
x11337:	jmp fabs	; 3: 233 176 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary649

sin$65:	; PushFloat 0.000000001
x11340:	fld qword [@1519$float8$0.000000001#]	; 4: 221 6 126 44

sin$66:	; SignedGreaterThanEqual 27 £temporary649 0.000000001
x11344:	fcompp	; 2: 222 217
x11346:	fstsw ax	; 3: 155 223 224
x11349:	sahf	; 1: 158
x11350:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11352:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11355:	mov ax, [bp]	; 3: 139 70 0
x11358:	mov di, [bp + 4]	; 3: 139 126 4
x11361:	mov bp, [bp + 2]	; 3: 139 110 2
x11364:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

@1482$float8$6.28#:
x11366:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1487$float8$6.28#:
x11374:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1508$float8$minus1#:
x11382:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1519$float8$0.000000001#:
x11390:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

fmod:	; PushFloat y
x11398:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11401:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11403:	fcompp	; 2: 222 217
x11405:	fstsw ax	; 3: 155 223 224
x11408:	sahf	; 1: 158
x11409:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11411:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11414:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11417:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11420:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary623 x y
x11423:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary624 £temporary623
x11425:	fistp word [container2bytes#]	; 4: 223 30 79 27
x11429:	mov ax, [container2bytes#]	; 3: 161 79 27

fmod$10:	; IntegralToFloating £temporary625 £temporary624
x11432:	mov [container2bytes#], ax	; 3: 163 79 27
x11435:	fild word [container2bytes#]	; 4: 223 6 79 27

fmod$11:	; SignedMultiply £temporary626 y £temporary625
x11439:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary627 x £temporary626
x11441:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary627 6
x11443:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11446:	mov word [bp + 22], fmod$15	; 5: 199 70 22 196 44
x11451:	mov [bp + 24], bp	; 3: 137 110 24
x11454:	add bp, 22	; 3: 131 197 22
x11457:	jmp fabs	; 3: 233 56 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary628

fmod$17:	; PopFloat remainder
x11460:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11463:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11466:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11468:	fcompp	; 2: 222 217
x11470:	fstsw ax	; 3: 155 223 224
x11473:	sahf	; 1: 158
x11474:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11476:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11479:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11481:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary630 remainder
x11484:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary634

fmod$27:	; Return £temporary634
x11486:	mov ax, [bp]	; 3: 139 70 0
x11489:	mov di, [bp + 4]	; 3: 139 126 4
x11492:	mov bp, [bp + 2]	; 3: 139 110 2
x11495:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11497:	mov word [errno], 6	; 6: 199 6 230 10 6 0

fmod$29:	; PushZero
x11503:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11505:	mov ax, [bp]	; 3: 139 70 0
x11508:	mov di, [bp + 4]	; 3: 139 126 4
x11511:	mov bp, [bp + 2]	; 3: 139 110 2
x11514:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11516:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11519:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11522:	mov word [bp + 14], cos$4	; 5: 199 70 14 16 45
x11527:	mov [bp + 16], bp	; 3: 137 110 16
x11530:	add bp, 14	; 3: 131 197 14
x11533:	jmp fabs	; 3: 233 236 247

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary655

cos$6:	; PushFloat 6.28
x11536:	fld qword [@1530$float8$6.28#]	; 4: 221 6 214 45

cos$7:	; SignedLessThanEqual 17 £temporary655 6.28
x11540:	fcompp	; 2: 222 217
x11542:	fstsw ax	; 3: 155 223 224
x11545:	sahf	; 1: 158
x11546:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11548:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11551:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11554:	fld qword [@1535$float8$6.28#]	; 4: 221 6 222 45

cos$12:	; Parameter 14 6.28 14
x11558:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11561:	mov word [bp + 14], cos$14	; 5: 199 70 14 55 45
x11566:	mov [bp + 16], bp	; 3: 137 110 16
x11569:	add bp, 14	; 3: 131 197 14
x11572:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary657

cos$16:	; PopFloat x
x11575:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11578:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11580:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11583:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11585:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11588:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11590:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11593:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11595:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11598:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11600:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11603:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11606:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary658 sign power
x11609:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11611:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary659 £temporary658 faculty
x11614:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11616:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11619:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11622:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary660 sum term
x11625:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11627:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11630:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11633:	fld qword [@1558$float8$minus1#]	; 4: 221 6 230 45

cos$39:	; SignedMultiply £temporary661 sign -1
x11637:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11639:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11642:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11645:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11648:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary662 x x
x11651:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary663 power £temporary662
x11653:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11655:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11658:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11661:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11664:	fld1	; 2: 217 232

cos$50:	; BinaryAdd index index 1
x11666:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11668:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11671:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11674:	fld1	; 2: 217 232

cos$54:	; BinaryAdd index index 1
x11676:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11678:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary666 £temporary664 £temporary665
x11681:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary667 faculty £temporary666
x11683:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11685:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11688:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11691:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11694:	mov word [bp + 62], cos$63	; 5: 199 70 62 188 45
x11699:	mov [bp + 64], bp	; 3: 137 110 64
x11702:	add bp, 62	; 3: 131 197 62
x11705:	jmp fabs	; 3: 233 64 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary668

cos$65:	; PushFloat 0.000000001
x11708:	fld qword [@1569$float8$0.000000001#]	; 4: 221 6 238 45

cos$66:	; SignedGreaterThanEqual 27 £temporary668 0.000000001
x11712:	fcompp	; 2: 222 217
x11714:	fstsw ax	; 3: 155 223 224
x11717:	sahf	; 1: 158
x11718:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11720:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11723:	mov ax, [bp]	; 3: 139 70 0
x11726:	mov di, [bp + 4]	; 3: 139 126 4
x11729:	mov bp, [bp + 2]	; 3: 139 110 2
x11732:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

@1530$float8$6.28#:
x11734:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1535$float8$6.28#:
x11742:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1558$float8$minus1#:
x11750:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1569$float8$0.000000001#:
x11758:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11766:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11769:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11772:	mov word [bp + 14], tan$4	; 5: 199 70 14 10 46
x11777:	mov [bp + 16], bp	; 3: 137 110 16
x11780:	add bp, 14	; 3: 131 197 14
x11783:	jmp cos	; 3: 233 242 254

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary674

tan$6:	; PopFloat cos_of_x
x11786:	fstp qword [bp + 14]	; 3: 221 94 14

tan$7:	; PushFloat cos_of_x
x11789:	fld qword [bp + 14]	; 3: 221 70 14

tan$8:	; PushZero
x11792:	fldz	; 2: 217 238

tan$9:	; Equal 20 cos_of_x 0
x11794:	fcompp	; 2: 222 217
x11796:	fstsw ax	; 3: 155 223 224
x11799:	sahf	; 1: 158
x11800:	je tan$20	; 2: 116 36

tan$10:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$11:	; PushFloat x
x11802:	fld qword [bp + 6]	; 3: 221 70 6

tan$12:	; Parameter 22 x 6
x11805:	fstp qword [bp + 28]	; 3: 221 94 28

tan$13:	; Call 22 sin 0
x11808:	mov word [bp + 22], tan$14	; 5: 199 70 22 46 46
x11813:	mov [bp + 24], bp	; 3: 137 110 24
x11816:	add bp, 22	; 3: 131 197 22
x11819:	jmp sin	; 3: 233 93 253

tan$14:	; PostCall 22

tan$15:	; GetReturnValue £temporary676

tan$16:	; PushFloat cos_of_x
x11822:	fld qword [bp + 14]	; 3: 221 70 14

tan$17:	; SignedDivide £temporary677 £temporary676 cos_of_x
x11825:	fdiv	; 2: 222 249

tan$18:	; SetReturnValue £temporary677

tan$19:	; Return £temporary677
x11827:	mov ax, [bp]	; 3: 139 70 0
x11830:	mov di, [bp + 4]	; 3: 139 126 4
x11833:	mov bp, [bp + 2]	; 3: 139 110 2
x11836:	jmp ax	; 2: 255 224

tan$20:	; Assign errno 6
x11838:	mov word [errno], 6	; 6: 199 6 230 10 6 0

tan$21:	; PushZero
x11844:	fldz	; 2: 217 238

tan$22:	; SetReturnValue 0

tan$23:	; Return 0
x11846:	mov ax, [bp]	; 3: 139 70 0
x11849:	mov di, [bp + 4]	; 3: 139 126 4
x11852:	mov bp, [bp + 2]	; 3: 139 110 2
x11855:	jmp ax	; 2: 255 224

tan$24:	; FunctionEnd tan

asin:	; PushFloat x
x11857:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11860:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11862:	fcompp	; 2: 222 217
x11864:	fstsw ax	; 3: 155 223 224
x11867:	sahf	; 1: 158
x11868:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11870:	fld qword [@1595$float8$1.57#]	; 4: 221 6 7 47

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11874:	mov ax, [bp]	; 3: 139 70 0
x11877:	mov di, [bp + 4]	; 3: 139 126 4
x11880:	mov bp, [bp + 2]	; 3: 139 110 2
x11883:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11885:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11888:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11890:	fcompp	; 2: 222 217
x11892:	fstsw ax	; 3: 155 223 224
x11895:	sahf	; 1: 158
x11896:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11898:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary682 x
x11901:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary682 6
x11903:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11906:	mov word [bp + 14], asin$14	; 5: 199 70 14 144 46
x11911:	mov [bp + 16], bp	; 3: 137 110 16
x11914:	add bp, 14	; 3: 131 197 14
x11917:	nop	; 1: 144
x11918:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary683

asin$16:	; UnarySubtract £temporary684 £temporary683
x11920:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary684

asin$18:	; Return £temporary684
x11922:	mov ax, [bp]	; 3: 139 70 0
x11925:	mov di, [bp + 4]	; 3: 139 126 4
x11928:	mov bp, [bp + 2]	; 3: 139 110 2
x11931:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11933:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11936:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11938:	fcompp	; 2: 222 217
x11940:	fstsw ax	; 3: 155 223 224
x11943:	sahf	; 1: 158
x11944:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11946:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11949:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11952:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11954:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11957:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary686 x x
x11960:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary687 1 £temporary686
x11962:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary687 6
x11964:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11967:	mov word [bp + 22], asin$32	; 5: 199 70 22 205 46
x11972:	mov [bp + 24], bp	; 3: 137 110 24
x11975:	add bp, 22	; 3: 131 197 22
x11978:	nop	; 1: 144
x11979:	jmp sqrt	; 2: 235 66

asin$32:	; PostCall 14
x11981:	fstp qword [bp + 22]	; 3: 221 94 22
x11984:	fld qword [bp + 14]	; 3: 221 70 14
x11987:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary688

asin$34:	; SignedDivide £temporary689 x £temporary688
x11990:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary689 6
x11992:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11995:	mov word [bp + 14], asin$37	; 5: 199 70 14 233 46
x12000:	mov [bp + 16], bp	; 3: 137 110 16
x12003:	add bp, 14	; 3: 131 197 14
x12006:	jmp atan	; 3: 233 170 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary690

asin$39:	; SetReturnValue £temporary690

asin$40:	; Return £temporary690
x12009:	mov ax, [bp]	; 3: 139 70 0
x12012:	mov di, [bp + 4]	; 3: 139 126 4
x12015:	mov bp, [bp + 2]	; 3: 139 110 2
x12018:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x12020:	mov word [errno], 6	; 6: 199 6 230 10 6 0

asin$42:	; PushZero
x12026:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x12028:	mov ax, [bp]	; 3: 139 70 0
x12031:	mov di, [bp + 4]	; 3: 139 126 4
x12034:	mov bp, [bp + 2]	; 3: 139 110 2
x12037:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

@1595$float8$1.57#:
x12039:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

sqrt:	; PushFloat x
x12047:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x12050:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 28 x 0
x12052:	fcompp	; 2: 222 217
x12054:	fstsw ax	; 3: 155 223 224
x12057:	sahf	; 1: 158
x12058:	ja sqrt$28	; 2: 119 84

sqrt$3:	; PushOne
x12060:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x12062:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x12065:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; PopFloat root_i
x12068:	fstp qword [bp + 14]	; 3: 221 94 14

sqrt$7:	; PushFloat root_i
x12071:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$8:	; PushFloat x
x12074:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$9:	; PushFloat root_i
x12077:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$10:	; SignedDivide £temporary596 x root_i
x12080:	fdiv	; 2: 222 249

sqrt$11:	; BinaryAdd £temporary597 root_i £temporary596
x12082:	fadd	; 2: 222 193

sqrt$12:	; PushFloat 2
x12084:	fld qword [@1414$float8$2#]	; 4: 221 6 131 47

sqrt$13:	; SignedDivide £temporary598 £temporary597 2
x12088:	fdiv	; 2: 222 249

sqrt$14:	; PopFloat root_i_plus_1
x12090:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$15:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$16:	; PushFloat root_i_plus_1
x12093:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$17:	; PushFloat root_i
x12096:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$18:	; BinarySubtract £temporary599 root_i_plus_1 root_i
x12099:	fsub	; 2: 222 233

sqrt$19:	; Parameter 30 £temporary599 6
x12101:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$20:	; Call 30 fabs 0
x12104:	mov word [bp + 30], sqrt$21	; 5: 199 70 30 86 47
x12109:	mov [bp + 32], bp	; 3: 137 110 32
x12112:	add bp, 30	; 3: 131 197 30
x12115:	jmp fabs	; 3: 233 166 245

sqrt$21:	; PostCall 30

sqrt$22:	; GetReturnValue £temporary600

sqrt$23:	; PushFloat 0.000000001
x12118:	fld qword [@1418$float8$0.000000001#]	; 4: 221 6 139 47

sqrt$24:	; SignedGreaterThanEqual 5 £temporary600 0.000000001
x12122:	fcompp	; 2: 222 217
x12124:	fstsw ax	; 3: 155 223 224
x12127:	sahf	; 1: 158
x12128:	jbe sqrt$5	; 2: 118 191

sqrt$25:	; PushFloat root_i_plus_1
x12130:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$26:	; SetReturnValue root_i_plus_1

sqrt$27:	; Return root_i_plus_1
x12133:	mov ax, [bp]	; 3: 139 70 0
x12136:	mov di, [bp + 4]	; 3: 139 126 4
x12139:	mov bp, [bp + 2]	; 3: 139 110 2
x12142:	jmp ax	; 2: 255 224

sqrt$28:	; Assign errno 6
x12144:	mov word [errno], 6	; 6: 199 6 230 10 6 0

sqrt$29:	; PushZero
x12150:	fldz	; 2: 217 238

sqrt$30:	; SetReturnValue 0

sqrt$31:	; Return 0
x12152:	mov ax, [bp]	; 3: 139 70 0
x12155:	mov di, [bp + 4]	; 3: 139 126 4
x12158:	mov bp, [bp + 2]	; 3: 139 110 2
x12161:	jmp ax	; 2: 255 224

sqrt$32:	; FunctionEnd sqrt

@1414$float8$2#:
x12163:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1418$float8$0.000000001#:
x12171:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

atan:	; PushFloat x
x12179:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x12182:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x12184:	fcompp	; 2: 222 217
x12186:	fstsw ax	; 3: 155 223 224
x12189:	sahf	; 1: 158
x12190:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12192:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary709 x
x12195:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary709 6
x12197:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12200:	mov word [bp + 14], atan$8	; 5: 199 70 14 182 47
x12205:	mov [bp + 16], bp	; 3: 137 110 16
x12208:	add bp, 14	; 3: 131 197 14
x12211:	nop	; 1: 144
x12212:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary710

atan$10:	; UnarySubtract £temporary711 £temporary710
x12214:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary711

atan$12:	; Return £temporary711
x12216:	mov ax, [bp]	; 3: 139 70 0
x12219:	mov di, [bp + 4]	; 3: 139 126 4
x12222:	mov bp, [bp + 2]	; 3: 139 110 2
x12225:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12227:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12230:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12232:	fcompp	; 2: 222 217
x12234:	fstsw ax	; 3: 155 223 224
x12237:	sahf	; 1: 158
x12238:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12240:	fld qword [@1663$float8$1.57#]	; 4: 221 6 252 48

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12244:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12247:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12249:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary713 1 x
x12252:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary713 6
x12254:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12257:	mov word [bp + 22], atan$23	; 5: 199 70 22 239 47
x12262:	mov [bp + 24], bp	; 3: 137 110 24
x12265:	add bp, 22	; 3: 131 197 22
x12268:	nop	; 1: 144
x12269:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12271:	fstp qword [bp + 22]	; 3: 221 94 22
x12274:	fld qword [bp + 14]	; 3: 221 70 14
x12277:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary714

atan$25:	; BinarySubtract £temporary715 1.57 £temporary714
x12280:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary715

atan$27:	; Return £temporary715
x12282:	mov ax, [bp]	; 3: 139 70 0
x12285:	mov di, [bp + 4]	; 3: 139 126 4
x12288:	mov bp, [bp + 2]	; 3: 139 110 2
x12291:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12293:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12296:	fld qword [@1670$float8$0.5#]	; 4: 221 6 4 49

atan$30:	; SignedLessThanEqual 54 x 0.5
x12300:	fcompp	; 2: 222 217
x12302:	fstsw ax	; 3: 155 223 224
x12305:	sahf	; 1: 158
x12306:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12308:	fld qword [@1684$float8$2#]	; 4: 221 6 12 49

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12312:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12315:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12318:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12320:	fstp qword [bp + 22]	; 3: 221 94 22
x12323:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12326:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12328:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12331:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary717 x x
x12334:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary718 1 £temporary717
x12336:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary718 14
x12338:	fstp qword [bp + 52]	; 3: 221 94 52

atan$42:	; Call 14 sqrt 0
x12341:	mov word [bp + 46], atan$43	; 5: 199 70 46 67 48
x12346:	mov [bp + 48], bp	; 3: 137 110 48
x12349:	add bp, 46	; 3: 131 197 46
x12352:	jmp sqrt	; 3: 233 204 254

atan$43:	; PostCall 14
x12355:	fstp qword [bp + 38]	; 3: 221 94 38
x12358:	fld qword [bp + 30]	; 3: 221 70 30
x12361:	fld qword [bp + 22]	; 3: 221 70 22
x12364:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary719

atan$45:	; BinaryAdd £temporary720 1 £temporary719
x12367:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary721 x £temporary720
x12369:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary721 6
x12371:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12374:	mov word [bp + 22], atan$49	; 5: 199 70 22 100 48
x12379:	mov [bp + 24], bp	; 3: 137 110 24
x12382:	add bp, 22	; 3: 131 197 22
x12385:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12388:	fstp qword [bp + 22]	; 3: 221 94 22
x12391:	fld qword [bp + 14]	; 3: 221 70 14
x12394:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary722

atan$51:	; SignedMultiply £temporary723 2 £temporary722
x12397:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary723

atan$53:	; Return £temporary723
x12399:	mov ax, [bp]	; 3: 139 70 0
x12402:	mov di, [bp + 4]	; 3: 139 126 4
x12405:	mov bp, [bp + 2]	; 3: 139 110 2
x12408:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12410:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12412:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12415:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12417:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12420:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12422:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12425:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12428:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12431:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12434:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary724 sign product
x12437:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12439:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary725 £temporary724 denominator
x12442:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12444:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12447:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12450:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary726 sum term
x12453:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12455:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12458:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary727 sign
x12461:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12463:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12466:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12469:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12472:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary728 x x
x12475:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary729 product £temporary728
x12477:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12479:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12482:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12485:	fld qword [@1704$float8$2#]	; 4: 221 6 20 49

atan$83:	; BinaryAdd £temporary730 denominator 2
x12489:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12491:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12494:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12497:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12500:	mov word [bp + 54], atan$89	; 5: 199 70 54 226 48
x12505:	mov [bp + 56], bp	; 3: 137 110 56
x12508:	add bp, 54	; 3: 131 197 54
x12511:	jmp fabs	; 3: 233 26 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary731

atan$91:	; PushFloat 0.000000001
x12514:	fld qword [@1707$float8$0.000000001#]	; 4: 221 6 28 49

atan$92:	; SignedGreaterThanEqual 62 £temporary731 0.000000001
x12518:	fcompp	; 2: 222 217
x12520:	fstsw ax	; 3: 155 223 224
x12523:	sahf	; 1: 158
x12524:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12526:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12529:	mov ax, [bp]	; 3: 139 70 0
x12532:	mov di, [bp + 4]	; 3: 139 126 4
x12535:	mov bp, [bp + 2]	; 3: 139 110 2
x12538:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

@1663$float8$1.57#:
x12540:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1670$float8$0.5#:
x12548:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

@1684$float8$2#:
x12556:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1704$float8$2#:
x12564:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1707$float8$0.000000001#:
x12572:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

acos:	; PushFloat x
x12580:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12583:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12585:	fcompp	; 2: 222 217
x12587:	fstsw ax	; 3: 155 223 224
x12590:	sahf	; 1: 158
x12591:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12593:	fld qword [@1625$float8$1.57#]	; 4: 221 6 222 49

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12597:	mov ax, [bp]	; 3: 139 70 0
x12600:	mov di, [bp + 4]	; 3: 139 126 4
x12603:	mov bp, [bp + 2]	; 3: 139 110 2
x12606:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12608:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12611:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12613:	fcompp	; 2: 222 217
x12615:	fstsw ax	; 3: 155 223 224
x12618:	sahf	; 1: 158
x12619:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12621:	fld qword [@1630$float8$3.14#]	; 4: 221 6 230 49

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12625:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12628:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary696 x
x12631:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary696 6
x12633:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12636:	mov word [bp + 22], acos$15	; 5: 199 70 22 106 49
x12641:	mov [bp + 24], bp	; 3: 137 110 24
x12644:	add bp, 22	; 3: 131 197 22
x12647:	nop	; 1: 144
x12648:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12650:	fstp qword [bp + 22]	; 3: 221 94 22
x12653:	fld qword [bp + 14]	; 3: 221 70 14
x12656:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary697

acos$17:	; BinarySubtract £temporary698 3.14 £temporary697
x12659:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary698

acos$19:	; Return £temporary698
x12661:	mov ax, [bp]	; 3: 139 70 0
x12664:	mov di, [bp + 4]	; 3: 139 126 4
x12667:	mov bp, [bp + 2]	; 3: 139 110 2
x12670:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12672:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12675:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12677:	fcompp	; 2: 222 217
x12679:	fstsw ax	; 3: 155 223 224
x12682:	sahf	; 1: 158
x12683:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12685:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12687:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12690:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary700 x x
x12693:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary701 1 £temporary700
x12695:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary701 6
x12697:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12700:	mov word [bp + 14], acos$32	; 5: 199 70 14 170 49
x12705:	mov [bp + 16], bp	; 3: 137 110 16
x12708:	add bp, 14	; 3: 131 197 14
x12711:	jmp sqrt	; 3: 233 101 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary702

acos$34:	; PushFloat x
x12714:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary703 £temporary702 x
x12717:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary703 6
x12719:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12722:	mov word [bp + 14], acos$38	; 5: 199 70 14 192 49
x12727:	mov [bp + 16], bp	; 3: 137 110 16
x12730:	add bp, 14	; 3: 131 197 14
x12733:	jmp atan	; 3: 233 211 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary704

acos$40:	; SetReturnValue £temporary704

acos$41:	; Return £temporary704
x12736:	mov ax, [bp]	; 3: 139 70 0
x12739:	mov di, [bp + 4]	; 3: 139 126 4
x12742:	mov bp, [bp + 2]	; 3: 139 110 2
x12745:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12747:	mov word [errno], 6	; 6: 199 6 230 10 6 0

acos$43:	; PushZero
x12753:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12755:	mov ax, [bp]	; 3: 139 70 0
x12758:	mov di, [bp + 4]	; 3: 139 126 4
x12761:	mov bp, [bp + 2]	; 3: 139 110 2
x12764:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

@1625$float8$1.57#:
x12766:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1630$float8$3.14#:
x12774:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12782:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12785:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12788:	mov word [bp + 14], sinh$4	; 5: 199 70 14 2 50
x12793:	mov [bp + 16], bp	; 3: 137 110 16
x12796:	add bp, 14	; 3: 131 197 14
x12799:	jmp exp	; 3: 233 66 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary762

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12802:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12805:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary763 x
x12808:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary763 6
x12810:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12813:	mov word [bp + 22], sinh$11	; 5: 199 70 22 27 50
x12818:	mov [bp + 24], bp	; 3: 137 110 24
x12821:	add bp, 22	; 3: 131 197 22
x12824:	jmp exp	; 3: 233 41 248

sinh$11:	; PostCall 14
x12827:	fstp qword [bp + 22]	; 3: 221 94 22
x12830:	fld qword [bp + 14]	; 3: 221 70 14
x12833:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary764

sinh$13:	; BinarySubtract £temporary765 £temporary762 £temporary764
x12836:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12838:	fld qword [@1781$float8$2#]	; 4: 221 6 55 50

sinh$15:	; SignedDivide £temporary766 £temporary765 2
x12842:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary766

sinh$17:	; Return £temporary766
x12844:	mov ax, [bp]	; 3: 139 70 0
x12847:	mov di, [bp + 4]	; 3: 139 126 4
x12850:	mov bp, [bp + 2]	; 3: 139 110 2
x12853:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

@1781$float8$2#:
x12855:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12863:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12866:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12869:	mov word [bp + 14], cosh$4	; 5: 199 70 14 83 50
x12874:	mov [bp + 16], bp	; 3: 137 110 16
x12877:	add bp, 14	; 3: 131 197 14
x12880:	jmp exp	; 3: 233 241 247

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary769

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12883:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12886:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary770 x
x12889:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary770 6
x12891:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12894:	mov word [bp + 22], cosh$11	; 5: 199 70 22 108 50
x12899:	mov [bp + 24], bp	; 3: 137 110 24
x12902:	add bp, 22	; 3: 131 197 22
x12905:	jmp exp	; 3: 233 216 247

cosh$11:	; PostCall 14
x12908:	fstp qword [bp + 22]	; 3: 221 94 22
x12911:	fld qword [bp + 14]	; 3: 221 70 14
x12914:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary771

cosh$13:	; BinaryAdd £temporary772 £temporary769 £temporary771
x12917:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12919:	fld qword [@1791$float8$2#]	; 4: 221 6 136 50

cosh$15:	; SignedDivide £temporary773 £temporary772 2
x12923:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary773

cosh$17:	; Return £temporary773
x12925:	mov ax, [bp]	; 3: 139 70 0
x12928:	mov di, [bp + 4]	; 3: 139 126 4
x12931:	mov bp, [bp + 2]	; 3: 139 110 2
x12934:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

@1791$float8$2#:
x12936:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12944:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12947:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12950:	mov word [bp + 14], tanh$4	; 5: 199 70 14 164 50
x12955:	mov [bp + 16], bp	; 3: 137 110 16
x12958:	add bp, 14	; 3: 131 197 14
x12961:	jmp sinh	; 3: 233 74 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary776

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12964:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12967:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12970:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12973:	mov word [bp + 22], tanh$10	; 5: 199 70 22 187 50
x12978:	mov [bp + 24], bp	; 3: 137 110 24
x12981:	add bp, 22	; 3: 131 197 22
x12984:	nop	; 1: 144
x12985:	jmp cosh	; 2: 235 132

tanh$10:	; PostCall 14
x12987:	fstp qword [bp + 22]	; 3: 221 94 22
x12990:	fld qword [bp + 14]	; 3: 221 70 14
x12993:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary777

tanh$12:	; SignedDivide £temporary778 £temporary776 £temporary777
x12996:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary778

tanh$14:	; Return £temporary778
x12998:	mov ax, [bp]	; 3: 139 70 0
x13001:	mov di, [bp + 4]	; 3: 139 126 4
x13004:	mov bp, [bp + 2]	; 3: 139 110 2
x13007:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x13009:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x13012:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x13014:	fcompp	; 2: 222 217
x13016:	fstsw ax	; 3: 155 223 224
x13019:	sahf	; 1: 158
x13020:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x13024:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x13027:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x13030:	mov word [bp + 16], frexp$8	; 5: 199 70 16 244 50
x13035:	mov [bp + 18], bp	; 3: 137 110 18
x13038:	add bp, 16	; 3: 131 197 16
x13041:	jmp fabs	; 3: 233 8 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary575

frexp$10:	; Parameter 16 £temporary575 6
x13044:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x13047:	mov word [bp + 16], frexp$12	; 5: 199 70 16 5 51
x13052:	mov [bp + 18], bp	; 3: 137 110 18
x13055:	add bp, 16	; 3: 131 197 16
x13058:	jmp @1356$log2	; 3: 233 155 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary576

frexp$14:	; IntegralToIntegral £temporary577 £temporary576

frexp$15:	; Assign exponent £temporary577
x13061:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x13064:	fld qword [@1372$float8$2#]	; 4: 221 6 144 51

frexp$18:	; Parameter 18 2 6
x13068:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary578 exponent
x13071:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary578 14
x13074:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x13077:	mov word [bp + 18], frexp$22	; 5: 199 70 18 35 51
x13082:	mov [bp + 20], bp	; 3: 137 110 20
x13085:	add bp, 18	; 3: 131 197 18
x13088:	jmp pow	; 3: 233 120 245

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary579

frexp$24:	; PushFloat x
x13091:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary579 x
x13094:	fcompp	; 2: 222 217
x13096:	fstsw ax	; 3: 155 223 224
x13099:	sahf	; 1: 158
x13100:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x13102:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x13105:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13109:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary583 -> p p 0
x13111:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary583 -> p exponent
x13114:	mov ax, [bp + 16]	; 3: 139 70 16
x13117:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x13119:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13122:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x13125:	fld qword [@1384$float8$2#]	; 4: 221 6 152 51

frexp$33:	; Parameter 18 2 6
x13129:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary584 exponent
x13132:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary584 14
x13135:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x13138:	mov word [bp + 26], frexp$37	; 5: 199 70 26 96 51
x13143:	mov [bp + 28], bp	; 3: 137 110 28
x13146:	add bp, 26	; 3: 131 197 26
x13149:	jmp pow	; 3: 233 59 245

frexp$37:	; PostCall 18
x13152:	fstp qword [bp + 26]	; 3: 221 94 26
x13155:	fld qword [bp + 18]	; 3: 221 70 18
x13158:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary585

frexp$39:	; SignedDivide £temporary586 x £temporary585
x13161:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary586

frexp$41:	; Return £temporary586
x13163:	mov ax, [bp]	; 3: 139 70 0
x13166:	mov di, [bp + 4]	; 3: 139 126 4
x13169:	mov bp, [bp + 2]	; 3: 139 110 2
x13172:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x13174:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13178:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary588 -> p p 0
x13180:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary588 -> p 0
x13183:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x13187:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x13189:	mov ax, [bp]	; 3: 139 70 0
x13192:	mov di, [bp + 4]	; 3: 139 126 4
x13195:	mov bp, [bp + 2]	; 3: 139 110 2
x13198:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@1372$float8$2#:
x13200:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1384$float8$2#:
x13208:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1356$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1356$log2$1:	; PushFloat x
x13216:	fld qword [bp + 6]	; 3: 221 70 6

@1356$log2$2:	; Parameter 14 x 6
x13219:	fstp qword [bp + 20]	; 3: 221 94 20

@1356$log2$3:	; Call 14 log 0
x13222:	mov word [bp + 14], @1356$log2$4	; 5: 199 70 14 180 51
x13227:	mov [bp + 16], bp	; 3: 137 110 16
x13230:	add bp, 14	; 3: 131 197 14
x13233:	jmp log	; 3: 233 167 243

@1356$log2$4:	; PostCall 14

@1356$log2$5:	; GetReturnValue £temporary570

@1356$log2$6:	; PushFloat 0.693
x13236:	fld qword [@1358$float8$0.693#]	; 4: 221 6 205 51

@1356$log2$7:	; SignedDivide £temporary571 £temporary570 0.693
x13240:	fdiv	; 2: 222 249

@1356$log2$8:	; FloatingToIntegral £temporary572 £temporary571
x13242:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13246:	mov bx, [container2bytes#]	; 4: 139 30 79 27

@1356$log2$9:	; SetReturnValue £temporary572

@1356$log2$10:	; Return £temporary572
x13250:	mov ax, [bp]	; 3: 139 70 0
x13253:	mov di, [bp + 4]	; 3: 139 126 4
x13256:	mov bp, [bp + 2]	; 3: 139 110 2
x13259:	jmp ax	; 2: 255 224

@1356$log2$11:	; FunctionEnd log2

@1358$float8$0.693#:
x13261:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x13269:	mov word [bp + 14], @2625$string_25s3A2025s2E0A#	; 5: 199 70 14 21 52

perror$2:	; Parameter 8 s 8
x13274:	mov ax, [bp + 6]	; 3: 139 70 6
x13277:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13280:	mov ax, [errno]	; 3: 161 230 10
x13283:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13286:	mov word [bp + 18], perror$6	; 5: 199 70 18 244 51
x13291:	mov [bp + 20], bp	; 3: 137 110 20
x13294:	add bp, 18	; 3: 131 197 18
x13297:	nop	; 1: 144
x13298:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary1161

perror$8:	; Parameter 8 £temporary1161 10
x13300:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13303:	mov word [bp + 8], perror$10	; 5: 199 70 8 10 52
x13308:	mov [bp + 10], bp	; 3: 137 110 10
x13311:	add bp, 8	; 3: 131 197 8
x13314:	mov di, bp	; 2: 137 239
x13316:	add di, 4	; 3: 131 199 4
x13319:	jmp printf	; 3: 233 250 216

perror$10:	; PostCall 8

perror$11:	; Return 0
x13322:	mov ax, [bp]	; 3: 139 70 0
x13325:	mov di, [bp + 4]	; 3: 139 126 4
x13328:	mov bp, [bp + 2]	; 3: 139 110 2
x13331:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

@2625$string_25s3A2025s2E0A#:
x13333:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13342:	mov word [bp + 8], strerror$2	; 5: 199 70 8 44 52
x13347:	mov [bp + 10], bp	; 3: 137 110 10
x13350:	add bp, 8	; 3: 131 197 8
x13353:	jmp localeconv	; 3: 233 75 234

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary4086

strerror$4:	; Assign localeConvPtr £temporary4086
x13356:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 9 localeConvPtr 0
x13359:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13363:	je strerror$9	; 2: 116 8

strerror$6:	; Deref £temporary4088 -> localeConvPtr localeConvPtr 16
x13365:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign £temporary4092 £temporary4088 -> localeConvPtr
x13368:	mov ax, [si + 16]	; 3: 139 68 16

strerror$8:	; Goto 10
x13371:	jmp strerror$10	; 2: 235 3

strerror$9:	; Assign £temporary4092 0
x13373:	mov ax, 0	; 3: 184 0 0

strerror$10:	; Assign messageList £temporary4092
x13376:	mov [bp + 10], ax	; 3: 137 70 10

strerror$11:	; Equal 14 messageList 0
x13379:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13383:	je strerror$14	; 2: 116 5

strerror$12:	; Assign £temporary4097 messageList
x13385:	mov ax, [bp + 10]	; 3: 139 70 10

strerror$13:	; Goto 15
x13388:	jmp strerror$15	; 2: 235 3

strerror$14:	; Assign £temporary4097 enMessageList
x13390:	mov ax, enMessageList	; 3: 184 19 32

strerror$15:	; Assign messageList £temporary4097
x13393:	mov [bp + 10], ax	; 3: 137 70 10

strerror$16:	; UnsignedMultiply £temporary4099 errno 2
x13396:	mov ax, [bp + 6]	; 3: 139 70 6
x13399:	xor dx, dx	; 2: 49 210
x13401:	mul word [@9088$int2$2#]	; 4: 247 38 111 52

strerror$17:	; BinaryAdd £temporary4100 messageList £temporary4099
x13405:	mov si, [bp + 10]	; 3: 139 118 10
x13408:	add si, ax	; 2: 1 198

strerror$18:	; Deref £temporary4098 -> £temporary4100 £temporary4100 0

strerror$19:	; SetReturnValue £temporary4098 -> £temporary4100
x13410:	mov bx, [si]	; 2: 139 28

strerror$20:	; Return £temporary4098 -> £temporary4100
x13412:	mov ax, [bp]	; 3: 139 70 0
x13415:	mov di, [bp + 4]	; 3: 139 126 4
x13418:	mov bp, [bp + 2]	; 3: 139 110 2
x13421:	jmp ax	; 2: 255 224

strerror$21:	; FunctionEnd strerror

@9088$int2$2#:
x13423:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13425:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13428:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13431:	mov word [bp + 16], modf$4	; 5: 199 70 16 133 52
x13436:	mov [bp + 18], bp	; 3: 137 110 18
x13439:	add bp, 16	; 3: 131 197 16
x13442:	jmp fabs	; 3: 233 119 240

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary603

modf$6:	; PopFloat abs_x
x13445:	fstp qword [bp + 16]	; 3: 221 94 16

modf$7:	; PushFloat abs_x
x13448:	fld qword [bp + 16]	; 3: 221 70 16

modf$8:	; FloatingToIntegral £temporary604 abs_x
x13451:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x13455:	mov eax, [container4bytes#]	; 4: 102 161 80 36

modf$9:	; IntegralToFloating £temporary605 £temporary604
x13459:	mov [container4bytes#], eax	; 4: 102 163 80 36
x13463:	fild dword [container4bytes#]	; 4: 219 6 80 36

modf$10:	; PopFloat integral
x13467:	fstp qword [bp + 24]	; 3: 221 94 24

modf$11:	; PushFloat abs_x
x13470:	fld qword [bp + 16]	; 3: 221 70 16

modf$12:	; PushFloat integral
x13473:	fld qword [bp + 24]	; 3: 221 70 24

modf$13:	; BinarySubtract £temporary606 abs_x integral
x13476:	fsub	; 2: 222 233

modf$14:	; PopFloat fractional
x13478:	fstp qword [bp + 32]	; 3: 221 94 32

modf$15:	; Equal 26 p 0
x13481:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13485:	je modf$26	; 2: 116 28

modf$16:	; Deref £temporary608 -> p p 0
x13487:	mov si, [bp + 14]	; 3: 139 118 14

modf$17:	; PushFloat x
x13490:	fld qword [bp + 6]	; 3: 221 70 6

modf$18:	; PushZero
x13493:	fldz	; 2: 217 238

modf$19:	; SignedLessThanEqual 23 x 0
x13495:	fcompp	; 2: 222 217
x13497:	fstsw ax	; 3: 155 223 224
x13500:	sahf	; 1: 158
x13501:	jae modf$23	; 2: 115 5

modf$20:	; PushFloat integral
x13503:	fld qword [bp + 24]	; 3: 221 70 24

modf$21:	; DecreaseStack

modf$22:	; Goto 25
x13506:	jmp modf$25	; 2: 235 5

modf$23:	; PushFloat integral
x13508:	fld qword [bp + 24]	; 3: 221 70 24

modf$24:	; UnarySubtract £temporary610 integral
x13511:	fchs	; 2: 217 224

modf$25:	; PopFloat £temporary608 -> p
x13513:	fstp qword [si]	; 2: 221 28

modf$26:	; PushFloat x
x13515:	fld qword [bp + 6]	; 3: 221 70 6

modf$27:	; PushZero
x13518:	fldz	; 2: 217 238

modf$28:	; SignedLessThanEqual 32 x 0
x13520:	fcompp	; 2: 222 217
x13522:	fstsw ax	; 3: 155 223 224
x13525:	sahf	; 1: 158
x13526:	jae modf$32	; 2: 115 5

modf$29:	; PushFloat fractional
x13528:	fld qword [bp + 32]	; 3: 221 70 32

modf$30:	; DecreaseStack

modf$31:	; Goto 34
x13531:	jmp modf$34	; 2: 235 5

modf$32:	; PushFloat fractional
x13533:	fld qword [bp + 32]	; 3: 221 70 32

modf$33:	; UnarySubtract £temporary616 fractional
x13536:	fchs	; 2: 217 224

modf$34:	; SetReturnValue £temporary620

modf$35:	; Return £temporary620
x13538:	mov ax, [bp]	; 3: 139 70 0
x13541:	mov di, [bp + 4]	; 3: 139 126 4
x13544:	mov bp, [bp + 2]	; 3: 139 110 2
x13547:	jmp ax	; 2: 255 224

modf$36:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13549:	mov word [bp + 28], @10788$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 67 54

math_test_2$2:	; PushFloat x
x13554:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13557:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13560:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13563:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13566:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13569:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13572:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13575:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13578:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 24 53
x13583:	mov [bp + 48], bp	; 3: 137 110 48
x13586:	add bp, 46	; 3: 131 197 46
x13589:	jmp fmod	; 3: 233 110 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary5002

math_test_2$14:	; Parameter 22 £temporary5002 24
x13592:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13595:	mov ax, [errno]	; 3: 161 230 10
x13598:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13601:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 52 53
x13606:	mov [bp + 24], bp	; 3: 137 110 24
x13609:	add bp, 22	; 3: 131 197 22
x13612:	mov di, bp	; 2: 137 239
x13614:	add di, 26	; 3: 131 199 26
x13617:	jmp printf	; 3: 233 208 215

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13620:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13626:	mov word [bp + 28], @10793$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 98 54

math_test_2$21:	; PushFloat x
x13631:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13634:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13637:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13640:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13643:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13646:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13649:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13652:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13655:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 101 53
x13660:	mov [bp + 48], bp	; 3: 137 110 48
x13663:	add bp, 46	; 3: 131 197 46
x13666:	jmp atan2	; 3: 233 82 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary5004

math_test_2$33:	; Parameter 22 £temporary5004 24
x13669:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13672:	mov ax, [errno]	; 3: 161 230 10
x13675:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13678:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 129 53
x13683:	mov [bp + 24], bp	; 3: 137 110 24
x13686:	add bp, 22	; 3: 131 197 22
x13689:	mov di, bp	; 2: 137 239
x13691:	add di, 26	; 3: 131 199 26
x13694:	jmp printf	; 3: 233 131 215

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13697:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13703:	mov word [bp + 28], @10798$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 130 54

math_test_2$40:	; PushFloat x
x13708:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13711:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13714:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13717:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13720:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13723:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13726:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13729:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13732:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 178 53
x13737:	mov [bp + 48], bp	; 3: 137 110 48
x13740:	add bp, 46	; 3: 131 197 46
x13743:	jmp pow	; 3: 233 233 242

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary5006

math_test_2$52:	; Parameter 22 £temporary5006 24
x13746:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13749:	mov ax, [errno]	; 3: 161 230 10
x13752:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13755:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 206 53
x13760:	mov [bp + 24], bp	; 3: 137 110 24
x13763:	add bp, 22	; 3: 131 197 22
x13766:	mov di, bp	; 2: 137 239
x13768:	add di, 26	; 3: 131 199 26
x13771:	jmp printf	; 3: 233 54 215

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13774:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13780:	mov word [bp + 28], @10803$string_0A#	; 5: 199 70 28 160 54

math_test_2$59:	; Call 22 printf 0
x13785:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 233 53
x13790:	mov [bp + 24], bp	; 3: 137 110 24
x13793:	add bp, 22	; 3: 131 197 22
x13796:	mov di, bp	; 2: 137 239
x13798:	jmp printf	; 3: 233 27 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13801:	mov word [bp + 28], @10805$string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 162 54

math_test_2$63:	; PushFloat x
x13806:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13809:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13812:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary5009 y
x13815:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13819:	mov ax, [container2bytes#]	; 3: 161 79 27

math_test_2$67:	; Parameter 22 £temporary5009 16
x13822:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13825:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13828:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13831:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary5010 y
x13834:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13838:	mov ax, [container2bytes#]	; 3: 161 79 27

math_test_2$73:	; Parameter 22 £temporary5010 32
x13841:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13844:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 34 54
x13849:	mov [bp + 42], bp	; 3: 137 110 42
x13852:	add bp, 40	; 3: 131 197 40
x13855:	jmp ldexp	; 3: 233 235 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary5011

math_test_2$77:	; Parameter 22 £temporary5011 18
x13858:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13861:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 56 54
x13866:	mov [bp + 24], bp	; 3: 137 110 24
x13869:	add bp, 22	; 3: 131 197 22
x13872:	mov di, bp	; 2: 137 239
x13874:	add di, 18	; 3: 131 199 18
x13877:	jmp printf	; 3: 233 204 214

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13880:	mov ax, [bp]	; 3: 139 70 0
x13883:	mov di, [bp + 4]	; 3: 139 126 4
x13886:	mov bp, [bp + 2]	; 3: 139 110 2
x13889:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

@10788$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13891:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10793$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13922:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10798$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13954:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10803$string_0A#:
x13984:	db 10, 0	; 2: 10 0

@10805$string_ldexp2825f2C2025i29203D2025f0A0A#:
x13986:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x14007:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x14010:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x14012:	fcompp	; 2: 222 217
x14014:	fstsw ax	; 3: 155 223 224
x14017:	sahf	; 1: 158
x14018:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x14020:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x14023:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary739 x y
x14026:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary739 6
x14028:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x14031:	mov word [bp + 22], atan2$9	; 5: 199 70 22 221 54
x14036:	mov [bp + 24], bp	; 3: 137 110 24
x14039:	add bp, 22	; 3: 131 197 22
x14042:	jmp atan	; 3: 233 182 248

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary740

atan2$11:	; SetReturnValue £temporary740

atan2$12:	; Return £temporary740
x14045:	mov ax, [bp]	; 3: 139 70 0
x14048:	mov di, [bp + 4]	; 3: 139 126 4
x14051:	mov bp, [bp + 2]	; 3: 139 110 2
x14054:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x14056:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x14059:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x14061:	fcompp	; 2: 222 217
x14063:	fstsw ax	; 3: 155 223 224
x14066:	sahf	; 1: 158
x14067:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x14069:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x14072:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x14074:	fcompp	; 2: 222 217
x14076:	fstsw ax	; 3: 155 223 224
x14079:	sahf	; 1: 158
x14080:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x14082:	fld qword [@1728$float8$3.14#]	; 4: 221 6 237 55

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14086:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x14089:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x14092:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary744 x y
x14095:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary744 6
x14097:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x14100:	mov word [bp + 30], atan2$26	; 5: 199 70 30 34 55
x14105:	mov [bp + 32], bp	; 3: 137 110 32
x14108:	add bp, 30	; 3: 131 197 30
x14111:	jmp atan	; 3: 233 113 248

atan2$26:	; PostCall 22
x14114:	fstp qword [bp + 30]	; 3: 221 94 30
x14117:	fld qword [bp + 22]	; 3: 221 70 22
x14120:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary745

atan2$28:	; BinaryAdd £temporary746 3.14 £temporary745
x14123:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary746

atan2$30:	; Return £temporary746
x14125:	mov ax, [bp]	; 3: 139 70 0
x14128:	mov di, [bp + 4]	; 3: 139 126 4
x14131:	mov bp, [bp + 2]	; 3: 139 110 2
x14134:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x14136:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x14139:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x14141:	fcompp	; 2: 222 217
x14143:	fstsw ax	; 3: 155 223 224
x14146:	sahf	; 1: 158
x14147:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x14149:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x14152:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x14154:	fcompp	; 2: 222 217
x14156:	fstsw ax	; 3: 155 223 224
x14159:	sahf	; 1: 158
x14160:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x14162:	fld qword [@1741$float8$minus3.14#]	; 4: 221 6 245 55

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14166:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x14169:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x14172:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary750 x y
x14175:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary750 6
x14177:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x14180:	mov word [bp + 30], atan2$44	; 5: 199 70 30 114 55
x14185:	mov [bp + 32], bp	; 3: 137 110 32
x14188:	add bp, 30	; 3: 131 197 30
x14191:	jmp atan	; 3: 233 33 248

atan2$44:	; PostCall 22
x14194:	fstp qword [bp + 30]	; 3: 221 94 30
x14197:	fld qword [bp + 22]	; 3: 221 70 22
x14200:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary751

atan2$46:	; BinaryAdd £temporary752 -3.14 £temporary751
x14203:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary752

atan2$48:	; Return £temporary752
x14205:	mov ax, [bp]	; 3: 139 70 0
x14208:	mov di, [bp + 4]	; 3: 139 126 4
x14211:	mov bp, [bp + 2]	; 3: 139 110 2
x14214:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x14216:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x14219:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x14221:	fcompp	; 2: 222 217
x14223:	fstsw ax	; 3: 155 223 224
x14226:	sahf	; 1: 158
x14227:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x14229:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x14232:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x14234:	fcompp	; 2: 222 217
x14236:	fstsw ax	; 3: 155 223 224
x14239:	sahf	; 1: 158
x14240:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x14242:	fld qword [@1755$float8$1.57#]	; 4: 221 6 253 55

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x14246:	mov ax, [bp]	; 3: 139 70 0
x14249:	mov di, [bp + 4]	; 3: 139 126 4
x14252:	mov bp, [bp + 2]	; 3: 139 110 2
x14255:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x14257:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x14260:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x14262:	fcompp	; 2: 222 217
x14264:	fstsw ax	; 3: 155 223 224
x14267:	sahf	; 1: 158
x14268:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x14270:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14273:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14275:	fcompp	; 2: 222 217
x14277:	fstsw ax	; 3: 155 223 224
x14280:	sahf	; 1: 158
x14281:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14283:	fld qword [@1767$float8$minus1.57#]	; 4: 221 6 5 56

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14287:	mov ax, [bp]	; 3: 139 70 0
x14290:	mov di, [bp + 4]	; 3: 139 126 4
x14293:	mov bp, [bp + 2]	; 3: 139 110 2
x14296:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14298:	mov word [errno], 6	; 6: 199 6 230 10 6 0

atan2$68:	; PushZero
x14304:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14306:	mov ax, [bp]	; 3: 139 70 0
x14309:	mov di, [bp + 4]	; 3: 139 126 4
x14312:	mov bp, [bp + 2]	; 3: 139 110 2
x14315:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

@1728$float8$3.14#:
x14317:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@1741$float8$minus3.14#:
x14325:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@1755$float8$1.57#:
x14333:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1767$float8$minus1.57#:
x14341:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

ldexp:	; PushFloat x
x14349:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14352:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14355:	fld qword [@1349$float8$2#]	; 4: 221 6 68 56

ldexp$3:	; Parameter 16 2 6
x14359:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary565 n
x14362:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary565 14
x14365:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14368:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 46 56
x14373:	mov [bp + 26], bp	; 3: 137 110 26
x14376:	add bp, 24	; 3: 131 197 24
x14379:	jmp pow	; 3: 233 109 240

ldexp$7:	; PostCall 16
x14382:	fstp qword [bp + 24]	; 3: 221 94 24
x14385:	fld qword [bp + 16]	; 3: 221 70 16
x14388:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary566

ldexp$9:	; SignedMultiply £temporary567 x £temporary566
x14391:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary567

ldexp$11:	; Return £temporary567
x14393:	mov ax, [bp]	; 3: 139 70 0
x14396:	mov di, [bp + 4]	; 3: 139 126 4
x14399:	mov bp, [bp + 2]	; 3: 139 110 2
x14402:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

@1349$float8$2#:
x14404:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14412:	mov word [bp + 12], @10855$string_in2Etxt#	; 5: 199 70 12 4 78

file_test$2:	; Parameter 6 string_r# 8
x14417:	mov word [bp + 14], @10856$string_r#	; 5: 199 70 14 11 78

file_test$3:	; Call 6 fopen 0
x14422:	mov word [bp + 6], file_test$4	; 5: 199 70 6 100 56
x14427:	mov [bp + 8], bp	; 3: 137 110 8
x14430:	add bp, 6	; 3: 131 197 6
x14433:	jmp fopen	; 3: 233 52 34

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary5041

file_test$6:	; Assign inFilePtr £temporary5041
x14436:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14439:	mov word [bp + 14], @10859$string_outX2Etxt#	; 5: 199 70 14 13 78

file_test$9:	; Parameter 8 string_w# 8
x14444:	mov word [bp + 16], @10860$string_w#	; 5: 199 70 16 22 78

file_test$10:	; Call 8 fopen 0
x14449:	mov word [bp + 8], file_test$11	; 5: 199 70 8 127 56
x14454:	mov [bp + 10], bp	; 3: 137 110 10
x14457:	add bp, 8	; 3: 131 197 8
x14460:	jmp fopen	; 3: 233 25 34

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary5042

file_test$13:	; Assign outFilePtr £temporary5042
x14463:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14466:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14470:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14472:	mov ax, [stderr]	; 3: 161 24 78
x14475:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14478:	mov word [bp + 18], @10868$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 26 78

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14483:	mov word [bp + 20], @10869$string_inFilePtr20213D20NULL#	; 5: 199 70 20 72 78

file_test$19:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14488:	mov word [bp + 22], @10870$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 90 78

file_test$20:	; Parameter 10 14 14
x14493:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14498:	mov word [bp + 10], file_test$22	; 5: 199 70 10 181 56
x14503:	mov [bp + 12], bp	; 3: 137 110 12
x14506:	add bp, 10	; 3: 131 197 10
x14509:	mov di, bp	; 2: 137 239
x14511:	add di, 6	; 3: 131 199 6
x14514:	jmp fprintf	; 3: 233 123 38

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14517:	mov word [bp + 10], file_test$25	; 5: 199 70 10 195 56
x14522:	mov [bp + 12], bp	; 3: 137 110 12
x14525:	add bp, 10	; 3: 131 197 10
x14528:	jmp abort	; 3: 233 168 38

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14531:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14535:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14537:	mov ax, [stderr]	; 3: 161 24 78
x14540:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14543:	mov word [bp + 18], @10879$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 155 78

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14548:	mov word [bp + 20], @10880$string_outFilePtr20213D20NULL#	; 5: 199 70 20 201 78

file_test$31:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14553:	mov word [bp + 22], @10881$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 220 78

file_test$32:	; Parameter 10 15 14
x14558:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14563:	mov word [bp + 10], file_test$34	; 5: 199 70 10 246 56
x14568:	mov [bp + 12], bp	; 3: 137 110 12
x14571:	add bp, 10	; 3: 131 197 10
x14574:	mov di, bp	; 2: 137 239
x14576:	add di, 6	; 3: 131 199 6
x14579:	jmp fprintf	; 3: 233 58 38

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14582:	mov word [bp + 10], file_test$37	; 5: 199 70 10 4 57
x14587:	mov [bp + 12], bp	; 3: 137 110 12
x14590:	add bp, 10	; 3: 131 197 10
x14593:	jmp abort	; 3: 233 103 38

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14596:	mov ax, [bp + 6]	; 3: 139 70 6
x14599:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14602:	mov word [bp + 10], file_test$41	; 5: 199 70 10 24 57
x14607:	mov [bp + 12], bp	; 3: 137 110 12
x14610:	add bp, 10	; 3: 131 197 10
x14613:	jmp feof	; 3: 233 100 38

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary5051

file_test$43:	; NotEqual 75 £temporary5051 0
x14616:	cmp bx, 0	; 3: 131 251 0
x14619:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14623:	mov ax, [bp + 6]	; 3: 139 70 6
x14626:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14629:	mov word [bp + 26], @10890$string_25lf#	; 5: 199 70 26 29 79

file_test$47:	; address £temporary5054 value
x14634:	mov si, bp	; 2: 137 238
x14636:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary5054 10
x14639:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14642:	mov word [bp + 18], file_test$50	; 5: 199 70 18 69 57
x14647:	mov [bp + 20], bp	; 3: 137 110 20
x14650:	add bp, 18	; 3: 131 197 18
x14653:	mov di, bp	; 2: 137 239
x14655:	add di, 2	; 3: 131 199 2
x14658:	jmp fscanf	; 3: 233 204 38

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14661:	mov word [bp + 24], @10893$string_X12025f0A#	; 5: 199 70 24 33 79

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14666:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14669:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14672:	mov word [bp + 26], file_test$57	; 5: 199 70 26 94 57
x14677:	mov [bp + 28], bp	; 3: 137 110 28
x14680:	add bp, 26	; 3: 131 197 26
x14683:	jmp sqrt	; 3: 233 177 245

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary5056

file_test$59:	; Parameter 18 £temporary5056 8
x14686:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14689:	mov word [bp + 18], file_test$61	; 5: 199 70 18 116 57
x14694:	mov [bp + 20], bp	; 3: 137 110 20
x14697:	add bp, 18	; 3: 131 197 18
x14700:	mov di, bp	; 2: 137 239
x14702:	add di, 8	; 3: 131 199 8
x14705:	jmp printf	; 3: 233 144 211

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14708:	mov ax, [bp + 8]	; 3: 139 70 8
x14711:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14714:	mov word [bp + 26], @10896$string_X22025f0A#	; 5: 199 70 26 40 79

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14719:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14722:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14725:	mov word [bp + 28], file_test$69	; 5: 199 70 28 147 57
x14730:	mov [bp + 30], bp	; 3: 137 110 30
x14733:	add bp, 28	; 3: 131 197 28
x14736:	jmp sqrt	; 3: 233 124 245

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary5058

file_test$71:	; Parameter 18 £temporary5058 10
x14739:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14742:	mov word [bp + 18], file_test$73	; 5: 199 70 18 169 57
x14747:	mov [bp + 20], bp	; 3: 137 110 20
x14750:	add bp, 18	; 3: 131 197 18
x14753:	mov di, bp	; 2: 137 239
x14755:	add di, 8	; 3: 131 199 8
x14758:	jmp fprintf	; 3: 233 135 37

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14761:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14764:	mov word [bp + 16], @10899$string_0A#	; 5: 199 70 16 47 79

file_test$77:	; Call 10 printf 0
x14769:	mov word [bp + 10], file_test$78	; 5: 199 70 10 193 57
x14774:	mov [bp + 12], bp	; 3: 137 110 12
x14777:	add bp, 10	; 3: 131 197 10
x14780:	mov di, bp	; 2: 137 239
x14782:	jmp printf	; 3: 233 67 211

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14785:	mov ax, [bp + 6]	; 3: 139 70 6
x14788:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14791:	mov word [bp + 10], file_test$82	; 5: 199 70 10 213 57
x14796:	mov [bp + 12], bp	; 3: 137 110 12
x14799:	add bp, 10	; 3: 131 197 10
x14802:	jmp fclose	; 3: 233 107 56

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14805:	mov ax, [bp + 8]	; 3: 139 70 8
x14808:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14811:	mov word [bp + 10], file_test$86	; 5: 199 70 10 233 57
x14816:	mov [bp + 12], bp	; 3: 137 110 12
x14819:	add bp, 10	; 3: 131 197 10
x14822:	jmp fclose	; 3: 233 87 56

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14825:	mov word [bp + 12], @10903$string_in2Etxt#	; 5: 199 70 12 49 79

file_test$89:	; Parameter 6 string_r# 8
x14830:	mov word [bp + 14], @10904$string_r#	; 5: 199 70 14 56 79

file_test$90:	; Call 6 fopen 0
x14835:	mov word [bp + 6], file_test$91	; 5: 199 70 6 1 58
x14840:	mov [bp + 8], bp	; 3: 137 110 8
x14843:	add bp, 6	; 3: 131 197 6
x14846:	jmp fopen	; 3: 233 151 32

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary5063

file_test$93:	; Assign inFilePtr £temporary5063
x14849:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14852:	mov word [bp + 14], @10907$string_outY2Etxt#	; 5: 199 70 14 58 79

file_test$96:	; Parameter 8 string_w# 8
x14857:	mov word [bp + 16], @10908$string_w#	; 5: 199 70 16 67 79

file_test$97:	; Call 8 fopen 0
x14862:	mov word [bp + 8], file_test$98	; 5: 199 70 8 28 58
x14867:	mov [bp + 10], bp	; 3: 137 110 10
x14870:	add bp, 8	; 3: 131 197 8
x14873:	jmp fopen	; 3: 233 124 32

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary5064

file_test$100:	; Assign outFilePtr £temporary5064
x14876:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14879:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14883:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14885:	mov ax, [stderr]	; 3: 161 24 78
x14888:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14891:	mov word [bp + 18], @10916$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 69 79

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14896:	mov word [bp + 20], @10917$string_inFilePtr20213D20NULL#	; 5: 199 70 20 115 79

file_test$106:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14901:	mov word [bp + 22], @10918$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 133 79

file_test$107:	; Parameter 10 34 14
x14906:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14911:	mov word [bp + 10], file_test$109	; 5: 199 70 10 82 58
x14916:	mov [bp + 12], bp	; 3: 137 110 12
x14919:	add bp, 10	; 3: 131 197 10
x14922:	mov di, bp	; 2: 137 239
x14924:	add di, 6	; 3: 131 199 6
x14927:	jmp fprintf	; 3: 233 222 36

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14930:	mov word [bp + 10], file_test$112	; 5: 199 70 10 96 58
x14935:	mov [bp + 12], bp	; 3: 137 110 12
x14938:	add bp, 10	; 3: 131 197 10
x14941:	jmp abort	; 3: 233 11 37

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14944:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14948:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14950:	mov ax, [stderr]	; 3: 161 24 78
x14953:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14956:	mov word [bp + 18], @10927$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 198 79

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14961:	mov word [bp + 20], @10928$string_outFilePtr20213D20NULL#	; 5: 199 70 20 244 79

file_test$118:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14966:	mov word [bp + 22], @10929$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 7 80

file_test$119:	; Parameter 10 35 14
x14971:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14976:	mov word [bp + 10], file_test$121	; 5: 199 70 10 147 58
x14981:	mov [bp + 12], bp	; 3: 137 110 12
x14984:	add bp, 10	; 3: 131 197 10
x14987:	mov di, bp	; 2: 137 239
x14989:	add di, 6	; 3: 131 199 6
x14992:	jmp fprintf	; 3: 233 157 36

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14995:	mov word [bp + 10], file_test$124	; 5: 199 70 10 161 58
x15000:	mov [bp + 12], bp	; 3: 137 110 12
x15003:	add bp, 10	; 3: 131 197 10
x15006:	jmp abort	; 3: 233 202 36

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x15009:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x15014:	mov ax, [bp + 6]	; 3: 139 70 6
x15017:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x15020:	mov word [bp + 22], @10937$string_25i#	; 5: 199 70 22 72 80

file_test$129:	; address £temporary5073 size
x15025:	mov si, bp	; 2: 137 238
x15027:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary5073 10
x15030:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x15033:	mov word [bp + 14], file_test$132	; 5: 199 70 14 204 58
x15038:	mov [bp + 16], bp	; 3: 137 110 16
x15041:	add bp, 14	; 3: 131 197 14
x15044:	mov di, bp	; 2: 137 239
x15046:	add di, 2	; 3: 131 199 2
x15049:	jmp fscanf	; 3: 233 69 37

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x15052:	mov word [bp + 20], @10940$string_size2025i0A#	; 5: 199 70 20 75 80

file_test$135:	; Parameter 14 size 8
x15057:	mov ax, [bp + 10]	; 3: 139 70 10
x15060:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x15063:	mov word [bp + 14], file_test$137	; 5: 199 70 14 234 58
x15068:	mov [bp + 16], bp	; 3: 137 110 16
x15071:	add bp, 14	; 3: 131 197 14
x15074:	mov di, bp	; 2: 137 239
x15076:	add di, 2	; 3: 131 199 2
x15079:	jmp printf	; 3: 233 26 210

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x15082:	mov ax, [bp + 8]	; 3: 139 70 8
x15085:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x15088:	mov word [bp + 22], @10942$string_Y20size2025i0A#	; 5: 199 70 22 84 80

file_test$141:	; Parameter 14 size 10
x15093:	mov ax, [bp + 10]	; 3: 139 70 10
x15096:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x15099:	mov word [bp + 14], file_test$143	; 5: 199 70 14 14 59
x15104:	mov [bp + 16], bp	; 3: 137 110 16
x15107:	add bp, 14	; 3: 131 197 14
x15110:	mov di, bp	; 2: 137 239
x15112:	add di, 2	; 3: 131 199 2
x15115:	jmp fprintf	; 3: 233 34 36

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x15118:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x15123:	mov ax, [bp + 10]	; 3: 139 70 10
x15126:	cmp [bp + 12], ax	; 3: 57 70 12
x15129:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x15133:	mov ax, [bp + 6]	; 3: 139 70 6
x15136:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x15139:	mov word [bp + 30], @10950$string_25lf#	; 5: 199 70 30 95 80

file_test$149:	; address £temporary5079 value
x15144:	mov si, bp	; 2: 137 238
x15146:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary5079 10
x15149:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x15152:	mov word [bp + 22], file_test$152	; 5: 199 70 22 67 59
x15157:	mov [bp + 24], bp	; 3: 137 110 24
x15160:	add bp, 22	; 3: 131 197 22
x15163:	mov di, bp	; 2: 137 239
x15165:	add di, 2	; 3: 131 199 2
x15168:	jmp fscanf	; 3: 233 206 36

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x15171:	mov word [bp + 28], @10953$string_Y12025f0A#	; 5: 199 70 28 99 80

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x15176:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x15179:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x15182:	mov word [bp + 30], file_test$159	; 5: 199 70 30 92 59
x15187:	mov [bp + 32], bp	; 3: 137 110 32
x15190:	add bp, 30	; 3: 131 197 30
x15193:	jmp sqrt	; 3: 233 179 243

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary5081

file_test$161:	; Parameter 22 £temporary5081 8
x15196:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x15199:	mov word [bp + 22], file_test$163	; 5: 199 70 22 114 59
x15204:	mov [bp + 24], bp	; 3: 137 110 24
x15207:	add bp, 22	; 3: 131 197 22
x15210:	mov di, bp	; 2: 137 239
x15212:	add di, 8	; 3: 131 199 8
x15215:	jmp printf	; 3: 233 146 209

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x15218:	mov ax, [bp + 8]	; 3: 139 70 8
x15221:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x15224:	mov word [bp + 30], @10956$string_Y22025f0A#	; 5: 199 70 30 106 80

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x15229:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x15232:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x15235:	mov word [bp + 32], file_test$171	; 5: 199 70 32 145 59
x15240:	mov [bp + 34], bp	; 3: 137 110 34
x15243:	add bp, 32	; 3: 131 197 32
x15246:	jmp sqrt	; 3: 233 126 243

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary5083

file_test$173:	; Parameter 22 £temporary5083 10
x15249:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x15252:	mov word [bp + 22], file_test$175	; 5: 199 70 22 167 59
x15257:	mov [bp + 24], bp	; 3: 137 110 24
x15260:	add bp, 22	; 3: 131 197 22
x15263:	mov di, bp	; 2: 137 239
x15265:	add di, 8	; 3: 131 199 8
x15268:	jmp fprintf	; 3: 233 137 35

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x15271:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x15274:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x15277:	mov word [bp + 20], @10959$string_0A#	; 5: 199 70 20 113 80

file_test$180:	; Call 14 printf 0
x15282:	mov word [bp + 14], file_test$181	; 5: 199 70 14 194 59
x15287:	mov [bp + 16], bp	; 3: 137 110 16
x15290:	add bp, 14	; 3: 131 197 14
x15293:	mov di, bp	; 2: 137 239
x15295:	jmp printf	; 3: 233 66 209

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x15298:	mov ax, [bp + 6]	; 3: 139 70 6
x15301:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x15304:	mov word [bp + 10], file_test$185	; 5: 199 70 10 214 59
x15309:	mov [bp + 12], bp	; 3: 137 110 12
x15312:	add bp, 10	; 3: 131 197 10
x15315:	jmp fclose	; 3: 233 106 54

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15318:	mov ax, [bp + 8]	; 3: 139 70 8
x15321:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15324:	mov word [bp + 10], file_test$189	; 5: 199 70 10 234 59
x15329:	mov [bp + 12], bp	; 3: 137 110 12
x15332:	add bp, 10	; 3: 131 197 10
x15335:	jmp fclose	; 3: 233 86 54

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_Y#
x15338:	mov word [bp + 6], @10963$string_Y#	; 5: 199 70 6 115 80

file_test$191:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$192:	; Parameter 8 sourceFile 6
x15343:	mov ax, [bp + 6]	; 3: 139 70 6
x15346:	mov [bp + 14], ax	; 3: 137 70 14

file_test$193:	; Call 8 remove 0
x15349:	mov word [bp + 8], file_test$194	; 5: 199 70 8 3 60
x15354:	mov [bp + 10], bp	; 3: 137 110 10
x15357:	add bp, 8	; 3: 131 197 8
x15360:	jmp remove	; 3: 233 0 55

file_test$194:	; PostCall 8

file_test$195:	; GetReturnValue £temporary5088

file_test$196:	; NotEqual 203 £temporary5088 0
x15363:	cmp bx, 0	; 3: 131 251 0
x15366:	jne file_test$203	; 2: 117 32

file_test$197:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$198:	; Parameter 8 string_2225s2220has20been20removed0A# 6
x15368:	mov word [bp + 14], @10969$string_2225s2220has20been20removed0A#	; 5: 199 70 14 117 80

file_test$199:	; Parameter 8 sourceFile 8
x15373:	mov ax, [bp + 6]	; 3: 139 70 6
x15376:	mov [bp + 16], ax	; 3: 137 70 16

file_test$200:	; Call 8 printf 0
x15379:	mov word [bp + 8], file_test$201	; 5: 199 70 8 38 60
x15384:	mov [bp + 10], bp	; 3: 137 110 10
x15387:	add bp, 8	; 3: 131 197 8
x15390:	mov di, bp	; 2: 137 239
x15392:	add di, 2	; 3: 131 199 2
x15395:	jmp printf	; 3: 233 222 208

file_test$201:	; PostCall 8

file_test$202:	; Goto 215
x15398:	jmp file_test$215	; 2: 235 59

file_test$203:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$204:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15400:	mov word [bp + 14], @10971$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 140 80

file_test$205:	; Parameter 8 sourceFile 8
x15405:	mov ax, [bp + 6]	; 3: 139 70 6
x15408:	mov [bp + 16], ax	; 3: 137 70 16

file_test$206:	; Parameter 8 errno 10
x15411:	mov ax, [errno]	; 3: 161 230 10
x15414:	mov [bp + 18], ax	; 3: 137 70 18

file_test$207:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$208:	; Parameter 8 errno 18
x15417:	mov ax, [errno]	; 3: 161 230 10
x15420:	mov [bp + 26], ax	; 3: 137 70 26

file_test$209:	; Call 8 strerror 12
x15423:	mov word [bp + 20], file_test$210	; 5: 199 70 20 77 60
x15428:	mov [bp + 22], bp	; 3: 137 110 22
x15431:	add bp, 20	; 3: 131 197 20
x15434:	jmp strerror	; 3: 233 209 247

file_test$210:	; PostCall 8

file_test$211:	; GetReturnValue £temporary5091

file_test$212:	; Parameter 8 £temporary5091 12
x15437:	mov [bp + 20], bx	; 3: 137 94 20

file_test$213:	; Call 8 printf 0
x15440:	mov word [bp + 8], file_test$214	; 5: 199 70 8 99 60
x15445:	mov [bp + 10], bp	; 3: 137 110 10
x15448:	add bp, 8	; 3: 131 197 8
x15451:	mov di, bp	; 2: 137 239
x15453:	add di, 6	; 3: 131 199 6
x15456:	jmp printf	; 3: 233 161 208

file_test$214:	; PostCall 8

file_test$215:	; Assign sourceFile string_X#
x15459:	mov word [bp + 6], @10974$string_X#	; 5: 199 70 6 160 80

file_test$216:	; Assign targetFile string_Y#
x15464:	mov word [bp + 8], @10976$string_Y#	; 5: 199 70 8 162 80

file_test$217:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$218:	; Parameter 10 sourceFile 6
x15469:	mov ax, [bp + 6]	; 3: 139 70 6
x15472:	mov [bp + 16], ax	; 3: 137 70 16

file_test$219:	; Parameter 10 string_w# 8
x15475:	mov word [bp + 18], @10978$string_w#	; 5: 199 70 18 164 80

file_test$220:	; Call 10 fopen 0
x15480:	mov word [bp + 10], file_test$221	; 5: 199 70 10 134 60
x15485:	mov [bp + 12], bp	; 3: 137 110 12
x15488:	add bp, 10	; 3: 131 197 10
x15491:	jmp fopen	; 3: 233 18 30

file_test$221:	; PostCall 10

file_test$222:	; GetReturnValue £temporary5093

file_test$223:	; Assign filePtr £temporary5093
x15494:	mov [bp + 10], bx	; 3: 137 94 10

file_test$224:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$225:	; Parameter 12 filePtr 6
x15497:	mov ax, [bp + 10]	; 3: 139 70 10
x15500:	mov [bp + 18], ax	; 3: 137 70 18

file_test$226:	; Parameter 12 string_Hello20X# 8
x15503:	mov word [bp + 20], @10981$string_Hello20X#	; 5: 199 70 20 166 80

file_test$227:	; Call 12 fprintf 0
x15508:	mov word [bp + 12], file_test$228	; 5: 199 70 12 164 60
x15513:	mov [bp + 14], bp	; 3: 137 110 14
x15516:	add bp, 12	; 3: 131 197 12
x15519:	mov di, bp	; 2: 137 239
x15521:	jmp fprintf	; 3: 233 140 34

file_test$228:	; PostCall 12

file_test$229:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$230:	; Parameter 12 filePtr 6
x15524:	mov ax, [bp + 10]	; 3: 139 70 10
x15527:	mov [bp + 18], ax	; 3: 137 70 18

file_test$231:	; Call 12 fclose 0
x15530:	mov word [bp + 12], file_test$232	; 5: 199 70 12 184 60
x15535:	mov [bp + 14], bp	; 3: 137 110 14
x15538:	add bp, 12	; 3: 131 197 12
x15541:	jmp fclose	; 3: 233 136 53

file_test$232:	; PostCall 12

file_test$233:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$234:	; Parameter 12 sourceFile 6
x15544:	mov ax, [bp + 6]	; 3: 139 70 6
x15547:	mov [bp + 18], ax	; 3: 137 70 18

file_test$235:	; Parameter 12 targetFile 8
x15550:	mov ax, [bp + 8]	; 3: 139 70 8
x15553:	mov [bp + 20], ax	; 3: 137 70 20

file_test$236:	; Call 12 rename 0
x15556:	mov word [bp + 12], file_test$237	; 5: 199 70 12 210 60
x15561:	mov [bp + 14], bp	; 3: 137 110 14
x15564:	add bp, 12	; 3: 131 197 12
x15567:	jmp rename	; 3: 233 94 54

file_test$237:	; PostCall 12

file_test$238:	; GetReturnValue £temporary5096

file_test$239:	; NotEqual 247 £temporary5096 0
x15570:	cmp bx, 0	; 3: 131 251 0
x15573:	jne file_test$247	; 2: 117 38

file_test$240:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$241:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15575:	mov word [bp + 18], @10988$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 174 80

file_test$242:	; Parameter 12 sourceFile 8
x15580:	mov ax, [bp + 6]	; 3: 139 70 6
x15583:	mov [bp + 20], ax	; 3: 137 70 20

file_test$243:	; Parameter 12 targetFile 10
x15586:	mov ax, [bp + 8]	; 3: 139 70 8
x15589:	mov [bp + 22], ax	; 3: 137 70 22

file_test$244:	; Call 12 printf 0
x15592:	mov word [bp + 12], file_test$245	; 5: 199 70 12 251 60
x15597:	mov [bp + 14], bp	; 3: 137 110 14
x15600:	add bp, 12	; 3: 131 197 12
x15603:	mov di, bp	; 2: 137 239
x15605:	add di, 4	; 3: 131 199 4
x15608:	jmp printf	; 3: 233 9 208

file_test$245:	; PostCall 12

file_test$246:	; Goto 260
x15611:	jmp file_test$260	; 2: 235 65

file_test$247:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$248:	; Parameter 12 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15613:	mov word [bp + 18], @10990$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 18 206 80

file_test$249:	; Parameter 12 sourceFile 8
x15618:	mov ax, [bp + 6]	; 3: 139 70 6
x15621:	mov [bp + 20], ax	; 3: 137 70 20

file_test$250:	; Parameter 12 targetFile 10
x15624:	mov ax, [bp + 8]	; 3: 139 70 8
x15627:	mov [bp + 22], ax	; 3: 137 70 22

file_test$251:	; Parameter 12 errno 12
x15630:	mov ax, [errno]	; 3: 161 230 10
x15633:	mov [bp + 24], ax	; 3: 137 70 24

file_test$252:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$253:	; Parameter 12 errno 20
x15636:	mov ax, [errno]	; 3: 161 230 10
x15639:	mov [bp + 32], ax	; 3: 137 70 32

file_test$254:	; Call 12 strerror 14
x15642:	mov word [bp + 26], file_test$255	; 5: 199 70 26 40 61
x15647:	mov [bp + 28], bp	; 3: 137 110 28
x15650:	add bp, 26	; 3: 131 197 26
x15653:	jmp strerror	; 3: 233 246 246

file_test$255:	; PostCall 12

file_test$256:	; GetReturnValue £temporary5099

file_test$257:	; Parameter 12 £temporary5099 14
x15656:	mov [bp + 26], bx	; 3: 137 94 26

file_test$258:	; Call 12 printf 0
x15659:	mov word [bp + 12], file_test$259	; 5: 199 70 12 62 61
x15664:	mov [bp + 14], bp	; 3: 137 110 14
x15667:	add bp, 12	; 3: 131 197 12
x15670:	mov di, bp	; 2: 137 239
x15672:	add di, 8	; 3: 131 199 8
x15675:	jmp printf	; 3: 233 198 207

file_test$259:	; PostCall 12

file_test$260:	; Assign sourceFile string_X2#
x15678:	mov word [bp + 6], @10993$string_X2#	; 5: 199 70 6 231 80

file_test$261:	; Assign targetFile string_Y2#
x15683:	mov word [bp + 8], @10995$string_Y2#	; 5: 199 70 8 234 80

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 sourceFile 6
x15688:	mov ax, [bp + 6]	; 3: 139 70 6
x15691:	mov [bp + 16], ax	; 3: 137 70 16

file_test$264:	; Parameter 10 targetFile 8
x15694:	mov ax, [bp + 8]	; 3: 139 70 8
x15697:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; Call 10 rename 0
x15700:	mov word [bp + 10], file_test$266	; 5: 199 70 10 98 61
x15705:	mov [bp + 12], bp	; 3: 137 110 12
x15708:	add bp, 10	; 3: 131 197 10
x15711:	jmp rename	; 3: 233 206 53

file_test$266:	; PostCall 10

file_test$267:	; GetReturnValue £temporary5101

file_test$268:	; NotEqual 276 £temporary5101 0
x15714:	cmp bx, 0	; 3: 131 251 0
x15717:	jne file_test$276	; 2: 117 38

file_test$269:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$270:	; Parameter 10 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15719:	mov word [bp + 16], @11001$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 16 237 80

file_test$271:	; Parameter 10 sourceFile 8
x15724:	mov ax, [bp + 6]	; 3: 139 70 6
x15727:	mov [bp + 18], ax	; 3: 137 70 18

file_test$272:	; Parameter 10 targetFile 10
x15730:	mov ax, [bp + 8]	; 3: 139 70 8
x15733:	mov [bp + 20], ax	; 3: 137 70 20

file_test$273:	; Call 10 printf 0
x15736:	mov word [bp + 10], file_test$274	; 5: 199 70 10 139 61
x15741:	mov [bp + 12], bp	; 3: 137 110 12
x15744:	add bp, 10	; 3: 131 197 10
x15747:	mov di, bp	; 2: 137 239
x15749:	add di, 4	; 3: 131 199 4
x15752:	jmp printf	; 3: 233 121 207

file_test$274:	; PostCall 10

file_test$275:	; Goto 289
x15755:	jmp file_test$289	; 2: 235 65

file_test$276:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$277:	; Parameter 10 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15757:	mov word [bp + 16], @11003$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 16 13 81

file_test$278:	; Parameter 10 sourceFile 8
x15762:	mov ax, [bp + 6]	; 3: 139 70 6
x15765:	mov [bp + 18], ax	; 3: 137 70 18

file_test$279:	; Parameter 10 targetFile 10
x15768:	mov ax, [bp + 8]	; 3: 139 70 8
x15771:	mov [bp + 20], ax	; 3: 137 70 20

file_test$280:	; Parameter 10 errno 12
x15774:	mov ax, [errno]	; 3: 161 230 10
x15777:	mov [bp + 22], ax	; 3: 137 70 22

file_test$281:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 10 errno 20
x15780:	mov ax, [errno]	; 3: 161 230 10
x15783:	mov [bp + 30], ax	; 3: 137 70 30

file_test$283:	; Call 10 strerror 14
x15786:	mov word [bp + 24], file_test$284	; 5: 199 70 24 184 61
x15791:	mov [bp + 26], bp	; 3: 137 110 26
x15794:	add bp, 24	; 3: 131 197 24
x15797:	jmp strerror	; 3: 233 102 246

file_test$284:	; PostCall 10

file_test$285:	; GetReturnValue £temporary5104

file_test$286:	; Parameter 10 £temporary5104 14
x15800:	mov [bp + 24], bx	; 3: 137 94 24

file_test$287:	; Call 10 printf 0
x15803:	mov word [bp + 10], file_test$288	; 5: 199 70 10 206 61
x15808:	mov [bp + 12], bp	; 3: 137 110 12
x15811:	add bp, 10	; 3: 131 197 10
x15814:	mov di, bp	; 2: 137 239
x15816:	add di, 8	; 3: 131 199 8
x15819:	jmp printf	; 3: 233 54 207

file_test$288:	; PostCall 10

file_test$289:	; Assign targetFile string_Z#
x15822:	mov word [bp + 6], @11006$string_Z#	; 5: 199 70 6 38 81

file_test$290:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$291:	; Parameter 8 targetFile 6
x15827:	mov ax, [bp + 6]	; 3: 139 70 6
x15830:	mov [bp + 14], ax	; 3: 137 70 14

file_test$292:	; Parameter 8 string_w# 8
x15833:	mov word [bp + 16], @11008$string_w#	; 5: 199 70 16 40 81

file_test$293:	; Call 8 fopen 0
x15838:	mov word [bp + 8], file_test$294	; 5: 199 70 8 236 61
x15843:	mov [bp + 10], bp	; 3: 137 110 10
x15846:	add bp, 8	; 3: 131 197 8
x15849:	jmp fopen	; 3: 233 172 28

file_test$294:	; PostCall 8

file_test$295:	; GetReturnValue £temporary5106

file_test$296:	; Assign filePtr £temporary5106
x15852:	mov [bp + 8], bx	; 3: 137 94 8

file_test$297:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$298:	; Parameter 10 filePtr 6
x15855:	mov ax, [bp + 8]	; 3: 139 70 8
x15858:	mov [bp + 16], ax	; 3: 137 70 16

file_test$299:	; Parameter 10 string_Hello20Z# 8
x15861:	mov word [bp + 18], @11011$string_Hello20Z#	; 5: 199 70 18 42 81

file_test$300:	; Call 10 fprintf 0
x15866:	mov word [bp + 10], file_test$301	; 5: 199 70 10 10 62
x15871:	mov [bp + 12], bp	; 3: 137 110 12
x15874:	add bp, 10	; 3: 131 197 10
x15877:	mov di, bp	; 2: 137 239
x15879:	jmp fprintf	; 3: 233 38 33

file_test$301:	; PostCall 10

file_test$302:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$303:	; Parameter 10 filePtr 6
x15882:	mov ax, [bp + 8]	; 3: 139 70 8
x15885:	mov [bp + 16], ax	; 3: 137 70 16

file_test$304:	; Call 10 fclose 0
x15888:	mov word [bp + 10], file_test$305	; 5: 199 70 10 30 62
x15893:	mov [bp + 12], bp	; 3: 137 110 12
x15896:	add bp, 10	; 3: 131 197 10
x15899:	jmp fclose	; 3: 233 34 52

file_test$305:	; PostCall 10

file_test$306:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$307:	; Parameter 10 targetFile 6
x15902:	mov ax, [bp + 6]	; 3: 139 70 6
x15905:	mov [bp + 16], ax	; 3: 137 70 16

file_test$308:	; Call 10 remove 0
x15908:	mov word [bp + 10], file_test$309	; 5: 199 70 10 50 62
x15913:	mov [bp + 12], bp	; 3: 137 110 12
x15916:	add bp, 10	; 3: 131 197 10
x15919:	jmp remove	; 3: 233 209 52

file_test$309:	; PostCall 10

file_test$310:	; GetReturnValue £temporary5109

file_test$311:	; NotEqual 318 £temporary5109 0
x15922:	cmp bx, 0	; 3: 131 251 0
x15925:	jne file_test$318	; 2: 117 32

file_test$312:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$313:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15927:	mov word [bp + 16], @11018$string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 50 81

file_test$314:	; Parameter 10 targetFile 8
x15932:	mov ax, [bp + 6]	; 3: 139 70 6
x15935:	mov [bp + 18], ax	; 3: 137 70 18

file_test$315:	; Call 10 printf 0
x15938:	mov word [bp + 10], file_test$316	; 5: 199 70 10 85 62
x15943:	mov [bp + 12], bp	; 3: 137 110 12
x15946:	add bp, 10	; 3: 131 197 10
x15949:	mov di, bp	; 2: 137 239
x15951:	add di, 2	; 3: 131 199 2
x15954:	jmp printf	; 3: 233 175 206

file_test$316:	; PostCall 10

file_test$317:	; Goto 330
x15957:	jmp file_test$330	; 2: 235 59

file_test$318:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 10 string_Error202225s222025i3A2025s2E0A# 6
x15959:	mov word [bp + 16], @11020$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 16 74 81

file_test$320:	; Parameter 10 targetFile 8
x15964:	mov ax, [bp + 6]	; 3: 139 70 6
x15967:	mov [bp + 18], ax	; 3: 137 70 18

file_test$321:	; Parameter 10 errno 10
x15970:	mov ax, [errno]	; 3: 161 230 10
x15973:	mov [bp + 20], ax	; 3: 137 70 20

file_test$322:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$323:	; Parameter 10 errno 18
x15976:	mov ax, [errno]	; 3: 161 230 10
x15979:	mov [bp + 28], ax	; 3: 137 70 28

file_test$324:	; Call 10 strerror 12
x15982:	mov word [bp + 22], file_test$325	; 5: 199 70 22 124 62
x15987:	mov [bp + 24], bp	; 3: 137 110 24
x15990:	add bp, 22	; 3: 131 197 22
x15993:	jmp strerror	; 3: 233 162 245

file_test$325:	; PostCall 10

file_test$326:	; GetReturnValue £temporary5112

file_test$327:	; Parameter 10 £temporary5112 12
x15996:	mov [bp + 22], bx	; 3: 137 94 22

file_test$328:	; Call 10 printf 0
x15999:	mov word [bp + 10], file_test$329	; 5: 199 70 10 146 62
x16004:	mov [bp + 12], bp	; 3: 137 110 12
x16007:	add bp, 10	; 3: 131 197 10
x16010:	mov di, bp	; 2: 137 239
x16012:	add di, 6	; 3: 131 199 6
x16015:	jmp printf	; 3: 233 114 206

file_test$329:	; PostCall 10

file_test$330:	; Assign targetFile string_Z2#
x16018:	mov word [bp + 6], @11023$string_Z2#	; 5: 199 70 6 94 81

file_test$331:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$332:	; Parameter 8 targetFile 6
x16023:	mov ax, [bp + 6]	; 3: 139 70 6
x16026:	mov [bp + 14], ax	; 3: 137 70 14

file_test$333:	; Call 8 remove 0
x16029:	mov word [bp + 8], file_test$334	; 5: 199 70 8 171 62
x16034:	mov [bp + 10], bp	; 3: 137 110 10
x16037:	add bp, 8	; 3: 131 197 8
x16040:	jmp remove	; 3: 233 88 52

file_test$334:	; PostCall 8

file_test$335:	; GetReturnValue £temporary5114

file_test$336:	; NotEqual 343 £temporary5114 0
x16043:	cmp bx, 0	; 3: 131 251 0
x16046:	jne file_test$343	; 2: 117 32

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 string_2225s2220has20been20removed2E0A# 6
x16048:	mov word [bp + 14], @11029$string_2225s2220has20been20removed2E0A#	; 5: 199 70 14 97 81

file_test$339:	; Parameter 8 targetFile 8
x16053:	mov ax, [bp + 6]	; 3: 139 70 6
x16056:	mov [bp + 16], ax	; 3: 137 70 16

file_test$340:	; Call 8 printf 0
x16059:	mov word [bp + 8], file_test$341	; 5: 199 70 8 206 62
x16064:	mov [bp + 10], bp	; 3: 137 110 10
x16067:	add bp, 8	; 3: 131 197 8
x16070:	mov di, bp	; 2: 137 239
x16072:	add di, 2	; 3: 131 199 2
x16075:	jmp printf	; 3: 233 54 206

file_test$341:	; PostCall 8

file_test$342:	; Goto 355
x16078:	jmp file_test$355	; 2: 235 59

file_test$343:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$344:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x16080:	mov word [bp + 14], @11031$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 121 81

file_test$345:	; Parameter 8 targetFile 8
x16085:	mov ax, [bp + 6]	; 3: 139 70 6
x16088:	mov [bp + 16], ax	; 3: 137 70 16

file_test$346:	; Parameter 8 errno 10
x16091:	mov ax, [errno]	; 3: 161 230 10
x16094:	mov [bp + 18], ax	; 3: 137 70 18

file_test$347:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$348:	; Parameter 8 errno 18
x16097:	mov ax, [errno]	; 3: 161 230 10
x16100:	mov [bp + 26], ax	; 3: 137 70 26

file_test$349:	; Call 8 strerror 12
x16103:	mov word [bp + 20], file_test$350	; 5: 199 70 20 245 62
x16108:	mov [bp + 22], bp	; 3: 137 110 22
x16111:	add bp, 20	; 3: 131 197 20
x16114:	jmp strerror	; 3: 233 41 245

file_test$350:	; PostCall 8

file_test$351:	; GetReturnValue £temporary5117

file_test$352:	; Parameter 8 £temporary5117 12
x16117:	mov [bp + 20], bx	; 3: 137 94 20

file_test$353:	; Call 8 printf 0
x16120:	mov word [bp + 8], file_test$354	; 5: 199 70 8 11 63
x16125:	mov [bp + 10], bp	; 3: 137 110 10
x16128:	add bp, 8	; 3: 131 197 8
x16131:	mov di, bp	; 2: 137 239
x16133:	add di, 6	; 3: 131 199 6
x16136:	jmp printf	; 3: 233 249 205

file_test$354:	; PostCall 8

file_test$355:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$356:	; Parameter 6 string_PBook2Etxt# 6
x16139:	mov word [bp + 12], @11034$string_PBook2Etxt#	; 5: 199 70 12 141 81

file_test$357:	; Parameter 6 string_r# 8
x16144:	mov word [bp + 14], @11035$string_r#	; 5: 199 70 14 151 81

file_test$358:	; Call 6 fopen 0
x16149:	mov word [bp + 6], file_test$359	; 5: 199 70 6 35 63
x16154:	mov [bp + 8], bp	; 3: 137 110 8
x16157:	add bp, 6	; 3: 131 197 6
x16160:	jmp fopen	; 3: 233 117 27

file_test$359:	; PostCall 6

file_test$360:	; GetReturnValue £temporary5119

file_test$361:	; Assign inFilePtr £temporary5119
x16163:	mov [bp + 6], bx	; 3: 137 94 6

file_test$362:	; NotEqual 374 inFilePtr 0
x16166:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16170:	jne file_test$374	; 2: 117 59

file_test$363:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$364:	; Parameter 8 stderr 6
x16172:	mov ax, [stderr]	; 3: 161 24 78
x16175:	mov [bp + 14], ax	; 3: 137 70 14

file_test$365:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16178:	mov word [bp + 16], @11043$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 153 81

file_test$366:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16183:	mov word [bp + 18], @11044$string_inFilePtr20213D20NULL#	; 5: 199 70 18 199 81

file_test$367:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16188:	mov word [bp + 20], @11045$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 217 81

file_test$368:	; Parameter 8 119 14
x16193:	mov word [bp + 22], 119	; 5: 199 70 22 119 0

file_test$369:	; Call 8 fprintf 0
x16198:	mov word [bp + 8], file_test$370	; 5: 199 70 8 89 63
x16203:	mov [bp + 10], bp	; 3: 137 110 10
x16206:	add bp, 8	; 3: 131 197 8
x16209:	mov di, bp	; 2: 137 239
x16211:	add di, 6	; 3: 131 199 6
x16214:	jmp fprintf	; 3: 233 215 31

file_test$370:	; PostCall 8

file_test$371:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$372:	; Call 8 abort 0
x16217:	mov word [bp + 8], file_test$373	; 5: 199 70 8 103 63
x16222:	mov [bp + 10], bp	; 3: 137 110 10
x16225:	add bp, 8	; 3: 131 197 8
x16228:	jmp abort	; 3: 233 4 32

file_test$373:	; PostCall 8

file_test$374:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x16231:	mov word [bp + 14], @11049$string_0A252D24s20252D24s0A#	; 5: 199 70 14 26 82

file_test$376:	; Parameter 8 string_Name# 8
x16236:	mov word [bp + 16], @11050$string_Name#	; 5: 199 70 16 40 82

file_test$377:	; Parameter 8 string_Phone# 10
x16241:	mov word [bp + 18], @11051$string_Phone#	; 5: 199 70 18 45 82

file_test$378:	; Call 8 printf 0
x16246:	mov word [bp + 8], file_test$379	; 5: 199 70 8 137 63
x16251:	mov [bp + 10], bp	; 3: 137 110 10
x16254:	add bp, 8	; 3: 131 197 8
x16257:	mov di, bp	; 2: 137 239
x16259:	add di, 4	; 3: 131 199 4
x16262:	jmp printf	; 3: 233 123 205

file_test$379:	; PostCall 8

file_test$380:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$381:	; Parameter 8 string_252D24s20252D24s0A# 6
x16265:	mov word [bp + 14], @11053$string_252D24s20252D24s0A#	; 5: 199 70 14 51 82

file_test$382:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x16270:	mov word [bp + 16], @11054$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 64 82

file_test$383:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x16275:	mov word [bp + 18], @11055$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 89 82

file_test$384:	; Call 8 printf 0
x16280:	mov word [bp + 8], file_test$385	; 5: 199 70 8 171 63
x16285:	mov [bp + 10], bp	; 3: 137 110 10
x16288:	add bp, 8	; 3: 131 197 8
x16291:	mov di, bp	; 2: 137 239
x16293:	add di, 4	; 3: 131 199 4
x16296:	jmp printf	; 3: 233 89 205

file_test$385:	; PostCall 8

file_test$386:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$387:	; Parameter 12 inFilePtr 6
x16299:	mov ax, [bp + 6]	; 3: 139 70 6
x16302:	mov [bp + 18], ax	; 3: 137 70 18

file_test$388:	; Parameter 12 string_25i# 8
x16305:	mov word [bp + 20], @11059$string_25i#	; 5: 199 70 20 114 82

file_test$389:	; address £temporary5126 size
x16310:	mov si, bp	; 2: 137 238
x16312:	add si, 10	; 3: 131 198 10

file_test$390:	; Parameter 12 £temporary5126 10
x16315:	mov [bp + 22], si	; 3: 137 118 22

file_test$391:	; Call 12 fscanf 0
x16318:	mov word [bp + 12], file_test$392	; 5: 199 70 12 209 63
x16323:	mov [bp + 14], bp	; 3: 137 110 14
x16326:	add bp, 12	; 3: 131 197 12
x16329:	mov di, bp	; 2: 137 239
x16331:	add di, 2	; 3: 131 199 2
x16334:	jmp fscanf	; 3: 233 64 32

file_test$392:	; PostCall 12

file_test$393:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$394:	; Parameter 12 string_size2025i0A# 6
x16337:	mov word [bp + 18], @11062$string_size2025i0A#	; 5: 199 70 18 117 82

file_test$395:	; Parameter 12 size 8
x16342:	mov ax, [bp + 10]	; 3: 139 70 10
x16345:	mov [bp + 20], ax	; 3: 137 70 20

file_test$396:	; Call 12 printf 0
x16348:	mov word [bp + 12], file_test$397	; 5: 199 70 12 239 63
x16353:	mov [bp + 14], bp	; 3: 137 110 14
x16356:	add bp, 12	; 3: 131 197 12
x16359:	mov di, bp	; 2: 137 239
x16361:	add di, 2	; 3: 131 199 2
x16364:	jmp printf	; 3: 233 21 205

file_test$397:	; PostCall 12

file_test$398:	; Assign count 0
x16367:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$399:	; SignedGreaterThanEqual 415 count size
x16372:	mov ax, [bp + 10]	; 3: 139 70 10
x16375:	cmp [bp + 8], ax	; 3: 57 70 8
x16378:	jge file_test$415	; 2: 125 87

file_test$400:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$401:	; Parameter 52 inFilePtr 6
x16380:	mov ax, [bp + 6]	; 3: 139 70 6
x16383:	mov [bp + 58], ax	; 3: 137 70 58

file_test$402:	; Parameter 52 string_25s25s# 8
x16386:	mov word [bp + 60], @11075$string_25s25s#	; 5: 199 70 60 126 82

file_test$403:	; Parameter 52 name 10
x16391:	mov [bp + 62], bp	; 3: 137 110 62
x16394:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$404:	; Parameter 52 phone 12
x16398:	mov [bp + 64], bp	; 3: 137 110 64
x16401:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$405:	; Call 52 fscanf 0
x16405:	mov word [bp + 52], file_test$406	; 5: 199 70 52 40 64
x16410:	mov [bp + 54], bp	; 3: 137 110 54
x16413:	add bp, 52	; 3: 131 197 52
x16416:	mov di, bp	; 2: 137 239
x16418:	add di, 4	; 3: 131 199 4
x16421:	jmp fscanf	; 3: 233 233 31

file_test$406:	; PostCall 52

file_test$407:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; Parameter 52 string_252D24s20252D24s0A# 6
x16424:	mov word [bp + 58], @11077$string_252D24s20252D24s0A#	; 5: 199 70 58 131 82

file_test$409:	; Parameter 52 name 8
x16429:	mov [bp + 60], bp	; 3: 137 110 60
x16432:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$410:	; Parameter 52 phone 10
x16436:	mov [bp + 62], bp	; 3: 137 110 62
x16439:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$411:	; Call 52 printf 0
x16443:	mov word [bp + 52], file_test$412	; 5: 199 70 52 78 64
x16448:	mov [bp + 54], bp	; 3: 137 110 54
x16451:	add bp, 52	; 3: 131 197 52
x16454:	mov di, bp	; 2: 137 239
x16456:	add di, 4	; 3: 131 199 4
x16459:	jmp printf	; 3: 233 182 204

file_test$412:	; PostCall 52

file_test$413:	; Increment count
x16462:	inc word [bp + 8]	; 3: 255 70 8

file_test$414:	; Goto 399
x16465:	jmp file_test$399	; 2: 235 161

file_test$415:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 8 string_0A# 6
x16467:	mov word [bp + 14], @11079$string_0A#	; 5: 199 70 14 144 82

file_test$417:	; Call 8 printf 0
x16472:	mov word [bp + 8], file_test$418	; 5: 199 70 8 104 64
x16477:	mov [bp + 10], bp	; 3: 137 110 10
x16480:	add bp, 8	; 3: 131 197 8
x16483:	mov di, bp	; 2: 137 239
x16485:	jmp printf	; 3: 233 156 204

file_test$418:	; PostCall 8

file_test$419:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$420:	; Parameter 8 inFilePtr 6
x16488:	mov ax, [bp + 6]	; 3: 139 70 6
x16491:	mov [bp + 14], ax	; 3: 137 70 14

file_test$421:	; Call 8 fclose 0
x16494:	mov word [bp + 8], file_test$422	; 5: 199 70 8 124 64
x16499:	mov [bp + 10], bp	; 3: 137 110 10
x16502:	add bp, 8	; 3: 131 197 8
x16505:	jmp fclose	; 3: 233 196 49

file_test$422:	; PostCall 8

file_test$423:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$424:	; Parameter 6 string_TestX2Ebin# 6
x16508:	mov word [bp + 12], @11082$string_TestX2Ebin#	; 5: 199 70 12 146 82

file_test$425:	; Parameter 6 string_w# 8
x16513:	mov word [bp + 14], @11083$string_w#	; 5: 199 70 14 156 82

file_test$426:	; Call 6 fopen 0
x16518:	mov word [bp + 6], file_test$427	; 5: 199 70 6 148 64
x16523:	mov [bp + 8], bp	; 3: 137 110 8
x16526:	add bp, 6	; 3: 131 197 6
x16529:	jmp fopen	; 3: 233 4 26

file_test$427:	; PostCall 6

file_test$428:	; GetReturnValue £temporary5135

file_test$429:	; Assign outFilePtr £temporary5135
x16532:	mov [bp + 6], bx	; 3: 137 94 6

file_test$430:	; NotEqual 442 outFilePtr 0
x16535:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16539:	jne file_test$442	; 2: 117 59

file_test$431:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$432:	; Parameter 8 stderr 6
x16541:	mov ax, [stderr]	; 3: 161 24 78
x16544:	mov [bp + 14], ax	; 3: 137 70 14

file_test$433:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16547:	mov word [bp + 16], @11091$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 158 82

file_test$434:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16552:	mov word [bp + 18], @11092$string_outFilePtr20213D20NULL#	; 5: 199 70 18 204 82

file_test$435:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16557:	mov word [bp + 20], @11093$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 223 82

file_test$436:	; Parameter 8 171 14
x16562:	mov word [bp + 22], 171	; 5: 199 70 22 171 0

file_test$437:	; Call 8 fprintf 0
x16567:	mov word [bp + 8], file_test$438	; 5: 199 70 8 202 64
x16572:	mov [bp + 10], bp	; 3: 137 110 10
x16575:	add bp, 8	; 3: 131 197 8
x16578:	mov di, bp	; 2: 137 239
x16580:	add di, 6	; 3: 131 199 6
x16583:	jmp fprintf	; 3: 233 102 30

file_test$438:	; PostCall 8

file_test$439:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Call 8 abort 0
x16586:	mov word [bp + 8], file_test$441	; 5: 199 70 8 216 64
x16591:	mov [bp + 10], bp	; 3: 137 110 10
x16594:	add bp, 8	; 3: 131 197 8
x16597:	jmp abort	; 3: 233 147 30

file_test$441:	; PostCall 8

file_test$442:	; Assign size 10
x16600:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; address £temporary5140 size
x16605:	mov si, bp	; 2: 137 238
x16607:	add si, 8	; 3: 131 198 8

file_test$445:	; Parameter 12 £temporary5140 6
x16610:	mov [bp + 18], si	; 3: 137 118 18

file_test$446:	; Parameter 12 2 8
x16613:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$447:	; Parameter 12 1 10
x16618:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$448:	; Parameter 12 outFilePtr 12
x16623:	mov ax, [bp + 6]	; 3: 139 70 6
x16626:	mov [bp + 24], ax	; 3: 137 70 24

file_test$449:	; Call 12 fwrite 0
x16629:	mov word [bp + 12], file_test$450	; 5: 199 70 12 3 65
x16634:	mov [bp + 14], bp	; 3: 137 110 14
x16637:	add bp, 12	; 3: 131 197 12
x16640:	jmp fwrite	; 3: 233 93 50

file_test$450:	; PostCall 12

file_test$451:	; Assign index 0
x16643:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$452:	; SignedGreaterThanEqual 466 index size
x16648:	mov ax, [bp + 8]	; 3: 139 70 8
x16651:	cmp [bp + 10], ax	; 3: 57 70 10
x16654:	jge file_test$466	; 2: 125 61

file_test$453:	; SignedMultiply £temporary5144 index index
x16656:	mov ax, [bp + 10]	; 3: 139 70 10
x16659:	xor dx, dx	; 2: 49 210
x16661:	imul word [bp + 10]	; 3: 247 110 10

file_test$454:	; IntegralToFloating £temporary5145 £temporary5144
x16664:	mov [container2bytes#], ax	; 3: 163 79 27
x16667:	fild word [container2bytes#]	; 4: 223 6 79 27

file_test$455:	; PopFloat value
x16671:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$456:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$457:	; address £temporary5146 value
x16674:	mov si, bp	; 2: 137 238
x16676:	add si, 12	; 3: 131 198 12

file_test$458:	; Parameter 20 £temporary5146 6
x16679:	mov [bp + 26], si	; 3: 137 118 26

file_test$459:	; Parameter 20 8 8
x16682:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$460:	; Parameter 20 1 10
x16687:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$461:	; Parameter 20 outFilePtr 12
x16692:	mov ax, [bp + 6]	; 3: 139 70 6
x16695:	mov [bp + 32], ax	; 3: 137 70 32

file_test$462:	; Call 20 fwrite 0
x16698:	mov word [bp + 20], file_test$463	; 5: 199 70 20 72 65
x16703:	mov [bp + 22], bp	; 3: 137 110 22
x16706:	add bp, 20	; 3: 131 197 20
x16709:	jmp fwrite	; 3: 233 24 50

file_test$463:	; PostCall 20

file_test$464:	; Increment index
x16712:	inc word [bp + 10]	; 3: 255 70 10

file_test$465:	; Goto 452
x16715:	jmp file_test$452	; 2: 235 187

file_test$466:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$467:	; Parameter 12 outFilePtr 6
x16717:	mov ax, [bp + 6]	; 3: 139 70 6
x16720:	mov [bp + 18], ax	; 3: 137 70 18

file_test$468:	; Call 12 fclose 0
x16723:	mov word [bp + 12], file_test$469	; 5: 199 70 12 97 65
x16728:	mov [bp + 14], bp	; 3: 137 110 14
x16731:	add bp, 12	; 3: 131 197 12
x16734:	jmp fclose	; 3: 233 223 48

file_test$469:	; PostCall 12

file_test$470:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$471:	; Parameter 6 string_TestX2Ebin# 6
x16737:	mov word [bp + 12], @11122$string_TestX2Ebin#	; 5: 199 70 12 32 83

file_test$472:	; Parameter 6 string_r# 8
x16742:	mov word [bp + 14], @11123$string_r#	; 5: 199 70 14 42 83

file_test$473:	; Call 6 fopen 0
x16747:	mov word [bp + 6], file_test$474	; 5: 199 70 6 121 65
x16752:	mov [bp + 8], bp	; 3: 137 110 8
x16755:	add bp, 6	; 3: 131 197 6
x16758:	jmp fopen	; 3: 233 31 25

file_test$474:	; PostCall 6

file_test$475:	; GetReturnValue £temporary5149

file_test$476:	; Assign inFilePtr £temporary5149
x16761:	mov [bp + 6], bx	; 3: 137 94 6

file_test$477:	; NotEqual 489 inFilePtr 0
x16764:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16768:	jne file_test$489	; 2: 117 59

file_test$478:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$479:	; Parameter 12 stderr 6
x16770:	mov ax, [stderr]	; 3: 161 24 78
x16773:	mov [bp + 18], ax	; 3: 137 70 18

file_test$480:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16776:	mov word [bp + 20], @11133$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 44 83

file_test$481:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16781:	mov word [bp + 22], @11134$string_inFilePtr20213D20NULL#	; 5: 199 70 22 90 83

file_test$482:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16786:	mov word [bp + 24], @11135$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 108 83

file_test$483:	; Parameter 12 188 14
x16791:	mov word [bp + 26], 188	; 5: 199 70 26 188 0

file_test$484:	; Call 12 fprintf 0
x16796:	mov word [bp + 12], file_test$485	; 5: 199 70 12 175 65
x16801:	mov [bp + 14], bp	; 3: 137 110 14
x16804:	add bp, 12	; 3: 131 197 12
x16807:	mov di, bp	; 2: 137 239
x16809:	add di, 6	; 3: 131 199 6
x16812:	jmp fprintf	; 3: 233 129 29

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Call 12 abort 0
x16815:	mov word [bp + 12], file_test$488	; 5: 199 70 12 189 65
x16820:	mov [bp + 14], bp	; 3: 137 110 14
x16823:	add bp, 12	; 3: 131 197 12
x16826:	jmp abort	; 3: 233 174 29

file_test$488:	; PostCall 12

file_test$489:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$490:	; address £temporary5154 size
x16829:	mov si, bp	; 2: 137 238
x16831:	add si, 8	; 3: 131 198 8

file_test$491:	; Parameter 12 £temporary5154 6
x16834:	mov [bp + 18], si	; 3: 137 118 18

file_test$492:	; Parameter 12 2 8
x16837:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$493:	; Parameter 12 1 10
x16842:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$494:	; Parameter 12 inFilePtr 12
x16847:	mov ax, [bp + 6]	; 3: 139 70 6
x16850:	mov [bp + 24], ax	; 3: 137 70 24

file_test$495:	; Call 12 fread 0
x16853:	mov word [bp + 12], file_test$496	; 5: 199 70 12 227 65
x16858:	mov [bp + 14], bp	; 3: 137 110 14
x16861:	add bp, 12	; 3: 131 197 12
x16864:	jmp fread	; 3: 233 192 49

file_test$496:	; PostCall 12

file_test$497:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$498:	; Parameter 12 string_size13A2025i0A# 6
x16867:	mov word [bp + 18], @11145$string_size13A2025i0A#	; 5: 199 70 18 173 83

file_test$499:	; Parameter 12 size 8
x16872:	mov ax, [bp + 8]	; 3: 139 70 8
x16875:	mov [bp + 20], ax	; 3: 137 70 20

file_test$500:	; Call 12 printf 0
x16878:	mov word [bp + 12], file_test$501	; 5: 199 70 12 1 66
x16883:	mov [bp + 14], bp	; 3: 137 110 14
x16886:	add bp, 12	; 3: 131 197 12
x16889:	mov di, bp	; 2: 137 239
x16891:	add di, 2	; 3: 131 199 2
x16894:	jmp printf	; 3: 233 3 203

file_test$501:	; PostCall 12

file_test$502:	; Assign index 0
x16897:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$503:	; SignedGreaterThanEqual 521 index size
x16902:	mov ax, [bp + 8]	; 3: 139 70 8
x16905:	cmp [bp + 10], ax	; 3: 57 70 10
x16908:	jge file_test$521	; 2: 125 79

file_test$504:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$505:	; address £temporary5159 value
x16910:	mov si, bp	; 2: 137 238
x16912:	add si, 12	; 3: 131 198 12

file_test$506:	; Parameter 20 £temporary5159 6
x16915:	mov [bp + 26], si	; 3: 137 118 26

file_test$507:	; Parameter 20 8 8
x16918:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$508:	; Parameter 20 1 10
x16923:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$509:	; Parameter 20 inFilePtr 12
x16928:	mov ax, [bp + 6]	; 3: 139 70 6
x16931:	mov [bp + 32], ax	; 3: 137 70 32

file_test$510:	; Call 20 fread 0
x16934:	mov word [bp + 20], file_test$511	; 5: 199 70 20 52 66
x16939:	mov [bp + 22], bp	; 3: 137 110 22
x16942:	add bp, 20	; 3: 131 197 20
x16945:	jmp fread	; 3: 233 111 49

file_test$511:	; PostCall 20

file_test$512:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$513:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16948:	mov word [bp + 26], @11159$string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 184 83

file_test$514:	; Parameter 20 index 8
x16953:	mov ax, [bp + 10]	; 3: 139 70 10
x16956:	mov [bp + 28], ax	; 3: 137 70 28

file_test$515:	; PushFloat value
x16959:	fld qword [bp + 12]	; 3: 221 70 12

file_test$516:	; Parameter 20 value 10
x16962:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$517:	; Call 20 printf 0
x16965:	mov word [bp + 20], file_test$518	; 5: 199 70 20 88 66
x16970:	mov [bp + 22], bp	; 3: 137 110 22
x16973:	add bp, 20	; 3: 131 197 20
x16976:	mov di, bp	; 2: 137 239
x16978:	add di, 10	; 3: 131 199 10
x16981:	jmp printf	; 3: 233 172 202

file_test$518:	; PostCall 20

file_test$519:	; Increment index
x16984:	inc word [bp + 10]	; 3: 255 70 10

file_test$520:	; Goto 503
x16987:	jmp file_test$503	; 2: 235 169

file_test$521:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$522:	; Parameter 12 string_0A# 6
x16989:	mov word [bp + 18], @11161$string_0A#	; 5: 199 70 18 206 83

file_test$523:	; Call 12 printf 0
x16994:	mov word [bp + 12], file_test$524	; 5: 199 70 12 114 66
x16999:	mov [bp + 14], bp	; 3: 137 110 14
x17002:	add bp, 12	; 3: 131 197 12
x17005:	mov di, bp	; 2: 137 239
x17007:	jmp printf	; 3: 233 146 202

file_test$524:	; PostCall 12

file_test$525:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$526:	; Parameter 12 inFilePtr 6
x17010:	mov ax, [bp + 6]	; 3: 139 70 6
x17013:	mov [bp + 18], ax	; 3: 137 70 18

file_test$527:	; Call 12 fclose 0
x17016:	mov word [bp + 12], file_test$528	; 5: 199 70 12 134 66
x17021:	mov [bp + 14], bp	; 3: 137 110 14
x17024:	add bp, 12	; 3: 131 197 12
x17027:	jmp fclose	; 3: 233 186 47

file_test$528:	; PostCall 12

file_test$529:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$530:	; Parameter 6 string_TestY2Ebin# 6
x17030:	mov word [bp + 12], @11164$string_TestY2Ebin#	; 5: 199 70 12 208 83

file_test$531:	; Parameter 6 string_w# 8
x17035:	mov word [bp + 14], @11165$string_w#	; 5: 199 70 14 218 83

file_test$532:	; Call 6 fopen 0
x17040:	mov word [bp + 6], file_test$533	; 5: 199 70 6 158 66
x17045:	mov [bp + 8], bp	; 3: 137 110 8
x17048:	add bp, 6	; 3: 131 197 6
x17051:	jmp fopen	; 3: 233 250 23

file_test$533:	; PostCall 6

file_test$534:	; GetReturnValue £temporary5164

file_test$535:	; Assign outFilePtr £temporary5164
x17054:	mov [bp + 6], bx	; 3: 137 94 6

file_test$536:	; NotEqual 548 outFilePtr 0
x17057:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17061:	jne file_test$548	; 2: 117 59

file_test$537:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$538:	; Parameter 8 stderr 6
x17063:	mov ax, [stderr]	; 3: 161 24 78
x17066:	mov [bp + 14], ax	; 3: 137 70 14

file_test$539:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17069:	mov word [bp + 16], @11173$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 220 83

file_test$540:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x17074:	mov word [bp + 18], @11174$string_outFilePtr20213D20NULL#	; 5: 199 70 18 10 84

file_test$541:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17079:	mov word [bp + 20], @11175$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 29 84

file_test$542:	; Parameter 8 203 14
x17084:	mov word [bp + 22], 203	; 5: 199 70 22 203 0

file_test$543:	; Call 8 fprintf 0
x17089:	mov word [bp + 8], file_test$544	; 5: 199 70 8 212 66
x17094:	mov [bp + 10], bp	; 3: 137 110 10
x17097:	add bp, 8	; 3: 131 197 8
x17100:	mov di, bp	; 2: 137 239
x17102:	add di, 6	; 3: 131 199 6
x17105:	jmp fprintf	; 3: 233 92 28

file_test$544:	; PostCall 8

file_test$545:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$546:	; Call 8 abort 0
x17108:	mov word [bp + 8], file_test$547	; 5: 199 70 8 226 66
x17113:	mov [bp + 10], bp	; 3: 137 110 10
x17116:	add bp, 8	; 3: 131 197 8
x17119:	jmp abort	; 3: 233 137 28

file_test$547:	; PostCall 8

file_test$548:	; Assign size 10
x17122:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$549:	; Assign index 0
x17127:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$550:	; SignedGreaterThanEqual 564 index size
x17132:	mov ax, [bp + 8]	; 3: 139 70 8
x17135:	cmp [bp + 10], ax	; 3: 57 70 10
x17138:	jge file_test$564	; 2: 125 61

file_test$551:	; SignedMultiply £temporary5171 index index
x17140:	mov ax, [bp + 10]	; 3: 139 70 10
x17143:	xor dx, dx	; 2: 49 210
x17145:	imul word [bp + 10]	; 3: 247 110 10

file_test$552:	; IntegralToFloating £temporary5172 £temporary5171
x17148:	mov [container2bytes#], ax	; 3: 163 79 27
x17151:	fild word [container2bytes#]	; 4: 223 6 79 27

file_test$553:	; PopFloat value
x17155:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$554:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; address £temporary5173 value
x17158:	mov si, bp	; 2: 137 238
x17160:	add si, 12	; 3: 131 198 12

file_test$556:	; Parameter 20 £temporary5173 6
x17163:	mov [bp + 26], si	; 3: 137 118 26

file_test$557:	; Parameter 20 8 8
x17166:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$558:	; Parameter 20 1 10
x17171:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$559:	; Parameter 20 outFilePtr 12
x17176:	mov ax, [bp + 6]	; 3: 139 70 6
x17179:	mov [bp + 32], ax	; 3: 137 70 32

file_test$560:	; Call 20 fwrite 0
x17182:	mov word [bp + 20], file_test$561	; 5: 199 70 20 44 67
x17187:	mov [bp + 22], bp	; 3: 137 110 22
x17190:	add bp, 20	; 3: 131 197 20
x17193:	jmp fwrite	; 3: 233 52 48

file_test$561:	; PostCall 20

file_test$562:	; Increment index
x17196:	inc word [bp + 10]	; 3: 255 70 10

file_test$563:	; Goto 550
x17199:	jmp file_test$550	; 2: 235 187

file_test$564:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$565:	; Parameter 12 outFilePtr 6
x17201:	mov ax, [bp + 6]	; 3: 139 70 6
x17204:	mov [bp + 18], ax	; 3: 137 70 18

file_test$566:	; Call 12 fclose 0
x17207:	mov word [bp + 12], file_test$567	; 5: 199 70 12 69 67
x17212:	mov [bp + 14], bp	; 3: 137 110 14
x17215:	add bp, 12	; 3: 131 197 12
x17218:	jmp fclose	; 3: 233 251 46

file_test$567:	; PostCall 12

file_test$568:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 6 string_TestY2Ebin# 6
x17221:	mov word [bp + 12], @11198$string_TestY2Ebin#	; 5: 199 70 12 94 84

file_test$570:	; Parameter 6 string_r# 8
x17226:	mov word [bp + 14], @11199$string_r#	; 5: 199 70 14 104 84

file_test$571:	; Call 6 fopen 0
x17231:	mov word [bp + 6], file_test$572	; 5: 199 70 6 93 67
x17236:	mov [bp + 8], bp	; 3: 137 110 8
x17239:	add bp, 6	; 3: 131 197 6
x17242:	jmp fopen	; 3: 233 59 23

file_test$572:	; PostCall 6

file_test$573:	; GetReturnValue £temporary5176

file_test$574:	; Assign inFilePtr £temporary5176
x17245:	mov [bp + 6], bx	; 3: 137 94 6

file_test$575:	; NotEqual 587 inFilePtr 0
x17248:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17252:	jne file_test$587	; 2: 117 59

file_test$576:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$577:	; Parameter 8 stderr 6
x17254:	mov ax, [stderr]	; 3: 161 24 78
x17257:	mov [bp + 14], ax	; 3: 137 70 14

file_test$578:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17260:	mov word [bp + 16], @11207$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 106 84

file_test$579:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17265:	mov word [bp + 18], @11208$string_inFilePtr20213D20NULL#	; 5: 199 70 18 152 84

file_test$580:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17270:	mov word [bp + 20], @11209$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 170 84

file_test$581:	; Parameter 8 217 14
x17275:	mov word [bp + 22], 217	; 5: 199 70 22 217 0

file_test$582:	; Call 8 fprintf 0
x17280:	mov word [bp + 8], file_test$583	; 5: 199 70 8 147 67
x17285:	mov [bp + 10], bp	; 3: 137 110 10
x17288:	add bp, 8	; 3: 131 197 8
x17291:	mov di, bp	; 2: 137 239
x17293:	add di, 6	; 3: 131 199 6
x17296:	jmp fprintf	; 3: 233 157 27

file_test$583:	; PostCall 8

file_test$584:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$585:	; Call 8 abort 0
x17299:	mov word [bp + 8], file_test$586	; 5: 199 70 8 161 67
x17304:	mov [bp + 10], bp	; 3: 137 110 10
x17307:	add bp, 8	; 3: 131 197 8
x17310:	jmp abort	; 3: 233 202 27

file_test$586:	; PostCall 8

file_test$587:	; Assign index 0
x17313:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$588:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$589:	; address £temporary5181 value
x17318:	mov si, bp	; 2: 137 238
x17320:	add si, 10	; 3: 131 198 10

file_test$590:	; Parameter 18 £temporary5181 6
x17323:	mov [bp + 24], si	; 3: 137 118 24

file_test$591:	; Parameter 18 8 8
x17326:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$592:	; Parameter 18 1 10
x17331:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$593:	; Parameter 18 inFilePtr 12
x17336:	mov ax, [bp + 6]	; 3: 139 70 6
x17339:	mov [bp + 30], ax	; 3: 137 70 30

file_test$594:	; Call 18 fread 0
x17342:	mov word [bp + 18], file_test$595	; 5: 199 70 18 204 67
x17347:	mov [bp + 20], bp	; 3: 137 110 20
x17350:	add bp, 18	; 3: 131 197 18
x17353:	jmp fread	; 3: 233 215 47

file_test$595:	; PostCall 18

file_test$596:	; GetReturnValue £temporary5182

file_test$597:	; SignedLessThanEqual 608 £temporary5182 0
x17356:	cmp bx, 0	; 3: 131 251 0
x17359:	jle file_test$608	; 2: 126 41

file_test$598:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$599:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x17361:	mov word [bp + 24], @11226$string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 235 84

file_test$600:	; Assign £temporary5184 index
x17366:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$601:	; Increment index
x17369:	inc word [bp + 8]	; 3: 255 70 8

file_test$602:	; Parameter 18 £temporary5184 8
x17372:	mov [bp + 26], ax	; 3: 137 70 26

file_test$603:	; PushFloat value
x17375:	fld qword [bp + 10]	; 3: 221 70 10

file_test$604:	; Parameter 18 value 10
x17378:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$605:	; Call 18 printf 0
x17381:	mov word [bp + 18], file_test$606	; 5: 199 70 18 248 67
x17386:	mov [bp + 20], bp	; 3: 137 110 20
x17389:	add bp, 18	; 3: 131 197 18
x17392:	mov di, bp	; 2: 137 239
x17394:	add di, 10	; 3: 131 199 10
x17397:	jmp printf	; 3: 233 12 201

file_test$606:	; PostCall 18

file_test$607:	; Goto 588
x17400:	jmp file_test$588	; 2: 235 172

file_test$608:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$609:	; Parameter 8 string_0A# 6
x17402:	mov word [bp + 14], @11230$string_0A#	; 5: 199 70 14 1 85

file_test$610:	; Call 8 printf 0
x17407:	mov word [bp + 8], file_test$611	; 5: 199 70 8 15 68
x17412:	mov [bp + 10], bp	; 3: 137 110 10
x17415:	add bp, 8	; 3: 131 197 8
x17418:	mov di, bp	; 2: 137 239
x17420:	jmp printf	; 3: 233 245 200

file_test$611:	; PostCall 8

file_test$612:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$613:	; Parameter 8 inFilePtr 6
x17423:	mov ax, [bp + 6]	; 3: 139 70 6
x17426:	mov [bp + 14], ax	; 3: 137 70 14

file_test$614:	; Call 8 fclose 0
x17429:	mov word [bp + 8], file_test$615	; 5: 199 70 8 35 68
x17434:	mov [bp + 10], bp	; 3: 137 110 10
x17437:	add bp, 8	; 3: 131 197 8
x17440:	jmp fclose	; 3: 233 29 46

file_test$615:	; PostCall 8

file_test$616:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$617:	; Parameter 6 string_TestY2Ebin# 6
x17443:	mov word [bp + 12], @11233$string_TestY2Ebin#	; 5: 199 70 12 3 85

file_test$618:	; Parameter 6 string_r# 8
x17448:	mov word [bp + 14], @11234$string_r#	; 5: 199 70 14 13 85

file_test$619:	; Call 6 fopen 0
x17453:	mov word [bp + 6], file_test$620	; 5: 199 70 6 59 68
x17458:	mov [bp + 8], bp	; 3: 137 110 8
x17461:	add bp, 6	; 3: 131 197 6
x17464:	jmp fopen	; 3: 233 93 22

file_test$620:	; PostCall 6

file_test$621:	; GetReturnValue £temporary5188

file_test$622:	; Assign inFilePtr £temporary5188
x17467:	mov [bp + 6], bx	; 3: 137 94 6

file_test$623:	; NotEqual 635 inFilePtr 0
x17470:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17474:	jne file_test$635	; 2: 117 59

file_test$624:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$625:	; Parameter 8 stderr 6
x17476:	mov ax, [stderr]	; 3: 161 24 78
x17479:	mov [bp + 14], ax	; 3: 137 70 14

file_test$626:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17482:	mov word [bp + 16], @11242$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 15 85

file_test$627:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17487:	mov word [bp + 18], @11243$string_inFilePtr20213D20NULL#	; 5: 199 70 18 61 85

file_test$628:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17492:	mov word [bp + 20], @11244$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 79 85

file_test$629:	; Parameter 8 232 14
x17497:	mov word [bp + 22], 232	; 5: 199 70 22 232 0

file_test$630:	; Call 8 fprintf 0
x17502:	mov word [bp + 8], file_test$631	; 5: 199 70 8 113 68
x17507:	mov [bp + 10], bp	; 3: 137 110 10
x17510:	add bp, 8	; 3: 131 197 8
x17513:	mov di, bp	; 2: 137 239
x17515:	add di, 6	; 3: 131 199 6
x17518:	jmp fprintf	; 3: 233 191 26

file_test$631:	; PostCall 8

file_test$632:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$633:	; Call 8 abort 0
x17521:	mov word [bp + 8], file_test$634	; 5: 199 70 8 127 68
x17526:	mov [bp + 10], bp	; 3: 137 110 10
x17529:	add bp, 8	; 3: 131 197 8
x17532:	jmp abort	; 3: 233 236 26

file_test$634:	; PostCall 8

file_test$635:	; Assign index 0
x17535:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$636:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$637:	; Parameter 10 inFilePtr 6
x17540:	mov ax, [bp + 6]	; 3: 139 70 6
x17543:	mov [bp + 16], ax	; 3: 137 70 16

file_test$638:	; Call 10 feof 0
x17546:	mov word [bp + 10], file_test$639	; 5: 199 70 10 152 68
x17551:	mov [bp + 12], bp	; 3: 137 110 12
x17554:	add bp, 10	; 3: 131 197 10
x17557:	jmp feof	; 3: 233 228 26

file_test$639:	; PostCall 10

file_test$640:	; GetReturnValue £temporary5193

file_test$641:	; NotEqual 660 £temporary5193 0
x17560:	cmp bx, 0	; 3: 131 251 0
x17563:	jne file_test$660	; 2: 117 79

file_test$642:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$643:	; address £temporary5196 value
x17565:	mov si, bp	; 2: 137 238
x17567:	add si, 10	; 3: 131 198 10

file_test$644:	; Parameter 18 £temporary5196 6
x17570:	mov [bp + 24], si	; 3: 137 118 24

file_test$645:	; Parameter 18 8 8
x17573:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$646:	; Parameter 18 1 10
x17578:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$647:	; Parameter 18 inFilePtr 12
x17583:	mov ax, [bp + 6]	; 3: 139 70 6
x17586:	mov [bp + 30], ax	; 3: 137 70 30

file_test$648:	; Call 18 fread 0
x17589:	mov word [bp + 18], file_test$649	; 5: 199 70 18 195 68
x17594:	mov [bp + 20], bp	; 3: 137 110 20
x17597:	add bp, 18	; 3: 131 197 18
x17600:	jmp fread	; 3: 233 224 46

file_test$649:	; PostCall 18

file_test$650:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$651:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x17603:	mov word [bp + 24], @11262$string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 144 85

file_test$652:	; Assign £temporary5198 index
x17608:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$653:	; Increment index
x17611:	inc word [bp + 8]	; 3: 255 70 8

file_test$654:	; Parameter 18 £temporary5198 8
x17614:	mov [bp + 26], ax	; 3: 137 70 26

file_test$655:	; PushFloat value
x17617:	fld qword [bp + 10]	; 3: 221 70 10

file_test$656:	; Parameter 18 value 10
x17620:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$657:	; Call 18 printf 0
x17623:	mov word [bp + 18], file_test$658	; 5: 199 70 18 234 68
x17628:	mov [bp + 20], bp	; 3: 137 110 20
x17631:	add bp, 18	; 3: 131 197 18
x17634:	mov di, bp	; 2: 137 239
x17636:	add di, 10	; 3: 131 199 10
x17639:	jmp printf	; 3: 233 26 200

file_test$658:	; PostCall 18

file_test$659:	; Goto 636
x17642:	jmp file_test$636	; 2: 235 152

file_test$660:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$661:	; Parameter 8 string_0A# 6
x17644:	mov word [bp + 14], @11266$string_0A#	; 5: 199 70 14 166 85

file_test$662:	; Call 8 printf 0
x17649:	mov word [bp + 8], file_test$663	; 5: 199 70 8 1 69
x17654:	mov [bp + 10], bp	; 3: 137 110 10
x17657:	add bp, 8	; 3: 131 197 8
x17660:	mov di, bp	; 2: 137 239
x17662:	jmp printf	; 3: 233 3 200

file_test$663:	; PostCall 8

file_test$664:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$665:	; Parameter 8 inFilePtr 6
x17665:	mov ax, [bp + 6]	; 3: 139 70 6
x17668:	mov [bp + 14], ax	; 3: 137 70 14

file_test$666:	; Call 8 fclose 0
x17671:	mov word [bp + 8], file_test$667	; 5: 199 70 8 21 69
x17676:	mov [bp + 10], bp	; 3: 137 110 10
x17679:	add bp, 8	; 3: 131 197 8
x17682:	jmp fclose	; 3: 233 43 45

file_test$667:	; PostCall 8

file_test$668:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$669:	; Parameter 6 string_TestX2Ebin# 6
x17685:	mov word [bp + 12], @11269$string_TestX2Ebin#	; 5: 199 70 12 168 85

file_test$670:	; Parameter 6 string_r# 8
x17690:	mov word [bp + 14], @11270$string_r#	; 5: 199 70 14 178 85

file_test$671:	; Call 6 fopen 0
x17695:	mov word [bp + 6], file_test$672	; 5: 199 70 6 45 69
x17700:	mov [bp + 8], bp	; 3: 137 110 8
x17703:	add bp, 6	; 3: 131 197 6
x17706:	jmp fopen	; 3: 233 107 21

file_test$672:	; PostCall 6

file_test$673:	; GetReturnValue £temporary5202

file_test$674:	; Assign inFilePtr £temporary5202
x17709:	mov [bp + 6], bx	; 3: 137 94 6

file_test$675:	; NotEqual 687 inFilePtr 0
x17712:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17716:	jne file_test$687	; 2: 117 59

file_test$676:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$677:	; Parameter 10 stderr 6
x17718:	mov ax, [stderr]	; 3: 161 24 78
x17721:	mov [bp + 16], ax	; 3: 137 70 16

file_test$678:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17724:	mov word [bp + 18], @11279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 180 85

file_test$679:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17729:	mov word [bp + 20], @11280$string_inFilePtr20213D20NULL#	; 5: 199 70 20 226 85

file_test$680:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17734:	mov word [bp + 22], @11281$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 244 85

file_test$681:	; Parameter 10 250 14
x17739:	mov word [bp + 24], 250	; 5: 199 70 24 250 0

file_test$682:	; Call 10 fprintf 0
x17744:	mov word [bp + 10], file_test$683	; 5: 199 70 10 99 69
x17749:	mov [bp + 12], bp	; 3: 137 110 12
x17752:	add bp, 10	; 3: 131 197 10
x17755:	mov di, bp	; 2: 137 239
x17757:	add di, 6	; 3: 131 199 6
x17760:	jmp fprintf	; 3: 233 205 25

file_test$683:	; PostCall 10

file_test$684:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$685:	; Call 10 abort 0
x17763:	mov word [bp + 10], file_test$686	; 5: 199 70 10 113 69
x17768:	mov [bp + 12], bp	; 3: 137 110 12
x17771:	add bp, 10	; 3: 131 197 10
x17774:	jmp abort	; 3: 233 250 25

file_test$686:	; PostCall 10

file_test$687:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$688:	; address £temporary5207 size
x17777:	mov si, bp	; 2: 137 238
x17779:	add si, 8	; 3: 131 198 8

file_test$689:	; Parameter 10 £temporary5207 6
x17782:	mov [bp + 16], si	; 3: 137 118 16

file_test$690:	; Parameter 10 2 8
x17785:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$691:	; Parameter 10 1 10
x17790:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$692:	; Parameter 10 inFilePtr 12
x17795:	mov ax, [bp + 6]	; 3: 139 70 6
x17798:	mov [bp + 22], ax	; 3: 137 70 22

file_test$693:	; Call 10 fread 0
x17801:	mov word [bp + 10], file_test$694	; 5: 199 70 10 151 69
x17806:	mov [bp + 12], bp	; 3: 137 110 12
x17809:	add bp, 10	; 3: 131 197 10
x17812:	jmp fread	; 3: 233 12 46

file_test$694:	; PostCall 10

file_test$695:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$696:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17815:	mov word [bp + 16], @11291$string_size43A2025i20total2025i0A#	; 5: 199 70 16 53 86

file_test$697:	; Parameter 10 size 8
x17820:	mov ax, [bp + 8]	; 3: 139 70 8
x17823:	mov [bp + 18], ax	; 3: 137 70 18

file_test$698:	; SignedMultiply £temporary5209 size 8
x17826:	mov ax, [bp + 8]	; 3: 139 70 8
x17829:	xor dx, dx	; 2: 49 210
x17831:	imul word [@11293$int2$8#]	; 4: 247 46 73 86

file_test$699:	; Parameter 10 £temporary5209 10
x17835:	mov [bp + 20], ax	; 3: 137 70 20

file_test$700:	; Call 10 printf 0
x17838:	mov word [bp + 10], file_test$701	; 5: 199 70 10 193 69
x17843:	mov [bp + 12], bp	; 3: 137 110 12
x17846:	add bp, 10	; 3: 131 197 10
x17849:	mov di, bp	; 2: 137 239
x17851:	add di, 4	; 3: 131 199 4
x17854:	jmp printf	; 3: 233 67 199

file_test$701:	; PostCall 10

file_test$702:	; SignedMultiply total size 8
x17857:	mov ax, [bp + 8]	; 3: 139 70 8
x17860:	xor dx, dx	; 2: 49 210
x17862:	imul word [@11297$int2$8#]	; 4: 247 46 75 86
x17866:	mov [bp + 10], ax	; 3: 137 70 10

file_test$703:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$704:	; Parameter 14 total 6
x17869:	mov ax, [bp + 10]	; 3: 139 70 10
x17872:	mov [bp + 20], ax	; 3: 137 70 20

file_test$705:	; Call 14 malloc 0
x17875:	mov word [bp + 14], file_test$706	; 5: 199 70 14 225 69
x17880:	mov [bp + 16], bp	; 3: 137 110 16
x17883:	add bp, 14	; 3: 131 197 14
x17886:	jmp malloc	; 3: 233 5 46

file_test$706:	; PostCall 14

file_test$707:	; GetReturnValue £temporary5212

file_test$708:	; Assign p £temporary5212
x17889:	mov [bp + 14], bx	; 3: 137 94 14

file_test$709:	; UnsignedMultiply £temporary5213 size 8
x17892:	mov ax, [bp + 8]	; 3: 139 70 8
x17895:	xor dx, dx	; 2: 49 210
x17897:	mul word [@11304$int2$8#]	; 4: 247 38 77 86

file_test$710:	; BinaryAdd endPtr p £temporary5213
x17901:	mov bx, [bp + 14]	; 3: 139 94 14
x17904:	add bx, ax	; 2: 1 195
x17906:	mov [bp + 16], bx	; 3: 137 94 16

file_test$711:	; NotEqual 723 p 0
x17909:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17913:	jne file_test$723	; 2: 117 59

file_test$712:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$713:	; Parameter 18 stderr 6
x17915:	mov ax, [stderr]	; 3: 161 24 78
x17918:	mov [bp + 24], ax	; 3: 137 70 24

file_test$714:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17921:	mov word [bp + 26], @11312$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 79 86

file_test$715:	; Parameter 18 string_p20213D20NULL# 10
x17926:	mov word [bp + 28], @11313$string_p20213D20NULL#	; 5: 199 70 28 125 86

file_test$716:	; Parameter 18 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17931:	mov word [bp + 30], @11314$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 135 86

file_test$717:	; Parameter 18 257 14
x17936:	mov word [bp + 32], 257	; 5: 199 70 32 1 1

file_test$718:	; Call 18 fprintf 0
x17941:	mov word [bp + 18], file_test$719	; 5: 199 70 18 40 70
x17946:	mov [bp + 20], bp	; 3: 137 110 20
x17949:	add bp, 18	; 3: 131 197 18
x17952:	mov di, bp	; 2: 137 239
x17954:	add di, 6	; 3: 131 199 6
x17957:	jmp fprintf	; 3: 233 8 25

file_test$719:	; PostCall 18

file_test$720:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$721:	; Call 18 abort 0
x17960:	mov word [bp + 18], file_test$722	; 5: 199 70 18 54 70
x17965:	mov [bp + 20], bp	; 3: 137 110 20
x17968:	add bp, 18	; 3: 131 197 18
x17971:	jmp abort	; 3: 233 53 25

file_test$722:	; PostCall 18

file_test$723:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$724:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17974:	mov word [bp + 24], @11318$string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 200 86

file_test$725:	; Parameter 18 p 8
x17979:	mov ax, [bp + 14]	; 3: 139 70 14
x17982:	mov [bp + 26], ax	; 3: 137 70 26

file_test$726:	; Parameter 18 total 10
x17985:	mov ax, [bp + 10]	; 3: 139 70 10
x17988:	mov [bp + 28], ax	; 3: 137 70 28

file_test$727:	; Parameter 18 endPtr 12
x17991:	mov ax, [bp + 16]	; 3: 139 70 16
x17994:	mov [bp + 30], ax	; 3: 137 70 30

file_test$728:	; Call 18 printf 0
x17997:	mov word [bp + 18], file_test$729	; 5: 199 70 18 96 70
x18002:	mov [bp + 20], bp	; 3: 137 110 20
x18005:	add bp, 18	; 3: 131 197 18
x18008:	mov di, bp	; 2: 137 239
x18010:	add di, 6	; 3: 131 199 6
x18013:	jmp printf	; 3: 233 164 198

file_test$729:	; PostCall 18

file_test$730:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$731:	; Parameter 18 p 6
x18016:	mov ax, [bp + 14]	; 3: 139 70 14
x18019:	mov [bp + 24], ax	; 3: 137 70 24

file_test$732:	; Parameter 18 total 8
x18022:	mov ax, [bp + 10]	; 3: 139 70 10
x18025:	mov [bp + 26], ax	; 3: 137 70 26

file_test$733:	; Parameter 18 1 10
x18028:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$734:	; Parameter 18 inFilePtr 12
x18033:	mov ax, [bp + 6]	; 3: 139 70 6
x18036:	mov [bp + 30], ax	; 3: 137 70 30

file_test$735:	; Call 18 fread 0
x18039:	mov word [bp + 18], file_test$736	; 5: 199 70 18 133 70
x18044:	mov [bp + 20], bp	; 3: 137 110 20
x18047:	add bp, 18	; 3: 131 197 18
x18050:	jmp fread	; 3: 233 30 45

file_test$736:	; PostCall 18

file_test$737:	; Assign index 0
x18053:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$738:	; SignedGreaterThanEqual 751 index size
x18058:	mov ax, [bp + 8]	; 3: 139 70 8
x18061:	cmp [bp + 12], ax	; 3: 57 70 12
x18064:	jge file_test$751	; 2: 125 54

file_test$739:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$740:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x18066:	mov word [bp + 24], @11328$string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 219 86

file_test$741:	; Parameter 18 index 8
x18071:	mov ax, [bp + 12]	; 3: 139 70 12
x18074:	mov [bp + 26], ax	; 3: 137 70 26

file_test$742:	; UnsignedMultiply £temporary5224 index 8
x18077:	mov ax, [bp + 12]	; 3: 139 70 12
x18080:	xor dx, dx	; 2: 49 210
x18082:	mul word [@11330$int2$8#]	; 4: 247 38 241 86

file_test$743:	; BinaryAdd £temporary5225 p £temporary5224
x18086:	mov si, [bp + 14]	; 3: 139 118 14
x18089:	add si, ax	; 2: 1 198

file_test$744:	; Deref £temporary5223 -> £temporary5225 £temporary5225 0

file_test$745:	; PushFloat £temporary5223 -> £temporary5225
x18091:	fld qword [si]	; 2: 221 4

file_test$746:	; Parameter 18 £temporary5223 -> £temporary5225 10
x18093:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$747:	; Call 18 printf 0
x18096:	mov word [bp + 18], file_test$748	; 5: 199 70 18 195 70
x18101:	mov [bp + 20], bp	; 3: 137 110 20
x18104:	add bp, 18	; 3: 131 197 18
x18107:	mov di, bp	; 2: 137 239
x18109:	add di, 10	; 3: 131 199 10
x18112:	jmp printf	; 3: 233 65 198

file_test$748:	; PostCall 18

file_test$749:	; Increment index
x18115:	inc word [bp + 12]	; 3: 255 70 12

file_test$750:	; Goto 738
x18118:	jmp file_test$738	; 2: 235 194

file_test$751:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$752:	; Parameter 18 string_0A# 6
x18120:	mov word [bp + 24], @11334$string_0A#	; 5: 199 70 24 243 86

file_test$753:	; Call 18 printf 0
x18125:	mov word [bp + 18], file_test$754	; 5: 199 70 18 221 70
x18130:	mov [bp + 20], bp	; 3: 137 110 20
x18133:	add bp, 18	; 3: 131 197 18
x18136:	mov di, bp	; 2: 137 239
x18138:	jmp printf	; 3: 233 39 198

file_test$754:	; PostCall 18

file_test$755:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$756:	; Parameter 18 p 6
x18141:	mov ax, [bp + 14]	; 3: 139 70 14
x18144:	mov [bp + 24], ax	; 3: 137 70 24

file_test$757:	; Call 18 free 0
x18147:	mov word [bp + 18], file_test$758	; 5: 199 70 18 241 70
x18152:	mov [bp + 20], bp	; 3: 137 110 20
x18155:	add bp, 18	; 3: 131 197 18
x18158:	jmp free	; 3: 233 2 47

file_test$758:	; PostCall 18

file_test$759:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$760:	; Parameter 10 inFilePtr 6
x18161:	mov ax, [bp + 6]	; 3: 139 70 6
x18164:	mov [bp + 16], ax	; 3: 137 70 16

file_test$761:	; Call 10 fclose 0
x18167:	mov word [bp + 10], file_test$762	; 5: 199 70 10 5 71
x18172:	mov [bp + 12], bp	; 3: 137 110 12
x18175:	add bp, 10	; 3: 131 197 10
x18178:	jmp fclose	; 3: 233 59 43

file_test$762:	; PostCall 10

file_test$763:	; Assign personVector[0]$name[0] 65
x18181:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$764:	; Assign personVector[0]$name[1] 100
x18185:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$765:	; Assign personVector[0]$name[2] 97
x18189:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$766:	; Assign personVector[0]$name[3] 109
x18193:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$767:	; Assign personVector[0]$name[4] 32
x18197:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$768:	; Assign personVector[0]$name[5] 66
x18201:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$769:	; Assign personVector[0]$name[6] 101
x18205:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$770:	; Assign personVector[0]$name[7] 114
x18209:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$771:	; Assign personVector[0]$name[8] 116
x18213:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$772:	; Assign personVector[0]$name[9] 105
x18217:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$773:	; Assign personVector[0]$name[10] 108
x18221:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$774:	; Assign personVector[0]$name[11] 115
x18225:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$775:	; Assign personVector[0]$name[12] 115
x18229:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$776:	; Assign personVector[0]$name[13] 111
x18233:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$777:	; Assign personVector[0]$name[14] 110
x18237:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$778:	; Assign personVector[0]$name[15] 0
x18241:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$779:	; Assign personVector[0]$phone 12345
x18245:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$780:	; Assign personVector[1]$name[0] 66
x18250:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$781:	; Assign personVector[1]$name[1] 101
x18254:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$782:	; Assign personVector[1]$name[2] 114
x18258:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$783:	; Assign personVector[1]$name[3] 116
x18262:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$784:	; Assign personVector[1]$name[4] 105
x18266:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$785:	; Assign personVector[1]$name[5] 108
x18270:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$786:	; Assign personVector[1]$name[6] 32
x18274:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$787:	; Assign personVector[1]$name[7] 67
x18278:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$788:	; Assign personVector[1]$name[8] 101
x18282:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$789:	; Assign personVector[1]$name[9] 97
x18286:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$790:	; Assign personVector[1]$name[10] 115
x18290:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$791:	; Assign personVector[1]$name[11] 97
x18294:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$792:	; Assign personVector[1]$name[12] 114
x18298:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$793:	; Assign personVector[1]$name[13] 115
x18302:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$794:	; Assign personVector[1]$name[14] 115
x18306:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$795:	; Assign personVector[1]$name[15] 111
x18310:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$796:	; Assign personVector[1]$name[16] 110
x18314:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$797:	; Assign personVector[1]$name[17] 0
x18318:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$798:	; Assign personVector[1]$phone 23456
x18322:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$799:	; Assign personVector[2]$name[0] 67
x18327:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$800:	; Assign personVector[2]$name[1] 101
x18331:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$801:	; Assign personVector[2]$name[2] 97
x18335:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$802:	; Assign personVector[2]$name[3] 115
x18339:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$803:	; Assign personVector[2]$name[4] 97
x18343:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$804:	; Assign personVector[2]$name[5] 114
x18347:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$805:	; Assign personVector[2]$name[6] 32
x18351:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$806:	; Assign personVector[2]$name[7] 68
x18355:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$807:	; Assign personVector[2]$name[8] 97
x18359:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$808:	; Assign personVector[2]$name[9] 118
x18363:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$809:	; Assign personVector[2]$name[10] 105
x18367:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$810:	; Assign personVector[2]$name[11] 100
x18371:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$811:	; Assign personVector[2]$name[12] 115
x18375:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$812:	; Assign personVector[2]$name[13] 115
x18379:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$813:	; Assign personVector[2]$name[14] 111
x18383:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$814:	; Assign personVector[2]$name[15] 110
x18387:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$815:	; Assign personVector[2]$name[16] 0
x18391:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$816:	; Assign personVector[2]$phone 24567
x18395:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$817:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$818:	; Parameter 206 string_Block2Ebin# 6
x18401:	mov word [bp + 212], @11515$string_Block2Ebin#	; 6: 199 134 212 0 245 86

file_test$819:	; Parameter 206 string_w# 8
x18407:	mov word [bp + 214], @11516$string_w#	; 6: 199 134 214 0 255 86

file_test$820:	; Call 206 fopen 0
x18413:	mov word [bp + 206], file_test$821	; 6: 199 134 206 0 254 71
x18419:	mov [bp + 208], bp	; 4: 137 174 208 0
x18423:	add bp, 206	; 4: 129 197 206 0
x18427:	jmp fopen	; 3: 233 154 18

file_test$821:	; PostCall 206

file_test$822:	; GetReturnValue £temporary5290

file_test$823:	; Assign outFilePtr £temporary5290
x18430:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$824:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$825:	; Parameter 208 string_Block2Ebin# 6
x18434:	mov word [bp + 214], @11519$string_Block2Ebin#	; 6: 199 134 214 0 1 87

file_test$826:	; Parameter 208 string_r# 8
x18440:	mov word [bp + 216], @11520$string_r#	; 6: 199 134 216 0 11 87

file_test$827:	; Call 208 fopen 0
x18446:	mov word [bp + 208], file_test$828	; 6: 199 134 208 0 31 72
x18452:	mov [bp + 210], bp	; 4: 137 174 210 0
x18456:	add bp, 208	; 4: 129 197 208 0
x18460:	jmp fopen	; 3: 233 121 18

file_test$828:	; PostCall 208

file_test$829:	; GetReturnValue £temporary5291

file_test$830:	; Assign inFilePtr £temporary5291
x18463:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$831:	; NotEqual 843 outFilePtr 0
x18467:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x18472:	jne file_test$843	; 2: 117 70

file_test$832:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 210 stderr 6
x18474:	mov ax, [stderr]	; 3: 161 24 78
x18477:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$834:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18481:	mov word [bp + 218], @11528$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 13 87

file_test$835:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x18487:	mov word [bp + 220], @11529$string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 59 87

file_test$836:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18493:	mov word [bp + 222], @11530$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 78 87

file_test$837:	; Parameter 210 284 14
x18499:	mov word [bp + 224], 284	; 6: 199 134 224 0 28 1

file_test$838:	; Call 210 fprintf 0
x18505:	mov word [bp + 210], file_test$839	; 6: 199 134 210 0 95 72
x18511:	mov [bp + 212], bp	; 4: 137 174 212 0
x18515:	add bp, 210	; 4: 129 197 210 0
x18519:	mov di, bp	; 2: 137 239
x18521:	add di, 6	; 3: 131 199 6
x18524:	jmp fprintf	; 3: 233 209 22

file_test$839:	; PostCall 210

file_test$840:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Call 210 abort 0
x18527:	mov word [bp + 210], file_test$842	; 6: 199 134 210 0 112 72
x18533:	mov [bp + 212], bp	; 4: 137 174 212 0
x18537:	add bp, 210	; 4: 129 197 210 0
x18541:	jmp abort	; 3: 233 251 22

file_test$842:	; PostCall 210

file_test$843:	; NotEqual 855 inFilePtr 0
x18544:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x18549:	jne file_test$855	; 2: 117 70

file_test$844:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$845:	; Parameter 210 stderr 6
x18551:	mov ax, [stderr]	; 3: 161 24 78
x18554:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$846:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18558:	mov word [bp + 218], @11539$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 143 87

file_test$847:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x18564:	mov word [bp + 220], @11540$string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 189 87

file_test$848:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18570:	mov word [bp + 222], @11541$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 207 87

file_test$849:	; Parameter 210 285 14
x18576:	mov word [bp + 224], 285	; 6: 199 134 224 0 29 1

file_test$850:	; Call 210 fprintf 0
x18582:	mov word [bp + 210], file_test$851	; 6: 199 134 210 0 172 72
x18588:	mov [bp + 212], bp	; 4: 137 174 212 0
x18592:	add bp, 210	; 4: 129 197 210 0
x18596:	mov di, bp	; 2: 137 239
x18598:	add di, 6	; 3: 131 199 6
x18601:	jmp fprintf	; 3: 233 132 22

file_test$851:	; PostCall 210

file_test$852:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Call 210 abort 0
x18604:	mov word [bp + 210], file_test$854	; 6: 199 134 210 0 189 72
x18610:	mov [bp + 212], bp	; 4: 137 174 212 0
x18614:	add bp, 210	; 4: 129 197 210 0
x18618:	jmp abort	; 3: 233 174 22

file_test$854:	; PostCall 210

file_test$855:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$856:	; Parameter 210 personVector 6
x18621:	mov [bp + 216], bp	; 4: 137 174 216 0
x18625:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$857:	; Parameter 210 150 8
x18630:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$858:	; Parameter 210 1 10
x18636:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$859:	; Parameter 210 outFilePtr 12
x18642:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18646:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$860:	; Call 210 fwrite 0
x18650:	mov word [bp + 210], file_test$861	; 6: 199 134 210 0 235 72
x18656:	mov [bp + 212], bp	; 4: 137 174 212 0
x18660:	add bp, 210	; 4: 129 197 210 0
x18664:	jmp fwrite	; 3: 233 117 42

file_test$861:	; PostCall 210

file_test$862:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$863:	; Parameter 210 outFilePtr 6
x18667:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18671:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$864:	; Call 210 fclose 0
x18675:	mov word [bp + 210], file_test$865	; 6: 199 134 210 0 4 73
x18681:	mov [bp + 212], bp	; 4: 137 174 212 0
x18685:	add bp, 210	; 4: 129 197 210 0
x18689:	jmp fclose	; 3: 233 60 41

file_test$865:	; PostCall 210

file_test$866:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$867:	; Parameter 210 inFilePtr 6
x18692:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18696:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$868:	; Call 210 feof 0
x18700:	mov word [bp + 210], file_test$869	; 6: 199 134 210 0 29 73
x18706:	mov [bp + 212], bp	; 4: 137 174 212 0
x18710:	add bp, 210	; 4: 129 197 210 0
x18714:	jmp feof	; 3: 233 95 22

file_test$869:	; PostCall 210

file_test$870:	; GetReturnValue £temporary5302

file_test$871:	; NotEqual 891 £temporary5302 0
x18717:	cmp bx, 0	; 3: 131 251 0
x18720:	jne file_test$891	; 2: 117 124

file_test$872:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$873:	; address £temporary5305 person
x18722:	mov si, bp	; 2: 137 238
x18724:	add si, 156	; 4: 129 198 156 0

file_test$874:	; Parameter 210 £temporary5305 6
x18728:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$875:	; Parameter 210 50 8
x18732:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$876:	; Parameter 210 1 10
x18738:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$877:	; Parameter 210 inFilePtr 12
x18744:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18748:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$878:	; Call 210 fread 0
x18752:	mov word [bp + 210], file_test$879	; 6: 199 134 210 0 81 73
x18758:	mov [bp + 212], bp	; 4: 137 174 212 0
x18762:	add bp, 210	; 4: 129 197 210 0
x18766:	jmp fread	; 3: 233 82 42

file_test$879:	; PostCall 210

file_test$880:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$881:	; Parameter 210 string_Name20203A2025s0A# 6
x18769:	mov word [bp + 216], @11561$string_Name20203A2025s0A#	; 6: 199 134 216 0 16 88

file_test$882:	; Parameter 210 person$name 8
x18775:	mov [bp + 218], bp	; 4: 137 174 218 0
x18779:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$883:	; Call 210 printf 0
x18785:	mov word [bp + 210], file_test$884	; 6: 199 134 210 0 119 73
x18791:	mov [bp + 212], bp	; 4: 137 174 212 0
x18795:	add bp, 210	; 4: 129 197 210 0
x18799:	mov di, bp	; 2: 137 239
x18801:	add di, 2	; 3: 131 199 2
x18804:	jmp printf	; 3: 233 141 195

file_test$884:	; PostCall 210

file_test$885:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$886:	; Parameter 210 string_Phone203A2025d0A# 6
x18807:	mov word [bp + 216], @11564$string_Phone203A2025d0A#	; 6: 199 134 216 0 28 88

file_test$887:	; Parameter 210 person$phone 8
x18813:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18817:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$888:	; Call 210 printf 0
x18821:	mov word [bp + 210], file_test$889	; 6: 199 134 210 0 155 73
x18827:	mov [bp + 212], bp	; 4: 137 174 212 0
x18831:	add bp, 210	; 4: 129 197 210 0
x18835:	mov di, bp	; 2: 137 239
x18837:	add di, 2	; 3: 131 199 2
x18840:	jmp printf	; 3: 233 105 195

file_test$889:	; PostCall 210

file_test$890:	; Goto 866
x18843:	jmp file_test$866	; 3: 233 102 255

file_test$891:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 210 inFilePtr 6
x18846:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18850:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$893:	; Call 210 fclose 0
x18854:	mov word [bp + 210], file_test$894	; 6: 199 134 210 0 183 73
x18860:	mov [bp + 212], bp	; 4: 137 174 212 0
x18864:	add bp, 210	; 4: 129 197 210 0
x18868:	jmp fclose	; 3: 233 137 40

file_test$894:	; PostCall 210

file_test$895:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$896:	; Parameter 6 string_outx2Etxt# 6
x18871:	mov word [bp + 12], @11568$string_outx2Etxt#	; 5: 199 70 12 40 88

file_test$897:	; Parameter 6 string_r# 8
x18876:	mov word [bp + 14], @11569$string_r#	; 5: 199 70 14 49 88

file_test$898:	; Call 6 fopen 0
x18881:	mov word [bp + 6], file_test$899	; 5: 199 70 6 207 73
x18886:	mov [bp + 8], bp	; 3: 137 110 8
x18889:	add bp, 6	; 3: 131 197 6
x18892:	jmp fopen	; 3: 233 201 16

file_test$899:	; PostCall 6

file_test$900:	; GetReturnValue £temporary5312

file_test$901:	; Assign inFilePtr £temporary5312
x18895:	mov [bp + 6], bx	; 3: 137 94 6

file_test$902:	; NotEqual 914 inFilePtr 0
x18898:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18902:	jne file_test$914	; 2: 117 59

file_test$903:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$904:	; Parameter 12 stderr 6
x18904:	mov ax, [stderr]	; 3: 161 24 78
x18907:	mov [bp + 18], ax	; 3: 137 70 18

file_test$905:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18910:	mov word [bp + 20], @11579$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 51 88

file_test$906:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x18915:	mov word [bp + 22], @11580$string_inFilePtr20213D20NULL#	; 5: 199 70 22 97 88

file_test$907:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18920:	mov word [bp + 24], @11581$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 115 88

file_test$908:	; Parameter 12 302 14
x18925:	mov word [bp + 26], 302	; 5: 199 70 26 46 1

file_test$909:	; Call 12 fprintf 0
x18930:	mov word [bp + 12], file_test$910	; 5: 199 70 12 5 74
x18935:	mov [bp + 14], bp	; 3: 137 110 14
x18938:	add bp, 12	; 3: 131 197 12
x18941:	mov di, bp	; 2: 137 239
x18943:	add di, 6	; 3: 131 199 6
x18946:	jmp fprintf	; 3: 233 43 21

file_test$910:	; PostCall 12

file_test$911:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$912:	; Call 12 abort 0
x18949:	mov word [bp + 12], file_test$913	; 5: 199 70 12 19 74
x18954:	mov [bp + 14], bp	; 3: 137 110 14
x18957:	add bp, 12	; 3: 131 197 12
x18960:	jmp abort	; 3: 233 88 21

file_test$913:	; PostCall 12

file_test$914:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$915:	; Parameter 12 inFilePtr 6
x18963:	mov ax, [bp + 6]	; 3: 139 70 6
x18966:	mov [bp + 18], ax	; 3: 137 70 18

file_test$916:	; Parameter 12 0 8
x18969:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$917:	; Parameter 12 2 10
x18974:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

file_test$918:	; Call 12 fseek 0
x18979:	mov word [bp + 12], file_test$919	; 5: 199 70 12 49 74
x18984:	mov [bp + 14], bp	; 3: 137 110 14
x18987:	add bp, 12	; 3: 131 197 12
x18990:	jmp fseek	; 3: 233 90 20

file_test$919:	; PostCall 12

file_test$920:	; GetReturnValue £temporary5317

file_test$921:	; Assign size £temporary5317
x18993:	mov [bp + 12], bx	; 3: 137 94 12

file_test$922:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$923:	; Parameter 14 string_ftell2025i0A# 6
x18996:	mov word [bp + 20], @11590$string_ftell2025i0A#	; 5: 199 70 20 180 88

file_test$924:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$925:	; Parameter 14 inFilePtr 14
x19001:	mov ax, [bp + 6]	; 3: 139 70 6
x19004:	mov [bp + 28], ax	; 3: 137 70 28

file_test$926:	; Call 14 ftell 8
x19007:	mov word [bp + 22], file_test$927	; 5: 199 70 22 77 74
x19012:	mov [bp + 24], bp	; 3: 137 110 24
x19015:	add bp, 22	; 3: 131 197 22
x19018:	jmp ftell	; 3: 233 71 44

file_test$927:	; PostCall 14

file_test$928:	; GetReturnValue £temporary5318

file_test$929:	; Parameter 14 £temporary5318 8
x19021:	mov [bp + 22], bx	; 3: 137 94 22

file_test$930:	; Call 14 printf 0
x19024:	mov word [bp + 14], file_test$931	; 5: 199 70 14 99 74
x19029:	mov [bp + 16], bp	; 3: 137 110 16
x19032:	add bp, 14	; 3: 131 197 14
x19035:	mov di, bp	; 2: 137 239
x19037:	add di, 2	; 3: 131 199 2
x19040:	jmp printf	; 3: 233 161 194

file_test$931:	; PostCall 14

file_test$932:	; Assign index 0
x19043:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$933:	; SignedGreaterThanEqual 965 index size
x19048:	mov ax, [bp + 12]	; 3: 139 70 12
x19051:	cmp [bp + 10], ax	; 3: 57 70 10
x19054:	jge file_test$965	; 4: 15 141 154 0

file_test$934:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$935:	; Parameter 14 inFilePtr 6
x19058:	mov ax, [bp + 6]	; 3: 139 70 6
x19061:	mov [bp + 20], ax	; 3: 137 70 20

file_test$936:	; Call 14 fgetc 0
x19064:	mov word [bp + 14], file_test$937	; 5: 199 70 14 134 74
x19069:	mov [bp + 16], bp	; 3: 137 110 16
x19072:	add bp, 14	; 3: 131 197 14
x19075:	jmp fgetc	; 3: 233 55 44

file_test$937:	; PostCall 14

file_test$938:	; GetReturnValue £temporary5322

file_test$939:	; IntegralToIntegral £temporary5323 £temporary5322
x19078:	cmp bx, 0	; 3: 131 251 0
x19081:	jge file_test$940	; 2: 125 4
x19083:	neg bx	; 2: 247 219
x19085:	neg bl	; 2: 246 219

file_test$940:	; Assign c £temporary5323
x19087:	mov [bp + 14], bl	; 3: 136 94 14

file_test$941:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$942:	; Parameter 15 string_3C25c3E2025i2025i0A# 6
x19090:	mov word [bp + 21], @11601$string_3C25c3E2025i2025i0A#	; 5: 199 70 21 190 88

file_test$943:	; IntegralToIntegral £temporary5324 c
x19095:	mov al, [bp + 14]	; 3: 138 70 14
x19098:	and ax, 255	; 3: 37 255 0
x19101:	cmp al, 0	; 2: 60 0
x19103:	jge file_test$944	; 2: 125 4
x19105:	neg al	; 2: 246 216
x19107:	neg ax	; 2: 247 216

file_test$944:	; Parameter 15 £temporary5324 8
x19109:	mov [bp + 23], ax	; 3: 137 70 23

file_test$945:	; IntegralToIntegral £temporary5325 c
x19112:	mov al, [bp + 14]	; 3: 138 70 14
x19115:	and ax, 255	; 3: 37 255 0
x19118:	cmp al, 0	; 2: 60 0
x19120:	jge file_test$946	; 2: 125 4
x19122:	neg al	; 2: 246 216
x19124:	neg ax	; 2: 247 216

file_test$946:	; Parameter 15 £temporary5325 10
x19126:	mov [bp + 25], ax	; 3: 137 70 25

file_test$947:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$948:	; Parameter 15 inFilePtr 18
x19129:	mov ax, [bp + 6]	; 3: 139 70 6
x19132:	mov [bp + 33], ax	; 3: 137 70 33

file_test$949:	; Call 15 ftell 12
x19135:	mov word [bp + 27], file_test$950	; 5: 199 70 27 205 74
x19140:	mov [bp + 29], bp	; 3: 137 110 29
x19143:	add bp, 27	; 3: 131 197 27
x19146:	jmp ftell	; 3: 233 199 43

file_test$950:	; PostCall 15

file_test$951:	; GetReturnValue £temporary5326

file_test$952:	; Parameter 15 £temporary5326 12
x19149:	mov [bp + 27], bx	; 3: 137 94 27

file_test$953:	; Call 15 printf 0
x19152:	mov word [bp + 15], file_test$954	; 5: 199 70 15 227 74
x19157:	mov [bp + 17], bp	; 3: 137 110 17
x19160:	add bp, 15	; 3: 131 197 15
x19163:	mov di, bp	; 2: 137 239
x19165:	add di, 6	; 3: 131 199 6
x19168:	jmp printf	; 3: 233 33 194

file_test$954:	; PostCall 15

file_test$955:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$956:	; Parameter 15 inFilePtr 6
x19171:	mov ax, [bp + 6]	; 3: 139 70 6
x19174:	mov [bp + 21], ax	; 3: 137 70 21

file_test$957:	; BinarySubtract £temporary5328 size index
x19177:	mov ax, [bp + 12]	; 3: 139 70 12
x19180:	sub ax, [bp + 10]	; 3: 43 70 10

file_test$958:	; BinarySubtract £temporary5329 £temporary5328 1
x19183:	dec ax	; 1: 72

file_test$959:	; Parameter 15 £temporary5329 8
x19184:	mov [bp + 23], ax	; 3: 137 70 23

file_test$960:	; Parameter 15 0 10
x19187:	mov word [bp + 25], 0	; 5: 199 70 25 0 0

file_test$961:	; Call 15 fseek 0
x19192:	mov word [bp + 15], file_test$962	; 5: 199 70 15 6 75
x19197:	mov [bp + 17], bp	; 3: 137 110 17
x19200:	add bp, 15	; 3: 131 197 15
x19203:	jmp fseek	; 3: 233 133 19

file_test$962:	; PostCall 15

file_test$963:	; Increment index
x19206:	inc word [bp + 10]	; 3: 255 70 10

file_test$964:	; Goto 933
x19209:	jmp file_test$933	; 3: 233 92 255

file_test$965:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$966:	; Parameter 12 string_0A# 6
x19212:	mov word [bp + 18], @11612$string_0A#	; 5: 199 70 18 202 88

file_test$967:	; Call 12 printf 0
x19217:	mov word [bp + 12], file_test$968	; 5: 199 70 12 33 75
x19222:	mov [bp + 14], bp	; 3: 137 110 14
x19225:	add bp, 12	; 3: 131 197 12
x19228:	mov di, bp	; 2: 137 239
x19230:	jmp printf	; 3: 233 227 193

file_test$968:	; PostCall 12

file_test$969:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$970:	; Parameter 12 inFilePtr 6
x19233:	mov ax, [bp + 6]	; 3: 139 70 6
x19236:	mov [bp + 18], ax	; 3: 137 70 18

file_test$971:	; Call 12 fclose 0
x19239:	mov word [bp + 12], file_test$972	; 5: 199 70 12 53 75
x19244:	mov [bp + 14], bp	; 3: 137 110 14
x19247:	add bp, 12	; 3: 131 197 12
x19250:	jmp fclose	; 3: 233 11 39

file_test$972:	; PostCall 12

file_test$973:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$974:	; Parameter 6 string_fileexists2022X223A2025s0A# 6
x19253:	mov word [bp + 12], @11615$string_fileexists2022X223A2025s0A#	; 5: 199 70 12 204 88

file_test$975:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$976:	; Parameter 6 string_X# 14
x19258:	mov word [bp + 20], @11616$string_X#	; 5: 199 70 20 224 88

file_test$977:	; Call 6 fileexists 8
x19263:	mov word [bp + 14], file_test$978	; 5: 199 70 14 77 75
x19268:	mov [bp + 16], bp	; 3: 137 110 16
x19271:	add bp, 14	; 3: 131 197 14
x19274:	jmp fileexists	; 3: 233 137 19

file_test$978:	; PostCall 6

file_test$979:	; GetReturnValue £temporary5333

file_test$980:	; Equal 983 £temporary5333 0
x19277:	cmp bx, 0	; 3: 131 251 0
x19280:	je file_test$983	; 2: 116 5

file_test$981:	; Assign £temporary5338 string_Yes#
x19282:	mov ax, @11618$string_Yes#	; 3: 184 226 88

file_test$982:	; Goto 984
x19285:	jmp file_test$984	; 2: 235 3

file_test$983:	; Assign £temporary5338 string_No#
x19287:	mov ax, @11619$string_No#	; 3: 184 230 88

file_test$984:	; Parameter 6 £temporary5338 8
x19290:	mov [bp + 14], ax	; 3: 137 70 14

file_test$985:	; Call 6 printf 0
x19293:	mov word [bp + 6], file_test$986	; 5: 199 70 6 112 75
x19298:	mov [bp + 8], bp	; 3: 137 110 8
x19301:	add bp, 6	; 3: 131 197 6
x19304:	mov di, bp	; 2: 137 239
x19306:	add di, 2	; 3: 131 199 2
x19309:	jmp printf	; 3: 233 148 193

file_test$986:	; PostCall 6

file_test$987:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$988:	; Parameter 6 string_fileexists2022Y223A2025s0A# 6
x19312:	mov word [bp + 12], @11629$string_fileexists2022Y223A2025s0A#	; 5: 199 70 12 233 88

file_test$989:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$990:	; Parameter 6 string_Y# 14
x19317:	mov word [bp + 20], @11630$string_Y#	; 5: 199 70 20 253 88

file_test$991:	; Call 6 fileexists 8
x19322:	mov word [bp + 14], file_test$992	; 5: 199 70 14 136 75
x19327:	mov [bp + 16], bp	; 3: 137 110 16
x19330:	add bp, 14	; 3: 131 197 14
x19333:	jmp fileexists	; 3: 233 78 19

file_test$992:	; PostCall 6

file_test$993:	; GetReturnValue £temporary5340

file_test$994:	; Equal 997 £temporary5340 0
x19336:	cmp bx, 0	; 3: 131 251 0
x19339:	je file_test$997	; 2: 116 5

file_test$995:	; Assign £temporary5345 string_Yes#
x19341:	mov ax, @11632$string_Yes#	; 3: 184 255 88

file_test$996:	; Goto 998
x19344:	jmp file_test$998	; 2: 235 3

file_test$997:	; Assign £temporary5345 string_No#
x19346:	mov ax, @11633$string_No#	; 3: 184 3 89

file_test$998:	; Parameter 6 £temporary5345 8
x19349:	mov [bp + 14], ax	; 3: 137 70 14

file_test$999:	; Call 6 printf 0
x19352:	mov word [bp + 6], file_test$1000	; 5: 199 70 6 171 75
x19357:	mov [bp + 8], bp	; 3: 137 110 8
x19360:	add bp, 6	; 3: 131 197 6
x19363:	mov di, bp	; 2: 137 239
x19365:	add di, 2	; 3: 131 199 2
x19368:	jmp printf	; 3: 233 89 193

file_test$1000:	; PostCall 6

file_test$1001:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1002:	; Parameter 6 string_fileexists2022Main2Easm223A2025s0A# 6
x19371:	mov word [bp + 12], @11643$string_fileexists2022Main2Easm223A2025s0A#	; 5: 199 70 12 6 89

file_test$1003:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1004:	; Parameter 6 string_Main2Easm# 14
x19376:	mov word [bp + 20], @11644$string_Main2Easm#	; 5: 199 70 20 33 89

file_test$1005:	; Call 6 fileexists 8
x19381:	mov word [bp + 14], file_test$1006	; 5: 199 70 14 195 75
x19386:	mov [bp + 16], bp	; 3: 137 110 16
x19389:	add bp, 14	; 3: 131 197 14
x19392:	jmp fileexists	; 3: 233 19 19

file_test$1006:	; PostCall 6

file_test$1007:	; GetReturnValue £temporary5347

file_test$1008:	; Equal 1011 £temporary5347 0
x19395:	cmp bx, 0	; 3: 131 251 0
x19398:	je file_test$1011	; 2: 116 5

file_test$1009:	; Assign £temporary5352 string_Yes#
x19400:	mov ax, @11646$string_Yes#	; 3: 184 42 89

file_test$1010:	; Goto 1012
x19403:	jmp file_test$1012	; 2: 235 3

file_test$1011:	; Assign £temporary5352 string_No#
x19405:	mov ax, @11647$string_No#	; 3: 184 46 89

file_test$1012:	; Parameter 6 £temporary5352 8
x19408:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1013:	; Call 6 printf 0
x19411:	mov word [bp + 6], file_test$1014	; 5: 199 70 6 230 75
x19416:	mov [bp + 8], bp	; 3: 137 110 8
x19419:	add bp, 6	; 3: 131 197 6
x19422:	mov di, bp	; 2: 137 239
x19424:	add di, 2	; 3: 131 199 2
x19427:	jmp printf	; 3: 233 30 193

file_test$1014:	; PostCall 6

file_test$1015:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1016:	; Parameter 6 string_fileexists2022MainX2Easm223A2025s0A# 6
x19430:	mov word [bp + 12], @11657$string_fileexists2022MainX2Easm223A2025s0A#	; 5: 199 70 12 49 89

file_test$1017:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1018:	; Parameter 6 string_MainX2Easm# 14
x19435:	mov word [bp + 20], @11658$string_MainX2Easm#	; 5: 199 70 20 77 89

file_test$1019:	; Call 6 fileexists 8
x19440:	mov word [bp + 14], file_test$1020	; 5: 199 70 14 254 75
x19445:	mov [bp + 16], bp	; 3: 137 110 16
x19448:	add bp, 14	; 3: 131 197 14
x19451:	jmp fileexists	; 3: 233 216 18

file_test$1020:	; PostCall 6

file_test$1021:	; GetReturnValue £temporary5354

file_test$1022:	; Equal 1025 £temporary5354 0
x19454:	cmp bx, 0	; 3: 131 251 0
x19457:	je file_test$1025	; 2: 116 5

file_test$1023:	; Assign £temporary5359 string_Yes#
x19459:	mov ax, @11660$string_Yes#	; 3: 184 87 89

file_test$1024:	; Goto 1026
x19462:	jmp file_test$1026	; 2: 235 3

file_test$1025:	; Assign £temporary5359 string_No#
x19464:	mov ax, @11661$string_No#	; 3: 184 91 89

file_test$1026:	; Parameter 6 £temporary5359 8
x19467:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1027:	; Call 6 printf 0
x19470:	mov word [bp + 6], file_test$1028	; 5: 199 70 6 33 76
x19475:	mov [bp + 8], bp	; 3: 137 110 8
x19478:	add bp, 6	; 3: 131 197 6
x19481:	mov di, bp	; 2: 137 239
x19483:	add di, 2	; 3: 131 199 2
x19486:	jmp printf	; 3: 233 227 192

file_test$1028:	; PostCall 6

file_test$1029:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1030:	; Parameter 6 string_fileexists2022Main2Ec223A2025s0A# 6
x19489:	mov word [bp + 12], @11671$string_fileexists2022Main2Ec223A2025s0A#	; 5: 199 70 12 94 89

file_test$1031:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1032:	; Parameter 6 string_Main2Ec# 14
x19494:	mov word [bp + 20], @11672$string_Main2Ec#	; 5: 199 70 20 119 89

file_test$1033:	; Call 6 fileexists 8
x19499:	mov word [bp + 14], file_test$1034	; 5: 199 70 14 57 76
x19504:	mov [bp + 16], bp	; 3: 137 110 16
x19507:	add bp, 14	; 3: 131 197 14
x19510:	jmp fileexists	; 3: 233 157 18

file_test$1034:	; PostCall 6

file_test$1035:	; GetReturnValue £temporary5361

file_test$1036:	; Equal 1039 £temporary5361 0
x19513:	cmp bx, 0	; 3: 131 251 0
x19516:	je file_test$1039	; 2: 116 5

file_test$1037:	; Assign £temporary5366 string_Yes#
x19518:	mov ax, @11674$string_Yes#	; 3: 184 126 89

file_test$1038:	; Goto 1040
x19521:	jmp file_test$1040	; 2: 235 3

file_test$1039:	; Assign £temporary5366 string_No#
x19523:	mov ax, @11675$string_No#	; 3: 184 130 89

file_test$1040:	; Parameter 6 £temporary5366 8
x19526:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1041:	; Call 6 printf 0
x19529:	mov word [bp + 6], file_test$1042	; 5: 199 70 6 92 76
x19534:	mov [bp + 8], bp	; 3: 137 110 8
x19537:	add bp, 6	; 3: 131 197 6
x19540:	mov di, bp	; 2: 137 239
x19542:	add di, 2	; 3: 131 199 2
x19545:	jmp printf	; 3: 233 168 192

file_test$1042:	; PostCall 6

file_test$1043:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1044:	; Parameter 6 string_fileexists2022MainX2Ec223A2025s0A# 6
x19548:	mov word [bp + 12], @11685$string_fileexists2022MainX2Ec223A2025s0A#	; 5: 199 70 12 133 89

file_test$1045:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1046:	; Parameter 6 string_MainX2Ec# 14
x19553:	mov word [bp + 20], @11686$string_MainX2Ec#	; 5: 199 70 20 159 89

file_test$1047:	; Call 6 fileexists 8
x19558:	mov word [bp + 14], file_test$1048	; 5: 199 70 14 116 76
x19563:	mov [bp + 16], bp	; 3: 137 110 16
x19566:	add bp, 14	; 3: 131 197 14
x19569:	jmp fileexists	; 3: 233 98 18

file_test$1048:	; PostCall 6

file_test$1049:	; GetReturnValue £temporary5368

file_test$1050:	; Equal 1053 £temporary5368 0
x19572:	cmp bx, 0	; 3: 131 251 0
x19575:	je file_test$1053	; 2: 116 5

file_test$1051:	; Assign £temporary5373 string_Yes#
x19577:	mov ax, @11688$string_Yes#	; 3: 184 167 89

file_test$1052:	; Goto 1054
x19580:	jmp file_test$1054	; 2: 235 3

file_test$1053:	; Assign £temporary5373 string_No#
x19582:	mov ax, @11689$string_No#	; 3: 184 171 89

file_test$1054:	; Parameter 6 £temporary5373 8
x19585:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1055:	; Call 6 printf 0
x19588:	mov word [bp + 6], file_test$1056	; 5: 199 70 6 151 76
x19593:	mov [bp + 8], bp	; 3: 137 110 8
x19596:	add bp, 6	; 3: 131 197 6
x19599:	mov di, bp	; 2: 137 239
x19601:	add di, 2	; 3: 131 199 2
x19604:	jmp printf	; 3: 233 109 192

file_test$1056:	; PostCall 6

file_test$1057:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1058:	; Parameter 6 string_fileexists2022File2Ec223A2025s0A# 6
x19607:	mov word [bp + 12], @11699$string_fileexists2022File2Ec223A2025s0A#	; 5: 199 70 12 174 89

file_test$1059:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1060:	; Parameter 6 string_File2Ec# 14
x19612:	mov word [bp + 20], @11700$string_File2Ec#	; 5: 199 70 20 199 89

file_test$1061:	; Call 6 fileexists 8
x19617:	mov word [bp + 14], file_test$1062	; 5: 199 70 14 175 76
x19622:	mov [bp + 16], bp	; 3: 137 110 16
x19625:	add bp, 14	; 3: 131 197 14
x19628:	jmp fileexists	; 3: 233 39 18

file_test$1062:	; PostCall 6

file_test$1063:	; GetReturnValue £temporary5375

file_test$1064:	; Equal 1067 £temporary5375 0
x19631:	cmp bx, 0	; 3: 131 251 0
x19634:	je file_test$1067	; 2: 116 5

file_test$1065:	; Assign £temporary5380 string_Yes#
x19636:	mov ax, @11702$string_Yes#	; 3: 184 206 89

file_test$1066:	; Goto 1068
x19639:	jmp file_test$1068	; 2: 235 3

file_test$1067:	; Assign £temporary5380 string_No#
x19641:	mov ax, @11703$string_No#	; 3: 184 210 89

file_test$1068:	; Parameter 6 £temporary5380 8
x19644:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1069:	; Call 6 printf 0
x19647:	mov word [bp + 6], file_test$1070	; 5: 199 70 6 210 76
x19652:	mov [bp + 8], bp	; 3: 137 110 8
x19655:	add bp, 6	; 3: 131 197 6
x19658:	mov di, bp	; 2: 137 239
x19660:	add di, 2	; 3: 131 199 2
x19663:	jmp printf	; 3: 233 50 192

file_test$1070:	; PostCall 6

file_test$1071:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1072:	; Parameter 6 string_fileexists2022File2Ex223A2025s0A# 6
x19666:	mov word [bp + 12], @11713$string_fileexists2022File2Ex223A2025s0A#	; 5: 199 70 12 213 89

file_test$1073:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1074:	; Parameter 6 string_File2Ex# 14
x19671:	mov word [bp + 20], @11714$string_File2Ex#	; 5: 199 70 20 238 89

file_test$1075:	; Call 6 fileexists 8
x19676:	mov word [bp + 14], file_test$1076	; 5: 199 70 14 234 76
x19681:	mov [bp + 16], bp	; 3: 137 110 16
x19684:	add bp, 14	; 3: 131 197 14
x19687:	jmp fileexists	; 3: 233 236 17

file_test$1076:	; PostCall 6

file_test$1077:	; GetReturnValue £temporary5382

file_test$1078:	; Equal 1081 £temporary5382 0
x19690:	cmp bx, 0	; 3: 131 251 0
x19693:	je file_test$1081	; 2: 116 5

file_test$1079:	; Assign £temporary5387 string_Yes#
x19695:	mov ax, @11716$string_Yes#	; 3: 184 245 89

file_test$1080:	; Goto 1082
x19698:	jmp file_test$1082	; 2: 235 3

file_test$1081:	; Assign £temporary5387 string_No#
x19700:	mov ax, @11717$string_No#	; 3: 184 249 89

file_test$1082:	; Parameter 6 £temporary5387 8
x19703:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1083:	; Call 6 printf 0
x19706:	mov word [bp + 6], file_test$1084	; 5: 199 70 6 13 77
x19711:	mov [bp + 8], bp	; 3: 137 110 8
x19714:	add bp, 6	; 3: 131 197 6
x19717:	mov di, bp	; 2: 137 239
x19719:	add di, 2	; 3: 131 199 2
x19722:	jmp printf	; 3: 233 247 191

file_test$1084:	; PostCall 6

file_test$1085:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1086:	; Parameter 6 string_fileexists2022File2Eh223A2025s0A# 6
x19725:	mov word [bp + 12], @11727$string_fileexists2022File2Eh223A2025s0A#	; 5: 199 70 12 252 89

file_test$1087:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1088:	; Parameter 6 string_File2Eh# 14
x19730:	mov word [bp + 20], @11728$string_File2Eh#	; 5: 199 70 20 21 90

file_test$1089:	; Call 6 fileexists 8
x19735:	mov word [bp + 14], file_test$1090	; 5: 199 70 14 37 77
x19740:	mov [bp + 16], bp	; 3: 137 110 16
x19743:	add bp, 14	; 3: 131 197 14
x19746:	jmp fileexists	; 3: 233 177 17

file_test$1090:	; PostCall 6

file_test$1091:	; GetReturnValue £temporary5389

file_test$1092:	; Equal 1095 £temporary5389 0
x19749:	cmp bx, 0	; 3: 131 251 0
x19752:	je file_test$1095	; 2: 116 5

file_test$1093:	; Assign £temporary5394 string_Yes#
x19754:	mov ax, @11730$string_Yes#	; 3: 184 28 90

file_test$1094:	; Goto 1096
x19757:	jmp file_test$1096	; 2: 235 3

file_test$1095:	; Assign £temporary5394 string_No#
x19759:	mov ax, @11731$string_No#	; 3: 184 32 90

file_test$1096:	; Parameter 6 £temporary5394 8
x19762:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1097:	; Call 6 printf 0
x19765:	mov word [bp + 6], file_test$1098	; 5: 199 70 6 72 77
x19770:	mov [bp + 8], bp	; 3: 137 110 8
x19773:	add bp, 6	; 3: 131 197 6
x19776:	mov di, bp	; 2: 137 239
x19778:	add di, 2	; 3: 131 199 2
x19781:	jmp printf	; 3: 233 188 191

file_test$1098:	; PostCall 6

file_test$1099:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1100:	; Parameter 6 string_fileexists2022File2Ey223A2025s0A# 6
x19784:	mov word [bp + 12], @11741$string_fileexists2022File2Ey223A2025s0A#	; 5: 199 70 12 35 90

file_test$1101:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1102:	; Parameter 6 string_File2Ey# 14
x19789:	mov word [bp + 20], @11742$string_File2Ey#	; 5: 199 70 20 60 90

file_test$1103:	; Call 6 fileexists 8
x19794:	mov word [bp + 14], file_test$1104	; 5: 199 70 14 96 77
x19799:	mov [bp + 16], bp	; 3: 137 110 16
x19802:	add bp, 14	; 3: 131 197 14
x19805:	jmp fileexists	; 3: 233 118 17

file_test$1104:	; PostCall 6

file_test$1105:	; GetReturnValue £temporary5396

file_test$1106:	; Equal 1109 £temporary5396 0
x19808:	cmp bx, 0	; 3: 131 251 0
x19811:	je file_test$1109	; 2: 116 5

file_test$1107:	; Assign £temporary5401 string_Yes#
x19813:	mov ax, @11744$string_Yes#	; 3: 184 67 90

file_test$1108:	; Goto 1110
x19816:	jmp file_test$1110	; 2: 235 3

file_test$1109:	; Assign £temporary5401 string_No#
x19818:	mov ax, @11745$string_No#	; 3: 184 71 90

file_test$1110:	; Parameter 6 £temporary5401 8
x19821:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1111:	; Call 6 printf 0
x19824:	mov word [bp + 6], file_test$1112	; 5: 199 70 6 131 77
x19829:	mov [bp + 8], bp	; 3: 137 110 8
x19832:	add bp, 6	; 3: 131 197 6
x19835:	mov di, bp	; 2: 137 239
x19837:	add di, 2	; 3: 131 199 2
x19840:	jmp printf	; 3: 233 129 191

file_test$1112:	; PostCall 6

file_test$1113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1114:	; Parameter 6 string_fileexists2022File2Ep223A2025s0A# 6
x19843:	mov word [bp + 12], @11755$string_fileexists2022File2Ep223A2025s0A#	; 5: 199 70 12 74 90

file_test$1115:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1116:	; Parameter 6 string_File2Ep# 14
x19848:	mov word [bp + 20], @11756$string_File2Ep#	; 5: 199 70 20 99 90

file_test$1117:	; Call 6 fileexists 8
x19853:	mov word [bp + 14], file_test$1118	; 5: 199 70 14 155 77
x19858:	mov [bp + 16], bp	; 3: 137 110 16
x19861:	add bp, 14	; 3: 131 197 14
x19864:	jmp fileexists	; 3: 233 59 17

file_test$1118:	; PostCall 6

file_test$1119:	; GetReturnValue £temporary5403

file_test$1120:	; Equal 1123 £temporary5403 0
x19867:	cmp bx, 0	; 3: 131 251 0
x19870:	je file_test$1123	; 2: 116 5

file_test$1121:	; Assign £temporary5408 string_Yes#
x19872:	mov ax, @11758$string_Yes#	; 3: 184 106 90

file_test$1122:	; Goto 1124
x19875:	jmp file_test$1124	; 2: 235 3

file_test$1123:	; Assign £temporary5408 string_No#
x19877:	mov ax, @11759$string_No#	; 3: 184 110 90

file_test$1124:	; Parameter 6 £temporary5408 8
x19880:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1125:	; Call 6 printf 0
x19883:	mov word [bp + 6], file_test$1126	; 5: 199 70 6 190 77
x19888:	mov [bp + 8], bp	; 3: 137 110 8
x19891:	add bp, 6	; 3: 131 197 6
x19894:	mov di, bp	; 2: 137 239
x19896:	add di, 2	; 3: 131 199 2
x19899:	jmp printf	; 3: 233 70 191

file_test$1126:	; PostCall 6

file_test$1127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1128:	; Parameter 6 string_fileexists2022File2Ez223A2025s0A# 6
x19902:	mov word [bp + 12], @11769$string_fileexists2022File2Ez223A2025s0A#	; 5: 199 70 12 113 90

file_test$1129:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1130:	; Parameter 6 string_File2Ez# 14
x19907:	mov word [bp + 20], @11770$string_File2Ez#	; 5: 199 70 20 138 90

file_test$1131:	; Call 6 fileexists 8
x19912:	mov word [bp + 14], file_test$1132	; 5: 199 70 14 214 77
x19917:	mov [bp + 16], bp	; 3: 137 110 16
x19920:	add bp, 14	; 3: 131 197 14
x19923:	jmp fileexists	; 3: 233 0 17

file_test$1132:	; PostCall 6

file_test$1133:	; GetReturnValue £temporary5410

file_test$1134:	; Equal 1137 £temporary5410 0
x19926:	cmp bx, 0	; 3: 131 251 0
x19929:	je file_test$1137	; 2: 116 5

file_test$1135:	; Assign £temporary5415 string_Yes#
x19931:	mov ax, @11772$string_Yes#	; 3: 184 145 90

file_test$1136:	; Goto 1138
x19934:	jmp file_test$1138	; 2: 235 3

file_test$1137:	; Assign £temporary5415 string_No#
x19936:	mov ax, @11773$string_No#	; 3: 184 149 90

file_test$1138:	; Parameter 6 £temporary5415 8
x19939:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1139:	; Call 6 printf 0
x19942:	mov word [bp + 6], file_test$1140	; 5: 199 70 6 249 77
x19947:	mov [bp + 8], bp	; 3: 137 110 8
x19950:	add bp, 6	; 3: 131 197 6
x19953:	mov di, bp	; 2: 137 239
x19955:	add di, 2	; 3: 131 199 2
x19958:	jmp printf	; 3: 233 11 191

file_test$1140:	; PostCall 6

file_test$1141:	; Return 0
x19961:	mov ax, [bp]	; 3: 139 70 0
x19964:	mov di, [bp + 4]	; 3: 139 126 4
x19967:	mov bp, [bp + 2]	; 3: 139 110 2
x19970:	jmp ax	; 2: 255 224

file_test$1142:	; FunctionEnd file_test

@10855$string_in2Etxt#:
x19972:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10856$string_r#:
x19979:	db "r", 0	; 2: 114 0

@10859$string_outX2Etxt#:
x19981:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

@10860$string_w#:
x19990:	db "w", 0	; 2: 119 0

stderr:
x19992:	dw g_fileArray + 58	; 2: 160 13

@10868$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19994:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10869$string_inFilePtr20213D20NULL#:
x20040:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10870$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20058:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10879$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20123:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10880$string_outFilePtr20213D20NULL#:
x20169:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10881$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20188:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10890$string_25lf#:
x20253:	db "%lf", 0	; 4: 37 108 102 0

@10893$string_X12025f0A#:
x20257:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

@10896$string_X22025f0A#:
x20264:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

@10899$string_0A#:
x20271:	db 10, 0	; 2: 10 0

@10903$string_in2Etxt#:
x20273:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10904$string_r#:
x20280:	db "r", 0	; 2: 114 0

@10907$string_outY2Etxt#:
x20282:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

@10908$string_w#:
x20291:	db "w", 0	; 2: 119 0

@10916$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20293:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10917$string_inFilePtr20213D20NULL#:
x20339:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10918$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20357:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10927$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20422:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10928$string_outFilePtr20213D20NULL#:
x20468:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10929$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20487:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10937$string_25i#:
x20552:	db "%i", 0	; 3: 37 105 0

@10940$string_size2025i0A#:
x20555:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10942$string_Y20size2025i0A#:
x20564:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

@10950$string_25lf#:
x20575:	db "%lf", 0	; 4: 37 108 102 0

@10953$string_Y12025f0A#:
x20579:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

@10956$string_Y22025f0A#:
x20586:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

@10959$string_0A#:
x20593:	db 10, 0	; 2: 10 0

@10963$string_Y#:
x20595:	db "Y", 0	; 2: 89 0

@10969$string_2225s2220has20been20removed0A#:
x20597:	db 34, "%s", 34, " has been removed", 10, 0	; 23: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 10 0

@10971$string_Error202225s222025i3A2025s2E0A#:
x20620:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10974$string_X#:
x20640:	db "X", 0	; 2: 88 0

@10976$string_Y#:
x20642:	db "Y", 0	; 2: 89 0

@10978$string_w#:
x20644:	db "w", 0	; 2: 119 0

@10981$string_Hello20X#:
x20646:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

@10988$string_2225s2220has20been20renamed20to202225s222E0A#:
x20654:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10990$string_Error202225s22202225s222025i3A2025s2E0A#:
x20686:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10993$string_X2#:
x20711:	db "X2", 0	; 3: 88 50 0

@10995$string_Y2#:
x20714:	db "Y2", 0	; 3: 89 50 0

@11001$string_2225s2220has20been20renamed20to202225s222E0A#:
x20717:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@11003$string_Error202225s22202225s222025i3A2025s2E0A#:
x20749:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@11006$string_Z#:
x20774:	db "Z", 0	; 2: 90 0

@11008$string_w#:
x20776:	db "w", 0	; 2: 119 0

@11011$string_Hello20Z#:
x20778:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

@11018$string_2225s2220has20been20removed2E0A#:
x20786:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@11020$string_Error202225s222025i3A2025s2E0A#:
x20810:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@11023$string_Z2#:
x20830:	db "Z2", 0	; 3: 90 50 0

@11029$string_2225s2220has20been20removed2E0A#:
x20833:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@11031$string_Error202225s222025i3A2025s2E0A#:
x20857:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@11034$string_PBook2Etxt#:
x20877:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

@11035$string_r#:
x20887:	db "r", 0	; 2: 114 0

@11043$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20889:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11044$string_inFilePtr20213D20NULL#:
x20935:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11045$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20953:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11049$string_0A252D24s20252D24s0A#:
x21018:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

@11050$string_Name#:
x21032:	db "Name", 0	; 5: 78 97 109 101 0

@11051$string_Phone#:
x21037:	db "Phone", 0	; 6: 80 104 111 110 101 0

@11053$string_252D24s20252D24s0A#:
x21043:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@11054$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x21056:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@11055$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x21081:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@11059$string_25i#:
x21106:	db "%i", 0	; 3: 37 105 0

@11062$string_size2025i0A#:
x21109:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@11075$string_25s25s#:
x21118:	db "%s%s", 0	; 5: 37 115 37 115 0

@11077$string_252D24s20252D24s0A#:
x21123:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@11079$string_0A#:
x21136:	db 10, 0	; 2: 10 0

@11082$string_TestX2Ebin#:
x21138:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@11083$string_w#:
x21148:	db "w", 0	; 2: 119 0

@11091$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21150:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11092$string_outFilePtr20213D20NULL#:
x21196:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11093$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21215:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11122$string_TestX2Ebin#:
x21280:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@11123$string_r#:
x21290:	db "r", 0	; 2: 114 0

@11133$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21292:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11134$string_inFilePtr20213D20NULL#:
x21338:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11135$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21356:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11145$string_size13A2025i0A#:
x21421:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

@11159$string_index13A2025i3A20value2025f0A#:
x21432:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11161$string_0A#:
x21454:	db 10, 0	; 2: 10 0

@11164$string_TestY2Ebin#:
x21456:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11165$string_w#:
x21466:	db "w", 0	; 2: 119 0

@11173$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21468:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11174$string_outFilePtr20213D20NULL#:
x21514:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11175$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21533:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11198$string_TestY2Ebin#:
x21598:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11199$string_r#:
x21608:	db "r", 0	; 2: 114 0

@11207$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21610:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11208$string_inFilePtr20213D20NULL#:
x21656:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11209$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21674:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11226$string_index23A2025i3A20value2025f0A#:
x21739:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11230$string_0A#:
x21761:	db 10, 0	; 2: 10 0

@11233$string_TestY2Ebin#:
x21763:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11234$string_r#:
x21773:	db "r", 0	; 2: 114 0

@11242$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21775:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11243$string_inFilePtr20213D20NULL#:
x21821:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11244$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21839:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11262$string_index33A2025i3A20value2025f0A#:
x21904:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11266$string_0A#:
x21926:	db 10, 0	; 2: 10 0

@11269$string_TestX2Ebin#:
x21928:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@11270$string_r#:
x21938:	db "r", 0	; 2: 114 0

@11279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21940:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11280$string_inFilePtr20213D20NULL#:
x21986:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11281$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22004:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11291$string_size43A2025i20total2025i0A#:
x22069:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

@11293$int2$8#:
x22089:	dw 8	; 2: 8 0

@11297$int2$8#:
x22091:	dw 8	; 2: 8 0

@11304$int2$8#:
x22093:	dw 8	; 2: 8 0

@11312$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22095:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11313$string_p20213D20NULL#:
x22141:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

@11314$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22151:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11318$string_malloc43A2025u2025u2025u0A#:
x22216:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

@11328$string_index43A2025i3A20value2025f0A#:
x22235:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11330$int2$8#:
x22257:	dw 8	; 2: 8 0

@11334$string_0A#:
x22259:	db 10, 0	; 2: 10 0

@11515$string_Block2Ebin#:
x22261:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11516$string_w#:
x22271:	db "w", 0	; 2: 119 0

@11519$string_Block2Ebin#:
x22273:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11520$string_r#:
x22283:	db "r", 0	; 2: 114 0

@11528$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22285:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11529$string_outFilePtr20213D20NULL#:
x22331:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11530$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22350:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11539$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22415:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11540$string_inFilePtr20213D20NULL#:
x22461:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11541$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22479:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11561$string_Name20203A2025s0A#:
x22544:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

@11564$string_Phone203A2025d0A#:
x22556:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

@11568$string_outx2Etxt#:
x22568:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

@11569$string_r#:
x22577:	db "r", 0	; 2: 114 0

@11579$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22579:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11580$string_inFilePtr20213D20NULL#:
x22625:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11581$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22643:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11590$string_ftell2025i0A#:
x22708:	db "ftell %i", 10, 0	; 10: 102 116 101 108 108 32 37 105 10 0

@11601$string_3C25c3E2025i2025i0A#:
x22718:	db "<%c> %i %i", 10, 0	; 12: 60 37 99 62 32 37 105 32 37 105 10 0

@11612$string_0A#:
x22730:	db 10, 0	; 2: 10 0

@11615$string_fileexists2022X223A2025s0A#:
x22732:	db "fileexists ", 34, "X", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 88 34 58 32 37 115 10 0

@11616$string_X#:
x22752:	db "X", 0	; 2: 88 0

@11618$string_Yes#:
x22754:	db "Yes", 0	; 4: 89 101 115 0

@11619$string_No#:
x22758:	db "No", 0	; 3: 78 111 0

@11629$string_fileexists2022Y223A2025s0A#:
x22761:	db "fileexists ", 34, "Y", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 89 34 58 32 37 115 10 0

@11630$string_Y#:
x22781:	db "Y", 0	; 2: 89 0

@11632$string_Yes#:
x22783:	db "Yes", 0	; 4: 89 101 115 0

@11633$string_No#:
x22787:	db "No", 0	; 3: 78 111 0

@11643$string_fileexists2022Main2Easm223A2025s0A#:
x22790:	db "fileexists ", 34, "Main.asm", 34, ": %s", 10, 0	; 27: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 97 115 109 34 58 32 37 115 10 0

@11644$string_Main2Easm#:
x22817:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

@11646$string_Yes#:
x22826:	db "Yes", 0	; 4: 89 101 115 0

@11647$string_No#:
x22830:	db "No", 0	; 3: 78 111 0

@11657$string_fileexists2022MainX2Easm223A2025s0A#:
x22833:	db "fileexists ", 34, "MainX.asm", 34, ": %s", 10, 0	; 28: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 97 115 109 34 58 32 37 115 10 0

@11658$string_MainX2Easm#:
x22861:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

@11660$string_Yes#:
x22871:	db "Yes", 0	; 4: 89 101 115 0

@11661$string_No#:
x22875:	db "No", 0	; 3: 78 111 0

@11671$string_fileexists2022Main2Ec223A2025s0A#:
x22878:	db "fileexists ", 34, "Main.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 99 34 58 32 37 115 10 0

@11672$string_Main2Ec#:
x22903:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

@11674$string_Yes#:
x22910:	db "Yes", 0	; 4: 89 101 115 0

@11675$string_No#:
x22914:	db "No", 0	; 3: 78 111 0

@11685$string_fileexists2022MainX2Ec223A2025s0A#:
x22917:	db "fileexists ", 34, "MainX.c", 34, ": %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 99 34 58 32 37 115 10 0

@11686$string_MainX2Ec#:
x22943:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

@11688$string_Yes#:
x22951:	db "Yes", 0	; 4: 89 101 115 0

@11689$string_No#:
x22955:	db "No", 0	; 3: 78 111 0

@11699$string_fileexists2022File2Ec223A2025s0A#:
x22958:	db "fileexists ", 34, "File.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 99 34 58 32 37 115 10 0

@11700$string_File2Ec#:
x22983:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

@11702$string_Yes#:
x22990:	db "Yes", 0	; 4: 89 101 115 0

@11703$string_No#:
x22994:	db "No", 0	; 3: 78 111 0

@11713$string_fileexists2022File2Ex223A2025s0A#:
x22997:	db "fileexists ", 34, "File.x", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 120 34 58 32 37 115 10 0

@11714$string_File2Ex#:
x23022:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

@11716$string_Yes#:
x23029:	db "Yes", 0	; 4: 89 101 115 0

@11717$string_No#:
x23033:	db "No", 0	; 3: 78 111 0

@11727$string_fileexists2022File2Eh223A2025s0A#:
x23036:	db "fileexists ", 34, "File.h", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 104 34 58 32 37 115 10 0

@11728$string_File2Eh#:
x23061:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

@11730$string_Yes#:
x23068:	db "Yes", 0	; 4: 89 101 115 0

@11731$string_No#:
x23072:	db "No", 0	; 3: 78 111 0

@11741$string_fileexists2022File2Ey223A2025s0A#:
x23075:	db "fileexists ", 34, "File.y", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 121 34 58 32 37 115 10 0

@11742$string_File2Ey#:
x23100:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

@11744$string_Yes#:
x23107:	db "Yes", 0	; 4: 89 101 115 0

@11745$string_No#:
x23111:	db "No", 0	; 3: 78 111 0

@11755$string_fileexists2022File2Ep223A2025s0A#:
x23114:	db "fileexists ", 34, "File.p", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 112 34 58 32 37 115 10 0

@11756$string_File2Ep#:
x23139:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

@11758$string_Yes#:
x23146:	db "Yes", 0	; 4: 89 101 115 0

@11759$string_No#:
x23150:	db "No", 0	; 3: 78 111 0

@11769$string_fileexists2022File2Ez223A2025s0A#:
x23153:	db "fileexists ", 34, "File.z", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 122 34 58 32 37 115 10 0

@11770$string_File2Ez#:
x23178:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

@11772$string_Yes#:
x23185:	db "Yes", 0	; 4: 89 101 115 0

@11773$string_No#:
x23189:	db "No", 0	; 3: 78 111 0

fopen:	; Assign index 0
x23192:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x23197:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x23201:	jge fopen$21	; 2: 125 78

fopen$2:	; UnsignedMultiply £temporary889 index 29
x23203:	mov ax, [bp + 10]	; 3: 139 70 10
x23206:	xor dx, dx	; 2: 49 210
x23208:	mul word [@2075$int2$29#]	; 4: 247 38 255 90

fopen$3:	; BinaryAdd £temporary890 g_fileArray £temporary889
x23212:	mov si, g_fileArray	; 3: 190 102 13
x23215:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary888 -> £temporary890 £temporary890 0

fopen$5:	; NotEqual 19 £temporary888.open$0 -> £temporary890 0
x23217:	cmp word [si], 0	; 3: 131 60 0
x23220:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x23222:	mov ax, [bp + 6]	; 3: 139 70 6
x23225:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x23228:	mov ax, [bp + 8]	; 3: 139 70 8
x23231:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; UnsignedMultiply £temporary894 index 29
x23234:	mov ax, [bp + 10]	; 3: 139 70 10
x23237:	xor dx, dx	; 2: 49 210
x23239:	mul word [@2083$int2$29#]	; 4: 247 38 1 91

fopen$10:	; BinaryAdd £temporary895 g_fileArray £temporary894
x23243:	mov si, g_fileArray	; 3: 190 102 13
x23246:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary893 -> £temporary895 £temporary895 0

fopen$12:	; address £temporary896 £temporary893 -> £temporary895

fopen$13:	; Parameter 12 £temporary896 10
x23248:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x23251:	mov word [bp + 12], fopen$15	; 5: 199 70 12 225 90
x23256:	mov [bp + 14], bp	; 3: 137 110 14
x23259:	add bp, 12	; 3: 131 197 12
x23262:	nop	; 1: 144
x23263:	jmp freopen	; 2: 235 34

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary897

fopen$17:	; SetReturnValue £temporary897

fopen$18:	; Return £temporary897
x23265:	mov ax, [bp]	; 3: 139 70 0
x23268:	mov di, [bp + 4]	; 3: 139 126 4
x23271:	mov bp, [bp + 2]	; 3: 139 110 2
x23274:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x23276:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x23279:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x23281:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x23284:	mov ax, [bp]	; 3: 139 70 0
x23287:	mov di, [bp + 4]	; 3: 139 126 4
x23290:	mov bp, [bp + 2]	; 3: 139 110 2
x23293:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

@2075$int2$29#:
x23295:	dw 29	; 2: 29 0

@2083$int2$29#:
x23297:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x23299:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x23304:	mov ax, [bp + 8]	; 3: 139 70 8
x23307:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x23310:	mov word [bp + 22], @2098$string_r#	; 5: 199 70 22 125 93

freopen$4:	; Call 14 strcmp 0
x23315:	mov word [bp + 14], freopen$5	; 5: 199 70 14 33 91
x23320:	mov [bp + 16], bp	; 3: 137 110 16
x23323:	add bp, 14	; 3: 131 197 14
x23326:	jmp strcmp	; 3: 233 107 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary901

freopen$7:	; NotEqual 16 £temporary901 0
x23329:	cmp bx, 0	; 3: 131 251 0
x23332:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x23334:	mov ax, [bp + 6]	; 3: 139 70 6
x23337:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x23340:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x23344:	mov word [bp + 14], freopen$12	; 5: 199 70 14 62 91
x23349:	mov [bp + 16], bp	; 3: 137 110 16
x23352:	add bp, 14	; 3: 131 197 14
x23355:	jmp @2053$fileopen	; 3: 233 239 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary903

freopen$14:	; Assign handle £temporary903
x23358:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 130
x23361:	jmp freopen$130	; 3: 233 210 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x23364:	mov ax, [bp + 8]	; 3: 139 70 8
x23367:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x23370:	mov word [bp + 22], @2106$string_w#	; 5: 199 70 22 127 93

freopen$19:	; Call 14 strcmp 0
x23375:	mov word [bp + 14], freopen$20	; 5: 199 70 14 93 91
x23380:	mov [bp + 16], bp	; 3: 137 110 16
x23383:	add bp, 14	; 3: 131 197 14
x23386:	jmp strcmp	; 3: 233 47 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary904

freopen$22:	; NotEqual 30 £temporary904 0
x23389:	cmp bx, 0	; 3: 131 251 0
x23392:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x23394:	mov ax, [bp + 6]	; 3: 139 70 6
x23397:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x23400:	mov word [bp + 14], freopen$26	; 5: 199 70 14 118 91
x23405:	mov [bp + 16], bp	; 3: 137 110 16
x23408:	add bp, 14	; 3: 131 197 14
x23411:	jmp filecreate	; 3: 233 228 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary906

freopen$28:	; Assign handle £temporary906
x23414:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 130
x23417:	jmp freopen$130	; 3: 233 154 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x23420:	mov ax, [bp + 8]	; 3: 139 70 8
x23423:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x23426:	mov word [bp + 22], @2112$string_a#	; 5: 199 70 22 129 93

freopen$33:	; Call 14 strcmp 0
x23431:	mov word [bp + 14], freopen$34	; 5: 199 70 14 149 91
x23436:	mov [bp + 16], bp	; 3: 137 110 16
x23439:	add bp, 14	; 3: 131 197 14
x23442:	jmp strcmp	; 3: 233 247 1

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary907

freopen$36:	; NotEqual 59 £temporary907 0
x23445:	cmp bx, 0	; 3: 131 251 0
x23448:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x23450:	mov ax, [bp + 6]	; 3: 139 70 6
x23453:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x23456:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x23460:	mov word [bp + 14], freopen$41	; 5: 199 70 14 178 91
x23465:	mov [bp + 16], bp	; 3: 137 110 16
x23468:	add bp, 14	; 3: 131 197 14
x23471:	jmp @2053$fileopen	; 3: 233 123 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary909

freopen$43:	; Assign handle £temporary909
x23474:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x23477:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23481:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x23483:	mov ax, [bp + 10]	; 3: 139 70 10
x23486:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x23489:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x23494:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x23499:	mov word [bp + 14], freopen$50	; 5: 199 70 14 217 91
x23504:	mov [bp + 16], bp	; 3: 137 110 16
x23507:	add bp, 14	; 3: 131 197 14
x23510:	jmp fseek	; 3: 233 178 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 130
x23513:	jmp freopen$130	; 3: 233 58 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x23516:	mov ax, [bp + 6]	; 3: 139 70 6
x23519:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x23522:	mov word [bp + 14], freopen$55	; 5: 199 70 14 240 91
x23527:	mov [bp + 16], bp	; 3: 137 110 16
x23530:	add bp, 14	; 3: 131 197 14
x23533:	jmp filecreate	; 3: 233 106 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary912

freopen$57:	; Assign handle £temporary912
x23536:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 130
x23539:	jmp freopen$130	; 3: 233 32 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x23542:	mov ax, [bp + 8]	; 3: 139 70 8
x23545:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x23548:	mov word [bp + 22], @2129$string_r2B#	; 5: 199 70 22 131 93

freopen$62:	; Call 14 strcmp 0
x23553:	mov word [bp + 14], freopen$63	; 5: 199 70 14 15 92
x23558:	mov [bp + 16], bp	; 3: 137 110 16
x23561:	add bp, 14	; 3: 131 197 14
x23564:	jmp strcmp	; 3: 233 125 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary913

freopen$65:	; NotEqual 74 £temporary913 0
x23567:	cmp bx, 0	; 3: 131 251 0
x23570:	jne freopen$74	; 2: 117 30

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 name 6
x23572:	mov ax, [bp + 6]	; 3: 139 70 6
x23575:	mov [bp + 20], ax	; 3: 137 70 20

freopen$68:	; Parameter 14 66 8
x23578:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$69:	; Call 14 fileopen 0
x23582:	mov word [bp + 14], freopen$70	; 5: 199 70 14 44 92
x23587:	mov [bp + 16], bp	; 3: 137 110 16
x23590:	add bp, 14	; 3: 131 197 14
x23593:	jmp @2053$fileopen	; 3: 233 1 2

freopen$70:	; PostCall 14

freopen$71:	; GetReturnValue £temporary915

freopen$72:	; Assign handle £temporary915
x23596:	mov [bp + 12], bx	; 3: 137 94 12

freopen$73:	; Goto 130
x23599:	jmp freopen$130	; 3: 233 228 0

freopen$74:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$75:	; Parameter 14 mode 6
x23602:	mov ax, [bp + 8]	; 3: 139 70 8
x23605:	mov [bp + 20], ax	; 3: 137 70 20

freopen$76:	; Parameter 14 string_w2B# 8
x23608:	mov word [bp + 22], @2137$string_w2B#	; 5: 199 70 22 134 93

freopen$77:	; Call 14 strcmp 0
x23613:	mov word [bp + 14], freopen$78	; 5: 199 70 14 75 92
x23618:	mov [bp + 16], bp	; 3: 137 110 16
x23621:	add bp, 14	; 3: 131 197 14
x23624:	jmp strcmp	; 3: 233 65 1

freopen$78:	; PostCall 14

freopen$79:	; GetReturnValue £temporary916

freopen$80:	; NotEqual 102 £temporary916 0
x23627:	cmp bx, 0	; 3: 131 251 0
x23630:	jne freopen$102	; 2: 117 80

freopen$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$82:	; Parameter 14 name 6
x23632:	mov ax, [bp + 6]	; 3: 139 70 6
x23635:	mov [bp + 20], ax	; 3: 137 70 20

freopen$83:	; Call 14 fileexists 0
x23638:	mov word [bp + 14], freopen$84	; 5: 199 70 14 100 92
x23643:	mov [bp + 16], bp	; 3: 137 110 16
x23646:	add bp, 14	; 3: 131 197 14
x23649:	jmp fileexists	; 3: 233 114 2

freopen$84:	; PostCall 14

freopen$85:	; GetReturnValue £temporary918

freopen$86:	; Equal 95 £temporary918 0
x23652:	cmp bx, 0	; 3: 131 251 0
x23655:	je freopen$95	; 2: 116 30

freopen$87:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$88:	; Parameter 14 name 6
x23657:	mov ax, [bp + 6]	; 3: 139 70 6
x23660:	mov [bp + 20], ax	; 3: 137 70 20

freopen$89:	; Parameter 14 66 8
x23663:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$90:	; Call 14 fileopen 0
x23667:	mov word [bp + 14], freopen$91	; 5: 199 70 14 129 92
x23672:	mov [bp + 16], bp	; 3: 137 110 16
x23675:	add bp, 14	; 3: 131 197 14
x23678:	jmp @2053$fileopen	; 3: 233 172 1

freopen$91:	; PostCall 14

freopen$92:	; GetReturnValue £temporary919

freopen$93:	; Assign handle £temporary919
x23681:	mov [bp + 12], bx	; 3: 137 94 12

freopen$94:	; Goto 130
x23684:	jmp freopen$130	; 3: 233 143 0

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x23687:	mov ax, [bp + 6]	; 3: 139 70 6
x23690:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Call 14 filecreate 0
x23693:	mov word [bp + 14], freopen$98	; 5: 199 70 14 155 92
x23698:	mov [bp + 16], bp	; 3: 137 110 16
x23701:	add bp, 14	; 3: 131 197 14
x23704:	jmp filecreate	; 3: 233 191 1

freopen$98:	; PostCall 14

freopen$99:	; GetReturnValue £temporary920

freopen$100:	; Assign handle £temporary920
x23707:	mov [bp + 12], bx	; 3: 137 94 12

freopen$101:	; Goto 130
x23710:	jmp freopen$130	; 2: 235 118

freopen$102:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$103:	; Parameter 14 mode 6
x23712:	mov ax, [bp + 8]	; 3: 139 70 8
x23715:	mov [bp + 20], ax	; 3: 137 70 20

freopen$104:	; Parameter 14 string_a2B# 8
x23718:	mov word [bp + 22], @2149$string_a2B#	; 5: 199 70 22 137 93

freopen$105:	; Call 14 strcmp 0
x23723:	mov word [bp + 14], freopen$106	; 5: 199 70 14 185 92
x23728:	mov [bp + 16], bp	; 3: 137 110 16
x23731:	add bp, 14	; 3: 131 197 14
x23734:	jmp strcmp	; 3: 233 211 0

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary922

freopen$108:	; NotEqual 130 £temporary922 0
x23737:	cmp bx, 0	; 3: 131 251 0
x23740:	jne freopen$130	; 2: 117 88

freopen$109:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$110:	; Parameter 14 name 6
x23742:	mov ax, [bp + 6]	; 3: 139 70 6
x23745:	mov [bp + 20], ax	; 3: 137 70 20

freopen$111:	; Parameter 14 66 8
x23748:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$112:	; Call 14 fileopen 0
x23752:	mov word [bp + 14], freopen$113	; 5: 199 70 14 214 92
x23757:	mov [bp + 16], bp	; 3: 137 110 16
x23760:	add bp, 14	; 3: 131 197 14
x23763:	jmp @2053$fileopen	; 3: 233 87 1

freopen$113:	; PostCall 14

freopen$114:	; GetReturnValue £temporary924

freopen$115:	; Assign handle £temporary924
x23766:	mov [bp + 12], bx	; 3: 137 94 12

freopen$116:	; Equal 124 handle -1
x23769:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23773:	je freopen$124	; 2: 116 32

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 stream 6
x23775:	mov ax, [bp + 10]	; 3: 139 70 10
x23778:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 0 8
x23781:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$120:	; Parameter 14 2 10
x23786:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$121:	; Call 14 fseek 0
x23791:	mov word [bp + 14], freopen$122	; 5: 199 70 14 253 92
x23796:	mov [bp + 16], bp	; 3: 137 110 16
x23799:	add bp, 14	; 3: 131 197 14
x23802:	jmp fseek	; 3: 233 142 1

freopen$122:	; PostCall 14

freopen$123:	; Goto 130
x23805:	jmp freopen$130	; 2: 235 23

freopen$124:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$125:	; Parameter 14 name 6
x23807:	mov ax, [bp + 6]	; 3: 139 70 6
x23810:	mov [bp + 20], ax	; 3: 137 70 20

freopen$126:	; Call 14 filecreate 0
x23813:	mov word [bp + 14], freopen$127	; 5: 199 70 14 19 93
x23818:	mov [bp + 16], bp	; 3: 137 110 16
x23821:	add bp, 14	; 3: 131 197 14
x23824:	jmp filecreate	; 3: 233 71 1

freopen$127:	; PostCall 14

freopen$128:	; GetReturnValue £temporary927

freopen$129:	; Assign handle £temporary927
x23827:	mov [bp + 12], bx	; 3: 137 94 12

freopen$130:	; Equal 147 handle -1
x23830:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23834:	je freopen$147	; 2: 116 76

freopen$131:	; Deref £temporary929 -> stream stream 0
x23836:	mov si, [bp + 10]	; 3: 139 118 10

freopen$132:	; Assign £temporary929 -> stream 1
x23839:	mov word [si], 1	; 4: 199 4 1 0

freopen$133:	; Deref £temporary930 -> stream stream 2
x23843:	mov si, [bp + 10]	; 3: 139 118 10

freopen$134:	; Assign £temporary930 -> stream handle
x23846:	mov ax, [bp + 12]	; 3: 139 70 12
x23849:	mov [si + 2], ax	; 3: 137 68 2

freopen$135:	; Deref £temporary931 -> stream stream 25
x23852:	mov si, [bp + 10]	; 3: 139 118 10

freopen$136:	; Assign £temporary931 -> stream 0
x23855:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$137:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$138:	; Deref £temporary932 -> stream stream 4
x23860:	mov si, [bp + 10]	; 3: 139 118 10

freopen$139:	; Parameter 14 £temporary932 -> stream 6
x23863:	mov [bp + 20], si	; 3: 137 118 20
x23866:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$140:	; Parameter 14 name 8
x23870:	mov ax, [bp + 6]	; 3: 139 70 6
x23873:	mov [bp + 22], ax	; 3: 137 70 22

freopen$141:	; Call 14 strcpy 0
x23876:	mov word [bp + 14], freopen$142	; 5: 199 70 14 82 93
x23881:	mov [bp + 16], bp	; 3: 137 110 16
x23884:	add bp, 14	; 3: 131 197 14
x23887:	jmp strcpy	; 3: 233 162 1

freopen$142:	; PostCall 14

freopen$143:	; Deref £temporary934 -> stream stream 27
x23890:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary934 -> stream 0
x23893:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$145:	; SetReturnValue stream
x23898:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$146:	; Return stream
x23901:	mov ax, [bp]	; 3: 139 70 0
x23904:	mov di, [bp + 4]	; 3: 139 126 4
x23907:	mov bp, [bp + 2]	; 3: 139 110 2
x23910:	jmp ax	; 2: 255 224

freopen$147:	; Deref £temporary935 -> stream stream 0
x23912:	mov si, [bp + 10]	; 3: 139 118 10

freopen$148:	; Assign £temporary935 -> stream 0
x23915:	mov word [si], 0	; 4: 199 4 0 0

freopen$149:	; SetReturnValue 0
x23919:	mov bx, 0	; 3: 187 0 0

freopen$150:	; Return 0
x23922:	mov ax, [bp]	; 3: 139 70 0
x23925:	mov di, [bp + 4]	; 3: 139 126 4
x23928:	mov bp, [bp + 2]	; 3: 139 110 2
x23931:	jmp ax	; 2: 255 224

freopen$151:	; FunctionEnd freopen

@2098$string_r#:
x23933:	db "r", 0	; 2: 114 0

@2106$string_w#:
x23935:	db "w", 0	; 2: 119 0

@2112$string_a#:
x23937:	db "a", 0	; 2: 97 0

@2129$string_r2B#:
x23939:	db "r+", 0	; 3: 114 43 0

@2137$string_w2B#:
x23942:	db "w+", 0	; 3: 119 43 0

@2149$string_a2B#:
x23945:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x23948:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3964 left index
x23953:	mov si, [bp + 6]	; 3: 139 118 6
x23956:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3963 -> £temporary3964 £temporary3964 0

strcmp$3:	; NotEqual 9 £temporary3963 -> £temporary3964 0
x23959:	cmp byte [si], 0	; 3: 128 60 0
x23962:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3967 right index
x23964:	mov si, [bp + 8]	; 3: 139 118 8
x23967:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3966 -> £temporary3967 £temporary3967 0

strcmp$6:	; NotEqual 9 £temporary3966 -> £temporary3967 0
x23970:	cmp byte [si], 0	; 3: 128 60 0
x23973:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x23975:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x23978:	mov ax, [bp]	; 3: 139 70 0
x23981:	mov di, [bp + 4]	; 3: 139 126 4
x23984:	mov bp, [bp + 2]	; 3: 139 110 2
x23987:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3971 left index
x23989:	mov si, [bp + 6]	; 3: 139 118 6
x23992:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3970 -> £temporary3971 £temporary3971 0

strcmp$11:	; NotEqual 14 £temporary3970 -> £temporary3971 0
x23995:	cmp byte [si], 0	; 3: 128 60 0
x23998:	jne strcmp$14	; 2: 117 14

strcmp$12:	; SetReturnValue -1
x24000:	mov bx, -1	; 3: 187 255 255

strcmp$13:	; Return -1
x24003:	mov ax, [bp]	; 3: 139 70 0
x24006:	mov di, [bp + 4]	; 3: 139 126 4
x24009:	mov bp, [bp + 2]	; 3: 139 110 2
x24012:	jmp ax	; 2: 255 224

strcmp$14:	; BinaryAdd £temporary3974 right index
x24014:	mov si, [bp + 8]	; 3: 139 118 8
x24017:	add si, [bp + 10]	; 3: 3 118 10

strcmp$15:	; Deref £temporary3973 -> £temporary3974 £temporary3974 0

strcmp$16:	; NotEqual 19 £temporary3973 -> £temporary3974 0
x24020:	cmp byte [si], 0	; 3: 128 60 0
x24023:	jne strcmp$19	; 2: 117 14

strcmp$17:	; SetReturnValue 1
x24025:	mov bx, 1	; 3: 187 1 0

strcmp$18:	; Return 1
x24028:	mov ax, [bp]	; 3: 139 70 0
x24031:	mov di, [bp + 4]	; 3: 139 126 4
x24034:	mov bp, [bp + 2]	; 3: 139 110 2
x24037:	jmp ax	; 2: 255 224

strcmp$19:	; BinaryAdd £temporary3977 left index
x24039:	mov si, [bp + 6]	; 3: 139 118 6
x24042:	add si, [bp + 10]	; 3: 3 118 10

strcmp$20:	; Deref £temporary3976 -> £temporary3977 £temporary3977 0

strcmp$21:	; BinaryAdd £temporary3979 right index
x24045:	mov di, [bp + 8]	; 3: 139 126 8
x24048:	add di, [bp + 10]	; 3: 3 126 10

strcmp$22:	; Deref £temporary3978 -> £temporary3979 £temporary3979 0

strcmp$23:	; SignedGreaterThanEqual 26 £temporary3976 -> £temporary3977 £temporary3978 -> £temporary3979
x24051:	mov al, [di]	; 2: 138 5
x24053:	cmp [si], al	; 2: 56 4
x24055:	jge strcmp$26	; 2: 125 14

strcmp$24:	; SetReturnValue -1
x24057:	mov bx, -1	; 3: 187 255 255

strcmp$25:	; Return -1
x24060:	mov ax, [bp]	; 3: 139 70 0
x24063:	mov di, [bp + 4]	; 3: 139 126 4
x24066:	mov bp, [bp + 2]	; 3: 139 110 2
x24069:	jmp ax	; 2: 255 224

strcmp$26:	; BinaryAdd £temporary3982 left index
x24071:	mov si, [bp + 6]	; 3: 139 118 6
x24074:	add si, [bp + 10]	; 3: 3 118 10

strcmp$27:	; Deref £temporary3981 -> £temporary3982 £temporary3982 0

strcmp$28:	; BinaryAdd £temporary3984 right index
x24077:	mov di, [bp + 8]	; 3: 139 126 8
x24080:	add di, [bp + 10]	; 3: 3 126 10

strcmp$29:	; Deref £temporary3983 -> £temporary3984 £temporary3984 0

strcmp$30:	; SignedLessThanEqual 33 £temporary3981 -> £temporary3982 £temporary3983 -> £temporary3984
x24083:	mov al, [di]	; 2: 138 5
x24085:	cmp [si], al	; 2: 56 4
x24087:	jle strcmp$33	; 2: 126 14

strcmp$31:	; SetReturnValue 1
x24089:	mov bx, 1	; 3: 187 1 0

strcmp$32:	; Return 1
x24092:	mov ax, [bp]	; 3: 139 70 0
x24095:	mov di, [bp + 4]	; 3: 139 126 4
x24098:	mov bp, [bp + 2]	; 3: 139 110 2
x24101:	jmp ax	; 2: 255 224

strcmp$33:	; Increment index
x24103:	inc word [bp + 10]	; 3: 255 70 10

strcmp$34:	; Goto 1
x24106:	jmp strcmp$1	; 3: 233 100 255

strcmp$35:	; FunctionEnd strcmp

@2053$fileopen:	; AssignRegister ah 61
x24109:	mov ah, 61	; 2: 180 61

@2053$fileopen$1:	; AssignRegister al mode
x24111:	mov al, [bp + 8]	; 3: 138 70 8

@2053$fileopen$2:	; AssignRegister dx name
x24114:	mov dx, [bp + 6]	; 3: 139 86 6

@2053$fileopen$3:	; Interrupt 33
x24117:	int 33	; 2: 205 33

@2053$fileopen$4:	; NotCarry 8
x24119:	jnc @2053$fileopen$8	; 2: 115 20

@2053$fileopen$5:	; Assign errno 9
x24121:	mov word [errno], 9	; 6: 199 6 230 10 9 0

@2053$fileopen$6:	; SetReturnValue -1
x24127:	mov bx, -1	; 3: 187 255 255

@2053$fileopen$7:	; Return -1
x24130:	mov ax, [bp]	; 3: 139 70 0
x24133:	mov di, [bp + 4]	; 3: 139 126 4
x24136:	mov bp, [bp + 2]	; 3: 139 110 2
x24139:	jmp ax	; 2: 255 224

@2053$fileopen$8:	; InspectRegister £temporary885 ax

@2053$fileopen$9:	; SetReturnValue £temporary885
x24141:	mov bx, ax	; 2: 137 195

@2053$fileopen$10:	; Return £temporary885
x24143:	mov ax, [bp]	; 3: 139 70 0
x24146:	mov di, [bp + 4]	; 3: 139 126 4
x24149:	mov bp, [bp + 2]	; 3: 139 110 2
x24152:	jmp ax	; 2: 255 224

@2053$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x24154:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x24156:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x24159:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x24162:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary863 ax

filecreate$5:	; Assign handle £temporary863
x24164:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x24167:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x24169:	mov word [errno], 9	; 6: 199 6 230 10 9 0

filecreate$8:	; SetReturnValue -1
x24175:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x24178:	mov ax, [bp]	; 3: 139 70 0
x24181:	mov di, [bp + 4]	; 3: 139 126 4
x24184:	mov bp, [bp + 2]	; 3: 139 110 2
x24187:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x24189:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x24192:	mov ax, [bp]	; 3: 139 70 0
x24195:	mov di, [bp + 4]	; 3: 139 126 4
x24198:	mov bp, [bp + 2]	; 3: 139 110 2
x24201:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary1110 origin
x24203:	mov ax, [bp + 10]	; 3: 139 70 10
x24206:	cmp ax, 0	; 3: 131 248 0
x24209:	jge fseek$1	; 2: 125 4
x24211:	neg ax	; 2: 247 216
x24213:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary1110

fseek$2:	; AssignRegister ah 66
x24215:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary1113 -> stream stream 2
x24217:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary1113 -> stream
x24220:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x24223:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary1116 offset
x24226:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary1116

fseek$8:	; Interrupt 33
x24229:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x24231:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary1119 -> stream stream 23
x24233:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary1120 ax

fseek$12:	; Assign £temporary1119 -> stream £temporary1120
x24236:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary1121 -> stream stream 23
x24239:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary1121 -> stream
x24242:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary1121 -> stream
x24245:	mov ax, [bp]	; 3: 139 70 0
x24248:	mov di, [bp + 4]	; 3: 139 126 4
x24251:	mov bp, [bp + 2]	; 3: 139 110 2
x24254:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary1122 -> stream stream 21
x24256:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary1122 -> stream 15
x24259:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x24264:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x24267:	mov ax, [bp]	; 3: 139 70 0
x24270:	mov di, [bp + 4]	; 3: 139 126 4
x24273:	mov bp, [bp + 2]	; 3: 139 110 2
x24276:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x24278:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x24280:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x24282:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x24285:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x24287:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary880 1
x24289:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x24292:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary880 0
x24294:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary880

fileexists$9:	; Return £temporary880
x24297:	mov ax, [bp]	; 3: 139 70 0
x24300:	mov di, [bp + 4]	; 3: 139 126 4
x24303:	mov bp, [bp + 2]	; 3: 139 110 2
x24306:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x24308:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3907 source index
x24313:	mov si, [bp + 8]	; 3: 139 118 8
x24316:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3906 -> £temporary3907 £temporary3907 0

strcpy$3:	; Equal 11 £temporary3906 -> £temporary3907 0
x24319:	cmp byte [si], 0	; 3: 128 60 0
x24322:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3911 target index
x24324:	mov si, [bp + 6]	; 3: 139 118 6
x24327:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3910 -> £temporary3911 £temporary3911 0

strcpy$6:	; BinaryAdd £temporary3913 source index
x24330:	mov di, [bp + 8]	; 3: 139 126 8
x24333:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3912 -> £temporary3913 £temporary3913 0

strcpy$8:	; Assign £temporary3910 -> £temporary3911 £temporary3912 -> £temporary3913
x24336:	mov al, [di]	; 2: 138 5
x24338:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x24340:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x24343:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3915 target index
x24345:	mov si, [bp + 6]	; 3: 139 118 6
x24348:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0

strcpy$13:	; Assign £temporary3914 -> £temporary3915 0
x24351:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x24354:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x24357:	mov ax, [bp]	; 3: 139 70 0
x24360:	mov di, [bp + 4]	; 3: 139 126 4
x24363:	mov bp, [bp + 2]	; 3: 139 110 2
x24366:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2396 format
x24368:	mov si, bp	; 2: 137 238
x24370:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2397 £temporary2396

fprintf$2:	; BinaryAdd arg_list £temporary2397 2
x24373:	add si, 2	; 3: 131 198 2
x24376:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x24379:	mov ax, [bp + 6]	; 3: 139 70 6
x24382:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x24385:	mov ax, [bp + 8]	; 3: 139 70 8
x24388:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x24391:	mov ax, [di + 10]	; 3: 139 69 10
x24394:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x24397:	mov word [di + 12], fprintf$8	; 5: 199 69 12 96 95
x24402:	mov [di + 14], bp	; 3: 137 109 14
x24405:	mov [di + 16], di	; 3: 137 125 16
x24408:	add di, 12	; 3: 131 199 12
x24411:	mov bp, di	; 2: 137 253
x24413:	jmp vfprintf	; 3: 233 74 176

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2399

fprintf$10:	; SetReturnValue £temporary2399

fprintf$11:	; Return £temporary2399
x24416:	mov ax, [bp]	; 3: 139 70 0
x24419:	mov di, [bp + 4]	; 3: 139 126 4
x24422:	mov bp, [bp + 2]	; 3: 139 110 2
x24425:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x24427:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x24429:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x24431:	int 33	; 2: 205 33

abort$3:	; Return 0
x24433:	mov ax, [bp]	; 3: 139 70 0
x24436:	mov di, [bp + 4]	; 3: 139 126 4
x24439:	mov bp, [bp + 2]	; 3: 139 110 2
x24442:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x24444:	mov ax, [bp + 6]	; 3: 139 70 6
x24447:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x24450:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x24455:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x24460:	mov word [bp + 8], feof$5	; 5: 199 70 8 154 95
x24465:	mov [bp + 10], bp	; 3: 137 110 10
x24468:	add bp, 8	; 3: 131 197 8
x24471:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary1143

feof$7:	; IntegralToIntegral £temporary1144 £temporary1143
x24474:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary1144
x24481:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x24485:	mov ax, [bp + 6]	; 3: 139 70 6
x24488:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x24491:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x24496:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x24501:	mov word [bp + 12], feof$14	; 5: 199 70 12 195 95
x24506:	mov [bp + 14], bp	; 3: 137 110 14
x24509:	add bp, 12	; 3: 131 197 12
x24512:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary1145

feof$16:	; IntegralToIntegral £temporary1146 £temporary1145
x24515:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary1146
x24522:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x24526:	mov ax, [bp + 6]	; 3: 139 70 6
x24529:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary1147 currPosition
x24532:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary1147 8
x24536:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x24539:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x24544:	mov word [bp + 16], feof$24	; 5: 199 70 16 238 95
x24549:	mov [bp + 18], bp	; 3: 137 110 18
x24552:	add bp, 16	; 3: 131 197 16
x24555:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x24558:	mov eax, [bp + 12]	; 4: 102 139 70 12
x24562:	cmp [bp + 8], eax	; 4: 102 57 70 8
x24566:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary1150 1
x24568:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x24571:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary1150 0
x24573:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary1150
x24576:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x24579:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x24582:	mov ax, [bp]	; 3: 139 70 0
x24585:	mov di, [bp + 4]	; 3: 139 126 4
x24588:	mov bp, [bp + 2]	; 3: 139 110 2
x24591:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1755 format
x24593:	mov si, bp	; 2: 137 238
x24595:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1756 £temporary1755

fscanf$2:	; BinaryAdd arg_list £temporary1756 2
x24598:	add si, 2	; 3: 131 198 2
x24601:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x24604:	mov ax, [bp + 6]	; 3: 139 70 6
x24607:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x24610:	mov ax, [bp + 8]	; 3: 139 70 8
x24613:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x24616:	mov ax, [di + 10]	; 3: 139 69 10
x24619:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x24622:	mov word [di + 12], fscanf$8	; 5: 199 69 12 65 96
x24627:	mov [di + 14], bp	; 3: 137 109 14
x24630:	mov [di + 16], di	; 3: 137 125 16
x24633:	add di, 12	; 3: 131 199 12
x24636:	mov bp, di	; 2: 137 253
x24638:	nop	; 1: 144
x24639:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1758

fscanf$10:	; SetReturnValue £temporary1758

fscanf$11:	; Return £temporary1758
x24641:	mov ax, [bp]	; 3: 139 70 0
x24644:	mov di, [bp + 4]	; 3: 139 126 4
x24647:	mov bp, [bp + 2]	; 3: 139 110 2
x24650:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x24652:	mov word [g_inStatus], 0	; 6: 199 6 125 96 0 0

vfscanf$1:	; IntegralToIntegral £temporary1763 inStream
x24658:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1763
x24661:	mov [g_inDevice], ax	; 3: 163 127 96

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x24664:	mov ax, [bp + 8]	; 3: 139 70 8
x24667:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x24670:	mov ax, [bp + 10]	; 3: 139 70 10
x24673:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x24676:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 114 96
x24681:	mov [bp + 14], bp	; 3: 137 110 14
x24684:	add bp, 12	; 3: 131 197 12
x24687:	nop	; 1: 144
x24688:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1764

vfscanf$9:	; SetReturnValue £temporary1764

vfscanf$10:	; Return £temporary1764
x24690:	mov ax, [bp]	; 3: 139 70 0
x24693:	mov di, [bp + 4]	; 3: 139 126 4
x24696:	mov bp, [bp + 2]	; 3: 139 110 2
x24699:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x24701:	db 0, 0	; 2: 0 0

g_inDevice:
x24703:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x24705:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x24710:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x24715:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x24720:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x24725:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x24730:	mov word [g_inCount], 0	; 6: 199 6 160 101 0 0

scanFormat$6:	; Assign g_inChars 0
x24736:	mov word [g_inChars], 0	; 6: 199 6 162 101 0 0

scanFormat$7:	; Assign index 0
x24742:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1550 format index
x24747:	mov si, [bp + 6]	; 3: 139 118 6
x24750:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1549 -> £temporary1550 £temporary1550 0

scanFormat$10:	; Equal 329 £temporary1549 -> £temporary1550 0
x24753:	cmp byte [si], 0	; 3: 128 60 0
x24756:	je scanFormat$329	; 4: 15 132 217 4

scanFormat$11:	; BinaryAdd £temporary1554 format index
x24760:	mov si, [bp + 6]	; 3: 139 118 6
x24763:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1553 -> £temporary1554 £temporary1554 0

scanFormat$13:	; Assign c £temporary1553 -> £temporary1554
x24766:	mov al, [si]	; 2: 138 4
x24768:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1555 c
x24771:	mov al, [bp + 10]	; 3: 138 70 10
x24774:	and ax, 255	; 3: 37 255 0
x24777:	cmp al, 0	; 2: 60 0
x24779:	jge scanFormat$15	; 2: 125 4
x24781:	neg al	; 2: 246 216
x24783:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1555 1
x24785:	inc ax	; 1: 64
x24786:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 321 percent 0
x24789:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x24793:	je scanFormat$321	; 4: 15 132 143 4

scanFormat$17:	; BinarySubtract £temporary1557 d 1
x24797:	mov ax, [bp + 55]	; 3: 139 70 55
x24800:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1557 104
x24801:	cmp ax, 104	; 3: 131 248 104
x24804:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1557 108
x24806:	cmp ax, 108	; 3: 131 248 108
x24809:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1557 76
x24811:	cmp ax, 76	; 3: 131 248 76
x24814:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1557 42
x24816:	cmp ax, 42	; 3: 131 248 42
x24819:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1557 99
x24821:	cmp ax, 99	; 3: 131 248 99
x24824:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1557 115
x24826:	cmp ax, 115	; 3: 131 248 115
x24829:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1557 100
x24833:	cmp ax, 100	; 3: 131 248 100
x24836:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1557 105
x24840:	cmp ax, 105	; 3: 131 248 105
x24843:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1557 111
x24847:	cmp ax, 111	; 3: 131 248 111
x24850:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1557 120
x24854:	cmp ax, 120	; 3: 131 248 120
x24857:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1557 117
x24861:	cmp ax, 117	; 3: 131 248 117
x24864:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1557 103
x24868:	cmp ax, 103	; 3: 131 248 103
x24871:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1557 102
x24875:	cmp ax, 102	; 3: 131 248 102
x24878:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1557 101
x24882:	cmp ax, 101	; 3: 131 248 101
x24885:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1557 91
x24889:	cmp ax, 91	; 3: 131 248 91
x24892:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 312 £temporary1557 110
x24896:	cmp ax, 110	; 3: 131 248 110
x24899:	je scanFormat$312	; 4: 15 132 7 4

scanFormat$34:	; CaseEnd £temporary1557

scanFormat$35:	; Goto 327
x24903:	jmp scanFormat$327	; 3: 233 65 4

scanFormat$36:	; Assign shortInt 1
x24906:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 327
x24911:	jmp scanFormat$327	; 3: 233 57 4

scanFormat$38:	; Assign longIntOrDouble 1
x24914:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 327
x24919:	jmp scanFormat$327	; 3: 233 49 4

scanFormat$40:	; Assign longDouble 1
x24922:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 327
x24927:	jmp scanFormat$327	; 3: 233 41 4

scanFormat$42:	; Assign star 1
x24930:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 327
x24935:	jmp scanFormat$327	; 3: 233 33 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x24938:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 120 97
x24943:	mov [bp + 59], bp	; 3: 137 110 59
x24946:	add bp, 57	; 3: 131 197 57
x24949:	jmp scanChar	; 3: 233 44 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1558

scanFormat$48:	; Assign charValue £temporary1558
x24952:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x24955:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24959:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x24961:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1562 arg_list 2
x24965:	mov si, [bp + 8]	; 3: 139 118 8
x24968:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1563 £temporary1562

scanFormat$53:	; Deref £temporary1564 -> £temporary1563 £temporary1563 0

scanFormat$54:	; Assign charPtr £temporary1564 -> £temporary1563
x24971:	mov ax, [si]	; 2: 139 4
x24973:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1565 -> charPtr charPtr 0
x24976:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1565 -> charPtr charValue
x24979:	mov al, [bp + 57]	; 3: 138 70 57
x24982:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x24984:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1566 charValue
x24989:	mov al, [bp + 57]	; 3: 138 70 57
x24992:	and ax, 255	; 3: 37 255 0
x24995:	cmp al, 0	; 2: 60 0
x24997:	jge scanFormat$59	; 2: 125 4
x24999:	neg al	; 2: 246 216
x25001:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 327 £temporary1566 -1
x25003:	cmp ax, -1	; 3: 131 248 255
x25006:	je scanFormat$327	; 4: 15 132 217 3

scanFormat$60:	; Increment g_inCount
x25010:	inc word [g_inCount]	; 4: 255 6 160 101

scanFormat$61:	; Goto 327
x25014:	jmp scanFormat$327	; 3: 233 210 3

scanFormat$62:	; NotEqual 74 star 0
x25017:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25021:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x25023:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1572 arg_list 2
x25027:	mov si, [bp + 8]	; 3: 139 118 8
x25030:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1573 £temporary1572

scanFormat$66:	; Deref £temporary1574 -> £temporary1573 £temporary1573 0

scanFormat$67:	; Assign charPtr £temporary1574 -> £temporary1573
x25033:	mov ax, [si]	; 2: 139 4
x25035:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x25038:	mov ax, [bp + 11]	; 3: 139 70 11
x25041:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x25044:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x25049:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 231 97
x25054:	mov [bp + 59], bp	; 3: 137 110 59
x25057:	add bp, 57	; 3: 131 197 57
x25060:	jmp scanString	; 3: 233 44 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x25063:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x25065:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x25070:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x25075:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 1 98
x25080:	mov [bp + 59], bp	; 3: 137 110 59
x25083:	add bp, 57	; 3: 131 197 57
x25086:	jmp scanString	; 3: 233 18 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x25089:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 327
x25094:	jmp scanFormat$327	; 3: 233 130 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x25097:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x25102:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 28 98
x25107:	mov [bp + 59], bp	; 3: 137 110 59
x25110:	add bp, 57	; 3: 131 197 57
x25113:	jmp scanLongInt	; 3: 233 123 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1577

scanFormat$86:	; Assign longValue £temporary1577
x25116:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x25120:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25124:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x25126:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25130:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x25132:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1581 arg_list 2
x25136:	mov si, [bp + 8]	; 3: 139 118 8
x25139:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1582 £temporary1581

scanFormat$92:	; Deref £temporary1583 -> £temporary1582 £temporary1582 0

scanFormat$93:	; Assign shortPtr £temporary1583 -> £temporary1582
x25142:	mov ax, [si]	; 2: 139 4
x25144:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1584 -> shortPtr shortPtr 0
x25147:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1585 longValue
x25150:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25154:	cmp eax, 0	; 4: 102 131 248 0
x25158:	jge scanFormat$96	; 2: 125 5
x25160:	neg eax	; 3: 102 247 216
x25163:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1584 -> shortPtr £temporary1585
x25165:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x25167:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x25169:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25173:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x25175:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1589 arg_list 2
x25179:	mov si, [bp + 8]	; 3: 139 118 8
x25182:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1590 £temporary1589

scanFormat$102:	; Deref £temporary1591 -> £temporary1590 £temporary1590 0

scanFormat$103:	; Assign intPtr £temporary1591 -> £temporary1590
x25185:	mov ax, [si]	; 2: 139 4
x25187:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1592 -> intPtr intPtr 0
x25190:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1593 longValue
x25193:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25197:	cmp eax, 0	; 4: 102 131 248 0
x25201:	jge scanFormat$106	; 2: 125 5
x25203:	neg eax	; 3: 102 247 216
x25206:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1592 -> intPtr £temporary1593
x25208:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x25210:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x25212:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1595 arg_list 2
x25216:	mov si, [bp + 8]	; 3: 139 118 8
x25219:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1596 £temporary1595

scanFormat$111:	; Deref £temporary1597 -> £temporary1596 £temporary1596 0

scanFormat$112:	; Assign longPtr £temporary1597 -> £temporary1596
x25222:	mov ax, [si]	; 2: 139 4
x25224:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1598 -> longPtr longPtr 0
x25227:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1598 -> longPtr longValue
x25230:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25234:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x25237:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 327
x25242:	jmp scanFormat$327	; 3: 233 238 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x25245:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x25250:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 176 98
x25255:	mov [bp + 59], bp	; 3: 137 110 59
x25258:	add bp, 57	; 3: 131 197 57
x25261:	jmp scanUnsignedLongInt	; 3: 233 33 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1600

scanFormat$122:	; Assign unsignedLongValue £temporary1600
x25264:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x25268:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25272:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x25274:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25278:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x25280:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1604 arg_list 2
x25284:	mov si, [bp + 8]	; 3: 139 118 8
x25287:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1605 £temporary1604

scanFormat$128:	; Deref £temporary1606 -> £temporary1605 £temporary1605 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1606 -> £temporary1605
x25290:	mov ax, [si]	; 2: 139 4
x25292:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1607 -> unsignedShortPtr unsignedShortPtr 0
x25295:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1608 unsignedLongValue
x25298:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1607 -> unsignedShortPtr £temporary1608
x25302:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x25304:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x25306:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25310:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x25312:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1612 arg_list 2
x25316:	mov si, [bp + 8]	; 3: 139 118 8
x25319:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1613 £temporary1612

scanFormat$138:	; Deref £temporary1614 -> £temporary1613 £temporary1613 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1614 -> £temporary1613
x25322:	mov ax, [si]	; 2: 139 4
x25324:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1615 -> unsignedIntPtr unsignedIntPtr 0
x25327:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1616 unsignedLongValue
x25330:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1615 -> unsignedIntPtr £temporary1616
x25334:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x25336:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x25338:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1618 arg_list 2
x25342:	mov si, [bp + 8]	; 3: 139 118 8
x25345:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1619 £temporary1618

scanFormat$147:	; Deref £temporary1620 -> £temporary1619 £temporary1619 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1620 -> £temporary1619
x25348:	mov ax, [si]	; 2: 139 4
x25350:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1621 -> unsignedLongPtr unsignedLongPtr 0
x25353:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1621 -> unsignedLongPtr unsignedLongValue
x25356:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25360:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x25363:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 327
x25368:	jmp scanFormat$327	; 3: 233 112 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x25371:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x25376:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 46 99
x25381:	mov [bp + 59], bp	; 3: 137 110 59
x25384:	add bp, 57	; 3: 131 197 57
x25387:	jmp scanUnsignedLongInt	; 3: 233 163 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1623

scanFormat$158:	; Assign unsignedLongValue £temporary1623
x25390:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x25394:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25398:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x25400:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25404:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x25406:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1627 arg_list 2
x25410:	mov si, [bp + 8]	; 3: 139 118 8
x25413:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1628 £temporary1627

scanFormat$164:	; Deref £temporary1629 -> £temporary1628 £temporary1628 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1629 -> £temporary1628
x25416:	mov ax, [si]	; 2: 139 4
x25418:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1630 -> unsignedShortPtr unsignedShortPtr 0
x25421:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1631 unsignedLongValue
x25424:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1630 -> unsignedShortPtr £temporary1631
x25428:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x25430:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x25432:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25436:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x25438:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1635 arg_list 2
x25442:	mov si, [bp + 8]	; 3: 139 118 8
x25445:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1636 £temporary1635

scanFormat$174:	; Deref £temporary1637 -> £temporary1636 £temporary1636 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1637 -> £temporary1636
x25448:	mov ax, [si]	; 2: 139 4
x25450:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1638 -> unsignedIntPtr unsignedIntPtr 0
x25453:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1639 unsignedLongValue
x25456:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1638 -> unsignedIntPtr £temporary1639
x25460:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x25462:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x25464:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1641 arg_list 2
x25468:	mov si, [bp + 8]	; 3: 139 118 8
x25471:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1642 £temporary1641

scanFormat$183:	; Deref £temporary1643 -> £temporary1642 £temporary1642 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1643 -> £temporary1642
x25474:	mov ax, [si]	; 2: 139 4
x25476:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1644 -> unsignedLongPtr unsignedLongPtr 0
x25479:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1644 -> unsignedLongPtr unsignedLongValue
x25482:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25486:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x25489:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 327
x25494:	jmp scanFormat$327	; 3: 233 242 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x25497:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x25502:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 172 99
x25507:	mov [bp + 59], bp	; 3: 137 110 59
x25510:	add bp, 57	; 3: 131 197 57
x25513:	jmp scanUnsignedLongInt	; 3: 233 37 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1646

scanFormat$194:	; Assign unsignedLongValue £temporary1646
x25516:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x25520:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25524:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x25526:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25530:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x25532:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1650 arg_list 2
x25536:	mov si, [bp + 8]	; 3: 139 118 8
x25539:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1651 £temporary1650

scanFormat$200:	; Deref £temporary1652 -> £temporary1651 £temporary1651 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1652 -> £temporary1651
x25542:	mov ax, [si]	; 2: 139 4
x25544:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1653 -> unsignedShortPtr unsignedShortPtr 0
x25547:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1654 unsignedLongValue
x25550:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1653 -> unsignedShortPtr £temporary1654
x25554:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x25556:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x25558:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25562:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x25564:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1658 arg_list 2
x25568:	mov si, [bp + 8]	; 3: 139 118 8
x25571:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1659 £temporary1658

scanFormat$210:	; Deref £temporary1660 -> £temporary1659 £temporary1659 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1660 -> £temporary1659
x25574:	mov ax, [si]	; 2: 139 4
x25576:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1661 -> unsignedIntPtr unsignedIntPtr 0
x25579:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1662 unsignedLongValue
x25582:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1661 -> unsignedIntPtr £temporary1662
x25586:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x25588:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x25590:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1664 arg_list 2
x25594:	mov si, [bp + 8]	; 3: 139 118 8
x25597:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1665 £temporary1664

scanFormat$219:	; Deref £temporary1666 -> £temporary1665 £temporary1665 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1666 -> £temporary1665
x25600:	mov ax, [si]	; 2: 139 4
x25602:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1667 -> unsignedLongPtr unsignedLongPtr 0
x25605:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1667 -> unsignedLongPtr unsignedLongValue
x25608:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25612:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x25615:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 327
x25620:	jmp scanFormat$327	; 3: 233 116 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x25623:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 37 100
x25628:	mov [bp + 59], bp	; 3: 137 110 59
x25631:	add bp, 57	; 3: 131 197 57
x25634:	jmp scanLongDouble	; 3: 233 24 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1669

scanFormat$229:	; PopFloat longDoubleValue
x25637:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x25640:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25644:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x25646:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25650:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x25652:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1673 arg_list 2
x25656:	mov si, [bp + 8]	; 3: 139 118 8
x25659:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1674 £temporary1673

scanFormat$235:	; Deref £temporary1675 -> £temporary1674 £temporary1674 0

scanFormat$236:	; Assign doublePtr £temporary1675 -> £temporary1674
x25662:	mov ax, [si]	; 2: 139 4
x25664:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1676 -> doublePtr doublePtr 0
x25667:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x25670:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1676 -> doublePtr
x25673:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x25675:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x25677:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x25681:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x25683:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1679 arg_list 2
x25687:	mov si, [bp + 8]	; 3: 139 118 8
x25690:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1680 £temporary1679

scanFormat$245:	; Deref £temporary1681 -> £temporary1680 £temporary1680 0

scanFormat$246:	; Assign longDoublePtr £temporary1681 -> £temporary1680
x25693:	mov ax, [si]	; 2: 139 4
x25695:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1682 -> longDoublePtr longDoublePtr 0
x25698:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x25701:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1682 -> longDoublePtr
x25704:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x25706:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x25708:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1684 arg_list 2
x25712:	mov si, [bp + 8]	; 3: 139 118 8
x25715:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1685 £temporary1684

scanFormat$254:	; Deref £temporary1686 -> £temporary1685 £temporary1685 0

scanFormat$255:	; Assign floatPtr £temporary1686 -> £temporary1685
x25718:	mov ax, [si]	; 2: 139 4
x25720:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1687 -> floatPtr floatPtr 0
x25723:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x25726:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1687 -> floatPtr
x25729:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x25731:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 327
x25736:	jmp scanFormat$327	; 3: 233 0 1

scanFormat$261:	; Assign not 0
x25739:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x25744:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1693 format index
x25747:	mov si, [bp + 6]	; 3: 139 118 6
x25750:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1692 -> £temporary1693 £temporary1693 0

scanFormat$265:	; NotEqual 268 £temporary1692 -> £temporary1693 94
x25753:	cmp byte [si], 94	; 3: 128 60 94
x25756:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x25758:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x25763:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x25766:	mov ax, [bp + 31]	; 3: 139 70 31
x25769:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1697 format index
x25772:	mov si, [bp + 6]	; 3: 139 118 6
x25775:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1696 -> £temporary1697 £temporary1697 0

scanFormat$271:	; Equal 274 £temporary1696 -> £temporary1697 93
x25778:	cmp byte [si], 93	; 3: 128 60 93
x25781:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x25783:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x25786:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinarySubtract size index startIndex
x25788:	mov ax, [bp + 31]	; 3: 139 70 31
x25791:	sub ax, [bp + 59]	; 3: 43 70 59
x25794:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$275:	; BinaryAdd £temporary1702 format index
x25797:	mov si, [bp + 6]	; 3: 139 118 6
x25800:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$276:	; Deref £temporary1701 -> £temporary1702 £temporary1702 0

scanFormat$277:	; Assign c £temporary1701 -> £temporary1702
x25803:	mov al, [si]	; 2: 138 4
x25805:	mov [bp + 63], al	; 3: 136 70 63

scanFormat$278:	; BinaryAdd £temporary1704 format index
x25808:	mov si, [bp + 6]	; 3: 139 118 6
x25811:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$279:	; Deref £temporary1703 -> £temporary1704 £temporary1704 0

scanFormat$280:	; Assign £temporary1703 -> £temporary1704 0
x25814:	mov byte [si], 0	; 3: 198 4 0

scanFormat$281:	; NotEqual 298 star 0
x25817:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25821:	jne scanFormat$298	; 2: 117 58

scanFormat$282:	; BinaryAdd arg_list arg_list 2
x25823:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$283:	; BinarySubtract £temporary1708 arg_list 2
x25827:	mov si, [bp + 8]	; 3: 139 118 8
x25830:	sub si, 2	; 3: 131 238 2

scanFormat$284:	; IntegralToIntegral £temporary1709 £temporary1708

scanFormat$285:	; Deref £temporary1710 -> £temporary1709 £temporary1709 0

scanFormat$286:	; Assign string £temporary1710 -> £temporary1709
x25833:	mov ax, [si]	; 2: 139 4
x25835:	mov [bp + 64], ax	; 3: 137 70 64

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$288:	; Parameter 66 string 6
x25838:	mov ax, [bp + 64]	; 3: 139 70 64
x25841:	mov [bp + 72], ax	; 3: 137 70 72

scanFormat$289:	; BinaryAdd £temporary1712 format startIndex
x25844:	mov si, [bp + 6]	; 3: 139 118 6
x25847:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$290:	; Deref £temporary1711 -> £temporary1712 £temporary1712 0

scanFormat$291:	; address £temporary1713 £temporary1711 -> £temporary1712

scanFormat$292:	; Parameter 66 £temporary1713 8
x25850:	mov [bp + 74], si	; 3: 137 118 74

scanFormat$293:	; Parameter 66 size 10
x25853:	mov ax, [bp + 61]	; 3: 139 70 61
x25856:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$294:	; Parameter 66 not 12
x25859:	mov ax, [bp + 57]	; 3: 139 70 57
x25862:	mov [bp + 78], ax	; 3: 137 70 78

scanFormat$295:	; Call 66 scanPattern 0
x25865:	mov word [bp + 66], scanFormat$296	; 5: 199 70 66 23 101
x25870:	mov [bp + 68], bp	; 3: 137 110 68
x25873:	add bp, 66	; 3: 131 197 66
x25876:	jmp scanPattern	; 3: 233 97 11

scanFormat$296:	; PostCall 66

scanFormat$297:	; Goto 308
x25879:	jmp scanFormat$308	; 2: 235 40

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$299:	; Parameter 64 0 6
x25881:	mov word [bp + 70], 0	; 5: 199 70 70 0 0

scanFormat$300:	; BinaryAdd £temporary1716 format startIndex
x25886:	mov si, [bp + 6]	; 3: 139 118 6
x25889:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$301:	; Deref £temporary1715 -> £temporary1716 £temporary1716 0

scanFormat$302:	; address £temporary1717 £temporary1715 -> £temporary1716

scanFormat$303:	; Parameter 64 £temporary1717 8
x25892:	mov [bp + 72], si	; 3: 137 118 72

scanFormat$304:	; Parameter 64 size 10
x25895:	mov ax, [bp + 61]	; 3: 139 70 61
x25898:	mov [bp + 74], ax	; 3: 137 70 74

scanFormat$305:	; Parameter 64 not 12
x25901:	mov ax, [bp + 57]	; 3: 139 70 57
x25904:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$306:	; Call 64 scanPattern 0
x25907:	mov word [bp + 64], scanFormat$307	; 5: 199 70 64 65 101
x25912:	mov [bp + 66], bp	; 3: 137 110 66
x25915:	add bp, 64	; 3: 131 197 64
x25918:	jmp scanPattern	; 3: 233 55 11

scanFormat$307:	; PostCall 64

scanFormat$308:	; BinaryAdd £temporary1720 format index
x25921:	mov si, [bp + 6]	; 3: 139 118 6
x25924:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$309:	; Deref £temporary1719 -> £temporary1720 £temporary1720 0

scanFormat$310:	; Assign £temporary1719 -> £temporary1720 c
x25927:	mov al, [bp + 63]	; 3: 138 70 63
x25930:	mov [si], al	; 2: 136 4

scanFormat$311:	; Goto 327
x25932:	jmp scanFormat$327	; 2: 235 61

scanFormat$312:	; BinaryAdd arg_list arg_list 2
x25934:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$313:	; BinarySubtract £temporary1722 arg_list 2
x25938:	mov si, [bp + 8]	; 3: 139 118 8
x25941:	sub si, 2	; 3: 131 238 2

scanFormat$314:	; IntegralToIntegral £temporary1723 £temporary1722

scanFormat$315:	; Deref £temporary1724 -> £temporary1723 £temporary1723 0

scanFormat$316:	; Assign charsPtr £temporary1724 -> £temporary1723
x25944:	mov ax, [si]	; 2: 139 4
x25946:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$317:	; Deref £temporary1725 -> charsPtr charsPtr 0
x25949:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$318:	; Assign £temporary1725 -> charsPtr g_inChars
x25952:	mov ax, [g_inChars]	; 3: 161 162 101
x25955:	mov [si], ax	; 2: 137 4

scanFormat$319:	; Assign percent 0
x25957:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$320:	; Goto 327
x25962:	jmp scanFormat$327	; 2: 235 31

scanFormat$321:	; NotEqual 327 c 37
x25964:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x25968:	jne scanFormat$327	; 2: 117 25

scanFormat$322:	; Assign percent 1
x25970:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$323:	; Assign shortInt 0
x25975:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$324:	; Assign longIntOrDouble 0
x25980:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$325:	; Assign longDouble 0
x25985:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$326:	; Assign star 0
x25990:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$327:	; Increment index
x25995:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$328:	; Goto 8
x25998:	jmp scanFormat$8	; 3: 233 26 251

scanFormat$329:	; SetReturnValue g_inCount
x26001:	mov bx, [g_inCount]	; 4: 139 30 160 101

scanFormat$330:	; Return g_inCount
x26005:	mov ax, [bp]	; 3: 139 70 0
x26008:	mov di, [bp + 4]	; 3: 139 126 4
x26011:	mov bp, [bp + 2]	; 3: 139 110 2
x26014:	jmp ax	; 2: 255 224

scanFormat$331:	; FunctionEnd scanFormat

g_inCount:
x26016:	db 0, 0	; 2: 0 0

g_inChars:
x26018:	db 0, 0	; 2: 0 0

scanChar:	; Assign c 0
x26020:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x26024:	mov ax, [g_inStatus]	; 3: 161 125 96
x26027:	cmp ax, 0	; 3: 131 248 0
x26030:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x26032:	cmp ax, 1	; 3: 131 248 1
x26035:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x26037:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1224 g_inDevice
x26039:	mov ax, [g_inDevice]	; 3: 161 127 96

scanChar$6:	; Assign stream £temporary1224
x26042:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1225 -> stream stream 2
x26045:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1225 -> stream
x26048:	mov ax, [si + 2]	; 3: 139 68 2
x26051:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x26054:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x26056:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x26059:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1230 c
x26062:	mov dx, bp	; 2: 137 234
x26064:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1230

scanChar$14:	; Interrupt 33
x26067:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x26069:	inc word [g_inChars]	; 4: 255 6 162 101

scanChar$16:	; SetReturnValue c
x26073:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x26076:	mov ax, [bp]	; 3: 139 70 0
x26079:	mov di, [bp + 4]	; 3: 139 126 4
x26082:	mov bp, [bp + 2]	; 3: 139 110 2
x26085:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1232 g_inDevice
x26087:	mov ax, [g_inDevice]	; 3: 161 127 96

scanChar$19:	; Assign inString £temporary1232
x26090:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1233 g_inChars
x26093:	mov ax, [g_inChars]	; 3: 161 162 101

scanChar$21:	; Increment g_inChars
x26096:	inc word [g_inChars]	; 4: 255 6 162 101

scanChar$22:	; BinaryAdd £temporary1235 inString £temporary1233
x26100:	mov si, [bp + 11]	; 3: 139 118 11
x26103:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1234 -> £temporary1235 £temporary1235 0

scanChar$24:	; SetReturnValue £temporary1234 -> £temporary1235
x26105:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1234 -> £temporary1235
x26107:	mov ax, [bp]	; 3: 139 70 0
x26110:	mov di, [bp + 4]	; 3: 139 126 4
x26113:	mov bp, [bp + 2]	; 3: 139 110 2
x26116:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x26118:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x26120:	mov ax, [bp]	; 3: 139 70 0
x26123:	mov di, [bp + 4]	; 3: 139 126 4
x26126:	mov bp, [bp + 2]	; 3: 139 110 2
x26129:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x26131:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x26136:	mov word [bp + 12], scanString$3	; 5: 199 70 12 38 102
x26141:	mov [bp + 14], bp	; 3: 137 110 14
x26144:	add bp, 12	; 3: 131 197 12
x26147:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1300

scanString$5:	; Assign input £temporary1300
x26150:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x26153:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1301 input
x26158:	mov al, [bp + 12]	; 3: 138 70 12
x26161:	and ax, 255	; 3: 37 255 0
x26164:	cmp al, 0	; 2: 60 0
x26166:	jge scanString$9	; 2: 125 4
x26168:	neg al	; 2: 246 216
x26170:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1301 6
x26172:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x26175:	mov word [bp + 15], scanString$11	; 5: 199 70 15 77 102
x26180:	mov [bp + 17], bp	; 3: 137 110 17
x26183:	add bp, 15	; 3: 131 197 15
x26186:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1302

scanString$13:	; Equal 20 £temporary1302 0
x26189:	cmp bx, 0	; 3: 131 251 0
x26192:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x26194:	mov word [bp + 15], scanString$16	; 5: 199 70 15 96 102
x26199:	mov [bp + 17], bp	; 3: 137 110 17
x26202:	add bp, 15	; 3: 131 197 15
x26205:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1303

scanString$18:	; Assign input £temporary1303
x26208:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x26211:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x26213:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26217:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x26221:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26225:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1307 input
x26227:	mov al, [bp + 12]	; 3: 138 70 12
x26230:	and ax, 255	; 3: 37 255 0
x26233:	cmp al, 0	; 2: 60 0
x26235:	jge scanString$24	; 2: 125 4
x26237:	neg al	; 2: 246 216
x26239:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1307 6
x26241:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x26244:	mov word [bp + 15], scanString$26	; 5: 199 70 15 146 102
x26249:	mov [bp + 17], bp	; 3: 137 110 17
x26252:	add bp, 15	; 3: 131 197 15
x26255:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1308

scanString$28:	; NotEqual 45 £temporary1308 0
x26258:	cmp bx, 0	; 3: 131 251 0
x26261:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1311 input
x26263:	mov al, [bp + 12]	; 3: 138 70 12
x26266:	and ax, 255	; 3: 37 255 0
x26269:	cmp al, 0	; 2: 60 0
x26271:	jge scanString$30	; 2: 125 4
x26273:	neg al	; 2: 246 216
x26275:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1311 -1
x26277:	cmp ax, -1	; 3: 131 248 255
x26280:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x26282:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26286:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1316 index
x26288:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x26291:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1318 string £temporary1316
x26294:	mov si, [bp + 6]	; 3: 139 118 6
x26297:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1317 -> £temporary1318 £temporary1318 0

scanString$36:	; Assign £temporary1317 -> £temporary1318 input
x26299:	mov al, [bp + 12]	; 3: 138 70 12
x26302:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x26304:	mov word [bp + 15], scanString$39	; 5: 199 70 15 206 102
x26309:	mov [bp + 17], bp	; 3: 137 110 17
x26312:	add bp, 15	; 3: 131 197 15
x26315:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1319

scanString$41:	; Assign input £temporary1319
x26318:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x26321:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x26326:	inc word [g_inChars]	; 4: 255 6 162 101

scanString$44:	; Goto 22
x26330:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1322 string index
x26332:	mov si, [bp + 6]	; 3: 139 118 6
x26335:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1321 -> £temporary1322 £temporary1322 0

scanString$47:	; Assign £temporary1321 -> £temporary1322 0
x26338:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x26341:	inc word [g_inChars]	; 4: 255 6 162 101

scanString$49:	; Goto 126
x26345:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1324 precision
x26348:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x26351:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1324 0
x26354:	cmp ax, 0	; 3: 131 248 0
x26357:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1326 input
x26359:	mov al, [bp + 12]	; 3: 138 70 12
x26362:	and ax, 255	; 3: 37 255 0
x26365:	cmp al, 0	; 2: 60 0
x26367:	jge scanString$55	; 2: 125 4
x26369:	neg al	; 2: 246 216
x26371:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1326 6
x26373:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x26376:	mov word [bp + 15], scanString$57	; 5: 199 70 15 22 103
x26381:	mov [bp + 17], bp	; 3: 137 110 17
x26384:	add bp, 15	; 3: 131 197 15
x26387:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1327

scanString$59:	; NotEqual 76 £temporary1327 0
x26390:	cmp bx, 0	; 3: 131 251 0
x26393:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1330 input
x26395:	mov al, [bp + 12]	; 3: 138 70 12
x26398:	and ax, 255	; 3: 37 255 0
x26401:	cmp al, 0	; 2: 60 0
x26403:	jge scanString$61	; 2: 125 4
x26405:	neg al	; 2: 246 216
x26407:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1330 -1
x26409:	cmp ax, -1	; 3: 131 248 255
x26412:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x26414:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26418:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1336 index
x26420:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x26423:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1338 string £temporary1336
x26426:	mov si, [bp + 6]	; 3: 139 118 6
x26429:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1337 -> £temporary1338 £temporary1338 0

scanString$67:	; Assign £temporary1337 -> £temporary1338 input
x26431:	mov al, [bp + 12]	; 3: 138 70 12
x26434:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x26436:	mov word [bp + 15], scanString$70	; 5: 199 70 15 82 103
x26441:	mov [bp + 17], bp	; 3: 137 110 17
x26444:	add bp, 15	; 3: 131 197 15
x26447:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1339

scanString$72:	; Assign input £temporary1339
x26450:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x26453:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x26458:	inc word [g_inChars]	; 4: 255 6 162 101

scanString$75:	; Goto 50
x26462:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x26464:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26468:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1343 string index
x26472:	mov si, [bp + 6]	; 3: 139 118 6
x26475:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1342 -> £temporary1343 £temporary1343 0

scanString$79:	; Assign £temporary1342 -> £temporary1343 0
x26478:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x26481:	inc word [g_inChars]	; 4: 255 6 162 101

scanString$81:	; Goto 126
x26485:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x26488:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26492:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1346 input
x26494:	mov al, [bp + 12]	; 3: 138 70 12
x26497:	and ax, 255	; 3: 37 255 0
x26500:	cmp al, 0	; 2: 60 0
x26502:	jge scanString$85	; 2: 125 4
x26504:	neg al	; 2: 246 216
x26506:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1346 6
x26508:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x26511:	mov word [bp + 15], scanString$87	; 5: 199 70 15 157 103
x26516:	mov [bp + 17], bp	; 3: 137 110 17
x26519:	add bp, 15	; 3: 131 197 15
x26522:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1347

scanString$89:	; NotEqual 101 £temporary1347 0
x26525:	cmp bx, 0	; 3: 131 251 0
x26528:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1350 input
x26530:	mov al, [bp + 12]	; 3: 138 70 12
x26533:	and ax, 255	; 3: 37 255 0
x26536:	cmp al, 0	; 2: 60 0
x26538:	jge scanString$91	; 2: 125 4
x26540:	neg al	; 2: 246 216
x26542:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1350 -1
x26544:	cmp ax, -1	; 3: 131 248 255
x26547:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x26549:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26553:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x26555:	mov word [bp + 15], scanString$95	; 5: 199 70 15 201 103
x26560:	mov [bp + 17], bp	; 3: 137 110 17
x26563:	add bp, 15	; 3: 131 197 15
x26566:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1355

scanString$97:	; Assign input £temporary1355
x26569:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x26572:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x26577:	inc word [g_inChars]	; 4: 255 6 162 101

scanString$100:	; Goto 83
x26581:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x26583:	inc word [g_inChars]	; 4: 255 6 162 101

scanString$102:	; Goto 126
x26587:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1358 precision
x26589:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x26592:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1358 0
x26595:	cmp ax, 0	; 3: 131 248 0
x26598:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1360 input
x26600:	mov al, [bp + 12]	; 3: 138 70 12
x26603:	and ax, 255	; 3: 37 255 0
x26606:	cmp al, 0	; 2: 60 0
x26608:	jge scanString$108	; 2: 125 4
x26610:	neg al	; 2: 246 216
x26612:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1360 6
x26614:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x26617:	mov word [bp + 15], scanString$110	; 5: 199 70 15 7 104
x26622:	mov [bp + 17], bp	; 3: 137 110 17
x26625:	add bp, 15	; 3: 131 197 15
x26628:	nop	; 1: 144
x26629:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1361

scanString$112:	; NotEqual 124 £temporary1361 0
x26631:	cmp bx, 0	; 3: 131 251 0
x26634:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1364 input
x26636:	mov al, [bp + 12]	; 3: 138 70 12
x26639:	and ax, 255	; 3: 37 255 0
x26642:	cmp al, 0	; 2: 60 0
x26644:	jge scanString$114	; 2: 125 4
x26646:	neg al	; 2: 246 216
x26648:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1364 -1
x26650:	cmp ax, -1	; 3: 131 248 255
x26653:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x26655:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26659:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x26661:	mov word [bp + 15], scanString$118	; 5: 199 70 15 51 104
x26666:	mov [bp + 17], bp	; 3: 137 110 17
x26669:	add bp, 15	; 3: 131 197 15
x26672:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1370

scanString$120:	; Assign input £temporary1370
x26675:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x26678:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x26683:	inc word [g_inChars]	; 4: 255 6 162 101

scanString$123:	; Goto 103
x26687:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x26689:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26693:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x26695:	inc word [g_inChars]	; 4: 255 6 162 101

scanString$126:	; Equal 128 found 0
x26699:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x26703:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x26705:	inc word [g_inCount]	; 4: 255 6 160 101

scanString$128:	; Return 0
x26709:	mov ax, [bp]	; 3: 139 70 0
x26712:	mov di, [bp + 4]	; 3: 139 126 4
x26715:	mov bp, [bp + 2]	; 3: 139 110 2
x26718:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x26720:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x26724:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x26726:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x26730:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x26732:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x26736:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x26738:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x26742:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x26744:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x26748:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x26750:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x26754:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary439 1
x26756:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x26759:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary439 0
x26761:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary439

isspace$10:	; Return £temporary439
x26764:	mov ax, [bp]	; 3: 139 70 0
x26767:	mov di, [bp + 4]	; 3: 139 126 4
x26770:	mov bp, [bp + 2]	; 3: 139 110 2
x26773:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x26775:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x26783:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x26788:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x26793:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 183 104
x26798:	mov [bp + 18], bp	; 3: 137 110 18
x26801:	add bp, 16	; 3: 131 197 16
x26804:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1433

scanLongInt$7:	; Assign input £temporary1433
x26807:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1434 input
x26810:	mov al, [bp + 16]	; 3: 138 70 16
x26813:	and ax, 255	; 3: 37 255 0
x26816:	cmp al, 0	; 2: 60 0
x26818:	jge scanLongInt$10	; 2: 125 4
x26820:	neg al	; 2: 246 216
x26822:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1434 6
x26824:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x26827:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 217 104
x26832:	mov [bp + 19], bp	; 3: 137 110 19
x26835:	add bp, 17	; 3: 131 197 17
x26838:	nop	; 1: 144
x26839:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1435

scanLongInt$14:	; Equal 21 £temporary1435 0
x26841:	cmp bx, 0	; 3: 131 251 0
x26844:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x26846:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 236 104
x26851:	mov [bp + 19], bp	; 3: 137 110 19
x26854:	add bp, 17	; 3: 131 197 17
x26857:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1436

scanLongInt$19:	; Assign input £temporary1436
x26860:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x26863:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x26865:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x26869:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x26871:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 5 105
x26876:	mov [bp + 19], bp	; 3: 137 110 19
x26879:	add bp, 17	; 3: 131 197 17
x26882:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1439

scanLongInt$26:	; Assign input £temporary1439
x26885:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x26888:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x26890:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x26894:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x26896:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x26901:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 35 105
x26906:	mov [bp + 19], bp	; 3: 137 110 19
x26909:	add bp, 17	; 3: 131 197 17
x26912:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1441

scanLongInt$34:	; Assign input £temporary1441
x26915:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x26918:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26922:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x26924:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x26928:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x26930:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 64 105
x26935:	mov [bp + 19], bp	; 3: 137 110 19
x26938:	add bp, 17	; 3: 131 197 17
x26941:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1444

scanLongInt$41:	; Assign input £temporary1444
x26944:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1445 input
x26947:	mov al, [bp + 16]	; 3: 138 70 16
x26950:	and ax, 255	; 3: 37 255 0
x26953:	cmp al, 0	; 2: 60 0
x26955:	jge scanLongInt$44	; 2: 125 4
x26957:	neg al	; 2: 246 216
x26959:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1445 6
x26961:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x26964:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 98 105
x26969:	mov [bp + 19], bp	; 3: 137 110 19
x26972:	add bp, 17	; 3: 131 197 17
x26975:	jmp tolower	; 3: 233 188 187

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1446

scanLongInt$48:	; NotEqual 56 £temporary1446 120
x26978:	cmp bx, 120	; 3: 131 251 120
x26981:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x26983:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x26988:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 122 105
x26993:	mov [bp + 19], bp	; 3: 137 110 19
x26996:	add bp, 17	; 3: 131 197 17
x26999:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1448

scanLongInt$54:	; Assign input £temporary1448
x27002:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x27005:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x27007:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x27012:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x27014:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x27019:	mov al, [bp + 16]	; 3: 138 70 16
x27022:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x27025:	mov ax, [bp + 6]	; 3: 139 70 6
x27028:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x27031:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 165 105
x27036:	mov [bp + 19], bp	; 3: 137 110 19
x27039:	add bp, 17	; 3: 131 197 17
x27042:	jmp @3091$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1449

scanLongInt$65:	; Equal 82 £temporary1449 0
x27045:	cmp bx, 0	; 3: 131 251 0
x27048:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1450 base
x27050:	mov bx, [bp + 6]	; 3: 139 94 6
x27053:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x27060:	cmp bx, 0	; 3: 131 251 0
x27063:	jge scanLongInt$67	; 2: 125 5
x27065:	neg bx	; 2: 247 219
x27067:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1450
x27070:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27074:	xor edx, edx	; 3: 102 49 210
x27077:	imul ebx	; 3: 102 247 235
x27080:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x27084:	mov al, [bp + 16]	; 3: 138 70 16
x27087:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x27090:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 224 105
x27095:	mov [bp + 19], bp	; 3: 137 110 19
x27098:	add bp, 17	; 3: 131 197 17
x27101:	jmp @3155$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1452

scanLongInt$73:	; IntegralToIntegral £temporary1453 £temporary1452
x27104:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x27111:	cmp bx, 0	; 3: 131 251 0
x27114:	jge scanLongInt$74	; 2: 125 5
x27116:	neg bx	; 2: 247 219
x27118:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1453
x27121:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x27125:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 3 106
x27130:	mov [bp + 19], bp	; 3: 137 110 19
x27133:	add bp, 17	; 3: 131 197 17
x27136:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1455

scanLongInt$79:	; Assign input £temporary1455
x27139:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x27142:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x27147:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x27150:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x27154:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1457 longValue
x27156:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27160:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1457
x27163:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x27167:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x27171:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x27173:	inc word [g_inCount]	; 4: 255 6 160 101

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x27177:	mov al, [bp + 16]	; 3: 138 70 16
x27180:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x27183:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 61 106
x27188:	mov [bp + 19], bp	; 3: 137 110 19
x27191:	add bp, 17	; 3: 131 197 17
x27194:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x27197:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x27201:	mov ax, [bp]	; 3: 139 70 0
x27204:	mov di, [bp + 4]	; 3: 139 126 4
x27207:	mov bp, [bp + 2]	; 3: 139 110 2
x27210:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@3091$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@3091$isDigitInBase$1:	; IntegralToIntegral £temporary1381 c
x27212:	mov al, [bp + 6]	; 3: 138 70 6
x27215:	and ax, 255	; 3: 37 255 0
x27218:	cmp al, 0	; 2: 60 0
x27220:	jge @3091$isDigitInBase$2	; 2: 125 4
x27222:	neg al	; 2: 246 216
x27224:	neg ax	; 2: 247 216

@3091$isDigitInBase$2:	; Parameter 9 £temporary1381 6
x27226:	mov [bp + 15], ax	; 3: 137 70 15

@3091$isDigitInBase$3:	; Call 9 isdigit 0
x27229:	mov word [bp + 9], @3091$isDigitInBase$4	; 5: 199 70 9 107 106
x27234:	mov [bp + 11], bp	; 3: 137 110 11
x27237:	add bp, 9	; 3: 131 197 9
x27240:	jmp isdigit	; 3: 233 1 193

@3091$isDigitInBase$4:	; PostCall 9

@3091$isDigitInBase$5:	; GetReturnValue £temporary1382

@3091$isDigitInBase$6:	; Equal 17 £temporary1382 0
x27243:	cmp bx, 0	; 3: 131 251 0
x27246:	je @3091$isDigitInBase$17	; 2: 116 52

@3091$isDigitInBase$7:	; BinarySubtract £temporary1383 c 48
x27248:	mov al, [bp + 6]	; 3: 138 70 6
x27251:	sub al, 48	; 2: 44 48

@3091$isDigitInBase$8:	; IntegralToIntegral £temporary1384 £temporary1383
x27253:	and ax, 255	; 3: 37 255 0
x27256:	cmp al, 0	; 2: 60 0
x27258:	jge @3091$isDigitInBase$9	; 2: 125 4
x27260:	neg al	; 2: 246 216
x27262:	neg ax	; 2: 247 216

@3091$isDigitInBase$9:	; Assign value £temporary1384
x27264:	mov [bp + 9], ax	; 3: 137 70 9

@3091$isDigitInBase$10:	; SignedLessThan 14 value 0
x27267:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27271:	jl @3091$isDigitInBase$14	; 2: 124 13

@3091$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x27273:	mov ax, [bp + 7]	; 3: 139 70 7
x27276:	cmp [bp + 9], ax	; 3: 57 70 9
x27279:	jge @3091$isDigitInBase$14	; 2: 125 5

@3091$isDigitInBase$12:	; Assign £temporary1388 1
x27281:	mov bx, 1	; 3: 187 1 0

@3091$isDigitInBase$13:	; Goto 15
x27284:	jmp @3091$isDigitInBase$15	; 2: 235 3

@3091$isDigitInBase$14:	; Assign £temporary1388 0
x27286:	mov bx, 0	; 3: 187 0 0

@3091$isDigitInBase$15:	; SetReturnValue £temporary1388

@3091$isDigitInBase$16:	; Return £temporary1388
x27289:	mov ax, [bp]	; 3: 139 70 0
x27292:	mov di, [bp + 4]	; 3: 139 126 4
x27295:	mov bp, [bp + 2]	; 3: 139 110 2
x27298:	jmp ax	; 2: 255 224

@3091$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@3091$isDigitInBase$18:	; IntegralToIntegral £temporary1389 c
x27300:	mov al, [bp + 6]	; 3: 138 70 6
x27303:	and ax, 255	; 3: 37 255 0
x27306:	cmp al, 0	; 2: 60 0
x27308:	jge @3091$isDigitInBase$19	; 2: 125 4
x27310:	neg al	; 2: 246 216
x27312:	neg ax	; 2: 247 216

@3091$isDigitInBase$19:	; Parameter 9 £temporary1389 6
x27314:	mov [bp + 15], ax	; 3: 137 70 15

@3091$isDigitInBase$20:	; Call 9 islower 0
x27317:	mov word [bp + 9], @3091$isDigitInBase$21	; 5: 199 70 9 195 106
x27322:	mov [bp + 11], bp	; 3: 137 110 11
x27325:	add bp, 9	; 3: 131 197 9
x27328:	jmp islower	; 3: 233 165 0

@3091$isDigitInBase$21:	; PostCall 9

@3091$isDigitInBase$22:	; GetReturnValue £temporary1390

@3091$isDigitInBase$23:	; Equal 34 £temporary1390 0
x27331:	cmp bx, 0	; 3: 131 251 0
x27334:	je @3091$isDigitInBase$34	; 2: 116 55

@3091$isDigitInBase$24:	; BinarySubtract £temporary1391 c 97
x27336:	mov al, [bp + 6]	; 3: 138 70 6
x27339:	sub al, 97	; 2: 44 97

@3091$isDigitInBase$25:	; IntegralToIntegral £temporary1392 £temporary1391
x27341:	and ax, 255	; 3: 37 255 0
x27344:	cmp al, 0	; 2: 60 0
x27346:	jge @3091$isDigitInBase$26	; 2: 125 4
x27348:	neg al	; 2: 246 216
x27350:	neg ax	; 2: 247 216

@3091$isDigitInBase$26:	; BinaryAdd value £temporary1392 10
x27352:	add ax, 10	; 3: 131 192 10
x27355:	mov [bp + 9], ax	; 3: 137 70 9

@3091$isDigitInBase$27:	; SignedLessThan 31 value 0
x27358:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27362:	jl @3091$isDigitInBase$31	; 2: 124 13

@3091$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x27364:	mov ax, [bp + 7]	; 3: 139 70 7
x27367:	cmp [bp + 9], ax	; 3: 57 70 9
x27370:	jge @3091$isDigitInBase$31	; 2: 125 5

@3091$isDigitInBase$29:	; Assign £temporary1397 1
x27372:	mov bx, 1	; 3: 187 1 0

@3091$isDigitInBase$30:	; Goto 32
x27375:	jmp @3091$isDigitInBase$32	; 2: 235 3

@3091$isDigitInBase$31:	; Assign £temporary1397 0
x27377:	mov bx, 0	; 3: 187 0 0

@3091$isDigitInBase$32:	; SetReturnValue £temporary1397

@3091$isDigitInBase$33:	; Return £temporary1397
x27380:	mov ax, [bp]	; 3: 139 70 0
x27383:	mov di, [bp + 4]	; 3: 139 126 4
x27386:	mov bp, [bp + 2]	; 3: 139 110 2
x27389:	jmp ax	; 2: 255 224

@3091$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@3091$isDigitInBase$35:	; IntegralToIntegral £temporary1398 c
x27391:	mov al, [bp + 6]	; 3: 138 70 6
x27394:	and ax, 255	; 3: 37 255 0
x27397:	cmp al, 0	; 2: 60 0
x27399:	jge @3091$isDigitInBase$36	; 2: 125 4
x27401:	neg al	; 2: 246 216
x27403:	neg ax	; 2: 247 216

@3091$isDigitInBase$36:	; Parameter 9 £temporary1398 6
x27405:	mov [bp + 15], ax	; 3: 137 70 15

@3091$isDigitInBase$37:	; Call 9 isupper 0
x27408:	mov word [bp + 9], @3091$isDigitInBase$38	; 5: 199 70 9 30 107
x27413:	mov [bp + 11], bp	; 3: 137 110 11
x27416:	add bp, 9	; 3: 131 197 9
x27419:	jmp isupper	; 3: 233 238 178

@3091$isDigitInBase$38:	; PostCall 9

@3091$isDigitInBase$39:	; GetReturnValue £temporary1399

@3091$isDigitInBase$40:	; Equal 51 £temporary1399 0
x27422:	cmp bx, 0	; 3: 131 251 0
x27425:	je @3091$isDigitInBase$51	; 2: 116 55

@3091$isDigitInBase$41:	; BinarySubtract £temporary1400 c 65
x27427:	mov al, [bp + 6]	; 3: 138 70 6
x27430:	sub al, 65	; 2: 44 65

@3091$isDigitInBase$42:	; IntegralToIntegral £temporary1401 £temporary1400
x27432:	and ax, 255	; 3: 37 255 0
x27435:	cmp al, 0	; 2: 60 0
x27437:	jge @3091$isDigitInBase$43	; 2: 125 4
x27439:	neg al	; 2: 246 216
x27441:	neg ax	; 2: 247 216

@3091$isDigitInBase$43:	; BinaryAdd value £temporary1401 10
x27443:	add ax, 10	; 3: 131 192 10
x27446:	mov [bp + 9], ax	; 3: 137 70 9

@3091$isDigitInBase$44:	; SignedLessThan 48 value 0
x27449:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27453:	jl @3091$isDigitInBase$48	; 2: 124 13

@3091$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x27455:	mov ax, [bp + 7]	; 3: 139 70 7
x27458:	cmp [bp + 9], ax	; 3: 57 70 9
x27461:	jge @3091$isDigitInBase$48	; 2: 125 5

@3091$isDigitInBase$46:	; Assign £temporary1406 1
x27463:	mov bx, 1	; 3: 187 1 0

@3091$isDigitInBase$47:	; Goto 49
x27466:	jmp @3091$isDigitInBase$49	; 2: 235 3

@3091$isDigitInBase$48:	; Assign £temporary1406 0
x27468:	mov bx, 0	; 3: 187 0 0

@3091$isDigitInBase$49:	; SetReturnValue £temporary1406

@3091$isDigitInBase$50:	; Return £temporary1406
x27471:	mov ax, [bp]	; 3: 139 70 0
x27474:	mov di, [bp + 4]	; 3: 139 126 4
x27477:	mov bp, [bp + 2]	; 3: 139 110 2
x27480:	jmp ax	; 2: 255 224

@3091$isDigitInBase$51:	; SetReturnValue 0
x27482:	mov bx, 0	; 3: 187 0 0

@3091$isDigitInBase$52:	; Return 0
x27485:	mov ax, [bp]	; 3: 139 70 0
x27488:	mov di, [bp + 4]	; 3: 139 126 4
x27491:	mov bp, [bp + 2]	; 3: 139 110 2
x27494:	jmp ax	; 2: 255 224

@3091$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x27496:	mov word [bp + 8], islower$2	; 5: 199 70 8 118 107
x27501:	mov [bp + 10], bp	; 3: 137 110 10
x27504:	add bp, 8	; 3: 131 197 8
x27507:	jmp localeconv	; 3: 233 1 179

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary348

islower$4:	; Assign localeConvPtr £temporary348
x27510:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x27513:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x27517:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary350 -> localeConvPtr localeConvPtr 12
x27519:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary350 -> localeConvPtr 6
x27522:	mov ax, [si + 12]	; 3: 139 68 12
x27525:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x27528:	mov ax, [bp + 6]	; 3: 139 70 6
x27531:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x27534:	mov word [bp + 10], islower$11	; 5: 199 70 10 156 107
x27539:	mov [bp + 12], bp	; 3: 137 110 12
x27542:	add bp, 10	; 3: 131 197 10
x27545:	jmp strchr	; 3: 233 33 182

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary351

islower$13:	; Equal 16 £temporary351 0
x27548:	cmp bx, 0	; 3: 131 251 0
x27551:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary353 1
x27553:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x27556:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary353 0
x27558:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary353

islower$18:	; Return £temporary353
x27561:	mov ax, [bp]	; 3: 139 70 0
x27564:	mov di, [bp + 4]	; 3: 139 126 4
x27567:	mov bp, [bp + 2]	; 3: 139 110 2
x27570:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x27572:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x27576:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x27578:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x27582:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary357 1
x27584:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x27587:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary357 0
x27589:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary357

islower$25:	; Return £temporary357
x27592:	mov ax, [bp]	; 3: 139 70 0
x27595:	mov di, [bp + 4]	; 3: 139 126 4
x27598:	mov bp, [bp + 2]	; 3: 139 110 2
x27601:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@3155$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@3155$digitToValue$1:	; IntegralToIntegral £temporary1413 c
x27603:	mov al, [bp + 6]	; 3: 138 70 6
x27606:	and ax, 255	; 3: 37 255 0
x27609:	cmp al, 0	; 2: 60 0
x27611:	jge @3155$digitToValue$2	; 2: 125 4
x27613:	neg al	; 2: 246 216
x27615:	neg ax	; 2: 247 216

@3155$digitToValue$2:	; Parameter 7 £temporary1413 6
x27617:	mov [bp + 13], ax	; 3: 137 70 13

@3155$digitToValue$3:	; Call 7 isdigit 0
x27620:	mov word [bp + 7], @3155$digitToValue$4	; 5: 199 70 7 242 107
x27625:	mov [bp + 9], bp	; 3: 137 110 9
x27628:	add bp, 7	; 3: 131 197 7
x27631:	jmp isdigit	; 3: 233 122 191

@3155$digitToValue$4:	; PostCall 7

@3155$digitToValue$5:	; GetReturnValue £temporary1414

@3155$digitToValue$6:	; Equal 11 £temporary1414 0
x27634:	cmp bx, 0	; 3: 131 251 0
x27637:	je @3155$digitToValue$11	; 2: 116 30

@3155$digitToValue$7:	; BinarySubtract £temporary1415 c 48
x27639:	mov bl, [bp + 6]	; 3: 138 94 6
x27642:	sub bl, 48	; 3: 128 235 48

@3155$digitToValue$8:	; IntegralToIntegral £temporary1416 £temporary1415
x27645:	and bx, 255	; 4: 129 227 255 0
x27649:	cmp bl, 0	; 3: 128 251 0
x27652:	jge @3155$digitToValue$9	; 2: 125 4
x27654:	neg bl	; 2: 246 219
x27656:	neg bx	; 2: 247 219

@3155$digitToValue$9:	; SetReturnValue £temporary1416

@3155$digitToValue$10:	; Return £temporary1416
x27658:	mov ax, [bp]	; 3: 139 70 0
x27661:	mov di, [bp + 4]	; 3: 139 126 4
x27664:	mov bp, [bp + 2]	; 3: 139 110 2
x27667:	jmp ax	; 2: 255 224

@3155$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@3155$digitToValue$12:	; IntegralToIntegral £temporary1417 c
x27669:	mov al, [bp + 6]	; 3: 138 70 6
x27672:	and ax, 255	; 3: 37 255 0
x27675:	cmp al, 0	; 2: 60 0
x27677:	jge @3155$digitToValue$13	; 2: 125 4
x27679:	neg al	; 2: 246 216
x27681:	neg ax	; 2: 247 216

@3155$digitToValue$13:	; Parameter 7 £temporary1417 6
x27683:	mov [bp + 13], ax	; 3: 137 70 13

@3155$digitToValue$14:	; Call 7 islower 0
x27686:	mov word [bp + 7], @3155$digitToValue$15	; 5: 199 70 7 52 108
x27691:	mov [bp + 9], bp	; 3: 137 110 9
x27694:	add bp, 7	; 3: 131 197 7
x27697:	jmp islower	; 3: 233 52 255

@3155$digitToValue$15:	; PostCall 7

@3155$digitToValue$16:	; GetReturnValue £temporary1418

@3155$digitToValue$17:	; Equal 23 £temporary1418 0
x27700:	cmp bx, 0	; 3: 131 251 0
x27703:	je @3155$digitToValue$23	; 2: 116 33

@3155$digitToValue$18:	; BinarySubtract £temporary1419 c 97
x27705:	mov bl, [bp + 6]	; 3: 138 94 6
x27708:	sub bl, 97	; 3: 128 235 97

@3155$digitToValue$19:	; IntegralToIntegral £temporary1420 £temporary1419
x27711:	and bx, 255	; 4: 129 227 255 0
x27715:	cmp bl, 0	; 3: 128 251 0
x27718:	jge @3155$digitToValue$20	; 2: 125 4
x27720:	neg bl	; 2: 246 219
x27722:	neg bx	; 2: 247 219

@3155$digitToValue$20:	; BinaryAdd £temporary1421 £temporary1420 10
x27724:	add bx, 10	; 3: 131 195 10

@3155$digitToValue$21:	; SetReturnValue £temporary1421

@3155$digitToValue$22:	; Return £temporary1421
x27727:	mov ax, [bp]	; 3: 139 70 0
x27730:	mov di, [bp + 4]	; 3: 139 126 4
x27733:	mov bp, [bp + 2]	; 3: 139 110 2
x27736:	jmp ax	; 2: 255 224

@3155$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@3155$digitToValue$24:	; IntegralToIntegral £temporary1422 c
x27738:	mov al, [bp + 6]	; 3: 138 70 6
x27741:	and ax, 255	; 3: 37 255 0
x27744:	cmp al, 0	; 2: 60 0
x27746:	jge @3155$digitToValue$25	; 2: 125 4
x27748:	neg al	; 2: 246 216
x27750:	neg ax	; 2: 247 216

@3155$digitToValue$25:	; Parameter 7 £temporary1422 6
x27752:	mov [bp + 13], ax	; 3: 137 70 13

@3155$digitToValue$26:	; Call 7 isupper 0
x27755:	mov word [bp + 7], @3155$digitToValue$27	; 5: 199 70 7 121 108
x27760:	mov [bp + 9], bp	; 3: 137 110 9
x27763:	add bp, 7	; 3: 131 197 7
x27766:	jmp isupper	; 3: 233 147 177

@3155$digitToValue$27:	; PostCall 7

@3155$digitToValue$28:	; GetReturnValue £temporary1423

@3155$digitToValue$29:	; Equal 35 £temporary1423 0
x27769:	cmp bx, 0	; 3: 131 251 0
x27772:	je @3155$digitToValue$35	; 2: 116 33

@3155$digitToValue$30:	; BinarySubtract £temporary1424 c 65
x27774:	mov bl, [bp + 6]	; 3: 138 94 6
x27777:	sub bl, 65	; 3: 128 235 65

@3155$digitToValue$31:	; IntegralToIntegral £temporary1425 £temporary1424
x27780:	and bx, 255	; 4: 129 227 255 0
x27784:	cmp bl, 0	; 3: 128 251 0
x27787:	jge @3155$digitToValue$32	; 2: 125 4
x27789:	neg bl	; 2: 246 219
x27791:	neg bx	; 2: 247 219

@3155$digitToValue$32:	; BinaryAdd £temporary1426 £temporary1425 10
x27793:	add bx, 10	; 3: 131 195 10

@3155$digitToValue$33:	; SetReturnValue £temporary1426

@3155$digitToValue$34:	; Return £temporary1426
x27796:	mov ax, [bp]	; 3: 139 70 0
x27799:	mov di, [bp + 4]	; 3: 139 126 4
x27802:	mov bp, [bp + 2]	; 3: 139 110 2
x27805:	jmp ax	; 2: 255 224

@3155$digitToValue$35:	; SetReturnValue 0
x27807:	mov bx, 0	; 3: 187 0 0

@3155$digitToValue$36:	; Return 0
x27810:	mov ax, [bp]	; 3: 139 70 0
x27813:	mov di, [bp + 4]	; 3: 139 126 4
x27816:	mov bp, [bp + 2]	; 3: 139 110 2
x27819:	jmp ax	; 2: 255 224

@3155$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x27821:	mov ax, [g_inStatus]	; 3: 161 125 96
x27824:	cmp ax, 0	; 3: 131 248 0
x27827:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x27829:	cmp ax, 1	; 3: 131 248 1
x27832:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x27834:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x27836:	dec word [g_inChars]	; 4: 255 14 162 101

unscanChar$5:	; Goto 7
x27840:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x27842:	dec word [g_inChars]	; 4: 255 14 162 101

unscanChar$7:	; Return 0
x27846:	mov ax, [bp]	; 3: 139 70 0
x27849:	mov di, [bp + 4]	; 3: 139 126 4
x27852:	mov bp, [bp + 2]	; 3: 139 110 2
x27855:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x27857:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x27865:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 231 108
x27870:	mov [bp + 18], bp	; 3: 137 110 18
x27873:	add bp, 16	; 3: 131 197 16
x27876:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1468

scanUnsignedLongInt$5:	; Assign input £temporary1468
x27879:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x27882:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1469 input
x27887:	mov al, [bp + 16]	; 3: 138 70 16
x27890:	and ax, 255	; 3: 37 255 0
x27893:	cmp al, 0	; 2: 60 0
x27895:	jge scanUnsignedLongInt$9	; 2: 125 4
x27897:	neg al	; 2: 246 216
x27899:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1469 6
x27901:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x27904:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 14 109
x27909:	mov [bp + 21], bp	; 3: 137 110 21
x27912:	add bp, 19	; 3: 131 197 19
x27915:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1470

scanUnsignedLongInt$13:	; Equal 20 £temporary1470 0
x27918:	cmp bx, 0	; 3: 131 251 0
x27921:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x27923:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 33 109
x27928:	mov [bp + 21], bp	; 3: 137 110 21
x27931:	add bp, 19	; 3: 131 197 19
x27934:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1471

scanUnsignedLongInt$18:	; Assign input £temporary1471
x27937:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x27940:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x27942:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x27946:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x27948:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 58 109
x27953:	mov [bp + 21], bp	; 3: 137 110 21
x27956:	add bp, 19	; 3: 131 197 19
x27959:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1474

scanUnsignedLongInt$25:	; Assign input £temporary1474
x27962:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x27965:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27969:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x27971:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x27975:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x27977:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 87 109
x27982:	mov [bp + 21], bp	; 3: 137 110 21
x27985:	add bp, 19	; 3: 131 197 19
x27988:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1477

scanUnsignedLongInt$32:	; Assign input £temporary1477
x27991:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1478 input
x27994:	mov al, [bp + 16]	; 3: 138 70 16
x27997:	and ax, 255	; 3: 37 255 0
x28000:	cmp al, 0	; 2: 60 0
x28002:	jge scanUnsignedLongInt$35	; 2: 125 4
x28004:	neg al	; 2: 246 216
x28006:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1478 6
x28008:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x28011:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 121 109
x28016:	mov [bp + 21], bp	; 3: 137 110 21
x28019:	add bp, 19	; 3: 131 197 19
x28022:	jmp tolower	; 3: 233 165 183

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1479

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1479 120
x28025:	cmp bx, 120	; 3: 131 251 120
x28028:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x28030:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x28035:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 145 109
x28040:	mov [bp + 21], bp	; 3: 137 110 21
x28043:	add bp, 19	; 3: 131 197 19
x28046:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1481

scanUnsignedLongInt$45:	; Assign input £temporary1481
x28049:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x28052:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x28054:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x28059:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x28061:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x28066:	mov al, [bp + 16]	; 3: 138 70 16
x28069:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x28072:	mov ax, [bp + 6]	; 3: 139 70 6
x28075:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x28078:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 188 109
x28083:	mov [bp + 21], bp	; 3: 137 110 21
x28086:	add bp, 19	; 3: 131 197 19
x28089:	jmp @3091$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1482

scanUnsignedLongInt$56:	; Equal 73 £temporary1482 0
x28092:	cmp bx, 0	; 3: 131 251 0
x28095:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1483 base
x28097:	mov bx, [bp + 6]	; 3: 139 94 6
x28100:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1483
x28107:	mov eax, [bp + 8]	; 4: 102 139 70 8
x28111:	xor edx, edx	; 3: 102 49 210
x28114:	mul ebx	; 3: 102 247 227
x28117:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x28121:	mov al, [bp + 16]	; 3: 138 70 16
x28124:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x28127:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 237 109
x28132:	mov [bp + 21], bp	; 3: 137 110 21
x28135:	add bp, 19	; 3: 131 197 19
x28138:	jmp @3155$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1485

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1486 £temporary1485
x28141:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1486
x28148:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x28152:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x28157:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 11 110
x28162:	mov [bp + 21], bp	; 3: 137 110 21
x28165:	add bp, 19	; 3: 131 197 19
x28168:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1488

scanUnsignedLongInt$71:	; Assign input £temporary1488
x28171:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x28174:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x28176:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x28180:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x28182:	inc word [g_inCount]	; 4: 255 6 160 101

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x28186:	mov al, [bp + 16]	; 3: 138 70 16
x28189:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x28192:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 46 110
x28197:	mov [bp + 21], bp	; 3: 137 110 21
x28200:	add bp, 19	; 3: 131 197 19
x28203:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x28206:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x28210:	mov ax, [bp]	; 3: 139 70 0
x28213:	mov di, [bp + 4]	; 3: 139 126 4
x28216:	mov bp, [bp + 2]	; 3: 139 110 2
x28219:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x28221:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x28226:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x28231:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x28233:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x28236:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x28238:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x28241:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 95 110
x28246:	mov [bp + 28], bp	; 3: 137 110 28
x28249:	add bp, 26	; 3: 131 197 26
x28252:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1499

scanLongDouble$10:	; Assign input £temporary1499
x28255:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1500 input
x28258:	mov al, [bp + 26]	; 3: 138 70 26
x28261:	and ax, 255	; 3: 37 255 0
x28264:	cmp al, 0	; 2: 60 0
x28266:	jge scanLongDouble$13	; 2: 125 4
x28268:	neg al	; 2: 246 216
x28270:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1500 6
x28272:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x28275:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 129 110
x28280:	mov [bp + 29], bp	; 3: 137 110 29
x28283:	add bp, 27	; 3: 131 197 27
x28286:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1501

scanLongDouble$17:	; Equal 24 £temporary1501 0
x28289:	cmp bx, 0	; 3: 131 251 0
x28292:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x28294:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 148 110
x28299:	mov [bp + 29], bp	; 3: 137 110 29
x28302:	add bp, 27	; 3: 131 197 27
x28305:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1502

scanLongDouble$22:	; Assign input £temporary1502
x28308:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x28311:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x28313:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x28317:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x28319:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 173 110
x28324:	mov [bp + 29], bp	; 3: 137 110 29
x28327:	add bp, 27	; 3: 131 197 27
x28330:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1505

scanLongDouble$29:	; Assign input £temporary1505
x28333:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x28336:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x28338:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x28342:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x28344:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x28349:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 203 110
x28354:	mov [bp + 29], bp	; 3: 137 110 29
x28357:	add bp, 27	; 3: 131 197 27
x28360:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1507

scanLongDouble$37:	; Assign input £temporary1507
x28363:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1508 input
x28366:	mov al, [bp + 26]	; 3: 138 70 26
x28369:	and ax, 255	; 3: 37 255 0
x28372:	cmp al, 0	; 2: 60 0
x28374:	jge scanLongDouble$40	; 2: 125 4
x28376:	neg al	; 2: 246 216
x28378:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1508 6
x28380:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x28383:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 237 110
x28388:	mov [bp + 29], bp	; 3: 137 110 29
x28391:	add bp, 27	; 3: 131 197 27
x28394:	jmp isdigit	; 3: 233 127 188

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1509

scanLongDouble$44:	; Equal 60 £temporary1509 0
x28397:	cmp bx, 0	; 3: 131 251 0
x28400:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x28402:	fld qword [@3354$float8$10.0#]	; 4: 221 6 96 112

scanLongDouble$46:	; PushFloat value
x28406:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1510 10.0 value
x28409:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1511 input 48
x28411:	mov al, [bp + 26]	; 3: 138 70 26
x28414:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1513 £temporary1511
x28416:	and ax, 255	; 3: 37 255 0
x28419:	cmp al, 0	; 2: 60 0
x28421:	jge scanLongDouble$50	; 2: 125 4
x28423:	neg al	; 2: 246 216
x28425:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1512 £temporary1513
x28427:	mov [container2bytes#], ax	; 3: 163 79 27
x28430:	fild word [container2bytes#]	; 4: 223 6 79 27

scanLongDouble$51:	; BinaryAdd £temporary1514 £temporary1510 £temporary1512
x28434:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x28436:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x28439:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 37 111
x28444:	mov [bp + 29], bp	; 3: 137 110 29
x28447:	add bp, 27	; 3: 131 197 27
x28450:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1515

scanLongDouble$57:	; Assign input £temporary1515
x28453:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x28456:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x28461:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x28463:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x28467:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x28469:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 67 111
x28474:	mov [bp + 29], bp	; 3: 137 110 29
x28477:	add bp, 27	; 3: 131 197 27
x28480:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1518

scanLongDouble$65:	; Assign input £temporary1518
x28483:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1519 input
x28486:	mov al, [bp + 26]	; 3: 138 70 26
x28489:	and ax, 255	; 3: 37 255 0
x28492:	cmp al, 0	; 2: 60 0
x28494:	jge scanLongDouble$68	; 2: 125 4
x28496:	neg al	; 2: 246 216
x28498:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1519 6
x28500:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x28503:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 101 111
x28508:	mov [bp + 29], bp	; 3: 137 110 29
x28511:	add bp, 27	; 3: 131 197 27
x28514:	jmp isdigit	; 3: 233 7 188

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1520

scanLongDouble$72:	; Equal 92 £temporary1520 0
x28517:	cmp bx, 0	; 3: 131 251 0
x28520:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x28522:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x28525:	fld qword [@3374$float8$10.0#]	; 4: 221 6 104 112

scanLongDouble$75:	; SignedDivide £temporary1521 factor 10.0
x28529:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x28531:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x28534:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x28537:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1522 input 48
x28540:	mov al, [bp + 26]	; 3: 138 70 26
x28543:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1524 £temporary1522
x28545:	and ax, 255	; 3: 37 255 0
x28548:	cmp al, 0	; 2: 60 0
x28550:	jge scanLongDouble$81	; 2: 125 4
x28552:	neg al	; 2: 246 216
x28554:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1523 £temporary1524
x28556:	mov [container2bytes#], ax	; 3: 163 79 27
x28559:	fild word [container2bytes#]	; 4: 223 6 79 27

scanLongDouble$82:	; SignedMultiply £temporary1525 factor £temporary1523
x28563:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1526 value £temporary1525
x28565:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x28567:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x28570:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 168 111
x28575:	mov [bp + 29], bp	; 3: 137 110 29
x28578:	add bp, 27	; 3: 131 197 27
x28581:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1527

scanLongDouble$89:	; Assign input £temporary1527
x28584:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x28587:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x28592:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1529 input
x28594:	mov al, [bp + 26]	; 3: 138 70 26
x28597:	and ax, 255	; 3: 37 255 0
x28600:	cmp al, 0	; 2: 60 0
x28602:	jge scanLongDouble$94	; 2: 125 4
x28604:	neg al	; 2: 246 216
x28606:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1529 6
x28608:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x28611:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 209 111
x28616:	mov [bp + 29], bp	; 3: 137 110 29
x28619:	add bp, 27	; 3: 131 197 27
x28622:	jmp tolower	; 3: 233 77 181

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1530

scanLongDouble$98:	; NotEqual 118 £temporary1530 101
x28625:	cmp bx, 101	; 3: 131 251 101
x28628:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x28630:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x28635:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 233 111
x28640:	mov [bp + 29], bp	; 3: 137 110 29
x28643:	add bp, 27	; 3: 131 197 27
x28646:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1532

scanLongDouble$104:	; IntegralToFloating £temporary1533 £temporary1532
x28649:	mov [container4bytes#], ebx	; 5: 102 137 30 80 36
x28654:	fild dword [container4bytes#]	; 4: 219 6 80 36

scanLongDouble$105:	; PopFloat exponent
x28658:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x28661:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x28664:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x28667:	fld qword [@3399$float8$10.0#]	; 4: 221 6 112 112

scanLongDouble$109:	; Parameter 35 10.0 6
x28671:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x28674:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x28677:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x28680:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 22 112
x28685:	mov [bp + 45], bp	; 3: 137 110 45
x28688:	add bp, 43	; 3: 131 197 43
x28691:	jmp pow	; 3: 233 133 184

scanLongDouble$113:	; PostCall 35
x28694:	fstp qword [bp + 43]	; 3: 221 94 43
x28697:	fld qword [bp + 35]	; 3: 221 70 35
x28700:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1534

scanLongDouble$115:	; SignedMultiply £temporary1535 value £temporary1534
x28703:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x28705:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x28708:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x28710:	mov al, [bp + 26]	; 3: 138 70 26
x28713:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x28716:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 58 112
x28721:	mov [bp + 29], bp	; 3: 137 110 29
x28724:	add bp, 27	; 3: 131 197 27
x28727:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x28730:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28734:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x28736:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1537 value
x28739:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x28741:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x28744:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x28748:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x28750:	inc word [g_inCount]	; 4: 255 6 160 101

scanLongDouble$128:	; PushFloat value
x28754:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x28757:	mov ax, [bp]	; 3: 139 70 0
x28760:	mov di, [bp + 4]	; 3: 139 126 4
x28763:	mov bp, [bp + 2]	; 3: 139 110 2
x28766:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

@3354$float8$10.0#:
x28768:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3374$float8$10.0#:
x28776:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3399$float8$10.0#:
x28784:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

scanPattern:	; Assign index 0
x28792:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 16 scanChar 0
x28797:	mov word [bp + 16], scanPattern$3	; 5: 199 70 16 139 112
x28802:	mov [bp + 18], bp	; 3: 137 110 18
x28805:	add bp, 16	; 3: 131 197 16
x28808:	jmp scanChar	; 3: 233 25 245

scanPattern$3:	; PostCall 16

scanPattern$4:	; GetReturnValue £temporary1248

scanPattern$5:	; Assign input £temporary1248
x28811:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1249 input
x28814:	mov al, [bp + 16]	; 3: 138 70 16
x28817:	and ax, 255	; 3: 37 255 0
x28820:	cmp al, 0	; 2: 60 0
x28822:	jge scanPattern$8	; 2: 125 4
x28824:	neg al	; 2: 246 216
x28826:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 17 £temporary1249 6
x28828:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$9:	; Call 17 isspace 0
x28831:	mov word [bp + 17], scanPattern$10	; 5: 199 70 17 173 112
x28836:	mov [bp + 19], bp	; 3: 137 110 19
x28839:	add bp, 17	; 3: 131 197 17
x28842:	jmp isspace	; 3: 233 179 247

scanPattern$10:	; PostCall 17

scanPattern$11:	; GetReturnValue £temporary1250

scanPattern$12:	; Equal 19 £temporary1250 0
x28845:	cmp bx, 0	; 3: 131 251 0
x28848:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 17 scanChar 0
x28850:	mov word [bp + 17], scanPattern$15	; 5: 199 70 17 192 112
x28855:	mov [bp + 19], bp	; 3: 137 110 19
x28858:	add bp, 17	; 3: 131 197 17
x28861:	jmp scanChar	; 3: 233 228 244

scanPattern$15:	; PostCall 17

scanPattern$16:	; GetReturnValue £temporary1251

scanPattern$17:	; Assign input £temporary1251
x28864:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$18:	; Goto 6
x28867:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 55 string 0
x28869:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28873:	je scanPattern$55	; 4: 15 132 156 0

scanPattern$20:	; NotEqual 30 not 0
x28877:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28881:	jne scanPattern$30	; 2: 117 48

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 17 pattern 6
x28883:	mov ax, [bp + 8]	; 3: 139 70 8
x28886:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$23:	; Parameter 17 size 8
x28889:	mov ax, [bp + 10]	; 3: 139 70 10
x28892:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$24:	; IntegralToIntegral £temporary1256 input
x28895:	mov al, [bp + 16]	; 3: 138 70 16
x28898:	and ax, 255	; 3: 37 255 0
x28901:	cmp al, 0	; 2: 60 0
x28903:	jge scanPattern$25	; 2: 125 4
x28905:	neg al	; 2: 246 216
x28907:	neg ax	; 2: 247 216

scanPattern$25:	; Parameter 17 £temporary1256 10
x28909:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$26:	; Call 17 strnchr 0
x28912:	mov word [bp + 17], scanPattern$27	; 5: 199 70 17 254 112
x28917:	mov [bp + 19], bp	; 3: 137 110 19
x28920:	add bp, 17	; 3: 131 197 17
x28923:	jmp @2849$strnchr	; 3: 233 245 0

scanPattern$27:	; PostCall 17

scanPattern$28:	; GetReturnValue £temporary1257

scanPattern$29:	; NotEqual 40 £temporary1257 0
x28926:	cmp bx, 0	; 3: 131 251 0
x28929:	jne scanPattern$40	; 2: 117 54

scanPattern$30:	; Equal 51 not 0
x28931:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28935:	je scanPattern$51	; 2: 116 84

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$32:	; Parameter 17 pattern 6
x28937:	mov ax, [bp + 8]	; 3: 139 70 8
x28940:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$33:	; Parameter 17 size 8
x28943:	mov ax, [bp + 10]	; 3: 139 70 10
x28946:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$34:	; IntegralToIntegral £temporary1260 input
x28949:	mov al, [bp + 16]	; 3: 138 70 16
x28952:	and ax, 255	; 3: 37 255 0
x28955:	cmp al, 0	; 2: 60 0
x28957:	jge scanPattern$35	; 2: 125 4
x28959:	neg al	; 2: 246 216
x28961:	neg ax	; 2: 247 216

scanPattern$35:	; Parameter 17 £temporary1260 10
x28963:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$36:	; Call 17 strnchr 0
x28966:	mov word [bp + 17], scanPattern$37	; 5: 199 70 17 52 113
x28971:	mov [bp + 19], bp	; 3: 137 110 19
x28974:	add bp, 17	; 3: 131 197 17
x28977:	jmp @2849$strnchr	; 3: 233 191 0

scanPattern$37:	; PostCall 17

scanPattern$38:	; GetReturnValue £temporary1261

scanPattern$39:	; NotEqual 51 £temporary1261 0
x28980:	cmp bx, 0	; 3: 131 251 0
x28983:	jne scanPattern$51	; 2: 117 36

scanPattern$40:	; Assign £temporary1267 index
x28985:	mov ax, [bp + 14]	; 3: 139 70 14

scanPattern$41:	; Increment index
x28988:	inc word [bp + 14]	; 3: 255 70 14

scanPattern$42:	; BinaryAdd £temporary1269 string £temporary1267
x28991:	mov si, [bp + 6]	; 3: 139 118 6
x28994:	add si, ax	; 2: 1 198

scanPattern$43:	; Deref £temporary1268 -> £temporary1269 £temporary1269 0

scanPattern$44:	; Assign £temporary1268 -> £temporary1269 input
x28996:	mov al, [bp + 16]	; 3: 138 70 16
x28999:	mov [si], al	; 2: 136 4

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$46:	; Call 17 scanChar 0
x29001:	mov word [bp + 17], scanPattern$47	; 5: 199 70 17 87 113
x29006:	mov [bp + 19], bp	; 3: 137 110 19
x29009:	add bp, 17	; 3: 131 197 17
x29012:	jmp scanChar	; 3: 233 77 244

scanPattern$47:	; PostCall 17

scanPattern$48:	; GetReturnValue £temporary1270

scanPattern$49:	; Assign input £temporary1270
x29015:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$50:	; Goto 20
x29018:	jmp scanPattern$20	; 3: 233 112 255

scanPattern$51:	; BinaryAdd £temporary1272 string index
x29021:	mov si, [bp + 6]	; 3: 139 118 6
x29024:	add si, [bp + 14]	; 3: 3 118 14

scanPattern$52:	; Deref £temporary1271 -> £temporary1272 £temporary1272 0

scanPattern$53:	; Assign £temporary1271 -> £temporary1272 0
x29027:	mov byte [si], 0	; 3: 198 4 0

scanPattern$54:	; Goto 81
x29030:	jmp scanPattern$81	; 3: 233 127 0

scanPattern$55:	; NotEqual 65 not 0
x29033:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x29037:	jne scanPattern$65	; 2: 117 48

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$57:	; Parameter 17 pattern 6
x29039:	mov ax, [bp + 8]	; 3: 139 70 8
x29042:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Parameter 17 size 8
x29045:	mov ax, [bp + 10]	; 3: 139 70 10
x29048:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$59:	; IntegralToIntegral £temporary1275 input
x29051:	mov al, [bp + 16]	; 3: 138 70 16
x29054:	and ax, 255	; 3: 37 255 0
x29057:	cmp al, 0	; 2: 60 0
x29059:	jge scanPattern$60	; 2: 125 4
x29061:	neg al	; 2: 246 216
x29063:	neg ax	; 2: 247 216

scanPattern$60:	; Parameter 17 £temporary1275 10
x29065:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$61:	; Call 17 strnchr 0
x29068:	mov word [bp + 17], scanPattern$62	; 5: 199 70 17 154 113
x29073:	mov [bp + 19], bp	; 3: 137 110 19
x29076:	add bp, 17	; 3: 131 197 17
x29079:	nop	; 1: 144
x29080:	jmp @2849$strnchr	; 2: 235 89

scanPattern$62:	; PostCall 17

scanPattern$63:	; GetReturnValue £temporary1276

scanPattern$64:	; NotEqual 75 £temporary1276 0
x29082:	cmp bx, 0	; 3: 131 251 0
x29085:	jne scanPattern$75	; 2: 117 54

scanPattern$65:	; Equal 81 not 0
x29087:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x29091:	je scanPattern$81	; 2: 116 67

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$67:	; Parameter 17 pattern 6
x29093:	mov ax, [bp + 8]	; 3: 139 70 8
x29096:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$68:	; Parameter 17 size 8
x29099:	mov ax, [bp + 10]	; 3: 139 70 10
x29102:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$69:	; IntegralToIntegral £temporary1279 input
x29105:	mov al, [bp + 16]	; 3: 138 70 16
x29108:	and ax, 255	; 3: 37 255 0
x29111:	cmp al, 0	; 2: 60 0
x29113:	jge scanPattern$70	; 2: 125 4
x29115:	neg al	; 2: 246 216
x29117:	neg ax	; 2: 247 216

scanPattern$70:	; Parameter 17 £temporary1279 10
x29119:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$71:	; Call 17 strnchr 0
x29122:	mov word [bp + 17], scanPattern$72	; 5: 199 70 17 208 113
x29127:	mov [bp + 19], bp	; 3: 137 110 19
x29130:	add bp, 17	; 3: 131 197 17
x29133:	nop	; 1: 144
x29134:	jmp @2849$strnchr	; 2: 235 35

scanPattern$72:	; PostCall 17

scanPattern$73:	; GetReturnValue £temporary1280

scanPattern$74:	; NotEqual 81 £temporary1280 0
x29136:	cmp bx, 0	; 3: 131 251 0
x29139:	jne scanPattern$81	; 2: 117 19

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$76:	; Call 17 scanChar 0
x29141:	mov word [bp + 17], scanPattern$77	; 5: 199 70 17 227 113
x29146:	mov [bp + 19], bp	; 3: 137 110 19
x29149:	add bp, 17	; 3: 131 197 17
x29152:	jmp scanChar	; 3: 233 193 243

scanPattern$77:	; PostCall 17

scanPattern$78:	; GetReturnValue £temporary1286

scanPattern$79:	; Assign input £temporary1286
x29155:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$80:	; Goto 55
x29158:	jmp scanPattern$55	; 2: 235 129

scanPattern$81:	; Return 0
x29160:	mov ax, [bp]	; 3: 139 70 0
x29163:	mov di, [bp + 4]	; 3: 139 126 4
x29166:	mov bp, [bp + 2]	; 3: 139 110 2
x29169:	jmp ax	; 2: 255 224

scanPattern$82:	; FunctionEnd scanPattern

@2849$strnchr:	; IntegralToIntegral £temporary1239 i
x29171:	mov ax, [bp + 10]	; 3: 139 70 10
x29174:	cmp ax, 0	; 3: 131 248 0
x29177:	jge @2849$strnchr$1	; 2: 125 4
x29179:	neg ax	; 2: 247 216
x29181:	neg al	; 2: 246 216

@2849$strnchr$1:	; Assign c £temporary1239
x29183:	mov [bp + 14], al	; 3: 136 70 14

@2849$strnchr$2:	; Assign index 0
x29186:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@2849$strnchr$3:	; SignedGreaterThanEqual 14 index size
x29191:	mov ax, [bp + 8]	; 3: 139 70 8
x29194:	cmp [bp + 12], ax	; 3: 57 70 12
x29197:	jge @2849$strnchr$14	; 2: 125 35

@2849$strnchr$4:	; BinaryAdd £temporary1243 text index
x29199:	mov si, [bp + 6]	; 3: 139 118 6
x29202:	add si, [bp + 12]	; 3: 3 118 12

@2849$strnchr$5:	; Deref £temporary1242 -> £temporary1243 £temporary1243 0

@2849$strnchr$6:	; NotEqual 12 £temporary1242 -> £temporary1243 c
x29205:	mov al, [bp + 14]	; 3: 138 70 14
x29208:	cmp [si], al	; 2: 56 4
x29210:	jne @2849$strnchr$12	; 2: 117 17

@2849$strnchr$7:	; BinaryAdd £temporary1246 text index
x29212:	mov bx, [bp + 6]	; 3: 139 94 6
x29215:	add bx, [bp + 12]	; 3: 3 94 12

@2849$strnchr$8:	; Deref £temporary1245 -> £temporary1246 £temporary1246 0

@2849$strnchr$9:	; address £temporary1247 £temporary1245 -> £temporary1246

@2849$strnchr$10:	; SetReturnValue £temporary1247

@2849$strnchr$11:	; Return £temporary1247
x29218:	mov ax, [bp]	; 3: 139 70 0
x29221:	mov di, [bp + 4]	; 3: 139 126 4
x29224:	mov bp, [bp + 2]	; 3: 139 110 2
x29227:	jmp ax	; 2: 255 224

@2849$strnchr$12:	; Increment index
x29229:	inc word [bp + 12]	; 3: 255 70 12

@2849$strnchr$13:	; Goto 3
x29232:	jmp @2849$strnchr$3	; 2: 235 213

@2849$strnchr$14:	; SetReturnValue 0
x29234:	mov bx, 0	; 3: 187 0 0

@2849$strnchr$15:	; Return 0
x29237:	mov ax, [bp]	; 3: 139 70 0
x29240:	mov di, [bp + 4]	; 3: 139 126 4
x29243:	mov bp, [bp + 2]	; 3: 139 110 2
x29246:	jmp ax	; 2: 255 224

@2849$strnchr$16:	; FunctionEnd strnchr

fclose:	; Equal 20 stream 0
x29248:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29252:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x29254:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary988 -> stream stream 2
x29256:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary988 -> stream
x29259:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x29262:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x29264:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x29266:	mov word [errno], 11	; 6: 199 6 230 10 11 0

fclose$7:	; SetReturnValue -1
x29272:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x29275:	mov ax, [bp]	; 3: 139 70 0
x29278:	mov di, [bp + 4]	; 3: 139 126 4
x29281:	mov bp, [bp + 2]	; 3: 139 110 2
x29284:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary990 -> stream stream 27
x29286:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary990 -> stream 0
x29289:	cmp word [si + 27], 0	; 4: 131 124 27 0
x29293:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary991 -> stream stream 4
x29295:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary991 -> stream 6
x29298:	mov [bp + 14], si	; 3: 137 118 14
x29301:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x29305:	mov word [bp + 8], fclose$15	; 5: 199 70 8 135 114
x29310:	mov [bp + 10], bp	; 3: 137 110 10
x29313:	add bp, 8	; 3: 131 197 8
x29316:	nop	; 1: 144
x29317:	jmp remove	; 2: 235 124

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary994 -> stream stream 0
x29319:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary994 -> stream 0
x29322:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x29326:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x29329:	mov ax, [bp]	; 3: 139 70 0
x29332:	mov di, [bp + 4]	; 3: 139 126 4
x29335:	mov bp, [bp + 2]	; 3: 139 110 2
x29338:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x29340:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x29345:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x29349:	jge fclose$40	; 2: 125 74

fclose$22:	; UnsignedMultiply £temporary998 index 29
x29351:	mov ax, [bp + 8]	; 3: 139 70 8
x29354:	xor dx, dx	; 2: 49 210
x29356:	mul word [@2290$int2$29#]	; 4: 247 38 255 114

fclose$23:	; BinaryAdd £temporary999 g_fileArray £temporary998
x29360:	mov si, g_fileArray	; 3: 190 102 13
x29363:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary997 -> £temporary999 £temporary999 0

fclose$25:	; Equal 38 £temporary997.open$0 -> £temporary999 0
x29365:	cmp word [si], 0	; 3: 131 60 0
x29368:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; UnsignedMultiply £temporary1001 index 29
x29370:	mov ax, [bp + 8]	; 3: 139 70 8
x29373:	xor dx, dx	; 2: 49 210
x29375:	mul word [@2295$int2$29#]	; 4: 247 38 1 115

fclose$28:	; BinaryAdd £temporary1002 g_fileArray £temporary1001
x29379:	mov si, g_fileArray	; 3: 190 102 13
x29382:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary1000 -> £temporary1002 £temporary1002 0

fclose$30:	; address £temporary1003 £temporary1000 -> £temporary1002

fclose$31:	; Parameter 10 £temporary1003 6
x29384:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x29387:	mov word [bp + 10], fclose$33	; 5: 199 70 10 217 114
x29392:	mov [bp + 12], bp	; 3: 137 110 12
x29395:	add bp, 10	; 3: 131 197 10
x29398:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary1004

fclose$35:	; NotEqual 38 £temporary1004 -1
x29401:	cmp bx, -1	; 3: 131 251 255
x29404:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x29406:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x29409:	mov ax, [bp]	; 3: 139 70 0
x29412:	mov di, [bp + 4]	; 3: 139 126 4
x29415:	mov bp, [bp + 2]	; 3: 139 110 2
x29418:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x29420:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x29423:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x29425:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x29428:	mov ax, [bp]	; 3: 139 70 0
x29431:	mov di, [bp + 4]	; 3: 139 126 4
x29434:	mov bp, [bp + 2]	; 3: 139 110 2
x29437:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

@2290$int2$29#:
x29439:	dw 29	; 2: 29 0

@2295$int2$29#:
x29441:	dw 29	; 2: 29 0

remove:	; AssignRegister ah 65
x29443:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x29445:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x29447:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x29450:	int 33	; 2: 205 33

remove$4:	; Carry 7
x29452:	jc remove$7	; 2: 114 14

remove$5:	; SetReturnValue 0
x29454:	mov bx, 0	; 3: 187 0 0

remove$6:	; Return 0
x29457:	mov ax, [bp]	; 3: 139 70 0
x29460:	mov di, [bp + 4]	; 3: 139 126 4
x29463:	mov bp, [bp + 2]	; 3: 139 110 2
x29466:	jmp ax	; 2: 255 224

remove$7:	; Assign errno 18
x29468:	mov word [errno], 18	; 6: 199 6 230 10 18 0

remove$8:	; SetReturnValue -1
x29474:	mov bx, -1	; 3: 187 255 255

remove$9:	; Return -1
x29477:	mov ax, [bp]	; 3: 139 70 0
x29480:	mov di, [bp + 4]	; 3: 139 126 4
x29483:	mov bp, [bp + 2]	; 3: 139 110 2
x29486:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x29488:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x29490:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x29492:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x29495:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x29498:	int 33	; 2: 205 33

rename$5:	; Carry 8
x29500:	jc rename$8	; 2: 114 14

rename$6:	; SetReturnValue 0
x29502:	mov bx, 0	; 3: 187 0 0

rename$7:	; Return 0
x29505:	mov ax, [bp]	; 3: 139 70 0
x29508:	mov di, [bp + 4]	; 3: 139 126 4
x29511:	mov bp, [bp + 2]	; 3: 139 110 2
x29514:	jmp ax	; 2: 255 224

rename$8:	; Assign errno 19
x29516:	mov word [errno], 19	; 6: 199 6 230 10 19 0

rename$9:	; SetReturnValue -1
x29522:	mov bx, -1	; 3: 187 255 255

rename$10:	; Return -1
x29525:	mov ax, [bp]	; 3: 139 70 0
x29528:	mov di, [bp + 4]	; 3: 139 126 4
x29531:	mov bp, [bp + 2]	; 3: 139 110 2
x29534:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary1101 -> stream stream 2
x29536:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary1101 -> stream
x29539:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary1103 size nobj
x29542:	mov ax, [bp + 8]	; 3: 139 70 8
x29545:	xor dx, dx	; 2: 49 210
x29547:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary1103
x29550:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x29552:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x29554:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x29557:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x29559:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary1107 -> stream stream 21
x29561:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x29564:	mov word [errno], 13	; 6: 199 6 230 10 13 0

fwrite$10:	; Assign £temporary1107 -> stream errno
x29570:	mov ax, [errno]	; 3: 161 230 10
x29573:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x29576:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x29579:	mov ax, [bp]	; 3: 139 70 0
x29582:	mov di, [bp + 4]	; 3: 139 126 4
x29585:	mov bp, [bp + 2]	; 3: 139 110 2
x29588:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary1108 ax

fwrite$14:	; SetReturnValue £temporary1108
x29590:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary1108
x29592:	mov ax, [bp]	; 3: 139 70 0
x29595:	mov di, [bp + 4]	; 3: 139 126 4
x29598:	mov bp, [bp + 2]	; 3: 139 110 2
x29601:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary1092 -> stream stream 2
x29603:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary1092 -> stream
x29606:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary1094 size nobj
x29609:	mov ax, [bp + 8]	; 3: 139 70 8
x29612:	xor dx, dx	; 2: 49 210
x29614:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary1094
x29617:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x29619:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x29621:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x29624:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x29626:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary1098 -> stream stream 21
x29628:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x29631:	mov word [errno], 14	; 6: 199 6 230 10 14 0

fread$10:	; Assign £temporary1098 -> stream errno
x29637:	mov ax, [errno]	; 3: 161 230 10
x29640:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x29643:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x29646:	mov ax, [bp]	; 3: 139 70 0
x29649:	mov di, [bp + 4]	; 3: 139 126 4
x29652:	mov bp, [bp + 2]	; 3: 139 110 2
x29655:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary1099 ax

fread$14:	; SetReturnValue £temporary1099
x29657:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary1099
x29659:	mov ax, [bp]	; 3: 139 70 0
x29662:	mov di, [bp + 4]	; 3: 139 126 4
x29665:	mov bp, [bp + 2]	; 3: 139 110 2
x29668:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary213 memorySize
x29670:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary213 4
x29673:	add ax, 4	; 3: 131 192 4
x29676:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x29679:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x29684:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x29689:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x29694:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x29699:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x29704:	mov ax, [g_firstBlockPtr]	; 3: 161 116 117
x29707:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x29710:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29714:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x29716:	mov ax, [stderr]	; 3: 161 24 78
x29719:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x29722:	mov word [bp + 30], @478$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 118 117

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x29727:	mov word [bp + 32], @479$string_memorySize203E3D200#	; 5: 199 70 32 164 117

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x29732:	mov word [bp + 34], @480$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 180 117

malloc$14:	; Parameter 22 41 14
x29737:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x29742:	mov word [bp + 22], malloc$16	; 5: 199 70 22 65 116
x29747:	mov [bp + 24], bp	; 3: 137 110 24
x29750:	add bp, 22	; 3: 131 197 22
x29753:	mov di, bp	; 2: 137 239
x29755:	add di, 6	; 3: 131 199 6
x29758:	jmp fprintf	; 3: 233 239 234

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x29761:	mov word [bp + 22], malloc$19	; 5: 199 70 22 79 116
x29766:	mov [bp + 24], bp	; 3: 137 110 24
x29769:	add bp, 22	; 3: 131 197 22
x29772:	jmp abort	; 3: 233 28 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x29775:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29779:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x29781:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x29784:	mov ax, [bp]	; 3: 139 70 0
x29787:	mov di, [bp + 4]	; 3: 139 126 4
x29790:	mov bp, [bp + 2]	; 3: 139 110 2
x29793:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x29795:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x29799:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary221 currBlockPtr
x29801:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary221
x29804:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary222 -> currBlockPtr currBlockPtr 0
x29807:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary223 currAddress £temporary222 -> currBlockPtr
x29810:	mov ax, [bp + 22]	; 3: 139 70 22
x29813:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary224 £temporary223 4
x29815:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary224
x29818:	mov bx, [bp + 12]	; 3: 139 94 12
x29821:	sub bx, ax	; 2: 41 195
x29823:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x29826:	mov ax, [bp + 24]	; 3: 139 70 24
x29829:	cmp [bp + 8], ax	; 3: 57 70 8
x29832:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x29834:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x29838:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x29840:	mov ax, [bp + 10]	; 3: 139 70 10
x29843:	cmp [bp + 24], ax	; 3: 57 70 24
x29846:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x29848:	mov ax, [bp + 24]	; 3: 139 70 24
x29851:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x29854:	mov ax, [bp + 20]	; 3: 139 70 20
x29857:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x29860:	mov ax, [bp + 18]	; 3: 139 70 18
x29863:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x29866:	mov ax, [bp + 22]	; 3: 139 70 22
x29869:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x29872:	mov ax, [bp + 20]	; 3: 139 70 20
x29875:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary231 -> currBlockPtr currBlockPtr 2
x29878:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary231 -> currBlockPtr
x29881:	mov ax, [si + 2]	; 3: 139 68 2
x29884:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x29887:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x29889:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x29893:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary233 minBlockPtr
x29895:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary234 -> minBlockPtr minBlockPtr 0
x29898:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary235 £temporary233 £temporary234 -> minBlockPtr
x29901:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary235 4
x29903:	add ax, 4	; 3: 131 192 4
x29906:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary237 newAddress
x29909:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary237
x29912:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary238 -> newBlockPtr newBlockPtr 0
x29915:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary238 -> newBlockPtr memorySize
x29918:	mov ax, [bp + 6]	; 3: 139 70 6
x29921:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary239 -> newBlockPtr newBlockPtr 2
x29923:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary239 -> newBlockPtr minBlockPtr
x29926:	mov ax, [bp + 14]	; 3: 139 70 14
x29929:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x29932:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x29936:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary241 -> minPrevBlockPtr minPrevBlockPtr 2
x29938:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary241 -> minPrevBlockPtr newBlockPtr
x29941:	mov ax, [bp + 24]	; 3: 139 70 24
x29944:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x29947:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x29949:	mov ax, [bp + 24]	; 3: 139 70 24
x29952:	mov [g_firstBlockPtr], ax	; 3: 163 116 117

malloc$57:	; BinaryAdd £temporary242 newAddress 4
x29955:	mov bx, [bp + 22]	; 3: 139 94 22
x29958:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary243 £temporary242

malloc$59:	; SetReturnValue £temporary243

malloc$60:	; Return £temporary243
x29961:	mov ax, [bp]	; 3: 139 70 0
x29964:	mov di, [bp + 4]	; 3: 139 126 4
x29967:	mov bp, [bp + 2]	; 3: 139 110 2
x29970:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x29972:	mov ax, [bp + 12]	; 3: 139 70 12
x29975:	sub ax, [bp + 8]	; 3: 43 70 8
x29978:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary245 bp

malloc$63:	; Assign stackTop £temporary245
x29981:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x29984:	mov ax, [bp + 22]	; 3: 139 70 22
x29987:	cmp [bp + 24], ax	; 3: 57 70 24
x29990:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary247 newAddress
x29992:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary247
x29995:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary248 -> newBlockPtr newBlockPtr 0
x29998:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary248 -> newBlockPtr memorySize
x30001:	mov ax, [bp + 6]	; 3: 139 70 6
x30004:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary249 -> newBlockPtr newBlockPtr 2
x30006:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary249 -> newBlockPtr 0
x30009:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x30014:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x30018:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary251 -> prevBlockPtr prevBlockPtr 2
x30020:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary251 -> prevBlockPtr newBlockPtr
x30023:	mov ax, [bp + 26]	; 3: 139 70 26
x30026:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x30029:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x30031:	mov ax, [bp + 26]	; 3: 139 70 26
x30034:	mov [g_firstBlockPtr], ax	; 3: 163 116 117

malloc$76:	; BinaryAdd £temporary252 newAddress 4
x30037:	mov bx, [bp + 22]	; 3: 139 94 22
x30040:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary253 £temporary252

malloc$78:	; SetReturnValue £temporary253

malloc$79:	; Return £temporary253
x30043:	mov ax, [bp]	; 3: 139 70 0
x30046:	mov di, [bp + 4]	; 3: 139 126 4
x30049:	mov bp, [bp + 2]	; 3: 139 110 2
x30052:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x30054:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x30057:	mov ax, [bp]	; 3: 139 70 0
x30060:	mov di, [bp + 4]	; 3: 139 126 4
x30063:	mov bp, [bp + 2]	; 3: 139 110 2
x30066:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x30068:	dw 0	; 2: 0 0

@478$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x30070:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@479$string_memorySize203E3D200#:
x30116:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@480$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x30132:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary267 freeMemoryPtr
x30195:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary268 £temporary267 4
x30198:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary269 £temporary268

free$3:	; Assign freeBlockPtr £temporary269
x30201:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x30204:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x30209:	mov ax, [g_firstBlockPtr]	; 3: 161 116 117
x30212:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x30215:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x30219:	jne free$8	; 2: 117 11

free$7:	; Return
x30221:	mov ax, [bp]	; 3: 139 70 0
x30224:	mov di, [bp + 4]	; 3: 139 126 4
x30227:	mov bp, [bp + 2]	; 3: 139 110 2
x30230:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x30232:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x30236:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x30238:	mov ax, [bp + 8]	; 3: 139 70 8
x30241:	cmp [bp + 12], ax	; 3: 57 70 12
x30244:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x30246:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30250:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary274 -> currBlockPtr currBlockPtr 2
x30252:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary274 -> currBlockPtr 0
x30255:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30259:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x30261:	mov word [g_firstBlockPtr], 0	; 6: 199 6 116 117 0 0

free$14:	; Goto 27
x30267:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x30269:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30273:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary278 -> currBlockPtr currBlockPtr 2
x30275:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary278 -> currBlockPtr
x30278:	mov ax, [si + 2]	; 3: 139 68 2
x30281:	mov [g_firstBlockPtr], ax	; 3: 163 116 117

free$18:	; Goto 27
x30284:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary279 -> currBlockPtr currBlockPtr 2
x30286:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary279 -> currBlockPtr 0
x30289:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30293:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary281 -> prevBlockPtr prevBlockPtr 2
x30295:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary281 -> prevBlockPtr 0
x30298:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x30303:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary282 -> prevBlockPtr prevBlockPtr 2
x30305:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary283 -> currBlockPtr currBlockPtr 2
x30308:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary282 -> prevBlockPtr £temporary283 -> currBlockPtr
x30311:	mov ax, [di + 2]	; 3: 139 69 2
x30314:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x30317:	mov ax, [bp]	; 3: 139 70 0
x30320:	mov di, [bp + 4]	; 3: 139 126 4
x30323:	mov bp, [bp + 2]	; 3: 139 110 2
x30326:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x30328:	mov ax, [bp + 12]	; 3: 139 70 12
x30331:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary284 -> currBlockPtr currBlockPtr 2
x30334:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary284 -> currBlockPtr
x30337:	mov ax, [si + 2]	; 3: 139 68 2
x30340:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x30343:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x30345:	mov ax, [bp]	; 3: 139 70 0
x30348:	mov di, [bp + 4]	; 3: 139 126 4
x30351:	mov bp, [bp + 2]	; 3: 139 110 2
x30354:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x30356:	mov ax, [bp + 6]	; 3: 139 70 6
x30359:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x30362:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x30367:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x30372:	mov word [bp + 8], ftell$5	; 5: 199 70 8 178 118
x30377:	mov [bp + 10], bp	; 3: 137 110 10
x30380:	add bp, 8	; 3: 131 197 8
x30383:	jmp fseek	; 3: 233 217 231

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary1123

ftell$7:	; SetReturnValue £temporary1123

ftell$8:	; Return £temporary1123
x30386:	mov ax, [bp]	; 3: 139 70 0
x30389:	mov di, [bp + 4]	; 3: 139 126 4
x30392:	mov bp, [bp + 2]	; 3: 139 110 2
x30395:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x30397:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary1020 c
x30401:	mov si, bp	; 2: 137 238
x30403:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary1020 6
x30406:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x30409:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x30414:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x30419:	mov ax, [bp + 6]	; 3: 139 70 6
x30422:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x30425:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 231 118
x30430:	mov [bp + 11], bp	; 3: 137 110 11
x30433:	add bp, 9	; 3: 131 197 9
x30436:	jmp fread	; 3: 233 188 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary1021

fgetc$10:	; SignedLessThanEqual 14 £temporary1021 0
x30439:	cmp bx, 0	; 3: 131 251 0
x30442:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary1023 c
x30444:	mov bl, [bp + 8]	; 3: 138 94 8
x30447:	and bx, 255	; 4: 129 227 255 0
x30451:	cmp bl, 0	; 3: 128 251 0
x30454:	jge fgetc$12	; 2: 125 4
x30456:	neg bl	; 2: 246 219
x30458:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary1023

fgetc$13:	; Return £temporary1023
x30460:	mov ax, [bp]	; 3: 139 70 0
x30463:	mov di, [bp + 4]	; 3: 139 126 4
x30466:	mov bp, [bp + 2]	; 3: 139 110 2
x30469:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x30471:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x30474:	mov ax, [bp]	; 3: 139 70 0
x30477:	mov di, [bp + 4]	; 3: 139 126 4
x30480:	mov bp, [bp + 2]	; 3: 139 110 2
x30483:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

time_test:	; Assign weekdays[0] string_Sun#
x30485:	mov word [bp + 6], @13366$string_Sun#	; 5: 199 70 6 245 121

time_test$1:	; Assign weekdays[1] string_Mon#
x30490:	mov word [bp + 8], @13367$string_Mon#	; 5: 199 70 8 249 121

time_test$2:	; Assign weekdays[2] string_Tue#
x30495:	mov word [bp + 10], @13368$string_Tue#	; 5: 199 70 10 253 121

time_test$3:	; Assign weekdays[3] string_Wed#
x30500:	mov word [bp + 12], @13369$string_Wed#	; 5: 199 70 12 1 122

time_test$4:	; Assign weekdays[4] string_Thu#
x30505:	mov word [bp + 14], @13370$string_Thu#	; 5: 199 70 14 5 122

time_test$5:	; Assign weekdays[5] string_Fri#
x30510:	mov word [bp + 16], @13371$string_Fri#	; 5: 199 70 16 9 122

time_test$6:	; Assign weekdays[6] string_Sat#
x30515:	mov word [bp + 18], @13372$string_Sat#	; 5: 199 70 18 13 122

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x30520:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x30525:	mov word [bp + 20], time_test$10	; 5: 199 70 20 75 119
x30530:	mov [bp + 22], bp	; 3: 137 110 22
x30533:	add bp, 20	; 3: 131 197 20
x30536:	jmp time	; 3: 233 201 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6400

time_test$12:	; Assign now1 £temporary6400
x30539:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6401 now1
x30543:	mov si, bp	; 2: 137 238
x30545:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6401 6
x30548:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x30551:	mov word [bp + 24], time_test$17	; 5: 199 70 24 101 119
x30556:	mov [bp + 26], bp	; 3: 137 110 26
x30559:	add bp, 24	; 3: 131 197 24
x30562:	jmp gmtime	; 3: 233 70 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6402

time_test$19:	; Deref £temporary6403 -> £temporary6402 £temporary6402 0

time_test$20:	; Assign s £temporary6403 -> £temporary6402
x30565:	mov si, bp	; 2: 137 238
x30567:	add si, 24	; 3: 131 198 24
x30570:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x30572:	mov ah, [bx]	; 2: 138 39
x30574:	mov [si], ah	; 2: 136 36
x30576:	inc bx	; 1: 67
x30577:	inc si	; 1: 70
x30578:	dec al	; 2: 254 200
x30580:	cmp al, 0	; 2: 60 0
x30582:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6404 now1
x30584:	mov si, bp	; 2: 137 238
x30586:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6404 6
x30589:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x30592:	mov word [bp + 42], time_test$25	; 5: 199 70 42 142 119
x30597:	mov [bp + 44], bp	; 3: 137 110 44
x30600:	add bp, 42	; 3: 131 197 42
x30603:	jmp localtime	; 3: 233 0 10

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6405

time_test$27:	; Deref £temporary6406 -> £temporary6405 £temporary6405 0

time_test$28:	; Assign t £temporary6406 -> £temporary6405
x30606:	mov si, bp	; 2: 137 238
x30608:	add si, 42	; 3: 131 198 42
x30611:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x30613:	mov ah, [bx]	; 2: 138 39
x30615:	mov [si], ah	; 2: 136 36
x30617:	inc bx	; 1: 67
x30618:	inc si	; 1: 70
x30619:	dec al	; 2: 254 200
x30621:	cmp al, 0	; 2: 60 0
x30623:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6407 s
x30625:	mov si, bp	; 2: 137 238
x30627:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6407 6
x30630:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x30633:	mov word [bp + 60], time_test$33	; 5: 199 70 60 183 119
x30638:	mov [bp + 62], bp	; 3: 137 110 62
x30641:	add bp, 60	; 3: 131 197 60
x30644:	jmp mktime	; 3: 233 243 5

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6408

time_test$35:	; Assign now2 £temporary6408
x30647:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x30651:	mov word [bp + 70], @13397$string_now2013A2025lu0A#	; 5: 199 70 70 17 122

time_test$38:	; Parameter 64 now1 8
x30656:	mov eax, [bp + 20]	; 4: 102 139 70 20
x30660:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x30664:	mov word [bp + 64], time_test$40	; 5: 199 70 64 219 119
x30669:	mov [bp + 66], bp	; 3: 137 110 66
x30672:	add bp, 64	; 3: 131 197 64
x30675:	mov di, bp	; 2: 137 239
x30677:	add di, 4	; 3: 131 199 4
x30680:	jmp printf	; 3: 233 41 149

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x30683:	mov word [bp + 70], @13399$string_now2023A2025lu0A#	; 5: 199 70 70 29 122

time_test$43:	; Parameter 64 now2 8
x30688:	mov eax, [bp + 60]	; 4: 102 139 70 60
x30692:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x30696:	mov word [bp + 64], time_test$45	; 5: 199 70 64 251 119
x30701:	mov [bp + 66], bp	; 3: 137 110 66
x30704:	add bp, 64	; 3: 131 197 64
x30707:	mov di, bp	; 2: 137 239
x30709:	add di, 4	; 3: 131 199 4
x30712:	jmp printf	; 3: 233 9 149

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30715:	mov word [bp + 70], @13401$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 41 122

time_test$48:	; UnsignedMultiply £temporary6413 s$tm_wday 2
x30720:	mov ax, [bp + 36]	; 3: 139 70 36
x30723:	xor dx, dx	; 2: 49 210
x30725:	mul word [@13404$int2$2#]	; 4: 247 38 138 122

time_test$49:	; BinaryAdd £temporary6414 weekdays £temporary6413
x30729:	mov si, bp	; 2: 137 238
x30731:	add si, 6	; 3: 131 198 6
x30734:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6412 -> £temporary6414 £temporary6414 0

time_test$51:	; Parameter 64 £temporary6412 -> £temporary6414 8
x30736:	mov ax, [si]	; 2: 139 4
x30738:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6416 s$tm_year 1900
x30741:	mov ax, [bp + 34]	; 3: 139 70 34
x30744:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6416 10
x30747:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6418 s$tm_mon 1
x30750:	mov ax, [bp + 32]	; 3: 139 70 32
x30753:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6418 12
x30754:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x30757:	mov ax, [bp + 30]	; 3: 139 70 30
x30760:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x30763:	mov ax, [bp + 28]	; 3: 139 70 28
x30766:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x30769:	mov ax, [bp + 26]	; 3: 139 70 26
x30772:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x30775:	mov ax, [bp + 24]	; 3: 139 70 24
x30778:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x30781:	mov ax, [bp + 38]	; 3: 139 70 38
x30784:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x30787:	mov ax, [bp + 36]	; 3: 139 70 36
x30790:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x30793:	mov ax, [bp + 40]	; 3: 139 70 40
x30796:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x30799:	mov word [bp + 64], time_test$64	; 5: 199 70 64 98 120
x30804:	mov [bp + 66], bp	; 3: 137 110 66
x30807:	add bp, 64	; 3: 131 197 64
x30810:	mov di, bp	; 2: 137 239
x30812:	add di, 20	; 3: 131 199 20
x30815:	jmp printf	; 3: 233 162 148

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30818:	mov word [bp + 70], @13423$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 140 122

time_test$67:	; UnsignedMultiply £temporary6429 t$tm_wday 2
x30823:	mov ax, [bp + 54]	; 3: 139 70 54
x30826:	xor dx, dx	; 2: 49 210
x30828:	mul word [@13426$int2$2#]	; 4: 247 38 237 122

time_test$68:	; BinaryAdd £temporary6430 weekdays £temporary6429
x30832:	mov si, bp	; 2: 137 238
x30834:	add si, 6	; 3: 131 198 6
x30837:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6428 -> £temporary6430 £temporary6430 0

time_test$70:	; Parameter 64 £temporary6428 -> £temporary6430 8
x30839:	mov ax, [si]	; 2: 139 4
x30841:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6432 t$tm_year 1900
x30844:	mov ax, [bp + 52]	; 3: 139 70 52
x30847:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6432 10
x30850:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6434 t$tm_mon 1
x30853:	mov ax, [bp + 50]	; 3: 139 70 50
x30856:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6434 12
x30857:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x30860:	mov ax, [bp + 48]	; 3: 139 70 48
x30863:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x30866:	mov ax, [bp + 46]	; 3: 139 70 46
x30869:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x30872:	mov ax, [bp + 44]	; 3: 139 70 44
x30875:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x30878:	mov ax, [bp + 42]	; 3: 139 70 42
x30881:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x30884:	mov ax, [bp + 56]	; 3: 139 70 56
x30887:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x30890:	mov ax, [bp + 54]	; 3: 139 70 54
x30893:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x30896:	mov ax, [bp + 58]	; 3: 139 70 58
x30899:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x30902:	mov word [bp + 64], time_test$83	; 5: 199 70 64 201 120
x30907:	mov [bp + 66], bp	; 3: 137 110 66
x30910:	add bp, 64	; 3: 131 197 64
x30913:	mov di, bp	; 2: 137 239
x30915:	add di, 20	; 3: 131 199 20
x30918:	jmp printf	; 3: 233 59 148

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 566 buffer1 6
x30921:	mov [bp + 572], bp	; 4: 137 174 60 2
x30925:	add word [bp + 572], 64	; 5: 131 134 60 2 64

time_test$86:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6443 s
x30930:	mov si, bp	; 2: 137 238
x30932:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 566 £temporary6443 14
x30935:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$89:	; Call 566 asctime 8
x30939:	mov word [bp + 574], time_test$90	; 6: 199 134 62 2 236 120
x30945:	mov [bp + 576], bp	; 4: 137 174 64 2
x30949:	add bp, 574	; 4: 129 197 62 2
x30953:	jmp asctime	; 3: 233 59 9

time_test$90:	; PostCall 566

time_test$91:	; GetReturnValue £temporary6444

time_test$92:	; Parameter 566 £temporary6444 8
x30956:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$93:	; Call 566 strcpy 0
x30960:	mov word [bp + 566], time_test$94	; 6: 199 134 54 2 1 121
x30966:	mov [bp + 568], bp	; 4: 137 174 56 2
x30970:	add bp, 566	; 4: 129 197 54 2
x30974:	jmp strcpy	; 3: 233 243 229

time_test$94:	; PostCall 566

time_test$95:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 566 buffer2 6
x30977:	mov [bp + 572], bp	; 4: 137 174 60 2
x30981:	add word [bp + 572], 164	; 6: 129 134 60 2 164 0

time_test$97:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6446 now1
x30987:	mov si, bp	; 2: 137 238
x30989:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 566 £temporary6446 14
x30992:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$100:	; Call 566 ctime 8
x30996:	mov word [bp + 574], time_test$101	; 6: 199 134 62 2 37 121
x31002:	mov [bp + 576], bp	; 4: 137 174 64 2
x31006:	add bp, 574	; 4: 129 197 62 2
x31010:	jmp ctime	; 3: 233 212 11

time_test$101:	; PostCall 566

time_test$102:	; GetReturnValue £temporary6447

time_test$103:	; Parameter 566 £temporary6447 8
x31013:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$104:	; Call 566 strcpy 0
x31017:	mov word [bp + 566], time_test$105	; 6: 199 134 54 2 58 121
x31023:	mov [bp + 568], bp	; 4: 137 174 56 2
x31027:	add bp, 566	; 4: 129 197 54 2
x31031:	jmp strcpy	; 3: 233 186 229

time_test$105:	; PostCall 566

time_test$106:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 566 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x31034:	mov word [bp + 572], @13461$string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 60 2 239 122

time_test$108:	; Parameter 566 buffer1 8
x31040:	mov [bp + 574], bp	; 4: 137 174 62 2
x31044:	add word [bp + 574], 64	; 5: 131 134 62 2 64

time_test$109:	; Parameter 566 buffer2 10
x31049:	mov [bp + 576], bp	; 4: 137 174 64 2
x31053:	add word [bp + 576], 164	; 6: 129 134 64 2 164 0

time_test$110:	; Call 566 printf 0
x31059:	mov word [bp + 566], time_test$111	; 6: 199 134 54 2 105 121
x31065:	mov [bp + 568], bp	; 4: 137 174 56 2
x31069:	add bp, 566	; 4: 129 197 54 2
x31073:	mov di, bp	; 2: 137 239
x31075:	add di, 4	; 3: 131 199 4
x31078:	jmp printf	; 3: 233 155 147

time_test$111:	; PostCall 566

time_test$112:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 566 buffer 6
x31081:	mov [bp + 572], bp	; 4: 137 174 60 2
x31085:	add word [bp + 572], 264	; 6: 129 134 60 2 8 1

time_test$114:	; Parameter 566 300 8
x31091:	mov word [bp + 574], 300	; 6: 199 134 62 2 44 1

time_test$115:	; Parameter 566 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y# 10
x31097:	mov word [bp + 576], @13465$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#	; 6: 199 134 64 2 9 123

time_test$116:	; address £temporary6450 t
x31103:	mov si, bp	; 2: 137 238
x31105:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 566 £temporary6450 12
x31108:	mov [bp + 578], si	; 4: 137 182 66 2

time_test$118:	; Call 566 strftime 0
x31112:	mov word [bp + 566], time_test$119	; 6: 199 134 54 2 153 121
x31118:	mov [bp + 568], bp	; 4: 137 174 56 2
x31122:	add bp, 566	; 4: 129 197 54 2
x31126:	jmp strftime	; 3: 233 144 11

time_test$119:	; PostCall 566

time_test$120:	; GetReturnValue £temporary6451

time_test$121:	; Assign i £temporary6451
x31129:	mov [bp + 564], bx	; 4: 137 158 52 2

time_test$122:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 566 string_strftime2025i2025i203C25s3E0A# 6
x31133:	mov word [bp + 572], @13468$string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 60 2 255 123

time_test$124:	; Parameter 566 i 8
x31139:	mov ax, [bp + 564]	; 4: 139 134 52 2
x31143:	mov [bp + 574], ax	; 4: 137 134 62 2

time_test$125:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 566 buffer 16
x31147:	mov [bp + 582], bp	; 4: 137 174 70 2
x31151:	add word [bp + 582], 264	; 6: 129 134 70 2 8 1

time_test$127:	; Call 566 strlen 10
x31157:	mov word [bp + 576], time_test$128	; 6: 199 134 64 2 198 121
x31163:	mov [bp + 578], bp	; 4: 137 174 66 2
x31167:	add bp, 576	; 4: 129 197 64 2
x31171:	jmp strlen	; 3: 233 120 19

time_test$128:	; PostCall 566

time_test$129:	; GetReturnValue £temporary6452

time_test$130:	; Parameter 566 £temporary6452 10
x31174:	mov [bp + 576], bx	; 4: 137 158 64 2

time_test$131:	; Parameter 566 buffer 12
x31178:	mov [bp + 578], bp	; 4: 137 174 66 2
x31182:	add word [bp + 578], 264	; 6: 129 134 66 2 8 1

time_test$132:	; Call 566 printf 0
x31188:	mov word [bp + 566], time_test$133	; 6: 199 134 54 2 234 121
x31194:	mov [bp + 568], bp	; 4: 137 174 56 2
x31198:	add bp, 566	; 4: 129 197 54 2
x31202:	mov di, bp	; 2: 137 239
x31204:	add di, 6	; 3: 131 199 6
x31207:	jmp printf	; 3: 233 26 147

time_test$133:	; PostCall 566

time_test$134:	; Return 0
x31210:	mov ax, [bp]	; 3: 139 70 0
x31213:	mov di, [bp + 4]	; 3: 139 126 4
x31216:	mov bp, [bp + 2]	; 3: 139 110 2
x31219:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

@13366$string_Sun#:
x31221:	db "Sun", 0	; 4: 83 117 110 0

@13367$string_Mon#:
x31225:	db "Mon", 0	; 4: 77 111 110 0

@13368$string_Tue#:
x31229:	db "Tue", 0	; 4: 84 117 101 0

@13369$string_Wed#:
x31233:	db "Wed", 0	; 4: 87 101 100 0

@13370$string_Thu#:
x31237:	db "Thu", 0	; 4: 84 104 117 0

@13371$string_Fri#:
x31241:	db "Fri", 0	; 4: 70 114 105 0

@13372$string_Sat#:
x31245:	db "Sat", 0	; 4: 83 97 116 0

@13397$string_now2013A2025lu0A#:
x31249:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

@13399$string_now2023A2025lu0A#:
x31261:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

@13401$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31273:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13404$int2$2#:
x31370:	dw 2	; 2: 2 0

@13423$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31372:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13426$int2$2#:
x31469:	dw 2	; 2: 2 0

@13461$string_asctime203C25s3E2C20ctime203C25s3E0A#:
x31471:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

@13465$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#:
x31497:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y", 0	; 246: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 0

@13468$string_strftime2025i2025i203C25s3E0A#:
x31743:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$1:	; Call 19 localeconv 0
x31764:	mov word [bp + 19], time$2	; 5: 199 70 19 34 124
x31769:	mov [bp + 21], bp	; 3: 137 110 21
x31772:	add bp, 19	; 3: 131 197 19
x31775:	jmp localeconv	; 3: 233 85 162

time$2:	; PostCall 19

time$3:	; GetReturnValue £temporary3421

time$4:	; Assign localeConvPtr £temporary3421
x31778:	mov [bp + 19], bx	; 3: 137 94 19

time$5:	; AssignRegister ah 42
x31781:	mov ah, 42	; 2: 180 42

time$6:	; Interrupt 33
x31783:	int 33	; 2: 205 33

time$7:	; InspectRegister £temporary3423 cx

time$8:	; BinarySubtract year £temporary3423 1900
x31785:	sub cx, 1900	; 4: 129 233 108 7
x31789:	mov [bp + 12], cx	; 3: 137 78 12

time$9:	; InspectRegister £temporary3425 dh

time$10:	; BinarySubtract month £temporary3425 1
x31792:	dec dh	; 2: 254 206
x31794:	mov [bp + 14], dh	; 3: 136 118 14

time$11:	; InspectRegister £temporary3427 dl

time$12:	; Assign monthDay £temporary3427
x31797:	mov [bp + 15], dl	; 3: 136 86 15

time$13:	; AssignRegister ah 44
x31800:	mov ah, 44	; 2: 180 44

time$14:	; Interrupt 33
x31802:	int 33	; 2: 205 33

time$15:	; InspectRegister £temporary3429 ch

time$16:	; Assign hour £temporary3429
x31804:	mov [bp + 16], ch	; 3: 136 110 16

time$17:	; InspectRegister £temporary3430 cl

time$18:	; Assign min £temporary3430
x31807:	mov [bp + 17], cl	; 3: 136 78 17

time$19:	; InspectRegister £temporary3431 dh

time$20:	; Assign sec £temporary3431
x31810:	mov [bp + 18], dh	; 3: 136 118 18

time$21:	; Equal 25 localeConvPtr 0
x31813:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x31817:	je time$25	; 2: 116 18

time$22:	; Deref £temporary3433 -> localeConvPtr localeConvPtr 2
x31819:	mov si, [bp + 19]	; 3: 139 118 19

time$23:	; IntegralToIntegral £temporary3434 £temporary3433 -> localeConvPtr
x31822:	mov ax, [si + 2]	; 3: 139 68 2
x31825:	cmp ax, 0	; 3: 131 248 0
x31828:	jge time$24	; 2: 125 4
x31830:	neg ax	; 2: 247 216
x31832:	neg al	; 2: 246 216

time$24:	; BinarySubtract hour hour £temporary3434
x31834:	sub [bp + 16], al	; 3: 40 70 16

time$25:	; SignedModulo £temporary3436 year 4
x31837:	mov ax, [bp + 12]	; 3: 139 70 12
x31840:	xor dx, dx	; 2: 49 210
x31842:	idiv word [@7718$int2$4#]	; 4: 247 62 166 125

time$26:	; NotEqual 29 £temporary3436 0
x31846:	cmp dx, 0	; 3: 131 250 0
x31849:	jne time$29	; 2: 117 5

time$27:	; Assign £temporary3438 1
x31851:	mov ax, 1	; 3: 184 1 0

time$28:	; Goto 30
x31854:	jmp time$30	; 2: 235 3

time$29:	; Assign £temporary3438 0
x31856:	mov ax, 0	; 3: 184 0 0

time$30:	; Assign leapYear £temporary3438
x31859:	mov [bp + 21], ax	; 3: 137 70 21

time$31:	; Assign daysOfMonthsX[0] 31
x31862:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$32:	; Equal 35 leapYear 0
x31867:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x31871:	je time$35	; 2: 116 5

time$33:	; Assign £temporary3443 29
x31873:	mov ax, 29	; 3: 184 29 0

time$34:	; Goto 36
x31876:	jmp time$36	; 2: 235 3

time$35:	; Assign £temporary3443 28
x31878:	mov ax, 28	; 3: 184 28 0

time$36:	; Assign daysOfMonthsX[1] £temporary3443
x31881:	mov [bp + 25], ax	; 3: 137 70 25

time$37:	; Assign daysOfMonthsX[2] 31
x31884:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$38:	; Assign daysOfMonthsX[3] 30
x31889:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$39:	; Assign daysOfMonthsX[4] 31
x31894:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$40:	; Assign daysOfMonthsX[5] 30
x31899:	mov word [bp + 33], 30	; 5: 199 70 33 30 0

time$41:	; Assign daysOfMonthsX[6] 31
x31904:	mov word [bp + 35], 31	; 5: 199 70 35 31 0

time$42:	; Assign daysOfMonthsX[7] 31
x31909:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$43:	; Assign daysOfMonthsX[8] 30
x31914:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$44:	; Assign daysOfMonthsX[9] 31
x31919:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$45:	; Assign daysOfMonthsX[10] 30
x31924:	mov word [bp + 43], 30	; 5: 199 70 43 30 0

time$46:	; Assign daysOfMonthsX[11] 31
x31929:	mov word [bp + 45], 31	; 5: 199 70 45 31 0

time$47:	; IntegralToIntegral £temporary3456 monthDay
x31934:	mov al, [bp + 15]	; 3: 138 70 15
x31937:	and ax, 255	; 3: 37 255 0
x31940:	cmp al, 0	; 2: 60 0
x31942:	jge time$48	; 2: 125 4
x31944:	neg al	; 2: 246 216
x31946:	neg ax	; 2: 247 216

time$48:	; BinarySubtract yearDay £temporary3456 1
x31948:	dec ax	; 1: 72
x31949:	mov [bp + 47], ax	; 3: 137 70 47

time$49:	; Assign mon 0
x31952:	mov word [bp + 49], 0	; 5: 199 70 49 0 0

time$50:	; IntegralToIntegral £temporary3458 month
x31957:	mov al, [bp + 14]	; 3: 138 70 14
x31960:	and ax, 255	; 3: 37 255 0
x31963:	cmp al, 0	; 2: 60 0
x31965:	jge time$51	; 2: 125 4
x31967:	neg al	; 2: 246 216
x31969:	neg ax	; 2: 247 216

time$51:	; SignedGreaterThanEqual 58 mon £temporary3458
x31971:	cmp [bp + 49], ax	; 3: 57 70 49
x31974:	jge time$58	; 2: 125 26

time$52:	; UnsignedMultiply £temporary3462 mon 2
x31976:	mov ax, [bp + 49]	; 3: 139 70 49
x31979:	xor dx, dx	; 2: 49 210
x31981:	mul word [@7787$int2$2#]	; 4: 247 38 168 125

time$53:	; BinaryAdd £temporary3463 daysOfMonthsX £temporary3462
x31985:	mov si, bp	; 2: 137 238
x31987:	add si, 23	; 3: 131 198 23
x31990:	add si, ax	; 2: 1 198

time$54:	; Deref £temporary3461 -> £temporary3463 £temporary3463 0

time$55:	; BinaryAdd yearDay yearDay £temporary3461 -> £temporary3463
x31992:	mov ax, [si]	; 2: 139 4
x31994:	add [bp + 47], ax	; 3: 1 70 47

time$56:	; Increment mon
x31997:	inc word [bp + 49]	; 3: 255 70 49

time$57:	; Goto 50
x32000:	jmp time$50	; 2: 235 211

time$58:	; IntegralToIntegral £temporary3466 sec
x32002:	mov al, [bp + 18]	; 3: 138 70 18
x32005:	and ax, 255	; 3: 37 255 0
x32008:	cmp al, 0	; 2: 60 0
x32010:	jge time$59	; 2: 125 4
x32012:	neg al	; 2: 246 216
x32014:	neg ax	; 2: 247 216

time$59:	; Assign s$tm_sec £temporary3466
x32016:	mov [bp + 51], ax	; 3: 137 70 51

time$60:	; IntegralToIntegral £temporary3468 min
x32019:	mov al, [bp + 17]	; 3: 138 70 17
x32022:	and ax, 255	; 3: 37 255 0
x32025:	cmp al, 0	; 2: 60 0
x32027:	jge time$61	; 2: 125 4
x32029:	neg al	; 2: 246 216
x32031:	neg ax	; 2: 247 216

time$61:	; Assign s$tm_min £temporary3468
x32033:	mov [bp + 53], ax	; 3: 137 70 53

time$62:	; IntegralToIntegral £temporary3470 hour
x32036:	mov al, [bp + 16]	; 3: 138 70 16
x32039:	and ax, 255	; 3: 37 255 0
x32042:	cmp al, 0	; 2: 60 0
x32044:	jge time$63	; 2: 125 4
x32046:	neg al	; 2: 246 216
x32048:	neg ax	; 2: 247 216

time$63:	; Assign s$tm_hour £temporary3470
x32050:	mov [bp + 55], ax	; 3: 137 70 55

time$64:	; IntegralToIntegral £temporary3472 monthDay
x32053:	mov al, [bp + 15]	; 3: 138 70 15
x32056:	and ax, 255	; 3: 37 255 0
x32059:	cmp al, 0	; 2: 60 0
x32061:	jge time$65	; 2: 125 4
x32063:	neg al	; 2: 246 216
x32065:	neg ax	; 2: 247 216

time$65:	; Assign s$tm_mday £temporary3472
x32067:	mov [bp + 57], ax	; 3: 137 70 57

time$66:	; IntegralToIntegral £temporary3474 month
x32070:	mov al, [bp + 14]	; 3: 138 70 14
x32073:	and ax, 255	; 3: 37 255 0
x32076:	cmp al, 0	; 2: 60 0
x32078:	jge time$67	; 2: 125 4
x32080:	neg al	; 2: 246 216
x32082:	neg ax	; 2: 247 216

time$67:	; Assign s$tm_mon £temporary3474
x32084:	mov [bp + 59], ax	; 3: 137 70 59

time$68:	; Assign s$tm_year year
x32087:	mov ax, [bp + 12]	; 3: 139 70 12
x32090:	mov [bp + 61], ax	; 3: 137 70 61

time$69:	; Assign s$tm_wday 0
x32093:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$70:	; Assign s$tm_yday yearDay
x32098:	mov ax, [bp + 47]	; 3: 139 70 47
x32101:	mov [bp + 65], ax	; 3: 137 70 65

time$71:	; Assign s$tm_isdst 0
x32104:	mov word [bp + 67], 0	; 5: 199 70 67 0 0

time$72:	; CallHeader 69 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$73:	; address £temporary3479 s
x32109:	mov si, bp	; 2: 137 238
x32111:	add si, 51	; 3: 131 198 51

time$74:	; Parameter 69 £temporary3479 6
x32114:	mov [bp + 75], si	; 3: 137 118 75

time$75:	; Call 69 mktime 0
x32117:	mov word [bp + 69], time$76	; 5: 199 70 69 131 125
x32122:	mov [bp + 71], bp	; 3: 137 110 71
x32125:	add bp, 69	; 3: 131 197 69
x32128:	nop	; 1: 144
x32129:	jmp mktime	; 2: 235 39

time$76:	; PostCall 69

time$77:	; GetReturnValue £temporary3480

time$78:	; Assign time £temporary3480
x32131:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$79:	; Equal 82 timePtr 0
x32135:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32139:	je time$82	; 2: 116 10

time$80:	; Deref £temporary3482 -> timePtr timePtr 0
x32141:	mov si, [bp + 6]	; 3: 139 118 6

time$81:	; Assign £temporary3482 -> timePtr time
x32144:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32148:	mov [si], eax	; 3: 102 137 4

time$82:	; SetReturnValue time
x32151:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$83:	; Return time
x32155:	mov ax, [bp]	; 3: 139 70 0
x32158:	mov di, [bp + 4]	; 3: 139 126 4
x32161:	mov bp, [bp + 2]	; 3: 139 110 2
x32164:	jmp ax	; 2: 255 224

time$84:	; FunctionEnd time

@7718$int2$4#:
x32166:	dw 4	; 2: 4 0

@7787$int2$2#:
x32168:	dw 2	; 2: 2 0

mktime:	; Equal 28 tp 0
x32170:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32174:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3486 -> tp tp 10
x32178:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3487 £temporary3486 -> tp 69
x32181:	mov ax, [si + 10]	; 3: 139 68 10
x32184:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3488 £temporary3487 4
x32187:	xor dx, dx	; 2: 49 210
x32189:	idiv word [@7829$int2$4#]	; 4: 247 62 155 126

mktime$4:	; IntegralToIntegral £temporary3489 £temporary3488
x32193:	and eax, 65535	; 6: 102 37 255 255 0 0
x32199:	cmp ax, 0	; 3: 131 248 0
x32202:	jge mktime$5	; 2: 125 5
x32204:	neg ax	; 2: 247 216
x32206:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3489
x32209:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3490 -> tp tp 10
x32213:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3491 £temporary3490 -> tp 70
x32216:	mov ax, [si + 10]	; 3: 139 68 10
x32219:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3492 £temporary3491 365
x32222:	xor dx, dx	; 2: 49 210
x32224:	imul word [@7838$int2$365#]	; 4: 247 46 157 126

mktime$9:	; IntegralToIntegral £temporary3493 £temporary3492
x32228:	and eax, 65535	; 6: 102 37 255 255 0 0
x32234:	cmp ax, 0	; 3: 131 248 0
x32237:	jge mktime$10	; 2: 125 5
x32239:	neg ax	; 2: 247 216
x32241:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3494 £temporary3493 leapDays
x32244:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3495 -> tp tp 14
x32248:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3496 £temporary3495 -> tp
x32251:	mov bx, [si + 14]	; 3: 139 92 14
x32254:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x32261:	cmp bx, 0	; 3: 131 251 0
x32264:	jge mktime$13	; 2: 125 5
x32266:	neg bx	; 2: 247 219
x32268:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3494 £temporary3496
x32271:	add eax, ebx	; 3: 102 1 216
x32274:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3498 totalDays 86400
x32278:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32282:	xor edx, edx	; 3: 102 49 210
x32285:	imul dword [@7847$int4$86400#]	; 5: 102 247 46 159 126
x32290:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3499 -> tp tp 4
x32293:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3500 £temporary3499 -> tp
x32296:	mov ax, [si + 4]	; 3: 139 68 4
x32299:	and eax, 65535	; 6: 102 37 255 255 0 0
x32305:	cmp ax, 0	; 3: 131 248 0
x32308:	jge mktime$17	; 2: 125 5
x32310:	neg ax	; 2: 247 216
x32312:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3501 £temporary3500 3600
x32315:	xor edx, edx	; 3: 102 49 210
x32318:	imul dword [@7851$int4$3600#]	; 5: 102 247 46 163 126

mktime$18:	; BinaryAdd £temporary3502 £temporary3498 £temporary3501
x32323:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3503 -> tp tp 2
x32326:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3504 £temporary3503 -> tp
x32329:	mov ax, [si + 2]	; 3: 139 68 2
x32332:	and eax, 65535	; 6: 102 37 255 255 0 0
x32338:	cmp ax, 0	; 3: 131 248 0
x32341:	jge mktime$21	; 2: 125 5
x32343:	neg ax	; 2: 247 216
x32345:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3505 £temporary3504 60
x32348:	xor edx, edx	; 3: 102 49 210
x32351:	imul dword [@7857$int4$60#]	; 5: 102 247 46 167 126

mktime$22:	; BinaryAdd £temporary3506 £temporary3502 £temporary3505
x32356:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3507 -> tp tp 0
x32359:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3508 £temporary3507 -> tp
x32362:	mov ax, [si]	; 2: 139 4
x32364:	and eax, 65535	; 6: 102 37 255 255 0 0
x32370:	cmp ax, 0	; 3: 131 248 0
x32373:	jge mktime$25	; 2: 125 5
x32375:	neg ax	; 2: 247 216
x32377:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3509 £temporary3506 £temporary3508
x32380:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3509

mktime$27:	; Return £temporary3509
x32383:	mov ax, [bp]	; 3: 139 70 0
x32386:	mov di, [bp + 4]	; 3: 139 126 4
x32389:	mov bp, [bp + 2]	; 3: 139 110 2
x32392:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x32394:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x32400:	mov ax, [bp]	; 3: 139 70 0
x32403:	mov di, [bp + 4]	; 3: 139 126 4
x32406:	mov bp, [bp + 2]	; 3: 139 110 2
x32409:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

@7829$int2$4#:
x32411:	dw 4	; 2: 4 0

@7838$int2$365#:
x32413:	dw 365	; 2: 109 1

@7847$int4$86400#:
x32415:	dd 86400	; 4: 128 81 1 0

@7851$int4$3600#:
x32419:	dd 3600	; 4: 16 14 0 0

@7857$int4$60#:
x32423:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x32427:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32431:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3520 -> timePtr timePtr 0
x32435:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3520 -> timePtr
x32438:	mov eax, [si]	; 3: 102 139 4
x32441:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x32445:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32449:	xor edx, edx	; 3: 102 49 210
x32452:	idiv dword [@7900$int4$86400#]	; 5: 102 247 62 15 129
x32457:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x32461:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32465:	xor edx, edx	; 3: 102 49 210
x32468:	idiv dword [@7904$int4$3600#]	; 5: 102 247 62 19 129
x32473:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3524 secondsOfDay 3600
x32477:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32481:	xor edx, edx	; 3: 102 49 210
x32484:	idiv dword [@7909$int4$3600#]	; 5: 102 247 62 23 129

gmtime$6:	; IntegralToIntegral £temporary3525 £temporary3524
x32489:	cmp eax, 0	; 4: 102 131 248 0
x32493:	jge gmtime$7	; 2: 125 5
x32495:	neg eax	; 3: 102 247 216
x32498:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3525
x32500:	mov [@7867$g_timeStruct + 4], ax	; 3: 163 31 129

gmtime$8:	; SignedDivide £temporary3527 secondsOfHour 60
x32503:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32507:	xor edx, edx	; 3: 102 49 210
x32510:	idiv dword [@7914$int4$60#]	; 5: 102 247 62 45 129

gmtime$9:	; IntegralToIntegral £temporary3528 £temporary3527
x32515:	cmp eax, 0	; 4: 102 131 248 0
x32519:	jge gmtime$10	; 2: 125 5
x32521:	neg eax	; 3: 102 247 216
x32524:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3528
x32526:	mov [@7867$g_timeStruct + 2], ax	; 3: 163 29 129

gmtime$11:	; SignedModulo £temporary3530 secondsOfHour 60
x32529:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32533:	xor edx, edx	; 3: 102 49 210
x32536:	idiv dword [@7919$int4$60#]	; 5: 102 247 62 49 129

gmtime$12:	; IntegralToIntegral £temporary3531 £temporary3530
x32541:	cmp edx, 0	; 4: 102 131 250 0
x32545:	jge gmtime$13	; 2: 125 5
x32547:	neg edx	; 3: 102 247 218
x32550:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3531
x32552:	mov [@7867$g_timeStruct], dx	; 4: 137 22 27 129

gmtime$14:	; SignedDivide totalDays time 86400
x32556:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32560:	xor edx, edx	; 3: 102 49 210
x32563:	idiv dword [@7923$int4$86400#]	; 5: 102 247 62 53 129
x32568:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x32572:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x32577:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3535 totalDays 4
x32579:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32583:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3536 £temporary3535
x32587:	cmp eax, 0	; 4: 102 131 248 0
x32591:	jge gmtime$18	; 2: 125 5
x32593:	neg eax	; 3: 102 247 216
x32596:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3536
x32598:	mov [@7867$g_timeStruct + 12], ax	; 3: 163 39 129

gmtime$19:	; Goto 24
x32601:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3538 totalDays 3
x32603:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32607:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3539 £temporary3538 7
x32611:	xor edx, edx	; 3: 102 49 210
x32614:	idiv dword [@7939$int4$7#]	; 5: 102 247 62 57 129

gmtime$22:	; IntegralToIntegral £temporary3540 £temporary3539
x32619:	cmp edx, 0	; 4: 102 131 250 0
x32623:	jge gmtime$23	; 2: 125 5
x32625:	neg edx	; 3: 102 247 218
x32628:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3540
x32630:	mov [@7867$g_timeStruct + 12], dx	; 4: 137 22 39 129

gmtime$24:	; SignedDivide £temporary3541 totalDays 365
x32634:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32638:	xor edx, edx	; 3: 102 49 210
x32641:	idiv dword [@7944$int4$365#]	; 5: 102 247 62 61 129

gmtime$25:	; BinaryAdd £temporary3542 £temporary3541 1970
x32646:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3543 £temporary3542
x32652:	cmp eax, 0	; 4: 102 131 248 0
x32656:	jge gmtime$27	; 2: 125 5
x32658:	neg eax	; 3: 102 247 216
x32661:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3543
x32663:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3544 year 1969
x32666:	mov ax, [bp + 24]	; 3: 139 70 24
x32669:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3544 4
x32672:	xor dx, dx	; 2: 49 210
x32674:	idiv word [@7954$int2$4#]	; 4: 247 62 65 129
x32678:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x32681:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32685:	xor edx, edx	; 3: 102 49 210
x32688:	idiv dword [@7958$int4$365#]	; 5: 102 247 62 67 129
x32693:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3547 leapDays
x32697:	mov ax, [bp + 26]	; 3: 139 70 26
x32700:	and eax, 65535	; 6: 102 37 255 255 0 0
x32706:	cmp ax, 0	; 3: 131 248 0
x32709:	jge gmtime$32	; 2: 125 5
x32711:	neg ax	; 2: 247 216
x32713:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3547
x32716:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x32720:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x32725:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x32727:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x32730:	mov ax, [bp + 24]	; 3: 139 70 24
x32733:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x32736:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 238 127
x32741:	mov [bp + 30], bp	; 3: 137 110 30
x32744:	add bp, 28	; 3: 131 197 28
x32747:	jmp @7868$isLeapYear	; 3: 233 93 1

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3551

gmtime$40:	; Equal 43 £temporary3551 0
x32750:	cmp bx, 0	; 3: 131 251 0
x32753:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x32755:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x32763:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x32765:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x32773:	mov ax, [bp + 24]	; 3: 139 70 24
x32776:	sub ax, 1900	; 3: 45 108 7
x32779:	mov [@7867$g_timeStruct + 10], ax	; 3: 163 37 129

gmtime$45:	; IntegralToIntegral £temporary3558 totalDays
x32782:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32786:	cmp eax, 0	; 4: 102 131 248 0
x32790:	jge gmtime$46	; 2: 125 5
x32792:	neg eax	; 3: 102 247 216
x32795:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3558
x32797:	mov [@7867$g_timeStruct + 14], ax	; 3: 163 41 129

gmtime$47:	; Assign daysOfMonths[0] 31
x32800:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x32805:	mov ax, [bp + 24]	; 3: 139 70 24
x32808:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x32811:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 57 128
x32816:	mov [bp + 32], bp	; 3: 137 110 32
x32819:	add bp, 30	; 3: 131 197 30
x32822:	jmp @7868$isLeapYear	; 3: 233 18 1

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3559

gmtime$53:	; Equal 56 £temporary3559 0
x32825:	cmp bx, 0	; 3: 131 251 0
x32828:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3564 29
x32830:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x32833:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3564 28
x32835:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3564
x32838:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x32841:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x32846:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x32851:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x32856:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x32861:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x32866:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x32871:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x32876:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x32881:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x32886:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x32891:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; UnsignedMultiply £temporary3578 month 2
x32896:	mov ax, [bp + 52]	; 3: 139 70 52
x32899:	xor dx, dx	; 2: 49 210
x32901:	mul word [@8034$int2$2#]	; 4: 247 38 71 129

gmtime$70:	; BinaryAdd £temporary3579 daysOfMonths £temporary3578
x32905:	mov si, bp	; 2: 137 238
x32907:	add si, 28	; 3: 131 198 28
x32910:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3577 -> £temporary3579 £temporary3579 0

gmtime$72:	; IntegralToIntegral £temporary3580 £temporary3577 -> £temporary3579
x32912:	mov ax, [si]	; 2: 139 4
x32914:	and eax, 65535	; 6: 102 37 255 255 0 0
x32920:	cmp ax, 0	; 3: 131 248 0
x32923:	jge gmtime$73	; 2: 125 5
x32925:	neg ax	; 2: 247 216
x32927:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3580
x32930:	cmp [bp + 20], eax	; 4: 102 57 70 20
x32934:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3582 month
x32936:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x32939:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; UnsignedMultiply £temporary3584 £temporary3582 2
x32942:	xor dx, dx	; 2: 49 210
x32944:	mul word [@8042$int2$2#]	; 4: 247 38 73 129

gmtime$77:	; BinaryAdd £temporary3585 daysOfMonths £temporary3584
x32948:	mov si, bp	; 2: 137 238
x32950:	add si, 28	; 3: 131 198 28
x32953:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3583 -> £temporary3585 £temporary3585 0

gmtime$79:	; IntegralToIntegral £temporary3586 £temporary3583 -> £temporary3585
x32955:	mov ax, [si]	; 2: 139 4
x32957:	and eax, 65535	; 6: 102 37 255 255 0 0
x32963:	cmp ax, 0	; 3: 131 248 0
x32966:	jge gmtime$80	; 2: 125 5
x32968:	neg ax	; 2: 247 216
x32970:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3586
x32973:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x32977:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x32979:	mov ax, [bp + 52]	; 3: 139 70 52
x32982:	mov [@7867$g_timeStruct + 8], ax	; 3: 163 35 129

gmtime$83:	; BinaryAdd £temporary3590 totalDays 1
x32985:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32989:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3591 £temporary3590
x32991:	cmp eax, 0	; 4: 102 131 248 0
x32995:	jge gmtime$85	; 2: 125 5
x32997:	neg eax	; 3: 102 247 216
x33000:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3591
x33002:	mov [@7867$g_timeStruct + 6], ax	; 3: 163 33 129

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x33005:	mov word [@7867$g_timeStruct + 16], -1	; 6: 199 6 43 129 255 255

gmtime$87:	; SetReturnValue (@7867$g_timeStruct,0)
x33011:	mov bx, @7867$g_timeStruct	; 3: 187 27 129

gmtime$88:	; Return (@7867$g_timeStruct,0)
x33014:	mov ax, [bp]	; 3: 139 70 0
x33017:	mov di, [bp + 4]	; 3: 139 126 4
x33020:	mov bp, [bp + 2]	; 3: 139 110 2
x33023:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x33025:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x33028:	mov ax, [bp]	; 3: 139 70 0
x33031:	mov di, [bp + 4]	; 3: 139 126 4
x33034:	mov bp, [bp + 2]	; 3: 139 110 2
x33037:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@7900$int4$86400#:
x33039:	dd 86400	; 4: 128 81 1 0

@7904$int4$3600#:
x33043:	dd 3600	; 4: 16 14 0 0

@7909$int4$3600#:
x33047:	dd 3600	; 4: 16 14 0 0

@7867$g_timeStruct:
x33051:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7914$int4$60#:
x33069:	dd 60	; 4: 60 0 0 0

@7919$int4$60#:
x33073:	dd 60	; 4: 60 0 0 0

@7923$int4$86400#:
x33077:	dd 86400	; 4: 128 81 1 0

@7939$int4$7#:
x33081:	dd 7	; 4: 7 0 0 0

@7944$int4$365#:
x33085:	dd 365	; 4: 109 1 0 0

@7954$int2$4#:
x33089:	dw 4	; 2: 4 0

@7958$int4$365#:
x33091:	dd 365	; 4: 109 1 0 0

@8034$int2$2#:
x33095:	dw 2	; 2: 2 0

@8042$int2$2#:
x33097:	dw 2	; 2: 2 0

@7868$isLeapYear:	; SignedModulo £temporary3510 year 4
x33099:	mov ax, [bp + 6]	; 3: 139 70 6
x33102:	xor dx, dx	; 2: 49 210
x33104:	idiv word [@7870$int2$4#]	; 4: 247 62 136 129

@7868$isLeapYear$1:	; NotEqual 4 £temporary3510 0
x33108:	cmp dx, 0	; 3: 131 250 0
x33111:	jne @7868$isLeapYear$4	; 2: 117 14

@7868$isLeapYear$2:	; SignedModulo £temporary3512 year 100
x33113:	mov ax, [bp + 6]	; 3: 139 70 6
x33116:	xor dx, dx	; 2: 49 210
x33118:	idiv word [@7876$int2$100#]	; 4: 247 62 138 129

@7868$isLeapYear$3:	; NotEqual 6 £temporary3512 0
x33122:	cmp dx, 0	; 3: 131 250 0
x33125:	jne @7868$isLeapYear$6	; 2: 117 14

@7868$isLeapYear$4:	; SignedModulo £temporary3515 year 400
x33127:	mov ax, [bp + 6]	; 3: 139 70 6
x33130:	xor dx, dx	; 2: 49 210
x33132:	idiv word [@7883$int2$400#]	; 4: 247 62 140 129

@7868$isLeapYear$5:	; NotEqual 8 £temporary3515 0
x33136:	cmp dx, 0	; 3: 131 250 0
x33139:	jne @7868$isLeapYear$8	; 2: 117 5

@7868$isLeapYear$6:	; Assign £temporary3518 1
x33141:	mov bx, 1	; 3: 187 1 0

@7868$isLeapYear$7:	; Goto 9
x33144:	jmp @7868$isLeapYear$9	; 2: 235 3

@7868$isLeapYear$8:	; Assign £temporary3518 0
x33146:	mov bx, 0	; 3: 187 0 0

@7868$isLeapYear$9:	; SetReturnValue £temporary3518

@7868$isLeapYear$10:	; Return £temporary3518
x33149:	mov ax, [bp]	; 3: 139 70 0
x33152:	mov di, [bp + 4]	; 3: 139 126 4
x33155:	mov bp, [bp + 2]	; 3: 139 110 2
x33158:	jmp ax	; 2: 255 224

@7868$isLeapYear$11:	; FunctionEnd isLeapYear

@7870$int2$4#:
x33160:	dw 4	; 2: 4 0

@7876$int2$100#:
x33162:	dw 100	; 2: 100 0

@7883$int2$400#:
x33164:	dw 400	; 2: 144 1

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x33166:	mov ax, [bp + 6]	; 3: 139 70 6
x33169:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x33172:	mov word [bp + 8], localtime$3	; 5: 199 70 8 162 129
x33177:	mov [bp + 10], bp	; 3: 137 110 10
x33180:	add bp, 8	; 3: 131 197 8
x33183:	jmp gmtime	; 3: 233 9 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3647

localtime$5:	; Assign tmPtr £temporary3647
x33186:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$7:	; Call 10 localeconv 0
x33189:	mov word [bp + 10], localtime$8	; 5: 199 70 10 179 129
x33194:	mov [bp + 12], bp	; 3: 137 110 12
x33197:	add bp, 10	; 3: 131 197 10
x33200:	jmp localeconv	; 3: 233 196 156

localtime$8:	; PostCall 10

localtime$9:	; GetReturnValue £temporary3648

localtime$10:	; Assign localeConvPtr £temporary3648
x33203:	mov [bp + 10], bx	; 3: 137 94 10

localtime$11:	; Assign timeZone 0
x33206:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

localtime$12:	; Equal 21 localeConvPtr 0
x33211:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x33215:	je localtime$21	; 2: 116 25

localtime$13:	; Deref £temporary3650 -> tmPtr tmPtr 16
x33217:	mov si, [bp + 8]	; 3: 139 118 8

localtime$14:	; NotEqual 18 £temporary3650 -> tmPtr 1
x33220:	cmp word [si + 16], 1	; 4: 131 124 16 1
x33224:	jne localtime$18	; 2: 117 7

localtime$15:	; Deref £temporary3652 -> localeConvPtr localeConvPtr 0
x33226:	mov si, [bp + 10]	; 3: 139 118 10

localtime$16:	; Assign £temporary3657 £temporary3652 -> localeConvPtr
x33229:	mov ax, [si]	; 2: 139 4

localtime$17:	; Goto 20
x33231:	jmp localtime$20	; 2: 235 6

localtime$18:	; Deref £temporary3653 -> localeConvPtr localeConvPtr 2
x33233:	mov si, [bp + 10]	; 3: 139 118 10

localtime$19:	; Assign £temporary3657 £temporary3653 -> localeConvPtr
x33236:	mov ax, [si + 2]	; 3: 139 68 2

localtime$20:	; Assign timeZone £temporary3657
x33239:	mov [bp + 12], ax	; 3: 137 70 12

localtime$21:	; Deref £temporary3658 -> timePtr timePtr 0
x33242:	mov si, [bp + 6]	; 3: 139 118 6

localtime$22:	; IntegralToIntegral £temporary3659 timeZone
x33245:	mov ax, [bp + 12]	; 3: 139 70 12
x33248:	and eax, 65535	; 6: 102 37 255 255 0 0
x33254:	cmp ax, 0	; 3: 131 248 0
x33257:	jge localtime$23	; 2: 125 5
x33259:	neg ax	; 2: 247 216
x33261:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3660 £temporary3659 3600
x33264:	xor edx, edx	; 3: 102 49 210
x33267:	imul dword [@8225$int4$3600#]	; 5: 102 247 46 35 130

localtime$24:	; BinaryAdd t £temporary3658 -> timePtr £temporary3660
x33272:	mov ebx, [si]	; 3: 102 139 28
x33275:	add ebx, eax	; 3: 102 1 195
x33278:	mov [bp + 14], ebx	; 4: 102 137 94 14

localtime$25:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3662 t
x33282:	mov si, bp	; 2: 137 238
x33284:	add si, 14	; 3: 131 198 14

localtime$27:	; Parameter 18 £temporary3662 6
x33287:	mov [bp + 24], si	; 3: 137 118 24

localtime$28:	; Call 18 gmtime 0
x33290:	mov word [bp + 18], localtime$29	; 5: 199 70 18 24 130
x33295:	mov [bp + 20], bp	; 3: 137 110 20
x33298:	add bp, 18	; 3: 131 197 18
x33301:	jmp gmtime	; 3: 233 147 252

localtime$29:	; PostCall 18

localtime$30:	; GetReturnValue £temporary3663

localtime$31:	; SetReturnValue £temporary3663

localtime$32:	; Return £temporary3663
x33304:	mov ax, [bp]	; 3: 139 70 0
x33307:	mov di, [bp + 4]	; 3: 139 126 4
x33310:	mov bp, [bp + 2]	; 3: 139 110 2
x33313:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

@8225$int4$3600#:
x33315:	dd 3600	; 4: 16 14 0 0

asctime:	; Assign localeConvPtr 0
x33319:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 5 localeConvPtr 0
x33324:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33328:	je asctime$5	; 2: 116 8

asctime$2:	; Deref £temporary3598 -> localeConvPtr localeConvPtr 4
x33330:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Assign £temporary3602 £temporary3598 -> localeConvPtr
x33333:	mov ax, [si + 4]	; 3: 139 68 4

asctime$4:	; Goto 6
x33336:	jmp asctime$6	; 2: 235 3

asctime$5:	; Assign £temporary3602 0
x33338:	mov ax, 0	; 3: 184 0 0

asctime$6:	; Assign shortDayList £temporary3602
x33341:	mov [bp + 10], ax	; 3: 137 70 10

asctime$7:	; Equal 11 localeConvPtr 0
x33344:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33348:	je asctime$11	; 2: 116 8

asctime$8:	; Deref £temporary3604 -> localeConvPtr localeConvPtr 8
x33350:	mov si, [bp + 8]	; 3: 139 118 8

asctime$9:	; Assign £temporary3608 £temporary3604 -> localeConvPtr
x33353:	mov ax, [si + 8]	; 3: 139 68 8

asctime$10:	; Goto 12
x33356:	jmp asctime$12	; 2: 235 3

asctime$11:	; Assign £temporary3608 0
x33358:	mov ax, 0	; 3: 184 0 0

asctime$12:	; Assign shortMonthList £temporary3608
x33361:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Equal 16 shortDayList 0
x33364:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x33368:	je asctime$16	; 2: 116 5

asctime$14:	; Assign £temporary3613 shortDayList
x33370:	mov ax, [bp + 10]	; 3: 139 70 10

asctime$15:	; Goto 17
x33373:	jmp asctime$17	; 2: 235 3

asctime$16:	; Assign £temporary3613 g_defaultShortDayList
x33375:	mov ax, @8076$g_defaultShortDayList	; 3: 184 252 130

asctime$17:	; Assign shortDayList £temporary3613
x33378:	mov [bp + 10], ax	; 3: 137 70 10

asctime$18:	; Equal 21 shortMonthList 0
x33381:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x33385:	je asctime$21	; 2: 116 5

asctime$19:	; Assign £temporary3618 shortMonthList
x33387:	mov ax, [bp + 12]	; 3: 139 70 12

asctime$20:	; Goto 22
x33390:	jmp asctime$22	; 2: 235 3

asctime$21:	; Assign £temporary3618 g_defaultShortMonthList
x33392:	mov ax, @8097$g_defaultShortMonthList	; 3: 184 38 131

asctime$22:	; Assign shortMonthList £temporary3618
x33395:	mov [bp + 12], ax	; 3: 137 70 12

asctime$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$24:	; Parameter 14 g_timeString 6
x33398:	mov word [bp + 20], @8068$g_timeString	; 5: 199 70 20 110 131

asctime$25:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x33403:	mov word [bp + 22], @8165$string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 110 132

asctime$26:	; Deref £temporary3619 -> tp tp 12
x33408:	mov si, [bp + 6]	; 3: 139 118 6

asctime$27:	; UnsignedMultiply £temporary3621 £temporary3619 -> tp 2
x33411:	mov ax, [si + 12]	; 3: 139 68 12
x33414:	xor dx, dx	; 2: 49 210
x33416:	mul word [@8168$int2$2#]	; 4: 247 38 137 132

asctime$28:	; BinaryAdd £temporary3622 shortDayList £temporary3621
x33420:	mov si, [bp + 10]	; 3: 139 118 10
x33423:	add si, ax	; 2: 1 198

asctime$29:	; Deref £temporary3620 -> £temporary3622 £temporary3622 0

asctime$30:	; Parameter 14 £temporary3620 -> £temporary3622 10
x33425:	mov ax, [si]	; 2: 139 4
x33427:	mov [bp + 24], ax	; 3: 137 70 24

asctime$31:	; Deref £temporary3623 -> tp tp 8
x33430:	mov si, [bp + 6]	; 3: 139 118 6

asctime$32:	; UnsignedMultiply £temporary3625 £temporary3623 -> tp 2
x33433:	mov ax, [si + 8]	; 3: 139 68 8
x33436:	xor dx, dx	; 2: 49 210
x33438:	mul word [@8173$int2$2#]	; 4: 247 38 139 132

asctime$33:	; BinaryAdd £temporary3626 shortMonthList £temporary3625
x33442:	mov si, [bp + 12]	; 3: 139 118 12
x33445:	add si, ax	; 2: 1 198

asctime$34:	; Deref £temporary3624 -> £temporary3626 £temporary3626 0

asctime$35:	; Parameter 14 £temporary3624 -> £temporary3626 12
x33447:	mov ax, [si]	; 2: 139 4
x33449:	mov [bp + 26], ax	; 3: 137 70 26

asctime$36:	; Deref £temporary3627 -> tp tp 6
x33452:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; Parameter 14 £temporary3627 -> tp 14
x33455:	mov ax, [si + 6]	; 3: 139 68 6
x33458:	mov [bp + 28], ax	; 3: 137 70 28

asctime$38:	; Deref £temporary3628 -> tp tp 4
x33461:	mov si, [bp + 6]	; 3: 139 118 6

asctime$39:	; Parameter 14 £temporary3628 -> tp 16
x33464:	mov ax, [si + 4]	; 3: 139 68 4
x33467:	mov [bp + 30], ax	; 3: 137 70 30

asctime$40:	; Deref £temporary3629 -> tp tp 2
x33470:	mov si, [bp + 6]	; 3: 139 118 6

asctime$41:	; Parameter 14 £temporary3629 -> tp 18
x33473:	mov ax, [si + 2]	; 3: 139 68 2
x33476:	mov [bp + 32], ax	; 3: 137 70 32

asctime$42:	; Deref £temporary3630 -> tp tp 0
x33479:	mov si, [bp + 6]	; 3: 139 118 6

asctime$43:	; Parameter 14 £temporary3630 -> tp 20
x33482:	mov ax, [si]	; 2: 139 4
x33484:	mov [bp + 34], ax	; 3: 137 70 34

asctime$44:	; Deref £temporary3631 -> tp tp 10
x33487:	mov si, [bp + 6]	; 3: 139 118 6

asctime$45:	; BinaryAdd £temporary3632 £temporary3631 -> tp 1900
x33490:	mov ax, [si + 10]	; 3: 139 68 10
x33493:	add ax, 1900	; 3: 5 108 7

asctime$46:	; Parameter 14 £temporary3632 22
x33496:	mov [bp + 36], ax	; 3: 137 70 36

asctime$47:	; Call 14 sprintf 0
x33499:	mov word [bp + 14], asctime$48	; 5: 199 70 14 238 130
x33504:	mov [bp + 16], bp	; 3: 137 110 16
x33507:	add bp, 14	; 3: 131 197 14
x33510:	mov di, bp	; 2: 137 239
x33512:	add di, 14	; 3: 131 199 14
x33515:	jmp sprintf	; 3: 233 159 1

asctime$48:	; PostCall 14

asctime$49:	; SetReturnValue g_timeString
x33518:	mov bx, @8068$g_timeString	; 3: 187 110 131

asctime$50:	; Return g_timeString
x33521:	mov ax, [bp]	; 3: 139 70 0
x33524:	mov di, [bp + 4]	; 3: 139 126 4
x33527:	mov bp, [bp + 2]	; 3: 139 110 2
x33530:	jmp ax	; 2: 255 224

asctime$51:	; FunctionEnd asctime

@8076$g_defaultShortDayList:
x33532:	dw @8069$string_Sun# ; 2: 10 131
x33534:	dw @8070$string_Mon# ; 2: 14 131
x33536:	dw @8071$string_Tue# ; 2: 18 131
x33538:	dw @8072$string_Wed# ; 2: 22 131
x33540:	dw @8073$string_Thu# ; 2: 26 131
x33542:	dw @8074$string_Fri# ; 2: 30 131
x33544:	dw @8075$string_Sat# ; 2: 34 131

@8069$string_Sun#:
x33546:	db "Sun", 0	; 4: 83 117 110 0

@8070$string_Mon#:
x33550:	db "Mon", 0	; 4: 77 111 110 0

@8071$string_Tue#:
x33554:	db "Tue", 0	; 4: 84 117 101 0

@8072$string_Wed#:
x33558:	db "Wed", 0	; 4: 87 101 100 0

@8073$string_Thu#:
x33562:	db "Thu", 0	; 4: 84 104 117 0

@8074$string_Fri#:
x33566:	db "Fri", 0	; 4: 70 114 105 0

@8075$string_Sat#:
x33570:	db "Sat", 0	; 4: 83 97 116 0

@8097$g_defaultShortMonthList:
x33574:	dw @8085$string_Jan# ; 2: 62 131
x33576:	dw @8086$string_Feb# ; 2: 66 131
x33578:	dw @8087$string_Mar# ; 2: 70 131
x33580:	dw @8088$string_Apr# ; 2: 74 131
x33582:	dw @8089$string_May# ; 2: 78 131
x33584:	dw @8090$string_Jun# ; 2: 82 131
x33586:	dw @8091$string_Jul# ; 2: 86 131
x33588:	dw @8092$string_Aug# ; 2: 90 131
x33590:	dw @8093$string_Sep# ; 2: 94 131
x33592:	dw @8094$string_Oct# ; 2: 98 131
x33594:	dw @8095$string_Nov# ; 2: 102 131
x33596:	dw @8096$string_Dec# ; 2: 106 131

@8085$string_Jan#:
x33598:	db "Jan", 0	; 4: 74 97 110 0

@8086$string_Feb#:
x33602:	db "Feb", 0	; 4: 70 101 98 0

@8087$string_Mar#:
x33606:	db "Mar", 0	; 4: 77 97 114 0

@8088$string_Apr#:
x33610:	db "Apr", 0	; 4: 65 112 114 0

@8089$string_May#:
x33614:	db "May", 0	; 4: 77 97 121 0

@8090$string_Jun#:
x33618:	db "Jun", 0	; 4: 74 117 110 0

@8091$string_Jul#:
x33622:	db "Jul", 0	; 4: 74 117 108 0

@8092$string_Aug#:
x33626:	db "Aug", 0	; 4: 65 117 103 0

@8093$string_Sep#:
x33630:	db "Sep", 0	; 4: 83 101 112 0

@8094$string_Oct#:
x33634:	db "Oct", 0	; 4: 79 99 116 0

@8095$string_Nov#:
x33638:	db "Nov", 0	; 4: 78 111 118 0

@8096$string_Dec#:
x33642:	db "Dec", 0	; 4: 68 101 99 0

@8068$g_timeString:
x33646:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@8165$string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x33902:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

@8168$int2$2#:
x33929:	dw 2	; 2: 2 0

@8173$int2$2#:
x33931:	dw 2	; 2: 2 0

sprintf:	; address £temporary2408 format
x33933:	mov si, bp	; 2: 137 238
x33935:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2409 £temporary2408

sprintf$2:	; BinaryAdd arg_list £temporary2409 2
x33938:	add si, 2	; 3: 131 198 2
x33941:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x33944:	mov ax, [bp + 6]	; 3: 139 70 6
x33947:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x33950:	mov ax, [bp + 8]	; 3: 139 70 8
x33953:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x33956:	mov ax, [di + 10]	; 3: 139 69 10
x33959:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x33962:	mov word [di + 12], sprintf$8	; 5: 199 69 12 189 132
x33967:	mov [di + 14], bp	; 3: 137 109 14
x33970:	mov [di + 16], di	; 3: 137 125 16
x33973:	add di, 12	; 3: 131 199 12
x33976:	mov bp, di	; 2: 137 253
x33978:	nop	; 1: 144
x33979:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2411

sprintf$10:	; SetReturnValue £temporary2411

sprintf$11:	; Return £temporary2411
x33981:	mov ax, [bp]	; 3: 139 70 0
x33984:	mov di, [bp + 4]	; 3: 139 126 4
x33987:	mov bp, [bp + 2]	; 3: 139 110 2
x33990:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x33992:	mov word [g_outStatus], 1	; 6: 199 6 219 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2416 outString
x33998:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2416
x34001:	mov [g_outDevice], ax	; 3: 163 221 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x34004:	mov ax, [bp + 8]	; 3: 139 70 8
x34007:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x34010:	mov ax, [bp + 10]	; 3: 139 70 10
x34013:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x34016:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 238 132
x34021:	mov [bp + 14], bp	; 3: 137 110 14
x34024:	add bp, 12	; 3: 131 197 12
x34027:	jmp printFormat	; 3: 233 241 138

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2417

vsprintf$9:	; SetReturnValue £temporary2417

vsprintf$10:	; Return £temporary2417
x34030:	mov ax, [bp]	; 3: 139 70 0
x34033:	mov di, [bp + 4]	; 3: 139 126 4
x34036:	mov bp, [bp + 2]	; 3: 139 110 2
x34039:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x34041:	mov ax, [bp + 6]	; 3: 139 70 6
x34044:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x34047:	mov word [bp + 8], ctime$4	; 5: 199 70 8 13 133
x34052:	mov [bp + 10], bp	; 3: 137 110 10
x34055:	add bp, 8	; 3: 131 197 8
x34058:	jmp localtime	; 3: 233 129 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3643

ctime$6:	; Parameter 8 £temporary3643 6
x34061:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x34064:	mov word [bp + 8], ctime$8	; 5: 199 70 8 30 133
x34069:	mov [bp + 10], bp	; 3: 137 110 10
x34072:	add bp, 8	; 3: 131 197 8
x34075:	jmp asctime	; 3: 233 9 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3644

ctime$10:	; SetReturnValue £temporary3644

ctime$11:	; Return £temporary3644
x34078:	mov ax, [bp]	; 3: 139 70 0
x34081:	mov di, [bp + 4]	; 3: 139 126 4
x34084:	mov bp, [bp + 2]	; 3: 139 110 2
x34087:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x34089:	mov word [bp + 14], strftime$2	; 5: 199 70 14 55 133
x34094:	mov [bp + 16], bp	; 3: 137 110 16
x34097:	add bp, 14	; 3: 131 197 14
x34100:	jmp localeconv	; 3: 233 64 153

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3667

strftime$4:	; Assign localeConvPtr £temporary3667
x34103:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 9 localeConvPtr 0
x34106:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34110:	je strftime$9	; 2: 116 8

strftime$6:	; Deref £temporary3669 -> localeConvPtr localeConvPtr 4
x34112:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Assign £temporary3673 £temporary3669 -> localeConvPtr
x34115:	mov ax, [si + 4]	; 3: 139 68 4

strftime$8:	; Goto 10
x34118:	jmp strftime$10	; 2: 235 3

strftime$9:	; Assign £temporary3673 0
x34120:	mov ax, 0	; 3: 184 0 0

strftime$10:	; Assign shortDayList £temporary3673
x34123:	mov [bp + 16], ax	; 3: 137 70 16

strftime$11:	; Equal 15 localeConvPtr 0
x34126:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34130:	je strftime$15	; 2: 116 8

strftime$12:	; Deref £temporary3675 -> localeConvPtr localeConvPtr 8
x34132:	mov si, [bp + 14]	; 3: 139 118 14

strftime$13:	; Assign £temporary3679 £temporary3675 -> localeConvPtr
x34135:	mov ax, [si + 8]	; 3: 139 68 8

strftime$14:	; Goto 16
x34138:	jmp strftime$16	; 2: 235 3

strftime$15:	; Assign £temporary3679 0
x34140:	mov ax, 0	; 3: 184 0 0

strftime$16:	; Assign shortMonthList £temporary3679
x34143:	mov [bp + 18], ax	; 3: 137 70 18

strftime$17:	; Equal 21 localeConvPtr 0
x34146:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34150:	je strftime$21	; 2: 116 8

strftime$18:	; Deref £temporary3681 -> localeConvPtr localeConvPtr 6
x34152:	mov si, [bp + 14]	; 3: 139 118 14

strftime$19:	; Assign £temporary3685 £temporary3681 -> localeConvPtr
x34155:	mov ax, [si + 6]	; 3: 139 68 6

strftime$20:	; Goto 22
x34158:	jmp strftime$22	; 2: 235 3

strftime$21:	; Assign £temporary3685 0
x34160:	mov ax, 0	; 3: 184 0 0

strftime$22:	; Assign longDayList £temporary3685
x34163:	mov [bp + 20], ax	; 3: 137 70 20

strftime$23:	; Equal 27 localeConvPtr 0
x34166:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34170:	je strftime$27	; 2: 116 8

strftime$24:	; Deref £temporary3687 -> localeConvPtr localeConvPtr 10
x34172:	mov si, [bp + 14]	; 3: 139 118 14

strftime$25:	; Assign £temporary3691 £temporary3687 -> localeConvPtr
x34175:	mov ax, [si + 10]	; 3: 139 68 10

strftime$26:	; Goto 28
x34178:	jmp strftime$28	; 2: 235 3

strftime$27:	; Assign £temporary3691 0
x34180:	mov ax, 0	; 3: 184 0 0

strftime$28:	; Assign longMonthList £temporary3691
x34183:	mov [bp + 22], ax	; 3: 137 70 22

strftime$29:	; Deref £temporary3692 -> tp tp 10
x34186:	mov si, [bp + 12]	; 3: 139 118 12

strftime$30:	; BinarySubtract £temporary3693 £temporary3692 -> tp 69
x34189:	mov ax, [si + 10]	; 3: 139 68 10
x34192:	sub ax, 69	; 3: 131 232 69

strftime$31:	; SignedDivide leapDays £temporary3693 4
x34195:	xor dx, dx	; 2: 49 210
x34197:	idiv word [@8303$int2$4#]	; 4: 247 62 3 140
x34201:	mov [bp + 24], ax	; 3: 137 70 24

strftime$32:	; Deref £temporary3695 -> tp tp 10
x34204:	mov si, [bp + 12]	; 3: 139 118 12

strftime$33:	; BinarySubtract £temporary3696 £temporary3695 -> tp 70
x34207:	mov ax, [si + 10]	; 3: 139 68 10
x34210:	sub ax, 70	; 3: 131 232 70

strftime$34:	; SignedMultiply £temporary3697 £temporary3696 365
x34213:	xor dx, dx	; 2: 49 210
x34215:	imul word [@8311$int2$365#]	; 4: 247 46 5 140

strftime$35:	; BinaryAdd £temporary3698 £temporary3697 leapDays
x34219:	add ax, [bp + 24]	; 3: 3 70 24

strftime$36:	; Deref £temporary3699 -> tp tp 14
x34222:	mov si, [bp + 12]	; 3: 139 118 12

strftime$37:	; BinaryAdd £temporary3700 £temporary3698 £temporary3699 -> tp
x34225:	add ax, [si + 14]	; 3: 3 68 14

strftime$38:	; IntegralToIntegral £temporary3701 £temporary3700
x34228:	and eax, 65535	; 6: 102 37 255 255 0 0
x34234:	cmp ax, 0	; 3: 131 248 0
x34237:	jge strftime$39	; 2: 125 5
x34239:	neg ax	; 2: 247 216
x34241:	neg eax	; 3: 102 247 216

strftime$39:	; Assign totalDays £temporary3701
x34244:	mov [bp + 26], eax	; 4: 102 137 70 26

strftime$40:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$41:	; Parameter 34 s 6
x34248:	mov ax, [bp + 6]	; 3: 139 70 6
x34251:	mov [bp + 40], ax	; 3: 137 70 40

strftime$42:	; Parameter 34 string_# 8
x34254:	mov word [bp + 42], @8320$string_#	; 5: 199 70 42 7 140

strftime$43:	; Call 34 strcpy 0
x34259:	mov word [bp + 34], strftime$44	; 5: 199 70 34 225 133
x34264:	mov [bp + 36], bp	; 3: 137 110 36
x34267:	add bp, 34	; 3: 131 197 34
x34270:	jmp strcpy	; 3: 233 19 217

strftime$44:	; PostCall 34

strftime$45:	; Equal 48 shortDayList 0
x34273:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x34277:	je strftime$48	; 2: 116 5

strftime$46:	; Assign £temporary3707 shortDayList
x34279:	mov ax, [bp + 16]	; 3: 139 70 16

strftime$47:	; Goto 49
x34282:	jmp strftime$49	; 2: 235 3

strftime$48:	; Assign £temporary3707 g_defaultShortDayList
x34284:	mov ax, @8076$g_defaultShortDayList	; 3: 184 252 130

strftime$49:	; Assign shortDayList £temporary3707
x34287:	mov [bp + 16], ax	; 3: 137 70 16

strftime$50:	; Equal 53 longDayList 0
x34290:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x34294:	je strftime$53	; 2: 116 5

strftime$51:	; Assign £temporary3712 longDayList
x34296:	mov ax, [bp + 20]	; 3: 139 70 20

strftime$52:	; Goto 54
x34299:	jmp strftime$54	; 2: 235 3

strftime$53:	; Assign £temporary3712 g_defaultLongDayList
x34301:	mov ax, @8084$g_defaultLongDayList	; 3: 184 8 140

strftime$54:	; Assign longDayList £temporary3712
x34304:	mov [bp + 20], ax	; 3: 137 70 20

strftime$55:	; Equal 58 shortMonthList 0
x34307:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x34311:	je strftime$58	; 2: 116 5

strftime$56:	; Assign £temporary3717 shortMonthList
x34313:	mov ax, [bp + 18]	; 3: 139 70 18

strftime$57:	; Goto 59
x34316:	jmp strftime$59	; 2: 235 3

strftime$58:	; Assign £temporary3717 g_defaultShortMonthList
x34318:	mov ax, @8097$g_defaultShortMonthList	; 3: 184 38 131

strftime$59:	; Assign shortMonthList £temporary3717
x34321:	mov [bp + 18], ax	; 3: 137 70 18

strftime$60:	; Equal 63 longMonthList 0
x34324:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x34328:	je strftime$63	; 2: 116 5

strftime$61:	; Assign £temporary3722 longMonthList
x34330:	mov ax, [bp + 22]	; 3: 139 70 22

strftime$62:	; Goto 64
x34333:	jmp strftime$64	; 2: 235 3

strftime$63:	; Assign £temporary3722 g_defaultLongMonthList
x34335:	mov ax, @8110$g_defaultLongMonthList	; 3: 184 79 140

strftime$64:	; Assign longMonthList £temporary3722
x34338:	mov [bp + 22], ax	; 3: 137 70 22

strftime$65:	; SignedGreaterThanEqual 70 totalDays 3
x34341:	cmp dword [bp + 26], 3	; 5: 102 131 126 26 3
x34346:	jge strftime$70	; 2: 125 24

strftime$66:	; BinaryAdd £temporary3724 totalDays 4
x34348:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34352:	add eax, 4	; 4: 102 131 192 4

strftime$67:	; IntegralToIntegral £temporary3725 £temporary3724
x34356:	cmp eax, 0	; 4: 102 131 248 0
x34360:	jge strftime$68	; 2: 125 5
x34362:	neg eax	; 3: 102 247 216
x34365:	neg ax	; 2: 247 216

strftime$68:	; Assign yearDaySunday £temporary3725
x34367:	mov [bp + 30], ax	; 3: 137 70 30

strftime$69:	; Goto 74
x34370:	jmp strftime$74	; 2: 235 30

strftime$70:	; BinarySubtract £temporary3726 totalDays 3
x34372:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34376:	sub eax, 3	; 4: 102 131 232 3

strftime$71:	; SignedModulo £temporary3727 £temporary3726 7
x34380:	xor edx, edx	; 3: 102 49 210
x34383:	idiv dword [@8373$int4$7#]	; 5: 102 247 62 189 140

strftime$72:	; IntegralToIntegral £temporary3728 £temporary3727
x34388:	cmp edx, 0	; 4: 102 131 250 0
x34392:	jge strftime$73	; 2: 125 5
x34394:	neg edx	; 3: 102 247 218
x34397:	neg dx	; 2: 247 218

strftime$73:	; Assign yearDaySunday £temporary3728
x34399:	mov [bp + 30], dx	; 3: 137 86 30

strftime$74:	; SignedGreaterThanEqual 79 totalDays 4
x34402:	cmp dword [bp + 26], 4	; 5: 102 131 126 26 4
x34407:	jge strftime$79	; 2: 125 24

strftime$75:	; BinaryAdd £temporary3730 totalDays 3
x34409:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34413:	add eax, 3	; 4: 102 131 192 3

strftime$76:	; IntegralToIntegral £temporary3731 £temporary3730
x34417:	cmp eax, 0	; 4: 102 131 248 0
x34421:	jge strftime$77	; 2: 125 5
x34423:	neg eax	; 3: 102 247 216
x34426:	neg ax	; 2: 247 216

strftime$77:	; Assign yearDayMonday £temporary3731
x34428:	mov [bp + 32], ax	; 3: 137 70 32

strftime$78:	; Goto 83
x34431:	jmp strftime$83	; 2: 235 30

strftime$79:	; BinarySubtract £temporary3732 totalDays 4
x34433:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34437:	sub eax, 4	; 4: 102 131 232 4

strftime$80:	; SignedModulo £temporary3733 £temporary3732 7
x34441:	xor edx, edx	; 3: 102 49 210
x34444:	idiv dword [@8387$int4$7#]	; 5: 102 247 62 193 140

strftime$81:	; IntegralToIntegral £temporary3734 £temporary3733
x34449:	cmp edx, 0	; 4: 102 131 250 0
x34453:	jge strftime$82	; 2: 125 5
x34455:	neg edx	; 3: 102 247 218
x34458:	neg dx	; 2: 247 218

strftime$82:	; Assign yearDayMonday £temporary3734
x34460:	mov [bp + 32], dx	; 3: 137 86 32

strftime$83:	; Assign index 0
x34463:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

strftime$84:	; BinaryAdd £temporary3736 fmt index
x34468:	mov si, [bp + 10]	; 3: 139 118 10
x34471:	add si, [bp + 34]	; 3: 3 118 34

strftime$85:	; Deref £temporary3735 -> £temporary3736 £temporary3736 0

strftime$86:	; Equal 356 £temporary3735 -> £temporary3736 0
x34474:	cmp byte [si], 0	; 3: 128 60 0
x34477:	je strftime$356	; 4: 15 132 51 5

strftime$87:	; BinaryAdd £temporary3740 fmt index
x34481:	mov si, [bp + 10]	; 3: 139 118 10
x34484:	add si, [bp + 34]	; 3: 3 118 34

strftime$88:	; Deref £temporary3739 -> £temporary3740 £temporary3740 0

strftime$89:	; NotEqual 329 £temporary3739 -> £temporary3740 37
x34487:	cmp byte [si], 37	; 3: 128 60 37
x34490:	jne strftime$329	; 4: 15 133 179 4

strftime$90:	; Increment index
x34494:	inc word [bp + 34]	; 3: 255 70 34

strftime$91:	; Assign £temporary3742 index
x34497:	mov ax, [bp + 34]	; 3: 139 70 34

strftime$92:	; BinaryAdd £temporary3744 fmt £temporary3742
x34500:	mov si, [bp + 10]	; 3: 139 118 10
x34503:	add si, ax	; 2: 1 198

strftime$93:	; Deref £temporary3743 -> £temporary3744 £temporary3744 0

strftime$94:	; Case 118 £temporary3743 -> £temporary3744 97
x34505:	mov al, [si]	; 2: 138 4
x34507:	cmp al, 97	; 2: 60 97
x34509:	je strftime$118	; 4: 15 132 129 0

strftime$95:	; Case 128 £temporary3743 -> £temporary3744 65
x34513:	cmp al, 65	; 2: 60 65
x34515:	je strftime$128	; 4: 15 132 169 0

strftime$96:	; Case 138 £temporary3743 -> £temporary3744 98
x34519:	cmp al, 98	; 2: 60 98
x34521:	je strftime$138	; 4: 15 132 209 0

strftime$97:	; Case 148 £temporary3743 -> £temporary3744 66
x34525:	cmp al, 66	; 2: 60 66
x34527:	je strftime$148	; 4: 15 132 249 0

strftime$98:	; Case 158 £temporary3743 -> £temporary3744 99
x34531:	cmp al, 99	; 2: 60 99
x34533:	je strftime$158	; 4: 15 132 33 1

strftime$99:	; Case 178 £temporary3743 -> £temporary3744 100
x34537:	cmp al, 100	; 2: 60 100
x34539:	je strftime$178	; 4: 15 132 118 1

strftime$100:	; Case 186 £temporary3743 -> £temporary3744 72
x34543:	cmp al, 72	; 2: 60 72
x34545:	je strftime$186	; 4: 15 132 155 1

strftime$101:	; Case 194 £temporary3743 -> £temporary3744 73
x34549:	cmp al, 73	; 2: 60 73
x34551:	je strftime$194	; 4: 15 132 192 1

strftime$102:	; Case 203 £temporary3743 -> £temporary3744 106
x34555:	cmp al, 106	; 2: 60 106
x34557:	je strftime$203	; 4: 15 132 235 1

strftime$103:	; Case 211 £temporary3743 -> £temporary3744 109
x34561:	cmp al, 109	; 2: 60 109
x34563:	je strftime$211	; 4: 15 132 16 2

strftime$104:	; Case 220 £temporary3743 -> £temporary3744 77
x34567:	cmp al, 77	; 2: 60 77
x34569:	je strftime$220	; 4: 15 132 54 2

strftime$105:	; Case 228 £temporary3743 -> £temporary3744 112
x34573:	cmp al, 112	; 2: 60 112
x34575:	je strftime$228	; 4: 15 132 91 2

strftime$106:	; Case 240 £temporary3743 -> £temporary3744 83
x34579:	cmp al, 83	; 2: 60 83
x34581:	je strftime$240	; 4: 15 132 139 2

strftime$107:	; Case 248 £temporary3743 -> £temporary3744 85
x34585:	cmp al, 85	; 2: 60 85
x34587:	je strftime$248	; 4: 15 132 175 2

strftime$108:	; Case 255 £temporary3743 -> £temporary3744 119
x34591:	cmp al, 119	; 2: 60 119
x34593:	je strftime$255	; 4: 15 132 209 2

strftime$109:	; Case 263 £temporary3743 -> £temporary3744 87
x34597:	cmp al, 87	; 2: 60 87
x34599:	je strftime$263	; 4: 15 132 246 2

strftime$110:	; Case 270 £temporary3743 -> £temporary3744 120
x34603:	cmp al, 120	; 2: 60 120
x34605:	je strftime$270	; 4: 15 132 24 3

strftime$111:	; Case 282 £temporary3743 -> £temporary3744 88
x34609:	cmp al, 88	; 2: 60 88
x34611:	je strftime$282	; 4: 15 132 78 3

strftime$112:	; Case 294 £temporary3743 -> £temporary3744 121
x34615:	cmp al, 121	; 2: 60 121
x34617:	je strftime$294	; 4: 15 132 132 3

strftime$113:	; Case 303 £temporary3743 -> £temporary3744 89
x34621:	cmp al, 89	; 2: 60 89
x34623:	je strftime$303	; 4: 15 132 175 3

strftime$114:	; Case 312 £temporary3743 -> £temporary3744 90
x34627:	cmp al, 90	; 2: 60 90
x34629:	je strftime$312	; 4: 15 132 214 3

strftime$115:	; Case 318 £temporary3743 -> £temporary3744 37
x34633:	cmp al, 37	; 2: 60 37
x34635:	je strftime$318	; 4: 15 132 236 3

strftime$116:	; CaseEnd £temporary3743 -> £temporary3744

strftime$117:	; Goto 323
x34639:	jmp strftime$323	; 3: 233 3 4

strftime$118:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$119:	; Parameter 56 add 6
x34642:	mov [bp + 62], bp	; 3: 137 110 62
x34645:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$120:	; Deref £temporary3745 -> tp tp 12
x34649:	mov si, [bp + 12]	; 3: 139 118 12

strftime$121:	; UnsignedMultiply £temporary3747 £temporary3745 -> tp 2
x34652:	mov ax, [si + 12]	; 3: 139 68 12
x34655:	xor dx, dx	; 2: 49 210
x34657:	mul word [@8416$int2$2#]	; 4: 247 38 197 140

strftime$122:	; BinaryAdd £temporary3748 shortDayList £temporary3747
x34661:	mov si, [bp + 16]	; 3: 139 118 16
x34664:	add si, ax	; 2: 1 198

strftime$123:	; Deref £temporary3746 -> £temporary3748 £temporary3748 0

strftime$124:	; Parameter 56 £temporary3746 -> £temporary3748 8
x34666:	mov ax, [si]	; 2: 139 4
x34668:	mov [bp + 64], ax	; 3: 137 70 64

strftime$125:	; Call 56 strcpy 0
x34671:	mov word [bp + 56], strftime$126	; 5: 199 70 56 125 135
x34676:	mov [bp + 58], bp	; 3: 137 110 58
x34679:	add bp, 56	; 3: 131 197 56
x34682:	jmp strcpy	; 3: 233 119 215

strftime$126:	; PostCall 56

strftime$127:	; Goto 335
x34685:	jmp strftime$335	; 3: 233 9 4

strftime$128:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$129:	; Parameter 56 add 6
x34688:	mov [bp + 62], bp	; 3: 137 110 62
x34691:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$130:	; Deref £temporary3750 -> tp tp 12
x34695:	mov si, [bp + 12]	; 3: 139 118 12

strftime$131:	; UnsignedMultiply £temporary3752 £temporary3750 -> tp 2
x34698:	mov ax, [si + 12]	; 3: 139 68 12
x34701:	xor dx, dx	; 2: 49 210
x34703:	mul word [@8424$int2$2#]	; 4: 247 38 199 140

strftime$132:	; BinaryAdd £temporary3753 longDayList £temporary3752
x34707:	mov si, [bp + 20]	; 3: 139 118 20
x34710:	add si, ax	; 2: 1 198

strftime$133:	; Deref £temporary3751 -> £temporary3753 £temporary3753 0

strftime$134:	; Parameter 56 £temporary3751 -> £temporary3753 8
x34712:	mov ax, [si]	; 2: 139 4
x34714:	mov [bp + 64], ax	; 3: 137 70 64

strftime$135:	; Call 56 strcpy 0
x34717:	mov word [bp + 56], strftime$136	; 5: 199 70 56 171 135
x34722:	mov [bp + 58], bp	; 3: 137 110 58
x34725:	add bp, 56	; 3: 131 197 56
x34728:	jmp strcpy	; 3: 233 73 215

strftime$136:	; PostCall 56

strftime$137:	; Goto 335
x34731:	jmp strftime$335	; 3: 233 219 3

strftime$138:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$139:	; Parameter 56 add 6
x34734:	mov [bp + 62], bp	; 3: 137 110 62
x34737:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$140:	; Deref £temporary3755 -> tp tp 8
x34741:	mov si, [bp + 12]	; 3: 139 118 12

strftime$141:	; UnsignedMultiply £temporary3757 £temporary3755 -> tp 2
x34744:	mov ax, [si + 8]	; 3: 139 68 8
x34747:	xor dx, dx	; 2: 49 210
x34749:	mul word [@8432$int2$2#]	; 4: 247 38 201 140

strftime$142:	; BinaryAdd £temporary3758 shortMonthList £temporary3757
x34753:	mov si, [bp + 18]	; 3: 139 118 18
x34756:	add si, ax	; 2: 1 198

strftime$143:	; Deref £temporary3756 -> £temporary3758 £temporary3758 0

strftime$144:	; Parameter 56 £temporary3756 -> £temporary3758 8
x34758:	mov ax, [si]	; 2: 139 4
x34760:	mov [bp + 64], ax	; 3: 137 70 64

strftime$145:	; Call 56 strcpy 0
x34763:	mov word [bp + 56], strftime$146	; 5: 199 70 56 217 135
x34768:	mov [bp + 58], bp	; 3: 137 110 58
x34771:	add bp, 56	; 3: 131 197 56
x34774:	jmp strcpy	; 3: 233 27 215

strftime$146:	; PostCall 56

strftime$147:	; Goto 335
x34777:	jmp strftime$335	; 3: 233 173 3

strftime$148:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$149:	; Parameter 56 add 6
x34780:	mov [bp + 62], bp	; 3: 137 110 62
x34783:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$150:	; Deref £temporary3760 -> tp tp 8
x34787:	mov si, [bp + 12]	; 3: 139 118 12

strftime$151:	; UnsignedMultiply £temporary3762 £temporary3760 -> tp 2
x34790:	mov ax, [si + 8]	; 3: 139 68 8
x34793:	xor dx, dx	; 2: 49 210
x34795:	mul word [@8440$int2$2#]	; 4: 247 38 203 140

strftime$152:	; BinaryAdd £temporary3763 longMonthList £temporary3762
x34799:	mov si, [bp + 22]	; 3: 139 118 22
x34802:	add si, ax	; 2: 1 198

strftime$153:	; Deref £temporary3761 -> £temporary3763 £temporary3763 0

strftime$154:	; Parameter 56 £temporary3761 -> £temporary3763 8
x34804:	mov ax, [si]	; 2: 139 4
x34806:	mov [bp + 64], ax	; 3: 137 70 64

strftime$155:	; Call 56 strcpy 0
x34809:	mov word [bp + 56], strftime$156	; 5: 199 70 56 7 136
x34814:	mov [bp + 58], bp	; 3: 137 110 58
x34817:	add bp, 56	; 3: 131 197 56
x34820:	jmp strcpy	; 3: 233 237 214

strftime$156:	; PostCall 56

strftime$157:	; Goto 335
x34823:	jmp strftime$335	; 3: 233 127 3

strftime$158:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 56 add 6
x34826:	mov [bp + 62], bp	; 3: 137 110 62
x34829:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$160:	; Parameter 56 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x34833:	mov word [bp + 64], @8446$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 64 205 140

strftime$161:	; Deref £temporary3765 -> tp tp 10
x34838:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; BinaryAdd £temporary3766 £temporary3765 -> tp 1900
x34841:	mov ax, [si + 10]	; 3: 139 68 10
x34844:	add ax, 1900	; 3: 5 108 7

strftime$163:	; Parameter 56 £temporary3766 10
x34847:	mov [bp + 66], ax	; 3: 137 70 66

strftime$164:	; Deref £temporary3767 -> tp tp 8
x34850:	mov si, [bp + 12]	; 3: 139 118 12

strftime$165:	; BinaryAdd £temporary3768 £temporary3767 -> tp 1
x34853:	mov ax, [si + 8]	; 3: 139 68 8
x34856:	inc ax	; 1: 64

strftime$166:	; Parameter 56 £temporary3768 12
x34857:	mov [bp + 68], ax	; 3: 137 70 68

strftime$167:	; Deref £temporary3769 -> tp tp 6
x34860:	mov si, [bp + 12]	; 3: 139 118 12

strftime$168:	; Parameter 56 £temporary3769 -> tp 14
x34863:	mov ax, [si + 6]	; 3: 139 68 6
x34866:	mov [bp + 70], ax	; 3: 137 70 70

strftime$169:	; Deref £temporary3770 -> tp tp 4
x34869:	mov si, [bp + 12]	; 3: 139 118 12

strftime$170:	; Parameter 56 £temporary3770 -> tp 16
x34872:	mov ax, [si + 4]	; 3: 139 68 4
x34875:	mov [bp + 72], ax	; 3: 137 70 72

strftime$171:	; Deref £temporary3771 -> tp tp 2
x34878:	mov si, [bp + 12]	; 3: 139 118 12

strftime$172:	; Parameter 56 £temporary3771 -> tp 18
x34881:	mov ax, [si + 2]	; 3: 139 68 2
x34884:	mov [bp + 74], ax	; 3: 137 70 74

strftime$173:	; Deref £temporary3772 -> tp tp 0
x34887:	mov si, [bp + 12]	; 3: 139 118 12

strftime$174:	; Parameter 56 £temporary3772 -> tp 20
x34890:	mov ax, [si]	; 2: 139 4
x34892:	mov [bp + 76], ax	; 3: 137 70 76

strftime$175:	; Call 56 sprintf 0
x34895:	mov word [bp + 56], strftime$176	; 5: 199 70 56 98 136
x34900:	mov [bp + 58], bp	; 3: 137 110 58
x34903:	add bp, 56	; 3: 131 197 56
x34906:	mov di, bp	; 2: 137 239
x34908:	add di, 12	; 3: 131 199 12
x34911:	jmp sprintf	; 3: 233 43 252

strftime$176:	; PostCall 56

strftime$177:	; Goto 335
x34914:	jmp strftime$335	; 3: 233 36 3

strftime$178:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$179:	; Parameter 56 add 6
x34917:	mov [bp + 62], bp	; 3: 137 110 62
x34920:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$180:	; Parameter 56 string_25i# 8
x34924:	mov word [bp + 64], @8462$string_25i#	; 5: 199 70 64 235 140

strftime$181:	; Deref £temporary3774 -> tp tp 6
x34929:	mov si, [bp + 12]	; 3: 139 118 12

strftime$182:	; Parameter 56 £temporary3774 -> tp 10
x34932:	mov ax, [si + 6]	; 3: 139 68 6
x34935:	mov [bp + 66], ax	; 3: 137 70 66

strftime$183:	; Call 56 sprintf 0
x34938:	mov word [bp + 56], strftime$184	; 5: 199 70 56 141 136
x34943:	mov [bp + 58], bp	; 3: 137 110 58
x34946:	add bp, 56	; 3: 131 197 56
x34949:	mov di, bp	; 2: 137 239
x34951:	add di, 2	; 3: 131 199 2
x34954:	jmp sprintf	; 3: 233 0 252

strftime$184:	; PostCall 56

strftime$185:	; Goto 335
x34957:	jmp strftime$335	; 3: 233 249 2

strftime$186:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$187:	; Parameter 56 add 6
x34960:	mov [bp + 62], bp	; 3: 137 110 62
x34963:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$188:	; Parameter 56 string_25i# 8
x34967:	mov word [bp + 64], @8467$string_25i#	; 5: 199 70 64 238 140

strftime$189:	; Deref £temporary3776 -> tp tp 4
x34972:	mov si, [bp + 12]	; 3: 139 118 12

strftime$190:	; Parameter 56 £temporary3776 -> tp 10
x34975:	mov ax, [si + 4]	; 3: 139 68 4
x34978:	mov [bp + 66], ax	; 3: 137 70 66

strftime$191:	; Call 56 sprintf 0
x34981:	mov word [bp + 56], strftime$192	; 5: 199 70 56 184 136
x34986:	mov [bp + 58], bp	; 3: 137 110 58
x34989:	add bp, 56	; 3: 131 197 56
x34992:	mov di, bp	; 2: 137 239
x34994:	add di, 2	; 3: 131 199 2
x34997:	jmp sprintf	; 3: 233 213 251

strftime$192:	; PostCall 56

strftime$193:	; Goto 335
x35000:	jmp strftime$335	; 3: 233 206 2

strftime$194:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$195:	; Parameter 56 add 6
x35003:	mov [bp + 62], bp	; 3: 137 110 62
x35006:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$196:	; Parameter 56 string_25i# 8
x35010:	mov word [bp + 64], @8472$string_25i#	; 5: 199 70 64 241 140

strftime$197:	; Deref £temporary3778 -> tp tp 4
x35015:	mov si, [bp + 12]	; 3: 139 118 12

strftime$198:	; SignedModulo £temporary3779 £temporary3778 -> tp 12
x35018:	mov ax, [si + 4]	; 3: 139 68 4
x35021:	xor dx, dx	; 2: 49 210
x35023:	idiv word [@8475$int2$12#]	; 4: 247 62 244 140

strftime$199:	; Parameter 56 £temporary3779 10
x35027:	mov [bp + 66], dx	; 3: 137 86 66

strftime$200:	; Call 56 sprintf 0
x35030:	mov word [bp + 56], strftime$201	; 5: 199 70 56 233 136
x35035:	mov [bp + 58], bp	; 3: 137 110 58
x35038:	add bp, 56	; 3: 131 197 56
x35041:	mov di, bp	; 2: 137 239
x35043:	add di, 2	; 3: 131 199 2
x35046:	jmp sprintf	; 3: 233 164 251

strftime$201:	; PostCall 56

strftime$202:	; Goto 335
x35049:	jmp strftime$335	; 3: 233 157 2

strftime$203:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 56 add 6
x35052:	mov [bp + 62], bp	; 3: 137 110 62
x35055:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$205:	; Parameter 56 string_25i# 8
x35059:	mov word [bp + 64], @8480$string_25i#	; 5: 199 70 64 246 140

strftime$206:	; Deref £temporary3781 -> tp tp 14
x35064:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 56 £temporary3781 -> tp 10
x35067:	mov ax, [si + 14]	; 3: 139 68 14
x35070:	mov [bp + 66], ax	; 3: 137 70 66

strftime$208:	; Call 56 sprintf 0
x35073:	mov word [bp + 56], strftime$209	; 5: 199 70 56 20 137
x35078:	mov [bp + 58], bp	; 3: 137 110 58
x35081:	add bp, 56	; 3: 131 197 56
x35084:	mov di, bp	; 2: 137 239
x35086:	add di, 2	; 3: 131 199 2
x35089:	jmp sprintf	; 3: 233 121 251

strftime$209:	; PostCall 56

strftime$210:	; Goto 335
x35092:	jmp strftime$335	; 3: 233 114 2

strftime$211:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 56 add 6
x35095:	mov [bp + 62], bp	; 3: 137 110 62
x35098:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$213:	; Parameter 56 string_25i# 8
x35102:	mov word [bp + 64], @8485$string_25i#	; 5: 199 70 64 249 140

strftime$214:	; Deref £temporary3783 -> tp tp 8
x35107:	mov si, [bp + 12]	; 3: 139 118 12

strftime$215:	; BinaryAdd £temporary3784 £temporary3783 -> tp 1
x35110:	mov ax, [si + 8]	; 3: 139 68 8
x35113:	inc ax	; 1: 64

strftime$216:	; Parameter 56 £temporary3784 10
x35114:	mov [bp + 66], ax	; 3: 137 70 66

strftime$217:	; Call 56 sprintf 0
x35117:	mov word [bp + 56], strftime$218	; 5: 199 70 56 64 137
x35122:	mov [bp + 58], bp	; 3: 137 110 58
x35125:	add bp, 56	; 3: 131 197 56
x35128:	mov di, bp	; 2: 137 239
x35130:	add di, 2	; 3: 131 199 2
x35133:	jmp sprintf	; 3: 233 77 251

strftime$218:	; PostCall 56

strftime$219:	; Goto 335
x35136:	jmp strftime$335	; 3: 233 70 2

strftime$220:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$221:	; Parameter 56 add 6
x35139:	mov [bp + 62], bp	; 3: 137 110 62
x35142:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$222:	; Parameter 56 string_25i# 8
x35146:	mov word [bp + 64], @8493$string_25i#	; 5: 199 70 64 252 140

strftime$223:	; Deref £temporary3786 -> tp tp 2
x35151:	mov si, [bp + 12]	; 3: 139 118 12

strftime$224:	; Parameter 56 £temporary3786 -> tp 10
x35154:	mov ax, [si + 2]	; 3: 139 68 2
x35157:	mov [bp + 66], ax	; 3: 137 70 66

strftime$225:	; Call 56 sprintf 0
x35160:	mov word [bp + 56], strftime$226	; 5: 199 70 56 107 137
x35165:	mov [bp + 58], bp	; 3: 137 110 58
x35168:	add bp, 56	; 3: 131 197 56
x35171:	mov di, bp	; 2: 137 239
x35173:	add di, 2	; 3: 131 199 2
x35176:	jmp sprintf	; 3: 233 34 251

strftime$226:	; PostCall 56

strftime$227:	; Goto 335
x35179:	jmp strftime$335	; 3: 233 27 2

strftime$228:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$229:	; Parameter 56 add 6
x35182:	mov [bp + 62], bp	; 3: 137 110 62
x35185:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$230:	; Parameter 56 string_25s# 8
x35189:	mov word [bp + 64], @8498$string_25s#	; 5: 199 70 64 255 140

strftime$231:	; Deref £temporary3788 -> tp tp 4
x35194:	mov si, [bp + 12]	; 3: 139 118 12

strftime$232:	; SignedGreaterThanEqual 235 £temporary3788 -> tp 12
x35197:	cmp word [si + 4], 12	; 4: 131 124 4 12
x35201:	jge strftime$235	; 2: 125 5

strftime$233:	; Assign £temporary3793 string_AM#
x35203:	mov ax, @8503$string_AM#	; 3: 184 2 141

strftime$234:	; Goto 236
x35206:	jmp strftime$236	; 2: 235 3

strftime$235:	; Assign £temporary3793 string_PM#
x35208:	mov ax, @8504$string_PM#	; 3: 184 5 141

strftime$236:	; Parameter 56 £temporary3793 10
x35211:	mov [bp + 66], ax	; 3: 137 70 66

strftime$237:	; Call 56 sprintf 0
x35214:	mov word [bp + 56], strftime$238	; 5: 199 70 56 161 137
x35219:	mov [bp + 58], bp	; 3: 137 110 58
x35222:	add bp, 56	; 3: 131 197 56
x35225:	mov di, bp	; 2: 137 239
x35227:	add di, 2	; 3: 131 199 2
x35230:	jmp sprintf	; 3: 233 236 250

strftime$238:	; PostCall 56

strftime$239:	; Goto 335
x35233:	jmp strftime$335	; 3: 233 229 1

strftime$240:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$241:	; Parameter 56 add 6
x35236:	mov [bp + 62], bp	; 3: 137 110 62
x35239:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$242:	; Parameter 56 string_25i# 8
x35243:	mov word [bp + 64], @8514$string_25i#	; 5: 199 70 64 8 141

strftime$243:	; Deref £temporary3795 -> tp tp 0
x35248:	mov si, [bp + 12]	; 3: 139 118 12

strftime$244:	; Parameter 56 £temporary3795 -> tp 10
x35251:	mov ax, [si]	; 2: 139 4
x35253:	mov [bp + 66], ax	; 3: 137 70 66

strftime$245:	; Call 56 sprintf 0
x35256:	mov word [bp + 56], strftime$246	; 5: 199 70 56 203 137
x35261:	mov [bp + 58], bp	; 3: 137 110 58
x35264:	add bp, 56	; 3: 131 197 56
x35267:	mov di, bp	; 2: 137 239
x35269:	add di, 2	; 3: 131 199 2
x35272:	jmp sprintf	; 3: 233 194 250

strftime$246:	; PostCall 56

strftime$247:	; Goto 335
x35275:	jmp strftime$335	; 3: 233 187 1

strftime$248:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$249:	; Parameter 56 add 6
x35278:	mov [bp + 62], bp	; 3: 137 110 62
x35281:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$250:	; Parameter 56 string_25i# 8
x35285:	mov word [bp + 64], @8519$string_25i#	; 5: 199 70 64 11 141

strftime$251:	; Parameter 56 yearDaySunday 10
x35290:	mov ax, [bp + 30]	; 3: 139 70 30
x35293:	mov [bp + 66], ax	; 3: 137 70 66

strftime$252:	; Call 56 sprintf 0
x35296:	mov word [bp + 56], strftime$253	; 5: 199 70 56 243 137
x35301:	mov [bp + 58], bp	; 3: 137 110 58
x35304:	add bp, 56	; 3: 131 197 56
x35307:	mov di, bp	; 2: 137 239
x35309:	add di, 2	; 3: 131 199 2
x35312:	jmp sprintf	; 3: 233 154 250

strftime$253:	; PostCall 56

strftime$254:	; Goto 335
x35315:	jmp strftime$335	; 3: 233 147 1

strftime$255:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$256:	; Parameter 56 add 6
x35318:	mov [bp + 62], bp	; 3: 137 110 62
x35321:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$257:	; Parameter 56 string_25i# 8
x35325:	mov word [bp + 64], @8523$string_25i#	; 5: 199 70 64 14 141

strftime$258:	; Deref £temporary3798 -> tp tp 12
x35330:	mov si, [bp + 12]	; 3: 139 118 12

strftime$259:	; Parameter 56 £temporary3798 -> tp 10
x35333:	mov ax, [si + 12]	; 3: 139 68 12
x35336:	mov [bp + 66], ax	; 3: 137 70 66

strftime$260:	; Call 56 sprintf 0
x35339:	mov word [bp + 56], strftime$261	; 5: 199 70 56 30 138
x35344:	mov [bp + 58], bp	; 3: 137 110 58
x35347:	add bp, 56	; 3: 131 197 56
x35350:	mov di, bp	; 2: 137 239
x35352:	add di, 2	; 3: 131 199 2
x35355:	jmp sprintf	; 3: 233 111 250

strftime$261:	; PostCall 56

strftime$262:	; Goto 335
x35358:	jmp strftime$335	; 3: 233 104 1

strftime$263:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$264:	; Parameter 56 add 6
x35361:	mov [bp + 62], bp	; 3: 137 110 62
x35364:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$265:	; Parameter 56 string_25i# 8
x35368:	mov word [bp + 64], @8528$string_25i#	; 5: 199 70 64 17 141

strftime$266:	; Parameter 56 yearDayMonday 10
x35373:	mov ax, [bp + 32]	; 3: 139 70 32
x35376:	mov [bp + 66], ax	; 3: 137 70 66

strftime$267:	; Call 56 sprintf 0
x35379:	mov word [bp + 56], strftime$268	; 5: 199 70 56 70 138
x35384:	mov [bp + 58], bp	; 3: 137 110 58
x35387:	add bp, 56	; 3: 131 197 56
x35390:	mov di, bp	; 2: 137 239
x35392:	add di, 2	; 3: 131 199 2
x35395:	jmp sprintf	; 3: 233 71 250

strftime$268:	; PostCall 56

strftime$269:	; Goto 335
x35398:	jmp strftime$335	; 3: 233 64 1

strftime$270:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$271:	; Parameter 56 add 6
x35401:	mov [bp + 62], bp	; 3: 137 110 62
x35404:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$272:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x35408:	mov word [bp + 64], @8532$string_2502i3A2502i3A2502i#	; 5: 199 70 64 20 141

strftime$273:	; Deref £temporary3801 -> tp tp 4
x35413:	mov si, [bp + 12]	; 3: 139 118 12

strftime$274:	; Parameter 56 £temporary3801 -> tp 10
x35416:	mov ax, [si + 4]	; 3: 139 68 4
x35419:	mov [bp + 66], ax	; 3: 137 70 66

strftime$275:	; Deref £temporary3802 -> tp tp 2
x35422:	mov si, [bp + 12]	; 3: 139 118 12

strftime$276:	; Parameter 56 £temporary3802 -> tp 12
x35425:	mov ax, [si + 2]	; 3: 139 68 2
x35428:	mov [bp + 68], ax	; 3: 137 70 68

strftime$277:	; Deref £temporary3803 -> tp tp 0
x35431:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Parameter 56 £temporary3803 -> tp 14
x35434:	mov ax, [si]	; 2: 139 4
x35436:	mov [bp + 70], ax	; 3: 137 70 70

strftime$279:	; Call 56 sprintf 0
x35439:	mov word [bp + 56], strftime$280	; 5: 199 70 56 130 138
x35444:	mov [bp + 58], bp	; 3: 137 110 58
x35447:	add bp, 56	; 3: 131 197 56
x35450:	mov di, bp	; 2: 137 239
x35452:	add di, 6	; 3: 131 199 6
x35455:	jmp sprintf	; 3: 233 11 250

strftime$280:	; PostCall 56

strftime$281:	; Goto 335
x35458:	jmp strftime$335	; 3: 233 4 1

strftime$282:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$283:	; Parameter 56 add 6
x35461:	mov [bp + 62], bp	; 3: 137 110 62
x35464:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$284:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x35468:	mov word [bp + 64], @8539$string_2502i3A2502i3A2502i#	; 5: 199 70 64 35 141

strftime$285:	; Deref £temporary3805 -> tp tp 4
x35473:	mov si, [bp + 12]	; 3: 139 118 12

strftime$286:	; Parameter 56 £temporary3805 -> tp 10
x35476:	mov ax, [si + 4]	; 3: 139 68 4
x35479:	mov [bp + 66], ax	; 3: 137 70 66

strftime$287:	; Deref £temporary3806 -> tp tp 2
x35482:	mov si, [bp + 12]	; 3: 139 118 12

strftime$288:	; Parameter 56 £temporary3806 -> tp 12
x35485:	mov ax, [si + 2]	; 3: 139 68 2
x35488:	mov [bp + 68], ax	; 3: 137 70 68

strftime$289:	; Deref £temporary3807 -> tp tp 0
x35491:	mov si, [bp + 12]	; 3: 139 118 12

strftime$290:	; Parameter 56 £temporary3807 -> tp 14
x35494:	mov ax, [si]	; 2: 139 4
x35496:	mov [bp + 70], ax	; 3: 137 70 70

strftime$291:	; Call 56 sprintf 0
x35499:	mov word [bp + 56], strftime$292	; 5: 199 70 56 190 138
x35504:	mov [bp + 58], bp	; 3: 137 110 58
x35507:	add bp, 56	; 3: 131 197 56
x35510:	mov di, bp	; 2: 137 239
x35512:	add di, 6	; 3: 131 199 6
x35515:	jmp sprintf	; 3: 233 207 249

strftime$292:	; PostCall 56

strftime$293:	; Goto 335
x35518:	jmp strftime$335	; 3: 233 200 0

strftime$294:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$295:	; Parameter 56 add 6
x35521:	mov [bp + 62], bp	; 3: 137 110 62
x35524:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$296:	; Parameter 56 string_25i# 8
x35528:	mov word [bp + 64], @8546$string_25i#	; 5: 199 70 64 50 141

strftime$297:	; Deref £temporary3809 -> tp tp 10
x35533:	mov si, [bp + 12]	; 3: 139 118 12

strftime$298:	; SignedModulo £temporary3810 £temporary3809 -> tp 100
x35536:	mov ax, [si + 10]	; 3: 139 68 10
x35539:	xor dx, dx	; 2: 49 210
x35541:	idiv word [@8549$int2$100#]	; 4: 247 62 53 141

strftime$299:	; Parameter 56 £temporary3810 10
x35545:	mov [bp + 66], dx	; 3: 137 86 66

strftime$300:	; Call 56 sprintf 0
x35548:	mov word [bp + 56], strftime$301	; 5: 199 70 56 239 138
x35553:	mov [bp + 58], bp	; 3: 137 110 58
x35556:	add bp, 56	; 3: 131 197 56
x35559:	mov di, bp	; 2: 137 239
x35561:	add di, 2	; 3: 131 199 2
x35564:	jmp sprintf	; 3: 233 158 249

strftime$301:	; PostCall 56

strftime$302:	; Goto 335
x35567:	jmp strftime$335	; 3: 233 151 0

strftime$303:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 56 add 6
x35570:	mov [bp + 62], bp	; 3: 137 110 62
x35573:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$305:	; Parameter 56 string_25i# 8
x35577:	mov word [bp + 64], @8554$string_25i#	; 5: 199 70 64 55 141

strftime$306:	; Deref £temporary3812 -> tp tp 10
x35582:	mov si, [bp + 12]	; 3: 139 118 12

strftime$307:	; BinaryAdd £temporary3813 £temporary3812 -> tp 1900
x35585:	mov ax, [si + 10]	; 3: 139 68 10
x35588:	add ax, 1900	; 3: 5 108 7

strftime$308:	; Parameter 56 £temporary3813 10
x35591:	mov [bp + 66], ax	; 3: 137 70 66

strftime$309:	; Call 56 sprintf 0
x35594:	mov word [bp + 56], strftime$310	; 5: 199 70 56 29 139
x35599:	mov [bp + 58], bp	; 3: 137 110 58
x35602:	add bp, 56	; 3: 131 197 56
x35605:	mov di, bp	; 2: 137 239
x35607:	add di, 2	; 3: 131 199 2
x35610:	jmp sprintf	; 3: 233 112 249

strftime$310:	; PostCall 56

strftime$311:	; Goto 335
x35613:	jmp strftime$335	; 2: 235 106

strftime$312:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$313:	; Parameter 56 add 6
x35615:	mov [bp + 62], bp	; 3: 137 110 62
x35618:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$314:	; Parameter 56 string_# 8
x35622:	mov word [bp + 64], @8562$string_#	; 5: 199 70 64 58 141

strftime$315:	; Call 56 strcpy 0
x35627:	mov word [bp + 56], strftime$316	; 5: 199 70 56 57 139
x35632:	mov [bp + 58], bp	; 3: 137 110 58
x35635:	add bp, 56	; 3: 131 197 56
x35638:	jmp strcpy	; 3: 233 187 211

strftime$316:	; PostCall 56

strftime$317:	; Goto 335
x35641:	jmp strftime$335	; 2: 235 78

strftime$318:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$319:	; Parameter 56 add 6
x35643:	mov [bp + 62], bp	; 3: 137 110 62
x35646:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$320:	; Parameter 56 string_25# 8
x35650:	mov word [bp + 64], @8566$string_25#	; 5: 199 70 64 59 141

strftime$321:	; Call 56 strcpy 0
x35655:	mov word [bp + 56], strftime$322	; 5: 199 70 56 85 139
x35660:	mov [bp + 58], bp	; 3: 137 110 58
x35663:	add bp, 56	; 3: 131 197 56
x35666:	jmp strcpy	; 3: 233 159 211

strftime$322:	; PostCall 56

strftime$323:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$324:	; Parameter 56 add 6
x35669:	mov [bp + 62], bp	; 3: 137 110 62
x35672:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$325:	; Parameter 56 string_# 8
x35676:	mov word [bp + 64], @8568$string_#	; 5: 199 70 64 61 141

strftime$326:	; Call 56 strcpy 0
x35681:	mov word [bp + 56], strftime$327	; 5: 199 70 56 111 139
x35686:	mov [bp + 58], bp	; 3: 137 110 58
x35689:	add bp, 56	; 3: 131 197 56
x35692:	jmp strcpy	; 3: 233 133 211

strftime$327:	; PostCall 56

strftime$328:	; Goto 335
x35695:	jmp strftime$335	; 2: 235 24

strftime$329:	; Deref £temporary3818 -> add add 0
x35697:	mov si, bp	; 2: 137 238
x35699:	add si, 36	; 3: 131 198 36

strftime$330:	; BinaryAdd £temporary3820 fmt index
x35702:	mov di, [bp + 10]	; 3: 139 126 10
x35705:	add di, [bp + 34]	; 3: 3 126 34

strftime$331:	; Deref £temporary3819 -> £temporary3820 £temporary3820 0

strftime$332:	; Assign £temporary3818 -> add £temporary3819 -> £temporary3820
x35708:	mov al, [di]	; 2: 138 5
x35710:	mov [si], al	; 2: 136 4

strftime$333:	; Deref £temporary3821 -> add add 1
x35712:	mov si, bp	; 2: 137 238
x35714:	add si, 36	; 3: 131 198 36

strftime$334:	; Assign £temporary3821 -> add 0
x35717:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$335:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$336:	; Parameter 56 s 6
x35721:	mov ax, [bp + 6]	; 3: 139 70 6
x35724:	mov [bp + 62], ax	; 3: 137 70 62

strftime$337:	; Call 56 strlen 0
x35727:	mov word [bp + 56], strftime$338	; 5: 199 70 56 157 139
x35732:	mov [bp + 58], bp	; 3: 137 110 58
x35735:	add bp, 56	; 3: 131 197 56
x35738:	jmp strlen	; 3: 233 161 1

strftime$338:	; PostCall 56

strftime$339:	; GetReturnValue £temporary3822

strftime$340:	; Assign x £temporary3822
x35741:	mov [bp + 56], bx	; 3: 137 94 56

strftime$341:	; CallHeader 58 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$342:	; Parameter 58 add 6
x35744:	mov [bp + 64], bp	; 3: 137 110 64
x35747:	add word [bp + 64], 36	; 4: 131 70 64 36

strftime$343:	; Call 58 strlen 0
x35751:	mov word [bp + 58], strftime$344	; 5: 199 70 58 181 139
x35756:	mov [bp + 60], bp	; 3: 137 110 60
x35759:	add bp, 58	; 3: 131 197 58
x35762:	jmp strlen	; 3: 233 137 1

strftime$344:	; PostCall 58

strftime$345:	; GetReturnValue £temporary3823

strftime$346:	; Assign y £temporary3823
x35765:	mov [bp + 58], bx	; 3: 137 94 58

strftime$347:	; BinaryAdd £temporary3824 x y
x35768:	mov ax, [bp + 56]	; 3: 139 70 56
x35771:	add ax, [bp + 58]	; 3: 3 70 58

strftime$348:	; SignedGreaterThanEqual 356 £temporary3824 smax
x35774:	cmp ax, [bp + 8]	; 3: 59 70 8
x35777:	jge strftime$356	; 2: 125 33

strftime$349:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$350:	; Parameter 60 s 6
x35779:	mov ax, [bp + 6]	; 3: 139 70 6
x35782:	mov [bp + 66], ax	; 3: 137 70 66

strftime$351:	; Parameter 60 add 8
x35785:	mov [bp + 68], bp	; 3: 137 110 68
x35788:	add word [bp + 68], 36	; 4: 131 70 68 36

strftime$352:	; Call 60 strcat 0
x35792:	mov word [bp + 60], strftime$353	; 5: 199 70 60 222 139
x35797:	mov [bp + 62], bp	; 3: 137 110 62
x35800:	add bp, 60	; 3: 131 197 60
x35803:	jmp strcat	; 3: 233 131 1

strftime$353:	; PostCall 60

strftime$354:	; Increment index
x35806:	inc word [bp + 34]	; 3: 255 70 34

strftime$355:	; Goto 84
x35809:	jmp strftime$84	; 3: 233 192 250

strftime$356:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$357:	; Parameter 34 s 6
x35812:	mov ax, [bp + 6]	; 3: 139 70 6
x35815:	mov [bp + 40], ax	; 3: 137 70 40

strftime$358:	; Call 34 strlen 0
x35818:	mov word [bp + 34], strftime$359	; 5: 199 70 34 248 139
x35823:	mov [bp + 36], bp	; 3: 137 110 36
x35826:	add bp, 34	; 3: 131 197 34
x35829:	jmp strlen	; 3: 233 70 1

strftime$359:	; PostCall 34

strftime$360:	; GetReturnValue £temporary3827

strftime$361:	; SetReturnValue £temporary3827

strftime$362:	; Return £temporary3827
x35832:	mov ax, [bp]	; 3: 139 70 0
x35835:	mov di, [bp + 4]	; 3: 139 126 4
x35838:	mov bp, [bp + 2]	; 3: 139 110 2
x35841:	jmp ax	; 2: 255 224

strftime$363:	; FunctionEnd strftime

@8303$int2$4#:
x35843:	dw 4	; 2: 4 0

@8311$int2$365#:
x35845:	dw 365	; 2: 109 1

@8320$string_#:
x35847:	db 0	; 1: 0

@8084$g_defaultLongDayList:
x35848:	dw @8077$string_Sunday# ; 2: 22 140
x35850:	dw @8078$string_Monday# ; 2: 29 140
x35852:	dw @8079$string_Tuesday# ; 2: 36 140
x35854:	dw @8080$string_Wednesday# ; 2: 44 140
x35856:	dw @8081$string_Thursday# ; 2: 54 140
x35858:	dw @8082$string_Friday# ; 2: 63 140
x35860:	dw @8083$string_Saturday# ; 2: 70 140

@8077$string_Sunday#:
x35862:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@8078$string_Monday#:
x35869:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@8079$string_Tuesday#:
x35876:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@8080$string_Wednesday#:
x35884:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@8081$string_Thursday#:
x35894:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@8082$string_Friday#:
x35903:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@8083$string_Saturday#:
x35910:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@8110$g_defaultLongMonthList:
x35919:	dw @8098$string_January# ; 2: 103 140
x35921:	dw @8099$string_February# ; 2: 111 140
x35923:	dw @8100$string_March# ; 2: 120 140
x35925:	dw @8101$string_April# ; 2: 126 140
x35927:	dw @8102$string_May# ; 2: 132 140
x35929:	dw @8103$string_June# ; 2: 136 140
x35931:	dw @8104$string_July# ; 2: 141 140
x35933:	dw @8105$string_August# ; 2: 146 140
x35935:	dw @8106$string_September# ; 2: 153 140
x35937:	dw @8107$string_October# ; 2: 163 140
x35939:	dw @8108$string_November# ; 2: 171 140
x35941:	dw @8109$string_December# ; 2: 180 140

@8098$string_January#:
x35943:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@8099$string_February#:
x35951:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@8100$string_March#:
x35960:	db "March", 0	; 6: 77 97 114 99 104 0

@8101$string_April#:
x35966:	db "April", 0	; 6: 65 112 114 105 108 0

@8102$string_May#:
x35972:	db "May", 0	; 4: 77 97 121 0

@8103$string_June#:
x35976:	db "June", 0	; 5: 74 117 110 101 0

@8104$string_July#:
x35981:	db "July", 0	; 5: 74 117 108 121 0

@8105$string_August#:
x35986:	db "August", 0	; 7: 65 117 103 117 115 116 0

@8106$string_September#:
x35993:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@8107$string_October#:
x36003:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@8108$string_November#:
x36011:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@8109$string_December#:
x36020:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@8373$int4$7#:
x36029:	dd 7	; 4: 7 0 0 0

@8387$int4$7#:
x36033:	dd 7	; 4: 7 0 0 0

@8416$int2$2#:
x36037:	dw 2	; 2: 2 0

@8424$int2$2#:
x36039:	dw 2	; 2: 2 0

@8432$int2$2#:
x36041:	dw 2	; 2: 2 0

@8440$int2$2#:
x36043:	dw 2	; 2: 2 0

@8446$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x36045:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8462$string_25i#:
x36075:	db "%i", 0	; 3: 37 105 0

@8467$string_25i#:
x36078:	db "%i", 0	; 3: 37 105 0

@8472$string_25i#:
x36081:	db "%i", 0	; 3: 37 105 0

@8475$int2$12#:
x36084:	dw 12	; 2: 12 0

@8480$string_25i#:
x36086:	db "%i", 0	; 3: 37 105 0

@8485$string_25i#:
x36089:	db "%i", 0	; 3: 37 105 0

@8493$string_25i#:
x36092:	db "%i", 0	; 3: 37 105 0

@8498$string_25s#:
x36095:	db "%s", 0	; 3: 37 115 0

@8503$string_AM#:
x36098:	db "AM", 0	; 3: 65 77 0

@8504$string_PM#:
x36101:	db "PM", 0	; 3: 80 77 0

@8514$string_25i#:
x36104:	db "%i", 0	; 3: 37 105 0

@8519$string_25i#:
x36107:	db "%i", 0	; 3: 37 105 0

@8523$string_25i#:
x36110:	db "%i", 0	; 3: 37 105 0

@8528$string_25i#:
x36113:	db "%i", 0	; 3: 37 105 0

@8532$string_2502i3A2502i3A2502i#:
x36116:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8539$string_2502i3A2502i3A2502i#:
x36131:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8546$string_25i#:
x36146:	db "%i", 0	; 3: 37 105 0

@8549$int2$100#:
x36149:	dw 100	; 2: 100 0

@8554$string_25i#:
x36151:	db "%i", 0	; 3: 37 105 0

@8562$string_#:
x36154:	db 0	; 1: 0

@8566$string_25#:
x36155:	db "%", 0	; 2: 37 0

@8568$string_#:
x36157:	db 0	; 1: 0

strlen:	; Assign index 0
x36158:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary4083 string index
x36163:	mov si, [bp + 6]	; 3: 139 118 6
x36166:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary4082 -> £temporary4083 £temporary4083 0

strlen$3:	; Equal 6 £temporary4082 -> £temporary4083 0
x36169:	cmp byte [si], 0	; 3: 128 60 0
x36172:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x36174:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x36177:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x36179:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x36182:	mov ax, [bp]	; 3: 139 70 0
x36185:	mov di, [bp + 4]	; 3: 139 126 4
x36188:	mov bp, [bp + 2]	; 3: 139 110 2
x36191:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x36193:	mov ax, [bp + 6]	; 3: 139 70 6
x36196:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x36199:	mov word [bp + 12], strcat$3	; 5: 199 70 12 117 141
x36204:	mov [bp + 14], bp	; 3: 137 110 14
x36207:	add bp, 12	; 3: 131 197 12
x36210:	nop	; 1: 144
x36211:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3930

strcat$5:	; Assign targetLength £temporary3930
x36213:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x36216:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3932 source index
x36221:	mov si, [bp + 8]	; 3: 139 118 8
x36224:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3931 -> £temporary3932 £temporary3932 0

strcat$9:	; Equal 18 £temporary3931 -> £temporary3932 0
x36227:	cmp byte [si], 0	; 3: 128 60 0
x36230:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3935 targetLength index
x36232:	mov ax, [bp + 12]	; 3: 139 70 12
x36235:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3937 target £temporary3935
x36238:	mov si, [bp + 6]	; 3: 139 118 6
x36241:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3936 -> £temporary3937 £temporary3937 0

strcat$13:	; BinaryAdd £temporary3939 source index
x36243:	mov di, [bp + 8]	; 3: 139 126 8
x36246:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3938 -> £temporary3939 £temporary3939 0

strcat$15:	; Assign £temporary3936 -> £temporary3937 £temporary3938 -> £temporary3939
x36249:	mov al, [di]	; 2: 138 5
x36251:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x36253:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x36256:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3940 targetLength index
x36258:	mov ax, [bp + 12]	; 3: 139 70 12
x36261:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3942 target £temporary3940
x36264:	mov si, [bp + 6]	; 3: 139 118 6
x36267:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3941 -> £temporary3942 £temporary3942 0

strcat$21:	; Assign £temporary3941 -> £temporary3942 0
x36269:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x36272:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x36275:	mov ax, [bp]	; 3: 139 70 0
x36278:	mov di, [bp + 4]	; 3: 139 126 4
x36281:	mov bp, [bp + 2]	; 3: 139 110 2
x36284:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x36286:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x36291:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x36295:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x36297:	mov ax, [stderr]	; 3: 161 24 78
x36300:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36303:	mov word [bp + 16], @9848$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 15 142

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x36308:	mov word [bp + 18], @9849$string_n203D3D201#	; 5: 199 70 18 61 142

assert_test$6:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x36313:	mov word [bp + 20], @9850$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 68 142

assert_test$7:	; Parameter 8 8 14
x36318:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x36323:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 246 141
x36328:	mov [bp + 10], bp	; 3: 137 110 10
x36331:	add bp, 8	; 3: 131 197 8
x36334:	mov di, bp	; 2: 137 239
x36336:	add di, 6	; 3: 131 199 6
x36339:	jmp fprintf	; 3: 233 58 209

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x36342:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 4 142
x36347:	mov [bp + 10], bp	; 3: 137 110 10
x36350:	add bp, 8	; 3: 131 197 8
x36353:	jmp abort	; 3: 233 103 209

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x36356:	mov ax, [bp]	; 3: 139 70 0
x36359:	mov di, [bp + 4]	; 3: 139 126 4
x36362:	mov bp, [bp + 2]	; 3: 139 110 2
x36365:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

@9848$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x36367:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@9849$string_n203D3D201#:
x36413:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

@9850$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x36420:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 67: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x36487:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x36492:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 154 142
x36497:	mov [bp + 8], bp	; 3: 137 110 8
x36500:	add bp, 6	; 3: 131 197 6
x36503:	jmp malloc	; 3: 233 76 229

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary6131

malloc_test$5:	; Assign b £temporary6131
x36506:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x36509:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x36514:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 176 142
x36519:	mov [bp + 10], bp	; 3: 137 110 10
x36522:	add bp, 8	; 3: 131 197 8
x36525:	jmp malloc	; 3: 233 54 229

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary6132

malloc_test$11:	; Assign c £temporary6132
x36528:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x36531:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x36536:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 198 142
x36541:	mov [bp + 12], bp	; 3: 137 110 12
x36544:	add bp, 10	; 3: 131 197 10
x36547:	jmp malloc	; 3: 233 32 229

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary6133

malloc_test$17:	; Assign d £temporary6133
x36550:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x36553:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 215 142
x36558:	mov [bp + 14], bp	; 3: 137 110 14
x36561:	add bp, 12	; 3: 131 197 12
x36564:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x36567:	mov ax, [bp + 8]	; 3: 139 70 8
x36570:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x36573:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x36578:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 240 142
x36583:	mov [bp + 14], bp	; 3: 137 110 14
x36586:	add bp, 12	; 3: 131 197 12
x36589:	jmp realloc	; 3: 233 16 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x36592:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 254 142
x36597:	mov [bp + 14], bp	; 3: 137 110 14
x36600:	add bp, 12	; 3: 131 197 12
x36603:	nop	; 1: 144
x36604:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x36606:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x36611:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 17 143
x36616:	mov [bp + 14], bp	; 3: 137 110 14
x36619:	add bp, 12	; 3: 131 197 12
x36622:	jmp malloc	; 3: 233 213 228

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x36625:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 31 143
x36630:	mov [bp + 14], bp	; 3: 137 110 14
x36633:	add bp, 12	; 3: 131 197 12
x36636:	nop	; 1: 144
x36637:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x36639:	mov ax, [bp + 6]	; 3: 139 70 6
x36642:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x36645:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 51 143
x36650:	mov [bp + 14], bp	; 3: 137 110 14
x36653:	add bp, 12	; 3: 131 197 12
x36656:	jmp free	; 3: 233 192 230

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x36659:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 65 143
x36664:	mov [bp + 14], bp	; 3: 137 110 14
x36667:	add bp, 12	; 3: 131 197 12
x36670:	nop	; 1: 144
x36671:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x36673:	mov ax, [bp + 10]	; 3: 139 70 10
x36676:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x36679:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 85 143
x36684:	mov [bp + 14], bp	; 3: 137 110 14
x36687:	add bp, 12	; 3: 131 197 12
x36690:	jmp free	; 3: 233 158 230

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x36693:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 99 143
x36698:	mov [bp + 14], bp	; 3: 137 110 14
x36701:	add bp, 12	; 3: 131 197 12
x36704:	nop	; 1: 144
x36705:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x36707:	mov ax, [bp]	; 3: 139 70 0
x36710:	mov di, [bp + 4]	; 3: 139 126 4
x36713:	mov bp, [bp + 2]	; 3: 139 110 2
x36716:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x36718:	mov ax, [g_firstBlockPtr]	; 3: 161 116 117
x36721:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x36724:	mov word [bp + 14], @735$string_Heap3A0A#	; 5: 199 70 14 224 143

print_heap$3:	; Call 8 printf 0
x36729:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 137 143
x36734:	mov [bp + 10], bp	; 3: 137 110 10
x36737:	add bp, 8	; 3: 131 197 8
x36740:	mov di, bp	; 2: 137 239
x36742:	jmp printf	; 3: 233 123 125

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x36745:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36749:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x36751:	mov word [bp + 14], @741$string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 231 143

print_heap$8:	; IntegralToIntegral £temporary338 currBlockPtr
x36756:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary338 8
x36759:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary339 -> currBlockPtr currBlockPtr 0
x36762:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary339 -> currBlockPtr 10
x36765:	mov ax, [si]	; 2: 139 4
x36767:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x36770:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 181 143
x36775:	mov [bp + 10], bp	; 3: 137 110 10
x36778:	add bp, 8	; 3: 131 197 8
x36781:	mov di, bp	; 2: 137 239
x36783:	add di, 4	; 3: 131 199 4
x36786:	jmp printf	; 3: 233 79 125

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary341 -> currBlockPtr currBlockPtr 2
x36789:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary341 -> currBlockPtr
x36792:	mov ax, [si + 2]	; 3: 139 68 2
x36795:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x36798:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x36800:	mov word [bp + 14], @746$string_0A#	; 5: 199 70 14 254 143

print_heap$19:	; Call 8 printf 0
x36805:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 213 143
x36810:	mov [bp + 10], bp	; 3: 137 110 10
x36813:	add bp, 8	; 3: 131 197 8
x36816:	mov di, bp	; 2: 137 239
x36818:	jmp printf	; 3: 233 47 125

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x36821:	mov ax, [bp]	; 3: 139 70 0
x36824:	mov di, [bp + 4]	; 3: 139 126 4
x36827:	mov bp, [bp + 2]	; 3: 139 110 2
x36830:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

@735$string_Heap3A0A#:
x36832:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

@741$string_2020Address2025u2C20Size2025u0A#:
x36839:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

@746$string_0A#:
x36862:	db 10, 0	; 2: 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x36864:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36868:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x36870:	mov ax, [stderr]	; 3: 161 24 78
x36873:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36876:	mov word [bp + 18], @640$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 199 145

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x36881:	mov word [bp + 20], @641$string_newMemorySize203E3D200#	; 5: 199 70 20 245 145

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36886:	mov word [bp + 22], @642$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 8 146

realloc$6:	; Parameter 10 259 14
x36891:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x36896:	mov word [bp + 10], realloc$8	; 5: 199 70 10 51 144
x36901:	mov [bp + 12], bp	; 3: 137 110 12
x36904:	add bp, 10	; 3: 131 197 10
x36907:	mov di, bp	; 2: 137 239
x36909:	add di, 6	; 3: 131 199 6
x36912:	jmp fprintf	; 3: 233 253 206

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x36915:	mov word [bp + 10], realloc$11	; 5: 199 70 10 65 144
x36920:	mov [bp + 12], bp	; 3: 137 110 12
x36923:	add bp, 10	; 3: 131 197 10
x36926:	jmp abort	; 3: 233 42 207

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x36929:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36933:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x36935:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36939:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x36941:	mov ax, [stderr]	; 3: 161 24 78
x36944:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36947:	mov word [bp + 18], @655$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 71 146

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x36952:	mov word [bp + 20], @656$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 117 146

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36957:	mov word [bp + 22], @657$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 167 146

realloc$19:	; Parameter 10 260 14
x36962:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x36967:	mov word [bp + 10], realloc$21	; 5: 199 70 10 122 144
x36972:	mov [bp + 12], bp	; 3: 137 110 12
x36975:	add bp, 10	; 3: 131 197 10
x36978:	mov di, bp	; 2: 137 239
x36980:	add di, 6	; 3: 131 199 6
x36983:	jmp fprintf	; 3: 233 182 206

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x36986:	mov word [bp + 10], realloc$24	; 5: 199 70 10 136 144
x36991:	mov [bp + 12], bp	; 3: 137 110 12
x36994:	add bp, 10	; 3: 131 197 10
x36997:	jmp abort	; 3: 233 227 206

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x37000:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x37004:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x37006:	mov ax, [bp + 8]	; 3: 139 70 8
x37009:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x37012:	mov word [bp + 10], realloc$29	; 5: 199 70 10 162 144
x37017:	mov [bp + 12], bp	; 3: 137 110 12
x37020:	add bp, 10	; 3: 131 197 10
x37023:	jmp malloc	; 3: 233 68 227

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary296

realloc$31:	; SetReturnValue £temporary296

realloc$32:	; Return £temporary296
x37026:	mov ax, [bp]	; 3: 139 70 0
x37029:	mov di, [bp + 4]	; 3: 139 126 4
x37032:	mov bp, [bp + 2]	; 3: 139 110 2
x37035:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x37037:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x37041:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x37043:	mov ax, [bp + 6]	; 3: 139 70 6
x37046:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x37049:	mov word [bp + 10], realloc$37	; 5: 199 70 10 199 144
x37054:	mov [bp + 12], bp	; 3: 137 110 12
x37057:	add bp, 10	; 3: 131 197 10
x37060:	jmp free	; 3: 233 44 229

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x37063:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x37066:	mov ax, [bp]	; 3: 139 70 0
x37069:	mov di, [bp + 4]	; 3: 139 126 4
x37072:	mov bp, [bp + 2]	; 3: 139 110 2
x37075:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary299 newMemorySize
x37077:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary299 4
x37080:	add ax, 4	; 3: 131 192 4
x37083:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary301 oldMemoryPtr
x37086:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary302 £temporary301 4
x37089:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary303 £temporary302

realloc$45:	; Assign oldBlockPtr £temporary303
x37092:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary304 -> oldBlockPtr oldBlockPtr 0
x37095:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary304 -> oldBlockPtr
x37098:	mov ax, [si]	; 2: 139 4
x37100:	cmp [bp + 10], ax	; 3: 57 70 10
x37103:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary306 -> oldBlockPtr oldBlockPtr 0
x37105:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary306 -> oldBlockPtr newBlockSize
x37108:	mov ax, [bp + 10]	; 3: 139 70 10
x37111:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x37113:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x37116:	mov ax, [bp]	; 3: 139 70 0
x37119:	mov di, [bp + 4]	; 3: 139 126 4
x37122:	mov bp, [bp + 2]	; 3: 139 110 2
x37125:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x37127:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x37132:	mov ax, [g_firstBlockPtr]	; 3: 161 116 117
x37135:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x37138:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x37142:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x37144:	mov ax, [bp + 12]	; 3: 139 70 12
x37147:	cmp [bp + 16], ax	; 3: 57 70 16
x37150:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary309 currBlockPtr
x37152:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary309
x37155:	mov bx, [bp + 14]	; 3: 139 94 14
x37158:	sub bx, ax	; 2: 41 195
x37160:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x37163:	mov ax, [bp + 10]	; 3: 139 70 10
x37166:	cmp [bp + 18], ax	; 3: 57 70 18
x37169:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary312 -> oldBlockPtr oldBlockPtr 0
x37171:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary312 -> oldBlockPtr newBlockSize
x37174:	mov ax, [bp + 10]	; 3: 139 70 10
x37177:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x37179:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x37182:	mov ax, [bp]	; 3: 139 70 0
x37185:	mov di, [bp + 4]	; 3: 139 126 4
x37188:	mov bp, [bp + 2]	; 3: 139 110 2
x37191:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary313 currBlockPtr
x37193:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary313
x37196:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary314 -> currBlockPtr currBlockPtr 2
x37199:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary314 -> currBlockPtr
x37202:	mov ax, [si + 2]	; 3: 139 68 2
x37205:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x37208:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x37210:	mov ax, [bp + 8]	; 3: 139 70 8
x37213:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x37216:	mov word [bp + 14], realloc$71	; 5: 199 70 14 110 145
x37221:	mov [bp + 16], bp	; 3: 137 110 16
x37224:	add bp, 14	; 3: 131 197 14
x37227:	jmp malloc	; 3: 233 120 226

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary315

realloc$73:	; Assign newMemoryPtr £temporary315
x37230:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x37233:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x37237:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x37239:	mov ax, [bp + 14]	; 3: 139 70 14
x37242:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x37245:	mov ax, [bp + 6]	; 3: 139 70 6
x37248:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x37251:	mov ax, [bp + 8]	; 3: 139 70 8
x37254:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x37257:	mov word [bp + 16], realloc$80	; 5: 199 70 16 151 145
x37262:	mov [bp + 18], bp	; 3: 137 110 18
x37265:	add bp, 16	; 3: 131 197 16
x37268:	jmp memcpy	; 3: 233 79 1

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x37271:	mov ax, [bp + 6]	; 3: 139 70 6
x37274:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x37277:	mov word [bp + 16], realloc$84	; 5: 199 70 16 171 145
x37282:	mov [bp + 18], bp	; 3: 137 110 18
x37285:	add bp, 16	; 3: 131 197 16
x37288:	jmp free	; 3: 233 72 228

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x37291:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x37294:	mov ax, [bp]	; 3: 139 70 0
x37297:	mov di, [bp + 4]	; 3: 139 126 4
x37300:	mov bp, [bp + 2]	; 3: 139 110 2
x37303:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x37305:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x37308:	mov ax, [bp]	; 3: 139 70 0
x37311:	mov di, [bp + 4]	; 3: 139 126 4
x37314:	mov bp, [bp + 2]	; 3: 139 110 2
x37317:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

@640$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37319:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@641$string_newMemorySize203E3D200#:
x37365:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@642$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37384:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

@655$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37447:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@656$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x37493:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

@657$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37543:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

memcpy:	; IntegralToIntegral £temporary4147 target
x37606:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary4147
x37609:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary4148 source
x37612:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary4148
x37615:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x37618:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x37623:	mov ax, [bp + 10]	; 3: 139 70 10
x37626:	cmp [bp + 16], ax	; 3: 57 70 16
x37629:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary4152 charTarget index
x37631:	mov si, [bp + 12]	; 3: 139 118 12
x37634:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary4151 -> £temporary4152 £temporary4152 0

memcpy$8:	; BinaryAdd £temporary4154 charSource index
x37637:	mov di, [bp + 14]	; 3: 139 126 14
x37640:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary4153 -> £temporary4154 £temporary4154 0

memcpy$10:	; Assign £temporary4151 -> £temporary4152 £temporary4153 -> £temporary4154
x37643:	mov al, [di]	; 2: 138 5
x37645:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x37647:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x37650:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary4155 target
x37652:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary4155

memcpy$15:	; Return £temporary4155
x37655:	mov ax, [bp]	; 3: 139 70 0
x37658:	mov di, [bp + 4]	; 3: 139 126 4
x37661:	mov bp, [bp + 2]	; 3: 139 110 2
x37664:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37666:	mov word [bp + 12], @9308$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 13 149

print_test$2:	; Parameter 6 123 8
x37671:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x37676:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x37681:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x37686:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x37691:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x37696:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x37701:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x37706:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x37711:	mov word [bp + 6], print_test$11	; 5: 199 70 6 98 147
x37716:	mov [bp + 8], bp	; 3: 137 110 8
x37719:	add bp, 6	; 3: 131 197 6
x37722:	mov di, bp	; 2: 137 239
x37724:	add di, 16	; 3: 131 199 16
x37727:	jmp printf	; 3: 233 162 121

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37730:	mov word [bp + 12], @9318$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 73 149

print_test$14:	; Parameter 6 -123 8
x37735:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x37740:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x37745:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x37750:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x37755:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x37760:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x37765:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x37770:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x37775:	mov word [bp + 6], print_test$23	; 5: 199 70 6 162 147
x37780:	mov [bp + 8], bp	; 3: 137 110 8
x37783:	add bp, 6	; 3: 131 197 6
x37786:	mov di, bp	; 2: 137 239
x37788:	add di, 16	; 3: 131 199 16
x37791:	jmp printf	; 3: 233 98 121

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37794:	mov word [bp + 12], @9328$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 133 149

print_test$26:	; Parameter 6 123 8
x37799:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x37804:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x37809:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x37814:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x37819:	mov word [bp + 6], print_test$31	; 5: 199 70 6 206 147
x37824:	mov [bp + 8], bp	; 3: 137 110 8
x37827:	add bp, 6	; 3: 131 197 6
x37830:	mov di, bp	; 2: 137 239
x37832:	add di, 8	; 3: 131 199 8
x37835:	jmp printf	; 3: 233 54 121

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37838:	mov word [bp + 12], @9334$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 165 149

print_test$34:	; Parameter 6 -123 8
x37843:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x37848:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x37853:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x37858:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x37863:	mov word [bp + 6], print_test$39	; 5: 199 70 6 250 147
x37868:	mov [bp + 8], bp	; 3: 137 110 8
x37871:	add bp, 6	; 3: 131 197 6
x37874:	mov di, bp	; 2: 137 239
x37876:	add di, 8	; 3: 131 199 8
x37879:	jmp printf	; 3: 233 10 121

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37882:	mov word [bp + 12], @9340$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 197 149

print_test$42:	; PushFloat 123.456
x37887:	fld qword [@9341$float8$123.456#]	; 4: 221 6 25 150

print_test$43:	; Parameter 6 123.456 8
x37891:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x37894:	fld qword [@9342$float8$123.456#]	; 4: 221 6 33 150

print_test$45:	; Parameter 6 123.456 16
x37898:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x37901:	fld qword [@9343$float8$123.456#]	; 4: 221 6 41 150

print_test$47:	; Parameter 6 123.456 24
x37905:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x37908:	fld qword [@9344$float8$123.456#]	; 4: 221 6 49 150

print_test$49:	; Parameter 6 123.456 32
x37912:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x37915:	fld qword [@9345$float8$123.456#]	; 4: 221 6 57 150

print_test$51:	; Parameter 6 123.456 40
x37919:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x37922:	fld qword [@9346$float8$123.456#]	; 4: 221 6 65 150

print_test$53:	; Parameter 6 123.456 48
x37926:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x37929:	fld qword [@9347$float8$123.456#]	; 4: 221 6 73 150

print_test$55:	; Parameter 6 123.456 56
x37933:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x37936:	fld qword [@9348$float8$123.456#]	; 4: 221 6 81 150

print_test$57:	; Parameter 6 123.456 64
x37940:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x37943:	mov word [bp + 6], print_test$59	; 5: 199 70 6 74 148
x37948:	mov [bp + 8], bp	; 3: 137 110 8
x37951:	add bp, 6	; 3: 131 197 6
x37954:	mov di, bp	; 2: 137 239
x37956:	add di, 64	; 3: 131 199 64
x37959:	jmp printf	; 3: 233 186 120

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37962:	mov word [bp + 12], @9350$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 89 150

print_test$62:	; PushFloat -123.456
x37967:	fld qword [@9351$float8$minus123.456#]	; 4: 221 6 173 150

print_test$63:	; Parameter 6 -123.456 8
x37971:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x37974:	fld qword [@9352$float8$minus123.456#]	; 4: 221 6 181 150

print_test$65:	; Parameter 6 -123.456 16
x37978:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x37981:	fld qword [@9353$float8$minus123.456#]	; 4: 221 6 189 150

print_test$67:	; Parameter 6 -123.456 24
x37985:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x37988:	fld qword [@9354$float8$minus123.456#]	; 4: 221 6 197 150

print_test$69:	; Parameter 6 -123.456 32
x37992:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x37995:	fld qword [@9355$float8$minus123.456#]	; 4: 221 6 205 150

print_test$71:	; Parameter 6 -123.456 40
x37999:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x38002:	fld qword [@9356$float8$minus123.456#]	; 4: 221 6 213 150

print_test$73:	; Parameter 6 -123.456 48
x38006:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x38009:	fld qword [@9357$float8$minus123.456#]	; 4: 221 6 221 150

print_test$75:	; Parameter 6 -123.456 56
x38013:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x38016:	fld qword [@9358$float8$minus123.456#]	; 4: 221 6 229 150

print_test$77:	; Parameter 6 -123.456 64
x38020:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x38023:	mov word [bp + 6], print_test$79	; 5: 199 70 6 154 148
x38028:	mov [bp + 8], bp	; 3: 137 110 8
x38031:	add bp, 6	; 3: 131 197 6
x38034:	mov di, bp	; 2: 137 239
x38036:	add di, 64	; 3: 131 199 64
x38039:	jmp printf	; 3: 233 106 120

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38042:	mov word [bp + 12], @9360$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 237 150

print_test$82:	; PushFloat 123.456
x38047:	fld qword [@9361$float8$123.456#]	; 4: 221 6 25 151

print_test$83:	; Parameter 6 123.456 8
x38051:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x38054:	fld qword [@9362$float8$123.456#]	; 4: 221 6 33 151

print_test$85:	; Parameter 6 123.456 16
x38058:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x38061:	fld qword [@9363$float8$123.456#]	; 4: 221 6 41 151

print_test$87:	; Parameter 6 123.456 24
x38065:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x38068:	fld qword [@9364$float8$123.456#]	; 4: 221 6 49 151

print_test$89:	; Parameter 6 123.456 32
x38072:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x38075:	mov word [bp + 6], print_test$91	; 5: 199 70 6 206 148
x38080:	mov [bp + 8], bp	; 3: 137 110 8
x38083:	add bp, 6	; 3: 131 197 6
x38086:	mov di, bp	; 2: 137 239
x38088:	add di, 32	; 3: 131 199 32
x38091:	jmp printf	; 3: 233 54 120

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38094:	mov word [bp + 12], @9366$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 57 151

print_test$94:	; PushFloat -123.456
x38099:	fld qword [@9367$float8$minus123.456#]	; 4: 221 6 101 151

print_test$95:	; Parameter 6 -123.456 8
x38103:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x38106:	fld qword [@9368$float8$minus123.456#]	; 4: 221 6 109 151

print_test$97:	; Parameter 6 -123.456 16
x38110:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x38113:	fld qword [@9369$float8$minus123.456#]	; 4: 221 6 117 151

print_test$99:	; Parameter 6 -123.456 24
x38117:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x38120:	fld qword [@9370$float8$minus123.456#]	; 4: 221 6 125 151

print_test$101:	; Parameter 6 -123.456 32
x38124:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x38127:	mov word [bp + 6], print_test$103	; 5: 199 70 6 2 149
x38132:	mov [bp + 8], bp	; 3: 137 110 8
x38135:	add bp, 6	; 3: 131 197 6
x38138:	mov di, bp	; 2: 137 239
x38140:	add di, 32	; 3: 131 199 32
x38143:	jmp printf	; 3: 233 2 120

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x38146:	mov ax, [bp]	; 3: 139 70 0
x38149:	mov di, [bp + 4]	; 3: 139 126 4
x38152:	mov bp, [bp + 2]	; 3: 139 110 2
x38155:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

@9308$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38157:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9318$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38217:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9328$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38277:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9334$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38309:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9340$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38341:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9341$float8$123.456#:
x38425:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9342$float8$123.456#:
x38433:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9343$float8$123.456#:
x38441:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9344$float8$123.456#:
x38449:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9345$float8$123.456#:
x38457:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9346$float8$123.456#:
x38465:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9347$float8$123.456#:
x38473:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9348$float8$123.456#:
x38481:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9350$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38489:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9351$float8$minus123.456#:
x38573:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9352$float8$minus123.456#:
x38581:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9353$float8$minus123.456#:
x38589:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9354$float8$minus123.456#:
x38597:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9355$float8$minus123.456#:
x38605:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9356$float8$minus123.456#:
x38613:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9357$float8$minus123.456#:
x38621:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9358$float8$minus123.456#:
x38629:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9360$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38637:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9361$float8$123.456#:
x38681:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9362$float8$123.456#:
x38689:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9363$float8$123.456#:
x38697:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9364$float8$123.456#:
x38705:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9366$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38713:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9367$float8$minus123.456#:
x38757:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9368$float8$minus123.456#:
x38765:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9369$float8$minus123.456#:
x38773:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9370$float8$minus123.456#:
x38781:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x38789:	mov word [bp + 12], @9743$string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 82 153

limits_test$2:	; Parameter 6 8 8
x38794:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x38799:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 162 151
x38804:	mov [bp + 8], bp	; 3: 137 110 8
x38807:	add bp, 6	; 3: 131 197 6
x38810:	mov di, bp	; 2: 137 239
x38812:	add di, 2	; 3: 131 199 2
x38815:	jmp printf	; 3: 233 98 117

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x38818:	mov word [bp + 12], @9746$string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 97 153

limits_test$7:	; Parameter 6 -128 8
x38823:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x38828:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 191 151
x38833:	mov [bp + 8], bp	; 3: 137 110 8
x38836:	add bp, 6	; 3: 131 197 6
x38839:	mov di, bp	; 2: 137 239
x38841:	add di, 2	; 3: 131 199 2
x38844:	jmp printf	; 3: 233 69 117

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x38847:	mov word [bp + 12], @9750$string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 113 153

limits_test$12:	; Parameter 6 127 8
x38852:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x38857:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 220 151
x38862:	mov [bp + 8], bp	; 3: 137 110 8
x38865:	add bp, 6	; 3: 131 197 6
x38868:	mov di, bp	; 2: 137 239
x38870:	add di, 2	; 3: 131 199 2
x38873:	jmp printf	; 3: 233 40 117

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x38876:	mov word [bp + 12], @9754$string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 128 153

limits_test$17:	; Parameter 6 255 8
x38881:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x38886:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 249 151
x38891:	mov [bp + 8], bp	; 3: 137 110 8
x38894:	add bp, 6	; 3: 131 197 6
x38897:	mov di, bp	; 2: 137 239
x38899:	add di, 2	; 3: 131 199 2
x38902:	jmp printf	; 3: 233 11 117

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x38905:	mov word [bp + 12], @9758$string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 145 153

limits_test$22:	; Parameter 6 -128 8
x38910:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x38915:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 22 152
x38920:	mov [bp + 8], bp	; 3: 137 110 8
x38923:	add bp, 6	; 3: 131 197 6
x38926:	mov di, bp	; 2: 137 239
x38928:	add di, 2	; 3: 131 199 2
x38931:	jmp printf	; 3: 233 238 116

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x38934:	mov word [bp + 12], @9762$string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 160 153

limits_test$27:	; Parameter 6 127 8
x38939:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x38944:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 51 152
x38949:	mov [bp + 8], bp	; 3: 137 110 8
x38952:	add bp, 6	; 3: 131 197 6
x38955:	mov di, bp	; 2: 137 239
x38957:	add di, 2	; 3: 131 199 2
x38960:	jmp printf	; 3: 233 209 116

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x38963:	mov word [bp + 12], @9766$string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 175 153

limits_test$32:	; Parameter 6 255 8
x38968:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x38973:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 80 152
x38978:	mov [bp + 8], bp	; 3: 137 110 8
x38981:	add bp, 6	; 3: 131 197 6
x38984:	mov di, bp	; 2: 137 239
x38986:	add di, 2	; 3: 131 199 2
x38989:	jmp printf	; 3: 233 180 116

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x38992:	mov word [bp + 12], @9770$string_INT_MIN203D2025i0A#	; 5: 199 70 12 192 153

limits_test$37:	; Parameter 6 -32768 8
x38997:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x39002:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 109 152
x39007:	mov [bp + 8], bp	; 3: 137 110 8
x39010:	add bp, 6	; 3: 131 197 6
x39013:	mov di, bp	; 2: 137 239
x39015:	add di, 2	; 3: 131 199 2
x39018:	jmp printf	; 3: 233 151 116

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x39021:	mov word [bp + 12], @9773$string_INT_MAX203D2025i0A#	; 5: 199 70 12 206 153

limits_test$42:	; Parameter 6 32767 8
x39026:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x39031:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 138 152
x39036:	mov [bp + 8], bp	; 3: 137 110 8
x39039:	add bp, 6	; 3: 131 197 6
x39042:	mov di, bp	; 2: 137 239
x39044:	add di, 2	; 3: 131 199 2
x39047:	jmp printf	; 3: 233 122 116

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x39050:	mov word [bp + 12], @9776$string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 220 153

limits_test$47:	; Parameter 6 65535 8
x39055:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x39060:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 167 152
x39065:	mov [bp + 8], bp	; 3: 137 110 8
x39068:	add bp, 6	; 3: 131 197 6
x39071:	mov di, bp	; 2: 137 239
x39073:	add di, 2	; 3: 131 199 2
x39076:	jmp printf	; 3: 233 93 116

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x39079:	mov word [bp + 12], @9779$string_LONG_MIN203D2025li0A#	; 5: 199 70 12 236 153

limits_test$52:	; Parameter 6 -2147483648 8
x39084:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x39092:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 199 152
x39097:	mov [bp + 8], bp	; 3: 137 110 8
x39100:	add bp, 6	; 3: 131 197 6
x39103:	mov di, bp	; 2: 137 239
x39105:	add di, 4	; 3: 131 199 4
x39108:	jmp printf	; 3: 233 61 116

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x39111:	mov word [bp + 12], @9782$string_LONG_MAX203D2025li0A#	; 5: 199 70 12 252 153

limits_test$57:	; Parameter 6 2147483647 8
x39116:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x39124:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 231 152
x39129:	mov [bp + 8], bp	; 3: 137 110 8
x39132:	add bp, 6	; 3: 131 197 6
x39135:	mov di, bp	; 2: 137 239
x39137:	add di, 4	; 3: 131 199 4
x39140:	jmp printf	; 3: 233 29 116

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x39143:	mov word [bp + 12], @9785$string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 12 154

limits_test$62:	; Parameter 6 4294967295 8
x39148:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x39156:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 7 153
x39161:	mov [bp + 8], bp	; 3: 137 110 8
x39164:	add bp, 6	; 3: 131 197 6
x39167:	mov di, bp	; 2: 137 239
x39169:	add di, 4	; 3: 131 199 4
x39172:	jmp printf	; 3: 233 253 115

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x39175:	mov word [bp + 12], @9788$string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 29 154

limits_test$67:	; Parameter 6 4294967295 8
x39180:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x39188:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 39 153
x39193:	mov [bp + 8], bp	; 3: 137 110 8
x39196:	add bp, 6	; 3: 131 197 6
x39199:	mov di, bp	; 2: 137 239
x39201:	add di, 4	; 3: 131 199 4
x39204:	jmp printf	; 3: 233 221 115

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x39207:	mov word [bp + 12], @9791$string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 46 154

limits_test$72:	; Parameter 6 4294967295 8
x39212:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x39220:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 71 153
x39225:	mov [bp + 8], bp	; 3: 137 110 8
x39228:	add bp, 6	; 3: 131 197 6
x39231:	mov di, bp	; 2: 137 239
x39233:	add di, 4	; 3: 131 199 4
x39236:	jmp printf	; 3: 233 189 115

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x39239:	mov ax, [bp]	; 3: 139 70 0
x39242:	mov di, [bp + 4]	; 3: 139 126 4
x39245:	mov bp, [bp + 2]	; 3: 139 110 2
x39248:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

@9743$string_CHAR_BIT203D2025i0A#:
x39250:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

@9746$string_CHAR_MIN203D2025i0A0A#:
x39265:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

@9750$string_CHAR_MAX203D2025i0A#:
x39281:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

@9754$string_UCHAR_MAX203D2025u0A0A#:
x39296:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

@9758$string_SHRT_MIN203D2025i0A#:
x39313:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

@9762$string_SHRT_MAX203D2025i0A#:
x39328:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

@9766$string_USHRT_MAX203D2025u0A0A#:
x39343:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

@9770$string_INT_MIN203D2025i0A#:
x39360:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

@9773$string_INT_MAX203D2025i0A#:
x39374:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

@9776$string_UINT_MAX203D2025u0A0A#:
x39388:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

@9779$string_LONG_MIN203D2025li0A#:
x39404:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

@9782$string_LONG_MAX203D2025li0A#:
x39420:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

@9785$string_ULONG_MAX203D2025lu0A#:
x39436:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

@9788$string_ULONG_MAX203D2025lx0A#:
x39453:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

@9791$string_ULONG_MAX203D2025lX0A#:
x39470:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x39487:	mov ax, [bp]	; 3: 139 70 0
x39490:	mov di, [bp + 4]	; 3: 139 126 4
x39493:	mov bp, [bp + 2]	; 3: 139 110 2
x39496:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x39498:	fld qword [@10323$float8$10#]	; 4: 221 6 146 154

setjmp_test$2:	; Parameter 6 10 6
x39502:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x39505:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 95 154
x39510:	mov [bp + 8], bp	; 3: 137 110 8
x39513:	add bp, 6	; 3: 131 197 6
x39516:	nop	; 1: 144
x39517:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x39519:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x39521:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x39524:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 114 154
x39529:	mov [bp + 8], bp	; 3: 137 110 8
x39532:	add bp, 6	; 3: 131 197 6
x39535:	nop	; 1: 144
x39536:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x39538:	fld qword [@10328$float8$0.1#]	; 4: 221 6 154 154

setjmp_test$12:	; Parameter 6 0.1 6
x39542:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x39545:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 135 154
x39550:	mov [bp + 8], bp	; 3: 137 110 8
x39553:	add bp, 6	; 3: 131 197 6
x39556:	nop	; 1: 144
x39557:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x39559:	mov ax, [bp]	; 3: 139 70 0
x39562:	mov di, [bp + 4]	; 3: 139 126 4
x39565:	mov bp, [bp + 2]	; 3: 139 110 2
x39568:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

@10323$float8$10#:
x39570:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@10328$float8$0.1#:
x39578:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x39586:	mov word [bp + 22], buffer	; 5: 199 70 22 30 155

test$2:	; Call 16 setjmp 0
x39591:	mov word [bp + 16], test$3	; 5: 199 70 16 181 154
x39596:	mov [bp + 18], bp	; 3: 137 110 18
x39599:	add bp, 16	; 3: 131 197 16
x39602:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4740

test$5:	; Assign message £temporary4740
x39605:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x39608:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x39612:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x39614:	mov word [bp + 22], @10309$string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 36 155

test$9:	; PushFloat x
x39619:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x39622:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x39625:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x39628:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x39631:	mov word [bp + 32], test$15	; 5: 199 70 32 221 154
x39636:	mov [bp + 34], bp	; 3: 137 110 34
x39639:	add bp, 32	; 3: 131 197 32
x39642:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4742

test$17:	; Parameter 16 £temporary4742 16
x39645:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x39648:	mov word [bp + 16], test$19	; 5: 199 70 16 243 154
x39653:	mov [bp + 18], bp	; 3: 137 110 18
x39656:	add bp, 16	; 3: 131 197 16
x39659:	mov di, bp	; 2: 137 239
x39661:	add di, 16	; 3: 131 199 16
x39664:	jmp printf	; 3: 233 17 114

test$19:	; PostCall 16

test$20:	; Goto 26
x39667:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x39669:	mov word [bp + 22], @10312$string_25s0A#	; 5: 199 70 22 51 155

test$23:	; Parameter 16 message 8
x39674:	mov ax, [bp + 14]	; 3: 139 70 14
x39677:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x39680:	mov word [bp + 16], test$25	; 5: 199 70 16 19 155
x39685:	mov [bp + 18], bp	; 3: 137 110 18
x39688:	add bp, 16	; 3: 131 197 16
x39691:	mov di, bp	; 2: 137 239
x39693:	add di, 2	; 3: 131 199 2
x39696:	jmp printf	; 3: 233 241 113

test$25:	; PostCall 16

test$26:	; Return 0
x39699:	mov ax, [bp]	; 3: 139 70 0
x39702:	mov di, [bp + 4]	; 3: 139 126 4
x39705:	mov bp, [bp + 2]	; 3: 139 110 2
x39708:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x39710:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

@10309$string_12E0202F2025f203D2025f0A#:
x39716:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

@10312$string_25s0A#:
x39731:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary811 bp

setjmp$1:	; Assign bp_pointer £temporary811
x39735:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary812 -> buf buf 0
x39738:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary813 -> bp_pointer bp_pointer 0
x39741:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary812 -> buf £temporary813 -> bp_pointer
x39744:	mov ax, [di]	; 2: 139 5
x39746:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary814 -> buf buf 2
x39748:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary815 -> bp_pointer bp_pointer 2
x39751:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary814 -> buf £temporary815 -> bp_pointer
x39754:	mov ax, [di + 2]	; 3: 139 69 2
x39757:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary816 -> buf buf 4
x39760:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary817 -> bp_pointer bp_pointer 4
x39763:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary816 -> buf £temporary817 -> bp_pointer
x39766:	mov ax, [di + 4]	; 3: 139 69 4
x39769:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x39772:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x39775:	mov ax, [bp]	; 3: 139 70 0
x39778:	mov di, [bp + 4]	; 3: 139 126 4
x39781:	mov bp, [bp + 2]	; 3: 139 110 2
x39784:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x39786:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x39788:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x39791:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x39794:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x39797:	mov word [bp + 14], inverse$6	; 5: 199 70 14 131 155
x39802:	mov [bp + 16], bp	; 3: 137 110 16
x39805:	add bp, 14	; 3: 131 197 14
x39808:	nop	; 1: 144
x39809:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4732

inverse$8:	; SetReturnValue £temporary4732

inverse$9:	; Return £temporary4732
x39811:	mov ax, [bp]	; 3: 139 70 0
x39814:	mov di, [bp + 4]	; 3: 139 126 4
x39817:	mov bp, [bp + 2]	; 3: 139 110 2
x39820:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x39822:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x39825:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x39827:	fcompp	; 2: 222 217
x39829:	fstsw ax	; 3: 155 223 224
x39832:	sahf	; 1: 158
x39833:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x39835:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x39838:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4736 x y
x39841:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4736

divide$7:	; Return £temporary4736
x39843:	mov ax, [bp]	; 3: 139 70 0
x39846:	mov di, [bp + 4]	; 3: 139 126 4
x39849:	mov bp, [bp + 2]	; 3: 139 110 2
x39852:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x39854:	mov word [bp + 28], buffer	; 5: 199 70 28 30 155

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x39859:	mov word [bp + 30], @10297$string_Division20by20Zero2E#	; 5: 199 70 30 211 155

divide$11:	; Call 22 longjmp 0
x39864:	mov word [bp + 22], divide$12	; 5: 199 70 22 198 155
x39869:	mov [bp + 24], bp	; 3: 137 110 24
x39872:	add bp, 22	; 3: 131 197 22
x39875:	nop	; 1: 144
x39876:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x39878:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x39880:	mov ax, [bp]	; 3: 139 70 0
x39883:	mov di, [bp + 4]	; 3: 139 126 4
x39886:	mov bp, [bp + 2]	; 3: 139 110 2
x39889:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

@10297$string_Division20by20Zero2E#:
x39891:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x39909:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary820 -> buf buf 0
x39912:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary820 -> buf
x39915:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary822 -> buf buf 4
x39917:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary822 -> buf
x39920:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary824 -> buf buf 2
x39923:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary824 -> buf
x39926:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x39929:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x39931:	mov ax, [bp]	; 3: 139 70 0
x39934:	mov di, [bp + 4]	; 3: 139 126 4
x39937:	mov bp, [bp + 2]	; 3: 139 110 2
x39940:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdio_test:	; Assign n 0
x39942:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5782 n
x39947:	mov si, bp	; 2: 137 238
x39949:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5782
x39952:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x39955:	mov word [bp + 16], @12166$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 238 163

stdio_test$5:	; Parameter 10 123 8
x39960:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x39965:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x39970:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x39978:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x39986:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x39991:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x39999:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 82 156
x40004:	mov [bp + 12], bp	; 3: 137 110 12
x40007:	add bp, 10	; 3: 131 197 10
x40010:	mov di, bp	; 2: 137 239
x40012:	add di, 18	; 3: 131 199 18
x40015:	jmp printf	; 3: 233 178 112

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x40018:	mov word [bp + 16], @12174$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 17 164

stdio_test$15:	; Parameter 10 123 8
x40023:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x40028:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x40033:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x40041:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x40049:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x40054:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x40062:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 145 156
x40067:	mov [bp + 12], bp	; 3: 137 110 12
x40070:	add bp, 10	; 3: 131 197 10
x40073:	mov di, bp	; 2: 137 239
x40075:	add di, 18	; 3: 131 199 18
x40078:	jmp printf	; 3: 233 115 112

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x40081:	mov word [bp + 16], @12182$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 57 164

stdio_test$25:	; Parameter 10 123 8
x40086:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x40091:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x40096:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x40104:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x40112:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x40117:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x40125:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 208 156
x40130:	mov [bp + 12], bp	; 3: 137 110 12
x40133:	add bp, 10	; 3: 131 197 10
x40136:	mov di, bp	; 2: 137 239
x40138:	add di, 18	; 3: 131 199 18
x40141:	jmp printf	; 3: 233 52 112

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x40144:	mov word [bp + 16], @12190$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 103 164

stdio_test$35:	; Parameter 10 123 8
x40149:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x40154:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x40159:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x40167:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x40175:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x40180:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x40188:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 15 157
x40193:	mov [bp + 12], bp	; 3: 137 110 12
x40196:	add bp, 10	; 3: 131 197 10
x40199:	mov di, bp	; 2: 137 239
x40201:	add di, 18	; 3: 131 199 18
x40204:	jmp printf	; 3: 233 245 111

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x40207:	mov word [bp + 16], @12198$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 149 164

stdio_test$45:	; Parameter 10 123 8
x40212:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x40217:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x40222:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x40230:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x40238:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x40243:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x40251:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 78 157
x40256:	mov [bp + 12], bp	; 3: 137 110 12
x40259:	add bp, 10	; 3: 131 197 10
x40262:	mov di, bp	; 2: 137 239
x40264:	add di, 18	; 3: 131 199 18
x40267:	jmp printf	; 3: 233 182 111

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x40270:	mov word [bp + 16], @12210$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 202 164

stdio_test$55:	; Parameter 10 123 8
x40275:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x40280:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x40285:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x40293:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x40301:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x40306:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x40314:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 141 157
x40319:	mov [bp + 12], bp	; 3: 137 110 12
x40322:	add bp, 10	; 3: 131 197 10
x40325:	mov di, bp	; 2: 137 239
x40327:	add di, 18	; 3: 131 199 18
x40330:	jmp printf	; 3: 233 119 111

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x40333:	mov word [bp + 16], @12218$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 248 164

stdio_test$65:	; Parameter 10 123 8
x40338:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x40343:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x40348:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x40356:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x40364:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x40369:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x40377:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 204 157
x40382:	mov [bp + 12], bp	; 3: 137 110 12
x40385:	add bp, 10	; 3: 131 197 10
x40388:	mov di, bp	; 2: 137 239
x40390:	add di, 18	; 3: 131 199 18
x40393:	jmp printf	; 3: 233 56 111

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x40396:	mov word [bp + 16], @12226$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 44 165

stdio_test$75:	; Parameter 10 123 8
x40401:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x40406:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x40411:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x40419:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x40427:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x40432:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x40440:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 11 158
x40445:	mov [bp + 12], bp	; 3: 137 110 12
x40448:	add bp, 10	; 3: 131 197 10
x40451:	mov di, bp	; 2: 137 239
x40453:	add di, 18	; 3: 131 199 18
x40456:	jmp printf	; 3: 233 249 110

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x40459:	mov word [bp + 16], @12234$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 96 165

stdio_test$85:	; Parameter 10 123 8
x40464:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x40469:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x40474:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x40482:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x40490:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x40495:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x40503:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 74 158
x40508:	mov [bp + 12], bp	; 3: 137 110 12
x40511:	add bp, 10	; 3: 131 197 10
x40514:	mov di, bp	; 2: 137 239
x40516:	add di, 18	; 3: 131 199 18
x40519:	jmp printf	; 3: 233 186 110

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x40522:	mov word [bp + 16], @12242$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 155 165

stdio_test$95:	; Parameter 10 123 8
x40527:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x40532:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x40537:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x40545:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x40553:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x40558:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x40566:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 137 158
x40571:	mov [bp + 12], bp	; 3: 137 110 12
x40574:	add bp, 10	; 3: 131 197 10
x40577:	mov di, bp	; 2: 137 239
x40579:	add di, 18	; 3: 131 199 18
x40582:	jmp printf	; 3: 233 123 110

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x40585:	mov word [bp + 16], @12250$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 201 165

stdio_test$105:	; Parameter 10 123 8
x40590:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x40595:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x40600:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x40608:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x40616:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x40621:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x40629:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 200 158
x40634:	mov [bp + 12], bp	; 3: 137 110 12
x40637:	add bp, 10	; 3: 131 197 10
x40640:	mov di, bp	; 2: 137 239
x40642:	add di, 18	; 3: 131 199 18
x40645:	jmp printf	; 3: 233 60 110

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x40648:	mov word [bp + 16], @12258$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 253 165

stdio_test$115:	; Parameter 10 123 8
x40653:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x40658:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x40663:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x40671:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x40679:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x40684:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x40692:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 7 159
x40697:	mov [bp + 12], bp	; 3: 137 110 12
x40700:	add bp, 10	; 3: 131 197 10
x40703:	mov di, bp	; 2: 137 239
x40705:	add di, 18	; 3: 131 199 18
x40708:	jmp printf	; 3: 233 253 109

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x40711:	mov word [bp + 16], @12266$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 49 166

stdio_test$125:	; Parameter 10 123 8
x40716:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x40721:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x40726:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x40734:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x40742:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x40747:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x40755:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 70 159
x40760:	mov [bp + 12], bp	; 3: 137 110 12
x40763:	add bp, 10	; 3: 131 197 10
x40766:	mov di, bp	; 2: 137 239
x40768:	add di, 18	; 3: 131 199 18
x40771:	jmp printf	; 3: 233 190 109

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x40774:	mov word [bp + 16], @12274$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 108 166

stdio_test$135:	; Parameter 10 123 8
x40779:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x40784:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x40789:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x40794:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x40802:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x40810:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x40818:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 133 159
x40823:	mov [bp + 12], bp	; 3: 137 110 12
x40826:	add bp, 10	; 3: 131 197 10
x40829:	mov di, bp	; 2: 137 239
x40831:	add di, 18	; 3: 131 199 18
x40834:	jmp printf	; 3: 233 127 109

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x40837:	mov word [bp + 16], @12282$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 142 166

stdio_test$145:	; Parameter 10 123 8
x40842:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x40847:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x40852:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x40857:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x40865:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x40873:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x40881:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 196 159
x40886:	mov [bp + 12], bp	; 3: 137 110 12
x40889:	add bp, 10	; 3: 131 197 10
x40892:	mov di, bp	; 2: 137 239
x40894:	add di, 18	; 3: 131 199 18
x40897:	jmp printf	; 3: 233 64 109

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x40900:	mov word [bp + 16], @12290$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 182 166

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x40905:	mov word [bp + 18], @12291$string_Hello2C20World21#	; 5: 199 70 18 204 166

stdio_test$156:	; Parameter 10 88 10
x40910:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x40915:	mov ax, [bp + 8]	; 3: 139 70 8
x40918:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x40921:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 236 159
x40926:	mov [bp + 12], bp	; 3: 137 110 12
x40929:	add bp, 10	; 3: 131 197 10
x40932:	mov di, bp	; 2: 137 239
x40934:	add di, 6	; 3: 131 199 6
x40937:	jmp printf	; 3: 233 24 109

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x40940:	mov word [bp + 16], @12295$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 218 166

stdio_test$162:	; PushFloat 123.456
x40945:	fld qword [@12296$float8$123.456#]	; 4: 221 6 244 166

stdio_test$163:	; Parameter 10 123.456 8
x40949:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x40952:	fld qword [@12297$float8$123.456#]	; 4: 221 6 252 166

stdio_test$165:	; Parameter 10 123.456 16
x40956:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x40959:	fld qword [@12298$float8$123.456#]	; 4: 221 6 4 167

stdio_test$167:	; Parameter 10 123.456 24
x40963:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x40966:	fld qword [@12299$float8$123456.1#]	; 4: 221 6 12 167

stdio_test$169:	; Parameter 10 123456.1 32
x40970:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x40973:	fld qword [@12300$float8$123456.1#]	; 4: 221 6 20 167

stdio_test$171:	; Parameter 10 123456.1 40
x40977:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x40980:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 39 160
x40985:	mov [bp + 12], bp	; 3: 137 110 12
x40988:	add bp, 10	; 3: 131 197 10
x40991:	mov di, bp	; 2: 137 239
x40993:	add di, 40	; 3: 131 199 40
x40996:	jmp printf	; 3: 233 221 108

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x40999:	mov word [bp + 16], @12302$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 28 167

stdio_test$176:	; PushFloat 123.456
x41004:	fld qword [@12303$float8$123.456#]	; 4: 221 6 59 167

stdio_test$177:	; Parameter 10 123.456 8
x41008:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x41011:	fld qword [@12304$float8$123.456#]	; 4: 221 6 67 167

stdio_test$179:	; Parameter 10 123.456 16
x41015:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x41018:	fld qword [@12305$float8$123.456#]	; 4: 221 6 75 167

stdio_test$181:	; Parameter 10 123.456 24
x41022:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x41025:	fld qword [@12306$float8$123456.1#]	; 4: 221 6 83 167

stdio_test$183:	; Parameter 10 123456.1 32
x41029:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x41032:	fld qword [@12307$float8$123456.1#]	; 4: 221 6 91 167

stdio_test$185:	; Parameter 10 123456.1 40
x41036:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x41039:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 98 160
x41044:	mov [bp + 12], bp	; 3: 137 110 12
x41047:	add bp, 10	; 3: 131 197 10
x41050:	mov di, bp	; 2: 137 239
x41052:	add di, 40	; 3: 131 199 40
x41055:	jmp printf	; 3: 233 162 108

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41058:	mov word [bp + 16], @12309$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 99 167

stdio_test$190:	; PushFloat 123.456
x41063:	fld qword [@12310$float8$123.456#]	; 4: 221 6 130 167

stdio_test$191:	; Parameter 10 123.456 8
x41067:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x41070:	fld qword [@12311$float8$123.456#]	; 4: 221 6 138 167

stdio_test$193:	; Parameter 10 123.456 16
x41074:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x41077:	fld qword [@12312$float8$123.456#]	; 4: 221 6 146 167

stdio_test$195:	; Parameter 10 123.456 24
x41081:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x41084:	fld qword [@12313$float8$123.456#]	; 4: 221 6 154 167

stdio_test$197:	; Parameter 10 123.456 32
x41088:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x41091:	fld qword [@12314$float8$123.456#]	; 4: 221 6 162 167

stdio_test$199:	; Parameter 10 123.456 40
x41095:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x41098:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 157 160
x41103:	mov [bp + 12], bp	; 3: 137 110 12
x41106:	add bp, 10	; 3: 131 197 10
x41109:	mov di, bp	; 2: 137 239
x41111:	add di, 40	; 3: 131 199 40
x41114:	jmp printf	; 3: 233 103 108

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41117:	mov word [bp + 16], @12316$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 170 167

stdio_test$204:	; PushFloat 123.456
x41122:	fld qword [@12317$float8$123.456#]	; 4: 221 6 206 167

stdio_test$205:	; Parameter 10 123.456 8
x41126:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x41129:	fld qword [@12318$float8$123.456#]	; 4: 221 6 214 167

stdio_test$207:	; Parameter 10 123.456 16
x41133:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x41136:	fld qword [@12319$float8$123.456#]	; 4: 221 6 222 167

stdio_test$209:	; Parameter 10 123.456 24
x41140:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x41143:	fld qword [@12320$float8$123.456#]	; 4: 221 6 230 167

stdio_test$211:	; Parameter 10 123.456 32
x41147:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x41150:	fld qword [@12321$float8$123.456#]	; 4: 221 6 238 167

stdio_test$213:	; Parameter 10 123.456 40
x41154:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x41157:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 216 160
x41162:	mov [bp + 12], bp	; 3: 137 110 12
x41165:	add bp, 10	; 3: 131 197 10
x41168:	mov di, bp	; 2: 137 239
x41170:	add di, 40	; 3: 131 199 40
x41173:	jmp printf	; 3: 233 44 108

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41176:	mov word [bp + 16], @12323$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 246 167

stdio_test$218:	; PushFloat 123.456
x41181:	fld qword [@12324$float8$123.456#]	; 4: 221 6 31 168

stdio_test$219:	; Parameter 10 123.456 8
x41185:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x41188:	fld qword [@12325$float8$123.456#]	; 4: 221 6 39 168

stdio_test$221:	; Parameter 10 123.456 16
x41192:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x41195:	fld qword [@12326$float8$123.456#]	; 4: 221 6 47 168

stdio_test$223:	; Parameter 10 123.456 24
x41199:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x41202:	fld qword [@12327$float8$123.456#]	; 4: 221 6 55 168

stdio_test$225:	; Parameter 10 123.456 32
x41206:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x41209:	fld qword [@12328$float8$123.456#]	; 4: 221 6 63 168

stdio_test$227:	; Parameter 10 123.456 40
x41213:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x41216:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 19 161
x41221:	mov [bp + 12], bp	; 3: 137 110 12
x41224:	add bp, 10	; 3: 131 197 10
x41227:	mov di, bp	; 2: 137 239
x41229:	add di, 40	; 3: 131 199 40
x41232:	jmp printf	; 3: 233 241 107

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41235:	mov word [bp + 16], @12330$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 71 168

stdio_test$232:	; PushFloat 123.456
x41240:	fld qword [@12331$float8$123.456#]	; 4: 221 6 118 168

stdio_test$233:	; Parameter 10 123.456 8
x41244:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x41247:	fld qword [@12332$float8$123.456#]	; 4: 221 6 126 168

stdio_test$235:	; Parameter 10 123.456 16
x41251:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x41254:	fld qword [@12333$float8$123.456#]	; 4: 221 6 134 168

stdio_test$237:	; Parameter 10 123.456 24
x41258:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x41261:	fld qword [@12334$float8$123.456#]	; 4: 221 6 142 168

stdio_test$239:	; Parameter 10 123.456 32
x41265:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x41268:	fld qword [@12335$float8$123.456#]	; 4: 221 6 150 168

stdio_test$241:	; Parameter 10 123.456 40
x41272:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x41275:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 78 161
x41280:	mov [bp + 12], bp	; 3: 137 110 12
x41283:	add bp, 10	; 3: 131 197 10
x41286:	mov di, bp	; 2: 137 239
x41288:	add di, 40	; 3: 131 199 40
x41291:	jmp printf	; 3: 233 182 107

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x41294:	mov word [bp + 16], @12337$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 158 168

stdio_test$246:	; PushFloat -123.456
x41299:	fld qword [@12338$float8$minus123.456#]	; 4: 221 6 184 168

stdio_test$247:	; Parameter 10 -123.456 8
x41303:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x41306:	fld qword [@12339$float8$minus123.456#]	; 4: 221 6 192 168

stdio_test$249:	; Parameter 10 -123.456 16
x41310:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x41313:	fld qword [@12340$float8$minus123.456#]	; 4: 221 6 200 168

stdio_test$251:	; Parameter 10 -123.456 24
x41317:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x41320:	fld qword [@12341$float8$minus0.000000123456#]	; 4: 221 6 208 168

stdio_test$253:	; Parameter 10 -0.000000123456 32
x41324:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x41327:	fld qword [@12342$float8$minus0.000000123456#]	; 4: 221 6 216 168

stdio_test$255:	; Parameter 10 -0.000000123456 40
x41331:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x41334:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 137 161
x41339:	mov [bp + 12], bp	; 3: 137 110 12
x41342:	add bp, 10	; 3: 131 197 10
x41345:	mov di, bp	; 2: 137 239
x41347:	add di, 40	; 3: 131 199 40
x41350:	jmp printf	; 3: 233 123 107

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x41353:	mov word [bp + 16], @12344$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 224 168

stdio_test$260:	; PushFloat -123.456
x41358:	fld qword [@12345$float8$minus123.456#]	; 4: 221 6 255 168

stdio_test$261:	; Parameter 10 -123.456 8
x41362:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x41365:	fld qword [@12346$float8$minus123.456#]	; 4: 221 6 7 169

stdio_test$263:	; Parameter 10 -123.456 16
x41369:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x41372:	fld qword [@12347$float8$minus123.456#]	; 4: 221 6 15 169

stdio_test$265:	; Parameter 10 -123.456 24
x41376:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x41379:	fld qword [@12348$float8$minus0.000000123456#]	; 4: 221 6 23 169

stdio_test$267:	; Parameter 10 -0.000000123456 32
x41383:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x41386:	fld qword [@12349$float8$minus0.000000123456#]	; 4: 221 6 31 169

stdio_test$269:	; Parameter 10 -0.000000123456 40
x41390:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x41393:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 196 161
x41398:	mov [bp + 12], bp	; 3: 137 110 12
x41401:	add bp, 10	; 3: 131 197 10
x41404:	mov di, bp	; 2: 137 239
x41406:	add di, 40	; 3: 131 199 40
x41409:	jmp printf	; 3: 233 64 107

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41412:	mov word [bp + 16], @12351$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 39 169

stdio_test$274:	; PushFloat -123.456
x41417:	fld qword [@12352$float8$minus123.456#]	; 4: 221 6 70 169

stdio_test$275:	; Parameter 10 -123.456 8
x41421:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x41424:	fld qword [@12353$float8$minus123.456#]	; 4: 221 6 78 169

stdio_test$277:	; Parameter 10 -123.456 16
x41428:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x41431:	fld qword [@12354$float8$minus123.456#]	; 4: 221 6 86 169

stdio_test$279:	; Parameter 10 -123.456 24
x41435:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x41438:	fld qword [@12355$float8$minus123.456#]	; 4: 221 6 94 169

stdio_test$281:	; Parameter 10 -123.456 32
x41442:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x41445:	fld qword [@12356$float8$minus123.456#]	; 4: 221 6 102 169

stdio_test$283:	; Parameter 10 -123.456 40
x41449:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x41452:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 255 161
x41457:	mov [bp + 12], bp	; 3: 137 110 12
x41460:	add bp, 10	; 3: 131 197 10
x41463:	mov di, bp	; 2: 137 239
x41465:	add di, 40	; 3: 131 199 40
x41468:	jmp printf	; 3: 233 5 107

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41471:	mov word [bp + 16], @12358$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 110 169

stdio_test$288:	; PushFloat -123.456
x41476:	fld qword [@12359$float8$minus123.456#]	; 4: 221 6 146 169

stdio_test$289:	; Parameter 10 -123.456 8
x41480:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x41483:	fld qword [@12360$float8$minus123.456#]	; 4: 221 6 154 169

stdio_test$291:	; Parameter 10 -123.456 16
x41487:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x41490:	fld qword [@12361$float8$minus123.456#]	; 4: 221 6 162 169

stdio_test$293:	; Parameter 10 -123.456 24
x41494:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x41497:	fld qword [@12362$float8$minus123.456#]	; 4: 221 6 170 169

stdio_test$295:	; Parameter 10 -123.456 32
x41501:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x41504:	fld qword [@12363$float8$minus123.456#]	; 4: 221 6 178 169

stdio_test$297:	; Parameter 10 -123.456 40
x41508:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x41511:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 58 162
x41516:	mov [bp + 12], bp	; 3: 137 110 12
x41519:	add bp, 10	; 3: 131 197 10
x41522:	mov di, bp	; 2: 137 239
x41524:	add di, 40	; 3: 131 199 40
x41527:	jmp printf	; 3: 233 202 106

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41530:	mov word [bp + 16], @12365$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 186 169

stdio_test$302:	; PushFloat -123.456
x41535:	fld qword [@12366$float8$minus123.456#]	; 4: 221 6 227 169

stdio_test$303:	; Parameter 10 -123.456 8
x41539:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x41542:	fld qword [@12367$float8$minus123.456#]	; 4: 221 6 235 169

stdio_test$305:	; Parameter 10 -123.456 16
x41546:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x41549:	fld qword [@12368$float8$minus123.456#]	; 4: 221 6 243 169

stdio_test$307:	; Parameter 10 -123.456 24
x41553:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x41556:	fld qword [@12369$float8$minus123.456#]	; 4: 221 6 251 169

stdio_test$309:	; Parameter 10 -123.456 32
x41560:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x41563:	fld qword [@12370$float8$minus123.456#]	; 4: 221 6 3 170

stdio_test$311:	; Parameter 10 -123.456 40
x41567:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x41570:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 117 162
x41575:	mov [bp + 12], bp	; 3: 137 110 12
x41578:	add bp, 10	; 3: 131 197 10
x41581:	mov di, bp	; 2: 137 239
x41583:	add di, 40	; 3: 131 199 40
x41586:	jmp printf	; 3: 233 143 106

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41589:	mov word [bp + 16], @12372$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 11 170

stdio_test$316:	; PushFloat -123.456
x41594:	fld qword [@12373$float8$minus123.456#]	; 4: 221 6 58 170

stdio_test$317:	; Parameter 10 -123.456 8
x41598:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x41601:	fld qword [@12374$float8$minus123.456#]	; 4: 221 6 66 170

stdio_test$319:	; Parameter 10 -123.456 16
x41605:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x41608:	fld qword [@12375$float8$minus123.456#]	; 4: 221 6 74 170

stdio_test$321:	; Parameter 10 -123.456 24
x41612:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x41615:	fld qword [@12376$float8$minus123.456#]	; 4: 221 6 82 170

stdio_test$323:	; Parameter 10 -123.456 32
x41619:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x41622:	fld qword [@12377$float8$minus123.456#]	; 4: 221 6 90 170

stdio_test$325:	; Parameter 10 -123.456 40
x41626:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x41629:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 176 162
x41634:	mov [bp + 12], bp	; 3: 137 110 12
x41637:	add bp, 10	; 3: 131 197 10
x41640:	mov di, bp	; 2: 137 239
x41642:	add di, 40	; 3: 131 199 40
x41645:	jmp printf	; 3: 233 84 106

stdio_test$327:	; PostCall 10

stdio_test$328:	; Assign a 0
x41648:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$329:	; Assign b 0
x41653:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

stdio_test$330:	; Assign n 0
x41658:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

stdio_test$331:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$332:	; Parameter 12 string_Please20write20three20integers3A20# 6
x41663:	mov word [bp + 18], @12388$string_Please20write20three20integers3A20#	; 5: 199 70 18 98 170

stdio_test$333:	; Call 12 printf 0
x41668:	mov word [bp + 12], stdio_test$334	; 5: 199 70 12 212 162
x41673:	mov [bp + 14], bp	; 3: 137 110 14
x41676:	add bp, 12	; 3: 131 197 12
x41679:	mov di, bp	; 2: 137 239
x41681:	jmp printf	; 3: 233 48 106

stdio_test$334:	; PostCall 12

stdio_test$335:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$336:	; Parameter 12 string_1232045620789# 6
x41684:	mov word [bp + 18], @12390$string_1232045620789#	; 5: 199 70 18 128 170

stdio_test$337:	; Parameter 12 string_25i20252Ai2025i2025n# 8
x41689:	mov word [bp + 20], @12391$string_25i20252Ai2025i2025n#	; 5: 199 70 20 140 170

stdio_test$338:	; address £temporary5812 a
x41694:	mov si, bp	; 2: 137 238
x41696:	add si, 6	; 3: 131 198 6

stdio_test$339:	; Parameter 12 £temporary5812 10
x41699:	mov [bp + 22], si	; 3: 137 118 22

stdio_test$340:	; address £temporary5813 b
x41702:	mov si, bp	; 2: 137 238
x41704:	add si, 8	; 3: 131 198 8

stdio_test$341:	; Parameter 12 £temporary5813 12
x41707:	mov [bp + 24], si	; 3: 137 118 24

stdio_test$342:	; address £temporary5814 n
x41710:	mov si, bp	; 2: 137 238
x41712:	add si, 10	; 3: 131 198 10

stdio_test$343:	; Parameter 12 £temporary5814 14
x41715:	mov [bp + 26], si	; 3: 137 118 26

stdio_test$344:	; Call 12 sscanf 0
x41718:	mov word [bp + 12], stdio_test$345	; 5: 199 70 12 9 163
x41723:	mov [bp + 14], bp	; 3: 137 110 14
x41726:	add bp, 12	; 3: 131 197 12
x41729:	mov di, bp	; 2: 137 239
x41731:	add di, 6	; 3: 131 199 6
x41734:	jmp sscanf	; 3: 233 15 8

stdio_test$345:	; PostCall 12

stdio_test$346:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$347:	; Parameter 12 string_3C25i3E203C25i3E203C25i3E0A# 6
x41737:	mov word [bp + 18], @12396$string_3C25i3E203C25i3E203C25i3E0A#	; 5: 199 70 18 153 170

stdio_test$348:	; Parameter 12 a 8
x41742:	mov ax, [bp + 6]	; 3: 139 70 6
x41745:	mov [bp + 20], ax	; 3: 137 70 20

stdio_test$349:	; Parameter 12 b 10
x41748:	mov ax, [bp + 8]	; 3: 139 70 8
x41751:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$350:	; Parameter 12 n 12
x41754:	mov ax, [bp + 10]	; 3: 139 70 10
x41757:	mov [bp + 24], ax	; 3: 137 70 24

stdio_test$351:	; Call 12 printf 0
x41760:	mov word [bp + 12], stdio_test$352	; 5: 199 70 12 51 163
x41765:	mov [bp + 14], bp	; 3: 137 110 14
x41768:	add bp, 12	; 3: 131 197 12
x41771:	mov di, bp	; 2: 137 239
x41773:	add di, 6	; 3: 131 199 6
x41776:	jmp printf	; 3: 233 209 105

stdio_test$352:	; PostCall 12

stdio_test$353:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$354:	; Parameter 106 string_Please20write20the20patterns205Babc5D3A20# 6
x41779:	mov word [bp + 112], @12401$string_Please20write20the20patterns205Babc5D3A20#	; 5: 199 70 112 169 170

stdio_test$355:	; Call 106 printf 0
x41784:	mov word [bp + 106], stdio_test$356	; 5: 199 70 106 72 163
x41789:	mov [bp + 108], bp	; 3: 137 110 108
x41792:	add bp, 106	; 3: 131 197 106
x41795:	mov di, bp	; 2: 137 239
x41797:	jmp printf	; 3: 233 188 105

stdio_test$356:	; PostCall 106

stdio_test$357:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$358:	; Parameter 106 string_abcdef# 6
x41800:	mov word [bp + 112], @12403$string_abcdef#	; 5: 199 70 112 203 170

stdio_test$359:	; Parameter 106 string_255Babc5D# 8
x41805:	mov word [bp + 114], @12404$string_255Babc5D#	; 5: 199 70 114 210 170

stdio_test$360:	; Parameter 106 s 10
x41810:	mov [bp + 116], bp	; 3: 137 110 116
x41813:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$361:	; Call 106 sscanf 0
x41817:	mov word [bp + 106], stdio_test$362	; 5: 199 70 106 108 163
x41822:	mov [bp + 108], bp	; 3: 137 110 108
x41825:	add bp, 106	; 3: 131 197 106
x41828:	mov di, bp	; 2: 137 239
x41830:	add di, 2	; 3: 131 199 2
x41833:	jmp sscanf	; 3: 233 172 7

stdio_test$362:	; PostCall 106

stdio_test$363:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$364:	; Parameter 106 string_3C25s3E0A# 6
x41836:	mov word [bp + 112], @12406$string_3C25s3E0A#	; 5: 199 70 112 217 170

stdio_test$365:	; Parameter 106 s 8
x41841:	mov [bp + 114], bp	; 3: 137 110 114
x41844:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$366:	; Call 106 printf 0
x41848:	mov word [bp + 106], stdio_test$367	; 5: 199 70 106 139 163
x41853:	mov [bp + 108], bp	; 3: 137 110 108
x41856:	add bp, 106	; 3: 131 197 106
x41859:	mov di, bp	; 2: 137 239
x41861:	add di, 2	; 3: 131 199 2
x41864:	jmp printf	; 3: 233 121 105

stdio_test$367:	; PostCall 106

stdio_test$368:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$369:	; Parameter 106 string_Please20write20the20patterns205B5Eabc5D3A20# 6
x41867:	mov word [bp + 112], @12408$string_Please20write20the20patterns205B5Eabc5D3A20#	; 5: 199 70 112 223 170

stdio_test$370:	; Call 106 printf 0
x41872:	mov word [bp + 106], stdio_test$371	; 5: 199 70 106 160 163
x41877:	mov [bp + 108], bp	; 3: 137 110 108
x41880:	add bp, 106	; 3: 131 197 106
x41883:	mov di, bp	; 2: 137 239
x41885:	jmp printf	; 3: 233 100 105

stdio_test$371:	; PostCall 106

stdio_test$372:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$373:	; Parameter 106 string_defabc# 6
x41888:	mov word [bp + 112], @12410$string_defabc#	; 5: 199 70 112 2 171

stdio_test$374:	; Parameter 106 string_255B5Eabc5D# 8
x41893:	mov word [bp + 114], @12411$string_255B5Eabc5D#	; 5: 199 70 114 9 171

stdio_test$375:	; Parameter 106 s 10
x41898:	mov [bp + 116], bp	; 3: 137 110 116
x41901:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$376:	; Call 106 sscanf 0
x41905:	mov word [bp + 106], stdio_test$377	; 5: 199 70 106 196 163
x41910:	mov [bp + 108], bp	; 3: 137 110 108
x41913:	add bp, 106	; 3: 131 197 106
x41916:	mov di, bp	; 2: 137 239
x41918:	add di, 2	; 3: 131 199 2
x41921:	jmp sscanf	; 3: 233 84 7

stdio_test$377:	; PostCall 106

stdio_test$378:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$379:	; Parameter 106 string_3C25s3E0A0A# 6
x41924:	mov word [bp + 112], @12413$string_3C25s3E0A0A#	; 5: 199 70 112 17 171

stdio_test$380:	; Parameter 106 s 8
x41929:	mov [bp + 114], bp	; 3: 137 110 114
x41932:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$381:	; Call 106 printf 0
x41936:	mov word [bp + 106], stdio_test$382	; 5: 199 70 106 227 163
x41941:	mov [bp + 108], bp	; 3: 137 110 108
x41944:	add bp, 106	; 3: 131 197 106
x41947:	mov di, bp	; 2: 137 239
x41949:	add di, 2	; 3: 131 199 2
x41952:	jmp printf	; 3: 233 33 105

stdio_test$382:	; PostCall 106

stdio_test$383:	; Return 0
x41955:	mov ax, [bp]	; 3: 139 70 0
x41958:	mov di, [bp + 4]	; 3: 139 126 4
x41961:	mov bp, [bp + 2]	; 3: 139 110 2
x41964:	jmp ax	; 2: 255 224

stdio_test$384:	; FunctionEnd stdio_test

@12166$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x41966:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

@12174$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x42001:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

@12182$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x42041:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

@12190$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x42087:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

@12198$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x42133:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

@12210$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x42186:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

@12218$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x42232:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

@12226$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x42284:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

@12234$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x42336:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

@12242$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x42395:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

@12250$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x42441:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

@12258$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x42493:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

@12266$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x42545:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

@12274$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x42604:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

@12282$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x42638:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

@12290$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x42678:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

@12291$string_Hello2C20World21#:
x42700:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@12295$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x42714:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12296$float8$123.456#:
x42740:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12297$float8$123.456#:
x42748:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12298$float8$123.456#:
x42756:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12299$float8$123456.1#:
x42764:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12300$float8$123456.1#:
x42772:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12302$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x42780:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12303$float8$123.456#:
x42811:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12304$float8$123.456#:
x42819:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12305$float8$123.456#:
x42827:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12306$float8$123456.1#:
x42835:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12307$float8$123456.1#:
x42843:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12309$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x42851:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12310$float8$123.456#:
x42882:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12311$float8$123.456#:
x42890:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12312$float8$123.456#:
x42898:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12313$float8$123.456#:
x42906:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12314$float8$123.456#:
x42914:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12316$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x42922:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12317$float8$123.456#:
x42958:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12318$float8$123.456#:
x42966:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12319$float8$123.456#:
x42974:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12320$float8$123.456#:
x42982:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12321$float8$123.456#:
x42990:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12323$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x42998:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12324$float8$123.456#:
x43039:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12325$float8$123.456#:
x43047:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12326$float8$123.456#:
x43055:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12327$float8$123.456#:
x43063:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12328$float8$123.456#:
x43071:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12330$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43079:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12331$float8$123.456#:
x43126:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12332$float8$123.456#:
x43134:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12333$float8$123.456#:
x43142:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12334$float8$123.456#:
x43150:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12335$float8$123.456#:
x43158:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12337$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x43166:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12338$float8$minus123.456#:
x43192:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12339$float8$minus123.456#:
x43200:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12340$float8$minus123.456#:
x43208:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12341$float8$minus0.000000123456#:
x43216:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12342$float8$minus0.000000123456#:
x43224:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12344$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x43232:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12345$float8$minus123.456#:
x43263:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12346$float8$minus123.456#:
x43271:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12347$float8$minus123.456#:
x43279:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12348$float8$minus0.000000123456#:
x43287:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12349$float8$minus0.000000123456#:
x43295:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12351$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x43303:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12352$float8$minus123.456#:
x43334:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12353$float8$minus123.456#:
x43342:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12354$float8$minus123.456#:
x43350:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12355$float8$minus123.456#:
x43358:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12356$float8$minus123.456#:
x43366:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12358$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x43374:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12359$float8$minus123.456#:
x43410:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12360$float8$minus123.456#:
x43418:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12361$float8$minus123.456#:
x43426:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12362$float8$minus123.456#:
x43434:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12363$float8$minus123.456#:
x43442:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12365$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x43450:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12366$float8$minus123.456#:
x43491:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12367$float8$minus123.456#:
x43499:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12368$float8$minus123.456#:
x43507:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12369$float8$minus123.456#:
x43515:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12370$float8$minus123.456#:
x43523:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12372$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43531:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12373$float8$minus123.456#:
x43578:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12374$float8$minus123.456#:
x43586:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12375$float8$minus123.456#:
x43594:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12376$float8$minus123.456#:
x43602:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12377$float8$minus123.456#:
x43610:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12388$string_Please20write20three20integers3A20#:
x43618:	db "Please write three integers: ", 0	; 30: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 114 101 101 32 105 110 116 101 103 101 114 115 58 32 0

@12390$string_1232045620789#:
x43648:	db "123 456 789", 0	; 12: 49 50 51 32 52 53 54 32 55 56 57 0

@12391$string_25i20252Ai2025i2025n#:
x43660:	db "%i %*i %i %n", 0	; 13: 37 105 32 37 42 105 32 37 105 32 37 110 0

@12396$string_3C25i3E203C25i3E203C25i3E0A#:
x43673:	db "<%i> <%i> <%i>", 10, 0	; 16: 60 37 105 62 32 60 37 105 62 32 60 37 105 62 10 0

@12401$string_Please20write20the20patterns205Babc5D3A20#:
x43689:	db "Please write the patterns [abc]: ", 0	; 34: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 97 98 99 93 58 32 0

@12403$string_abcdef#:
x43723:	db "abcdef", 0	; 7: 97 98 99 100 101 102 0

@12404$string_255Babc5D#:
x43730:	db "%[abc]", 0	; 7: 37 91 97 98 99 93 0

@12406$string_3C25s3E0A#:
x43737:	db "<%s>", 10, 0	; 6: 60 37 115 62 10 0

@12408$string_Please20write20the20patterns205B5Eabc5D3A20#:
x43743:	db "Please write the patterns [^abc]: ", 0	; 35: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 94 97 98 99 93 58 32 0

@12410$string_defabc#:
x43778:	db "defabc", 0	; 7: 100 101 102 97 98 99 0

@12411$string_255B5Eabc5D#:
x43785:	db "%[^abc]", 0	; 8: 37 91 94 97 98 99 93 0

@12413$string_3C25s3E0A0A#:
x43793:	db "<%s>", 10, 10, 0	; 7: 60 37 115 62 10 10 0

sscanf:	; address £temporary1767 format
x43800:	mov si, bp	; 2: 137 238
x43802:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1768 £temporary1767

sscanf$2:	; BinaryAdd arg_list £temporary1768 2
x43805:	add si, 2	; 3: 131 198 2
x43808:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x43811:	mov ax, [bp + 6]	; 3: 139 70 6
x43814:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x43817:	mov ax, [bp + 8]	; 3: 139 70 8
x43820:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x43823:	mov ax, [di + 10]	; 3: 139 69 10
x43826:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x43829:	mov word [di + 12], sscanf$8	; 5: 199 69 12 72 171
x43834:	mov [di + 14], bp	; 3: 137 109 14
x43837:	mov [di + 16], di	; 3: 137 125 16
x43840:	add di, 12	; 3: 131 199 12
x43843:	mov bp, di	; 2: 137 253
x43845:	nop	; 1: 144
x43846:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1770

sscanf$10:	; SetReturnValue £temporary1770

sscanf$11:	; Return £temporary1770
x43848:	mov ax, [bp]	; 3: 139 70 0
x43851:	mov di, [bp + 4]	; 3: 139 126 4
x43854:	mov bp, [bp + 2]	; 3: 139 110 2
x43857:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x43859:	mov word [g_inStatus], 1	; 6: 199 6 125 96 1 0

vsscanf$1:	; IntegralToIntegral £temporary1775 inString
x43865:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1775
x43868:	mov [g_inDevice], ax	; 3: 163 127 96

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x43871:	mov ax, [bp + 8]	; 3: 139 70 8
x43874:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x43877:	mov ax, [bp + 10]	; 3: 139 70 10
x43880:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x43883:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 121 171
x43888:	mov [bp + 14], bp	; 3: 137 110 14
x43891:	add bp, 12	; 3: 131 197 12
x43894:	jmp scanFormat	; 3: 233 8 181

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1776

vsscanf$9:	; SetReturnValue £temporary1776

vsscanf$10:	; Return £temporary1776
x43897:	mov ax, [bp]	; 3: 139 70 0
x43900:	mov di, [bp + 4]	; 3: 139 126 4
x43903:	mov bp, [bp + 2]	; 3: 139 110 2
x43906:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

string_test:	; Assign s string_Hello2C20World21#
x43908:	mov word [bp + 8], @9919$string_Hello2C20World21#	; 5: 199 70 8 11 178

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x43913:	mov word [bp + 218], @9928$string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 25 178

string_test$3:	; Parameter 212 s 8
x43919:	mov ax, [bp + 8]	; 3: 139 70 8
x43922:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x43926:	mov ax, [bp + 8]	; 3: 139 70 8
x43929:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x43933:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 174 171
x43939:	mov [bp + 224], bp	; 4: 137 174 224 0
x43943:	add bp, 222	; 4: 129 197 222 0
x43947:	jmp strlen	; 3: 233 144 225

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4530

string_test$9:	; Parameter 212 £temporary4530 10
x43950:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x43954:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 200 171
x43960:	mov [bp + 214], bp	; 4: 137 174 214 0
x43964:	add bp, 212	; 4: 129 197 212 0
x43968:	mov di, bp	; 2: 137 239
x43970:	add di, 4	; 3: 131 199 4
x43973:	jmp printf	; 3: 233 60 97

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x43976:	mov [bp + 218], bp	; 4: 137 174 218 0
x43980:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x43985:	mov ax, [bp + 8]	; 3: 139 70 8
x43988:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x43992:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 233 171
x43998:	mov [bp + 214], bp	; 4: 137 174 214 0
x44002:	add bp, 212	; 4: 129 197 212 0
x44006:	jmp strcpy	; 3: 233 11 179

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x44009:	mov [bp + 218], bp	; 4: 137 174 218 0
x44013:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x44018:	mov ax, [bp + 8]	; 3: 139 70 8
x44021:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x44025:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x44031:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 16 172
x44037:	mov [bp + 214], bp	; 4: 137 174 214 0
x44041:	add bp, 212	; 4: 129 197 212 0
x44045:	jmp strncpy	; 3: 233 37 8

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4534 -> u u 5
x44048:	mov si, bp	; 2: 137 238
x44050:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4534 -> u 0
x44053:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44057:	mov word [bp + 218], @9939$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 44 178

string_test$27:	; Parameter 212 t 8
x44063:	mov [bp + 220], bp	; 4: 137 174 220 0
x44067:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x44072:	mov [bp + 222], bp	; 4: 137 174 222 0
x44076:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x44081:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 71 172
x44087:	mov [bp + 214], bp	; 4: 137 174 214 0
x44091:	add bp, 212	; 4: 129 197 212 0
x44095:	mov di, bp	; 2: 137 239
x44097:	add di, 4	; 3: 131 199 4
x44100:	jmp printf	; 3: 233 189 96

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x44103:	mov [bp + 218], bp	; 4: 137 174 218 0
x44107:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x44112:	mov word [bp + 220], @9941$string_abc#	; 6: 199 134 220 0 64 178

string_test$34:	; Call 212 strcat 0
x44118:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 103 172
x44124:	mov [bp + 214], bp	; 4: 137 174 214 0
x44128:	add bp, 212	; 4: 129 197 212 0
x44132:	jmp strcat	; 3: 233 250 224

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x44135:	mov [bp + 218], bp	; 4: 137 174 218 0
x44139:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x44144:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 129 172
x44150:	mov [bp + 214], bp	; 4: 137 174 214 0
x44154:	add bp, 212	; 4: 129 197 212 0
x44158:	jmp strlen	; 3: 233 189 224

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4537

string_test$41:	; Assign i £temporary4537
x44161:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x44164:	mov [bp + 218], bp	; 4: 137 174 218 0
x44168:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x44173:	mov word [bp + 220], @9944$string_abc#	; 6: 199 134 220 0 68 178

string_test$45:	; Parameter 212 2 10
x44179:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x44185:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 170 172
x44191:	mov [bp + 214], bp	; 4: 137 174 214 0
x44195:	add bp, 212	; 4: 129 197 212 0
x44199:	jmp strncat	; 3: 233 220 7

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4539 i 2
x44202:	mov ax, [bp + 6]	; 3: 139 70 6
x44205:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4541 u £temporary4539
x44208:	mov si, bp	; 2: 137 238
x44210:	add si, 110	; 3: 131 198 110
x44213:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4540 -> £temporary4541 £temporary4541 0

string_test$51:	; Assign £temporary4540 -> £temporary4541 0
x44215:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44218:	mov word [bp + 218], @9955$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 72 178

string_test$54:	; Parameter 212 t 8
x44224:	mov [bp + 220], bp	; 4: 137 174 220 0
x44228:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x44233:	mov [bp + 222], bp	; 4: 137 174 222 0
x44237:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x44242:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 232 172
x44248:	mov [bp + 214], bp	; 4: 137 174 214 0
x44252:	add bp, 212	; 4: 129 197 212 0
x44256:	mov di, bp	; 2: 137 239
x44258:	add di, 4	; 3: 131 199 4
x44261:	jmp printf	; 3: 233 28 96

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x44264:	mov word [bp + 218], @9957$string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 92 178

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x44270:	mov ax, [bp + 8]	; 3: 139 70 8
x44273:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x44277:	mov [bp + 228], bp	; 4: 137 174 228 0
x44281:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x44286:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 15 173
x44292:	mov [bp + 222], bp	; 4: 137 174 222 0
x44296:	add bp, 220	; 4: 129 197 220 0
x44300:	jmp strcmp	; 3: 233 125 176

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4543

string_test$66:	; Parameter 212 £temporary4543 8
x44303:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x44307:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 41 173
x44313:	mov [bp + 214], bp	; 4: 137 174 214 0
x44317:	add bp, 212	; 4: 129 197 212 0
x44321:	mov di, bp	; 2: 137 239
x44323:	add di, 2	; 3: 131 199 2
x44326:	jmp printf	; 3: 233 219 95

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x44329:	mov word [bp + 218], @9960$string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 111 178

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x44335:	mov ax, [bp + 8]	; 3: 139 70 8
x44338:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x44342:	mov [bp + 228], bp	; 4: 137 174 228 0
x44346:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x44351:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x44357:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 86 173
x44363:	mov [bp + 222], bp	; 4: 137 174 222 0
x44367:	add bp, 220	; 4: 129 197 220 0
x44371:	jmp strncmp	; 3: 233 151 7

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4545

string_test$78:	; Parameter 212 £temporary4545 8
x44374:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x44378:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 112 173
x44384:	mov [bp + 214], bp	; 4: 137 174 214 0
x44388:	add bp, 212	; 4: 129 197 212 0
x44392:	mov di, bp	; 2: 137 239
x44394:	add di, 2	; 3: 131 199 2
x44397:	jmp printf	; 3: 233 148 95

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x44400:	mov ax, [bp + 8]	; 3: 139 70 8
x44403:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x44407:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x44413:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 142 173
x44419:	mov [bp + 214], bp	; 4: 137 174 214 0
x44423:	add bp, 212	; 4: 129 197 212 0
x44427:	jmp strchr	; 3: 233 47 116

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4547

string_test$87:	; Assign p £temporary4547
x44430:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x44434:	mov word [bp + 218], @9968$string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 134 178

string_test$90:	; Equal 93 p 0
x44440:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44445:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4553 p s
x44447:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44451:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x44454:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4553 -1
x44456:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4553 8
x44459:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x44463:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 197 173
x44469:	mov [bp + 214], bp	; 4: 137 174 214 0
x44473:	add bp, 212	; 4: 129 197 212 0
x44477:	mov di, bp	; 2: 137 239
x44479:	add di, 2	; 3: 131 199 2
x44482:	jmp printf	; 3: 233 63 95

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x44485:	mov ax, [bp + 8]	; 3: 139 70 8
x44488:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x44492:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x44498:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 227 173
x44504:	mov [bp + 214], bp	; 4: 137 174 214 0
x44508:	add bp, 212	; 4: 129 197 212 0
x44512:	jmp strrchr	; 3: 233 195 7

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4555

string_test$103:	; Assign p £temporary4555
x44515:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x44519:	mov word [bp + 218], @9986$string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 155 178

string_test$106:	; Equal 109 p 0
x44525:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44530:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4561 p s
x44532:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44536:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x44539:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4561 -1
x44541:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4561 8
x44544:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x44548:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 26 174
x44554:	mov [bp + 214], bp	; 4: 137 174 214 0
x44558:	add bp, 212	; 4: 129 197 212 0
x44562:	mov di, bp	; 2: 137 239
x44564:	add di, 2	; 3: 131 199 2
x44567:	jmp printf	; 3: 233 234 94

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x44570:	mov ax, [bp + 8]	; 3: 139 70 8
x44573:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x44577:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x44583:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 56 174
x44589:	mov [bp + 214], bp	; 4: 137 174 214 0
x44593:	add bp, 212	; 4: 129 197 212 0
x44597:	jmp strchr	; 3: 233 133 115

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4563

string_test$119:	; Assign p £temporary4563
x44600:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x44604:	mov word [bp + 218], @10004$string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 177 178

string_test$122:	; Equal 125 p 0
x44610:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44615:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4569 p s
x44617:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44621:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x44624:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4569 -1
x44626:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4569 8
x44629:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x44633:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 111 174
x44639:	mov [bp + 214], bp	; 4: 137 174 214 0
x44643:	add bp, 212	; 4: 129 197 212 0
x44647:	mov di, bp	; 2: 137 239
x44649:	add di, 2	; 3: 131 199 2
x44652:	jmp printf	; 3: 233 149 94

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x44655:	mov ax, [bp + 8]	; 3: 139 70 8
x44658:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x44662:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x44668:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 141 174
x44674:	mov [bp + 214], bp	; 4: 137 174 214 0
x44678:	add bp, 212	; 4: 129 197 212 0
x44682:	jmp strrchr	; 3: 233 25 7

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4571

string_test$135:	; Assign p £temporary4571
x44685:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x44689:	mov word [bp + 218], @10022$string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 198 178

string_test$138:	; Equal 141 p 0
x44695:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44700:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4577 p s
x44702:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44706:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x44709:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4577 -1
x44711:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4577 8
x44714:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x44718:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 196 174
x44724:	mov [bp + 214], bp	; 4: 137 174 214 0
x44728:	add bp, 212	; 4: 129 197 212 0
x44732:	mov di, bp	; 2: 137 239
x44734:	add di, 2	; 3: 131 199 2
x44737:	jmp printf	; 3: 233 64 94

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x44740:	mov ax, [bp + 8]	; 3: 139 70 8
x44743:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x44747:	mov word [bp + 220], @10037$string_Hello2C20World21#	; 6: 199 134 220 0 220 178

string_test$148:	; Parameter 212 20 10
x44753:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x44759:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 232 174
x44765:	mov [bp + 214], bp	; 4: 137 174 214 0
x44769:	add bp, 212	; 4: 129 197 212 0
x44773:	jmp memcpy	; 3: 233 254 227

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x44776:	mov [bp + 218], bp	; 4: 137 174 218 0
x44780:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x44785:	mov word [bp + 220], @10043$string_Hello2C20World21#	; 6: 199 134 220 0 234 178

string_test$154:	; Parameter 212 20 10
x44791:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x44797:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 14 175
x44803:	mov [bp + 214], bp	; 4: 137 174 214 0
x44807:	add bp, 212	; 4: 129 197 212 0
x44811:	jmp memmove	; 3: 233 229 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x44814:	mov [bp + 218], bp	; 4: 137 174 218 0
x44818:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x44823:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x44829:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x44835:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 52 175
x44841:	mov [bp + 214], bp	; 4: 137 174 214 0
x44845:	add bp, 212	; 4: 129 197 212 0
x44849:	jmp memset	; 3: 233 37 7

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4582 -> u u 19
x44852:	mov si, bp	; 2: 137 238
x44854:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4582 -> u 0
x44857:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x44861:	mov word [bp + 218], @10062$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 248 178

string_test$167:	; Parameter 212 s 8
x44867:	mov ax, [bp + 8]	; 3: 139 70 8
x44870:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x44874:	mov [bp + 222], bp	; 4: 137 174 222 0
x44878:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x44883:	mov [bp + 224], bp	; 4: 137 174 224 0
x44887:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x44892:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 114 175
x44898:	mov [bp + 214], bp	; 4: 137 174 214 0
x44902:	add bp, 212	; 4: 129 197 212 0
x44906:	mov di, bp	; 2: 137 239
x44908:	add di, 6	; 3: 131 199 6
x44911:	jmp printf	; 3: 233 146 93

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x44914:	mov ax, [bp + 8]	; 3: 139 70 8
x44917:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x44921:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x44927:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x44933:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 150 175
x44939:	mov [bp + 214], bp	; 4: 137 174 214 0
x44943:	add bp, 212	; 4: 129 197 212 0
x44947:	jmp memchr	; 3: 233 3 7

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4584

string_test$179:	; Assign p £temporary4584
x44950:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44954:	mov word [bp + 218], @10071$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 22 179

string_test$182:	; Equal 185 p 0
x44960:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44965:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4590 p s
x44967:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44971:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x44974:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4590 -1
x44976:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4590 8
x44979:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x44983:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 205 175
x44989:	mov [bp + 214], bp	; 4: 137 174 214 0
x44993:	add bp, 212	; 4: 129 197 212 0
x44997:	mov di, bp	; 2: 137 239
x44999:	add di, 2	; 3: 131 199 2
x45002:	jmp printf	; 3: 233 55 93

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x45005:	mov ax, [bp + 8]	; 3: 139 70 8
x45008:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x45012:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x45018:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x45024:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 241 175
x45030:	mov [bp + 214], bp	; 4: 137 174 214 0
x45034:	add bp, 212	; 4: 129 197 212 0
x45038:	jmp memchr	; 3: 233 168 6

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4592

string_test$196:	; Assign p £temporary4592
x45041:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x45045:	mov word [bp + 218], @10093$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 64 179

string_test$199:	; Equal 202 p 0
x45051:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45056:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4598 p s
x45058:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45062:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x45065:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4598 -1
x45067:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4598 8
x45070:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x45074:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 40 176
x45080:	mov [bp + 214], bp	; 4: 137 174 214 0
x45084:	add bp, 212	; 4: 129 197 212 0
x45088:	mov di, bp	; 2: 137 239
x45090:	add di, 2	; 3: 131 199 2
x45093:	jmp printf	; 3: 233 220 92

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_s3A202225s222C20t3A202225s220A# 6
x45096:	mov word [bp + 218], @10108$string_s3A202225s222C20t3A202225s220A#	; 6: 199 134 218 0 106 179

string_test$208:	; Parameter 212 s 8
x45102:	mov ax, [bp + 8]	; 3: 139 70 8
x45105:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$209:	; Parameter 212 t 10
x45109:	mov [bp + 222], bp	; 4: 137 174 222 0
x45113:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$210:	; Call 212 printf 0
x45118:	mov word [bp + 212], string_test$211	; 6: 199 134 212 0 84 176
x45124:	mov [bp + 214], bp	; 4: 137 174 214 0
x45128:	add bp, 212	; 4: 129 197 212 0
x45132:	mov di, bp	; 2: 137 239
x45134:	add di, 4	; 3: 131 199 4
x45137:	jmp printf	; 3: 233 176 92

string_test$211:	; PostCall 212

string_test$212:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$213:	; Parameter 212 string_strcmp28s2C20t29203D2025i0A# 6
x45140:	mov word [bp + 218], @10110$string_strcmp28s2C20t29203D2025i0A#	; 6: 199 134 218 0 124 179

string_test$214:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$215:	; Parameter 212 s 14
x45146:	mov ax, [bp + 8]	; 3: 139 70 8
x45149:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$216:	; Parameter 212 t 16
x45153:	mov [bp + 228], bp	; 4: 137 174 228 0
x45157:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$217:	; Call 212 strcmp 8
x45162:	mov word [bp + 220], string_test$218	; 6: 199 134 220 0 123 176
x45168:	mov [bp + 222], bp	; 4: 137 174 222 0
x45172:	add bp, 220	; 4: 129 197 220 0
x45176:	jmp strcmp	; 3: 233 17 173

string_test$218:	; PostCall 212

string_test$219:	; GetReturnValue £temporary4601

string_test$220:	; Parameter 212 £temporary4601 8
x45179:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$221:	; Call 212 printf 0
x45183:	mov word [bp + 212], string_test$222	; 6: 199 134 212 0 149 176
x45189:	mov [bp + 214], bp	; 4: 137 174 214 0
x45193:	add bp, 212	; 4: 129 197 212 0
x45197:	mov di, bp	; 2: 137 239
x45199:	add di, 2	; 3: 131 199 2
x45202:	jmp printf	; 3: 233 111 92

string_test$222:	; PostCall 212

string_test$223:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$224:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x45205:	mov word [bp + 218], @10113$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 143 179

string_test$225:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$226:	; Parameter 212 s 14
x45211:	mov ax, [bp + 8]	; 3: 139 70 8
x45214:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$227:	; Parameter 212 t 16
x45218:	mov [bp + 228], bp	; 4: 137 174 228 0
x45222:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$228:	; Parameter 212 20 18
x45227:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$229:	; Call 212 memcmp 8
x45233:	mov word [bp + 220], string_test$230	; 6: 199 134 220 0 194 176
x45239:	mov [bp + 222], bp	; 4: 137 174 222 0
x45243:	add bp, 220	; 4: 129 197 220 0
x45247:	jmp memcmp	; 3: 233 42 6

string_test$230:	; PostCall 212

string_test$231:	; GetReturnValue £temporary4603

string_test$232:	; Parameter 212 £temporary4603 8
x45250:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$233:	; Call 212 printf 0
x45254:	mov word [bp + 212], string_test$234	; 6: 199 134 212 0 220 176
x45260:	mov [bp + 214], bp	; 4: 137 174 214 0
x45264:	add bp, 212	; 4: 129 197 212 0
x45268:	mov di, bp	; 2: 137 239
x45270:	add di, 2	; 3: 131 199 2
x45273:	jmp printf	; 3: 233 40 92

string_test$234:	; PostCall 212

string_test$235:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$236:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45276:	mov word [bp + 218], @10120$string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 183 179

string_test$237:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$238:	; Parameter 212 s 14
x45282:	mov ax, [bp + 8]	; 3: 139 70 8
x45285:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$239:	; Parameter 212 string_Hello2C20C# 16
x45289:	mov word [bp + 228], @10121$string_Hello2C20C#	; 6: 199 134 228 0 211 179

string_test$240:	; Call 212 strspn 8
x45295:	mov word [bp + 220], string_test$241	; 6: 199 134 220 0 0 177
x45301:	mov [bp + 222], bp	; 4: 137 174 222 0
x45305:	add bp, 220	; 4: 129 197 220 0
x45309:	jmp strspn	; 3: 233 88 6

string_test$241:	; PostCall 212

string_test$242:	; GetReturnValue £temporary4605

string_test$243:	; Parameter 212 £temporary4605 8
x45312:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$244:	; Call 212 printf 0
x45316:	mov word [bp + 212], string_test$245	; 6: 199 134 212 0 26 177
x45322:	mov [bp + 214], bp	; 4: 137 174 214 0
x45326:	add bp, 212	; 4: 129 197 212 0
x45330:	mov di, bp	; 2: 137 239
x45332:	add di, 2	; 3: 131 199 2
x45335:	jmp printf	; 3: 233 234 91

string_test$245:	; PostCall 212

string_test$246:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$247:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45338:	mov word [bp + 218], @10124$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 220 179

string_test$248:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$249:	; Parameter 212 s 14
x45344:	mov ax, [bp + 8]	; 3: 139 70 8
x45347:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$250:	; Parameter 212 string_Hello2C20C# 16
x45351:	mov word [bp + 228], @10125$string_Hello2C20C#	; 6: 199 134 228 0 249 179

string_test$251:	; Call 212 strcspn 8
x45357:	mov word [bp + 220], string_test$252	; 6: 199 134 220 0 62 177
x45363:	mov [bp + 222], bp	; 4: 137 174 222 0
x45367:	add bp, 220	; 4: 129 197 220 0
x45371:	jmp strcspn	; 3: 233 122 6

string_test$252:	; PostCall 212

string_test$253:	; GetReturnValue £temporary4607

string_test$254:	; Parameter 212 £temporary4607 8
x45374:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$255:	; Call 212 printf 0
x45378:	mov word [bp + 212], string_test$256	; 6: 199 134 212 0 88 177
x45384:	mov [bp + 214], bp	; 4: 137 174 214 0
x45388:	add bp, 212	; 4: 129 197 212 0
x45392:	mov di, bp	; 2: 137 239
x45394:	add di, 2	; 3: 131 199 2
x45397:	jmp printf	; 3: 233 172 91

string_test$256:	; PostCall 212

string_test$257:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$258:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x45400:	mov word [bp + 218], @10128$string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 2 180

string_test$259:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$260:	; Parameter 212 errno 14
x45406:	mov ax, [errno]	; 3: 161 230 10
x45409:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$261:	; Call 212 strerror 8
x45413:	mov word [bp + 220], string_test$262	; 6: 199 134 220 0 118 177
x45419:	mov [bp + 222], bp	; 4: 137 174 222 0
x45423:	add bp, 220	; 4: 129 197 220 0
x45427:	jmp strerror	; 3: 233 168 130

string_test$262:	; PostCall 212

string_test$263:	; GetReturnValue £temporary4609

string_test$264:	; Parameter 212 £temporary4609 8
x45430:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$265:	; Call 212 printf 0
x45434:	mov word [bp + 212], string_test$266	; 6: 199 134 212 0 144 177
x45440:	mov [bp + 214], bp	; 4: 137 174 214 0
x45444:	add bp, 212	; 4: 129 197 212 0
x45448:	mov di, bp	; 2: 137 239
x45450:	add di, 2	; 3: 131 199 2
x45453:	jmp printf	; 3: 233 116 91

string_test$266:	; PostCall 212

string_test$267:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$268:	; Parameter 212 s 6
x45456:	mov ax, [bp + 8]	; 3: 139 70 8
x45459:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$269:	; Parameter 212 string_2C# 8
x45463:	mov word [bp + 220], @10131$string_2C#	; 6: 199 134 220 0 26 180

string_test$270:	; Call 212 strtok 0
x45469:	mov word [bp + 212], string_test$271	; 6: 199 134 212 0 174 177
x45475:	mov [bp + 214], bp	; 4: 137 174 214 0
x45479:	add bp, 212	; 4: 129 197 212 0
x45483:	jmp strtok	; 3: 233 106 6

string_test$271:	; PostCall 212

string_test$272:	; GetReturnValue £temporary4611

string_test$273:	; Assign p £temporary4611
x45486:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$274:	; Equal 288 p 0
x45490:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45495:	je string_test$288	; 2: 116 71

string_test$275:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$276:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x45497:	mov word [bp + 218], @10137$string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 28 180

string_test$277:	; Parameter 212 p 8
x45503:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45507:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$278:	; Call 212 printf 0
x45511:	mov word [bp + 212], string_test$279	; 6: 199 134 212 0 221 177
x45517:	mov [bp + 214], bp	; 4: 137 174 214 0
x45521:	add bp, 212	; 4: 129 197 212 0
x45525:	mov di, bp	; 2: 137 239
x45527:	add di, 2	; 3: 131 199 2
x45530:	jmp printf	; 3: 233 39 91

string_test$279:	; PostCall 212

string_test$280:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$281:	; Parameter 212 0 6
x45533:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$282:	; Parameter 212 string_2C# 8
x45539:	mov word [bp + 220], @10142$string_2C#	; 6: 199 134 220 0 51 180

string_test$283:	; Call 212 strtok 0
x45545:	mov word [bp + 212], string_test$284	; 6: 199 134 212 0 250 177
x45551:	mov [bp + 214], bp	; 4: 137 174 214 0
x45555:	add bp, 212	; 4: 129 197 212 0
x45559:	jmp strtok	; 3: 233 30 6

string_test$284:	; PostCall 212

string_test$285:	; GetReturnValue £temporary4614

string_test$286:	; Assign p £temporary4614
x45562:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$287:	; Goto 274
x45566:	jmp string_test$274	; 2: 235 178

string_test$288:	; Return 0
x45568:	mov ax, [bp]	; 3: 139 70 0
x45571:	mov di, [bp + 4]	; 3: 139 126 4
x45574:	mov bp, [bp + 2]	; 3: 139 110 2
x45577:	jmp ax	; 2: 255 224

string_test$289:	; FunctionEnd string_test

@9919$string_Hello2C20World21#:
x45579:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9928$string_strlen282225s2229203D2025i0A#:
x45593:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

@9939$string_t203D202225s222C20u203D202225s220A#:
x45612:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9941$string_abc#:
x45632:	db "abc", 0	; 4: 97 98 99 0

@9944$string_abc#:
x45636:	db "abc", 0	; 4: 97 98 99 0

@9955$string_t203D202225s222C20u203D202225s220A#:
x45640:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9957$string_strcmp28s2C20u29203D2025i0A#:
x45660:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

@9960$string_strncmp28s2C20u2C20229203D2025i0A#:
x45679:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

@9968$string_strchr28s2C2027l2729203D2025i0A#:
x45702:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9986$string_strrchr28s2C2027l2729203D2025i0A#:
x45723:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@10004$string_strchr28s2C2027x2729203D2025i0A#:
x45745:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@10022$string_strrchr28s2C2027x2729203D2025i0A#:
x45766:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@10037$string_Hello2C20World21#:
x45788:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@10043$string_Hello2C20World21#:
x45802:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@10062$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x45816:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@10071$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45846:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@10093$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45888:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@10108$string_s3A202225s222C20t3A202225s220A#:
x45930:	db "s: ", 34, "%s", 34, ", t: ", 34, "%s", 34, 10, 0	; 18: 115 58 32 34 37 115 34 44 32 116 58 32 34 37 115 34 10 0

@10110$string_strcmp28s2C20t29203D2025i0A#:
x45948:	db "strcmp(s, t) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 116 41 32 61 32 37 105 10 0

@10113$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x45967:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@10120$string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x46007:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@10121$string_Hello2C20C#:
x46035:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@10124$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x46044:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@10125$string_Hello2C20C#:
x46073:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@10128$string_strerror28errno29203D202225s220A#:
x46082:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

@10131$string_2C#:
x46106:	db ",", 0	; 2: 44 0

@10137$string_strtok28s2C20222C2229203D202225s220A#:
x46108:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

@10142$string_2C#:
x46131:	db ",", 0	; 2: 44 0

strncpy:	; Assign index 0
x46133:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x46138:	mov ax, [bp + 10]	; 3: 139 70 10
x46141:	cmp [bp + 12], ax	; 3: 57 70 12
x46144:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3918 source index
x46146:	mov si, [bp + 8]	; 3: 139 118 8
x46149:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3917 -> £temporary3918 £temporary3918 0

strncpy$4:	; Equal 12 £temporary3917 -> £temporary3918 0
x46152:	cmp byte [si], 0	; 3: 128 60 0
x46155:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3923 target index
x46157:	mov si, [bp + 6]	; 3: 139 118 6
x46160:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3922 -> £temporary3923 £temporary3923 0

strncpy$7:	; BinaryAdd £temporary3925 source index
x46163:	mov di, [bp + 8]	; 3: 139 126 8
x46166:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3924 -> £temporary3925 £temporary3925 0

strncpy$9:	; Assign £temporary3922 -> £temporary3923 £temporary3924 -> £temporary3925
x46169:	mov al, [di]	; 2: 138 5
x46171:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x46173:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x46176:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x46178:	mov ax, [bp + 10]	; 3: 139 70 10
x46181:	cmp [bp + 12], ax	; 3: 57 70 12
x46184:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3929 target index
x46186:	mov si, [bp + 6]	; 3: 139 118 6
x46189:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3928 -> £temporary3929 £temporary3929 0

strncpy$15:	; Assign £temporary3928 -> £temporary3929 0
x46192:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x46195:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x46198:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x46200:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x46203:	mov ax, [bp]	; 3: 139 70 0
x46206:	mov di, [bp + 4]	; 3: 139 126 4
x46209:	mov bp, [bp + 2]	; 3: 139 110 2
x46212:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x46214:	mov ax, [bp + 6]	; 3: 139 70 6
x46217:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x46220:	mov word [bp + 14], strncat$3	; 5: 199 70 14 154 180
x46225:	mov [bp + 16], bp	; 3: 137 110 16
x46228:	add bp, 14	; 3: 131 197 14
x46231:	jmp strlen	; 3: 233 164 216

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3944

strncat$5:	; Assign targetLength £temporary3944
x46234:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x46237:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3945 size 1
x46242:	mov ax, [bp + 10]	; 3: 139 70 10
x46245:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3945
x46246:	cmp [bp + 12], ax	; 3: 57 70 12
x46249:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3948 source index
x46251:	mov si, [bp + 8]	; 3: 139 118 8
x46254:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3947 -> £temporary3948 £temporary3948 0

strncat$11:	; Equal 20 £temporary3947 -> £temporary3948 0
x46257:	cmp byte [si], 0	; 3: 128 60 0
x46260:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3952 targetLength index
x46262:	mov ax, [bp + 14]	; 3: 139 70 14
x46265:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3954 target £temporary3952
x46268:	mov si, [bp + 6]	; 3: 139 118 6
x46271:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3953 -> £temporary3954 £temporary3954 0

strncat$15:	; BinaryAdd £temporary3956 source index
x46273:	mov di, [bp + 8]	; 3: 139 126 8
x46276:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3955 -> £temporary3956 £temporary3956 0

strncat$17:	; Assign £temporary3953 -> £temporary3954 £temporary3955 -> £temporary3956
x46279:	mov al, [di]	; 2: 138 5
x46281:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x46283:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x46286:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3957 targetLength size
x46288:	mov ax, [bp + 14]	; 3: 139 70 14
x46291:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3958 £temporary3957 1
x46294:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3960 target £temporary3958
x46295:	mov si, [bp + 6]	; 3: 139 118 6
x46298:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3959 -> £temporary3960 £temporary3960 0

strncat$24:	; Assign £temporary3959 -> £temporary3960 0
x46300:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x46303:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x46306:	mov ax, [bp]	; 3: 139 70 0
x46309:	mov di, [bp + 4]	; 3: 139 126 4
x46312:	mov bp, [bp + 2]	; 3: 139 110 2
x46315:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x46317:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 36 index size
x46322:	mov ax, [bp + 10]	; 3: 139 70 10
x46325:	cmp [bp + 12], ax	; 3: 57 70 12
x46328:	jge strncmp$36	; 4: 15 141 156 0

strncmp$2:	; BinaryAdd £temporary3990 left index
x46332:	mov si, [bp + 6]	; 3: 139 118 6
x46335:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3989 -> £temporary3990 £temporary3990 0

strncmp$4:	; NotEqual 10 £temporary3989 -> £temporary3990 0
x46338:	cmp byte [si], 0	; 3: 128 60 0
x46341:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3993 right index
x46343:	mov si, [bp + 8]	; 3: 139 118 8
x46346:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3992 -> £temporary3993 £temporary3993 0

strncmp$7:	; NotEqual 10 £temporary3992 -> £temporary3993 0
x46349:	cmp byte [si], 0	; 3: 128 60 0
x46352:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x46354:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x46357:	mov ax, [bp]	; 3: 139 70 0
x46360:	mov di, [bp + 4]	; 3: 139 126 4
x46363:	mov bp, [bp + 2]	; 3: 139 110 2
x46366:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3997 left index
x46368:	mov si, [bp + 6]	; 3: 139 118 6
x46371:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3996 -> £temporary3997 £temporary3997 0

strncmp$12:	; NotEqual 15 £temporary3996 -> £temporary3997 0
x46374:	cmp byte [si], 0	; 3: 128 60 0
x46377:	jne strncmp$15	; 2: 117 14

strncmp$13:	; SetReturnValue -1
x46379:	mov bx, -1	; 3: 187 255 255

strncmp$14:	; Return -1
x46382:	mov ax, [bp]	; 3: 139 70 0
x46385:	mov di, [bp + 4]	; 3: 139 126 4
x46388:	mov bp, [bp + 2]	; 3: 139 110 2
x46391:	jmp ax	; 2: 255 224

strncmp$15:	; BinaryAdd £temporary4000 right index
x46393:	mov si, [bp + 8]	; 3: 139 118 8
x46396:	add si, [bp + 12]	; 3: 3 118 12

strncmp$16:	; Deref £temporary3999 -> £temporary4000 £temporary4000 0

strncmp$17:	; NotEqual 20 £temporary3999 -> £temporary4000 0
x46399:	cmp byte [si], 0	; 3: 128 60 0
x46402:	jne strncmp$20	; 2: 117 14

strncmp$18:	; SetReturnValue 1
x46404:	mov bx, 1	; 3: 187 1 0

strncmp$19:	; Return 1
x46407:	mov ax, [bp]	; 3: 139 70 0
x46410:	mov di, [bp + 4]	; 3: 139 126 4
x46413:	mov bp, [bp + 2]	; 3: 139 110 2
x46416:	jmp ax	; 2: 255 224

strncmp$20:	; BinaryAdd £temporary4003 left index
x46418:	mov si, [bp + 6]	; 3: 139 118 6
x46421:	add si, [bp + 12]	; 3: 3 118 12

strncmp$21:	; Deref £temporary4002 -> £temporary4003 £temporary4003 0

strncmp$22:	; BinaryAdd £temporary4005 right index
x46424:	mov di, [bp + 8]	; 3: 139 126 8
x46427:	add di, [bp + 12]	; 3: 3 126 12

strncmp$23:	; Deref £temporary4004 -> £temporary4005 £temporary4005 0

strncmp$24:	; SignedGreaterThanEqual 27 £temporary4002 -> £temporary4003 £temporary4004 -> £temporary4005
x46430:	mov al, [di]	; 2: 138 5
x46432:	cmp [si], al	; 2: 56 4
x46434:	jge strncmp$27	; 2: 125 14

strncmp$25:	; SetReturnValue -1
x46436:	mov bx, -1	; 3: 187 255 255

strncmp$26:	; Return -1
x46439:	mov ax, [bp]	; 3: 139 70 0
x46442:	mov di, [bp + 4]	; 3: 139 126 4
x46445:	mov bp, [bp + 2]	; 3: 139 110 2
x46448:	jmp ax	; 2: 255 224

strncmp$27:	; BinaryAdd £temporary4008 left index
x46450:	mov si, [bp + 6]	; 3: 139 118 6
x46453:	add si, [bp + 12]	; 3: 3 118 12

strncmp$28:	; Deref £temporary4007 -> £temporary4008 £temporary4008 0

strncmp$29:	; BinaryAdd £temporary4010 right index
x46456:	mov di, [bp + 8]	; 3: 139 126 8
x46459:	add di, [bp + 12]	; 3: 3 126 12

strncmp$30:	; Deref £temporary4009 -> £temporary4010 £temporary4010 0

strncmp$31:	; SignedLessThanEqual 34 £temporary4007 -> £temporary4008 £temporary4009 -> £temporary4010
x46462:	mov al, [di]	; 2: 138 5
x46464:	cmp [si], al	; 2: 56 4
x46466:	jle strncmp$34	; 2: 126 14

strncmp$32:	; SetReturnValue 1
x46468:	mov bx, 1	; 3: 187 1 0

strncmp$33:	; Return 1
x46471:	mov ax, [bp]	; 3: 139 70 0
x46474:	mov di, [bp + 4]	; 3: 139 126 4
x46477:	mov bp, [bp + 2]	; 3: 139 110 2
x46480:	jmp ax	; 2: 255 224

strncmp$34:	; Increment index
x46482:	inc word [bp + 12]	; 3: 255 70 12

strncmp$35:	; Goto 1
x46485:	jmp strncmp$1	; 3: 233 90 255

strncmp$36:	; SetReturnValue 0
x46488:	mov bx, 0	; 3: 187 0 0

strncmp$37:	; Return 0
x46491:	mov ax, [bp]	; 3: 139 70 0
x46494:	mov di, [bp + 4]	; 3: 139 126 4
x46497:	mov bp, [bp + 2]	; 3: 139 110 2
x46500:	jmp ax	; 2: 255 224

strncmp$38:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x46502:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary4023 i
x46507:	mov ax, [bp + 8]	; 3: 139 70 8
x46510:	cmp ax, 0	; 3: 131 248 0
x46513:	jge strrchr$2	; 2: 125 4
x46515:	neg ax	; 2: 247 216
x46517:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary4023
x46519:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x46522:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary4025 text index
x46527:	mov si, [bp + 6]	; 3: 139 118 6
x46530:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary4024 -> £temporary4025 £temporary4025 0

strrchr$6:	; Equal 16 £temporary4024 -> £temporary4025 0
x46533:	cmp byte [si], 0	; 3: 128 60 0
x46536:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary4029 text index
x46538:	mov si, [bp + 6]	; 3: 139 118 6
x46541:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary4028 -> £temporary4029 £temporary4029 0

strrchr$9:	; NotEqual 14 £temporary4028 -> £temporary4029 c
x46544:	mov al, [bp + 14]	; 3: 138 70 14
x46547:	cmp [si], al	; 2: 56 4
x46549:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary4032 text index
x46551:	mov si, [bp + 6]	; 3: 139 118 6
x46554:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary4031 -> £temporary4032 £temporary4032 0

strrchr$12:	; address £temporary4033 £temporary4031 -> £temporary4032

strrchr$13:	; Assign result £temporary4033
x46557:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x46560:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x46563:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x46565:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x46568:	mov ax, [bp]	; 3: 139 70 0
x46571:	mov di, [bp + 4]	; 3: 139 126 4
x46574:	mov bp, [bp + 2]	; 3: 139 110 2
x46577:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary4156 target
x46579:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary4156
x46582:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary4157 source
x46585:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary4157
x46588:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x46591:	mov ax, [bp + 6]	; 3: 139 70 6
x46594:	cmp [bp + 8], ax	; 3: 57 70 8
x46597:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x46599:	mov ax, [bp + 10]	; 3: 139 70 10
x46602:	dec ax	; 1: 72
x46603:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x46606:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x46610:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary4163 charTarget index
x46612:	mov si, [bp + 12]	; 3: 139 118 12
x46615:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary4162 -> £temporary4163 £temporary4163 0

memmove$9:	; BinaryAdd £temporary4165 charSource index
x46618:	mov di, [bp + 14]	; 3: 139 126 14
x46621:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary4164 -> £temporary4165 £temporary4165 0

memmove$11:	; Assign £temporary4162 -> £temporary4163 £temporary4164 -> £temporary4165
x46624:	mov al, [di]	; 2: 138 5
x46626:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x46628:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x46631:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x46633:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x46638:	mov ax, [bp + 10]	; 3: 139 70 10
x46641:	cmp [bp + 16], ax	; 3: 57 70 16
x46644:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary4169 charTarget index
x46646:	mov si, [bp + 12]	; 3: 139 118 12
x46649:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary4168 -> £temporary4169 £temporary4169 0

memmove$18:	; BinaryAdd £temporary4171 charSource index
x46652:	mov di, [bp + 14]	; 3: 139 126 14
x46655:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary4170 -> £temporary4171 £temporary4171 0

memmove$20:	; Assign £temporary4168 -> £temporary4169 £temporary4170 -> £temporary4171
x46658:	mov al, [di]	; 2: 138 5
x46660:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x46662:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x46665:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary4172 target
x46667:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary4172

memmove$25:	; Return £temporary4172
x46670:	mov ax, [bp]	; 3: 139 70 0
x46673:	mov di, [bp + 4]	; 3: 139 126 4
x46676:	mov bp, [bp + 2]	; 3: 139 110 2
x46679:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary4198 block
x46681:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary4198
x46684:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary4199 i
x46687:	mov ax, [bp + 8]	; 3: 139 70 8
x46690:	cmp ax, 0	; 3: 131 248 0
x46693:	jge memset$3	; 2: 125 4
x46695:	neg ax	; 2: 247 216
x46697:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary4199
x46699:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x46702:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x46707:	mov ax, [bp + 10]	; 3: 139 70 10
x46710:	cmp [bp + 15], ax	; 3: 57 70 15
x46713:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary4203 charBlock index
x46715:	mov si, [bp + 12]	; 3: 139 118 12
x46718:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary4202 -> £temporary4203 £temporary4203 0

memset$8:	; Assign £temporary4202 -> £temporary4203 c
x46721:	mov al, [bp + 14]	; 3: 138 70 14
x46724:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x46726:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x46729:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x46731:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x46734:	mov ax, [bp]	; 3: 139 70 0
x46737:	mov di, [bp + 4]	; 3: 139 126 4
x46740:	mov bp, [bp + 2]	; 3: 139 110 2
x46743:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary4187 block
x46745:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary4187
x46748:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary4188 i
x46751:	mov ax, [bp + 8]	; 3: 139 70 8
x46754:	cmp ax, 0	; 3: 131 248 0
x46757:	jge memchr$3	; 2: 125 4
x46759:	neg ax	; 2: 247 216
x46761:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary4188
x46763:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x46766:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x46771:	mov ax, [bp + 10]	; 3: 139 70 10
x46774:	cmp [bp + 12], ax	; 3: 57 70 12
x46777:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary4192 charBlock index
x46779:	mov si, [bp + 14]	; 3: 139 118 14
x46782:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary4191 -> £temporary4192 £temporary4192 0

memchr$8:	; NotEqual 15 £temporary4191 -> £temporary4192 c
x46785:	mov al, [bp + 16]	; 3: 138 70 16
x46788:	cmp [si], al	; 2: 56 4
x46790:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary4195 charBlock index
x46792:	mov bx, [bp + 14]	; 3: 139 94 14
x46795:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary4194 -> £temporary4195 £temporary4195 0

memchr$11:	; address £temporary4196 £temporary4194 -> £temporary4195

memchr$12:	; IntegralToIntegral £temporary4197 £temporary4196

memchr$13:	; SetReturnValue £temporary4197

memchr$14:	; Return £temporary4197
x46798:	mov ax, [bp]	; 3: 139 70 0
x46801:	mov di, [bp + 4]	; 3: 139 126 4
x46804:	mov bp, [bp + 2]	; 3: 139 110 2
x46807:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x46809:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x46812:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x46814:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x46817:	mov ax, [bp]	; 3: 139 70 0
x46820:	mov di, [bp + 4]	; 3: 139 126 4
x46823:	mov bp, [bp + 2]	; 3: 139 110 2
x46826:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary4173 left
x46828:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary4173
x46831:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary4174 right
x46834:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary4174
x46837:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x46840:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x46845:	mov ax, [bp + 10]	; 3: 139 70 10
x46848:	cmp [bp + 16], ax	; 3: 57 70 16
x46851:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary4178 charLeft index
x46853:	mov si, [bp + 12]	; 3: 139 118 12
x46856:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary4177 -> £temporary4178 £temporary4178 0

memcmp$8:	; BinaryAdd £temporary4180 charRight index
x46859:	mov di, [bp + 14]	; 3: 139 126 14
x46862:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary4179 -> £temporary4180 £temporary4180 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary4177 -> £temporary4178 £temporary4179 -> £temporary4180
x46865:	mov al, [di]	; 2: 138 5
x46867:	cmp [si], al	; 2: 56 4
x46869:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x46871:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x46874:	mov ax, [bp]	; 3: 139 70 0
x46877:	mov di, [bp + 4]	; 3: 139 126 4
x46880:	mov bp, [bp + 2]	; 3: 139 110 2
x46883:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary4183 charLeft index
x46885:	mov si, [bp + 12]	; 3: 139 118 12
x46888:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary4182 -> £temporary4183 £temporary4183 0

memcmp$15:	; BinaryAdd £temporary4185 charRight index
x46891:	mov di, [bp + 14]	; 3: 139 126 14
x46894:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary4184 -> £temporary4185 £temporary4185 0

memcmp$17:	; SignedLessThanEqual 20 £temporary4182 -> £temporary4183 £temporary4184 -> £temporary4185
x46897:	mov al, [di]	; 2: 138 5
x46899:	cmp [si], al	; 2: 56 4
x46901:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x46903:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x46906:	mov ax, [bp]	; 3: 139 70 0
x46909:	mov di, [bp + 4]	; 3: 139 126 4
x46912:	mov bp, [bp + 2]	; 3: 139 110 2
x46915:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x46917:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x46920:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x46922:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x46925:	mov ax, [bp]	; 3: 139 70 0
x46928:	mov di, [bp + 4]	; 3: 139 126 4
x46931:	mov bp, [bp + 2]	; 3: 139 110 2
x46934:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x46936:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary4035 mainString index
x46941:	mov si, [bp + 6]	; 3: 139 118 6
x46944:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary4034 -> £temporary4035 £temporary4035 0

strspn$3:	; Equal 18 £temporary4034 -> £temporary4035 0
x46947:	cmp byte [si], 0	; 3: 128 60 0
x46950:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x46952:	mov ax, [bp + 8]	; 3: 139 70 8
x46955:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary4039 mainString index
x46958:	mov si, [bp + 6]	; 3: 139 118 6
x46961:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary4038 -> £temporary4039 £temporary4039 0

strspn$8:	; IntegralToIntegral £temporary4040 £temporary4038 -> £temporary4039
x46964:	mov al, [si]	; 2: 138 4
x46966:	and ax, 255	; 3: 37 255 0
x46969:	cmp al, 0	; 2: 60 0
x46971:	jge strspn$9	; 2: 125 4
x46973:	neg al	; 2: 246 216
x46975:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary4040 8
x46977:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x46980:	mov word [bp + 12], strspn$11	; 5: 199 70 12 146 183
x46985:	mov [bp + 14], bp	; 3: 137 110 14
x46988:	add bp, 12	; 3: 131 197 12
x46991:	jmp strchr	; 3: 233 43 106

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary4041

strspn$13:	; NotEqual 16 £temporary4041 0
x46994:	cmp bx, 0	; 3: 131 251 0
x46997:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x46999:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x47002:	mov ax, [bp]	; 3: 139 70 0
x47005:	mov di, [bp + 4]	; 3: 139 126 4
x47008:	mov bp, [bp + 2]	; 3: 139 110 2
x47011:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x47013:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x47016:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x47018:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x47021:	mov ax, [bp]	; 3: 139 70 0
x47024:	mov di, [bp + 4]	; 3: 139 126 4
x47027:	mov bp, [bp + 2]	; 3: 139 110 2
x47030:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x47032:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary4046 mainString index
x47037:	mov si, [bp + 6]	; 3: 139 118 6
x47040:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary4045 -> £temporary4046 £temporary4046 0

strcspn$3:	; Equal 18 £temporary4045 -> £temporary4046 0
x47043:	cmp byte [si], 0	; 3: 128 60 0
x47046:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x47048:	mov ax, [bp + 8]	; 3: 139 70 8
x47051:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary4050 mainString index
x47054:	mov si, [bp + 6]	; 3: 139 118 6
x47057:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary4049 -> £temporary4050 £temporary4050 0

strcspn$8:	; IntegralToIntegral £temporary4051 £temporary4049 -> £temporary4050
x47060:	mov al, [si]	; 2: 138 4
x47062:	and ax, 255	; 3: 37 255 0
x47065:	cmp al, 0	; 2: 60 0
x47067:	jge strcspn$9	; 2: 125 4
x47069:	neg al	; 2: 246 216
x47071:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary4051 8
x47073:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x47076:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 242 183
x47081:	mov [bp + 14], bp	; 3: 137 110 14
x47084:	add bp, 12	; 3: 131 197 12
x47087:	jmp strchr	; 3: 233 203 105

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary4052

strcspn$13:	; Equal 16 £temporary4052 0
x47090:	cmp bx, 0	; 3: 131 251 0
x47093:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x47095:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x47098:	mov ax, [bp]	; 3: 139 70 0
x47101:	mov di, [bp + 4]	; 3: 139 126 4
x47104:	mov bp, [bp + 2]	; 3: 139 110 2
x47107:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x47109:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x47112:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x47114:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x47117:	mov ax, [bp]	; 3: 139 70 0
x47120:	mov di, [bp + 4]	; 3: 139 126 4
x47123:	mov bp, [bp + 2]	; 3: 139 110 2
x47126:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x47128:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x47132:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary4102 -> string string 0
x47136:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary4102 -> string 0
x47139:	cmp byte [si], 0	; 3: 128 60 0
x47142:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x47144:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x47147:	mov ax, [bp]	; 3: 139 70 0
x47150:	mov di, [bp + 4]	; 3: 139 126 4
x47153:	mov bp, [bp + 2]	; 3: 139 110 2
x47156:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x47158:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary4105 string index
x47163:	mov si, [bp + 6]	; 3: 139 118 6
x47166:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary4104 -> £temporary4105 £temporary4105 0

strtok$8:	; Equal 31 £temporary4104 -> £temporary4105 0
x47169:	cmp byte [si], 0	; 3: 128 60 0
x47172:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x47174:	mov ax, [bp + 8]	; 3: 139 70 8
x47177:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary4109 string index
x47180:	mov si, [bp + 6]	; 3: 139 118 6
x47183:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary4108 -> £temporary4109 £temporary4109 0

strtok$13:	; IntegralToIntegral £temporary4110 £temporary4108 -> £temporary4109
x47186:	mov al, [si]	; 2: 138 4
x47188:	and ax, 255	; 3: 37 255 0
x47191:	cmp al, 0	; 2: 60 0
x47193:	jge strtok$14	; 2: 125 4
x47195:	neg al	; 2: 246 216
x47197:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary4110 8
x47199:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x47202:	mov word [bp + 14], strtok$16	; 5: 199 70 14 112 184
x47207:	mov [bp + 16], bp	; 3: 137 110 16
x47210:	add bp, 14	; 3: 131 197 14
x47213:	jmp strchr	; 3: 233 77 105

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary4111

strtok$18:	; Equal 29 £temporary4111 0
x47216:	cmp bx, 0	; 3: 131 251 0
x47219:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary4114 string index
x47221:	mov si, [bp + 6]	; 3: 139 118 6
x47224:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary4113 -> £temporary4114 £temporary4114 0

strtok$21:	; Assign £temporary4113 -> £temporary4114 0
x47227:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary4115 index 1
x47230:	mov ax, [bp + 10]	; 3: 139 70 10
x47233:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary4117 string £temporary4115
x47234:	mov si, [bp + 6]	; 3: 139 118 6
x47237:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary4116 -> £temporary4117 £temporary4117 0

strtok$25:	; address £temporary4118 £temporary4116 -> £temporary4117

strtok$26:	; Assign token £temporary4118
x47239:	mov [token], si	; 4: 137 54 115 185

strtok$27:	; SetReturnValue string
x47243:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x47246:	mov ax, [bp]	; 3: 139 70 0
x47249:	mov di, [bp + 4]	; 3: 139 126 4
x47252:	mov bp, [bp + 2]	; 3: 139 110 2
x47255:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x47257:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x47260:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary4120 string index
x47262:	mov si, [bp + 6]	; 3: 139 118 6
x47265:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary4119 -> £temporary4120 £temporary4120 0

strtok$33:	; address £temporary4121 £temporary4119 -> £temporary4120

strtok$34:	; Assign token £temporary4121
x47268:	mov [token], si	; 4: 137 54 115 185

strtok$35:	; SetReturnValue string
x47272:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x47275:	mov ax, [bp]	; 3: 139 70 0
x47278:	mov di, [bp + 4]	; 3: 139 126 4
x47281:	mov bp, [bp + 2]	; 3: 139 110 2
x47284:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x47286:	cmp word [token], 0	; 5: 131 62 115 185 0
x47291:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x47293:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x47296:	mov ax, [bp]	; 3: 139 70 0
x47299:	mov di, [bp + 4]	; 3: 139 126 4
x47302:	mov bp, [bp + 2]	; 3: 139 110 2
x47305:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (token,0) 0
x47307:	mov si, [token]	; 4: 139 54 115 185
x47311:	cmp byte [si], 0	; 3: 128 60 0
x47314:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x47316:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x47319:	mov ax, [bp]	; 3: 139 70 0
x47322:	mov di, [bp + 4]	; 3: 139 126 4
x47325:	mov bp, [bp + 2]	; 3: 139 110 2
x47328:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x47330:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary4126 token index
x47335:	mov si, [token]	; 4: 139 54 115 185
x47339:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary4125 -> £temporary4126 £temporary4126 0

strtok$46:	; Equal 70 £temporary4125 -> £temporary4126 0
x47342:	cmp byte [si], 0	; 3: 128 60 0
x47345:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x47347:	mov ax, [bp + 8]	; 3: 139 70 8
x47350:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary4130 token index
x47353:	mov si, [token]	; 4: 139 54 115 185
x47357:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary4129 -> £temporary4130 £temporary4130 0

strtok$51:	; IntegralToIntegral £temporary4131 £temporary4129 -> £temporary4130
x47360:	mov al, [si]	; 2: 138 4
x47362:	and ax, 255	; 3: 37 255 0
x47365:	cmp al, 0	; 2: 60 0
x47367:	jge strtok$52	; 2: 125 4
x47369:	neg al	; 2: 246 216
x47371:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary4131 8
x47373:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x47376:	mov word [bp + 14], strtok$54	; 5: 199 70 14 30 185
x47381:	mov [bp + 16], bp	; 3: 137 110 16
x47384:	add bp, 14	; 3: 131 197 14
x47387:	jmp strchr	; 3: 233 159 104

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary4132

strtok$56:	; Equal 68 £temporary4132 0
x47390:	cmp bx, 0	; 3: 131 251 0
x47393:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x47395:	mov ax, [token]	; 3: 161 115 185
x47398:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary4135 token index
x47401:	mov si, [token]	; 4: 139 54 115 185
x47405:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary4134 -> £temporary4135 £temporary4135 0

strtok$60:	; Assign £temporary4134 -> £temporary4135 0
x47408:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary4136 index 1
x47411:	mov ax, [bp + 10]	; 3: 139 70 10
x47414:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary4138 token £temporary4136
x47415:	mov si, [token]	; 4: 139 54 115 185
x47419:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary4137 -> £temporary4138 £temporary4138 0

strtok$64:	; address £temporary4139 £temporary4137 -> £temporary4138

strtok$65:	; Assign token £temporary4139
x47421:	mov [token], si	; 4: 137 54 115 185

strtok$66:	; SetReturnValue tokenStart2
x47425:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x47428:	mov ax, [bp]	; 3: 139 70 0
x47431:	mov di, [bp + 4]	; 3: 139 126 4
x47434:	mov bp, [bp + 2]	; 3: 139 110 2
x47437:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x47439:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x47442:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x47444:	mov ax, [token]	; 3: 161 115 185
x47447:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary4141 token index
x47450:	mov si, [token]	; 4: 139 54 115 185
x47454:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary4140 -> £temporary4141 £temporary4141 0

strtok$73:	; address £temporary4142 £temporary4140 -> £temporary4141

strtok$74:	; Assign token £temporary4142
x47457:	mov [token], si	; 4: 137 54 115 185

strtok$75:	; SetReturnValue tokenStart
x47461:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x47464:	mov ax, [bp]	; 3: 139 70 0
x47467:	mov di, [bp + 4]	; 3: 139 126 4
x47470:	mov bp, [bp + 2]	; 3: 139 110 2
x47473:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

token:
x47475:	dw 0	; 2: 0 0

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x47477:	mov word [bp + 14], @13083$string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 65 190

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x47482:	mov word [bp + 22], @13084$string_1232E456#	; 5: 199 70 22 87 190

stdlib_test$4:	; Call 8 atof 8
x47487:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 141 185
x47492:	mov [bp + 18], bp	; 3: 137 110 18
x47495:	add bp, 16	; 3: 131 197 16
x47498:	jmp atof	; 3: 233 161 6

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6234

stdlib_test$7:	; Parameter 8 £temporary6234 8
x47501:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x47504:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 163 185
x47509:	mov [bp + 10], bp	; 3: 137 110 10
x47512:	add bp, 8	; 3: 131 197 8
x47515:	mov di, bp	; 2: 137 239
x47517:	add di, 8	; 3: 131 199 8
x47520:	jmp printf	; 3: 233 97 83

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x47523:	mov word [bp + 14], @13087$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 95 190

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x47528:	mov word [bp + 22], @13088$string_1232E456789abc#	; 5: 199 70 22 135 190

stdlib_test$14:	; address £temporary6236 p
x47533:	mov si, bp	; 2: 137 238
x47535:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6236 16
x47538:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x47541:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 195 185
x47546:	mov [bp + 18], bp	; 3: 137 110 18
x47549:	add bp, 16	; 3: 131 197 16
x47552:	jmp strtod	; 3: 233 143 6

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6237

stdlib_test$19:	; Parameter 8 £temporary6237 8
x47555:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x47558:	mov ax, [bp + 6]	; 3: 139 70 6
x47561:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x47564:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 223 185
x47569:	mov [bp + 10], bp	; 3: 137 110 10
x47572:	add bp, 8	; 3: 131 197 8
x47575:	mov di, bp	; 2: 137 239
x47577:	add di, 10	; 3: 131 199 10
x47580:	jmp printf	; 3: 233 37 83

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x47583:	mov word [bp + 12], @13092$string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 149 190

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x47588:	mov word [bp + 20], @13093$string_path#	; 5: 199 70 20 171 190

stdlib_test$27:	; Call 6 getenv 8
x47593:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 247 185
x47598:	mov [bp + 16], bp	; 3: 137 110 16
x47601:	add bp, 14	; 3: 131 197 14
x47604:	jmp getenv	; 3: 233 184 6

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6239

stdlib_test$30:	; Parameter 6 £temporary6239 8
x47607:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x47610:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 13 186
x47615:	mov [bp + 8], bp	; 3: 137 110 8
x47618:	add bp, 6	; 3: 131 197 6
x47621:	mov di, bp	; 2: 137 239
x47623:	add di, 2	; 3: 131 199 2
x47626:	jmp printf	; 3: 233 247 82

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x47629:	mov word [bp + 12], @13096$string_system2822dir22290A#	; 5: 199 70 12 176 190

stdlib_test$35:	; Call 6 printf 0
x47634:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 34 186
x47639:	mov [bp + 8], bp	; 3: 137 110 8
x47642:	add bp, 6	; 3: 131 197 6
x47645:	mov di, bp	; 2: 137 239
x47647:	jmp printf	; 3: 233 226 82

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x47650:	mov word [bp + 12], @13098$string_dir#	; 5: 199 70 12 191 190

stdlib_test$39:	; Call 6 system 0
x47655:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 53 186
x47660:	mov [bp + 8], bp	; 3: 137 110 8
x47663:	add bp, 6	; 3: 131 197 6
x47666:	jmp system	; 3: 233 136 6

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x47669:	mov word [bp + 12], @13100$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 195 190

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x47674:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x47679:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 77 186
x47684:	mov [bp + 16], bp	; 3: 137 110 16
x47687:	add bp, 14	; 3: 131 197 14
x47690:	jmp _abs	; 3: 233 126 6

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6243

stdlib_test$48:	; Parameter 6 £temporary6243 8
x47693:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x47696:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x47701:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 99 186
x47706:	mov [bp + 18], bp	; 3: 137 110 18
x47709:	add bp, 16	; 3: 131 197 16
x47712:	jmp _abs	; 3: 233 104 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6244

stdlib_test$54:	; Parameter 6 £temporary6244 10
x47715:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x47718:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 121 186
x47723:	mov [bp + 8], bp	; 3: 137 110 8
x47726:	add bp, 6	; 3: 131 197 6
x47729:	mov di, bp	; 2: 137 239
x47731:	add di, 4	; 3: 131 199 4
x47734:	jmp printf	; 3: 233 139 82

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x47737:	mov word [bp + 12], @13108$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 223 190

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x47742:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x47750:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 148 186
x47755:	mov [bp + 16], bp	; 3: 137 110 16
x47758:	add bp, 14	; 3: 131 197 14
x47761:	jmp labs	; 3: 233 189 96

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6246

stdlib_test$64:	; Parameter 6 £temporary6246 8
x47764:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x47768:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x47776:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 174 186
x47781:	mov [bp + 20], bp	; 3: 137 110 20
x47784:	add bp, 18	; 3: 131 197 18
x47787:	jmp labs	; 3: 233 163 96

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6247

stdlib_test$70:	; Parameter 6 £temporary6247 12
x47790:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x47794:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 197 186
x47799:	mov [bp + 8], bp	; 3: 137 110 8
x47802:	add bp, 6	; 3: 131 197 6
x47805:	mov di, bp	; 2: 137 239
x47807:	add di, 8	; 3: 131 199 8
x47810:	jmp printf	; 3: 233 63 82

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x47813:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x47818:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x47823:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 221 186
x47828:	mov [bp + 8], bp	; 3: 137 110 8
x47831:	add bp, 6	; 3: 131 197 6
x47834:	jmp div	; 3: 233 9 6

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6249 -> £temporary6250

stdlib_test$79:	; Assign i £temporary6249 -> £temporary6250
x47837:	mov si, bp	; 2: 137 238
x47839:	add si, 6	; 3: 131 198 6
x47842:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x47844:	mov ah, [bx]	; 2: 138 39
x47846:	mov [si], ah	; 2: 136 36
x47848:	inc bx	; 1: 67
x47849:	inc si	; 1: 70
x47850:	dec al	; 2: 254 200
x47852:	cmp al, 0	; 2: 60 0
x47854:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x47856:	mov word [bp + 16], @13123$string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 1 191

stdlib_test$82:	; Parameter 10 i$quot 8
x47861:	mov ax, [bp + 6]	; 3: 139 70 6
x47864:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x47867:	mov ax, [bp + 8]	; 3: 139 70 8
x47870:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x47873:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 20 187
x47878:	mov [bp + 12], bp	; 3: 137 110 12
x47881:	add bp, 10	; 3: 131 197 10
x47884:	mov di, bp	; 2: 137 239
x47886:	add di, 4	; 3: 131 199 4
x47889:	jmp printf	; 3: 233 240 81

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x47892:	mov si, bp	; 2: 137 238
x47894:	add si, 6	; 3: 131 198 6
x47897:	mov di, bp	; 2: 137 239
x47899:	add di, 16	; 3: 131 199 16
x47902:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x47904:	mov ah, [si]	; 2: 138 36
x47906:	mov [di], ah	; 2: 136 37
x47908:	inc si	; 1: 70
x47909:	inc di	; 1: 71
x47910:	dec al	; 2: 254 200
x47912:	cmp al, 0	; 2: 60 0
x47914:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x47916:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 58 187
x47921:	mov [bp + 12], bp	; 3: 137 110 12
x47924:	add bp, 10	; 3: 131 197 10
x47927:	jmp print_div	; 3: 233 248 5

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6254 -> £temporary6255

stdlib_test$92:	; Assign j £temporary6254 -> £temporary6255
x47930:	mov si, bp	; 2: 137 238
x47932:	add si, 10	; 3: 131 198 10
x47935:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x47937:	mov ah, [bx]	; 2: 138 39
x47939:	mov [si], ah	; 2: 136 36
x47941:	inc bx	; 1: 67
x47942:	inc si	; 1: 70
x47943:	dec al	; 2: 254 200
x47945:	cmp al, 0	; 2: 60 0
x47947:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x47949:	mov word [bp + 20], @13130$string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 26 191

stdlib_test$95:	; Parameter 14 j$quot 8
x47954:	mov ax, [bp + 10]	; 3: 139 70 10
x47957:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x47960:	mov ax, [bp + 12]	; 3: 139 70 12
x47963:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x47966:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 113 187
x47971:	mov [bp + 16], bp	; 3: 137 110 16
x47974:	add bp, 14	; 3: 131 197 14
x47977:	mov di, bp	; 2: 137 239
x47979:	add di, 4	; 3: 131 199 4
x47982:	jmp printf	; 3: 233 147 81

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x47985:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x47993:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x48001:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 143 187
x48006:	mov [bp + 8], bp	; 3: 137 110 8
x48009:	add bp, 6	; 3: 131 197 6
x48012:	jmp ldiv	; 3: 233 243 5

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6259 -> £temporary6260

stdlib_test$105:	; Assign li £temporary6259 -> £temporary6260
x48015:	mov si, bp	; 2: 137 238
x48017:	add si, 6	; 3: 131 198 6
x48020:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x48022:	mov ah, [bx]	; 2: 138 39
x48024:	mov [si], ah	; 2: 136 36
x48026:	inc bx	; 1: 67
x48027:	inc si	; 1: 70
x48028:	dec al	; 2: 254 200
x48030:	cmp al, 0	; 2: 60 0
x48032:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x48034:	mov word [bp + 20], @13141$string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 52 191

stdlib_test$108:	; Parameter 14 li$quot 8
x48039:	mov eax, [bp + 6]	; 4: 102 139 70 6
x48043:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x48047:	mov eax, [bp + 10]	; 4: 102 139 70 10
x48051:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x48055:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 202 187
x48060:	mov [bp + 16], bp	; 3: 137 110 16
x48063:	add bp, 14	; 3: 131 197 14
x48066:	mov di, bp	; 2: 137 239
x48068:	add di, 8	; 3: 131 199 8
x48071:	jmp printf	; 3: 233 58 81

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x48074:	mov si, bp	; 2: 137 238
x48076:	add si, 6	; 3: 131 198 6
x48079:	mov di, bp	; 2: 137 239
x48081:	add di, 20	; 3: 131 199 20
x48084:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x48086:	mov ah, [si]	; 2: 138 36
x48088:	mov [di], ah	; 2: 136 37
x48090:	inc si	; 1: 70
x48091:	inc di	; 1: 71
x48092:	dec al	; 2: 254 200
x48094:	cmp al, 0	; 2: 60 0
x48096:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x48098:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 240 187
x48103:	mov [bp + 16], bp	; 3: 137 110 16
x48106:	add bp, 14	; 3: 131 197 14
x48109:	jmp print_ldiv	; 3: 233 237 5

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6264 -> £temporary6265

stdlib_test$118:	; Assign lj £temporary6264 -> £temporary6265
x48112:	mov si, bp	; 2: 137 238
x48114:	add si, 14	; 3: 131 198 14
x48117:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x48119:	mov ah, [bx]	; 2: 138 39
x48121:	mov [si], ah	; 2: 136 36
x48123:	inc bx	; 1: 67
x48124:	inc si	; 1: 70
x48125:	dec al	; 2: 254 200
x48127:	cmp al, 0	; 2: 60 0
x48129:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x48131:	mov word [bp + 28], @13148$string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 80 191

stdlib_test$121:	; Parameter 22 lj$quot 8
x48136:	mov eax, [bp + 14]	; 4: 102 139 70 14
x48140:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x48144:	mov eax, [bp + 18]	; 4: 102 139 70 18
x48148:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x48152:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 43 188
x48157:	mov [bp + 24], bp	; 3: 137 110 24
x48160:	add bp, 22	; 3: 131 197 22
x48163:	mov di, bp	; 2: 137 239
x48165:	add di, 8	; 3: 131 199 8
x48168:	jmp printf	; 3: 233 217 80

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x48171:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x48176:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x48181:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x48186:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x48191:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x48196:	mov word [bp + 24], @13173$string_0AA20List2013A20#	; 5: 199 70 24 109 191

stdlib_test$132:	; Call 18 printf 0
x48201:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 89 188
x48206:	mov [bp + 20], bp	; 3: 137 110 20
x48209:	add bp, 18	; 3: 131 197 18
x48212:	mov di, bp	; 2: 137 239
x48214:	jmp printf	; 3: 233 171 80

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x48217:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x48222:	mov ax, [bp + 14]	; 3: 139 70 14
x48225:	cmp [bp + 16], ax	; 3: 57 70 16
x48228:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x48230:	mov word [bp + 24], @13180$string_25i20#	; 5: 199 70 24 121 191

stdlib_test$138:	; UnsignedMultiply £temporary6277 index 2
x48235:	mov ax, [bp + 16]	; 3: 139 70 16
x48238:	xor dx, dx	; 2: 49 210
x48240:	mul word [@13182$int2$2#]	; 4: 247 38 125 191

stdlib_test$139:	; BinaryAdd £temporary6278 list £temporary6277
x48244:	mov si, bp	; 2: 137 238
x48246:	add si, 6	; 3: 131 198 6
x48249:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6279 -> £temporary6278 £temporary6278 0

stdlib_test$141:	; Parameter 18 £temporary6279 -> £temporary6278 8
x48251:	mov ax, [si]	; 2: 139 4
x48253:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x48256:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 147 188
x48261:	mov [bp + 20], bp	; 3: 137 110 20
x48264:	add bp, 18	; 3: 131 197 18
x48267:	mov di, bp	; 2: 137 239
x48269:	add di, 2	; 3: 131 199 2
x48272:	jmp printf	; 3: 233 113 80

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x48275:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x48278:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x48280:	mov word [bp + 24], @13187$string_0AB20List2023A20#	; 5: 199 70 24 127 191

stdlib_test$148:	; Call 18 printf 0
x48285:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 173 188
x48290:	mov [bp + 20], bp	; 3: 137 110 20
x48293:	add bp, 18	; 3: 131 197 18
x48296:	mov di, bp	; 2: 137 239
x48298:	jmp printf	; 3: 233 87 80

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x48301:	mov [bp + 24], bp	; 3: 137 110 24
x48304:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x48308:	mov ax, [bp + 14]	; 3: 139 70 14
x48311:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x48314:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x48319:	mov word [bp + 30], compare	; 5: 199 70 30 139 191

stdlib_test$155:	; Call 18 qsort 0
x48324:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 210 188
x48329:	mov [bp + 20], bp	; 3: 137 110 20
x48332:	add bp, 18	; 3: 131 197 18
x48335:	jmp qsort	; 3: 233 100 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x48338:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x48343:	mov ax, [bp + 14]	; 3: 139 70 14
x48346:	cmp [bp + 16], ax	; 3: 57 70 16
x48349:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x48351:	mov word [bp + 24], @13199$string_25i20#	; 5: 199 70 24 195 191

stdlib_test$161:	; UnsignedMultiply £temporary6286 index 2
x48356:	mov ax, [bp + 16]	; 3: 139 70 16
x48359:	xor dx, dx	; 2: 49 210
x48361:	mul word [@13201$int2$2#]	; 4: 247 38 199 191

stdlib_test$162:	; BinaryAdd £temporary6287 list £temporary6286
x48365:	mov si, bp	; 2: 137 238
x48367:	add si, 6	; 3: 131 198 6
x48370:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6288 -> £temporary6287 £temporary6287 0

stdlib_test$164:	; Parameter 18 £temporary6288 -> £temporary6287 8
x48372:	mov ax, [si]	; 2: 139 4
x48374:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x48377:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 12 189
x48382:	mov [bp + 20], bp	; 3: 137 110 20
x48385:	add bp, 18	; 3: 131 197 18
x48388:	mov di, bp	; 2: 137 239
x48390:	add di, 2	; 3: 131 199 2
x48393:	jmp printf	; 3: 233 248 79

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x48396:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x48399:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x48401:	mov word [bp + 24], @13206$string_0AC20List2033A20#	; 5: 199 70 24 201 191

stdlib_test$171:	; Call 18 printf 0
x48406:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 38 189
x48411:	mov [bp + 20], bp	; 3: 137 110 20
x48414:	add bp, 18	; 3: 131 197 18
x48417:	mov di, bp	; 2: 137 239
x48419:	jmp printf	; 3: 233 222 79

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x48422:	mov [bp + 24], bp	; 3: 137 110 24
x48425:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x48429:	mov ax, [bp + 14]	; 3: 139 70 14
x48432:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x48435:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x48440:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 213 191

stdlib_test$178:	; Call 18 qsort 0
x48445:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 75 189
x48450:	mov [bp + 20], bp	; 3: 137 110 20
x48453:	add bp, 18	; 3: 131 197 18
x48456:	jmp qsort	; 3: 233 235 4

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x48459:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x48464:	mov ax, [bp + 14]	; 3: 139 70 14
x48467:	cmp [bp + 16], ax	; 3: 57 70 16
x48470:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x48472:	mov word [bp + 24], @13218$string_25i20#	; 5: 199 70 24 13 192

stdlib_test$184:	; UnsignedMultiply £temporary6295 index 2
x48477:	mov ax, [bp + 16]	; 3: 139 70 16
x48480:	xor dx, dx	; 2: 49 210
x48482:	mul word [@13220$int2$2#]	; 4: 247 38 17 192

stdlib_test$185:	; BinaryAdd £temporary6296 list £temporary6295
x48486:	mov si, bp	; 2: 137 238
x48488:	add si, 6	; 3: 131 198 6
x48491:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6297 -> £temporary6296 £temporary6296 0

stdlib_test$187:	; Parameter 18 £temporary6297 -> £temporary6296 8
x48493:	mov ax, [si]	; 2: 139 4
x48495:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x48498:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 133 189
x48503:	mov [bp + 20], bp	; 3: 137 110 20
x48506:	add bp, 18	; 3: 131 197 18
x48509:	mov di, bp	; 2: 137 239
x48511:	add di, 2	; 3: 131 199 2
x48514:	jmp printf	; 3: 233 127 79

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x48517:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x48520:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0A0ASearch3A0A# 6
x48522:	mov word [bp + 24], @13225$string_0A0ASearch3A0A#	; 5: 199 70 24 19 192

stdlib_test$194:	; Call 18 printf 0
x48527:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 159 189
x48532:	mov [bp + 20], bp	; 3: 137 110 20
x48535:	add bp, 18	; 3: 131 197 18
x48538:	mov di, bp	; 2: 137 239
x48540:	jmp printf	; 3: 233 101 79

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; Assign key 0
x48543:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$197:	; SignedGreaterThanEqual 224 key 6
x48548:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x48552:	jge stdlib_test$224	; 2: 125 119

stdlib_test$198:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$199:	; address £temporary6302 key
x48554:	mov si, bp	; 2: 137 238
x48556:	add si, 16	; 3: 131 198 16

stdlib_test$200:	; Parameter 18 £temporary6302 6
x48559:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$201:	; Parameter 18 list 8
x48562:	mov [bp + 26], bp	; 3: 137 110 26
x48565:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$202:	; Parameter 18 size 10
x48569:	mov ax, [bp + 14]	; 3: 139 70 14
x48572:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$203:	; Parameter 18 2 12
x48575:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$204:	; Parameter 18 compare 14
x48580:	mov word [bp + 32], compare	; 5: 199 70 32 139 191

stdlib_test$205:	; Call 18 bsearch 0
x48585:	mov word [bp + 18], stdlib_test$206	; 5: 199 70 18 215 189
x48590:	mov [bp + 20], bp	; 3: 137 110 20
x48593:	add bp, 18	; 3: 131 197 18
x48596:	jmp bsearch	; 3: 233 76 5

stdlib_test$206:	; PostCall 18

stdlib_test$207:	; GetReturnValue £temporary6304

stdlib_test$208:	; IntegralToIntegral £temporary6305 £temporary6304

stdlib_test$209:	; Assign p £temporary6305
x48599:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$210:	; Equal 214 p 0
x48602:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x48606:	je stdlib_test$214	; 2: 116 18

stdlib_test$211:	; BinarySubtract £temporary6307 p list
x48608:	mov ax, [bp + 18]	; 3: 139 70 18
x48611:	mov bx, bp	; 2: 137 235
x48613:	add bx, 6	; 3: 131 195 6
x48616:	sub ax, bx	; 2: 41 216

stdlib_test$212:	; UnsignedDivide £temporary6312 £temporary6307 2
x48618:	xor dx, dx	; 2: 49 210
x48620:	div word [@13247$int2$2#]	; 4: 247 54 30 192

stdlib_test$213:	; Goto 215
x48624:	jmp stdlib_test$215	; 2: 235 3

stdlib_test$214:	; Assign £temporary6312 -1
x48626:	mov ax, -1	; 3: 184 255 255

stdlib_test$215:	; Assign index £temporary6312
x48629:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$216:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$217:	; Parameter 22 string_20202825i2C2025i290A# 6
x48632:	mov word [bp + 28], @13258$string_20202825i2C2025i290A#	; 5: 199 70 28 32 192

stdlib_test$218:	; Parameter 22 key 8
x48637:	mov ax, [bp + 16]	; 3: 139 70 16
x48640:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$219:	; Parameter 22 index 10
x48643:	mov ax, [bp + 20]	; 3: 139 70 20
x48646:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$220:	; Call 22 printf 0
x48649:	mov word [bp + 22], stdlib_test$221	; 5: 199 70 22 28 190
x48654:	mov [bp + 24], bp	; 3: 137 110 24
x48657:	add bp, 22	; 3: 131 197 22
x48660:	mov di, bp	; 2: 137 239
x48662:	add di, 4	; 3: 131 199 4
x48665:	jmp printf	; 3: 233 232 78

stdlib_test$221:	; PostCall 22

stdlib_test$222:	; Increment key
x48668:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$223:	; Goto 197
x48671:	jmp stdlib_test$197	; 2: 235 131

stdlib_test$224:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$225:	; Parameter 16 string_0A# 6
x48673:	mov word [bp + 22], @13260$string_0A#	; 5: 199 70 22 44 192

stdlib_test$226:	; Call 16 printf 0
x48678:	mov word [bp + 16], stdlib_test$227	; 5: 199 70 16 54 190
x48683:	mov [bp + 18], bp	; 3: 137 110 18
x48686:	add bp, 16	; 3: 131 197 16
x48689:	mov di, bp	; 2: 137 239
x48691:	jmp printf	; 3: 233 206 78

stdlib_test$227:	; PostCall 16

stdlib_test$228:	; Return 0
x48694:	mov ax, [bp]	; 3: 139 70 0
x48697:	mov di, [bp + 4]	; 3: 139 126 4
x48700:	mov bp, [bp + 2]	; 3: 139 110 2
x48703:	jmp ax	; 2: 255 224

stdlib_test$229:	; FunctionEnd stdlib_test

@13083$string_atof28221232E4562229203D2025f0A#:
x48705:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

@13084$string_1232E456#:
x48727:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

@13087$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x48735:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

@13088$string_1232E456789abc#:
x48775:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

@13092$string_0Agetenv2822path2229203D2025s0A#:
x48789:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

@13093$string_path#:
x48811:	db "path", 0	; 5: 112 97 116 104 0

@13096$string_system2822dir22290A#:
x48816:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

@13098$string_dir#:
x48831:	db "dir", 0	; 4: 100 105 114 0

@13100$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x48835:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

@13108$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x48863:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

@13123$string_div_t28102C20329203D202825i2C2025i290A#:
x48897:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

@13130$string_div_t28102C20329203D202825i2C2025i290A0A#:
x48922:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

@13141$string_ldiv_t28102C20329203D202825li2C2025li290A#:
x48948:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

@13148$string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x48976:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

@13173$string_0AA20List2013A20#:
x49005:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

@13180$string_25i20#:
x49017:	db "%i ", 0	; 4: 37 105 32 0

@13182$int2$2#:
x49021:	dw 2	; 2: 2 0

@13187$string_0AB20List2023A20#:
x49023:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary6163 valuePtr1
x49035:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary6164 -> £temporary6163 £temporary6163 0

compare$2:	; Assign intValue1 £temporary6164 -> £temporary6163
x49038:	mov ax, [si]	; 2: 139 4
x49040:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary6165 valuePtr2
x49043:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary6166 -> £temporary6165 £temporary6165 0

compare$5:	; Assign intValue2 £temporary6166 -> £temporary6165
x49046:	mov ax, [si]	; 2: 139 4
x49048:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49051:	mov ax, [bp + 12]	; 3: 139 70 12
x49054:	cmp [bp + 10], ax	; 3: 57 70 10
x49057:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary6176 -1
x49059:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x49062:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x49064:	mov ax, [bp + 12]	; 3: 139 70 12
x49067:	cmp [bp + 10], ax	; 3: 57 70 10
x49070:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary6172 0
x49072:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x49075:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary6172 1
x49077:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary6176 £temporary6172

compare$14:	; SetReturnValue £temporary6176

compare$15:	; Return £temporary6176
x49080:	mov ax, [bp]	; 3: 139 70 0
x49083:	mov di, [bp + 4]	; 3: 139 126 4
x49086:	mov bp, [bp + 2]	; 3: 139 110 2
x49089:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

@13199$string_25i20#:
x49091:	db "%i ", 0	; 4: 37 105 32 0

@13201$int2$2#:
x49095:	dw 2	; 2: 2 0

@13206$string_0AC20List2033A20#:
x49097:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary6177 valuePtr1
x49109:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary6178 -> £temporary6177 £temporary6177 0

reverse_compare$2:	; Assign intValue1 £temporary6178 -> £temporary6177
x49112:	mov ax, [si]	; 2: 139 4
x49114:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary6179 valuePtr2
x49117:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary6180 -> £temporary6179 £temporary6179 0

reverse_compare$5:	; Assign intValue2 £temporary6180 -> £temporary6179
x49120:	mov ax, [si]	; 2: 139 4
x49122:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49125:	mov ax, [bp + 12]	; 3: 139 70 12
x49128:	cmp [bp + 10], ax	; 3: 57 70 10
x49131:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary6190 1
x49133:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x49136:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x49138:	mov ax, [bp + 12]	; 3: 139 70 12
x49141:	cmp [bp + 10], ax	; 3: 57 70 10
x49144:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary6186 0
x49146:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x49149:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary6186 -1
x49151:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary6190 £temporary6186

reverse_compare$14:	; SetReturnValue £temporary6190

reverse_compare$15:	; Return £temporary6190
x49154:	mov ax, [bp]	; 3: 139 70 0
x49157:	mov di, [bp + 4]	; 3: 139 126 4
x49160:	mov bp, [bp + 2]	; 3: 139 110 2
x49163:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

@13218$string_25i20#:
x49165:	db "%i ", 0	; 4: 37 105 32 0

@13220$int2$2#:
x49169:	dw 2	; 2: 2 0

@13225$string_0A0ASearch3A0A#:
x49171:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

@13247$int2$2#:
x49182:	dw 2	; 2: 2 0

@13258$string_20202825i2C2025i290A#:
x49184:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

@13260$string_0A#:
x49196:	db 10, 0	; 2: 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x49198:	mov ax, [bp + 6]	; 3: 139 70 6
x49201:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x49204:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x49209:	mov word [bp + 8], atof$4	; 5: 199 70 8 71 192
x49214:	mov [bp + 10], bp	; 3: 137 110 10
x49217:	add bp, 8	; 3: 131 197 8
x49220:	nop	; 1: 144
x49221:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary3287

atof$6:	; SetReturnValue £temporary3287

atof$7:	; Return £temporary3287
x49223:	mov ax, [bp]	; 3: 139 70 0
x49226:	mov di, [bp + 4]	; 3: 139 126 4
x49229:	mov bp, [bp + 2]	; 3: 139 110 2
x49232:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x49234:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x49239:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x49241:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x49244:	mov ax, [bp + 6]	; 3: 139 70 6
x49247:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x49250:	mov word [bp + 28], @7344$string_25lf25n#	; 5: 199 70 28 169 192

strtod$6:	; address £temporary3290 value
x49255:	mov si, bp	; 2: 137 238
x49257:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary3290 10
x49260:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary3291 chars
x49263:	mov si, bp	; 2: 137 238
x49265:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary3291 12
x49268:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x49271:	mov word [bp + 20], strtod$11	; 5: 199 70 20 138 192
x49276:	mov [bp + 22], bp	; 3: 137 110 22
x49279:	add bp, 20	; 3: 131 197 20
x49282:	mov di, bp	; 2: 137 239
x49284:	add di, 4	; 3: 131 199 4
x49287:	jmp sscanf	; 3: 233 142 234

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x49290:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49294:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary3294 -> endp endp 0
x49296:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary3294 -> endp s chars
x49299:	mov ax, [bp + 6]	; 3: 139 70 6
x49302:	add ax, [bp + 10]	; 3: 3 70 10
x49305:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x49307:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x49310:	mov ax, [bp]	; 3: 139 70 0
x49313:	mov di, [bp + 4]	; 3: 139 126 4
x49316:	mov bp, [bp + 2]	; 3: 139 110 2
x49319:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

@7344$string_25lf25n#:
x49321:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

getenv:	; SetReturnValue 0
x49327:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x49330:	mov ax, [bp]	; 3: 139 70 0
x49333:	mov di, [bp + 4]	; 3: 139 126 4
x49336:	mov bp, [bp + 2]	; 3: 139 110 2
x49339:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x49341:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x49344:	mov ax, [bp]	; 3: 139 70 0
x49347:	mov di, [bp + 4]	; 3: 139 126 4
x49350:	mov bp, [bp + 2]	; 3: 139 110 2
x49353:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x49355:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x49359:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3392 value
x49361:	mov bx, [bp + 6]	; 3: 139 94 6
x49364:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3396 £temporary3392

_abs$3:	; Goto 5
x49366:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3396 value
x49368:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3396

_abs$6:	; Return £temporary3396
x49371:	mov ax, [bp]	; 3: 139 70 0
x49374:	mov di, [bp + 4]	; 3: 139 126 4
x49377:	mov bp, [bp + 2]	; 3: 139 110 2
x49380:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x49382:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x49387:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x49392:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49396:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x49398:	mov word [errno], 6	; 6: 199 6 230 10 6 0

div$4:	; SetReturnValue result
x49404:	mov bx, bp	; 2: 137 235
x49406:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x49409:	mov ax, [bp]	; 3: 139 70 0
x49412:	mov di, [bp + 4]	; 3: 139 126 4
x49415:	mov bp, [bp + 2]	; 3: 139 110 2
x49418:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x49420:	mov ax, [bp + 6]	; 3: 139 70 6
x49423:	xor dx, dx	; 2: 49 210
x49425:	idiv word [bp + 8]	; 3: 247 126 8
x49428:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x49431:	mov ax, [bp + 6]	; 3: 139 70 6
x49434:	xor dx, dx	; 2: 49 210
x49436:	idiv word [bp + 8]	; 3: 247 126 8
x49439:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x49442:	mov bx, bp	; 2: 137 235
x49444:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x49447:	mov ax, [bp]	; 3: 139 70 0
x49450:	mov di, [bp + 4]	; 3: 139 126 4
x49453:	mov bp, [bp + 2]	; 3: 139 110 2
x49456:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x49458:	mov word [bp + 16], @13018$string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 108 193

print_div$2:	; Parameter 10 d$quot 8
x49463:	mov ax, [bp + 6]	; 3: 139 70 6
x49466:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x49469:	mov ax, [bp + 8]	; 3: 139 70 8
x49472:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x49475:	mov word [bp + 10], print_div$5	; 5: 199 70 10 86 193
x49480:	mov [bp + 12], bp	; 3: 137 110 12
x49483:	add bp, 10	; 3: 131 197 10
x49486:	mov di, bp	; 2: 137 239
x49488:	add di, 4	; 3: 131 199 4
x49491:	jmp printf	; 3: 233 174 75

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x49494:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Increment d$rem
x49497:	inc word [bp + 8]	; 3: 255 70 8

print_div$8:	; SetReturnValue d
x49500:	mov bx, bp	; 2: 137 235
x49502:	add bx, 6	; 3: 131 195 6

print_div$9:	; Return d
x49505:	mov ax, [bp]	; 3: 139 70 0
x49508:	mov di, [bp + 4]	; 3: 139 126 4
x49511:	mov bp, [bp + 2]	; 3: 139 110 2
x49514:	jmp ax	; 2: 255 224

print_div$10:	; FunctionEnd print_div

@13018$string_div_t20quot2025i20rem2025i0A#:
x49516:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x49538:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x49546:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x49554:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x49559:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x49561:	mov word [errno], 6	; 6: 199 6 230 10 6 0

ldiv$4:	; SetReturnValue result
x49567:	mov bx, bp	; 2: 137 235
x49569:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x49572:	mov ax, [bp]	; 3: 139 70 0
x49575:	mov di, [bp + 4]	; 3: 139 126 4
x49578:	mov bp, [bp + 2]	; 3: 139 110 2
x49581:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x49583:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49587:	xor edx, edx	; 3: 102 49 210
x49590:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49594:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x49598:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49602:	xor edx, edx	; 3: 102 49 210
x49605:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49609:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x49613:	mov bx, bp	; 2: 137 235
x49615:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x49618:	mov ax, [bp]	; 3: 139 70 0
x49621:	mov di, [bp + 4]	; 3: 139 126 4
x49624:	mov bp, [bp + 2]	; 3: 139 110 2
x49627:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x49629:	mov word [bp + 20], @13033$string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 29 194

print_ldiv$2:	; Parameter 14 ld$quot 8
x49634:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49638:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x49642:	mov eax, [bp + 10]	; 4: 102 139 70 10
x49646:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x49650:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 5 194
x49655:	mov [bp + 16], bp	; 3: 137 110 16
x49658:	add bp, 14	; 3: 131 197 14
x49661:	mov di, bp	; 2: 137 239
x49663:	add di, 8	; 3: 131 199 8
x49666:	jmp printf	; 3: 233 255 74

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x49669:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Decrement ld$rem
x49673:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$8:	; SetReturnValue ld
x49677:	mov bx, bp	; 2: 137 235
x49679:	add bx, 6	; 3: 131 195 6

print_ldiv$9:	; Return ld
x49682:	mov ax, [bp]	; 3: 139 70 0
x49685:	mov di, [bp + 4]	; 3: 139 126 4
x49688:	mov bp, [bp + 2]	; 3: 139 110 2
x49691:	jmp ax	; 2: 255 224

print_ldiv$10:	; FunctionEnd print_ldiv

@13033$string_ldiv_t20quot2025li20rem2025li0A#:
x49693:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3370 valueList
x49718:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3370
x49721:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x49724:	mov ax, [bp + 8]	; 3: 139 70 8
x49727:	dec ax	; 1: 72
x49728:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x49731:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x49735:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x49739:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x49744:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x49749:	mov ax, [bp + 16]	; 3: 139 70 16
x49752:	cmp [bp + 18], ax	; 3: 57 70 18
x49755:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3376 index valueSize
x49757:	mov ax, [bp + 18]	; 3: 139 70 18
x49760:	xor dx, dx	; 2: 49 210
x49762:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3376
x49765:	mov bx, [bp + 14]	; 3: 139 94 14
x49768:	add bx, ax	; 2: 1 195
x49770:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3378 index 1
x49773:	mov ax, [bp + 18]	; 3: 139 70 18
x49776:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3379 £temporary3378 valueSize
x49777:	xor dx, dx	; 2: 49 210
x49779:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3379
x49782:	mov bx, [bp + 14]	; 3: 139 94 14
x49785:	add bx, ax	; 2: 1 195
x49787:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x49790:	mov ax, [bp + 22]	; 3: 139 70 22
x49793:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x49796:	mov ax, [bp + 24]	; 3: 139 70 24
x49799:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x49802:	mov word [bp + 26], qsort$16	; 5: 199 70 26 154 194
x49807:	mov [bp + 28], bp	; 3: 137 110 28
x49810:	mov ax, [bp + 12]	; 3: 139 70 12
x49813:	add bp, 26	; 3: 131 197 26
x49816:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3381

qsort$18:	; SignedLessThanEqual 26 £temporary3381 0
x49818:	cmp bx, 0	; 3: 131 251 0
x49821:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x49823:	mov ax, [bp + 22]	; 3: 139 70 22
x49826:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x49829:	mov ax, [bp + 24]	; 3: 139 70 24
x49832:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x49835:	mov ax, [bp + 10]	; 3: 139 70 10
x49838:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x49841:	mov word [bp + 26], qsort$24	; 5: 199 70 26 191 194
x49846:	mov [bp + 28], bp	; 3: 137 110 28
x49849:	add bp, 26	; 3: 131 197 26
x49852:	nop	; 1: 144
x49853:	jmp @7520$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x49855:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x49860:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x49863:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x49865:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x49869:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x49871:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x49874:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x49877:	mov ax, [bp]	; 3: 139 70 0
x49880:	mov di, [bp + 4]	; 3: 139 126 4
x49883:	mov bp, [bp + 2]	; 3: 139 110 2
x49886:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@7520$memswap:	; Assign index 0
x49888:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@7520$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x49893:	mov ax, [bp + 10]	; 3: 139 70 10
x49896:	cmp [bp + 12], ax	; 3: 57 70 12
x49899:	jge @7520$memswap$15	; 2: 125 43

@7520$memswap$2:	; BinaryAdd £temporary3363 value1 index
x49901:	mov si, [bp + 6]	; 3: 139 118 6
x49904:	add si, [bp + 12]	; 3: 3 118 12

@7520$memswap$3:	; Deref £temporary3362 -> £temporary3363 £temporary3363 0

@7520$memswap$4:	; Assign tempValue £temporary3362 -> £temporary3363
x49907:	mov al, [si]	; 2: 138 4
x49909:	mov [bp + 14], al	; 3: 136 70 14

@7520$memswap$5:	; BinaryAdd £temporary3365 value1 index
x49912:	mov si, [bp + 6]	; 3: 139 118 6
x49915:	add si, [bp + 12]	; 3: 3 118 12

@7520$memswap$6:	; Deref £temporary3364 -> £temporary3365 £temporary3365 0

@7520$memswap$7:	; BinaryAdd £temporary3367 value2 index
x49918:	mov di, [bp + 8]	; 3: 139 126 8
x49921:	add di, [bp + 12]	; 3: 3 126 12

@7520$memswap$8:	; Deref £temporary3366 -> £temporary3367 £temporary3367 0

@7520$memswap$9:	; Assign £temporary3364 -> £temporary3365 £temporary3366 -> £temporary3367
x49924:	mov al, [di]	; 2: 138 5
x49926:	mov [si], al	; 2: 136 4

@7520$memswap$10:	; BinaryAdd £temporary3369 value2 index
x49928:	mov si, [bp + 8]	; 3: 139 118 8
x49931:	add si, [bp + 12]	; 3: 3 118 12

@7520$memswap$11:	; Deref £temporary3368 -> £temporary3369 £temporary3369 0

@7520$memswap$12:	; Assign £temporary3368 -> £temporary3369 tempValue
x49934:	mov al, [bp + 14]	; 3: 138 70 14
x49937:	mov [si], al	; 2: 136 4

@7520$memswap$13:	; Increment index
x49939:	inc word [bp + 12]	; 3: 255 70 12

@7520$memswap$14:	; Goto 1
x49942:	jmp @7520$memswap$1	; 2: 235 205

@7520$memswap$15:	; Return 0
x49944:	mov ax, [bp]	; 3: 139 70 0
x49947:	mov di, [bp + 4]	; 3: 139 126 4
x49950:	mov bp, [bp + 2]	; 3: 139 110 2
x49953:	jmp ax	; 2: 255 224

@7520$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x49955:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x49960:	mov ax, [bp + 10]	; 3: 139 70 10
x49963:	dec ax	; 1: 72
x49964:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x49967:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x49971:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x49973:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x49976:	mov ax, [bp]	; 3: 139 70 0
x49979:	mov di, [bp + 4]	; 3: 139 126 4
x49982:	mov bp, [bp + 2]	; 3: 139 110 2
x49985:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3306 valueList
x49987:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3307 firstIndex valueSize
x49990:	mov ax, [bp + 16]	; 3: 139 70 16
x49993:	xor dx, dx	; 2: 49 210
x49995:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3306 £temporary3307
x49998:	add bx, ax	; 2: 1 195
x50000:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x50003:	mov ax, [bp + 6]	; 3: 139 70 6
x50006:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x50009:	mov ax, [bp + 20]	; 3: 139 70 20
x50012:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x50015:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 111 195
x50020:	mov [bp + 24], bp	; 3: 137 110 24
x50023:	mov ax, [bp + 14]	; 3: 139 70 14
x50026:	add bp, 22	; 3: 131 197 22
x50029:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3309

bsearch$14:	; Assign firstCompare £temporary3309
x50031:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x50034:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50038:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x50040:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x50043:	mov ax, [bp]	; 3: 139 70 0
x50046:	mov di, [bp + 4]	; 3: 139 126 4
x50049:	mov bp, [bp + 2]	; 3: 139 110 2
x50052:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x50054:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50058:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x50060:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x50063:	mov ax, [bp]	; 3: 139 70 0
x50066:	mov di, [bp + 4]	; 3: 139 126 4
x50069:	mov bp, [bp + 2]	; 3: 139 110 2
x50072:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3312 valueList
x50074:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3313 lastIndex valueSize
x50077:	mov ax, [bp + 18]	; 3: 139 70 18
x50080:	xor dx, dx	; 2: 49 210
x50082:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3312 £temporary3313
x50085:	add bx, ax	; 2: 1 195
x50087:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x50090:	mov ax, [bp + 6]	; 3: 139 70 6
x50093:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x50096:	mov ax, [bp + 20]	; 3: 139 70 20
x50099:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x50102:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 198 195
x50107:	mov [bp + 24], bp	; 3: 137 110 24
x50110:	mov ax, [bp + 14]	; 3: 139 70 14
x50113:	add bp, 22	; 3: 131 197 22
x50116:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3315

bsearch$30:	; Assign lastCompare £temporary3315
x50118:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x50121:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50125:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x50127:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x50130:	mov ax, [bp]	; 3: 139 70 0
x50133:	mov di, [bp + 4]	; 3: 139 126 4
x50136:	mov bp, [bp + 2]	; 3: 139 110 2
x50139:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x50141:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50145:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x50147:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x50150:	mov ax, [bp]	; 3: 139 70 0
x50153:	mov di, [bp + 4]	; 3: 139 126 4
x50156:	mov bp, [bp + 2]	; 3: 139 110 2
x50159:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3318 firstIndex lastIndex
x50161:	mov ax, [bp + 16]	; 3: 139 70 16
x50164:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3318 2
x50167:	xor dx, dx	; 2: 49 210
x50169:	idiv word [@7422$int2$2#]	; 4: 247 62 91 196
x50173:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3320 valueList
x50176:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3321 middleIndex valueSize
x50179:	mov ax, [bp + 20]	; 3: 139 70 20
x50182:	xor dx, dx	; 2: 49 210
x50184:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3320 £temporary3321
x50187:	add bx, ax	; 2: 1 195
x50189:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x50192:	mov ax, [bp + 6]	; 3: 139 70 6
x50195:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x50198:	mov ax, [bp + 22]	; 3: 139 70 22
x50201:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x50204:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 44 196
x50209:	mov [bp + 26], bp	; 3: 137 110 26
x50212:	mov ax, [bp + 14]	; 3: 139 70 14
x50215:	add bp, 24	; 3: 131 197 24
x50218:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3323

bsearch$48:	; Assign middleCompare £temporary3323
x50220:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x50223:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50227:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x50229:	mov ax, [bp + 20]	; 3: 139 70 20
x50232:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x50235:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x50238:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50242:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x50244:	mov ax, [bp + 20]	; 3: 139 70 20
x50247:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x50250:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x50253:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x50256:	mov ax, [bp]	; 3: 139 70 0
x50259:	mov di, [bp + 4]	; 3: 139 126 4
x50262:	mov bp, [bp + 2]	; 3: 139 110 2
x50265:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

@7422$int2$2#:
x50267:	dw 2	; 2: 2 0

strtol_test:	; Assign base 0
x50269:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x50274:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x50278:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x50282:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x50286:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x50290:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x50294:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x50298:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x50302:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x50306:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x50310:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x50314:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x50318:	mov [bp + 27], bp	; 3: 137 110 27
x50321:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2445 pointer
x50325:	mov si, bp	; 2: 137 238
x50327:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2445 8
x50330:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x50333:	mov ax, [bp + 6]	; 3: 139 70 6
x50336:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x50339:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 177 196
x50344:	mov [bp + 23], bp	; 3: 137 110 23
x50347:	add bp, 21	; 3: 131 197 21
x50350:	jmp strtol	; 3: 233 49 11

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2446

strtol_test$20:	; Assign value £temporary2446
x50353:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50357:	mov word [bp + 31], @5388$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 86 206

strtol_test$23:	; Parameter 25 text 8
x50362:	mov [bp + 33], bp	; 3: 137 110 33
x50365:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x50369:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50373:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x50377:	mov ax, [bp + 19]	; 3: 139 70 19
x50380:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x50383:	mov ax, [bp + 6]	; 3: 139 70 6
x50386:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x50389:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 232 196
x50394:	mov [bp + 27], bp	; 3: 137 110 27
x50397:	add bp, 25	; 3: 131 197 25
x50400:	mov di, bp	; 2: 137 239
x50402:	add di, 10	; 3: 131 199 10
x50405:	jmp printf	; 3: 233 28 72

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x50408:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x50413:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x50417:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x50421:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x50425:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x50429:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x50433:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x50437:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x50441:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x50445:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x50449:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x50453:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x50457:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x50461:	mov [bp + 28], bp	; 3: 137 110 28
x50464:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2460 pointer
x50468:	mov si, bp	; 2: 137 238
x50470:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2460 8
x50473:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x50476:	mov ax, [bp + 6]	; 3: 139 70 6
x50479:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x50482:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 64 197
x50487:	mov [bp + 24], bp	; 3: 137 110 24
x50490:	add bp, 22	; 3: 131 197 22
x50493:	jmp strtol	; 3: 233 162 10

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2461

strtol_test$50:	; Assign value £temporary2461
x50496:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50500:	mov word [bp + 32], @5435$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 108 206

strtol_test$53:	; Parameter 26 text 8
x50505:	mov [bp + 34], bp	; 3: 137 110 34
x50508:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x50512:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50516:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x50520:	mov ax, [bp + 20]	; 3: 139 70 20
x50523:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x50526:	mov ax, [bp + 6]	; 3: 139 70 6
x50529:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x50532:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 119 197
x50537:	mov [bp + 28], bp	; 3: 137 110 28
x50540:	add bp, 26	; 3: 131 197 26
x50543:	mov di, bp	; 2: 137 239
x50545:	add di, 10	; 3: 131 199 10
x50548:	jmp printf	; 3: 233 141 71

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x50551:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x50556:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x50560:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x50564:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x50568:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x50572:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x50576:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x50580:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x50584:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x50588:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x50592:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x50596:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x50600:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x50604:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x50608:	mov [bp + 29], bp	; 3: 137 110 29
x50611:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2476 pointer
x50615:	mov si, bp	; 2: 137 238
x50617:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2476 8
x50620:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x50623:	mov ax, [bp + 6]	; 3: 139 70 6
x50626:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x50629:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 211 197
x50634:	mov [bp + 25], bp	; 3: 137 110 25
x50637:	add bp, 23	; 3: 131 197 23
x50640:	jmp strtol	; 3: 233 15 10

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2477

strtol_test$81:	; Assign value £temporary2477
x50643:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50647:	mov word [bp + 33], @5485$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 130 206

strtol_test$84:	; Parameter 27 text 8
x50652:	mov [bp + 35], bp	; 3: 137 110 35
x50655:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x50659:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50663:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x50667:	mov ax, [bp + 21]	; 3: 139 70 21
x50670:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x50673:	mov ax, [bp + 6]	; 3: 139 70 6
x50676:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x50679:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 10 198
x50684:	mov [bp + 29], bp	; 3: 137 110 29
x50687:	add bp, 27	; 3: 131 197 27
x50690:	mov di, bp	; 2: 137 239
x50692:	add di, 10	; 3: 131 199 10
x50695:	jmp printf	; 3: 233 250 70

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x50698:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x50703:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x50707:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x50711:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x50715:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x50719:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x50723:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x50727:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x50731:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x50735:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x50739:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x50743:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x50747:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x50751:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x50755:	mov [bp + 29], bp	; 3: 137 110 29
x50758:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2492 pointer
x50762:	mov si, bp	; 2: 137 238
x50764:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2492 8
x50767:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x50770:	mov ax, [bp + 6]	; 3: 139 70 6
x50773:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x50776:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 102 198
x50781:	mov [bp + 25], bp	; 3: 137 110 25
x50784:	add bp, 23	; 3: 131 197 23
x50787:	jmp strtol	; 3: 233 124 9

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2493

strtol_test$112:	; Assign value £temporary2493
x50790:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50794:	mov word [bp + 33], @5535$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 152 206

strtol_test$115:	; Parameter 27 text 8
x50799:	mov [bp + 35], bp	; 3: 137 110 35
x50802:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x50806:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50810:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x50814:	mov ax, [bp + 21]	; 3: 139 70 21
x50817:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x50820:	mov ax, [bp + 6]	; 3: 139 70 6
x50823:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x50826:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 157 198
x50831:	mov [bp + 29], bp	; 3: 137 110 29
x50834:	add bp, 27	; 3: 131 197 27
x50837:	mov di, bp	; 2: 137 239
x50839:	add di, 10	; 3: 131 199 10
x50842:	jmp printf	; 3: 233 103 70

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x50845:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x50850:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x50854:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x50858:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x50862:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x50866:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x50870:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x50874:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x50878:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x50882:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x50886:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x50890:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x50894:	mov [bp + 27], bp	; 3: 137 110 27
x50897:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2506 pointer
x50901:	mov si, bp	; 2: 137 238
x50903:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2506 8
x50906:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x50909:	mov ax, [bp + 6]	; 3: 139 70 6
x50912:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x50915:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 241 198
x50920:	mov [bp + 23], bp	; 3: 137 110 23
x50923:	add bp, 21	; 3: 131 197 21
x50926:	jmp strtol	; 3: 233 241 8

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2507

strtol_test$141:	; Assign value £temporary2507
x50929:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50933:	mov word [bp + 31], @5579$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 174 206

strtol_test$144:	; Parameter 25 text 8
x50938:	mov [bp + 33], bp	; 3: 137 110 33
x50941:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x50945:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50949:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x50953:	mov ax, [bp + 19]	; 3: 139 70 19
x50956:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x50959:	mov ax, [bp + 6]	; 3: 139 70 6
x50962:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x50965:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 40 199
x50970:	mov [bp + 27], bp	; 3: 137 110 27
x50973:	add bp, 25	; 3: 131 197 25
x50976:	mov di, bp	; 2: 137 239
x50978:	add di, 10	; 3: 131 199 10
x50981:	jmp printf	; 3: 233 220 69

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x50984:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x50989:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x50993:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x50997:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x51001:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x51005:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x51009:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x51013:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x51017:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x51021:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x51025:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x51029:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x51033:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x51037:	mov [bp + 28], bp	; 3: 137 110 28
x51040:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2521 pointer
x51044:	mov si, bp	; 2: 137 238
x51046:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2521 8
x51049:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x51052:	mov ax, [bp + 6]	; 3: 139 70 6
x51055:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x51058:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 128 199
x51063:	mov [bp + 24], bp	; 3: 137 110 24
x51066:	add bp, 22	; 3: 131 197 22
x51069:	jmp strtol	; 3: 233 98 8

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2522

strtol_test$171:	; Assign value £temporary2522
x51072:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51076:	mov word [bp + 32], @5626$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 196 206

strtol_test$174:	; Parameter 26 text 8
x51081:	mov [bp + 34], bp	; 3: 137 110 34
x51084:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x51088:	mov eax, [bp + 22]	; 4: 102 139 70 22
x51092:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x51096:	mov ax, [bp + 20]	; 3: 139 70 20
x51099:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x51102:	mov ax, [bp + 6]	; 3: 139 70 6
x51105:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x51108:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 183 199
x51113:	mov [bp + 28], bp	; 3: 137 110 28
x51116:	add bp, 26	; 3: 131 197 26
x51119:	mov di, bp	; 2: 137 239
x51121:	add di, 10	; 3: 131 199 10
x51124:	jmp printf	; 3: 233 77 69

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x51127:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x51132:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x51136:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x51140:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x51144:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x51148:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x51152:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x51156:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x51160:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x51164:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x51168:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x51172:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x51176:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x51180:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x51184:	mov [bp + 29], bp	; 3: 137 110 29
x51187:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2537 pointer
x51191:	mov si, bp	; 2: 137 238
x51193:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2537 8
x51196:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x51199:	mov ax, [bp + 6]	; 3: 139 70 6
x51202:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x51205:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 19 200
x51210:	mov [bp + 25], bp	; 3: 137 110 25
x51213:	add bp, 23	; 3: 131 197 23
x51216:	jmp strtol	; 3: 233 207 7

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2538

strtol_test$202:	; Assign value £temporary2538
x51219:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51223:	mov word [bp + 33], @5676$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 218 206

strtol_test$205:	; Parameter 27 text 8
x51228:	mov [bp + 35], bp	; 3: 137 110 35
x51231:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x51235:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51239:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x51243:	mov ax, [bp + 21]	; 3: 139 70 21
x51246:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x51249:	mov ax, [bp + 6]	; 3: 139 70 6
x51252:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x51255:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 74 200
x51260:	mov [bp + 29], bp	; 3: 137 110 29
x51263:	add bp, 27	; 3: 131 197 27
x51266:	mov di, bp	; 2: 137 239
x51268:	add di, 10	; 3: 131 199 10
x51271:	jmp printf	; 3: 233 186 68

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x51274:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x51279:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x51283:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x51287:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x51291:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x51295:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x51299:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x51303:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x51307:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x51311:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x51315:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x51319:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x51323:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x51327:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x51331:	mov [bp + 29], bp	; 3: 137 110 29
x51334:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2553 pointer
x51338:	mov si, bp	; 2: 137 238
x51340:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2553 8
x51343:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x51346:	mov ax, [bp + 6]	; 3: 139 70 6
x51349:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x51352:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 166 200
x51357:	mov [bp + 25], bp	; 3: 137 110 25
x51360:	add bp, 23	; 3: 131 197 23
x51363:	jmp strtol	; 3: 233 60 7

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2554

strtol_test$233:	; Assign value £temporary2554
x51366:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51370:	mov word [bp + 33], @5726$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 240 206

strtol_test$236:	; Parameter 27 text 8
x51375:	mov [bp + 35], bp	; 3: 137 110 35
x51378:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x51382:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51386:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x51390:	mov ax, [bp + 21]	; 3: 139 70 21
x51393:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x51396:	mov ax, [bp + 6]	; 3: 139 70 6
x51399:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x51402:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 221 200
x51407:	mov [bp + 29], bp	; 3: 137 110 29
x51410:	add bp, 27	; 3: 131 197 27
x51413:	mov di, bp	; 2: 137 239
x51415:	add di, 10	; 3: 131 199 10
x51418:	jmp printf	; 3: 233 39 68

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x51421:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x51426:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x51430:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x51434:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x51438:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x51442:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x51446:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x51450:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x51454:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x51458:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x51462:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x51466:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x51470:	mov [bp + 27], bp	; 3: 137 110 27
x51473:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2567 pointer
x51477:	mov si, bp	; 2: 137 238
x51479:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2567 8
x51482:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x51485:	mov ax, [bp + 6]	; 3: 139 70 6
x51488:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x51491:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 49 201
x51496:	mov [bp + 23], bp	; 3: 137 110 23
x51499:	add bp, 21	; 3: 131 197 21
x51502:	jmp strtol	; 3: 233 177 6

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2568

strtol_test$262:	; Assign value £temporary2568
x51505:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51509:	mov word [bp + 31], @5770$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 6 207

strtol_test$265:	; Parameter 25 text 8
x51514:	mov [bp + 33], bp	; 3: 137 110 33
x51517:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x51521:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51525:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x51529:	mov ax, [bp + 19]	; 3: 139 70 19
x51532:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x51535:	mov ax, [bp + 6]	; 3: 139 70 6
x51538:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x51541:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 104 201
x51546:	mov [bp + 27], bp	; 3: 137 110 27
x51549:	add bp, 25	; 3: 131 197 25
x51552:	mov di, bp	; 2: 137 239
x51554:	add di, 10	; 3: 131 199 10
x51557:	jmp printf	; 3: 233 156 67

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x51560:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x51565:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x51569:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x51573:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x51577:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x51581:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x51585:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x51589:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x51593:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x51597:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x51601:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x51605:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x51609:	mov [bp + 27], bp	; 3: 137 110 27
x51612:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2581 pointer
x51616:	mov si, bp	; 2: 137 238
x51618:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2581 8
x51621:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x51624:	mov ax, [bp + 6]	; 3: 139 70 6
x51627:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x51630:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 188 201
x51635:	mov [bp + 23], bp	; 3: 137 110 23
x51638:	add bp, 21	; 3: 131 197 21
x51641:	jmp strtol	; 3: 233 38 6

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2582

strtol_test$291:	; Assign value £temporary2582
x51644:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51648:	mov word [bp + 31], @5814$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 28 207

strtol_test$294:	; Parameter 25 text 8
x51653:	mov [bp + 33], bp	; 3: 137 110 33
x51656:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x51660:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51664:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x51668:	mov ax, [bp + 19]	; 3: 139 70 19
x51671:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x51674:	mov ax, [bp + 6]	; 3: 139 70 6
x51677:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x51680:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 243 201
x51685:	mov [bp + 27], bp	; 3: 137 110 27
x51688:	add bp, 25	; 3: 131 197 25
x51691:	mov di, bp	; 2: 137 239
x51693:	add di, 10	; 3: 131 199 10
x51696:	jmp printf	; 3: 233 17 67

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x51699:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x51704:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x51708:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x51712:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x51716:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x51720:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x51724:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x51728:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x51732:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x51736:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x51740:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x51744:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x51748:	mov [bp + 27], bp	; 3: 137 110 27
x51751:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2595 pointer
x51755:	mov si, bp	; 2: 137 238
x51757:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2595 8
x51760:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x51763:	mov ax, [bp + 6]	; 3: 139 70 6
x51766:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x51769:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 71 202
x51774:	mov [bp + 23], bp	; 3: 137 110 23
x51777:	add bp, 21	; 3: 131 197 21
x51780:	jmp strtol	; 3: 233 155 5

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2596

strtol_test$320:	; Assign value £temporary2596
x51783:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51787:	mov word [bp + 31], @5858$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 50 207

strtol_test$323:	; Parameter 25 text 8
x51792:	mov [bp + 33], bp	; 3: 137 110 33
x51795:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x51799:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51803:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x51807:	mov ax, [bp + 19]	; 3: 139 70 19
x51810:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x51813:	mov ax, [bp + 6]	; 3: 139 70 6
x51816:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x51819:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 126 202
x51824:	mov [bp + 27], bp	; 3: 137 110 27
x51827:	add bp, 25	; 3: 131 197 25
x51830:	mov di, bp	; 2: 137 239
x51832:	add di, 10	; 3: 131 199 10
x51835:	jmp printf	; 3: 233 134 66

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x51838:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x51843:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x51847:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x51851:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x51855:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x51859:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x51863:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x51867:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x51871:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x51875:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x51879:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x51883:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x51887:	mov [bp + 27], bp	; 3: 137 110 27
x51890:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2609 pointer
x51894:	mov si, bp	; 2: 137 238
x51896:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2609 8
x51899:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x51902:	mov ax, [bp + 6]	; 3: 139 70 6
x51905:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x51908:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 210 202
x51913:	mov [bp + 23], bp	; 3: 137 110 23
x51916:	add bp, 21	; 3: 131 197 21
x51919:	jmp strtol	; 3: 233 16 5

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2610

strtol_test$349:	; Assign value £temporary2610
x51922:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51926:	mov word [bp + 31], @5902$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 72 207

strtol_test$352:	; Parameter 25 text 8
x51931:	mov [bp + 33], bp	; 3: 137 110 33
x51934:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x51938:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51942:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x51946:	mov ax, [bp + 19]	; 3: 139 70 19
x51949:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x51952:	mov ax, [bp + 6]	; 3: 139 70 6
x51955:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x51958:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 9 203
x51963:	mov [bp + 27], bp	; 3: 137 110 27
x51966:	add bp, 25	; 3: 131 197 25
x51969:	mov di, bp	; 2: 137 239
x51971:	add di, 10	; 3: 131 199 10
x51974:	jmp printf	; 3: 233 251 65

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x51977:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x51982:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x51986:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x51990:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x51994:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x51998:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x52002:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x52006:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x52010:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x52014:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x52018:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x52022:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x52026:	mov [bp + 27], bp	; 3: 137 110 27
x52029:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2623 pointer
x52033:	mov si, bp	; 2: 137 238
x52035:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2623 8
x52038:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x52041:	mov ax, [bp + 6]	; 3: 139 70 6
x52044:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x52047:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 93 203
x52052:	mov [bp + 23], bp	; 3: 137 110 23
x52055:	add bp, 21	; 3: 131 197 21
x52058:	jmp strtol	; 3: 233 133 4

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2624

strtol_test$378:	; Assign value £temporary2624
x52061:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52065:	mov word [bp + 31], @5946$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 94 207

strtol_test$381:	; Parameter 25 text 8
x52070:	mov [bp + 33], bp	; 3: 137 110 33
x52073:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x52077:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52081:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x52085:	mov ax, [bp + 19]	; 3: 139 70 19
x52088:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x52091:	mov ax, [bp + 6]	; 3: 139 70 6
x52094:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x52097:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 148 203
x52102:	mov [bp + 27], bp	; 3: 137 110 27
x52105:	add bp, 25	; 3: 131 197 25
x52108:	mov di, bp	; 2: 137 239
x52110:	add di, 10	; 3: 131 199 10
x52113:	jmp printf	; 3: 233 112 65

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x52116:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x52121:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x52125:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x52129:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x52133:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x52137:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x52141:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x52145:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x52149:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x52153:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x52157:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x52161:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x52165:	mov [bp + 27], bp	; 3: 137 110 27
x52168:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2637 pointer
x52172:	mov si, bp	; 2: 137 238
x52174:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2637 8
x52177:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x52180:	mov ax, [bp + 6]	; 3: 139 70 6
x52183:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x52186:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 232 203
x52191:	mov [bp + 23], bp	; 3: 137 110 23
x52194:	add bp, 21	; 3: 131 197 21
x52197:	jmp strtol	; 3: 233 250 3

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2638

strtol_test$407:	; Assign value £temporary2638
x52200:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52204:	mov word [bp + 31], @5990$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 116 207

strtol_test$410:	; Parameter 25 text 8
x52209:	mov [bp + 33], bp	; 3: 137 110 33
x52212:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x52216:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52220:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x52224:	mov ax, [bp + 19]	; 3: 139 70 19
x52227:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x52230:	mov ax, [bp + 6]	; 3: 139 70 6
x52233:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x52236:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 31 204
x52241:	mov [bp + 27], bp	; 3: 137 110 27
x52244:	add bp, 25	; 3: 131 197 25
x52247:	mov di, bp	; 2: 137 239
x52249:	add di, 10	; 3: 131 199 10
x52252:	jmp printf	; 3: 233 229 64

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x52255:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x52260:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x52264:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x52268:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x52272:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x52276:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x52280:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x52284:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x52288:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x52292:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x52296:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x52300:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x52304:	mov [bp + 27], bp	; 3: 137 110 27
x52307:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2651 pointer
x52311:	mov si, bp	; 2: 137 238
x52313:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2651 8
x52316:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x52319:	mov ax, [bp + 6]	; 3: 139 70 6
x52322:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x52325:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 115 204
x52330:	mov [bp + 23], bp	; 3: 137 110 23
x52333:	add bp, 21	; 3: 131 197 21
x52336:	jmp strtol	; 3: 233 111 3

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2652

strtol_test$436:	; Assign value £temporary2652
x52339:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52343:	mov word [bp + 31], @6034$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 138 207

strtol_test$439:	; Parameter 25 text 8
x52348:	mov [bp + 33], bp	; 3: 137 110 33
x52351:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x52355:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52359:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x52363:	mov ax, [bp + 19]	; 3: 139 70 19
x52366:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x52369:	mov ax, [bp + 6]	; 3: 139 70 6
x52372:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x52375:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 170 204
x52380:	mov [bp + 27], bp	; 3: 137 110 27
x52383:	add bp, 25	; 3: 131 197 25
x52386:	mov di, bp	; 2: 137 239
x52388:	add di, 10	; 3: 131 199 10
x52391:	jmp printf	; 3: 233 90 64

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x52394:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x52399:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x52403:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x52407:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x52411:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x52415:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x52419:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x52423:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x52427:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x52431:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x52435:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x52439:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x52443:	mov [bp + 27], bp	; 3: 137 110 27
x52446:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2665 pointer
x52450:	mov si, bp	; 2: 137 238
x52452:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2665 8
x52455:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x52458:	mov ax, [bp + 6]	; 3: 139 70 6
x52461:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x52464:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 254 204
x52469:	mov [bp + 23], bp	; 3: 137 110 23
x52472:	add bp, 21	; 3: 131 197 21
x52475:	jmp strtol	; 3: 233 228 2

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2666

strtol_test$465:	; Assign value £temporary2666
x52478:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52482:	mov word [bp + 31], @6078$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 160 207

strtol_test$468:	; Parameter 25 text 8
x52487:	mov [bp + 33], bp	; 3: 137 110 33
x52490:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x52494:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52498:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x52502:	mov ax, [bp + 19]	; 3: 139 70 19
x52505:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x52508:	mov ax, [bp + 6]	; 3: 139 70 6
x52511:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x52514:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 53 205
x52519:	mov [bp + 27], bp	; 3: 137 110 27
x52522:	add bp, 25	; 3: 131 197 25
x52525:	mov di, bp	; 2: 137 239
x52527:	add di, 10	; 3: 131 199 10
x52530:	jmp printf	; 3: 233 207 63

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x52533:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x52538:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x52542:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x52546:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x52550:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x52554:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x52558:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x52562:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x52566:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x52570:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x52574:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x52578:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x52582:	mov [bp + 27], bp	; 3: 137 110 27
x52585:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2679 pointer
x52589:	mov si, bp	; 2: 137 238
x52591:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2679 8
x52594:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x52597:	mov ax, [bp + 6]	; 3: 139 70 6
x52600:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x52603:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 137 205
x52608:	mov [bp + 23], bp	; 3: 137 110 23
x52611:	add bp, 21	; 3: 131 197 21
x52614:	jmp strtol	; 3: 233 89 2

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2680

strtol_test$494:	; Assign value £temporary2680
x52617:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52621:	mov word [bp + 31], @6122$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 182 207

strtol_test$497:	; Parameter 25 text 8
x52626:	mov [bp + 33], bp	; 3: 137 110 33
x52629:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x52633:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52637:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x52641:	mov ax, [bp + 19]	; 3: 139 70 19
x52644:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x52647:	mov ax, [bp + 6]	; 3: 139 70 6
x52650:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x52653:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 192 205
x52658:	mov [bp + 27], bp	; 3: 137 110 27
x52661:	add bp, 25	; 3: 131 197 25
x52664:	mov di, bp	; 2: 137 239
x52666:	add di, 10	; 3: 131 199 10
x52669:	jmp printf	; 3: 233 68 63

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x52672:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x52677:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x52681:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x52685:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x52689:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x52693:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x52697:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x52701:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x52705:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x52709:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x52713:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x52717:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x52721:	mov [bp + 27], bp	; 3: 137 110 27
x52724:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2693 pointer
x52728:	mov si, bp	; 2: 137 238
x52730:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2693 8
x52733:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x52736:	mov ax, [bp + 6]	; 3: 139 70 6
x52739:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x52742:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 20 206
x52747:	mov [bp + 23], bp	; 3: 137 110 23
x52750:	add bp, 21	; 3: 131 197 21
x52753:	jmp strtol	; 3: 233 206 1

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2694

strtol_test$523:	; Assign value £temporary2694
x52756:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52760:	mov word [bp + 31], @6166$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 204 207

strtol_test$526:	; Parameter 25 text 8
x52765:	mov [bp + 33], bp	; 3: 137 110 33
x52768:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x52772:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52776:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x52780:	mov ax, [bp + 19]	; 3: 139 70 19
x52783:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x52786:	mov ax, [bp + 6]	; 3: 139 70 6
x52789:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x52792:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 75 206
x52797:	mov [bp + 27], bp	; 3: 137 110 27
x52800:	add bp, 25	; 3: 131 197 25
x52803:	mov di, bp	; 2: 137 239
x52805:	add di, 10	; 3: 131 199 10
x52808:	jmp printf	; 3: 233 185 62

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x52811:	mov ax, [bp]	; 3: 139 70 0
x52814:	mov di, [bp + 4]	; 3: 139 126 4
x52817:	mov bp, [bp + 2]	; 3: 139 110 2
x52820:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

@5388$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52822:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5435$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52844:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5485$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52866:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5535$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52888:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5579$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52910:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5626$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52932:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5676$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52954:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5726$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52976:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5770$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52998:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5814$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53020:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5858$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53042:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5902$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53064:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5946$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53086:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5990$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53108:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6034$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53130:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6078$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53152:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6122$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53174:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6166$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53196:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x53218:	mov word [g_inStatus], 1	; 6: 199 6 125 96 1 0

strtol$1:	; Assign g_inDevice s
x53224:	mov ax, [bp + 6]	; 3: 139 70 6
x53227:	mov [g_inDevice], ax	; 3: 163 127 96

strtol$2:	; Assign g_inChars 0
x53230:	mov word [g_inChars], 0	; 6: 199 6 162 101 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x53236:	mov ax, [bp + 10]	; 3: 139 70 10
x53239:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x53242:	mov word [bp + 12], strtol$6	; 5: 199 70 12 8 208
x53247:	mov [bp + 14], bp	; 3: 137 110 14
x53250:	add bp, 12	; 3: 131 197 12
x53253:	jmp scanLongInt	; 3: 233 143 152

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2429

strtol$8:	; Assign value £temporary2429
x53256:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x53260:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x53264:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2431 -> endp endp 0
x53266:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2431 -> endp s g_inChars
x53269:	mov ax, [bp + 6]	; 3: 139 70 6
x53272:	add ax, [g_inChars]	; 4: 3 6 162 101
x53276:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x53278:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x53282:	mov ax, [bp]	; 3: 139 70 0
x53285:	mov di, [bp + 4]	; 3: 139 126 4
x53288:	mov bp, [bp + 2]	; 3: 139 110 2
x53291:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x53293:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x53298:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x53302:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x53306:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x53310:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x53314:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x53318:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x53322:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x53326:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x53330:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x53334:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x53338:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x53342:	mov [bp + 27], bp	; 3: 137 110 27
x53345:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2874 pointer
x53349:	mov si, bp	; 2: 137 238
x53351:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2874 8
x53354:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x53357:	mov ax, [bp + 6]	; 3: 139 70 6
x53360:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x53363:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 129 208
x53368:	mov [bp + 23], bp	; 3: 137 110 23
x53371:	add bp, 21	; 3: 131 197 21
x53374:	jmp strtoul	; 3: 233 49 11

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2875

strtoul_test$20:	; Assign value £temporary2875
x53377:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53381:	mov word [bp + 31], @6387$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 38 218

strtoul_test$23:	; Parameter 25 text 8
x53386:	mov [bp + 33], bp	; 3: 137 110 33
x53389:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x53393:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53397:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x53401:	mov ax, [bp + 19]	; 3: 139 70 19
x53404:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x53407:	mov ax, [bp + 6]	; 3: 139 70 6
x53410:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x53413:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 184 208
x53418:	mov [bp + 27], bp	; 3: 137 110 27
x53421:	add bp, 25	; 3: 131 197 25
x53424:	mov di, bp	; 2: 137 239
x53426:	add di, 10	; 3: 131 199 10
x53429:	jmp printf	; 3: 233 76 60

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x53432:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x53437:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x53441:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x53445:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x53449:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x53453:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x53457:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x53461:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x53465:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x53469:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x53473:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x53477:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x53481:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x53485:	mov [bp + 28], bp	; 3: 137 110 28
x53488:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2889 pointer
x53492:	mov si, bp	; 2: 137 238
x53494:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2889 8
x53497:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x53500:	mov ax, [bp + 6]	; 3: 139 70 6
x53503:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x53506:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 16 209
x53511:	mov [bp + 24], bp	; 3: 137 110 24
x53514:	add bp, 22	; 3: 131 197 22
x53517:	jmp strtoul	; 3: 233 162 10

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2890

strtoul_test$50:	; Assign value £temporary2890
x53520:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53524:	mov word [bp + 32], @6434$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 60 218

strtoul_test$53:	; Parameter 26 text 8
x53529:	mov [bp + 34], bp	; 3: 137 110 34
x53532:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x53536:	mov eax, [bp + 22]	; 4: 102 139 70 22
x53540:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x53544:	mov ax, [bp + 20]	; 3: 139 70 20
x53547:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x53550:	mov ax, [bp + 6]	; 3: 139 70 6
x53553:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x53556:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 71 209
x53561:	mov [bp + 28], bp	; 3: 137 110 28
x53564:	add bp, 26	; 3: 131 197 26
x53567:	mov di, bp	; 2: 137 239
x53569:	add di, 10	; 3: 131 199 10
x53572:	jmp printf	; 3: 233 189 59

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x53575:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x53580:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x53584:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x53588:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x53592:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x53596:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x53600:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x53604:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x53608:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x53612:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x53616:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x53620:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x53624:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x53628:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x53632:	mov [bp + 29], bp	; 3: 137 110 29
x53635:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2905 pointer
x53639:	mov si, bp	; 2: 137 238
x53641:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2905 8
x53644:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x53647:	mov ax, [bp + 6]	; 3: 139 70 6
x53650:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x53653:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 163 209
x53658:	mov [bp + 25], bp	; 3: 137 110 25
x53661:	add bp, 23	; 3: 131 197 23
x53664:	jmp strtoul	; 3: 233 15 10

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2906

strtoul_test$81:	; Assign value £temporary2906
x53667:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53671:	mov word [bp + 33], @6484$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 82 218

strtoul_test$84:	; Parameter 27 text 8
x53676:	mov [bp + 35], bp	; 3: 137 110 35
x53679:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x53683:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53687:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x53691:	mov ax, [bp + 21]	; 3: 139 70 21
x53694:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x53697:	mov ax, [bp + 6]	; 3: 139 70 6
x53700:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x53703:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 218 209
x53708:	mov [bp + 29], bp	; 3: 137 110 29
x53711:	add bp, 27	; 3: 131 197 27
x53714:	mov di, bp	; 2: 137 239
x53716:	add di, 10	; 3: 131 199 10
x53719:	jmp printf	; 3: 233 42 59

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x53722:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x53727:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x53731:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x53735:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x53739:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x53743:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x53747:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x53751:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x53755:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x53759:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x53763:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x53767:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x53771:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x53775:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x53779:	mov [bp + 29], bp	; 3: 137 110 29
x53782:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2921 pointer
x53786:	mov si, bp	; 2: 137 238
x53788:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2921 8
x53791:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x53794:	mov ax, [bp + 6]	; 3: 139 70 6
x53797:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x53800:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 54 210
x53805:	mov [bp + 25], bp	; 3: 137 110 25
x53808:	add bp, 23	; 3: 131 197 23
x53811:	jmp strtoul	; 3: 233 124 9

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2922

strtoul_test$112:	; Assign value £temporary2922
x53814:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53818:	mov word [bp + 33], @6534$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 104 218

strtoul_test$115:	; Parameter 27 text 8
x53823:	mov [bp + 35], bp	; 3: 137 110 35
x53826:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x53830:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53834:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x53838:	mov ax, [bp + 21]	; 3: 139 70 21
x53841:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x53844:	mov ax, [bp + 6]	; 3: 139 70 6
x53847:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x53850:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 109 210
x53855:	mov [bp + 29], bp	; 3: 137 110 29
x53858:	add bp, 27	; 3: 131 197 27
x53861:	mov di, bp	; 2: 137 239
x53863:	add di, 10	; 3: 131 199 10
x53866:	jmp printf	; 3: 233 151 58

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x53869:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x53874:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x53878:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x53882:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x53886:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x53890:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x53894:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x53898:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x53902:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x53906:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x53910:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x53914:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x53918:	mov [bp + 27], bp	; 3: 137 110 27
x53921:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2935 pointer
x53925:	mov si, bp	; 2: 137 238
x53927:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2935 8
x53930:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x53933:	mov ax, [bp + 6]	; 3: 139 70 6
x53936:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x53939:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 193 210
x53944:	mov [bp + 23], bp	; 3: 137 110 23
x53947:	add bp, 21	; 3: 131 197 21
x53950:	jmp strtoul	; 3: 233 241 8

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2936

strtoul_test$141:	; Assign value £temporary2936
x53953:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53957:	mov word [bp + 31], @6578$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 126 218

strtoul_test$144:	; Parameter 25 text 8
x53962:	mov [bp + 33], bp	; 3: 137 110 33
x53965:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x53969:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53973:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x53977:	mov ax, [bp + 19]	; 3: 139 70 19
x53980:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x53983:	mov ax, [bp + 6]	; 3: 139 70 6
x53986:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x53989:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 248 210
x53994:	mov [bp + 27], bp	; 3: 137 110 27
x53997:	add bp, 25	; 3: 131 197 25
x54000:	mov di, bp	; 2: 137 239
x54002:	add di, 10	; 3: 131 199 10
x54005:	jmp printf	; 3: 233 12 58

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x54008:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x54013:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x54017:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x54021:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x54025:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x54029:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x54033:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x54037:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x54041:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x54045:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x54049:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x54053:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x54057:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x54061:	mov [bp + 28], bp	; 3: 137 110 28
x54064:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2950 pointer
x54068:	mov si, bp	; 2: 137 238
x54070:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2950 8
x54073:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x54076:	mov ax, [bp + 6]	; 3: 139 70 6
x54079:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x54082:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 80 211
x54087:	mov [bp + 24], bp	; 3: 137 110 24
x54090:	add bp, 22	; 3: 131 197 22
x54093:	jmp strtoul	; 3: 233 98 8

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2951

strtoul_test$171:	; Assign value £temporary2951
x54096:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54100:	mov word [bp + 32], @6625$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 148 218

strtoul_test$174:	; Parameter 26 text 8
x54105:	mov [bp + 34], bp	; 3: 137 110 34
x54108:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x54112:	mov eax, [bp + 22]	; 4: 102 139 70 22
x54116:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x54120:	mov ax, [bp + 20]	; 3: 139 70 20
x54123:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x54126:	mov ax, [bp + 6]	; 3: 139 70 6
x54129:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x54132:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 135 211
x54137:	mov [bp + 28], bp	; 3: 137 110 28
x54140:	add bp, 26	; 3: 131 197 26
x54143:	mov di, bp	; 2: 137 239
x54145:	add di, 10	; 3: 131 199 10
x54148:	jmp printf	; 3: 233 125 57

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x54151:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x54156:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x54160:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x54164:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x54168:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x54172:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x54176:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x54180:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x54184:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x54188:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x54192:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x54196:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x54200:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x54204:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x54208:	mov [bp + 29], bp	; 3: 137 110 29
x54211:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2966 pointer
x54215:	mov si, bp	; 2: 137 238
x54217:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2966 8
x54220:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x54223:	mov ax, [bp + 6]	; 3: 139 70 6
x54226:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x54229:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 227 211
x54234:	mov [bp + 25], bp	; 3: 137 110 25
x54237:	add bp, 23	; 3: 131 197 23
x54240:	jmp strtoul	; 3: 233 207 7

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2967

strtoul_test$202:	; Assign value £temporary2967
x54243:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54247:	mov word [bp + 33], @6675$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 170 218

strtoul_test$205:	; Parameter 27 text 8
x54252:	mov [bp + 35], bp	; 3: 137 110 35
x54255:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x54259:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54263:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x54267:	mov ax, [bp + 21]	; 3: 139 70 21
x54270:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x54273:	mov ax, [bp + 6]	; 3: 139 70 6
x54276:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x54279:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 26 212
x54284:	mov [bp + 29], bp	; 3: 137 110 29
x54287:	add bp, 27	; 3: 131 197 27
x54290:	mov di, bp	; 2: 137 239
x54292:	add di, 10	; 3: 131 199 10
x54295:	jmp printf	; 3: 233 234 56

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x54298:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x54303:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x54307:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x54311:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x54315:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x54319:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x54323:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x54327:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x54331:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x54335:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x54339:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x54343:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x54347:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x54351:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x54355:	mov [bp + 29], bp	; 3: 137 110 29
x54358:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2982 pointer
x54362:	mov si, bp	; 2: 137 238
x54364:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2982 8
x54367:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x54370:	mov ax, [bp + 6]	; 3: 139 70 6
x54373:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x54376:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 118 212
x54381:	mov [bp + 25], bp	; 3: 137 110 25
x54384:	add bp, 23	; 3: 131 197 23
x54387:	jmp strtoul	; 3: 233 60 7

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2983

strtoul_test$233:	; Assign value £temporary2983
x54390:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54394:	mov word [bp + 33], @6725$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 192 218

strtoul_test$236:	; Parameter 27 text 8
x54399:	mov [bp + 35], bp	; 3: 137 110 35
x54402:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x54406:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54410:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x54414:	mov ax, [bp + 21]	; 3: 139 70 21
x54417:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x54420:	mov ax, [bp + 6]	; 3: 139 70 6
x54423:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x54426:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 173 212
x54431:	mov [bp + 29], bp	; 3: 137 110 29
x54434:	add bp, 27	; 3: 131 197 27
x54437:	mov di, bp	; 2: 137 239
x54439:	add di, 10	; 3: 131 199 10
x54442:	jmp printf	; 3: 233 87 56

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x54445:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x54450:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x54454:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x54458:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x54462:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x54466:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x54470:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x54474:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x54478:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x54482:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x54486:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x54490:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x54494:	mov [bp + 27], bp	; 3: 137 110 27
x54497:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2996 pointer
x54501:	mov si, bp	; 2: 137 238
x54503:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2996 8
x54506:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x54509:	mov ax, [bp + 6]	; 3: 139 70 6
x54512:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x54515:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 1 213
x54520:	mov [bp + 23], bp	; 3: 137 110 23
x54523:	add bp, 21	; 3: 131 197 21
x54526:	jmp strtoul	; 3: 233 177 6

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2997

strtoul_test$262:	; Assign value £temporary2997
x54529:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54533:	mov word [bp + 31], @6769$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 214 218

strtoul_test$265:	; Parameter 25 text 8
x54538:	mov [bp + 33], bp	; 3: 137 110 33
x54541:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x54545:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54549:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x54553:	mov ax, [bp + 19]	; 3: 139 70 19
x54556:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x54559:	mov ax, [bp + 6]	; 3: 139 70 6
x54562:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x54565:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 56 213
x54570:	mov [bp + 27], bp	; 3: 137 110 27
x54573:	add bp, 25	; 3: 131 197 25
x54576:	mov di, bp	; 2: 137 239
x54578:	add di, 10	; 3: 131 199 10
x54581:	jmp printf	; 3: 233 204 55

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x54584:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x54589:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x54593:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x54597:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x54601:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x54605:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x54609:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x54613:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x54617:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x54621:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x54625:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x54629:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x54633:	mov [bp + 27], bp	; 3: 137 110 27
x54636:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary3010 pointer
x54640:	mov si, bp	; 2: 137 238
x54642:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary3010 8
x54645:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x54648:	mov ax, [bp + 6]	; 3: 139 70 6
x54651:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x54654:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 140 213
x54659:	mov [bp + 23], bp	; 3: 137 110 23
x54662:	add bp, 21	; 3: 131 197 21
x54665:	jmp strtoul	; 3: 233 38 6

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary3011

strtoul_test$291:	; Assign value £temporary3011
x54668:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54672:	mov word [bp + 31], @6813$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 236 218

strtoul_test$294:	; Parameter 25 text 8
x54677:	mov [bp + 33], bp	; 3: 137 110 33
x54680:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x54684:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54688:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x54692:	mov ax, [bp + 19]	; 3: 139 70 19
x54695:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x54698:	mov ax, [bp + 6]	; 3: 139 70 6
x54701:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x54704:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 195 213
x54709:	mov [bp + 27], bp	; 3: 137 110 27
x54712:	add bp, 25	; 3: 131 197 25
x54715:	mov di, bp	; 2: 137 239
x54717:	add di, 10	; 3: 131 199 10
x54720:	jmp printf	; 3: 233 65 55

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x54723:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x54728:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x54732:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x54736:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x54740:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x54744:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x54748:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x54752:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x54756:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x54760:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x54764:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x54768:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x54772:	mov [bp + 27], bp	; 3: 137 110 27
x54775:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary3024 pointer
x54779:	mov si, bp	; 2: 137 238
x54781:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary3024 8
x54784:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x54787:	mov ax, [bp + 6]	; 3: 139 70 6
x54790:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x54793:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 23 214
x54798:	mov [bp + 23], bp	; 3: 137 110 23
x54801:	add bp, 21	; 3: 131 197 21
x54804:	jmp strtoul	; 3: 233 155 5

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary3025

strtoul_test$320:	; Assign value £temporary3025
x54807:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54811:	mov word [bp + 31], @6857$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 2 219

strtoul_test$323:	; Parameter 25 text 8
x54816:	mov [bp + 33], bp	; 3: 137 110 33
x54819:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x54823:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54827:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x54831:	mov ax, [bp + 19]	; 3: 139 70 19
x54834:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x54837:	mov ax, [bp + 6]	; 3: 139 70 6
x54840:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x54843:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 78 214
x54848:	mov [bp + 27], bp	; 3: 137 110 27
x54851:	add bp, 25	; 3: 131 197 25
x54854:	mov di, bp	; 2: 137 239
x54856:	add di, 10	; 3: 131 199 10
x54859:	jmp printf	; 3: 233 182 54

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x54862:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x54867:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x54871:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x54875:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x54879:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x54883:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x54887:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x54891:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x54895:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x54899:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x54903:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x54907:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x54911:	mov [bp + 27], bp	; 3: 137 110 27
x54914:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary3038 pointer
x54918:	mov si, bp	; 2: 137 238
x54920:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary3038 8
x54923:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x54926:	mov ax, [bp + 6]	; 3: 139 70 6
x54929:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x54932:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 162 214
x54937:	mov [bp + 23], bp	; 3: 137 110 23
x54940:	add bp, 21	; 3: 131 197 21
x54943:	jmp strtoul	; 3: 233 16 5

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary3039

strtoul_test$349:	; Assign value £temporary3039
x54946:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54950:	mov word [bp + 31], @6901$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 24 219

strtoul_test$352:	; Parameter 25 text 8
x54955:	mov [bp + 33], bp	; 3: 137 110 33
x54958:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x54962:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54966:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x54970:	mov ax, [bp + 19]	; 3: 139 70 19
x54973:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x54976:	mov ax, [bp + 6]	; 3: 139 70 6
x54979:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x54982:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 217 214
x54987:	mov [bp + 27], bp	; 3: 137 110 27
x54990:	add bp, 25	; 3: 131 197 25
x54993:	mov di, bp	; 2: 137 239
x54995:	add di, 10	; 3: 131 199 10
x54998:	jmp printf	; 3: 233 43 54

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x55001:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x55006:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x55010:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x55014:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x55018:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x55022:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x55026:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x55030:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x55034:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x55038:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x55042:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x55046:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x55050:	mov [bp + 27], bp	; 3: 137 110 27
x55053:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary3052 pointer
x55057:	mov si, bp	; 2: 137 238
x55059:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary3052 8
x55062:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x55065:	mov ax, [bp + 6]	; 3: 139 70 6
x55068:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x55071:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 45 215
x55076:	mov [bp + 23], bp	; 3: 137 110 23
x55079:	add bp, 21	; 3: 131 197 21
x55082:	jmp strtoul	; 3: 233 133 4

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary3053

strtoul_test$378:	; Assign value £temporary3053
x55085:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55089:	mov word [bp + 31], @6945$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 46 219

strtoul_test$381:	; Parameter 25 text 8
x55094:	mov [bp + 33], bp	; 3: 137 110 33
x55097:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x55101:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55105:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x55109:	mov ax, [bp + 19]	; 3: 139 70 19
x55112:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x55115:	mov ax, [bp + 6]	; 3: 139 70 6
x55118:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x55121:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 100 215
x55126:	mov [bp + 27], bp	; 3: 137 110 27
x55129:	add bp, 25	; 3: 131 197 25
x55132:	mov di, bp	; 2: 137 239
x55134:	add di, 10	; 3: 131 199 10
x55137:	jmp printf	; 3: 233 160 53

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x55140:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x55145:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x55149:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x55153:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x55157:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x55161:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x55165:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x55169:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x55173:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x55177:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x55181:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x55185:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x55189:	mov [bp + 27], bp	; 3: 137 110 27
x55192:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary3066 pointer
x55196:	mov si, bp	; 2: 137 238
x55198:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary3066 8
x55201:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x55204:	mov ax, [bp + 6]	; 3: 139 70 6
x55207:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x55210:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 184 215
x55215:	mov [bp + 23], bp	; 3: 137 110 23
x55218:	add bp, 21	; 3: 131 197 21
x55221:	jmp strtoul	; 3: 233 250 3

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary3067

strtoul_test$407:	; Assign value £temporary3067
x55224:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55228:	mov word [bp + 31], @6989$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 68 219

strtoul_test$410:	; Parameter 25 text 8
x55233:	mov [bp + 33], bp	; 3: 137 110 33
x55236:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x55240:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55244:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x55248:	mov ax, [bp + 19]	; 3: 139 70 19
x55251:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x55254:	mov ax, [bp + 6]	; 3: 139 70 6
x55257:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x55260:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 239 215
x55265:	mov [bp + 27], bp	; 3: 137 110 27
x55268:	add bp, 25	; 3: 131 197 25
x55271:	mov di, bp	; 2: 137 239
x55273:	add di, 10	; 3: 131 199 10
x55276:	jmp printf	; 3: 233 21 53

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x55279:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x55284:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x55288:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x55292:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x55296:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x55300:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x55304:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x55308:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x55312:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x55316:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x55320:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x55324:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x55328:	mov [bp + 27], bp	; 3: 137 110 27
x55331:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary3080 pointer
x55335:	mov si, bp	; 2: 137 238
x55337:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary3080 8
x55340:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x55343:	mov ax, [bp + 6]	; 3: 139 70 6
x55346:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x55349:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 67 216
x55354:	mov [bp + 23], bp	; 3: 137 110 23
x55357:	add bp, 21	; 3: 131 197 21
x55360:	jmp strtoul	; 3: 233 111 3

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary3081

strtoul_test$436:	; Assign value £temporary3081
x55363:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55367:	mov word [bp + 31], @7033$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 90 219

strtoul_test$439:	; Parameter 25 text 8
x55372:	mov [bp + 33], bp	; 3: 137 110 33
x55375:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x55379:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55383:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x55387:	mov ax, [bp + 19]	; 3: 139 70 19
x55390:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x55393:	mov ax, [bp + 6]	; 3: 139 70 6
x55396:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x55399:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 122 216
x55404:	mov [bp + 27], bp	; 3: 137 110 27
x55407:	add bp, 25	; 3: 131 197 25
x55410:	mov di, bp	; 2: 137 239
x55412:	add di, 10	; 3: 131 199 10
x55415:	jmp printf	; 3: 233 138 52

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x55418:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x55423:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x55427:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x55431:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x55435:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x55439:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x55443:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x55447:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x55451:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x55455:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x55459:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x55463:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x55467:	mov [bp + 27], bp	; 3: 137 110 27
x55470:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary3094 pointer
x55474:	mov si, bp	; 2: 137 238
x55476:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary3094 8
x55479:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x55482:	mov ax, [bp + 6]	; 3: 139 70 6
x55485:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x55488:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 206 216
x55493:	mov [bp + 23], bp	; 3: 137 110 23
x55496:	add bp, 21	; 3: 131 197 21
x55499:	jmp strtoul	; 3: 233 228 2

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary3095

strtoul_test$465:	; Assign value £temporary3095
x55502:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55506:	mov word [bp + 31], @7077$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 112 219

strtoul_test$468:	; Parameter 25 text 8
x55511:	mov [bp + 33], bp	; 3: 137 110 33
x55514:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x55518:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55522:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x55526:	mov ax, [bp + 19]	; 3: 139 70 19
x55529:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x55532:	mov ax, [bp + 6]	; 3: 139 70 6
x55535:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x55538:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 5 217
x55543:	mov [bp + 27], bp	; 3: 137 110 27
x55546:	add bp, 25	; 3: 131 197 25
x55549:	mov di, bp	; 2: 137 239
x55551:	add di, 10	; 3: 131 199 10
x55554:	jmp printf	; 3: 233 255 51

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x55557:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x55562:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x55566:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x55570:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x55574:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x55578:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x55582:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x55586:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x55590:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x55594:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x55598:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x55602:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x55606:	mov [bp + 27], bp	; 3: 137 110 27
x55609:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary3108 pointer
x55613:	mov si, bp	; 2: 137 238
x55615:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary3108 8
x55618:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x55621:	mov ax, [bp + 6]	; 3: 139 70 6
x55624:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x55627:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 89 217
x55632:	mov [bp + 23], bp	; 3: 137 110 23
x55635:	add bp, 21	; 3: 131 197 21
x55638:	jmp strtoul	; 3: 233 89 2

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary3109

strtoul_test$494:	; Assign value £temporary3109
x55641:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55645:	mov word [bp + 31], @7121$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 134 219

strtoul_test$497:	; Parameter 25 text 8
x55650:	mov [bp + 33], bp	; 3: 137 110 33
x55653:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x55657:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55661:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x55665:	mov ax, [bp + 19]	; 3: 139 70 19
x55668:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x55671:	mov ax, [bp + 6]	; 3: 139 70 6
x55674:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x55677:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 144 217
x55682:	mov [bp + 27], bp	; 3: 137 110 27
x55685:	add bp, 25	; 3: 131 197 25
x55688:	mov di, bp	; 2: 137 239
x55690:	add di, 10	; 3: 131 199 10
x55693:	jmp printf	; 3: 233 116 51

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x55696:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x55701:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x55705:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x55709:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x55713:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x55717:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x55721:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x55725:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x55729:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x55733:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x55737:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x55741:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x55745:	mov [bp + 27], bp	; 3: 137 110 27
x55748:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary3122 pointer
x55752:	mov si, bp	; 2: 137 238
x55754:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary3122 8
x55757:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x55760:	mov ax, [bp + 6]	; 3: 139 70 6
x55763:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x55766:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 228 217
x55771:	mov [bp + 23], bp	; 3: 137 110 23
x55774:	add bp, 21	; 3: 131 197 21
x55777:	jmp strtoul	; 3: 233 206 1

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary3123

strtoul_test$523:	; Assign value £temporary3123
x55780:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55784:	mov word [bp + 31], @7165$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 156 219

strtoul_test$526:	; Parameter 25 text 8
x55789:	mov [bp + 33], bp	; 3: 137 110 33
x55792:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x55796:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55800:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x55804:	mov ax, [bp + 19]	; 3: 139 70 19
x55807:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x55810:	mov ax, [bp + 6]	; 3: 139 70 6
x55813:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x55816:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 27 218
x55821:	mov [bp + 27], bp	; 3: 137 110 27
x55824:	add bp, 25	; 3: 131 197 25
x55827:	mov di, bp	; 2: 137 239
x55829:	add di, 10	; 3: 131 199 10
x55832:	jmp printf	; 3: 233 233 50

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x55835:	mov ax, [bp]	; 3: 139 70 0
x55838:	mov di, [bp + 4]	; 3: 139 126 4
x55841:	mov bp, [bp + 2]	; 3: 139 110 2
x55844:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

@6387$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55846:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6434$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55868:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6484$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55890:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6534$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55912:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6578$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55934:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6625$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55956:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6675$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55978:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6725$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56000:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6769$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56022:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6813$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56044:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6857$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56066:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6901$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56088:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6945$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56110:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6989$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56132:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@7033$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56154:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@7077$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56176:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@7121$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56198:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@7165$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56220:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtoul:	; Assign g_inStatus 1
x56242:	mov word [g_inStatus], 1	; 6: 199 6 125 96 1 0

strtoul$1:	; Assign g_inDevice s
x56248:	mov ax, [bp + 6]	; 3: 139 70 6
x56251:	mov [g_inDevice], ax	; 3: 163 127 96

strtoul$2:	; Assign g_inChars 0
x56254:	mov word [g_inChars], 0	; 6: 199 6 162 101 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x56260:	mov ax, [bp + 10]	; 3: 139 70 10
x56263:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x56266:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 216 219
x56271:	mov [bp + 14], bp	; 3: 137 110 14
x56274:	add bp, 12	; 3: 131 197 12
x56277:	jmp scanUnsignedLongInt	; 3: 233 249 144

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2858

strtoul$8:	; Assign unsignedLongValue £temporary2858
x56280:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x56284:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x56288:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2860 -> endp endp 0
x56290:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2860 -> endp s g_inChars
x56293:	mov ax, [bp + 6]	; 3: 139 70 6
x56296:	add ax, [g_inChars]	; 4: 3 6 162 101
x56300:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x56302:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x56306:	mov ax, [bp]	; 3: 139 70 0
x56309:	mov di, [bp + 4]	; 3: 139 126 4
x56312:	mov bp, [bp + 2]	; 3: 139 110 2
x56315:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x56317:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x56321:	mov word [bp + 6], character_test$3	; 5: 199 70 6 15 220
x56326:	mov [bp + 8], bp	; 3: 137 110 8
x56329:	add bp, 6	; 3: 131 197 6
x56332:	nop	; 1: 144
x56333:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x56335:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x56339:	mov word [bp + 6], character_test$7	; 5: 199 70 6 33 220
x56344:	mov [bp + 8], bp	; 3: 137 110 8
x56347:	add bp, 6	; 3: 131 197 6
x56350:	nop	; 1: 144
x56351:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x56353:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x56357:	mov word [bp + 6], character_test$11	; 5: 199 70 6 51 220
x56362:	mov [bp + 8], bp	; 3: 137 110 8
x56365:	add bp, 6	; 3: 131 197 6
x56368:	nop	; 1: 144
x56369:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x56371:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x56375:	mov word [bp + 6], character_test$15	; 5: 199 70 6 69 220
x56380:	mov [bp + 8], bp	; 3: 137 110 8
x56383:	add bp, 6	; 3: 131 197 6
x56386:	nop	; 1: 144
x56387:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x56389:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x56393:	mov word [bp + 6], character_test$19	; 5: 199 70 6 87 220
x56398:	mov [bp + 8], bp	; 3: 137 110 8
x56401:	add bp, 6	; 3: 131 197 6
x56404:	nop	; 1: 144
x56405:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x56407:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x56411:	mov word [bp + 6], character_test$23	; 5: 199 70 6 105 220
x56416:	mov [bp + 8], bp	; 3: 137 110 8
x56419:	add bp, 6	; 3: 131 197 6
x56422:	nop	; 1: 144
x56423:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x56425:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x56429:	mov word [bp + 6], character_test$27	; 5: 199 70 6 123 220
x56434:	mov [bp + 8], bp	; 3: 137 110 8
x56437:	add bp, 6	; 3: 131 197 6
x56440:	nop	; 1: 144
x56441:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x56443:	mov ax, [bp]	; 3: 139 70 0
x56446:	mov di, [bp + 4]	; 3: 139 126 4
x56449:	mov bp, [bp + 2]	; 3: 139 110 2
x56452:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x56454:	mov word [bp + 13], @9441$string_ascii2025i0A#	; 5: 199 70 13 68 225

character_testX$2:	; IntegralToIntegral £temporary4268 c
x56459:	mov al, [bp + 6]	; 3: 138 70 6
x56462:	and ax, 255	; 3: 37 255 0
x56465:	cmp al, 0	; 2: 60 0
x56467:	jge character_testX$3	; 2: 125 4
x56469:	neg al	; 2: 246 216
x56471:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4268 8
x56473:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x56476:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 175 220
x56481:	mov [bp + 9], bp	; 3: 137 110 9
x56484:	add bp, 7	; 3: 131 197 7
x56487:	mov di, bp	; 2: 137 239
x56489:	add di, 2	; 3: 131 199 2
x56492:	jmp printf	; 3: 233 85 48

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x56495:	mov word [bp + 13], @9444$string_islower282725c2729203D2025s0A#	; 5: 199 70 13 78 225

character_testX$8:	; IntegralToIntegral £temporary4270 c
x56500:	mov al, [bp + 6]	; 3: 138 70 6
x56503:	and ax, 255	; 3: 37 255 0
x56506:	cmp al, 0	; 2: 60 0
x56508:	jge character_testX$9	; 2: 125 4
x56510:	neg al	; 2: 246 216
x56512:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4270 8
x56514:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4271 c
x56517:	mov al, [bp + 6]	; 3: 138 70 6
x56520:	and ax, 255	; 3: 37 255 0
x56523:	cmp al, 0	; 2: 60 0
x56525:	jge character_testX$12	; 2: 125 4
x56527:	neg al	; 2: 246 216
x56529:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4271 16
x56531:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x56534:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 228 220
x56539:	mov [bp + 19], bp	; 3: 137 110 19
x56542:	add bp, 17	; 3: 131 197 17
x56545:	jmp islower	; 3: 233 132 142

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4272

character_testX$16:	; Equal 19 £temporary4272 0
x56548:	cmp bx, 0	; 3: 131 251 0
x56551:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4277 string_Yes#
x56553:	mov ax, @9451$string_Yes#	; 3: 184 98 225

character_testX$18:	; Goto 20
x56556:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4277 string_No#
x56558:	mov ax, @9452$string_No#	; 3: 184 102 225

character_testX$20:	; Parameter 7 £temporary4277 10
x56561:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x56564:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 7 221
x56569:	mov [bp + 9], bp	; 3: 137 110 9
x56572:	add bp, 7	; 3: 131 197 7
x56575:	mov di, bp	; 2: 137 239
x56577:	add di, 4	; 3: 131 199 4
x56580:	jmp printf	; 3: 233 253 47

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x56583:	mov word [bp + 13], @9460$string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 105 225

character_testX$25:	; IntegralToIntegral £temporary4279 c
x56588:	mov al, [bp + 6]	; 3: 138 70 6
x56591:	and ax, 255	; 3: 37 255 0
x56594:	cmp al, 0	; 2: 60 0
x56596:	jge character_testX$26	; 2: 125 4
x56598:	neg al	; 2: 246 216
x56600:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4279 8
x56602:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4280 c
x56605:	mov al, [bp + 6]	; 3: 138 70 6
x56608:	and ax, 255	; 3: 37 255 0
x56611:	cmp al, 0	; 2: 60 0
x56613:	jge character_testX$29	; 2: 125 4
x56615:	neg al	; 2: 246 216
x56617:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4280 16
x56619:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x56622:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 60 221
x56627:	mov [bp + 19], bp	; 3: 137 110 19
x56630:	add bp, 17	; 3: 131 197 17
x56633:	jmp isupper	; 3: 233 208 64

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4281

character_testX$33:	; Equal 36 £temporary4281 0
x56636:	cmp bx, 0	; 3: 131 251 0
x56639:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4286 string_Yes#
x56641:	mov ax, @9467$string_Yes#	; 3: 184 125 225

character_testX$35:	; Goto 37
x56644:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4286 string_No#
x56646:	mov ax, @9468$string_No#	; 3: 184 129 225

character_testX$37:	; Parameter 7 £temporary4286 10
x56649:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x56652:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 95 221
x56657:	mov [bp + 9], bp	; 3: 137 110 9
x56660:	add bp, 7	; 3: 131 197 7
x56663:	mov di, bp	; 2: 137 239
x56665:	add di, 4	; 3: 131 199 4
x56668:	jmp printf	; 3: 233 165 47

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x56671:	mov word [bp + 13], @9476$string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 132 225

character_testX$42:	; IntegralToIntegral £temporary4288 c
x56676:	mov al, [bp + 6]	; 3: 138 70 6
x56679:	and ax, 255	; 3: 37 255 0
x56682:	cmp al, 0	; 2: 60 0
x56684:	jge character_testX$43	; 2: 125 4
x56686:	neg al	; 2: 246 216
x56688:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4288 8
x56690:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4289 c
x56693:	mov al, [bp + 6]	; 3: 138 70 6
x56696:	and ax, 255	; 3: 37 255 0
x56699:	cmp al, 0	; 2: 60 0
x56701:	jge character_testX$46	; 2: 125 4
x56703:	neg al	; 2: 246 216
x56705:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4289 16
x56707:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x56710:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 148 221
x56715:	mov [bp + 19], bp	; 3: 137 110 19
x56718:	add bp, 17	; 3: 131 197 17
x56721:	jmp isalpha	; 3: 233 17 5

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4290

character_testX$50:	; Equal 53 £temporary4290 0
x56724:	cmp bx, 0	; 3: 131 251 0
x56727:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4295 string_Yes#
x56729:	mov ax, @9483$string_Yes#	; 3: 184 152 225

character_testX$52:	; Goto 54
x56732:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4295 string_No#
x56734:	mov ax, @9484$string_No#	; 3: 184 156 225

character_testX$54:	; Parameter 7 £temporary4295 10
x56737:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x56740:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 183 221
x56745:	mov [bp + 9], bp	; 3: 137 110 9
x56748:	add bp, 7	; 3: 131 197 7
x56751:	mov di, bp	; 2: 137 239
x56753:	add di, 4	; 3: 131 199 4
x56756:	jmp printf	; 3: 233 77 47

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x56759:	mov word [bp + 13], @9492$string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 159 225

character_testX$59:	; IntegralToIntegral £temporary4297 c
x56764:	mov al, [bp + 6]	; 3: 138 70 6
x56767:	and ax, 255	; 3: 37 255 0
x56770:	cmp al, 0	; 2: 60 0
x56772:	jge character_testX$60	; 2: 125 4
x56774:	neg al	; 2: 246 216
x56776:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4297 8
x56778:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4298 c
x56781:	mov al, [bp + 6]	; 3: 138 70 6
x56784:	and ax, 255	; 3: 37 255 0
x56787:	cmp al, 0	; 2: 60 0
x56789:	jge character_testX$63	; 2: 125 4
x56791:	neg al	; 2: 246 216
x56793:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4298 16
x56795:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x56798:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 236 221
x56803:	mov [bp + 19], bp	; 3: 137 110 19
x56806:	add bp, 17	; 3: 131 197 17
x56809:	jmp isdigit	; 3: 233 128 77

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4299

character_testX$67:	; Equal 70 £temporary4299 0
x56812:	cmp bx, 0	; 3: 131 251 0
x56815:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4304 string_Yes#
x56817:	mov ax, @9499$string_Yes#	; 3: 184 179 225

character_testX$69:	; Goto 71
x56820:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4304 string_No#
x56822:	mov ax, @9500$string_No#	; 3: 184 183 225

character_testX$71:	; Parameter 7 £temporary4304 10
x56825:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x56828:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 15 222
x56833:	mov [bp + 9], bp	; 3: 137 110 9
x56836:	add bp, 7	; 3: 131 197 7
x56839:	mov di, bp	; 2: 137 239
x56841:	add di, 4	; 3: 131 199 4
x56844:	jmp printf	; 3: 233 245 46

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x56847:	mov word [bp + 13], @9508$string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 186 225

character_testX$76:	; IntegralToIntegral £temporary4306 c
x56852:	mov al, [bp + 6]	; 3: 138 70 6
x56855:	and ax, 255	; 3: 37 255 0
x56858:	cmp al, 0	; 2: 60 0
x56860:	jge character_testX$77	; 2: 125 4
x56862:	neg al	; 2: 246 216
x56864:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4306 8
x56866:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4307 c
x56869:	mov al, [bp + 6]	; 3: 138 70 6
x56872:	and ax, 255	; 3: 37 255 0
x56875:	cmp al, 0	; 2: 60 0
x56877:	jge character_testX$80	; 2: 125 4
x56879:	neg al	; 2: 246 216
x56881:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4307 16
x56883:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x56886:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 68 222
x56891:	mov [bp + 19], bp	; 3: 137 110 19
x56894:	add bp, 17	; 3: 131 197 17
x56897:	jmp isalnum	; 3: 233 166 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4308

character_testX$84:	; Equal 87 £temporary4308 0
x56900:	cmp bx, 0	; 3: 131 251 0
x56903:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4313 string_Yes#
x56905:	mov ax, @9515$string_Yes#	; 3: 184 206 225

character_testX$86:	; Goto 88
x56908:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4313 string_No#
x56910:	mov ax, @9516$string_No#	; 3: 184 210 225

character_testX$88:	; Parameter 7 £temporary4313 10
x56913:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x56916:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 103 222
x56921:	mov [bp + 9], bp	; 3: 137 110 9
x56924:	add bp, 7	; 3: 131 197 7
x56927:	mov di, bp	; 2: 137 239
x56929:	add di, 4	; 3: 131 199 4
x56932:	jmp printf	; 3: 233 157 46

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x56935:	mov word [bp + 13], @9524$string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 213 225

character_testX$93:	; IntegralToIntegral £temporary4315 c
x56940:	mov al, [bp + 6]	; 3: 138 70 6
x56943:	and ax, 255	; 3: 37 255 0
x56946:	cmp al, 0	; 2: 60 0
x56948:	jge character_testX$94	; 2: 125 4
x56950:	neg al	; 2: 246 216
x56952:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4315 8
x56954:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4316 c
x56957:	mov al, [bp + 6]	; 3: 138 70 6
x56960:	and ax, 255	; 3: 37 255 0
x56963:	cmp al, 0	; 2: 60 0
x56965:	jge character_testX$97	; 2: 125 4
x56967:	neg al	; 2: 246 216
x56969:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4316 16
x56971:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x56974:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 156 222
x56979:	mov [bp + 19], bp	; 3: 137 110 19
x56982:	add bp, 17	; 3: 131 197 17
x56985:	jmp isxdigit	; 3: 233 147 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4317

character_testX$101:	; Equal 104 £temporary4317 0
x56988:	cmp bx, 0	; 3: 131 251 0
x56991:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4322 string_Yes#
x56993:	mov ax, @9531$string_Yes#	; 3: 184 234 225

character_testX$103:	; Goto 105
x56996:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4322 string_No#
x56998:	mov ax, @9532$string_No#	; 3: 184 238 225

character_testX$105:	; Parameter 7 £temporary4322 10
x57001:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x57004:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 191 222
x57009:	mov [bp + 9], bp	; 3: 137 110 9
x57012:	add bp, 7	; 3: 131 197 7
x57015:	mov di, bp	; 2: 137 239
x57017:	add di, 4	; 3: 131 199 4
x57020:	jmp printf	; 3: 233 69 46

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x57023:	mov word [bp + 13], @9540$string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 241 225

character_testX$110:	; IntegralToIntegral £temporary4324 c
x57028:	mov al, [bp + 6]	; 3: 138 70 6
x57031:	and ax, 255	; 3: 37 255 0
x57034:	cmp al, 0	; 2: 60 0
x57036:	jge character_testX$111	; 2: 125 4
x57038:	neg al	; 2: 246 216
x57040:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4324 8
x57042:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4325 c
x57045:	mov al, [bp + 6]	; 3: 138 70 6
x57048:	and ax, 255	; 3: 37 255 0
x57051:	cmp al, 0	; 2: 60 0
x57053:	jge character_testX$114	; 2: 125 4
x57055:	neg al	; 2: 246 216
x57057:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4325 16
x57059:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x57062:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 244 222
x57067:	mov [bp + 19], bp	; 3: 137 110 19
x57070:	add bp, 17	; 3: 131 197 17
x57073:	jmp isgraph	; 3: 233 127 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4326

character_testX$118:	; Equal 121 £temporary4326 0
x57076:	cmp bx, 0	; 3: 131 251 0
x57079:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4331 string_Yes#
x57081:	mov ax, @9547$string_Yes#	; 3: 184 5 226

character_testX$120:	; Goto 122
x57084:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4331 string_No#
x57086:	mov ax, @9548$string_No#	; 3: 184 9 226

character_testX$122:	; Parameter 7 £temporary4331 10
x57089:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x57092:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 23 223
x57097:	mov [bp + 9], bp	; 3: 137 110 9
x57100:	add bp, 7	; 3: 131 197 7
x57103:	mov di, bp	; 2: 137 239
x57105:	add di, 4	; 3: 131 199 4
x57108:	jmp printf	; 3: 233 237 45

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x57111:	mov word [bp + 13], @9556$string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 12 226

character_testX$127:	; IntegralToIntegral £temporary4333 c
x57116:	mov al, [bp + 6]	; 3: 138 70 6
x57119:	and ax, 255	; 3: 37 255 0
x57122:	cmp al, 0	; 2: 60 0
x57124:	jge character_testX$128	; 2: 125 4
x57126:	neg al	; 2: 246 216
x57128:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4333 8
x57130:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4334 c
x57133:	mov al, [bp + 6]	; 3: 138 70 6
x57136:	and ax, 255	; 3: 37 255 0
x57139:	cmp al, 0	; 2: 60 0
x57141:	jge character_testX$131	; 2: 125 4
x57143:	neg al	; 2: 246 216
x57145:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4334 16
x57147:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x57150:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 76 223
x57155:	mov [bp + 19], bp	; 3: 137 110 19
x57158:	add bp, 17	; 3: 131 197 17
x57161:	jmp isprint	; 3: 233 70 4

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4335

character_testX$135:	; Equal 138 £temporary4335 0
x57164:	cmp bx, 0	; 3: 131 251 0
x57167:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4340 string_Yes#
x57169:	mov ax, @9563$string_Yes#	; 3: 184 32 226

character_testX$137:	; Goto 139
x57172:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4340 string_No#
x57174:	mov ax, @9564$string_No#	; 3: 184 36 226

character_testX$139:	; Parameter 7 £temporary4340 10
x57177:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x57180:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 111 223
x57185:	mov [bp + 9], bp	; 3: 137 110 9
x57188:	add bp, 7	; 3: 131 197 7
x57191:	mov di, bp	; 2: 137 239
x57193:	add di, 4	; 3: 131 199 4
x57196:	jmp printf	; 3: 233 149 45

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x57199:	mov word [bp + 13], @9572$string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 39 226

character_testX$144:	; IntegralToIntegral £temporary4342 c
x57204:	mov al, [bp + 6]	; 3: 138 70 6
x57207:	and ax, 255	; 3: 37 255 0
x57210:	cmp al, 0	; 2: 60 0
x57212:	jge character_testX$145	; 2: 125 4
x57214:	neg al	; 2: 246 216
x57216:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4342 8
x57218:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4343 c
x57221:	mov al, [bp + 6]	; 3: 138 70 6
x57224:	and ax, 255	; 3: 37 255 0
x57227:	cmp al, 0	; 2: 60 0
x57229:	jge character_testX$148	; 2: 125 4
x57231:	neg al	; 2: 246 216
x57233:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4343 16
x57235:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x57238:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 164 223
x57243:	mov [bp + 19], bp	; 3: 137 110 19
x57246:	add bp, 17	; 3: 131 197 17
x57249:	jmp ispunct	; 3: 233 32 4

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4344

character_testX$152:	; Equal 155 £temporary4344 0
x57252:	cmp bx, 0	; 3: 131 251 0
x57255:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4349 string_Yes#
x57257:	mov ax, @9579$string_Yes#	; 3: 184 59 226

character_testX$154:	; Goto 156
x57260:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4349 string_No#
x57262:	mov ax, @9580$string_No#	; 3: 184 63 226

character_testX$156:	; Parameter 7 £temporary4349 10
x57265:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x57268:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 199 223
x57273:	mov [bp + 9], bp	; 3: 137 110 9
x57276:	add bp, 7	; 3: 131 197 7
x57279:	mov di, bp	; 2: 137 239
x57281:	add di, 4	; 3: 131 199 4
x57284:	jmp printf	; 3: 233 61 45

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x57287:	mov word [bp + 13], @9588$string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 66 226

character_testX$161:	; IntegralToIntegral £temporary4351 c
x57292:	mov al, [bp + 6]	; 3: 138 70 6
x57295:	and ax, 255	; 3: 37 255 0
x57298:	cmp al, 0	; 2: 60 0
x57300:	jge character_testX$162	; 2: 125 4
x57302:	neg al	; 2: 246 216
x57304:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4351 8
x57306:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4352 c
x57309:	mov al, [bp + 6]	; 3: 138 70 6
x57312:	and ax, 255	; 3: 37 255 0
x57315:	cmp al, 0	; 2: 60 0
x57317:	jge character_testX$165	; 2: 125 4
x57319:	neg al	; 2: 246 216
x57321:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4352 16
x57323:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x57326:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 252 223
x57331:	mov [bp + 19], bp	; 3: 137 110 19
x57334:	add bp, 17	; 3: 131 197 17
x57337:	jmp iscntrl	; 3: 233 13 4

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4353

character_testX$169:	; Equal 172 £temporary4353 0
x57340:	cmp bx, 0	; 3: 131 251 0
x57343:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4358 string_Yes#
x57345:	mov ax, @9595$string_Yes#	; 3: 184 86 226

character_testX$171:	; Goto 173
x57348:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4358 string_No#
x57350:	mov ax, @9596$string_No#	; 3: 184 90 226

character_testX$173:	; Parameter 7 £temporary4358 10
x57353:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x57356:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 31 224
x57361:	mov [bp + 9], bp	; 3: 137 110 9
x57364:	add bp, 7	; 3: 131 197 7
x57367:	mov di, bp	; 2: 137 239
x57369:	add di, 4	; 3: 131 199 4
x57372:	jmp printf	; 3: 233 229 44

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x57375:	mov word [bp + 13], @9604$string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 93 226

character_testX$178:	; IntegralToIntegral £temporary4360 c
x57380:	mov al, [bp + 6]	; 3: 138 70 6
x57383:	and ax, 255	; 3: 37 255 0
x57386:	cmp al, 0	; 2: 60 0
x57388:	jge character_testX$179	; 2: 125 4
x57390:	neg al	; 2: 246 216
x57392:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4360 8
x57394:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4361 c
x57397:	mov al, [bp + 6]	; 3: 138 70 6
x57400:	and ax, 255	; 3: 37 255 0
x57403:	cmp al, 0	; 2: 60 0
x57405:	jge character_testX$182	; 2: 125 4
x57407:	neg al	; 2: 246 216
x57409:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4361 16
x57411:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x57414:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 84 224
x57419:	mov [bp + 19], bp	; 3: 137 110 19
x57422:	add bp, 17	; 3: 131 197 17
x57425:	jmp isspace	; 3: 233 12 136

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4362

character_testX$186:	; Equal 189 £temporary4362 0
x57428:	cmp bx, 0	; 3: 131 251 0
x57431:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4367 string_Yes#
x57433:	mov ax, @9611$string_Yes#	; 3: 184 113 226

character_testX$188:	; Goto 190
x57436:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4367 string_No#
x57438:	mov ax, @9612$string_No#	; 3: 184 117 226

character_testX$190:	; Parameter 7 £temporary4367 10
x57441:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x57444:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 119 224
x57449:	mov [bp + 9], bp	; 3: 137 110 9
x57452:	add bp, 7	; 3: 131 197 7
x57455:	mov di, bp	; 2: 137 239
x57457:	add di, 4	; 3: 131 199 4
x57460:	jmp printf	; 3: 233 141 44

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x57463:	mov word [bp + 13], @9620$string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 120 226

character_testX$195:	; IntegralToIntegral £temporary4369 c
x57468:	mov al, [bp + 6]	; 3: 138 70 6
x57471:	and ax, 255	; 3: 37 255 0
x57474:	cmp al, 0	; 2: 60 0
x57476:	jge character_testX$196	; 2: 125 4
x57478:	neg al	; 2: 246 216
x57480:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4369 8
x57482:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4370 c
x57485:	mov al, [bp + 6]	; 3: 138 70 6
x57488:	and ax, 255	; 3: 37 255 0
x57491:	cmp al, 0	; 2: 60 0
x57493:	jge character_testX$199	; 2: 125 4
x57495:	neg al	; 2: 246 216
x57497:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4370 16
x57499:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x57502:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 172 224
x57507:	mov [bp + 19], bp	; 3: 137 110 19
x57510:	add bp, 17	; 3: 131 197 17
x57513:	jmp tolower	; 3: 233 114 68

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4371

character_testX$203:	; IntegralToIntegral £temporary4372 £temporary4371
x57516:	cmp bx, 0	; 3: 131 251 0
x57519:	jge character_testX$204	; 2: 125 4
x57521:	neg bx	; 2: 247 219
x57523:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4373 £temporary4372
x57525:	and bx, 255	; 4: 129 227 255 0
x57529:	cmp bl, 0	; 3: 128 251 0
x57532:	jge character_testX$205	; 2: 125 4
x57534:	neg bl	; 2: 246 219
x57536:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4373 10
x57538:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x57541:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 216 224
x57546:	mov [bp + 9], bp	; 3: 137 110 9
x57549:	add bp, 7	; 3: 131 197 7
x57552:	mov di, bp	; 2: 137 239
x57554:	add di, 4	; 3: 131 199 4
x57557:	jmp printf	; 3: 233 44 44

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x57560:	mov word [bp + 13], @9627$string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 142 226

character_testX$210:	; IntegralToIntegral £temporary4375 c
x57565:	mov al, [bp + 6]	; 3: 138 70 6
x57568:	and ax, 255	; 3: 37 255 0
x57571:	cmp al, 0	; 2: 60 0
x57573:	jge character_testX$211	; 2: 125 4
x57575:	neg al	; 2: 246 216
x57577:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4375 8
x57579:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4376 c
x57582:	mov al, [bp + 6]	; 3: 138 70 6
x57585:	and ax, 255	; 3: 37 255 0
x57588:	cmp al, 0	; 2: 60 0
x57590:	jge character_testX$214	; 2: 125 4
x57592:	neg al	; 2: 246 216
x57594:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4376 16
x57596:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x57599:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 13 225
x57604:	mov [bp + 19], bp	; 3: 137 110 19
x57607:	add bp, 17	; 3: 131 197 17
x57610:	jmp toupper	; 3: 233 40 3

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4377

character_testX$218:	; IntegralToIntegral £temporary4378 £temporary4377
x57613:	cmp bx, 0	; 3: 131 251 0
x57616:	jge character_testX$219	; 2: 125 4
x57618:	neg bx	; 2: 247 219
x57620:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4379 £temporary4378
x57622:	and bx, 255	; 4: 129 227 255 0
x57626:	cmp bl, 0	; 3: 128 251 0
x57629:	jge character_testX$220	; 2: 125 4
x57631:	neg bl	; 2: 246 219
x57633:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4379 10
x57635:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x57638:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 57 225
x57643:	mov [bp + 9], bp	; 3: 137 110 9
x57646:	add bp, 7	; 3: 131 197 7
x57649:	mov di, bp	; 2: 137 239
x57651:	add di, 4	; 3: 131 199 4
x57654:	jmp printf	; 3: 233 203 43

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x57657:	mov ax, [bp]	; 3: 139 70 0
x57660:	mov di, [bp + 4]	; 3: 139 126 4
x57663:	mov bp, [bp + 2]	; 3: 139 110 2
x57666:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

@9441$string_ascii2025i0A#:
x57668:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

@9444$string_islower282725c2729203D2025s0A#:
x57678:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9451$string_Yes#:
x57698:	db "Yes", 0	; 4: 89 101 115 0

@9452$string_No#:
x57702:	db "No", 0	; 3: 78 111 0

@9460$string_isupper282725c2729203D2025s0A#:
x57705:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9467$string_Yes#:
x57725:	db "Yes", 0	; 4: 89 101 115 0

@9468$string_No#:
x57729:	db "No", 0	; 3: 78 111 0

@9476$string_isalpha282725c2729203D2025s0A#:
x57732:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

@9483$string_Yes#:
x57752:	db "Yes", 0	; 4: 89 101 115 0

@9484$string_No#:
x57756:	db "No", 0	; 3: 78 111 0

@9492$string_isdigit282725c2729203D2025s0A#:
x57759:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9499$string_Yes#:
x57779:	db "Yes", 0	; 4: 89 101 115 0

@9500$string_No#:
x57783:	db "No", 0	; 3: 78 111 0

@9508$string_isalnum282725c2729203D2025s0A#:
x57786:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

@9515$string_Yes#:
x57806:	db "Yes", 0	; 4: 89 101 115 0

@9516$string_No#:
x57810:	db "No", 0	; 3: 78 111 0

@9524$string_isxdigit282725c2729203D2025s0A#:
x57813:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9531$string_Yes#:
x57834:	db "Yes", 0	; 4: 89 101 115 0

@9532$string_No#:
x57838:	db "No", 0	; 3: 78 111 0

@9540$string_isgraph282725c2729203D2025s0A#:
x57841:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

@9547$string_Yes#:
x57861:	db "Yes", 0	; 4: 89 101 115 0

@9548$string_No#:
x57865:	db "No", 0	; 3: 78 111 0

@9556$string_isprint282725c2729203D2025s0A#:
x57868:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9563$string_Yes#:
x57888:	db "Yes", 0	; 4: 89 101 115 0

@9564$string_No#:
x57892:	db "No", 0	; 3: 78 111 0

@9572$string_ispunct282725c2729203D2025s0A#:
x57895:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9579$string_Yes#:
x57915:	db "Yes", 0	; 4: 89 101 115 0

@9580$string_No#:
x57919:	db "No", 0	; 3: 78 111 0

@9588$string_iscntrl282725c2729203D2025s0A#:
x57922:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

@9595$string_Yes#:
x57942:	db "Yes", 0	; 4: 89 101 115 0

@9596$string_No#:
x57946:	db "No", 0	; 3: 78 111 0

@9604$string_isspace282725c2729203D2025s0A#:
x57949:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

@9611$string_Yes#:
x57969:	db "Yes", 0	; 4: 89 101 115 0

@9612$string_No#:
x57973:	db "No", 0	; 3: 78 111 0

@9620$string_tolower282725c2729203D202725c270A#:
x57976:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

@9627$string_toupper282725c2729203D202725c270A0A#:
x57998:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x58021:	mov ax, [bp + 6]	; 3: 139 70 6
x58024:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x58027:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 185 226
x58032:	mov [bp + 10], bp	; 3: 137 110 10
x58035:	add bp, 8	; 3: 131 197 8
x58038:	jmp islower	; 3: 233 175 136

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary372

isalpha$5:	; NotEqual 12 £temporary372 0
x58041:	cmp bx, 0	; 3: 131 251 0
x58044:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x58046:	mov ax, [bp + 6]	; 3: 139 70 6
x58049:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x58052:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 210 226
x58057:	mov [bp + 10], bp	; 3: 137 110 10
x58060:	add bp, 8	; 3: 131 197 8
x58063:	jmp isupper	; 3: 233 58 59

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary373

isalpha$11:	; Equal 14 £temporary373 0
x58066:	cmp bx, 0	; 3: 131 251 0
x58069:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary377 1
x58071:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x58074:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary377 0
x58076:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary377

isalpha$16:	; Return £temporary377
x58079:	mov ax, [bp]	; 3: 139 70 0
x58082:	mov di, [bp + 4]	; 3: 139 126 4
x58085:	mov bp, [bp + 2]	; 3: 139 110 2
x58088:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x58090:	mov ax, [bp + 6]	; 3: 139 70 6
x58093:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x58096:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 254 226
x58101:	mov [bp + 10], bp	; 3: 137 110 10
x58104:	add bp, 8	; 3: 131 197 8
x58107:	nop	; 1: 144
x58108:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary384

isalnum$5:	; NotEqual 12 £temporary384 0
x58110:	cmp bx, 0	; 3: 131 251 0
x58113:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x58115:	mov ax, [bp + 6]	; 3: 139 70 6
x58118:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x58121:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 23 227
x58126:	mov [bp + 10], bp	; 3: 137 110 10
x58129:	add bp, 8	; 3: 131 197 8
x58132:	jmp isdigit	; 3: 233 85 72

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary385

isalnum$11:	; Equal 14 £temporary385 0
x58135:	cmp bx, 0	; 3: 131 251 0
x58138:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary389 1
x58140:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x58143:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary389 0
x58145:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary389

isalnum$16:	; Return £temporary389
x58148:	mov ax, [bp]	; 3: 139 70 0
x58151:	mov di, [bp + 4]	; 3: 139 126 4
x58154:	mov bp, [bp + 2]	; 3: 139 110 2
x58157:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x58159:	mov ax, [bp + 6]	; 3: 139 70 6
x58162:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x58165:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 67 227
x58170:	mov [bp + 10], bp	; 3: 137 110 10
x58173:	add bp, 8	; 3: 131 197 8
x58176:	jmp isdigit	; 3: 233 41 72

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary392

isxdigit$5:	; NotEqual 10 £temporary392 0
x58179:	cmp bx, 0	; 3: 131 251 0
x58182:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x58184:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x58188:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x58190:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x58194:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x58196:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x58200:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x58202:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x58206:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary402 1
x58208:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x58211:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary402 0
x58213:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary402

isxdigit$14:	; Return £temporary402
x58216:	mov ax, [bp]	; 3: 139 70 0
x58219:	mov di, [bp + 4]	; 3: 139 126 4
x58222:	mov bp, [bp + 2]	; 3: 139 110 2
x58225:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x58227:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58231:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x58233:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x58237:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary407 1
x58239:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x58242:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary407 0
x58244:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary407

isgraph$6:	; Return £temporary407
x58247:	mov ax, [bp]	; 3: 139 70 0
x58250:	mov di, [bp + 4]	; 3: 139 126 4
x58253:	mov bp, [bp + 2]	; 3: 139 110 2
x58256:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x58258:	mov ax, [bp + 6]	; 3: 139 70 6
x58261:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x58264:	mov word [bp + 8], isprint$3	; 5: 199 70 8 166 227
x58269:	mov [bp + 10], bp	; 3: 137 110 10
x58272:	add bp, 8	; 3: 131 197 8
x58275:	nop	; 1: 144
x58276:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary408

isprint$5:	; Equal 9 £temporary408 0
x58278:	cmp bx, 0	; 3: 131 251 0
x58281:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x58283:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58287:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary412 1
x58289:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x58292:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary412 0
x58294:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary412

isprint$11:	; Return £temporary412
x58297:	mov ax, [bp]	; 3: 139 70 0
x58300:	mov di, [bp + 4]	; 3: 139 126 4
x58303:	mov bp, [bp + 2]	; 3: 139 110 2
x58306:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x58308:	mov ax, [bp + 6]	; 3: 139 70 6
x58311:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x58314:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 216 227
x58319:	mov [bp + 10], bp	; 3: 137 110 10
x58322:	add bp, 8	; 3: 131 197 8
x58325:	nop	; 1: 144
x58326:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary414

ispunct$5:	; Equal 14 £temporary414 0
x58328:	cmp bx, 0	; 3: 131 251 0
x58331:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x58333:	mov ax, [bp + 6]	; 3: 139 70 6
x58336:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x58339:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 241 227
x58344:	mov [bp + 10], bp	; 3: 137 110 10
x58347:	add bp, 8	; 3: 131 197 8
x58350:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary415

ispunct$11:	; NotEqual 14 £temporary415 0
x58353:	cmp bx, 0	; 3: 131 251 0
x58356:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary420 1
x58358:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x58361:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary420 0
x58363:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary420

ispunct$16:	; Return £temporary420
x58366:	mov ax, [bp]	; 3: 139 70 0
x58369:	mov di, [bp + 4]	; 3: 139 126 4
x58372:	mov bp, [bp + 2]	; 3: 139 110 2
x58375:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x58377:	mov ax, [bp + 6]	; 3: 139 70 6
x58380:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x58383:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 29 228
x58388:	mov [bp + 10], bp	; 3: 137 110 10
x58391:	add bp, 8	; 3: 131 197 8
x58394:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary423

iscntrl$5:	; NotEqual 8 £temporary423 0
x58397:	cmp bx, 0	; 3: 131 251 0
x58400:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary426 1
x58402:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x58405:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary426 0
x58407:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary426

iscntrl$10:	; Return £temporary426
x58410:	mov ax, [bp]	; 3: 139 70 0
x58413:	mov di, [bp + 4]	; 3: 139 126 4
x58416:	mov bp, [bp + 2]	; 3: 139 110 2
x58419:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x58421:	mov ax, [bp + 6]	; 3: 139 70 6
x58424:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x58427:	mov word [bp + 8], toupper$3	; 5: 199 70 8 73 228
x58432:	mov [bp + 10], bp	; 3: 137 110 10
x58435:	add bp, 8	; 3: 131 197 8
x58438:	jmp islower	; 3: 233 31 135

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary455

toupper$5:	; Equal 31 £temporary455 0
x58441:	cmp bx, 0	; 3: 131 251 0
x58444:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x58446:	mov word [bp + 8], toupper$8	; 5: 199 70 8 92 228
x58451:	mov [bp + 10], bp	; 3: 137 110 10
x58454:	add bp, 8	; 3: 131 197 8
x58457:	jmp localeconv	; 3: 233 27 58

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary456

toupper$10:	; Assign localeConvPtr £temporary456
x58460:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x58463:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x58467:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary458 -> localeConvPtr localeConvPtr 12
x58469:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary458 -> localeConvPtr
x58472:	mov ax, [si + 12]	; 3: 139 68 12
x58475:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary459 -> localeConvPtr localeConvPtr 14
x58478:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary459 -> localeConvPtr
x58481:	mov ax, [si + 14]	; 3: 139 68 14
x58484:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x58487:	mov ax, [bp + 10]	; 3: 139 70 10
x58490:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x58493:	mov ax, [bp + 6]	; 3: 139 70 6
x58496:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x58499:	mov word [bp + 14], toupper$20	; 5: 199 70 14 145 228
x58504:	mov [bp + 16], bp	; 3: 137 110 16
x58507:	add bp, 14	; 3: 131 197 14
x58510:	jmp strchr	; 3: 233 44 61

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary460

toupper$22:	; BinarySubtract index £temporary460 lowerCase
x58513:	sub bx, [bp + 10]	; 3: 43 94 10
x58516:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary463 upperCase index
x58519:	mov si, [bp + 12]	; 3: 139 118 12
x58522:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary462 -> £temporary463 £temporary463 0

toupper$25:	; IntegralToIntegral £temporary464 £temporary462 -> £temporary463
x58525:	mov bl, [si]	; 2: 138 28
x58527:	and bx, 255	; 4: 129 227 255 0
x58531:	cmp bl, 0	; 3: 128 251 0
x58534:	jge toupper$26	; 2: 125 4
x58536:	neg bl	; 2: 246 219
x58538:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary464

toupper$27:	; Return £temporary464
x58540:	mov ax, [bp]	; 3: 139 70 0
x58543:	mov di, [bp + 4]	; 3: 139 126 4
x58546:	mov bp, [bp + 2]	; 3: 139 110 2
x58549:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary465 c 32
x58551:	mov bx, [bp + 6]	; 3: 139 94 6
x58554:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary465

toupper$30:	; Return £temporary465
x58557:	mov ax, [bp]	; 3: 139 70 0
x58560:	mov di, [bp + 4]	; 3: 139 126 4
x58563:	mov bp, [bp + 2]	; 3: 139 110 2
x58566:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x58568:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x58571:	mov ax, [bp]	; 3: 139 70 0
x58574:	mov di, [bp + 4]	; 3: 139 126 4
x58577:	mov bp, [bp + 2]	; 3: 139 110 2
x58580:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x58582:	mov ax, [bp]	; 3: 139 70 0
x58585:	mov di, [bp + 4]	; 3: 139 126 4
x58588:	mov bp, [bp + 2]	; 3: 139 110 2
x58591:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x58593:
