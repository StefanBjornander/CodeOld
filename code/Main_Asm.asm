	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 119 228
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 119 228 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 19 55

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 time_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp time_test	; 3: 233 155 117

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 assert_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp assert_test	; 3: 233 54 140

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 malloc_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp malloc_test	; 3: 233 241 140

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 print_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp print_test	; 3: 233 126 145

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 limits_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp limits_test	; 3: 233 211 149

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 float_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp float_test	; 3: 233 127 152

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 setjmp_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp setjmp_test	; 3: 233 124 152

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 stdio_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp stdio_test	; 3: 233 42 154

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 string_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp string_test	; 3: 233 154 169

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 14 154

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 58 183

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 20 194

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 214 205

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 152 217

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 99 226

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [@10013$float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 89 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [@10016$float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 68 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [@10019$float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 47 3

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 28 3

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [@10025$float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 7 3

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [@10028$float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 242 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 223 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [@10034$float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 202 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [@10037$float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 181 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [@10040$float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 160 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [@10043$float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 139 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [@10048$float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 118 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [@10051$float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 97 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [@10056$float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 76 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [@10062$float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 55 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [@10066$float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 34 2

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [@10071$float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 13 2

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [@10076$float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 80 49

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [@10079$float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [@10081$float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 52 49

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [@10086$float8$2.0#]	; 4: 221 6 62 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 26 49

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [@10091$float8$minus2.0#]	; 4: 221 6 70 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 0 49

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [@10096$float8$2.0#]	; 4: 221 6 78 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 230 48

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [@10101$float8$minus2.0#]	; 4: 221 6 86 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 204 48

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 180 48

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [@10110$float8$2#]	; 4: 221 6 94 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 154 48

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [@10115$float8$minus2#]	; 4: 221 6 102 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 128 48

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [@10119$float8$minus1.0#]	; 4: 221 6 110 5

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [@10121$float8$minus1.0#]	; 4: 221 6 118 5

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 100 48

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [@10124$float8$minus2.0#]	; 4: 221 6 126 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [@10126$float8$minus4.0#]	; 4: 221 6 134 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 72 48

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

@10013$float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

@10016$float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

@10019$float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

@10025$float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

@10028$float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

@10034$float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

@10037$float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

@10040$float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10043$float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

@10048$float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@10051$float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@10056$float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@10062$float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

@10066$float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@10071$float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

@10076$float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10079$float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

@10081$float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

@10086$float8$2.0#:
x1342:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10091$float8$minus2.0#:
x1350:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10096$float8$2.0#:
x1358:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10101$float8$minus2.0#:
x1366:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10110$float8$2#:
x1374:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10115$float8$minus2#:
x1382:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10119$float8$minus1.0#:
x1390:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10121$float8$minus1.0#:
x1398:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10124$float8$minus2.0#:
x1406:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10126$float8$minus4.0#:
x1414:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1422:	mov word [bp + 20], @10169$string_3C25f3E0A#	; 5: 199 70 20 196 10

math_test_1$2:	; PushFloat x
x1427:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1430:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1433:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 172 5
x1438:	mov [bp + 16], bp	; 3: 137 110 16
x1441:	add bp, 14	; 3: 131 197 14
x1444:	mov di, bp	; 2: 137 239
x1446:	add di, 8	; 3: 131 199 8
x1449:	jmp printf	; 3: 233 88 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1452:	mov word [bp + 20], @10171$string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 202 10

math_test_1$8:	; PushFloat x
x1457:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1460:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1463:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1466:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1469:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 203 5
x1474:	mov [bp + 32], bp	; 3: 137 110 32
x1477:	add bp, 30	; 3: 131 197 30
x1480:	jmp sin	; 3: 233 192 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4651

math_test_1$16:	; Parameter 14 £temporary4651 16
x1483:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1486:	mov ax, [errno]	; 3: 161 230 10
x1489:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1492:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 231 5
x1497:	mov [bp + 16], bp	; 3: 137 110 16
x1500:	add bp, 14	; 3: 131 197 14
x1503:	mov di, bp	; 2: 137 239
x1505:	add di, 18	; 3: 131 199 18
x1508:	jmp printf	; 3: 233 29 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1511:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1517:	mov word [bp + 20], @10176$string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 232 10

math_test_1$23:	; PushFloat x
x1522:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1525:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1528:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1531:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1534:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 12 6
x1539:	mov [bp + 32], bp	; 3: 137 110 32
x1542:	add bp, 30	; 3: 131 197 30
x1545:	jmp cos	; 3: 233 240 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4653

math_test_1$31:	; Parameter 14 £temporary4653 16
x1548:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1551:	mov ax, [errno]	; 3: 161 230 10
x1554:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1557:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 40 6
x1562:	mov [bp + 16], bp	; 3: 137 110 16
x1565:	add bp, 14	; 3: 131 197 14
x1568:	mov di, bp	; 2: 137 239
x1570:	add di, 18	; 3: 131 199 18
x1573:	jmp printf	; 3: 233 220 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1576:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1582:	mov word [bp + 20], @10181$string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 4 11

math_test_1$38:	; PushFloat x
x1587:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1590:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1593:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1596:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1599:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 77 6
x1604:	mov [bp + 32], bp	; 3: 137 110 32
x1607:	add bp, 30	; 3: 131 197 30
x1610:	jmp tan	; 3: 233 169 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4655

math_test_1$46:	; Parameter 14 £temporary4655 16
x1613:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1616:	mov ax, [errno]	; 3: 161 230 10
x1619:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1622:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 105 6
x1627:	mov [bp + 16], bp	; 3: 137 110 16
x1630:	add bp, 14	; 3: 131 197 14
x1633:	mov di, bp	; 2: 137 239
x1635:	add di, 18	; 3: 131 199 18
x1638:	jmp printf	; 3: 233 155 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1641:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1647:	mov word [bp + 20], @10186$string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 32 11

math_test_1$53:	; PushFloat x
x1652:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1655:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1658:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1661:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1664:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 142 6
x1669:	mov [bp + 32], bp	; 3: 137 110 32
x1672:	add bp, 30	; 3: 131 197 30
x1675:	jmp asin	; 3: 233 195 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4657

math_test_1$61:	; Parameter 14 £temporary4657 16
x1678:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1681:	mov ax, [errno]	; 3: 161 230 10
x1684:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1687:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 170 6
x1692:	mov [bp + 16], bp	; 3: 137 110 16
x1695:	add bp, 14	; 3: 131 197 14
x1698:	mov di, bp	; 2: 137 239
x1700:	add di, 18	; 3: 131 199 18
x1703:	jmp printf	; 3: 233 90 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1706:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1712:	mov word [bp + 20], @10191$string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 61 11

math_test_1$68:	; PushFloat x
x1717:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1720:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1723:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1726:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1729:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 207 6
x1734:	mov [bp + 32], bp	; 3: 137 110 32
x1737:	add bp, 30	; 3: 131 197 30
x1740:	jmp acos	; 3: 233 85 42

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4659

math_test_1$76:	; Parameter 14 £temporary4659 16
x1743:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1746:	mov ax, [errno]	; 3: 161 230 10
x1749:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1752:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 235 6
x1757:	mov [bp + 16], bp	; 3: 137 110 16
x1760:	add bp, 14	; 3: 131 197 14
x1763:	mov di, bp	; 2: 137 239
x1765:	add di, 18	; 3: 131 199 18
x1768:	jmp printf	; 3: 233 25 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1771:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1777:	mov word [bp + 20], @10196$string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 90 11

math_test_1$83:	; PushFloat x
x1782:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1785:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1788:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1791:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1794:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 16 7
x1799:	mov [bp + 32], bp	; 3: 137 110 32
x1802:	add bp, 30	; 3: 131 197 30
x1805:	jmp atan	; 3: 233 131 40

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4661

math_test_1$91:	; Parameter 14 £temporary4661 16
x1808:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1811:	mov ax, [errno]	; 3: 161 230 10
x1814:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1817:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 44 7
x1822:	mov [bp + 16], bp	; 3: 137 110 16
x1825:	add bp, 14	; 3: 131 197 14
x1828:	mov di, bp	; 2: 137 239
x1830:	add di, 18	; 3: 131 199 18
x1833:	jmp printf	; 3: 233 216 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1836:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1842:	mov word [bp + 20], @10201$string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 119 11

math_test_1$98:	; PushFloat x
x1847:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1850:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1853:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1856:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1859:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 81 7
x1864:	mov [bp + 32], bp	; 3: 137 110 32
x1867:	add bp, 30	; 3: 131 197 30
x1870:	jmp exp	; 3: 233 243 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4663

math_test_1$106:	; Parameter 14 £temporary4663 16
x1873:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1876:	mov ax, [errno]	; 3: 161 230 10
x1879:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1882:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 109 7
x1887:	mov [bp + 16], bp	; 3: 137 110 16
x1890:	add bp, 14	; 3: 131 197 14
x1893:	mov di, bp	; 2: 137 239
x1895:	add di, 18	; 3: 131 199 18
x1898:	jmp printf	; 3: 233 151 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1901:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1907:	mov word [bp + 20], @10206$string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 147 11

math_test_1$113:	; PushFloat x
x1912:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1915:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1918:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1921:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1924:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 146 7
x1929:	mov [bp + 32], bp	; 3: 137 110 32
x1932:	add bp, 30	; 3: 131 197 30
x1935:	jmp log	; 3: 233 201 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4665

math_test_1$121:	; Parameter 14 £temporary4665 16
x1938:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1941:	mov ax, [errno]	; 3: 161 230 10
x1944:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1947:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 174 7
x1952:	mov [bp + 16], bp	; 3: 137 110 16
x1955:	add bp, 14	; 3: 131 197 14
x1958:	mov di, bp	; 2: 137 239
x1960:	add di, 18	; 3: 131 199 18
x1963:	jmp printf	; 3: 233 86 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1966:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1972:	mov word [bp + 20], @10211$string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 175 11

math_test_1$128:	; PushFloat x
x1977:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1980:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1983:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1986:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1989:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 211 7
x1994:	mov [bp + 32], bp	; 3: 137 110 32
x1997:	add bp, 30	; 3: 131 197 30
x2000:	jmp log10	; 3: 233 91 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4667

math_test_1$136:	; Parameter 14 £temporary4667 16
x2003:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x2006:	mov ax, [errno]	; 3: 161 230 10
x2009:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x2012:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 239 7
x2017:	mov [bp + 16], bp	; 3: 137 110 16
x2020:	add bp, 14	; 3: 131 197 14
x2023:	mov di, bp	; 2: 137 239
x2025:	add di, 18	; 3: 131 199 18
x2028:	jmp printf	; 3: 233 21 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x2031:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x2037:	mov word [bp + 20], @10216$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 205 11

math_test_1$143:	; PushFloat x
x2042:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x2045:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2048:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2051:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2054:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 20 8
x2059:	mov [bp + 32], bp	; 3: 137 110 32
x2062:	add bp, 30	; 3: 131 197 30
x2065:	jmp sinh	; 3: 233 218 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4669

math_test_1$151:	; Parameter 14 £temporary4669 16
x2068:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2071:	mov ax, [errno]	; 3: 161 230 10
x2074:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2077:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 48 8
x2082:	mov [bp + 16], bp	; 3: 137 110 16
x2085:	add bp, 14	; 3: 131 197 14
x2088:	mov di, bp	; 2: 137 239
x2090:	add di, 18	; 3: 131 199 18
x2093:	jmp printf	; 3: 233 212 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2096:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2102:	mov word [bp + 20], @10221$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 234 11

math_test_1$158:	; PushFloat x
x2107:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2110:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2113:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2116:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2119:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 85 8
x2124:	mov [bp + 32], bp	; 3: 137 110 32
x2127:	add bp, 30	; 3: 131 197 30
x2130:	jmp cosh	; 3: 233 234 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4671

math_test_1$166:	; Parameter 14 £temporary4671 16
x2133:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2136:	mov ax, [errno]	; 3: 161 230 10
x2139:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2142:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 113 8
x2147:	mov [bp + 16], bp	; 3: 137 110 16
x2150:	add bp, 14	; 3: 131 197 14
x2153:	mov di, bp	; 2: 137 239
x2155:	add di, 18	; 3: 131 199 18
x2158:	jmp printf	; 3: 233 147 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2161:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2167:	mov word [bp + 20], @10226$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 7 12

math_test_1$173:	; PushFloat x
x2172:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2175:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2178:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2181:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2184:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 150 8
x2189:	mov [bp + 32], bp	; 3: 137 110 32
x2192:	add bp, 30	; 3: 131 197 30
x2195:	jmp tanh	; 3: 233 250 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4673

math_test_1$181:	; Parameter 14 £temporary4673 16
x2198:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2201:	mov ax, [errno]	; 3: 161 230 10
x2204:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2207:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 178 8
x2212:	mov [bp + 16], bp	; 3: 137 110 16
x2215:	add bp, 14	; 3: 131 197 14
x2218:	mov di, bp	; 2: 137 239
x2220:	add di, 18	; 3: 131 199 18
x2223:	jmp printf	; 3: 233 82 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2226:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2232:	mov word [bp + 20], @10231$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 36 12

math_test_1$188:	; PushFloat x
x2237:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2240:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2243:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2246:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2249:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 215 8
x2254:	mov [bp + 32], bp	; 3: 137 110 32
x2257:	add bp, 30	; 3: 131 197 30
x2260:	jmp sqrt	; 3: 233 56 38

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4675

math_test_1$196:	; Parameter 14 £temporary4675 16
x2263:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2266:	mov ax, [errno]	; 3: 161 230 10
x2269:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2272:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 243 8
x2277:	mov [bp + 16], bp	; 3: 137 110 16
x2280:	add bp, 14	; 3: 131 197 14
x2283:	mov di, bp	; 2: 137 239
x2285:	add di, 18	; 3: 131 199 18
x2288:	jmp printf	; 3: 233 17 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2291:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2297:	mov word [bp + 20], @10236$string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 65 12

math_test_1$203:	; PushFloat x
x2302:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2305:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2308:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2311:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2314:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 24 9
x2319:	mov [bp + 32], bp	; 3: 137 110 32
x2322:	add bp, 30	; 3: 131 197 30
x2325:	jmp floor	; 3: 233 170 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4677

math_test_1$211:	; Parameter 14 £temporary4677 16
x2328:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2331:	mov ax, [errno]	; 3: 161 230 10
x2334:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2337:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 52 9
x2342:	mov [bp + 16], bp	; 3: 137 110 16
x2345:	add bp, 14	; 3: 131 197 14
x2348:	mov di, bp	; 2: 137 239
x2350:	add di, 18	; 3: 131 199 18
x2353:	jmp printf	; 3: 233 208 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2356:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2362:	mov word [bp + 20], @10241$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 95 12

math_test_1$218:	; PushFloat x
x2367:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2370:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2373:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2376:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2379:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 89 9
x2384:	mov [bp + 32], bp	; 3: 137 110 32
x2387:	add bp, 30	; 3: 131 197 30
x2390:	jmp ceil	; 3: 233 183 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4679

math_test_1$226:	; Parameter 14 £temporary4679 16
x2393:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2396:	mov ax, [errno]	; 3: 161 230 10
x2399:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2402:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 117 9
x2407:	mov [bp + 16], bp	; 3: 137 110 16
x2410:	add bp, 14	; 3: 131 197 14
x2413:	mov di, bp	; 2: 137 239
x2415:	add di, 18	; 3: 131 199 18
x2418:	jmp printf	; 3: 233 143 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2421:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2427:	mov word [bp + 20], @10246$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 124 12

math_test_1$233:	; PushFloat x
x2432:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2435:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2438:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2441:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2444:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 154 9
x2449:	mov [bp + 32], bp	; 3: 137 110 32
x2452:	add bp, 30	; 3: 131 197 30
x2455:	jmp fabs	; 3: 233 98 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4681

math_test_1$241:	; Parameter 14 £temporary4681 16
x2458:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2461:	mov ax, [errno]	; 3: 161 230 10
x2464:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2467:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 182 9
x2472:	mov [bp + 16], bp	; 3: 137 110 16
x2475:	add bp, 14	; 3: 131 197 14
x2478:	mov di, bp	; 2: 137 239
x2480:	add di, 18	; 3: 131 199 18
x2483:	jmp printf	; 3: 233 78 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2486:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$246:	; Assign j 0
x2492:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2497:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2500:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4683 j
x2503:	mov si, bp	; 2: 137 238
x2505:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4683 14
x2508:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2511:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 221 9
x2516:	mov [bp + 18], bp	; 3: 137 110 18
x2519:	add bp, 16	; 3: 131 197 16
x2522:	jmp frexp	; 3: 233 244 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4684

math_test_1$255:	; PopFloat z
x2525:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2528:	mov word [bp + 30], @10257$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 153 12

math_test_1$258:	; PushFloat x
x2533:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2536:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2539:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2542:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2545:	mov ax, [bp + 14]	; 3: 139 70 14
x2548:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2551:	mov ax, [errno]	; 3: 161 230 10
x2554:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2557:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 16 10
x2562:	mov [bp + 26], bp	; 3: 137 110 26
x2565:	add bp, 24	; 3: 131 197 24
x2568:	mov di, bp	; 2: 137 239
x2570:	add di, 20	; 3: 131 199 20
x2573:	jmp printf	; 3: 233 244 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2576:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2581:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2583:	mov word [bp + 30], @10262$string_Error20message3A#	; 5: 199 70 30 191 12

math_test_1$269:	; Call 24 perror 0
x2588:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 42 10
x2593:	mov [bp + 26], bp	; 3: 137 110 26
x2596:	add bp, 24	; 3: 131 197 24
x2599:	jmp perror	; 3: 233 171 41

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2602:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$272:	; PushZero
x2608:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2610:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2613:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2616:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4688 w
x2619:	mov si, bp	; 2: 137 238
x2621:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4688 14
x2624:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2627:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 81 10
x2632:	mov [bp + 24], bp	; 3: 137 110 24
x2635:	add bp, 22	; 3: 131 197 22
x2638:	jmp modf	; 3: 233 30 42

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4689

math_test_1$282:	; PopFloat z
x2641:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2644:	mov word [bp + 36], @10272$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 206 12

math_test_1$285:	; PushFloat x
x2649:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2652:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2655:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2658:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2661:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2664:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2667:	mov ax, [errno]	; 3: 161 230 10
x2670:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2673:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 132 10
x2678:	mov [bp + 32], bp	; 3: 137 110 32
x2681:	add bp, 30	; 3: 131 197 30
x2684:	mov di, bp	; 2: 137 239
x2686:	add di, 26	; 3: 131 199 26
x2689:	jmp printf	; 3: 233 128 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2692:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2697:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2699:	mov word [bp + 36], @10277$string_Error20message3A#	; 5: 199 70 36 243 12

math_test_1$297:	; Call 30 perror 0
x2704:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 158 10
x2709:	mov [bp + 32], bp	; 3: 137 110 32
x2712:	add bp, 30	; 3: 131 197 30
x2715:	jmp perror	; 3: 233 55 41

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2718:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2724:	mov word [bp + 20], @10281$string_0A#	; 5: 199 70 20 2 13

math_test_1$302:	; Call 14 printf 0
x2729:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 185 10
x2734:	mov [bp + 16], bp	; 3: 137 110 16
x2737:	add bp, 14	; 3: 131 197 14
x2740:	mov di, bp	; 2: 137 239
x2742:	jmp printf	; 3: 233 75 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2745:	mov ax, [bp]	; 3: 139 70 0
x2748:	mov di, [bp + 4]	; 3: 139 126 4
x2751:	mov bp, [bp + 2]	; 3: 139 110 2
x2754:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

@10169$string_3C25f3E0A#:
x2756:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

@10171$string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2762:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2790:	dw 0	; 2: 0 0

@10176$string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2792:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10181$string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2820:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10186$string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2848:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10191$string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2877:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10196$string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2906:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10201$string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2935:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10206$string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2963:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10211$string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2991:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10216$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x3021:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10221$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3050:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10226$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3079:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10231$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3108:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10236$string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3137:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10241$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3167:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10246$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3196:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10257$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3225:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10262$string_Error20message3A#:
x3263:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10272$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3278:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10277$string_Error20message3A#:
x3315:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10281$string_0A#:
x3330:	db 10, 0	; 2: 10 0

printf:	; address £temporary2195 format
x3332:	mov si, bp	; 2: 137 238
x3334:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2196 £temporary2195

printf$2:	; BinaryAdd arg_list £temporary2196 2
x3337:	add si, 2	; 3: 131 198 2
x3340:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3343:	mov ax, [bp + 6]	; 3: 139 70 6
x3346:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3349:	mov ax, [di + 8]	; 3: 139 69 8
x3352:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3355:	mov word [di + 10], printf$7	; 5: 199 69 10 46 13
x3360:	mov [di + 12], bp	; 3: 137 109 12
x3363:	mov [di + 14], di	; 3: 137 125 14
x3366:	add di, 10	; 3: 131 199 10
x3369:	mov bp, di	; 2: 137 253
x3371:	nop	; 1: 144
x3372:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2198

printf$9:	; SetReturnValue £temporary2198

printf$10:	; Return £temporary2198
x3374:	mov ax, [bp]	; 3: 139 70 0
x3377:	mov di, [bp + 4]	; 3: 139 126 4
x3380:	mov bp, [bp + 2]	; 3: 139 110 2
x3383:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3385:	mov ax, [stdout]	; 3: 161 100 13
x3388:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3391:	mov ax, [bp + 6]	; 3: 139 70 6
x3394:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3397:	mov ax, [bp + 8]	; 3: 139 70 8
x3400:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3403:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 89 13
x3408:	mov [bp + 12], bp	; 3: 137 110 12
x3411:	add bp, 10	; 3: 131 197 10
x3414:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2202

vprintf$7:	; SetReturnValue £temporary2202

vprintf$8:	; Return £temporary2202
x3417:	mov ax, [bp]	; 3: 139 70 0
x3420:	mov di, [bp + 4]	; 3: 139 126 4
x3423:	mov bp, [bp + 2]	; 3: 139 110 2
x3426:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3428:	dw g_fileArray + 29	; 2: 131 13

g_fileArray:
x3430:	dw 1	; 2: 1 0
x3432:	dw 0	; 2: 0 0
x3434:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3459:	dw 1	; 2: 1 0
x3461:	dw 1	; 2: 1 0
x3463:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3488:	dw 1	; 2: 1 0
x3490:	dw 2	; 2: 2 0
x3492:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3517:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x4010:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2214 outStream
x4016:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2214
x4019:	mov [g_outDevice], ax	; 3: 163 221 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x4022:	mov ax, [bp + 8]	; 3: 139 70 8
x4025:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x4028:	mov ax, [bp + 10]	; 3: 139 70 10
x4031:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x4034:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 208 15
x4039:	mov [bp + 14], bp	; 3: 137 110 14
x4042:	add bp, 12	; 3: 131 197 12
x4045:	nop	; 1: 144
x4046:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2215

vfprintf$9:	; SetReturnValue £temporary2215

vfprintf$10:	; Return £temporary2215
x4048:	mov ax, [bp]	; 3: 139 70 0
x4051:	mov di, [bp + 4]	; 3: 139 126 4
x4054:	mov bp, [bp + 2]	; 3: 139 110 2
x4057:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x4059:	db 0, 0	; 2: 0 0

g_outDevice:
x4061:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4063:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4068:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4073:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4078:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4083:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4088:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4093:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4098:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4103:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4108:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4113:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4118:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4123:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4128:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4133:	mov word [g_outChars], 0	; 6: 199 6 57 21 0 0

printFormat$15:	; Assign index 0
x4139:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2049 format index
x4144:	mov si, [bp + 6]	; 3: 139 118 6
x4147:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2048 -> £temporary2049 £temporary2049 0

printFormat$18:	; Equal 285 £temporary2048 -> £temporary2049 0
x4150:	cmp byte [si], 0	; 3: 128 60 0
x4153:	je printFormat$285	; 4: 15 132 214 4

printFormat$19:	; BinaryAdd £temporary2053 format index
x4157:	mov si, [bp + 6]	; 3: 139 118 6
x4160:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2052 -> £temporary2053 £temporary2053 0

printFormat$21:	; Assign c £temporary2052 -> £temporary2053
x4163:	mov al, [si]	; 2: 138 4
x4165:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 263 percent 0
x4168:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4172:	je printFormat$263	; 4: 15 132 91 4

printFormat$23:	; Case 52 c 43
x4176:	mov al, [bp + 40]	; 3: 138 70 40
x4179:	cmp al, 43	; 2: 60 43
x4181:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4185:	cmp al, 45	; 2: 60 45
x4187:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4191:	cmp al, 32	; 2: 60 32
x4193:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4197:	cmp al, 48	; 2: 60 48
x4199:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4203:	cmp al, 35	; 2: 60 35
x4205:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4209:	cmp al, 46	; 2: 60 46
x4211:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4215:	cmp al, 42	; 2: 60 42
x4217:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4221:	cmp al, 104	; 2: 60 104
x4223:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4227:	cmp al, 108	; 2: 60 108
x4229:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4233:	cmp al, 76	; 2: 60 76
x4235:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4239:	cmp al, 37	; 2: 60 37
x4241:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4245:	cmp al, 110	; 2: 60 110
x4247:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4251:	cmp al, 112	; 2: 60 112
x4253:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4257:	cmp al, 71	; 2: 60 71
x4259:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4263:	cmp al, 103	; 2: 60 103
x4265:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4269:	cmp al, 69	; 2: 60 69
x4271:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4275:	cmp al, 101	; 2: 60 101
x4277:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4281:	cmp al, 102	; 2: 60 102
x4283:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4287:	cmp al, 115	; 2: 60 115
x4289:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4293:	cmp al, 99	; 2: 60 99
x4295:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4297:	cmp al, 88	; 2: 60 88
x4299:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4301:	cmp al, 120	; 2: 60 120
x4303:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4305:	cmp al, 111	; 2: 60 111
x4307:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4309:	cmp al, 98	; 2: 60 98
x4311:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4313:	cmp al, 117	; 2: 60 117
x4315:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4317:	cmp al, 100	; 2: 60 100
x4319:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4321:	cmp al, 105	; 2: 60 105
x4323:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4325:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4328:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 283
x4333:	jmp printFormat$283	; 3: 233 29 4

printFormat$54:	; Assign minus 1
x4336:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 283
x4341:	jmp printFormat$283	; 3: 233 21 4

printFormat$56:	; Assign space 1
x4344:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 283
x4349:	jmp printFormat$283	; 3: 233 13 4

printFormat$58:	; Assign zero 1
x4352:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 283
x4357:	jmp printFormat$283	; 3: 233 5 4

printFormat$60:	; Assign grid 1
x4360:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 283
x4365:	jmp printFormat$283	; 3: 233 253 3

printFormat$62:	; Assign period 1
x4368:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 283
x4373:	jmp printFormat$283	; 3: 233 245 3

printFormat$64:	; NotEqual 67 period 0
x4376:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4380:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4382:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 283
x4387:	jmp printFormat$283	; 3: 233 231 3

printFormat$67:	; Assign precision -1
x4390:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 283
x4395:	jmp printFormat$283	; 3: 233 223 3

printFormat$69:	; Assign shortInt 1
x4398:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 283
x4403:	jmp printFormat$283	; 3: 233 215 3

printFormat$71:	; Assign longInt 1
x4406:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 283
x4411:	jmp printFormat$283	; 3: 233 207 3

printFormat$73:	; Assign longDouble 1
x4414:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 283
x4419:	jmp printFormat$283	; 3: 233 199 3

printFormat$75:	; Equal 107 minus 0
x4422:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4426:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4430:	mov ax, [g_outChars]	; 3: 161 57 21
x4433:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2057 format index
x4436:	mov si, [bp + 6]	; 3: 139 118 6
x4439:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2056 -> £temporary2057 £temporary2057 0

printFormat$80:	; address £temporary2058 £temporary2056 -> £temporary2057

printFormat$81:	; Parameter 43 £temporary2058 6
x4442:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4445:	mov ax, [bp + 8]	; 3: 139 70 8
x4448:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4451:	mov ax, [bp + 18]	; 3: 139 70 18
x4454:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4457:	mov ax, [bp + 22]	; 3: 139 70 22
x4460:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4463:	mov ax, [bp + 26]	; 3: 139 70 26
x4466:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2059 width
x4469:	mov si, bp	; 2: 137 238
x4471:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2059 16
x4474:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4477:	mov ax, [bp + 14]	; 3: 139 70 14
x4480:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4483:	mov ax, [bp + 34]	; 3: 139 70 34
x4486:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4489:	mov ax, [bp + 36]	; 3: 139 70 36
x4492:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4495:	mov ax, [bp + 38]	; 3: 139 70 38
x4498:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4501:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4506:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4511:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 173 17
x4516:	mov [bp + 45], bp	; 3: 137 110 45
x4519:	add bp, 43	; 3: 131 197 43
x4522:	jmp printArgument	; 3: 233 144 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2060

printFormat$97:	; Assign arg_list £temporary2060
x4525:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4528:	mov ax, [g_outChars]	; 3: 161 57 21
x4531:	sub ax, [bp + 41]	; 3: 43 70 41
x4534:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2062 field
x4537:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4540:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2062 width
x4543:	cmp ax, [bp + 12]	; 3: 59 70 12
x4546:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4550:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4554:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 216 17
x4559:	mov [bp + 47], bp	; 3: 137 110 47
x4562:	add bp, 45	; 3: 131 197 45
x4565:	jmp printChar	; 3: 233 120 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4568:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4570:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4574:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4578:	mov ax, [g_outChars]	; 3: 161 57 21
x4581:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4584:	mov ax, [g_outStatus]	; 3: 161 219 15
x4587:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4590:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4595:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2066 format index
x4601:	mov si, [bp + 6]	; 3: 139 118 6
x4604:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2065 -> £temporary2066 £temporary2066 0

printFormat$115:	; address £temporary2067 £temporary2065 -> £temporary2066

printFormat$116:	; Parameter 47 £temporary2067 6
x4607:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4610:	mov ax, [bp + 8]	; 3: 139 70 8
x4613:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4616:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4621:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4626:	mov ax, [bp + 26]	; 3: 139 70 26
x4629:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2068 width
x4632:	mov si, bp	; 2: 137 238
x4634:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2068 16
x4637:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4640:	mov ax, [bp + 14]	; 3: 139 70 14
x4643:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4646:	mov ax, [bp + 34]	; 3: 139 70 34
x4649:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4652:	mov ax, [bp + 36]	; 3: 139 70 36
x4655:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4658:	mov ax, [bp + 38]	; 3: 139 70 38
x4661:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4664:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2069 negative
x4669:	mov si, bp	; 2: 137 238
x4671:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2069 28
x4674:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4677:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 83 18
x4682:	mov [bp + 49], bp	; 3: 137 110 49
x4685:	add bp, 47	; 3: 131 197 47
x4688:	jmp printArgument	; 3: 233 234 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4691:	mov ax, [bp + 43]	; 3: 139 70 43
x4694:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4697:	mov ax, [g_outChars]	; 3: 161 57 21
x4700:	sub ax, [bp + 41]	; 3: 43 70 41
x4703:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4706:	mov ax, [bp + 41]	; 3: 139 70 41
x4709:	mov [g_outChars], ax	; 3: 163 57 21

printFormat$135:	; Equal 142 negative 0
x4712:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4716:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4718:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4722:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 128 18
x4727:	mov [bp + 51], bp	; 3: 137 110 51
x4730:	add bp, 49	; 3: 131 197 49
x4733:	jmp printChar	; 3: 233 208 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4736:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4739:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4741:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4745:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4747:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4751:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 157 18
x4756:	mov [bp + 51], bp	; 3: 137 110 51
x4759:	add bp, 49	; 3: 131 197 49
x4762:	jmp printChar	; 3: 233 179 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4765:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4768:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4770:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4774:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4776:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4780:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 186 18
x4785:	mov [bp + 51], bp	; 3: 137 110 51
x4788:	add bp, 49	; 3: 131 197 49
x4791:	jmp printChar	; 3: 233 150 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4794:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2081 field
x4797:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4800:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2081 width
x4803:	cmp ax, [bp + 12]	; 3: 59 70 12
x4806:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4808:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4812:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 218 18
x4817:	mov [bp + 51], bp	; 3: 137 110 51
x4820:	add bp, 49	; 3: 131 197 49
x4823:	jmp printChar	; 3: 233 118 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4826:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2085 format index
x4828:	mov si, [bp + 6]	; 3: 139 118 6
x4831:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2084 -> £temporary2085 £temporary2085 0

printFormat$166:	; address £temporary2086 £temporary2084 -> £temporary2085

printFormat$167:	; Parameter 49 £temporary2086 6
x4834:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4837:	mov ax, [bp + 8]	; 3: 139 70 8
x4840:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4843:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4848:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4853:	mov ax, [bp + 26]	; 3: 139 70 26
x4856:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4859:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4864:	mov ax, [bp + 14]	; 3: 139 70 14
x4867:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4870:	mov ax, [bp + 34]	; 3: 139 70 34
x4873:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4876:	mov ax, [bp + 36]	; 3: 139 70 36
x4879:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4882:	mov ax, [bp + 38]	; 3: 139 70 38
x4885:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4888:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4893:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4898:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 48 19
x4903:	mov [bp + 51], bp	; 3: 137 110 51
x4906:	add bp, 49	; 3: 131 197 49
x4909:	jmp printArgument	; 3: 233 13 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2087

printFormat$182:	; Assign arg_list £temporary2087
x4912:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4915:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4918:	mov ax, [g_outChars]	; 3: 161 57 21
x4921:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4924:	mov ax, [g_outStatus]	; 3: 161 219 15
x4927:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4930:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2089 format index
x4936:	mov si, [bp + 6]	; 3: 139 118 6
x4939:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2088 -> £temporary2089 £temporary2089 0

printFormat$190:	; address £temporary2090 £temporary2088 -> £temporary2089

printFormat$191:	; Parameter 45 £temporary2090 6
x4942:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4945:	mov ax, [bp + 8]	; 3: 139 70 8
x4948:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4951:	mov ax, [bp + 18]	; 3: 139 70 18
x4954:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4957:	mov ax, [bp + 22]	; 3: 139 70 22
x4960:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4963:	mov ax, [bp + 26]	; 3: 139 70 26
x4966:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2091 width
x4969:	mov si, bp	; 2: 137 238
x4971:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2091 16
x4974:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4977:	mov ax, [bp + 14]	; 3: 139 70 14
x4980:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4983:	mov ax, [bp + 34]	; 3: 139 70 34
x4986:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4989:	mov ax, [bp + 36]	; 3: 139 70 36
x4992:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4995:	mov ax, [bp + 38]	; 3: 139 70 38
x4998:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x5001:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x5006:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x5011:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 161 19
x5016:	mov [bp + 47], bp	; 3: 137 110 47
x5019:	add bp, 45	; 3: 131 197 45
x5022:	jmp printArgument	; 3: 233 156 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x5025:	mov ax, [bp + 43]	; 3: 139 70 43
x5028:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x5031:	mov ax, [g_outChars]	; 3: 161 57 21
x5034:	sub ax, [bp + 41]	; 3: 43 70 41
x5037:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x5040:	mov ax, [bp + 41]	; 3: 139 70 41
x5043:	mov [g_outChars], ax	; 3: 163 57 21

printFormat$209:	; Assign £temporary2094 field
x5046:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x5049:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2094 width
x5052:	cmp ax, [bp + 12]	; 3: 59 70 12
x5055:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x5057:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x5061:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 211 19
x5066:	mov [bp + 49], bp	; 3: 137 110 49
x5069:	add bp, 47	; 3: 131 197 47
x5072:	jmp printChar	; 3: 233 125 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5075:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2098 format index
x5077:	mov si, [bp + 6]	; 3: 139 118 6
x5080:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2097 -> £temporary2098 £temporary2098 0

printFormat$220:	; address £temporary2099 £temporary2097 -> £temporary2098

printFormat$221:	; Parameter 47 £temporary2099 6
x5083:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5086:	mov ax, [bp + 8]	; 3: 139 70 8
x5089:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5092:	mov ax, [bp + 18]	; 3: 139 70 18
x5095:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5098:	mov ax, [bp + 22]	; 3: 139 70 22
x5101:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5104:	mov ax, [bp + 26]	; 3: 139 70 26
x5107:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5110:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5115:	mov ax, [bp + 14]	; 3: 139 70 14
x5118:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5121:	mov ax, [bp + 34]	; 3: 139 70 34
x5124:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5127:	mov ax, [bp + 36]	; 3: 139 70 36
x5130:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5133:	mov ax, [bp + 38]	; 3: 139 70 38
x5136:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5139:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5144:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5149:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 43 20
x5154:	mov [bp + 49], bp	; 3: 137 110 49
x5157:	add bp, 47	; 3: 131 197 47
x5160:	jmp printArgument	; 3: 233 18 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2100

printFormat$236:	; Assign arg_list £temporary2100
x5163:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5166:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 283
x5171:	jmp printFormat$283	; 3: 233 215 0

printFormat$239:	; Assign value 0
x5174:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2103 c
x5179:	mov al, [bp + 40]	; 3: 138 70 40
x5182:	and ax, 255	; 3: 37 255 0
x5185:	cmp al, 0	; 2: 60 0
x5187:	jge printFormat$242	; 2: 125 4
x5189:	neg al	; 2: 246 216
x5191:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2103 6
x5193:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5196:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 90 20
x5201:	mov [bp + 45], bp	; 3: 137 110 45
x5204:	add bp, 43	; 3: 131 197 43
x5207:	jmp isdigit	; 3: 233 18 23

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2104

printFormat$246:	; Equal 257 £temporary2104 0
x5210:	cmp bx, 0	; 3: 131 251 0
x5213:	je printFormat$257	; 2: 116 51

printFormat$247:	; SignedMultiply £temporary2105 value 10
x5215:	mov ax, [bp + 41]	; 3: 139 70 41
x5218:	xor dx, dx	; 2: 49 210
x5220:	imul word [@4710$int2$10#]	; 4: 247 46 59 21

printFormat$248:	; BinarySubtract £temporary2106 c 48
x5224:	mov bl, [bp + 40]	; 3: 138 94 40
x5227:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2107 £temporary2106
x5230:	and bx, 255	; 4: 129 227 255 0
x5234:	cmp bl, 0	; 3: 128 251 0
x5237:	jge printFormat$250	; 2: 125 4
x5239:	neg bl	; 2: 246 219
x5241:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2105 £temporary2107
x5243:	add ax, bx	; 2: 1 216
x5245:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5248:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; Assign £temporary2109 index
x5251:	mov ax, [bp + 10]	; 3: 139 70 10

printFormat$253:	; BinaryAdd £temporary2111 format £temporary2109
x5254:	mov si, [bp + 6]	; 3: 139 118 6
x5257:	add si, ax	; 2: 1 198

printFormat$254:	; Deref £temporary2110 -> £temporary2111 £temporary2111 0

printFormat$255:	; Assign c £temporary2110 -> £temporary2111
x5259:	mov al, [si]	; 2: 138 4
x5261:	mov [bp + 40], al	; 3: 136 70 40

printFormat$256:	; Goto 240
x5264:	jmp printFormat$240	; 2: 235 169

printFormat$257:	; Decrement index
x5266:	dec word [bp + 10]	; 3: 255 78 10

printFormat$258:	; NotEqual 261 period 0
x5269:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5273:	jne printFormat$261	; 2: 117 8

printFormat$259:	; Assign width value
x5275:	mov ax, [bp + 41]	; 3: 139 70 41
x5278:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$260:	; Goto 283
x5281:	jmp printFormat$283	; 2: 235 106

printFormat$261:	; Assign precision value
x5283:	mov ax, [bp + 41]	; 3: 139 70 41
x5286:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$262:	; Goto 283
x5289:	jmp printFormat$283	; 2: 235 98

printFormat$263:	; NotEqual 279 c 37
x5291:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5295:	jne printFormat$279	; 2: 117 72

printFormat$264:	; Assign percent 1
x5297:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$265:	; Assign plus 0
x5302:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$266:	; Assign minus 0
x5307:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$267:	; Assign space 0
x5312:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$268:	; Assign zero 0
x5317:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$269:	; Assign grid 0
x5322:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$270:	; Assign widthStar 0
x5327:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$271:	; Assign period 0
x5332:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$272:	; Assign precisionStar 0
x5337:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$273:	; Assign shortInt 0
x5342:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$274:	; Assign longInt 0
x5347:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$275:	; Assign longDouble 0
x5352:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$276:	; Assign width 0
x5357:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$277:	; Assign precision 0
x5362:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$278:	; Goto 283
x5367:	jmp printFormat$283	; 2: 235 20

printFormat$279:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$280:	; Parameter 41 c 6
x5369:	mov al, [bp + 40]	; 3: 138 70 40
x5372:	mov [bp + 47], al	; 3: 136 70 47

printFormat$281:	; Call 41 printChar 0
x5375:	mov word [bp + 41], printFormat$282	; 5: 199 70 41 13 21
x5380:	mov [bp + 43], bp	; 3: 137 110 43
x5383:	add bp, 41	; 3: 131 197 41
x5386:	jmp printChar	; 3: 233 67 7

printFormat$282:	; PostCall 41

printFormat$283:	; Increment index
x5389:	inc word [bp + 10]	; 3: 255 70 10

printFormat$284:	; Goto 16
x5392:	jmp printFormat$16	; 3: 233 29 251

printFormat$285:	; NotEqual 291 g_outStatus 1
x5395:	cmp word [g_outStatus], 1	; 5: 131 62 219 15 1
x5400:	jne printFormat$291	; 2: 117 16

printFormat$286:	; IntegralToIntegral £temporary2120 g_outDevice
x5402:	mov ax, [g_outDevice]	; 3: 161 221 15

printFormat$287:	; Assign outString £temporary2120
x5405:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$288:	; BinaryAdd £temporary2122 outString g_outChars
x5408:	mov si, [bp + 40]	; 3: 139 118 40
x5411:	add si, [g_outChars]	; 4: 3 54 57 21

printFormat$289:	; Deref £temporary2121 -> £temporary2122 £temporary2122 0

printFormat$290:	; Assign £temporary2121 -> £temporary2122 0
x5415:	mov byte [si], 0	; 3: 198 4 0

printFormat$291:	; SetReturnValue g_outChars
x5418:	mov bx, [g_outChars]	; 4: 139 30 57 21

printFormat$292:	; Return g_outChars
x5422:	mov ax, [bp]	; 3: 139 70 0
x5425:	mov di, [bp + 4]	; 3: 139 126 4
x5428:	mov bp, [bp + 2]	; 3: 139 110 2
x5431:	jmp ax	; 2: 255 224

printFormat$293:	; FunctionEnd printFormat

g_outChars:
x5433:	db 0, 0	; 2: 0 0

@4710$int2$10#:
x5435:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary1821 -> format format 0
x5437:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary1821 -> format
x5440:	mov al, [si]	; 2: 138 4
x5442:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5445:	mov al, [bp + 30]	; 3: 138 70 30
x5448:	cmp al, 100	; 2: 60 100
x5450:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5452:	cmp al, 105	; 2: 60 105
x5454:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5456:	cmp al, 99	; 2: 60 99
x5458:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5462:	cmp al, 115	; 2: 60 115
x5464:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5468:	cmp al, 88	; 2: 60 88
x5470:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5474:	cmp al, 120	; 2: 60 120
x5476:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5480:	cmp al, 98	; 2: 60 98
x5482:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5486:	cmp al, 111	; 2: 60 111
x5488:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5492:	cmp al, 117	; 2: 60 117
x5494:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5498:	cmp al, 71	; 2: 60 71
x5500:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5504:	cmp al, 103	; 2: 60 103
x5506:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5510:	cmp al, 69	; 2: 60 69
x5512:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5516:	cmp al, 101	; 2: 60 101
x5518:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5522:	cmp al, 102	; 2: 60 102
x5524:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5528:	cmp al, 112	; 2: 60 112
x5530:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5534:	cmp al, 110	; 2: 60 110
x5536:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5540:	cmp al, 37	; 2: 60 37
x5542:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5546:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5549:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5553:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5555:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary1823 arg_list 2
x5559:	mov si, [bp + 8]	; 3: 139 118 8
x5562:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary1824 £temporary1823

printArgument$25:	; Deref £temporary1825 -> £temporary1824 £temporary1824 0

printArgument$26:	; IntegralToIntegral £temporary1826 £temporary1825 -> £temporary1824
x5565:	mov ax, [si]	; 2: 139 4
x5567:	cmp ax, 0	; 3: 131 248 0
x5570:	jge printArgument$27	; 2: 125 4
x5572:	neg ax	; 2: 247 216
x5574:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary1827 £temporary1826
x5576:	and eax, 255	; 6: 102 37 255 0 0 0
x5582:	cmp al, 0	; 2: 60 0
x5584:	jge printArgument$28	; 2: 125 5
x5586:	neg al	; 2: 246 216
x5588:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary1827
x5591:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5595:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5597:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5601:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5603:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary1829 arg_list 4
x5607:	mov si, [bp + 8]	; 3: 139 118 8
x5610:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary1830 £temporary1829

printArgument$34:	; Deref £temporary1831 -> £temporary1830 £temporary1830 0

printArgument$35:	; Assign longValue £temporary1831 -> £temporary1830
x5613:	mov eax, [si]	; 3: 102 139 4
x5616:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5620:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5622:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary1833 arg_list 2
x5626:	mov si, [bp + 8]	; 3: 139 118 8
x5629:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary1834 £temporary1833

printArgument$40:	; Deref £temporary1835 -> £temporary1834 £temporary1834 0

printArgument$41:	; IntegralToIntegral £temporary1836 £temporary1835 -> £temporary1834
x5632:	mov ax, [si]	; 2: 139 4
x5634:	and eax, 65535	; 6: 102 37 255 255 0 0
x5640:	cmp ax, 0	; 3: 131 248 0
x5643:	jge printArgument$42	; 2: 125 5
x5645:	neg ax	; 2: 247 216
x5647:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary1836
x5650:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5654:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5658:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary1840 -> negativePtr negativePtr 0
x5660:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5663:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5668:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary1842 1
x5670:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5673:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary1842 0
x5675:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary1840 -> negativePtr £temporary1842
x5678:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5680:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5684:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5686:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5690:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5694:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 76 22
x5699:	mov [bp + 50], bp	; 3: 137 110 50
x5702:	add bp, 48	; 3: 131 197 48
x5705:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary1845

printArgument$56:	; Assign longValue £temporary1845
x5708:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5712:	mov ax, [bp + 8]	; 3: 139 70 8
x5715:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5718:	mov ax, [bp + 16]	; 3: 139 70 16
x5721:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary1846 precision
x5724:	mov si, bp	; 2: 137 238
x5726:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary1846 10
x5729:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5732:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 114 22
x5737:	mov [bp + 50], bp	; 3: 137 110 50
x5740:	add bp, 48	; 3: 131 197 48
x5743:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary1847

printArgument$65:	; Assign arg_list £temporary1847
x5746:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5749:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5753:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5757:	mov ax, [bp + 10]	; 3: 139 70 10
x5760:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5763:	mov ax, [bp + 12]	; 3: 139 70 12
x5766:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5769:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 151 22
x5774:	mov [bp + 50], bp	; 3: 137 110 50
x5777:	add bp, 48	; 3: 131 197 48
x5780:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5783:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5786:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary1850 arg_list 2
x5790:	mov si, [bp + 8]	; 3: 139 118 8
x5793:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary1851 £temporary1850

printArgument$76:	; Deref £temporary1852 -> £temporary1851 £temporary1851 0

printArgument$77:	; IntegralToIntegral £temporary1853 £temporary1852 -> £temporary1851
x5796:	mov ax, [si]	; 2: 139 4
x5798:	cmp ax, 0	; 3: 131 248 0
x5801:	jge printArgument$78	; 2: 125 4
x5803:	neg ax	; 2: 247 216
x5805:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary1853
x5807:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5810:	mov ax, [bp + 8]	; 3: 139 70 8
x5813:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5816:	mov ax, [bp + 16]	; 3: 139 70 16
x5819:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary1854 precision
x5822:	mov si, bp	; 2: 137 238
x5824:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary1854 10
x5827:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5830:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 212 22
x5835:	mov [bp + 46], bp	; 3: 137 110 46
x5838:	add bp, 44	; 3: 131 197 44
x5841:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary1855

printArgument$87:	; Assign arg_list £temporary1855
x5844:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5847:	mov al, [bp + 31]	; 3: 138 70 31
x5850:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5853:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 235 22
x5858:	mov [bp + 46], bp	; 3: 137 110 46
x5861:	add bp, 44	; 3: 131 197 44
x5864:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5867:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5870:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary1858 arg_list 2
x5874:	mov si, [bp + 8]	; 3: 139 118 8
x5877:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary1859 £temporary1858

printArgument$96:	; Deref £temporary1860 -> £temporary1859 £temporary1859 0

printArgument$97:	; Assign stringValue £temporary1860 -> £temporary1859
x5880:	mov ax, [si]	; 2: 139 4
x5882:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5885:	mov ax, [bp + 8]	; 3: 139 70 8
x5888:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5891:	mov ax, [bp + 16]	; 3: 139 70 16
x5894:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary1861 precision
x5897:	mov si, bp	; 2: 137 238
x5899:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary1861 10
x5902:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5905:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 31 23
x5910:	mov [bp + 48], bp	; 3: 137 110 48
x5913:	add bp, 46	; 3: 131 197 46
x5916:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary1862

printArgument$106:	; Assign arg_list £temporary1862
x5919:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5922:	mov ax, [bp + 44]	; 3: 139 70 44
x5925:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5928:	mov ax, [bp + 18]	; 3: 139 70 18
x5931:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5934:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 60 23
x5939:	mov [bp + 48], bp	; 3: 137 110 48
x5942:	add bp, 46	; 3: 131 197 46
x5945:	jmp printString	; 3: 233 224 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5948:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5951:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5955:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary1878 10
x5957:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5963:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5965:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5969:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary1874 8
x5971:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5977:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5979:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5983:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary1870 2
x5985:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5991:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary1870 16
x5993:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary1874 £temporary1870

printArgument$124:	; Assign £temporary1878 £temporary1874

printArgument$125:	; Assign base £temporary1878
x5999:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x6003:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x6007:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x6009:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary1880 arg_list 2
x6013:	mov si, [bp + 8]	; 3: 139 118 8
x6016:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary1881 £temporary1880

printArgument$130:	; Deref £temporary1882 -> £temporary1881 £temporary1881 0

printArgument$131:	; IntegralToIntegral £temporary1883 £temporary1882 -> £temporary1881
x6019:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary1884 £temporary1883
x6021:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary1884
x6027:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x6031:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x6033:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x6037:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x6039:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary1886 arg_list 4
x6043:	mov si, [bp + 8]	; 3: 139 118 8
x6046:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary1887 £temporary1886

printArgument$139:	; Deref £temporary1888 -> £temporary1887 £temporary1887 0

printArgument$140:	; Assign value £temporary1888 -> £temporary1887
x6049:	mov eax, [si]	; 3: 102 139 4
x6052:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x6056:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x6058:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary1890 arg_list 2
x6062:	mov si, [bp + 8]	; 3: 139 118 8
x6065:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary1891 £temporary1890

printArgument$145:	; Deref £temporary1892 -> £temporary1891 £temporary1891 0

printArgument$146:	; IntegralToIntegral £temporary1893 £temporary1892 -> £temporary1891
x6068:	mov ax, [si]	; 2: 139 4
x6070:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary1893
x6076:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6080:	mov ax, [bp + 8]	; 3: 139 70 8
x6083:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6086:	mov ax, [bp + 16]	; 3: 139 70 16
x6089:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary1896 precision
x6092:	mov si, bp	; 2: 137 238
x6094:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary1896 10
x6097:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6100:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 226 23
x6105:	mov [bp + 54], bp	; 3: 137 110 54
x6108:	add bp, 52	; 3: 131 197 52
x6111:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary1897

printArgument$156:	; Assign arg_list £temporary1897
x6114:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6117:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6121:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6125:	mov ax, [bp + 10]	; 3: 139 70 10
x6128:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6131:	mov ax, [bp + 12]	; 3: 139 70 12
x6134:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6137:	mov ax, [bp + 14]	; 3: 139 70 14
x6140:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6143:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6147:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary1898 c
x6151:	mov al, [bp + 30]	; 3: 138 70 30
x6154:	and ax, 255	; 3: 37 255 0
x6157:	cmp al, 0	; 2: 60 0
x6159:	jge printArgument$165	; 2: 125 4
x6161:	neg al	; 2: 246 216
x6163:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary1898 26
x6165:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6168:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 38 24
x6173:	mov [bp + 74], bp	; 3: 137 110 74
x6176:	add bp, 72	; 3: 131 197 72
x6179:	jmp isupper	; 3: 233 230 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary1899

printArgument$169:	; Parameter 52 £temporary1899 20
x6182:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6185:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 55 24
x6190:	mov [bp + 54], bp	; 3: 137 110 54
x6193:	add bp, 52	; 3: 131 197 52
x6196:	jmp printUnsignedLong	; 3: 233 214 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6199:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6202:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6206:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6208:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary1902 arg_list 8
x6212:	mov si, [bp + 8]	; 3: 139 118 8
x6215:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary1903 £temporary1902

printArgument$177:	; Deref £temporary1904 -> £temporary1903 £temporary1903 0

printArgument$178:	; PushFloat £temporary1904 -> £temporary1903
x6218:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6220:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6223:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6226:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6229:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6234:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6239:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6244:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6249:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 119 24
x6254:	mov [bp + 46], bp	; 3: 137 110 46
x6257:	add bp, 44	; 3: 131 197 44
x6260:	jmp printLongDoublePlain	; 3: 233 65 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6263:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6265:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary1907 arg_list 8
x6269:	mov si, [bp + 8]	; 3: 139 118 8
x6272:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary1908 £temporary1907

printArgument$193:	; Deref £temporary1909 -> £temporary1908 £temporary1908 0

printArgument$194:	; PushFloat £temporary1909 -> £temporary1908
x6275:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6277:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6280:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6284:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary1913 -> negativePtr negativePtr 0
x6286:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6289:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6292:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6294:	fcompp	; 2: 222 217
x6296:	fstsw ax	; 3: 155 223 224
x6299:	sahf	; 1: 158
x6300:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary1915 1
x6302:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6305:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary1915 0
x6307:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary1913 -> negativePtr £temporary1915
x6310:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6312:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6316:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6318:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6321:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6324:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 194 24
x6329:	mov [bp + 46], bp	; 3: 137 110 46
x6332:	add bp, 44	; 3: 131 197 44
x6335:	jmp fabs	; 3: 233 58 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary1918

printArgument$212:	; PopFloat longDoubleValue
x6338:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6341:	mov ax, [bp + 8]	; 3: 139 70 8
x6344:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6347:	mov ax, [bp + 16]	; 3: 139 70 16
x6350:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary1919 precision
x6353:	mov si, bp	; 2: 137 238
x6355:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary1919 10
x6358:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6361:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 231 24
x6366:	mov [bp + 46], bp	; 3: 137 110 46
x6369:	add bp, 44	; 3: 131 197 44
x6372:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary1920

printArgument$221:	; Assign arg_list £temporary1920
x6375:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6378:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6382:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6384:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6387:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6390:	mov ax, [bp + 10]	; 3: 139 70 10
x6393:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6396:	mov ax, [bp + 12]	; 3: 139 70 12
x6399:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6402:	mov ax, [bp + 14]	; 3: 139 70 14
x6405:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6408:	mov ax, [bp + 18]	; 3: 139 70 18
x6411:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6414:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 28 25
x6419:	mov [bp + 46], bp	; 3: 137 110 46
x6422:	add bp, 44	; 3: 131 197 44
x6425:	jmp printLongDoublePlain	; 3: 233 156 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6428:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary1923 c
x6431:	mov al, [bp + 30]	; 3: 138 70 30
x6434:	and ax, 255	; 3: 37 255 0
x6437:	cmp al, 0	; 2: 60 0
x6439:	jge printArgument$235	; 2: 125 4
x6441:	neg al	; 2: 246 216
x6443:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary1923 6
x6445:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6448:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 62 25
x6453:	mov [bp + 46], bp	; 3: 137 110 46
x6456:	add bp, 44	; 3: 131 197 44
x6459:	jmp tolower	; 3: 233 224 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary1924

printArgument$239:	; NotEqual 257 £temporary1924 101
x6462:	cmp bx, 101	; 3: 131 251 101
x6465:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6467:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6470:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6473:	mov ax, [bp + 10]	; 3: 139 70 10
x6476:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6479:	mov ax, [bp + 12]	; 3: 139 70 12
x6482:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6485:	mov ax, [bp + 14]	; 3: 139 70 14
x6488:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6491:	mov ax, [bp + 18]	; 3: 139 70 18
x6494:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary1926 c
x6497:	mov al, [bp + 30]	; 3: 138 70 30
x6500:	and ax, 255	; 3: 37 255 0
x6503:	cmp al, 0	; 2: 60 0
x6505:	jge printArgument$249	; 2: 125 4
x6507:	neg al	; 2: 246 216
x6509:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary1926 28
x6511:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6514:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 128 25
x6519:	mov [bp + 68], bp	; 3: 137 110 68
x6522:	add bp, 66	; 3: 131 197 66
x6525:	jmp isupper	; 3: 233 140 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary1927

printArgument$253:	; Parameter 44 £temporary1927 22
x6528:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6531:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 145 25
x6536:	mov [bp + 46], bp	; 3: 137 110 46
x6539:	add bp, 44	; 3: 131 197 44
x6542:	jmp printLongDoubleExpo	; 3: 233 46 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6545:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6548:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6551:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6554:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 168 25
x6559:	mov [bp + 46], bp	; 3: 137 110 46
x6562:	add bp, 44	; 3: 131 197 44
x6565:	jmp fabs	; 3: 233 84 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary1929

printArgument$264:	; Parameter 44 £temporary1929 6
x6568:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6571:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 185 25
x6576:	mov [bp + 46], bp	; 3: 137 110 46
x6579:	add bp, 44	; 3: 131 197 44
x6582:	jmp log10	; 3: 233 117 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary1930

printArgument$268:	; FloatingToIntegral £temporary1931 £temporary1930
x6585:	fistp word [container2bytes#]	; 4: 223 30 79 27
x6589:	mov ax, [container2bytes#]	; 3: 161 79 27

printArgument$269:	; Assign expo £temporary1931
x6592:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6595:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6599:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6601:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6605:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6607:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6610:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6613:	mov ax, [bp + 10]	; 3: 139 70 10
x6616:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6619:	mov ax, [bp + 12]	; 3: 139 70 12
x6622:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6625:	mov ax, [bp + 14]	; 3: 139 70 14
x6628:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6631:	mov ax, [bp + 18]	; 3: 139 70 18
x6634:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6637:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 251 25
x6642:	mov [bp + 48], bp	; 3: 137 110 48
x6645:	add bp, 46	; 3: 131 197 46
x6648:	jmp printLongDoublePlain	; 3: 233 189 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6651:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6654:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6657:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6660:	mov ax, [bp + 10]	; 3: 139 70 10
x6663:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6666:	mov ax, [bp + 12]	; 3: 139 70 12
x6669:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6672:	mov ax, [bp + 14]	; 3: 139 70 14
x6675:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6678:	mov ax, [bp + 18]	; 3: 139 70 18
x6681:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary1936 c
x6684:	mov al, [bp + 30]	; 3: 138 70 30
x6687:	and ax, 255	; 3: 37 255 0
x6690:	cmp al, 0	; 2: 60 0
x6692:	jge printArgument$291	; 2: 125 4
x6694:	neg al	; 2: 246 216
x6696:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary1936 28
x6698:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6701:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 59 26
x6706:	mov [bp + 70], bp	; 3: 137 110 70
x6709:	add bp, 68	; 3: 131 197 68
x6712:	jmp isupper	; 3: 233 209 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary1937

printArgument$295:	; Parameter 46 £temporary1937 22
x6715:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6718:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 76 26
x6723:	mov [bp + 48], bp	; 3: 137 110 48
x6726:	add bp, 46	; 3: 131 197 46
x6729:	jmp printLongDoubleExpo	; 3: 233 115 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6732:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6735:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary1940 arg_list 2
x6739:	mov si, [bp + 8]	; 3: 139 118 8
x6742:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary1941 £temporary1940

printArgument$302:	; Deref £temporary1942 -> £temporary1941 £temporary1941 0

printArgument$303:	; Assign ptrValue £temporary1942 -> £temporary1941
x6745:	mov ax, [si]	; 2: 139 4
x6747:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6750:	mov ax, [bp + 8]	; 3: 139 70 8
x6753:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6756:	mov ax, [bp + 16]	; 3: 139 70 16
x6759:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary1943 precision
x6762:	mov si, bp	; 2: 137 238
x6764:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary1943 10
x6767:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6770:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 128 26
x6775:	mov [bp + 46], bp	; 3: 137 110 46
x6778:	add bp, 44	; 3: 131 197 44
x6781:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary1944

printArgument$312:	; Assign arg_list £temporary1944
x6784:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary1945 ptrValue
x6787:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary1946 £temporary1945
x6790:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary1946 6
x6796:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6800:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6805:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6810:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6815:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6823:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6828:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 186 26
x6833:	mov [bp + 46], bp	; 3: 137 110 46
x6836:	add bp, 44	; 3: 131 197 44
x6839:	jmp printUnsignedLong	; 3: 233 83 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6842:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6845:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary1949 arg_list 2
x6849:	mov si, [bp + 8]	; 3: 139 118 8
x6852:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary1950 £temporary1949

printArgument$328:	; Deref £temporary1951 -> £temporary1950 £temporary1950 0

printArgument$329:	; Assign ptrValue £temporary1951 -> £temporary1950
x6855:	mov ax, [si]	; 2: 139 4
x6857:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6860:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary1953 arg_list 2
x6864:	mov si, [bp + 8]	; 3: 139 118 8
x6867:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary1954 £temporary1953

printArgument$333:	; Deref £temporary1955 -> £temporary1954 £temporary1954 0

printArgument$334:	; Assign intPtr £temporary1955 -> £temporary1954
x6870:	mov ax, [si]	; 2: 139 4
x6872:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6875:	mov ax, [bp + 8]	; 3: 139 70 8
x6878:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6881:	mov ax, [bp + 16]	; 3: 139 70 16
x6884:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary1956 precision
x6887:	mov si, bp	; 2: 137 238
x6889:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary1956 10
x6892:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6895:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 253 26
x6900:	mov [bp + 46], bp	; 3: 137 110 46
x6903:	add bp, 44	; 3: 131 197 44
x6906:	nop	; 1: 144
x6907:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary1957

printArgument$343:	; Assign arg_list £temporary1957
x6909:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary1958 -> intPtr intPtr 0
x6912:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary1958 -> intPtr g_outChars
x6915:	mov ax, [g_outChars]	; 3: 161 57 21
x6918:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6920:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6922:	mov ax, [bp + 8]	; 3: 139 70 8
x6925:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6928:	mov ax, [bp + 16]	; 3: 139 70 16
x6931:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary1959 precision
x6934:	mov si, bp	; 2: 137 238
x6936:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary1959 10
x6939:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6942:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 44 27
x6947:	mov [bp + 46], bp	; 3: 137 110 46
x6950:	add bp, 44	; 3: 131 197 44
x6953:	nop	; 1: 144
x6954:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary1960

printArgument$355:	; Assign arg_list £temporary1960
x6956:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6959:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6963:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 65 27
x6968:	mov [bp + 46], bp	; 3: 137 110 46
x6971:	add bp, 44	; 3: 131 197 44
x6974:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6977:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6980:	mov ax, [bp]	; 3: 139 70 0
x6983:	mov di, [bp + 4]	; 3: 139 126 4
x6986:	mov bp, [bp + 2]	; 3: 139 110 2
x6989:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6991:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6993:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6998:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3208 value
x7000:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x7004:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3212 £temporary3208

labs$3:	; Goto 5
x7007:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3212 value
x7009:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3212

labs$6:	; Return £temporary3212
x7013:	mov ax, [bp]	; 3: 139 70 0
x7016:	mov di, [bp + 4]	; 3: 139 126 4
x7019:	mov bp, [bp + 2]	; 3: 139 110 2
x7022:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x7024:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7028:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1804 -> widthPtr widthPtr 0
x7030:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1804 -> widthPtr -1
x7033:	cmp word [si], -1	; 3: 131 60 255
x7036:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1807 -> widthPtr widthPtr 0
x7038:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x7041:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1809 arg_list 2
x7045:	mov di, [bp + 6]	; 3: 139 126 6
x7048:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1810 £temporary1809

checkWidthAndPrecision$7:	; Deref £temporary1811 -> £temporary1810 £temporary1810 0

checkWidthAndPrecision$8:	; Assign £temporary1807 -> widthPtr £temporary1811 -> £temporary1810
x7051:	mov ax, [di]	; 2: 139 5
x7053:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x7055:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7059:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary1813 -> precisionPtr precisionPtr 0
x7061:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1813 -> precisionPtr -1
x7064:	cmp word [si], -1	; 3: 131 60 255
x7067:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary1816 -> precisionPtr precisionPtr 0
x7069:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7072:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary1818 arg_list 2
x7076:	mov di, [bp + 6]	; 3: 139 126 6
x7079:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1819 £temporary1818

checkWidthAndPrecision$16:	; Deref £temporary1820 -> £temporary1819 £temporary1819 0

checkWidthAndPrecision$17:	; Assign £temporary1816 -> precisionPtr £temporary1820 -> £temporary1819
x7082:	mov ax, [di]	; 2: 139 5
x7084:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7086:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7089:	mov ax, [bp]	; 3: 139 70 0
x7092:	mov di, [bp + 4]	; 3: 139 126 4
x7095:	mov bp, [bp + 2]	; 3: 139 110 2
x7098:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7100:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7105:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1659 longValue
x7107:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7111:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1659
x7114:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7118:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7122:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 224 27
x7127:	mov [bp + 16], bp	; 3: 137 110 16
x7130:	add bp, 14	; 3: 131 197 14
x7133:	nop	; 1: 144
x7134:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7136:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7138:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7142:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7144:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7148:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 250 27
x7153:	mov [bp + 16], bp	; 3: 137 110 16
x7156:	add bp, 14	; 3: 131 197 14
x7159:	nop	; 1: 144
x7160:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7162:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7164:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7168:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7170:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7174:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 20 28
x7179:	mov [bp + 16], bp	; 3: 137 110 16
x7182:	add bp, 14	; 3: 131 197 14
x7185:	nop	; 1: 144
x7186:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7188:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7193:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7195:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7199:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 45 28
x7204:	mov [bp + 16], bp	; 3: 137 110 16
x7207:	add bp, 14	; 3: 131 197 14
x7210:	nop	; 1: 144
x7211:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7213:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7215:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7219:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7223:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 69 28
x7228:	mov [bp + 16], bp	; 3: 137 110 16
x7231:	add bp, 14	; 3: 131 197 14
x7234:	nop	; 1: 144
x7235:	jmp printLongIntRec	; 2: 235 101

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7237:	mov ax, [bp]	; 3: 139 70 0
x7240:	mov di, [bp + 4]	; 3: 139 126 4
x7243:	mov bp, [bp + 2]	; 3: 139 110 2
x7246:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7248:	mov ax, [g_outStatus]	; 3: 161 219 15
x7251:	cmp ax, 0	; 3: 131 248 0
x7254:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7256:	cmp ax, 1	; 3: 131 248 1
x7259:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7261:	cmp ax, 2	; 3: 131 248 2
x7264:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 25
x7266:	jmp printChar$25	; 2: 235 59

printChar$5:	; IntegralToIntegral £temporary1601 g_outDevice
x7268:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$6:	; Assign stream £temporary1601
x7271:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7274:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1604 -> stream stream 2
x7276:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1604 -> stream
x7279:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7282:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1607 c
x7285:	mov dx, bp	; 2: 137 234
x7287:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1607

printChar$13:	; Interrupt 33
x7290:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7292:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$15:	; Goto 25
x7296:	jmp printChar$25	; 2: 235 29

printChar$16:	; IntegralToIntegral £temporary1609 g_outDevice
x7298:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$17:	; Assign outString £temporary1609
x7301:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1610 g_outChars
x7304:	mov ax, [g_outChars]	; 3: 161 57 21

printChar$19:	; Increment g_outChars
x7307:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$20:	; BinaryAdd £temporary1612 outString £temporary1610
x7311:	mov si, [bp + 9]	; 3: 139 118 9
x7314:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1611 -> £temporary1612 £temporary1612 0

printChar$22:	; Assign £temporary1611 -> £temporary1612 c
x7316:	mov al, [bp + 6]	; 3: 138 70 6
x7319:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 25
x7321:	jmp printChar$25	; 2: 235 4

printChar$24:	; Increment g_outChars
x7323:	inc word [g_outChars]	; 4: 255 6 57 21

printChar$25:	; Return 0
x7327:	mov ax, [bp]	; 3: 139 70 0
x7330:	mov di, [bp + 4]	; 3: 139 126 4
x7333:	mov bp, [bp + 2]	; 3: 139 110 2
x7336:	jmp ax	; 2: 255 224

printChar$26:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7338:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7343:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1649 longValue 10
x7345:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7349:	xor edx, edx	; 3: 102 49 210
x7352:	idiv dword [@3712$int4$10#]	; 5: 102 247 62 20 29

printLongIntRec$2:	; IntegralToIntegral £temporary1650 £temporary1649
x7357:	cmp edx, 0	; 4: 102 131 250 0
x7361:	jge printLongIntRec$3	; 2: 125 5
x7363:	neg edx	; 3: 102 247 218
x7366:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1650
x7368:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1651 longValue 10
x7371:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7375:	xor edx, edx	; 3: 102 49 210
x7378:	idiv dword [@3717$int4$10#]	; 5: 102 247 62 24 29

printLongIntRec$6:	; Parameter 12 £temporary1651 6
x7383:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7387:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 233 28
x7392:	mov [bp + 14], bp	; 3: 137 110 14
x7395:	add bp, 12	; 3: 131 197 12
x7398:	nop	; 1: 144
x7399:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1653 digit 48
x7401:	mov ax, [bp + 10]	; 3: 139 70 10
x7404:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1654 £temporary1653
x7407:	cmp ax, 0	; 3: 131 248 0
x7410:	jge printLongIntRec$12	; 2: 125 4
x7412:	neg ax	; 2: 247 216
x7414:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1654 6
x7416:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7419:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 9 29
x7424:	mov [bp + 14], bp	; 3: 137 110 14
x7427:	add bp, 12	; 3: 131 197 12
x7430:	jmp printChar	; 3: 233 71 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7433:	mov ax, [bp]	; 3: 139 70 0
x7436:	mov di, [bp + 4]	; 3: 139 126 4
x7439:	mov bp, [bp + 2]	; 3: 139 110 2
x7442:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

@3712$int4$10#:
x7444:	dd 10	; 4: 10 0 0 0

@3717$int4$10#:
x7448:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7452:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7456:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7458:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7462:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7464:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1618 s index
x7469:	mov si, [bp + 6]	; 3: 139 118 6
x7472:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1617 -> £temporary1618 £temporary1618 0

printString$5:	; Equal 53 £temporary1617 -> £temporary1618 0
x7475:	cmp byte [si], 0	; 3: 128 60 0
x7478:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1622 s index
x7482:	mov si, [bp + 6]	; 3: 139 118 6
x7485:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1621 -> £temporary1622 £temporary1622 0

printString$9:	; Parameter 12 £temporary1621 -> £temporary1622 6
x7488:	mov al, [si]	; 2: 138 4
x7490:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7493:	mov word [bp + 12], printString$11	; 5: 199 70 12 83 29
x7498:	mov [bp + 14], bp	; 3: 137 110 14
x7501:	add bp, 12	; 3: 131 197 12
x7504:	jmp printChar	; 3: 233 253 254

printString$11:	; PostCall 12

printString$12:	; Increment index
x7507:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7510:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7512:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1624 precision
x7517:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7520:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1624 0
x7523:	cmp ax, 0	; 3: 131 248 0
x7526:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1627 s index
x7530:	mov si, [bp + 6]	; 3: 139 118 6
x7533:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1626 -> £temporary1627 £temporary1627 0

printString$20:	; Equal 53 £temporary1626 -> £temporary1627 0
x7536:	cmp byte [si], 0	; 3: 128 60 0
x7539:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1632 s index
x7543:	mov si, [bp + 6]	; 3: 139 118 6
x7546:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1631 -> £temporary1632 £temporary1632 0

printString$24:	; Parameter 12 £temporary1631 -> £temporary1632 6
x7549:	mov al, [si]	; 2: 138 4
x7551:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7554:	mov word [bp + 12], printString$26	; 5: 199 70 12 144 29
x7559:	mov [bp + 14], bp	; 3: 137 110 14
x7562:	add bp, 12	; 3: 131 197 12
x7565:	jmp printChar	; 3: 233 192 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7568:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7571:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7573:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7577:	mov word [bp + 10], printString$32	; 5: 199 70 10 167 29
x7582:	mov [bp + 12], bp	; 3: 137 110 12
x7585:	add bp, 10	; 3: 131 197 10
x7588:	jmp printChar	; 3: 233 169 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7591:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7595:	mov word [bp + 10], printString$36	; 5: 199 70 10 185 29
x7600:	mov [bp + 12], bp	; 3: 137 110 12
x7603:	add bp, 10	; 3: 131 197 10
x7606:	jmp printChar	; 3: 233 151 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7609:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7613:	mov word [bp + 10], printString$40	; 5: 199 70 10 203 29
x7618:	mov [bp + 12], bp	; 3: 137 110 12
x7621:	add bp, 10	; 3: 131 197 10
x7624:	jmp printChar	; 3: 233 133 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7627:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7631:	mov word [bp + 10], printString$44	; 5: 199 70 10 221 29
x7636:	mov [bp + 12], bp	; 3: 137 110 12
x7639:	add bp, 10	; 3: 131 197 10
x7642:	jmp printChar	; 3: 233 115 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7645:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7649:	mov word [bp + 10], printString$48	; 5: 199 70 10 239 29
x7654:	mov [bp + 12], bp	; 3: 137 110 12
x7657:	add bp, 10	; 3: 131 197 10
x7660:	jmp printChar	; 3: 233 97 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7663:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7667:	mov word [bp + 10], printString$52	; 5: 199 70 10 1 30
x7672:	mov [bp + 12], bp	; 3: 137 110 12
x7675:	add bp, 10	; 3: 131 197 10
x7678:	jmp printChar	; 3: 233 79 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7681:	mov ax, [bp]	; 3: 139 70 0
x7684:	mov di, [bp + 4]	; 3: 139 126 4
x7687:	mov bp, [bp + 2]	; 3: 139 110 2
x7690:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7692:	mov word [bp + 8], isupper$2	; 5: 199 70 8 26 30
x7697:	mov [bp + 10], bp	; 3: 137 110 10
x7700:	add bp, 8	; 3: 131 197 8
x7703:	nop	; 1: 144
x7704:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary170

isupper$4:	; Assign localeConvPtr £temporary170
x7706:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7709:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7713:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary172 -> localeConvPtr localeConvPtr 14
x7715:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary172 -> localeConvPtr 6
x7718:	mov ax, [si + 14]	; 3: 139 68 14
x7721:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7724:	mov ax, [bp + 6]	; 3: 139 70 6
x7727:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7730:	mov word [bp + 10], isupper$11	; 5: 199 70 10 64 30
x7735:	mov [bp + 12], bp	; 3: 137 110 12
x7738:	add bp, 10	; 3: 131 197 10
x7741:	jmp strchr	; 3: 233 125 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary173

isupper$13:	; Equal 16 £temporary173 0
x7744:	cmp bx, 0	; 3: 131 251 0
x7747:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary175 1
x7749:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7752:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary175 0
x7754:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary175

isupper$18:	; Return £temporary175
x7757:	mov ax, [bp]	; 3: 139 70 0
x7760:	mov di, [bp + 4]	; 3: 139 126 4
x7763:	mov bp, [bp + 2]	; 3: 139 110 2
x7766:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7768:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7772:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7774:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7778:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary179 1
x7780:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7783:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary179 0
x7785:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary179

isupper$25:	; Return £temporary179
x7788:	mov ax, [bp]	; 3: 139 70 0
x7791:	mov di, [bp + 4]	; 3: 139 126 4
x7794:	mov bp, [bp + 2]	; 3: 139 110 2
x7797:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7799:	cmp word [@763$g_currStructPtr], 0	; 5: 131 62 149 30 0
x7804:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary303 -> g_currStructPtr g_currStructPtr 2
x7806:	mov si, [@763$g_currStructPtr]	; 4: 139 54 149 30

localeconv$2:	; Assign £temporary307 £temporary303 -> g_currStructPtr
x7810:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7813:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary307 0
x7815:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary307

localeconv$6:	; Return £temporary307
x7818:	mov ax, [bp]	; 3: 139 70 0
x7821:	mov di, [bp + 4]	; 3: 139 126 4
x7824:	mov bp, [bp + 2]	; 3: 139 110 2
x7827:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@763$g_currStructPtr:
x7829:	dw @754$g_sArray	; 2: 151 30

@754$g_sArray:
x7831:	dw @748$string_# ; 2: 163 30
x7833:	dw @743$en_US_utf8	; 2: 164 30
x7835:	dw @750$string_C# ; 2: 184 33
x7837:	dw @743$en_US_utf8	; 2: 164 30
x7839:	dw @752$string_US# ; 2: 186 33
x7841:	dw @743$en_US_utf8	; 2: 164 30

@748$string_#:
x7843:	db 0	; 1: 0

@743$en_US_utf8:
x7844:	dw 1	; 2: 1 0
x7846:	dw 1	; 2: 1 0
x7848:	dw @684$enShortDayList ; 2: 182 30
x7850:	dw @692$enLongDayList ; 2: 224 30
x7852:	dw @705$enShortMonthList ; 2: 39 31
x7854:	dw @718$enLongMonthList ; 2: 111 31
x7856:	dw @741$string_abcdefghijklmnopqrstuvwxyz# ; 2: 221 31
x7858:	dw @742$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 248 31
x7860:	dw enMessageList ; 2: 19 32

@684$enShortDayList:
x7862:	dw @677$string_Sun# ; 2: 196 30
x7864:	dw @678$string_Mon# ; 2: 200 30
x7866:	dw @679$string_Tue# ; 2: 204 30
x7868:	dw @680$string_Wed# ; 2: 208 30
x7870:	dw @681$string_Thu# ; 2: 212 30
x7872:	dw @682$string_Fri# ; 2: 216 30
x7874:	dw @683$string_Sat# ; 2: 220 30

@677$string_Sun#:
x7876:	db "Sun", 0	; 4: 83 117 110 0

@678$string_Mon#:
x7880:	db "Mon", 0	; 4: 77 111 110 0

@679$string_Tue#:
x7884:	db "Tue", 0	; 4: 84 117 101 0

@680$string_Wed#:
x7888:	db "Wed", 0	; 4: 87 101 100 0

@681$string_Thu#:
x7892:	db "Thu", 0	; 4: 84 104 117 0

@682$string_Fri#:
x7896:	db "Fri", 0	; 4: 70 114 105 0

@683$string_Sat#:
x7900:	db "Sat", 0	; 4: 83 97 116 0

@692$enLongDayList:
x7904:	dw @685$string_Sunday# ; 2: 238 30
x7906:	dw @686$string_Monday# ; 2: 245 30
x7908:	dw @687$string_Tuesday# ; 2: 252 30
x7910:	dw @688$string_Wednesday# ; 2: 4 31
x7912:	dw @689$string_Thursday# ; 2: 14 31
x7914:	dw @690$string_Friday# ; 2: 23 31
x7916:	dw @691$string_Saturday# ; 2: 30 31

@685$string_Sunday#:
x7918:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@686$string_Monday#:
x7925:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@687$string_Tuesday#:
x7932:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@688$string_Wednesday#:
x7940:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@689$string_Thursday#:
x7950:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@690$string_Friday#:
x7959:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@691$string_Saturday#:
x7966:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@705$enShortMonthList:
x7975:	dw @693$string_Jan# ; 2: 63 31
x7977:	dw @694$string_Feb# ; 2: 67 31
x7979:	dw @695$string_Mar# ; 2: 71 31
x7981:	dw @696$string_Apr# ; 2: 75 31
x7983:	dw @697$string_May# ; 2: 79 31
x7985:	dw @698$string_Jun# ; 2: 83 31
x7987:	dw @699$string_Jul# ; 2: 87 31
x7989:	dw @700$string_Aug# ; 2: 91 31
x7991:	dw @701$string_Sep# ; 2: 95 31
x7993:	dw @702$string_Oct# ; 2: 99 31
x7995:	dw @703$string_Nov# ; 2: 103 31
x7997:	dw @704$string_Dec# ; 2: 107 31

@693$string_Jan#:
x7999:	db "Jan", 0	; 4: 74 97 110 0

@694$string_Feb#:
x8003:	db "Feb", 0	; 4: 70 101 98 0

@695$string_Mar#:
x8007:	db "Mar", 0	; 4: 77 97 114 0

@696$string_Apr#:
x8011:	db "Apr", 0	; 4: 65 112 114 0

@697$string_May#:
x8015:	db "May", 0	; 4: 77 97 121 0

@698$string_Jun#:
x8019:	db "Jun", 0	; 4: 74 117 110 0

@699$string_Jul#:
x8023:	db "Jul", 0	; 4: 74 117 108 0

@700$string_Aug#:
x8027:	db "Aug", 0	; 4: 65 117 103 0

@701$string_Sep#:
x8031:	db "Sep", 0	; 4: 83 101 112 0

@702$string_Oct#:
x8035:	db "Oct", 0	; 4: 79 99 116 0

@703$string_Nov#:
x8039:	db "Nov", 0	; 4: 78 111 118 0

@704$string_Dec#:
x8043:	db "Dec", 0	; 4: 68 101 99 0

@718$enLongMonthList:
x8047:	dw @706$string_January# ; 2: 135 31
x8049:	dw @707$string_February# ; 2: 143 31
x8051:	dw @708$string_March# ; 2: 152 31
x8053:	dw @709$string_April# ; 2: 158 31
x8055:	dw @710$string_May# ; 2: 164 31
x8057:	dw @711$string_June# ; 2: 168 31
x8059:	dw @712$string_July# ; 2: 173 31
x8061:	dw @713$string_August# ; 2: 178 31
x8063:	dw @714$string_September# ; 2: 185 31
x8065:	dw @715$string_October# ; 2: 195 31
x8067:	dw @716$string_November# ; 2: 203 31
x8069:	dw @717$string_December# ; 2: 212 31

@706$string_January#:
x8071:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@707$string_February#:
x8079:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@708$string_March#:
x8088:	db "March", 0	; 6: 77 97 114 99 104 0

@709$string_April#:
x8094:	db "April", 0	; 6: 65 112 114 105 108 0

@710$string_May#:
x8100:	db "May", 0	; 4: 77 97 121 0

@711$string_June#:
x8104:	db "June", 0	; 5: 74 117 110 101 0

@712$string_July#:
x8109:	db "July", 0	; 5: 74 117 108 121 0

@713$string_August#:
x8114:	db "August", 0	; 7: 65 117 103 117 115 116 0

@714$string_September#:
x8121:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@715$string_October#:
x8131:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@716$string_November#:
x8139:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@717$string_December#:
x8148:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@741$string_abcdefghijklmnopqrstuvwxyz#:
x8157:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

@742$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8184:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8211:	dw @719$string_no20error# ; 2: 59 32
x8213:	dw @720$string_function20number20invalid# ; 2: 68 32
x8215:	dw @721$string_file20not20found# ; 2: 92 32
x8217:	dw @722$string_path20not20found# ; 2: 107 32
x8219:	dw @723$string_no20handle20available# ; 2: 122 32
x8221:	dw @724$string_access20denied# ; 2: 142 32
x8223:	dw @725$string_out20of20domain# ; 2: 156 32
x8225:	dw @726$string_out20of20range# ; 2: 170 32
x8227:	dw @727$string_invalid20multibyte20sequence# ; 2: 183 32
x8229:	dw @728$string_error20while20opening# ; 2: 210 32
x8231:	dw @729$string_error20while20flushing# ; 2: 230 32
x8233:	dw @730$string_error20while20closing# ; 2: 251 32
x8235:	dw @731$string_open20mode20invalid# ; 2: 15 33
x8237:	dw @732$string_error20while20writing# ; 2: 33 33
x8239:	dw @733$string_error20while20reading# ; 2: 53 33
x8241:	dw @734$string_error20while20seeking# ; 2: 73 33
x8243:	dw @735$string_error20while20telling# ; 2: 93 33
x8245:	dw @736$string_error20while20sizing# ; 2: 113 33
x8247:	dw @737$string_error20while20removing20file# ; 2: 132 33
x8249:	dw @738$string_error20while20renaming20file# ; 2: 158 33

@719$string_no20error#:
x8251:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

@720$string_function20number20invalid#:
x8260:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

@721$string_file20not20found#:
x8284:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

@722$string_path20not20found#:
x8299:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

@723$string_no20handle20available#:
x8314:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

@724$string_access20denied#:
x8334:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

@725$string_out20of20domain#:
x8348:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

@726$string_out20of20range#:
x8362:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

@727$string_invalid20multibyte20sequence#:
x8375:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

@728$string_error20while20opening#:
x8402:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

@729$string_error20while20flushing#:
x8422:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

@730$string_error20while20closing#:
x8443:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

@731$string_open20mode20invalid#:
x8463:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

@732$string_error20while20writing#:
x8481:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

@733$string_error20while20reading#:
x8501:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

@734$string_error20while20seeking#:
x8521:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

@735$string_error20while20telling#:
x8541:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

@736$string_error20while20sizing#:
x8561:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

@737$string_error20while20removing20file#:
x8580:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

@738$string_error20while20renaming20file#:
x8606:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

@750$string_C#:
x8632:	db "C", 0	; 2: 67 0

@752$string_US#:
x8634:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary3810 i
x8637:	mov ax, [bp + 8]	; 3: 139 70 8
x8640:	cmp ax, 0	; 3: 131 248 0
x8643:	jge strchr$1	; 2: 125 4
x8645:	neg ax	; 2: 247 216
x8647:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary3810
x8649:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8652:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary3812 text index
x8657:	mov si, [bp + 6]	; 3: 139 118 6
x8660:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary3811 -> £temporary3812 £temporary3812 0

strchr$5:	; Equal 16 £temporary3811 -> £temporary3812 0
x8663:	cmp byte [si], 0	; 3: 128 60 0
x8666:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary3816 text index
x8668:	mov si, [bp + 6]	; 3: 139 118 6
x8671:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary3815 -> £temporary3816 £temporary3816 0

strchr$8:	; NotEqual 14 £temporary3815 -> £temporary3816 c
x8674:	mov al, [bp + 12]	; 3: 138 70 12
x8677:	cmp [si], al	; 2: 56 4
x8679:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary3819 text index
x8681:	mov bx, [bp + 6]	; 3: 139 94 6
x8684:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary3818 -> £temporary3819 £temporary3819 0

strchr$11:	; address £temporary3820 £temporary3818 -> £temporary3819

strchr$12:	; SetReturnValue £temporary3820

strchr$13:	; Return £temporary3820
x8687:	mov ax, [bp]	; 3: 139 70 0
x8690:	mov di, [bp + 4]	; 3: 139 126 4
x8693:	mov bp, [bp + 2]	; 3: 139 110 2
x8696:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8698:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8701:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8703:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8706:	mov ax, [bp]	; 3: 139 70 0
x8709:	mov di, [bp + 4]	; 3: 139 126 4
x8712:	mov bp, [bp + 2]	; 3: 139 110 2
x8715:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8717:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8721:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8723:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8727:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 37 34
x8732:	mov [bp + 24], bp	; 3: 137 110 24
x8735:	add bp, 22	; 3: 131 197 22
x8738:	jmp printChar	; 3: 233 43 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8741:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8745:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8747:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8751:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 61 34
x8756:	mov [bp + 24], bp	; 3: 137 110 24
x8759:	add bp, 22	; 3: 131 197 22
x8762:	jmp printChar	; 3: 233 19 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8765:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8769:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8771:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8776:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8778:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8782:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 92 34
x8787:	mov [bp + 24], bp	; 3: 137 110 24
x8790:	add bp, 22	; 3: 131 197 22
x8793:	jmp printChar	; 3: 233 244 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8796:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8801:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8803:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8807:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 117 34
x8812:	mov [bp + 24], bp	; 3: 137 110 24
x8815:	add bp, 22	; 3: 131 197 22
x8818:	jmp printChar	; 3: 233 219 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8821:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8825:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1708 88
x8827:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8829:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1708 120
x8831:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1708 6
x8833:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8836:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 146 34
x8841:	mov [bp + 24], bp	; 3: 137 110 24
x8844:	add bp, 22	; 3: 131 197 22
x8847:	jmp printChar	; 3: 233 190 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8850:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8855:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8857:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8861:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 171 34
x8866:	mov [bp + 24], bp	; 3: 137 110 24
x8869:	add bp, 22	; 3: 131 197 22
x8872:	jmp printChar	; 3: 233 165 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8875:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8877:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8881:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8885:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8889:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8893:	mov ax, [bp + 20]	; 3: 139 70 20
x8896:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8899:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 209 34
x8904:	mov [bp + 24], bp	; 3: 137 110 24
x8907:	add bp, 22	; 3: 131 197 22
x8910:	nop	; 1: 144
x8911:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8913:	mov ax, [bp]	; 3: 139 70 0
x8916:	mov di, [bp + 4]	; 3: 139 126 4
x8919:	mov bp, [bp + 2]	; 3: 139 110 2
x8922:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8924:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8929:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1684 unsignedValue base
x8931:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8935:	xor edx, edx	; 3: 102 49 210
x8938:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1685 £temporary1684

printUnsignedLongRec$3:	; Assign digit £temporary1685
x8942:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1686 unsignedValue base
x8945:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8949:	xor edx, edx	; 3: 102 49 210
x8952:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1686 6
x8956:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8960:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8964:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8968:	mov ax, [bp + 14]	; 3: 139 70 14
x8971:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8974:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 28 35
x8979:	mov [bp + 20], bp	; 3: 137 110 20
x8982:	add bp, 18	; 3: 131 197 18
x8985:	nop	; 1: 144
x8986:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8988:	mov ax, [bp + 16]	; 3: 139 70 16
x8991:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8994:	mov ax, [bp + 14]	; 3: 139 70 14
x8997:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x9000:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 54 35
x9005:	mov [bp + 20], bp	; 3: 137 110 20
x9008:	add bp, 18	; 3: 131 197 18
x9011:	nop	; 1: 144
x9012:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1688

printUnsignedLongRec$17:	; Assign c £temporary1688
x9014:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x9017:	mov al, [bp + 18]	; 3: 138 70 18
x9020:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x9023:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 77 35
x9028:	mov [bp + 21], bp	; 3: 137 110 21
x9031:	add bp, 19	; 3: 131 197 19
x9034:	jmp printChar	; 3: 233 3 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x9037:	mov ax, [bp]	; 3: 139 70 0
x9040:	mov di, [bp + 4]	; 3: 139 126 4
x9043:	mov bp, [bp + 2]	; 3: 139 110 2
x9046:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x9048:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x9052:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1674 digit 48
x9054:	mov bx, [bp + 6]	; 3: 139 94 6
x9057:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1675 £temporary1674
x9060:	cmp bx, 0	; 3: 131 251 0
x9063:	jge digitToChar$3	; 2: 125 4
x9065:	neg bx	; 2: 247 219
x9067:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1675

digitToChar$4:	; Return £temporary1675
x9069:	mov ax, [bp]	; 3: 139 70 0
x9072:	mov di, [bp + 4]	; 3: 139 126 4
x9075:	mov bp, [bp + 2]	; 3: 139 110 2
x9078:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9080:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9084:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1676 digit 10
x9086:	mov bx, [bp + 6]	; 3: 139 94 6
x9089:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1677 £temporary1676 65
x9092:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1678 £temporary1677
x9095:	cmp bx, 0	; 3: 131 251 0
x9098:	jge digitToChar$9	; 2: 125 4
x9100:	neg bx	; 2: 247 219
x9102:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1678

digitToChar$10:	; Return £temporary1678
x9104:	mov ax, [bp]	; 3: 139 70 0
x9107:	mov di, [bp + 4]	; 3: 139 126 4
x9110:	mov bp, [bp + 2]	; 3: 139 110 2
x9113:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1679 digit 10
x9115:	mov bx, [bp + 6]	; 3: 139 94 6
x9118:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1680 £temporary1679 97
x9121:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1681 £temporary1680
x9124:	cmp bx, 0	; 3: 131 251 0
x9127:	jge digitToChar$14	; 2: 125 4
x9129:	neg bx	; 2: 247 219
x9131:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1681

digitToChar$15:	; Return £temporary1681
x9133:	mov ax, [bp]	; 3: 139 70 0
x9136:	mov di, [bp + 4]	; 3: 139 126 4
x9139:	mov bp, [bp + 2]	; 3: 139 110 2
x9142:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9144:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9147:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9149:	fcompp	; 2: 222 217
x9151:	fstsw ax	; 3: 155 223 224
x9154:	sahf	; 1: 158
x9155:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9157:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9161:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 215 35
x9166:	mov [bp + 24], bp	; 3: 137 110 24
x9169:	add bp, 22	; 3: 131 197 22
x9172:	jmp printChar	; 3: 233 121 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9175:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1744 longDoubleValue
x9178:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9180:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9183:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9188:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9193:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1745 longDoubleValue
x9196:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x9200:	mov eax, [container4bytes#]	; 4: 102 161 80 36

printLongDoublePlain$14:	; Assign longValue £temporary1745
x9204:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9208:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9212:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9216:	mov ax, [bp + 14]	; 3: 139 70 14
x9219:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9222:	mov ax, [bp + 16]	; 3: 139 70 16
x9225:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9228:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 26 36
x9233:	mov [bp + 28], bp	; 3: 137 110 28
x9236:	add bp, 26	; 3: 131 197 26
x9239:	jmp printLongInt	; 3: 233 162 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9242:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1747 longValue
x9245:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1748 longDoubleValue £temporary1747
x9248:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9250:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9253:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9256:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9259:	mov ax, [bp + 18]	; 3: 139 70 18
x9262:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9265:	mov ax, [bp + 20]	; 3: 139 70 20
x9268:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9271:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 69 36
x9276:	mov [bp + 28], bp	; 3: 137 110 28
x9279:	add bp, 26	; 3: 131 197 26
x9282:	nop	; 1: 144
x9283:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9285:	mov ax, [bp]	; 3: 139 70 0
x9288:	mov di, [bp + 4]	; 3: 139 126 4
x9291:	mov bp, [bp + 2]	; 3: 139 110 2
x9294:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9296:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9300:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9303:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1723 longDoubleValue
x9306:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x9310:	mov eax, [container4bytes#]	; 4: 102 161 80 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1724 £temporary1723
x9314:	mov [container4bytes#], eax	; 4: 102 163 80 36
x9318:	fild dword [container4bytes#]	; 4: 219 6 80 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1725 longDoubleValue £temporary1724
x9322:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9324:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9327:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9331:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9333:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9338:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9342:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9344:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9348:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9350:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9354:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 152 36
x9359:	mov [bp + 20], bp	; 3: 137 110 20
x9362:	add bp, 18	; 3: 131 197 18
x9365:	jmp printChar	; 3: 233 184 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1731 precision
x9368:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9371:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1731 0
x9374:	cmp ax, 0	; 3: 131 248 0
x9377:	jle printLongDoubleFraction$35	; 2: 126 70

printLongDoubleFraction$17:	; PushFloat 10.0
x9379:	fld qword [@3876$float8$10.0#]	; 4: 221 6 244 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9383:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1733 10.0 longDoubleValue
x9386:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
x9388:	fstp qword [bp + 18]	; 3: 221 94 18

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
x9391:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1734 longDoubleValue10
x9394:	fistp word [container2bytes#]	; 4: 223 30 79 27
x9398:	mov ax, [container2bytes#]	; 3: 161 79 27

printLongDoubleFraction$23:	; Assign digitValue £temporary1734
x9401:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$25:	; BinaryAdd £temporary1735 digitValue 48
x9404:	mov ax, [bp + 26]	; 3: 139 70 26
x9407:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1736 £temporary1735
x9410:	cmp ax, 0	; 3: 131 248 0
x9413:	jge printLongDoubleFraction$27	; 2: 125 4
x9415:	neg ax	; 2: 247 216
x9417:	neg al	; 2: 246 216

printLongDoubleFraction$27:	; Parameter 28 £temporary1736 6
x9419:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$28:	; Call 28 printChar 0
x9422:	mov word [bp + 28], printLongDoubleFraction$29	; 5: 199 70 28 220 36
x9427:	mov [bp + 30], bp	; 3: 137 110 30
x9430:	add bp, 28	; 3: 131 197 28
x9433:	jmp printChar	; 3: 233 116 247

printLongDoubleFraction$29:	; PostCall 28

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
x9436:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$31:	; IntegralToFloating £temporary1738 digitValue
x9439:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$32:	; BinarySubtract £temporary1739 longDoubleValue10 £temporary1738
x9442:	fsub	; 2: 222 233

printLongDoubleFraction$33:	; PopFloat longDoubleValue
x9444:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$34:	; Goto 14
x9447:	jmp printLongDoubleFraction$14	; 2: 235 175

printLongDoubleFraction$35:	; Return 0
x9449:	mov ax, [bp]	; 3: 139 70 0
x9452:	mov di, [bp + 4]	; 3: 139 126 4
x9455:	mov bp, [bp + 2]	; 3: 139 110 2
x9458:	jmp ax	; 2: 255 224

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction

@3876$float8$10.0#:
x9460:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9468:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9471:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9473:	fcompp	; 2: 222 217
x9475:	fstsw ax	; 3: 155 223 224
x9478:	sahf	; 1: 158
x9479:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9481:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary616 x
x9484:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9486:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9488:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary620

fabs$9:	; Return £temporary620
x9491:	mov ax, [bp]	; 3: 139 70 0
x9494:	mov di, [bp + 4]	; 3: 139 126 4
x9497:	mov bp, [bp + 2]	; 3: 139 110 2
x9500:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9502:	mov ax, [bp + 6]	; 3: 139 70 6
x9505:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9508:	mov word [bp + 8], tolower$3	; 5: 199 70 8 50 37
x9513:	mov [bp + 10], bp	; 3: 137 110 10
x9516:	add bp, 8	; 3: 131 197 8
x9519:	jmp isupper	; 3: 233 218 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary250

tolower$5:	; Equal 31 £temporary250 0
x9522:	cmp bx, 0	; 3: 131 251 0
x9525:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9527:	mov word [bp + 8], tolower$8	; 5: 199 70 8 69 37
x9532:	mov [bp + 10], bp	; 3: 137 110 10
x9535:	add bp, 8	; 3: 131 197 8
x9538:	jmp localeconv	; 3: 233 50 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary251

tolower$10:	; Assign localeConvPtr £temporary251
x9541:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9544:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9548:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary253 -> localeConvPtr localeConvPtr 12
x9550:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary253 -> localeConvPtr
x9553:	mov ax, [si + 12]	; 3: 139 68 12
x9556:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary254 -> localeConvPtr localeConvPtr 14
x9559:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary254 -> localeConvPtr
x9562:	mov ax, [si + 14]	; 3: 139 68 14
x9565:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9568:	mov ax, [bp + 12]	; 3: 139 70 12
x9571:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9574:	mov ax, [bp + 6]	; 3: 139 70 6
x9577:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9580:	mov word [bp + 14], tolower$20	; 5: 199 70 14 122 37
x9585:	mov [bp + 16], bp	; 3: 137 110 16
x9588:	add bp, 14	; 3: 131 197 14
x9591:	jmp strchr	; 3: 233 67 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary255

tolower$22:	; BinarySubtract index £temporary255 upperCase
x9594:	sub bx, [bp + 12]	; 3: 43 94 12
x9597:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary258 lowerCase index
x9600:	mov si, [bp + 10]	; 3: 139 118 10
x9603:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary257 -> £temporary258 £temporary258 0

tolower$25:	; IntegralToIntegral £temporary259 £temporary257 -> £temporary258
x9606:	mov bl, [si]	; 2: 138 28
x9608:	and bx, 255	; 4: 129 227 255 0
x9612:	cmp bl, 0	; 3: 128 251 0
x9615:	jge tolower$26	; 2: 125 4
x9617:	neg bl	; 2: 246 219
x9619:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary259

tolower$27:	; Return £temporary259
x9621:	mov ax, [bp]	; 3: 139 70 0
x9624:	mov di, [bp + 4]	; 3: 139 126 4
x9627:	mov bp, [bp + 2]	; 3: 139 110 2
x9630:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary260 c 32
x9632:	mov bx, [bp + 6]	; 3: 139 94 6
x9635:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary260

tolower$30:	; Return £temporary260
x9638:	mov ax, [bp]	; 3: 139 70 0
x9641:	mov di, [bp + 4]	; 3: 139 126 4
x9644:	mov bp, [bp + 2]	; 3: 139 110 2
x9647:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9649:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9652:	mov ax, [bp]	; 3: 139 70 0
x9655:	mov di, [bp + 4]	; 3: 139 126 4
x9658:	mov bp, [bp + 2]	; 3: 139 110 2
x9661:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9663:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9666:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9668:	fcompp	; 2: 222 217
x9670:	fstsw ax	; 3: 155 223 224
x9673:	sahf	; 1: 158
x9674:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9676:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9680:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 222 37
x9685:	mov [bp + 26], bp	; 3: 137 110 26
x9688:	add bp, 24	; 3: 131 197 24
x9691:	jmp printChar	; 3: 233 114 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9694:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9696:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9699:	mov ax, [bp + 20]	; 3: 139 70 20
x9702:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9705:	mov ax, [bp + 18]	; 3: 139 70 18
x9708:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9711:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 253 37
x9716:	mov [bp + 26], bp	; 3: 137 110 26
x9719:	add bp, 24	; 3: 131 197 24
x9722:	jmp printLongDoubleFraction	; 3: 233 87 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9725:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9729:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1764 69
x9731:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9733:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1764 101
x9735:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1764 6
x9737:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9740:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 26 38
x9745:	mov [bp + 26], bp	; 3: 137 110 26
x9748:	add bp, 24	; 3: 131 197 24
x9751:	jmp printChar	; 3: 233 54 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9754:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9758:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 44 38
x9763:	mov [bp + 26], bp	; 3: 137 110 26
x9766:	add bp, 24	; 3: 131 197 24
x9769:	jmp printChar	; 3: 233 36 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9772:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9775:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9778:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9780:	fcompp	; 2: 222 217
x9782:	fstsw ax	; 3: 155 223 224
x9785:	sahf	; 1: 158
x9786:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9788:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9792:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 78 38
x9797:	mov [bp + 26], bp	; 3: 137 110 26
x9800:	add bp, 24	; 3: 131 197 24
x9803:	jmp printChar	; 3: 233 2 246

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9806:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1769 value
x9809:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9811:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9814:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9817:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9820:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 106 38
x9825:	mov [bp + 26], bp	; 3: 137 110 26
x9828:	add bp, 24	; 3: 131 197 24
x9831:	jmp log10	; 3: 233 196 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1770

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1771 £temporary1770
x9834:	fistp word [container2bytes#]	; 4: 223 30 79 27
x9838:	mov ax, [container2bytes#]	; 3: 161 79 27

printLongDoubleExpo$44:	; Assign expo £temporary1771
x9841:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9844:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9847:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9850:	fld qword [@3952$float8$10.0#]	; 4: 221 6 38 39

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9854:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1772 expo
x9857:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1772 14
x9860:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9863:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 149 38
x9868:	mov [bp + 36], bp	; 3: 137 110 36
x9871:	add bp, 34	; 3: 131 197 34
x9874:	jmp pow	; 3: 233 6 2

printLongDoubleExpo$52:	; PostCall 26
x9877:	fstp qword [bp + 34]	; 3: 221 94 34
x9880:	fld qword [bp + 26]	; 3: 221 70 26
x9883:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1773

printLongDoubleExpo$54:	; SignedDivide £temporary1774 value £temporary1773
x9886:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9888:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9891:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9894:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9897:	mov ax, [bp + 14]	; 3: 139 70 14
x9900:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9903:	mov ax, [bp + 16]	; 3: 139 70 16
x9906:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9909:	mov ax, [bp + 18]	; 3: 139 70 18
x9912:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9915:	mov ax, [bp + 20]	; 3: 139 70 20
x9918:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9921:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 207 38
x9926:	mov [bp + 28], bp	; 3: 137 110 28
x9929:	add bp, 26	; 3: 131 197 26
x9932:	jmp printLongDoublePlain	; 3: 233 233 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9935:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9939:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1780 69
x9941:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9943:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1780 101
x9945:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1780 6
x9947:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9950:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 236 38
x9955:	mov [bp + 28], bp	; 3: 137 110 28
x9958:	add bp, 26	; 3: 131 197 26
x9961:	jmp printChar	; 3: 233 100 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1782 expo
x9964:	mov ax, [bp + 24]	; 3: 139 70 24
x9967:	and eax, 65535	; 6: 102 37 255 255 0 0
x9973:	cmp ax, 0	; 3: 131 248 0
x9976:	jge printLongDoubleExpo$75	; 2: 125 5
x9978:	neg ax	; 2: 247 216
x9980:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1782 6
x9983:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9987:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9992:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9997:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 27 39
x10002:	mov [bp + 28], bp	; 3: 137 110 28
x10005:	add bp, 26	; 3: 131 197 26
x10008:	jmp printLongInt	; 3: 233 161 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x10011:	mov ax, [bp]	; 3: 139 70 0
x10014:	mov di, [bp + 4]	; 3: 139 126 4
x10017:	mov bp, [bp + 2]	; 3: 139 110 2
x10020:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

@3952$float8$10.0#:
x10022:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x10030:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x10033:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x10036:	mov word [bp + 14], log10$4	; 5: 199 70 14 66 39
x10041:	mov [bp + 16], bp	; 3: 137 110 16
x10044:	add bp, 14	; 3: 131 197 14
x10047:	nop	; 1: 144
x10048:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary337

log10$6:	; PushFloat 2.30
x10050:	fld qword [@915$float8$2.30#]	; 4: 221 6 83 39

log10$7:	; SignedDivide £temporary338 £temporary337 2.30
x10054:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary338

log10$9:	; Return £temporary338
x10056:	mov ax, [bp]	; 3: 139 70 0
x10059:	mov di, [bp + 4]	; 3: 139 126 4
x10062:	mov bp, [bp + 2]	; 3: 139 110 2
x10065:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

@915$float8$2.30#:
x10067:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x10075:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x10078:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 76 x 0
x10080:	fcompp	; 2: 222 217
x10082:	fstsw ax	; 3: 155 223 224
x10085:	sahf	; 1: 158
x10086:	jae log$76	; 4: 15 131 238 0

log$3:	; Assign n 0
x10090:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10095:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10098:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10100:	fcompp	; 2: 222 217
x10102:	fstsw ax	; 3: 155 223 224
x10105:	sahf	; 1: 158
x10106:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10108:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10111:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10113:	fcompp	; 2: 222 217
x10115:	fstsw ax	; 3: 155 223 224
x10118:	sahf	; 1: 158
x10119:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10121:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10124:	fld qword [@863$float8$2.71#]	; 4: 221 6 107 40

log$12:	; SignedDivide £temporary319 x 2.71
x10128:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10130:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10133:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10136:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10138:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10141:	fld qword [@868$float8$0.368#]	; 4: 221 6 115 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10145:	fcompp	; 2: 222 217
x10147:	fstsw ax	; 3: 155 223 224
x10150:	sahf	; 1: 158
x10151:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10153:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10156:	fld qword [@871$float8$0.368#]	; 4: 221 6 123 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10160:	fcompp	; 2: 222 217
x10162:	fstsw ax	; 3: 155 223 224
x10165:	sahf	; 1: 158
x10166:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10168:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10171:	fld qword [@874$float8$2.71#]	; 4: 221 6 131 40

log$24:	; SignedMultiply £temporary323 x 2.71
x10175:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10177:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10180:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10183:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10185:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10187:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10190:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10192:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10195:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10197:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10200:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10203:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary325 x 1
x10205:	fsub	; 2: 222 233

log$37:	; PopFloat x_minus_1
x10207:	fstp qword [bp + 48]	; 3: 221 94 48

log$38:	; PushFloat x_minus_1
x10210:	fld qword [bp + 48]	; 3: 221 70 48

log$39:	; PopFloat power
x10213:	fstp qword [bp + 56]	; 3: 221 94 56

log$40:	; PushFloat sign
x10216:	fld qword [bp + 40]	; 3: 221 70 40

log$41:	; PushFloat power
x10219:	fld qword [bp + 56]	; 3: 221 70 56

log$42:	; SignedMultiply £temporary326 sign power
x10222:	fmul	; 2: 222 201

log$43:	; PushFloat index
x10224:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushOne
x10227:	fld1	; 2: 217 232

log$45:	; BinaryAdd index index 1
x10229:	fadd	; 2: 222 193

log$46:	; TopFloat index
x10231:	fst qword [bp + 16]	; 3: 221 86 16

log$47:	; PushOne
x10234:	fld1	; 2: 217 232

log$48:	; BinarySubtract index index 1
x10236:	fsub	; 2: 222 233

log$49:	; SignedDivide £temporary328 £temporary326 £temporary327
x10238:	fdiv	; 2: 222 249

log$50:	; PopFloat term
x10240:	fstp qword [bp + 24]	; 3: 221 94 24

log$51:	; PushFloat sum
x10243:	fld qword [bp + 32]	; 3: 221 70 32

log$52:	; PushFloat term
x10246:	fld qword [bp + 24]	; 3: 221 70 24

log$53:	; BinaryAdd £temporary329 sum term
x10249:	fadd	; 2: 222 193

log$54:	; PopFloat sum
x10251:	fstp qword [bp + 32]	; 3: 221 94 32

log$55:	; PushFloat power
x10254:	fld qword [bp + 56]	; 3: 221 70 56

log$56:	; PushFloat x_minus_1
x10257:	fld qword [bp + 48]	; 3: 221 70 48

log$57:	; SignedMultiply £temporary330 power x_minus_1
x10260:	fmul	; 2: 222 201

log$58:	; PopFloat power
x10262:	fstp qword [bp + 56]	; 3: 221 94 56

log$59:	; PushFloat sign
x10265:	fld qword [bp + 40]	; 3: 221 70 40

log$60:	; PushFloat -1.0
x10268:	fld qword [@900$float8$minus1.0#]	; 4: 221 6 139 40

log$61:	; SignedMultiply £temporary331 sign -1.0
x10272:	fmul	; 2: 222 201

log$62:	; PopFloat sign
x10274:	fstp qword [bp + 40]	; 3: 221 94 40

log$63:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$64:	; PushFloat term
x10277:	fld qword [bp + 24]	; 3: 221 70 24

log$65:	; Parameter 64 term 6
x10280:	fstp qword [bp + 70]	; 3: 221 94 70

log$66:	; Call 64 fabs 0
x10283:	mov word [bp + 64], log$67	; 5: 199 70 64 57 40
x10288:	mov [bp + 66], bp	; 3: 137 110 66
x10291:	add bp, 64	; 3: 131 197 64
x10294:	jmp fabs	; 3: 233 195 252

log$67:	; PostCall 64

log$68:	; GetReturnValue £temporary332

log$69:	; PushFloat 0.000000001
x10297:	fld qword [@904$float8$0.000000001#]	; 4: 221 6 147 40

log$70:	; SignedGreaterThanEqual 40 £temporary332 0.000000001
x10301:	fcompp	; 2: 222 217
x10303:	fstsw ax	; 3: 155 223 224
x10306:	sahf	; 1: 158
x10307:	jbe log$40	; 2: 118 163

log$71:	; PushFloat sum
x10309:	fld qword [bp + 32]	; 3: 221 70 32

log$72:	; IntegralToFloating £temporary334 n
x10312:	fild word [bp + 14]	; 3: 223 70 14

log$73:	; BinaryAdd £temporary335 sum £temporary334
x10315:	fadd	; 2: 222 193

log$74:	; SetReturnValue £temporary335

log$75:	; Return £temporary335
x10317:	mov ax, [bp]	; 3: 139 70 0
x10320:	mov di, [bp + 4]	; 3: 139 126 4
x10323:	mov bp, [bp + 2]	; 3: 139 110 2
x10326:	jmp ax	; 2: 255 224

log$76:	; Assign errno 6
x10328:	mov word [errno], 6	; 6: 199 6 230 10 6 0

log$77:	; PushZero
x10334:	fldz	; 2: 217 238

log$78:	; SetReturnValue 0

log$79:	; Return 0
x10336:	mov ax, [bp]	; 3: 139 70 0
x10339:	mov di, [bp + 4]	; 3: 139 126 4
x10342:	mov bp, [bp + 2]	; 3: 139 110 2
x10345:	jmp ax	; 2: 255 224

log$80:	; FunctionEnd log

@863$float8$2.71#:
x10347:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@868$float8$0.368#:
x10355:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@871$float8$0.368#:
x10363:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@874$float8$2.71#:
x10371:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@900$float8$minus1.0#:
x10379:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@904$float8$0.000000001#:
x10387:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10395:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10398:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10400:	fcompp	; 2: 222 217
x10402:	fstsw ax	; 3: 155 223 224
x10405:	sahf	; 1: 158
x10406:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10408:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10411:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10414:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10417:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10420:	mov word [bp + 30], pow$9	; 5: 199 70 30 194 40
x10425:	mov [bp + 32], bp	; 3: 137 110 32
x10428:	add bp, 30	; 3: 131 197 30
x10431:	jmp log	; 3: 233 153 254

pow$9:	; PostCall 22
x10434:	fstp qword [bp + 30]	; 3: 221 94 30
x10437:	fld qword [bp + 22]	; 3: 221 70 22
x10440:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary341

pow$11:	; SignedMultiply £temporary342 y £temporary341
x10443:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary342 6
x10445:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10448:	mov word [bp + 22], pow$14	; 5: 199 70 22 222 40
x10453:	mov [bp + 24], bp	; 3: 137 110 24
x10456:	add bp, 22	; 3: 131 197 22
x10459:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary343

pow$16:	; SetReturnValue £temporary343

pow$17:	; Return £temporary343
x10462:	mov ax, [bp]	; 3: 139 70 0
x10465:	mov di, [bp + 4]	; 3: 139 126 4
x10468:	mov bp, [bp + 2]	; 3: 139 110 2
x10471:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10473:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10476:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10478:	fcompp	; 2: 222 217
x10480:	fstsw ax	; 3: 155 223 224
x10483:	sahf	; 1: 158
x10484:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10486:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10489:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10491:	fcompp	; 2: 222 217
x10493:	fstsw ax	; 3: 155 223 224
x10496:	sahf	; 1: 158
x10497:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10499:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10501:	mov ax, [bp]	; 3: 139 70 0
x10504:	mov di, [bp + 4]	; 3: 139 126 4
x10507:	mov bp, [bp + 2]	; 3: 139 110 2
x10510:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10512:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10515:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10517:	fcompp	; 2: 222 217
x10519:	fstsw ax	; 3: 155 223 224
x10522:	sahf	; 1: 158
x10523:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10525:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10528:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10530:	fcompp	; 2: 222 217
x10532:	fstsw ax	; 3: 155 223 224
x10535:	sahf	; 1: 158
x10536:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10538:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10540:	mov ax, [bp]	; 3: 139 70 0
x10543:	mov di, [bp + 4]	; 3: 139 126 4
x10546:	mov bp, [bp + 2]	; 3: 139 110 2
x10549:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10551:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10554:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10556:	fcompp	; 2: 222 217
x10558:	fstsw ax	; 3: 155 223 224
x10561:	sahf	; 1: 158
x10562:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10566:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10569:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10572:	mov word [bp + 22], pow$43	; 5: 199 70 22 90 41
x10577:	mov [bp + 24], bp	; 3: 137 110 24
x10580:	add bp, 22	; 3: 131 197 22
x10583:	jmp floor	; 3: 233 104 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary351

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10586:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10589:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10592:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10595:	mov word [bp + 30], pow$49	; 5: 199 70 30 113 41
x10600:	mov [bp + 32], bp	; 3: 137 110 32
x10603:	add bp, 30	; 3: 131 197 30
x10606:	jmp ceil	; 3: 233 159 1

pow$49:	; PostCall 22
x10609:	fstp qword [bp + 30]	; 3: 221 94 30
x10612:	fld qword [bp + 22]	; 3: 221 70 22
x10615:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary352

pow$51:	; NotEqual 90 £temporary351 £temporary352
x10618:	fcompp	; 2: 222 217
x10620:	fstsw ax	; 3: 155 223 224
x10623:	sahf	; 1: 158
x10624:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10628:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary355 y
x10631:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x10635:	mov eax, [container4bytes#]	; 4: 102 161 80 36

pow$54:	; Assign long_y £temporary355
x10639:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary356 long_y 2
x10643:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10647:	xor edx, edx	; 3: 102 49 210
x10650:	idiv dword [@954$int4$2#]	; 5: 102 247 62 64 42

pow$56:	; NotEqual 73 £temporary356 0
x10655:	cmp edx, 0	; 4: 102 131 250 0
x10659:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10661:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10664:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10667:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary358 x
x10670:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary358 6
x10672:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10675:	mov word [bp + 34], pow$64	; 5: 199 70 34 193 41
x10680:	mov [bp + 36], bp	; 3: 137 110 36
x10683:	add bp, 34	; 3: 131 197 34
x10686:	jmp log	; 3: 233 154 253

pow$64:	; PostCall 26
x10689:	fstp qword [bp + 34]	; 3: 221 94 34
x10692:	fld qword [bp + 26]	; 3: 221 70 26
x10695:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary359

pow$66:	; SignedMultiply £temporary360 y £temporary359
x10698:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary360 6
x10700:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10703:	mov word [bp + 26], pow$69	; 5: 199 70 26 221 41
x10708:	mov [bp + 28], bp	; 3: 137 110 28
x10711:	add bp, 26	; 3: 131 197 26
x10714:	nop	; 1: 144
x10715:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary361

pow$71:	; SetReturnValue £temporary361

pow$72:	; Return £temporary361
x10717:	mov ax, [bp]	; 3: 139 70 0
x10720:	mov di, [bp + 4]	; 3: 139 126 4
x10723:	mov bp, [bp + 2]	; 3: 139 110 2
x10726:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10728:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10731:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10734:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary362 x
x10737:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary362 6
x10739:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10742:	mov word [bp + 34], pow$80	; 5: 199 70 34 4 42
x10747:	mov [bp + 36], bp	; 3: 137 110 36
x10750:	add bp, 34	; 3: 131 197 34
x10753:	jmp log	; 3: 233 87 253

pow$80:	; PostCall 26
x10756:	fstp qword [bp + 34]	; 3: 221 94 34
x10759:	fld qword [bp + 26]	; 3: 221 70 26
x10762:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary363

pow$82:	; SignedMultiply £temporary364 y £temporary363
x10765:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary364 6
x10767:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10770:	mov word [bp + 26], pow$85	; 5: 199 70 26 32 42
x10775:	mov [bp + 28], bp	; 3: 137 110 28
x10778:	add bp, 26	; 3: 131 197 26
x10781:	nop	; 1: 144
x10782:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary365

pow$87:	; UnarySubtract £temporary366 £temporary365
x10784:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary366

pow$89:	; Return £temporary366
x10786:	mov ax, [bp]	; 3: 139 70 0
x10789:	mov di, [bp + 4]	; 3: 139 126 4
x10792:	mov bp, [bp + 2]	; 3: 139 110 2
x10795:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10797:	mov word [errno], 6	; 6: 199 6 230 10 6 0

pow$91:	; PushZero
x10803:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10805:	mov ax, [bp]	; 3: 139 70 0
x10808:	mov di, [bp + 4]	; 3: 139 126 4
x10811:	mov bp, [bp + 2]	; 3: 139 110 2
x10814:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

@954$int4$2#:
x10816:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10820:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10822:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10825:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10827:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10830:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10832:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10835:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10838:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10841:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10844:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary308 power faculty
x10847:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10849:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10852:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10855:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary309 sum term
x10858:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10860:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10863:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10866:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary310 power x
x10869:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10871:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10874:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10877:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10880:	fld1	; 2: 217 232

exp$23:	; BinaryAdd index index 1
x10882:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10884:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary312 faculty £temporary311
x10887:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10889:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10892:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10895:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10898:	mov word [bp + 54], exp$31	; 5: 199 70 54 160 42
x10903:	mov [bp + 56], bp	; 3: 137 110 56
x10906:	add bp, 54	; 3: 131 197 54
x10909:	jmp fabs	; 3: 233 92 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary313

exp$33:	; PushFloat 0.000000001
x10912:	fld qword [@846$float8$0.000000001#]	; 4: 221 6 186 42

exp$34:	; SignedGreaterThanEqual 8 £temporary313 0.000000001
x10916:	fcompp	; 2: 222 217
x10918:	fstsw ax	; 3: 155 223 224
x10921:	sahf	; 1: 158
x10922:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10924:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10927:	mov ax, [bp]	; 3: 139 70 0
x10930:	mov di, [bp + 4]	; 3: 139 126 4
x10933:	mov bp, [bp + 2]	; 3: 139 110 2
x10936:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

@846$float8$0.000000001#:
x10938:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

floor:	; PushFloat x
x10946:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10949:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10951:	fcompp	; 2: 222 217
x10953:	fstsw ax	; 3: 155 223 224
x10956:	sahf	; 1: 158
x10957:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10959:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary592 x
x10962:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary592 6
x10964:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10967:	mov word [bp + 14], floor$8	; 5: 199 70 14 229 42
x10972:	mov [bp + 16], bp	; 3: 137 110 16
x10975:	add bp, 14	; 3: 131 197 14
x10978:	nop	; 1: 144
x10979:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary593

floor$10:	; UnarySubtract £temporary594 £temporary593
x10981:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary594

floor$12:	; Return £temporary594
x10983:	mov ax, [bp]	; 3: 139 70 0
x10986:	mov di, [bp + 4]	; 3: 139 126 4
x10989:	mov bp, [bp + 2]	; 3: 139 110 2
x10992:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10994:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary595 x
x10997:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x11001:	mov eax, [container4bytes#]	; 4: 102 161 80 36

floor$15:	; IntegralToFloating £temporary596 £temporary595
x11005:	mov [container4bytes#], eax	; 4: 102 163 80 36
x11009:	fild dword [container4bytes#]	; 4: 219 6 80 36

floor$16:	; SetReturnValue £temporary596

floor$17:	; Return £temporary596
x11013:	mov ax, [bp]	; 3: 139 70 0
x11016:	mov di, [bp + 4]	; 3: 139 126 4
x11019:	mov bp, [bp + 2]	; 3: 139 110 2
x11022:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x11024:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x11027:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x11029:	fcompp	; 2: 222 217
x11031:	fstsw ax	; 3: 155 223 224
x11034:	sahf	; 1: 158
x11035:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x11037:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary599 x
x11040:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary599 6
x11042:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x11045:	mov word [bp + 14], ceil$8	; 5: 199 70 14 51 43
x11050:	mov [bp + 16], bp	; 3: 137 110 16
x11053:	add bp, 14	; 3: 131 197 14
x11056:	nop	; 1: 144
x11057:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary600

ceil$10:	; UnarySubtract £temporary601 £temporary600
x11059:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary601

ceil$12:	; Return £temporary601
x11061:	mov ax, [bp]	; 3: 139 70 0
x11064:	mov di, [bp + 4]	; 3: 139 126 4
x11067:	mov bp, [bp + 2]	; 3: 139 110 2
x11070:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x11072:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x11075:	fld qword [@1450$float8$0.999999999999#]	; 4: 221 6 100 43

ceil$15:	; BinaryAdd £temporary602 x 0.999999999999
x11079:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary603 £temporary602
x11081:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x11085:	mov eax, [container4bytes#]	; 4: 102 161 80 36

ceil$17:	; IntegralToFloating £temporary604 £temporary603
x11089:	mov [container4bytes#], eax	; 4: 102 163 80 36
x11093:	fild dword [container4bytes#]	; 4: 219 6 80 36

ceil$18:	; SetReturnValue £temporary604

ceil$19:	; Return £temporary604
x11097:	mov ax, [bp]	; 3: 139 70 0
x11100:	mov di, [bp + 4]	; 3: 139 126 4
x11103:	mov bp, [bp + 2]	; 3: 139 110 2
x11106:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

@1450$float8$0.999999999999#:
x11108:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11116:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11120:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11122:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11126:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary193 1
x11128:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11131:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary193 0
x11133:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary193

isdigit$6:	; Return £temporary193
x11136:	mov ax, [bp]	; 3: 139 70 0
x11139:	mov di, [bp + 4]	; 3: 139 126 4
x11142:	mov bp, [bp + 2]	; 3: 139 110 2
x11145:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11147:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11150:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11153:	mov word [bp + 14], sin$4	; 5: 199 70 14 159 43
x11158:	mov [bp + 16], bp	; 3: 137 110 16
x11161:	add bp, 14	; 3: 131 197 14
x11164:	jmp fabs	; 3: 233 93 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary446

sin$6:	; PushFloat 6.28
x11167:	fld qword [@1114$float8$6.28#]	; 4: 221 6 102 44

sin$7:	; SignedLessThanEqual 17 £temporary446 6.28
x11171:	fcompp	; 2: 222 217
x11173:	fstsw ax	; 3: 155 223 224
x11176:	sahf	; 1: 158
x11177:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11179:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11182:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11185:	fld qword [@1119$float8$6.28#]	; 4: 221 6 110 44

sin$12:	; Parameter 14 6.28 14
x11189:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11192:	mov word [bp + 14], sin$14	; 5: 199 70 14 198 43
x11197:	mov [bp + 16], bp	; 3: 137 110 16
x11200:	add bp, 14	; 3: 131 197 14
x11203:	jmp fmod	; 3: 233 192 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary448

sin$16:	; PopFloat x
x11206:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11209:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11211:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11214:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11216:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11219:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11221:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11224:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11227:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11230:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11232:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11235:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11238:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary449 sign power
x11241:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11243:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary450 £temporary449 faculty
x11246:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11248:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11251:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11254:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary451 sum term
x11257:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11259:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11262:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11265:	fld qword [@1140$float8$minus1#]	; 4: 221 6 118 44

sin$39:	; SignedMultiply £temporary452 sign -1
x11269:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11271:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11274:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11277:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11280:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary453 x x
x11283:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary454 power £temporary453
x11285:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11287:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11290:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11293:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11296:	fld1	; 2: 217 232

sin$50:	; BinaryAdd index index 1
x11298:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11300:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11303:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11306:	fld1	; 2: 217 232

sin$54:	; BinaryAdd index index 1
x11308:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11310:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary457 £temporary455 £temporary456
x11313:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary458 faculty £temporary457
x11315:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11317:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11320:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11323:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11326:	mov word [bp + 62], sin$63	; 5: 199 70 62 76 44
x11331:	mov [bp + 64], bp	; 3: 137 110 64
x11334:	add bp, 62	; 3: 131 197 62
x11337:	jmp fabs	; 3: 233 176 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary459

sin$65:	; PushFloat 0.000000001
x11340:	fld qword [@1151$float8$0.000000001#]	; 4: 221 6 126 44

sin$66:	; SignedGreaterThanEqual 27 £temporary459 0.000000001
x11344:	fcompp	; 2: 222 217
x11346:	fstsw ax	; 3: 155 223 224
x11349:	sahf	; 1: 158
x11350:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11352:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11355:	mov ax, [bp]	; 3: 139 70 0
x11358:	mov di, [bp + 4]	; 3: 139 126 4
x11361:	mov bp, [bp + 2]	; 3: 139 110 2
x11364:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

@1114$float8$6.28#:
x11366:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1119$float8$6.28#:
x11374:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1140$float8$minus1#:
x11382:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1151$float8$0.000000001#:
x11390:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

fmod:	; PushFloat y
x11398:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11401:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11403:	fcompp	; 2: 222 217
x11405:	fstsw ax	; 3: 155 223 224
x11408:	sahf	; 1: 158
x11409:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11411:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11414:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11417:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11420:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary433 x y
x11423:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary434 £temporary433
x11425:	fistp word [container2bytes#]	; 4: 223 30 79 27
x11429:	mov ax, [container2bytes#]	; 3: 161 79 27

fmod$10:	; IntegralToFloating £temporary435 £temporary434
x11432:	mov [container2bytes#], ax	; 3: 163 79 27
x11435:	fild word [container2bytes#]	; 4: 223 6 79 27

fmod$11:	; SignedMultiply £temporary436 y £temporary435
x11439:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary437 x £temporary436
x11441:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary437 6
x11443:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11446:	mov word [bp + 22], fmod$15	; 5: 199 70 22 196 44
x11451:	mov [bp + 24], bp	; 3: 137 110 24
x11454:	add bp, 22	; 3: 131 197 22
x11457:	jmp fabs	; 3: 233 56 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary438

fmod$17:	; PopFloat remainder
x11460:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11463:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11466:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11468:	fcompp	; 2: 222 217
x11470:	fstsw ax	; 3: 155 223 224
x11473:	sahf	; 1: 158
x11474:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11476:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11479:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11481:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary440 remainder
x11484:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary444

fmod$27:	; Return £temporary444
x11486:	mov ax, [bp]	; 3: 139 70 0
x11489:	mov di, [bp + 4]	; 3: 139 126 4
x11492:	mov bp, [bp + 2]	; 3: 139 110 2
x11495:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11497:	mov word [errno], 6	; 6: 199 6 230 10 6 0

fmod$29:	; PushZero
x11503:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11505:	mov ax, [bp]	; 3: 139 70 0
x11508:	mov di, [bp + 4]	; 3: 139 126 4
x11511:	mov bp, [bp + 2]	; 3: 139 110 2
x11514:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11516:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11519:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11522:	mov word [bp + 14], cos$4	; 5: 199 70 14 16 45
x11527:	mov [bp + 16], bp	; 3: 137 110 16
x11530:	add bp, 14	; 3: 131 197 14
x11533:	jmp fabs	; 3: 233 236 247

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary465

cos$6:	; PushFloat 6.28
x11536:	fld qword [@1162$float8$6.28#]	; 4: 221 6 214 45

cos$7:	; SignedLessThanEqual 17 £temporary465 6.28
x11540:	fcompp	; 2: 222 217
x11542:	fstsw ax	; 3: 155 223 224
x11545:	sahf	; 1: 158
x11546:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11548:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11551:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11554:	fld qword [@1167$float8$6.28#]	; 4: 221 6 222 45

cos$12:	; Parameter 14 6.28 14
x11558:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11561:	mov word [bp + 14], cos$14	; 5: 199 70 14 55 45
x11566:	mov [bp + 16], bp	; 3: 137 110 16
x11569:	add bp, 14	; 3: 131 197 14
x11572:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary467

cos$16:	; PopFloat x
x11575:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11578:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11580:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11583:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11585:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11588:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11590:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11593:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11595:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11598:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11600:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11603:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11606:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary468 sign power
x11609:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11611:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary469 £temporary468 faculty
x11614:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11616:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11619:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11622:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary470 sum term
x11625:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11627:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11630:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11633:	fld qword [@1190$float8$minus1#]	; 4: 221 6 230 45

cos$39:	; SignedMultiply £temporary471 sign -1
x11637:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11639:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11642:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11645:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11648:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary472 x x
x11651:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary473 power £temporary472
x11653:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11655:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11658:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11661:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11664:	fld1	; 2: 217 232

cos$50:	; BinaryAdd index index 1
x11666:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11668:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11671:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11674:	fld1	; 2: 217 232

cos$54:	; BinaryAdd index index 1
x11676:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11678:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary476 £temporary474 £temporary475
x11681:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary477 faculty £temporary476
x11683:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11685:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11688:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11691:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11694:	mov word [bp + 62], cos$63	; 5: 199 70 62 188 45
x11699:	mov [bp + 64], bp	; 3: 137 110 64
x11702:	add bp, 62	; 3: 131 197 62
x11705:	jmp fabs	; 3: 233 64 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary478

cos$65:	; PushFloat 0.000000001
x11708:	fld qword [@1201$float8$0.000000001#]	; 4: 221 6 238 45

cos$66:	; SignedGreaterThanEqual 27 £temporary478 0.000000001
x11712:	fcompp	; 2: 222 217
x11714:	fstsw ax	; 3: 155 223 224
x11717:	sahf	; 1: 158
x11718:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11720:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11723:	mov ax, [bp]	; 3: 139 70 0
x11726:	mov di, [bp + 4]	; 3: 139 126 4
x11729:	mov bp, [bp + 2]	; 3: 139 110 2
x11732:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

@1162$float8$6.28#:
x11734:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1167$float8$6.28#:
x11742:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1190$float8$minus1#:
x11750:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1201$float8$0.000000001#:
x11758:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11766:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11769:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11772:	mov word [bp + 14], tan$4	; 5: 199 70 14 10 46
x11777:	mov [bp + 16], bp	; 3: 137 110 16
x11780:	add bp, 14	; 3: 131 197 14
x11783:	jmp cos	; 3: 233 242 254

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary484

tan$6:	; PopFloat cos_of_x
x11786:	fstp qword [bp + 14]	; 3: 221 94 14

tan$7:	; PushFloat cos_of_x
x11789:	fld qword [bp + 14]	; 3: 221 70 14

tan$8:	; PushZero
x11792:	fldz	; 2: 217 238

tan$9:	; Equal 20 cos_of_x 0
x11794:	fcompp	; 2: 222 217
x11796:	fstsw ax	; 3: 155 223 224
x11799:	sahf	; 1: 158
x11800:	je tan$20	; 2: 116 36

tan$10:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$11:	; PushFloat x
x11802:	fld qword [bp + 6]	; 3: 221 70 6

tan$12:	; Parameter 22 x 6
x11805:	fstp qword [bp + 28]	; 3: 221 94 28

tan$13:	; Call 22 sin 0
x11808:	mov word [bp + 22], tan$14	; 5: 199 70 22 46 46
x11813:	mov [bp + 24], bp	; 3: 137 110 24
x11816:	add bp, 22	; 3: 131 197 22
x11819:	jmp sin	; 3: 233 93 253

tan$14:	; PostCall 22

tan$15:	; GetReturnValue £temporary486

tan$16:	; PushFloat cos_of_x
x11822:	fld qword [bp + 14]	; 3: 221 70 14

tan$17:	; SignedDivide £temporary487 £temporary486 cos_of_x
x11825:	fdiv	; 2: 222 249

tan$18:	; SetReturnValue £temporary487

tan$19:	; Return £temporary487
x11827:	mov ax, [bp]	; 3: 139 70 0
x11830:	mov di, [bp + 4]	; 3: 139 126 4
x11833:	mov bp, [bp + 2]	; 3: 139 110 2
x11836:	jmp ax	; 2: 255 224

tan$20:	; Assign errno 6
x11838:	mov word [errno], 6	; 6: 199 6 230 10 6 0

tan$21:	; PushZero
x11844:	fldz	; 2: 217 238

tan$22:	; SetReturnValue 0

tan$23:	; Return 0
x11846:	mov ax, [bp]	; 3: 139 70 0
x11849:	mov di, [bp + 4]	; 3: 139 126 4
x11852:	mov bp, [bp + 2]	; 3: 139 110 2
x11855:	jmp ax	; 2: 255 224

tan$24:	; FunctionEnd tan

asin:	; PushFloat x
x11857:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11860:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11862:	fcompp	; 2: 222 217
x11864:	fstsw ax	; 3: 155 223 224
x11867:	sahf	; 1: 158
x11868:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11870:	fld qword [@1227$float8$1.57#]	; 4: 221 6 7 47

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11874:	mov ax, [bp]	; 3: 139 70 0
x11877:	mov di, [bp + 4]	; 3: 139 126 4
x11880:	mov bp, [bp + 2]	; 3: 139 110 2
x11883:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11885:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11888:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11890:	fcompp	; 2: 222 217
x11892:	fstsw ax	; 3: 155 223 224
x11895:	sahf	; 1: 158
x11896:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11898:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary492 x
x11901:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary492 6
x11903:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11906:	mov word [bp + 14], asin$14	; 5: 199 70 14 144 46
x11911:	mov [bp + 16], bp	; 3: 137 110 16
x11914:	add bp, 14	; 3: 131 197 14
x11917:	nop	; 1: 144
x11918:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary493

asin$16:	; UnarySubtract £temporary494 £temporary493
x11920:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary494

asin$18:	; Return £temporary494
x11922:	mov ax, [bp]	; 3: 139 70 0
x11925:	mov di, [bp + 4]	; 3: 139 126 4
x11928:	mov bp, [bp + 2]	; 3: 139 110 2
x11931:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11933:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11936:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11938:	fcompp	; 2: 222 217
x11940:	fstsw ax	; 3: 155 223 224
x11943:	sahf	; 1: 158
x11944:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11946:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11949:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11952:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11954:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11957:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary496 x x
x11960:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary497 1 £temporary496
x11962:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary497 6
x11964:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11967:	mov word [bp + 22], asin$32	; 5: 199 70 22 205 46
x11972:	mov [bp + 24], bp	; 3: 137 110 24
x11975:	add bp, 22	; 3: 131 197 22
x11978:	nop	; 1: 144
x11979:	jmp sqrt	; 2: 235 66

asin$32:	; PostCall 14
x11981:	fstp qword [bp + 22]	; 3: 221 94 22
x11984:	fld qword [bp + 14]	; 3: 221 70 14
x11987:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary498

asin$34:	; SignedDivide £temporary499 x £temporary498
x11990:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary499 6
x11992:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11995:	mov word [bp + 14], asin$37	; 5: 199 70 14 233 46
x12000:	mov [bp + 16], bp	; 3: 137 110 16
x12003:	add bp, 14	; 3: 131 197 14
x12006:	jmp atan	; 3: 233 170 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary500

asin$39:	; SetReturnValue £temporary500

asin$40:	; Return £temporary500
x12009:	mov ax, [bp]	; 3: 139 70 0
x12012:	mov di, [bp + 4]	; 3: 139 126 4
x12015:	mov bp, [bp + 2]	; 3: 139 110 2
x12018:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x12020:	mov word [errno], 6	; 6: 199 6 230 10 6 0

asin$42:	; PushZero
x12026:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x12028:	mov ax, [bp]	; 3: 139 70 0
x12031:	mov di, [bp + 4]	; 3: 139 126 4
x12034:	mov bp, [bp + 2]	; 3: 139 110 2
x12037:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

@1227$float8$1.57#:
x12039:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

sqrt:	; PushFloat x
x12047:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x12050:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 28 x 0
x12052:	fcompp	; 2: 222 217
x12054:	fstsw ax	; 3: 155 223 224
x12057:	sahf	; 1: 158
x12058:	ja sqrt$28	; 2: 119 84

sqrt$3:	; PushOne
x12060:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x12062:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x12065:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; PopFloat root_i
x12068:	fstp qword [bp + 14]	; 3: 221 94 14

sqrt$7:	; PushFloat root_i
x12071:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$8:	; PushFloat x
x12074:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$9:	; PushFloat root_i
x12077:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$10:	; SignedDivide £temporary406 x root_i
x12080:	fdiv	; 2: 222 249

sqrt$11:	; BinaryAdd £temporary407 root_i £temporary406
x12082:	fadd	; 2: 222 193

sqrt$12:	; PushFloat 2
x12084:	fld qword [@1046$float8$2#]	; 4: 221 6 131 47

sqrt$13:	; SignedDivide £temporary408 £temporary407 2
x12088:	fdiv	; 2: 222 249

sqrt$14:	; PopFloat root_i_plus_1
x12090:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$15:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$16:	; PushFloat root_i_plus_1
x12093:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$17:	; PushFloat root_i
x12096:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$18:	; BinarySubtract £temporary409 root_i_plus_1 root_i
x12099:	fsub	; 2: 222 233

sqrt$19:	; Parameter 30 £temporary409 6
x12101:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$20:	; Call 30 fabs 0
x12104:	mov word [bp + 30], sqrt$21	; 5: 199 70 30 86 47
x12109:	mov [bp + 32], bp	; 3: 137 110 32
x12112:	add bp, 30	; 3: 131 197 30
x12115:	jmp fabs	; 3: 233 166 245

sqrt$21:	; PostCall 30

sqrt$22:	; GetReturnValue £temporary410

sqrt$23:	; PushFloat 0.000000001
x12118:	fld qword [@1050$float8$0.000000001#]	; 4: 221 6 139 47

sqrt$24:	; SignedGreaterThanEqual 5 £temporary410 0.000000001
x12122:	fcompp	; 2: 222 217
x12124:	fstsw ax	; 3: 155 223 224
x12127:	sahf	; 1: 158
x12128:	jbe sqrt$5	; 2: 118 191

sqrt$25:	; PushFloat root_i_plus_1
x12130:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$26:	; SetReturnValue root_i_plus_1

sqrt$27:	; Return root_i_plus_1
x12133:	mov ax, [bp]	; 3: 139 70 0
x12136:	mov di, [bp + 4]	; 3: 139 126 4
x12139:	mov bp, [bp + 2]	; 3: 139 110 2
x12142:	jmp ax	; 2: 255 224

sqrt$28:	; Assign errno 6
x12144:	mov word [errno], 6	; 6: 199 6 230 10 6 0

sqrt$29:	; PushZero
x12150:	fldz	; 2: 217 238

sqrt$30:	; SetReturnValue 0

sqrt$31:	; Return 0
x12152:	mov ax, [bp]	; 3: 139 70 0
x12155:	mov di, [bp + 4]	; 3: 139 126 4
x12158:	mov bp, [bp + 2]	; 3: 139 110 2
x12161:	jmp ax	; 2: 255 224

sqrt$32:	; FunctionEnd sqrt

@1046$float8$2#:
x12163:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1050$float8$0.000000001#:
x12171:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

atan:	; PushFloat x
x12179:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x12182:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x12184:	fcompp	; 2: 222 217
x12186:	fstsw ax	; 3: 155 223 224
x12189:	sahf	; 1: 158
x12190:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12192:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary519 x
x12195:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary519 6
x12197:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12200:	mov word [bp + 14], atan$8	; 5: 199 70 14 182 47
x12205:	mov [bp + 16], bp	; 3: 137 110 16
x12208:	add bp, 14	; 3: 131 197 14
x12211:	nop	; 1: 144
x12212:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary520

atan$10:	; UnarySubtract £temporary521 £temporary520
x12214:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary521

atan$12:	; Return £temporary521
x12216:	mov ax, [bp]	; 3: 139 70 0
x12219:	mov di, [bp + 4]	; 3: 139 126 4
x12222:	mov bp, [bp + 2]	; 3: 139 110 2
x12225:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12227:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12230:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12232:	fcompp	; 2: 222 217
x12234:	fstsw ax	; 3: 155 223 224
x12237:	sahf	; 1: 158
x12238:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12240:	fld qword [@1295$float8$1.57#]	; 4: 221 6 252 48

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12244:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12247:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12249:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary523 1 x
x12252:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary523 6
x12254:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12257:	mov word [bp + 22], atan$23	; 5: 199 70 22 239 47
x12262:	mov [bp + 24], bp	; 3: 137 110 24
x12265:	add bp, 22	; 3: 131 197 22
x12268:	nop	; 1: 144
x12269:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12271:	fstp qword [bp + 22]	; 3: 221 94 22
x12274:	fld qword [bp + 14]	; 3: 221 70 14
x12277:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary524

atan$25:	; BinarySubtract £temporary525 1.57 £temporary524
x12280:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary525

atan$27:	; Return £temporary525
x12282:	mov ax, [bp]	; 3: 139 70 0
x12285:	mov di, [bp + 4]	; 3: 139 126 4
x12288:	mov bp, [bp + 2]	; 3: 139 110 2
x12291:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12293:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12296:	fld qword [@1302$float8$0.5#]	; 4: 221 6 4 49

atan$30:	; SignedLessThanEqual 54 x 0.5
x12300:	fcompp	; 2: 222 217
x12302:	fstsw ax	; 3: 155 223 224
x12305:	sahf	; 1: 158
x12306:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12308:	fld qword [@1316$float8$2#]	; 4: 221 6 12 49

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12312:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12315:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12318:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12320:	fstp qword [bp + 22]	; 3: 221 94 22
x12323:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12326:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12328:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12331:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary527 x x
x12334:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary528 1 £temporary527
x12336:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary528 14
x12338:	fstp qword [bp + 52]	; 3: 221 94 52

atan$42:	; Call 14 sqrt 0
x12341:	mov word [bp + 46], atan$43	; 5: 199 70 46 67 48
x12346:	mov [bp + 48], bp	; 3: 137 110 48
x12349:	add bp, 46	; 3: 131 197 46
x12352:	jmp sqrt	; 3: 233 204 254

atan$43:	; PostCall 14
x12355:	fstp qword [bp + 38]	; 3: 221 94 38
x12358:	fld qword [bp + 30]	; 3: 221 70 30
x12361:	fld qword [bp + 22]	; 3: 221 70 22
x12364:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary529

atan$45:	; BinaryAdd £temporary530 1 £temporary529
x12367:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary531 x £temporary530
x12369:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary531 6
x12371:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12374:	mov word [bp + 22], atan$49	; 5: 199 70 22 100 48
x12379:	mov [bp + 24], bp	; 3: 137 110 24
x12382:	add bp, 22	; 3: 131 197 22
x12385:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12388:	fstp qword [bp + 22]	; 3: 221 94 22
x12391:	fld qword [bp + 14]	; 3: 221 70 14
x12394:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary532

atan$51:	; SignedMultiply £temporary533 2 £temporary532
x12397:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary533

atan$53:	; Return £temporary533
x12399:	mov ax, [bp]	; 3: 139 70 0
x12402:	mov di, [bp + 4]	; 3: 139 126 4
x12405:	mov bp, [bp + 2]	; 3: 139 110 2
x12408:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12410:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12412:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12415:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12417:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12420:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12422:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12425:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12428:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12431:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12434:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary534 sign product
x12437:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12439:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary535 £temporary534 denominator
x12442:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12444:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12447:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12450:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary536 sum term
x12453:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12455:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12458:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary537 sign
x12461:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12463:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12466:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12469:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12472:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary538 x x
x12475:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary539 product £temporary538
x12477:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12479:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12482:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12485:	fld qword [@1336$float8$2#]	; 4: 221 6 20 49

atan$83:	; BinaryAdd £temporary540 denominator 2
x12489:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12491:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12494:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12497:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12500:	mov word [bp + 54], atan$89	; 5: 199 70 54 226 48
x12505:	mov [bp + 56], bp	; 3: 137 110 56
x12508:	add bp, 54	; 3: 131 197 54
x12511:	jmp fabs	; 3: 233 26 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary541

atan$91:	; PushFloat 0.000000001
x12514:	fld qword [@1339$float8$0.000000001#]	; 4: 221 6 28 49

atan$92:	; SignedGreaterThanEqual 62 £temporary541 0.000000001
x12518:	fcompp	; 2: 222 217
x12520:	fstsw ax	; 3: 155 223 224
x12523:	sahf	; 1: 158
x12524:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12526:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12529:	mov ax, [bp]	; 3: 139 70 0
x12532:	mov di, [bp + 4]	; 3: 139 126 4
x12535:	mov bp, [bp + 2]	; 3: 139 110 2
x12538:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

@1295$float8$1.57#:
x12540:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1302$float8$0.5#:
x12548:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

@1316$float8$2#:
x12556:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1336$float8$2#:
x12564:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1339$float8$0.000000001#:
x12572:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

acos:	; PushFloat x
x12580:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12583:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12585:	fcompp	; 2: 222 217
x12587:	fstsw ax	; 3: 155 223 224
x12590:	sahf	; 1: 158
x12591:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12593:	fld qword [@1257$float8$1.57#]	; 4: 221 6 222 49

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12597:	mov ax, [bp]	; 3: 139 70 0
x12600:	mov di, [bp + 4]	; 3: 139 126 4
x12603:	mov bp, [bp + 2]	; 3: 139 110 2
x12606:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12608:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12611:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12613:	fcompp	; 2: 222 217
x12615:	fstsw ax	; 3: 155 223 224
x12618:	sahf	; 1: 158
x12619:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12621:	fld qword [@1262$float8$3.14#]	; 4: 221 6 230 49

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12625:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12628:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary506 x
x12631:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary506 6
x12633:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12636:	mov word [bp + 22], acos$15	; 5: 199 70 22 106 49
x12641:	mov [bp + 24], bp	; 3: 137 110 24
x12644:	add bp, 22	; 3: 131 197 22
x12647:	nop	; 1: 144
x12648:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12650:	fstp qword [bp + 22]	; 3: 221 94 22
x12653:	fld qword [bp + 14]	; 3: 221 70 14
x12656:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary507

acos$17:	; BinarySubtract £temporary508 3.14 £temporary507
x12659:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary508

acos$19:	; Return £temporary508
x12661:	mov ax, [bp]	; 3: 139 70 0
x12664:	mov di, [bp + 4]	; 3: 139 126 4
x12667:	mov bp, [bp + 2]	; 3: 139 110 2
x12670:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12672:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12675:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12677:	fcompp	; 2: 222 217
x12679:	fstsw ax	; 3: 155 223 224
x12682:	sahf	; 1: 158
x12683:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12685:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12687:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12690:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary510 x x
x12693:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary511 1 £temporary510
x12695:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary511 6
x12697:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12700:	mov word [bp + 14], acos$32	; 5: 199 70 14 170 49
x12705:	mov [bp + 16], bp	; 3: 137 110 16
x12708:	add bp, 14	; 3: 131 197 14
x12711:	jmp sqrt	; 3: 233 101 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary512

acos$34:	; PushFloat x
x12714:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary513 £temporary512 x
x12717:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary513 6
x12719:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12722:	mov word [bp + 14], acos$38	; 5: 199 70 14 192 49
x12727:	mov [bp + 16], bp	; 3: 137 110 16
x12730:	add bp, 14	; 3: 131 197 14
x12733:	jmp atan	; 3: 233 211 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary514

acos$40:	; SetReturnValue £temporary514

acos$41:	; Return £temporary514
x12736:	mov ax, [bp]	; 3: 139 70 0
x12739:	mov di, [bp + 4]	; 3: 139 126 4
x12742:	mov bp, [bp + 2]	; 3: 139 110 2
x12745:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12747:	mov word [errno], 6	; 6: 199 6 230 10 6 0

acos$43:	; PushZero
x12753:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12755:	mov ax, [bp]	; 3: 139 70 0
x12758:	mov di, [bp + 4]	; 3: 139 126 4
x12761:	mov bp, [bp + 2]	; 3: 139 110 2
x12764:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

@1257$float8$1.57#:
x12766:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1262$float8$3.14#:
x12774:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12782:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12785:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12788:	mov word [bp + 14], sinh$4	; 5: 199 70 14 2 50
x12793:	mov [bp + 16], bp	; 3: 137 110 16
x12796:	add bp, 14	; 3: 131 197 14
x12799:	jmp exp	; 3: 233 66 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary572

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12802:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12805:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary573 x
x12808:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary573 6
x12810:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12813:	mov word [bp + 22], sinh$11	; 5: 199 70 22 27 50
x12818:	mov [bp + 24], bp	; 3: 137 110 24
x12821:	add bp, 22	; 3: 131 197 22
x12824:	jmp exp	; 3: 233 41 248

sinh$11:	; PostCall 14
x12827:	fstp qword [bp + 22]	; 3: 221 94 22
x12830:	fld qword [bp + 14]	; 3: 221 70 14
x12833:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary574

sinh$13:	; BinarySubtract £temporary575 £temporary572 £temporary574
x12836:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12838:	fld qword [@1413$float8$2#]	; 4: 221 6 55 50

sinh$15:	; SignedDivide £temporary576 £temporary575 2
x12842:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary576

sinh$17:	; Return £temporary576
x12844:	mov ax, [bp]	; 3: 139 70 0
x12847:	mov di, [bp + 4]	; 3: 139 126 4
x12850:	mov bp, [bp + 2]	; 3: 139 110 2
x12853:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

@1413$float8$2#:
x12855:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12863:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12866:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12869:	mov word [bp + 14], cosh$4	; 5: 199 70 14 83 50
x12874:	mov [bp + 16], bp	; 3: 137 110 16
x12877:	add bp, 14	; 3: 131 197 14
x12880:	jmp exp	; 3: 233 241 247

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary579

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12883:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12886:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary580 x
x12889:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary580 6
x12891:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12894:	mov word [bp + 22], cosh$11	; 5: 199 70 22 108 50
x12899:	mov [bp + 24], bp	; 3: 137 110 24
x12902:	add bp, 22	; 3: 131 197 22
x12905:	jmp exp	; 3: 233 216 247

cosh$11:	; PostCall 14
x12908:	fstp qword [bp + 22]	; 3: 221 94 22
x12911:	fld qword [bp + 14]	; 3: 221 70 14
x12914:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary581

cosh$13:	; BinaryAdd £temporary582 £temporary579 £temporary581
x12917:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12919:	fld qword [@1423$float8$2#]	; 4: 221 6 136 50

cosh$15:	; SignedDivide £temporary583 £temporary582 2
x12923:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary583

cosh$17:	; Return £temporary583
x12925:	mov ax, [bp]	; 3: 139 70 0
x12928:	mov di, [bp + 4]	; 3: 139 126 4
x12931:	mov bp, [bp + 2]	; 3: 139 110 2
x12934:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

@1423$float8$2#:
x12936:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12944:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12947:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12950:	mov word [bp + 14], tanh$4	; 5: 199 70 14 164 50
x12955:	mov [bp + 16], bp	; 3: 137 110 16
x12958:	add bp, 14	; 3: 131 197 14
x12961:	jmp sinh	; 3: 233 74 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary586

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12964:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12967:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12970:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12973:	mov word [bp + 22], tanh$10	; 5: 199 70 22 187 50
x12978:	mov [bp + 24], bp	; 3: 137 110 24
x12981:	add bp, 22	; 3: 131 197 22
x12984:	nop	; 1: 144
x12985:	jmp cosh	; 2: 235 132

tanh$10:	; PostCall 14
x12987:	fstp qword [bp + 22]	; 3: 221 94 22
x12990:	fld qword [bp + 14]	; 3: 221 70 14
x12993:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary587

tanh$12:	; SignedDivide £temporary588 £temporary586 £temporary587
x12996:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary588

tanh$14:	; Return £temporary588
x12998:	mov ax, [bp]	; 3: 139 70 0
x13001:	mov di, [bp + 4]	; 3: 139 126 4
x13004:	mov bp, [bp + 2]	; 3: 139 110 2
x13007:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x13009:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x13012:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x13014:	fcompp	; 2: 222 217
x13016:	fstsw ax	; 3: 155 223 224
x13019:	sahf	; 1: 158
x13020:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x13024:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x13027:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x13030:	mov word [bp + 16], frexp$8	; 5: 199 70 16 244 50
x13035:	mov [bp + 18], bp	; 3: 137 110 18
x13038:	add bp, 16	; 3: 131 197 16
x13041:	jmp fabs	; 3: 233 8 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary385

frexp$10:	; Parameter 16 £temporary385 6
x13044:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x13047:	mov word [bp + 16], frexp$12	; 5: 199 70 16 5 51
x13052:	mov [bp + 18], bp	; 3: 137 110 18
x13055:	add bp, 16	; 3: 131 197 16
x13058:	jmp @988$log2	; 3: 233 155 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary386

frexp$14:	; IntegralToIntegral £temporary387 £temporary386

frexp$15:	; Assign exponent £temporary387
x13061:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x13064:	fld qword [@1004$float8$2#]	; 4: 221 6 144 51

frexp$18:	; Parameter 18 2 6
x13068:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary388 exponent
x13071:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary388 14
x13074:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x13077:	mov word [bp + 18], frexp$22	; 5: 199 70 18 35 51
x13082:	mov [bp + 20], bp	; 3: 137 110 20
x13085:	add bp, 18	; 3: 131 197 18
x13088:	jmp pow	; 3: 233 120 245

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary389

frexp$24:	; PushFloat x
x13091:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary389 x
x13094:	fcompp	; 2: 222 217
x13096:	fstsw ax	; 3: 155 223 224
x13099:	sahf	; 1: 158
x13100:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x13102:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x13105:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13109:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary393 -> p p 0
x13111:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary393 -> p exponent
x13114:	mov ax, [bp + 16]	; 3: 139 70 16
x13117:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x13119:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13122:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x13125:	fld qword [@1016$float8$2#]	; 4: 221 6 152 51

frexp$33:	; Parameter 18 2 6
x13129:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary394 exponent
x13132:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary394 14
x13135:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x13138:	mov word [bp + 26], frexp$37	; 5: 199 70 26 96 51
x13143:	mov [bp + 28], bp	; 3: 137 110 28
x13146:	add bp, 26	; 3: 131 197 26
x13149:	jmp pow	; 3: 233 59 245

frexp$37:	; PostCall 18
x13152:	fstp qword [bp + 26]	; 3: 221 94 26
x13155:	fld qword [bp + 18]	; 3: 221 70 18
x13158:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary395

frexp$39:	; SignedDivide £temporary396 x £temporary395
x13161:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary396

frexp$41:	; Return £temporary396
x13163:	mov ax, [bp]	; 3: 139 70 0
x13166:	mov di, [bp + 4]	; 3: 139 126 4
x13169:	mov bp, [bp + 2]	; 3: 139 110 2
x13172:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x13174:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13178:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary398 -> p p 0
x13180:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary398 -> p 0
x13183:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x13187:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x13189:	mov ax, [bp]	; 3: 139 70 0
x13192:	mov di, [bp + 4]	; 3: 139 126 4
x13195:	mov bp, [bp + 2]	; 3: 139 110 2
x13198:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@1004$float8$2#:
x13200:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1016$float8$2#:
x13208:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@988$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@988$log2$1:	; PushFloat x
x13216:	fld qword [bp + 6]	; 3: 221 70 6

@988$log2$2:	; Parameter 14 x 6
x13219:	fstp qword [bp + 20]	; 3: 221 94 20

@988$log2$3:	; Call 14 log 0
x13222:	mov word [bp + 14], @988$log2$4	; 5: 199 70 14 180 51
x13227:	mov [bp + 16], bp	; 3: 137 110 16
x13230:	add bp, 14	; 3: 131 197 14
x13233:	jmp log	; 3: 233 167 243

@988$log2$4:	; PostCall 14

@988$log2$5:	; GetReturnValue £temporary380

@988$log2$6:	; PushFloat 0.693
x13236:	fld qword [@990$float8$0.693#]	; 4: 221 6 205 51

@988$log2$7:	; SignedDivide £temporary381 £temporary380 0.693
x13240:	fdiv	; 2: 222 249

@988$log2$8:	; FloatingToIntegral £temporary382 £temporary381
x13242:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13246:	mov bx, [container2bytes#]	; 4: 139 30 79 27

@988$log2$9:	; SetReturnValue £temporary382

@988$log2$10:	; Return £temporary382
x13250:	mov ax, [bp]	; 3: 139 70 0
x13253:	mov di, [bp + 4]	; 3: 139 126 4
x13256:	mov bp, [bp + 2]	; 3: 139 110 2
x13259:	jmp ax	; 2: 255 224

@988$log2$11:	; FunctionEnd log2

@990$float8$0.693#:
x13261:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x13269:	mov word [bp + 14], @2257$string_25s3A2025s2E0A#	; 5: 199 70 14 21 52

perror$2:	; Parameter 8 s 8
x13274:	mov ax, [bp + 6]	; 3: 139 70 6
x13277:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13280:	mov ax, [errno]	; 3: 161 230 10
x13283:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13286:	mov word [bp + 18], perror$6	; 5: 199 70 18 244 51
x13291:	mov [bp + 20], bp	; 3: 137 110 20
x13294:	add bp, 18	; 3: 131 197 18
x13297:	nop	; 1: 144
x13298:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary971

perror$8:	; Parameter 8 £temporary971 10
x13300:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13303:	mov word [bp + 8], perror$10	; 5: 199 70 8 10 52
x13308:	mov [bp + 10], bp	; 3: 137 110 10
x13311:	add bp, 8	; 3: 131 197 8
x13314:	mov di, bp	; 2: 137 239
x13316:	add di, 4	; 3: 131 199 4
x13319:	jmp printf	; 3: 233 250 216

perror$10:	; PostCall 8

perror$11:	; Return 0
x13322:	mov ax, [bp]	; 3: 139 70 0
x13325:	mov di, [bp + 4]	; 3: 139 126 4
x13328:	mov bp, [bp + 2]	; 3: 139 110 2
x13331:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

@2257$string_25s3A2025s2E0A#:
x13333:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13342:	mov word [bp + 8], strerror$2	; 5: 199 70 8 44 52
x13347:	mov [bp + 10], bp	; 3: 137 110 10
x13350:	add bp, 8	; 3: 131 197 8
x13353:	jmp localeconv	; 3: 233 75 234

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary3887

strerror$4:	; Assign localeConvPtr £temporary3887
x13356:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 14 localeConvPtr 0
x13359:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13363:	je strerror$14	; 2: 116 42

strerror$6:	; Deref £temporary3889 -> localeConvPtr localeConvPtr 16
x13365:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign messageList £temporary3889 -> localeConvPtr
x13368:	mov ax, [si + 16]	; 3: 139 68 16
x13371:	mov [bp + 10], ax	; 3: 137 70 10

strerror$8:	; Equal 14 messageList 0
x13374:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13378:	je strerror$14	; 2: 116 27

strerror$9:	; UnsignedMultiply £temporary3892 errno 2
x13380:	mov ax, [bp + 6]	; 3: 139 70 6
x13383:	xor dx, dx	; 2: 49 210
x13385:	mul word [@8681$int2$2#]	; 4: 247 38 109 52

strerror$10:	; BinaryAdd £temporary3893 messageList £temporary3892
x13389:	mov si, [bp + 10]	; 3: 139 118 10
x13392:	add si, ax	; 2: 1 198

strerror$11:	; Deref £temporary3891 -> £temporary3893 £temporary3893 0

strerror$12:	; SetReturnValue £temporary3891 -> £temporary3893
x13394:	mov bx, [si]	; 2: 139 28

strerror$13:	; Return £temporary3891 -> £temporary3893
x13396:	mov ax, [bp]	; 3: 139 70 0
x13399:	mov di, [bp + 4]	; 3: 139 126 4
x13402:	mov bp, [bp + 2]	; 3: 139 110 2
x13405:	jmp ax	; 2: 255 224

strerror$14:	; SetReturnValue 0
x13407:	mov bx, 0	; 3: 187 0 0

strerror$15:	; Return 0
x13410:	mov ax, [bp]	; 3: 139 70 0
x13413:	mov di, [bp + 4]	; 3: 139 126 4
x13416:	mov bp, [bp + 2]	; 3: 139 110 2
x13419:	jmp ax	; 2: 255 224

strerror$16:	; FunctionEnd strerror

@8681$int2$2#:
x13421:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13423:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13426:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13429:	mov word [bp + 16], modf$4	; 5: 199 70 16 131 52
x13434:	mov [bp + 18], bp	; 3: 137 110 18
x13437:	add bp, 16	; 3: 131 197 16
x13440:	jmp fabs	; 3: 233 121 240

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary413

modf$6:	; PopFloat abs_x
x13443:	fstp qword [bp + 16]	; 3: 221 94 16

modf$7:	; PushFloat abs_x
x13446:	fld qword [bp + 16]	; 3: 221 70 16

modf$8:	; FloatingToIntegral £temporary414 abs_x
x13449:	fistp dword [container4bytes#]	; 4: 219 30 80 36
x13453:	mov eax, [container4bytes#]	; 4: 102 161 80 36

modf$9:	; IntegralToFloating £temporary415 £temporary414
x13457:	mov [container4bytes#], eax	; 4: 102 163 80 36
x13461:	fild dword [container4bytes#]	; 4: 219 6 80 36

modf$10:	; PopFloat integral
x13465:	fstp qword [bp + 24]	; 3: 221 94 24

modf$11:	; PushFloat abs_x
x13468:	fld qword [bp + 16]	; 3: 221 70 16

modf$12:	; PushFloat integral
x13471:	fld qword [bp + 24]	; 3: 221 70 24

modf$13:	; BinarySubtract £temporary416 abs_x integral
x13474:	fsub	; 2: 222 233

modf$14:	; PopFloat fractional
x13476:	fstp qword [bp + 32]	; 3: 221 94 32

modf$15:	; Equal 26 p 0
x13479:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13483:	je modf$26	; 2: 116 28

modf$16:	; Deref £temporary418 -> p p 0
x13485:	mov si, [bp + 14]	; 3: 139 118 14

modf$17:	; PushFloat x
x13488:	fld qword [bp + 6]	; 3: 221 70 6

modf$18:	; PushZero
x13491:	fldz	; 2: 217 238

modf$19:	; SignedLessThanEqual 23 x 0
x13493:	fcompp	; 2: 222 217
x13495:	fstsw ax	; 3: 155 223 224
x13498:	sahf	; 1: 158
x13499:	jae modf$23	; 2: 115 5

modf$20:	; PushFloat integral
x13501:	fld qword [bp + 24]	; 3: 221 70 24

modf$21:	; DecreaseStack

modf$22:	; Goto 25
x13504:	jmp modf$25	; 2: 235 5

modf$23:	; PushFloat integral
x13506:	fld qword [bp + 24]	; 3: 221 70 24

modf$24:	; UnarySubtract £temporary420 integral
x13509:	fchs	; 2: 217 224

modf$25:	; PopFloat £temporary418 -> p
x13511:	fstp qword [si]	; 2: 221 28

modf$26:	; PushFloat x
x13513:	fld qword [bp + 6]	; 3: 221 70 6

modf$27:	; PushZero
x13516:	fldz	; 2: 217 238

modf$28:	; SignedLessThanEqual 32 x 0
x13518:	fcompp	; 2: 222 217
x13520:	fstsw ax	; 3: 155 223 224
x13523:	sahf	; 1: 158
x13524:	jae modf$32	; 2: 115 5

modf$29:	; PushFloat fractional
x13526:	fld qword [bp + 32]	; 3: 221 70 32

modf$30:	; DecreaseStack

modf$31:	; Goto 34
x13529:	jmp modf$34	; 2: 235 5

modf$32:	; PushFloat fractional
x13531:	fld qword [bp + 32]	; 3: 221 70 32

modf$33:	; UnarySubtract £temporary426 fractional
x13534:	fchs	; 2: 217 224

modf$34:	; SetReturnValue £temporary430

modf$35:	; Return £temporary430
x13536:	mov ax, [bp]	; 3: 139 70 0
x13539:	mov di, [bp + 4]	; 3: 139 126 4
x13542:	mov bp, [bp + 2]	; 3: 139 110 2
x13545:	jmp ax	; 2: 255 224

modf$36:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13547:	mov word [bp + 28], @10385$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 65 54

math_test_2$2:	; PushFloat x
x13552:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13555:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13558:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13561:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13564:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13567:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13570:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13573:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13576:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 22 53
x13581:	mov [bp + 48], bp	; 3: 137 110 48
x13584:	add bp, 46	; 3: 131 197 46
x13587:	jmp fmod	; 3: 233 112 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary4795

math_test_2$14:	; Parameter 22 £temporary4795 24
x13590:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13593:	mov ax, [errno]	; 3: 161 230 10
x13596:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13599:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 50 53
x13604:	mov [bp + 24], bp	; 3: 137 110 24
x13607:	add bp, 22	; 3: 131 197 22
x13610:	mov di, bp	; 2: 137 239
x13612:	add di, 26	; 3: 131 199 26
x13615:	jmp printf	; 3: 233 210 215

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13618:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13624:	mov word [bp + 28], @10390$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 96 54

math_test_2$21:	; PushFloat x
x13629:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13632:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13635:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13638:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13641:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13644:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13647:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13650:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13653:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 99 53
x13658:	mov [bp + 48], bp	; 3: 137 110 48
x13661:	add bp, 46	; 3: 131 197 46
x13664:	jmp atan2	; 3: 233 82 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary4797

math_test_2$33:	; Parameter 22 £temporary4797 24
x13667:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13670:	mov ax, [errno]	; 3: 161 230 10
x13673:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13676:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 127 53
x13681:	mov [bp + 24], bp	; 3: 137 110 24
x13684:	add bp, 22	; 3: 131 197 22
x13687:	mov di, bp	; 2: 137 239
x13689:	add di, 26	; 3: 131 199 26
x13692:	jmp printf	; 3: 233 133 215

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13695:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13701:	mov word [bp + 28], @10395$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 128 54

math_test_2$40:	; PushFloat x
x13706:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13709:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13712:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13715:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13718:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13721:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13724:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13727:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13730:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 176 53
x13735:	mov [bp + 48], bp	; 3: 137 110 48
x13738:	add bp, 46	; 3: 131 197 46
x13741:	jmp pow	; 3: 233 235 242

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary4799

math_test_2$52:	; Parameter 22 £temporary4799 24
x13744:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13747:	mov ax, [errno]	; 3: 161 230 10
x13750:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13753:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 204 53
x13758:	mov [bp + 24], bp	; 3: 137 110 24
x13761:	add bp, 22	; 3: 131 197 22
x13764:	mov di, bp	; 2: 137 239
x13766:	add di, 26	; 3: 131 199 26
x13769:	jmp printf	; 3: 233 56 215

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13772:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13778:	mov word [bp + 28], @10400$string_0A#	; 5: 199 70 28 158 54

math_test_2$59:	; Call 22 printf 0
x13783:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 231 53
x13788:	mov [bp + 24], bp	; 3: 137 110 24
x13791:	add bp, 22	; 3: 131 197 22
x13794:	mov di, bp	; 2: 137 239
x13796:	jmp printf	; 3: 233 29 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13799:	mov word [bp + 28], @10402$string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 160 54

math_test_2$63:	; PushFloat x
x13804:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13807:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13810:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary4802 y
x13813:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13817:	mov ax, [container2bytes#]	; 3: 161 79 27

math_test_2$67:	; Parameter 22 £temporary4802 16
x13820:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13823:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13826:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13829:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary4803 y
x13832:	fistp word [container2bytes#]	; 4: 223 30 79 27
x13836:	mov ax, [container2bytes#]	; 3: 161 79 27

math_test_2$73:	; Parameter 22 £temporary4803 32
x13839:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13842:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 32 54
x13847:	mov [bp + 42], bp	; 3: 137 110 42
x13850:	add bp, 40	; 3: 131 197 40
x13853:	jmp ldexp	; 3: 233 235 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary4804

math_test_2$77:	; Parameter 22 £temporary4804 18
x13856:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13859:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 54 54
x13864:	mov [bp + 24], bp	; 3: 137 110 24
x13867:	add bp, 22	; 3: 131 197 22
x13870:	mov di, bp	; 2: 137 239
x13872:	add di, 18	; 3: 131 199 18
x13875:	jmp printf	; 3: 233 206 214

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13878:	mov ax, [bp]	; 3: 139 70 0
x13881:	mov di, [bp + 4]	; 3: 139 126 4
x13884:	mov bp, [bp + 2]	; 3: 139 110 2
x13887:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

@10385$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13889:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10390$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13920:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10395$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13952:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10400$string_0A#:
x13982:	db 10, 0	; 2: 10 0

@10402$string_ldexp2825f2C2025i29203D2025f0A0A#:
x13984:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x14005:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x14008:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x14010:	fcompp	; 2: 222 217
x14012:	fstsw ax	; 3: 155 223 224
x14015:	sahf	; 1: 158
x14016:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x14018:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x14021:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary549 x y
x14024:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary549 6
x14026:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x14029:	mov word [bp + 22], atan2$9	; 5: 199 70 22 219 54
x14034:	mov [bp + 24], bp	; 3: 137 110 24
x14037:	add bp, 22	; 3: 131 197 22
x14040:	jmp atan	; 3: 233 184 248

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary550

atan2$11:	; SetReturnValue £temporary550

atan2$12:	; Return £temporary550
x14043:	mov ax, [bp]	; 3: 139 70 0
x14046:	mov di, [bp + 4]	; 3: 139 126 4
x14049:	mov bp, [bp + 2]	; 3: 139 110 2
x14052:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x14054:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x14057:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x14059:	fcompp	; 2: 222 217
x14061:	fstsw ax	; 3: 155 223 224
x14064:	sahf	; 1: 158
x14065:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x14067:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x14070:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x14072:	fcompp	; 2: 222 217
x14074:	fstsw ax	; 3: 155 223 224
x14077:	sahf	; 1: 158
x14078:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x14080:	fld qword [@1360$float8$3.14#]	; 4: 221 6 235 55

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14084:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x14087:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x14090:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary554 x y
x14093:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary554 6
x14095:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x14098:	mov word [bp + 30], atan2$26	; 5: 199 70 30 32 55
x14103:	mov [bp + 32], bp	; 3: 137 110 32
x14106:	add bp, 30	; 3: 131 197 30
x14109:	jmp atan	; 3: 233 115 248

atan2$26:	; PostCall 22
x14112:	fstp qword [bp + 30]	; 3: 221 94 30
x14115:	fld qword [bp + 22]	; 3: 221 70 22
x14118:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary555

atan2$28:	; BinaryAdd £temporary556 3.14 £temporary555
x14121:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary556

atan2$30:	; Return £temporary556
x14123:	mov ax, [bp]	; 3: 139 70 0
x14126:	mov di, [bp + 4]	; 3: 139 126 4
x14129:	mov bp, [bp + 2]	; 3: 139 110 2
x14132:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x14134:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x14137:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x14139:	fcompp	; 2: 222 217
x14141:	fstsw ax	; 3: 155 223 224
x14144:	sahf	; 1: 158
x14145:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x14147:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x14150:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x14152:	fcompp	; 2: 222 217
x14154:	fstsw ax	; 3: 155 223 224
x14157:	sahf	; 1: 158
x14158:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x14160:	fld qword [@1373$float8$minus3.14#]	; 4: 221 6 243 55

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14164:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x14167:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x14170:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary560 x y
x14173:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary560 6
x14175:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x14178:	mov word [bp + 30], atan2$44	; 5: 199 70 30 112 55
x14183:	mov [bp + 32], bp	; 3: 137 110 32
x14186:	add bp, 30	; 3: 131 197 30
x14189:	jmp atan	; 3: 233 35 248

atan2$44:	; PostCall 22
x14192:	fstp qword [bp + 30]	; 3: 221 94 30
x14195:	fld qword [bp + 22]	; 3: 221 70 22
x14198:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary561

atan2$46:	; BinaryAdd £temporary562 -3.14 £temporary561
x14201:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary562

atan2$48:	; Return £temporary562
x14203:	mov ax, [bp]	; 3: 139 70 0
x14206:	mov di, [bp + 4]	; 3: 139 126 4
x14209:	mov bp, [bp + 2]	; 3: 139 110 2
x14212:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x14214:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x14217:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x14219:	fcompp	; 2: 222 217
x14221:	fstsw ax	; 3: 155 223 224
x14224:	sahf	; 1: 158
x14225:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x14227:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x14230:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x14232:	fcompp	; 2: 222 217
x14234:	fstsw ax	; 3: 155 223 224
x14237:	sahf	; 1: 158
x14238:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x14240:	fld qword [@1387$float8$1.57#]	; 4: 221 6 251 55

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x14244:	mov ax, [bp]	; 3: 139 70 0
x14247:	mov di, [bp + 4]	; 3: 139 126 4
x14250:	mov bp, [bp + 2]	; 3: 139 110 2
x14253:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x14255:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x14258:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x14260:	fcompp	; 2: 222 217
x14262:	fstsw ax	; 3: 155 223 224
x14265:	sahf	; 1: 158
x14266:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x14268:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14271:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14273:	fcompp	; 2: 222 217
x14275:	fstsw ax	; 3: 155 223 224
x14278:	sahf	; 1: 158
x14279:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14281:	fld qword [@1399$float8$minus1.57#]	; 4: 221 6 3 56

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14285:	mov ax, [bp]	; 3: 139 70 0
x14288:	mov di, [bp + 4]	; 3: 139 126 4
x14291:	mov bp, [bp + 2]	; 3: 139 110 2
x14294:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14296:	mov word [errno], 6	; 6: 199 6 230 10 6 0

atan2$68:	; PushZero
x14302:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14304:	mov ax, [bp]	; 3: 139 70 0
x14307:	mov di, [bp + 4]	; 3: 139 126 4
x14310:	mov bp, [bp + 2]	; 3: 139 110 2
x14313:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

@1360$float8$3.14#:
x14315:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@1373$float8$minus3.14#:
x14323:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@1387$float8$1.57#:
x14331:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1399$float8$minus1.57#:
x14339:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

ldexp:	; PushFloat x
x14347:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14350:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14353:	fld qword [@981$float8$2#]	; 4: 221 6 66 56

ldexp$3:	; Parameter 16 2 6
x14357:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary375 n
x14360:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary375 14
x14363:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14366:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 44 56
x14371:	mov [bp + 26], bp	; 3: 137 110 26
x14374:	add bp, 24	; 3: 131 197 24
x14377:	jmp pow	; 3: 233 111 240

ldexp$7:	; PostCall 16
x14380:	fstp qword [bp + 24]	; 3: 221 94 24
x14383:	fld qword [bp + 16]	; 3: 221 70 16
x14386:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary376

ldexp$9:	; SignedMultiply £temporary377 x £temporary376
x14389:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary377

ldexp$11:	; Return £temporary377
x14391:	mov ax, [bp]	; 3: 139 70 0
x14394:	mov di, [bp + 4]	; 3: 139 126 4
x14397:	mov bp, [bp + 2]	; 3: 139 110 2
x14400:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

@981$float8$2#:
x14402:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14410:	mov word [bp + 12], @10452$string_in2Etxt#	; 5: 199 70 12 2 78

file_test$2:	; Parameter 6 string_r# 8
x14415:	mov word [bp + 14], @10453$string_r#	; 5: 199 70 14 9 78

file_test$3:	; Call 6 fopen 0
x14420:	mov word [bp + 6], file_test$4	; 5: 199 70 6 98 56
x14425:	mov [bp + 8], bp	; 3: 137 110 8
x14428:	add bp, 6	; 3: 131 197 6
x14431:	jmp fopen	; 3: 233 52 34

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary4834

file_test$6:	; Assign inFilePtr £temporary4834
x14434:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14437:	mov word [bp + 14], @10456$string_outX2Etxt#	; 5: 199 70 14 11 78

file_test$9:	; Parameter 8 string_w# 8
x14442:	mov word [bp + 16], @10457$string_w#	; 5: 199 70 16 20 78

file_test$10:	; Call 8 fopen 0
x14447:	mov word [bp + 8], file_test$11	; 5: 199 70 8 125 56
x14452:	mov [bp + 10], bp	; 3: 137 110 10
x14455:	add bp, 8	; 3: 131 197 8
x14458:	jmp fopen	; 3: 233 25 34

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary4835

file_test$13:	; Assign outFilePtr £temporary4835
x14461:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14464:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14468:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14470:	mov ax, [stderr]	; 3: 161 22 78
x14473:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14476:	mov word [bp + 18], @10465$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 24 78

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14481:	mov word [bp + 20], @10466$string_inFilePtr20213D20NULL#	; 5: 199 70 20 70 78

file_test$19:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14486:	mov word [bp + 22], @10467$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 88 78

file_test$20:	; Parameter 10 14 14
x14491:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14496:	mov word [bp + 10], file_test$22	; 5: 199 70 10 179 56
x14501:	mov [bp + 12], bp	; 3: 137 110 12
x14504:	add bp, 10	; 3: 131 197 10
x14507:	mov di, bp	; 2: 137 239
x14509:	add di, 6	; 3: 131 199 6
x14512:	jmp fprintf	; 3: 233 72 38

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14515:	mov word [bp + 10], file_test$25	; 5: 199 70 10 193 56
x14520:	mov [bp + 12], bp	; 3: 137 110 12
x14523:	add bp, 10	; 3: 131 197 10
x14526:	jmp abort	; 3: 233 117 38

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14529:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14533:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14535:	mov ax, [stderr]	; 3: 161 22 78
x14538:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14541:	mov word [bp + 18], @10476$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 153 78

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14546:	mov word [bp + 20], @10477$string_outFilePtr20213D20NULL#	; 5: 199 70 20 199 78

file_test$31:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14551:	mov word [bp + 22], @10478$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 218 78

file_test$32:	; Parameter 10 15 14
x14556:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14561:	mov word [bp + 10], file_test$34	; 5: 199 70 10 244 56
x14566:	mov [bp + 12], bp	; 3: 137 110 12
x14569:	add bp, 10	; 3: 131 197 10
x14572:	mov di, bp	; 2: 137 239
x14574:	add di, 6	; 3: 131 199 6
x14577:	jmp fprintf	; 3: 233 7 38

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14580:	mov word [bp + 10], file_test$37	; 5: 199 70 10 2 57
x14585:	mov [bp + 12], bp	; 3: 137 110 12
x14588:	add bp, 10	; 3: 131 197 10
x14591:	jmp abort	; 3: 233 52 38

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14594:	mov ax, [bp + 6]	; 3: 139 70 6
x14597:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14600:	mov word [bp + 10], file_test$41	; 5: 199 70 10 22 57
x14605:	mov [bp + 12], bp	; 3: 137 110 12
x14608:	add bp, 10	; 3: 131 197 10
x14611:	jmp feof	; 3: 233 49 38

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary4844

file_test$43:	; NotEqual 75 £temporary4844 0
x14614:	cmp bx, 0	; 3: 131 251 0
x14617:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14621:	mov ax, [bp + 6]	; 3: 139 70 6
x14624:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14627:	mov word [bp + 26], @10487$string_25lf#	; 5: 199 70 26 27 79

file_test$47:	; address £temporary4847 value
x14632:	mov si, bp	; 2: 137 238
x14634:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary4847 10
x14637:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14640:	mov word [bp + 18], file_test$50	; 5: 199 70 18 67 57
x14645:	mov [bp + 20], bp	; 3: 137 110 20
x14648:	add bp, 18	; 3: 131 197 18
x14651:	mov di, bp	; 2: 137 239
x14653:	add di, 2	; 3: 131 199 2
x14656:	jmp fscanf	; 3: 233 153 38

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14659:	mov word [bp + 24], @10490$string_X12025f0A#	; 5: 199 70 24 31 79

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14664:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14667:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14670:	mov word [bp + 26], file_test$57	; 5: 199 70 26 92 57
x14675:	mov [bp + 28], bp	; 3: 137 110 28
x14678:	add bp, 26	; 3: 131 197 26
x14681:	jmp sqrt	; 3: 233 179 245

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary4849

file_test$59:	; Parameter 18 £temporary4849 8
x14684:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14687:	mov word [bp + 18], file_test$61	; 5: 199 70 18 114 57
x14692:	mov [bp + 20], bp	; 3: 137 110 20
x14695:	add bp, 18	; 3: 131 197 18
x14698:	mov di, bp	; 2: 137 239
x14700:	add di, 8	; 3: 131 199 8
x14703:	jmp printf	; 3: 233 146 211

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14706:	mov ax, [bp + 8]	; 3: 139 70 8
x14709:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14712:	mov word [bp + 26], @10493$string_X22025f0A#	; 5: 199 70 26 38 79

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14717:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14720:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14723:	mov word [bp + 28], file_test$69	; 5: 199 70 28 145 57
x14728:	mov [bp + 30], bp	; 3: 137 110 30
x14731:	add bp, 28	; 3: 131 197 28
x14734:	jmp sqrt	; 3: 233 126 245

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary4851

file_test$71:	; Parameter 18 £temporary4851 10
x14737:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14740:	mov word [bp + 18], file_test$73	; 5: 199 70 18 167 57
x14745:	mov [bp + 20], bp	; 3: 137 110 20
x14748:	add bp, 18	; 3: 131 197 18
x14751:	mov di, bp	; 2: 137 239
x14753:	add di, 8	; 3: 131 199 8
x14756:	jmp fprintf	; 3: 233 84 37

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14759:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14762:	mov word [bp + 16], @10496$string_0A#	; 5: 199 70 16 45 79

file_test$77:	; Call 10 printf 0
x14767:	mov word [bp + 10], file_test$78	; 5: 199 70 10 191 57
x14772:	mov [bp + 12], bp	; 3: 137 110 12
x14775:	add bp, 10	; 3: 131 197 10
x14778:	mov di, bp	; 2: 137 239
x14780:	jmp printf	; 3: 233 69 211

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14783:	mov ax, [bp + 6]	; 3: 139 70 6
x14786:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14789:	mov word [bp + 10], file_test$82	; 5: 199 70 10 211 57
x14794:	mov [bp + 12], bp	; 3: 137 110 12
x14797:	add bp, 10	; 3: 131 197 10
x14800:	jmp fclose	; 3: 233 56 56

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14803:	mov ax, [bp + 8]	; 3: 139 70 8
x14806:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14809:	mov word [bp + 10], file_test$86	; 5: 199 70 10 231 57
x14814:	mov [bp + 12], bp	; 3: 137 110 12
x14817:	add bp, 10	; 3: 131 197 10
x14820:	jmp fclose	; 3: 233 36 56

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14823:	mov word [bp + 12], @10500$string_in2Etxt#	; 5: 199 70 12 47 79

file_test$89:	; Parameter 6 string_r# 8
x14828:	mov word [bp + 14], @10501$string_r#	; 5: 199 70 14 54 79

file_test$90:	; Call 6 fopen 0
x14833:	mov word [bp + 6], file_test$91	; 5: 199 70 6 255 57
x14838:	mov [bp + 8], bp	; 3: 137 110 8
x14841:	add bp, 6	; 3: 131 197 6
x14844:	jmp fopen	; 3: 233 151 32

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary4856

file_test$93:	; Assign inFilePtr £temporary4856
x14847:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14850:	mov word [bp + 14], @10504$string_outY2Etxt#	; 5: 199 70 14 56 79

file_test$96:	; Parameter 8 string_w# 8
x14855:	mov word [bp + 16], @10505$string_w#	; 5: 199 70 16 65 79

file_test$97:	; Call 8 fopen 0
x14860:	mov word [bp + 8], file_test$98	; 5: 199 70 8 26 58
x14865:	mov [bp + 10], bp	; 3: 137 110 10
x14868:	add bp, 8	; 3: 131 197 8
x14871:	jmp fopen	; 3: 233 124 32

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary4857

file_test$100:	; Assign outFilePtr £temporary4857
x14874:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14877:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14881:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14883:	mov ax, [stderr]	; 3: 161 22 78
x14886:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14889:	mov word [bp + 18], @10513$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 67 79

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14894:	mov word [bp + 20], @10514$string_inFilePtr20213D20NULL#	; 5: 199 70 20 113 79

file_test$106:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14899:	mov word [bp + 22], @10515$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 131 79

file_test$107:	; Parameter 10 34 14
x14904:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14909:	mov word [bp + 10], file_test$109	; 5: 199 70 10 80 58
x14914:	mov [bp + 12], bp	; 3: 137 110 12
x14917:	add bp, 10	; 3: 131 197 10
x14920:	mov di, bp	; 2: 137 239
x14922:	add di, 6	; 3: 131 199 6
x14925:	jmp fprintf	; 3: 233 171 36

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14928:	mov word [bp + 10], file_test$112	; 5: 199 70 10 94 58
x14933:	mov [bp + 12], bp	; 3: 137 110 12
x14936:	add bp, 10	; 3: 131 197 10
x14939:	jmp abort	; 3: 233 216 36

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14942:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14946:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14948:	mov ax, [stderr]	; 3: 161 22 78
x14951:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14954:	mov word [bp + 18], @10524$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 196 79

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14959:	mov word [bp + 20], @10525$string_outFilePtr20213D20NULL#	; 5: 199 70 20 242 79

file_test$118:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14964:	mov word [bp + 22], @10526$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 5 80

file_test$119:	; Parameter 10 35 14
x14969:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14974:	mov word [bp + 10], file_test$121	; 5: 199 70 10 145 58
x14979:	mov [bp + 12], bp	; 3: 137 110 12
x14982:	add bp, 10	; 3: 131 197 10
x14985:	mov di, bp	; 2: 137 239
x14987:	add di, 6	; 3: 131 199 6
x14990:	jmp fprintf	; 3: 233 106 36

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14993:	mov word [bp + 10], file_test$124	; 5: 199 70 10 159 58
x14998:	mov [bp + 12], bp	; 3: 137 110 12
x15001:	add bp, 10	; 3: 131 197 10
x15004:	jmp abort	; 3: 233 151 36

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x15007:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x15012:	mov ax, [bp + 6]	; 3: 139 70 6
x15015:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x15018:	mov word [bp + 22], @10534$string_25i#	; 5: 199 70 22 70 80

file_test$129:	; address £temporary4866 size
x15023:	mov si, bp	; 2: 137 238
x15025:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary4866 10
x15028:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x15031:	mov word [bp + 14], file_test$132	; 5: 199 70 14 202 58
x15036:	mov [bp + 16], bp	; 3: 137 110 16
x15039:	add bp, 14	; 3: 131 197 14
x15042:	mov di, bp	; 2: 137 239
x15044:	add di, 2	; 3: 131 199 2
x15047:	jmp fscanf	; 3: 233 18 37

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x15050:	mov word [bp + 20], @10537$string_size2025i0A#	; 5: 199 70 20 73 80

file_test$135:	; Parameter 14 size 8
x15055:	mov ax, [bp + 10]	; 3: 139 70 10
x15058:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x15061:	mov word [bp + 14], file_test$137	; 5: 199 70 14 232 58
x15066:	mov [bp + 16], bp	; 3: 137 110 16
x15069:	add bp, 14	; 3: 131 197 14
x15072:	mov di, bp	; 2: 137 239
x15074:	add di, 2	; 3: 131 199 2
x15077:	jmp printf	; 3: 233 28 210

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x15080:	mov ax, [bp + 8]	; 3: 139 70 8
x15083:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x15086:	mov word [bp + 22], @10539$string_Y20size2025i0A#	; 5: 199 70 22 82 80

file_test$141:	; Parameter 14 size 10
x15091:	mov ax, [bp + 10]	; 3: 139 70 10
x15094:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x15097:	mov word [bp + 14], file_test$143	; 5: 199 70 14 12 59
x15102:	mov [bp + 16], bp	; 3: 137 110 16
x15105:	add bp, 14	; 3: 131 197 14
x15108:	mov di, bp	; 2: 137 239
x15110:	add di, 2	; 3: 131 199 2
x15113:	jmp fprintf	; 3: 233 239 35

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x15116:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x15121:	mov ax, [bp + 10]	; 3: 139 70 10
x15124:	cmp [bp + 12], ax	; 3: 57 70 12
x15127:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x15131:	mov ax, [bp + 6]	; 3: 139 70 6
x15134:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x15137:	mov word [bp + 30], @10547$string_25lf#	; 5: 199 70 30 93 80

file_test$149:	; address £temporary4872 value
x15142:	mov si, bp	; 2: 137 238
x15144:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary4872 10
x15147:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x15150:	mov word [bp + 22], file_test$152	; 5: 199 70 22 65 59
x15155:	mov [bp + 24], bp	; 3: 137 110 24
x15158:	add bp, 22	; 3: 131 197 22
x15161:	mov di, bp	; 2: 137 239
x15163:	add di, 2	; 3: 131 199 2
x15166:	jmp fscanf	; 3: 233 155 36

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x15169:	mov word [bp + 28], @10550$string_Y12025f0A#	; 5: 199 70 28 97 80

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x15174:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x15177:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x15180:	mov word [bp + 30], file_test$159	; 5: 199 70 30 90 59
x15185:	mov [bp + 32], bp	; 3: 137 110 32
x15188:	add bp, 30	; 3: 131 197 30
x15191:	jmp sqrt	; 3: 233 181 243

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary4874

file_test$161:	; Parameter 22 £temporary4874 8
x15194:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x15197:	mov word [bp + 22], file_test$163	; 5: 199 70 22 112 59
x15202:	mov [bp + 24], bp	; 3: 137 110 24
x15205:	add bp, 22	; 3: 131 197 22
x15208:	mov di, bp	; 2: 137 239
x15210:	add di, 8	; 3: 131 199 8
x15213:	jmp printf	; 3: 233 148 209

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x15216:	mov ax, [bp + 8]	; 3: 139 70 8
x15219:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x15222:	mov word [bp + 30], @10553$string_Y22025f0A#	; 5: 199 70 30 104 80

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x15227:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x15230:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x15233:	mov word [bp + 32], file_test$171	; 5: 199 70 32 143 59
x15238:	mov [bp + 34], bp	; 3: 137 110 34
x15241:	add bp, 32	; 3: 131 197 32
x15244:	jmp sqrt	; 3: 233 128 243

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary4876

file_test$173:	; Parameter 22 £temporary4876 10
x15247:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x15250:	mov word [bp + 22], file_test$175	; 5: 199 70 22 165 59
x15255:	mov [bp + 24], bp	; 3: 137 110 24
x15258:	add bp, 22	; 3: 131 197 22
x15261:	mov di, bp	; 2: 137 239
x15263:	add di, 8	; 3: 131 199 8
x15266:	jmp fprintf	; 3: 233 86 35

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x15269:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x15272:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x15275:	mov word [bp + 20], @10556$string_0A#	; 5: 199 70 20 111 80

file_test$180:	; Call 14 printf 0
x15280:	mov word [bp + 14], file_test$181	; 5: 199 70 14 192 59
x15285:	mov [bp + 16], bp	; 3: 137 110 16
x15288:	add bp, 14	; 3: 131 197 14
x15291:	mov di, bp	; 2: 137 239
x15293:	jmp printf	; 3: 233 68 209

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x15296:	mov ax, [bp + 6]	; 3: 139 70 6
x15299:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x15302:	mov word [bp + 10], file_test$185	; 5: 199 70 10 212 59
x15307:	mov [bp + 12], bp	; 3: 137 110 12
x15310:	add bp, 10	; 3: 131 197 10
x15313:	jmp fclose	; 3: 233 55 54

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15316:	mov ax, [bp + 8]	; 3: 139 70 8
x15319:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15322:	mov word [bp + 10], file_test$189	; 5: 199 70 10 232 59
x15327:	mov [bp + 12], bp	; 3: 137 110 12
x15330:	add bp, 10	; 3: 131 197 10
x15333:	jmp fclose	; 3: 233 35 54

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_Y#
x15336:	mov word [bp + 6], @10560$string_Y#	; 5: 199 70 6 113 80

file_test$191:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$192:	; Parameter 8 sourceFile 6
x15341:	mov ax, [bp + 6]	; 3: 139 70 6
x15344:	mov [bp + 14], ax	; 3: 137 70 14

file_test$193:	; Call 8 remove 0
x15347:	mov word [bp + 8], file_test$194	; 5: 199 70 8 1 60
x15352:	mov [bp + 10], bp	; 3: 137 110 10
x15355:	add bp, 8	; 3: 131 197 8
x15358:	jmp remove	; 3: 233 205 54

file_test$194:	; PostCall 8

file_test$195:	; GetReturnValue £temporary4881

file_test$196:	; NotEqual 203 £temporary4881 0
x15361:	cmp bx, 0	; 3: 131 251 0
x15364:	jne file_test$203	; 2: 117 32

file_test$197:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$198:	; Parameter 8 string_2225s2220has20been20removed0A# 6
x15366:	mov word [bp + 14], @10566$string_2225s2220has20been20removed0A#	; 5: 199 70 14 115 80

file_test$199:	; Parameter 8 sourceFile 8
x15371:	mov ax, [bp + 6]	; 3: 139 70 6
x15374:	mov [bp + 16], ax	; 3: 137 70 16

file_test$200:	; Call 8 printf 0
x15377:	mov word [bp + 8], file_test$201	; 5: 199 70 8 36 60
x15382:	mov [bp + 10], bp	; 3: 137 110 10
x15385:	add bp, 8	; 3: 131 197 8
x15388:	mov di, bp	; 2: 137 239
x15390:	add di, 2	; 3: 131 199 2
x15393:	jmp printf	; 3: 233 224 208

file_test$201:	; PostCall 8

file_test$202:	; Goto 215
x15396:	jmp file_test$215	; 2: 235 59

file_test$203:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$204:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15398:	mov word [bp + 14], @10568$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 138 80

file_test$205:	; Parameter 8 sourceFile 8
x15403:	mov ax, [bp + 6]	; 3: 139 70 6
x15406:	mov [bp + 16], ax	; 3: 137 70 16

file_test$206:	; Parameter 8 errno 10
x15409:	mov ax, [errno]	; 3: 161 230 10
x15412:	mov [bp + 18], ax	; 3: 137 70 18

file_test$207:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$208:	; Parameter 8 errno 18
x15415:	mov ax, [errno]	; 3: 161 230 10
x15418:	mov [bp + 26], ax	; 3: 137 70 26

file_test$209:	; Call 8 strerror 12
x15421:	mov word [bp + 20], file_test$210	; 5: 199 70 20 75 60
x15426:	mov [bp + 22], bp	; 3: 137 110 22
x15429:	add bp, 20	; 3: 131 197 20
x15432:	jmp strerror	; 3: 233 211 247

file_test$210:	; PostCall 8

file_test$211:	; GetReturnValue £temporary4884

file_test$212:	; Parameter 8 £temporary4884 12
x15435:	mov [bp + 20], bx	; 3: 137 94 20

file_test$213:	; Call 8 printf 0
x15438:	mov word [bp + 8], file_test$214	; 5: 199 70 8 97 60
x15443:	mov [bp + 10], bp	; 3: 137 110 10
x15446:	add bp, 8	; 3: 131 197 8
x15449:	mov di, bp	; 2: 137 239
x15451:	add di, 6	; 3: 131 199 6
x15454:	jmp printf	; 3: 233 163 208

file_test$214:	; PostCall 8

file_test$215:	; Assign sourceFile string_X#
x15457:	mov word [bp + 6], @10571$string_X#	; 5: 199 70 6 158 80

file_test$216:	; Assign targetFile string_Y#
x15462:	mov word [bp + 8], @10573$string_Y#	; 5: 199 70 8 160 80

file_test$217:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$218:	; Parameter 10 sourceFile 6
x15467:	mov ax, [bp + 6]	; 3: 139 70 6
x15470:	mov [bp + 16], ax	; 3: 137 70 16

file_test$219:	; Parameter 10 string_w# 8
x15473:	mov word [bp + 18], @10575$string_w#	; 5: 199 70 18 162 80

file_test$220:	; Call 10 fopen 0
x15478:	mov word [bp + 10], file_test$221	; 5: 199 70 10 132 60
x15483:	mov [bp + 12], bp	; 3: 137 110 12
x15486:	add bp, 10	; 3: 131 197 10
x15489:	jmp fopen	; 3: 233 18 30

file_test$221:	; PostCall 10

file_test$222:	; GetReturnValue £temporary4886

file_test$223:	; Assign filePtr £temporary4886
x15492:	mov [bp + 10], bx	; 3: 137 94 10

file_test$224:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$225:	; Parameter 12 filePtr 6
x15495:	mov ax, [bp + 10]	; 3: 139 70 10
x15498:	mov [bp + 18], ax	; 3: 137 70 18

file_test$226:	; Parameter 12 string_Hello20X# 8
x15501:	mov word [bp + 20], @10578$string_Hello20X#	; 5: 199 70 20 164 80

file_test$227:	; Call 12 fprintf 0
x15506:	mov word [bp + 12], file_test$228	; 5: 199 70 12 162 60
x15511:	mov [bp + 14], bp	; 3: 137 110 14
x15514:	add bp, 12	; 3: 131 197 12
x15517:	mov di, bp	; 2: 137 239
x15519:	jmp fprintf	; 3: 233 89 34

file_test$228:	; PostCall 12

file_test$229:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$230:	; Parameter 12 filePtr 6
x15522:	mov ax, [bp + 10]	; 3: 139 70 10
x15525:	mov [bp + 18], ax	; 3: 137 70 18

file_test$231:	; Call 12 fclose 0
x15528:	mov word [bp + 12], file_test$232	; 5: 199 70 12 182 60
x15533:	mov [bp + 14], bp	; 3: 137 110 14
x15536:	add bp, 12	; 3: 131 197 12
x15539:	jmp fclose	; 3: 233 85 53

file_test$232:	; PostCall 12

file_test$233:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$234:	; Parameter 12 sourceFile 6
x15542:	mov ax, [bp + 6]	; 3: 139 70 6
x15545:	mov [bp + 18], ax	; 3: 137 70 18

file_test$235:	; Parameter 12 targetFile 8
x15548:	mov ax, [bp + 8]	; 3: 139 70 8
x15551:	mov [bp + 20], ax	; 3: 137 70 20

file_test$236:	; Call 12 rename 0
x15554:	mov word [bp + 12], file_test$237	; 5: 199 70 12 208 60
x15559:	mov [bp + 14], bp	; 3: 137 110 14
x15562:	add bp, 12	; 3: 131 197 12
x15565:	jmp rename	; 3: 233 43 54

file_test$237:	; PostCall 12

file_test$238:	; GetReturnValue £temporary4889

file_test$239:	; NotEqual 247 £temporary4889 0
x15568:	cmp bx, 0	; 3: 131 251 0
x15571:	jne file_test$247	; 2: 117 38

file_test$240:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$241:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15573:	mov word [bp + 18], @10585$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 172 80

file_test$242:	; Parameter 12 sourceFile 8
x15578:	mov ax, [bp + 6]	; 3: 139 70 6
x15581:	mov [bp + 20], ax	; 3: 137 70 20

file_test$243:	; Parameter 12 targetFile 10
x15584:	mov ax, [bp + 8]	; 3: 139 70 8
x15587:	mov [bp + 22], ax	; 3: 137 70 22

file_test$244:	; Call 12 printf 0
x15590:	mov word [bp + 12], file_test$245	; 5: 199 70 12 249 60
x15595:	mov [bp + 14], bp	; 3: 137 110 14
x15598:	add bp, 12	; 3: 131 197 12
x15601:	mov di, bp	; 2: 137 239
x15603:	add di, 4	; 3: 131 199 4
x15606:	jmp printf	; 3: 233 11 208

file_test$245:	; PostCall 12

file_test$246:	; Goto 260
x15609:	jmp file_test$260	; 2: 235 65

file_test$247:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$248:	; Parameter 12 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15611:	mov word [bp + 18], @10587$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 18 204 80

file_test$249:	; Parameter 12 sourceFile 8
x15616:	mov ax, [bp + 6]	; 3: 139 70 6
x15619:	mov [bp + 20], ax	; 3: 137 70 20

file_test$250:	; Parameter 12 targetFile 10
x15622:	mov ax, [bp + 8]	; 3: 139 70 8
x15625:	mov [bp + 22], ax	; 3: 137 70 22

file_test$251:	; Parameter 12 errno 12
x15628:	mov ax, [errno]	; 3: 161 230 10
x15631:	mov [bp + 24], ax	; 3: 137 70 24

file_test$252:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$253:	; Parameter 12 errno 20
x15634:	mov ax, [errno]	; 3: 161 230 10
x15637:	mov [bp + 32], ax	; 3: 137 70 32

file_test$254:	; Call 12 strerror 14
x15640:	mov word [bp + 26], file_test$255	; 5: 199 70 26 38 61
x15645:	mov [bp + 28], bp	; 3: 137 110 28
x15648:	add bp, 26	; 3: 131 197 26
x15651:	jmp strerror	; 3: 233 248 246

file_test$255:	; PostCall 12

file_test$256:	; GetReturnValue £temporary4892

file_test$257:	; Parameter 12 £temporary4892 14
x15654:	mov [bp + 26], bx	; 3: 137 94 26

file_test$258:	; Call 12 printf 0
x15657:	mov word [bp + 12], file_test$259	; 5: 199 70 12 60 61
x15662:	mov [bp + 14], bp	; 3: 137 110 14
x15665:	add bp, 12	; 3: 131 197 12
x15668:	mov di, bp	; 2: 137 239
x15670:	add di, 8	; 3: 131 199 8
x15673:	jmp printf	; 3: 233 200 207

file_test$259:	; PostCall 12

file_test$260:	; Assign sourceFile string_X2#
x15676:	mov word [bp + 6], @10590$string_X2#	; 5: 199 70 6 229 80

file_test$261:	; Assign targetFile string_Y2#
x15681:	mov word [bp + 8], @10592$string_Y2#	; 5: 199 70 8 232 80

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 sourceFile 6
x15686:	mov ax, [bp + 6]	; 3: 139 70 6
x15689:	mov [bp + 16], ax	; 3: 137 70 16

file_test$264:	; Parameter 10 targetFile 8
x15692:	mov ax, [bp + 8]	; 3: 139 70 8
x15695:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; Call 10 rename 0
x15698:	mov word [bp + 10], file_test$266	; 5: 199 70 10 96 61
x15703:	mov [bp + 12], bp	; 3: 137 110 12
x15706:	add bp, 10	; 3: 131 197 10
x15709:	jmp rename	; 3: 233 155 53

file_test$266:	; PostCall 10

file_test$267:	; GetReturnValue £temporary4894

file_test$268:	; NotEqual 276 £temporary4894 0
x15712:	cmp bx, 0	; 3: 131 251 0
x15715:	jne file_test$276	; 2: 117 38

file_test$269:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$270:	; Parameter 10 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15717:	mov word [bp + 16], @10598$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 16 235 80

file_test$271:	; Parameter 10 sourceFile 8
x15722:	mov ax, [bp + 6]	; 3: 139 70 6
x15725:	mov [bp + 18], ax	; 3: 137 70 18

file_test$272:	; Parameter 10 targetFile 10
x15728:	mov ax, [bp + 8]	; 3: 139 70 8
x15731:	mov [bp + 20], ax	; 3: 137 70 20

file_test$273:	; Call 10 printf 0
x15734:	mov word [bp + 10], file_test$274	; 5: 199 70 10 137 61
x15739:	mov [bp + 12], bp	; 3: 137 110 12
x15742:	add bp, 10	; 3: 131 197 10
x15745:	mov di, bp	; 2: 137 239
x15747:	add di, 4	; 3: 131 199 4
x15750:	jmp printf	; 3: 233 123 207

file_test$274:	; PostCall 10

file_test$275:	; Goto 289
x15753:	jmp file_test$289	; 2: 235 65

file_test$276:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$277:	; Parameter 10 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15755:	mov word [bp + 16], @10600$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 16 11 81

file_test$278:	; Parameter 10 sourceFile 8
x15760:	mov ax, [bp + 6]	; 3: 139 70 6
x15763:	mov [bp + 18], ax	; 3: 137 70 18

file_test$279:	; Parameter 10 targetFile 10
x15766:	mov ax, [bp + 8]	; 3: 139 70 8
x15769:	mov [bp + 20], ax	; 3: 137 70 20

file_test$280:	; Parameter 10 errno 12
x15772:	mov ax, [errno]	; 3: 161 230 10
x15775:	mov [bp + 22], ax	; 3: 137 70 22

file_test$281:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 10 errno 20
x15778:	mov ax, [errno]	; 3: 161 230 10
x15781:	mov [bp + 30], ax	; 3: 137 70 30

file_test$283:	; Call 10 strerror 14
x15784:	mov word [bp + 24], file_test$284	; 5: 199 70 24 182 61
x15789:	mov [bp + 26], bp	; 3: 137 110 26
x15792:	add bp, 24	; 3: 131 197 24
x15795:	jmp strerror	; 3: 233 104 246

file_test$284:	; PostCall 10

file_test$285:	; GetReturnValue £temporary4897

file_test$286:	; Parameter 10 £temporary4897 14
x15798:	mov [bp + 24], bx	; 3: 137 94 24

file_test$287:	; Call 10 printf 0
x15801:	mov word [bp + 10], file_test$288	; 5: 199 70 10 204 61
x15806:	mov [bp + 12], bp	; 3: 137 110 12
x15809:	add bp, 10	; 3: 131 197 10
x15812:	mov di, bp	; 2: 137 239
x15814:	add di, 8	; 3: 131 199 8
x15817:	jmp printf	; 3: 233 56 207

file_test$288:	; PostCall 10

file_test$289:	; Assign targetFile string_Z#
x15820:	mov word [bp + 6], @10603$string_Z#	; 5: 199 70 6 36 81

file_test$290:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$291:	; Parameter 8 targetFile 6
x15825:	mov ax, [bp + 6]	; 3: 139 70 6
x15828:	mov [bp + 14], ax	; 3: 137 70 14

file_test$292:	; Parameter 8 string_w# 8
x15831:	mov word [bp + 16], @10605$string_w#	; 5: 199 70 16 38 81

file_test$293:	; Call 8 fopen 0
x15836:	mov word [bp + 8], file_test$294	; 5: 199 70 8 234 61
x15841:	mov [bp + 10], bp	; 3: 137 110 10
x15844:	add bp, 8	; 3: 131 197 8
x15847:	jmp fopen	; 3: 233 172 28

file_test$294:	; PostCall 8

file_test$295:	; GetReturnValue £temporary4899

file_test$296:	; Assign filePtr £temporary4899
x15850:	mov [bp + 8], bx	; 3: 137 94 8

file_test$297:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$298:	; Parameter 10 filePtr 6
x15853:	mov ax, [bp + 8]	; 3: 139 70 8
x15856:	mov [bp + 16], ax	; 3: 137 70 16

file_test$299:	; Parameter 10 string_Hello20Z# 8
x15859:	mov word [bp + 18], @10608$string_Hello20Z#	; 5: 199 70 18 40 81

file_test$300:	; Call 10 fprintf 0
x15864:	mov word [bp + 10], file_test$301	; 5: 199 70 10 8 62
x15869:	mov [bp + 12], bp	; 3: 137 110 12
x15872:	add bp, 10	; 3: 131 197 10
x15875:	mov di, bp	; 2: 137 239
x15877:	jmp fprintf	; 3: 233 243 32

file_test$301:	; PostCall 10

file_test$302:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$303:	; Parameter 10 filePtr 6
x15880:	mov ax, [bp + 8]	; 3: 139 70 8
x15883:	mov [bp + 16], ax	; 3: 137 70 16

file_test$304:	; Call 10 fclose 0
x15886:	mov word [bp + 10], file_test$305	; 5: 199 70 10 28 62
x15891:	mov [bp + 12], bp	; 3: 137 110 12
x15894:	add bp, 10	; 3: 131 197 10
x15897:	jmp fclose	; 3: 233 239 51

file_test$305:	; PostCall 10

file_test$306:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$307:	; Parameter 10 targetFile 6
x15900:	mov ax, [bp + 6]	; 3: 139 70 6
x15903:	mov [bp + 16], ax	; 3: 137 70 16

file_test$308:	; Call 10 remove 0
x15906:	mov word [bp + 10], file_test$309	; 5: 199 70 10 48 62
x15911:	mov [bp + 12], bp	; 3: 137 110 12
x15914:	add bp, 10	; 3: 131 197 10
x15917:	jmp remove	; 3: 233 158 52

file_test$309:	; PostCall 10

file_test$310:	; GetReturnValue £temporary4902

file_test$311:	; NotEqual 318 £temporary4902 0
x15920:	cmp bx, 0	; 3: 131 251 0
x15923:	jne file_test$318	; 2: 117 32

file_test$312:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$313:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15925:	mov word [bp + 16], @10615$string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 48 81

file_test$314:	; Parameter 10 targetFile 8
x15930:	mov ax, [bp + 6]	; 3: 139 70 6
x15933:	mov [bp + 18], ax	; 3: 137 70 18

file_test$315:	; Call 10 printf 0
x15936:	mov word [bp + 10], file_test$316	; 5: 199 70 10 83 62
x15941:	mov [bp + 12], bp	; 3: 137 110 12
x15944:	add bp, 10	; 3: 131 197 10
x15947:	mov di, bp	; 2: 137 239
x15949:	add di, 2	; 3: 131 199 2
x15952:	jmp printf	; 3: 233 177 206

file_test$316:	; PostCall 10

file_test$317:	; Goto 330
x15955:	jmp file_test$330	; 2: 235 59

file_test$318:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 10 string_Error202225s222025i3A2025s2E0A# 6
x15957:	mov word [bp + 16], @10617$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 16 72 81

file_test$320:	; Parameter 10 targetFile 8
x15962:	mov ax, [bp + 6]	; 3: 139 70 6
x15965:	mov [bp + 18], ax	; 3: 137 70 18

file_test$321:	; Parameter 10 errno 10
x15968:	mov ax, [errno]	; 3: 161 230 10
x15971:	mov [bp + 20], ax	; 3: 137 70 20

file_test$322:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$323:	; Parameter 10 errno 18
x15974:	mov ax, [errno]	; 3: 161 230 10
x15977:	mov [bp + 28], ax	; 3: 137 70 28

file_test$324:	; Call 10 strerror 12
x15980:	mov word [bp + 22], file_test$325	; 5: 199 70 22 122 62
x15985:	mov [bp + 24], bp	; 3: 137 110 24
x15988:	add bp, 22	; 3: 131 197 22
x15991:	jmp strerror	; 3: 233 164 245

file_test$325:	; PostCall 10

file_test$326:	; GetReturnValue £temporary4905

file_test$327:	; Parameter 10 £temporary4905 12
x15994:	mov [bp + 22], bx	; 3: 137 94 22

file_test$328:	; Call 10 printf 0
x15997:	mov word [bp + 10], file_test$329	; 5: 199 70 10 144 62
x16002:	mov [bp + 12], bp	; 3: 137 110 12
x16005:	add bp, 10	; 3: 131 197 10
x16008:	mov di, bp	; 2: 137 239
x16010:	add di, 6	; 3: 131 199 6
x16013:	jmp printf	; 3: 233 116 206

file_test$329:	; PostCall 10

file_test$330:	; Assign targetFile string_Z2#
x16016:	mov word [bp + 6], @10620$string_Z2#	; 5: 199 70 6 92 81

file_test$331:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$332:	; Parameter 8 targetFile 6
x16021:	mov ax, [bp + 6]	; 3: 139 70 6
x16024:	mov [bp + 14], ax	; 3: 137 70 14

file_test$333:	; Call 8 remove 0
x16027:	mov word [bp + 8], file_test$334	; 5: 199 70 8 169 62
x16032:	mov [bp + 10], bp	; 3: 137 110 10
x16035:	add bp, 8	; 3: 131 197 8
x16038:	jmp remove	; 3: 233 37 52

file_test$334:	; PostCall 8

file_test$335:	; GetReturnValue £temporary4907

file_test$336:	; NotEqual 343 £temporary4907 0
x16041:	cmp bx, 0	; 3: 131 251 0
x16044:	jne file_test$343	; 2: 117 32

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 string_2225s2220has20been20removed2E0A# 6
x16046:	mov word [bp + 14], @10626$string_2225s2220has20been20removed2E0A#	; 5: 199 70 14 95 81

file_test$339:	; Parameter 8 targetFile 8
x16051:	mov ax, [bp + 6]	; 3: 139 70 6
x16054:	mov [bp + 16], ax	; 3: 137 70 16

file_test$340:	; Call 8 printf 0
x16057:	mov word [bp + 8], file_test$341	; 5: 199 70 8 204 62
x16062:	mov [bp + 10], bp	; 3: 137 110 10
x16065:	add bp, 8	; 3: 131 197 8
x16068:	mov di, bp	; 2: 137 239
x16070:	add di, 2	; 3: 131 199 2
x16073:	jmp printf	; 3: 233 56 206

file_test$341:	; PostCall 8

file_test$342:	; Goto 355
x16076:	jmp file_test$355	; 2: 235 59

file_test$343:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$344:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x16078:	mov word [bp + 14], @10628$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 119 81

file_test$345:	; Parameter 8 targetFile 8
x16083:	mov ax, [bp + 6]	; 3: 139 70 6
x16086:	mov [bp + 16], ax	; 3: 137 70 16

file_test$346:	; Parameter 8 errno 10
x16089:	mov ax, [errno]	; 3: 161 230 10
x16092:	mov [bp + 18], ax	; 3: 137 70 18

file_test$347:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$348:	; Parameter 8 errno 18
x16095:	mov ax, [errno]	; 3: 161 230 10
x16098:	mov [bp + 26], ax	; 3: 137 70 26

file_test$349:	; Call 8 strerror 12
x16101:	mov word [bp + 20], file_test$350	; 5: 199 70 20 243 62
x16106:	mov [bp + 22], bp	; 3: 137 110 22
x16109:	add bp, 20	; 3: 131 197 20
x16112:	jmp strerror	; 3: 233 43 245

file_test$350:	; PostCall 8

file_test$351:	; GetReturnValue £temporary4910

file_test$352:	; Parameter 8 £temporary4910 12
x16115:	mov [bp + 20], bx	; 3: 137 94 20

file_test$353:	; Call 8 printf 0
x16118:	mov word [bp + 8], file_test$354	; 5: 199 70 8 9 63
x16123:	mov [bp + 10], bp	; 3: 137 110 10
x16126:	add bp, 8	; 3: 131 197 8
x16129:	mov di, bp	; 2: 137 239
x16131:	add di, 6	; 3: 131 199 6
x16134:	jmp printf	; 3: 233 251 205

file_test$354:	; PostCall 8

file_test$355:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$356:	; Parameter 6 string_PBook2Etxt# 6
x16137:	mov word [bp + 12], @10631$string_PBook2Etxt#	; 5: 199 70 12 139 81

file_test$357:	; Parameter 6 string_r# 8
x16142:	mov word [bp + 14], @10632$string_r#	; 5: 199 70 14 149 81

file_test$358:	; Call 6 fopen 0
x16147:	mov word [bp + 6], file_test$359	; 5: 199 70 6 33 63
x16152:	mov [bp + 8], bp	; 3: 137 110 8
x16155:	add bp, 6	; 3: 131 197 6
x16158:	jmp fopen	; 3: 233 117 27

file_test$359:	; PostCall 6

file_test$360:	; GetReturnValue £temporary4912

file_test$361:	; Assign inFilePtr £temporary4912
x16161:	mov [bp + 6], bx	; 3: 137 94 6

file_test$362:	; NotEqual 374 inFilePtr 0
x16164:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16168:	jne file_test$374	; 2: 117 59

file_test$363:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$364:	; Parameter 8 stderr 6
x16170:	mov ax, [stderr]	; 3: 161 22 78
x16173:	mov [bp + 14], ax	; 3: 137 70 14

file_test$365:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16176:	mov word [bp + 16], @10640$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 151 81

file_test$366:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16181:	mov word [bp + 18], @10641$string_inFilePtr20213D20NULL#	; 5: 199 70 18 197 81

file_test$367:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16186:	mov word [bp + 20], @10642$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 215 81

file_test$368:	; Parameter 8 119 14
x16191:	mov word [bp + 22], 119	; 5: 199 70 22 119 0

file_test$369:	; Call 8 fprintf 0
x16196:	mov word [bp + 8], file_test$370	; 5: 199 70 8 87 63
x16201:	mov [bp + 10], bp	; 3: 137 110 10
x16204:	add bp, 8	; 3: 131 197 8
x16207:	mov di, bp	; 2: 137 239
x16209:	add di, 6	; 3: 131 199 6
x16212:	jmp fprintf	; 3: 233 164 31

file_test$370:	; PostCall 8

file_test$371:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$372:	; Call 8 abort 0
x16215:	mov word [bp + 8], file_test$373	; 5: 199 70 8 101 63
x16220:	mov [bp + 10], bp	; 3: 137 110 10
x16223:	add bp, 8	; 3: 131 197 8
x16226:	jmp abort	; 3: 233 209 31

file_test$373:	; PostCall 8

file_test$374:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x16229:	mov word [bp + 14], @10646$string_0A252D24s20252D24s0A#	; 5: 199 70 14 24 82

file_test$376:	; Parameter 8 string_Name# 8
x16234:	mov word [bp + 16], @10647$string_Name#	; 5: 199 70 16 38 82

file_test$377:	; Parameter 8 string_Phone# 10
x16239:	mov word [bp + 18], @10648$string_Phone#	; 5: 199 70 18 43 82

file_test$378:	; Call 8 printf 0
x16244:	mov word [bp + 8], file_test$379	; 5: 199 70 8 135 63
x16249:	mov [bp + 10], bp	; 3: 137 110 10
x16252:	add bp, 8	; 3: 131 197 8
x16255:	mov di, bp	; 2: 137 239
x16257:	add di, 4	; 3: 131 199 4
x16260:	jmp printf	; 3: 233 125 205

file_test$379:	; PostCall 8

file_test$380:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$381:	; Parameter 8 string_252D24s20252D24s0A# 6
x16263:	mov word [bp + 14], @10650$string_252D24s20252D24s0A#	; 5: 199 70 14 49 82

file_test$382:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x16268:	mov word [bp + 16], @10651$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 62 82

file_test$383:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x16273:	mov word [bp + 18], @10652$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 87 82

file_test$384:	; Call 8 printf 0
x16278:	mov word [bp + 8], file_test$385	; 5: 199 70 8 169 63
x16283:	mov [bp + 10], bp	; 3: 137 110 10
x16286:	add bp, 8	; 3: 131 197 8
x16289:	mov di, bp	; 2: 137 239
x16291:	add di, 4	; 3: 131 199 4
x16294:	jmp printf	; 3: 233 91 205

file_test$385:	; PostCall 8

file_test$386:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$387:	; Parameter 12 inFilePtr 6
x16297:	mov ax, [bp + 6]	; 3: 139 70 6
x16300:	mov [bp + 18], ax	; 3: 137 70 18

file_test$388:	; Parameter 12 string_25i# 8
x16303:	mov word [bp + 20], @10656$string_25i#	; 5: 199 70 20 112 82

file_test$389:	; address £temporary4919 size
x16308:	mov si, bp	; 2: 137 238
x16310:	add si, 10	; 3: 131 198 10

file_test$390:	; Parameter 12 £temporary4919 10
x16313:	mov [bp + 22], si	; 3: 137 118 22

file_test$391:	; Call 12 fscanf 0
x16316:	mov word [bp + 12], file_test$392	; 5: 199 70 12 207 63
x16321:	mov [bp + 14], bp	; 3: 137 110 14
x16324:	add bp, 12	; 3: 131 197 12
x16327:	mov di, bp	; 2: 137 239
x16329:	add di, 2	; 3: 131 199 2
x16332:	jmp fscanf	; 3: 233 13 32

file_test$392:	; PostCall 12

file_test$393:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$394:	; Parameter 12 string_size2025i0A# 6
x16335:	mov word [bp + 18], @10659$string_size2025i0A#	; 5: 199 70 18 115 82

file_test$395:	; Parameter 12 size 8
x16340:	mov ax, [bp + 10]	; 3: 139 70 10
x16343:	mov [bp + 20], ax	; 3: 137 70 20

file_test$396:	; Call 12 printf 0
x16346:	mov word [bp + 12], file_test$397	; 5: 199 70 12 237 63
x16351:	mov [bp + 14], bp	; 3: 137 110 14
x16354:	add bp, 12	; 3: 131 197 12
x16357:	mov di, bp	; 2: 137 239
x16359:	add di, 2	; 3: 131 199 2
x16362:	jmp printf	; 3: 233 23 205

file_test$397:	; PostCall 12

file_test$398:	; Assign count 0
x16365:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$399:	; SignedGreaterThanEqual 415 count size
x16370:	mov ax, [bp + 10]	; 3: 139 70 10
x16373:	cmp [bp + 8], ax	; 3: 57 70 8
x16376:	jge file_test$415	; 2: 125 87

file_test$400:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$401:	; Parameter 52 inFilePtr 6
x16378:	mov ax, [bp + 6]	; 3: 139 70 6
x16381:	mov [bp + 58], ax	; 3: 137 70 58

file_test$402:	; Parameter 52 string_25s25s# 8
x16384:	mov word [bp + 60], @10672$string_25s25s#	; 5: 199 70 60 124 82

file_test$403:	; Parameter 52 name 10
x16389:	mov [bp + 62], bp	; 3: 137 110 62
x16392:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$404:	; Parameter 52 phone 12
x16396:	mov [bp + 64], bp	; 3: 137 110 64
x16399:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$405:	; Call 52 fscanf 0
x16403:	mov word [bp + 52], file_test$406	; 5: 199 70 52 38 64
x16408:	mov [bp + 54], bp	; 3: 137 110 54
x16411:	add bp, 52	; 3: 131 197 52
x16414:	mov di, bp	; 2: 137 239
x16416:	add di, 4	; 3: 131 199 4
x16419:	jmp fscanf	; 3: 233 182 31

file_test$406:	; PostCall 52

file_test$407:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; Parameter 52 string_252D24s20252D24s0A# 6
x16422:	mov word [bp + 58], @10674$string_252D24s20252D24s0A#	; 5: 199 70 58 129 82

file_test$409:	; Parameter 52 name 8
x16427:	mov [bp + 60], bp	; 3: 137 110 60
x16430:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$410:	; Parameter 52 phone 10
x16434:	mov [bp + 62], bp	; 3: 137 110 62
x16437:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$411:	; Call 52 printf 0
x16441:	mov word [bp + 52], file_test$412	; 5: 199 70 52 76 64
x16446:	mov [bp + 54], bp	; 3: 137 110 54
x16449:	add bp, 52	; 3: 131 197 52
x16452:	mov di, bp	; 2: 137 239
x16454:	add di, 4	; 3: 131 199 4
x16457:	jmp printf	; 3: 233 184 204

file_test$412:	; PostCall 52

file_test$413:	; Increment count
x16460:	inc word [bp + 8]	; 3: 255 70 8

file_test$414:	; Goto 399
x16463:	jmp file_test$399	; 2: 235 161

file_test$415:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 8 string_0A# 6
x16465:	mov word [bp + 14], @10676$string_0A#	; 5: 199 70 14 142 82

file_test$417:	; Call 8 printf 0
x16470:	mov word [bp + 8], file_test$418	; 5: 199 70 8 102 64
x16475:	mov [bp + 10], bp	; 3: 137 110 10
x16478:	add bp, 8	; 3: 131 197 8
x16481:	mov di, bp	; 2: 137 239
x16483:	jmp printf	; 3: 233 158 204

file_test$418:	; PostCall 8

file_test$419:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$420:	; Parameter 8 inFilePtr 6
x16486:	mov ax, [bp + 6]	; 3: 139 70 6
x16489:	mov [bp + 14], ax	; 3: 137 70 14

file_test$421:	; Call 8 fclose 0
x16492:	mov word [bp + 8], file_test$422	; 5: 199 70 8 122 64
x16497:	mov [bp + 10], bp	; 3: 137 110 10
x16500:	add bp, 8	; 3: 131 197 8
x16503:	jmp fclose	; 3: 233 145 49

file_test$422:	; PostCall 8

file_test$423:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$424:	; Parameter 6 string_TestX2Ebin# 6
x16506:	mov word [bp + 12], @10679$string_TestX2Ebin#	; 5: 199 70 12 144 82

file_test$425:	; Parameter 6 string_w# 8
x16511:	mov word [bp + 14], @10680$string_w#	; 5: 199 70 14 154 82

file_test$426:	; Call 6 fopen 0
x16516:	mov word [bp + 6], file_test$427	; 5: 199 70 6 146 64
x16521:	mov [bp + 8], bp	; 3: 137 110 8
x16524:	add bp, 6	; 3: 131 197 6
x16527:	jmp fopen	; 3: 233 4 26

file_test$427:	; PostCall 6

file_test$428:	; GetReturnValue £temporary4928

file_test$429:	; Assign outFilePtr £temporary4928
x16530:	mov [bp + 6], bx	; 3: 137 94 6

file_test$430:	; NotEqual 442 outFilePtr 0
x16533:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16537:	jne file_test$442	; 2: 117 59

file_test$431:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$432:	; Parameter 8 stderr 6
x16539:	mov ax, [stderr]	; 3: 161 22 78
x16542:	mov [bp + 14], ax	; 3: 137 70 14

file_test$433:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16545:	mov word [bp + 16], @10688$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 156 82

file_test$434:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16550:	mov word [bp + 18], @10689$string_outFilePtr20213D20NULL#	; 5: 199 70 18 202 82

file_test$435:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16555:	mov word [bp + 20], @10690$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 221 82

file_test$436:	; Parameter 8 171 14
x16560:	mov word [bp + 22], 171	; 5: 199 70 22 171 0

file_test$437:	; Call 8 fprintf 0
x16565:	mov word [bp + 8], file_test$438	; 5: 199 70 8 200 64
x16570:	mov [bp + 10], bp	; 3: 137 110 10
x16573:	add bp, 8	; 3: 131 197 8
x16576:	mov di, bp	; 2: 137 239
x16578:	add di, 6	; 3: 131 199 6
x16581:	jmp fprintf	; 3: 233 51 30

file_test$438:	; PostCall 8

file_test$439:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Call 8 abort 0
x16584:	mov word [bp + 8], file_test$441	; 5: 199 70 8 214 64
x16589:	mov [bp + 10], bp	; 3: 137 110 10
x16592:	add bp, 8	; 3: 131 197 8
x16595:	jmp abort	; 3: 233 96 30

file_test$441:	; PostCall 8

file_test$442:	; Assign size 10
x16598:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; address £temporary4933 size
x16603:	mov si, bp	; 2: 137 238
x16605:	add si, 8	; 3: 131 198 8

file_test$445:	; Parameter 12 £temporary4933 6
x16608:	mov [bp + 18], si	; 3: 137 118 18

file_test$446:	; Parameter 12 2 8
x16611:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$447:	; Parameter 12 1 10
x16616:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$448:	; Parameter 12 outFilePtr 12
x16621:	mov ax, [bp + 6]	; 3: 139 70 6
x16624:	mov [bp + 24], ax	; 3: 137 70 24

file_test$449:	; Call 12 fwrite 0
x16627:	mov word [bp + 12], file_test$450	; 5: 199 70 12 1 65
x16632:	mov [bp + 14], bp	; 3: 137 110 14
x16635:	add bp, 12	; 3: 131 197 12
x16638:	jmp fwrite	; 3: 233 42 50

file_test$450:	; PostCall 12

file_test$451:	; Assign index 0
x16641:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$452:	; SignedGreaterThanEqual 466 index size
x16646:	mov ax, [bp + 8]	; 3: 139 70 8
x16649:	cmp [bp + 10], ax	; 3: 57 70 10
x16652:	jge file_test$466	; 2: 125 61

file_test$453:	; SignedMultiply £temporary4937 index index
x16654:	mov ax, [bp + 10]	; 3: 139 70 10
x16657:	xor dx, dx	; 2: 49 210
x16659:	imul word [bp + 10]	; 3: 247 110 10

file_test$454:	; IntegralToFloating £temporary4938 £temporary4937
x16662:	mov [container2bytes#], ax	; 3: 163 79 27
x16665:	fild word [container2bytes#]	; 4: 223 6 79 27

file_test$455:	; PopFloat value
x16669:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$456:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$457:	; address £temporary4939 value
x16672:	mov si, bp	; 2: 137 238
x16674:	add si, 12	; 3: 131 198 12

file_test$458:	; Parameter 20 £temporary4939 6
x16677:	mov [bp + 26], si	; 3: 137 118 26

file_test$459:	; Parameter 20 8 8
x16680:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$460:	; Parameter 20 1 10
x16685:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$461:	; Parameter 20 outFilePtr 12
x16690:	mov ax, [bp + 6]	; 3: 139 70 6
x16693:	mov [bp + 32], ax	; 3: 137 70 32

file_test$462:	; Call 20 fwrite 0
x16696:	mov word [bp + 20], file_test$463	; 5: 199 70 20 70 65
x16701:	mov [bp + 22], bp	; 3: 137 110 22
x16704:	add bp, 20	; 3: 131 197 20
x16707:	jmp fwrite	; 3: 233 229 49

file_test$463:	; PostCall 20

file_test$464:	; Increment index
x16710:	inc word [bp + 10]	; 3: 255 70 10

file_test$465:	; Goto 452
x16713:	jmp file_test$452	; 2: 235 187

file_test$466:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$467:	; Parameter 12 outFilePtr 6
x16715:	mov ax, [bp + 6]	; 3: 139 70 6
x16718:	mov [bp + 18], ax	; 3: 137 70 18

file_test$468:	; Call 12 fclose 0
x16721:	mov word [bp + 12], file_test$469	; 5: 199 70 12 95 65
x16726:	mov [bp + 14], bp	; 3: 137 110 14
x16729:	add bp, 12	; 3: 131 197 12
x16732:	jmp fclose	; 3: 233 172 48

file_test$469:	; PostCall 12

file_test$470:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$471:	; Parameter 6 string_TestX2Ebin# 6
x16735:	mov word [bp + 12], @10719$string_TestX2Ebin#	; 5: 199 70 12 30 83

file_test$472:	; Parameter 6 string_r# 8
x16740:	mov word [bp + 14], @10720$string_r#	; 5: 199 70 14 40 83

file_test$473:	; Call 6 fopen 0
x16745:	mov word [bp + 6], file_test$474	; 5: 199 70 6 119 65
x16750:	mov [bp + 8], bp	; 3: 137 110 8
x16753:	add bp, 6	; 3: 131 197 6
x16756:	jmp fopen	; 3: 233 31 25

file_test$474:	; PostCall 6

file_test$475:	; GetReturnValue £temporary4942

file_test$476:	; Assign inFilePtr £temporary4942
x16759:	mov [bp + 6], bx	; 3: 137 94 6

file_test$477:	; NotEqual 489 inFilePtr 0
x16762:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16766:	jne file_test$489	; 2: 117 59

file_test$478:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$479:	; Parameter 12 stderr 6
x16768:	mov ax, [stderr]	; 3: 161 22 78
x16771:	mov [bp + 18], ax	; 3: 137 70 18

file_test$480:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16774:	mov word [bp + 20], @10730$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 42 83

file_test$481:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16779:	mov word [bp + 22], @10731$string_inFilePtr20213D20NULL#	; 5: 199 70 22 88 83

file_test$482:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16784:	mov word [bp + 24], @10732$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 106 83

file_test$483:	; Parameter 12 188 14
x16789:	mov word [bp + 26], 188	; 5: 199 70 26 188 0

file_test$484:	; Call 12 fprintf 0
x16794:	mov word [bp + 12], file_test$485	; 5: 199 70 12 173 65
x16799:	mov [bp + 14], bp	; 3: 137 110 14
x16802:	add bp, 12	; 3: 131 197 12
x16805:	mov di, bp	; 2: 137 239
x16807:	add di, 6	; 3: 131 199 6
x16810:	jmp fprintf	; 3: 233 78 29

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Call 12 abort 0
x16813:	mov word [bp + 12], file_test$488	; 5: 199 70 12 187 65
x16818:	mov [bp + 14], bp	; 3: 137 110 14
x16821:	add bp, 12	; 3: 131 197 12
x16824:	jmp abort	; 3: 233 123 29

file_test$488:	; PostCall 12

file_test$489:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$490:	; address £temporary4947 size
x16827:	mov si, bp	; 2: 137 238
x16829:	add si, 8	; 3: 131 198 8

file_test$491:	; Parameter 12 £temporary4947 6
x16832:	mov [bp + 18], si	; 3: 137 118 18

file_test$492:	; Parameter 12 2 8
x16835:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$493:	; Parameter 12 1 10
x16840:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$494:	; Parameter 12 inFilePtr 12
x16845:	mov ax, [bp + 6]	; 3: 139 70 6
x16848:	mov [bp + 24], ax	; 3: 137 70 24

file_test$495:	; Call 12 fread 0
x16851:	mov word [bp + 12], file_test$496	; 5: 199 70 12 225 65
x16856:	mov [bp + 14], bp	; 3: 137 110 14
x16859:	add bp, 12	; 3: 131 197 12
x16862:	jmp fread	; 3: 233 141 49

file_test$496:	; PostCall 12

file_test$497:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$498:	; Parameter 12 string_size13A2025i0A# 6
x16865:	mov word [bp + 18], @10742$string_size13A2025i0A#	; 5: 199 70 18 171 83

file_test$499:	; Parameter 12 size 8
x16870:	mov ax, [bp + 8]	; 3: 139 70 8
x16873:	mov [bp + 20], ax	; 3: 137 70 20

file_test$500:	; Call 12 printf 0
x16876:	mov word [bp + 12], file_test$501	; 5: 199 70 12 255 65
x16881:	mov [bp + 14], bp	; 3: 137 110 14
x16884:	add bp, 12	; 3: 131 197 12
x16887:	mov di, bp	; 2: 137 239
x16889:	add di, 2	; 3: 131 199 2
x16892:	jmp printf	; 3: 233 5 203

file_test$501:	; PostCall 12

file_test$502:	; Assign index 0
x16895:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$503:	; SignedGreaterThanEqual 521 index size
x16900:	mov ax, [bp + 8]	; 3: 139 70 8
x16903:	cmp [bp + 10], ax	; 3: 57 70 10
x16906:	jge file_test$521	; 2: 125 79

file_test$504:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$505:	; address £temporary4952 value
x16908:	mov si, bp	; 2: 137 238
x16910:	add si, 12	; 3: 131 198 12

file_test$506:	; Parameter 20 £temporary4952 6
x16913:	mov [bp + 26], si	; 3: 137 118 26

file_test$507:	; Parameter 20 8 8
x16916:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$508:	; Parameter 20 1 10
x16921:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$509:	; Parameter 20 inFilePtr 12
x16926:	mov ax, [bp + 6]	; 3: 139 70 6
x16929:	mov [bp + 32], ax	; 3: 137 70 32

file_test$510:	; Call 20 fread 0
x16932:	mov word [bp + 20], file_test$511	; 5: 199 70 20 50 66
x16937:	mov [bp + 22], bp	; 3: 137 110 22
x16940:	add bp, 20	; 3: 131 197 20
x16943:	jmp fread	; 3: 233 60 49

file_test$511:	; PostCall 20

file_test$512:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$513:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16946:	mov word [bp + 26], @10756$string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 182 83

file_test$514:	; Parameter 20 index 8
x16951:	mov ax, [bp + 10]	; 3: 139 70 10
x16954:	mov [bp + 28], ax	; 3: 137 70 28

file_test$515:	; PushFloat value
x16957:	fld qword [bp + 12]	; 3: 221 70 12

file_test$516:	; Parameter 20 value 10
x16960:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$517:	; Call 20 printf 0
x16963:	mov word [bp + 20], file_test$518	; 5: 199 70 20 86 66
x16968:	mov [bp + 22], bp	; 3: 137 110 22
x16971:	add bp, 20	; 3: 131 197 20
x16974:	mov di, bp	; 2: 137 239
x16976:	add di, 10	; 3: 131 199 10
x16979:	jmp printf	; 3: 233 174 202

file_test$518:	; PostCall 20

file_test$519:	; Increment index
x16982:	inc word [bp + 10]	; 3: 255 70 10

file_test$520:	; Goto 503
x16985:	jmp file_test$503	; 2: 235 169

file_test$521:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$522:	; Parameter 12 string_0A# 6
x16987:	mov word [bp + 18], @10758$string_0A#	; 5: 199 70 18 204 83

file_test$523:	; Call 12 printf 0
x16992:	mov word [bp + 12], file_test$524	; 5: 199 70 12 112 66
x16997:	mov [bp + 14], bp	; 3: 137 110 14
x17000:	add bp, 12	; 3: 131 197 12
x17003:	mov di, bp	; 2: 137 239
x17005:	jmp printf	; 3: 233 148 202

file_test$524:	; PostCall 12

file_test$525:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$526:	; Parameter 12 inFilePtr 6
x17008:	mov ax, [bp + 6]	; 3: 139 70 6
x17011:	mov [bp + 18], ax	; 3: 137 70 18

file_test$527:	; Call 12 fclose 0
x17014:	mov word [bp + 12], file_test$528	; 5: 199 70 12 132 66
x17019:	mov [bp + 14], bp	; 3: 137 110 14
x17022:	add bp, 12	; 3: 131 197 12
x17025:	jmp fclose	; 3: 233 135 47

file_test$528:	; PostCall 12

file_test$529:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$530:	; Parameter 6 string_TestY2Ebin# 6
x17028:	mov word [bp + 12], @10761$string_TestY2Ebin#	; 5: 199 70 12 206 83

file_test$531:	; Parameter 6 string_w# 8
x17033:	mov word [bp + 14], @10762$string_w#	; 5: 199 70 14 216 83

file_test$532:	; Call 6 fopen 0
x17038:	mov word [bp + 6], file_test$533	; 5: 199 70 6 156 66
x17043:	mov [bp + 8], bp	; 3: 137 110 8
x17046:	add bp, 6	; 3: 131 197 6
x17049:	jmp fopen	; 3: 233 250 23

file_test$533:	; PostCall 6

file_test$534:	; GetReturnValue £temporary4957

file_test$535:	; Assign outFilePtr £temporary4957
x17052:	mov [bp + 6], bx	; 3: 137 94 6

file_test$536:	; NotEqual 548 outFilePtr 0
x17055:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17059:	jne file_test$548	; 2: 117 59

file_test$537:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$538:	; Parameter 8 stderr 6
x17061:	mov ax, [stderr]	; 3: 161 22 78
x17064:	mov [bp + 14], ax	; 3: 137 70 14

file_test$539:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17067:	mov word [bp + 16], @10770$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 218 83

file_test$540:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x17072:	mov word [bp + 18], @10771$string_outFilePtr20213D20NULL#	; 5: 199 70 18 8 84

file_test$541:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17077:	mov word [bp + 20], @10772$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 27 84

file_test$542:	; Parameter 8 203 14
x17082:	mov word [bp + 22], 203	; 5: 199 70 22 203 0

file_test$543:	; Call 8 fprintf 0
x17087:	mov word [bp + 8], file_test$544	; 5: 199 70 8 210 66
x17092:	mov [bp + 10], bp	; 3: 137 110 10
x17095:	add bp, 8	; 3: 131 197 8
x17098:	mov di, bp	; 2: 137 239
x17100:	add di, 6	; 3: 131 199 6
x17103:	jmp fprintf	; 3: 233 41 28

file_test$544:	; PostCall 8

file_test$545:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$546:	; Call 8 abort 0
x17106:	mov word [bp + 8], file_test$547	; 5: 199 70 8 224 66
x17111:	mov [bp + 10], bp	; 3: 137 110 10
x17114:	add bp, 8	; 3: 131 197 8
x17117:	jmp abort	; 3: 233 86 28

file_test$547:	; PostCall 8

file_test$548:	; Assign size 10
x17120:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$549:	; Assign index 0
x17125:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$550:	; SignedGreaterThanEqual 564 index size
x17130:	mov ax, [bp + 8]	; 3: 139 70 8
x17133:	cmp [bp + 10], ax	; 3: 57 70 10
x17136:	jge file_test$564	; 2: 125 61

file_test$551:	; SignedMultiply £temporary4964 index index
x17138:	mov ax, [bp + 10]	; 3: 139 70 10
x17141:	xor dx, dx	; 2: 49 210
x17143:	imul word [bp + 10]	; 3: 247 110 10

file_test$552:	; IntegralToFloating £temporary4965 £temporary4964
x17146:	mov [container2bytes#], ax	; 3: 163 79 27
x17149:	fild word [container2bytes#]	; 4: 223 6 79 27

file_test$553:	; PopFloat value
x17153:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$554:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; address £temporary4966 value
x17156:	mov si, bp	; 2: 137 238
x17158:	add si, 12	; 3: 131 198 12

file_test$556:	; Parameter 20 £temporary4966 6
x17161:	mov [bp + 26], si	; 3: 137 118 26

file_test$557:	; Parameter 20 8 8
x17164:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$558:	; Parameter 20 1 10
x17169:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$559:	; Parameter 20 outFilePtr 12
x17174:	mov ax, [bp + 6]	; 3: 139 70 6
x17177:	mov [bp + 32], ax	; 3: 137 70 32

file_test$560:	; Call 20 fwrite 0
x17180:	mov word [bp + 20], file_test$561	; 5: 199 70 20 42 67
x17185:	mov [bp + 22], bp	; 3: 137 110 22
x17188:	add bp, 20	; 3: 131 197 20
x17191:	jmp fwrite	; 3: 233 1 48

file_test$561:	; PostCall 20

file_test$562:	; Increment index
x17194:	inc word [bp + 10]	; 3: 255 70 10

file_test$563:	; Goto 550
x17197:	jmp file_test$550	; 2: 235 187

file_test$564:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$565:	; Parameter 12 outFilePtr 6
x17199:	mov ax, [bp + 6]	; 3: 139 70 6
x17202:	mov [bp + 18], ax	; 3: 137 70 18

file_test$566:	; Call 12 fclose 0
x17205:	mov word [bp + 12], file_test$567	; 5: 199 70 12 67 67
x17210:	mov [bp + 14], bp	; 3: 137 110 14
x17213:	add bp, 12	; 3: 131 197 12
x17216:	jmp fclose	; 3: 233 200 46

file_test$567:	; PostCall 12

file_test$568:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 6 string_TestY2Ebin# 6
x17219:	mov word [bp + 12], @10795$string_TestY2Ebin#	; 5: 199 70 12 92 84

file_test$570:	; Parameter 6 string_r# 8
x17224:	mov word [bp + 14], @10796$string_r#	; 5: 199 70 14 102 84

file_test$571:	; Call 6 fopen 0
x17229:	mov word [bp + 6], file_test$572	; 5: 199 70 6 91 67
x17234:	mov [bp + 8], bp	; 3: 137 110 8
x17237:	add bp, 6	; 3: 131 197 6
x17240:	jmp fopen	; 3: 233 59 23

file_test$572:	; PostCall 6

file_test$573:	; GetReturnValue £temporary4969

file_test$574:	; Assign inFilePtr £temporary4969
x17243:	mov [bp + 6], bx	; 3: 137 94 6

file_test$575:	; NotEqual 587 inFilePtr 0
x17246:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17250:	jne file_test$587	; 2: 117 59

file_test$576:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$577:	; Parameter 8 stderr 6
x17252:	mov ax, [stderr]	; 3: 161 22 78
x17255:	mov [bp + 14], ax	; 3: 137 70 14

file_test$578:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17258:	mov word [bp + 16], @10804$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 104 84

file_test$579:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17263:	mov word [bp + 18], @10805$string_inFilePtr20213D20NULL#	; 5: 199 70 18 150 84

file_test$580:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17268:	mov word [bp + 20], @10806$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 168 84

file_test$581:	; Parameter 8 217 14
x17273:	mov word [bp + 22], 217	; 5: 199 70 22 217 0

file_test$582:	; Call 8 fprintf 0
x17278:	mov word [bp + 8], file_test$583	; 5: 199 70 8 145 67
x17283:	mov [bp + 10], bp	; 3: 137 110 10
x17286:	add bp, 8	; 3: 131 197 8
x17289:	mov di, bp	; 2: 137 239
x17291:	add di, 6	; 3: 131 199 6
x17294:	jmp fprintf	; 3: 233 106 27

file_test$583:	; PostCall 8

file_test$584:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$585:	; Call 8 abort 0
x17297:	mov word [bp + 8], file_test$586	; 5: 199 70 8 159 67
x17302:	mov [bp + 10], bp	; 3: 137 110 10
x17305:	add bp, 8	; 3: 131 197 8
x17308:	jmp abort	; 3: 233 151 27

file_test$586:	; PostCall 8

file_test$587:	; Assign index 0
x17311:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$588:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$589:	; address £temporary4974 value
x17316:	mov si, bp	; 2: 137 238
x17318:	add si, 10	; 3: 131 198 10

file_test$590:	; Parameter 18 £temporary4974 6
x17321:	mov [bp + 24], si	; 3: 137 118 24

file_test$591:	; Parameter 18 8 8
x17324:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$592:	; Parameter 18 1 10
x17329:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$593:	; Parameter 18 inFilePtr 12
x17334:	mov ax, [bp + 6]	; 3: 139 70 6
x17337:	mov [bp + 30], ax	; 3: 137 70 30

file_test$594:	; Call 18 fread 0
x17340:	mov word [bp + 18], file_test$595	; 5: 199 70 18 202 67
x17345:	mov [bp + 20], bp	; 3: 137 110 20
x17348:	add bp, 18	; 3: 131 197 18
x17351:	jmp fread	; 3: 233 164 47

file_test$595:	; PostCall 18

file_test$596:	; GetReturnValue £temporary4975

file_test$597:	; SignedLessThanEqual 608 £temporary4975 0
x17354:	cmp bx, 0	; 3: 131 251 0
x17357:	jle file_test$608	; 2: 126 41

file_test$598:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$599:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x17359:	mov word [bp + 24], @10823$string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 233 84

file_test$600:	; Assign £temporary4977 index
x17364:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$601:	; Increment index
x17367:	inc word [bp + 8]	; 3: 255 70 8

file_test$602:	; Parameter 18 £temporary4977 8
x17370:	mov [bp + 26], ax	; 3: 137 70 26

file_test$603:	; PushFloat value
x17373:	fld qword [bp + 10]	; 3: 221 70 10

file_test$604:	; Parameter 18 value 10
x17376:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$605:	; Call 18 printf 0
x17379:	mov word [bp + 18], file_test$606	; 5: 199 70 18 246 67
x17384:	mov [bp + 20], bp	; 3: 137 110 20
x17387:	add bp, 18	; 3: 131 197 18
x17390:	mov di, bp	; 2: 137 239
x17392:	add di, 10	; 3: 131 199 10
x17395:	jmp printf	; 3: 233 14 201

file_test$606:	; PostCall 18

file_test$607:	; Goto 588
x17398:	jmp file_test$588	; 2: 235 172

file_test$608:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$609:	; Parameter 8 string_0A# 6
x17400:	mov word [bp + 14], @10827$string_0A#	; 5: 199 70 14 255 84

file_test$610:	; Call 8 printf 0
x17405:	mov word [bp + 8], file_test$611	; 5: 199 70 8 13 68
x17410:	mov [bp + 10], bp	; 3: 137 110 10
x17413:	add bp, 8	; 3: 131 197 8
x17416:	mov di, bp	; 2: 137 239
x17418:	jmp printf	; 3: 233 247 200

file_test$611:	; PostCall 8

file_test$612:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$613:	; Parameter 8 inFilePtr 6
x17421:	mov ax, [bp + 6]	; 3: 139 70 6
x17424:	mov [bp + 14], ax	; 3: 137 70 14

file_test$614:	; Call 8 fclose 0
x17427:	mov word [bp + 8], file_test$615	; 5: 199 70 8 33 68
x17432:	mov [bp + 10], bp	; 3: 137 110 10
x17435:	add bp, 8	; 3: 131 197 8
x17438:	jmp fclose	; 3: 233 234 45

file_test$615:	; PostCall 8

file_test$616:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$617:	; Parameter 6 string_TestY2Ebin# 6
x17441:	mov word [bp + 12], @10830$string_TestY2Ebin#	; 5: 199 70 12 1 85

file_test$618:	; Parameter 6 string_r# 8
x17446:	mov word [bp + 14], @10831$string_r#	; 5: 199 70 14 11 85

file_test$619:	; Call 6 fopen 0
x17451:	mov word [bp + 6], file_test$620	; 5: 199 70 6 57 68
x17456:	mov [bp + 8], bp	; 3: 137 110 8
x17459:	add bp, 6	; 3: 131 197 6
x17462:	jmp fopen	; 3: 233 93 22

file_test$620:	; PostCall 6

file_test$621:	; GetReturnValue £temporary4981

file_test$622:	; Assign inFilePtr £temporary4981
x17465:	mov [bp + 6], bx	; 3: 137 94 6

file_test$623:	; NotEqual 635 inFilePtr 0
x17468:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17472:	jne file_test$635	; 2: 117 59

file_test$624:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$625:	; Parameter 8 stderr 6
x17474:	mov ax, [stderr]	; 3: 161 22 78
x17477:	mov [bp + 14], ax	; 3: 137 70 14

file_test$626:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17480:	mov word [bp + 16], @10839$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 13 85

file_test$627:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17485:	mov word [bp + 18], @10840$string_inFilePtr20213D20NULL#	; 5: 199 70 18 59 85

file_test$628:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17490:	mov word [bp + 20], @10841$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 77 85

file_test$629:	; Parameter 8 232 14
x17495:	mov word [bp + 22], 232	; 5: 199 70 22 232 0

file_test$630:	; Call 8 fprintf 0
x17500:	mov word [bp + 8], file_test$631	; 5: 199 70 8 111 68
x17505:	mov [bp + 10], bp	; 3: 137 110 10
x17508:	add bp, 8	; 3: 131 197 8
x17511:	mov di, bp	; 2: 137 239
x17513:	add di, 6	; 3: 131 199 6
x17516:	jmp fprintf	; 3: 233 140 26

file_test$631:	; PostCall 8

file_test$632:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$633:	; Call 8 abort 0
x17519:	mov word [bp + 8], file_test$634	; 5: 199 70 8 125 68
x17524:	mov [bp + 10], bp	; 3: 137 110 10
x17527:	add bp, 8	; 3: 131 197 8
x17530:	jmp abort	; 3: 233 185 26

file_test$634:	; PostCall 8

file_test$635:	; Assign index 0
x17533:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$636:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$637:	; Parameter 10 inFilePtr 6
x17538:	mov ax, [bp + 6]	; 3: 139 70 6
x17541:	mov [bp + 16], ax	; 3: 137 70 16

file_test$638:	; Call 10 feof 0
x17544:	mov word [bp + 10], file_test$639	; 5: 199 70 10 150 68
x17549:	mov [bp + 12], bp	; 3: 137 110 12
x17552:	add bp, 10	; 3: 131 197 10
x17555:	jmp feof	; 3: 233 177 26

file_test$639:	; PostCall 10

file_test$640:	; GetReturnValue £temporary4986

file_test$641:	; NotEqual 660 £temporary4986 0
x17558:	cmp bx, 0	; 3: 131 251 0
x17561:	jne file_test$660	; 2: 117 79

file_test$642:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$643:	; address £temporary4989 value
x17563:	mov si, bp	; 2: 137 238
x17565:	add si, 10	; 3: 131 198 10

file_test$644:	; Parameter 18 £temporary4989 6
x17568:	mov [bp + 24], si	; 3: 137 118 24

file_test$645:	; Parameter 18 8 8
x17571:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$646:	; Parameter 18 1 10
x17576:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$647:	; Parameter 18 inFilePtr 12
x17581:	mov ax, [bp + 6]	; 3: 139 70 6
x17584:	mov [bp + 30], ax	; 3: 137 70 30

file_test$648:	; Call 18 fread 0
x17587:	mov word [bp + 18], file_test$649	; 5: 199 70 18 193 68
x17592:	mov [bp + 20], bp	; 3: 137 110 20
x17595:	add bp, 18	; 3: 131 197 18
x17598:	jmp fread	; 3: 233 173 46

file_test$649:	; PostCall 18

file_test$650:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$651:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x17601:	mov word [bp + 24], @10859$string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 142 85

file_test$652:	; Assign £temporary4991 index
x17606:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$653:	; Increment index
x17609:	inc word [bp + 8]	; 3: 255 70 8

file_test$654:	; Parameter 18 £temporary4991 8
x17612:	mov [bp + 26], ax	; 3: 137 70 26

file_test$655:	; PushFloat value
x17615:	fld qword [bp + 10]	; 3: 221 70 10

file_test$656:	; Parameter 18 value 10
x17618:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$657:	; Call 18 printf 0
x17621:	mov word [bp + 18], file_test$658	; 5: 199 70 18 232 68
x17626:	mov [bp + 20], bp	; 3: 137 110 20
x17629:	add bp, 18	; 3: 131 197 18
x17632:	mov di, bp	; 2: 137 239
x17634:	add di, 10	; 3: 131 199 10
x17637:	jmp printf	; 3: 233 28 200

file_test$658:	; PostCall 18

file_test$659:	; Goto 636
x17640:	jmp file_test$636	; 2: 235 152

file_test$660:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$661:	; Parameter 8 string_0A# 6
x17642:	mov word [bp + 14], @10863$string_0A#	; 5: 199 70 14 164 85

file_test$662:	; Call 8 printf 0
x17647:	mov word [bp + 8], file_test$663	; 5: 199 70 8 255 68
x17652:	mov [bp + 10], bp	; 3: 137 110 10
x17655:	add bp, 8	; 3: 131 197 8
x17658:	mov di, bp	; 2: 137 239
x17660:	jmp printf	; 3: 233 5 200

file_test$663:	; PostCall 8

file_test$664:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$665:	; Parameter 8 inFilePtr 6
x17663:	mov ax, [bp + 6]	; 3: 139 70 6
x17666:	mov [bp + 14], ax	; 3: 137 70 14

file_test$666:	; Call 8 fclose 0
x17669:	mov word [bp + 8], file_test$667	; 5: 199 70 8 19 69
x17674:	mov [bp + 10], bp	; 3: 137 110 10
x17677:	add bp, 8	; 3: 131 197 8
x17680:	jmp fclose	; 3: 233 248 44

file_test$667:	; PostCall 8

file_test$668:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$669:	; Parameter 6 string_TestX2Ebin# 6
x17683:	mov word [bp + 12], @10866$string_TestX2Ebin#	; 5: 199 70 12 166 85

file_test$670:	; Parameter 6 string_r# 8
x17688:	mov word [bp + 14], @10867$string_r#	; 5: 199 70 14 176 85

file_test$671:	; Call 6 fopen 0
x17693:	mov word [bp + 6], file_test$672	; 5: 199 70 6 43 69
x17698:	mov [bp + 8], bp	; 3: 137 110 8
x17701:	add bp, 6	; 3: 131 197 6
x17704:	jmp fopen	; 3: 233 107 21

file_test$672:	; PostCall 6

file_test$673:	; GetReturnValue £temporary4995

file_test$674:	; Assign inFilePtr £temporary4995
x17707:	mov [bp + 6], bx	; 3: 137 94 6

file_test$675:	; NotEqual 687 inFilePtr 0
x17710:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17714:	jne file_test$687	; 2: 117 59

file_test$676:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$677:	; Parameter 10 stderr 6
x17716:	mov ax, [stderr]	; 3: 161 22 78
x17719:	mov [bp + 16], ax	; 3: 137 70 16

file_test$678:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17722:	mov word [bp + 18], @10876$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 178 85

file_test$679:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17727:	mov word [bp + 20], @10877$string_inFilePtr20213D20NULL#	; 5: 199 70 20 224 85

file_test$680:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17732:	mov word [bp + 22], @10878$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 242 85

file_test$681:	; Parameter 10 250 14
x17737:	mov word [bp + 24], 250	; 5: 199 70 24 250 0

file_test$682:	; Call 10 fprintf 0
x17742:	mov word [bp + 10], file_test$683	; 5: 199 70 10 97 69
x17747:	mov [bp + 12], bp	; 3: 137 110 12
x17750:	add bp, 10	; 3: 131 197 10
x17753:	mov di, bp	; 2: 137 239
x17755:	add di, 6	; 3: 131 199 6
x17758:	jmp fprintf	; 3: 233 154 25

file_test$683:	; PostCall 10

file_test$684:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$685:	; Call 10 abort 0
x17761:	mov word [bp + 10], file_test$686	; 5: 199 70 10 111 69
x17766:	mov [bp + 12], bp	; 3: 137 110 12
x17769:	add bp, 10	; 3: 131 197 10
x17772:	jmp abort	; 3: 233 199 25

file_test$686:	; PostCall 10

file_test$687:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$688:	; address £temporary5000 size
x17775:	mov si, bp	; 2: 137 238
x17777:	add si, 8	; 3: 131 198 8

file_test$689:	; Parameter 10 £temporary5000 6
x17780:	mov [bp + 16], si	; 3: 137 118 16

file_test$690:	; Parameter 10 2 8
x17783:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$691:	; Parameter 10 1 10
x17788:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$692:	; Parameter 10 inFilePtr 12
x17793:	mov ax, [bp + 6]	; 3: 139 70 6
x17796:	mov [bp + 22], ax	; 3: 137 70 22

file_test$693:	; Call 10 fread 0
x17799:	mov word [bp + 10], file_test$694	; 5: 199 70 10 149 69
x17804:	mov [bp + 12], bp	; 3: 137 110 12
x17807:	add bp, 10	; 3: 131 197 10
x17810:	jmp fread	; 3: 233 217 45

file_test$694:	; PostCall 10

file_test$695:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$696:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17813:	mov word [bp + 16], @10888$string_size43A2025i20total2025i0A#	; 5: 199 70 16 51 86

file_test$697:	; Parameter 10 size 8
x17818:	mov ax, [bp + 8]	; 3: 139 70 8
x17821:	mov [bp + 18], ax	; 3: 137 70 18

file_test$698:	; SignedMultiply £temporary5002 size 8
x17824:	mov ax, [bp + 8]	; 3: 139 70 8
x17827:	xor dx, dx	; 2: 49 210
x17829:	imul word [@10890$int2$8#]	; 4: 247 46 71 86

file_test$699:	; Parameter 10 £temporary5002 10
x17833:	mov [bp + 20], ax	; 3: 137 70 20

file_test$700:	; Call 10 printf 0
x17836:	mov word [bp + 10], file_test$701	; 5: 199 70 10 191 69
x17841:	mov [bp + 12], bp	; 3: 137 110 12
x17844:	add bp, 10	; 3: 131 197 10
x17847:	mov di, bp	; 2: 137 239
x17849:	add di, 4	; 3: 131 199 4
x17852:	jmp printf	; 3: 233 69 199

file_test$701:	; PostCall 10

file_test$702:	; SignedMultiply total size 8
x17855:	mov ax, [bp + 8]	; 3: 139 70 8
x17858:	xor dx, dx	; 2: 49 210
x17860:	imul word [@10894$int2$8#]	; 4: 247 46 73 86
x17864:	mov [bp + 10], ax	; 3: 137 70 10

file_test$703:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$704:	; Parameter 14 total 6
x17867:	mov ax, [bp + 10]	; 3: 139 70 10
x17870:	mov [bp + 20], ax	; 3: 137 70 20

file_test$705:	; Call 14 malloc 0
x17873:	mov word [bp + 14], file_test$706	; 5: 199 70 14 223 69
x17878:	mov [bp + 16], bp	; 3: 137 110 16
x17881:	add bp, 14	; 3: 131 197 14
x17884:	jmp malloc	; 3: 233 210 45

file_test$706:	; PostCall 14

file_test$707:	; GetReturnValue £temporary5005

file_test$708:	; Assign p £temporary5005
x17887:	mov [bp + 14], bx	; 3: 137 94 14

file_test$709:	; UnsignedMultiply £temporary5006 size 8
x17890:	mov ax, [bp + 8]	; 3: 139 70 8
x17893:	xor dx, dx	; 2: 49 210
x17895:	mul word [@10901$int2$8#]	; 4: 247 38 75 86

file_test$710:	; BinaryAdd endPtr p £temporary5006
x17899:	mov bx, [bp + 14]	; 3: 139 94 14
x17902:	add bx, ax	; 2: 1 195
x17904:	mov [bp + 16], bx	; 3: 137 94 16

file_test$711:	; NotEqual 723 p 0
x17907:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17911:	jne file_test$723	; 2: 117 59

file_test$712:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$713:	; Parameter 18 stderr 6
x17913:	mov ax, [stderr]	; 3: 161 22 78
x17916:	mov [bp + 24], ax	; 3: 137 70 24

file_test$714:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17919:	mov word [bp + 26], @10909$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 77 86

file_test$715:	; Parameter 18 string_p20213D20NULL# 10
x17924:	mov word [bp + 28], @10910$string_p20213D20NULL#	; 5: 199 70 28 123 86

file_test$716:	; Parameter 18 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17929:	mov word [bp + 30], @10911$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 133 86

file_test$717:	; Parameter 18 257 14
x17934:	mov word [bp + 32], 257	; 5: 199 70 32 1 1

file_test$718:	; Call 18 fprintf 0
x17939:	mov word [bp + 18], file_test$719	; 5: 199 70 18 38 70
x17944:	mov [bp + 20], bp	; 3: 137 110 20
x17947:	add bp, 18	; 3: 131 197 18
x17950:	mov di, bp	; 2: 137 239
x17952:	add di, 6	; 3: 131 199 6
x17955:	jmp fprintf	; 3: 233 213 24

file_test$719:	; PostCall 18

file_test$720:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$721:	; Call 18 abort 0
x17958:	mov word [bp + 18], file_test$722	; 5: 199 70 18 52 70
x17963:	mov [bp + 20], bp	; 3: 137 110 20
x17966:	add bp, 18	; 3: 131 197 18
x17969:	jmp abort	; 3: 233 2 25

file_test$722:	; PostCall 18

file_test$723:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$724:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17972:	mov word [bp + 24], @10915$string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 198 86

file_test$725:	; Parameter 18 p 8
x17977:	mov ax, [bp + 14]	; 3: 139 70 14
x17980:	mov [bp + 26], ax	; 3: 137 70 26

file_test$726:	; Parameter 18 total 10
x17983:	mov ax, [bp + 10]	; 3: 139 70 10
x17986:	mov [bp + 28], ax	; 3: 137 70 28

file_test$727:	; Parameter 18 endPtr 12
x17989:	mov ax, [bp + 16]	; 3: 139 70 16
x17992:	mov [bp + 30], ax	; 3: 137 70 30

file_test$728:	; Call 18 printf 0
x17995:	mov word [bp + 18], file_test$729	; 5: 199 70 18 94 70
x18000:	mov [bp + 20], bp	; 3: 137 110 20
x18003:	add bp, 18	; 3: 131 197 18
x18006:	mov di, bp	; 2: 137 239
x18008:	add di, 6	; 3: 131 199 6
x18011:	jmp printf	; 3: 233 166 198

file_test$729:	; PostCall 18

file_test$730:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$731:	; Parameter 18 p 6
x18014:	mov ax, [bp + 14]	; 3: 139 70 14
x18017:	mov [bp + 24], ax	; 3: 137 70 24

file_test$732:	; Parameter 18 total 8
x18020:	mov ax, [bp + 10]	; 3: 139 70 10
x18023:	mov [bp + 26], ax	; 3: 137 70 26

file_test$733:	; Parameter 18 1 10
x18026:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$734:	; Parameter 18 inFilePtr 12
x18031:	mov ax, [bp + 6]	; 3: 139 70 6
x18034:	mov [bp + 30], ax	; 3: 137 70 30

file_test$735:	; Call 18 fread 0
x18037:	mov word [bp + 18], file_test$736	; 5: 199 70 18 131 70
x18042:	mov [bp + 20], bp	; 3: 137 110 20
x18045:	add bp, 18	; 3: 131 197 18
x18048:	jmp fread	; 3: 233 235 44

file_test$736:	; PostCall 18

file_test$737:	; Assign index 0
x18051:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$738:	; SignedGreaterThanEqual 751 index size
x18056:	mov ax, [bp + 8]	; 3: 139 70 8
x18059:	cmp [bp + 12], ax	; 3: 57 70 12
x18062:	jge file_test$751	; 2: 125 54

file_test$739:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$740:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x18064:	mov word [bp + 24], @10925$string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 217 86

file_test$741:	; Parameter 18 index 8
x18069:	mov ax, [bp + 12]	; 3: 139 70 12
x18072:	mov [bp + 26], ax	; 3: 137 70 26

file_test$742:	; UnsignedMultiply £temporary5017 index 8
x18075:	mov ax, [bp + 12]	; 3: 139 70 12
x18078:	xor dx, dx	; 2: 49 210
x18080:	mul word [@10927$int2$8#]	; 4: 247 38 239 86

file_test$743:	; BinaryAdd £temporary5018 p £temporary5017
x18084:	mov si, [bp + 14]	; 3: 139 118 14
x18087:	add si, ax	; 2: 1 198

file_test$744:	; Deref £temporary5016 -> £temporary5018 £temporary5018 0

file_test$745:	; PushFloat £temporary5016 -> £temporary5018
x18089:	fld qword [si]	; 2: 221 4

file_test$746:	; Parameter 18 £temporary5016 -> £temporary5018 10
x18091:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$747:	; Call 18 printf 0
x18094:	mov word [bp + 18], file_test$748	; 5: 199 70 18 193 70
x18099:	mov [bp + 20], bp	; 3: 137 110 20
x18102:	add bp, 18	; 3: 131 197 18
x18105:	mov di, bp	; 2: 137 239
x18107:	add di, 10	; 3: 131 199 10
x18110:	jmp printf	; 3: 233 67 198

file_test$748:	; PostCall 18

file_test$749:	; Increment index
x18113:	inc word [bp + 12]	; 3: 255 70 12

file_test$750:	; Goto 738
x18116:	jmp file_test$738	; 2: 235 194

file_test$751:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$752:	; Parameter 18 string_0A# 6
x18118:	mov word [bp + 24], @10931$string_0A#	; 5: 199 70 24 241 86

file_test$753:	; Call 18 printf 0
x18123:	mov word [bp + 18], file_test$754	; 5: 199 70 18 219 70
x18128:	mov [bp + 20], bp	; 3: 137 110 20
x18131:	add bp, 18	; 3: 131 197 18
x18134:	mov di, bp	; 2: 137 239
x18136:	jmp printf	; 3: 233 41 198

file_test$754:	; PostCall 18

file_test$755:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$756:	; Parameter 18 p 6
x18139:	mov ax, [bp + 14]	; 3: 139 70 14
x18142:	mov [bp + 24], ax	; 3: 137 70 24

file_test$757:	; Call 18 free 0
x18145:	mov word [bp + 18], file_test$758	; 5: 199 70 18 239 70
x18150:	mov [bp + 20], bp	; 3: 137 110 20
x18153:	add bp, 18	; 3: 131 197 18
x18156:	jmp free	; 3: 233 207 46

file_test$758:	; PostCall 18

file_test$759:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$760:	; Parameter 10 inFilePtr 6
x18159:	mov ax, [bp + 6]	; 3: 139 70 6
x18162:	mov [bp + 16], ax	; 3: 137 70 16

file_test$761:	; Call 10 fclose 0
x18165:	mov word [bp + 10], file_test$762	; 5: 199 70 10 3 71
x18170:	mov [bp + 12], bp	; 3: 137 110 12
x18173:	add bp, 10	; 3: 131 197 10
x18176:	jmp fclose	; 3: 233 8 43

file_test$762:	; PostCall 10

file_test$763:	; Assign personVector[0]$name[0] 65
x18179:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$764:	; Assign personVector[0]$name[1] 100
x18183:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$765:	; Assign personVector[0]$name[2] 97
x18187:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$766:	; Assign personVector[0]$name[3] 109
x18191:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$767:	; Assign personVector[0]$name[4] 32
x18195:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$768:	; Assign personVector[0]$name[5] 66
x18199:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$769:	; Assign personVector[0]$name[6] 101
x18203:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$770:	; Assign personVector[0]$name[7] 114
x18207:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$771:	; Assign personVector[0]$name[8] 116
x18211:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$772:	; Assign personVector[0]$name[9] 105
x18215:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$773:	; Assign personVector[0]$name[10] 108
x18219:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$774:	; Assign personVector[0]$name[11] 115
x18223:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$775:	; Assign personVector[0]$name[12] 115
x18227:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$776:	; Assign personVector[0]$name[13] 111
x18231:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$777:	; Assign personVector[0]$name[14] 110
x18235:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$778:	; Assign personVector[0]$name[15] 0
x18239:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$779:	; Assign personVector[0]$phone 12345
x18243:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$780:	; Assign personVector[1]$name[0] 66
x18248:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$781:	; Assign personVector[1]$name[1] 101
x18252:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$782:	; Assign personVector[1]$name[2] 114
x18256:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$783:	; Assign personVector[1]$name[3] 116
x18260:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$784:	; Assign personVector[1]$name[4] 105
x18264:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$785:	; Assign personVector[1]$name[5] 108
x18268:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$786:	; Assign personVector[1]$name[6] 32
x18272:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$787:	; Assign personVector[1]$name[7] 67
x18276:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$788:	; Assign personVector[1]$name[8] 101
x18280:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$789:	; Assign personVector[1]$name[9] 97
x18284:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$790:	; Assign personVector[1]$name[10] 115
x18288:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$791:	; Assign personVector[1]$name[11] 97
x18292:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$792:	; Assign personVector[1]$name[12] 114
x18296:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$793:	; Assign personVector[1]$name[13] 115
x18300:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$794:	; Assign personVector[1]$name[14] 115
x18304:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$795:	; Assign personVector[1]$name[15] 111
x18308:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$796:	; Assign personVector[1]$name[16] 110
x18312:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$797:	; Assign personVector[1]$name[17] 0
x18316:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$798:	; Assign personVector[1]$phone 23456
x18320:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$799:	; Assign personVector[2]$name[0] 67
x18325:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$800:	; Assign personVector[2]$name[1] 101
x18329:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$801:	; Assign personVector[2]$name[2] 97
x18333:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$802:	; Assign personVector[2]$name[3] 115
x18337:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$803:	; Assign personVector[2]$name[4] 97
x18341:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$804:	; Assign personVector[2]$name[5] 114
x18345:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$805:	; Assign personVector[2]$name[6] 32
x18349:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$806:	; Assign personVector[2]$name[7] 68
x18353:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$807:	; Assign personVector[2]$name[8] 97
x18357:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$808:	; Assign personVector[2]$name[9] 118
x18361:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$809:	; Assign personVector[2]$name[10] 105
x18365:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$810:	; Assign personVector[2]$name[11] 100
x18369:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$811:	; Assign personVector[2]$name[12] 115
x18373:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$812:	; Assign personVector[2]$name[13] 115
x18377:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$813:	; Assign personVector[2]$name[14] 111
x18381:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$814:	; Assign personVector[2]$name[15] 110
x18385:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$815:	; Assign personVector[2]$name[16] 0
x18389:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$816:	; Assign personVector[2]$phone 24567
x18393:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$817:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$818:	; Parameter 206 string_Block2Ebin# 6
x18399:	mov word [bp + 212], @11112$string_Block2Ebin#	; 6: 199 134 212 0 243 86

file_test$819:	; Parameter 206 string_w# 8
x18405:	mov word [bp + 214], @11113$string_w#	; 6: 199 134 214 0 253 86

file_test$820:	; Call 206 fopen 0
x18411:	mov word [bp + 206], file_test$821	; 6: 199 134 206 0 252 71
x18417:	mov [bp + 208], bp	; 4: 137 174 208 0
x18421:	add bp, 206	; 4: 129 197 206 0
x18425:	jmp fopen	; 3: 233 154 18

file_test$821:	; PostCall 206

file_test$822:	; GetReturnValue £temporary5083

file_test$823:	; Assign outFilePtr £temporary5083
x18428:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$824:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$825:	; Parameter 208 string_Block2Ebin# 6
x18432:	mov word [bp + 214], @11116$string_Block2Ebin#	; 6: 199 134 214 0 255 86

file_test$826:	; Parameter 208 string_r# 8
x18438:	mov word [bp + 216], @11117$string_r#	; 6: 199 134 216 0 9 87

file_test$827:	; Call 208 fopen 0
x18444:	mov word [bp + 208], file_test$828	; 6: 199 134 208 0 29 72
x18450:	mov [bp + 210], bp	; 4: 137 174 210 0
x18454:	add bp, 208	; 4: 129 197 208 0
x18458:	jmp fopen	; 3: 233 121 18

file_test$828:	; PostCall 208

file_test$829:	; GetReturnValue £temporary5084

file_test$830:	; Assign inFilePtr £temporary5084
x18461:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$831:	; NotEqual 843 outFilePtr 0
x18465:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x18470:	jne file_test$843	; 2: 117 70

file_test$832:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 210 stderr 6
x18472:	mov ax, [stderr]	; 3: 161 22 78
x18475:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$834:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18479:	mov word [bp + 218], @11125$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 11 87

file_test$835:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x18485:	mov word [bp + 220], @11126$string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 57 87

file_test$836:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18491:	mov word [bp + 222], @11127$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 76 87

file_test$837:	; Parameter 210 284 14
x18497:	mov word [bp + 224], 284	; 6: 199 134 224 0 28 1

file_test$838:	; Call 210 fprintf 0
x18503:	mov word [bp + 210], file_test$839	; 6: 199 134 210 0 93 72
x18509:	mov [bp + 212], bp	; 4: 137 174 212 0
x18513:	add bp, 210	; 4: 129 197 210 0
x18517:	mov di, bp	; 2: 137 239
x18519:	add di, 6	; 3: 131 199 6
x18522:	jmp fprintf	; 3: 233 158 22

file_test$839:	; PostCall 210

file_test$840:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Call 210 abort 0
x18525:	mov word [bp + 210], file_test$842	; 6: 199 134 210 0 110 72
x18531:	mov [bp + 212], bp	; 4: 137 174 212 0
x18535:	add bp, 210	; 4: 129 197 210 0
x18539:	jmp abort	; 3: 233 200 22

file_test$842:	; PostCall 210

file_test$843:	; NotEqual 855 inFilePtr 0
x18542:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x18547:	jne file_test$855	; 2: 117 70

file_test$844:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$845:	; Parameter 210 stderr 6
x18549:	mov ax, [stderr]	; 3: 161 22 78
x18552:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$846:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18556:	mov word [bp + 218], @11136$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 141 87

file_test$847:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x18562:	mov word [bp + 220], @11137$string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 187 87

file_test$848:	; Parameter 210 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18568:	mov word [bp + 222], @11138$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 205 87

file_test$849:	; Parameter 210 285 14
x18574:	mov word [bp + 224], 285	; 6: 199 134 224 0 29 1

file_test$850:	; Call 210 fprintf 0
x18580:	mov word [bp + 210], file_test$851	; 6: 199 134 210 0 170 72
x18586:	mov [bp + 212], bp	; 4: 137 174 212 0
x18590:	add bp, 210	; 4: 129 197 210 0
x18594:	mov di, bp	; 2: 137 239
x18596:	add di, 6	; 3: 131 199 6
x18599:	jmp fprintf	; 3: 233 81 22

file_test$851:	; PostCall 210

file_test$852:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Call 210 abort 0
x18602:	mov word [bp + 210], file_test$854	; 6: 199 134 210 0 187 72
x18608:	mov [bp + 212], bp	; 4: 137 174 212 0
x18612:	add bp, 210	; 4: 129 197 210 0
x18616:	jmp abort	; 3: 233 123 22

file_test$854:	; PostCall 210

file_test$855:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$856:	; Parameter 210 personVector 6
x18619:	mov [bp + 216], bp	; 4: 137 174 216 0
x18623:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$857:	; Parameter 210 150 8
x18628:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$858:	; Parameter 210 1 10
x18634:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$859:	; Parameter 210 outFilePtr 12
x18640:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18644:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$860:	; Call 210 fwrite 0
x18648:	mov word [bp + 210], file_test$861	; 6: 199 134 210 0 233 72
x18654:	mov [bp + 212], bp	; 4: 137 174 212 0
x18658:	add bp, 210	; 4: 129 197 210 0
x18662:	jmp fwrite	; 3: 233 66 42

file_test$861:	; PostCall 210

file_test$862:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$863:	; Parameter 210 outFilePtr 6
x18665:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18669:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$864:	; Call 210 fclose 0
x18673:	mov word [bp + 210], file_test$865	; 6: 199 134 210 0 2 73
x18679:	mov [bp + 212], bp	; 4: 137 174 212 0
x18683:	add bp, 210	; 4: 129 197 210 0
x18687:	jmp fclose	; 3: 233 9 41

file_test$865:	; PostCall 210

file_test$866:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$867:	; Parameter 210 inFilePtr 6
x18690:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18694:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$868:	; Call 210 feof 0
x18698:	mov word [bp + 210], file_test$869	; 6: 199 134 210 0 27 73
x18704:	mov [bp + 212], bp	; 4: 137 174 212 0
x18708:	add bp, 210	; 4: 129 197 210 0
x18712:	jmp feof	; 3: 233 44 22

file_test$869:	; PostCall 210

file_test$870:	; GetReturnValue £temporary5095

file_test$871:	; NotEqual 891 £temporary5095 0
x18715:	cmp bx, 0	; 3: 131 251 0
x18718:	jne file_test$891	; 2: 117 124

file_test$872:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$873:	; address £temporary5098 person
x18720:	mov si, bp	; 2: 137 238
x18722:	add si, 156	; 4: 129 198 156 0

file_test$874:	; Parameter 210 £temporary5098 6
x18726:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$875:	; Parameter 210 50 8
x18730:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$876:	; Parameter 210 1 10
x18736:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$877:	; Parameter 210 inFilePtr 12
x18742:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18746:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$878:	; Call 210 fread 0
x18750:	mov word [bp + 210], file_test$879	; 6: 199 134 210 0 79 73
x18756:	mov [bp + 212], bp	; 4: 137 174 212 0
x18760:	add bp, 210	; 4: 129 197 210 0
x18764:	jmp fread	; 3: 233 31 42

file_test$879:	; PostCall 210

file_test$880:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$881:	; Parameter 210 string_Name20203A2025s0A# 6
x18767:	mov word [bp + 216], @11158$string_Name20203A2025s0A#	; 6: 199 134 216 0 14 88

file_test$882:	; Parameter 210 person$name 8
x18773:	mov [bp + 218], bp	; 4: 137 174 218 0
x18777:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$883:	; Call 210 printf 0
x18783:	mov word [bp + 210], file_test$884	; 6: 199 134 210 0 117 73
x18789:	mov [bp + 212], bp	; 4: 137 174 212 0
x18793:	add bp, 210	; 4: 129 197 210 0
x18797:	mov di, bp	; 2: 137 239
x18799:	add di, 2	; 3: 131 199 2
x18802:	jmp printf	; 3: 233 143 195

file_test$884:	; PostCall 210

file_test$885:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$886:	; Parameter 210 string_Phone203A2025d0A# 6
x18805:	mov word [bp + 216], @11161$string_Phone203A2025d0A#	; 6: 199 134 216 0 26 88

file_test$887:	; Parameter 210 person$phone 8
x18811:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18815:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$888:	; Call 210 printf 0
x18819:	mov word [bp + 210], file_test$889	; 6: 199 134 210 0 153 73
x18825:	mov [bp + 212], bp	; 4: 137 174 212 0
x18829:	add bp, 210	; 4: 129 197 210 0
x18833:	mov di, bp	; 2: 137 239
x18835:	add di, 2	; 3: 131 199 2
x18838:	jmp printf	; 3: 233 107 195

file_test$889:	; PostCall 210

file_test$890:	; Goto 866
x18841:	jmp file_test$866	; 3: 233 102 255

file_test$891:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 210 inFilePtr 6
x18844:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18848:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$893:	; Call 210 fclose 0
x18852:	mov word [bp + 210], file_test$894	; 6: 199 134 210 0 181 73
x18858:	mov [bp + 212], bp	; 4: 137 174 212 0
x18862:	add bp, 210	; 4: 129 197 210 0
x18866:	jmp fclose	; 3: 233 86 40

file_test$894:	; PostCall 210

file_test$895:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$896:	; Parameter 6 string_outx2Etxt# 6
x18869:	mov word [bp + 12], @11165$string_outx2Etxt#	; 5: 199 70 12 38 88

file_test$897:	; Parameter 6 string_r# 8
x18874:	mov word [bp + 14], @11166$string_r#	; 5: 199 70 14 47 88

file_test$898:	; Call 6 fopen 0
x18879:	mov word [bp + 6], file_test$899	; 5: 199 70 6 205 73
x18884:	mov [bp + 8], bp	; 3: 137 110 8
x18887:	add bp, 6	; 3: 131 197 6
x18890:	jmp fopen	; 3: 233 201 16

file_test$899:	; PostCall 6

file_test$900:	; GetReturnValue £temporary5105

file_test$901:	; Assign inFilePtr £temporary5105
x18893:	mov [bp + 6], bx	; 3: 137 94 6

file_test$902:	; NotEqual 914 inFilePtr 0
x18896:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18900:	jne file_test$914	; 2: 117 59

file_test$903:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$904:	; Parameter 12 stderr 6
x18902:	mov ax, [stderr]	; 3: 161 22 78
x18905:	mov [bp + 18], ax	; 3: 137 70 18

file_test$905:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18908:	mov word [bp + 20], @11176$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 49 88

file_test$906:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x18913:	mov word [bp + 22], @11177$string_inFilePtr20213D20NULL#	; 5: 199 70 22 95 88

file_test$907:	; Parameter 12 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18918:	mov word [bp + 24], @11178$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 113 88

file_test$908:	; Parameter 12 302 14
x18923:	mov word [bp + 26], 302	; 5: 199 70 26 46 1

file_test$909:	; Call 12 fprintf 0
x18928:	mov word [bp + 12], file_test$910	; 5: 199 70 12 3 74
x18933:	mov [bp + 14], bp	; 3: 137 110 14
x18936:	add bp, 12	; 3: 131 197 12
x18939:	mov di, bp	; 2: 137 239
x18941:	add di, 6	; 3: 131 199 6
x18944:	jmp fprintf	; 3: 233 248 20

file_test$910:	; PostCall 12

file_test$911:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$912:	; Call 12 abort 0
x18947:	mov word [bp + 12], file_test$913	; 5: 199 70 12 17 74
x18952:	mov [bp + 14], bp	; 3: 137 110 14
x18955:	add bp, 12	; 3: 131 197 12
x18958:	jmp abort	; 3: 233 37 21

file_test$913:	; PostCall 12

file_test$914:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$915:	; Parameter 12 inFilePtr 6
x18961:	mov ax, [bp + 6]	; 3: 139 70 6
x18964:	mov [bp + 18], ax	; 3: 137 70 18

file_test$916:	; Parameter 12 0 8
x18967:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$917:	; Parameter 12 2 10
x18972:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

file_test$918:	; Call 12 fseek 0
x18977:	mov word [bp + 12], file_test$919	; 5: 199 70 12 47 74
x18982:	mov [bp + 14], bp	; 3: 137 110 14
x18985:	add bp, 12	; 3: 131 197 12
x18988:	jmp fseek	; 3: 233 39 20

file_test$919:	; PostCall 12

file_test$920:	; GetReturnValue £temporary5110

file_test$921:	; Assign size £temporary5110
x18991:	mov [bp + 12], bx	; 3: 137 94 12

file_test$922:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$923:	; Parameter 14 string_ftell2025i0A# 6
x18994:	mov word [bp + 20], @11187$string_ftell2025i0A#	; 5: 199 70 20 178 88

file_test$924:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$925:	; Parameter 14 inFilePtr 14
x18999:	mov ax, [bp + 6]	; 3: 139 70 6
x19002:	mov [bp + 28], ax	; 3: 137 70 28

file_test$926:	; Call 14 ftell 8
x19005:	mov word [bp + 22], file_test$927	; 5: 199 70 22 75 74
x19010:	mov [bp + 24], bp	; 3: 137 110 24
x19013:	add bp, 22	; 3: 131 197 22
x19016:	jmp ftell	; 3: 233 20 44

file_test$927:	; PostCall 14

file_test$928:	; GetReturnValue £temporary5111

file_test$929:	; Parameter 14 £temporary5111 8
x19019:	mov [bp + 22], bx	; 3: 137 94 22

file_test$930:	; Call 14 printf 0
x19022:	mov word [bp + 14], file_test$931	; 5: 199 70 14 97 74
x19027:	mov [bp + 16], bp	; 3: 137 110 16
x19030:	add bp, 14	; 3: 131 197 14
x19033:	mov di, bp	; 2: 137 239
x19035:	add di, 2	; 3: 131 199 2
x19038:	jmp printf	; 3: 233 163 194

file_test$931:	; PostCall 14

file_test$932:	; Assign index 0
x19041:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$933:	; SignedGreaterThanEqual 965 index size
x19046:	mov ax, [bp + 12]	; 3: 139 70 12
x19049:	cmp [bp + 10], ax	; 3: 57 70 10
x19052:	jge file_test$965	; 4: 15 141 154 0

file_test$934:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$935:	; Parameter 14 inFilePtr 6
x19056:	mov ax, [bp + 6]	; 3: 139 70 6
x19059:	mov [bp + 20], ax	; 3: 137 70 20

file_test$936:	; Call 14 fgetc 0
x19062:	mov word [bp + 14], file_test$937	; 5: 199 70 14 132 74
x19067:	mov [bp + 16], bp	; 3: 137 110 16
x19070:	add bp, 14	; 3: 131 197 14
x19073:	jmp fgetc	; 3: 233 4 44

file_test$937:	; PostCall 14

file_test$938:	; GetReturnValue £temporary5115

file_test$939:	; IntegralToIntegral £temporary5116 £temporary5115
x19076:	cmp bx, 0	; 3: 131 251 0
x19079:	jge file_test$940	; 2: 125 4
x19081:	neg bx	; 2: 247 219
x19083:	neg bl	; 2: 246 219

file_test$940:	; Assign c £temporary5116
x19085:	mov [bp + 14], bl	; 3: 136 94 14

file_test$941:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$942:	; Parameter 15 string_3C25c3E2025i2025i0A# 6
x19088:	mov word [bp + 21], @11198$string_3C25c3E2025i2025i0A#	; 5: 199 70 21 188 88

file_test$943:	; IntegralToIntegral £temporary5117 c
x19093:	mov al, [bp + 14]	; 3: 138 70 14
x19096:	and ax, 255	; 3: 37 255 0
x19099:	cmp al, 0	; 2: 60 0
x19101:	jge file_test$944	; 2: 125 4
x19103:	neg al	; 2: 246 216
x19105:	neg ax	; 2: 247 216

file_test$944:	; Parameter 15 £temporary5117 8
x19107:	mov [bp + 23], ax	; 3: 137 70 23

file_test$945:	; IntegralToIntegral £temporary5118 c
x19110:	mov al, [bp + 14]	; 3: 138 70 14
x19113:	and ax, 255	; 3: 37 255 0
x19116:	cmp al, 0	; 2: 60 0
x19118:	jge file_test$946	; 2: 125 4
x19120:	neg al	; 2: 246 216
x19122:	neg ax	; 2: 247 216

file_test$946:	; Parameter 15 £temporary5118 10
x19124:	mov [bp + 25], ax	; 3: 137 70 25

file_test$947:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$948:	; Parameter 15 inFilePtr 18
x19127:	mov ax, [bp + 6]	; 3: 139 70 6
x19130:	mov [bp + 33], ax	; 3: 137 70 33

file_test$949:	; Call 15 ftell 12
x19133:	mov word [bp + 27], file_test$950	; 5: 199 70 27 203 74
x19138:	mov [bp + 29], bp	; 3: 137 110 29
x19141:	add bp, 27	; 3: 131 197 27
x19144:	jmp ftell	; 3: 233 148 43

file_test$950:	; PostCall 15

file_test$951:	; GetReturnValue £temporary5119

file_test$952:	; Parameter 15 £temporary5119 12
x19147:	mov [bp + 27], bx	; 3: 137 94 27

file_test$953:	; Call 15 printf 0
x19150:	mov word [bp + 15], file_test$954	; 5: 199 70 15 225 74
x19155:	mov [bp + 17], bp	; 3: 137 110 17
x19158:	add bp, 15	; 3: 131 197 15
x19161:	mov di, bp	; 2: 137 239
x19163:	add di, 6	; 3: 131 199 6
x19166:	jmp printf	; 3: 233 35 194

file_test$954:	; PostCall 15

file_test$955:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$956:	; Parameter 15 inFilePtr 6
x19169:	mov ax, [bp + 6]	; 3: 139 70 6
x19172:	mov [bp + 21], ax	; 3: 137 70 21

file_test$957:	; BinarySubtract £temporary5121 size index
x19175:	mov ax, [bp + 12]	; 3: 139 70 12
x19178:	sub ax, [bp + 10]	; 3: 43 70 10

file_test$958:	; BinarySubtract £temporary5122 £temporary5121 1
x19181:	dec ax	; 1: 72

file_test$959:	; Parameter 15 £temporary5122 8
x19182:	mov [bp + 23], ax	; 3: 137 70 23

file_test$960:	; Parameter 15 0 10
x19185:	mov word [bp + 25], 0	; 5: 199 70 25 0 0

file_test$961:	; Call 15 fseek 0
x19190:	mov word [bp + 15], file_test$962	; 5: 199 70 15 4 75
x19195:	mov [bp + 17], bp	; 3: 137 110 17
x19198:	add bp, 15	; 3: 131 197 15
x19201:	jmp fseek	; 3: 233 82 19

file_test$962:	; PostCall 15

file_test$963:	; Increment index
x19204:	inc word [bp + 10]	; 3: 255 70 10

file_test$964:	; Goto 933
x19207:	jmp file_test$933	; 3: 233 92 255

file_test$965:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$966:	; Parameter 12 string_0A# 6
x19210:	mov word [bp + 18], @11209$string_0A#	; 5: 199 70 18 200 88

file_test$967:	; Call 12 printf 0
x19215:	mov word [bp + 12], file_test$968	; 5: 199 70 12 31 75
x19220:	mov [bp + 14], bp	; 3: 137 110 14
x19223:	add bp, 12	; 3: 131 197 12
x19226:	mov di, bp	; 2: 137 239
x19228:	jmp printf	; 3: 233 229 193

file_test$968:	; PostCall 12

file_test$969:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$970:	; Parameter 12 inFilePtr 6
x19231:	mov ax, [bp + 6]	; 3: 139 70 6
x19234:	mov [bp + 18], ax	; 3: 137 70 18

file_test$971:	; Call 12 fclose 0
x19237:	mov word [bp + 12], file_test$972	; 5: 199 70 12 51 75
x19242:	mov [bp + 14], bp	; 3: 137 110 14
x19245:	add bp, 12	; 3: 131 197 12
x19248:	jmp fclose	; 3: 233 216 38

file_test$972:	; PostCall 12

file_test$973:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$974:	; Parameter 6 string_fileexists2022X223A2025s0A# 6
x19251:	mov word [bp + 12], @11212$string_fileexists2022X223A2025s0A#	; 5: 199 70 12 202 88

file_test$975:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$976:	; Parameter 6 string_X# 14
x19256:	mov word [bp + 20], @11213$string_X#	; 5: 199 70 20 222 88

file_test$977:	; Call 6 fileexists 8
x19261:	mov word [bp + 14], file_test$978	; 5: 199 70 14 75 75
x19266:	mov [bp + 16], bp	; 3: 137 110 16
x19269:	add bp, 14	; 3: 131 197 14
x19272:	jmp fileexists	; 3: 233 86 19

file_test$978:	; PostCall 6

file_test$979:	; GetReturnValue £temporary5126

file_test$980:	; Equal 983 £temporary5126 0
x19275:	cmp bx, 0	; 3: 131 251 0
x19278:	je file_test$983	; 2: 116 5

file_test$981:	; Assign £temporary5131 string_Yes#
x19280:	mov ax, @11215$string_Yes#	; 3: 184 224 88

file_test$982:	; Goto 984
x19283:	jmp file_test$984	; 2: 235 3

file_test$983:	; Assign £temporary5131 string_No#
x19285:	mov ax, @11216$string_No#	; 3: 184 228 88

file_test$984:	; Parameter 6 £temporary5131 8
x19288:	mov [bp + 14], ax	; 3: 137 70 14

file_test$985:	; Call 6 printf 0
x19291:	mov word [bp + 6], file_test$986	; 5: 199 70 6 110 75
x19296:	mov [bp + 8], bp	; 3: 137 110 8
x19299:	add bp, 6	; 3: 131 197 6
x19302:	mov di, bp	; 2: 137 239
x19304:	add di, 2	; 3: 131 199 2
x19307:	jmp printf	; 3: 233 150 193

file_test$986:	; PostCall 6

file_test$987:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$988:	; Parameter 6 string_fileexists2022Y223A2025s0A# 6
x19310:	mov word [bp + 12], @11226$string_fileexists2022Y223A2025s0A#	; 5: 199 70 12 231 88

file_test$989:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$990:	; Parameter 6 string_Y# 14
x19315:	mov word [bp + 20], @11227$string_Y#	; 5: 199 70 20 251 88

file_test$991:	; Call 6 fileexists 8
x19320:	mov word [bp + 14], file_test$992	; 5: 199 70 14 134 75
x19325:	mov [bp + 16], bp	; 3: 137 110 16
x19328:	add bp, 14	; 3: 131 197 14
x19331:	jmp fileexists	; 3: 233 27 19

file_test$992:	; PostCall 6

file_test$993:	; GetReturnValue £temporary5133

file_test$994:	; Equal 997 £temporary5133 0
x19334:	cmp bx, 0	; 3: 131 251 0
x19337:	je file_test$997	; 2: 116 5

file_test$995:	; Assign £temporary5138 string_Yes#
x19339:	mov ax, @11229$string_Yes#	; 3: 184 253 88

file_test$996:	; Goto 998
x19342:	jmp file_test$998	; 2: 235 3

file_test$997:	; Assign £temporary5138 string_No#
x19344:	mov ax, @11230$string_No#	; 3: 184 1 89

file_test$998:	; Parameter 6 £temporary5138 8
x19347:	mov [bp + 14], ax	; 3: 137 70 14

file_test$999:	; Call 6 printf 0
x19350:	mov word [bp + 6], file_test$1000	; 5: 199 70 6 169 75
x19355:	mov [bp + 8], bp	; 3: 137 110 8
x19358:	add bp, 6	; 3: 131 197 6
x19361:	mov di, bp	; 2: 137 239
x19363:	add di, 2	; 3: 131 199 2
x19366:	jmp printf	; 3: 233 91 193

file_test$1000:	; PostCall 6

file_test$1001:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1002:	; Parameter 6 string_fileexists2022Main2Easm223A2025s0A# 6
x19369:	mov word [bp + 12], @11240$string_fileexists2022Main2Easm223A2025s0A#	; 5: 199 70 12 4 89

file_test$1003:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1004:	; Parameter 6 string_Main2Easm# 14
x19374:	mov word [bp + 20], @11241$string_Main2Easm#	; 5: 199 70 20 31 89

file_test$1005:	; Call 6 fileexists 8
x19379:	mov word [bp + 14], file_test$1006	; 5: 199 70 14 193 75
x19384:	mov [bp + 16], bp	; 3: 137 110 16
x19387:	add bp, 14	; 3: 131 197 14
x19390:	jmp fileexists	; 3: 233 224 18

file_test$1006:	; PostCall 6

file_test$1007:	; GetReturnValue £temporary5140

file_test$1008:	; Equal 1011 £temporary5140 0
x19393:	cmp bx, 0	; 3: 131 251 0
x19396:	je file_test$1011	; 2: 116 5

file_test$1009:	; Assign £temporary5145 string_Yes#
x19398:	mov ax, @11243$string_Yes#	; 3: 184 40 89

file_test$1010:	; Goto 1012
x19401:	jmp file_test$1012	; 2: 235 3

file_test$1011:	; Assign £temporary5145 string_No#
x19403:	mov ax, @11244$string_No#	; 3: 184 44 89

file_test$1012:	; Parameter 6 £temporary5145 8
x19406:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1013:	; Call 6 printf 0
x19409:	mov word [bp + 6], file_test$1014	; 5: 199 70 6 228 75
x19414:	mov [bp + 8], bp	; 3: 137 110 8
x19417:	add bp, 6	; 3: 131 197 6
x19420:	mov di, bp	; 2: 137 239
x19422:	add di, 2	; 3: 131 199 2
x19425:	jmp printf	; 3: 233 32 193

file_test$1014:	; PostCall 6

file_test$1015:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1016:	; Parameter 6 string_fileexists2022MainX2Easm223A2025s0A# 6
x19428:	mov word [bp + 12], @11254$string_fileexists2022MainX2Easm223A2025s0A#	; 5: 199 70 12 47 89

file_test$1017:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1018:	; Parameter 6 string_MainX2Easm# 14
x19433:	mov word [bp + 20], @11255$string_MainX2Easm#	; 5: 199 70 20 75 89

file_test$1019:	; Call 6 fileexists 8
x19438:	mov word [bp + 14], file_test$1020	; 5: 199 70 14 252 75
x19443:	mov [bp + 16], bp	; 3: 137 110 16
x19446:	add bp, 14	; 3: 131 197 14
x19449:	jmp fileexists	; 3: 233 165 18

file_test$1020:	; PostCall 6

file_test$1021:	; GetReturnValue £temporary5147

file_test$1022:	; Equal 1025 £temporary5147 0
x19452:	cmp bx, 0	; 3: 131 251 0
x19455:	je file_test$1025	; 2: 116 5

file_test$1023:	; Assign £temporary5152 string_Yes#
x19457:	mov ax, @11257$string_Yes#	; 3: 184 85 89

file_test$1024:	; Goto 1026
x19460:	jmp file_test$1026	; 2: 235 3

file_test$1025:	; Assign £temporary5152 string_No#
x19462:	mov ax, @11258$string_No#	; 3: 184 89 89

file_test$1026:	; Parameter 6 £temporary5152 8
x19465:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1027:	; Call 6 printf 0
x19468:	mov word [bp + 6], file_test$1028	; 5: 199 70 6 31 76
x19473:	mov [bp + 8], bp	; 3: 137 110 8
x19476:	add bp, 6	; 3: 131 197 6
x19479:	mov di, bp	; 2: 137 239
x19481:	add di, 2	; 3: 131 199 2
x19484:	jmp printf	; 3: 233 229 192

file_test$1028:	; PostCall 6

file_test$1029:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1030:	; Parameter 6 string_fileexists2022Main2Ec223A2025s0A# 6
x19487:	mov word [bp + 12], @11268$string_fileexists2022Main2Ec223A2025s0A#	; 5: 199 70 12 92 89

file_test$1031:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1032:	; Parameter 6 string_Main2Ec# 14
x19492:	mov word [bp + 20], @11269$string_Main2Ec#	; 5: 199 70 20 117 89

file_test$1033:	; Call 6 fileexists 8
x19497:	mov word [bp + 14], file_test$1034	; 5: 199 70 14 55 76
x19502:	mov [bp + 16], bp	; 3: 137 110 16
x19505:	add bp, 14	; 3: 131 197 14
x19508:	jmp fileexists	; 3: 233 106 18

file_test$1034:	; PostCall 6

file_test$1035:	; GetReturnValue £temporary5154

file_test$1036:	; Equal 1039 £temporary5154 0
x19511:	cmp bx, 0	; 3: 131 251 0
x19514:	je file_test$1039	; 2: 116 5

file_test$1037:	; Assign £temporary5159 string_Yes#
x19516:	mov ax, @11271$string_Yes#	; 3: 184 124 89

file_test$1038:	; Goto 1040
x19519:	jmp file_test$1040	; 2: 235 3

file_test$1039:	; Assign £temporary5159 string_No#
x19521:	mov ax, @11272$string_No#	; 3: 184 128 89

file_test$1040:	; Parameter 6 £temporary5159 8
x19524:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1041:	; Call 6 printf 0
x19527:	mov word [bp + 6], file_test$1042	; 5: 199 70 6 90 76
x19532:	mov [bp + 8], bp	; 3: 137 110 8
x19535:	add bp, 6	; 3: 131 197 6
x19538:	mov di, bp	; 2: 137 239
x19540:	add di, 2	; 3: 131 199 2
x19543:	jmp printf	; 3: 233 170 192

file_test$1042:	; PostCall 6

file_test$1043:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1044:	; Parameter 6 string_fileexists2022MainX2Ec223A2025s0A# 6
x19546:	mov word [bp + 12], @11282$string_fileexists2022MainX2Ec223A2025s0A#	; 5: 199 70 12 131 89

file_test$1045:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1046:	; Parameter 6 string_MainX2Ec# 14
x19551:	mov word [bp + 20], @11283$string_MainX2Ec#	; 5: 199 70 20 157 89

file_test$1047:	; Call 6 fileexists 8
x19556:	mov word [bp + 14], file_test$1048	; 5: 199 70 14 114 76
x19561:	mov [bp + 16], bp	; 3: 137 110 16
x19564:	add bp, 14	; 3: 131 197 14
x19567:	jmp fileexists	; 3: 233 47 18

file_test$1048:	; PostCall 6

file_test$1049:	; GetReturnValue £temporary5161

file_test$1050:	; Equal 1053 £temporary5161 0
x19570:	cmp bx, 0	; 3: 131 251 0
x19573:	je file_test$1053	; 2: 116 5

file_test$1051:	; Assign £temporary5166 string_Yes#
x19575:	mov ax, @11285$string_Yes#	; 3: 184 165 89

file_test$1052:	; Goto 1054
x19578:	jmp file_test$1054	; 2: 235 3

file_test$1053:	; Assign £temporary5166 string_No#
x19580:	mov ax, @11286$string_No#	; 3: 184 169 89

file_test$1054:	; Parameter 6 £temporary5166 8
x19583:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1055:	; Call 6 printf 0
x19586:	mov word [bp + 6], file_test$1056	; 5: 199 70 6 149 76
x19591:	mov [bp + 8], bp	; 3: 137 110 8
x19594:	add bp, 6	; 3: 131 197 6
x19597:	mov di, bp	; 2: 137 239
x19599:	add di, 2	; 3: 131 199 2
x19602:	jmp printf	; 3: 233 111 192

file_test$1056:	; PostCall 6

file_test$1057:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1058:	; Parameter 6 string_fileexists2022File2Ec223A2025s0A# 6
x19605:	mov word [bp + 12], @11296$string_fileexists2022File2Ec223A2025s0A#	; 5: 199 70 12 172 89

file_test$1059:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1060:	; Parameter 6 string_File2Ec# 14
x19610:	mov word [bp + 20], @11297$string_File2Ec#	; 5: 199 70 20 197 89

file_test$1061:	; Call 6 fileexists 8
x19615:	mov word [bp + 14], file_test$1062	; 5: 199 70 14 173 76
x19620:	mov [bp + 16], bp	; 3: 137 110 16
x19623:	add bp, 14	; 3: 131 197 14
x19626:	jmp fileexists	; 3: 233 244 17

file_test$1062:	; PostCall 6

file_test$1063:	; GetReturnValue £temporary5168

file_test$1064:	; Equal 1067 £temporary5168 0
x19629:	cmp bx, 0	; 3: 131 251 0
x19632:	je file_test$1067	; 2: 116 5

file_test$1065:	; Assign £temporary5173 string_Yes#
x19634:	mov ax, @11299$string_Yes#	; 3: 184 204 89

file_test$1066:	; Goto 1068
x19637:	jmp file_test$1068	; 2: 235 3

file_test$1067:	; Assign £temporary5173 string_No#
x19639:	mov ax, @11300$string_No#	; 3: 184 208 89

file_test$1068:	; Parameter 6 £temporary5173 8
x19642:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1069:	; Call 6 printf 0
x19645:	mov word [bp + 6], file_test$1070	; 5: 199 70 6 208 76
x19650:	mov [bp + 8], bp	; 3: 137 110 8
x19653:	add bp, 6	; 3: 131 197 6
x19656:	mov di, bp	; 2: 137 239
x19658:	add di, 2	; 3: 131 199 2
x19661:	jmp printf	; 3: 233 52 192

file_test$1070:	; PostCall 6

file_test$1071:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1072:	; Parameter 6 string_fileexists2022File2Ex223A2025s0A# 6
x19664:	mov word [bp + 12], @11310$string_fileexists2022File2Ex223A2025s0A#	; 5: 199 70 12 211 89

file_test$1073:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1074:	; Parameter 6 string_File2Ex# 14
x19669:	mov word [bp + 20], @11311$string_File2Ex#	; 5: 199 70 20 236 89

file_test$1075:	; Call 6 fileexists 8
x19674:	mov word [bp + 14], file_test$1076	; 5: 199 70 14 232 76
x19679:	mov [bp + 16], bp	; 3: 137 110 16
x19682:	add bp, 14	; 3: 131 197 14
x19685:	jmp fileexists	; 3: 233 185 17

file_test$1076:	; PostCall 6

file_test$1077:	; GetReturnValue £temporary5175

file_test$1078:	; Equal 1081 £temporary5175 0
x19688:	cmp bx, 0	; 3: 131 251 0
x19691:	je file_test$1081	; 2: 116 5

file_test$1079:	; Assign £temporary5180 string_Yes#
x19693:	mov ax, @11313$string_Yes#	; 3: 184 243 89

file_test$1080:	; Goto 1082
x19696:	jmp file_test$1082	; 2: 235 3

file_test$1081:	; Assign £temporary5180 string_No#
x19698:	mov ax, @11314$string_No#	; 3: 184 247 89

file_test$1082:	; Parameter 6 £temporary5180 8
x19701:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1083:	; Call 6 printf 0
x19704:	mov word [bp + 6], file_test$1084	; 5: 199 70 6 11 77
x19709:	mov [bp + 8], bp	; 3: 137 110 8
x19712:	add bp, 6	; 3: 131 197 6
x19715:	mov di, bp	; 2: 137 239
x19717:	add di, 2	; 3: 131 199 2
x19720:	jmp printf	; 3: 233 249 191

file_test$1084:	; PostCall 6

file_test$1085:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1086:	; Parameter 6 string_fileexists2022File2Eh223A2025s0A# 6
x19723:	mov word [bp + 12], @11324$string_fileexists2022File2Eh223A2025s0A#	; 5: 199 70 12 250 89

file_test$1087:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1088:	; Parameter 6 string_File2Eh# 14
x19728:	mov word [bp + 20], @11325$string_File2Eh#	; 5: 199 70 20 19 90

file_test$1089:	; Call 6 fileexists 8
x19733:	mov word [bp + 14], file_test$1090	; 5: 199 70 14 35 77
x19738:	mov [bp + 16], bp	; 3: 137 110 16
x19741:	add bp, 14	; 3: 131 197 14
x19744:	jmp fileexists	; 3: 233 126 17

file_test$1090:	; PostCall 6

file_test$1091:	; GetReturnValue £temporary5182

file_test$1092:	; Equal 1095 £temporary5182 0
x19747:	cmp bx, 0	; 3: 131 251 0
x19750:	je file_test$1095	; 2: 116 5

file_test$1093:	; Assign £temporary5187 string_Yes#
x19752:	mov ax, @11327$string_Yes#	; 3: 184 26 90

file_test$1094:	; Goto 1096
x19755:	jmp file_test$1096	; 2: 235 3

file_test$1095:	; Assign £temporary5187 string_No#
x19757:	mov ax, @11328$string_No#	; 3: 184 30 90

file_test$1096:	; Parameter 6 £temporary5187 8
x19760:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1097:	; Call 6 printf 0
x19763:	mov word [bp + 6], file_test$1098	; 5: 199 70 6 70 77
x19768:	mov [bp + 8], bp	; 3: 137 110 8
x19771:	add bp, 6	; 3: 131 197 6
x19774:	mov di, bp	; 2: 137 239
x19776:	add di, 2	; 3: 131 199 2
x19779:	jmp printf	; 3: 233 190 191

file_test$1098:	; PostCall 6

file_test$1099:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1100:	; Parameter 6 string_fileexists2022File2Ey223A2025s0A# 6
x19782:	mov word [bp + 12], @11338$string_fileexists2022File2Ey223A2025s0A#	; 5: 199 70 12 33 90

file_test$1101:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1102:	; Parameter 6 string_File2Ey# 14
x19787:	mov word [bp + 20], @11339$string_File2Ey#	; 5: 199 70 20 58 90

file_test$1103:	; Call 6 fileexists 8
x19792:	mov word [bp + 14], file_test$1104	; 5: 199 70 14 94 77
x19797:	mov [bp + 16], bp	; 3: 137 110 16
x19800:	add bp, 14	; 3: 131 197 14
x19803:	jmp fileexists	; 3: 233 67 17

file_test$1104:	; PostCall 6

file_test$1105:	; GetReturnValue £temporary5189

file_test$1106:	; Equal 1109 £temporary5189 0
x19806:	cmp bx, 0	; 3: 131 251 0
x19809:	je file_test$1109	; 2: 116 5

file_test$1107:	; Assign £temporary5194 string_Yes#
x19811:	mov ax, @11341$string_Yes#	; 3: 184 65 90

file_test$1108:	; Goto 1110
x19814:	jmp file_test$1110	; 2: 235 3

file_test$1109:	; Assign £temporary5194 string_No#
x19816:	mov ax, @11342$string_No#	; 3: 184 69 90

file_test$1110:	; Parameter 6 £temporary5194 8
x19819:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1111:	; Call 6 printf 0
x19822:	mov word [bp + 6], file_test$1112	; 5: 199 70 6 129 77
x19827:	mov [bp + 8], bp	; 3: 137 110 8
x19830:	add bp, 6	; 3: 131 197 6
x19833:	mov di, bp	; 2: 137 239
x19835:	add di, 2	; 3: 131 199 2
x19838:	jmp printf	; 3: 233 131 191

file_test$1112:	; PostCall 6

file_test$1113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1114:	; Parameter 6 string_fileexists2022File2Ep223A2025s0A# 6
x19841:	mov word [bp + 12], @11352$string_fileexists2022File2Ep223A2025s0A#	; 5: 199 70 12 72 90

file_test$1115:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1116:	; Parameter 6 string_File2Ep# 14
x19846:	mov word [bp + 20], @11353$string_File2Ep#	; 5: 199 70 20 97 90

file_test$1117:	; Call 6 fileexists 8
x19851:	mov word [bp + 14], file_test$1118	; 5: 199 70 14 153 77
x19856:	mov [bp + 16], bp	; 3: 137 110 16
x19859:	add bp, 14	; 3: 131 197 14
x19862:	jmp fileexists	; 3: 233 8 17

file_test$1118:	; PostCall 6

file_test$1119:	; GetReturnValue £temporary5196

file_test$1120:	; Equal 1123 £temporary5196 0
x19865:	cmp bx, 0	; 3: 131 251 0
x19868:	je file_test$1123	; 2: 116 5

file_test$1121:	; Assign £temporary5201 string_Yes#
x19870:	mov ax, @11355$string_Yes#	; 3: 184 104 90

file_test$1122:	; Goto 1124
x19873:	jmp file_test$1124	; 2: 235 3

file_test$1123:	; Assign £temporary5201 string_No#
x19875:	mov ax, @11356$string_No#	; 3: 184 108 90

file_test$1124:	; Parameter 6 £temporary5201 8
x19878:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1125:	; Call 6 printf 0
x19881:	mov word [bp + 6], file_test$1126	; 5: 199 70 6 188 77
x19886:	mov [bp + 8], bp	; 3: 137 110 8
x19889:	add bp, 6	; 3: 131 197 6
x19892:	mov di, bp	; 2: 137 239
x19894:	add di, 2	; 3: 131 199 2
x19897:	jmp printf	; 3: 233 72 191

file_test$1126:	; PostCall 6

file_test$1127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1128:	; Parameter 6 string_fileexists2022File2Ez223A2025s0A# 6
x19900:	mov word [bp + 12], @11366$string_fileexists2022File2Ez223A2025s0A#	; 5: 199 70 12 111 90

file_test$1129:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1130:	; Parameter 6 string_File2Ez# 14
x19905:	mov word [bp + 20], @11367$string_File2Ez#	; 5: 199 70 20 136 90

file_test$1131:	; Call 6 fileexists 8
x19910:	mov word [bp + 14], file_test$1132	; 5: 199 70 14 212 77
x19915:	mov [bp + 16], bp	; 3: 137 110 16
x19918:	add bp, 14	; 3: 131 197 14
x19921:	jmp fileexists	; 3: 233 205 16

file_test$1132:	; PostCall 6

file_test$1133:	; GetReturnValue £temporary5203

file_test$1134:	; Equal 1137 £temporary5203 0
x19924:	cmp bx, 0	; 3: 131 251 0
x19927:	je file_test$1137	; 2: 116 5

file_test$1135:	; Assign £temporary5208 string_Yes#
x19929:	mov ax, @11369$string_Yes#	; 3: 184 143 90

file_test$1136:	; Goto 1138
x19932:	jmp file_test$1138	; 2: 235 3

file_test$1137:	; Assign £temporary5208 string_No#
x19934:	mov ax, @11370$string_No#	; 3: 184 147 90

file_test$1138:	; Parameter 6 £temporary5208 8
x19937:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1139:	; Call 6 printf 0
x19940:	mov word [bp + 6], file_test$1140	; 5: 199 70 6 247 77
x19945:	mov [bp + 8], bp	; 3: 137 110 8
x19948:	add bp, 6	; 3: 131 197 6
x19951:	mov di, bp	; 2: 137 239
x19953:	add di, 2	; 3: 131 199 2
x19956:	jmp printf	; 3: 233 13 191

file_test$1140:	; PostCall 6

file_test$1141:	; Return 0
x19959:	mov ax, [bp]	; 3: 139 70 0
x19962:	mov di, [bp + 4]	; 3: 139 126 4
x19965:	mov bp, [bp + 2]	; 3: 139 110 2
x19968:	jmp ax	; 2: 255 224

file_test$1142:	; FunctionEnd file_test

@10452$string_in2Etxt#:
x19970:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10453$string_r#:
x19977:	db "r", 0	; 2: 114 0

@10456$string_outX2Etxt#:
x19979:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

@10457$string_w#:
x19988:	db "w", 0	; 2: 119 0

stderr:
x19990:	dw g_fileArray + 58	; 2: 160 13

@10465$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19992:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10466$string_inFilePtr20213D20NULL#:
x20038:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10467$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20056:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10476$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20121:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10477$string_outFilePtr20213D20NULL#:
x20167:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10478$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20186:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10487$string_25lf#:
x20251:	db "%lf", 0	; 4: 37 108 102 0

@10490$string_X12025f0A#:
x20255:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

@10493$string_X22025f0A#:
x20262:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

@10496$string_0A#:
x20269:	db 10, 0	; 2: 10 0

@10500$string_in2Etxt#:
x20271:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10501$string_r#:
x20278:	db "r", 0	; 2: 114 0

@10504$string_outY2Etxt#:
x20280:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

@10505$string_w#:
x20289:	db "w", 0	; 2: 119 0

@10513$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20291:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10514$string_inFilePtr20213D20NULL#:
x20337:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10515$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20355:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10524$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20420:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10525$string_outFilePtr20213D20NULL#:
x20466:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10526$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20485:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10534$string_25i#:
x20550:	db "%i", 0	; 3: 37 105 0

@10537$string_size2025i0A#:
x20553:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10539$string_Y20size2025i0A#:
x20562:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

@10547$string_25lf#:
x20573:	db "%lf", 0	; 4: 37 108 102 0

@10550$string_Y12025f0A#:
x20577:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

@10553$string_Y22025f0A#:
x20584:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

@10556$string_0A#:
x20591:	db 10, 0	; 2: 10 0

@10560$string_Y#:
x20593:	db "Y", 0	; 2: 89 0

@10566$string_2225s2220has20been20removed0A#:
x20595:	db 34, "%s", 34, " has been removed", 10, 0	; 23: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 10 0

@10568$string_Error202225s222025i3A2025s2E0A#:
x20618:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10571$string_X#:
x20638:	db "X", 0	; 2: 88 0

@10573$string_Y#:
x20640:	db "Y", 0	; 2: 89 0

@10575$string_w#:
x20642:	db "w", 0	; 2: 119 0

@10578$string_Hello20X#:
x20644:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

@10585$string_2225s2220has20been20renamed20to202225s222E0A#:
x20652:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10587$string_Error202225s22202225s222025i3A2025s2E0A#:
x20684:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10590$string_X2#:
x20709:	db "X2", 0	; 3: 88 50 0

@10592$string_Y2#:
x20712:	db "Y2", 0	; 3: 89 50 0

@10598$string_2225s2220has20been20renamed20to202225s222E0A#:
x20715:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10600$string_Error202225s22202225s222025i3A2025s2E0A#:
x20747:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10603$string_Z#:
x20772:	db "Z", 0	; 2: 90 0

@10605$string_w#:
x20774:	db "w", 0	; 2: 119 0

@10608$string_Hello20Z#:
x20776:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

@10615$string_2225s2220has20been20removed2E0A#:
x20784:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10617$string_Error202225s222025i3A2025s2E0A#:
x20808:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10620$string_Z2#:
x20828:	db "Z2", 0	; 3: 90 50 0

@10626$string_2225s2220has20been20removed2E0A#:
x20831:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10628$string_Error202225s222025i3A2025s2E0A#:
x20855:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10631$string_PBook2Etxt#:
x20875:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

@10632$string_r#:
x20885:	db "r", 0	; 2: 114 0

@10640$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20887:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10641$string_inFilePtr20213D20NULL#:
x20933:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10642$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20951:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10646$string_0A252D24s20252D24s0A#:
x21016:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

@10647$string_Name#:
x21030:	db "Name", 0	; 5: 78 97 109 101 0

@10648$string_Phone#:
x21035:	db "Phone", 0	; 6: 80 104 111 110 101 0

@10650$string_252D24s20252D24s0A#:
x21041:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10651$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x21054:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10652$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x21079:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10656$string_25i#:
x21104:	db "%i", 0	; 3: 37 105 0

@10659$string_size2025i0A#:
x21107:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10672$string_25s25s#:
x21116:	db "%s%s", 0	; 5: 37 115 37 115 0

@10674$string_252D24s20252D24s0A#:
x21121:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10676$string_0A#:
x21134:	db 10, 0	; 2: 10 0

@10679$string_TestX2Ebin#:
x21136:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10680$string_w#:
x21146:	db "w", 0	; 2: 119 0

@10688$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21148:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10689$string_outFilePtr20213D20NULL#:
x21194:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10690$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21213:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10719$string_TestX2Ebin#:
x21278:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10720$string_r#:
x21288:	db "r", 0	; 2: 114 0

@10730$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21290:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10731$string_inFilePtr20213D20NULL#:
x21336:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10732$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21354:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10742$string_size13A2025i0A#:
x21419:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

@10756$string_index13A2025i3A20value2025f0A#:
x21430:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@10758$string_0A#:
x21452:	db 10, 0	; 2: 10 0

@10761$string_TestY2Ebin#:
x21454:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@10762$string_w#:
x21464:	db "w", 0	; 2: 119 0

@10770$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21466:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10771$string_outFilePtr20213D20NULL#:
x21512:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10772$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21531:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10795$string_TestY2Ebin#:
x21596:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@10796$string_r#:
x21606:	db "r", 0	; 2: 114 0

@10804$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21608:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10805$string_inFilePtr20213D20NULL#:
x21654:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10806$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21672:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10823$string_index23A2025i3A20value2025f0A#:
x21737:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@10827$string_0A#:
x21759:	db 10, 0	; 2: 10 0

@10830$string_TestY2Ebin#:
x21761:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@10831$string_r#:
x21771:	db "r", 0	; 2: 114 0

@10839$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21773:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10840$string_inFilePtr20213D20NULL#:
x21819:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10841$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21837:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10859$string_index33A2025i3A20value2025f0A#:
x21902:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@10863$string_0A#:
x21924:	db 10, 0	; 2: 10 0

@10866$string_TestX2Ebin#:
x21926:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10867$string_r#:
x21936:	db "r", 0	; 2: 114 0

@10876$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21938:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10877$string_inFilePtr20213D20NULL#:
x21984:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10878$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22002:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10888$string_size43A2025i20total2025i0A#:
x22067:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

@10890$int2$8#:
x22087:	dw 8	; 2: 8 0

@10894$int2$8#:
x22089:	dw 8	; 2: 8 0

@10901$int2$8#:
x22091:	dw 8	; 2: 8 0

@10909$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22093:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10910$string_p20213D20NULL#:
x22139:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

@10911$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22149:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10915$string_malloc43A2025u2025u2025u0A#:
x22214:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

@10925$string_index43A2025i3A20value2025f0A#:
x22233:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@10927$int2$8#:
x22255:	dw 8	; 2: 8 0

@10931$string_0A#:
x22257:	db 10, 0	; 2: 10 0

@11112$string_Block2Ebin#:
x22259:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11113$string_w#:
x22269:	db "w", 0	; 2: 119 0

@11116$string_Block2Ebin#:
x22271:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11117$string_r#:
x22281:	db "r", 0	; 2: 114 0

@11125$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22283:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11126$string_outFilePtr20213D20NULL#:
x22329:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11127$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22348:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11136$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22413:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11137$string_inFilePtr20213D20NULL#:
x22459:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11138$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22477:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11158$string_Name20203A2025s0A#:
x22542:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

@11161$string_Phone203A2025d0A#:
x22554:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

@11165$string_outx2Etxt#:
x22566:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

@11166$string_r#:
x22575:	db "r", 0	; 2: 114 0

@11176$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22577:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11177$string_inFilePtr20213D20NULL#:
x22623:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11178$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22641:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 65: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11187$string_ftell2025i0A#:
x22706:	db "ftell %i", 10, 0	; 10: 102 116 101 108 108 32 37 105 10 0

@11198$string_3C25c3E2025i2025i0A#:
x22716:	db "<%c> %i %i", 10, 0	; 12: 60 37 99 62 32 37 105 32 37 105 10 0

@11209$string_0A#:
x22728:	db 10, 0	; 2: 10 0

@11212$string_fileexists2022X223A2025s0A#:
x22730:	db "fileexists ", 34, "X", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 88 34 58 32 37 115 10 0

@11213$string_X#:
x22750:	db "X", 0	; 2: 88 0

@11215$string_Yes#:
x22752:	db "Yes", 0	; 4: 89 101 115 0

@11216$string_No#:
x22756:	db "No", 0	; 3: 78 111 0

@11226$string_fileexists2022Y223A2025s0A#:
x22759:	db "fileexists ", 34, "Y", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 89 34 58 32 37 115 10 0

@11227$string_Y#:
x22779:	db "Y", 0	; 2: 89 0

@11229$string_Yes#:
x22781:	db "Yes", 0	; 4: 89 101 115 0

@11230$string_No#:
x22785:	db "No", 0	; 3: 78 111 0

@11240$string_fileexists2022Main2Easm223A2025s0A#:
x22788:	db "fileexists ", 34, "Main.asm", 34, ": %s", 10, 0	; 27: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 97 115 109 34 58 32 37 115 10 0

@11241$string_Main2Easm#:
x22815:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

@11243$string_Yes#:
x22824:	db "Yes", 0	; 4: 89 101 115 0

@11244$string_No#:
x22828:	db "No", 0	; 3: 78 111 0

@11254$string_fileexists2022MainX2Easm223A2025s0A#:
x22831:	db "fileexists ", 34, "MainX.asm", 34, ": %s", 10, 0	; 28: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 97 115 109 34 58 32 37 115 10 0

@11255$string_MainX2Easm#:
x22859:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

@11257$string_Yes#:
x22869:	db "Yes", 0	; 4: 89 101 115 0

@11258$string_No#:
x22873:	db "No", 0	; 3: 78 111 0

@11268$string_fileexists2022Main2Ec223A2025s0A#:
x22876:	db "fileexists ", 34, "Main.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 99 34 58 32 37 115 10 0

@11269$string_Main2Ec#:
x22901:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

@11271$string_Yes#:
x22908:	db "Yes", 0	; 4: 89 101 115 0

@11272$string_No#:
x22912:	db "No", 0	; 3: 78 111 0

@11282$string_fileexists2022MainX2Ec223A2025s0A#:
x22915:	db "fileexists ", 34, "MainX.c", 34, ": %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 99 34 58 32 37 115 10 0

@11283$string_MainX2Ec#:
x22941:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

@11285$string_Yes#:
x22949:	db "Yes", 0	; 4: 89 101 115 0

@11286$string_No#:
x22953:	db "No", 0	; 3: 78 111 0

@11296$string_fileexists2022File2Ec223A2025s0A#:
x22956:	db "fileexists ", 34, "File.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 99 34 58 32 37 115 10 0

@11297$string_File2Ec#:
x22981:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

@11299$string_Yes#:
x22988:	db "Yes", 0	; 4: 89 101 115 0

@11300$string_No#:
x22992:	db "No", 0	; 3: 78 111 0

@11310$string_fileexists2022File2Ex223A2025s0A#:
x22995:	db "fileexists ", 34, "File.x", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 120 34 58 32 37 115 10 0

@11311$string_File2Ex#:
x23020:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

@11313$string_Yes#:
x23027:	db "Yes", 0	; 4: 89 101 115 0

@11314$string_No#:
x23031:	db "No", 0	; 3: 78 111 0

@11324$string_fileexists2022File2Eh223A2025s0A#:
x23034:	db "fileexists ", 34, "File.h", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 104 34 58 32 37 115 10 0

@11325$string_File2Eh#:
x23059:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

@11327$string_Yes#:
x23066:	db "Yes", 0	; 4: 89 101 115 0

@11328$string_No#:
x23070:	db "No", 0	; 3: 78 111 0

@11338$string_fileexists2022File2Ey223A2025s0A#:
x23073:	db "fileexists ", 34, "File.y", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 121 34 58 32 37 115 10 0

@11339$string_File2Ey#:
x23098:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

@11341$string_Yes#:
x23105:	db "Yes", 0	; 4: 89 101 115 0

@11342$string_No#:
x23109:	db "No", 0	; 3: 78 111 0

@11352$string_fileexists2022File2Ep223A2025s0A#:
x23112:	db "fileexists ", 34, "File.p", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 112 34 58 32 37 115 10 0

@11353$string_File2Ep#:
x23137:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

@11355$string_Yes#:
x23144:	db "Yes", 0	; 4: 89 101 115 0

@11356$string_No#:
x23148:	db "No", 0	; 3: 78 111 0

@11366$string_fileexists2022File2Ez223A2025s0A#:
x23151:	db "fileexists ", 34, "File.z", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 122 34 58 32 37 115 10 0

@11367$string_File2Ez#:
x23176:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

@11369$string_Yes#:
x23183:	db "Yes", 0	; 4: 89 101 115 0

@11370$string_No#:
x23187:	db "No", 0	; 3: 78 111 0

fopen:	; Assign index 0
x23190:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x23195:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x23199:	jge fopen$21	; 2: 125 78

fopen$2:	; UnsignedMultiply £temporary699 index 29
x23201:	mov ax, [bp + 10]	; 3: 139 70 10
x23204:	xor dx, dx	; 2: 49 210
x23206:	mul word [@1707$int2$29#]	; 4: 247 38 253 90

fopen$3:	; BinaryAdd £temporary700 g_fileArray £temporary699
x23210:	mov si, g_fileArray	; 3: 190 102 13
x23213:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary698 -> £temporary700 £temporary700 0

fopen$5:	; NotEqual 19 £temporary698.open$0 -> £temporary700 0
x23215:	cmp word [si], 0	; 3: 131 60 0
x23218:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x23220:	mov ax, [bp + 6]	; 3: 139 70 6
x23223:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x23226:	mov ax, [bp + 8]	; 3: 139 70 8
x23229:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; UnsignedMultiply £temporary704 index 29
x23232:	mov ax, [bp + 10]	; 3: 139 70 10
x23235:	xor dx, dx	; 2: 49 210
x23237:	mul word [@1715$int2$29#]	; 4: 247 38 255 90

fopen$10:	; BinaryAdd £temporary705 g_fileArray £temporary704
x23241:	mov si, g_fileArray	; 3: 190 102 13
x23244:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary703 -> £temporary705 £temporary705 0

fopen$12:	; address £temporary706 £temporary703 -> £temporary705

fopen$13:	; Parameter 12 £temporary706 10
x23246:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x23249:	mov word [bp + 12], fopen$15	; 5: 199 70 12 223 90
x23254:	mov [bp + 14], bp	; 3: 137 110 14
x23257:	add bp, 12	; 3: 131 197 12
x23260:	nop	; 1: 144
x23261:	jmp freopen	; 2: 235 34

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary707

fopen$17:	; SetReturnValue £temporary707

fopen$18:	; Return £temporary707
x23263:	mov ax, [bp]	; 3: 139 70 0
x23266:	mov di, [bp + 4]	; 3: 139 126 4
x23269:	mov bp, [bp + 2]	; 3: 139 110 2
x23272:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x23274:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x23277:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x23279:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x23282:	mov ax, [bp]	; 3: 139 70 0
x23285:	mov di, [bp + 4]	; 3: 139 126 4
x23288:	mov bp, [bp + 2]	; 3: 139 110 2
x23291:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

@1707$int2$29#:
x23293:	dw 29	; 2: 29 0

@1715$int2$29#:
x23295:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x23297:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x23302:	mov ax, [bp + 8]	; 3: 139 70 8
x23305:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x23308:	mov word [bp + 22], @1730$string_r#	; 5: 199 70 22 123 93

freopen$4:	; Call 14 strcmp 0
x23313:	mov word [bp + 14], freopen$5	; 5: 199 70 14 31 91
x23318:	mov [bp + 16], bp	; 3: 137 110 16
x23321:	add bp, 14	; 3: 131 197 14
x23324:	jmp strcmp	; 3: 233 107 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary711

freopen$7:	; NotEqual 16 £temporary711 0
x23327:	cmp bx, 0	; 3: 131 251 0
x23330:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x23332:	mov ax, [bp + 6]	; 3: 139 70 6
x23335:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x23338:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x23342:	mov word [bp + 14], freopen$12	; 5: 199 70 14 60 91
x23347:	mov [bp + 16], bp	; 3: 137 110 16
x23350:	add bp, 14	; 3: 131 197 14
x23353:	jmp @1685$fileopen	; 3: 233 188 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary713

freopen$14:	; Assign handle £temporary713
x23356:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 130
x23359:	jmp freopen$130	; 3: 233 210 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x23362:	mov ax, [bp + 8]	; 3: 139 70 8
x23365:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x23368:	mov word [bp + 22], @1738$string_w#	; 5: 199 70 22 125 93

freopen$19:	; Call 14 strcmp 0
x23373:	mov word [bp + 14], freopen$20	; 5: 199 70 14 91 91
x23378:	mov [bp + 16], bp	; 3: 137 110 16
x23381:	add bp, 14	; 3: 131 197 14
x23384:	jmp strcmp	; 3: 233 47 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary714

freopen$22:	; NotEqual 30 £temporary714 0
x23387:	cmp bx, 0	; 3: 131 251 0
x23390:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x23392:	mov ax, [bp + 6]	; 3: 139 70 6
x23395:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x23398:	mov word [bp + 14], freopen$26	; 5: 199 70 14 116 91
x23403:	mov [bp + 16], bp	; 3: 137 110 16
x23406:	add bp, 14	; 3: 131 197 14
x23409:	jmp filecreate	; 3: 233 177 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary716

freopen$28:	; Assign handle £temporary716
x23412:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 130
x23415:	jmp freopen$130	; 3: 233 154 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x23418:	mov ax, [bp + 8]	; 3: 139 70 8
x23421:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x23424:	mov word [bp + 22], @1744$string_a#	; 5: 199 70 22 127 93

freopen$33:	; Call 14 strcmp 0
x23429:	mov word [bp + 14], freopen$34	; 5: 199 70 14 147 91
x23434:	mov [bp + 16], bp	; 3: 137 110 16
x23437:	add bp, 14	; 3: 131 197 14
x23440:	jmp strcmp	; 3: 233 247 1

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary717

freopen$36:	; NotEqual 59 £temporary717 0
x23443:	cmp bx, 0	; 3: 131 251 0
x23446:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x23448:	mov ax, [bp + 6]	; 3: 139 70 6
x23451:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x23454:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x23458:	mov word [bp + 14], freopen$41	; 5: 199 70 14 176 91
x23463:	mov [bp + 16], bp	; 3: 137 110 16
x23466:	add bp, 14	; 3: 131 197 14
x23469:	jmp @1685$fileopen	; 3: 233 72 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary719

freopen$43:	; Assign handle £temporary719
x23472:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x23475:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23479:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x23481:	mov ax, [bp + 10]	; 3: 139 70 10
x23484:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x23487:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x23492:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x23497:	mov word [bp + 14], freopen$50	; 5: 199 70 14 215 91
x23502:	mov [bp + 16], bp	; 3: 137 110 16
x23505:	add bp, 14	; 3: 131 197 14
x23508:	jmp fseek	; 3: 233 127 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 130
x23511:	jmp freopen$130	; 3: 233 58 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x23514:	mov ax, [bp + 6]	; 3: 139 70 6
x23517:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x23520:	mov word [bp + 14], freopen$55	; 5: 199 70 14 238 91
x23525:	mov [bp + 16], bp	; 3: 137 110 16
x23528:	add bp, 14	; 3: 131 197 14
x23531:	jmp filecreate	; 3: 233 55 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary722

freopen$57:	; Assign handle £temporary722
x23534:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 130
x23537:	jmp freopen$130	; 3: 233 32 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x23540:	mov ax, [bp + 8]	; 3: 139 70 8
x23543:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x23546:	mov word [bp + 22], @1761$string_r2B#	; 5: 199 70 22 129 93

freopen$62:	; Call 14 strcmp 0
x23551:	mov word [bp + 14], freopen$63	; 5: 199 70 14 13 92
x23556:	mov [bp + 16], bp	; 3: 137 110 16
x23559:	add bp, 14	; 3: 131 197 14
x23562:	jmp strcmp	; 3: 233 125 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary723

freopen$65:	; NotEqual 74 £temporary723 0
x23565:	cmp bx, 0	; 3: 131 251 0
x23568:	jne freopen$74	; 2: 117 30

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 name 6
x23570:	mov ax, [bp + 6]	; 3: 139 70 6
x23573:	mov [bp + 20], ax	; 3: 137 70 20

freopen$68:	; Parameter 14 66 8
x23576:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$69:	; Call 14 fileopen 0
x23580:	mov word [bp + 14], freopen$70	; 5: 199 70 14 42 92
x23585:	mov [bp + 16], bp	; 3: 137 110 16
x23588:	add bp, 14	; 3: 131 197 14
x23591:	jmp @1685$fileopen	; 3: 233 206 1

freopen$70:	; PostCall 14

freopen$71:	; GetReturnValue £temporary725

freopen$72:	; Assign handle £temporary725
x23594:	mov [bp + 12], bx	; 3: 137 94 12

freopen$73:	; Goto 130
x23597:	jmp freopen$130	; 3: 233 228 0

freopen$74:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$75:	; Parameter 14 mode 6
x23600:	mov ax, [bp + 8]	; 3: 139 70 8
x23603:	mov [bp + 20], ax	; 3: 137 70 20

freopen$76:	; Parameter 14 string_w2B# 8
x23606:	mov word [bp + 22], @1769$string_w2B#	; 5: 199 70 22 132 93

freopen$77:	; Call 14 strcmp 0
x23611:	mov word [bp + 14], freopen$78	; 5: 199 70 14 73 92
x23616:	mov [bp + 16], bp	; 3: 137 110 16
x23619:	add bp, 14	; 3: 131 197 14
x23622:	jmp strcmp	; 3: 233 65 1

freopen$78:	; PostCall 14

freopen$79:	; GetReturnValue £temporary726

freopen$80:	; NotEqual 102 £temporary726 0
x23625:	cmp bx, 0	; 3: 131 251 0
x23628:	jne freopen$102	; 2: 117 80

freopen$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$82:	; Parameter 14 name 6
x23630:	mov ax, [bp + 6]	; 3: 139 70 6
x23633:	mov [bp + 20], ax	; 3: 137 70 20

freopen$83:	; Call 14 fileexists 0
x23636:	mov word [bp + 14], freopen$84	; 5: 199 70 14 98 92
x23641:	mov [bp + 16], bp	; 3: 137 110 16
x23644:	add bp, 14	; 3: 131 197 14
x23647:	jmp fileexists	; 3: 233 63 2

freopen$84:	; PostCall 14

freopen$85:	; GetReturnValue £temporary728

freopen$86:	; Equal 95 £temporary728 0
x23650:	cmp bx, 0	; 3: 131 251 0
x23653:	je freopen$95	; 2: 116 30

freopen$87:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$88:	; Parameter 14 name 6
x23655:	mov ax, [bp + 6]	; 3: 139 70 6
x23658:	mov [bp + 20], ax	; 3: 137 70 20

freopen$89:	; Parameter 14 66 8
x23661:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$90:	; Call 14 fileopen 0
x23665:	mov word [bp + 14], freopen$91	; 5: 199 70 14 127 92
x23670:	mov [bp + 16], bp	; 3: 137 110 16
x23673:	add bp, 14	; 3: 131 197 14
x23676:	jmp @1685$fileopen	; 3: 233 121 1

freopen$91:	; PostCall 14

freopen$92:	; GetReturnValue £temporary729

freopen$93:	; Assign handle £temporary729
x23679:	mov [bp + 12], bx	; 3: 137 94 12

freopen$94:	; Goto 130
x23682:	jmp freopen$130	; 3: 233 143 0

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x23685:	mov ax, [bp + 6]	; 3: 139 70 6
x23688:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Call 14 filecreate 0
x23691:	mov word [bp + 14], freopen$98	; 5: 199 70 14 153 92
x23696:	mov [bp + 16], bp	; 3: 137 110 16
x23699:	add bp, 14	; 3: 131 197 14
x23702:	jmp filecreate	; 3: 233 140 1

freopen$98:	; PostCall 14

freopen$99:	; GetReturnValue £temporary730

freopen$100:	; Assign handle £temporary730
x23705:	mov [bp + 12], bx	; 3: 137 94 12

freopen$101:	; Goto 130
x23708:	jmp freopen$130	; 2: 235 118

freopen$102:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$103:	; Parameter 14 mode 6
x23710:	mov ax, [bp + 8]	; 3: 139 70 8
x23713:	mov [bp + 20], ax	; 3: 137 70 20

freopen$104:	; Parameter 14 string_a2B# 8
x23716:	mov word [bp + 22], @1781$string_a2B#	; 5: 199 70 22 135 93

freopen$105:	; Call 14 strcmp 0
x23721:	mov word [bp + 14], freopen$106	; 5: 199 70 14 183 92
x23726:	mov [bp + 16], bp	; 3: 137 110 16
x23729:	add bp, 14	; 3: 131 197 14
x23732:	jmp strcmp	; 3: 233 211 0

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary732

freopen$108:	; NotEqual 130 £temporary732 0
x23735:	cmp bx, 0	; 3: 131 251 0
x23738:	jne freopen$130	; 2: 117 88

freopen$109:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$110:	; Parameter 14 name 6
x23740:	mov ax, [bp + 6]	; 3: 139 70 6
x23743:	mov [bp + 20], ax	; 3: 137 70 20

freopen$111:	; Parameter 14 66 8
x23746:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$112:	; Call 14 fileopen 0
x23750:	mov word [bp + 14], freopen$113	; 5: 199 70 14 212 92
x23755:	mov [bp + 16], bp	; 3: 137 110 16
x23758:	add bp, 14	; 3: 131 197 14
x23761:	jmp @1685$fileopen	; 3: 233 36 1

freopen$113:	; PostCall 14

freopen$114:	; GetReturnValue £temporary734

freopen$115:	; Assign handle £temporary734
x23764:	mov [bp + 12], bx	; 3: 137 94 12

freopen$116:	; Equal 124 handle -1
x23767:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23771:	je freopen$124	; 2: 116 32

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 stream 6
x23773:	mov ax, [bp + 10]	; 3: 139 70 10
x23776:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 0 8
x23779:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$120:	; Parameter 14 2 10
x23784:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$121:	; Call 14 fseek 0
x23789:	mov word [bp + 14], freopen$122	; 5: 199 70 14 251 92
x23794:	mov [bp + 16], bp	; 3: 137 110 16
x23797:	add bp, 14	; 3: 131 197 14
x23800:	jmp fseek	; 3: 233 91 1

freopen$122:	; PostCall 14

freopen$123:	; Goto 130
x23803:	jmp freopen$130	; 2: 235 23

freopen$124:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$125:	; Parameter 14 name 6
x23805:	mov ax, [bp + 6]	; 3: 139 70 6
x23808:	mov [bp + 20], ax	; 3: 137 70 20

freopen$126:	; Call 14 filecreate 0
x23811:	mov word [bp + 14], freopen$127	; 5: 199 70 14 17 93
x23816:	mov [bp + 16], bp	; 3: 137 110 16
x23819:	add bp, 14	; 3: 131 197 14
x23822:	jmp filecreate	; 3: 233 20 1

freopen$127:	; PostCall 14

freopen$128:	; GetReturnValue £temporary737

freopen$129:	; Assign handle £temporary737
x23825:	mov [bp + 12], bx	; 3: 137 94 12

freopen$130:	; Equal 147 handle -1
x23828:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23832:	je freopen$147	; 2: 116 76

freopen$131:	; Deref £temporary739 -> stream stream 0
x23834:	mov si, [bp + 10]	; 3: 139 118 10

freopen$132:	; Assign £temporary739 -> stream 1
x23837:	mov word [si], 1	; 4: 199 4 1 0

freopen$133:	; Deref £temporary740 -> stream stream 2
x23841:	mov si, [bp + 10]	; 3: 139 118 10

freopen$134:	; Assign £temporary740 -> stream handle
x23844:	mov ax, [bp + 12]	; 3: 139 70 12
x23847:	mov [si + 2], ax	; 3: 137 68 2

freopen$135:	; Deref £temporary741 -> stream stream 25
x23850:	mov si, [bp + 10]	; 3: 139 118 10

freopen$136:	; Assign £temporary741 -> stream 0
x23853:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$137:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$138:	; Deref £temporary742 -> stream stream 4
x23858:	mov si, [bp + 10]	; 3: 139 118 10

freopen$139:	; Parameter 14 £temporary742 -> stream 6
x23861:	mov [bp + 20], si	; 3: 137 118 20
x23864:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$140:	; Parameter 14 name 8
x23868:	mov ax, [bp + 6]	; 3: 139 70 6
x23871:	mov [bp + 22], ax	; 3: 137 70 22

freopen$141:	; Call 14 strcpy 0
x23874:	mov word [bp + 14], freopen$142	; 5: 199 70 14 80 93
x23879:	mov [bp + 16], bp	; 3: 137 110 16
x23882:	add bp, 14	; 3: 131 197 14
x23885:	jmp strcpy	; 3: 233 111 1

freopen$142:	; PostCall 14

freopen$143:	; Deref £temporary744 -> stream stream 27
x23888:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary744 -> stream 0
x23891:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$145:	; SetReturnValue stream
x23896:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$146:	; Return stream
x23899:	mov ax, [bp]	; 3: 139 70 0
x23902:	mov di, [bp + 4]	; 3: 139 126 4
x23905:	mov bp, [bp + 2]	; 3: 139 110 2
x23908:	jmp ax	; 2: 255 224

freopen$147:	; Deref £temporary745 -> stream stream 0
x23910:	mov si, [bp + 10]	; 3: 139 118 10

freopen$148:	; Assign £temporary745 -> stream 0
x23913:	mov word [si], 0	; 4: 199 4 0 0

freopen$149:	; SetReturnValue 0
x23917:	mov bx, 0	; 3: 187 0 0

freopen$150:	; Return 0
x23920:	mov ax, [bp]	; 3: 139 70 0
x23923:	mov di, [bp + 4]	; 3: 139 126 4
x23926:	mov bp, [bp + 2]	; 3: 139 110 2
x23929:	jmp ax	; 2: 255 224

freopen$151:	; FunctionEnd freopen

@1730$string_r#:
x23931:	db "r", 0	; 2: 114 0

@1738$string_w#:
x23933:	db "w", 0	; 2: 119 0

@1744$string_a#:
x23935:	db "a", 0	; 2: 97 0

@1761$string_r2B#:
x23937:	db "r+", 0	; 3: 114 43 0

@1769$string_w2B#:
x23940:	db "w+", 0	; 3: 119 43 0

@1781$string_a2B#:
x23943:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x23946:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3774 left index
x23951:	mov si, [bp + 6]	; 3: 139 118 6
x23954:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3773 -> £temporary3774 £temporary3774 0

strcmp$3:	; NotEqual 9 £temporary3773 -> £temporary3774 0
x23957:	cmp byte [si], 0	; 3: 128 60 0
x23960:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3777 right index
x23962:	mov si, [bp + 8]	; 3: 139 118 8
x23965:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3776 -> £temporary3777 £temporary3777 0

strcmp$6:	; NotEqual 9 £temporary3776 -> £temporary3777 0
x23968:	cmp byte [si], 0	; 3: 128 60 0
x23971:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x23973:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x23976:	mov ax, [bp]	; 3: 139 70 0
x23979:	mov di, [bp + 4]	; 3: 139 126 4
x23982:	mov bp, [bp + 2]	; 3: 139 110 2
x23985:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3781 left index
x23987:	mov si, [bp + 6]	; 3: 139 118 6
x23990:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3780 -> £temporary3781 £temporary3781 0

strcmp$11:	; BinaryAdd £temporary3783 right index
x23993:	mov di, [bp + 8]	; 3: 139 126 8
x23996:	add di, [bp + 10]	; 3: 3 126 10

strcmp$12:	; Deref £temporary3782 -> £temporary3783 £temporary3783 0

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3780 -> £temporary3781 £temporary3782 -> £temporary3783
x23999:	mov al, [di]	; 2: 138 5
x24001:	cmp [si], al	; 2: 56 4
x24003:	jge strcmp$16	; 2: 125 14

strcmp$14:	; SetReturnValue -1
x24005:	mov bx, -1	; 3: 187 255 255

strcmp$15:	; Return -1
x24008:	mov ax, [bp]	; 3: 139 70 0
x24011:	mov di, [bp + 4]	; 3: 139 126 4
x24014:	mov bp, [bp + 2]	; 3: 139 110 2
x24017:	jmp ax	; 2: 255 224

strcmp$16:	; BinaryAdd £temporary3786 left index
x24019:	mov si, [bp + 6]	; 3: 139 118 6
x24022:	add si, [bp + 10]	; 3: 3 118 10

strcmp$17:	; Deref £temporary3785 -> £temporary3786 £temporary3786 0

strcmp$18:	; BinaryAdd £temporary3788 right index
x24025:	mov di, [bp + 8]	; 3: 139 126 8
x24028:	add di, [bp + 10]	; 3: 3 126 10

strcmp$19:	; Deref £temporary3787 -> £temporary3788 £temporary3788 0

strcmp$20:	; SignedLessThanEqual 23 £temporary3785 -> £temporary3786 £temporary3787 -> £temporary3788
x24031:	mov al, [di]	; 2: 138 5
x24033:	cmp [si], al	; 2: 56 4
x24035:	jle strcmp$23	; 2: 126 14

strcmp$21:	; SetReturnValue 1
x24037:	mov bx, 1	; 3: 187 1 0

strcmp$22:	; Return 1
x24040:	mov ax, [bp]	; 3: 139 70 0
x24043:	mov di, [bp + 4]	; 3: 139 126 4
x24046:	mov bp, [bp + 2]	; 3: 139 110 2
x24049:	jmp ax	; 2: 255 224

strcmp$23:	; Increment index
x24051:	inc word [bp + 10]	; 3: 255 70 10

strcmp$24:	; Goto 1
x24054:	jmp strcmp$1	; 2: 235 151

strcmp$25:	; FunctionEnd strcmp

@1685$fileopen:	; AssignRegister ah 61
x24056:	mov ah, 61	; 2: 180 61

@1685$fileopen$1:	; AssignRegister al mode
x24058:	mov al, [bp + 8]	; 3: 138 70 8

@1685$fileopen$2:	; AssignRegister dx name
x24061:	mov dx, [bp + 6]	; 3: 139 86 6

@1685$fileopen$3:	; Interrupt 33
x24064:	int 33	; 2: 205 33

@1685$fileopen$4:	; NotCarry 8
x24066:	jnc @1685$fileopen$8	; 2: 115 20

@1685$fileopen$5:	; Assign errno 9
x24068:	mov word [errno], 9	; 6: 199 6 230 10 9 0

@1685$fileopen$6:	; SetReturnValue -1
x24074:	mov bx, -1	; 3: 187 255 255

@1685$fileopen$7:	; Return -1
x24077:	mov ax, [bp]	; 3: 139 70 0
x24080:	mov di, [bp + 4]	; 3: 139 126 4
x24083:	mov bp, [bp + 2]	; 3: 139 110 2
x24086:	jmp ax	; 2: 255 224

@1685$fileopen$8:	; InspectRegister £temporary695 ax

@1685$fileopen$9:	; SetReturnValue £temporary695
x24088:	mov bx, ax	; 2: 137 195

@1685$fileopen$10:	; Return £temporary695
x24090:	mov ax, [bp]	; 3: 139 70 0
x24093:	mov di, [bp + 4]	; 3: 139 126 4
x24096:	mov bp, [bp + 2]	; 3: 139 110 2
x24099:	jmp ax	; 2: 255 224

@1685$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x24101:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x24103:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x24106:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x24109:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary673 ax

filecreate$5:	; Assign handle £temporary673
x24111:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x24114:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x24116:	mov word [errno], 9	; 6: 199 6 230 10 9 0

filecreate$8:	; SetReturnValue -1
x24122:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x24125:	mov ax, [bp]	; 3: 139 70 0
x24128:	mov di, [bp + 4]	; 3: 139 126 4
x24131:	mov bp, [bp + 2]	; 3: 139 110 2
x24134:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x24136:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x24139:	mov ax, [bp]	; 3: 139 70 0
x24142:	mov di, [bp + 4]	; 3: 139 126 4
x24145:	mov bp, [bp + 2]	; 3: 139 110 2
x24148:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary920 origin
x24150:	mov ax, [bp + 10]	; 3: 139 70 10
x24153:	cmp ax, 0	; 3: 131 248 0
x24156:	jge fseek$1	; 2: 125 4
x24158:	neg ax	; 2: 247 216
x24160:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary920

fseek$2:	; AssignRegister ah 66
x24162:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary923 -> stream stream 2
x24164:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary923 -> stream
x24167:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x24170:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary926 offset
x24173:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary926

fseek$8:	; Interrupt 33
x24176:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x24178:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary929 -> stream stream 23
x24180:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary930 ax

fseek$12:	; Assign £temporary929 -> stream £temporary930
x24183:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary931 -> stream stream 23
x24186:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary931 -> stream
x24189:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary931 -> stream
x24192:	mov ax, [bp]	; 3: 139 70 0
x24195:	mov di, [bp + 4]	; 3: 139 126 4
x24198:	mov bp, [bp + 2]	; 3: 139 110 2
x24201:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary932 -> stream stream 21
x24203:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary932 -> stream 15
x24206:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x24211:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x24214:	mov ax, [bp]	; 3: 139 70 0
x24217:	mov di, [bp + 4]	; 3: 139 126 4
x24220:	mov bp, [bp + 2]	; 3: 139 110 2
x24223:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x24225:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x24227:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x24229:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x24232:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x24234:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary690 1
x24236:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x24239:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary690 0
x24241:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary690

fileexists$9:	; Return £temporary690
x24244:	mov ax, [bp]	; 3: 139 70 0
x24247:	mov di, [bp + 4]	; 3: 139 126 4
x24250:	mov bp, [bp + 2]	; 3: 139 110 2
x24253:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x24255:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3717 source index
x24260:	mov si, [bp + 8]	; 3: 139 118 8
x24263:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3716 -> £temporary3717 £temporary3717 0

strcpy$3:	; Equal 11 £temporary3716 -> £temporary3717 0
x24266:	cmp byte [si], 0	; 3: 128 60 0
x24269:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3721 target index
x24271:	mov si, [bp + 6]	; 3: 139 118 6
x24274:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3720 -> £temporary3721 £temporary3721 0

strcpy$6:	; BinaryAdd £temporary3723 source index
x24277:	mov di, [bp + 8]	; 3: 139 126 8
x24280:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3722 -> £temporary3723 £temporary3723 0

strcpy$8:	; Assign £temporary3720 -> £temporary3721 £temporary3722 -> £temporary3723
x24283:	mov al, [di]	; 2: 138 5
x24285:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x24287:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x24290:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3725 target index
x24292:	mov si, [bp + 6]	; 3: 139 118 6
x24295:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3724 -> £temporary3725 £temporary3725 0

strcpy$13:	; Assign £temporary3724 -> £temporary3725 0
x24298:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x24301:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x24304:	mov ax, [bp]	; 3: 139 70 0
x24307:	mov di, [bp + 4]	; 3: 139 126 4
x24310:	mov bp, [bp + 2]	; 3: 139 110 2
x24313:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2206 format
x24315:	mov si, bp	; 2: 137 238
x24317:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2207 £temporary2206

fprintf$2:	; BinaryAdd arg_list £temporary2207 2
x24320:	add si, 2	; 3: 131 198 2
x24323:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x24326:	mov ax, [bp + 6]	; 3: 139 70 6
x24329:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x24332:	mov ax, [bp + 8]	; 3: 139 70 8
x24335:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x24338:	mov ax, [di + 10]	; 3: 139 69 10
x24341:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x24344:	mov word [di + 12], fprintf$8	; 5: 199 69 12 43 95
x24349:	mov [di + 14], bp	; 3: 137 109 14
x24352:	mov [di + 16], di	; 3: 137 125 16
x24355:	add di, 12	; 3: 131 199 12
x24358:	mov bp, di	; 2: 137 253
x24360:	jmp vfprintf	; 3: 233 127 176

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2209

fprintf$10:	; SetReturnValue £temporary2209

fprintf$11:	; Return £temporary2209
x24363:	mov ax, [bp]	; 3: 139 70 0
x24366:	mov di, [bp + 4]	; 3: 139 126 4
x24369:	mov bp, [bp + 2]	; 3: 139 110 2
x24372:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x24374:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x24376:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x24378:	int 33	; 2: 205 33

abort$3:	; Return 0
x24380:	mov ax, [bp]	; 3: 139 70 0
x24383:	mov di, [bp + 4]	; 3: 139 126 4
x24386:	mov bp, [bp + 2]	; 3: 139 110 2
x24389:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x24391:	mov ax, [bp + 6]	; 3: 139 70 6
x24394:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x24397:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x24402:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x24407:	mov word [bp + 8], feof$5	; 5: 199 70 8 101 95
x24412:	mov [bp + 10], bp	; 3: 137 110 10
x24415:	add bp, 8	; 3: 131 197 8
x24418:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary953

feof$7:	; IntegralToIntegral £temporary954 £temporary953
x24421:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary954
x24428:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x24432:	mov ax, [bp + 6]	; 3: 139 70 6
x24435:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x24438:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x24443:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x24448:	mov word [bp + 12], feof$14	; 5: 199 70 12 142 95
x24453:	mov [bp + 14], bp	; 3: 137 110 14
x24456:	add bp, 12	; 3: 131 197 12
x24459:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary955

feof$16:	; IntegralToIntegral £temporary956 £temporary955
x24462:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary956
x24469:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x24473:	mov ax, [bp + 6]	; 3: 139 70 6
x24476:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary957 currPosition
x24479:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary957 8
x24483:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x24486:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x24491:	mov word [bp + 16], feof$24	; 5: 199 70 16 185 95
x24496:	mov [bp + 18], bp	; 3: 137 110 18
x24499:	add bp, 16	; 3: 131 197 16
x24502:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x24505:	mov eax, [bp + 12]	; 4: 102 139 70 12
x24509:	cmp [bp + 8], eax	; 4: 102 57 70 8
x24513:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary960 1
x24515:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x24518:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary960 0
x24520:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary960
x24523:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x24526:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x24529:	mov ax, [bp]	; 3: 139 70 0
x24532:	mov di, [bp + 4]	; 3: 139 126 4
x24535:	mov bp, [bp + 2]	; 3: 139 110 2
x24538:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1565 format
x24540:	mov si, bp	; 2: 137 238
x24542:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1566 £temporary1565

fscanf$2:	; BinaryAdd arg_list £temporary1566 2
x24545:	add si, 2	; 3: 131 198 2
x24548:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x24551:	mov ax, [bp + 6]	; 3: 139 70 6
x24554:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x24557:	mov ax, [bp + 8]	; 3: 139 70 8
x24560:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x24563:	mov ax, [di + 10]	; 3: 139 69 10
x24566:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x24569:	mov word [di + 12], fscanf$8	; 5: 199 69 12 12 96
x24574:	mov [di + 14], bp	; 3: 137 109 14
x24577:	mov [di + 16], di	; 3: 137 125 16
x24580:	add di, 12	; 3: 131 199 12
x24583:	mov bp, di	; 2: 137 253
x24585:	nop	; 1: 144
x24586:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1568

fscanf$10:	; SetReturnValue £temporary1568

fscanf$11:	; Return £temporary1568
x24588:	mov ax, [bp]	; 3: 139 70 0
x24591:	mov di, [bp + 4]	; 3: 139 126 4
x24594:	mov bp, [bp + 2]	; 3: 139 110 2
x24597:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x24599:	mov word [g_inStatus], 0	; 6: 199 6 72 96 0 0

vfscanf$1:	; IntegralToIntegral £temporary1573 inStream
x24605:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1573
x24608:	mov [g_inDevice], ax	; 3: 163 74 96

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x24611:	mov ax, [bp + 8]	; 3: 139 70 8
x24614:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x24617:	mov ax, [bp + 10]	; 3: 139 70 10
x24620:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x24623:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 61 96
x24628:	mov [bp + 14], bp	; 3: 137 110 14
x24631:	add bp, 12	; 3: 131 197 12
x24634:	nop	; 1: 144
x24635:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1574

vfscanf$9:	; SetReturnValue £temporary1574

vfscanf$10:	; Return £temporary1574
x24637:	mov ax, [bp]	; 3: 139 70 0
x24640:	mov di, [bp + 4]	; 3: 139 126 4
x24643:	mov bp, [bp + 2]	; 3: 139 110 2
x24646:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x24648:	db 0, 0	; 2: 0 0

g_inDevice:
x24650:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x24652:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x24657:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x24662:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x24667:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x24672:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x24677:	mov word [g_inCount], 0	; 6: 199 6 107 101 0 0

scanFormat$6:	; Assign g_inChars 0
x24683:	mov word [g_inChars], 0	; 6: 199 6 109 101 0 0

scanFormat$7:	; Assign index 0
x24689:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1360 format index
x24694:	mov si, [bp + 6]	; 3: 139 118 6
x24697:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1359 -> £temporary1360 £temporary1360 0

scanFormat$10:	; Equal 329 £temporary1359 -> £temporary1360 0
x24700:	cmp byte [si], 0	; 3: 128 60 0
x24703:	je scanFormat$329	; 4: 15 132 217 4

scanFormat$11:	; BinaryAdd £temporary1364 format index
x24707:	mov si, [bp + 6]	; 3: 139 118 6
x24710:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1363 -> £temporary1364 £temporary1364 0

scanFormat$13:	; Assign c £temporary1363 -> £temporary1364
x24713:	mov al, [si]	; 2: 138 4
x24715:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1365 c
x24718:	mov al, [bp + 10]	; 3: 138 70 10
x24721:	and ax, 255	; 3: 37 255 0
x24724:	cmp al, 0	; 2: 60 0
x24726:	jge scanFormat$15	; 2: 125 4
x24728:	neg al	; 2: 246 216
x24730:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1365 1
x24732:	inc ax	; 1: 64
x24733:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 321 percent 0
x24736:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x24740:	je scanFormat$321	; 4: 15 132 143 4

scanFormat$17:	; BinarySubtract £temporary1367 d 1
x24744:	mov ax, [bp + 55]	; 3: 139 70 55
x24747:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1367 104
x24748:	cmp ax, 104	; 3: 131 248 104
x24751:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1367 108
x24753:	cmp ax, 108	; 3: 131 248 108
x24756:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1367 76
x24758:	cmp ax, 76	; 3: 131 248 76
x24761:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1367 42
x24763:	cmp ax, 42	; 3: 131 248 42
x24766:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1367 99
x24768:	cmp ax, 99	; 3: 131 248 99
x24771:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1367 115
x24773:	cmp ax, 115	; 3: 131 248 115
x24776:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1367 100
x24780:	cmp ax, 100	; 3: 131 248 100
x24783:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1367 105
x24787:	cmp ax, 105	; 3: 131 248 105
x24790:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1367 111
x24794:	cmp ax, 111	; 3: 131 248 111
x24797:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1367 120
x24801:	cmp ax, 120	; 3: 131 248 120
x24804:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1367 117
x24808:	cmp ax, 117	; 3: 131 248 117
x24811:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1367 103
x24815:	cmp ax, 103	; 3: 131 248 103
x24818:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1367 102
x24822:	cmp ax, 102	; 3: 131 248 102
x24825:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1367 101
x24829:	cmp ax, 101	; 3: 131 248 101
x24832:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1367 91
x24836:	cmp ax, 91	; 3: 131 248 91
x24839:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 312 £temporary1367 110
x24843:	cmp ax, 110	; 3: 131 248 110
x24846:	je scanFormat$312	; 4: 15 132 7 4

scanFormat$34:	; CaseEnd £temporary1367

scanFormat$35:	; Goto 327
x24850:	jmp scanFormat$327	; 3: 233 65 4

scanFormat$36:	; Assign shortInt 1
x24853:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 327
x24858:	jmp scanFormat$327	; 3: 233 57 4

scanFormat$38:	; Assign longIntOrDouble 1
x24861:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 327
x24866:	jmp scanFormat$327	; 3: 233 49 4

scanFormat$40:	; Assign longDouble 1
x24869:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 327
x24874:	jmp scanFormat$327	; 3: 233 41 4

scanFormat$42:	; Assign star 1
x24877:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 327
x24882:	jmp scanFormat$327	; 3: 233 33 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x24885:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 67 97
x24890:	mov [bp + 59], bp	; 3: 137 110 59
x24893:	add bp, 57	; 3: 131 197 57
x24896:	jmp scanChar	; 3: 233 44 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1368

scanFormat$48:	; Assign charValue £temporary1368
x24899:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x24902:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24906:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x24908:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1372 arg_list 2
x24912:	mov si, [bp + 8]	; 3: 139 118 8
x24915:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1373 £temporary1372

scanFormat$53:	; Deref £temporary1374 -> £temporary1373 £temporary1373 0

scanFormat$54:	; Assign charPtr £temporary1374 -> £temporary1373
x24918:	mov ax, [si]	; 2: 139 4
x24920:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1375 -> charPtr charPtr 0
x24923:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1375 -> charPtr charValue
x24926:	mov al, [bp + 57]	; 3: 138 70 57
x24929:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x24931:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1376 charValue
x24936:	mov al, [bp + 57]	; 3: 138 70 57
x24939:	and ax, 255	; 3: 37 255 0
x24942:	cmp al, 0	; 2: 60 0
x24944:	jge scanFormat$59	; 2: 125 4
x24946:	neg al	; 2: 246 216
x24948:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 327 £temporary1376 -1
x24950:	cmp ax, -1	; 3: 131 248 255
x24953:	je scanFormat$327	; 4: 15 132 217 3

scanFormat$60:	; Increment g_inCount
x24957:	inc word [g_inCount]	; 4: 255 6 107 101

scanFormat$61:	; Goto 327
x24961:	jmp scanFormat$327	; 3: 233 210 3

scanFormat$62:	; NotEqual 74 star 0
x24964:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24968:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x24970:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1382 arg_list 2
x24974:	mov si, [bp + 8]	; 3: 139 118 8
x24977:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1383 £temporary1382

scanFormat$66:	; Deref £temporary1384 -> £temporary1383 £temporary1383 0

scanFormat$67:	; Assign charPtr £temporary1384 -> £temporary1383
x24980:	mov ax, [si]	; 2: 139 4
x24982:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x24985:	mov ax, [bp + 11]	; 3: 139 70 11
x24988:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x24991:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x24996:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 178 97
x25001:	mov [bp + 59], bp	; 3: 137 110 59
x25004:	add bp, 57	; 3: 131 197 57
x25007:	jmp scanString	; 3: 233 44 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x25010:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x25012:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x25017:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x25022:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 204 97
x25027:	mov [bp + 59], bp	; 3: 137 110 59
x25030:	add bp, 57	; 3: 131 197 57
x25033:	jmp scanString	; 3: 233 18 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x25036:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 327
x25041:	jmp scanFormat$327	; 3: 233 130 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x25044:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x25049:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 231 97
x25054:	mov [bp + 59], bp	; 3: 137 110 59
x25057:	add bp, 57	; 3: 131 197 57
x25060:	jmp scanLongInt	; 3: 233 123 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1387

scanFormat$86:	; Assign longValue £temporary1387
x25063:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x25067:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25071:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x25073:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25077:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x25079:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1391 arg_list 2
x25083:	mov si, [bp + 8]	; 3: 139 118 8
x25086:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1392 £temporary1391

scanFormat$92:	; Deref £temporary1393 -> £temporary1392 £temporary1392 0

scanFormat$93:	; Assign shortPtr £temporary1393 -> £temporary1392
x25089:	mov ax, [si]	; 2: 139 4
x25091:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1394 -> shortPtr shortPtr 0
x25094:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1395 longValue
x25097:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25101:	cmp eax, 0	; 4: 102 131 248 0
x25105:	jge scanFormat$96	; 2: 125 5
x25107:	neg eax	; 3: 102 247 216
x25110:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1394 -> shortPtr £temporary1395
x25112:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x25114:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x25116:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25120:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x25122:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1399 arg_list 2
x25126:	mov si, [bp + 8]	; 3: 139 118 8
x25129:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1400 £temporary1399

scanFormat$102:	; Deref £temporary1401 -> £temporary1400 £temporary1400 0

scanFormat$103:	; Assign intPtr £temporary1401 -> £temporary1400
x25132:	mov ax, [si]	; 2: 139 4
x25134:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1402 -> intPtr intPtr 0
x25137:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1403 longValue
x25140:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25144:	cmp eax, 0	; 4: 102 131 248 0
x25148:	jge scanFormat$106	; 2: 125 5
x25150:	neg eax	; 3: 102 247 216
x25153:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1402 -> intPtr £temporary1403
x25155:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x25157:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x25159:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1405 arg_list 2
x25163:	mov si, [bp + 8]	; 3: 139 118 8
x25166:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1406 £temporary1405

scanFormat$111:	; Deref £temporary1407 -> £temporary1406 £temporary1406 0

scanFormat$112:	; Assign longPtr £temporary1407 -> £temporary1406
x25169:	mov ax, [si]	; 2: 139 4
x25171:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1408 -> longPtr longPtr 0
x25174:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1408 -> longPtr longValue
x25177:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25181:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x25184:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 327
x25189:	jmp scanFormat$327	; 3: 233 238 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x25192:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x25197:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 123 98
x25202:	mov [bp + 59], bp	; 3: 137 110 59
x25205:	add bp, 57	; 3: 131 197 57
x25208:	jmp scanUnsignedLongInt	; 3: 233 33 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1410

scanFormat$122:	; Assign unsignedLongValue £temporary1410
x25211:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x25215:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25219:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x25221:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25225:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x25227:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1414 arg_list 2
x25231:	mov si, [bp + 8]	; 3: 139 118 8
x25234:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1415 £temporary1414

scanFormat$128:	; Deref £temporary1416 -> £temporary1415 £temporary1415 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1416 -> £temporary1415
x25237:	mov ax, [si]	; 2: 139 4
x25239:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1417 -> unsignedShortPtr unsignedShortPtr 0
x25242:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1418 unsignedLongValue
x25245:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1417 -> unsignedShortPtr £temporary1418
x25249:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x25251:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x25253:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25257:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x25259:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1422 arg_list 2
x25263:	mov si, [bp + 8]	; 3: 139 118 8
x25266:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1423 £temporary1422

scanFormat$138:	; Deref £temporary1424 -> £temporary1423 £temporary1423 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1424 -> £temporary1423
x25269:	mov ax, [si]	; 2: 139 4
x25271:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1425 -> unsignedIntPtr unsignedIntPtr 0
x25274:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1426 unsignedLongValue
x25277:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1425 -> unsignedIntPtr £temporary1426
x25281:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x25283:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x25285:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1428 arg_list 2
x25289:	mov si, [bp + 8]	; 3: 139 118 8
x25292:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1429 £temporary1428

scanFormat$147:	; Deref £temporary1430 -> £temporary1429 £temporary1429 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1430 -> £temporary1429
x25295:	mov ax, [si]	; 2: 139 4
x25297:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1431 -> unsignedLongPtr unsignedLongPtr 0
x25300:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1431 -> unsignedLongPtr unsignedLongValue
x25303:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25307:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x25310:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 327
x25315:	jmp scanFormat$327	; 3: 233 112 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x25318:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x25323:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 249 98
x25328:	mov [bp + 59], bp	; 3: 137 110 59
x25331:	add bp, 57	; 3: 131 197 57
x25334:	jmp scanUnsignedLongInt	; 3: 233 163 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1433

scanFormat$158:	; Assign unsignedLongValue £temporary1433
x25337:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x25341:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25345:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x25347:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25351:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x25353:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1437 arg_list 2
x25357:	mov si, [bp + 8]	; 3: 139 118 8
x25360:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1438 £temporary1437

scanFormat$164:	; Deref £temporary1439 -> £temporary1438 £temporary1438 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1439 -> £temporary1438
x25363:	mov ax, [si]	; 2: 139 4
x25365:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1440 -> unsignedShortPtr unsignedShortPtr 0
x25368:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1441 unsignedLongValue
x25371:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1440 -> unsignedShortPtr £temporary1441
x25375:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x25377:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x25379:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25383:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x25385:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1445 arg_list 2
x25389:	mov si, [bp + 8]	; 3: 139 118 8
x25392:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1446 £temporary1445

scanFormat$174:	; Deref £temporary1447 -> £temporary1446 £temporary1446 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1447 -> £temporary1446
x25395:	mov ax, [si]	; 2: 139 4
x25397:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1448 -> unsignedIntPtr unsignedIntPtr 0
x25400:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1449 unsignedLongValue
x25403:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1448 -> unsignedIntPtr £temporary1449
x25407:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x25409:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x25411:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1451 arg_list 2
x25415:	mov si, [bp + 8]	; 3: 139 118 8
x25418:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1452 £temporary1451

scanFormat$183:	; Deref £temporary1453 -> £temporary1452 £temporary1452 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1453 -> £temporary1452
x25421:	mov ax, [si]	; 2: 139 4
x25423:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1454 -> unsignedLongPtr unsignedLongPtr 0
x25426:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1454 -> unsignedLongPtr unsignedLongValue
x25429:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25433:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x25436:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 327
x25441:	jmp scanFormat$327	; 3: 233 242 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x25444:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x25449:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 119 99
x25454:	mov [bp + 59], bp	; 3: 137 110 59
x25457:	add bp, 57	; 3: 131 197 57
x25460:	jmp scanUnsignedLongInt	; 3: 233 37 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1456

scanFormat$194:	; Assign unsignedLongValue £temporary1456
x25463:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x25467:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25471:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x25473:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25477:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x25479:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1460 arg_list 2
x25483:	mov si, [bp + 8]	; 3: 139 118 8
x25486:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1461 £temporary1460

scanFormat$200:	; Deref £temporary1462 -> £temporary1461 £temporary1461 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1462 -> £temporary1461
x25489:	mov ax, [si]	; 2: 139 4
x25491:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1463 -> unsignedShortPtr unsignedShortPtr 0
x25494:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1464 unsignedLongValue
x25497:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1463 -> unsignedShortPtr £temporary1464
x25501:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x25503:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x25505:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25509:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x25511:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1468 arg_list 2
x25515:	mov si, [bp + 8]	; 3: 139 118 8
x25518:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1469 £temporary1468

scanFormat$210:	; Deref £temporary1470 -> £temporary1469 £temporary1469 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1470 -> £temporary1469
x25521:	mov ax, [si]	; 2: 139 4
x25523:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1471 -> unsignedIntPtr unsignedIntPtr 0
x25526:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1472 unsignedLongValue
x25529:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1471 -> unsignedIntPtr £temporary1472
x25533:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x25535:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x25537:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1474 arg_list 2
x25541:	mov si, [bp + 8]	; 3: 139 118 8
x25544:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1475 £temporary1474

scanFormat$219:	; Deref £temporary1476 -> £temporary1475 £temporary1475 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1476 -> £temporary1475
x25547:	mov ax, [si]	; 2: 139 4
x25549:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1477 -> unsignedLongPtr unsignedLongPtr 0
x25552:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1477 -> unsignedLongPtr unsignedLongValue
x25555:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25559:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x25562:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 327
x25567:	jmp scanFormat$327	; 3: 233 116 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x25570:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 240 99
x25575:	mov [bp + 59], bp	; 3: 137 110 59
x25578:	add bp, 57	; 3: 131 197 57
x25581:	jmp scanLongDouble	; 3: 233 24 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1479

scanFormat$229:	; PopFloat longDoubleValue
x25584:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x25587:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25591:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x25593:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25597:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x25599:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1483 arg_list 2
x25603:	mov si, [bp + 8]	; 3: 139 118 8
x25606:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1484 £temporary1483

scanFormat$235:	; Deref £temporary1485 -> £temporary1484 £temporary1484 0

scanFormat$236:	; Assign doublePtr £temporary1485 -> £temporary1484
x25609:	mov ax, [si]	; 2: 139 4
x25611:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1486 -> doublePtr doublePtr 0
x25614:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x25617:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1486 -> doublePtr
x25620:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x25622:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x25624:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x25628:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x25630:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1489 arg_list 2
x25634:	mov si, [bp + 8]	; 3: 139 118 8
x25637:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1490 £temporary1489

scanFormat$245:	; Deref £temporary1491 -> £temporary1490 £temporary1490 0

scanFormat$246:	; Assign longDoublePtr £temporary1491 -> £temporary1490
x25640:	mov ax, [si]	; 2: 139 4
x25642:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1492 -> longDoublePtr longDoublePtr 0
x25645:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x25648:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1492 -> longDoublePtr
x25651:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x25653:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x25655:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1494 arg_list 2
x25659:	mov si, [bp + 8]	; 3: 139 118 8
x25662:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1495 £temporary1494

scanFormat$254:	; Deref £temporary1496 -> £temporary1495 £temporary1495 0

scanFormat$255:	; Assign floatPtr £temporary1496 -> £temporary1495
x25665:	mov ax, [si]	; 2: 139 4
x25667:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1497 -> floatPtr floatPtr 0
x25670:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x25673:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1497 -> floatPtr
x25676:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x25678:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 327
x25683:	jmp scanFormat$327	; 3: 233 0 1

scanFormat$261:	; Assign not 0
x25686:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x25691:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1503 format index
x25694:	mov si, [bp + 6]	; 3: 139 118 6
x25697:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1502 -> £temporary1503 £temporary1503 0

scanFormat$265:	; NotEqual 268 £temporary1502 -> £temporary1503 94
x25700:	cmp byte [si], 94	; 3: 128 60 94
x25703:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x25705:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x25710:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x25713:	mov ax, [bp + 31]	; 3: 139 70 31
x25716:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1507 format index
x25719:	mov si, [bp + 6]	; 3: 139 118 6
x25722:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1506 -> £temporary1507 £temporary1507 0

scanFormat$271:	; Equal 274 £temporary1506 -> £temporary1507 93
x25725:	cmp byte [si], 93	; 3: 128 60 93
x25728:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x25730:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x25733:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinarySubtract size index startIndex
x25735:	mov ax, [bp + 31]	; 3: 139 70 31
x25738:	sub ax, [bp + 59]	; 3: 43 70 59
x25741:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$275:	; BinaryAdd £temporary1512 format index
x25744:	mov si, [bp + 6]	; 3: 139 118 6
x25747:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$276:	; Deref £temporary1511 -> £temporary1512 £temporary1512 0

scanFormat$277:	; Assign c £temporary1511 -> £temporary1512
x25750:	mov al, [si]	; 2: 138 4
x25752:	mov [bp + 63], al	; 3: 136 70 63

scanFormat$278:	; BinaryAdd £temporary1514 format index
x25755:	mov si, [bp + 6]	; 3: 139 118 6
x25758:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$279:	; Deref £temporary1513 -> £temporary1514 £temporary1514 0

scanFormat$280:	; Assign £temporary1513 -> £temporary1514 0
x25761:	mov byte [si], 0	; 3: 198 4 0

scanFormat$281:	; NotEqual 298 star 0
x25764:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25768:	jne scanFormat$298	; 2: 117 58

scanFormat$282:	; BinaryAdd arg_list arg_list 2
x25770:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$283:	; BinarySubtract £temporary1518 arg_list 2
x25774:	mov si, [bp + 8]	; 3: 139 118 8
x25777:	sub si, 2	; 3: 131 238 2

scanFormat$284:	; IntegralToIntegral £temporary1519 £temporary1518

scanFormat$285:	; Deref £temporary1520 -> £temporary1519 £temporary1519 0

scanFormat$286:	; Assign string £temporary1520 -> £temporary1519
x25780:	mov ax, [si]	; 2: 139 4
x25782:	mov [bp + 64], ax	; 3: 137 70 64

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$288:	; Parameter 66 string 6
x25785:	mov ax, [bp + 64]	; 3: 139 70 64
x25788:	mov [bp + 72], ax	; 3: 137 70 72

scanFormat$289:	; BinaryAdd £temporary1522 format startIndex
x25791:	mov si, [bp + 6]	; 3: 139 118 6
x25794:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$290:	; Deref £temporary1521 -> £temporary1522 £temporary1522 0

scanFormat$291:	; address £temporary1523 £temporary1521 -> £temporary1522

scanFormat$292:	; Parameter 66 £temporary1523 8
x25797:	mov [bp + 74], si	; 3: 137 118 74

scanFormat$293:	; Parameter 66 size 10
x25800:	mov ax, [bp + 61]	; 3: 139 70 61
x25803:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$294:	; Parameter 66 not 12
x25806:	mov ax, [bp + 57]	; 3: 139 70 57
x25809:	mov [bp + 78], ax	; 3: 137 70 78

scanFormat$295:	; Call 66 scanPattern 0
x25812:	mov word [bp + 66], scanFormat$296	; 5: 199 70 66 226 100
x25817:	mov [bp + 68], bp	; 3: 137 110 68
x25820:	add bp, 66	; 3: 131 197 66
x25823:	jmp scanPattern	; 3: 233 97 11

scanFormat$296:	; PostCall 66

scanFormat$297:	; Goto 308
x25826:	jmp scanFormat$308	; 2: 235 40

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$299:	; Parameter 64 0 6
x25828:	mov word [bp + 70], 0	; 5: 199 70 70 0 0

scanFormat$300:	; BinaryAdd £temporary1526 format startIndex
x25833:	mov si, [bp + 6]	; 3: 139 118 6
x25836:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$301:	; Deref £temporary1525 -> £temporary1526 £temporary1526 0

scanFormat$302:	; address £temporary1527 £temporary1525 -> £temporary1526

scanFormat$303:	; Parameter 64 £temporary1527 8
x25839:	mov [bp + 72], si	; 3: 137 118 72

scanFormat$304:	; Parameter 64 size 10
x25842:	mov ax, [bp + 61]	; 3: 139 70 61
x25845:	mov [bp + 74], ax	; 3: 137 70 74

scanFormat$305:	; Parameter 64 not 12
x25848:	mov ax, [bp + 57]	; 3: 139 70 57
x25851:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$306:	; Call 64 scanPattern 0
x25854:	mov word [bp + 64], scanFormat$307	; 5: 199 70 64 12 101
x25859:	mov [bp + 66], bp	; 3: 137 110 66
x25862:	add bp, 64	; 3: 131 197 64
x25865:	jmp scanPattern	; 3: 233 55 11

scanFormat$307:	; PostCall 64

scanFormat$308:	; BinaryAdd £temporary1530 format index
x25868:	mov si, [bp + 6]	; 3: 139 118 6
x25871:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$309:	; Deref £temporary1529 -> £temporary1530 £temporary1530 0

scanFormat$310:	; Assign £temporary1529 -> £temporary1530 c
x25874:	mov al, [bp + 63]	; 3: 138 70 63
x25877:	mov [si], al	; 2: 136 4

scanFormat$311:	; Goto 327
x25879:	jmp scanFormat$327	; 2: 235 61

scanFormat$312:	; BinaryAdd arg_list arg_list 2
x25881:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$313:	; BinarySubtract £temporary1532 arg_list 2
x25885:	mov si, [bp + 8]	; 3: 139 118 8
x25888:	sub si, 2	; 3: 131 238 2

scanFormat$314:	; IntegralToIntegral £temporary1533 £temporary1532

scanFormat$315:	; Deref £temporary1534 -> £temporary1533 £temporary1533 0

scanFormat$316:	; Assign charsPtr £temporary1534 -> £temporary1533
x25891:	mov ax, [si]	; 2: 139 4
x25893:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$317:	; Deref £temporary1535 -> charsPtr charsPtr 0
x25896:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$318:	; Assign £temporary1535 -> charsPtr g_inChars
x25899:	mov ax, [g_inChars]	; 3: 161 109 101
x25902:	mov [si], ax	; 2: 137 4

scanFormat$319:	; Assign percent 0
x25904:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$320:	; Goto 327
x25909:	jmp scanFormat$327	; 2: 235 31

scanFormat$321:	; NotEqual 327 c 37
x25911:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x25915:	jne scanFormat$327	; 2: 117 25

scanFormat$322:	; Assign percent 1
x25917:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$323:	; Assign shortInt 0
x25922:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$324:	; Assign longIntOrDouble 0
x25927:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$325:	; Assign longDouble 0
x25932:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$326:	; Assign star 0
x25937:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$327:	; Increment index
x25942:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$328:	; Goto 8
x25945:	jmp scanFormat$8	; 3: 233 26 251

scanFormat$329:	; SetReturnValue g_inCount
x25948:	mov bx, [g_inCount]	; 4: 139 30 107 101

scanFormat$330:	; Return g_inCount
x25952:	mov ax, [bp]	; 3: 139 70 0
x25955:	mov di, [bp + 4]	; 3: 139 126 4
x25958:	mov bp, [bp + 2]	; 3: 139 110 2
x25961:	jmp ax	; 2: 255 224

scanFormat$331:	; FunctionEnd scanFormat

g_inCount:
x25963:	db 0, 0	; 2: 0 0

g_inChars:
x25965:	db 0, 0	; 2: 0 0

scanChar:	; Assign c 0
x25967:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x25971:	mov ax, [g_inStatus]	; 3: 161 72 96
x25974:	cmp ax, 0	; 3: 131 248 0
x25977:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x25979:	cmp ax, 1	; 3: 131 248 1
x25982:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x25984:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1034 g_inDevice
x25986:	mov ax, [g_inDevice]	; 3: 161 74 96

scanChar$6:	; Assign stream £temporary1034
x25989:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1035 -> stream stream 2
x25992:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1035 -> stream
x25995:	mov ax, [si + 2]	; 3: 139 68 2
x25998:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x26001:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x26003:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x26006:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1040 c
x26009:	mov dx, bp	; 2: 137 234
x26011:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1040

scanChar$14:	; Interrupt 33
x26014:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x26016:	inc word [g_inChars]	; 4: 255 6 109 101

scanChar$16:	; SetReturnValue c
x26020:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x26023:	mov ax, [bp]	; 3: 139 70 0
x26026:	mov di, [bp + 4]	; 3: 139 126 4
x26029:	mov bp, [bp + 2]	; 3: 139 110 2
x26032:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1042 g_inDevice
x26034:	mov ax, [g_inDevice]	; 3: 161 74 96

scanChar$19:	; Assign inString £temporary1042
x26037:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1043 g_inChars
x26040:	mov ax, [g_inChars]	; 3: 161 109 101

scanChar$21:	; Increment g_inChars
x26043:	inc word [g_inChars]	; 4: 255 6 109 101

scanChar$22:	; BinaryAdd £temporary1045 inString £temporary1043
x26047:	mov si, [bp + 11]	; 3: 139 118 11
x26050:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1044 -> £temporary1045 £temporary1045 0

scanChar$24:	; SetReturnValue £temporary1044 -> £temporary1045
x26052:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1044 -> £temporary1045
x26054:	mov ax, [bp]	; 3: 139 70 0
x26057:	mov di, [bp + 4]	; 3: 139 126 4
x26060:	mov bp, [bp + 2]	; 3: 139 110 2
x26063:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x26065:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x26067:	mov ax, [bp]	; 3: 139 70 0
x26070:	mov di, [bp + 4]	; 3: 139 126 4
x26073:	mov bp, [bp + 2]	; 3: 139 110 2
x26076:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x26078:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x26083:	mov word [bp + 12], scanString$3	; 5: 199 70 12 241 101
x26088:	mov [bp + 14], bp	; 3: 137 110 14
x26091:	add bp, 12	; 3: 131 197 12
x26094:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1110

scanString$5:	; Assign input £temporary1110
x26097:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x26100:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1111 input
x26105:	mov al, [bp + 12]	; 3: 138 70 12
x26108:	and ax, 255	; 3: 37 255 0
x26111:	cmp al, 0	; 2: 60 0
x26113:	jge scanString$9	; 2: 125 4
x26115:	neg al	; 2: 246 216
x26117:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1111 6
x26119:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x26122:	mov word [bp + 15], scanString$11	; 5: 199 70 15 24 102
x26127:	mov [bp + 17], bp	; 3: 137 110 17
x26130:	add bp, 15	; 3: 131 197 15
x26133:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1112

scanString$13:	; Equal 20 £temporary1112 0
x26136:	cmp bx, 0	; 3: 131 251 0
x26139:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x26141:	mov word [bp + 15], scanString$16	; 5: 199 70 15 43 102
x26146:	mov [bp + 17], bp	; 3: 137 110 17
x26149:	add bp, 15	; 3: 131 197 15
x26152:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1113

scanString$18:	; Assign input £temporary1113
x26155:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x26158:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x26160:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26164:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x26168:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26172:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1117 input
x26174:	mov al, [bp + 12]	; 3: 138 70 12
x26177:	and ax, 255	; 3: 37 255 0
x26180:	cmp al, 0	; 2: 60 0
x26182:	jge scanString$24	; 2: 125 4
x26184:	neg al	; 2: 246 216
x26186:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1117 6
x26188:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x26191:	mov word [bp + 15], scanString$26	; 5: 199 70 15 93 102
x26196:	mov [bp + 17], bp	; 3: 137 110 17
x26199:	add bp, 15	; 3: 131 197 15
x26202:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1118

scanString$28:	; NotEqual 45 £temporary1118 0
x26205:	cmp bx, 0	; 3: 131 251 0
x26208:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1121 input
x26210:	mov al, [bp + 12]	; 3: 138 70 12
x26213:	and ax, 255	; 3: 37 255 0
x26216:	cmp al, 0	; 2: 60 0
x26218:	jge scanString$30	; 2: 125 4
x26220:	neg al	; 2: 246 216
x26222:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1121 -1
x26224:	cmp ax, -1	; 3: 131 248 255
x26227:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x26229:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26233:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1126 index
x26235:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x26238:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1128 string £temporary1126
x26241:	mov si, [bp + 6]	; 3: 139 118 6
x26244:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1127 -> £temporary1128 £temporary1128 0

scanString$36:	; Assign £temporary1127 -> £temporary1128 input
x26246:	mov al, [bp + 12]	; 3: 138 70 12
x26249:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x26251:	mov word [bp + 15], scanString$39	; 5: 199 70 15 153 102
x26256:	mov [bp + 17], bp	; 3: 137 110 17
x26259:	add bp, 15	; 3: 131 197 15
x26262:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1129

scanString$41:	; Assign input £temporary1129
x26265:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x26268:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x26273:	inc word [g_inChars]	; 4: 255 6 109 101

scanString$44:	; Goto 22
x26277:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1132 string index
x26279:	mov si, [bp + 6]	; 3: 139 118 6
x26282:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1131 -> £temporary1132 £temporary1132 0

scanString$47:	; Assign £temporary1131 -> £temporary1132 0
x26285:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x26288:	inc word [g_inChars]	; 4: 255 6 109 101

scanString$49:	; Goto 126
x26292:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1134 precision
x26295:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x26298:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1134 0
x26301:	cmp ax, 0	; 3: 131 248 0
x26304:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1136 input
x26306:	mov al, [bp + 12]	; 3: 138 70 12
x26309:	and ax, 255	; 3: 37 255 0
x26312:	cmp al, 0	; 2: 60 0
x26314:	jge scanString$55	; 2: 125 4
x26316:	neg al	; 2: 246 216
x26318:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1136 6
x26320:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x26323:	mov word [bp + 15], scanString$57	; 5: 199 70 15 225 102
x26328:	mov [bp + 17], bp	; 3: 137 110 17
x26331:	add bp, 15	; 3: 131 197 15
x26334:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1137

scanString$59:	; NotEqual 76 £temporary1137 0
x26337:	cmp bx, 0	; 3: 131 251 0
x26340:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1140 input
x26342:	mov al, [bp + 12]	; 3: 138 70 12
x26345:	and ax, 255	; 3: 37 255 0
x26348:	cmp al, 0	; 2: 60 0
x26350:	jge scanString$61	; 2: 125 4
x26352:	neg al	; 2: 246 216
x26354:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1140 -1
x26356:	cmp ax, -1	; 3: 131 248 255
x26359:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x26361:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26365:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1146 index
x26367:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x26370:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1148 string £temporary1146
x26373:	mov si, [bp + 6]	; 3: 139 118 6
x26376:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1147 -> £temporary1148 £temporary1148 0

scanString$67:	; Assign £temporary1147 -> £temporary1148 input
x26378:	mov al, [bp + 12]	; 3: 138 70 12
x26381:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x26383:	mov word [bp + 15], scanString$70	; 5: 199 70 15 29 103
x26388:	mov [bp + 17], bp	; 3: 137 110 17
x26391:	add bp, 15	; 3: 131 197 15
x26394:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1149

scanString$72:	; Assign input £temporary1149
x26397:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x26400:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x26405:	inc word [g_inChars]	; 4: 255 6 109 101

scanString$75:	; Goto 50
x26409:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x26411:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26415:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1153 string index
x26419:	mov si, [bp + 6]	; 3: 139 118 6
x26422:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1152 -> £temporary1153 £temporary1153 0

scanString$79:	; Assign £temporary1152 -> £temporary1153 0
x26425:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x26428:	inc word [g_inChars]	; 4: 255 6 109 101

scanString$81:	; Goto 126
x26432:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x26435:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26439:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1156 input
x26441:	mov al, [bp + 12]	; 3: 138 70 12
x26444:	and ax, 255	; 3: 37 255 0
x26447:	cmp al, 0	; 2: 60 0
x26449:	jge scanString$85	; 2: 125 4
x26451:	neg al	; 2: 246 216
x26453:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1156 6
x26455:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x26458:	mov word [bp + 15], scanString$87	; 5: 199 70 15 104 103
x26463:	mov [bp + 17], bp	; 3: 137 110 17
x26466:	add bp, 15	; 3: 131 197 15
x26469:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1157

scanString$89:	; NotEqual 101 £temporary1157 0
x26472:	cmp bx, 0	; 3: 131 251 0
x26475:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1160 input
x26477:	mov al, [bp + 12]	; 3: 138 70 12
x26480:	and ax, 255	; 3: 37 255 0
x26483:	cmp al, 0	; 2: 60 0
x26485:	jge scanString$91	; 2: 125 4
x26487:	neg al	; 2: 246 216
x26489:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1160 -1
x26491:	cmp ax, -1	; 3: 131 248 255
x26494:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x26496:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26500:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x26502:	mov word [bp + 15], scanString$95	; 5: 199 70 15 148 103
x26507:	mov [bp + 17], bp	; 3: 137 110 17
x26510:	add bp, 15	; 3: 131 197 15
x26513:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1165

scanString$97:	; Assign input £temporary1165
x26516:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x26519:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x26524:	inc word [g_inChars]	; 4: 255 6 109 101

scanString$100:	; Goto 83
x26528:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x26530:	inc word [g_inChars]	; 4: 255 6 109 101

scanString$102:	; Goto 126
x26534:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1168 precision
x26536:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x26539:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1168 0
x26542:	cmp ax, 0	; 3: 131 248 0
x26545:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1170 input
x26547:	mov al, [bp + 12]	; 3: 138 70 12
x26550:	and ax, 255	; 3: 37 255 0
x26553:	cmp al, 0	; 2: 60 0
x26555:	jge scanString$108	; 2: 125 4
x26557:	neg al	; 2: 246 216
x26559:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1170 6
x26561:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x26564:	mov word [bp + 15], scanString$110	; 5: 199 70 15 210 103
x26569:	mov [bp + 17], bp	; 3: 137 110 17
x26572:	add bp, 15	; 3: 131 197 15
x26575:	nop	; 1: 144
x26576:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1171

scanString$112:	; NotEqual 124 £temporary1171 0
x26578:	cmp bx, 0	; 3: 131 251 0
x26581:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1174 input
x26583:	mov al, [bp + 12]	; 3: 138 70 12
x26586:	and ax, 255	; 3: 37 255 0
x26589:	cmp al, 0	; 2: 60 0
x26591:	jge scanString$114	; 2: 125 4
x26593:	neg al	; 2: 246 216
x26595:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1174 -1
x26597:	cmp ax, -1	; 3: 131 248 255
x26600:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x26602:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26606:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x26608:	mov word [bp + 15], scanString$118	; 5: 199 70 15 254 103
x26613:	mov [bp + 17], bp	; 3: 137 110 17
x26616:	add bp, 15	; 3: 131 197 15
x26619:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1180

scanString$120:	; Assign input £temporary1180
x26622:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x26625:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x26630:	inc word [g_inChars]	; 4: 255 6 109 101

scanString$123:	; Goto 103
x26634:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x26636:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26640:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x26642:	inc word [g_inChars]	; 4: 255 6 109 101

scanString$126:	; Equal 128 found 0
x26646:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x26650:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x26652:	inc word [g_inCount]	; 4: 255 6 107 101

scanString$128:	; Return 0
x26656:	mov ax, [bp]	; 3: 139 70 0
x26659:	mov di, [bp + 4]	; 3: 139 126 4
x26662:	mov bp, [bp + 2]	; 3: 139 110 2
x26665:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x26667:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x26671:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x26673:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x26677:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x26679:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x26683:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x26685:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x26689:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x26691:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x26695:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x26697:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x26701:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary249 1
x26703:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x26706:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary249 0
x26708:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary249

isspace$10:	; Return £temporary249
x26711:	mov ax, [bp]	; 3: 139 70 0
x26714:	mov di, [bp + 4]	; 3: 139 126 4
x26717:	mov bp, [bp + 2]	; 3: 139 110 2
x26720:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x26722:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x26730:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x26735:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x26740:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 130 104
x26745:	mov [bp + 18], bp	; 3: 137 110 18
x26748:	add bp, 16	; 3: 131 197 16
x26751:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1243

scanLongInt$7:	; Assign input £temporary1243
x26754:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1244 input
x26757:	mov al, [bp + 16]	; 3: 138 70 16
x26760:	and ax, 255	; 3: 37 255 0
x26763:	cmp al, 0	; 2: 60 0
x26765:	jge scanLongInt$10	; 2: 125 4
x26767:	neg al	; 2: 246 216
x26769:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1244 6
x26771:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x26774:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 164 104
x26779:	mov [bp + 19], bp	; 3: 137 110 19
x26782:	add bp, 17	; 3: 131 197 17
x26785:	nop	; 1: 144
x26786:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1245

scanLongInt$14:	; Equal 21 £temporary1245 0
x26788:	cmp bx, 0	; 3: 131 251 0
x26791:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x26793:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 183 104
x26798:	mov [bp + 19], bp	; 3: 137 110 19
x26801:	add bp, 17	; 3: 131 197 17
x26804:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1246

scanLongInt$19:	; Assign input £temporary1246
x26807:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x26810:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x26812:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x26816:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x26818:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 208 104
x26823:	mov [bp + 19], bp	; 3: 137 110 19
x26826:	add bp, 17	; 3: 131 197 17
x26829:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1249

scanLongInt$26:	; Assign input £temporary1249
x26832:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x26835:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x26837:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x26841:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x26843:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x26848:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 238 104
x26853:	mov [bp + 19], bp	; 3: 137 110 19
x26856:	add bp, 17	; 3: 131 197 17
x26859:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1251

scanLongInt$34:	; Assign input £temporary1251
x26862:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x26865:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26869:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x26871:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x26875:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x26877:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 11 105
x26882:	mov [bp + 19], bp	; 3: 137 110 19
x26885:	add bp, 17	; 3: 131 197 17
x26888:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1254

scanLongInt$41:	; Assign input £temporary1254
x26891:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1255 input
x26894:	mov al, [bp + 16]	; 3: 138 70 16
x26897:	and ax, 255	; 3: 37 255 0
x26900:	cmp al, 0	; 2: 60 0
x26902:	jge scanLongInt$44	; 2: 125 4
x26904:	neg al	; 2: 246 216
x26906:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1255 6
x26908:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x26911:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 45 105
x26916:	mov [bp + 19], bp	; 3: 137 110 19
x26919:	add bp, 17	; 3: 131 197 17
x26922:	jmp tolower	; 3: 233 241 187

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1256

scanLongInt$48:	; NotEqual 56 £temporary1256 120
x26925:	cmp bx, 120	; 3: 131 251 120
x26928:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x26930:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x26935:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 69 105
x26940:	mov [bp + 19], bp	; 3: 137 110 19
x26943:	add bp, 17	; 3: 131 197 17
x26946:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1258

scanLongInt$54:	; Assign input £temporary1258
x26949:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x26952:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x26954:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x26959:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x26961:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x26966:	mov al, [bp + 16]	; 3: 138 70 16
x26969:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x26972:	mov ax, [bp + 6]	; 3: 139 70 6
x26975:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x26978:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 112 105
x26983:	mov [bp + 19], bp	; 3: 137 110 19
x26986:	add bp, 17	; 3: 131 197 17
x26989:	jmp @2723$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1259

scanLongInt$65:	; Equal 82 £temporary1259 0
x26992:	cmp bx, 0	; 3: 131 251 0
x26995:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1260 base
x26997:	mov bx, [bp + 6]	; 3: 139 94 6
x27000:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x27007:	cmp bx, 0	; 3: 131 251 0
x27010:	jge scanLongInt$67	; 2: 125 5
x27012:	neg bx	; 2: 247 219
x27014:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1260
x27017:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27021:	xor edx, edx	; 3: 102 49 210
x27024:	imul ebx	; 3: 102 247 235
x27027:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x27031:	mov al, [bp + 16]	; 3: 138 70 16
x27034:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x27037:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 171 105
x27042:	mov [bp + 19], bp	; 3: 137 110 19
x27045:	add bp, 17	; 3: 131 197 17
x27048:	jmp @2787$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1262

scanLongInt$73:	; IntegralToIntegral £temporary1263 £temporary1262
x27051:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x27058:	cmp bx, 0	; 3: 131 251 0
x27061:	jge scanLongInt$74	; 2: 125 5
x27063:	neg bx	; 2: 247 219
x27065:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1263
x27068:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x27072:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 206 105
x27077:	mov [bp + 19], bp	; 3: 137 110 19
x27080:	add bp, 17	; 3: 131 197 17
x27083:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1265

scanLongInt$79:	; Assign input £temporary1265
x27086:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x27089:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x27094:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x27097:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x27101:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1267 longValue
x27103:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27107:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1267
x27110:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x27114:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x27118:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x27120:	inc word [g_inCount]	; 4: 255 6 107 101

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x27124:	mov al, [bp + 16]	; 3: 138 70 16
x27127:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x27130:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 8 106
x27135:	mov [bp + 19], bp	; 3: 137 110 19
x27138:	add bp, 17	; 3: 131 197 17
x27141:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x27144:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x27148:	mov ax, [bp]	; 3: 139 70 0
x27151:	mov di, [bp + 4]	; 3: 139 126 4
x27154:	mov bp, [bp + 2]	; 3: 139 110 2
x27157:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@2723$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2723$isDigitInBase$1:	; IntegralToIntegral £temporary1191 c
x27159:	mov al, [bp + 6]	; 3: 138 70 6
x27162:	and ax, 255	; 3: 37 255 0
x27165:	cmp al, 0	; 2: 60 0
x27167:	jge @2723$isDigitInBase$2	; 2: 125 4
x27169:	neg al	; 2: 246 216
x27171:	neg ax	; 2: 247 216

@2723$isDigitInBase$2:	; Parameter 9 £temporary1191 6
x27173:	mov [bp + 15], ax	; 3: 137 70 15

@2723$isDigitInBase$3:	; Call 9 isdigit 0
x27176:	mov word [bp + 9], @2723$isDigitInBase$4	; 5: 199 70 9 54 106
x27181:	mov [bp + 11], bp	; 3: 137 110 11
x27184:	add bp, 9	; 3: 131 197 9
x27187:	jmp isdigit	; 3: 233 54 193

@2723$isDigitInBase$4:	; PostCall 9

@2723$isDigitInBase$5:	; GetReturnValue £temporary1192

@2723$isDigitInBase$6:	; Equal 17 £temporary1192 0
x27190:	cmp bx, 0	; 3: 131 251 0
x27193:	je @2723$isDigitInBase$17	; 2: 116 52

@2723$isDigitInBase$7:	; BinarySubtract £temporary1193 c 48
x27195:	mov al, [bp + 6]	; 3: 138 70 6
x27198:	sub al, 48	; 2: 44 48

@2723$isDigitInBase$8:	; IntegralToIntegral £temporary1194 £temporary1193
x27200:	and ax, 255	; 3: 37 255 0
x27203:	cmp al, 0	; 2: 60 0
x27205:	jge @2723$isDigitInBase$9	; 2: 125 4
x27207:	neg al	; 2: 246 216
x27209:	neg ax	; 2: 247 216

@2723$isDigitInBase$9:	; Assign value £temporary1194
x27211:	mov [bp + 9], ax	; 3: 137 70 9

@2723$isDigitInBase$10:	; SignedLessThan 14 value 0
x27214:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27218:	jl @2723$isDigitInBase$14	; 2: 124 13

@2723$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x27220:	mov ax, [bp + 7]	; 3: 139 70 7
x27223:	cmp [bp + 9], ax	; 3: 57 70 9
x27226:	jge @2723$isDigitInBase$14	; 2: 125 5

@2723$isDigitInBase$12:	; Assign £temporary1198 1
x27228:	mov bx, 1	; 3: 187 1 0

@2723$isDigitInBase$13:	; Goto 15
x27231:	jmp @2723$isDigitInBase$15	; 2: 235 3

@2723$isDigitInBase$14:	; Assign £temporary1198 0
x27233:	mov bx, 0	; 3: 187 0 0

@2723$isDigitInBase$15:	; SetReturnValue £temporary1198

@2723$isDigitInBase$16:	; Return £temporary1198
x27236:	mov ax, [bp]	; 3: 139 70 0
x27239:	mov di, [bp + 4]	; 3: 139 126 4
x27242:	mov bp, [bp + 2]	; 3: 139 110 2
x27245:	jmp ax	; 2: 255 224

@2723$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2723$isDigitInBase$18:	; IntegralToIntegral £temporary1199 c
x27247:	mov al, [bp + 6]	; 3: 138 70 6
x27250:	and ax, 255	; 3: 37 255 0
x27253:	cmp al, 0	; 2: 60 0
x27255:	jge @2723$isDigitInBase$19	; 2: 125 4
x27257:	neg al	; 2: 246 216
x27259:	neg ax	; 2: 247 216

@2723$isDigitInBase$19:	; Parameter 9 £temporary1199 6
x27261:	mov [bp + 15], ax	; 3: 137 70 15

@2723$isDigitInBase$20:	; Call 9 islower 0
x27264:	mov word [bp + 9], @2723$isDigitInBase$21	; 5: 199 70 9 142 106
x27269:	mov [bp + 11], bp	; 3: 137 110 11
x27272:	add bp, 9	; 3: 131 197 9
x27275:	jmp islower	; 3: 233 165 0

@2723$isDigitInBase$21:	; PostCall 9

@2723$isDigitInBase$22:	; GetReturnValue £temporary1200

@2723$isDigitInBase$23:	; Equal 34 £temporary1200 0
x27278:	cmp bx, 0	; 3: 131 251 0
x27281:	je @2723$isDigitInBase$34	; 2: 116 55

@2723$isDigitInBase$24:	; BinarySubtract £temporary1201 c 97
x27283:	mov al, [bp + 6]	; 3: 138 70 6
x27286:	sub al, 97	; 2: 44 97

@2723$isDigitInBase$25:	; IntegralToIntegral £temporary1202 £temporary1201
x27288:	and ax, 255	; 3: 37 255 0
x27291:	cmp al, 0	; 2: 60 0
x27293:	jge @2723$isDigitInBase$26	; 2: 125 4
x27295:	neg al	; 2: 246 216
x27297:	neg ax	; 2: 247 216

@2723$isDigitInBase$26:	; BinaryAdd value £temporary1202 10
x27299:	add ax, 10	; 3: 131 192 10
x27302:	mov [bp + 9], ax	; 3: 137 70 9

@2723$isDigitInBase$27:	; SignedLessThan 31 value 0
x27305:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27309:	jl @2723$isDigitInBase$31	; 2: 124 13

@2723$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x27311:	mov ax, [bp + 7]	; 3: 139 70 7
x27314:	cmp [bp + 9], ax	; 3: 57 70 9
x27317:	jge @2723$isDigitInBase$31	; 2: 125 5

@2723$isDigitInBase$29:	; Assign £temporary1207 1
x27319:	mov bx, 1	; 3: 187 1 0

@2723$isDigitInBase$30:	; Goto 32
x27322:	jmp @2723$isDigitInBase$32	; 2: 235 3

@2723$isDigitInBase$31:	; Assign £temporary1207 0
x27324:	mov bx, 0	; 3: 187 0 0

@2723$isDigitInBase$32:	; SetReturnValue £temporary1207

@2723$isDigitInBase$33:	; Return £temporary1207
x27327:	mov ax, [bp]	; 3: 139 70 0
x27330:	mov di, [bp + 4]	; 3: 139 126 4
x27333:	mov bp, [bp + 2]	; 3: 139 110 2
x27336:	jmp ax	; 2: 255 224

@2723$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2723$isDigitInBase$35:	; IntegralToIntegral £temporary1208 c
x27338:	mov al, [bp + 6]	; 3: 138 70 6
x27341:	and ax, 255	; 3: 37 255 0
x27344:	cmp al, 0	; 2: 60 0
x27346:	jge @2723$isDigitInBase$36	; 2: 125 4
x27348:	neg al	; 2: 246 216
x27350:	neg ax	; 2: 247 216

@2723$isDigitInBase$36:	; Parameter 9 £temporary1208 6
x27352:	mov [bp + 15], ax	; 3: 137 70 15

@2723$isDigitInBase$37:	; Call 9 isupper 0
x27355:	mov word [bp + 9], @2723$isDigitInBase$38	; 5: 199 70 9 233 106
x27360:	mov [bp + 11], bp	; 3: 137 110 11
x27363:	add bp, 9	; 3: 131 197 9
x27366:	jmp isupper	; 3: 233 35 179

@2723$isDigitInBase$38:	; PostCall 9

@2723$isDigitInBase$39:	; GetReturnValue £temporary1209

@2723$isDigitInBase$40:	; Equal 51 £temporary1209 0
x27369:	cmp bx, 0	; 3: 131 251 0
x27372:	je @2723$isDigitInBase$51	; 2: 116 55

@2723$isDigitInBase$41:	; BinarySubtract £temporary1210 c 65
x27374:	mov al, [bp + 6]	; 3: 138 70 6
x27377:	sub al, 65	; 2: 44 65

@2723$isDigitInBase$42:	; IntegralToIntegral £temporary1211 £temporary1210
x27379:	and ax, 255	; 3: 37 255 0
x27382:	cmp al, 0	; 2: 60 0
x27384:	jge @2723$isDigitInBase$43	; 2: 125 4
x27386:	neg al	; 2: 246 216
x27388:	neg ax	; 2: 247 216

@2723$isDigitInBase$43:	; BinaryAdd value £temporary1211 10
x27390:	add ax, 10	; 3: 131 192 10
x27393:	mov [bp + 9], ax	; 3: 137 70 9

@2723$isDigitInBase$44:	; SignedLessThan 48 value 0
x27396:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27400:	jl @2723$isDigitInBase$48	; 2: 124 13

@2723$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x27402:	mov ax, [bp + 7]	; 3: 139 70 7
x27405:	cmp [bp + 9], ax	; 3: 57 70 9
x27408:	jge @2723$isDigitInBase$48	; 2: 125 5

@2723$isDigitInBase$46:	; Assign £temporary1216 1
x27410:	mov bx, 1	; 3: 187 1 0

@2723$isDigitInBase$47:	; Goto 49
x27413:	jmp @2723$isDigitInBase$49	; 2: 235 3

@2723$isDigitInBase$48:	; Assign £temporary1216 0
x27415:	mov bx, 0	; 3: 187 0 0

@2723$isDigitInBase$49:	; SetReturnValue £temporary1216

@2723$isDigitInBase$50:	; Return £temporary1216
x27418:	mov ax, [bp]	; 3: 139 70 0
x27421:	mov di, [bp + 4]	; 3: 139 126 4
x27424:	mov bp, [bp + 2]	; 3: 139 110 2
x27427:	jmp ax	; 2: 255 224

@2723$isDigitInBase$51:	; SetReturnValue 0
x27429:	mov bx, 0	; 3: 187 0 0

@2723$isDigitInBase$52:	; Return 0
x27432:	mov ax, [bp]	; 3: 139 70 0
x27435:	mov di, [bp + 4]	; 3: 139 126 4
x27438:	mov bp, [bp + 2]	; 3: 139 110 2
x27441:	jmp ax	; 2: 255 224

@2723$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x27443:	mov word [bp + 8], islower$2	; 5: 199 70 8 65 107
x27448:	mov [bp + 10], bp	; 3: 137 110 10
x27451:	add bp, 8	; 3: 131 197 8
x27454:	jmp localeconv	; 3: 233 54 179

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary158

islower$4:	; Assign localeConvPtr £temporary158
x27457:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x27460:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x27464:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary160 -> localeConvPtr localeConvPtr 12
x27466:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary160 -> localeConvPtr 6
x27469:	mov ax, [si + 12]	; 3: 139 68 12
x27472:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x27475:	mov ax, [bp + 6]	; 3: 139 70 6
x27478:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x27481:	mov word [bp + 10], islower$11	; 5: 199 70 10 103 107
x27486:	mov [bp + 12], bp	; 3: 137 110 12
x27489:	add bp, 10	; 3: 131 197 10
x27492:	jmp strchr	; 3: 233 86 182

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary161

islower$13:	; Equal 16 £temporary161 0
x27495:	cmp bx, 0	; 3: 131 251 0
x27498:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary163 1
x27500:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x27503:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary163 0
x27505:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary163

islower$18:	; Return £temporary163
x27508:	mov ax, [bp]	; 3: 139 70 0
x27511:	mov di, [bp + 4]	; 3: 139 126 4
x27514:	mov bp, [bp + 2]	; 3: 139 110 2
x27517:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x27519:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x27523:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x27525:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x27529:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary167 1
x27531:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x27534:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary167 0
x27536:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary167

islower$25:	; Return £temporary167
x27539:	mov ax, [bp]	; 3: 139 70 0
x27542:	mov di, [bp + 4]	; 3: 139 126 4
x27545:	mov bp, [bp + 2]	; 3: 139 110 2
x27548:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@2787$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2787$digitToValue$1:	; IntegralToIntegral £temporary1223 c
x27550:	mov al, [bp + 6]	; 3: 138 70 6
x27553:	and ax, 255	; 3: 37 255 0
x27556:	cmp al, 0	; 2: 60 0
x27558:	jge @2787$digitToValue$2	; 2: 125 4
x27560:	neg al	; 2: 246 216
x27562:	neg ax	; 2: 247 216

@2787$digitToValue$2:	; Parameter 7 £temporary1223 6
x27564:	mov [bp + 13], ax	; 3: 137 70 13

@2787$digitToValue$3:	; Call 7 isdigit 0
x27567:	mov word [bp + 7], @2787$digitToValue$4	; 5: 199 70 7 189 107
x27572:	mov [bp + 9], bp	; 3: 137 110 9
x27575:	add bp, 7	; 3: 131 197 7
x27578:	jmp isdigit	; 3: 233 175 191

@2787$digitToValue$4:	; PostCall 7

@2787$digitToValue$5:	; GetReturnValue £temporary1224

@2787$digitToValue$6:	; Equal 11 £temporary1224 0
x27581:	cmp bx, 0	; 3: 131 251 0
x27584:	je @2787$digitToValue$11	; 2: 116 30

@2787$digitToValue$7:	; BinarySubtract £temporary1225 c 48
x27586:	mov bl, [bp + 6]	; 3: 138 94 6
x27589:	sub bl, 48	; 3: 128 235 48

@2787$digitToValue$8:	; IntegralToIntegral £temporary1226 £temporary1225
x27592:	and bx, 255	; 4: 129 227 255 0
x27596:	cmp bl, 0	; 3: 128 251 0
x27599:	jge @2787$digitToValue$9	; 2: 125 4
x27601:	neg bl	; 2: 246 219
x27603:	neg bx	; 2: 247 219

@2787$digitToValue$9:	; SetReturnValue £temporary1226

@2787$digitToValue$10:	; Return £temporary1226
x27605:	mov ax, [bp]	; 3: 139 70 0
x27608:	mov di, [bp + 4]	; 3: 139 126 4
x27611:	mov bp, [bp + 2]	; 3: 139 110 2
x27614:	jmp ax	; 2: 255 224

@2787$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2787$digitToValue$12:	; IntegralToIntegral £temporary1227 c
x27616:	mov al, [bp + 6]	; 3: 138 70 6
x27619:	and ax, 255	; 3: 37 255 0
x27622:	cmp al, 0	; 2: 60 0
x27624:	jge @2787$digitToValue$13	; 2: 125 4
x27626:	neg al	; 2: 246 216
x27628:	neg ax	; 2: 247 216

@2787$digitToValue$13:	; Parameter 7 £temporary1227 6
x27630:	mov [bp + 13], ax	; 3: 137 70 13

@2787$digitToValue$14:	; Call 7 islower 0
x27633:	mov word [bp + 7], @2787$digitToValue$15	; 5: 199 70 7 255 107
x27638:	mov [bp + 9], bp	; 3: 137 110 9
x27641:	add bp, 7	; 3: 131 197 7
x27644:	jmp islower	; 3: 233 52 255

@2787$digitToValue$15:	; PostCall 7

@2787$digitToValue$16:	; GetReturnValue £temporary1228

@2787$digitToValue$17:	; Equal 23 £temporary1228 0
x27647:	cmp bx, 0	; 3: 131 251 0
x27650:	je @2787$digitToValue$23	; 2: 116 33

@2787$digitToValue$18:	; BinarySubtract £temporary1229 c 97
x27652:	mov bl, [bp + 6]	; 3: 138 94 6
x27655:	sub bl, 97	; 3: 128 235 97

@2787$digitToValue$19:	; IntegralToIntegral £temporary1230 £temporary1229
x27658:	and bx, 255	; 4: 129 227 255 0
x27662:	cmp bl, 0	; 3: 128 251 0
x27665:	jge @2787$digitToValue$20	; 2: 125 4
x27667:	neg bl	; 2: 246 219
x27669:	neg bx	; 2: 247 219

@2787$digitToValue$20:	; BinaryAdd £temporary1231 £temporary1230 10
x27671:	add bx, 10	; 3: 131 195 10

@2787$digitToValue$21:	; SetReturnValue £temporary1231

@2787$digitToValue$22:	; Return £temporary1231
x27674:	mov ax, [bp]	; 3: 139 70 0
x27677:	mov di, [bp + 4]	; 3: 139 126 4
x27680:	mov bp, [bp + 2]	; 3: 139 110 2
x27683:	jmp ax	; 2: 255 224

@2787$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2787$digitToValue$24:	; IntegralToIntegral £temporary1232 c
x27685:	mov al, [bp + 6]	; 3: 138 70 6
x27688:	and ax, 255	; 3: 37 255 0
x27691:	cmp al, 0	; 2: 60 0
x27693:	jge @2787$digitToValue$25	; 2: 125 4
x27695:	neg al	; 2: 246 216
x27697:	neg ax	; 2: 247 216

@2787$digitToValue$25:	; Parameter 7 £temporary1232 6
x27699:	mov [bp + 13], ax	; 3: 137 70 13

@2787$digitToValue$26:	; Call 7 isupper 0
x27702:	mov word [bp + 7], @2787$digitToValue$27	; 5: 199 70 7 68 108
x27707:	mov [bp + 9], bp	; 3: 137 110 9
x27710:	add bp, 7	; 3: 131 197 7
x27713:	jmp isupper	; 3: 233 200 177

@2787$digitToValue$27:	; PostCall 7

@2787$digitToValue$28:	; GetReturnValue £temporary1233

@2787$digitToValue$29:	; Equal 35 £temporary1233 0
x27716:	cmp bx, 0	; 3: 131 251 0
x27719:	je @2787$digitToValue$35	; 2: 116 33

@2787$digitToValue$30:	; BinarySubtract £temporary1234 c 65
x27721:	mov bl, [bp + 6]	; 3: 138 94 6
x27724:	sub bl, 65	; 3: 128 235 65

@2787$digitToValue$31:	; IntegralToIntegral £temporary1235 £temporary1234
x27727:	and bx, 255	; 4: 129 227 255 0
x27731:	cmp bl, 0	; 3: 128 251 0
x27734:	jge @2787$digitToValue$32	; 2: 125 4
x27736:	neg bl	; 2: 246 219
x27738:	neg bx	; 2: 247 219

@2787$digitToValue$32:	; BinaryAdd £temporary1236 £temporary1235 10
x27740:	add bx, 10	; 3: 131 195 10

@2787$digitToValue$33:	; SetReturnValue £temporary1236

@2787$digitToValue$34:	; Return £temporary1236
x27743:	mov ax, [bp]	; 3: 139 70 0
x27746:	mov di, [bp + 4]	; 3: 139 126 4
x27749:	mov bp, [bp + 2]	; 3: 139 110 2
x27752:	jmp ax	; 2: 255 224

@2787$digitToValue$35:	; SetReturnValue 0
x27754:	mov bx, 0	; 3: 187 0 0

@2787$digitToValue$36:	; Return 0
x27757:	mov ax, [bp]	; 3: 139 70 0
x27760:	mov di, [bp + 4]	; 3: 139 126 4
x27763:	mov bp, [bp + 2]	; 3: 139 110 2
x27766:	jmp ax	; 2: 255 224

@2787$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x27768:	mov ax, [g_inStatus]	; 3: 161 72 96
x27771:	cmp ax, 0	; 3: 131 248 0
x27774:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x27776:	cmp ax, 1	; 3: 131 248 1
x27779:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x27781:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x27783:	dec word [g_inChars]	; 4: 255 14 109 101

unscanChar$5:	; Goto 7
x27787:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x27789:	dec word [g_inChars]	; 4: 255 14 109 101

unscanChar$7:	; Return 0
x27793:	mov ax, [bp]	; 3: 139 70 0
x27796:	mov di, [bp + 4]	; 3: 139 126 4
x27799:	mov bp, [bp + 2]	; 3: 139 110 2
x27802:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x27804:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x27812:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 178 108
x27817:	mov [bp + 18], bp	; 3: 137 110 18
x27820:	add bp, 16	; 3: 131 197 16
x27823:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1278

scanUnsignedLongInt$5:	; Assign input £temporary1278
x27826:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x27829:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1279 input
x27834:	mov al, [bp + 16]	; 3: 138 70 16
x27837:	and ax, 255	; 3: 37 255 0
x27840:	cmp al, 0	; 2: 60 0
x27842:	jge scanUnsignedLongInt$9	; 2: 125 4
x27844:	neg al	; 2: 246 216
x27846:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1279 6
x27848:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x27851:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 217 108
x27856:	mov [bp + 21], bp	; 3: 137 110 21
x27859:	add bp, 19	; 3: 131 197 19
x27862:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1280

scanUnsignedLongInt$13:	; Equal 20 £temporary1280 0
x27865:	cmp bx, 0	; 3: 131 251 0
x27868:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x27870:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 236 108
x27875:	mov [bp + 21], bp	; 3: 137 110 21
x27878:	add bp, 19	; 3: 131 197 19
x27881:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1281

scanUnsignedLongInt$18:	; Assign input £temporary1281
x27884:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x27887:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x27889:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x27893:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x27895:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 5 109
x27900:	mov [bp + 21], bp	; 3: 137 110 21
x27903:	add bp, 19	; 3: 131 197 19
x27906:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1284

scanUnsignedLongInt$25:	; Assign input £temporary1284
x27909:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x27912:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27916:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x27918:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x27922:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x27924:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 34 109
x27929:	mov [bp + 21], bp	; 3: 137 110 21
x27932:	add bp, 19	; 3: 131 197 19
x27935:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1287

scanUnsignedLongInt$32:	; Assign input £temporary1287
x27938:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1288 input
x27941:	mov al, [bp + 16]	; 3: 138 70 16
x27944:	and ax, 255	; 3: 37 255 0
x27947:	cmp al, 0	; 2: 60 0
x27949:	jge scanUnsignedLongInt$35	; 2: 125 4
x27951:	neg al	; 2: 246 216
x27953:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1288 6
x27955:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x27958:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 68 109
x27963:	mov [bp + 21], bp	; 3: 137 110 21
x27966:	add bp, 19	; 3: 131 197 19
x27969:	jmp tolower	; 3: 233 218 183

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1289

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1289 120
x27972:	cmp bx, 120	; 3: 131 251 120
x27975:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x27977:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x27982:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 92 109
x27987:	mov [bp + 21], bp	; 3: 137 110 21
x27990:	add bp, 19	; 3: 131 197 19
x27993:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1291

scanUnsignedLongInt$45:	; Assign input £temporary1291
x27996:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x27999:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x28001:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x28006:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x28008:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x28013:	mov al, [bp + 16]	; 3: 138 70 16
x28016:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x28019:	mov ax, [bp + 6]	; 3: 139 70 6
x28022:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x28025:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 135 109
x28030:	mov [bp + 21], bp	; 3: 137 110 21
x28033:	add bp, 19	; 3: 131 197 19
x28036:	jmp @2723$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1292

scanUnsignedLongInt$56:	; Equal 73 £temporary1292 0
x28039:	cmp bx, 0	; 3: 131 251 0
x28042:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1293 base
x28044:	mov bx, [bp + 6]	; 3: 139 94 6
x28047:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1293
x28054:	mov eax, [bp + 8]	; 4: 102 139 70 8
x28058:	xor edx, edx	; 3: 102 49 210
x28061:	mul ebx	; 3: 102 247 227
x28064:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x28068:	mov al, [bp + 16]	; 3: 138 70 16
x28071:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x28074:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 184 109
x28079:	mov [bp + 21], bp	; 3: 137 110 21
x28082:	add bp, 19	; 3: 131 197 19
x28085:	jmp @2787$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1295

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1296 £temporary1295
x28088:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1296
x28095:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x28099:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x28104:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 214 109
x28109:	mov [bp + 21], bp	; 3: 137 110 21
x28112:	add bp, 19	; 3: 131 197 19
x28115:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1298

scanUnsignedLongInt$71:	; Assign input £temporary1298
x28118:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x28121:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x28123:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x28127:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x28129:	inc word [g_inCount]	; 4: 255 6 107 101

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x28133:	mov al, [bp + 16]	; 3: 138 70 16
x28136:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x28139:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 249 109
x28144:	mov [bp + 21], bp	; 3: 137 110 21
x28147:	add bp, 19	; 3: 131 197 19
x28150:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x28153:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x28157:	mov ax, [bp]	; 3: 139 70 0
x28160:	mov di, [bp + 4]	; 3: 139 126 4
x28163:	mov bp, [bp + 2]	; 3: 139 110 2
x28166:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x28168:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x28173:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x28178:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x28180:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x28183:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x28185:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x28188:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 42 110
x28193:	mov [bp + 28], bp	; 3: 137 110 28
x28196:	add bp, 26	; 3: 131 197 26
x28199:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1309

scanLongDouble$10:	; Assign input £temporary1309
x28202:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1310 input
x28205:	mov al, [bp + 26]	; 3: 138 70 26
x28208:	and ax, 255	; 3: 37 255 0
x28211:	cmp al, 0	; 2: 60 0
x28213:	jge scanLongDouble$13	; 2: 125 4
x28215:	neg al	; 2: 246 216
x28217:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1310 6
x28219:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x28222:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 76 110
x28227:	mov [bp + 29], bp	; 3: 137 110 29
x28230:	add bp, 27	; 3: 131 197 27
x28233:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1311

scanLongDouble$17:	; Equal 24 £temporary1311 0
x28236:	cmp bx, 0	; 3: 131 251 0
x28239:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x28241:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 95 110
x28246:	mov [bp + 29], bp	; 3: 137 110 29
x28249:	add bp, 27	; 3: 131 197 27
x28252:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1312

scanLongDouble$22:	; Assign input £temporary1312
x28255:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x28258:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x28260:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x28264:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x28266:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 120 110
x28271:	mov [bp + 29], bp	; 3: 137 110 29
x28274:	add bp, 27	; 3: 131 197 27
x28277:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1315

scanLongDouble$29:	; Assign input £temporary1315
x28280:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x28283:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x28285:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x28289:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x28291:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x28296:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 150 110
x28301:	mov [bp + 29], bp	; 3: 137 110 29
x28304:	add bp, 27	; 3: 131 197 27
x28307:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1317

scanLongDouble$37:	; Assign input £temporary1317
x28310:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1318 input
x28313:	mov al, [bp + 26]	; 3: 138 70 26
x28316:	and ax, 255	; 3: 37 255 0
x28319:	cmp al, 0	; 2: 60 0
x28321:	jge scanLongDouble$40	; 2: 125 4
x28323:	neg al	; 2: 246 216
x28325:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1318 6
x28327:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x28330:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 184 110
x28335:	mov [bp + 29], bp	; 3: 137 110 29
x28338:	add bp, 27	; 3: 131 197 27
x28341:	jmp isdigit	; 3: 233 180 188

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1319

scanLongDouble$44:	; Equal 60 £temporary1319 0
x28344:	cmp bx, 0	; 3: 131 251 0
x28347:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x28349:	fld qword [@2986$float8$10.0#]	; 4: 221 6 43 112

scanLongDouble$46:	; PushFloat value
x28353:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1320 10.0 value
x28356:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1321 input 48
x28358:	mov al, [bp + 26]	; 3: 138 70 26
x28361:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1323 £temporary1321
x28363:	and ax, 255	; 3: 37 255 0
x28366:	cmp al, 0	; 2: 60 0
x28368:	jge scanLongDouble$50	; 2: 125 4
x28370:	neg al	; 2: 246 216
x28372:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1322 £temporary1323
x28374:	mov [container2bytes#], ax	; 3: 163 79 27
x28377:	fild word [container2bytes#]	; 4: 223 6 79 27

scanLongDouble$51:	; BinaryAdd £temporary1324 £temporary1320 £temporary1322
x28381:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x28383:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x28386:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 240 110
x28391:	mov [bp + 29], bp	; 3: 137 110 29
x28394:	add bp, 27	; 3: 131 197 27
x28397:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1325

scanLongDouble$57:	; Assign input £temporary1325
x28400:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x28403:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x28408:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x28410:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x28414:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x28416:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 14 111
x28421:	mov [bp + 29], bp	; 3: 137 110 29
x28424:	add bp, 27	; 3: 131 197 27
x28427:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1328

scanLongDouble$65:	; Assign input £temporary1328
x28430:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1329 input
x28433:	mov al, [bp + 26]	; 3: 138 70 26
x28436:	and ax, 255	; 3: 37 255 0
x28439:	cmp al, 0	; 2: 60 0
x28441:	jge scanLongDouble$68	; 2: 125 4
x28443:	neg al	; 2: 246 216
x28445:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1329 6
x28447:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x28450:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 48 111
x28455:	mov [bp + 29], bp	; 3: 137 110 29
x28458:	add bp, 27	; 3: 131 197 27
x28461:	jmp isdigit	; 3: 233 60 188

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1330

scanLongDouble$72:	; Equal 92 £temporary1330 0
x28464:	cmp bx, 0	; 3: 131 251 0
x28467:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x28469:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x28472:	fld qword [@3006$float8$10.0#]	; 4: 221 6 51 112

scanLongDouble$75:	; SignedDivide £temporary1331 factor 10.0
x28476:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x28478:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x28481:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x28484:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1332 input 48
x28487:	mov al, [bp + 26]	; 3: 138 70 26
x28490:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1334 £temporary1332
x28492:	and ax, 255	; 3: 37 255 0
x28495:	cmp al, 0	; 2: 60 0
x28497:	jge scanLongDouble$81	; 2: 125 4
x28499:	neg al	; 2: 246 216
x28501:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1333 £temporary1334
x28503:	mov [container2bytes#], ax	; 3: 163 79 27
x28506:	fild word [container2bytes#]	; 4: 223 6 79 27

scanLongDouble$82:	; SignedMultiply £temporary1335 factor £temporary1333
x28510:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1336 value £temporary1335
x28512:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x28514:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x28517:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 115 111
x28522:	mov [bp + 29], bp	; 3: 137 110 29
x28525:	add bp, 27	; 3: 131 197 27
x28528:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1337

scanLongDouble$89:	; Assign input £temporary1337
x28531:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x28534:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x28539:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1339 input
x28541:	mov al, [bp + 26]	; 3: 138 70 26
x28544:	and ax, 255	; 3: 37 255 0
x28547:	cmp al, 0	; 2: 60 0
x28549:	jge scanLongDouble$94	; 2: 125 4
x28551:	neg al	; 2: 246 216
x28553:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1339 6
x28555:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x28558:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 156 111
x28563:	mov [bp + 29], bp	; 3: 137 110 29
x28566:	add bp, 27	; 3: 131 197 27
x28569:	jmp tolower	; 3: 233 130 181

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1340

scanLongDouble$98:	; NotEqual 118 £temporary1340 101
x28572:	cmp bx, 101	; 3: 131 251 101
x28575:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x28577:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x28582:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 180 111
x28587:	mov [bp + 29], bp	; 3: 137 110 29
x28590:	add bp, 27	; 3: 131 197 27
x28593:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1342

scanLongDouble$104:	; IntegralToFloating £temporary1343 £temporary1342
x28596:	mov [container4bytes#], ebx	; 5: 102 137 30 80 36
x28601:	fild dword [container4bytes#]	; 4: 219 6 80 36

scanLongDouble$105:	; PopFloat exponent
x28605:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x28608:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x28611:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x28614:	fld qword [@3031$float8$10.0#]	; 4: 221 6 59 112

scanLongDouble$109:	; Parameter 35 10.0 6
x28618:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x28621:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x28624:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x28627:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 225 111
x28632:	mov [bp + 45], bp	; 3: 137 110 45
x28635:	add bp, 43	; 3: 131 197 43
x28638:	jmp pow	; 3: 233 186 184

scanLongDouble$113:	; PostCall 35
x28641:	fstp qword [bp + 43]	; 3: 221 94 43
x28644:	fld qword [bp + 35]	; 3: 221 70 35
x28647:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1344

scanLongDouble$115:	; SignedMultiply £temporary1345 value £temporary1344
x28650:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x28652:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x28655:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x28657:	mov al, [bp + 26]	; 3: 138 70 26
x28660:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x28663:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 5 112
x28668:	mov [bp + 29], bp	; 3: 137 110 29
x28671:	add bp, 27	; 3: 131 197 27
x28674:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x28677:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28681:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x28683:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1347 value
x28686:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x28688:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x28691:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x28695:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x28697:	inc word [g_inCount]	; 4: 255 6 107 101

scanLongDouble$128:	; PushFloat value
x28701:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x28704:	mov ax, [bp]	; 3: 139 70 0
x28707:	mov di, [bp + 4]	; 3: 139 126 4
x28710:	mov bp, [bp + 2]	; 3: 139 110 2
x28713:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

@2986$float8$10.0#:
x28715:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3006$float8$10.0#:
x28723:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3031$float8$10.0#:
x28731:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

scanPattern:	; Assign index 0
x28739:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 16 scanChar 0
x28744:	mov word [bp + 16], scanPattern$3	; 5: 199 70 16 86 112
x28749:	mov [bp + 18], bp	; 3: 137 110 18
x28752:	add bp, 16	; 3: 131 197 16
x28755:	jmp scanChar	; 3: 233 25 245

scanPattern$3:	; PostCall 16

scanPattern$4:	; GetReturnValue £temporary1058

scanPattern$5:	; Assign input £temporary1058
x28758:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1059 input
x28761:	mov al, [bp + 16]	; 3: 138 70 16
x28764:	and ax, 255	; 3: 37 255 0
x28767:	cmp al, 0	; 2: 60 0
x28769:	jge scanPattern$8	; 2: 125 4
x28771:	neg al	; 2: 246 216
x28773:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 17 £temporary1059 6
x28775:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$9:	; Call 17 isspace 0
x28778:	mov word [bp + 17], scanPattern$10	; 5: 199 70 17 120 112
x28783:	mov [bp + 19], bp	; 3: 137 110 19
x28786:	add bp, 17	; 3: 131 197 17
x28789:	jmp isspace	; 3: 233 179 247

scanPattern$10:	; PostCall 17

scanPattern$11:	; GetReturnValue £temporary1060

scanPattern$12:	; Equal 19 £temporary1060 0
x28792:	cmp bx, 0	; 3: 131 251 0
x28795:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 17 scanChar 0
x28797:	mov word [bp + 17], scanPattern$15	; 5: 199 70 17 139 112
x28802:	mov [bp + 19], bp	; 3: 137 110 19
x28805:	add bp, 17	; 3: 131 197 17
x28808:	jmp scanChar	; 3: 233 228 244

scanPattern$15:	; PostCall 17

scanPattern$16:	; GetReturnValue £temporary1061

scanPattern$17:	; Assign input £temporary1061
x28811:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$18:	; Goto 6
x28814:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 55 string 0
x28816:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28820:	je scanPattern$55	; 4: 15 132 156 0

scanPattern$20:	; NotEqual 30 not 0
x28824:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28828:	jne scanPattern$30	; 2: 117 48

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 17 pattern 6
x28830:	mov ax, [bp + 8]	; 3: 139 70 8
x28833:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$23:	; Parameter 17 size 8
x28836:	mov ax, [bp + 10]	; 3: 139 70 10
x28839:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$24:	; IntegralToIntegral £temporary1066 input
x28842:	mov al, [bp + 16]	; 3: 138 70 16
x28845:	and ax, 255	; 3: 37 255 0
x28848:	cmp al, 0	; 2: 60 0
x28850:	jge scanPattern$25	; 2: 125 4
x28852:	neg al	; 2: 246 216
x28854:	neg ax	; 2: 247 216

scanPattern$25:	; Parameter 17 £temporary1066 10
x28856:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$26:	; Call 17 strnchr 0
x28859:	mov word [bp + 17], scanPattern$27	; 5: 199 70 17 201 112
x28864:	mov [bp + 19], bp	; 3: 137 110 19
x28867:	add bp, 17	; 3: 131 197 17
x28870:	jmp @2481$strnchr	; 3: 233 245 0

scanPattern$27:	; PostCall 17

scanPattern$28:	; GetReturnValue £temporary1067

scanPattern$29:	; NotEqual 40 £temporary1067 0
x28873:	cmp bx, 0	; 3: 131 251 0
x28876:	jne scanPattern$40	; 2: 117 54

scanPattern$30:	; Equal 51 not 0
x28878:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28882:	je scanPattern$51	; 2: 116 84

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$32:	; Parameter 17 pattern 6
x28884:	mov ax, [bp + 8]	; 3: 139 70 8
x28887:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$33:	; Parameter 17 size 8
x28890:	mov ax, [bp + 10]	; 3: 139 70 10
x28893:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$34:	; IntegralToIntegral £temporary1070 input
x28896:	mov al, [bp + 16]	; 3: 138 70 16
x28899:	and ax, 255	; 3: 37 255 0
x28902:	cmp al, 0	; 2: 60 0
x28904:	jge scanPattern$35	; 2: 125 4
x28906:	neg al	; 2: 246 216
x28908:	neg ax	; 2: 247 216

scanPattern$35:	; Parameter 17 £temporary1070 10
x28910:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$36:	; Call 17 strnchr 0
x28913:	mov word [bp + 17], scanPattern$37	; 5: 199 70 17 255 112
x28918:	mov [bp + 19], bp	; 3: 137 110 19
x28921:	add bp, 17	; 3: 131 197 17
x28924:	jmp @2481$strnchr	; 3: 233 191 0

scanPattern$37:	; PostCall 17

scanPattern$38:	; GetReturnValue £temporary1071

scanPattern$39:	; NotEqual 51 £temporary1071 0
x28927:	cmp bx, 0	; 3: 131 251 0
x28930:	jne scanPattern$51	; 2: 117 36

scanPattern$40:	; Assign £temporary1077 index
x28932:	mov ax, [bp + 14]	; 3: 139 70 14

scanPattern$41:	; Increment index
x28935:	inc word [bp + 14]	; 3: 255 70 14

scanPattern$42:	; BinaryAdd £temporary1079 string £temporary1077
x28938:	mov si, [bp + 6]	; 3: 139 118 6
x28941:	add si, ax	; 2: 1 198

scanPattern$43:	; Deref £temporary1078 -> £temporary1079 £temporary1079 0

scanPattern$44:	; Assign £temporary1078 -> £temporary1079 input
x28943:	mov al, [bp + 16]	; 3: 138 70 16
x28946:	mov [si], al	; 2: 136 4

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$46:	; Call 17 scanChar 0
x28948:	mov word [bp + 17], scanPattern$47	; 5: 199 70 17 34 113
x28953:	mov [bp + 19], bp	; 3: 137 110 19
x28956:	add bp, 17	; 3: 131 197 17
x28959:	jmp scanChar	; 3: 233 77 244

scanPattern$47:	; PostCall 17

scanPattern$48:	; GetReturnValue £temporary1080

scanPattern$49:	; Assign input £temporary1080
x28962:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$50:	; Goto 20
x28965:	jmp scanPattern$20	; 3: 233 112 255

scanPattern$51:	; BinaryAdd £temporary1082 string index
x28968:	mov si, [bp + 6]	; 3: 139 118 6
x28971:	add si, [bp + 14]	; 3: 3 118 14

scanPattern$52:	; Deref £temporary1081 -> £temporary1082 £temporary1082 0

scanPattern$53:	; Assign £temporary1081 -> £temporary1082 0
x28974:	mov byte [si], 0	; 3: 198 4 0

scanPattern$54:	; Goto 81
x28977:	jmp scanPattern$81	; 3: 233 127 0

scanPattern$55:	; NotEqual 65 not 0
x28980:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28984:	jne scanPattern$65	; 2: 117 48

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$57:	; Parameter 17 pattern 6
x28986:	mov ax, [bp + 8]	; 3: 139 70 8
x28989:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Parameter 17 size 8
x28992:	mov ax, [bp + 10]	; 3: 139 70 10
x28995:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$59:	; IntegralToIntegral £temporary1085 input
x28998:	mov al, [bp + 16]	; 3: 138 70 16
x29001:	and ax, 255	; 3: 37 255 0
x29004:	cmp al, 0	; 2: 60 0
x29006:	jge scanPattern$60	; 2: 125 4
x29008:	neg al	; 2: 246 216
x29010:	neg ax	; 2: 247 216

scanPattern$60:	; Parameter 17 £temporary1085 10
x29012:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$61:	; Call 17 strnchr 0
x29015:	mov word [bp + 17], scanPattern$62	; 5: 199 70 17 101 113
x29020:	mov [bp + 19], bp	; 3: 137 110 19
x29023:	add bp, 17	; 3: 131 197 17
x29026:	nop	; 1: 144
x29027:	jmp @2481$strnchr	; 2: 235 89

scanPattern$62:	; PostCall 17

scanPattern$63:	; GetReturnValue £temporary1086

scanPattern$64:	; NotEqual 75 £temporary1086 0
x29029:	cmp bx, 0	; 3: 131 251 0
x29032:	jne scanPattern$75	; 2: 117 54

scanPattern$65:	; Equal 81 not 0
x29034:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x29038:	je scanPattern$81	; 2: 116 67

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$67:	; Parameter 17 pattern 6
x29040:	mov ax, [bp + 8]	; 3: 139 70 8
x29043:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$68:	; Parameter 17 size 8
x29046:	mov ax, [bp + 10]	; 3: 139 70 10
x29049:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$69:	; IntegralToIntegral £temporary1089 input
x29052:	mov al, [bp + 16]	; 3: 138 70 16
x29055:	and ax, 255	; 3: 37 255 0
x29058:	cmp al, 0	; 2: 60 0
x29060:	jge scanPattern$70	; 2: 125 4
x29062:	neg al	; 2: 246 216
x29064:	neg ax	; 2: 247 216

scanPattern$70:	; Parameter 17 £temporary1089 10
x29066:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$71:	; Call 17 strnchr 0
x29069:	mov word [bp + 17], scanPattern$72	; 5: 199 70 17 155 113
x29074:	mov [bp + 19], bp	; 3: 137 110 19
x29077:	add bp, 17	; 3: 131 197 17
x29080:	nop	; 1: 144
x29081:	jmp @2481$strnchr	; 2: 235 35

scanPattern$72:	; PostCall 17

scanPattern$73:	; GetReturnValue £temporary1090

scanPattern$74:	; NotEqual 81 £temporary1090 0
x29083:	cmp bx, 0	; 3: 131 251 0
x29086:	jne scanPattern$81	; 2: 117 19

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$76:	; Call 17 scanChar 0
x29088:	mov word [bp + 17], scanPattern$77	; 5: 199 70 17 174 113
x29093:	mov [bp + 19], bp	; 3: 137 110 19
x29096:	add bp, 17	; 3: 131 197 17
x29099:	jmp scanChar	; 3: 233 193 243

scanPattern$77:	; PostCall 17

scanPattern$78:	; GetReturnValue £temporary1096

scanPattern$79:	; Assign input £temporary1096
x29102:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$80:	; Goto 55
x29105:	jmp scanPattern$55	; 2: 235 129

scanPattern$81:	; Return 0
x29107:	mov ax, [bp]	; 3: 139 70 0
x29110:	mov di, [bp + 4]	; 3: 139 126 4
x29113:	mov bp, [bp + 2]	; 3: 139 110 2
x29116:	jmp ax	; 2: 255 224

scanPattern$82:	; FunctionEnd scanPattern

@2481$strnchr:	; IntegralToIntegral £temporary1049 i
x29118:	mov ax, [bp + 10]	; 3: 139 70 10
x29121:	cmp ax, 0	; 3: 131 248 0
x29124:	jge @2481$strnchr$1	; 2: 125 4
x29126:	neg ax	; 2: 247 216
x29128:	neg al	; 2: 246 216

@2481$strnchr$1:	; Assign c £temporary1049
x29130:	mov [bp + 14], al	; 3: 136 70 14

@2481$strnchr$2:	; Assign index 0
x29133:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@2481$strnchr$3:	; SignedGreaterThanEqual 14 index size
x29138:	mov ax, [bp + 8]	; 3: 139 70 8
x29141:	cmp [bp + 12], ax	; 3: 57 70 12
x29144:	jge @2481$strnchr$14	; 2: 125 35

@2481$strnchr$4:	; BinaryAdd £temporary1053 text index
x29146:	mov si, [bp + 6]	; 3: 139 118 6
x29149:	add si, [bp + 12]	; 3: 3 118 12

@2481$strnchr$5:	; Deref £temporary1052 -> £temporary1053 £temporary1053 0

@2481$strnchr$6:	; NotEqual 12 £temporary1052 -> £temporary1053 c
x29152:	mov al, [bp + 14]	; 3: 138 70 14
x29155:	cmp [si], al	; 2: 56 4
x29157:	jne @2481$strnchr$12	; 2: 117 17

@2481$strnchr$7:	; BinaryAdd £temporary1056 text index
x29159:	mov bx, [bp + 6]	; 3: 139 94 6
x29162:	add bx, [bp + 12]	; 3: 3 94 12

@2481$strnchr$8:	; Deref £temporary1055 -> £temporary1056 £temporary1056 0

@2481$strnchr$9:	; address £temporary1057 £temporary1055 -> £temporary1056

@2481$strnchr$10:	; SetReturnValue £temporary1057

@2481$strnchr$11:	; Return £temporary1057
x29165:	mov ax, [bp]	; 3: 139 70 0
x29168:	mov di, [bp + 4]	; 3: 139 126 4
x29171:	mov bp, [bp + 2]	; 3: 139 110 2
x29174:	jmp ax	; 2: 255 224

@2481$strnchr$12:	; Increment index
x29176:	inc word [bp + 12]	; 3: 255 70 12

@2481$strnchr$13:	; Goto 3
x29179:	jmp @2481$strnchr$3	; 2: 235 213

@2481$strnchr$14:	; SetReturnValue 0
x29181:	mov bx, 0	; 3: 187 0 0

@2481$strnchr$15:	; Return 0
x29184:	mov ax, [bp]	; 3: 139 70 0
x29187:	mov di, [bp + 4]	; 3: 139 126 4
x29190:	mov bp, [bp + 2]	; 3: 139 110 2
x29193:	jmp ax	; 2: 255 224

@2481$strnchr$16:	; FunctionEnd strnchr

fclose:	; Equal 20 stream 0
x29195:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29199:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x29201:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary798 -> stream stream 2
x29203:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary798 -> stream
x29206:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x29209:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x29211:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x29213:	mov word [errno], 11	; 6: 199 6 230 10 11 0

fclose$7:	; SetReturnValue -1
x29219:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x29222:	mov ax, [bp]	; 3: 139 70 0
x29225:	mov di, [bp + 4]	; 3: 139 126 4
x29228:	mov bp, [bp + 2]	; 3: 139 110 2
x29231:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary800 -> stream stream 27
x29233:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary800 -> stream 0
x29236:	cmp word [si + 27], 0	; 4: 131 124 27 0
x29240:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary801 -> stream stream 4
x29242:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary801 -> stream 6
x29245:	mov [bp + 14], si	; 3: 137 118 14
x29248:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x29252:	mov word [bp + 8], fclose$15	; 5: 199 70 8 82 114
x29257:	mov [bp + 10], bp	; 3: 137 110 10
x29260:	add bp, 8	; 3: 131 197 8
x29263:	nop	; 1: 144
x29264:	jmp remove	; 2: 235 124

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary804 -> stream stream 0
x29266:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary804 -> stream 0
x29269:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x29273:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x29276:	mov ax, [bp]	; 3: 139 70 0
x29279:	mov di, [bp + 4]	; 3: 139 126 4
x29282:	mov bp, [bp + 2]	; 3: 139 110 2
x29285:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x29287:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x29292:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x29296:	jge fclose$40	; 2: 125 74

fclose$22:	; UnsignedMultiply £temporary808 index 29
x29298:	mov ax, [bp + 8]	; 3: 139 70 8
x29301:	xor dx, dx	; 2: 49 210
x29303:	mul word [@1922$int2$29#]	; 4: 247 38 202 114

fclose$23:	; BinaryAdd £temporary809 g_fileArray £temporary808
x29307:	mov si, g_fileArray	; 3: 190 102 13
x29310:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary807 -> £temporary809 £temporary809 0

fclose$25:	; Equal 38 £temporary807.open$0 -> £temporary809 0
x29312:	cmp word [si], 0	; 3: 131 60 0
x29315:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; UnsignedMultiply £temporary811 index 29
x29317:	mov ax, [bp + 8]	; 3: 139 70 8
x29320:	xor dx, dx	; 2: 49 210
x29322:	mul word [@1927$int2$29#]	; 4: 247 38 204 114

fclose$28:	; BinaryAdd £temporary812 g_fileArray £temporary811
x29326:	mov si, g_fileArray	; 3: 190 102 13
x29329:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary810 -> £temporary812 £temporary812 0

fclose$30:	; address £temporary813 £temporary810 -> £temporary812

fclose$31:	; Parameter 10 £temporary813 6
x29331:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x29334:	mov word [bp + 10], fclose$33	; 5: 199 70 10 164 114
x29339:	mov [bp + 12], bp	; 3: 137 110 12
x29342:	add bp, 10	; 3: 131 197 10
x29345:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary814

fclose$35:	; NotEqual 38 £temporary814 -1
x29348:	cmp bx, -1	; 3: 131 251 255
x29351:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x29353:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x29356:	mov ax, [bp]	; 3: 139 70 0
x29359:	mov di, [bp + 4]	; 3: 139 126 4
x29362:	mov bp, [bp + 2]	; 3: 139 110 2
x29365:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x29367:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x29370:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x29372:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x29375:	mov ax, [bp]	; 3: 139 70 0
x29378:	mov di, [bp + 4]	; 3: 139 126 4
x29381:	mov bp, [bp + 2]	; 3: 139 110 2
x29384:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

@1922$int2$29#:
x29386:	dw 29	; 2: 29 0

@1927$int2$29#:
x29388:	dw 29	; 2: 29 0

remove:	; AssignRegister ah 65
x29390:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x29392:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x29394:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x29397:	int 33	; 2: 205 33

remove$4:	; Carry 7
x29399:	jc remove$7	; 2: 114 14

remove$5:	; SetReturnValue 0
x29401:	mov bx, 0	; 3: 187 0 0

remove$6:	; Return 0
x29404:	mov ax, [bp]	; 3: 139 70 0
x29407:	mov di, [bp + 4]	; 3: 139 126 4
x29410:	mov bp, [bp + 2]	; 3: 139 110 2
x29413:	jmp ax	; 2: 255 224

remove$7:	; Assign errno 18
x29415:	mov word [errno], 18	; 6: 199 6 230 10 18 0

remove$8:	; SetReturnValue -1
x29421:	mov bx, -1	; 3: 187 255 255

remove$9:	; Return -1
x29424:	mov ax, [bp]	; 3: 139 70 0
x29427:	mov di, [bp + 4]	; 3: 139 126 4
x29430:	mov bp, [bp + 2]	; 3: 139 110 2
x29433:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x29435:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x29437:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x29439:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x29442:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x29445:	int 33	; 2: 205 33

rename$5:	; Carry 8
x29447:	jc rename$8	; 2: 114 14

rename$6:	; SetReturnValue 0
x29449:	mov bx, 0	; 3: 187 0 0

rename$7:	; Return 0
x29452:	mov ax, [bp]	; 3: 139 70 0
x29455:	mov di, [bp + 4]	; 3: 139 126 4
x29458:	mov bp, [bp + 2]	; 3: 139 110 2
x29461:	jmp ax	; 2: 255 224

rename$8:	; Assign errno 19
x29463:	mov word [errno], 19	; 6: 199 6 230 10 19 0

rename$9:	; SetReturnValue -1
x29469:	mov bx, -1	; 3: 187 255 255

rename$10:	; Return -1
x29472:	mov ax, [bp]	; 3: 139 70 0
x29475:	mov di, [bp + 4]	; 3: 139 126 4
x29478:	mov bp, [bp + 2]	; 3: 139 110 2
x29481:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary911 -> stream stream 2
x29483:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary911 -> stream
x29486:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary913 size nobj
x29489:	mov ax, [bp + 8]	; 3: 139 70 8
x29492:	xor dx, dx	; 2: 49 210
x29494:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary913
x29497:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x29499:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x29501:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x29504:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x29506:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary917 -> stream stream 21
x29508:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x29511:	mov word [errno], 13	; 6: 199 6 230 10 13 0

fwrite$10:	; Assign £temporary917 -> stream errno
x29517:	mov ax, [errno]	; 3: 161 230 10
x29520:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x29523:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x29526:	mov ax, [bp]	; 3: 139 70 0
x29529:	mov di, [bp + 4]	; 3: 139 126 4
x29532:	mov bp, [bp + 2]	; 3: 139 110 2
x29535:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary918 ax

fwrite$14:	; SetReturnValue £temporary918
x29537:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary918
x29539:	mov ax, [bp]	; 3: 139 70 0
x29542:	mov di, [bp + 4]	; 3: 139 126 4
x29545:	mov bp, [bp + 2]	; 3: 139 110 2
x29548:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary902 -> stream stream 2
x29550:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary902 -> stream
x29553:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary904 size nobj
x29556:	mov ax, [bp + 8]	; 3: 139 70 8
x29559:	xor dx, dx	; 2: 49 210
x29561:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary904
x29564:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x29566:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x29568:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x29571:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x29573:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary908 -> stream stream 21
x29575:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x29578:	mov word [errno], 14	; 6: 199 6 230 10 14 0

fread$10:	; Assign £temporary908 -> stream errno
x29584:	mov ax, [errno]	; 3: 161 230 10
x29587:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x29590:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x29593:	mov ax, [bp]	; 3: 139 70 0
x29596:	mov di, [bp + 4]	; 3: 139 126 4
x29599:	mov bp, [bp + 2]	; 3: 139 110 2
x29602:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary909 ax

fread$14:	; SetReturnValue £temporary909
x29604:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary909
x29606:	mov ax, [bp]	; 3: 139 70 0
x29609:	mov di, [bp + 4]	; 3: 139 126 4
x29612:	mov bp, [bp + 2]	; 3: 139 110 2
x29615:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary23 memorySize
x29617:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary23 4
x29620:	add ax, 4	; 3: 131 192 4
x29623:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x29626:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x29631:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x29636:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x29641:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x29646:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x29651:	mov ax, [g_firstBlockPtr]	; 3: 161 63 117
x29654:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x29657:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29661:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x29663:	mov ax, [stderr]	; 3: 161 22 78
x29666:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x29669:	mov word [bp + 30], @111$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 65 117

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x29674:	mov word [bp + 32], @112$string_memorySize203E3D200#	; 5: 199 70 32 111 117

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x29679:	mov word [bp + 34], @113$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 127 117

malloc$14:	; Parameter 22 41 14
x29684:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x29689:	mov word [bp + 22], malloc$16	; 5: 199 70 22 12 116
x29694:	mov [bp + 24], bp	; 3: 137 110 24
x29697:	add bp, 22	; 3: 131 197 22
x29700:	mov di, bp	; 2: 137 239
x29702:	add di, 6	; 3: 131 199 6
x29705:	jmp fprintf	; 3: 233 239 234

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x29708:	mov word [bp + 22], malloc$19	; 5: 199 70 22 26 116
x29713:	mov [bp + 24], bp	; 3: 137 110 24
x29716:	add bp, 22	; 3: 131 197 22
x29719:	jmp abort	; 3: 233 28 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x29722:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29726:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x29728:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x29731:	mov ax, [bp]	; 3: 139 70 0
x29734:	mov di, [bp + 4]	; 3: 139 126 4
x29737:	mov bp, [bp + 2]	; 3: 139 110 2
x29740:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x29742:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x29746:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary31 currBlockPtr
x29748:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary31
x29751:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary32 -> currBlockPtr currBlockPtr 0
x29754:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary33 currAddress £temporary32 -> currBlockPtr
x29757:	mov ax, [bp + 22]	; 3: 139 70 22
x29760:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary34 £temporary33 4
x29762:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary34
x29765:	mov bx, [bp + 12]	; 3: 139 94 12
x29768:	sub bx, ax	; 2: 41 195
x29770:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x29773:	mov ax, [bp + 24]	; 3: 139 70 24
x29776:	cmp [bp + 8], ax	; 3: 57 70 8
x29779:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x29781:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x29785:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x29787:	mov ax, [bp + 10]	; 3: 139 70 10
x29790:	cmp [bp + 24], ax	; 3: 57 70 24
x29793:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x29795:	mov ax, [bp + 24]	; 3: 139 70 24
x29798:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x29801:	mov ax, [bp + 20]	; 3: 139 70 20
x29804:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x29807:	mov ax, [bp + 18]	; 3: 139 70 18
x29810:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x29813:	mov ax, [bp + 22]	; 3: 139 70 22
x29816:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x29819:	mov ax, [bp + 20]	; 3: 139 70 20
x29822:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary41 -> currBlockPtr currBlockPtr 2
x29825:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary41 -> currBlockPtr
x29828:	mov ax, [si + 2]	; 3: 139 68 2
x29831:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x29834:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x29836:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x29840:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary43 minBlockPtr
x29842:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary44 -> minBlockPtr minBlockPtr 0
x29845:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary45 £temporary43 £temporary44 -> minBlockPtr
x29848:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary45 4
x29850:	add ax, 4	; 3: 131 192 4
x29853:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary47 newAddress
x29856:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary47
x29859:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary48 -> newBlockPtr newBlockPtr 0
x29862:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary48 -> newBlockPtr memorySize
x29865:	mov ax, [bp + 6]	; 3: 139 70 6
x29868:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary49 -> newBlockPtr newBlockPtr 2
x29870:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary49 -> newBlockPtr minBlockPtr
x29873:	mov ax, [bp + 14]	; 3: 139 70 14
x29876:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x29879:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x29883:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary51 -> minPrevBlockPtr minPrevBlockPtr 2
x29885:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary51 -> minPrevBlockPtr newBlockPtr
x29888:	mov ax, [bp + 24]	; 3: 139 70 24
x29891:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x29894:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x29896:	mov ax, [bp + 24]	; 3: 139 70 24
x29899:	mov [g_firstBlockPtr], ax	; 3: 163 63 117

malloc$57:	; BinaryAdd £temporary52 newAddress 4
x29902:	mov bx, [bp + 22]	; 3: 139 94 22
x29905:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary53 £temporary52

malloc$59:	; SetReturnValue £temporary53

malloc$60:	; Return £temporary53
x29908:	mov ax, [bp]	; 3: 139 70 0
x29911:	mov di, [bp + 4]	; 3: 139 126 4
x29914:	mov bp, [bp + 2]	; 3: 139 110 2
x29917:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x29919:	mov ax, [bp + 12]	; 3: 139 70 12
x29922:	sub ax, [bp + 8]	; 3: 43 70 8
x29925:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary55 bp

malloc$63:	; Assign stackTop £temporary55
x29928:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x29931:	mov ax, [bp + 22]	; 3: 139 70 22
x29934:	cmp [bp + 24], ax	; 3: 57 70 24
x29937:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary57 newAddress
x29939:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary57
x29942:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary58 -> newBlockPtr newBlockPtr 0
x29945:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary58 -> newBlockPtr memorySize
x29948:	mov ax, [bp + 6]	; 3: 139 70 6
x29951:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary59 -> newBlockPtr newBlockPtr 2
x29953:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary59 -> newBlockPtr 0
x29956:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x29961:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x29965:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary61 -> prevBlockPtr prevBlockPtr 2
x29967:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary61 -> prevBlockPtr newBlockPtr
x29970:	mov ax, [bp + 26]	; 3: 139 70 26
x29973:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x29976:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x29978:	mov ax, [bp + 26]	; 3: 139 70 26
x29981:	mov [g_firstBlockPtr], ax	; 3: 163 63 117

malloc$76:	; BinaryAdd £temporary62 newAddress 4
x29984:	mov bx, [bp + 22]	; 3: 139 94 22
x29987:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary63 £temporary62

malloc$78:	; SetReturnValue £temporary63

malloc$79:	; Return £temporary63
x29990:	mov ax, [bp]	; 3: 139 70 0
x29993:	mov di, [bp + 4]	; 3: 139 126 4
x29996:	mov bp, [bp + 2]	; 3: 139 110 2
x29999:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x30001:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x30004:	mov ax, [bp]	; 3: 139 70 0
x30007:	mov di, [bp + 4]	; 3: 139 126 4
x30010:	mov bp, [bp + 2]	; 3: 139 110 2
x30013:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x30015:	dw 0	; 2: 0 0

@111$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x30017:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@112$string_memorySize203E3D200#:
x30063:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@113$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x30079:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary77 freeMemoryPtr
x30142:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary78 £temporary77 4
x30145:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary79 £temporary78

free$3:	; Assign freeBlockPtr £temporary79
x30148:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x30151:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x30156:	mov ax, [g_firstBlockPtr]	; 3: 161 63 117
x30159:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x30162:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x30166:	jne free$8	; 2: 117 11

free$7:	; Return
x30168:	mov ax, [bp]	; 3: 139 70 0
x30171:	mov di, [bp + 4]	; 3: 139 126 4
x30174:	mov bp, [bp + 2]	; 3: 139 110 2
x30177:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x30179:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x30183:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x30185:	mov ax, [bp + 8]	; 3: 139 70 8
x30188:	cmp [bp + 12], ax	; 3: 57 70 12
x30191:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x30193:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30197:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary84 -> currBlockPtr currBlockPtr 2
x30199:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary84 -> currBlockPtr 0
x30202:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30206:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x30208:	mov word [g_firstBlockPtr], 0	; 6: 199 6 63 117 0 0

free$14:	; Goto 27
x30214:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x30216:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30220:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary88 -> currBlockPtr currBlockPtr 2
x30222:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary88 -> currBlockPtr
x30225:	mov ax, [si + 2]	; 3: 139 68 2
x30228:	mov [g_firstBlockPtr], ax	; 3: 163 63 117

free$18:	; Goto 27
x30231:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary89 -> currBlockPtr currBlockPtr 2
x30233:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary89 -> currBlockPtr 0
x30236:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30240:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary91 -> prevBlockPtr prevBlockPtr 2
x30242:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary91 -> prevBlockPtr 0
x30245:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x30250:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary92 -> prevBlockPtr prevBlockPtr 2
x30252:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary93 -> currBlockPtr currBlockPtr 2
x30255:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary92 -> prevBlockPtr £temporary93 -> currBlockPtr
x30258:	mov ax, [di + 2]	; 3: 139 69 2
x30261:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x30264:	mov ax, [bp]	; 3: 139 70 0
x30267:	mov di, [bp + 4]	; 3: 139 126 4
x30270:	mov bp, [bp + 2]	; 3: 139 110 2
x30273:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x30275:	mov ax, [bp + 12]	; 3: 139 70 12
x30278:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary94 -> currBlockPtr currBlockPtr 2
x30281:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary94 -> currBlockPtr
x30284:	mov ax, [si + 2]	; 3: 139 68 2
x30287:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x30290:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x30292:	mov ax, [bp]	; 3: 139 70 0
x30295:	mov di, [bp + 4]	; 3: 139 126 4
x30298:	mov bp, [bp + 2]	; 3: 139 110 2
x30301:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x30303:	mov ax, [bp + 6]	; 3: 139 70 6
x30306:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x30309:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x30314:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x30319:	mov word [bp + 8], ftell$5	; 5: 199 70 8 125 118
x30324:	mov [bp + 10], bp	; 3: 137 110 10
x30327:	add bp, 8	; 3: 131 197 8
x30330:	jmp fseek	; 3: 233 217 231

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary933

ftell$7:	; SetReturnValue £temporary933

ftell$8:	; Return £temporary933
x30333:	mov ax, [bp]	; 3: 139 70 0
x30336:	mov di, [bp + 4]	; 3: 139 126 4
x30339:	mov bp, [bp + 2]	; 3: 139 110 2
x30342:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x30344:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary830 c
x30348:	mov si, bp	; 2: 137 238
x30350:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary830 6
x30353:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x30356:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x30361:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x30366:	mov ax, [bp + 6]	; 3: 139 70 6
x30369:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x30372:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 178 118
x30377:	mov [bp + 11], bp	; 3: 137 110 11
x30380:	add bp, 9	; 3: 131 197 9
x30383:	jmp fread	; 3: 233 188 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary831

fgetc$10:	; SignedLessThanEqual 14 £temporary831 0
x30386:	cmp bx, 0	; 3: 131 251 0
x30389:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary833 c
x30391:	mov bl, [bp + 8]	; 3: 138 94 8
x30394:	and bx, 255	; 4: 129 227 255 0
x30398:	cmp bl, 0	; 3: 128 251 0
x30401:	jge fgetc$12	; 2: 125 4
x30403:	neg bl	; 2: 246 219
x30405:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary833

fgetc$13:	; Return £temporary833
x30407:	mov ax, [bp]	; 3: 139 70 0
x30410:	mov di, [bp + 4]	; 3: 139 126 4
x30413:	mov bp, [bp + 2]	; 3: 139 110 2
x30416:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x30418:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x30421:	mov ax, [bp]	; 3: 139 70 0
x30424:	mov di, [bp + 4]	; 3: 139 126 4
x30427:	mov bp, [bp + 2]	; 3: 139 110 2
x30430:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

time_test:	; Assign weekdays[0] string_Sun#
x30432:	mov word [bp + 6], @12963$string_Sun#	; 5: 199 70 6 192 121

time_test$1:	; Assign weekdays[1] string_Mon#
x30437:	mov word [bp + 8], @12964$string_Mon#	; 5: 199 70 8 196 121

time_test$2:	; Assign weekdays[2] string_Tue#
x30442:	mov word [bp + 10], @12965$string_Tue#	; 5: 199 70 10 200 121

time_test$3:	; Assign weekdays[3] string_Wed#
x30447:	mov word [bp + 12], @12966$string_Wed#	; 5: 199 70 12 204 121

time_test$4:	; Assign weekdays[4] string_Thu#
x30452:	mov word [bp + 14], @12967$string_Thu#	; 5: 199 70 14 208 121

time_test$5:	; Assign weekdays[5] string_Fri#
x30457:	mov word [bp + 16], @12968$string_Fri#	; 5: 199 70 16 212 121

time_test$6:	; Assign weekdays[6] string_Sat#
x30462:	mov word [bp + 18], @12969$string_Sat#	; 5: 199 70 18 216 121

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x30467:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x30472:	mov word [bp + 20], time_test$10	; 5: 199 70 20 22 119
x30477:	mov [bp + 22], bp	; 3: 137 110 22
x30480:	add bp, 20	; 3: 131 197 20
x30483:	jmp time	; 3: 233 201 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6193

time_test$12:	; Assign now1 £temporary6193
x30486:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6194 now1
x30490:	mov si, bp	; 2: 137 238
x30492:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6194 6
x30495:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x30498:	mov word [bp + 24], time_test$17	; 5: 199 70 24 48 119
x30503:	mov [bp + 26], bp	; 3: 137 110 26
x30506:	add bp, 24	; 3: 131 197 24
x30509:	jmp gmtime	; 3: 233 70 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6195

time_test$19:	; Deref £temporary6196 -> £temporary6195 £temporary6195 0

time_test$20:	; Assign s £temporary6196 -> £temporary6195
x30512:	mov si, bp	; 2: 137 238
x30514:	add si, 24	; 3: 131 198 24
x30517:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x30519:	mov ah, [bx]	; 2: 138 39
x30521:	mov [si], ah	; 2: 136 36
x30523:	inc bx	; 1: 67
x30524:	inc si	; 1: 70
x30525:	dec al	; 2: 254 200
x30527:	cmp al, 0	; 2: 60 0
x30529:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6197 now1
x30531:	mov si, bp	; 2: 137 238
x30533:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6197 6
x30536:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x30539:	mov word [bp + 42], time_test$25	; 5: 199 70 42 89 119
x30544:	mov [bp + 44], bp	; 3: 137 110 44
x30547:	add bp, 42	; 3: 131 197 42
x30550:	jmp localtime	; 3: 233 0 10

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6198

time_test$27:	; Deref £temporary6199 -> £temporary6198 £temporary6198 0

time_test$28:	; Assign t £temporary6199 -> £temporary6198
x30553:	mov si, bp	; 2: 137 238
x30555:	add si, 42	; 3: 131 198 42
x30558:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x30560:	mov ah, [bx]	; 2: 138 39
x30562:	mov [si], ah	; 2: 136 36
x30564:	inc bx	; 1: 67
x30565:	inc si	; 1: 70
x30566:	dec al	; 2: 254 200
x30568:	cmp al, 0	; 2: 60 0
x30570:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6200 s
x30572:	mov si, bp	; 2: 137 238
x30574:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6200 6
x30577:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x30580:	mov word [bp + 60], time_test$33	; 5: 199 70 60 130 119
x30585:	mov [bp + 62], bp	; 3: 137 110 62
x30588:	add bp, 60	; 3: 131 197 60
x30591:	jmp mktime	; 3: 233 243 5

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6201

time_test$35:	; Assign now2 £temporary6201
x30594:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x30598:	mov word [bp + 70], @12994$string_now2013A2025lu0A#	; 5: 199 70 70 220 121

time_test$38:	; Parameter 64 now1 8
x30603:	mov eax, [bp + 20]	; 4: 102 139 70 20
x30607:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x30611:	mov word [bp + 64], time_test$40	; 5: 199 70 64 166 119
x30616:	mov [bp + 66], bp	; 3: 137 110 66
x30619:	add bp, 64	; 3: 131 197 64
x30622:	mov di, bp	; 2: 137 239
x30624:	add di, 4	; 3: 131 199 4
x30627:	jmp printf	; 3: 233 94 149

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x30630:	mov word [bp + 70], @12996$string_now2023A2025lu0A#	; 5: 199 70 70 232 121

time_test$43:	; Parameter 64 now2 8
x30635:	mov eax, [bp + 60]	; 4: 102 139 70 60
x30639:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x30643:	mov word [bp + 64], time_test$45	; 5: 199 70 64 198 119
x30648:	mov [bp + 66], bp	; 3: 137 110 66
x30651:	add bp, 64	; 3: 131 197 64
x30654:	mov di, bp	; 2: 137 239
x30656:	add di, 4	; 3: 131 199 4
x30659:	jmp printf	; 3: 233 62 149

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30662:	mov word [bp + 70], @12998$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 244 121

time_test$48:	; UnsignedMultiply £temporary6206 s$tm_wday 2
x30667:	mov ax, [bp + 36]	; 3: 139 70 36
x30670:	xor dx, dx	; 2: 49 210
x30672:	mul word [@13001$int2$2#]	; 4: 247 38 85 122

time_test$49:	; BinaryAdd £temporary6207 weekdays £temporary6206
x30676:	mov si, bp	; 2: 137 238
x30678:	add si, 6	; 3: 131 198 6
x30681:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6205 -> £temporary6207 £temporary6207 0

time_test$51:	; Parameter 64 £temporary6205 -> £temporary6207 8
x30683:	mov ax, [si]	; 2: 139 4
x30685:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6209 s$tm_year 1900
x30688:	mov ax, [bp + 34]	; 3: 139 70 34
x30691:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6209 10
x30694:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6211 s$tm_mon 1
x30697:	mov ax, [bp + 32]	; 3: 139 70 32
x30700:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6211 12
x30701:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x30704:	mov ax, [bp + 30]	; 3: 139 70 30
x30707:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x30710:	mov ax, [bp + 28]	; 3: 139 70 28
x30713:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x30716:	mov ax, [bp + 26]	; 3: 139 70 26
x30719:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x30722:	mov ax, [bp + 24]	; 3: 139 70 24
x30725:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x30728:	mov ax, [bp + 38]	; 3: 139 70 38
x30731:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x30734:	mov ax, [bp + 36]	; 3: 139 70 36
x30737:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x30740:	mov ax, [bp + 40]	; 3: 139 70 40
x30743:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x30746:	mov word [bp + 64], time_test$64	; 5: 199 70 64 45 120
x30751:	mov [bp + 66], bp	; 3: 137 110 66
x30754:	add bp, 64	; 3: 131 197 64
x30757:	mov di, bp	; 2: 137 239
x30759:	add di, 20	; 3: 131 199 20
x30762:	jmp printf	; 3: 233 215 148

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30765:	mov word [bp + 70], @13020$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 87 122

time_test$67:	; UnsignedMultiply £temporary6222 t$tm_wday 2
x30770:	mov ax, [bp + 54]	; 3: 139 70 54
x30773:	xor dx, dx	; 2: 49 210
x30775:	mul word [@13023$int2$2#]	; 4: 247 38 184 122

time_test$68:	; BinaryAdd £temporary6223 weekdays £temporary6222
x30779:	mov si, bp	; 2: 137 238
x30781:	add si, 6	; 3: 131 198 6
x30784:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6221 -> £temporary6223 £temporary6223 0

time_test$70:	; Parameter 64 £temporary6221 -> £temporary6223 8
x30786:	mov ax, [si]	; 2: 139 4
x30788:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6225 t$tm_year 1900
x30791:	mov ax, [bp + 52]	; 3: 139 70 52
x30794:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6225 10
x30797:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6227 t$tm_mon 1
x30800:	mov ax, [bp + 50]	; 3: 139 70 50
x30803:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6227 12
x30804:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x30807:	mov ax, [bp + 48]	; 3: 139 70 48
x30810:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x30813:	mov ax, [bp + 46]	; 3: 139 70 46
x30816:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x30819:	mov ax, [bp + 44]	; 3: 139 70 44
x30822:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x30825:	mov ax, [bp + 42]	; 3: 139 70 42
x30828:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x30831:	mov ax, [bp + 56]	; 3: 139 70 56
x30834:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x30837:	mov ax, [bp + 54]	; 3: 139 70 54
x30840:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x30843:	mov ax, [bp + 58]	; 3: 139 70 58
x30846:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x30849:	mov word [bp + 64], time_test$83	; 5: 199 70 64 148 120
x30854:	mov [bp + 66], bp	; 3: 137 110 66
x30857:	add bp, 64	; 3: 131 197 64
x30860:	mov di, bp	; 2: 137 239
x30862:	add di, 20	; 3: 131 199 20
x30865:	jmp printf	; 3: 233 112 148

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 566 buffer1 6
x30868:	mov [bp + 572], bp	; 4: 137 174 60 2
x30872:	add word [bp + 572], 64	; 5: 131 134 60 2 64

time_test$86:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6236 s
x30877:	mov si, bp	; 2: 137 238
x30879:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 566 £temporary6236 14
x30882:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$89:	; Call 566 asctime 8
x30886:	mov word [bp + 574], time_test$90	; 6: 199 134 62 2 183 120
x30892:	mov [bp + 576], bp	; 4: 137 174 64 2
x30896:	add bp, 574	; 4: 129 197 62 2
x30900:	jmp asctime	; 3: 233 59 9

time_test$90:	; PostCall 566

time_test$91:	; GetReturnValue £temporary6237

time_test$92:	; Parameter 566 £temporary6237 8
x30903:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$93:	; Call 566 strcpy 0
x30907:	mov word [bp + 566], time_test$94	; 6: 199 134 54 2 204 120
x30913:	mov [bp + 568], bp	; 4: 137 174 56 2
x30917:	add bp, 566	; 4: 129 197 54 2
x30921:	jmp strcpy	; 3: 233 243 229

time_test$94:	; PostCall 566

time_test$95:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 566 buffer2 6
x30924:	mov [bp + 572], bp	; 4: 137 174 60 2
x30928:	add word [bp + 572], 164	; 6: 129 134 60 2 164 0

time_test$97:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6239 now1
x30934:	mov si, bp	; 2: 137 238
x30936:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 566 £temporary6239 14
x30939:	mov [bp + 580], si	; 4: 137 182 68 2

time_test$100:	; Call 566 ctime 8
x30943:	mov word [bp + 574], time_test$101	; 6: 199 134 62 2 240 120
x30949:	mov [bp + 576], bp	; 4: 137 174 64 2
x30953:	add bp, 574	; 4: 129 197 62 2
x30957:	jmp ctime	; 3: 233 212 11

time_test$101:	; PostCall 566

time_test$102:	; GetReturnValue £temporary6240

time_test$103:	; Parameter 566 £temporary6240 8
x30960:	mov [bp + 574], bx	; 4: 137 158 62 2

time_test$104:	; Call 566 strcpy 0
x30964:	mov word [bp + 566], time_test$105	; 6: 199 134 54 2 5 121
x30970:	mov [bp + 568], bp	; 4: 137 174 56 2
x30974:	add bp, 566	; 4: 129 197 54 2
x30978:	jmp strcpy	; 3: 233 186 229

time_test$105:	; PostCall 566

time_test$106:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 566 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x30981:	mov word [bp + 572], @13058$string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 60 2 186 122

time_test$108:	; Parameter 566 buffer1 8
x30987:	mov [bp + 574], bp	; 4: 137 174 62 2
x30991:	add word [bp + 574], 64	; 5: 131 134 62 2 64

time_test$109:	; Parameter 566 buffer2 10
x30996:	mov [bp + 576], bp	; 4: 137 174 64 2
x31000:	add word [bp + 576], 164	; 6: 129 134 64 2 164 0

time_test$110:	; Call 566 printf 0
x31006:	mov word [bp + 566], time_test$111	; 6: 199 134 54 2 52 121
x31012:	mov [bp + 568], bp	; 4: 137 174 56 2
x31016:	add bp, 566	; 4: 129 197 54 2
x31020:	mov di, bp	; 2: 137 239
x31022:	add di, 4	; 3: 131 199 4
x31025:	jmp printf	; 3: 233 208 147

time_test$111:	; PostCall 566

time_test$112:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 566 buffer 6
x31028:	mov [bp + 572], bp	; 4: 137 174 60 2
x31032:	add word [bp + 572], 264	; 6: 129 134 60 2 8 1

time_test$114:	; Parameter 566 300 8
x31038:	mov word [bp + 574], 300	; 6: 199 134 62 2 44 1

time_test$115:	; Parameter 566 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y# 10
x31044:	mov word [bp + 576], @13062$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#	; 6: 199 134 64 2 212 122

time_test$116:	; address £temporary6243 t
x31050:	mov si, bp	; 2: 137 238
x31052:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 566 £temporary6243 12
x31055:	mov [bp + 578], si	; 4: 137 182 66 2

time_test$118:	; Call 566 strftime 0
x31059:	mov word [bp + 566], time_test$119	; 6: 199 134 54 2 100 121
x31065:	mov [bp + 568], bp	; 4: 137 174 56 2
x31069:	add bp, 566	; 4: 129 197 54 2
x31073:	jmp strftime	; 3: 233 144 11

time_test$119:	; PostCall 566

time_test$120:	; GetReturnValue £temporary6244

time_test$121:	; Assign i £temporary6244
x31076:	mov [bp + 564], bx	; 4: 137 158 52 2

time_test$122:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 566 string_strftime2025i2025i203C25s3E0A# 6
x31080:	mov word [bp + 572], @13065$string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 60 2 202 123

time_test$124:	; Parameter 566 i 8
x31086:	mov ax, [bp + 564]	; 4: 139 134 52 2
x31090:	mov [bp + 574], ax	; 4: 137 134 62 2

time_test$125:	; CallHeader 566 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 566 buffer 16
x31094:	mov [bp + 582], bp	; 4: 137 174 70 2
x31098:	add word [bp + 582], 264	; 6: 129 134 70 2 8 1

time_test$127:	; Call 566 strlen 10
x31104:	mov word [bp + 576], time_test$128	; 6: 199 134 64 2 145 121
x31110:	mov [bp + 578], bp	; 4: 137 174 66 2
x31114:	add bp, 576	; 4: 129 197 64 2
x31118:	jmp strlen	; 3: 233 120 19

time_test$128:	; PostCall 566

time_test$129:	; GetReturnValue £temporary6245

time_test$130:	; Parameter 566 £temporary6245 10
x31121:	mov [bp + 576], bx	; 4: 137 158 64 2

time_test$131:	; Parameter 566 buffer 12
x31125:	mov [bp + 578], bp	; 4: 137 174 66 2
x31129:	add word [bp + 578], 264	; 6: 129 134 66 2 8 1

time_test$132:	; Call 566 printf 0
x31135:	mov word [bp + 566], time_test$133	; 6: 199 134 54 2 181 121
x31141:	mov [bp + 568], bp	; 4: 137 174 56 2
x31145:	add bp, 566	; 4: 129 197 54 2
x31149:	mov di, bp	; 2: 137 239
x31151:	add di, 6	; 3: 131 199 6
x31154:	jmp printf	; 3: 233 79 147

time_test$133:	; PostCall 566

time_test$134:	; Return 0
x31157:	mov ax, [bp]	; 3: 139 70 0
x31160:	mov di, [bp + 4]	; 3: 139 126 4
x31163:	mov bp, [bp + 2]	; 3: 139 110 2
x31166:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

@12963$string_Sun#:
x31168:	db "Sun", 0	; 4: 83 117 110 0

@12964$string_Mon#:
x31172:	db "Mon", 0	; 4: 77 111 110 0

@12965$string_Tue#:
x31176:	db "Tue", 0	; 4: 84 117 101 0

@12966$string_Wed#:
x31180:	db "Wed", 0	; 4: 87 101 100 0

@12967$string_Thu#:
x31184:	db "Thu", 0	; 4: 84 104 117 0

@12968$string_Fri#:
x31188:	db "Fri", 0	; 4: 70 114 105 0

@12969$string_Sat#:
x31192:	db "Sat", 0	; 4: 83 97 116 0

@12994$string_now2013A2025lu0A#:
x31196:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

@12996$string_now2023A2025lu0A#:
x31208:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

@12998$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31220:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13001$int2$2#:
x31317:	dw 2	; 2: 2 0

@13020$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31319:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13023$int2$2#:
x31416:	dw 2	; 2: 2 0

@13058$string_asctime203C25s3E2C20ctime203C25s3E0A#:
x31418:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

@13062$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y#:
x31444:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y", 0	; 246: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 0

@13065$string_strftime2025i2025i203C25s3E0A#:
x31690:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$1:	; Call 19 localeconv 0
x31711:	mov word [bp + 19], time$2	; 5: 199 70 19 237 123
x31716:	mov [bp + 21], bp	; 3: 137 110 21
x31719:	add bp, 19	; 3: 131 197 19
x31722:	jmp localeconv	; 3: 233 138 162

time$2:	; PostCall 19

time$3:	; GetReturnValue £temporary3231

time$4:	; Assign localeConvPtr £temporary3231
x31725:	mov [bp + 19], bx	; 3: 137 94 19

time$5:	; AssignRegister ah 42
x31728:	mov ah, 42	; 2: 180 42

time$6:	; Interrupt 33
x31730:	int 33	; 2: 205 33

time$7:	; InspectRegister £temporary3233 cx

time$8:	; BinarySubtract year £temporary3233 1900
x31732:	sub cx, 1900	; 4: 129 233 108 7
x31736:	mov [bp + 12], cx	; 3: 137 78 12

time$9:	; InspectRegister £temporary3235 dh

time$10:	; BinarySubtract month £temporary3235 1
x31739:	dec dh	; 2: 254 206
x31741:	mov [bp + 14], dh	; 3: 136 118 14

time$11:	; InspectRegister £temporary3237 dl

time$12:	; Assign monthDay £temporary3237
x31744:	mov [bp + 15], dl	; 3: 136 86 15

time$13:	; AssignRegister ah 44
x31747:	mov ah, 44	; 2: 180 44

time$14:	; Interrupt 33
x31749:	int 33	; 2: 205 33

time$15:	; InspectRegister £temporary3239 ch

time$16:	; Assign hour £temporary3239
x31751:	mov [bp + 16], ch	; 3: 136 110 16

time$17:	; InspectRegister £temporary3240 cl

time$18:	; Assign min £temporary3240
x31754:	mov [bp + 17], cl	; 3: 136 78 17

time$19:	; InspectRegister £temporary3241 dh

time$20:	; Assign sec £temporary3241
x31757:	mov [bp + 18], dh	; 3: 136 118 18

time$21:	; Equal 25 localeConvPtr 0
x31760:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x31764:	je time$25	; 2: 116 18

time$22:	; Deref £temporary3243 -> localeConvPtr localeConvPtr 2
x31766:	mov si, [bp + 19]	; 3: 139 118 19

time$23:	; IntegralToIntegral £temporary3244 £temporary3243 -> localeConvPtr
x31769:	mov ax, [si + 2]	; 3: 139 68 2
x31772:	cmp ax, 0	; 3: 131 248 0
x31775:	jge time$24	; 2: 125 4
x31777:	neg ax	; 2: 247 216
x31779:	neg al	; 2: 246 216

time$24:	; BinarySubtract hour hour £temporary3244
x31781:	sub [bp + 16], al	; 3: 40 70 16

time$25:	; SignedModulo £temporary3246 year 4
x31784:	mov ax, [bp + 12]	; 3: 139 70 12
x31787:	xor dx, dx	; 2: 49 210
x31789:	idiv word [@7350$int2$4#]	; 4: 247 62 113 125

time$26:	; NotEqual 29 £temporary3246 0
x31793:	cmp dx, 0	; 3: 131 250 0
x31796:	jne time$29	; 2: 117 5

time$27:	; Assign £temporary3248 1
x31798:	mov ax, 1	; 3: 184 1 0

time$28:	; Goto 30
x31801:	jmp time$30	; 2: 235 3

time$29:	; Assign £temporary3248 0
x31803:	mov ax, 0	; 3: 184 0 0

time$30:	; Assign leapYear £temporary3248
x31806:	mov [bp + 21], ax	; 3: 137 70 21

time$31:	; Assign daysOfMonthsX[0] 31
x31809:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$32:	; Equal 35 leapYear 0
x31814:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x31818:	je time$35	; 2: 116 5

time$33:	; Assign £temporary3253 29
x31820:	mov ax, 29	; 3: 184 29 0

time$34:	; Goto 36
x31823:	jmp time$36	; 2: 235 3

time$35:	; Assign £temporary3253 28
x31825:	mov ax, 28	; 3: 184 28 0

time$36:	; Assign daysOfMonthsX[1] £temporary3253
x31828:	mov [bp + 25], ax	; 3: 137 70 25

time$37:	; Assign daysOfMonthsX[2] 31
x31831:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$38:	; Assign daysOfMonthsX[3] 30
x31836:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$39:	; Assign daysOfMonthsX[4] 31
x31841:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$40:	; Assign daysOfMonthsX[5] 30
x31846:	mov word [bp + 33], 30	; 5: 199 70 33 30 0

time$41:	; Assign daysOfMonthsX[6] 31
x31851:	mov word [bp + 35], 31	; 5: 199 70 35 31 0

time$42:	; Assign daysOfMonthsX[7] 31
x31856:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$43:	; Assign daysOfMonthsX[8] 30
x31861:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$44:	; Assign daysOfMonthsX[9] 31
x31866:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$45:	; Assign daysOfMonthsX[10] 30
x31871:	mov word [bp + 43], 30	; 5: 199 70 43 30 0

time$46:	; Assign daysOfMonthsX[11] 31
x31876:	mov word [bp + 45], 31	; 5: 199 70 45 31 0

time$47:	; IntegralToIntegral £temporary3266 monthDay
x31881:	mov al, [bp + 15]	; 3: 138 70 15
x31884:	and ax, 255	; 3: 37 255 0
x31887:	cmp al, 0	; 2: 60 0
x31889:	jge time$48	; 2: 125 4
x31891:	neg al	; 2: 246 216
x31893:	neg ax	; 2: 247 216

time$48:	; BinarySubtract yearDay £temporary3266 1
x31895:	dec ax	; 1: 72
x31896:	mov [bp + 47], ax	; 3: 137 70 47

time$49:	; Assign mon 0
x31899:	mov word [bp + 49], 0	; 5: 199 70 49 0 0

time$50:	; IntegralToIntegral £temporary3268 month
x31904:	mov al, [bp + 14]	; 3: 138 70 14
x31907:	and ax, 255	; 3: 37 255 0
x31910:	cmp al, 0	; 2: 60 0
x31912:	jge time$51	; 2: 125 4
x31914:	neg al	; 2: 246 216
x31916:	neg ax	; 2: 247 216

time$51:	; SignedGreaterThanEqual 58 mon £temporary3268
x31918:	cmp [bp + 49], ax	; 3: 57 70 49
x31921:	jge time$58	; 2: 125 26

time$52:	; UnsignedMultiply £temporary3272 mon 2
x31923:	mov ax, [bp + 49]	; 3: 139 70 49
x31926:	xor dx, dx	; 2: 49 210
x31928:	mul word [@7419$int2$2#]	; 4: 247 38 115 125

time$53:	; BinaryAdd £temporary3273 daysOfMonthsX £temporary3272
x31932:	mov si, bp	; 2: 137 238
x31934:	add si, 23	; 3: 131 198 23
x31937:	add si, ax	; 2: 1 198

time$54:	; Deref £temporary3271 -> £temporary3273 £temporary3273 0

time$55:	; BinaryAdd yearDay yearDay £temporary3271 -> £temporary3273
x31939:	mov ax, [si]	; 2: 139 4
x31941:	add [bp + 47], ax	; 3: 1 70 47

time$56:	; Increment mon
x31944:	inc word [bp + 49]	; 3: 255 70 49

time$57:	; Goto 50
x31947:	jmp time$50	; 2: 235 211

time$58:	; IntegralToIntegral £temporary3276 sec
x31949:	mov al, [bp + 18]	; 3: 138 70 18
x31952:	and ax, 255	; 3: 37 255 0
x31955:	cmp al, 0	; 2: 60 0
x31957:	jge time$59	; 2: 125 4
x31959:	neg al	; 2: 246 216
x31961:	neg ax	; 2: 247 216

time$59:	; Assign s$tm_sec £temporary3276
x31963:	mov [bp + 51], ax	; 3: 137 70 51

time$60:	; IntegralToIntegral £temporary3278 min
x31966:	mov al, [bp + 17]	; 3: 138 70 17
x31969:	and ax, 255	; 3: 37 255 0
x31972:	cmp al, 0	; 2: 60 0
x31974:	jge time$61	; 2: 125 4
x31976:	neg al	; 2: 246 216
x31978:	neg ax	; 2: 247 216

time$61:	; Assign s$tm_min £temporary3278
x31980:	mov [bp + 53], ax	; 3: 137 70 53

time$62:	; IntegralToIntegral £temporary3280 hour
x31983:	mov al, [bp + 16]	; 3: 138 70 16
x31986:	and ax, 255	; 3: 37 255 0
x31989:	cmp al, 0	; 2: 60 0
x31991:	jge time$63	; 2: 125 4
x31993:	neg al	; 2: 246 216
x31995:	neg ax	; 2: 247 216

time$63:	; Assign s$tm_hour £temporary3280
x31997:	mov [bp + 55], ax	; 3: 137 70 55

time$64:	; IntegralToIntegral £temporary3282 monthDay
x32000:	mov al, [bp + 15]	; 3: 138 70 15
x32003:	and ax, 255	; 3: 37 255 0
x32006:	cmp al, 0	; 2: 60 0
x32008:	jge time$65	; 2: 125 4
x32010:	neg al	; 2: 246 216
x32012:	neg ax	; 2: 247 216

time$65:	; Assign s$tm_mday £temporary3282
x32014:	mov [bp + 57], ax	; 3: 137 70 57

time$66:	; IntegralToIntegral £temporary3284 month
x32017:	mov al, [bp + 14]	; 3: 138 70 14
x32020:	and ax, 255	; 3: 37 255 0
x32023:	cmp al, 0	; 2: 60 0
x32025:	jge time$67	; 2: 125 4
x32027:	neg al	; 2: 246 216
x32029:	neg ax	; 2: 247 216

time$67:	; Assign s$tm_mon £temporary3284
x32031:	mov [bp + 59], ax	; 3: 137 70 59

time$68:	; Assign s$tm_year year
x32034:	mov ax, [bp + 12]	; 3: 139 70 12
x32037:	mov [bp + 61], ax	; 3: 137 70 61

time$69:	; Assign s$tm_wday 0
x32040:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$70:	; Assign s$tm_yday yearDay
x32045:	mov ax, [bp + 47]	; 3: 139 70 47
x32048:	mov [bp + 65], ax	; 3: 137 70 65

time$71:	; Assign s$tm_isdst 0
x32051:	mov word [bp + 67], 0	; 5: 199 70 67 0 0

time$72:	; CallHeader 69 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$73:	; address £temporary3289 s
x32056:	mov si, bp	; 2: 137 238
x32058:	add si, 51	; 3: 131 198 51

time$74:	; Parameter 69 £temporary3289 6
x32061:	mov [bp + 75], si	; 3: 137 118 75

time$75:	; Call 69 mktime 0
x32064:	mov word [bp + 69], time$76	; 5: 199 70 69 78 125
x32069:	mov [bp + 71], bp	; 3: 137 110 71
x32072:	add bp, 69	; 3: 131 197 69
x32075:	nop	; 1: 144
x32076:	jmp mktime	; 2: 235 39

time$76:	; PostCall 69

time$77:	; GetReturnValue £temporary3290

time$78:	; Assign time £temporary3290
x32078:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$79:	; Equal 82 timePtr 0
x32082:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32086:	je time$82	; 2: 116 10

time$80:	; Deref £temporary3292 -> timePtr timePtr 0
x32088:	mov si, [bp + 6]	; 3: 139 118 6

time$81:	; Assign £temporary3292 -> timePtr time
x32091:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32095:	mov [si], eax	; 3: 102 137 4

time$82:	; SetReturnValue time
x32098:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$83:	; Return time
x32102:	mov ax, [bp]	; 3: 139 70 0
x32105:	mov di, [bp + 4]	; 3: 139 126 4
x32108:	mov bp, [bp + 2]	; 3: 139 110 2
x32111:	jmp ax	; 2: 255 224

time$84:	; FunctionEnd time

@7350$int2$4#:
x32113:	dw 4	; 2: 4 0

@7419$int2$2#:
x32115:	dw 2	; 2: 2 0

mktime:	; Equal 28 tp 0
x32117:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32121:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3296 -> tp tp 10
x32125:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3297 £temporary3296 -> tp 69
x32128:	mov ax, [si + 10]	; 3: 139 68 10
x32131:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3298 £temporary3297 4
x32134:	xor dx, dx	; 2: 49 210
x32136:	idiv word [@7461$int2$4#]	; 4: 247 62 102 126

mktime$4:	; IntegralToIntegral £temporary3299 £temporary3298
x32140:	and eax, 65535	; 6: 102 37 255 255 0 0
x32146:	cmp ax, 0	; 3: 131 248 0
x32149:	jge mktime$5	; 2: 125 5
x32151:	neg ax	; 2: 247 216
x32153:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3299
x32156:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3300 -> tp tp 10
x32160:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3301 £temporary3300 -> tp 70
x32163:	mov ax, [si + 10]	; 3: 139 68 10
x32166:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3302 £temporary3301 365
x32169:	xor dx, dx	; 2: 49 210
x32171:	imul word [@7470$int2$365#]	; 4: 247 46 104 126

mktime$9:	; IntegralToIntegral £temporary3303 £temporary3302
x32175:	and eax, 65535	; 6: 102 37 255 255 0 0
x32181:	cmp ax, 0	; 3: 131 248 0
x32184:	jge mktime$10	; 2: 125 5
x32186:	neg ax	; 2: 247 216
x32188:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3304 £temporary3303 leapDays
x32191:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3305 -> tp tp 14
x32195:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3306 £temporary3305 -> tp
x32198:	mov bx, [si + 14]	; 3: 139 92 14
x32201:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x32208:	cmp bx, 0	; 3: 131 251 0
x32211:	jge mktime$13	; 2: 125 5
x32213:	neg bx	; 2: 247 219
x32215:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3304 £temporary3306
x32218:	add eax, ebx	; 3: 102 1 216
x32221:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3308 totalDays 86400
x32225:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32229:	xor edx, edx	; 3: 102 49 210
x32232:	imul dword [@7479$int4$86400#]	; 5: 102 247 46 106 126
x32237:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3309 -> tp tp 4
x32240:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3310 £temporary3309 -> tp
x32243:	mov ax, [si + 4]	; 3: 139 68 4
x32246:	and eax, 65535	; 6: 102 37 255 255 0 0
x32252:	cmp ax, 0	; 3: 131 248 0
x32255:	jge mktime$17	; 2: 125 5
x32257:	neg ax	; 2: 247 216
x32259:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3311 £temporary3310 3600
x32262:	xor edx, edx	; 3: 102 49 210
x32265:	imul dword [@7483$int4$3600#]	; 5: 102 247 46 110 126

mktime$18:	; BinaryAdd £temporary3312 £temporary3308 £temporary3311
x32270:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3313 -> tp tp 2
x32273:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3314 £temporary3313 -> tp
x32276:	mov ax, [si + 2]	; 3: 139 68 2
x32279:	and eax, 65535	; 6: 102 37 255 255 0 0
x32285:	cmp ax, 0	; 3: 131 248 0
x32288:	jge mktime$21	; 2: 125 5
x32290:	neg ax	; 2: 247 216
x32292:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3315 £temporary3314 60
x32295:	xor edx, edx	; 3: 102 49 210
x32298:	imul dword [@7489$int4$60#]	; 5: 102 247 46 114 126

mktime$22:	; BinaryAdd £temporary3316 £temporary3312 £temporary3315
x32303:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3317 -> tp tp 0
x32306:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3318 £temporary3317 -> tp
x32309:	mov ax, [si]	; 2: 139 4
x32311:	and eax, 65535	; 6: 102 37 255 255 0 0
x32317:	cmp ax, 0	; 3: 131 248 0
x32320:	jge mktime$25	; 2: 125 5
x32322:	neg ax	; 2: 247 216
x32324:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3319 £temporary3316 £temporary3318
x32327:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3319

mktime$27:	; Return £temporary3319
x32330:	mov ax, [bp]	; 3: 139 70 0
x32333:	mov di, [bp + 4]	; 3: 139 126 4
x32336:	mov bp, [bp + 2]	; 3: 139 110 2
x32339:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x32341:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x32347:	mov ax, [bp]	; 3: 139 70 0
x32350:	mov di, [bp + 4]	; 3: 139 126 4
x32353:	mov bp, [bp + 2]	; 3: 139 110 2
x32356:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

@7461$int2$4#:
x32358:	dw 4	; 2: 4 0

@7470$int2$365#:
x32360:	dw 365	; 2: 109 1

@7479$int4$86400#:
x32362:	dd 86400	; 4: 128 81 1 0

@7483$int4$3600#:
x32366:	dd 3600	; 4: 16 14 0 0

@7489$int4$60#:
x32370:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x32374:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32378:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3330 -> timePtr timePtr 0
x32382:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3330 -> timePtr
x32385:	mov eax, [si]	; 3: 102 139 4
x32388:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x32392:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32396:	xor edx, edx	; 3: 102 49 210
x32399:	idiv dword [@7532$int4$86400#]	; 5: 102 247 62 218 128
x32404:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x32408:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32412:	xor edx, edx	; 3: 102 49 210
x32415:	idiv dword [@7536$int4$3600#]	; 5: 102 247 62 222 128
x32420:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3334 secondsOfDay 3600
x32424:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32428:	xor edx, edx	; 3: 102 49 210
x32431:	idiv dword [@7541$int4$3600#]	; 5: 102 247 62 226 128

gmtime$6:	; IntegralToIntegral £temporary3335 £temporary3334
x32436:	cmp eax, 0	; 4: 102 131 248 0
x32440:	jge gmtime$7	; 2: 125 5
x32442:	neg eax	; 3: 102 247 216
x32445:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3335
x32447:	mov [@7499$g_timeStruct + 4], ax	; 3: 163 234 128

gmtime$8:	; SignedDivide £temporary3337 secondsOfHour 60
x32450:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32454:	xor edx, edx	; 3: 102 49 210
x32457:	idiv dword [@7546$int4$60#]	; 5: 102 247 62 248 128

gmtime$9:	; IntegralToIntegral £temporary3338 £temporary3337
x32462:	cmp eax, 0	; 4: 102 131 248 0
x32466:	jge gmtime$10	; 2: 125 5
x32468:	neg eax	; 3: 102 247 216
x32471:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3338
x32473:	mov [@7499$g_timeStruct + 2], ax	; 3: 163 232 128

gmtime$11:	; SignedModulo £temporary3340 secondsOfHour 60
x32476:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32480:	xor edx, edx	; 3: 102 49 210
x32483:	idiv dword [@7551$int4$60#]	; 5: 102 247 62 252 128

gmtime$12:	; IntegralToIntegral £temporary3341 £temporary3340
x32488:	cmp edx, 0	; 4: 102 131 250 0
x32492:	jge gmtime$13	; 2: 125 5
x32494:	neg edx	; 3: 102 247 218
x32497:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3341
x32499:	mov [@7499$g_timeStruct], dx	; 4: 137 22 230 128

gmtime$14:	; SignedDivide totalDays time 86400
x32503:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32507:	xor edx, edx	; 3: 102 49 210
x32510:	idiv dword [@7555$int4$86400#]	; 5: 102 247 62 0 129
x32515:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x32519:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x32524:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3345 totalDays 4
x32526:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32530:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3346 £temporary3345
x32534:	cmp eax, 0	; 4: 102 131 248 0
x32538:	jge gmtime$18	; 2: 125 5
x32540:	neg eax	; 3: 102 247 216
x32543:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3346
x32545:	mov [@7499$g_timeStruct + 12], ax	; 3: 163 242 128

gmtime$19:	; Goto 24
x32548:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3348 totalDays 3
x32550:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32554:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3349 £temporary3348 7
x32558:	xor edx, edx	; 3: 102 49 210
x32561:	idiv dword [@7571$int4$7#]	; 5: 102 247 62 4 129

gmtime$22:	; IntegralToIntegral £temporary3350 £temporary3349
x32566:	cmp edx, 0	; 4: 102 131 250 0
x32570:	jge gmtime$23	; 2: 125 5
x32572:	neg edx	; 3: 102 247 218
x32575:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3350
x32577:	mov [@7499$g_timeStruct + 12], dx	; 4: 137 22 242 128

gmtime$24:	; SignedDivide £temporary3351 totalDays 365
x32581:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32585:	xor edx, edx	; 3: 102 49 210
x32588:	idiv dword [@7576$int4$365#]	; 5: 102 247 62 8 129

gmtime$25:	; BinaryAdd £temporary3352 £temporary3351 1970
x32593:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3353 £temporary3352
x32599:	cmp eax, 0	; 4: 102 131 248 0
x32603:	jge gmtime$27	; 2: 125 5
x32605:	neg eax	; 3: 102 247 216
x32608:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3353
x32610:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3354 year 1969
x32613:	mov ax, [bp + 24]	; 3: 139 70 24
x32616:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3354 4
x32619:	xor dx, dx	; 2: 49 210
x32621:	idiv word [@7586$int2$4#]	; 4: 247 62 12 129
x32625:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x32628:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32632:	xor edx, edx	; 3: 102 49 210
x32635:	idiv dword [@7590$int4$365#]	; 5: 102 247 62 14 129
x32640:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3357 leapDays
x32644:	mov ax, [bp + 26]	; 3: 139 70 26
x32647:	and eax, 65535	; 6: 102 37 255 255 0 0
x32653:	cmp ax, 0	; 3: 131 248 0
x32656:	jge gmtime$32	; 2: 125 5
x32658:	neg ax	; 2: 247 216
x32660:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3357
x32663:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x32667:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x32672:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x32674:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x32677:	mov ax, [bp + 24]	; 3: 139 70 24
x32680:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x32683:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 185 127
x32688:	mov [bp + 30], bp	; 3: 137 110 30
x32691:	add bp, 28	; 3: 131 197 28
x32694:	jmp @7500$isLeapYear	; 3: 233 93 1

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3361

gmtime$40:	; Equal 43 £temporary3361 0
x32697:	cmp bx, 0	; 3: 131 251 0
x32700:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x32702:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x32710:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x32712:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x32720:	mov ax, [bp + 24]	; 3: 139 70 24
x32723:	sub ax, 1900	; 3: 45 108 7
x32726:	mov [@7499$g_timeStruct + 10], ax	; 3: 163 240 128

gmtime$45:	; IntegralToIntegral £temporary3368 totalDays
x32729:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32733:	cmp eax, 0	; 4: 102 131 248 0
x32737:	jge gmtime$46	; 2: 125 5
x32739:	neg eax	; 3: 102 247 216
x32742:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3368
x32744:	mov [@7499$g_timeStruct + 14], ax	; 3: 163 244 128

gmtime$47:	; Assign daysOfMonths[0] 31
x32747:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x32752:	mov ax, [bp + 24]	; 3: 139 70 24
x32755:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x32758:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 4 128
x32763:	mov [bp + 32], bp	; 3: 137 110 32
x32766:	add bp, 30	; 3: 131 197 30
x32769:	jmp @7500$isLeapYear	; 3: 233 18 1

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3369

gmtime$53:	; Equal 56 £temporary3369 0
x32772:	cmp bx, 0	; 3: 131 251 0
x32775:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3374 29
x32777:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x32780:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3374 28
x32782:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3374
x32785:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x32788:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x32793:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x32798:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x32803:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x32808:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x32813:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x32818:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x32823:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x32828:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x32833:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x32838:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; UnsignedMultiply £temporary3388 month 2
x32843:	mov ax, [bp + 52]	; 3: 139 70 52
x32846:	xor dx, dx	; 2: 49 210
x32848:	mul word [@7666$int2$2#]	; 4: 247 38 18 129

gmtime$70:	; BinaryAdd £temporary3389 daysOfMonths £temporary3388
x32852:	mov si, bp	; 2: 137 238
x32854:	add si, 28	; 3: 131 198 28
x32857:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3387 -> £temporary3389 £temporary3389 0

gmtime$72:	; IntegralToIntegral £temporary3390 £temporary3387 -> £temporary3389
x32859:	mov ax, [si]	; 2: 139 4
x32861:	and eax, 65535	; 6: 102 37 255 255 0 0
x32867:	cmp ax, 0	; 3: 131 248 0
x32870:	jge gmtime$73	; 2: 125 5
x32872:	neg ax	; 2: 247 216
x32874:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3390
x32877:	cmp [bp + 20], eax	; 4: 102 57 70 20
x32881:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3392 month
x32883:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x32886:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; UnsignedMultiply £temporary3394 £temporary3392 2
x32889:	xor dx, dx	; 2: 49 210
x32891:	mul word [@7674$int2$2#]	; 4: 247 38 20 129

gmtime$77:	; BinaryAdd £temporary3395 daysOfMonths £temporary3394
x32895:	mov si, bp	; 2: 137 238
x32897:	add si, 28	; 3: 131 198 28
x32900:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3393 -> £temporary3395 £temporary3395 0

gmtime$79:	; IntegralToIntegral £temporary3396 £temporary3393 -> £temporary3395
x32902:	mov ax, [si]	; 2: 139 4
x32904:	and eax, 65535	; 6: 102 37 255 255 0 0
x32910:	cmp ax, 0	; 3: 131 248 0
x32913:	jge gmtime$80	; 2: 125 5
x32915:	neg ax	; 2: 247 216
x32917:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3396
x32920:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x32924:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x32926:	mov ax, [bp + 52]	; 3: 139 70 52
x32929:	mov [@7499$g_timeStruct + 8], ax	; 3: 163 238 128

gmtime$83:	; BinaryAdd £temporary3400 totalDays 1
x32932:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32936:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3401 £temporary3400
x32938:	cmp eax, 0	; 4: 102 131 248 0
x32942:	jge gmtime$85	; 2: 125 5
x32944:	neg eax	; 3: 102 247 216
x32947:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3401
x32949:	mov [@7499$g_timeStruct + 6], ax	; 3: 163 236 128

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x32952:	mov word [@7499$g_timeStruct + 16], -1	; 6: 199 6 246 128 255 255

gmtime$87:	; SetReturnValue (@7499$g_timeStruct,0)
x32958:	mov bx, @7499$g_timeStruct	; 3: 187 230 128

gmtime$88:	; Return (@7499$g_timeStruct,0)
x32961:	mov ax, [bp]	; 3: 139 70 0
x32964:	mov di, [bp + 4]	; 3: 139 126 4
x32967:	mov bp, [bp + 2]	; 3: 139 110 2
x32970:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x32972:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x32975:	mov ax, [bp]	; 3: 139 70 0
x32978:	mov di, [bp + 4]	; 3: 139 126 4
x32981:	mov bp, [bp + 2]	; 3: 139 110 2
x32984:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@7532$int4$86400#:
x32986:	dd 86400	; 4: 128 81 1 0

@7536$int4$3600#:
x32990:	dd 3600	; 4: 16 14 0 0

@7541$int4$3600#:
x32994:	dd 3600	; 4: 16 14 0 0

@7499$g_timeStruct:
x32998:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7546$int4$60#:
x33016:	dd 60	; 4: 60 0 0 0

@7551$int4$60#:
x33020:	dd 60	; 4: 60 0 0 0

@7555$int4$86400#:
x33024:	dd 86400	; 4: 128 81 1 0

@7571$int4$7#:
x33028:	dd 7	; 4: 7 0 0 0

@7576$int4$365#:
x33032:	dd 365	; 4: 109 1 0 0

@7586$int2$4#:
x33036:	dw 4	; 2: 4 0

@7590$int4$365#:
x33038:	dd 365	; 4: 109 1 0 0

@7666$int2$2#:
x33042:	dw 2	; 2: 2 0

@7674$int2$2#:
x33044:	dw 2	; 2: 2 0

@7500$isLeapYear:	; SignedModulo £temporary3320 year 4
x33046:	mov ax, [bp + 6]	; 3: 139 70 6
x33049:	xor dx, dx	; 2: 49 210
x33051:	idiv word [@7502$int2$4#]	; 4: 247 62 83 129

@7500$isLeapYear$1:	; NotEqual 4 £temporary3320 0
x33055:	cmp dx, 0	; 3: 131 250 0
x33058:	jne @7500$isLeapYear$4	; 2: 117 14

@7500$isLeapYear$2:	; SignedModulo £temporary3322 year 100
x33060:	mov ax, [bp + 6]	; 3: 139 70 6
x33063:	xor dx, dx	; 2: 49 210
x33065:	idiv word [@7508$int2$100#]	; 4: 247 62 85 129

@7500$isLeapYear$3:	; NotEqual 6 £temporary3322 0
x33069:	cmp dx, 0	; 3: 131 250 0
x33072:	jne @7500$isLeapYear$6	; 2: 117 14

@7500$isLeapYear$4:	; SignedModulo £temporary3325 year 400
x33074:	mov ax, [bp + 6]	; 3: 139 70 6
x33077:	xor dx, dx	; 2: 49 210
x33079:	idiv word [@7515$int2$400#]	; 4: 247 62 87 129

@7500$isLeapYear$5:	; NotEqual 8 £temporary3325 0
x33083:	cmp dx, 0	; 3: 131 250 0
x33086:	jne @7500$isLeapYear$8	; 2: 117 5

@7500$isLeapYear$6:	; Assign £temporary3328 1
x33088:	mov bx, 1	; 3: 187 1 0

@7500$isLeapYear$7:	; Goto 9
x33091:	jmp @7500$isLeapYear$9	; 2: 235 3

@7500$isLeapYear$8:	; Assign £temporary3328 0
x33093:	mov bx, 0	; 3: 187 0 0

@7500$isLeapYear$9:	; SetReturnValue £temporary3328

@7500$isLeapYear$10:	; Return £temporary3328
x33096:	mov ax, [bp]	; 3: 139 70 0
x33099:	mov di, [bp + 4]	; 3: 139 126 4
x33102:	mov bp, [bp + 2]	; 3: 139 110 2
x33105:	jmp ax	; 2: 255 224

@7500$isLeapYear$11:	; FunctionEnd isLeapYear

@7502$int2$4#:
x33107:	dw 4	; 2: 4 0

@7508$int2$100#:
x33109:	dw 100	; 2: 100 0

@7515$int2$400#:
x33111:	dw 400	; 2: 144 1

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x33113:	mov ax, [bp + 6]	; 3: 139 70 6
x33116:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x33119:	mov word [bp + 8], localtime$3	; 5: 199 70 8 109 129
x33124:	mov [bp + 10], bp	; 3: 137 110 10
x33127:	add bp, 8	; 3: 131 197 8
x33130:	jmp gmtime	; 3: 233 9 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3457

localtime$5:	; Assign tmPtr £temporary3457
x33133:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$7:	; Call 10 localeconv 0
x33136:	mov word [bp + 10], localtime$8	; 5: 199 70 10 126 129
x33141:	mov [bp + 12], bp	; 3: 137 110 12
x33144:	add bp, 10	; 3: 131 197 10
x33147:	jmp localeconv	; 3: 233 249 156

localtime$8:	; PostCall 10

localtime$9:	; GetReturnValue £temporary3458

localtime$10:	; Assign localeConvPtr £temporary3458
x33150:	mov [bp + 10], bx	; 3: 137 94 10

localtime$11:	; Assign timeZone 0
x33153:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

localtime$12:	; Equal 21 localeConvPtr 0
x33158:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x33162:	je localtime$21	; 2: 116 25

localtime$13:	; Deref £temporary3460 -> tmPtr tmPtr 16
x33164:	mov si, [bp + 8]	; 3: 139 118 8

localtime$14:	; NotEqual 18 £temporary3460 -> tmPtr 1
x33167:	cmp word [si + 16], 1	; 4: 131 124 16 1
x33171:	jne localtime$18	; 2: 117 7

localtime$15:	; Deref £temporary3462 -> localeConvPtr localeConvPtr 0
x33173:	mov si, [bp + 10]	; 3: 139 118 10

localtime$16:	; Assign £temporary3467 £temporary3462 -> localeConvPtr
x33176:	mov ax, [si]	; 2: 139 4

localtime$17:	; Goto 20
x33178:	jmp localtime$20	; 2: 235 6

localtime$18:	; Deref £temporary3463 -> localeConvPtr localeConvPtr 2
x33180:	mov si, [bp + 10]	; 3: 139 118 10

localtime$19:	; Assign £temporary3467 £temporary3463 -> localeConvPtr
x33183:	mov ax, [si + 2]	; 3: 139 68 2

localtime$20:	; Assign timeZone £temporary3467
x33186:	mov [bp + 12], ax	; 3: 137 70 12

localtime$21:	; Deref £temporary3468 -> timePtr timePtr 0
x33189:	mov si, [bp + 6]	; 3: 139 118 6

localtime$22:	; IntegralToIntegral £temporary3469 timeZone
x33192:	mov ax, [bp + 12]	; 3: 139 70 12
x33195:	and eax, 65535	; 6: 102 37 255 255 0 0
x33201:	cmp ax, 0	; 3: 131 248 0
x33204:	jge localtime$23	; 2: 125 5
x33206:	neg ax	; 2: 247 216
x33208:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3470 £temporary3469 3600
x33211:	xor edx, edx	; 3: 102 49 210
x33214:	imul dword [@7857$int4$3600#]	; 5: 102 247 46 238 129

localtime$24:	; BinaryAdd t £temporary3468 -> timePtr £temporary3470
x33219:	mov ebx, [si]	; 3: 102 139 28
x33222:	add ebx, eax	; 3: 102 1 195
x33225:	mov [bp + 14], ebx	; 4: 102 137 94 14

localtime$25:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3472 t
x33229:	mov si, bp	; 2: 137 238
x33231:	add si, 14	; 3: 131 198 14

localtime$27:	; Parameter 18 £temporary3472 6
x33234:	mov [bp + 24], si	; 3: 137 118 24

localtime$28:	; Call 18 gmtime 0
x33237:	mov word [bp + 18], localtime$29	; 5: 199 70 18 227 129
x33242:	mov [bp + 20], bp	; 3: 137 110 20
x33245:	add bp, 18	; 3: 131 197 18
x33248:	jmp gmtime	; 3: 233 147 252

localtime$29:	; PostCall 18

localtime$30:	; GetReturnValue £temporary3473

localtime$31:	; SetReturnValue £temporary3473

localtime$32:	; Return £temporary3473
x33251:	mov ax, [bp]	; 3: 139 70 0
x33254:	mov di, [bp + 4]	; 3: 139 126 4
x33257:	mov bp, [bp + 2]	; 3: 139 110 2
x33260:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

@7857$int4$3600#:
x33262:	dd 3600	; 4: 16 14 0 0

asctime:	; Assign localeConvPtr 0
x33266:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 5 localeConvPtr 0
x33271:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33275:	je asctime$5	; 2: 116 8

asctime$2:	; Deref £temporary3408 -> localeConvPtr localeConvPtr 4
x33277:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Assign £temporary3412 £temporary3408 -> localeConvPtr
x33280:	mov ax, [si + 4]	; 3: 139 68 4

asctime$4:	; Goto 6
x33283:	jmp asctime$6	; 2: 235 3

asctime$5:	; Assign £temporary3412 0
x33285:	mov ax, 0	; 3: 184 0 0

asctime$6:	; Assign shortDayList £temporary3412
x33288:	mov [bp + 10], ax	; 3: 137 70 10

asctime$7:	; Equal 11 localeConvPtr 0
x33291:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33295:	je asctime$11	; 2: 116 8

asctime$8:	; Deref £temporary3414 -> localeConvPtr localeConvPtr 8
x33297:	mov si, [bp + 8]	; 3: 139 118 8

asctime$9:	; Assign £temporary3418 £temporary3414 -> localeConvPtr
x33300:	mov ax, [si + 8]	; 3: 139 68 8

asctime$10:	; Goto 12
x33303:	jmp asctime$12	; 2: 235 3

asctime$11:	; Assign £temporary3418 0
x33305:	mov ax, 0	; 3: 184 0 0

asctime$12:	; Assign shortMonthList £temporary3418
x33308:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Equal 16 shortDayList 0
x33311:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x33315:	je asctime$16	; 2: 116 5

asctime$14:	; Assign £temporary3423 shortDayList
x33317:	mov ax, [bp + 10]	; 3: 139 70 10

asctime$15:	; Goto 17
x33320:	jmp asctime$17	; 2: 235 3

asctime$16:	; Assign £temporary3423 g_defaultShortDayList
x33322:	mov ax, @7708$g_defaultShortDayList	; 3: 184 199 130

asctime$17:	; Assign shortDayList £temporary3423
x33325:	mov [bp + 10], ax	; 3: 137 70 10

asctime$18:	; Equal 21 shortMonthList 0
x33328:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x33332:	je asctime$21	; 2: 116 5

asctime$19:	; Assign £temporary3428 shortMonthList
x33334:	mov ax, [bp + 12]	; 3: 139 70 12

asctime$20:	; Goto 22
x33337:	jmp asctime$22	; 2: 235 3

asctime$21:	; Assign £temporary3428 g_defaultShortMonthList
x33339:	mov ax, @7729$g_defaultShortMonthList	; 3: 184 241 130

asctime$22:	; Assign shortMonthList £temporary3428
x33342:	mov [bp + 12], ax	; 3: 137 70 12

asctime$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$24:	; Parameter 14 g_timeString 6
x33345:	mov word [bp + 20], @7700$g_timeString	; 5: 199 70 20 57 131

asctime$25:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x33350:	mov word [bp + 22], @7797$string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 57 132

asctime$26:	; Deref £temporary3429 -> tp tp 12
x33355:	mov si, [bp + 6]	; 3: 139 118 6

asctime$27:	; UnsignedMultiply £temporary3431 £temporary3429 -> tp 2
x33358:	mov ax, [si + 12]	; 3: 139 68 12
x33361:	xor dx, dx	; 2: 49 210
x33363:	mul word [@7800$int2$2#]	; 4: 247 38 84 132

asctime$28:	; BinaryAdd £temporary3432 shortDayList £temporary3431
x33367:	mov si, [bp + 10]	; 3: 139 118 10
x33370:	add si, ax	; 2: 1 198

asctime$29:	; Deref £temporary3430 -> £temporary3432 £temporary3432 0

asctime$30:	; Parameter 14 £temporary3430 -> £temporary3432 10
x33372:	mov ax, [si]	; 2: 139 4
x33374:	mov [bp + 24], ax	; 3: 137 70 24

asctime$31:	; Deref £temporary3433 -> tp tp 8
x33377:	mov si, [bp + 6]	; 3: 139 118 6

asctime$32:	; UnsignedMultiply £temporary3435 £temporary3433 -> tp 2
x33380:	mov ax, [si + 8]	; 3: 139 68 8
x33383:	xor dx, dx	; 2: 49 210
x33385:	mul word [@7805$int2$2#]	; 4: 247 38 86 132

asctime$33:	; BinaryAdd £temporary3436 shortMonthList £temporary3435
x33389:	mov si, [bp + 12]	; 3: 139 118 12
x33392:	add si, ax	; 2: 1 198

asctime$34:	; Deref £temporary3434 -> £temporary3436 £temporary3436 0

asctime$35:	; Parameter 14 £temporary3434 -> £temporary3436 12
x33394:	mov ax, [si]	; 2: 139 4
x33396:	mov [bp + 26], ax	; 3: 137 70 26

asctime$36:	; Deref £temporary3437 -> tp tp 6
x33399:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; Parameter 14 £temporary3437 -> tp 14
x33402:	mov ax, [si + 6]	; 3: 139 68 6
x33405:	mov [bp + 28], ax	; 3: 137 70 28

asctime$38:	; Deref £temporary3438 -> tp tp 4
x33408:	mov si, [bp + 6]	; 3: 139 118 6

asctime$39:	; Parameter 14 £temporary3438 -> tp 16
x33411:	mov ax, [si + 4]	; 3: 139 68 4
x33414:	mov [bp + 30], ax	; 3: 137 70 30

asctime$40:	; Deref £temporary3439 -> tp tp 2
x33417:	mov si, [bp + 6]	; 3: 139 118 6

asctime$41:	; Parameter 14 £temporary3439 -> tp 18
x33420:	mov ax, [si + 2]	; 3: 139 68 2
x33423:	mov [bp + 32], ax	; 3: 137 70 32

asctime$42:	; Deref £temporary3440 -> tp tp 0
x33426:	mov si, [bp + 6]	; 3: 139 118 6

asctime$43:	; Parameter 14 £temporary3440 -> tp 20
x33429:	mov ax, [si]	; 2: 139 4
x33431:	mov [bp + 34], ax	; 3: 137 70 34

asctime$44:	; Deref £temporary3441 -> tp tp 10
x33434:	mov si, [bp + 6]	; 3: 139 118 6

asctime$45:	; BinaryAdd £temporary3442 £temporary3441 -> tp 1900
x33437:	mov ax, [si + 10]	; 3: 139 68 10
x33440:	add ax, 1900	; 3: 5 108 7

asctime$46:	; Parameter 14 £temporary3442 22
x33443:	mov [bp + 36], ax	; 3: 137 70 36

asctime$47:	; Call 14 sprintf 0
x33446:	mov word [bp + 14], asctime$48	; 5: 199 70 14 185 130
x33451:	mov [bp + 16], bp	; 3: 137 110 16
x33454:	add bp, 14	; 3: 131 197 14
x33457:	mov di, bp	; 2: 137 239
x33459:	add di, 14	; 3: 131 199 14
x33462:	jmp sprintf	; 3: 233 159 1

asctime$48:	; PostCall 14

asctime$49:	; SetReturnValue g_timeString
x33465:	mov bx, @7700$g_timeString	; 3: 187 57 131

asctime$50:	; Return g_timeString
x33468:	mov ax, [bp]	; 3: 139 70 0
x33471:	mov di, [bp + 4]	; 3: 139 126 4
x33474:	mov bp, [bp + 2]	; 3: 139 110 2
x33477:	jmp ax	; 2: 255 224

asctime$51:	; FunctionEnd asctime

@7708$g_defaultShortDayList:
x33479:	dw @7701$string_Sun# ; 2: 213 130
x33481:	dw @7702$string_Mon# ; 2: 217 130
x33483:	dw @7703$string_Tue# ; 2: 221 130
x33485:	dw @7704$string_Wed# ; 2: 225 130
x33487:	dw @7705$string_Thu# ; 2: 229 130
x33489:	dw @7706$string_Fri# ; 2: 233 130
x33491:	dw @7707$string_Sat# ; 2: 237 130

@7701$string_Sun#:
x33493:	db "Sun", 0	; 4: 83 117 110 0

@7702$string_Mon#:
x33497:	db "Mon", 0	; 4: 77 111 110 0

@7703$string_Tue#:
x33501:	db "Tue", 0	; 4: 84 117 101 0

@7704$string_Wed#:
x33505:	db "Wed", 0	; 4: 87 101 100 0

@7705$string_Thu#:
x33509:	db "Thu", 0	; 4: 84 104 117 0

@7706$string_Fri#:
x33513:	db "Fri", 0	; 4: 70 114 105 0

@7707$string_Sat#:
x33517:	db "Sat", 0	; 4: 83 97 116 0

@7729$g_defaultShortMonthList:
x33521:	dw @7717$string_Jan# ; 2: 9 131
x33523:	dw @7718$string_Feb# ; 2: 13 131
x33525:	dw @7719$string_Mar# ; 2: 17 131
x33527:	dw @7720$string_Apr# ; 2: 21 131
x33529:	dw @7721$string_May# ; 2: 25 131
x33531:	dw @7722$string_Jun# ; 2: 29 131
x33533:	dw @7723$string_Jul# ; 2: 33 131
x33535:	dw @7724$string_Aug# ; 2: 37 131
x33537:	dw @7725$string_Sep# ; 2: 41 131
x33539:	dw @7726$string_Oct# ; 2: 45 131
x33541:	dw @7727$string_Nov# ; 2: 49 131
x33543:	dw @7728$string_Dec# ; 2: 53 131

@7717$string_Jan#:
x33545:	db "Jan", 0	; 4: 74 97 110 0

@7718$string_Feb#:
x33549:	db "Feb", 0	; 4: 70 101 98 0

@7719$string_Mar#:
x33553:	db "Mar", 0	; 4: 77 97 114 0

@7720$string_Apr#:
x33557:	db "Apr", 0	; 4: 65 112 114 0

@7721$string_May#:
x33561:	db "May", 0	; 4: 77 97 121 0

@7722$string_Jun#:
x33565:	db "Jun", 0	; 4: 74 117 110 0

@7723$string_Jul#:
x33569:	db "Jul", 0	; 4: 74 117 108 0

@7724$string_Aug#:
x33573:	db "Aug", 0	; 4: 65 117 103 0

@7725$string_Sep#:
x33577:	db "Sep", 0	; 4: 83 101 112 0

@7726$string_Oct#:
x33581:	db "Oct", 0	; 4: 79 99 116 0

@7727$string_Nov#:
x33585:	db "Nov", 0	; 4: 78 111 118 0

@7728$string_Dec#:
x33589:	db "Dec", 0	; 4: 68 101 99 0

@7700$g_timeString:
x33593:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7797$string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x33849:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

@7800$int2$2#:
x33876:	dw 2	; 2: 2 0

@7805$int2$2#:
x33878:	dw 2	; 2: 2 0

sprintf:	; address £temporary2218 format
x33880:	mov si, bp	; 2: 137 238
x33882:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2219 £temporary2218

sprintf$2:	; BinaryAdd arg_list £temporary2219 2
x33885:	add si, 2	; 3: 131 198 2
x33888:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x33891:	mov ax, [bp + 6]	; 3: 139 70 6
x33894:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x33897:	mov ax, [bp + 8]	; 3: 139 70 8
x33900:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x33903:	mov ax, [di + 10]	; 3: 139 69 10
x33906:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x33909:	mov word [di + 12], sprintf$8	; 5: 199 69 12 136 132
x33914:	mov [di + 14], bp	; 3: 137 109 14
x33917:	mov [di + 16], di	; 3: 137 125 16
x33920:	add di, 12	; 3: 131 199 12
x33923:	mov bp, di	; 2: 137 253
x33925:	nop	; 1: 144
x33926:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2221

sprintf$10:	; SetReturnValue £temporary2221

sprintf$11:	; Return £temporary2221
x33928:	mov ax, [bp]	; 3: 139 70 0
x33931:	mov di, [bp + 4]	; 3: 139 126 4
x33934:	mov bp, [bp + 2]	; 3: 139 110 2
x33937:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x33939:	mov word [g_outStatus], 1	; 6: 199 6 219 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2226 outString
x33945:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2226
x33948:	mov [g_outDevice], ax	; 3: 163 221 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x33951:	mov ax, [bp + 8]	; 3: 139 70 8
x33954:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x33957:	mov ax, [bp + 10]	; 3: 139 70 10
x33960:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x33963:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 185 132
x33968:	mov [bp + 14], bp	; 3: 137 110 14
x33971:	add bp, 12	; 3: 131 197 12
x33974:	jmp printFormat	; 3: 233 38 139

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2227

vsprintf$9:	; SetReturnValue £temporary2227

vsprintf$10:	; Return £temporary2227
x33977:	mov ax, [bp]	; 3: 139 70 0
x33980:	mov di, [bp + 4]	; 3: 139 126 4
x33983:	mov bp, [bp + 2]	; 3: 139 110 2
x33986:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x33988:	mov ax, [bp + 6]	; 3: 139 70 6
x33991:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x33994:	mov word [bp + 8], ctime$4	; 5: 199 70 8 216 132
x33999:	mov [bp + 10], bp	; 3: 137 110 10
x34002:	add bp, 8	; 3: 131 197 8
x34005:	jmp localtime	; 3: 233 129 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3453

ctime$6:	; Parameter 8 £temporary3453 6
x34008:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x34011:	mov word [bp + 8], ctime$8	; 5: 199 70 8 233 132
x34016:	mov [bp + 10], bp	; 3: 137 110 10
x34019:	add bp, 8	; 3: 131 197 8
x34022:	jmp asctime	; 3: 233 9 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3454

ctime$10:	; SetReturnValue £temporary3454

ctime$11:	; Return £temporary3454
x34025:	mov ax, [bp]	; 3: 139 70 0
x34028:	mov di, [bp + 4]	; 3: 139 126 4
x34031:	mov bp, [bp + 2]	; 3: 139 110 2
x34034:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x34036:	mov word [bp + 14], strftime$2	; 5: 199 70 14 2 133
x34041:	mov [bp + 16], bp	; 3: 137 110 16
x34044:	add bp, 14	; 3: 131 197 14
x34047:	jmp localeconv	; 3: 233 117 153

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3477

strftime$4:	; Assign localeConvPtr £temporary3477
x34050:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 9 localeConvPtr 0
x34053:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34057:	je strftime$9	; 2: 116 8

strftime$6:	; Deref £temporary3479 -> localeConvPtr localeConvPtr 4
x34059:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Assign £temporary3483 £temporary3479 -> localeConvPtr
x34062:	mov ax, [si + 4]	; 3: 139 68 4

strftime$8:	; Goto 10
x34065:	jmp strftime$10	; 2: 235 3

strftime$9:	; Assign £temporary3483 0
x34067:	mov ax, 0	; 3: 184 0 0

strftime$10:	; Assign shortDayList £temporary3483
x34070:	mov [bp + 16], ax	; 3: 137 70 16

strftime$11:	; Equal 15 localeConvPtr 0
x34073:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34077:	je strftime$15	; 2: 116 8

strftime$12:	; Deref £temporary3485 -> localeConvPtr localeConvPtr 8
x34079:	mov si, [bp + 14]	; 3: 139 118 14

strftime$13:	; Assign £temporary3489 £temporary3485 -> localeConvPtr
x34082:	mov ax, [si + 8]	; 3: 139 68 8

strftime$14:	; Goto 16
x34085:	jmp strftime$16	; 2: 235 3

strftime$15:	; Assign £temporary3489 0
x34087:	mov ax, 0	; 3: 184 0 0

strftime$16:	; Assign shortMonthList £temporary3489
x34090:	mov [bp + 18], ax	; 3: 137 70 18

strftime$17:	; Equal 21 localeConvPtr 0
x34093:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34097:	je strftime$21	; 2: 116 8

strftime$18:	; Deref £temporary3491 -> localeConvPtr localeConvPtr 6
x34099:	mov si, [bp + 14]	; 3: 139 118 14

strftime$19:	; Assign £temporary3495 £temporary3491 -> localeConvPtr
x34102:	mov ax, [si + 6]	; 3: 139 68 6

strftime$20:	; Goto 22
x34105:	jmp strftime$22	; 2: 235 3

strftime$21:	; Assign £temporary3495 0
x34107:	mov ax, 0	; 3: 184 0 0

strftime$22:	; Assign longDayList £temporary3495
x34110:	mov [bp + 20], ax	; 3: 137 70 20

strftime$23:	; Equal 27 localeConvPtr 0
x34113:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34117:	je strftime$27	; 2: 116 8

strftime$24:	; Deref £temporary3497 -> localeConvPtr localeConvPtr 10
x34119:	mov si, [bp + 14]	; 3: 139 118 14

strftime$25:	; Assign £temporary3501 £temporary3497 -> localeConvPtr
x34122:	mov ax, [si + 10]	; 3: 139 68 10

strftime$26:	; Goto 28
x34125:	jmp strftime$28	; 2: 235 3

strftime$27:	; Assign £temporary3501 0
x34127:	mov ax, 0	; 3: 184 0 0

strftime$28:	; Assign longMonthList £temporary3501
x34130:	mov [bp + 22], ax	; 3: 137 70 22

strftime$29:	; Deref £temporary3502 -> tp tp 10
x34133:	mov si, [bp + 12]	; 3: 139 118 12

strftime$30:	; BinarySubtract £temporary3503 £temporary3502 -> tp 69
x34136:	mov ax, [si + 10]	; 3: 139 68 10
x34139:	sub ax, 69	; 3: 131 232 69

strftime$31:	; SignedDivide leapDays £temporary3503 4
x34142:	xor dx, dx	; 2: 49 210
x34144:	idiv word [@7935$int2$4#]	; 4: 247 62 206 139
x34148:	mov [bp + 24], ax	; 3: 137 70 24

strftime$32:	; Deref £temporary3505 -> tp tp 10
x34151:	mov si, [bp + 12]	; 3: 139 118 12

strftime$33:	; BinarySubtract £temporary3506 £temporary3505 -> tp 70
x34154:	mov ax, [si + 10]	; 3: 139 68 10
x34157:	sub ax, 70	; 3: 131 232 70

strftime$34:	; SignedMultiply £temporary3507 £temporary3506 365
x34160:	xor dx, dx	; 2: 49 210
x34162:	imul word [@7943$int2$365#]	; 4: 247 46 208 139

strftime$35:	; BinaryAdd £temporary3508 £temporary3507 leapDays
x34166:	add ax, [bp + 24]	; 3: 3 70 24

strftime$36:	; Deref £temporary3509 -> tp tp 14
x34169:	mov si, [bp + 12]	; 3: 139 118 12

strftime$37:	; BinaryAdd £temporary3510 £temporary3508 £temporary3509 -> tp
x34172:	add ax, [si + 14]	; 3: 3 68 14

strftime$38:	; IntegralToIntegral £temporary3511 £temporary3510
x34175:	and eax, 65535	; 6: 102 37 255 255 0 0
x34181:	cmp ax, 0	; 3: 131 248 0
x34184:	jge strftime$39	; 2: 125 5
x34186:	neg ax	; 2: 247 216
x34188:	neg eax	; 3: 102 247 216

strftime$39:	; Assign totalDays £temporary3511
x34191:	mov [bp + 26], eax	; 4: 102 137 70 26

strftime$40:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$41:	; Parameter 34 s 6
x34195:	mov ax, [bp + 6]	; 3: 139 70 6
x34198:	mov [bp + 40], ax	; 3: 137 70 40

strftime$42:	; Parameter 34 string_# 8
x34201:	mov word [bp + 42], @7952$string_#	; 5: 199 70 42 210 139

strftime$43:	; Call 34 strcpy 0
x34206:	mov word [bp + 34], strftime$44	; 5: 199 70 34 172 133
x34211:	mov [bp + 36], bp	; 3: 137 110 36
x34214:	add bp, 34	; 3: 131 197 34
x34217:	jmp strcpy	; 3: 233 19 217

strftime$44:	; PostCall 34

strftime$45:	; Equal 48 shortDayList 0
x34220:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x34224:	je strftime$48	; 2: 116 5

strftime$46:	; Assign £temporary3517 shortDayList
x34226:	mov ax, [bp + 16]	; 3: 139 70 16

strftime$47:	; Goto 49
x34229:	jmp strftime$49	; 2: 235 3

strftime$48:	; Assign £temporary3517 g_defaultShortDayList
x34231:	mov ax, @7708$g_defaultShortDayList	; 3: 184 199 130

strftime$49:	; Assign shortDayList £temporary3517
x34234:	mov [bp + 16], ax	; 3: 137 70 16

strftime$50:	; Equal 53 longDayList 0
x34237:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x34241:	je strftime$53	; 2: 116 5

strftime$51:	; Assign £temporary3522 longDayList
x34243:	mov ax, [bp + 20]	; 3: 139 70 20

strftime$52:	; Goto 54
x34246:	jmp strftime$54	; 2: 235 3

strftime$53:	; Assign £temporary3522 g_defaultLongDayList
x34248:	mov ax, @7716$g_defaultLongDayList	; 3: 184 211 139

strftime$54:	; Assign longDayList £temporary3522
x34251:	mov [bp + 20], ax	; 3: 137 70 20

strftime$55:	; Equal 58 shortMonthList 0
x34254:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x34258:	je strftime$58	; 2: 116 5

strftime$56:	; Assign £temporary3527 shortMonthList
x34260:	mov ax, [bp + 18]	; 3: 139 70 18

strftime$57:	; Goto 59
x34263:	jmp strftime$59	; 2: 235 3

strftime$58:	; Assign £temporary3527 g_defaultShortMonthList
x34265:	mov ax, @7729$g_defaultShortMonthList	; 3: 184 241 130

strftime$59:	; Assign shortMonthList £temporary3527
x34268:	mov [bp + 18], ax	; 3: 137 70 18

strftime$60:	; Equal 63 longMonthList 0
x34271:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x34275:	je strftime$63	; 2: 116 5

strftime$61:	; Assign £temporary3532 longMonthList
x34277:	mov ax, [bp + 22]	; 3: 139 70 22

strftime$62:	; Goto 64
x34280:	jmp strftime$64	; 2: 235 3

strftime$63:	; Assign £temporary3532 g_defaultLongMonthList
x34282:	mov ax, @7742$g_defaultLongMonthList	; 3: 184 26 140

strftime$64:	; Assign longMonthList £temporary3532
x34285:	mov [bp + 22], ax	; 3: 137 70 22

strftime$65:	; SignedGreaterThanEqual 70 totalDays 3
x34288:	cmp dword [bp + 26], 3	; 5: 102 131 126 26 3
x34293:	jge strftime$70	; 2: 125 24

strftime$66:	; BinaryAdd £temporary3534 totalDays 4
x34295:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34299:	add eax, 4	; 4: 102 131 192 4

strftime$67:	; IntegralToIntegral £temporary3535 £temporary3534
x34303:	cmp eax, 0	; 4: 102 131 248 0
x34307:	jge strftime$68	; 2: 125 5
x34309:	neg eax	; 3: 102 247 216
x34312:	neg ax	; 2: 247 216

strftime$68:	; Assign yearDaySunday £temporary3535
x34314:	mov [bp + 30], ax	; 3: 137 70 30

strftime$69:	; Goto 74
x34317:	jmp strftime$74	; 2: 235 30

strftime$70:	; BinarySubtract £temporary3536 totalDays 3
x34319:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34323:	sub eax, 3	; 4: 102 131 232 3

strftime$71:	; SignedModulo £temporary3537 £temporary3536 7
x34327:	xor edx, edx	; 3: 102 49 210
x34330:	idiv dword [@8005$int4$7#]	; 5: 102 247 62 136 140

strftime$72:	; IntegralToIntegral £temporary3538 £temporary3537
x34335:	cmp edx, 0	; 4: 102 131 250 0
x34339:	jge strftime$73	; 2: 125 5
x34341:	neg edx	; 3: 102 247 218
x34344:	neg dx	; 2: 247 218

strftime$73:	; Assign yearDaySunday £temporary3538
x34346:	mov [bp + 30], dx	; 3: 137 86 30

strftime$74:	; SignedGreaterThanEqual 79 totalDays 4
x34349:	cmp dword [bp + 26], 4	; 5: 102 131 126 26 4
x34354:	jge strftime$79	; 2: 125 24

strftime$75:	; BinaryAdd £temporary3540 totalDays 3
x34356:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34360:	add eax, 3	; 4: 102 131 192 3

strftime$76:	; IntegralToIntegral £temporary3541 £temporary3540
x34364:	cmp eax, 0	; 4: 102 131 248 0
x34368:	jge strftime$77	; 2: 125 5
x34370:	neg eax	; 3: 102 247 216
x34373:	neg ax	; 2: 247 216

strftime$77:	; Assign yearDayMonday £temporary3541
x34375:	mov [bp + 32], ax	; 3: 137 70 32

strftime$78:	; Goto 83
x34378:	jmp strftime$83	; 2: 235 30

strftime$79:	; BinarySubtract £temporary3542 totalDays 4
x34380:	mov eax, [bp + 26]	; 4: 102 139 70 26
x34384:	sub eax, 4	; 4: 102 131 232 4

strftime$80:	; SignedModulo £temporary3543 £temporary3542 7
x34388:	xor edx, edx	; 3: 102 49 210
x34391:	idiv dword [@8019$int4$7#]	; 5: 102 247 62 140 140

strftime$81:	; IntegralToIntegral £temporary3544 £temporary3543
x34396:	cmp edx, 0	; 4: 102 131 250 0
x34400:	jge strftime$82	; 2: 125 5
x34402:	neg edx	; 3: 102 247 218
x34405:	neg dx	; 2: 247 218

strftime$82:	; Assign yearDayMonday £temporary3544
x34407:	mov [bp + 32], dx	; 3: 137 86 32

strftime$83:	; Assign index 0
x34410:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

strftime$84:	; BinaryAdd £temporary3546 fmt index
x34415:	mov si, [bp + 10]	; 3: 139 118 10
x34418:	add si, [bp + 34]	; 3: 3 118 34

strftime$85:	; Deref £temporary3545 -> £temporary3546 £temporary3546 0

strftime$86:	; Equal 356 £temporary3545 -> £temporary3546 0
x34421:	cmp byte [si], 0	; 3: 128 60 0
x34424:	je strftime$356	; 4: 15 132 51 5

strftime$87:	; BinaryAdd £temporary3550 fmt index
x34428:	mov si, [bp + 10]	; 3: 139 118 10
x34431:	add si, [bp + 34]	; 3: 3 118 34

strftime$88:	; Deref £temporary3549 -> £temporary3550 £temporary3550 0

strftime$89:	; NotEqual 329 £temporary3549 -> £temporary3550 37
x34434:	cmp byte [si], 37	; 3: 128 60 37
x34437:	jne strftime$329	; 4: 15 133 179 4

strftime$90:	; Increment index
x34441:	inc word [bp + 34]	; 3: 255 70 34

strftime$91:	; Assign £temporary3552 index
x34444:	mov ax, [bp + 34]	; 3: 139 70 34

strftime$92:	; BinaryAdd £temporary3554 fmt £temporary3552
x34447:	mov si, [bp + 10]	; 3: 139 118 10
x34450:	add si, ax	; 2: 1 198

strftime$93:	; Deref £temporary3553 -> £temporary3554 £temporary3554 0

strftime$94:	; Case 118 £temporary3553 -> £temporary3554 97
x34452:	mov al, [si]	; 2: 138 4
x34454:	cmp al, 97	; 2: 60 97
x34456:	je strftime$118	; 4: 15 132 129 0

strftime$95:	; Case 128 £temporary3553 -> £temporary3554 65
x34460:	cmp al, 65	; 2: 60 65
x34462:	je strftime$128	; 4: 15 132 169 0

strftime$96:	; Case 138 £temporary3553 -> £temporary3554 98
x34466:	cmp al, 98	; 2: 60 98
x34468:	je strftime$138	; 4: 15 132 209 0

strftime$97:	; Case 148 £temporary3553 -> £temporary3554 66
x34472:	cmp al, 66	; 2: 60 66
x34474:	je strftime$148	; 4: 15 132 249 0

strftime$98:	; Case 158 £temporary3553 -> £temporary3554 99
x34478:	cmp al, 99	; 2: 60 99
x34480:	je strftime$158	; 4: 15 132 33 1

strftime$99:	; Case 178 £temporary3553 -> £temporary3554 100
x34484:	cmp al, 100	; 2: 60 100
x34486:	je strftime$178	; 4: 15 132 118 1

strftime$100:	; Case 186 £temporary3553 -> £temporary3554 72
x34490:	cmp al, 72	; 2: 60 72
x34492:	je strftime$186	; 4: 15 132 155 1

strftime$101:	; Case 194 £temporary3553 -> £temporary3554 73
x34496:	cmp al, 73	; 2: 60 73
x34498:	je strftime$194	; 4: 15 132 192 1

strftime$102:	; Case 203 £temporary3553 -> £temporary3554 106
x34502:	cmp al, 106	; 2: 60 106
x34504:	je strftime$203	; 4: 15 132 235 1

strftime$103:	; Case 211 £temporary3553 -> £temporary3554 109
x34508:	cmp al, 109	; 2: 60 109
x34510:	je strftime$211	; 4: 15 132 16 2

strftime$104:	; Case 220 £temporary3553 -> £temporary3554 77
x34514:	cmp al, 77	; 2: 60 77
x34516:	je strftime$220	; 4: 15 132 54 2

strftime$105:	; Case 228 £temporary3553 -> £temporary3554 112
x34520:	cmp al, 112	; 2: 60 112
x34522:	je strftime$228	; 4: 15 132 91 2

strftime$106:	; Case 240 £temporary3553 -> £temporary3554 83
x34526:	cmp al, 83	; 2: 60 83
x34528:	je strftime$240	; 4: 15 132 139 2

strftime$107:	; Case 248 £temporary3553 -> £temporary3554 85
x34532:	cmp al, 85	; 2: 60 85
x34534:	je strftime$248	; 4: 15 132 175 2

strftime$108:	; Case 255 £temporary3553 -> £temporary3554 119
x34538:	cmp al, 119	; 2: 60 119
x34540:	je strftime$255	; 4: 15 132 209 2

strftime$109:	; Case 263 £temporary3553 -> £temporary3554 87
x34544:	cmp al, 87	; 2: 60 87
x34546:	je strftime$263	; 4: 15 132 246 2

strftime$110:	; Case 270 £temporary3553 -> £temporary3554 120
x34550:	cmp al, 120	; 2: 60 120
x34552:	je strftime$270	; 4: 15 132 24 3

strftime$111:	; Case 282 £temporary3553 -> £temporary3554 88
x34556:	cmp al, 88	; 2: 60 88
x34558:	je strftime$282	; 4: 15 132 78 3

strftime$112:	; Case 294 £temporary3553 -> £temporary3554 121
x34562:	cmp al, 121	; 2: 60 121
x34564:	je strftime$294	; 4: 15 132 132 3

strftime$113:	; Case 303 £temporary3553 -> £temporary3554 89
x34568:	cmp al, 89	; 2: 60 89
x34570:	je strftime$303	; 4: 15 132 175 3

strftime$114:	; Case 312 £temporary3553 -> £temporary3554 90
x34574:	cmp al, 90	; 2: 60 90
x34576:	je strftime$312	; 4: 15 132 214 3

strftime$115:	; Case 318 £temporary3553 -> £temporary3554 37
x34580:	cmp al, 37	; 2: 60 37
x34582:	je strftime$318	; 4: 15 132 236 3

strftime$116:	; CaseEnd £temporary3553 -> £temporary3554

strftime$117:	; Goto 323
x34586:	jmp strftime$323	; 3: 233 3 4

strftime$118:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$119:	; Parameter 56 add 6
x34589:	mov [bp + 62], bp	; 3: 137 110 62
x34592:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$120:	; Deref £temporary3555 -> tp tp 12
x34596:	mov si, [bp + 12]	; 3: 139 118 12

strftime$121:	; UnsignedMultiply £temporary3557 £temporary3555 -> tp 2
x34599:	mov ax, [si + 12]	; 3: 139 68 12
x34602:	xor dx, dx	; 2: 49 210
x34604:	mul word [@8048$int2$2#]	; 4: 247 38 144 140

strftime$122:	; BinaryAdd £temporary3558 shortDayList £temporary3557
x34608:	mov si, [bp + 16]	; 3: 139 118 16
x34611:	add si, ax	; 2: 1 198

strftime$123:	; Deref £temporary3556 -> £temporary3558 £temporary3558 0

strftime$124:	; Parameter 56 £temporary3556 -> £temporary3558 8
x34613:	mov ax, [si]	; 2: 139 4
x34615:	mov [bp + 64], ax	; 3: 137 70 64

strftime$125:	; Call 56 strcpy 0
x34618:	mov word [bp + 56], strftime$126	; 5: 199 70 56 72 135
x34623:	mov [bp + 58], bp	; 3: 137 110 58
x34626:	add bp, 56	; 3: 131 197 56
x34629:	jmp strcpy	; 3: 233 119 215

strftime$126:	; PostCall 56

strftime$127:	; Goto 335
x34632:	jmp strftime$335	; 3: 233 9 4

strftime$128:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$129:	; Parameter 56 add 6
x34635:	mov [bp + 62], bp	; 3: 137 110 62
x34638:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$130:	; Deref £temporary3560 -> tp tp 12
x34642:	mov si, [bp + 12]	; 3: 139 118 12

strftime$131:	; UnsignedMultiply £temporary3562 £temporary3560 -> tp 2
x34645:	mov ax, [si + 12]	; 3: 139 68 12
x34648:	xor dx, dx	; 2: 49 210
x34650:	mul word [@8056$int2$2#]	; 4: 247 38 146 140

strftime$132:	; BinaryAdd £temporary3563 longDayList £temporary3562
x34654:	mov si, [bp + 20]	; 3: 139 118 20
x34657:	add si, ax	; 2: 1 198

strftime$133:	; Deref £temporary3561 -> £temporary3563 £temporary3563 0

strftime$134:	; Parameter 56 £temporary3561 -> £temporary3563 8
x34659:	mov ax, [si]	; 2: 139 4
x34661:	mov [bp + 64], ax	; 3: 137 70 64

strftime$135:	; Call 56 strcpy 0
x34664:	mov word [bp + 56], strftime$136	; 5: 199 70 56 118 135
x34669:	mov [bp + 58], bp	; 3: 137 110 58
x34672:	add bp, 56	; 3: 131 197 56
x34675:	jmp strcpy	; 3: 233 73 215

strftime$136:	; PostCall 56

strftime$137:	; Goto 335
x34678:	jmp strftime$335	; 3: 233 219 3

strftime$138:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$139:	; Parameter 56 add 6
x34681:	mov [bp + 62], bp	; 3: 137 110 62
x34684:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$140:	; Deref £temporary3565 -> tp tp 8
x34688:	mov si, [bp + 12]	; 3: 139 118 12

strftime$141:	; UnsignedMultiply £temporary3567 £temporary3565 -> tp 2
x34691:	mov ax, [si + 8]	; 3: 139 68 8
x34694:	xor dx, dx	; 2: 49 210
x34696:	mul word [@8064$int2$2#]	; 4: 247 38 148 140

strftime$142:	; BinaryAdd £temporary3568 shortMonthList £temporary3567
x34700:	mov si, [bp + 18]	; 3: 139 118 18
x34703:	add si, ax	; 2: 1 198

strftime$143:	; Deref £temporary3566 -> £temporary3568 £temporary3568 0

strftime$144:	; Parameter 56 £temporary3566 -> £temporary3568 8
x34705:	mov ax, [si]	; 2: 139 4
x34707:	mov [bp + 64], ax	; 3: 137 70 64

strftime$145:	; Call 56 strcpy 0
x34710:	mov word [bp + 56], strftime$146	; 5: 199 70 56 164 135
x34715:	mov [bp + 58], bp	; 3: 137 110 58
x34718:	add bp, 56	; 3: 131 197 56
x34721:	jmp strcpy	; 3: 233 27 215

strftime$146:	; PostCall 56

strftime$147:	; Goto 335
x34724:	jmp strftime$335	; 3: 233 173 3

strftime$148:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$149:	; Parameter 56 add 6
x34727:	mov [bp + 62], bp	; 3: 137 110 62
x34730:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$150:	; Deref £temporary3570 -> tp tp 8
x34734:	mov si, [bp + 12]	; 3: 139 118 12

strftime$151:	; UnsignedMultiply £temporary3572 £temporary3570 -> tp 2
x34737:	mov ax, [si + 8]	; 3: 139 68 8
x34740:	xor dx, dx	; 2: 49 210
x34742:	mul word [@8072$int2$2#]	; 4: 247 38 150 140

strftime$152:	; BinaryAdd £temporary3573 longMonthList £temporary3572
x34746:	mov si, [bp + 22]	; 3: 139 118 22
x34749:	add si, ax	; 2: 1 198

strftime$153:	; Deref £temporary3571 -> £temporary3573 £temporary3573 0

strftime$154:	; Parameter 56 £temporary3571 -> £temporary3573 8
x34751:	mov ax, [si]	; 2: 139 4
x34753:	mov [bp + 64], ax	; 3: 137 70 64

strftime$155:	; Call 56 strcpy 0
x34756:	mov word [bp + 56], strftime$156	; 5: 199 70 56 210 135
x34761:	mov [bp + 58], bp	; 3: 137 110 58
x34764:	add bp, 56	; 3: 131 197 56
x34767:	jmp strcpy	; 3: 233 237 214

strftime$156:	; PostCall 56

strftime$157:	; Goto 335
x34770:	jmp strftime$335	; 3: 233 127 3

strftime$158:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 56 add 6
x34773:	mov [bp + 62], bp	; 3: 137 110 62
x34776:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$160:	; Parameter 56 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x34780:	mov word [bp + 64], @8078$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 64 152 140

strftime$161:	; Deref £temporary3575 -> tp tp 10
x34785:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; BinaryAdd £temporary3576 £temporary3575 -> tp 1900
x34788:	mov ax, [si + 10]	; 3: 139 68 10
x34791:	add ax, 1900	; 3: 5 108 7

strftime$163:	; Parameter 56 £temporary3576 10
x34794:	mov [bp + 66], ax	; 3: 137 70 66

strftime$164:	; Deref £temporary3577 -> tp tp 8
x34797:	mov si, [bp + 12]	; 3: 139 118 12

strftime$165:	; BinaryAdd £temporary3578 £temporary3577 -> tp 1
x34800:	mov ax, [si + 8]	; 3: 139 68 8
x34803:	inc ax	; 1: 64

strftime$166:	; Parameter 56 £temporary3578 12
x34804:	mov [bp + 68], ax	; 3: 137 70 68

strftime$167:	; Deref £temporary3579 -> tp tp 6
x34807:	mov si, [bp + 12]	; 3: 139 118 12

strftime$168:	; Parameter 56 £temporary3579 -> tp 14
x34810:	mov ax, [si + 6]	; 3: 139 68 6
x34813:	mov [bp + 70], ax	; 3: 137 70 70

strftime$169:	; Deref £temporary3580 -> tp tp 4
x34816:	mov si, [bp + 12]	; 3: 139 118 12

strftime$170:	; Parameter 56 £temporary3580 -> tp 16
x34819:	mov ax, [si + 4]	; 3: 139 68 4
x34822:	mov [bp + 72], ax	; 3: 137 70 72

strftime$171:	; Deref £temporary3581 -> tp tp 2
x34825:	mov si, [bp + 12]	; 3: 139 118 12

strftime$172:	; Parameter 56 £temporary3581 -> tp 18
x34828:	mov ax, [si + 2]	; 3: 139 68 2
x34831:	mov [bp + 74], ax	; 3: 137 70 74

strftime$173:	; Deref £temporary3582 -> tp tp 0
x34834:	mov si, [bp + 12]	; 3: 139 118 12

strftime$174:	; Parameter 56 £temporary3582 -> tp 20
x34837:	mov ax, [si]	; 2: 139 4
x34839:	mov [bp + 76], ax	; 3: 137 70 76

strftime$175:	; Call 56 sprintf 0
x34842:	mov word [bp + 56], strftime$176	; 5: 199 70 56 45 136
x34847:	mov [bp + 58], bp	; 3: 137 110 58
x34850:	add bp, 56	; 3: 131 197 56
x34853:	mov di, bp	; 2: 137 239
x34855:	add di, 12	; 3: 131 199 12
x34858:	jmp sprintf	; 3: 233 43 252

strftime$176:	; PostCall 56

strftime$177:	; Goto 335
x34861:	jmp strftime$335	; 3: 233 36 3

strftime$178:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$179:	; Parameter 56 add 6
x34864:	mov [bp + 62], bp	; 3: 137 110 62
x34867:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$180:	; Parameter 56 string_25i# 8
x34871:	mov word [bp + 64], @8094$string_25i#	; 5: 199 70 64 182 140

strftime$181:	; Deref £temporary3584 -> tp tp 6
x34876:	mov si, [bp + 12]	; 3: 139 118 12

strftime$182:	; Parameter 56 £temporary3584 -> tp 10
x34879:	mov ax, [si + 6]	; 3: 139 68 6
x34882:	mov [bp + 66], ax	; 3: 137 70 66

strftime$183:	; Call 56 sprintf 0
x34885:	mov word [bp + 56], strftime$184	; 5: 199 70 56 88 136
x34890:	mov [bp + 58], bp	; 3: 137 110 58
x34893:	add bp, 56	; 3: 131 197 56
x34896:	mov di, bp	; 2: 137 239
x34898:	add di, 2	; 3: 131 199 2
x34901:	jmp sprintf	; 3: 233 0 252

strftime$184:	; PostCall 56

strftime$185:	; Goto 335
x34904:	jmp strftime$335	; 3: 233 249 2

strftime$186:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$187:	; Parameter 56 add 6
x34907:	mov [bp + 62], bp	; 3: 137 110 62
x34910:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$188:	; Parameter 56 string_25i# 8
x34914:	mov word [bp + 64], @8099$string_25i#	; 5: 199 70 64 185 140

strftime$189:	; Deref £temporary3586 -> tp tp 4
x34919:	mov si, [bp + 12]	; 3: 139 118 12

strftime$190:	; Parameter 56 £temporary3586 -> tp 10
x34922:	mov ax, [si + 4]	; 3: 139 68 4
x34925:	mov [bp + 66], ax	; 3: 137 70 66

strftime$191:	; Call 56 sprintf 0
x34928:	mov word [bp + 56], strftime$192	; 5: 199 70 56 131 136
x34933:	mov [bp + 58], bp	; 3: 137 110 58
x34936:	add bp, 56	; 3: 131 197 56
x34939:	mov di, bp	; 2: 137 239
x34941:	add di, 2	; 3: 131 199 2
x34944:	jmp sprintf	; 3: 233 213 251

strftime$192:	; PostCall 56

strftime$193:	; Goto 335
x34947:	jmp strftime$335	; 3: 233 206 2

strftime$194:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$195:	; Parameter 56 add 6
x34950:	mov [bp + 62], bp	; 3: 137 110 62
x34953:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$196:	; Parameter 56 string_25i# 8
x34957:	mov word [bp + 64], @8104$string_25i#	; 5: 199 70 64 188 140

strftime$197:	; Deref £temporary3588 -> tp tp 4
x34962:	mov si, [bp + 12]	; 3: 139 118 12

strftime$198:	; SignedModulo £temporary3589 £temporary3588 -> tp 12
x34965:	mov ax, [si + 4]	; 3: 139 68 4
x34968:	xor dx, dx	; 2: 49 210
x34970:	idiv word [@8107$int2$12#]	; 4: 247 62 191 140

strftime$199:	; Parameter 56 £temporary3589 10
x34974:	mov [bp + 66], dx	; 3: 137 86 66

strftime$200:	; Call 56 sprintf 0
x34977:	mov word [bp + 56], strftime$201	; 5: 199 70 56 180 136
x34982:	mov [bp + 58], bp	; 3: 137 110 58
x34985:	add bp, 56	; 3: 131 197 56
x34988:	mov di, bp	; 2: 137 239
x34990:	add di, 2	; 3: 131 199 2
x34993:	jmp sprintf	; 3: 233 164 251

strftime$201:	; PostCall 56

strftime$202:	; Goto 335
x34996:	jmp strftime$335	; 3: 233 157 2

strftime$203:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 56 add 6
x34999:	mov [bp + 62], bp	; 3: 137 110 62
x35002:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$205:	; Parameter 56 string_25i# 8
x35006:	mov word [bp + 64], @8112$string_25i#	; 5: 199 70 64 193 140

strftime$206:	; Deref £temporary3591 -> tp tp 14
x35011:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 56 £temporary3591 -> tp 10
x35014:	mov ax, [si + 14]	; 3: 139 68 14
x35017:	mov [bp + 66], ax	; 3: 137 70 66

strftime$208:	; Call 56 sprintf 0
x35020:	mov word [bp + 56], strftime$209	; 5: 199 70 56 223 136
x35025:	mov [bp + 58], bp	; 3: 137 110 58
x35028:	add bp, 56	; 3: 131 197 56
x35031:	mov di, bp	; 2: 137 239
x35033:	add di, 2	; 3: 131 199 2
x35036:	jmp sprintf	; 3: 233 121 251

strftime$209:	; PostCall 56

strftime$210:	; Goto 335
x35039:	jmp strftime$335	; 3: 233 114 2

strftime$211:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 56 add 6
x35042:	mov [bp + 62], bp	; 3: 137 110 62
x35045:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$213:	; Parameter 56 string_25i# 8
x35049:	mov word [bp + 64], @8117$string_25i#	; 5: 199 70 64 196 140

strftime$214:	; Deref £temporary3593 -> tp tp 8
x35054:	mov si, [bp + 12]	; 3: 139 118 12

strftime$215:	; BinaryAdd £temporary3594 £temporary3593 -> tp 1
x35057:	mov ax, [si + 8]	; 3: 139 68 8
x35060:	inc ax	; 1: 64

strftime$216:	; Parameter 56 £temporary3594 10
x35061:	mov [bp + 66], ax	; 3: 137 70 66

strftime$217:	; Call 56 sprintf 0
x35064:	mov word [bp + 56], strftime$218	; 5: 199 70 56 11 137
x35069:	mov [bp + 58], bp	; 3: 137 110 58
x35072:	add bp, 56	; 3: 131 197 56
x35075:	mov di, bp	; 2: 137 239
x35077:	add di, 2	; 3: 131 199 2
x35080:	jmp sprintf	; 3: 233 77 251

strftime$218:	; PostCall 56

strftime$219:	; Goto 335
x35083:	jmp strftime$335	; 3: 233 70 2

strftime$220:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$221:	; Parameter 56 add 6
x35086:	mov [bp + 62], bp	; 3: 137 110 62
x35089:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$222:	; Parameter 56 string_25i# 8
x35093:	mov word [bp + 64], @8125$string_25i#	; 5: 199 70 64 199 140

strftime$223:	; Deref £temporary3596 -> tp tp 2
x35098:	mov si, [bp + 12]	; 3: 139 118 12

strftime$224:	; Parameter 56 £temporary3596 -> tp 10
x35101:	mov ax, [si + 2]	; 3: 139 68 2
x35104:	mov [bp + 66], ax	; 3: 137 70 66

strftime$225:	; Call 56 sprintf 0
x35107:	mov word [bp + 56], strftime$226	; 5: 199 70 56 54 137
x35112:	mov [bp + 58], bp	; 3: 137 110 58
x35115:	add bp, 56	; 3: 131 197 56
x35118:	mov di, bp	; 2: 137 239
x35120:	add di, 2	; 3: 131 199 2
x35123:	jmp sprintf	; 3: 233 34 251

strftime$226:	; PostCall 56

strftime$227:	; Goto 335
x35126:	jmp strftime$335	; 3: 233 27 2

strftime$228:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$229:	; Parameter 56 add 6
x35129:	mov [bp + 62], bp	; 3: 137 110 62
x35132:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$230:	; Parameter 56 string_25s# 8
x35136:	mov word [bp + 64], @8130$string_25s#	; 5: 199 70 64 202 140

strftime$231:	; Deref £temporary3598 -> tp tp 4
x35141:	mov si, [bp + 12]	; 3: 139 118 12

strftime$232:	; SignedGreaterThanEqual 235 £temporary3598 -> tp 12
x35144:	cmp word [si + 4], 12	; 4: 131 124 4 12
x35148:	jge strftime$235	; 2: 125 5

strftime$233:	; Assign £temporary3603 string_AM#
x35150:	mov ax, @8135$string_AM#	; 3: 184 205 140

strftime$234:	; Goto 236
x35153:	jmp strftime$236	; 2: 235 3

strftime$235:	; Assign £temporary3603 string_PM#
x35155:	mov ax, @8136$string_PM#	; 3: 184 208 140

strftime$236:	; Parameter 56 £temporary3603 10
x35158:	mov [bp + 66], ax	; 3: 137 70 66

strftime$237:	; Call 56 sprintf 0
x35161:	mov word [bp + 56], strftime$238	; 5: 199 70 56 108 137
x35166:	mov [bp + 58], bp	; 3: 137 110 58
x35169:	add bp, 56	; 3: 131 197 56
x35172:	mov di, bp	; 2: 137 239
x35174:	add di, 2	; 3: 131 199 2
x35177:	jmp sprintf	; 3: 233 236 250

strftime$238:	; PostCall 56

strftime$239:	; Goto 335
x35180:	jmp strftime$335	; 3: 233 229 1

strftime$240:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$241:	; Parameter 56 add 6
x35183:	mov [bp + 62], bp	; 3: 137 110 62
x35186:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$242:	; Parameter 56 string_25i# 8
x35190:	mov word [bp + 64], @8146$string_25i#	; 5: 199 70 64 211 140

strftime$243:	; Deref £temporary3605 -> tp tp 0
x35195:	mov si, [bp + 12]	; 3: 139 118 12

strftime$244:	; Parameter 56 £temporary3605 -> tp 10
x35198:	mov ax, [si]	; 2: 139 4
x35200:	mov [bp + 66], ax	; 3: 137 70 66

strftime$245:	; Call 56 sprintf 0
x35203:	mov word [bp + 56], strftime$246	; 5: 199 70 56 150 137
x35208:	mov [bp + 58], bp	; 3: 137 110 58
x35211:	add bp, 56	; 3: 131 197 56
x35214:	mov di, bp	; 2: 137 239
x35216:	add di, 2	; 3: 131 199 2
x35219:	jmp sprintf	; 3: 233 194 250

strftime$246:	; PostCall 56

strftime$247:	; Goto 335
x35222:	jmp strftime$335	; 3: 233 187 1

strftime$248:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$249:	; Parameter 56 add 6
x35225:	mov [bp + 62], bp	; 3: 137 110 62
x35228:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$250:	; Parameter 56 string_25i# 8
x35232:	mov word [bp + 64], @8151$string_25i#	; 5: 199 70 64 214 140

strftime$251:	; Parameter 56 yearDaySunday 10
x35237:	mov ax, [bp + 30]	; 3: 139 70 30
x35240:	mov [bp + 66], ax	; 3: 137 70 66

strftime$252:	; Call 56 sprintf 0
x35243:	mov word [bp + 56], strftime$253	; 5: 199 70 56 190 137
x35248:	mov [bp + 58], bp	; 3: 137 110 58
x35251:	add bp, 56	; 3: 131 197 56
x35254:	mov di, bp	; 2: 137 239
x35256:	add di, 2	; 3: 131 199 2
x35259:	jmp sprintf	; 3: 233 154 250

strftime$253:	; PostCall 56

strftime$254:	; Goto 335
x35262:	jmp strftime$335	; 3: 233 147 1

strftime$255:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$256:	; Parameter 56 add 6
x35265:	mov [bp + 62], bp	; 3: 137 110 62
x35268:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$257:	; Parameter 56 string_25i# 8
x35272:	mov word [bp + 64], @8155$string_25i#	; 5: 199 70 64 217 140

strftime$258:	; Deref £temporary3608 -> tp tp 12
x35277:	mov si, [bp + 12]	; 3: 139 118 12

strftime$259:	; Parameter 56 £temporary3608 -> tp 10
x35280:	mov ax, [si + 12]	; 3: 139 68 12
x35283:	mov [bp + 66], ax	; 3: 137 70 66

strftime$260:	; Call 56 sprintf 0
x35286:	mov word [bp + 56], strftime$261	; 5: 199 70 56 233 137
x35291:	mov [bp + 58], bp	; 3: 137 110 58
x35294:	add bp, 56	; 3: 131 197 56
x35297:	mov di, bp	; 2: 137 239
x35299:	add di, 2	; 3: 131 199 2
x35302:	jmp sprintf	; 3: 233 111 250

strftime$261:	; PostCall 56

strftime$262:	; Goto 335
x35305:	jmp strftime$335	; 3: 233 104 1

strftime$263:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$264:	; Parameter 56 add 6
x35308:	mov [bp + 62], bp	; 3: 137 110 62
x35311:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$265:	; Parameter 56 string_25i# 8
x35315:	mov word [bp + 64], @8160$string_25i#	; 5: 199 70 64 220 140

strftime$266:	; Parameter 56 yearDayMonday 10
x35320:	mov ax, [bp + 32]	; 3: 139 70 32
x35323:	mov [bp + 66], ax	; 3: 137 70 66

strftime$267:	; Call 56 sprintf 0
x35326:	mov word [bp + 56], strftime$268	; 5: 199 70 56 17 138
x35331:	mov [bp + 58], bp	; 3: 137 110 58
x35334:	add bp, 56	; 3: 131 197 56
x35337:	mov di, bp	; 2: 137 239
x35339:	add di, 2	; 3: 131 199 2
x35342:	jmp sprintf	; 3: 233 71 250

strftime$268:	; PostCall 56

strftime$269:	; Goto 335
x35345:	jmp strftime$335	; 3: 233 64 1

strftime$270:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$271:	; Parameter 56 add 6
x35348:	mov [bp + 62], bp	; 3: 137 110 62
x35351:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$272:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x35355:	mov word [bp + 64], @8164$string_2502i3A2502i3A2502i#	; 5: 199 70 64 223 140

strftime$273:	; Deref £temporary3611 -> tp tp 4
x35360:	mov si, [bp + 12]	; 3: 139 118 12

strftime$274:	; Parameter 56 £temporary3611 -> tp 10
x35363:	mov ax, [si + 4]	; 3: 139 68 4
x35366:	mov [bp + 66], ax	; 3: 137 70 66

strftime$275:	; Deref £temporary3612 -> tp tp 2
x35369:	mov si, [bp + 12]	; 3: 139 118 12

strftime$276:	; Parameter 56 £temporary3612 -> tp 12
x35372:	mov ax, [si + 2]	; 3: 139 68 2
x35375:	mov [bp + 68], ax	; 3: 137 70 68

strftime$277:	; Deref £temporary3613 -> tp tp 0
x35378:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Parameter 56 £temporary3613 -> tp 14
x35381:	mov ax, [si]	; 2: 139 4
x35383:	mov [bp + 70], ax	; 3: 137 70 70

strftime$279:	; Call 56 sprintf 0
x35386:	mov word [bp + 56], strftime$280	; 5: 199 70 56 77 138
x35391:	mov [bp + 58], bp	; 3: 137 110 58
x35394:	add bp, 56	; 3: 131 197 56
x35397:	mov di, bp	; 2: 137 239
x35399:	add di, 6	; 3: 131 199 6
x35402:	jmp sprintf	; 3: 233 11 250

strftime$280:	; PostCall 56

strftime$281:	; Goto 335
x35405:	jmp strftime$335	; 3: 233 4 1

strftime$282:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$283:	; Parameter 56 add 6
x35408:	mov [bp + 62], bp	; 3: 137 110 62
x35411:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$284:	; Parameter 56 string_2502i3A2502i3A2502i# 8
x35415:	mov word [bp + 64], @8171$string_2502i3A2502i3A2502i#	; 5: 199 70 64 238 140

strftime$285:	; Deref £temporary3615 -> tp tp 4
x35420:	mov si, [bp + 12]	; 3: 139 118 12

strftime$286:	; Parameter 56 £temporary3615 -> tp 10
x35423:	mov ax, [si + 4]	; 3: 139 68 4
x35426:	mov [bp + 66], ax	; 3: 137 70 66

strftime$287:	; Deref £temporary3616 -> tp tp 2
x35429:	mov si, [bp + 12]	; 3: 139 118 12

strftime$288:	; Parameter 56 £temporary3616 -> tp 12
x35432:	mov ax, [si + 2]	; 3: 139 68 2
x35435:	mov [bp + 68], ax	; 3: 137 70 68

strftime$289:	; Deref £temporary3617 -> tp tp 0
x35438:	mov si, [bp + 12]	; 3: 139 118 12

strftime$290:	; Parameter 56 £temporary3617 -> tp 14
x35441:	mov ax, [si]	; 2: 139 4
x35443:	mov [bp + 70], ax	; 3: 137 70 70

strftime$291:	; Call 56 sprintf 0
x35446:	mov word [bp + 56], strftime$292	; 5: 199 70 56 137 138
x35451:	mov [bp + 58], bp	; 3: 137 110 58
x35454:	add bp, 56	; 3: 131 197 56
x35457:	mov di, bp	; 2: 137 239
x35459:	add di, 6	; 3: 131 199 6
x35462:	jmp sprintf	; 3: 233 207 249

strftime$292:	; PostCall 56

strftime$293:	; Goto 335
x35465:	jmp strftime$335	; 3: 233 200 0

strftime$294:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$295:	; Parameter 56 add 6
x35468:	mov [bp + 62], bp	; 3: 137 110 62
x35471:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$296:	; Parameter 56 string_25i# 8
x35475:	mov word [bp + 64], @8178$string_25i#	; 5: 199 70 64 253 140

strftime$297:	; Deref £temporary3619 -> tp tp 10
x35480:	mov si, [bp + 12]	; 3: 139 118 12

strftime$298:	; SignedModulo £temporary3620 £temporary3619 -> tp 100
x35483:	mov ax, [si + 10]	; 3: 139 68 10
x35486:	xor dx, dx	; 2: 49 210
x35488:	idiv word [@8181$int2$100#]	; 4: 247 62 0 141

strftime$299:	; Parameter 56 £temporary3620 10
x35492:	mov [bp + 66], dx	; 3: 137 86 66

strftime$300:	; Call 56 sprintf 0
x35495:	mov word [bp + 56], strftime$301	; 5: 199 70 56 186 138
x35500:	mov [bp + 58], bp	; 3: 137 110 58
x35503:	add bp, 56	; 3: 131 197 56
x35506:	mov di, bp	; 2: 137 239
x35508:	add di, 2	; 3: 131 199 2
x35511:	jmp sprintf	; 3: 233 158 249

strftime$301:	; PostCall 56

strftime$302:	; Goto 335
x35514:	jmp strftime$335	; 3: 233 151 0

strftime$303:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 56 add 6
x35517:	mov [bp + 62], bp	; 3: 137 110 62
x35520:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$305:	; Parameter 56 string_25i# 8
x35524:	mov word [bp + 64], @8186$string_25i#	; 5: 199 70 64 2 141

strftime$306:	; Deref £temporary3622 -> tp tp 10
x35529:	mov si, [bp + 12]	; 3: 139 118 12

strftime$307:	; BinaryAdd £temporary3623 £temporary3622 -> tp 1900
x35532:	mov ax, [si + 10]	; 3: 139 68 10
x35535:	add ax, 1900	; 3: 5 108 7

strftime$308:	; Parameter 56 £temporary3623 10
x35538:	mov [bp + 66], ax	; 3: 137 70 66

strftime$309:	; Call 56 sprintf 0
x35541:	mov word [bp + 56], strftime$310	; 5: 199 70 56 232 138
x35546:	mov [bp + 58], bp	; 3: 137 110 58
x35549:	add bp, 56	; 3: 131 197 56
x35552:	mov di, bp	; 2: 137 239
x35554:	add di, 2	; 3: 131 199 2
x35557:	jmp sprintf	; 3: 233 112 249

strftime$310:	; PostCall 56

strftime$311:	; Goto 335
x35560:	jmp strftime$335	; 2: 235 106

strftime$312:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$313:	; Parameter 56 add 6
x35562:	mov [bp + 62], bp	; 3: 137 110 62
x35565:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$314:	; Parameter 56 string_# 8
x35569:	mov word [bp + 64], @8194$string_#	; 5: 199 70 64 5 141

strftime$315:	; Call 56 strcpy 0
x35574:	mov word [bp + 56], strftime$316	; 5: 199 70 56 4 139
x35579:	mov [bp + 58], bp	; 3: 137 110 58
x35582:	add bp, 56	; 3: 131 197 56
x35585:	jmp strcpy	; 3: 233 187 211

strftime$316:	; PostCall 56

strftime$317:	; Goto 335
x35588:	jmp strftime$335	; 2: 235 78

strftime$318:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$319:	; Parameter 56 add 6
x35590:	mov [bp + 62], bp	; 3: 137 110 62
x35593:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$320:	; Parameter 56 string_25# 8
x35597:	mov word [bp + 64], @8198$string_25#	; 5: 199 70 64 6 141

strftime$321:	; Call 56 strcpy 0
x35602:	mov word [bp + 56], strftime$322	; 5: 199 70 56 32 139
x35607:	mov [bp + 58], bp	; 3: 137 110 58
x35610:	add bp, 56	; 3: 131 197 56
x35613:	jmp strcpy	; 3: 233 159 211

strftime$322:	; PostCall 56

strftime$323:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$324:	; Parameter 56 add 6
x35616:	mov [bp + 62], bp	; 3: 137 110 62
x35619:	add word [bp + 62], 36	; 4: 131 70 62 36

strftime$325:	; Parameter 56 string_# 8
x35623:	mov word [bp + 64], @8200$string_#	; 5: 199 70 64 8 141

strftime$326:	; Call 56 strcpy 0
x35628:	mov word [bp + 56], strftime$327	; 5: 199 70 56 58 139
x35633:	mov [bp + 58], bp	; 3: 137 110 58
x35636:	add bp, 56	; 3: 131 197 56
x35639:	jmp strcpy	; 3: 233 133 211

strftime$327:	; PostCall 56

strftime$328:	; Goto 335
x35642:	jmp strftime$335	; 2: 235 24

strftime$329:	; Deref £temporary3628 -> add add 0
x35644:	mov si, bp	; 2: 137 238
x35646:	add si, 36	; 3: 131 198 36

strftime$330:	; BinaryAdd £temporary3630 fmt index
x35649:	mov di, [bp + 10]	; 3: 139 126 10
x35652:	add di, [bp + 34]	; 3: 3 126 34

strftime$331:	; Deref £temporary3629 -> £temporary3630 £temporary3630 0

strftime$332:	; Assign £temporary3628 -> add £temporary3629 -> £temporary3630
x35655:	mov al, [di]	; 2: 138 5
x35657:	mov [si], al	; 2: 136 4

strftime$333:	; Deref £temporary3631 -> add add 1
x35659:	mov si, bp	; 2: 137 238
x35661:	add si, 36	; 3: 131 198 36

strftime$334:	; Assign £temporary3631 -> add 0
x35664:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$335:	; CallHeader 56 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$336:	; Parameter 56 s 6
x35668:	mov ax, [bp + 6]	; 3: 139 70 6
x35671:	mov [bp + 62], ax	; 3: 137 70 62

strftime$337:	; Call 56 strlen 0
x35674:	mov word [bp + 56], strftime$338	; 5: 199 70 56 104 139
x35679:	mov [bp + 58], bp	; 3: 137 110 58
x35682:	add bp, 56	; 3: 131 197 56
x35685:	jmp strlen	; 3: 233 161 1

strftime$338:	; PostCall 56

strftime$339:	; GetReturnValue £temporary3632

strftime$340:	; Assign x £temporary3632
x35688:	mov [bp + 56], bx	; 3: 137 94 56

strftime$341:	; CallHeader 58 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$342:	; Parameter 58 add 6
x35691:	mov [bp + 64], bp	; 3: 137 110 64
x35694:	add word [bp + 64], 36	; 4: 131 70 64 36

strftime$343:	; Call 58 strlen 0
x35698:	mov word [bp + 58], strftime$344	; 5: 199 70 58 128 139
x35703:	mov [bp + 60], bp	; 3: 137 110 60
x35706:	add bp, 58	; 3: 131 197 58
x35709:	jmp strlen	; 3: 233 137 1

strftime$344:	; PostCall 58

strftime$345:	; GetReturnValue £temporary3633

strftime$346:	; Assign y £temporary3633
x35712:	mov [bp + 58], bx	; 3: 137 94 58

strftime$347:	; BinaryAdd £temporary3634 x y
x35715:	mov ax, [bp + 56]	; 3: 139 70 56
x35718:	add ax, [bp + 58]	; 3: 3 70 58

strftime$348:	; SignedGreaterThanEqual 356 £temporary3634 smax
x35721:	cmp ax, [bp + 8]	; 3: 59 70 8
x35724:	jge strftime$356	; 2: 125 33

strftime$349:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$350:	; Parameter 60 s 6
x35726:	mov ax, [bp + 6]	; 3: 139 70 6
x35729:	mov [bp + 66], ax	; 3: 137 70 66

strftime$351:	; Parameter 60 add 8
x35732:	mov [bp + 68], bp	; 3: 137 110 68
x35735:	add word [bp + 68], 36	; 4: 131 70 68 36

strftime$352:	; Call 60 strcat 0
x35739:	mov word [bp + 60], strftime$353	; 5: 199 70 60 169 139
x35744:	mov [bp + 62], bp	; 3: 137 110 62
x35747:	add bp, 60	; 3: 131 197 60
x35750:	jmp strcat	; 3: 233 131 1

strftime$353:	; PostCall 60

strftime$354:	; Increment index
x35753:	inc word [bp + 34]	; 3: 255 70 34

strftime$355:	; Goto 84
x35756:	jmp strftime$84	; 3: 233 192 250

strftime$356:	; CallHeader 34 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$357:	; Parameter 34 s 6
x35759:	mov ax, [bp + 6]	; 3: 139 70 6
x35762:	mov [bp + 40], ax	; 3: 137 70 40

strftime$358:	; Call 34 strlen 0
x35765:	mov word [bp + 34], strftime$359	; 5: 199 70 34 195 139
x35770:	mov [bp + 36], bp	; 3: 137 110 36
x35773:	add bp, 34	; 3: 131 197 34
x35776:	jmp strlen	; 3: 233 70 1

strftime$359:	; PostCall 34

strftime$360:	; GetReturnValue £temporary3637

strftime$361:	; SetReturnValue £temporary3637

strftime$362:	; Return £temporary3637
x35779:	mov ax, [bp]	; 3: 139 70 0
x35782:	mov di, [bp + 4]	; 3: 139 126 4
x35785:	mov bp, [bp + 2]	; 3: 139 110 2
x35788:	jmp ax	; 2: 255 224

strftime$363:	; FunctionEnd strftime

@7935$int2$4#:
x35790:	dw 4	; 2: 4 0

@7943$int2$365#:
x35792:	dw 365	; 2: 109 1

@7952$string_#:
x35794:	db 0	; 1: 0

@7716$g_defaultLongDayList:
x35795:	dw @7709$string_Sunday# ; 2: 225 139
x35797:	dw @7710$string_Monday# ; 2: 232 139
x35799:	dw @7711$string_Tuesday# ; 2: 239 139
x35801:	dw @7712$string_Wednesday# ; 2: 247 139
x35803:	dw @7713$string_Thursday# ; 2: 1 140
x35805:	dw @7714$string_Friday# ; 2: 10 140
x35807:	dw @7715$string_Saturday# ; 2: 17 140

@7709$string_Sunday#:
x35809:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@7710$string_Monday#:
x35816:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@7711$string_Tuesday#:
x35823:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@7712$string_Wednesday#:
x35831:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@7713$string_Thursday#:
x35841:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@7714$string_Friday#:
x35850:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@7715$string_Saturday#:
x35857:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@7742$g_defaultLongMonthList:
x35866:	dw @7730$string_January# ; 2: 50 140
x35868:	dw @7731$string_February# ; 2: 58 140
x35870:	dw @7732$string_March# ; 2: 67 140
x35872:	dw @7733$string_April# ; 2: 73 140
x35874:	dw @7734$string_May# ; 2: 79 140
x35876:	dw @7735$string_June# ; 2: 83 140
x35878:	dw @7736$string_July# ; 2: 88 140
x35880:	dw @7737$string_August# ; 2: 93 140
x35882:	dw @7738$string_September# ; 2: 100 140
x35884:	dw @7739$string_October# ; 2: 110 140
x35886:	dw @7740$string_November# ; 2: 118 140
x35888:	dw @7741$string_December# ; 2: 127 140

@7730$string_January#:
x35890:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@7731$string_February#:
x35898:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@7732$string_March#:
x35907:	db "March", 0	; 6: 77 97 114 99 104 0

@7733$string_April#:
x35913:	db "April", 0	; 6: 65 112 114 105 108 0

@7734$string_May#:
x35919:	db "May", 0	; 4: 77 97 121 0

@7735$string_June#:
x35923:	db "June", 0	; 5: 74 117 110 101 0

@7736$string_July#:
x35928:	db "July", 0	; 5: 74 117 108 121 0

@7737$string_August#:
x35933:	db "August", 0	; 7: 65 117 103 117 115 116 0

@7738$string_September#:
x35940:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@7739$string_October#:
x35950:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@7740$string_November#:
x35958:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@7741$string_December#:
x35967:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@8005$int4$7#:
x35976:	dd 7	; 4: 7 0 0 0

@8019$int4$7#:
x35980:	dd 7	; 4: 7 0 0 0

@8048$int2$2#:
x35984:	dw 2	; 2: 2 0

@8056$int2$2#:
x35986:	dw 2	; 2: 2 0

@8064$int2$2#:
x35988:	dw 2	; 2: 2 0

@8072$int2$2#:
x35990:	dw 2	; 2: 2 0

@8078$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x35992:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8094$string_25i#:
x36022:	db "%i", 0	; 3: 37 105 0

@8099$string_25i#:
x36025:	db "%i", 0	; 3: 37 105 0

@8104$string_25i#:
x36028:	db "%i", 0	; 3: 37 105 0

@8107$int2$12#:
x36031:	dw 12	; 2: 12 0

@8112$string_25i#:
x36033:	db "%i", 0	; 3: 37 105 0

@8117$string_25i#:
x36036:	db "%i", 0	; 3: 37 105 0

@8125$string_25i#:
x36039:	db "%i", 0	; 3: 37 105 0

@8130$string_25s#:
x36042:	db "%s", 0	; 3: 37 115 0

@8135$string_AM#:
x36045:	db "AM", 0	; 3: 65 77 0

@8136$string_PM#:
x36048:	db "PM", 0	; 3: 80 77 0

@8146$string_25i#:
x36051:	db "%i", 0	; 3: 37 105 0

@8151$string_25i#:
x36054:	db "%i", 0	; 3: 37 105 0

@8155$string_25i#:
x36057:	db "%i", 0	; 3: 37 105 0

@8160$string_25i#:
x36060:	db "%i", 0	; 3: 37 105 0

@8164$string_2502i3A2502i3A2502i#:
x36063:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8171$string_2502i3A2502i3A2502i#:
x36078:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8178$string_25i#:
x36093:	db "%i", 0	; 3: 37 105 0

@8181$int2$100#:
x36096:	dw 100	; 2: 100 0

@8186$string_25i#:
x36098:	db "%i", 0	; 3: 37 105 0

@8194$string_#:
x36101:	db 0	; 1: 0

@8198$string_25#:
x36102:	db "%", 0	; 2: 37 0

@8200$string_#:
x36104:	db 0	; 1: 0

strlen:	; Assign index 0
x36105:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary3884 string index
x36110:	mov si, [bp + 6]	; 3: 139 118 6
x36113:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary3883 -> £temporary3884 £temporary3884 0

strlen$3:	; Equal 6 £temporary3883 -> £temporary3884 0
x36116:	cmp byte [si], 0	; 3: 128 60 0
x36119:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x36121:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x36124:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x36126:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x36129:	mov ax, [bp]	; 3: 139 70 0
x36132:	mov di, [bp + 4]	; 3: 139 126 4
x36135:	mov bp, [bp + 2]	; 3: 139 110 2
x36138:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x36140:	mov ax, [bp + 6]	; 3: 139 70 6
x36143:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x36146:	mov word [bp + 12], strcat$3	; 5: 199 70 12 64 141
x36151:	mov [bp + 14], bp	; 3: 137 110 14
x36154:	add bp, 12	; 3: 131 197 12
x36157:	nop	; 1: 144
x36158:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3740

strcat$5:	; Assign targetLength £temporary3740
x36160:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x36163:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3742 source index
x36168:	mov si, [bp + 8]	; 3: 139 118 8
x36171:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3741 -> £temporary3742 £temporary3742 0

strcat$9:	; Equal 18 £temporary3741 -> £temporary3742 0
x36174:	cmp byte [si], 0	; 3: 128 60 0
x36177:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3745 targetLength index
x36179:	mov ax, [bp + 12]	; 3: 139 70 12
x36182:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3747 target £temporary3745
x36185:	mov si, [bp + 6]	; 3: 139 118 6
x36188:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3746 -> £temporary3747 £temporary3747 0

strcat$13:	; BinaryAdd £temporary3749 source index
x36190:	mov di, [bp + 8]	; 3: 139 126 8
x36193:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3748 -> £temporary3749 £temporary3749 0

strcat$15:	; Assign £temporary3746 -> £temporary3747 £temporary3748 -> £temporary3749
x36196:	mov al, [di]	; 2: 138 5
x36198:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x36200:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x36203:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3750 targetLength index
x36205:	mov ax, [bp + 12]	; 3: 139 70 12
x36208:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3752 target £temporary3750
x36211:	mov si, [bp + 6]	; 3: 139 118 6
x36214:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3751 -> £temporary3752 £temporary3752 0

strcat$21:	; Assign £temporary3751 -> £temporary3752 0
x36216:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x36219:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x36222:	mov ax, [bp]	; 3: 139 70 0
x36225:	mov di, [bp + 4]	; 3: 139 126 4
x36228:	mov bp, [bp + 2]	; 3: 139 110 2
x36231:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x36233:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x36238:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x36242:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x36244:	mov ax, [stderr]	; 3: 161 22 78
x36247:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36250:	mov word [bp + 16], @9445$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 218 141

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x36255:	mov word [bp + 18], @9446$string_n203D3D201#	; 5: 199 70 18 8 142

assert_test$6:	; Parameter 8 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x36260:	mov word [bp + 20], @9447$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 15 142

assert_test$7:	; Parameter 8 8 14
x36265:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x36270:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 193 141
x36275:	mov [bp + 10], bp	; 3: 137 110 10
x36278:	add bp, 8	; 3: 131 197 8
x36281:	mov di, bp	; 2: 137 239
x36283:	add di, 6	; 3: 131 199 6
x36286:	jmp fprintf	; 3: 233 58 209

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x36289:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 207 141
x36294:	mov [bp + 10], bp	; 3: 137 110 10
x36297:	add bp, 8	; 3: 131 197 8
x36300:	jmp abort	; 3: 233 103 209

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x36303:	mov ax, [bp]	; 3: 139 70 0
x36306:	mov di, [bp + 4]	; 3: 139 126 4
x36309:	mov bp, [bp + 2]	; 3: 139 110 2
x36312:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

@9445$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x36314:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@9446$string_n203D3D201#:
x36360:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

@9447$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x36367:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 67: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x36434:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x36439:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 101 142
x36444:	mov [bp + 8], bp	; 3: 137 110 8
x36447:	add bp, 6	; 3: 131 197 6
x36450:	jmp malloc	; 3: 233 76 229

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary5924

malloc_test$5:	; Assign b £temporary5924
x36453:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x36456:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x36461:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 123 142
x36466:	mov [bp + 10], bp	; 3: 137 110 10
x36469:	add bp, 8	; 3: 131 197 8
x36472:	jmp malloc	; 3: 233 54 229

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary5925

malloc_test$11:	; Assign c £temporary5925
x36475:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x36478:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x36483:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 145 142
x36488:	mov [bp + 12], bp	; 3: 137 110 12
x36491:	add bp, 10	; 3: 131 197 10
x36494:	jmp malloc	; 3: 233 32 229

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary5926

malloc_test$17:	; Assign d £temporary5926
x36497:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x36500:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 162 142
x36505:	mov [bp + 14], bp	; 3: 137 110 14
x36508:	add bp, 12	; 3: 131 197 12
x36511:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x36514:	mov ax, [bp + 8]	; 3: 139 70 8
x36517:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x36520:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x36525:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 187 142
x36530:	mov [bp + 14], bp	; 3: 137 110 14
x36533:	add bp, 12	; 3: 131 197 12
x36536:	jmp realloc	; 3: 233 16 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x36539:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 201 142
x36544:	mov [bp + 14], bp	; 3: 137 110 14
x36547:	add bp, 12	; 3: 131 197 12
x36550:	nop	; 1: 144
x36551:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x36553:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x36558:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 220 142
x36563:	mov [bp + 14], bp	; 3: 137 110 14
x36566:	add bp, 12	; 3: 131 197 12
x36569:	jmp malloc	; 3: 233 213 228

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x36572:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 234 142
x36577:	mov [bp + 14], bp	; 3: 137 110 14
x36580:	add bp, 12	; 3: 131 197 12
x36583:	nop	; 1: 144
x36584:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x36586:	mov ax, [bp + 6]	; 3: 139 70 6
x36589:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x36592:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 254 142
x36597:	mov [bp + 14], bp	; 3: 137 110 14
x36600:	add bp, 12	; 3: 131 197 12
x36603:	jmp free	; 3: 233 192 230

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x36606:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 12 143
x36611:	mov [bp + 14], bp	; 3: 137 110 14
x36614:	add bp, 12	; 3: 131 197 12
x36617:	nop	; 1: 144
x36618:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x36620:	mov ax, [bp + 10]	; 3: 139 70 10
x36623:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x36626:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 32 143
x36631:	mov [bp + 14], bp	; 3: 137 110 14
x36634:	add bp, 12	; 3: 131 197 12
x36637:	jmp free	; 3: 233 158 230

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x36640:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 46 143
x36645:	mov [bp + 14], bp	; 3: 137 110 14
x36648:	add bp, 12	; 3: 131 197 12
x36651:	nop	; 1: 144
x36652:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x36654:	mov ax, [bp]	; 3: 139 70 0
x36657:	mov di, [bp + 4]	; 3: 139 126 4
x36660:	mov bp, [bp + 2]	; 3: 139 110 2
x36663:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x36665:	mov ax, [g_firstBlockPtr]	; 3: 161 63 117
x36668:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x36671:	mov word [bp + 14], @368$string_Heap3A0A#	; 5: 199 70 14 171 143

print_heap$3:	; Call 8 printf 0
x36676:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 84 143
x36681:	mov [bp + 10], bp	; 3: 137 110 10
x36684:	add bp, 8	; 3: 131 197 8
x36687:	mov di, bp	; 2: 137 239
x36689:	jmp printf	; 3: 233 176 125

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x36692:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36696:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x36698:	mov word [bp + 14], @374$string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 178 143

print_heap$8:	; IntegralToIntegral £temporary148 currBlockPtr
x36703:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary148 8
x36706:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary149 -> currBlockPtr currBlockPtr 0
x36709:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary149 -> currBlockPtr 10
x36712:	mov ax, [si]	; 2: 139 4
x36714:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x36717:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 128 143
x36722:	mov [bp + 10], bp	; 3: 137 110 10
x36725:	add bp, 8	; 3: 131 197 8
x36728:	mov di, bp	; 2: 137 239
x36730:	add di, 4	; 3: 131 199 4
x36733:	jmp printf	; 3: 233 132 125

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary151 -> currBlockPtr currBlockPtr 2
x36736:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary151 -> currBlockPtr
x36739:	mov ax, [si + 2]	; 3: 139 68 2
x36742:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x36745:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x36747:	mov word [bp + 14], @379$string_0A#	; 5: 199 70 14 201 143

print_heap$19:	; Call 8 printf 0
x36752:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 160 143
x36757:	mov [bp + 10], bp	; 3: 137 110 10
x36760:	add bp, 8	; 3: 131 197 8
x36763:	mov di, bp	; 2: 137 239
x36765:	jmp printf	; 3: 233 100 125

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x36768:	mov ax, [bp]	; 3: 139 70 0
x36771:	mov di, [bp + 4]	; 3: 139 126 4
x36774:	mov bp, [bp + 2]	; 3: 139 110 2
x36777:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

@368$string_Heap3A0A#:
x36779:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

@374$string_2020Address2025u2C20Size2025u0A#:
x36786:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

@379$string_0A#:
x36809:	db 10, 0	; 2: 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x36811:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36815:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x36817:	mov ax, [stderr]	; 3: 161 22 78
x36820:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36823:	mov word [bp + 18], @273$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 146 145

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x36828:	mov word [bp + 20], @274$string_newMemorySize203E3D200#	; 5: 199 70 20 192 145

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36833:	mov word [bp + 22], @275$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 211 145

realloc$6:	; Parameter 10 259 14
x36838:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x36843:	mov word [bp + 10], realloc$8	; 5: 199 70 10 254 143
x36848:	mov [bp + 12], bp	; 3: 137 110 12
x36851:	add bp, 10	; 3: 131 197 10
x36854:	mov di, bp	; 2: 137 239
x36856:	add di, 6	; 3: 131 199 6
x36859:	jmp fprintf	; 3: 233 253 206

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x36862:	mov word [bp + 10], realloc$11	; 5: 199 70 10 12 144
x36867:	mov [bp + 12], bp	; 3: 137 110 12
x36870:	add bp, 10	; 3: 131 197 10
x36873:	jmp abort	; 3: 233 42 207

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x36876:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36880:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x36882:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36886:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x36888:	mov ax, [stderr]	; 3: 161 22 78
x36891:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36894:	mov word [bp + 18], @288$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 18 146

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x36899:	mov word [bp + 20], @289$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 64 146

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36904:	mov word [bp + 22], @290$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 114 146

realloc$19:	; Parameter 10 260 14
x36909:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x36914:	mov word [bp + 10], realloc$21	; 5: 199 70 10 69 144
x36919:	mov [bp + 12], bp	; 3: 137 110 12
x36922:	add bp, 10	; 3: 131 197 10
x36925:	mov di, bp	; 2: 137 239
x36927:	add di, 6	; 3: 131 199 6
x36930:	jmp fprintf	; 3: 233 182 206

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x36933:	mov word [bp + 10], realloc$24	; 5: 199 70 10 83 144
x36938:	mov [bp + 12], bp	; 3: 137 110 12
x36941:	add bp, 10	; 3: 131 197 10
x36944:	jmp abort	; 3: 233 227 206

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x36947:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36951:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x36953:	mov ax, [bp + 8]	; 3: 139 70 8
x36956:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x36959:	mov word [bp + 10], realloc$29	; 5: 199 70 10 109 144
x36964:	mov [bp + 12], bp	; 3: 137 110 12
x36967:	add bp, 10	; 3: 131 197 10
x36970:	jmp malloc	; 3: 233 68 227

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary106

realloc$31:	; SetReturnValue £temporary106

realloc$32:	; Return £temporary106
x36973:	mov ax, [bp]	; 3: 139 70 0
x36976:	mov di, [bp + 4]	; 3: 139 126 4
x36979:	mov bp, [bp + 2]	; 3: 139 110 2
x36982:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x36984:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36988:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x36990:	mov ax, [bp + 6]	; 3: 139 70 6
x36993:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x36996:	mov word [bp + 10], realloc$37	; 5: 199 70 10 146 144
x37001:	mov [bp + 12], bp	; 3: 137 110 12
x37004:	add bp, 10	; 3: 131 197 10
x37007:	jmp free	; 3: 233 44 229

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x37010:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x37013:	mov ax, [bp]	; 3: 139 70 0
x37016:	mov di, [bp + 4]	; 3: 139 126 4
x37019:	mov bp, [bp + 2]	; 3: 139 110 2
x37022:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary109 newMemorySize
x37024:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary109 4
x37027:	add ax, 4	; 3: 131 192 4
x37030:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary111 oldMemoryPtr
x37033:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary112 £temporary111 4
x37036:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary113 £temporary112

realloc$45:	; Assign oldBlockPtr £temporary113
x37039:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary114 -> oldBlockPtr oldBlockPtr 0
x37042:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary114 -> oldBlockPtr
x37045:	mov ax, [si]	; 2: 139 4
x37047:	cmp [bp + 10], ax	; 3: 57 70 10
x37050:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary116 -> oldBlockPtr oldBlockPtr 0
x37052:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary116 -> oldBlockPtr newBlockSize
x37055:	mov ax, [bp + 10]	; 3: 139 70 10
x37058:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x37060:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x37063:	mov ax, [bp]	; 3: 139 70 0
x37066:	mov di, [bp + 4]	; 3: 139 126 4
x37069:	mov bp, [bp + 2]	; 3: 139 110 2
x37072:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x37074:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x37079:	mov ax, [g_firstBlockPtr]	; 3: 161 63 117
x37082:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x37085:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x37089:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x37091:	mov ax, [bp + 12]	; 3: 139 70 12
x37094:	cmp [bp + 16], ax	; 3: 57 70 16
x37097:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary119 currBlockPtr
x37099:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary119
x37102:	mov bx, [bp + 14]	; 3: 139 94 14
x37105:	sub bx, ax	; 2: 41 195
x37107:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x37110:	mov ax, [bp + 10]	; 3: 139 70 10
x37113:	cmp [bp + 18], ax	; 3: 57 70 18
x37116:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary122 -> oldBlockPtr oldBlockPtr 0
x37118:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary122 -> oldBlockPtr newBlockSize
x37121:	mov ax, [bp + 10]	; 3: 139 70 10
x37124:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x37126:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x37129:	mov ax, [bp]	; 3: 139 70 0
x37132:	mov di, [bp + 4]	; 3: 139 126 4
x37135:	mov bp, [bp + 2]	; 3: 139 110 2
x37138:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary123 currBlockPtr
x37140:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary123
x37143:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary124 -> currBlockPtr currBlockPtr 2
x37146:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary124 -> currBlockPtr
x37149:	mov ax, [si + 2]	; 3: 139 68 2
x37152:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x37155:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x37157:	mov ax, [bp + 8]	; 3: 139 70 8
x37160:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x37163:	mov word [bp + 14], realloc$71	; 5: 199 70 14 57 145
x37168:	mov [bp + 16], bp	; 3: 137 110 16
x37171:	add bp, 14	; 3: 131 197 14
x37174:	jmp malloc	; 3: 233 120 226

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary125

realloc$73:	; Assign newMemoryPtr £temporary125
x37177:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x37180:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x37184:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x37186:	mov ax, [bp + 14]	; 3: 139 70 14
x37189:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x37192:	mov ax, [bp + 6]	; 3: 139 70 6
x37195:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x37198:	mov ax, [bp + 8]	; 3: 139 70 8
x37201:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x37204:	mov word [bp + 16], realloc$80	; 5: 199 70 16 98 145
x37209:	mov [bp + 18], bp	; 3: 137 110 18
x37212:	add bp, 16	; 3: 131 197 16
x37215:	jmp memcpy	; 3: 233 79 1

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x37218:	mov ax, [bp + 6]	; 3: 139 70 6
x37221:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x37224:	mov word [bp + 16], realloc$84	; 5: 199 70 16 118 145
x37229:	mov [bp + 18], bp	; 3: 137 110 18
x37232:	add bp, 16	; 3: 131 197 16
x37235:	jmp free	; 3: 233 72 228

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x37238:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x37241:	mov ax, [bp]	; 3: 139 70 0
x37244:	mov di, [bp + 4]	; 3: 139 126 4
x37247:	mov bp, [bp + 2]	; 3: 139 110 2
x37250:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x37252:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x37255:	mov ax, [bp]	; 3: 139 70 0
x37258:	mov di, [bp + 4]	; 3: 139 126 4
x37261:	mov bp, [bp + 2]	; 3: 139 110 2
x37264:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

@273$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37266:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@274$string_newMemorySize203E3D200#:
x37312:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@275$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37331:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

@288$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37394:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@289$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x37440:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

@290$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37490:	db "C:\Users\Stefan\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 63: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 110 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

memcpy:	; IntegralToIntegral £temporary3940 target
x37553:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary3940
x37556:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary3941 source
x37559:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary3941
x37562:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x37565:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x37570:	mov ax, [bp + 10]	; 3: 139 70 10
x37573:	cmp [bp + 16], ax	; 3: 57 70 16
x37576:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary3945 charTarget index
x37578:	mov si, [bp + 12]	; 3: 139 118 12
x37581:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary3944 -> £temporary3945 £temporary3945 0

memcpy$8:	; BinaryAdd £temporary3947 charSource index
x37584:	mov di, [bp + 14]	; 3: 139 126 14
x37587:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary3946 -> £temporary3947 £temporary3947 0

memcpy$10:	; Assign £temporary3944 -> £temporary3945 £temporary3946 -> £temporary3947
x37590:	mov al, [di]	; 2: 138 5
x37592:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x37594:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x37597:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary3948 target
x37599:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary3948

memcpy$15:	; Return £temporary3948
x37602:	mov ax, [bp]	; 3: 139 70 0
x37605:	mov di, [bp + 4]	; 3: 139 126 4
x37608:	mov bp, [bp + 2]	; 3: 139 110 2
x37611:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37613:	mov word [bp + 12], @8905$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 216 148

print_test$2:	; Parameter 6 123 8
x37618:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x37623:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x37628:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x37633:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x37638:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x37643:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x37648:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x37653:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x37658:	mov word [bp + 6], print_test$11	; 5: 199 70 6 45 147
x37663:	mov [bp + 8], bp	; 3: 137 110 8
x37666:	add bp, 6	; 3: 131 197 6
x37669:	mov di, bp	; 2: 137 239
x37671:	add di, 16	; 3: 131 199 16
x37674:	jmp printf	; 3: 233 215 121

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37677:	mov word [bp + 12], @8915$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 20 149

print_test$14:	; Parameter 6 -123 8
x37682:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x37687:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x37692:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x37697:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x37702:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x37707:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x37712:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x37717:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x37722:	mov word [bp + 6], print_test$23	; 5: 199 70 6 109 147
x37727:	mov [bp + 8], bp	; 3: 137 110 8
x37730:	add bp, 6	; 3: 131 197 6
x37733:	mov di, bp	; 2: 137 239
x37735:	add di, 16	; 3: 131 199 16
x37738:	jmp printf	; 3: 233 151 121

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37741:	mov word [bp + 12], @8925$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 80 149

print_test$26:	; Parameter 6 123 8
x37746:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x37751:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x37756:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x37761:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x37766:	mov word [bp + 6], print_test$31	; 5: 199 70 6 153 147
x37771:	mov [bp + 8], bp	; 3: 137 110 8
x37774:	add bp, 6	; 3: 131 197 6
x37777:	mov di, bp	; 2: 137 239
x37779:	add di, 8	; 3: 131 199 8
x37782:	jmp printf	; 3: 233 107 121

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37785:	mov word [bp + 12], @8931$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 112 149

print_test$34:	; Parameter 6 -123 8
x37790:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x37795:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x37800:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x37805:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x37810:	mov word [bp + 6], print_test$39	; 5: 199 70 6 197 147
x37815:	mov [bp + 8], bp	; 3: 137 110 8
x37818:	add bp, 6	; 3: 131 197 6
x37821:	mov di, bp	; 2: 137 239
x37823:	add di, 8	; 3: 131 199 8
x37826:	jmp printf	; 3: 233 63 121

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37829:	mov word [bp + 12], @8937$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 144 149

print_test$42:	; PushFloat 123.456
x37834:	fld qword [@8938$float8$123.456#]	; 4: 221 6 228 149

print_test$43:	; Parameter 6 123.456 8
x37838:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x37841:	fld qword [@8939$float8$123.456#]	; 4: 221 6 236 149

print_test$45:	; Parameter 6 123.456 16
x37845:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x37848:	fld qword [@8940$float8$123.456#]	; 4: 221 6 244 149

print_test$47:	; Parameter 6 123.456 24
x37852:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x37855:	fld qword [@8941$float8$123.456#]	; 4: 221 6 252 149

print_test$49:	; Parameter 6 123.456 32
x37859:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x37862:	fld qword [@8942$float8$123.456#]	; 4: 221 6 4 150

print_test$51:	; Parameter 6 123.456 40
x37866:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x37869:	fld qword [@8943$float8$123.456#]	; 4: 221 6 12 150

print_test$53:	; Parameter 6 123.456 48
x37873:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x37876:	fld qword [@8944$float8$123.456#]	; 4: 221 6 20 150

print_test$55:	; Parameter 6 123.456 56
x37880:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x37883:	fld qword [@8945$float8$123.456#]	; 4: 221 6 28 150

print_test$57:	; Parameter 6 123.456 64
x37887:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x37890:	mov word [bp + 6], print_test$59	; 5: 199 70 6 21 148
x37895:	mov [bp + 8], bp	; 3: 137 110 8
x37898:	add bp, 6	; 3: 131 197 6
x37901:	mov di, bp	; 2: 137 239
x37903:	add di, 64	; 3: 131 199 64
x37906:	jmp printf	; 3: 233 239 120

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37909:	mov word [bp + 12], @8947$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 36 150

print_test$62:	; PushFloat -123.456
x37914:	fld qword [@8948$float8$minus123.456#]	; 4: 221 6 120 150

print_test$63:	; Parameter 6 -123.456 8
x37918:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x37921:	fld qword [@8949$float8$minus123.456#]	; 4: 221 6 128 150

print_test$65:	; Parameter 6 -123.456 16
x37925:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x37928:	fld qword [@8950$float8$minus123.456#]	; 4: 221 6 136 150

print_test$67:	; Parameter 6 -123.456 24
x37932:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x37935:	fld qword [@8951$float8$minus123.456#]	; 4: 221 6 144 150

print_test$69:	; Parameter 6 -123.456 32
x37939:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x37942:	fld qword [@8952$float8$minus123.456#]	; 4: 221 6 152 150

print_test$71:	; Parameter 6 -123.456 40
x37946:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x37949:	fld qword [@8953$float8$minus123.456#]	; 4: 221 6 160 150

print_test$73:	; Parameter 6 -123.456 48
x37953:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x37956:	fld qword [@8954$float8$minus123.456#]	; 4: 221 6 168 150

print_test$75:	; Parameter 6 -123.456 56
x37960:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x37963:	fld qword [@8955$float8$minus123.456#]	; 4: 221 6 176 150

print_test$77:	; Parameter 6 -123.456 64
x37967:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x37970:	mov word [bp + 6], print_test$79	; 5: 199 70 6 101 148
x37975:	mov [bp + 8], bp	; 3: 137 110 8
x37978:	add bp, 6	; 3: 131 197 6
x37981:	mov di, bp	; 2: 137 239
x37983:	add di, 64	; 3: 131 199 64
x37986:	jmp printf	; 3: 233 159 120

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x37989:	mov word [bp + 12], @8957$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 184 150

print_test$82:	; PushFloat 123.456
x37994:	fld qword [@8958$float8$123.456#]	; 4: 221 6 228 150

print_test$83:	; Parameter 6 123.456 8
x37998:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x38001:	fld qword [@8959$float8$123.456#]	; 4: 221 6 236 150

print_test$85:	; Parameter 6 123.456 16
x38005:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x38008:	fld qword [@8960$float8$123.456#]	; 4: 221 6 244 150

print_test$87:	; Parameter 6 123.456 24
x38012:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x38015:	fld qword [@8961$float8$123.456#]	; 4: 221 6 252 150

print_test$89:	; Parameter 6 123.456 32
x38019:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x38022:	mov word [bp + 6], print_test$91	; 5: 199 70 6 153 148
x38027:	mov [bp + 8], bp	; 3: 137 110 8
x38030:	add bp, 6	; 3: 131 197 6
x38033:	mov di, bp	; 2: 137 239
x38035:	add di, 32	; 3: 131 199 32
x38038:	jmp printf	; 3: 233 107 120

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38041:	mov word [bp + 12], @8963$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 4 151

print_test$94:	; PushFloat -123.456
x38046:	fld qword [@8964$float8$minus123.456#]	; 4: 221 6 48 151

print_test$95:	; Parameter 6 -123.456 8
x38050:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x38053:	fld qword [@8965$float8$minus123.456#]	; 4: 221 6 56 151

print_test$97:	; Parameter 6 -123.456 16
x38057:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x38060:	fld qword [@8966$float8$minus123.456#]	; 4: 221 6 64 151

print_test$99:	; Parameter 6 -123.456 24
x38064:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x38067:	fld qword [@8967$float8$minus123.456#]	; 4: 221 6 72 151

print_test$101:	; Parameter 6 -123.456 32
x38071:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x38074:	mov word [bp + 6], print_test$103	; 5: 199 70 6 205 148
x38079:	mov [bp + 8], bp	; 3: 137 110 8
x38082:	add bp, 6	; 3: 131 197 6
x38085:	mov di, bp	; 2: 137 239
x38087:	add di, 32	; 3: 131 199 32
x38090:	jmp printf	; 3: 233 55 120

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x38093:	mov ax, [bp]	; 3: 139 70 0
x38096:	mov di, [bp + 4]	; 3: 139 126 4
x38099:	mov bp, [bp + 2]	; 3: 139 110 2
x38102:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

@8905$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38104:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@8915$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38164:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@8925$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38224:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@8931$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38256:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@8937$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38288:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@8938$float8$123.456#:
x38372:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8939$float8$123.456#:
x38380:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8940$float8$123.456#:
x38388:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8941$float8$123.456#:
x38396:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8942$float8$123.456#:
x38404:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8943$float8$123.456#:
x38412:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8944$float8$123.456#:
x38420:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8945$float8$123.456#:
x38428:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8947$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38436:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@8948$float8$minus123.456#:
x38520:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8949$float8$minus123.456#:
x38528:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8950$float8$minus123.456#:
x38536:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8951$float8$minus123.456#:
x38544:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8952$float8$minus123.456#:
x38552:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8953$float8$minus123.456#:
x38560:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8954$float8$minus123.456#:
x38568:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8955$float8$minus123.456#:
x38576:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8957$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38584:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@8958$float8$123.456#:
x38628:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8959$float8$123.456#:
x38636:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8960$float8$123.456#:
x38644:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8961$float8$123.456#:
x38652:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@8963$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38660:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@8964$float8$minus123.456#:
x38704:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8965$float8$minus123.456#:
x38712:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8966$float8$minus123.456#:
x38720:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@8967$float8$minus123.456#:
x38728:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x38736:	mov word [bp + 12], @9340$string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 29 153

limits_test$2:	; Parameter 6 8 8
x38741:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x38746:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 109 151
x38751:	mov [bp + 8], bp	; 3: 137 110 8
x38754:	add bp, 6	; 3: 131 197 6
x38757:	mov di, bp	; 2: 137 239
x38759:	add di, 2	; 3: 131 199 2
x38762:	jmp printf	; 3: 233 151 117

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x38765:	mov word [bp + 12], @9343$string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 44 153

limits_test$7:	; Parameter 6 -128 8
x38770:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x38775:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 138 151
x38780:	mov [bp + 8], bp	; 3: 137 110 8
x38783:	add bp, 6	; 3: 131 197 6
x38786:	mov di, bp	; 2: 137 239
x38788:	add di, 2	; 3: 131 199 2
x38791:	jmp printf	; 3: 233 122 117

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x38794:	mov word [bp + 12], @9347$string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 60 153

limits_test$12:	; Parameter 6 127 8
x38799:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x38804:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 167 151
x38809:	mov [bp + 8], bp	; 3: 137 110 8
x38812:	add bp, 6	; 3: 131 197 6
x38815:	mov di, bp	; 2: 137 239
x38817:	add di, 2	; 3: 131 199 2
x38820:	jmp printf	; 3: 233 93 117

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x38823:	mov word [bp + 12], @9351$string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 75 153

limits_test$17:	; Parameter 6 255 8
x38828:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x38833:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 196 151
x38838:	mov [bp + 8], bp	; 3: 137 110 8
x38841:	add bp, 6	; 3: 131 197 6
x38844:	mov di, bp	; 2: 137 239
x38846:	add di, 2	; 3: 131 199 2
x38849:	jmp printf	; 3: 233 64 117

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x38852:	mov word [bp + 12], @9355$string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 92 153

limits_test$22:	; Parameter 6 -128 8
x38857:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x38862:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 225 151
x38867:	mov [bp + 8], bp	; 3: 137 110 8
x38870:	add bp, 6	; 3: 131 197 6
x38873:	mov di, bp	; 2: 137 239
x38875:	add di, 2	; 3: 131 199 2
x38878:	jmp printf	; 3: 233 35 117

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x38881:	mov word [bp + 12], @9359$string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 107 153

limits_test$27:	; Parameter 6 127 8
x38886:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x38891:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 254 151
x38896:	mov [bp + 8], bp	; 3: 137 110 8
x38899:	add bp, 6	; 3: 131 197 6
x38902:	mov di, bp	; 2: 137 239
x38904:	add di, 2	; 3: 131 199 2
x38907:	jmp printf	; 3: 233 6 117

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x38910:	mov word [bp + 12], @9363$string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 122 153

limits_test$32:	; Parameter 6 255 8
x38915:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x38920:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 27 152
x38925:	mov [bp + 8], bp	; 3: 137 110 8
x38928:	add bp, 6	; 3: 131 197 6
x38931:	mov di, bp	; 2: 137 239
x38933:	add di, 2	; 3: 131 199 2
x38936:	jmp printf	; 3: 233 233 116

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x38939:	mov word [bp + 12], @9367$string_INT_MIN203D2025i0A#	; 5: 199 70 12 139 153

limits_test$37:	; Parameter 6 -32768 8
x38944:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x38949:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 56 152
x38954:	mov [bp + 8], bp	; 3: 137 110 8
x38957:	add bp, 6	; 3: 131 197 6
x38960:	mov di, bp	; 2: 137 239
x38962:	add di, 2	; 3: 131 199 2
x38965:	jmp printf	; 3: 233 204 116

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x38968:	mov word [bp + 12], @9370$string_INT_MAX203D2025i0A#	; 5: 199 70 12 153 153

limits_test$42:	; Parameter 6 32767 8
x38973:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x38978:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 85 152
x38983:	mov [bp + 8], bp	; 3: 137 110 8
x38986:	add bp, 6	; 3: 131 197 6
x38989:	mov di, bp	; 2: 137 239
x38991:	add di, 2	; 3: 131 199 2
x38994:	jmp printf	; 3: 233 175 116

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x38997:	mov word [bp + 12], @9373$string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 167 153

limits_test$47:	; Parameter 6 65535 8
x39002:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x39007:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 114 152
x39012:	mov [bp + 8], bp	; 3: 137 110 8
x39015:	add bp, 6	; 3: 131 197 6
x39018:	mov di, bp	; 2: 137 239
x39020:	add di, 2	; 3: 131 199 2
x39023:	jmp printf	; 3: 233 146 116

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x39026:	mov word [bp + 12], @9376$string_LONG_MIN203D2025li0A#	; 5: 199 70 12 183 153

limits_test$52:	; Parameter 6 -2147483648 8
x39031:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x39039:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 146 152
x39044:	mov [bp + 8], bp	; 3: 137 110 8
x39047:	add bp, 6	; 3: 131 197 6
x39050:	mov di, bp	; 2: 137 239
x39052:	add di, 4	; 3: 131 199 4
x39055:	jmp printf	; 3: 233 114 116

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x39058:	mov word [bp + 12], @9379$string_LONG_MAX203D2025li0A#	; 5: 199 70 12 199 153

limits_test$57:	; Parameter 6 2147483647 8
x39063:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x39071:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 178 152
x39076:	mov [bp + 8], bp	; 3: 137 110 8
x39079:	add bp, 6	; 3: 131 197 6
x39082:	mov di, bp	; 2: 137 239
x39084:	add di, 4	; 3: 131 199 4
x39087:	jmp printf	; 3: 233 82 116

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x39090:	mov word [bp + 12], @9382$string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 215 153

limits_test$62:	; Parameter 6 4294967295 8
x39095:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x39103:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 210 152
x39108:	mov [bp + 8], bp	; 3: 137 110 8
x39111:	add bp, 6	; 3: 131 197 6
x39114:	mov di, bp	; 2: 137 239
x39116:	add di, 4	; 3: 131 199 4
x39119:	jmp printf	; 3: 233 50 116

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x39122:	mov word [bp + 12], @9385$string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 232 153

limits_test$67:	; Parameter 6 4294967295 8
x39127:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x39135:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 242 152
x39140:	mov [bp + 8], bp	; 3: 137 110 8
x39143:	add bp, 6	; 3: 131 197 6
x39146:	mov di, bp	; 2: 137 239
x39148:	add di, 4	; 3: 131 199 4
x39151:	jmp printf	; 3: 233 18 116

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x39154:	mov word [bp + 12], @9388$string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 249 153

limits_test$72:	; Parameter 6 4294967295 8
x39159:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x39167:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 18 153
x39172:	mov [bp + 8], bp	; 3: 137 110 8
x39175:	add bp, 6	; 3: 131 197 6
x39178:	mov di, bp	; 2: 137 239
x39180:	add di, 4	; 3: 131 199 4
x39183:	jmp printf	; 3: 233 242 115

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x39186:	mov ax, [bp]	; 3: 139 70 0
x39189:	mov di, [bp + 4]	; 3: 139 126 4
x39192:	mov bp, [bp + 2]	; 3: 139 110 2
x39195:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

@9340$string_CHAR_BIT203D2025i0A#:
x39197:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

@9343$string_CHAR_MIN203D2025i0A0A#:
x39212:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

@9347$string_CHAR_MAX203D2025i0A#:
x39228:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

@9351$string_UCHAR_MAX203D2025u0A0A#:
x39243:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

@9355$string_SHRT_MIN203D2025i0A#:
x39260:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

@9359$string_SHRT_MAX203D2025i0A#:
x39275:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

@9363$string_USHRT_MAX203D2025u0A0A#:
x39290:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

@9367$string_INT_MIN203D2025i0A#:
x39307:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

@9370$string_INT_MAX203D2025i0A#:
x39321:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

@9373$string_UINT_MAX203D2025u0A0A#:
x39335:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

@9376$string_LONG_MIN203D2025li0A#:
x39351:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

@9379$string_LONG_MAX203D2025li0A#:
x39367:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

@9382$string_ULONG_MAX203D2025lu0A#:
x39383:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

@9385$string_ULONG_MAX203D2025lx0A#:
x39400:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

@9388$string_ULONG_MAX203D2025lX0A#:
x39417:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x39434:	mov ax, [bp]	; 3: 139 70 0
x39437:	mov di, [bp + 4]	; 3: 139 126 4
x39440:	mov bp, [bp + 2]	; 3: 139 110 2
x39443:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x39445:	fld qword [@9920$float8$10#]	; 4: 221 6 93 154

setjmp_test$2:	; Parameter 6 10 6
x39449:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x39452:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 42 154
x39457:	mov [bp + 8], bp	; 3: 137 110 8
x39460:	add bp, 6	; 3: 131 197 6
x39463:	nop	; 1: 144
x39464:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x39466:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x39468:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x39471:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 61 154
x39476:	mov [bp + 8], bp	; 3: 137 110 8
x39479:	add bp, 6	; 3: 131 197 6
x39482:	nop	; 1: 144
x39483:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x39485:	fld qword [@9925$float8$0.1#]	; 4: 221 6 101 154

setjmp_test$12:	; Parameter 6 0.1 6
x39489:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x39492:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 82 154
x39497:	mov [bp + 8], bp	; 3: 137 110 8
x39500:	add bp, 6	; 3: 131 197 6
x39503:	nop	; 1: 144
x39504:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x39506:	mov ax, [bp]	; 3: 139 70 0
x39509:	mov di, [bp + 4]	; 3: 139 126 4
x39512:	mov bp, [bp + 2]	; 3: 139 110 2
x39515:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

@9920$float8$10#:
x39517:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@9925$float8$0.1#:
x39525:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x39533:	mov word [bp + 22], buffer	; 5: 199 70 22 233 154

test$2:	; Call 16 setjmp 0
x39538:	mov word [bp + 16], test$3	; 5: 199 70 16 128 154
x39543:	mov [bp + 18], bp	; 3: 137 110 18
x39546:	add bp, 16	; 3: 131 197 16
x39549:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4533

test$5:	; Assign message £temporary4533
x39552:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x39555:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x39559:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x39561:	mov word [bp + 22], @9906$string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 239 154

test$9:	; PushFloat x
x39566:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x39569:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x39572:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x39575:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x39578:	mov word [bp + 32], test$15	; 5: 199 70 32 168 154
x39583:	mov [bp + 34], bp	; 3: 137 110 34
x39586:	add bp, 32	; 3: 131 197 32
x39589:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4535

test$17:	; Parameter 16 £temporary4535 16
x39592:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x39595:	mov word [bp + 16], test$19	; 5: 199 70 16 190 154
x39600:	mov [bp + 18], bp	; 3: 137 110 18
x39603:	add bp, 16	; 3: 131 197 16
x39606:	mov di, bp	; 2: 137 239
x39608:	add di, 16	; 3: 131 199 16
x39611:	jmp printf	; 3: 233 70 114

test$19:	; PostCall 16

test$20:	; Goto 26
x39614:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x39616:	mov word [bp + 22], @9909$string_25s0A#	; 5: 199 70 22 254 154

test$23:	; Parameter 16 message 8
x39621:	mov ax, [bp + 14]	; 3: 139 70 14
x39624:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x39627:	mov word [bp + 16], test$25	; 5: 199 70 16 222 154
x39632:	mov [bp + 18], bp	; 3: 137 110 18
x39635:	add bp, 16	; 3: 131 197 16
x39638:	mov di, bp	; 2: 137 239
x39640:	add di, 2	; 3: 131 199 2
x39643:	jmp printf	; 3: 233 38 114

test$25:	; PostCall 16

test$26:	; Return 0
x39646:	mov ax, [bp]	; 3: 139 70 0
x39649:	mov di, [bp + 4]	; 3: 139 126 4
x39652:	mov bp, [bp + 2]	; 3: 139 110 2
x39655:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x39657:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

@9906$string_12E0202F2025f203D2025f0A#:
x39663:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

@9909$string_25s0A#:
x39678:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary621 bp

setjmp$1:	; Assign bp_pointer £temporary621
x39682:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary622 -> buf buf 0
x39685:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary623 -> bp_pointer bp_pointer 0
x39688:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary622 -> buf £temporary623 -> bp_pointer
x39691:	mov ax, [di]	; 2: 139 5
x39693:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary624 -> buf buf 2
x39695:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary625 -> bp_pointer bp_pointer 2
x39698:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary624 -> buf £temporary625 -> bp_pointer
x39701:	mov ax, [di + 2]	; 3: 139 69 2
x39704:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary626 -> buf buf 4
x39707:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary627 -> bp_pointer bp_pointer 4
x39710:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary626 -> buf £temporary627 -> bp_pointer
x39713:	mov ax, [di + 4]	; 3: 139 69 4
x39716:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x39719:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x39722:	mov ax, [bp]	; 3: 139 70 0
x39725:	mov di, [bp + 4]	; 3: 139 126 4
x39728:	mov bp, [bp + 2]	; 3: 139 110 2
x39731:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x39733:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x39735:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x39738:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x39741:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x39744:	mov word [bp + 14], inverse$6	; 5: 199 70 14 78 155
x39749:	mov [bp + 16], bp	; 3: 137 110 16
x39752:	add bp, 14	; 3: 131 197 14
x39755:	nop	; 1: 144
x39756:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4525

inverse$8:	; SetReturnValue £temporary4525

inverse$9:	; Return £temporary4525
x39758:	mov ax, [bp]	; 3: 139 70 0
x39761:	mov di, [bp + 4]	; 3: 139 126 4
x39764:	mov bp, [bp + 2]	; 3: 139 110 2
x39767:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x39769:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x39772:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x39774:	fcompp	; 2: 222 217
x39776:	fstsw ax	; 3: 155 223 224
x39779:	sahf	; 1: 158
x39780:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x39782:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x39785:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4529 x y
x39788:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4529

divide$7:	; Return £temporary4529
x39790:	mov ax, [bp]	; 3: 139 70 0
x39793:	mov di, [bp + 4]	; 3: 139 126 4
x39796:	mov bp, [bp + 2]	; 3: 139 110 2
x39799:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x39801:	mov word [bp + 28], buffer	; 5: 199 70 28 233 154

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x39806:	mov word [bp + 30], @9894$string_Division20by20Zero2E#	; 5: 199 70 30 158 155

divide$11:	; Call 22 longjmp 0
x39811:	mov word [bp + 22], divide$12	; 5: 199 70 22 145 155
x39816:	mov [bp + 24], bp	; 3: 137 110 24
x39819:	add bp, 22	; 3: 131 197 22
x39822:	nop	; 1: 144
x39823:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x39825:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x39827:	mov ax, [bp]	; 3: 139 70 0
x39830:	mov di, [bp + 4]	; 3: 139 126 4
x39833:	mov bp, [bp + 2]	; 3: 139 110 2
x39836:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

@9894$string_Division20by20Zero2E#:
x39838:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x39856:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary630 -> buf buf 0
x39859:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary630 -> buf
x39862:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary632 -> buf buf 4
x39864:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary632 -> buf
x39867:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary634 -> buf buf 2
x39870:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary634 -> buf
x39873:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x39876:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x39878:	mov ax, [bp]	; 3: 139 70 0
x39881:	mov di, [bp + 4]	; 3: 139 126 4
x39884:	mov bp, [bp + 2]	; 3: 139 110 2
x39887:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdio_test:	; Assign n 0
x39889:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5575 n
x39894:	mov si, bp	; 2: 137 238
x39896:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5575
x39899:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x39902:	mov word [bp + 16], @11763$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 185 163

stdio_test$5:	; Parameter 10 123 8
x39907:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x39912:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x39917:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x39925:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x39933:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x39938:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x39946:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 29 156
x39951:	mov [bp + 12], bp	; 3: 137 110 12
x39954:	add bp, 10	; 3: 131 197 10
x39957:	mov di, bp	; 2: 137 239
x39959:	add di, 18	; 3: 131 199 18
x39962:	jmp printf	; 3: 233 231 112

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x39965:	mov word [bp + 16], @11771$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 220 163

stdio_test$15:	; Parameter 10 123 8
x39970:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x39975:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x39980:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x39988:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x39996:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x40001:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x40009:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 92 156
x40014:	mov [bp + 12], bp	; 3: 137 110 12
x40017:	add bp, 10	; 3: 131 197 10
x40020:	mov di, bp	; 2: 137 239
x40022:	add di, 18	; 3: 131 199 18
x40025:	jmp printf	; 3: 233 168 112

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x40028:	mov word [bp + 16], @11779$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 4 164

stdio_test$25:	; Parameter 10 123 8
x40033:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x40038:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x40043:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x40051:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x40059:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x40064:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x40072:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 155 156
x40077:	mov [bp + 12], bp	; 3: 137 110 12
x40080:	add bp, 10	; 3: 131 197 10
x40083:	mov di, bp	; 2: 137 239
x40085:	add di, 18	; 3: 131 199 18
x40088:	jmp printf	; 3: 233 105 112

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x40091:	mov word [bp + 16], @11787$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 50 164

stdio_test$35:	; Parameter 10 123 8
x40096:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x40101:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x40106:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x40114:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x40122:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x40127:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x40135:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 218 156
x40140:	mov [bp + 12], bp	; 3: 137 110 12
x40143:	add bp, 10	; 3: 131 197 10
x40146:	mov di, bp	; 2: 137 239
x40148:	add di, 18	; 3: 131 199 18
x40151:	jmp printf	; 3: 233 42 112

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x40154:	mov word [bp + 16], @11795$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 96 164

stdio_test$45:	; Parameter 10 123 8
x40159:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x40164:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x40169:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x40177:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x40185:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x40190:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x40198:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 25 157
x40203:	mov [bp + 12], bp	; 3: 137 110 12
x40206:	add bp, 10	; 3: 131 197 10
x40209:	mov di, bp	; 2: 137 239
x40211:	add di, 18	; 3: 131 199 18
x40214:	jmp printf	; 3: 233 235 111

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x40217:	mov word [bp + 16], @11807$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 149 164

stdio_test$55:	; Parameter 10 123 8
x40222:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x40227:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x40232:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x40240:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x40248:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x40253:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x40261:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 88 157
x40266:	mov [bp + 12], bp	; 3: 137 110 12
x40269:	add bp, 10	; 3: 131 197 10
x40272:	mov di, bp	; 2: 137 239
x40274:	add di, 18	; 3: 131 199 18
x40277:	jmp printf	; 3: 233 172 111

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x40280:	mov word [bp + 16], @11815$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 195 164

stdio_test$65:	; Parameter 10 123 8
x40285:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x40290:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x40295:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x40303:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x40311:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x40316:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x40324:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 151 157
x40329:	mov [bp + 12], bp	; 3: 137 110 12
x40332:	add bp, 10	; 3: 131 197 10
x40335:	mov di, bp	; 2: 137 239
x40337:	add di, 18	; 3: 131 199 18
x40340:	jmp printf	; 3: 233 109 111

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x40343:	mov word [bp + 16], @11823$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 247 164

stdio_test$75:	; Parameter 10 123 8
x40348:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x40353:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x40358:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x40366:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x40374:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x40379:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x40387:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 214 157
x40392:	mov [bp + 12], bp	; 3: 137 110 12
x40395:	add bp, 10	; 3: 131 197 10
x40398:	mov di, bp	; 2: 137 239
x40400:	add di, 18	; 3: 131 199 18
x40403:	jmp printf	; 3: 233 46 111

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x40406:	mov word [bp + 16], @11831$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 43 165

stdio_test$85:	; Parameter 10 123 8
x40411:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x40416:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x40421:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x40429:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x40437:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x40442:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x40450:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 21 158
x40455:	mov [bp + 12], bp	; 3: 137 110 12
x40458:	add bp, 10	; 3: 131 197 10
x40461:	mov di, bp	; 2: 137 239
x40463:	add di, 18	; 3: 131 199 18
x40466:	jmp printf	; 3: 233 239 110

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x40469:	mov word [bp + 16], @11839$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 102 165

stdio_test$95:	; Parameter 10 123 8
x40474:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x40479:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x40484:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x40492:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x40500:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x40505:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x40513:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 84 158
x40518:	mov [bp + 12], bp	; 3: 137 110 12
x40521:	add bp, 10	; 3: 131 197 10
x40524:	mov di, bp	; 2: 137 239
x40526:	add di, 18	; 3: 131 199 18
x40529:	jmp printf	; 3: 233 176 110

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x40532:	mov word [bp + 16], @11847$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 148 165

stdio_test$105:	; Parameter 10 123 8
x40537:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x40542:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x40547:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x40555:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x40563:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x40568:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x40576:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 147 158
x40581:	mov [bp + 12], bp	; 3: 137 110 12
x40584:	add bp, 10	; 3: 131 197 10
x40587:	mov di, bp	; 2: 137 239
x40589:	add di, 18	; 3: 131 199 18
x40592:	jmp printf	; 3: 233 113 110

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x40595:	mov word [bp + 16], @11855$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 200 165

stdio_test$115:	; Parameter 10 123 8
x40600:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x40605:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x40610:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x40618:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x40626:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x40631:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x40639:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 210 158
x40644:	mov [bp + 12], bp	; 3: 137 110 12
x40647:	add bp, 10	; 3: 131 197 10
x40650:	mov di, bp	; 2: 137 239
x40652:	add di, 18	; 3: 131 199 18
x40655:	jmp printf	; 3: 233 50 110

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x40658:	mov word [bp + 16], @11863$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 252 165

stdio_test$125:	; Parameter 10 123 8
x40663:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x40668:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x40673:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x40681:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x40689:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x40694:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x40702:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 17 159
x40707:	mov [bp + 12], bp	; 3: 137 110 12
x40710:	add bp, 10	; 3: 131 197 10
x40713:	mov di, bp	; 2: 137 239
x40715:	add di, 18	; 3: 131 199 18
x40718:	jmp printf	; 3: 233 243 109

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x40721:	mov word [bp + 16], @11871$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 55 166

stdio_test$135:	; Parameter 10 123 8
x40726:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x40731:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x40736:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x40741:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x40749:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x40757:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x40765:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 80 159
x40770:	mov [bp + 12], bp	; 3: 137 110 12
x40773:	add bp, 10	; 3: 131 197 10
x40776:	mov di, bp	; 2: 137 239
x40778:	add di, 18	; 3: 131 199 18
x40781:	jmp printf	; 3: 233 180 109

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x40784:	mov word [bp + 16], @11879$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 89 166

stdio_test$145:	; Parameter 10 123 8
x40789:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x40794:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x40799:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x40804:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x40812:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x40820:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x40828:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 143 159
x40833:	mov [bp + 12], bp	; 3: 137 110 12
x40836:	add bp, 10	; 3: 131 197 10
x40839:	mov di, bp	; 2: 137 239
x40841:	add di, 18	; 3: 131 199 18
x40844:	jmp printf	; 3: 233 117 109

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x40847:	mov word [bp + 16], @11887$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 129 166

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x40852:	mov word [bp + 18], @11888$string_Hello2C20World21#	; 5: 199 70 18 151 166

stdio_test$156:	; Parameter 10 88 10
x40857:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x40862:	mov ax, [bp + 8]	; 3: 139 70 8
x40865:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x40868:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 183 159
x40873:	mov [bp + 12], bp	; 3: 137 110 12
x40876:	add bp, 10	; 3: 131 197 10
x40879:	mov di, bp	; 2: 137 239
x40881:	add di, 6	; 3: 131 199 6
x40884:	jmp printf	; 3: 233 77 109

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x40887:	mov word [bp + 16], @11892$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 165 166

stdio_test$162:	; PushFloat 123.456
x40892:	fld qword [@11893$float8$123.456#]	; 4: 221 6 191 166

stdio_test$163:	; Parameter 10 123.456 8
x40896:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x40899:	fld qword [@11894$float8$123.456#]	; 4: 221 6 199 166

stdio_test$165:	; Parameter 10 123.456 16
x40903:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x40906:	fld qword [@11895$float8$123.456#]	; 4: 221 6 207 166

stdio_test$167:	; Parameter 10 123.456 24
x40910:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x40913:	fld qword [@11896$float8$123456.1#]	; 4: 221 6 215 166

stdio_test$169:	; Parameter 10 123456.1 32
x40917:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x40920:	fld qword [@11897$float8$123456.1#]	; 4: 221 6 223 166

stdio_test$171:	; Parameter 10 123456.1 40
x40924:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x40927:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 242 159
x40932:	mov [bp + 12], bp	; 3: 137 110 12
x40935:	add bp, 10	; 3: 131 197 10
x40938:	mov di, bp	; 2: 137 239
x40940:	add di, 40	; 3: 131 199 40
x40943:	jmp printf	; 3: 233 18 109

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x40946:	mov word [bp + 16], @11899$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 231 166

stdio_test$176:	; PushFloat 123.456
x40951:	fld qword [@11900$float8$123.456#]	; 4: 221 6 6 167

stdio_test$177:	; Parameter 10 123.456 8
x40955:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x40958:	fld qword [@11901$float8$123.456#]	; 4: 221 6 14 167

stdio_test$179:	; Parameter 10 123.456 16
x40962:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x40965:	fld qword [@11902$float8$123.456#]	; 4: 221 6 22 167

stdio_test$181:	; Parameter 10 123.456 24
x40969:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x40972:	fld qword [@11903$float8$123456.1#]	; 4: 221 6 30 167

stdio_test$183:	; Parameter 10 123456.1 32
x40976:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x40979:	fld qword [@11904$float8$123456.1#]	; 4: 221 6 38 167

stdio_test$185:	; Parameter 10 123456.1 40
x40983:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x40986:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 45 160
x40991:	mov [bp + 12], bp	; 3: 137 110 12
x40994:	add bp, 10	; 3: 131 197 10
x40997:	mov di, bp	; 2: 137 239
x40999:	add di, 40	; 3: 131 199 40
x41002:	jmp printf	; 3: 233 215 108

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41005:	mov word [bp + 16], @11906$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 46 167

stdio_test$190:	; PushFloat 123.456
x41010:	fld qword [@11907$float8$123.456#]	; 4: 221 6 77 167

stdio_test$191:	; Parameter 10 123.456 8
x41014:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x41017:	fld qword [@11908$float8$123.456#]	; 4: 221 6 85 167

stdio_test$193:	; Parameter 10 123.456 16
x41021:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x41024:	fld qword [@11909$float8$123.456#]	; 4: 221 6 93 167

stdio_test$195:	; Parameter 10 123.456 24
x41028:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x41031:	fld qword [@11910$float8$123.456#]	; 4: 221 6 101 167

stdio_test$197:	; Parameter 10 123.456 32
x41035:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x41038:	fld qword [@11911$float8$123.456#]	; 4: 221 6 109 167

stdio_test$199:	; Parameter 10 123.456 40
x41042:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x41045:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 104 160
x41050:	mov [bp + 12], bp	; 3: 137 110 12
x41053:	add bp, 10	; 3: 131 197 10
x41056:	mov di, bp	; 2: 137 239
x41058:	add di, 40	; 3: 131 199 40
x41061:	jmp printf	; 3: 233 156 108

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41064:	mov word [bp + 16], @11913$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 117 167

stdio_test$204:	; PushFloat 123.456
x41069:	fld qword [@11914$float8$123.456#]	; 4: 221 6 153 167

stdio_test$205:	; Parameter 10 123.456 8
x41073:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x41076:	fld qword [@11915$float8$123.456#]	; 4: 221 6 161 167

stdio_test$207:	; Parameter 10 123.456 16
x41080:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x41083:	fld qword [@11916$float8$123.456#]	; 4: 221 6 169 167

stdio_test$209:	; Parameter 10 123.456 24
x41087:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x41090:	fld qword [@11917$float8$123.456#]	; 4: 221 6 177 167

stdio_test$211:	; Parameter 10 123.456 32
x41094:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x41097:	fld qword [@11918$float8$123.456#]	; 4: 221 6 185 167

stdio_test$213:	; Parameter 10 123.456 40
x41101:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x41104:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 163 160
x41109:	mov [bp + 12], bp	; 3: 137 110 12
x41112:	add bp, 10	; 3: 131 197 10
x41115:	mov di, bp	; 2: 137 239
x41117:	add di, 40	; 3: 131 199 40
x41120:	jmp printf	; 3: 233 97 108

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41123:	mov word [bp + 16], @11920$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 193 167

stdio_test$218:	; PushFloat 123.456
x41128:	fld qword [@11921$float8$123.456#]	; 4: 221 6 234 167

stdio_test$219:	; Parameter 10 123.456 8
x41132:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x41135:	fld qword [@11922$float8$123.456#]	; 4: 221 6 242 167

stdio_test$221:	; Parameter 10 123.456 16
x41139:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x41142:	fld qword [@11923$float8$123.456#]	; 4: 221 6 250 167

stdio_test$223:	; Parameter 10 123.456 24
x41146:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x41149:	fld qword [@11924$float8$123.456#]	; 4: 221 6 2 168

stdio_test$225:	; Parameter 10 123.456 32
x41153:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x41156:	fld qword [@11925$float8$123.456#]	; 4: 221 6 10 168

stdio_test$227:	; Parameter 10 123.456 40
x41160:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x41163:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 222 160
x41168:	mov [bp + 12], bp	; 3: 137 110 12
x41171:	add bp, 10	; 3: 131 197 10
x41174:	mov di, bp	; 2: 137 239
x41176:	add di, 40	; 3: 131 199 40
x41179:	jmp printf	; 3: 233 38 108

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41182:	mov word [bp + 16], @11927$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 18 168

stdio_test$232:	; PushFloat 123.456
x41187:	fld qword [@11928$float8$123.456#]	; 4: 221 6 65 168

stdio_test$233:	; Parameter 10 123.456 8
x41191:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x41194:	fld qword [@11929$float8$123.456#]	; 4: 221 6 73 168

stdio_test$235:	; Parameter 10 123.456 16
x41198:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x41201:	fld qword [@11930$float8$123.456#]	; 4: 221 6 81 168

stdio_test$237:	; Parameter 10 123.456 24
x41205:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x41208:	fld qword [@11931$float8$123.456#]	; 4: 221 6 89 168

stdio_test$239:	; Parameter 10 123.456 32
x41212:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x41215:	fld qword [@11932$float8$123.456#]	; 4: 221 6 97 168

stdio_test$241:	; Parameter 10 123.456 40
x41219:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x41222:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 25 161
x41227:	mov [bp + 12], bp	; 3: 137 110 12
x41230:	add bp, 10	; 3: 131 197 10
x41233:	mov di, bp	; 2: 137 239
x41235:	add di, 40	; 3: 131 199 40
x41238:	jmp printf	; 3: 233 235 107

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x41241:	mov word [bp + 16], @11934$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 105 168

stdio_test$246:	; PushFloat -123.456
x41246:	fld qword [@11935$float8$minus123.456#]	; 4: 221 6 131 168

stdio_test$247:	; Parameter 10 -123.456 8
x41250:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x41253:	fld qword [@11936$float8$minus123.456#]	; 4: 221 6 139 168

stdio_test$249:	; Parameter 10 -123.456 16
x41257:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x41260:	fld qword [@11937$float8$minus123.456#]	; 4: 221 6 147 168

stdio_test$251:	; Parameter 10 -123.456 24
x41264:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x41267:	fld qword [@11938$float8$minus0.000000123456#]	; 4: 221 6 155 168

stdio_test$253:	; Parameter 10 -0.000000123456 32
x41271:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x41274:	fld qword [@11939$float8$minus0.000000123456#]	; 4: 221 6 163 168

stdio_test$255:	; Parameter 10 -0.000000123456 40
x41278:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x41281:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 84 161
x41286:	mov [bp + 12], bp	; 3: 137 110 12
x41289:	add bp, 10	; 3: 131 197 10
x41292:	mov di, bp	; 2: 137 239
x41294:	add di, 40	; 3: 131 199 40
x41297:	jmp printf	; 3: 233 176 107

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x41300:	mov word [bp + 16], @11941$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 171 168

stdio_test$260:	; PushFloat -123.456
x41305:	fld qword [@11942$float8$minus123.456#]	; 4: 221 6 202 168

stdio_test$261:	; Parameter 10 -123.456 8
x41309:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x41312:	fld qword [@11943$float8$minus123.456#]	; 4: 221 6 210 168

stdio_test$263:	; Parameter 10 -123.456 16
x41316:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x41319:	fld qword [@11944$float8$minus123.456#]	; 4: 221 6 218 168

stdio_test$265:	; Parameter 10 -123.456 24
x41323:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x41326:	fld qword [@11945$float8$minus0.000000123456#]	; 4: 221 6 226 168

stdio_test$267:	; Parameter 10 -0.000000123456 32
x41330:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x41333:	fld qword [@11946$float8$minus0.000000123456#]	; 4: 221 6 234 168

stdio_test$269:	; Parameter 10 -0.000000123456 40
x41337:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x41340:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 143 161
x41345:	mov [bp + 12], bp	; 3: 137 110 12
x41348:	add bp, 10	; 3: 131 197 10
x41351:	mov di, bp	; 2: 137 239
x41353:	add di, 40	; 3: 131 199 40
x41356:	jmp printf	; 3: 233 117 107

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41359:	mov word [bp + 16], @11948$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 242 168

stdio_test$274:	; PushFloat -123.456
x41364:	fld qword [@11949$float8$minus123.456#]	; 4: 221 6 17 169

stdio_test$275:	; Parameter 10 -123.456 8
x41368:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x41371:	fld qword [@11950$float8$minus123.456#]	; 4: 221 6 25 169

stdio_test$277:	; Parameter 10 -123.456 16
x41375:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x41378:	fld qword [@11951$float8$minus123.456#]	; 4: 221 6 33 169

stdio_test$279:	; Parameter 10 -123.456 24
x41382:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x41385:	fld qword [@11952$float8$minus123.456#]	; 4: 221 6 41 169

stdio_test$281:	; Parameter 10 -123.456 32
x41389:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x41392:	fld qword [@11953$float8$minus123.456#]	; 4: 221 6 49 169

stdio_test$283:	; Parameter 10 -123.456 40
x41396:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x41399:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 202 161
x41404:	mov [bp + 12], bp	; 3: 137 110 12
x41407:	add bp, 10	; 3: 131 197 10
x41410:	mov di, bp	; 2: 137 239
x41412:	add di, 40	; 3: 131 199 40
x41415:	jmp printf	; 3: 233 58 107

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41418:	mov word [bp + 16], @11955$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 57 169

stdio_test$288:	; PushFloat -123.456
x41423:	fld qword [@11956$float8$minus123.456#]	; 4: 221 6 93 169

stdio_test$289:	; Parameter 10 -123.456 8
x41427:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x41430:	fld qword [@11957$float8$minus123.456#]	; 4: 221 6 101 169

stdio_test$291:	; Parameter 10 -123.456 16
x41434:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x41437:	fld qword [@11958$float8$minus123.456#]	; 4: 221 6 109 169

stdio_test$293:	; Parameter 10 -123.456 24
x41441:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x41444:	fld qword [@11959$float8$minus123.456#]	; 4: 221 6 117 169

stdio_test$295:	; Parameter 10 -123.456 32
x41448:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x41451:	fld qword [@11960$float8$minus123.456#]	; 4: 221 6 125 169

stdio_test$297:	; Parameter 10 -123.456 40
x41455:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x41458:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 5 162
x41463:	mov [bp + 12], bp	; 3: 137 110 12
x41466:	add bp, 10	; 3: 131 197 10
x41469:	mov di, bp	; 2: 137 239
x41471:	add di, 40	; 3: 131 199 40
x41474:	jmp printf	; 3: 233 255 106

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41477:	mov word [bp + 16], @11962$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 133 169

stdio_test$302:	; PushFloat -123.456
x41482:	fld qword [@11963$float8$minus123.456#]	; 4: 221 6 174 169

stdio_test$303:	; Parameter 10 -123.456 8
x41486:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x41489:	fld qword [@11964$float8$minus123.456#]	; 4: 221 6 182 169

stdio_test$305:	; Parameter 10 -123.456 16
x41493:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x41496:	fld qword [@11965$float8$minus123.456#]	; 4: 221 6 190 169

stdio_test$307:	; Parameter 10 -123.456 24
x41500:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x41503:	fld qword [@11966$float8$minus123.456#]	; 4: 221 6 198 169

stdio_test$309:	; Parameter 10 -123.456 32
x41507:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x41510:	fld qword [@11967$float8$minus123.456#]	; 4: 221 6 206 169

stdio_test$311:	; Parameter 10 -123.456 40
x41514:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x41517:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 64 162
x41522:	mov [bp + 12], bp	; 3: 137 110 12
x41525:	add bp, 10	; 3: 131 197 10
x41528:	mov di, bp	; 2: 137 239
x41530:	add di, 40	; 3: 131 199 40
x41533:	jmp printf	; 3: 233 196 106

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41536:	mov word [bp + 16], @11969$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 214 169

stdio_test$316:	; PushFloat -123.456
x41541:	fld qword [@11970$float8$minus123.456#]	; 4: 221 6 5 170

stdio_test$317:	; Parameter 10 -123.456 8
x41545:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x41548:	fld qword [@11971$float8$minus123.456#]	; 4: 221 6 13 170

stdio_test$319:	; Parameter 10 -123.456 16
x41552:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x41555:	fld qword [@11972$float8$minus123.456#]	; 4: 221 6 21 170

stdio_test$321:	; Parameter 10 -123.456 24
x41559:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x41562:	fld qword [@11973$float8$minus123.456#]	; 4: 221 6 29 170

stdio_test$323:	; Parameter 10 -123.456 32
x41566:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x41569:	fld qword [@11974$float8$minus123.456#]	; 4: 221 6 37 170

stdio_test$325:	; Parameter 10 -123.456 40
x41573:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x41576:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 123 162
x41581:	mov [bp + 12], bp	; 3: 137 110 12
x41584:	add bp, 10	; 3: 131 197 10
x41587:	mov di, bp	; 2: 137 239
x41589:	add di, 40	; 3: 131 199 40
x41592:	jmp printf	; 3: 233 137 106

stdio_test$327:	; PostCall 10

stdio_test$328:	; Assign a 0
x41595:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$329:	; Assign b 0
x41600:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

stdio_test$330:	; Assign n 0
x41605:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

stdio_test$331:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$332:	; Parameter 12 string_Please20write20three20integers3A20# 6
x41610:	mov word [bp + 18], @11985$string_Please20write20three20integers3A20#	; 5: 199 70 18 45 170

stdio_test$333:	; Call 12 printf 0
x41615:	mov word [bp + 12], stdio_test$334	; 5: 199 70 12 159 162
x41620:	mov [bp + 14], bp	; 3: 137 110 14
x41623:	add bp, 12	; 3: 131 197 12
x41626:	mov di, bp	; 2: 137 239
x41628:	jmp printf	; 3: 233 101 106

stdio_test$334:	; PostCall 12

stdio_test$335:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$336:	; Parameter 12 string_1232045620789# 6
x41631:	mov word [bp + 18], @11987$string_1232045620789#	; 5: 199 70 18 75 170

stdio_test$337:	; Parameter 12 string_25i20252Ai2025i2025n# 8
x41636:	mov word [bp + 20], @11988$string_25i20252Ai2025i2025n#	; 5: 199 70 20 87 170

stdio_test$338:	; address £temporary5605 a
x41641:	mov si, bp	; 2: 137 238
x41643:	add si, 6	; 3: 131 198 6

stdio_test$339:	; Parameter 12 £temporary5605 10
x41646:	mov [bp + 22], si	; 3: 137 118 22

stdio_test$340:	; address £temporary5606 b
x41649:	mov si, bp	; 2: 137 238
x41651:	add si, 8	; 3: 131 198 8

stdio_test$341:	; Parameter 12 £temporary5606 12
x41654:	mov [bp + 24], si	; 3: 137 118 24

stdio_test$342:	; address £temporary5607 n
x41657:	mov si, bp	; 2: 137 238
x41659:	add si, 10	; 3: 131 198 10

stdio_test$343:	; Parameter 12 £temporary5607 14
x41662:	mov [bp + 26], si	; 3: 137 118 26

stdio_test$344:	; Call 12 sscanf 0
x41665:	mov word [bp + 12], stdio_test$345	; 5: 199 70 12 212 162
x41670:	mov [bp + 14], bp	; 3: 137 110 14
x41673:	add bp, 12	; 3: 131 197 12
x41676:	mov di, bp	; 2: 137 239
x41678:	add di, 6	; 3: 131 199 6
x41681:	jmp sscanf	; 3: 233 15 8

stdio_test$345:	; PostCall 12

stdio_test$346:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$347:	; Parameter 12 string_3C25i3E203C25i3E203C25i3E0A# 6
x41684:	mov word [bp + 18], @11993$string_3C25i3E203C25i3E203C25i3E0A#	; 5: 199 70 18 100 170

stdio_test$348:	; Parameter 12 a 8
x41689:	mov ax, [bp + 6]	; 3: 139 70 6
x41692:	mov [bp + 20], ax	; 3: 137 70 20

stdio_test$349:	; Parameter 12 b 10
x41695:	mov ax, [bp + 8]	; 3: 139 70 8
x41698:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$350:	; Parameter 12 n 12
x41701:	mov ax, [bp + 10]	; 3: 139 70 10
x41704:	mov [bp + 24], ax	; 3: 137 70 24

stdio_test$351:	; Call 12 printf 0
x41707:	mov word [bp + 12], stdio_test$352	; 5: 199 70 12 254 162
x41712:	mov [bp + 14], bp	; 3: 137 110 14
x41715:	add bp, 12	; 3: 131 197 12
x41718:	mov di, bp	; 2: 137 239
x41720:	add di, 6	; 3: 131 199 6
x41723:	jmp printf	; 3: 233 6 106

stdio_test$352:	; PostCall 12

stdio_test$353:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$354:	; Parameter 106 string_Please20write20the20patterns205Babc5D3A20# 6
x41726:	mov word [bp + 112], @11998$string_Please20write20the20patterns205Babc5D3A20#	; 5: 199 70 112 116 170

stdio_test$355:	; Call 106 printf 0
x41731:	mov word [bp + 106], stdio_test$356	; 5: 199 70 106 19 163
x41736:	mov [bp + 108], bp	; 3: 137 110 108
x41739:	add bp, 106	; 3: 131 197 106
x41742:	mov di, bp	; 2: 137 239
x41744:	jmp printf	; 3: 233 241 105

stdio_test$356:	; PostCall 106

stdio_test$357:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$358:	; Parameter 106 string_abcdef# 6
x41747:	mov word [bp + 112], @12000$string_abcdef#	; 5: 199 70 112 150 170

stdio_test$359:	; Parameter 106 string_255Babc5D# 8
x41752:	mov word [bp + 114], @12001$string_255Babc5D#	; 5: 199 70 114 157 170

stdio_test$360:	; Parameter 106 s 10
x41757:	mov [bp + 116], bp	; 3: 137 110 116
x41760:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$361:	; Call 106 sscanf 0
x41764:	mov word [bp + 106], stdio_test$362	; 5: 199 70 106 55 163
x41769:	mov [bp + 108], bp	; 3: 137 110 108
x41772:	add bp, 106	; 3: 131 197 106
x41775:	mov di, bp	; 2: 137 239
x41777:	add di, 2	; 3: 131 199 2
x41780:	jmp sscanf	; 3: 233 172 7

stdio_test$362:	; PostCall 106

stdio_test$363:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$364:	; Parameter 106 string_3C25s3E0A# 6
x41783:	mov word [bp + 112], @12003$string_3C25s3E0A#	; 5: 199 70 112 164 170

stdio_test$365:	; Parameter 106 s 8
x41788:	mov [bp + 114], bp	; 3: 137 110 114
x41791:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$366:	; Call 106 printf 0
x41795:	mov word [bp + 106], stdio_test$367	; 5: 199 70 106 86 163
x41800:	mov [bp + 108], bp	; 3: 137 110 108
x41803:	add bp, 106	; 3: 131 197 106
x41806:	mov di, bp	; 2: 137 239
x41808:	add di, 2	; 3: 131 199 2
x41811:	jmp printf	; 3: 233 174 105

stdio_test$367:	; PostCall 106

stdio_test$368:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$369:	; Parameter 106 string_Please20write20the20patterns205B5Eabc5D3A20# 6
x41814:	mov word [bp + 112], @12005$string_Please20write20the20patterns205B5Eabc5D3A20#	; 5: 199 70 112 170 170

stdio_test$370:	; Call 106 printf 0
x41819:	mov word [bp + 106], stdio_test$371	; 5: 199 70 106 107 163
x41824:	mov [bp + 108], bp	; 3: 137 110 108
x41827:	add bp, 106	; 3: 131 197 106
x41830:	mov di, bp	; 2: 137 239
x41832:	jmp printf	; 3: 233 153 105

stdio_test$371:	; PostCall 106

stdio_test$372:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$373:	; Parameter 106 string_defabc# 6
x41835:	mov word [bp + 112], @12007$string_defabc#	; 5: 199 70 112 205 170

stdio_test$374:	; Parameter 106 string_255B5Eabc5D# 8
x41840:	mov word [bp + 114], @12008$string_255B5Eabc5D#	; 5: 199 70 114 212 170

stdio_test$375:	; Parameter 106 s 10
x41845:	mov [bp + 116], bp	; 3: 137 110 116
x41848:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$376:	; Call 106 sscanf 0
x41852:	mov word [bp + 106], stdio_test$377	; 5: 199 70 106 143 163
x41857:	mov [bp + 108], bp	; 3: 137 110 108
x41860:	add bp, 106	; 3: 131 197 106
x41863:	mov di, bp	; 2: 137 239
x41865:	add di, 2	; 3: 131 199 2
x41868:	jmp sscanf	; 3: 233 84 7

stdio_test$377:	; PostCall 106

stdio_test$378:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$379:	; Parameter 106 string_3C25s3E0A0A# 6
x41871:	mov word [bp + 112], @12010$string_3C25s3E0A0A#	; 5: 199 70 112 220 170

stdio_test$380:	; Parameter 106 s 8
x41876:	mov [bp + 114], bp	; 3: 137 110 114
x41879:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$381:	; Call 106 printf 0
x41883:	mov word [bp + 106], stdio_test$382	; 5: 199 70 106 174 163
x41888:	mov [bp + 108], bp	; 3: 137 110 108
x41891:	add bp, 106	; 3: 131 197 106
x41894:	mov di, bp	; 2: 137 239
x41896:	add di, 2	; 3: 131 199 2
x41899:	jmp printf	; 3: 233 86 105

stdio_test$382:	; PostCall 106

stdio_test$383:	; Return 0
x41902:	mov ax, [bp]	; 3: 139 70 0
x41905:	mov di, [bp + 4]	; 3: 139 126 4
x41908:	mov bp, [bp + 2]	; 3: 139 110 2
x41911:	jmp ax	; 2: 255 224

stdio_test$384:	; FunctionEnd stdio_test

@11763$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x41913:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

@11771$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x41948:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

@11779$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x41988:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

@11787$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x42034:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

@11795$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x42080:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

@11807$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x42133:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

@11815$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x42179:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

@11823$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x42231:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

@11831$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x42283:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

@11839$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x42342:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

@11847$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x42388:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

@11855$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x42440:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

@11863$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x42492:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

@11871$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x42551:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

@11879$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x42585:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

@11887$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x42625:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

@11888$string_Hello2C20World21#:
x42647:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@11892$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x42661:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@11893$float8$123.456#:
x42687:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11894$float8$123.456#:
x42695:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11895$float8$123.456#:
x42703:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11896$float8$123456.1#:
x42711:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@11897$float8$123456.1#:
x42719:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@11899$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x42727:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@11900$float8$123.456#:
x42758:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11901$float8$123.456#:
x42766:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11902$float8$123.456#:
x42774:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11903$float8$123456.1#:
x42782:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@11904$float8$123456.1#:
x42790:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@11906$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x42798:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@11907$float8$123.456#:
x42829:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11908$float8$123.456#:
x42837:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11909$float8$123.456#:
x42845:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11910$float8$123.456#:
x42853:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11911$float8$123.456#:
x42861:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11913$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x42869:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@11914$float8$123.456#:
x42905:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11915$float8$123.456#:
x42913:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11916$float8$123.456#:
x42921:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11917$float8$123.456#:
x42929:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11918$float8$123.456#:
x42937:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11920$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x42945:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@11921$float8$123.456#:
x42986:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11922$float8$123.456#:
x42994:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11923$float8$123.456#:
x43002:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11924$float8$123.456#:
x43010:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11925$float8$123.456#:
x43018:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11927$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43026:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@11928$float8$123.456#:
x43073:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11929$float8$123.456#:
x43081:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11930$float8$123.456#:
x43089:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11931$float8$123.456#:
x43097:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11932$float8$123.456#:
x43105:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@11934$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x43113:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@11935$float8$minus123.456#:
x43139:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11936$float8$minus123.456#:
x43147:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11937$float8$minus123.456#:
x43155:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11938$float8$minus0.000000123456#:
x43163:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@11939$float8$minus0.000000123456#:
x43171:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@11941$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x43179:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@11942$float8$minus123.456#:
x43210:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11943$float8$minus123.456#:
x43218:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11944$float8$minus123.456#:
x43226:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11945$float8$minus0.000000123456#:
x43234:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@11946$float8$minus0.000000123456#:
x43242:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@11948$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x43250:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@11949$float8$minus123.456#:
x43281:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11950$float8$minus123.456#:
x43289:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11951$float8$minus123.456#:
x43297:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11952$float8$minus123.456#:
x43305:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11953$float8$minus123.456#:
x43313:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11955$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x43321:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@11956$float8$minus123.456#:
x43357:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11957$float8$minus123.456#:
x43365:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11958$float8$minus123.456#:
x43373:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11959$float8$minus123.456#:
x43381:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11960$float8$minus123.456#:
x43389:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11962$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x43397:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@11963$float8$minus123.456#:
x43438:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11964$float8$minus123.456#:
x43446:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11965$float8$minus123.456#:
x43454:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11966$float8$minus123.456#:
x43462:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11967$float8$minus123.456#:
x43470:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11969$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43478:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@11970$float8$minus123.456#:
x43525:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11971$float8$minus123.456#:
x43533:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11972$float8$minus123.456#:
x43541:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11973$float8$minus123.456#:
x43549:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11974$float8$minus123.456#:
x43557:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@11985$string_Please20write20three20integers3A20#:
x43565:	db "Please write three integers: ", 0	; 30: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 114 101 101 32 105 110 116 101 103 101 114 115 58 32 0

@11987$string_1232045620789#:
x43595:	db "123 456 789", 0	; 12: 49 50 51 32 52 53 54 32 55 56 57 0

@11988$string_25i20252Ai2025i2025n#:
x43607:	db "%i %*i %i %n", 0	; 13: 37 105 32 37 42 105 32 37 105 32 37 110 0

@11993$string_3C25i3E203C25i3E203C25i3E0A#:
x43620:	db "<%i> <%i> <%i>", 10, 0	; 16: 60 37 105 62 32 60 37 105 62 32 60 37 105 62 10 0

@11998$string_Please20write20the20patterns205Babc5D3A20#:
x43636:	db "Please write the patterns [abc]: ", 0	; 34: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 97 98 99 93 58 32 0

@12000$string_abcdef#:
x43670:	db "abcdef", 0	; 7: 97 98 99 100 101 102 0

@12001$string_255Babc5D#:
x43677:	db "%[abc]", 0	; 7: 37 91 97 98 99 93 0

@12003$string_3C25s3E0A#:
x43684:	db "<%s>", 10, 0	; 6: 60 37 115 62 10 0

@12005$string_Please20write20the20patterns205B5Eabc5D3A20#:
x43690:	db "Please write the patterns [^abc]: ", 0	; 35: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 94 97 98 99 93 58 32 0

@12007$string_defabc#:
x43725:	db "defabc", 0	; 7: 100 101 102 97 98 99 0

@12008$string_255B5Eabc5D#:
x43732:	db "%[^abc]", 0	; 8: 37 91 94 97 98 99 93 0

@12010$string_3C25s3E0A0A#:
x43740:	db "<%s>", 10, 10, 0	; 7: 60 37 115 62 10 10 0

sscanf:	; address £temporary1577 format
x43747:	mov si, bp	; 2: 137 238
x43749:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1578 £temporary1577

sscanf$2:	; BinaryAdd arg_list £temporary1578 2
x43752:	add si, 2	; 3: 131 198 2
x43755:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x43758:	mov ax, [bp + 6]	; 3: 139 70 6
x43761:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x43764:	mov ax, [bp + 8]	; 3: 139 70 8
x43767:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x43770:	mov ax, [di + 10]	; 3: 139 69 10
x43773:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x43776:	mov word [di + 12], sscanf$8	; 5: 199 69 12 19 171
x43781:	mov [di + 14], bp	; 3: 137 109 14
x43784:	mov [di + 16], di	; 3: 137 125 16
x43787:	add di, 12	; 3: 131 199 12
x43790:	mov bp, di	; 2: 137 253
x43792:	nop	; 1: 144
x43793:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1580

sscanf$10:	; SetReturnValue £temporary1580

sscanf$11:	; Return £temporary1580
x43795:	mov ax, [bp]	; 3: 139 70 0
x43798:	mov di, [bp + 4]	; 3: 139 126 4
x43801:	mov bp, [bp + 2]	; 3: 139 110 2
x43804:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x43806:	mov word [g_inStatus], 1	; 6: 199 6 72 96 1 0

vsscanf$1:	; IntegralToIntegral £temporary1585 inString
x43812:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1585
x43815:	mov [g_inDevice], ax	; 3: 163 74 96

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x43818:	mov ax, [bp + 8]	; 3: 139 70 8
x43821:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x43824:	mov ax, [bp + 10]	; 3: 139 70 10
x43827:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x43830:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 68 171
x43835:	mov [bp + 14], bp	; 3: 137 110 14
x43838:	add bp, 12	; 3: 131 197 12
x43841:	jmp scanFormat	; 3: 233 8 181

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1586

vsscanf$9:	; SetReturnValue £temporary1586

vsscanf$10:	; Return £temporary1586
x43844:	mov ax, [bp]	; 3: 139 70 0
x43847:	mov di, [bp + 4]	; 3: 139 126 4
x43850:	mov bp, [bp + 2]	; 3: 139 110 2
x43853:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

string_test:	; Assign s string_Hello2C20World21#
x43855:	mov word [bp + 8], @9516$string_Hello2C20World21#	; 5: 199 70 8 214 177

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x43860:	mov word [bp + 218], @9525$string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 228 177

string_test$3:	; Parameter 212 s 8
x43866:	mov ax, [bp + 8]	; 3: 139 70 8
x43869:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x43873:	mov ax, [bp + 8]	; 3: 139 70 8
x43876:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x43880:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 121 171
x43886:	mov [bp + 224], bp	; 4: 137 174 224 0
x43890:	add bp, 222	; 4: 129 197 222 0
x43894:	jmp strlen	; 3: 233 144 225

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4323

string_test$9:	; Parameter 212 £temporary4323 10
x43897:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x43901:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 147 171
x43907:	mov [bp + 214], bp	; 4: 137 174 214 0
x43911:	add bp, 212	; 4: 129 197 212 0
x43915:	mov di, bp	; 2: 137 239
x43917:	add di, 4	; 3: 131 199 4
x43920:	jmp printf	; 3: 233 113 97

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x43923:	mov [bp + 218], bp	; 4: 137 174 218 0
x43927:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x43932:	mov ax, [bp + 8]	; 3: 139 70 8
x43935:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x43939:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 180 171
x43945:	mov [bp + 214], bp	; 4: 137 174 214 0
x43949:	add bp, 212	; 4: 129 197 212 0
x43953:	jmp strcpy	; 3: 233 11 179

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x43956:	mov [bp + 218], bp	; 4: 137 174 218 0
x43960:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x43965:	mov ax, [bp + 8]	; 3: 139 70 8
x43968:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x43972:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x43978:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 219 171
x43984:	mov [bp + 214], bp	; 4: 137 174 214 0
x43988:	add bp, 212	; 4: 129 197 212 0
x43992:	jmp strncpy	; 3: 233 37 8

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4327 -> u u 5
x43995:	mov si, bp	; 2: 137 238
x43997:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4327 -> u 0
x44000:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44004:	mov word [bp + 218], @9536$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 247 177

string_test$27:	; Parameter 212 t 8
x44010:	mov [bp + 220], bp	; 4: 137 174 220 0
x44014:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x44019:	mov [bp + 222], bp	; 4: 137 174 222 0
x44023:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x44028:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 18 172
x44034:	mov [bp + 214], bp	; 4: 137 174 214 0
x44038:	add bp, 212	; 4: 129 197 212 0
x44042:	mov di, bp	; 2: 137 239
x44044:	add di, 4	; 3: 131 199 4
x44047:	jmp printf	; 3: 233 242 96

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x44050:	mov [bp + 218], bp	; 4: 137 174 218 0
x44054:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x44059:	mov word [bp + 220], @9538$string_abc#	; 6: 199 134 220 0 11 178

string_test$34:	; Call 212 strcat 0
x44065:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 50 172
x44071:	mov [bp + 214], bp	; 4: 137 174 214 0
x44075:	add bp, 212	; 4: 129 197 212 0
x44079:	jmp strcat	; 3: 233 250 224

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x44082:	mov [bp + 218], bp	; 4: 137 174 218 0
x44086:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x44091:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 76 172
x44097:	mov [bp + 214], bp	; 4: 137 174 214 0
x44101:	add bp, 212	; 4: 129 197 212 0
x44105:	jmp strlen	; 3: 233 189 224

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4330

string_test$41:	; Assign i £temporary4330
x44108:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x44111:	mov [bp + 218], bp	; 4: 137 174 218 0
x44115:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x44120:	mov word [bp + 220], @9541$string_abc#	; 6: 199 134 220 0 15 178

string_test$45:	; Parameter 212 2 10
x44126:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x44132:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 117 172
x44138:	mov [bp + 214], bp	; 4: 137 174 214 0
x44142:	add bp, 212	; 4: 129 197 212 0
x44146:	jmp strncat	; 3: 233 220 7

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4332 i 2
x44149:	mov ax, [bp + 6]	; 3: 139 70 6
x44152:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4334 u £temporary4332
x44155:	mov si, bp	; 2: 137 238
x44157:	add si, 110	; 3: 131 198 110
x44160:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4333 -> £temporary4334 £temporary4334 0

string_test$51:	; Assign £temporary4333 -> £temporary4334 0
x44162:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44165:	mov word [bp + 218], @9552$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 19 178

string_test$54:	; Parameter 212 t 8
x44171:	mov [bp + 220], bp	; 4: 137 174 220 0
x44175:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x44180:	mov [bp + 222], bp	; 4: 137 174 222 0
x44184:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x44189:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 179 172
x44195:	mov [bp + 214], bp	; 4: 137 174 214 0
x44199:	add bp, 212	; 4: 129 197 212 0
x44203:	mov di, bp	; 2: 137 239
x44205:	add di, 4	; 3: 131 199 4
x44208:	jmp printf	; 3: 233 81 96

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x44211:	mov word [bp + 218], @9554$string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 39 178

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x44217:	mov ax, [bp + 8]	; 3: 139 70 8
x44220:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x44224:	mov [bp + 228], bp	; 4: 137 174 228 0
x44228:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x44233:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 218 172
x44239:	mov [bp + 222], bp	; 4: 137 174 222 0
x44243:	add bp, 220	; 4: 129 197 220 0
x44247:	jmp strcmp	; 3: 233 176 176

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4336

string_test$66:	; Parameter 212 £temporary4336 8
x44250:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x44254:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 244 172
x44260:	mov [bp + 214], bp	; 4: 137 174 214 0
x44264:	add bp, 212	; 4: 129 197 212 0
x44268:	mov di, bp	; 2: 137 239
x44270:	add di, 2	; 3: 131 199 2
x44273:	jmp printf	; 3: 233 16 96

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x44276:	mov word [bp + 218], @9557$string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 58 178

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x44282:	mov ax, [bp + 8]	; 3: 139 70 8
x44285:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x44289:	mov [bp + 228], bp	; 4: 137 174 228 0
x44293:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x44298:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x44304:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 33 173
x44310:	mov [bp + 222], bp	; 4: 137 174 222 0
x44314:	add bp, 220	; 4: 129 197 220 0
x44318:	jmp strncmp	; 3: 233 151 7

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4338

string_test$78:	; Parameter 212 £temporary4338 8
x44321:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x44325:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 59 173
x44331:	mov [bp + 214], bp	; 4: 137 174 214 0
x44335:	add bp, 212	; 4: 129 197 212 0
x44339:	mov di, bp	; 2: 137 239
x44341:	add di, 2	; 3: 131 199 2
x44344:	jmp printf	; 3: 233 201 95

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x44347:	mov ax, [bp + 8]	; 3: 139 70 8
x44350:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x44354:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x44360:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 89 173
x44366:	mov [bp + 214], bp	; 4: 137 174 214 0
x44370:	add bp, 212	; 4: 129 197 212 0
x44374:	jmp strchr	; 3: 233 100 116

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4340

string_test$87:	; Assign p £temporary4340
x44377:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x44381:	mov word [bp + 218], @9565$string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 81 178

string_test$90:	; Equal 93 p 0
x44387:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44392:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4346 p s
x44394:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44398:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x44401:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4346 -1
x44403:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4346 8
x44406:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x44410:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 144 173
x44416:	mov [bp + 214], bp	; 4: 137 174 214 0
x44420:	add bp, 212	; 4: 129 197 212 0
x44424:	mov di, bp	; 2: 137 239
x44426:	add di, 2	; 3: 131 199 2
x44429:	jmp printf	; 3: 233 116 95

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x44432:	mov ax, [bp + 8]	; 3: 139 70 8
x44435:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x44439:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x44445:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 174 173
x44451:	mov [bp + 214], bp	; 4: 137 174 214 0
x44455:	add bp, 212	; 4: 129 197 212 0
x44459:	jmp strrchr	; 3: 233 142 7

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4348

string_test$103:	; Assign p £temporary4348
x44462:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x44466:	mov word [bp + 218], @9583$string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 102 178

string_test$106:	; Equal 109 p 0
x44472:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44477:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4354 p s
x44479:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44483:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x44486:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4354 -1
x44488:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4354 8
x44491:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x44495:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 229 173
x44501:	mov [bp + 214], bp	; 4: 137 174 214 0
x44505:	add bp, 212	; 4: 129 197 212 0
x44509:	mov di, bp	; 2: 137 239
x44511:	add di, 2	; 3: 131 199 2
x44514:	jmp printf	; 3: 233 31 95

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x44517:	mov ax, [bp + 8]	; 3: 139 70 8
x44520:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x44524:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x44530:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 3 174
x44536:	mov [bp + 214], bp	; 4: 137 174 214 0
x44540:	add bp, 212	; 4: 129 197 212 0
x44544:	jmp strchr	; 3: 233 186 115

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4356

string_test$119:	; Assign p £temporary4356
x44547:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x44551:	mov word [bp + 218], @9601$string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 124 178

string_test$122:	; Equal 125 p 0
x44557:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44562:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4362 p s
x44564:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44568:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x44571:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4362 -1
x44573:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4362 8
x44576:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x44580:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 58 174
x44586:	mov [bp + 214], bp	; 4: 137 174 214 0
x44590:	add bp, 212	; 4: 129 197 212 0
x44594:	mov di, bp	; 2: 137 239
x44596:	add di, 2	; 3: 131 199 2
x44599:	jmp printf	; 3: 233 202 94

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x44602:	mov ax, [bp + 8]	; 3: 139 70 8
x44605:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x44609:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x44615:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 88 174
x44621:	mov [bp + 214], bp	; 4: 137 174 214 0
x44625:	add bp, 212	; 4: 129 197 212 0
x44629:	jmp strrchr	; 3: 233 228 6

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4364

string_test$135:	; Assign p £temporary4364
x44632:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x44636:	mov word [bp + 218], @9619$string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 145 178

string_test$138:	; Equal 141 p 0
x44642:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44647:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4370 p s
x44649:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44653:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x44656:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4370 -1
x44658:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4370 8
x44661:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x44665:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 143 174
x44671:	mov [bp + 214], bp	; 4: 137 174 214 0
x44675:	add bp, 212	; 4: 129 197 212 0
x44679:	mov di, bp	; 2: 137 239
x44681:	add di, 2	; 3: 131 199 2
x44684:	jmp printf	; 3: 233 117 94

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x44687:	mov ax, [bp + 8]	; 3: 139 70 8
x44690:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x44694:	mov word [bp + 220], @9634$string_Hello2C20World21#	; 6: 199 134 220 0 167 178

string_test$148:	; Parameter 212 20 10
x44700:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x44706:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 179 174
x44712:	mov [bp + 214], bp	; 4: 137 174 214 0
x44716:	add bp, 212	; 4: 129 197 212 0
x44720:	jmp memcpy	; 3: 233 254 227

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x44723:	mov [bp + 218], bp	; 4: 137 174 218 0
x44727:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x44732:	mov word [bp + 220], @9640$string_Hello2C20World21#	; 6: 199 134 220 0 181 178

string_test$154:	; Parameter 212 20 10
x44738:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x44744:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 217 174
x44750:	mov [bp + 214], bp	; 4: 137 174 214 0
x44754:	add bp, 212	; 4: 129 197 212 0
x44758:	jmp memmove	; 3: 233 176 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x44761:	mov [bp + 218], bp	; 4: 137 174 218 0
x44765:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x44770:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x44776:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x44782:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 255 174
x44788:	mov [bp + 214], bp	; 4: 137 174 214 0
x44792:	add bp, 212	; 4: 129 197 212 0
x44796:	jmp memset	; 3: 233 240 6

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4375 -> u u 19
x44799:	mov si, bp	; 2: 137 238
x44801:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4375 -> u 0
x44804:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x44808:	mov word [bp + 218], @9659$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 195 178

string_test$167:	; Parameter 212 s 8
x44814:	mov ax, [bp + 8]	; 3: 139 70 8
x44817:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x44821:	mov [bp + 222], bp	; 4: 137 174 222 0
x44825:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x44830:	mov [bp + 224], bp	; 4: 137 174 224 0
x44834:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x44839:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 61 175
x44845:	mov [bp + 214], bp	; 4: 137 174 214 0
x44849:	add bp, 212	; 4: 129 197 212 0
x44853:	mov di, bp	; 2: 137 239
x44855:	add di, 6	; 3: 131 199 6
x44858:	jmp printf	; 3: 233 199 93

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x44861:	mov ax, [bp + 8]	; 3: 139 70 8
x44864:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x44868:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x44874:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x44880:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 97 175
x44886:	mov [bp + 214], bp	; 4: 137 174 214 0
x44890:	add bp, 212	; 4: 129 197 212 0
x44894:	jmp memchr	; 3: 233 206 6

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4377

string_test$179:	; Assign p £temporary4377
x44897:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44901:	mov word [bp + 218], @9668$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 225 178

string_test$182:	; Equal 185 p 0
x44907:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44912:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4383 p s
x44914:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44918:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x44921:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4383 -1
x44923:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4383 8
x44926:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x44930:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 152 175
x44936:	mov [bp + 214], bp	; 4: 137 174 214 0
x44940:	add bp, 212	; 4: 129 197 212 0
x44944:	mov di, bp	; 2: 137 239
x44946:	add di, 2	; 3: 131 199 2
x44949:	jmp printf	; 3: 233 108 93

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x44952:	mov ax, [bp + 8]	; 3: 139 70 8
x44955:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x44959:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x44965:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x44971:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 188 175
x44977:	mov [bp + 214], bp	; 4: 137 174 214 0
x44981:	add bp, 212	; 4: 129 197 212 0
x44985:	jmp memchr	; 3: 233 115 6

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4385

string_test$196:	; Assign p £temporary4385
x44988:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44992:	mov word [bp + 218], @9690$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 11 179

string_test$199:	; Equal 202 p 0
x44998:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45003:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4391 p s
x45005:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45009:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x45012:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4391 -1
x45014:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4391 8
x45017:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x45021:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 243 175
x45027:	mov [bp + 214], bp	; 4: 137 174 214 0
x45031:	add bp, 212	; 4: 129 197 212 0
x45035:	mov di, bp	; 2: 137 239
x45037:	add di, 2	; 3: 131 199 2
x45040:	jmp printf	; 3: 233 17 93

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_s3A202225s222C20t3A202225s220A# 6
x45043:	mov word [bp + 218], @9705$string_s3A202225s222C20t3A202225s220A#	; 6: 199 134 218 0 53 179

string_test$208:	; Parameter 212 s 8
x45049:	mov ax, [bp + 8]	; 3: 139 70 8
x45052:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$209:	; Parameter 212 t 10
x45056:	mov [bp + 222], bp	; 4: 137 174 222 0
x45060:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$210:	; Call 212 printf 0
x45065:	mov word [bp + 212], string_test$211	; 6: 199 134 212 0 31 176
x45071:	mov [bp + 214], bp	; 4: 137 174 214 0
x45075:	add bp, 212	; 4: 129 197 212 0
x45079:	mov di, bp	; 2: 137 239
x45081:	add di, 4	; 3: 131 199 4
x45084:	jmp printf	; 3: 233 229 92

string_test$211:	; PostCall 212

string_test$212:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$213:	; Parameter 212 string_strcmp28s2C20t29203D2025i0A# 6
x45087:	mov word [bp + 218], @9707$string_strcmp28s2C20t29203D2025i0A#	; 6: 199 134 218 0 71 179

string_test$214:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$215:	; Parameter 212 s 14
x45093:	mov ax, [bp + 8]	; 3: 139 70 8
x45096:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$216:	; Parameter 212 t 16
x45100:	mov [bp + 228], bp	; 4: 137 174 228 0
x45104:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$217:	; Call 212 strcmp 8
x45109:	mov word [bp + 220], string_test$218	; 6: 199 134 220 0 70 176
x45115:	mov [bp + 222], bp	; 4: 137 174 222 0
x45119:	add bp, 220	; 4: 129 197 220 0
x45123:	jmp strcmp	; 3: 233 68 173

string_test$218:	; PostCall 212

string_test$219:	; GetReturnValue £temporary4394

string_test$220:	; Parameter 212 £temporary4394 8
x45126:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$221:	; Call 212 printf 0
x45130:	mov word [bp + 212], string_test$222	; 6: 199 134 212 0 96 176
x45136:	mov [bp + 214], bp	; 4: 137 174 214 0
x45140:	add bp, 212	; 4: 129 197 212 0
x45144:	mov di, bp	; 2: 137 239
x45146:	add di, 2	; 3: 131 199 2
x45149:	jmp printf	; 3: 233 164 92

string_test$222:	; PostCall 212

string_test$223:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$224:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x45152:	mov word [bp + 218], @9710$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 90 179

string_test$225:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$226:	; Parameter 212 s 14
x45158:	mov ax, [bp + 8]	; 3: 139 70 8
x45161:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$227:	; Parameter 212 t 16
x45165:	mov [bp + 228], bp	; 4: 137 174 228 0
x45169:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$228:	; Parameter 212 20 18
x45174:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$229:	; Call 212 memcmp 8
x45180:	mov word [bp + 220], string_test$230	; 6: 199 134 220 0 141 176
x45186:	mov [bp + 222], bp	; 4: 137 174 222 0
x45190:	add bp, 220	; 4: 129 197 220 0
x45194:	jmp memcmp	; 3: 233 245 5

string_test$230:	; PostCall 212

string_test$231:	; GetReturnValue £temporary4396

string_test$232:	; Parameter 212 £temporary4396 8
x45197:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$233:	; Call 212 printf 0
x45201:	mov word [bp + 212], string_test$234	; 6: 199 134 212 0 167 176
x45207:	mov [bp + 214], bp	; 4: 137 174 214 0
x45211:	add bp, 212	; 4: 129 197 212 0
x45215:	mov di, bp	; 2: 137 239
x45217:	add di, 2	; 3: 131 199 2
x45220:	jmp printf	; 3: 233 93 92

string_test$234:	; PostCall 212

string_test$235:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$236:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45223:	mov word [bp + 218], @9717$string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 130 179

string_test$237:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$238:	; Parameter 212 s 14
x45229:	mov ax, [bp + 8]	; 3: 139 70 8
x45232:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$239:	; Parameter 212 string_Hello2C20C# 16
x45236:	mov word [bp + 228], @9718$string_Hello2C20C#	; 6: 199 134 228 0 158 179

string_test$240:	; Call 212 strspn 8
x45242:	mov word [bp + 220], string_test$241	; 6: 199 134 220 0 203 176
x45248:	mov [bp + 222], bp	; 4: 137 174 222 0
x45252:	add bp, 220	; 4: 129 197 220 0
x45256:	jmp strspn	; 3: 233 35 6

string_test$241:	; PostCall 212

string_test$242:	; GetReturnValue £temporary4398

string_test$243:	; Parameter 212 £temporary4398 8
x45259:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$244:	; Call 212 printf 0
x45263:	mov word [bp + 212], string_test$245	; 6: 199 134 212 0 229 176
x45269:	mov [bp + 214], bp	; 4: 137 174 214 0
x45273:	add bp, 212	; 4: 129 197 212 0
x45277:	mov di, bp	; 2: 137 239
x45279:	add di, 2	; 3: 131 199 2
x45282:	jmp printf	; 3: 233 31 92

string_test$245:	; PostCall 212

string_test$246:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$247:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45285:	mov word [bp + 218], @9721$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 167 179

string_test$248:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$249:	; Parameter 212 s 14
x45291:	mov ax, [bp + 8]	; 3: 139 70 8
x45294:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$250:	; Parameter 212 string_Hello2C20C# 16
x45298:	mov word [bp + 228], @9722$string_Hello2C20C#	; 6: 199 134 228 0 196 179

string_test$251:	; Call 212 strcspn 8
x45304:	mov word [bp + 220], string_test$252	; 6: 199 134 220 0 9 177
x45310:	mov [bp + 222], bp	; 4: 137 174 222 0
x45314:	add bp, 220	; 4: 129 197 220 0
x45318:	jmp strcspn	; 3: 233 69 6

string_test$252:	; PostCall 212

string_test$253:	; GetReturnValue £temporary4400

string_test$254:	; Parameter 212 £temporary4400 8
x45321:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$255:	; Call 212 printf 0
x45325:	mov word [bp + 212], string_test$256	; 6: 199 134 212 0 35 177
x45331:	mov [bp + 214], bp	; 4: 137 174 214 0
x45335:	add bp, 212	; 4: 129 197 212 0
x45339:	mov di, bp	; 2: 137 239
x45341:	add di, 2	; 3: 131 199 2
x45344:	jmp printf	; 3: 233 225 91

string_test$256:	; PostCall 212

string_test$257:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$258:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x45347:	mov word [bp + 218], @9725$string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 205 179

string_test$259:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$260:	; Parameter 212 errno 14
x45353:	mov ax, [errno]	; 3: 161 230 10
x45356:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$261:	; Call 212 strerror 8
x45360:	mov word [bp + 220], string_test$262	; 6: 199 134 220 0 65 177
x45366:	mov [bp + 222], bp	; 4: 137 174 222 0
x45370:	add bp, 220	; 4: 129 197 220 0
x45374:	jmp strerror	; 3: 233 221 130

string_test$262:	; PostCall 212

string_test$263:	; GetReturnValue £temporary4402

string_test$264:	; Parameter 212 £temporary4402 8
x45377:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$265:	; Call 212 printf 0
x45381:	mov word [bp + 212], string_test$266	; 6: 199 134 212 0 91 177
x45387:	mov [bp + 214], bp	; 4: 137 174 214 0
x45391:	add bp, 212	; 4: 129 197 212 0
x45395:	mov di, bp	; 2: 137 239
x45397:	add di, 2	; 3: 131 199 2
x45400:	jmp printf	; 3: 233 169 91

string_test$266:	; PostCall 212

string_test$267:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$268:	; Parameter 212 s 6
x45403:	mov ax, [bp + 8]	; 3: 139 70 8
x45406:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$269:	; Parameter 212 string_2C# 8
x45410:	mov word [bp + 220], @9728$string_2C#	; 6: 199 134 220 0 229 179

string_test$270:	; Call 212 strtok 0
x45416:	mov word [bp + 212], string_test$271	; 6: 199 134 212 0 121 177
x45422:	mov [bp + 214], bp	; 4: 137 174 214 0
x45426:	add bp, 212	; 4: 129 197 212 0
x45430:	jmp strtok	; 3: 233 53 6

string_test$271:	; PostCall 212

string_test$272:	; GetReturnValue £temporary4404

string_test$273:	; Assign p £temporary4404
x45433:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$274:	; Equal 288 p 0
x45437:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45442:	je string_test$288	; 2: 116 71

string_test$275:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$276:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x45444:	mov word [bp + 218], @9734$string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 231 179

string_test$277:	; Parameter 212 p 8
x45450:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45454:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$278:	; Call 212 printf 0
x45458:	mov word [bp + 212], string_test$279	; 6: 199 134 212 0 168 177
x45464:	mov [bp + 214], bp	; 4: 137 174 214 0
x45468:	add bp, 212	; 4: 129 197 212 0
x45472:	mov di, bp	; 2: 137 239
x45474:	add di, 2	; 3: 131 199 2
x45477:	jmp printf	; 3: 233 92 91

string_test$279:	; PostCall 212

string_test$280:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$281:	; Parameter 212 0 6
x45480:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$282:	; Parameter 212 string_2C# 8
x45486:	mov word [bp + 220], @9739$string_2C#	; 6: 199 134 220 0 254 179

string_test$283:	; Call 212 strtok 0
x45492:	mov word [bp + 212], string_test$284	; 6: 199 134 212 0 197 177
x45498:	mov [bp + 214], bp	; 4: 137 174 214 0
x45502:	add bp, 212	; 4: 129 197 212 0
x45506:	jmp strtok	; 3: 233 233 5

string_test$284:	; PostCall 212

string_test$285:	; GetReturnValue £temporary4407

string_test$286:	; Assign p £temporary4407
x45509:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$287:	; Goto 274
x45513:	jmp string_test$274	; 2: 235 178

string_test$288:	; Return 0
x45515:	mov ax, [bp]	; 3: 139 70 0
x45518:	mov di, [bp + 4]	; 3: 139 126 4
x45521:	mov bp, [bp + 2]	; 3: 139 110 2
x45524:	jmp ax	; 2: 255 224

string_test$289:	; FunctionEnd string_test

@9516$string_Hello2C20World21#:
x45526:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9525$string_strlen282225s2229203D2025i0A#:
x45540:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

@9536$string_t203D202225s222C20u203D202225s220A#:
x45559:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9538$string_abc#:
x45579:	db "abc", 0	; 4: 97 98 99 0

@9541$string_abc#:
x45583:	db "abc", 0	; 4: 97 98 99 0

@9552$string_t203D202225s222C20u203D202225s220A#:
x45587:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9554$string_strcmp28s2C20u29203D2025i0A#:
x45607:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

@9557$string_strncmp28s2C20u2C20229203D2025i0A#:
x45626:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

@9565$string_strchr28s2C2027l2729203D2025i0A#:
x45649:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9583$string_strrchr28s2C2027l2729203D2025i0A#:
x45670:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9601$string_strchr28s2C2027x2729203D2025i0A#:
x45692:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9619$string_strrchr28s2C2027x2729203D2025i0A#:
x45713:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9634$string_Hello2C20World21#:
x45735:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9640$string_Hello2C20World21#:
x45749:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9659$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x45763:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9668$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45793:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9690$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45835:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9705$string_s3A202225s222C20t3A202225s220A#:
x45877:	db "s: ", 34, "%s", 34, ", t: ", 34, "%s", 34, 10, 0	; 18: 115 58 32 34 37 115 34 44 32 116 58 32 34 37 115 34 10 0

@9707$string_strcmp28s2C20t29203D2025i0A#:
x45895:	db "strcmp(s, t) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 116 41 32 61 32 37 105 10 0

@9710$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x45914:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9717$string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x45954:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9718$string_Hello2C20C#:
x45982:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9721$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x45991:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9722$string_Hello2C20C#:
x46020:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9725$string_strerror28errno29203D202225s220A#:
x46029:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

@9728$string_2C#:
x46053:	db ",", 0	; 2: 44 0

@9734$string_strtok28s2C20222C2229203D202225s220A#:
x46055:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

@9739$string_2C#:
x46078:	db ",", 0	; 2: 44 0

strncpy:	; Assign index 0
x46080:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x46085:	mov ax, [bp + 10]	; 3: 139 70 10
x46088:	cmp [bp + 12], ax	; 3: 57 70 12
x46091:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3728 source index
x46093:	mov si, [bp + 8]	; 3: 139 118 8
x46096:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3727 -> £temporary3728 £temporary3728 0

strncpy$4:	; Equal 12 £temporary3727 -> £temporary3728 0
x46099:	cmp byte [si], 0	; 3: 128 60 0
x46102:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3733 target index
x46104:	mov si, [bp + 6]	; 3: 139 118 6
x46107:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3732 -> £temporary3733 £temporary3733 0

strncpy$7:	; BinaryAdd £temporary3735 source index
x46110:	mov di, [bp + 8]	; 3: 139 126 8
x46113:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3734 -> £temporary3735 £temporary3735 0

strncpy$9:	; Assign £temporary3732 -> £temporary3733 £temporary3734 -> £temporary3735
x46116:	mov al, [di]	; 2: 138 5
x46118:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x46120:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x46123:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x46125:	mov ax, [bp + 10]	; 3: 139 70 10
x46128:	cmp [bp + 12], ax	; 3: 57 70 12
x46131:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3739 target index
x46133:	mov si, [bp + 6]	; 3: 139 118 6
x46136:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3738 -> £temporary3739 £temporary3739 0

strncpy$15:	; Assign £temporary3738 -> £temporary3739 0
x46139:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x46142:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x46145:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x46147:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x46150:	mov ax, [bp]	; 3: 139 70 0
x46153:	mov di, [bp + 4]	; 3: 139 126 4
x46156:	mov bp, [bp + 2]	; 3: 139 110 2
x46159:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x46161:	mov ax, [bp + 6]	; 3: 139 70 6
x46164:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x46167:	mov word [bp + 14], strncat$3	; 5: 199 70 14 101 180
x46172:	mov [bp + 16], bp	; 3: 137 110 16
x46175:	add bp, 14	; 3: 131 197 14
x46178:	jmp strlen	; 3: 233 164 216

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3754

strncat$5:	; Assign targetLength £temporary3754
x46181:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x46184:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3755 size 1
x46189:	mov ax, [bp + 10]	; 3: 139 70 10
x46192:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3755
x46193:	cmp [bp + 12], ax	; 3: 57 70 12
x46196:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3758 source index
x46198:	mov si, [bp + 8]	; 3: 139 118 8
x46201:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3757 -> £temporary3758 £temporary3758 0

strncat$11:	; Equal 20 £temporary3757 -> £temporary3758 0
x46204:	cmp byte [si], 0	; 3: 128 60 0
x46207:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3762 targetLength index
x46209:	mov ax, [bp + 14]	; 3: 139 70 14
x46212:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3764 target £temporary3762
x46215:	mov si, [bp + 6]	; 3: 139 118 6
x46218:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0

strncat$15:	; BinaryAdd £temporary3766 source index
x46220:	mov di, [bp + 8]	; 3: 139 126 8
x46223:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3765 -> £temporary3766 £temporary3766 0

strncat$17:	; Assign £temporary3763 -> £temporary3764 £temporary3765 -> £temporary3766
x46226:	mov al, [di]	; 2: 138 5
x46228:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x46230:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x46233:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3767 targetLength size
x46235:	mov ax, [bp + 14]	; 3: 139 70 14
x46238:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3768 £temporary3767 1
x46241:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3770 target £temporary3768
x46242:	mov si, [bp + 6]	; 3: 139 118 6
x46245:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3769 -> £temporary3770 £temporary3770 0

strncat$24:	; Assign £temporary3769 -> £temporary3770 0
x46247:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x46250:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x46253:	mov ax, [bp]	; 3: 139 70 0
x46256:	mov di, [bp + 4]	; 3: 139 126 4
x46259:	mov bp, [bp + 2]	; 3: 139 110 2
x46262:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x46264:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 26 index size
x46269:	mov ax, [bp + 10]	; 3: 139 70 10
x46272:	cmp [bp + 12], ax	; 3: 57 70 12
x46275:	jge strncmp$26	; 2: 125 105

strncmp$2:	; BinaryAdd £temporary3794 left index
x46277:	mov si, [bp + 6]	; 3: 139 118 6
x46280:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3793 -> £temporary3794 £temporary3794 0

strncmp$4:	; NotEqual 10 £temporary3793 -> £temporary3794 0
x46283:	cmp byte [si], 0	; 3: 128 60 0
x46286:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3797 right index
x46288:	mov si, [bp + 8]	; 3: 139 118 8
x46291:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0

strncmp$7:	; NotEqual 10 £temporary3796 -> £temporary3797 0
x46294:	cmp byte [si], 0	; 3: 128 60 0
x46297:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x46299:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x46302:	mov ax, [bp]	; 3: 139 70 0
x46305:	mov di, [bp + 4]	; 3: 139 126 4
x46308:	mov bp, [bp + 2]	; 3: 139 110 2
x46311:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3801 left index
x46313:	mov si, [bp + 6]	; 3: 139 118 6
x46316:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3800 -> £temporary3801 £temporary3801 0

strncmp$12:	; BinaryAdd £temporary3803 right index
x46319:	mov di, [bp + 8]	; 3: 139 126 8
x46322:	add di, [bp + 12]	; 3: 3 126 12

strncmp$13:	; Deref £temporary3802 -> £temporary3803 £temporary3803 0

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3800 -> £temporary3801 £temporary3802 -> £temporary3803
x46325:	mov al, [di]	; 2: 138 5
x46327:	cmp [si], al	; 2: 56 4
x46329:	jge strncmp$17	; 2: 125 14

strncmp$15:	; SetReturnValue -1
x46331:	mov bx, -1	; 3: 187 255 255

strncmp$16:	; Return -1
x46334:	mov ax, [bp]	; 3: 139 70 0
x46337:	mov di, [bp + 4]	; 3: 139 126 4
x46340:	mov bp, [bp + 2]	; 3: 139 110 2
x46343:	jmp ax	; 2: 255 224

strncmp$17:	; BinaryAdd £temporary3806 left index
x46345:	mov si, [bp + 6]	; 3: 139 118 6
x46348:	add si, [bp + 12]	; 3: 3 118 12

strncmp$18:	; Deref £temporary3805 -> £temporary3806 £temporary3806 0

strncmp$19:	; BinaryAdd £temporary3808 right index
x46351:	mov di, [bp + 8]	; 3: 139 126 8
x46354:	add di, [bp + 12]	; 3: 3 126 12

strncmp$20:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0

strncmp$21:	; SignedLessThanEqual 24 £temporary3805 -> £temporary3806 £temporary3807 -> £temporary3808
x46357:	mov al, [di]	; 2: 138 5
x46359:	cmp [si], al	; 2: 56 4
x46361:	jle strncmp$24	; 2: 126 14

strncmp$22:	; SetReturnValue 1
x46363:	mov bx, 1	; 3: 187 1 0

strncmp$23:	; Return 1
x46366:	mov ax, [bp]	; 3: 139 70 0
x46369:	mov di, [bp + 4]	; 3: 139 126 4
x46372:	mov bp, [bp + 2]	; 3: 139 110 2
x46375:	jmp ax	; 2: 255 224

strncmp$24:	; Increment index
x46377:	inc word [bp + 12]	; 3: 255 70 12

strncmp$25:	; Goto 1
x46380:	jmp strncmp$1	; 2: 235 143

strncmp$26:	; SetReturnValue 0
x46382:	mov bx, 0	; 3: 187 0 0

strncmp$27:	; Return 0
x46385:	mov ax, [bp]	; 3: 139 70 0
x46388:	mov di, [bp + 4]	; 3: 139 126 4
x46391:	mov bp, [bp + 2]	; 3: 139 110 2
x46394:	jmp ax	; 2: 255 224

strncmp$28:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x46396:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary3821 i
x46401:	mov ax, [bp + 8]	; 3: 139 70 8
x46404:	cmp ax, 0	; 3: 131 248 0
x46407:	jge strrchr$2	; 2: 125 4
x46409:	neg ax	; 2: 247 216
x46411:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary3821
x46413:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x46416:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary3823 text index
x46421:	mov si, [bp + 6]	; 3: 139 118 6
x46424:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary3822 -> £temporary3823 £temporary3823 0

strrchr$6:	; Equal 16 £temporary3822 -> £temporary3823 0
x46427:	cmp byte [si], 0	; 3: 128 60 0
x46430:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary3827 text index
x46432:	mov si, [bp + 6]	; 3: 139 118 6
x46435:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary3826 -> £temporary3827 £temporary3827 0

strrchr$9:	; NotEqual 14 £temporary3826 -> £temporary3827 c
x46438:	mov al, [bp + 14]	; 3: 138 70 14
x46441:	cmp [si], al	; 2: 56 4
x46443:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary3830 text index
x46445:	mov si, [bp + 6]	; 3: 139 118 6
x46448:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary3829 -> £temporary3830 £temporary3830 0

strrchr$12:	; address £temporary3831 £temporary3829 -> £temporary3830

strrchr$13:	; Assign result £temporary3831
x46451:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x46454:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x46457:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x46459:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x46462:	mov ax, [bp]	; 3: 139 70 0
x46465:	mov di, [bp + 4]	; 3: 139 126 4
x46468:	mov bp, [bp + 2]	; 3: 139 110 2
x46471:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary3949 target
x46473:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary3949
x46476:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary3950 source
x46479:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary3950
x46482:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x46485:	mov ax, [bp + 6]	; 3: 139 70 6
x46488:	cmp [bp + 8], ax	; 3: 57 70 8
x46491:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x46493:	mov ax, [bp + 10]	; 3: 139 70 10
x46496:	dec ax	; 1: 72
x46497:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x46500:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x46504:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary3956 charTarget index
x46506:	mov si, [bp + 12]	; 3: 139 118 12
x46509:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary3955 -> £temporary3956 £temporary3956 0

memmove$9:	; BinaryAdd £temporary3958 charSource index
x46512:	mov di, [bp + 14]	; 3: 139 126 14
x46515:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary3957 -> £temporary3958 £temporary3958 0

memmove$11:	; Assign £temporary3955 -> £temporary3956 £temporary3957 -> £temporary3958
x46518:	mov al, [di]	; 2: 138 5
x46520:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x46522:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x46525:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x46527:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x46532:	mov ax, [bp + 10]	; 3: 139 70 10
x46535:	cmp [bp + 16], ax	; 3: 57 70 16
x46538:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary3962 charTarget index
x46540:	mov si, [bp + 12]	; 3: 139 118 12
x46543:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary3961 -> £temporary3962 £temporary3962 0

memmove$18:	; BinaryAdd £temporary3964 charSource index
x46546:	mov di, [bp + 14]	; 3: 139 126 14
x46549:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary3963 -> £temporary3964 £temporary3964 0

memmove$20:	; Assign £temporary3961 -> £temporary3962 £temporary3963 -> £temporary3964
x46552:	mov al, [di]	; 2: 138 5
x46554:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x46556:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x46559:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary3965 target
x46561:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary3965

memmove$25:	; Return £temporary3965
x46564:	mov ax, [bp]	; 3: 139 70 0
x46567:	mov di, [bp + 4]	; 3: 139 126 4
x46570:	mov bp, [bp + 2]	; 3: 139 110 2
x46573:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary3991 block
x46575:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary3991
x46578:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary3992 i
x46581:	mov ax, [bp + 8]	; 3: 139 70 8
x46584:	cmp ax, 0	; 3: 131 248 0
x46587:	jge memset$3	; 2: 125 4
x46589:	neg ax	; 2: 247 216
x46591:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary3992
x46593:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x46596:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x46601:	mov ax, [bp + 10]	; 3: 139 70 10
x46604:	cmp [bp + 15], ax	; 3: 57 70 15
x46607:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary3996 charBlock index
x46609:	mov si, [bp + 12]	; 3: 139 118 12
x46612:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary3995 -> £temporary3996 £temporary3996 0

memset$8:	; Assign £temporary3995 -> £temporary3996 c
x46615:	mov al, [bp + 14]	; 3: 138 70 14
x46618:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x46620:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x46623:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x46625:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x46628:	mov ax, [bp]	; 3: 139 70 0
x46631:	mov di, [bp + 4]	; 3: 139 126 4
x46634:	mov bp, [bp + 2]	; 3: 139 110 2
x46637:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary3980 block
x46639:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary3980
x46642:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary3981 i
x46645:	mov ax, [bp + 8]	; 3: 139 70 8
x46648:	cmp ax, 0	; 3: 131 248 0
x46651:	jge memchr$3	; 2: 125 4
x46653:	neg ax	; 2: 247 216
x46655:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary3981
x46657:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x46660:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x46665:	mov ax, [bp + 10]	; 3: 139 70 10
x46668:	cmp [bp + 12], ax	; 3: 57 70 12
x46671:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary3985 charBlock index
x46673:	mov si, [bp + 14]	; 3: 139 118 14
x46676:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary3984 -> £temporary3985 £temporary3985 0

memchr$8:	; NotEqual 15 £temporary3984 -> £temporary3985 c
x46679:	mov al, [bp + 16]	; 3: 138 70 16
x46682:	cmp [si], al	; 2: 56 4
x46684:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary3988 charBlock index
x46686:	mov bx, [bp + 14]	; 3: 139 94 14
x46689:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary3987 -> £temporary3988 £temporary3988 0

memchr$11:	; address £temporary3989 £temporary3987 -> £temporary3988

memchr$12:	; IntegralToIntegral £temporary3990 £temporary3989

memchr$13:	; SetReturnValue £temporary3990

memchr$14:	; Return £temporary3990
x46692:	mov ax, [bp]	; 3: 139 70 0
x46695:	mov di, [bp + 4]	; 3: 139 126 4
x46698:	mov bp, [bp + 2]	; 3: 139 110 2
x46701:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x46703:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x46706:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x46708:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x46711:	mov ax, [bp]	; 3: 139 70 0
x46714:	mov di, [bp + 4]	; 3: 139 126 4
x46717:	mov bp, [bp + 2]	; 3: 139 110 2
x46720:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary3966 left
x46722:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary3966
x46725:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary3967 right
x46728:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary3967
x46731:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x46734:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x46739:	mov ax, [bp + 10]	; 3: 139 70 10
x46742:	cmp [bp + 16], ax	; 3: 57 70 16
x46745:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary3971 charLeft index
x46747:	mov si, [bp + 12]	; 3: 139 118 12
x46750:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary3970 -> £temporary3971 £temporary3971 0

memcmp$8:	; BinaryAdd £temporary3973 charRight index
x46753:	mov di, [bp + 14]	; 3: 139 126 14
x46756:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary3972 -> £temporary3973 £temporary3973 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3970 -> £temporary3971 £temporary3972 -> £temporary3973
x46759:	mov al, [di]	; 2: 138 5
x46761:	cmp [si], al	; 2: 56 4
x46763:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x46765:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x46768:	mov ax, [bp]	; 3: 139 70 0
x46771:	mov di, [bp + 4]	; 3: 139 126 4
x46774:	mov bp, [bp + 2]	; 3: 139 110 2
x46777:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary3976 charLeft index
x46779:	mov si, [bp + 12]	; 3: 139 118 12
x46782:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary3975 -> £temporary3976 £temporary3976 0

memcmp$15:	; BinaryAdd £temporary3978 charRight index
x46785:	mov di, [bp + 14]	; 3: 139 126 14
x46788:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary3977 -> £temporary3978 £temporary3978 0

memcmp$17:	; SignedLessThanEqual 20 £temporary3975 -> £temporary3976 £temporary3977 -> £temporary3978
x46791:	mov al, [di]	; 2: 138 5
x46793:	cmp [si], al	; 2: 56 4
x46795:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x46797:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x46800:	mov ax, [bp]	; 3: 139 70 0
x46803:	mov di, [bp + 4]	; 3: 139 126 4
x46806:	mov bp, [bp + 2]	; 3: 139 110 2
x46809:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x46811:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x46814:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x46816:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x46819:	mov ax, [bp]	; 3: 139 70 0
x46822:	mov di, [bp + 4]	; 3: 139 126 4
x46825:	mov bp, [bp + 2]	; 3: 139 110 2
x46828:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x46830:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary3833 mainString index
x46835:	mov si, [bp + 6]	; 3: 139 118 6
x46838:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary3832 -> £temporary3833 £temporary3833 0

strspn$3:	; Equal 18 £temporary3832 -> £temporary3833 0
x46841:	cmp byte [si], 0	; 3: 128 60 0
x46844:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x46846:	mov ax, [bp + 8]	; 3: 139 70 8
x46849:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary3837 mainString index
x46852:	mov si, [bp + 6]	; 3: 139 118 6
x46855:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary3836 -> £temporary3837 £temporary3837 0

strspn$8:	; IntegralToIntegral £temporary3838 £temporary3836 -> £temporary3837
x46858:	mov al, [si]	; 2: 138 4
x46860:	and ax, 255	; 3: 37 255 0
x46863:	cmp al, 0	; 2: 60 0
x46865:	jge strspn$9	; 2: 125 4
x46867:	neg al	; 2: 246 216
x46869:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary3838 8
x46871:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x46874:	mov word [bp + 12], strspn$11	; 5: 199 70 12 40 183
x46879:	mov [bp + 14], bp	; 3: 137 110 14
x46882:	add bp, 12	; 3: 131 197 12
x46885:	jmp strchr	; 3: 233 149 106

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary3839

strspn$13:	; NotEqual 16 £temporary3839 0
x46888:	cmp bx, 0	; 3: 131 251 0
x46891:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x46893:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x46896:	mov ax, [bp]	; 3: 139 70 0
x46899:	mov di, [bp + 4]	; 3: 139 126 4
x46902:	mov bp, [bp + 2]	; 3: 139 110 2
x46905:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x46907:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x46910:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x46912:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x46915:	mov ax, [bp]	; 3: 139 70 0
x46918:	mov di, [bp + 4]	; 3: 139 126 4
x46921:	mov bp, [bp + 2]	; 3: 139 110 2
x46924:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x46926:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary3844 mainString index
x46931:	mov si, [bp + 6]	; 3: 139 118 6
x46934:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary3843 -> £temporary3844 £temporary3844 0

strcspn$3:	; Equal 18 £temporary3843 -> £temporary3844 0
x46937:	cmp byte [si], 0	; 3: 128 60 0
x46940:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x46942:	mov ax, [bp + 8]	; 3: 139 70 8
x46945:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary3848 mainString index
x46948:	mov si, [bp + 6]	; 3: 139 118 6
x46951:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary3847 -> £temporary3848 £temporary3848 0

strcspn$8:	; IntegralToIntegral £temporary3849 £temporary3847 -> £temporary3848
x46954:	mov al, [si]	; 2: 138 4
x46956:	and ax, 255	; 3: 37 255 0
x46959:	cmp al, 0	; 2: 60 0
x46961:	jge strcspn$9	; 2: 125 4
x46963:	neg al	; 2: 246 216
x46965:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary3849 8
x46967:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x46970:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 136 183
x46975:	mov [bp + 14], bp	; 3: 137 110 14
x46978:	add bp, 12	; 3: 131 197 12
x46981:	jmp strchr	; 3: 233 53 106

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary3850

strcspn$13:	; Equal 16 £temporary3850 0
x46984:	cmp bx, 0	; 3: 131 251 0
x46987:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x46989:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x46992:	mov ax, [bp]	; 3: 139 70 0
x46995:	mov di, [bp + 4]	; 3: 139 126 4
x46998:	mov bp, [bp + 2]	; 3: 139 110 2
x47001:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x47003:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x47006:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x47008:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x47011:	mov ax, [bp]	; 3: 139 70 0
x47014:	mov di, [bp + 4]	; 3: 139 126 4
x47017:	mov bp, [bp + 2]	; 3: 139 110 2
x47020:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x47022:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x47026:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary3895 -> string string 0
x47030:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary3895 -> string 0
x47033:	cmp byte [si], 0	; 3: 128 60 0
x47036:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x47038:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x47041:	mov ax, [bp]	; 3: 139 70 0
x47044:	mov di, [bp + 4]	; 3: 139 126 4
x47047:	mov bp, [bp + 2]	; 3: 139 110 2
x47050:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x47052:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary3898 string index
x47057:	mov si, [bp + 6]	; 3: 139 118 6
x47060:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary3897 -> £temporary3898 £temporary3898 0

strtok$8:	; Equal 31 £temporary3897 -> £temporary3898 0
x47063:	cmp byte [si], 0	; 3: 128 60 0
x47066:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x47068:	mov ax, [bp + 8]	; 3: 139 70 8
x47071:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary3902 string index
x47074:	mov si, [bp + 6]	; 3: 139 118 6
x47077:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary3901 -> £temporary3902 £temporary3902 0

strtok$13:	; IntegralToIntegral £temporary3903 £temporary3901 -> £temporary3902
x47080:	mov al, [si]	; 2: 138 4
x47082:	and ax, 255	; 3: 37 255 0
x47085:	cmp al, 0	; 2: 60 0
x47087:	jge strtok$14	; 2: 125 4
x47089:	neg al	; 2: 246 216
x47091:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary3903 8
x47093:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x47096:	mov word [bp + 14], strtok$16	; 5: 199 70 14 6 184
x47101:	mov [bp + 16], bp	; 3: 137 110 16
x47104:	add bp, 14	; 3: 131 197 14
x47107:	jmp strchr	; 3: 233 183 105

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary3904

strtok$18:	; Equal 29 £temporary3904 0
x47110:	cmp bx, 0	; 3: 131 251 0
x47113:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary3907 string index
x47115:	mov si, [bp + 6]	; 3: 139 118 6
x47118:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary3906 -> £temporary3907 £temporary3907 0

strtok$21:	; Assign £temporary3906 -> £temporary3907 0
x47121:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary3908 index 1
x47124:	mov ax, [bp + 10]	; 3: 139 70 10
x47127:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary3910 string £temporary3908
x47128:	mov si, [bp + 6]	; 3: 139 118 6
x47131:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary3909 -> £temporary3910 £temporary3910 0

strtok$25:	; address £temporary3911 £temporary3909 -> £temporary3910

strtok$26:	; Assign token £temporary3911
x47133:	mov [@8690$token], si	; 4: 137 54 9 185

strtok$27:	; SetReturnValue string
x47137:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x47140:	mov ax, [bp]	; 3: 139 70 0
x47143:	mov di, [bp + 4]	; 3: 139 126 4
x47146:	mov bp, [bp + 2]	; 3: 139 110 2
x47149:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x47151:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x47154:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary3913 string index
x47156:	mov si, [bp + 6]	; 3: 139 118 6
x47159:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary3912 -> £temporary3913 £temporary3913 0

strtok$33:	; address £temporary3914 £temporary3912 -> £temporary3913

strtok$34:	; Assign token £temporary3914
x47162:	mov [@8690$token], si	; 4: 137 54 9 185

strtok$35:	; SetReturnValue string
x47166:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x47169:	mov ax, [bp]	; 3: 139 70 0
x47172:	mov di, [bp + 4]	; 3: 139 126 4
x47175:	mov bp, [bp + 2]	; 3: 139 110 2
x47178:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x47180:	cmp word [@8690$token], 0	; 5: 131 62 9 185 0
x47185:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x47187:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x47190:	mov ax, [bp]	; 3: 139 70 0
x47193:	mov di, [bp + 4]	; 3: 139 126 4
x47196:	mov bp, [bp + 2]	; 3: 139 110 2
x47199:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (@8690$token,0) 0
x47201:	mov si, [@8690$token]	; 4: 139 54 9 185
x47205:	cmp byte [si], 0	; 3: 128 60 0
x47208:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x47210:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x47213:	mov ax, [bp]	; 3: 139 70 0
x47216:	mov di, [bp + 4]	; 3: 139 126 4
x47219:	mov bp, [bp + 2]	; 3: 139 110 2
x47222:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x47224:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary3919 token index
x47229:	mov si, [@8690$token]	; 4: 139 54 9 185
x47233:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary3918 -> £temporary3919 £temporary3919 0

strtok$46:	; Equal 70 £temporary3918 -> £temporary3919 0
x47236:	cmp byte [si], 0	; 3: 128 60 0
x47239:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x47241:	mov ax, [bp + 8]	; 3: 139 70 8
x47244:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary3923 token index
x47247:	mov si, [@8690$token]	; 4: 139 54 9 185
x47251:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary3922 -> £temporary3923 £temporary3923 0

strtok$51:	; IntegralToIntegral £temporary3924 £temporary3922 -> £temporary3923
x47254:	mov al, [si]	; 2: 138 4
x47256:	and ax, 255	; 3: 37 255 0
x47259:	cmp al, 0	; 2: 60 0
x47261:	jge strtok$52	; 2: 125 4
x47263:	neg al	; 2: 246 216
x47265:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary3924 8
x47267:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x47270:	mov word [bp + 14], strtok$54	; 5: 199 70 14 180 184
x47275:	mov [bp + 16], bp	; 3: 137 110 16
x47278:	add bp, 14	; 3: 131 197 14
x47281:	jmp strchr	; 3: 233 9 105

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary3925

strtok$56:	; Equal 68 £temporary3925 0
x47284:	cmp bx, 0	; 3: 131 251 0
x47287:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x47289:	mov ax, [@8690$token]	; 3: 161 9 185
x47292:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary3928 token index
x47295:	mov si, [@8690$token]	; 4: 139 54 9 185
x47299:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary3927 -> £temporary3928 £temporary3928 0

strtok$60:	; Assign £temporary3927 -> £temporary3928 0
x47302:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary3929 index 1
x47305:	mov ax, [bp + 10]	; 3: 139 70 10
x47308:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary3931 token £temporary3929
x47309:	mov si, [@8690$token]	; 4: 139 54 9 185
x47313:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary3930 -> £temporary3931 £temporary3931 0

strtok$64:	; address £temporary3932 £temporary3930 -> £temporary3931

strtok$65:	; Assign token £temporary3932
x47315:	mov [@8690$token], si	; 4: 137 54 9 185

strtok$66:	; SetReturnValue tokenStart2
x47319:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x47322:	mov ax, [bp]	; 3: 139 70 0
x47325:	mov di, [bp + 4]	; 3: 139 126 4
x47328:	mov bp, [bp + 2]	; 3: 139 110 2
x47331:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x47333:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x47336:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x47338:	mov ax, [@8690$token]	; 3: 161 9 185
x47341:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary3934 token index
x47344:	mov si, [@8690$token]	; 4: 139 54 9 185
x47348:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary3933 -> £temporary3934 £temporary3934 0

strtok$73:	; address £temporary3935 £temporary3933 -> £temporary3934

strtok$74:	; Assign token £temporary3935
x47351:	mov [@8690$token], si	; 4: 137 54 9 185

strtok$75:	; SetReturnValue tokenStart
x47355:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x47358:	mov ax, [bp]	; 3: 139 70 0
x47361:	mov di, [bp + 4]	; 3: 139 126 4
x47364:	mov bp, [bp + 2]	; 3: 139 110 2
x47367:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

@8690$token:
x47369:	dw 0	; 2: 0 0

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x47371:	mov word [bp + 14], @12680$string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 215 189

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x47376:	mov word [bp + 22], @12681$string_1232E456#	; 5: 199 70 22 237 189

stdlib_test$4:	; Call 8 atof 8
x47381:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 35 185
x47386:	mov [bp + 18], bp	; 3: 137 110 18
x47389:	add bp, 16	; 3: 131 197 16
x47392:	jmp atof	; 3: 233 161 6

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6027

stdlib_test$7:	; Parameter 8 £temporary6027 8
x47395:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x47398:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 57 185
x47403:	mov [bp + 10], bp	; 3: 137 110 10
x47406:	add bp, 8	; 3: 131 197 8
x47409:	mov di, bp	; 2: 137 239
x47411:	add di, 8	; 3: 131 199 8
x47414:	jmp printf	; 3: 233 203 83

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x47417:	mov word [bp + 14], @12684$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 245 189

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x47422:	mov word [bp + 22], @12685$string_1232E456789abc#	; 5: 199 70 22 29 190

stdlib_test$14:	; address £temporary6029 p
x47427:	mov si, bp	; 2: 137 238
x47429:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6029 16
x47432:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x47435:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 89 185
x47440:	mov [bp + 18], bp	; 3: 137 110 18
x47443:	add bp, 16	; 3: 131 197 16
x47446:	jmp strtod	; 3: 233 143 6

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6030

stdlib_test$19:	; Parameter 8 £temporary6030 8
x47449:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x47452:	mov ax, [bp + 6]	; 3: 139 70 6
x47455:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x47458:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 117 185
x47463:	mov [bp + 10], bp	; 3: 137 110 10
x47466:	add bp, 8	; 3: 131 197 8
x47469:	mov di, bp	; 2: 137 239
x47471:	add di, 10	; 3: 131 199 10
x47474:	jmp printf	; 3: 233 143 83

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x47477:	mov word [bp + 12], @12689$string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 43 190

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x47482:	mov word [bp + 20], @12690$string_path#	; 5: 199 70 20 65 190

stdlib_test$27:	; Call 6 getenv 8
x47487:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 141 185
x47492:	mov [bp + 16], bp	; 3: 137 110 16
x47495:	add bp, 14	; 3: 131 197 14
x47498:	jmp getenv	; 3: 233 184 6

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6032

stdlib_test$30:	; Parameter 6 £temporary6032 8
x47501:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x47504:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 163 185
x47509:	mov [bp + 8], bp	; 3: 137 110 8
x47512:	add bp, 6	; 3: 131 197 6
x47515:	mov di, bp	; 2: 137 239
x47517:	add di, 2	; 3: 131 199 2
x47520:	jmp printf	; 3: 233 97 83

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x47523:	mov word [bp + 12], @12693$string_system2822dir22290A#	; 5: 199 70 12 70 190

stdlib_test$35:	; Call 6 printf 0
x47528:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 184 185
x47533:	mov [bp + 8], bp	; 3: 137 110 8
x47536:	add bp, 6	; 3: 131 197 6
x47539:	mov di, bp	; 2: 137 239
x47541:	jmp printf	; 3: 233 76 83

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x47544:	mov word [bp + 12], @12695$string_dir#	; 5: 199 70 12 85 190

stdlib_test$39:	; Call 6 system 0
x47549:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 203 185
x47554:	mov [bp + 8], bp	; 3: 137 110 8
x47557:	add bp, 6	; 3: 131 197 6
x47560:	jmp system	; 3: 233 136 6

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x47563:	mov word [bp + 12], @12697$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 89 190

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x47568:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x47573:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 227 185
x47578:	mov [bp + 16], bp	; 3: 137 110 16
x47581:	add bp, 14	; 3: 131 197 14
x47584:	jmp _abs	; 3: 233 126 6

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6036

stdlib_test$48:	; Parameter 6 £temporary6036 8
x47587:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x47590:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x47595:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 249 185
x47600:	mov [bp + 18], bp	; 3: 137 110 18
x47603:	add bp, 16	; 3: 131 197 16
x47606:	jmp _abs	; 3: 233 104 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6037

stdlib_test$54:	; Parameter 6 £temporary6037 10
x47609:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x47612:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 15 186
x47617:	mov [bp + 8], bp	; 3: 137 110 8
x47620:	add bp, 6	; 3: 131 197 6
x47623:	mov di, bp	; 2: 137 239
x47625:	add di, 4	; 3: 131 199 4
x47628:	jmp printf	; 3: 233 245 82

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x47631:	mov word [bp + 12], @12705$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 117 190

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x47636:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x47644:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 42 186
x47649:	mov [bp + 16], bp	; 3: 137 110 16
x47652:	add bp, 14	; 3: 131 197 14
x47655:	jmp labs	; 3: 233 39 97

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6039

stdlib_test$64:	; Parameter 6 £temporary6039 8
x47658:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x47662:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x47670:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 68 186
x47675:	mov [bp + 20], bp	; 3: 137 110 20
x47678:	add bp, 18	; 3: 131 197 18
x47681:	jmp labs	; 3: 233 13 97

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6040

stdlib_test$70:	; Parameter 6 £temporary6040 12
x47684:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x47688:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 91 186
x47693:	mov [bp + 8], bp	; 3: 137 110 8
x47696:	add bp, 6	; 3: 131 197 6
x47699:	mov di, bp	; 2: 137 239
x47701:	add di, 8	; 3: 131 199 8
x47704:	jmp printf	; 3: 233 169 82

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x47707:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x47712:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x47717:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 115 186
x47722:	mov [bp + 8], bp	; 3: 137 110 8
x47725:	add bp, 6	; 3: 131 197 6
x47728:	jmp div	; 3: 233 9 6

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6042 -> £temporary6043

stdlib_test$79:	; Assign i £temporary6042 -> £temporary6043
x47731:	mov si, bp	; 2: 137 238
x47733:	add si, 6	; 3: 131 198 6
x47736:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x47738:	mov ah, [bx]	; 2: 138 39
x47740:	mov [si], ah	; 2: 136 36
x47742:	inc bx	; 1: 67
x47743:	inc si	; 1: 70
x47744:	dec al	; 2: 254 200
x47746:	cmp al, 0	; 2: 60 0
x47748:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x47750:	mov word [bp + 16], @12720$string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 151 190

stdlib_test$82:	; Parameter 10 i$quot 8
x47755:	mov ax, [bp + 6]	; 3: 139 70 6
x47758:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x47761:	mov ax, [bp + 8]	; 3: 139 70 8
x47764:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x47767:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 170 186
x47772:	mov [bp + 12], bp	; 3: 137 110 12
x47775:	add bp, 10	; 3: 131 197 10
x47778:	mov di, bp	; 2: 137 239
x47780:	add di, 4	; 3: 131 199 4
x47783:	jmp printf	; 3: 233 90 82

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x47786:	mov si, bp	; 2: 137 238
x47788:	add si, 6	; 3: 131 198 6
x47791:	mov di, bp	; 2: 137 239
x47793:	add di, 16	; 3: 131 199 16
x47796:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x47798:	mov ah, [si]	; 2: 138 36
x47800:	mov [di], ah	; 2: 136 37
x47802:	inc si	; 1: 70
x47803:	inc di	; 1: 71
x47804:	dec al	; 2: 254 200
x47806:	cmp al, 0	; 2: 60 0
x47808:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x47810:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 208 186
x47815:	mov [bp + 12], bp	; 3: 137 110 12
x47818:	add bp, 10	; 3: 131 197 10
x47821:	jmp print_div	; 3: 233 248 5

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6047 -> £temporary6048

stdlib_test$92:	; Assign j £temporary6047 -> £temporary6048
x47824:	mov si, bp	; 2: 137 238
x47826:	add si, 10	; 3: 131 198 10
x47829:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x47831:	mov ah, [bx]	; 2: 138 39
x47833:	mov [si], ah	; 2: 136 36
x47835:	inc bx	; 1: 67
x47836:	inc si	; 1: 70
x47837:	dec al	; 2: 254 200
x47839:	cmp al, 0	; 2: 60 0
x47841:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x47843:	mov word [bp + 20], @12727$string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 176 190

stdlib_test$95:	; Parameter 14 j$quot 8
x47848:	mov ax, [bp + 10]	; 3: 139 70 10
x47851:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x47854:	mov ax, [bp + 12]	; 3: 139 70 12
x47857:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x47860:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 7 187
x47865:	mov [bp + 16], bp	; 3: 137 110 16
x47868:	add bp, 14	; 3: 131 197 14
x47871:	mov di, bp	; 2: 137 239
x47873:	add di, 4	; 3: 131 199 4
x47876:	jmp printf	; 3: 233 253 81

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x47879:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x47887:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x47895:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 37 187
x47900:	mov [bp + 8], bp	; 3: 137 110 8
x47903:	add bp, 6	; 3: 131 197 6
x47906:	jmp ldiv	; 3: 233 243 5

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6052 -> £temporary6053

stdlib_test$105:	; Assign li £temporary6052 -> £temporary6053
x47909:	mov si, bp	; 2: 137 238
x47911:	add si, 6	; 3: 131 198 6
x47914:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x47916:	mov ah, [bx]	; 2: 138 39
x47918:	mov [si], ah	; 2: 136 36
x47920:	inc bx	; 1: 67
x47921:	inc si	; 1: 70
x47922:	dec al	; 2: 254 200
x47924:	cmp al, 0	; 2: 60 0
x47926:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x47928:	mov word [bp + 20], @12738$string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 202 190

stdlib_test$108:	; Parameter 14 li$quot 8
x47933:	mov eax, [bp + 6]	; 4: 102 139 70 6
x47937:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x47941:	mov eax, [bp + 10]	; 4: 102 139 70 10
x47945:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x47949:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 96 187
x47954:	mov [bp + 16], bp	; 3: 137 110 16
x47957:	add bp, 14	; 3: 131 197 14
x47960:	mov di, bp	; 2: 137 239
x47962:	add di, 8	; 3: 131 199 8
x47965:	jmp printf	; 3: 233 164 81

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x47968:	mov si, bp	; 2: 137 238
x47970:	add si, 6	; 3: 131 198 6
x47973:	mov di, bp	; 2: 137 239
x47975:	add di, 20	; 3: 131 199 20
x47978:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x47980:	mov ah, [si]	; 2: 138 36
x47982:	mov [di], ah	; 2: 136 37
x47984:	inc si	; 1: 70
x47985:	inc di	; 1: 71
x47986:	dec al	; 2: 254 200
x47988:	cmp al, 0	; 2: 60 0
x47990:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x47992:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 134 187
x47997:	mov [bp + 16], bp	; 3: 137 110 16
x48000:	add bp, 14	; 3: 131 197 14
x48003:	jmp print_ldiv	; 3: 233 237 5

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6057 -> £temporary6058

stdlib_test$118:	; Assign lj £temporary6057 -> £temporary6058
x48006:	mov si, bp	; 2: 137 238
x48008:	add si, 14	; 3: 131 198 14
x48011:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x48013:	mov ah, [bx]	; 2: 138 39
x48015:	mov [si], ah	; 2: 136 36
x48017:	inc bx	; 1: 67
x48018:	inc si	; 1: 70
x48019:	dec al	; 2: 254 200
x48021:	cmp al, 0	; 2: 60 0
x48023:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x48025:	mov word [bp + 28], @12745$string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 230 190

stdlib_test$121:	; Parameter 22 lj$quot 8
x48030:	mov eax, [bp + 14]	; 4: 102 139 70 14
x48034:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x48038:	mov eax, [bp + 18]	; 4: 102 139 70 18
x48042:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x48046:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 193 187
x48051:	mov [bp + 24], bp	; 3: 137 110 24
x48054:	add bp, 22	; 3: 131 197 22
x48057:	mov di, bp	; 2: 137 239
x48059:	add di, 8	; 3: 131 199 8
x48062:	jmp printf	; 3: 233 67 81

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x48065:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x48070:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x48075:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x48080:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x48085:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x48090:	mov word [bp + 24], @12770$string_0AA20List2013A20#	; 5: 199 70 24 3 191

stdlib_test$132:	; Call 18 printf 0
x48095:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 239 187
x48100:	mov [bp + 20], bp	; 3: 137 110 20
x48103:	add bp, 18	; 3: 131 197 18
x48106:	mov di, bp	; 2: 137 239
x48108:	jmp printf	; 3: 233 21 81

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x48111:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x48116:	mov ax, [bp + 14]	; 3: 139 70 14
x48119:	cmp [bp + 16], ax	; 3: 57 70 16
x48122:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x48124:	mov word [bp + 24], @12777$string_25i20#	; 5: 199 70 24 15 191

stdlib_test$138:	; UnsignedMultiply £temporary6070 index 2
x48129:	mov ax, [bp + 16]	; 3: 139 70 16
x48132:	xor dx, dx	; 2: 49 210
x48134:	mul word [@12779$int2$2#]	; 4: 247 38 19 191

stdlib_test$139:	; BinaryAdd £temporary6071 list £temporary6070
x48138:	mov si, bp	; 2: 137 238
x48140:	add si, 6	; 3: 131 198 6
x48143:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6072 -> £temporary6071 £temporary6071 0

stdlib_test$141:	; Parameter 18 £temporary6072 -> £temporary6071 8
x48145:	mov ax, [si]	; 2: 139 4
x48147:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x48150:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 41 188
x48155:	mov [bp + 20], bp	; 3: 137 110 20
x48158:	add bp, 18	; 3: 131 197 18
x48161:	mov di, bp	; 2: 137 239
x48163:	add di, 2	; 3: 131 199 2
x48166:	jmp printf	; 3: 233 219 80

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x48169:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x48172:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x48174:	mov word [bp + 24], @12784$string_0AB20List2023A20#	; 5: 199 70 24 21 191

stdlib_test$148:	; Call 18 printf 0
x48179:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 67 188
x48184:	mov [bp + 20], bp	; 3: 137 110 20
x48187:	add bp, 18	; 3: 131 197 18
x48190:	mov di, bp	; 2: 137 239
x48192:	jmp printf	; 3: 233 193 80

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x48195:	mov [bp + 24], bp	; 3: 137 110 24
x48198:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x48202:	mov ax, [bp + 14]	; 3: 139 70 14
x48205:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x48208:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x48213:	mov word [bp + 30], compare	; 5: 199 70 30 33 191

stdlib_test$155:	; Call 18 qsort 0
x48218:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 104 188
x48223:	mov [bp + 20], bp	; 3: 137 110 20
x48226:	add bp, 18	; 3: 131 197 18
x48229:	jmp qsort	; 3: 233 100 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x48232:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x48237:	mov ax, [bp + 14]	; 3: 139 70 14
x48240:	cmp [bp + 16], ax	; 3: 57 70 16
x48243:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x48245:	mov word [bp + 24], @12796$string_25i20#	; 5: 199 70 24 89 191

stdlib_test$161:	; UnsignedMultiply £temporary6079 index 2
x48250:	mov ax, [bp + 16]	; 3: 139 70 16
x48253:	xor dx, dx	; 2: 49 210
x48255:	mul word [@12798$int2$2#]	; 4: 247 38 93 191

stdlib_test$162:	; BinaryAdd £temporary6080 list £temporary6079
x48259:	mov si, bp	; 2: 137 238
x48261:	add si, 6	; 3: 131 198 6
x48264:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6081 -> £temporary6080 £temporary6080 0

stdlib_test$164:	; Parameter 18 £temporary6081 -> £temporary6080 8
x48266:	mov ax, [si]	; 2: 139 4
x48268:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x48271:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 162 188
x48276:	mov [bp + 20], bp	; 3: 137 110 20
x48279:	add bp, 18	; 3: 131 197 18
x48282:	mov di, bp	; 2: 137 239
x48284:	add di, 2	; 3: 131 199 2
x48287:	jmp printf	; 3: 233 98 80

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x48290:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x48293:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x48295:	mov word [bp + 24], @12803$string_0AC20List2033A20#	; 5: 199 70 24 95 191

stdlib_test$171:	; Call 18 printf 0
x48300:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 188 188
x48305:	mov [bp + 20], bp	; 3: 137 110 20
x48308:	add bp, 18	; 3: 131 197 18
x48311:	mov di, bp	; 2: 137 239
x48313:	jmp printf	; 3: 233 72 80

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x48316:	mov [bp + 24], bp	; 3: 137 110 24
x48319:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x48323:	mov ax, [bp + 14]	; 3: 139 70 14
x48326:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x48329:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x48334:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 107 191

stdlib_test$178:	; Call 18 qsort 0
x48339:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 225 188
x48344:	mov [bp + 20], bp	; 3: 137 110 20
x48347:	add bp, 18	; 3: 131 197 18
x48350:	jmp qsort	; 3: 233 235 4

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x48353:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x48358:	mov ax, [bp + 14]	; 3: 139 70 14
x48361:	cmp [bp + 16], ax	; 3: 57 70 16
x48364:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x48366:	mov word [bp + 24], @12815$string_25i20#	; 5: 199 70 24 163 191

stdlib_test$184:	; UnsignedMultiply £temporary6088 index 2
x48371:	mov ax, [bp + 16]	; 3: 139 70 16
x48374:	xor dx, dx	; 2: 49 210
x48376:	mul word [@12817$int2$2#]	; 4: 247 38 167 191

stdlib_test$185:	; BinaryAdd £temporary6089 list £temporary6088
x48380:	mov si, bp	; 2: 137 238
x48382:	add si, 6	; 3: 131 198 6
x48385:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6090 -> £temporary6089 £temporary6089 0

stdlib_test$187:	; Parameter 18 £temporary6090 -> £temporary6089 8
x48387:	mov ax, [si]	; 2: 139 4
x48389:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x48392:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 27 189
x48397:	mov [bp + 20], bp	; 3: 137 110 20
x48400:	add bp, 18	; 3: 131 197 18
x48403:	mov di, bp	; 2: 137 239
x48405:	add di, 2	; 3: 131 199 2
x48408:	jmp printf	; 3: 233 233 79

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x48411:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x48414:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0A0ASearch3A0A# 6
x48416:	mov word [bp + 24], @12822$string_0A0ASearch3A0A#	; 5: 199 70 24 169 191

stdlib_test$194:	; Call 18 printf 0
x48421:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 53 189
x48426:	mov [bp + 20], bp	; 3: 137 110 20
x48429:	add bp, 18	; 3: 131 197 18
x48432:	mov di, bp	; 2: 137 239
x48434:	jmp printf	; 3: 233 207 79

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; Assign key 0
x48437:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$197:	; SignedGreaterThanEqual 224 key 6
x48442:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x48446:	jge stdlib_test$224	; 2: 125 119

stdlib_test$198:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$199:	; address £temporary6095 key
x48448:	mov si, bp	; 2: 137 238
x48450:	add si, 16	; 3: 131 198 16

stdlib_test$200:	; Parameter 18 £temporary6095 6
x48453:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$201:	; Parameter 18 list 8
x48456:	mov [bp + 26], bp	; 3: 137 110 26
x48459:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$202:	; Parameter 18 size 10
x48463:	mov ax, [bp + 14]	; 3: 139 70 14
x48466:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$203:	; Parameter 18 2 12
x48469:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$204:	; Parameter 18 compare 14
x48474:	mov word [bp + 32], compare	; 5: 199 70 32 33 191

stdlib_test$205:	; Call 18 bsearch 0
x48479:	mov word [bp + 18], stdlib_test$206	; 5: 199 70 18 109 189
x48484:	mov [bp + 20], bp	; 3: 137 110 20
x48487:	add bp, 18	; 3: 131 197 18
x48490:	jmp bsearch	; 3: 233 76 5

stdlib_test$206:	; PostCall 18

stdlib_test$207:	; GetReturnValue £temporary6097

stdlib_test$208:	; IntegralToIntegral £temporary6098 £temporary6097

stdlib_test$209:	; Assign p £temporary6098
x48493:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$210:	; Equal 214 p 0
x48496:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x48500:	je stdlib_test$214	; 2: 116 18

stdlib_test$211:	; BinarySubtract £temporary6100 p list
x48502:	mov ax, [bp + 18]	; 3: 139 70 18
x48505:	mov bx, bp	; 2: 137 235
x48507:	add bx, 6	; 3: 131 195 6
x48510:	sub ax, bx	; 2: 41 216

stdlib_test$212:	; UnsignedDivide £temporary6105 £temporary6100 2
x48512:	xor dx, dx	; 2: 49 210
x48514:	div word [@12844$int2$2#]	; 4: 247 54 180 191

stdlib_test$213:	; Goto 215
x48518:	jmp stdlib_test$215	; 2: 235 3

stdlib_test$214:	; Assign £temporary6105 -1
x48520:	mov ax, -1	; 3: 184 255 255

stdlib_test$215:	; Assign index £temporary6105
x48523:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$216:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$217:	; Parameter 22 string_20202825i2C2025i290A# 6
x48526:	mov word [bp + 28], @12855$string_20202825i2C2025i290A#	; 5: 199 70 28 182 191

stdlib_test$218:	; Parameter 22 key 8
x48531:	mov ax, [bp + 16]	; 3: 139 70 16
x48534:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$219:	; Parameter 22 index 10
x48537:	mov ax, [bp + 20]	; 3: 139 70 20
x48540:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$220:	; Call 22 printf 0
x48543:	mov word [bp + 22], stdlib_test$221	; 5: 199 70 22 178 189
x48548:	mov [bp + 24], bp	; 3: 137 110 24
x48551:	add bp, 22	; 3: 131 197 22
x48554:	mov di, bp	; 2: 137 239
x48556:	add di, 4	; 3: 131 199 4
x48559:	jmp printf	; 3: 233 82 79

stdlib_test$221:	; PostCall 22

stdlib_test$222:	; Increment key
x48562:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$223:	; Goto 197
x48565:	jmp stdlib_test$197	; 2: 235 131

stdlib_test$224:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$225:	; Parameter 16 string_0A# 6
x48567:	mov word [bp + 22], @12857$string_0A#	; 5: 199 70 22 194 191

stdlib_test$226:	; Call 16 printf 0
x48572:	mov word [bp + 16], stdlib_test$227	; 5: 199 70 16 204 189
x48577:	mov [bp + 18], bp	; 3: 137 110 18
x48580:	add bp, 16	; 3: 131 197 16
x48583:	mov di, bp	; 2: 137 239
x48585:	jmp printf	; 3: 233 56 79

stdlib_test$227:	; PostCall 16

stdlib_test$228:	; Return 0
x48588:	mov ax, [bp]	; 3: 139 70 0
x48591:	mov di, [bp + 4]	; 3: 139 126 4
x48594:	mov bp, [bp + 2]	; 3: 139 110 2
x48597:	jmp ax	; 2: 255 224

stdlib_test$229:	; FunctionEnd stdlib_test

@12680$string_atof28221232E4562229203D2025f0A#:
x48599:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

@12681$string_1232E456#:
x48621:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

@12684$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x48629:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

@12685$string_1232E456789abc#:
x48669:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

@12689$string_0Agetenv2822path2229203D2025s0A#:
x48683:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

@12690$string_path#:
x48705:	db "path", 0	; 5: 112 97 116 104 0

@12693$string_system2822dir22290A#:
x48710:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

@12695$string_dir#:
x48725:	db "dir", 0	; 4: 100 105 114 0

@12697$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x48729:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

@12705$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x48757:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

@12720$string_div_t28102C20329203D202825i2C2025i290A#:
x48791:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

@12727$string_div_t28102C20329203D202825i2C2025i290A0A#:
x48816:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

@12738$string_ldiv_t28102C20329203D202825li2C2025li290A#:
x48842:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

@12745$string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x48870:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

@12770$string_0AA20List2013A20#:
x48899:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

@12777$string_25i20#:
x48911:	db "%i ", 0	; 4: 37 105 32 0

@12779$int2$2#:
x48915:	dw 2	; 2: 2 0

@12784$string_0AB20List2023A20#:
x48917:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary5956 valuePtr1
x48929:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary5957 -> £temporary5956 £temporary5956 0

compare$2:	; Assign intValue1 £temporary5957 -> £temporary5956
x48932:	mov ax, [si]	; 2: 139 4
x48934:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary5958 valuePtr2
x48937:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary5959 -> £temporary5958 £temporary5958 0

compare$5:	; Assign intValue2 £temporary5959 -> £temporary5958
x48940:	mov ax, [si]	; 2: 139 4
x48942:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x48945:	mov ax, [bp + 12]	; 3: 139 70 12
x48948:	cmp [bp + 10], ax	; 3: 57 70 10
x48951:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary5969 -1
x48953:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x48956:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x48958:	mov ax, [bp + 12]	; 3: 139 70 12
x48961:	cmp [bp + 10], ax	; 3: 57 70 10
x48964:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary5965 0
x48966:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x48969:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary5965 1
x48971:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary5969 £temporary5965

compare$14:	; SetReturnValue £temporary5969

compare$15:	; Return £temporary5969
x48974:	mov ax, [bp]	; 3: 139 70 0
x48977:	mov di, [bp + 4]	; 3: 139 126 4
x48980:	mov bp, [bp + 2]	; 3: 139 110 2
x48983:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

@12796$string_25i20#:
x48985:	db "%i ", 0	; 4: 37 105 32 0

@12798$int2$2#:
x48989:	dw 2	; 2: 2 0

@12803$string_0AC20List2033A20#:
x48991:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary5970 valuePtr1
x49003:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary5971 -> £temporary5970 £temporary5970 0

reverse_compare$2:	; Assign intValue1 £temporary5971 -> £temporary5970
x49006:	mov ax, [si]	; 2: 139 4
x49008:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary5972 valuePtr2
x49011:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary5973 -> £temporary5972 £temporary5972 0

reverse_compare$5:	; Assign intValue2 £temporary5973 -> £temporary5972
x49014:	mov ax, [si]	; 2: 139 4
x49016:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49019:	mov ax, [bp + 12]	; 3: 139 70 12
x49022:	cmp [bp + 10], ax	; 3: 57 70 10
x49025:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary5983 1
x49027:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x49030:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x49032:	mov ax, [bp + 12]	; 3: 139 70 12
x49035:	cmp [bp + 10], ax	; 3: 57 70 10
x49038:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary5979 0
x49040:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x49043:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary5979 -1
x49045:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary5983 £temporary5979

reverse_compare$14:	; SetReturnValue £temporary5983

reverse_compare$15:	; Return £temporary5983
x49048:	mov ax, [bp]	; 3: 139 70 0
x49051:	mov di, [bp + 4]	; 3: 139 126 4
x49054:	mov bp, [bp + 2]	; 3: 139 110 2
x49057:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

@12815$string_25i20#:
x49059:	db "%i ", 0	; 4: 37 105 32 0

@12817$int2$2#:
x49063:	dw 2	; 2: 2 0

@12822$string_0A0ASearch3A0A#:
x49065:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

@12844$int2$2#:
x49076:	dw 2	; 2: 2 0

@12855$string_20202825i2C2025i290A#:
x49078:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

@12857$string_0A#:
x49090:	db 10, 0	; 2: 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x49092:	mov ax, [bp + 6]	; 3: 139 70 6
x49095:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x49098:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x49103:	mov word [bp + 8], atof$4	; 5: 199 70 8 221 191
x49108:	mov [bp + 10], bp	; 3: 137 110 10
x49111:	add bp, 8	; 3: 131 197 8
x49114:	nop	; 1: 144
x49115:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary2249

atof$6:	; SetReturnValue £temporary2249

atof$7:	; Return £temporary2249
x49117:	mov ax, [bp]	; 3: 139 70 0
x49120:	mov di, [bp + 4]	; 3: 139 126 4
x49123:	mov bp, [bp + 2]	; 3: 139 110 2
x49126:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x49128:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x49133:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x49135:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x49138:	mov ax, [bp + 6]	; 3: 139 70 6
x49141:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x49144:	mov word [bp + 28], @5006$string_25lf25n#	; 5: 199 70 28 63 192

strtod$6:	; address £temporary2252 value
x49149:	mov si, bp	; 2: 137 238
x49151:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary2252 10
x49154:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary2253 chars
x49157:	mov si, bp	; 2: 137 238
x49159:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary2253 12
x49162:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x49165:	mov word [bp + 20], strtod$11	; 5: 199 70 20 32 192
x49170:	mov [bp + 22], bp	; 3: 137 110 22
x49173:	add bp, 20	; 3: 131 197 20
x49176:	mov di, bp	; 2: 137 239
x49178:	add di, 4	; 3: 131 199 4
x49181:	jmp sscanf	; 3: 233 195 234

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x49184:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49188:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary2256 -> endp endp 0
x49190:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary2256 -> endp s chars
x49193:	mov ax, [bp + 6]	; 3: 139 70 6
x49196:	add ax, [bp + 10]	; 3: 3 70 10
x49199:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x49201:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x49204:	mov ax, [bp]	; 3: 139 70 0
x49207:	mov di, [bp + 4]	; 3: 139 126 4
x49210:	mov bp, [bp + 2]	; 3: 139 110 2
x49213:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

@5006$string_25lf25n#:
x49215:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

getenv:	; SetReturnValue 0
x49221:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x49224:	mov ax, [bp]	; 3: 139 70 0
x49227:	mov di, [bp + 4]	; 3: 139 126 4
x49230:	mov bp, [bp + 2]	; 3: 139 110 2
x49233:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x49235:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x49238:	mov ax, [bp]	; 3: 139 70 0
x49241:	mov di, [bp + 4]	; 3: 139 126 4
x49244:	mov bp, [bp + 2]	; 3: 139 110 2
x49247:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x49249:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x49253:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3202 value
x49255:	mov bx, [bp + 6]	; 3: 139 94 6
x49258:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3206 £temporary3202

_abs$3:	; Goto 5
x49260:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3206 value
x49262:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3206

_abs$6:	; Return £temporary3206
x49265:	mov ax, [bp]	; 3: 139 70 0
x49268:	mov di, [bp + 4]	; 3: 139 126 4
x49271:	mov bp, [bp + 2]	; 3: 139 110 2
x49274:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x49276:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x49281:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x49286:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49290:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x49292:	mov word [errno], 6	; 6: 199 6 230 10 6 0

div$4:	; SetReturnValue result
x49298:	mov bx, bp	; 2: 137 235
x49300:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x49303:	mov ax, [bp]	; 3: 139 70 0
x49306:	mov di, [bp + 4]	; 3: 139 126 4
x49309:	mov bp, [bp + 2]	; 3: 139 110 2
x49312:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x49314:	mov ax, [bp + 6]	; 3: 139 70 6
x49317:	xor dx, dx	; 2: 49 210
x49319:	idiv word [bp + 8]	; 3: 247 126 8
x49322:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x49325:	mov ax, [bp + 6]	; 3: 139 70 6
x49328:	xor dx, dx	; 2: 49 210
x49330:	idiv word [bp + 8]	; 3: 247 126 8
x49333:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x49336:	mov bx, bp	; 2: 137 235
x49338:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x49341:	mov ax, [bp]	; 3: 139 70 0
x49344:	mov di, [bp + 4]	; 3: 139 126 4
x49347:	mov bp, [bp + 2]	; 3: 139 110 2
x49350:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x49352:	mov word [bp + 16], @12615$string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 2 193

print_div$2:	; Parameter 10 d$quot 8
x49357:	mov ax, [bp + 6]	; 3: 139 70 6
x49360:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x49363:	mov ax, [bp + 8]	; 3: 139 70 8
x49366:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x49369:	mov word [bp + 10], print_div$5	; 5: 199 70 10 236 192
x49374:	mov [bp + 12], bp	; 3: 137 110 12
x49377:	add bp, 10	; 3: 131 197 10
x49380:	mov di, bp	; 2: 137 239
x49382:	add di, 4	; 3: 131 199 4
x49385:	jmp printf	; 3: 233 24 76

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x49388:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Increment d$rem
x49391:	inc word [bp + 8]	; 3: 255 70 8

print_div$8:	; SetReturnValue d
x49394:	mov bx, bp	; 2: 137 235
x49396:	add bx, 6	; 3: 131 195 6

print_div$9:	; Return d
x49399:	mov ax, [bp]	; 3: 139 70 0
x49402:	mov di, [bp + 4]	; 3: 139 126 4
x49405:	mov bp, [bp + 2]	; 3: 139 110 2
x49408:	jmp ax	; 2: 255 224

print_div$10:	; FunctionEnd print_div

@12615$string_div_t20quot2025i20rem2025i0A#:
x49410:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x49432:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x49440:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x49448:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x49453:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x49455:	mov word [errno], 6	; 6: 199 6 230 10 6 0

ldiv$4:	; SetReturnValue result
x49461:	mov bx, bp	; 2: 137 235
x49463:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x49466:	mov ax, [bp]	; 3: 139 70 0
x49469:	mov di, [bp + 4]	; 3: 139 126 4
x49472:	mov bp, [bp + 2]	; 3: 139 110 2
x49475:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x49477:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49481:	xor edx, edx	; 3: 102 49 210
x49484:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49488:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x49492:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49496:	xor edx, edx	; 3: 102 49 210
x49499:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49503:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x49507:	mov bx, bp	; 2: 137 235
x49509:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x49512:	mov ax, [bp]	; 3: 139 70 0
x49515:	mov di, [bp + 4]	; 3: 139 126 4
x49518:	mov bp, [bp + 2]	; 3: 139 110 2
x49521:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x49523:	mov word [bp + 20], @12630$string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 179 193

print_ldiv$2:	; Parameter 14 ld$quot 8
x49528:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49532:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x49536:	mov eax, [bp + 10]	; 4: 102 139 70 10
x49540:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x49544:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 155 193
x49549:	mov [bp + 16], bp	; 3: 137 110 16
x49552:	add bp, 14	; 3: 131 197 14
x49555:	mov di, bp	; 2: 137 239
x49557:	add di, 8	; 3: 131 199 8
x49560:	jmp printf	; 3: 233 105 75

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x49563:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Decrement ld$rem
x49567:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$8:	; SetReturnValue ld
x49571:	mov bx, bp	; 2: 137 235
x49573:	add bx, 6	; 3: 131 195 6

print_ldiv$9:	; Return ld
x49576:	mov ax, [bp]	; 3: 139 70 0
x49579:	mov di, [bp + 4]	; 3: 139 126 4
x49582:	mov bp, [bp + 2]	; 3: 139 110 2
x49585:	jmp ax	; 2: 255 224

print_ldiv$10:	; FunctionEnd print_ldiv

@12630$string_ldiv_t20quot2025li20rem2025li0A#:
x49587:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3180 valueList
x49612:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3180
x49615:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x49618:	mov ax, [bp + 8]	; 3: 139 70 8
x49621:	dec ax	; 1: 72
x49622:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x49625:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x49629:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x49633:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x49638:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x49643:	mov ax, [bp + 16]	; 3: 139 70 16
x49646:	cmp [bp + 18], ax	; 3: 57 70 18
x49649:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3186 index valueSize
x49651:	mov ax, [bp + 18]	; 3: 139 70 18
x49654:	xor dx, dx	; 2: 49 210
x49656:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3186
x49659:	mov bx, [bp + 14]	; 3: 139 94 14
x49662:	add bx, ax	; 2: 1 195
x49664:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3188 index 1
x49667:	mov ax, [bp + 18]	; 3: 139 70 18
x49670:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3189 £temporary3188 valueSize
x49671:	xor dx, dx	; 2: 49 210
x49673:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3189
x49676:	mov bx, [bp + 14]	; 3: 139 94 14
x49679:	add bx, ax	; 2: 1 195
x49681:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x49684:	mov ax, [bp + 22]	; 3: 139 70 22
x49687:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x49690:	mov ax, [bp + 24]	; 3: 139 70 24
x49693:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x49696:	mov word [bp + 26], qsort$16	; 5: 199 70 26 48 194
x49701:	mov [bp + 28], bp	; 3: 137 110 28
x49704:	mov ax, [bp + 12]	; 3: 139 70 12
x49707:	add bp, 26	; 3: 131 197 26
x49710:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3191

qsort$18:	; SignedLessThanEqual 26 £temporary3191 0
x49712:	cmp bx, 0	; 3: 131 251 0
x49715:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x49717:	mov ax, [bp + 22]	; 3: 139 70 22
x49720:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x49723:	mov ax, [bp + 24]	; 3: 139 70 24
x49726:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x49729:	mov ax, [bp + 10]	; 3: 139 70 10
x49732:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x49735:	mov word [bp + 26], qsort$24	; 5: 199 70 26 85 194
x49740:	mov [bp + 28], bp	; 3: 137 110 28
x49743:	add bp, 26	; 3: 131 197 26
x49746:	nop	; 1: 144
x49747:	jmp @7152$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x49749:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x49754:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x49757:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x49759:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x49763:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x49765:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x49768:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x49771:	mov ax, [bp]	; 3: 139 70 0
x49774:	mov di, [bp + 4]	; 3: 139 126 4
x49777:	mov bp, [bp + 2]	; 3: 139 110 2
x49780:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@7152$memswap:	; Assign index 0
x49782:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@7152$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x49787:	mov ax, [bp + 10]	; 3: 139 70 10
x49790:	cmp [bp + 12], ax	; 3: 57 70 12
x49793:	jge @7152$memswap$15	; 2: 125 43

@7152$memswap$2:	; BinaryAdd £temporary3173 value1 index
x49795:	mov si, [bp + 6]	; 3: 139 118 6
x49798:	add si, [bp + 12]	; 3: 3 118 12

@7152$memswap$3:	; Deref £temporary3172 -> £temporary3173 £temporary3173 0

@7152$memswap$4:	; Assign tempValue £temporary3172 -> £temporary3173
x49801:	mov al, [si]	; 2: 138 4
x49803:	mov [bp + 14], al	; 3: 136 70 14

@7152$memswap$5:	; BinaryAdd £temporary3175 value1 index
x49806:	mov si, [bp + 6]	; 3: 139 118 6
x49809:	add si, [bp + 12]	; 3: 3 118 12

@7152$memswap$6:	; Deref £temporary3174 -> £temporary3175 £temporary3175 0

@7152$memswap$7:	; BinaryAdd £temporary3177 value2 index
x49812:	mov di, [bp + 8]	; 3: 139 126 8
x49815:	add di, [bp + 12]	; 3: 3 126 12

@7152$memswap$8:	; Deref £temporary3176 -> £temporary3177 £temporary3177 0

@7152$memswap$9:	; Assign £temporary3174 -> £temporary3175 £temporary3176 -> £temporary3177
x49818:	mov al, [di]	; 2: 138 5
x49820:	mov [si], al	; 2: 136 4

@7152$memswap$10:	; BinaryAdd £temporary3179 value2 index
x49822:	mov si, [bp + 8]	; 3: 139 118 8
x49825:	add si, [bp + 12]	; 3: 3 118 12

@7152$memswap$11:	; Deref £temporary3178 -> £temporary3179 £temporary3179 0

@7152$memswap$12:	; Assign £temporary3178 -> £temporary3179 tempValue
x49828:	mov al, [bp + 14]	; 3: 138 70 14
x49831:	mov [si], al	; 2: 136 4

@7152$memswap$13:	; Increment index
x49833:	inc word [bp + 12]	; 3: 255 70 12

@7152$memswap$14:	; Goto 1
x49836:	jmp @7152$memswap$1	; 2: 235 205

@7152$memswap$15:	; Return 0
x49838:	mov ax, [bp]	; 3: 139 70 0
x49841:	mov di, [bp + 4]	; 3: 139 126 4
x49844:	mov bp, [bp + 2]	; 3: 139 110 2
x49847:	jmp ax	; 2: 255 224

@7152$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x49849:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x49854:	mov ax, [bp + 10]	; 3: 139 70 10
x49857:	dec ax	; 1: 72
x49858:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x49861:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x49865:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x49867:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x49870:	mov ax, [bp]	; 3: 139 70 0
x49873:	mov di, [bp + 4]	; 3: 139 126 4
x49876:	mov bp, [bp + 2]	; 3: 139 110 2
x49879:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3116 valueList
x49881:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3117 firstIndex valueSize
x49884:	mov ax, [bp + 16]	; 3: 139 70 16
x49887:	xor dx, dx	; 2: 49 210
x49889:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3116 £temporary3117
x49892:	add bx, ax	; 2: 1 195
x49894:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x49897:	mov ax, [bp + 6]	; 3: 139 70 6
x49900:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x49903:	mov ax, [bp + 20]	; 3: 139 70 20
x49906:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x49909:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 5 195
x49914:	mov [bp + 24], bp	; 3: 137 110 24
x49917:	mov ax, [bp + 14]	; 3: 139 70 14
x49920:	add bp, 22	; 3: 131 197 22
x49923:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3119

bsearch$14:	; Assign firstCompare £temporary3119
x49925:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x49928:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x49932:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x49934:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x49937:	mov ax, [bp]	; 3: 139 70 0
x49940:	mov di, [bp + 4]	; 3: 139 126 4
x49943:	mov bp, [bp + 2]	; 3: 139 110 2
x49946:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x49948:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x49952:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x49954:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x49957:	mov ax, [bp]	; 3: 139 70 0
x49960:	mov di, [bp + 4]	; 3: 139 126 4
x49963:	mov bp, [bp + 2]	; 3: 139 110 2
x49966:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3122 valueList
x49968:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3123 lastIndex valueSize
x49971:	mov ax, [bp + 18]	; 3: 139 70 18
x49974:	xor dx, dx	; 2: 49 210
x49976:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3122 £temporary3123
x49979:	add bx, ax	; 2: 1 195
x49981:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x49984:	mov ax, [bp + 6]	; 3: 139 70 6
x49987:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x49990:	mov ax, [bp + 20]	; 3: 139 70 20
x49993:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x49996:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 92 195
x50001:	mov [bp + 24], bp	; 3: 137 110 24
x50004:	mov ax, [bp + 14]	; 3: 139 70 14
x50007:	add bp, 22	; 3: 131 197 22
x50010:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3125

bsearch$30:	; Assign lastCompare £temporary3125
x50012:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x50015:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50019:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x50021:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x50024:	mov ax, [bp]	; 3: 139 70 0
x50027:	mov di, [bp + 4]	; 3: 139 126 4
x50030:	mov bp, [bp + 2]	; 3: 139 110 2
x50033:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x50035:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50039:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x50041:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x50044:	mov ax, [bp]	; 3: 139 70 0
x50047:	mov di, [bp + 4]	; 3: 139 126 4
x50050:	mov bp, [bp + 2]	; 3: 139 110 2
x50053:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3128 firstIndex lastIndex
x50055:	mov ax, [bp + 16]	; 3: 139 70 16
x50058:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3128 2
x50061:	xor dx, dx	; 2: 49 210
x50063:	idiv word [@7054$int2$2#]	; 4: 247 62 241 195
x50067:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3130 valueList
x50070:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3131 middleIndex valueSize
x50073:	mov ax, [bp + 20]	; 3: 139 70 20
x50076:	xor dx, dx	; 2: 49 210
x50078:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3130 £temporary3131
x50081:	add bx, ax	; 2: 1 195
x50083:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x50086:	mov ax, [bp + 6]	; 3: 139 70 6
x50089:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x50092:	mov ax, [bp + 22]	; 3: 139 70 22
x50095:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x50098:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 194 195
x50103:	mov [bp + 26], bp	; 3: 137 110 26
x50106:	mov ax, [bp + 14]	; 3: 139 70 14
x50109:	add bp, 24	; 3: 131 197 24
x50112:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3133

bsearch$48:	; Assign middleCompare £temporary3133
x50114:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x50117:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50121:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x50123:	mov ax, [bp + 20]	; 3: 139 70 20
x50126:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x50129:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x50132:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50136:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x50138:	mov ax, [bp + 20]	; 3: 139 70 20
x50141:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x50144:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x50147:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x50150:	mov ax, [bp]	; 3: 139 70 0
x50153:	mov di, [bp + 4]	; 3: 139 126 4
x50156:	mov bp, [bp + 2]	; 3: 139 110 2
x50159:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

@7054$int2$2#:
x50161:	dw 2	; 2: 2 0

strtol_test:	; Assign base 0
x50163:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x50168:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x50172:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x50176:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x50180:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x50184:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x50188:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x50192:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x50196:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x50200:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x50204:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x50208:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x50212:	mov [bp + 27], bp	; 3: 137 110 27
x50215:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2275 pointer
x50219:	mov si, bp	; 2: 137 238
x50221:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2275 8
x50224:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x50227:	mov ax, [bp + 6]	; 3: 139 70 6
x50230:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x50233:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 71 196
x50238:	mov [bp + 23], bp	; 3: 137 110 23
x50241:	add bp, 21	; 3: 131 197 21
x50244:	jmp strtol	; 3: 233 49 11

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2276

strtol_test$20:	; Assign value £temporary2276
x50247:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50251:	mov word [bp + 31], @5065$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 236 205

strtol_test$23:	; Parameter 25 text 8
x50256:	mov [bp + 33], bp	; 3: 137 110 33
x50259:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x50263:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50267:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x50271:	mov ax, [bp + 19]	; 3: 139 70 19
x50274:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x50277:	mov ax, [bp + 6]	; 3: 139 70 6
x50280:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x50283:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 126 196
x50288:	mov [bp + 27], bp	; 3: 137 110 27
x50291:	add bp, 25	; 3: 131 197 25
x50294:	mov di, bp	; 2: 137 239
x50296:	add di, 10	; 3: 131 199 10
x50299:	jmp printf	; 3: 233 134 72

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x50302:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x50307:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x50311:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x50315:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x50319:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x50323:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x50327:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x50331:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x50335:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x50339:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x50343:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x50347:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x50351:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x50355:	mov [bp + 28], bp	; 3: 137 110 28
x50358:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2290 pointer
x50362:	mov si, bp	; 2: 137 238
x50364:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2290 8
x50367:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x50370:	mov ax, [bp + 6]	; 3: 139 70 6
x50373:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x50376:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 214 196
x50381:	mov [bp + 24], bp	; 3: 137 110 24
x50384:	add bp, 22	; 3: 131 197 22
x50387:	jmp strtol	; 3: 233 162 10

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2291

strtol_test$50:	; Assign value £temporary2291
x50390:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50394:	mov word [bp + 32], @5112$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 2 206

strtol_test$53:	; Parameter 26 text 8
x50399:	mov [bp + 34], bp	; 3: 137 110 34
x50402:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x50406:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50410:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x50414:	mov ax, [bp + 20]	; 3: 139 70 20
x50417:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x50420:	mov ax, [bp + 6]	; 3: 139 70 6
x50423:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x50426:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 13 197
x50431:	mov [bp + 28], bp	; 3: 137 110 28
x50434:	add bp, 26	; 3: 131 197 26
x50437:	mov di, bp	; 2: 137 239
x50439:	add di, 10	; 3: 131 199 10
x50442:	jmp printf	; 3: 233 247 71

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x50445:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x50450:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x50454:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x50458:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x50462:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x50466:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x50470:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x50474:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x50478:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x50482:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x50486:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x50490:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x50494:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x50498:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x50502:	mov [bp + 29], bp	; 3: 137 110 29
x50505:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2306 pointer
x50509:	mov si, bp	; 2: 137 238
x50511:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2306 8
x50514:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x50517:	mov ax, [bp + 6]	; 3: 139 70 6
x50520:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x50523:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 105 197
x50528:	mov [bp + 25], bp	; 3: 137 110 25
x50531:	add bp, 23	; 3: 131 197 23
x50534:	jmp strtol	; 3: 233 15 10

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2307

strtol_test$81:	; Assign value £temporary2307
x50537:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50541:	mov word [bp + 33], @5162$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 24 206

strtol_test$84:	; Parameter 27 text 8
x50546:	mov [bp + 35], bp	; 3: 137 110 35
x50549:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x50553:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50557:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x50561:	mov ax, [bp + 21]	; 3: 139 70 21
x50564:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x50567:	mov ax, [bp + 6]	; 3: 139 70 6
x50570:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x50573:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 160 197
x50578:	mov [bp + 29], bp	; 3: 137 110 29
x50581:	add bp, 27	; 3: 131 197 27
x50584:	mov di, bp	; 2: 137 239
x50586:	add di, 10	; 3: 131 199 10
x50589:	jmp printf	; 3: 233 100 71

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x50592:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x50597:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x50601:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x50605:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x50609:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x50613:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x50617:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x50621:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x50625:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x50629:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x50633:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x50637:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x50641:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x50645:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x50649:	mov [bp + 29], bp	; 3: 137 110 29
x50652:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2322 pointer
x50656:	mov si, bp	; 2: 137 238
x50658:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2322 8
x50661:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x50664:	mov ax, [bp + 6]	; 3: 139 70 6
x50667:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x50670:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 252 197
x50675:	mov [bp + 25], bp	; 3: 137 110 25
x50678:	add bp, 23	; 3: 131 197 23
x50681:	jmp strtol	; 3: 233 124 9

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2323

strtol_test$112:	; Assign value £temporary2323
x50684:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50688:	mov word [bp + 33], @5212$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 46 206

strtol_test$115:	; Parameter 27 text 8
x50693:	mov [bp + 35], bp	; 3: 137 110 35
x50696:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x50700:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50704:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x50708:	mov ax, [bp + 21]	; 3: 139 70 21
x50711:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x50714:	mov ax, [bp + 6]	; 3: 139 70 6
x50717:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x50720:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 51 198
x50725:	mov [bp + 29], bp	; 3: 137 110 29
x50728:	add bp, 27	; 3: 131 197 27
x50731:	mov di, bp	; 2: 137 239
x50733:	add di, 10	; 3: 131 199 10
x50736:	jmp printf	; 3: 233 209 70

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x50739:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x50744:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x50748:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x50752:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x50756:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x50760:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x50764:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x50768:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x50772:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x50776:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x50780:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x50784:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x50788:	mov [bp + 27], bp	; 3: 137 110 27
x50791:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2336 pointer
x50795:	mov si, bp	; 2: 137 238
x50797:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2336 8
x50800:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x50803:	mov ax, [bp + 6]	; 3: 139 70 6
x50806:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x50809:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 135 198
x50814:	mov [bp + 23], bp	; 3: 137 110 23
x50817:	add bp, 21	; 3: 131 197 21
x50820:	jmp strtol	; 3: 233 241 8

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2337

strtol_test$141:	; Assign value £temporary2337
x50823:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50827:	mov word [bp + 31], @5256$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 68 206

strtol_test$144:	; Parameter 25 text 8
x50832:	mov [bp + 33], bp	; 3: 137 110 33
x50835:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x50839:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50843:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x50847:	mov ax, [bp + 19]	; 3: 139 70 19
x50850:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x50853:	mov ax, [bp + 6]	; 3: 139 70 6
x50856:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x50859:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 190 198
x50864:	mov [bp + 27], bp	; 3: 137 110 27
x50867:	add bp, 25	; 3: 131 197 25
x50870:	mov di, bp	; 2: 137 239
x50872:	add di, 10	; 3: 131 199 10
x50875:	jmp printf	; 3: 233 70 70

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x50878:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x50883:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x50887:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x50891:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x50895:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x50899:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x50903:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x50907:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x50911:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x50915:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x50919:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x50923:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x50927:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x50931:	mov [bp + 28], bp	; 3: 137 110 28
x50934:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2351 pointer
x50938:	mov si, bp	; 2: 137 238
x50940:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2351 8
x50943:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x50946:	mov ax, [bp + 6]	; 3: 139 70 6
x50949:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x50952:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 22 199
x50957:	mov [bp + 24], bp	; 3: 137 110 24
x50960:	add bp, 22	; 3: 131 197 22
x50963:	jmp strtol	; 3: 233 98 8

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2352

strtol_test$171:	; Assign value £temporary2352
x50966:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50970:	mov word [bp + 32], @5303$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 90 206

strtol_test$174:	; Parameter 26 text 8
x50975:	mov [bp + 34], bp	; 3: 137 110 34
x50978:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x50982:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50986:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x50990:	mov ax, [bp + 20]	; 3: 139 70 20
x50993:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x50996:	mov ax, [bp + 6]	; 3: 139 70 6
x50999:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x51002:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 77 199
x51007:	mov [bp + 28], bp	; 3: 137 110 28
x51010:	add bp, 26	; 3: 131 197 26
x51013:	mov di, bp	; 2: 137 239
x51015:	add di, 10	; 3: 131 199 10
x51018:	jmp printf	; 3: 233 183 69

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x51021:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x51026:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x51030:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x51034:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x51038:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x51042:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x51046:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x51050:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x51054:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x51058:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x51062:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x51066:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x51070:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x51074:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x51078:	mov [bp + 29], bp	; 3: 137 110 29
x51081:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2367 pointer
x51085:	mov si, bp	; 2: 137 238
x51087:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2367 8
x51090:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x51093:	mov ax, [bp + 6]	; 3: 139 70 6
x51096:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x51099:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 169 199
x51104:	mov [bp + 25], bp	; 3: 137 110 25
x51107:	add bp, 23	; 3: 131 197 23
x51110:	jmp strtol	; 3: 233 207 7

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2368

strtol_test$202:	; Assign value £temporary2368
x51113:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51117:	mov word [bp + 33], @5353$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 112 206

strtol_test$205:	; Parameter 27 text 8
x51122:	mov [bp + 35], bp	; 3: 137 110 35
x51125:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x51129:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51133:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x51137:	mov ax, [bp + 21]	; 3: 139 70 21
x51140:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x51143:	mov ax, [bp + 6]	; 3: 139 70 6
x51146:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x51149:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 224 199
x51154:	mov [bp + 29], bp	; 3: 137 110 29
x51157:	add bp, 27	; 3: 131 197 27
x51160:	mov di, bp	; 2: 137 239
x51162:	add di, 10	; 3: 131 199 10
x51165:	jmp printf	; 3: 233 36 69

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x51168:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x51173:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x51177:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x51181:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x51185:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x51189:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x51193:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x51197:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x51201:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x51205:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x51209:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x51213:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x51217:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x51221:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x51225:	mov [bp + 29], bp	; 3: 137 110 29
x51228:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2383 pointer
x51232:	mov si, bp	; 2: 137 238
x51234:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2383 8
x51237:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x51240:	mov ax, [bp + 6]	; 3: 139 70 6
x51243:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x51246:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 60 200
x51251:	mov [bp + 25], bp	; 3: 137 110 25
x51254:	add bp, 23	; 3: 131 197 23
x51257:	jmp strtol	; 3: 233 60 7

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2384

strtol_test$233:	; Assign value £temporary2384
x51260:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51264:	mov word [bp + 33], @5403$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 134 206

strtol_test$236:	; Parameter 27 text 8
x51269:	mov [bp + 35], bp	; 3: 137 110 35
x51272:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x51276:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51280:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x51284:	mov ax, [bp + 21]	; 3: 139 70 21
x51287:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x51290:	mov ax, [bp + 6]	; 3: 139 70 6
x51293:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x51296:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 115 200
x51301:	mov [bp + 29], bp	; 3: 137 110 29
x51304:	add bp, 27	; 3: 131 197 27
x51307:	mov di, bp	; 2: 137 239
x51309:	add di, 10	; 3: 131 199 10
x51312:	jmp printf	; 3: 233 145 68

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x51315:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x51320:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x51324:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x51328:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x51332:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x51336:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x51340:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x51344:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x51348:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x51352:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x51356:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x51360:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x51364:	mov [bp + 27], bp	; 3: 137 110 27
x51367:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2397 pointer
x51371:	mov si, bp	; 2: 137 238
x51373:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2397 8
x51376:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x51379:	mov ax, [bp + 6]	; 3: 139 70 6
x51382:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x51385:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 199 200
x51390:	mov [bp + 23], bp	; 3: 137 110 23
x51393:	add bp, 21	; 3: 131 197 21
x51396:	jmp strtol	; 3: 233 177 6

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2398

strtol_test$262:	; Assign value £temporary2398
x51399:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51403:	mov word [bp + 31], @5447$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 156 206

strtol_test$265:	; Parameter 25 text 8
x51408:	mov [bp + 33], bp	; 3: 137 110 33
x51411:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x51415:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51419:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x51423:	mov ax, [bp + 19]	; 3: 139 70 19
x51426:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x51429:	mov ax, [bp + 6]	; 3: 139 70 6
x51432:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x51435:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 254 200
x51440:	mov [bp + 27], bp	; 3: 137 110 27
x51443:	add bp, 25	; 3: 131 197 25
x51446:	mov di, bp	; 2: 137 239
x51448:	add di, 10	; 3: 131 199 10
x51451:	jmp printf	; 3: 233 6 68

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x51454:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x51459:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x51463:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x51467:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x51471:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x51475:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x51479:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x51483:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x51487:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x51491:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x51495:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x51499:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x51503:	mov [bp + 27], bp	; 3: 137 110 27
x51506:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2411 pointer
x51510:	mov si, bp	; 2: 137 238
x51512:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2411 8
x51515:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x51518:	mov ax, [bp + 6]	; 3: 139 70 6
x51521:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x51524:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 82 201
x51529:	mov [bp + 23], bp	; 3: 137 110 23
x51532:	add bp, 21	; 3: 131 197 21
x51535:	jmp strtol	; 3: 233 38 6

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2412

strtol_test$291:	; Assign value £temporary2412
x51538:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51542:	mov word [bp + 31], @5491$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 178 206

strtol_test$294:	; Parameter 25 text 8
x51547:	mov [bp + 33], bp	; 3: 137 110 33
x51550:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x51554:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51558:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x51562:	mov ax, [bp + 19]	; 3: 139 70 19
x51565:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x51568:	mov ax, [bp + 6]	; 3: 139 70 6
x51571:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x51574:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 137 201
x51579:	mov [bp + 27], bp	; 3: 137 110 27
x51582:	add bp, 25	; 3: 131 197 25
x51585:	mov di, bp	; 2: 137 239
x51587:	add di, 10	; 3: 131 199 10
x51590:	jmp printf	; 3: 233 123 67

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x51593:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x51598:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x51602:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x51606:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x51610:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x51614:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x51618:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x51622:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x51626:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x51630:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x51634:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x51638:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x51642:	mov [bp + 27], bp	; 3: 137 110 27
x51645:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2425 pointer
x51649:	mov si, bp	; 2: 137 238
x51651:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2425 8
x51654:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x51657:	mov ax, [bp + 6]	; 3: 139 70 6
x51660:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x51663:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 221 201
x51668:	mov [bp + 23], bp	; 3: 137 110 23
x51671:	add bp, 21	; 3: 131 197 21
x51674:	jmp strtol	; 3: 233 155 5

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2426

strtol_test$320:	; Assign value £temporary2426
x51677:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51681:	mov word [bp + 31], @5535$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 200 206

strtol_test$323:	; Parameter 25 text 8
x51686:	mov [bp + 33], bp	; 3: 137 110 33
x51689:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x51693:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51697:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x51701:	mov ax, [bp + 19]	; 3: 139 70 19
x51704:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x51707:	mov ax, [bp + 6]	; 3: 139 70 6
x51710:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x51713:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 20 202
x51718:	mov [bp + 27], bp	; 3: 137 110 27
x51721:	add bp, 25	; 3: 131 197 25
x51724:	mov di, bp	; 2: 137 239
x51726:	add di, 10	; 3: 131 199 10
x51729:	jmp printf	; 3: 233 240 66

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x51732:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x51737:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x51741:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x51745:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x51749:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x51753:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x51757:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x51761:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x51765:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x51769:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x51773:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x51777:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x51781:	mov [bp + 27], bp	; 3: 137 110 27
x51784:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2439 pointer
x51788:	mov si, bp	; 2: 137 238
x51790:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2439 8
x51793:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x51796:	mov ax, [bp + 6]	; 3: 139 70 6
x51799:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x51802:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 104 202
x51807:	mov [bp + 23], bp	; 3: 137 110 23
x51810:	add bp, 21	; 3: 131 197 21
x51813:	jmp strtol	; 3: 233 16 5

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2440

strtol_test$349:	; Assign value £temporary2440
x51816:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51820:	mov word [bp + 31], @5579$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 222 206

strtol_test$352:	; Parameter 25 text 8
x51825:	mov [bp + 33], bp	; 3: 137 110 33
x51828:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x51832:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51836:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x51840:	mov ax, [bp + 19]	; 3: 139 70 19
x51843:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x51846:	mov ax, [bp + 6]	; 3: 139 70 6
x51849:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x51852:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 159 202
x51857:	mov [bp + 27], bp	; 3: 137 110 27
x51860:	add bp, 25	; 3: 131 197 25
x51863:	mov di, bp	; 2: 137 239
x51865:	add di, 10	; 3: 131 199 10
x51868:	jmp printf	; 3: 233 101 66

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x51871:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x51876:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x51880:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x51884:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x51888:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x51892:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x51896:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x51900:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x51904:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x51908:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x51912:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x51916:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x51920:	mov [bp + 27], bp	; 3: 137 110 27
x51923:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2453 pointer
x51927:	mov si, bp	; 2: 137 238
x51929:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2453 8
x51932:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x51935:	mov ax, [bp + 6]	; 3: 139 70 6
x51938:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x51941:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 243 202
x51946:	mov [bp + 23], bp	; 3: 137 110 23
x51949:	add bp, 21	; 3: 131 197 21
x51952:	jmp strtol	; 3: 233 133 4

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2454

strtol_test$378:	; Assign value £temporary2454
x51955:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51959:	mov word [bp + 31], @5623$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 244 206

strtol_test$381:	; Parameter 25 text 8
x51964:	mov [bp + 33], bp	; 3: 137 110 33
x51967:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x51971:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51975:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x51979:	mov ax, [bp + 19]	; 3: 139 70 19
x51982:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x51985:	mov ax, [bp + 6]	; 3: 139 70 6
x51988:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x51991:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 42 203
x51996:	mov [bp + 27], bp	; 3: 137 110 27
x51999:	add bp, 25	; 3: 131 197 25
x52002:	mov di, bp	; 2: 137 239
x52004:	add di, 10	; 3: 131 199 10
x52007:	jmp printf	; 3: 233 218 65

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x52010:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x52015:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x52019:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x52023:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x52027:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x52031:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x52035:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x52039:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x52043:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x52047:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x52051:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x52055:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x52059:	mov [bp + 27], bp	; 3: 137 110 27
x52062:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2467 pointer
x52066:	mov si, bp	; 2: 137 238
x52068:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2467 8
x52071:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x52074:	mov ax, [bp + 6]	; 3: 139 70 6
x52077:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x52080:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 126 203
x52085:	mov [bp + 23], bp	; 3: 137 110 23
x52088:	add bp, 21	; 3: 131 197 21
x52091:	jmp strtol	; 3: 233 250 3

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2468

strtol_test$407:	; Assign value £temporary2468
x52094:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52098:	mov word [bp + 31], @5667$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 10 207

strtol_test$410:	; Parameter 25 text 8
x52103:	mov [bp + 33], bp	; 3: 137 110 33
x52106:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x52110:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52114:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x52118:	mov ax, [bp + 19]	; 3: 139 70 19
x52121:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x52124:	mov ax, [bp + 6]	; 3: 139 70 6
x52127:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x52130:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 181 203
x52135:	mov [bp + 27], bp	; 3: 137 110 27
x52138:	add bp, 25	; 3: 131 197 25
x52141:	mov di, bp	; 2: 137 239
x52143:	add di, 10	; 3: 131 199 10
x52146:	jmp printf	; 3: 233 79 65

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x52149:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x52154:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x52158:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x52162:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x52166:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x52170:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x52174:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x52178:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x52182:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x52186:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x52190:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x52194:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x52198:	mov [bp + 27], bp	; 3: 137 110 27
x52201:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2481 pointer
x52205:	mov si, bp	; 2: 137 238
x52207:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2481 8
x52210:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x52213:	mov ax, [bp + 6]	; 3: 139 70 6
x52216:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x52219:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 9 204
x52224:	mov [bp + 23], bp	; 3: 137 110 23
x52227:	add bp, 21	; 3: 131 197 21
x52230:	jmp strtol	; 3: 233 111 3

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2482

strtol_test$436:	; Assign value £temporary2482
x52233:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52237:	mov word [bp + 31], @5711$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 32 207

strtol_test$439:	; Parameter 25 text 8
x52242:	mov [bp + 33], bp	; 3: 137 110 33
x52245:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x52249:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52253:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x52257:	mov ax, [bp + 19]	; 3: 139 70 19
x52260:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x52263:	mov ax, [bp + 6]	; 3: 139 70 6
x52266:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x52269:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 64 204
x52274:	mov [bp + 27], bp	; 3: 137 110 27
x52277:	add bp, 25	; 3: 131 197 25
x52280:	mov di, bp	; 2: 137 239
x52282:	add di, 10	; 3: 131 199 10
x52285:	jmp printf	; 3: 233 196 64

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x52288:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x52293:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x52297:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x52301:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x52305:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x52309:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x52313:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x52317:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x52321:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x52325:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x52329:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x52333:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x52337:	mov [bp + 27], bp	; 3: 137 110 27
x52340:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2495 pointer
x52344:	mov si, bp	; 2: 137 238
x52346:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2495 8
x52349:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x52352:	mov ax, [bp + 6]	; 3: 139 70 6
x52355:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x52358:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 148 204
x52363:	mov [bp + 23], bp	; 3: 137 110 23
x52366:	add bp, 21	; 3: 131 197 21
x52369:	jmp strtol	; 3: 233 228 2

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2496

strtol_test$465:	; Assign value £temporary2496
x52372:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52376:	mov word [bp + 31], @5755$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 54 207

strtol_test$468:	; Parameter 25 text 8
x52381:	mov [bp + 33], bp	; 3: 137 110 33
x52384:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x52388:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52392:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x52396:	mov ax, [bp + 19]	; 3: 139 70 19
x52399:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x52402:	mov ax, [bp + 6]	; 3: 139 70 6
x52405:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x52408:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 203 204
x52413:	mov [bp + 27], bp	; 3: 137 110 27
x52416:	add bp, 25	; 3: 131 197 25
x52419:	mov di, bp	; 2: 137 239
x52421:	add di, 10	; 3: 131 199 10
x52424:	jmp printf	; 3: 233 57 64

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x52427:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x52432:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x52436:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x52440:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x52444:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x52448:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x52452:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x52456:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x52460:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x52464:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x52468:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x52472:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x52476:	mov [bp + 27], bp	; 3: 137 110 27
x52479:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2509 pointer
x52483:	mov si, bp	; 2: 137 238
x52485:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2509 8
x52488:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x52491:	mov ax, [bp + 6]	; 3: 139 70 6
x52494:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x52497:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 31 205
x52502:	mov [bp + 23], bp	; 3: 137 110 23
x52505:	add bp, 21	; 3: 131 197 21
x52508:	jmp strtol	; 3: 233 89 2

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2510

strtol_test$494:	; Assign value £temporary2510
x52511:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52515:	mov word [bp + 31], @5799$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 76 207

strtol_test$497:	; Parameter 25 text 8
x52520:	mov [bp + 33], bp	; 3: 137 110 33
x52523:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x52527:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52531:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x52535:	mov ax, [bp + 19]	; 3: 139 70 19
x52538:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x52541:	mov ax, [bp + 6]	; 3: 139 70 6
x52544:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x52547:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 86 205
x52552:	mov [bp + 27], bp	; 3: 137 110 27
x52555:	add bp, 25	; 3: 131 197 25
x52558:	mov di, bp	; 2: 137 239
x52560:	add di, 10	; 3: 131 199 10
x52563:	jmp printf	; 3: 233 174 63

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x52566:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x52571:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x52575:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x52579:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x52583:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x52587:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x52591:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x52595:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x52599:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x52603:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x52607:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x52611:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x52615:	mov [bp + 27], bp	; 3: 137 110 27
x52618:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2523 pointer
x52622:	mov si, bp	; 2: 137 238
x52624:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2523 8
x52627:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x52630:	mov ax, [bp + 6]	; 3: 139 70 6
x52633:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x52636:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 170 205
x52641:	mov [bp + 23], bp	; 3: 137 110 23
x52644:	add bp, 21	; 3: 131 197 21
x52647:	jmp strtol	; 3: 233 206 1

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2524

strtol_test$523:	; Assign value £temporary2524
x52650:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52654:	mov word [bp + 31], @5843$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 98 207

strtol_test$526:	; Parameter 25 text 8
x52659:	mov [bp + 33], bp	; 3: 137 110 33
x52662:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x52666:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52670:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x52674:	mov ax, [bp + 19]	; 3: 139 70 19
x52677:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x52680:	mov ax, [bp + 6]	; 3: 139 70 6
x52683:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x52686:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 225 205
x52691:	mov [bp + 27], bp	; 3: 137 110 27
x52694:	add bp, 25	; 3: 131 197 25
x52697:	mov di, bp	; 2: 137 239
x52699:	add di, 10	; 3: 131 199 10
x52702:	jmp printf	; 3: 233 35 63

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x52705:	mov ax, [bp]	; 3: 139 70 0
x52708:	mov di, [bp + 4]	; 3: 139 126 4
x52711:	mov bp, [bp + 2]	; 3: 139 110 2
x52714:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

@5065$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52716:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5112$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52738:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5162$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52760:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5212$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52782:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5256$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52804:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5303$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52826:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5353$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52848:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5403$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52870:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5447$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52892:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5491$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52914:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5535$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52936:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5579$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52958:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5623$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52980:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5667$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53002:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5711$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53024:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5755$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53046:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5799$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53068:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5843$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53090:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x53112:	mov word [g_inStatus], 1	; 6: 199 6 72 96 1 0

strtol$1:	; Assign g_inDevice s
x53118:	mov ax, [bp + 6]	; 3: 139 70 6
x53121:	mov [g_inDevice], ax	; 3: 163 74 96

strtol$2:	; Assign g_inChars 0
x53124:	mov word [g_inChars], 0	; 6: 199 6 109 101 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x53130:	mov ax, [bp + 10]	; 3: 139 70 10
x53133:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x53136:	mov word [bp + 12], strtol$6	; 5: 199 70 12 158 207
x53141:	mov [bp + 14], bp	; 3: 137 110 14
x53144:	add bp, 12	; 3: 131 197 12
x53147:	jmp scanLongInt	; 3: 233 196 152

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2239

strtol$8:	; Assign value £temporary2239
x53150:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x53154:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x53158:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2241 -> endp endp 0
x53160:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2241 -> endp s g_inChars
x53163:	mov ax, [bp + 6]	; 3: 139 70 6
x53166:	add ax, [g_inChars]	; 4: 3 6 109 101
x53170:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x53172:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x53176:	mov ax, [bp]	; 3: 139 70 0
x53179:	mov di, [bp + 4]	; 3: 139 126 4
x53182:	mov bp, [bp + 2]	; 3: 139 110 2
x53185:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x53187:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x53192:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x53196:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x53200:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x53204:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x53208:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x53212:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x53216:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x53220:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x53224:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x53228:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x53232:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x53236:	mov [bp + 27], bp	; 3: 137 110 27
x53239:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2699 pointer
x53243:	mov si, bp	; 2: 137 238
x53245:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2699 8
x53248:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x53251:	mov ax, [bp + 6]	; 3: 139 70 6
x53254:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x53257:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 23 208
x53262:	mov [bp + 23], bp	; 3: 137 110 23
x53265:	add bp, 21	; 3: 131 197 21
x53268:	jmp strtoul	; 3: 233 49 11

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2700

strtoul_test$20:	; Assign value £temporary2700
x53271:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53275:	mov word [bp + 31], @6050$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 188 217

strtoul_test$23:	; Parameter 25 text 8
x53280:	mov [bp + 33], bp	; 3: 137 110 33
x53283:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x53287:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53291:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x53295:	mov ax, [bp + 19]	; 3: 139 70 19
x53298:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x53301:	mov ax, [bp + 6]	; 3: 139 70 6
x53304:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x53307:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 78 208
x53312:	mov [bp + 27], bp	; 3: 137 110 27
x53315:	add bp, 25	; 3: 131 197 25
x53318:	mov di, bp	; 2: 137 239
x53320:	add di, 10	; 3: 131 199 10
x53323:	jmp printf	; 3: 233 182 60

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x53326:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x53331:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x53335:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x53339:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x53343:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x53347:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x53351:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x53355:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x53359:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x53363:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x53367:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x53371:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x53375:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x53379:	mov [bp + 28], bp	; 3: 137 110 28
x53382:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2714 pointer
x53386:	mov si, bp	; 2: 137 238
x53388:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2714 8
x53391:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x53394:	mov ax, [bp + 6]	; 3: 139 70 6
x53397:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x53400:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 166 208
x53405:	mov [bp + 24], bp	; 3: 137 110 24
x53408:	add bp, 22	; 3: 131 197 22
x53411:	jmp strtoul	; 3: 233 162 10

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2715

strtoul_test$50:	; Assign value £temporary2715
x53414:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53418:	mov word [bp + 32], @6097$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 210 217

strtoul_test$53:	; Parameter 26 text 8
x53423:	mov [bp + 34], bp	; 3: 137 110 34
x53426:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x53430:	mov eax, [bp + 22]	; 4: 102 139 70 22
x53434:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x53438:	mov ax, [bp + 20]	; 3: 139 70 20
x53441:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x53444:	mov ax, [bp + 6]	; 3: 139 70 6
x53447:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x53450:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 221 208
x53455:	mov [bp + 28], bp	; 3: 137 110 28
x53458:	add bp, 26	; 3: 131 197 26
x53461:	mov di, bp	; 2: 137 239
x53463:	add di, 10	; 3: 131 199 10
x53466:	jmp printf	; 3: 233 39 60

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x53469:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x53474:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x53478:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x53482:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x53486:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x53490:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x53494:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x53498:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x53502:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x53506:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x53510:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x53514:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x53518:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x53522:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x53526:	mov [bp + 29], bp	; 3: 137 110 29
x53529:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2730 pointer
x53533:	mov si, bp	; 2: 137 238
x53535:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2730 8
x53538:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x53541:	mov ax, [bp + 6]	; 3: 139 70 6
x53544:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x53547:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 57 209
x53552:	mov [bp + 25], bp	; 3: 137 110 25
x53555:	add bp, 23	; 3: 131 197 23
x53558:	jmp strtoul	; 3: 233 15 10

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2731

strtoul_test$81:	; Assign value £temporary2731
x53561:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53565:	mov word [bp + 33], @6147$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 232 217

strtoul_test$84:	; Parameter 27 text 8
x53570:	mov [bp + 35], bp	; 3: 137 110 35
x53573:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x53577:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53581:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x53585:	mov ax, [bp + 21]	; 3: 139 70 21
x53588:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x53591:	mov ax, [bp + 6]	; 3: 139 70 6
x53594:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x53597:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 112 209
x53602:	mov [bp + 29], bp	; 3: 137 110 29
x53605:	add bp, 27	; 3: 131 197 27
x53608:	mov di, bp	; 2: 137 239
x53610:	add di, 10	; 3: 131 199 10
x53613:	jmp printf	; 3: 233 148 59

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x53616:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x53621:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x53625:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x53629:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x53633:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x53637:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x53641:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x53645:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x53649:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x53653:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x53657:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x53661:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x53665:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x53669:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x53673:	mov [bp + 29], bp	; 3: 137 110 29
x53676:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2746 pointer
x53680:	mov si, bp	; 2: 137 238
x53682:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2746 8
x53685:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x53688:	mov ax, [bp + 6]	; 3: 139 70 6
x53691:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x53694:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 204 209
x53699:	mov [bp + 25], bp	; 3: 137 110 25
x53702:	add bp, 23	; 3: 131 197 23
x53705:	jmp strtoul	; 3: 233 124 9

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2747

strtoul_test$112:	; Assign value £temporary2747
x53708:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53712:	mov word [bp + 33], @6197$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 254 217

strtoul_test$115:	; Parameter 27 text 8
x53717:	mov [bp + 35], bp	; 3: 137 110 35
x53720:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x53724:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53728:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x53732:	mov ax, [bp + 21]	; 3: 139 70 21
x53735:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x53738:	mov ax, [bp + 6]	; 3: 139 70 6
x53741:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x53744:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 3 210
x53749:	mov [bp + 29], bp	; 3: 137 110 29
x53752:	add bp, 27	; 3: 131 197 27
x53755:	mov di, bp	; 2: 137 239
x53757:	add di, 10	; 3: 131 199 10
x53760:	jmp printf	; 3: 233 1 59

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x53763:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x53768:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x53772:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x53776:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x53780:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x53784:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x53788:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x53792:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x53796:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x53800:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x53804:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x53808:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x53812:	mov [bp + 27], bp	; 3: 137 110 27
x53815:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2760 pointer
x53819:	mov si, bp	; 2: 137 238
x53821:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2760 8
x53824:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x53827:	mov ax, [bp + 6]	; 3: 139 70 6
x53830:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x53833:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 87 210
x53838:	mov [bp + 23], bp	; 3: 137 110 23
x53841:	add bp, 21	; 3: 131 197 21
x53844:	jmp strtoul	; 3: 233 241 8

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2761

strtoul_test$141:	; Assign value £temporary2761
x53847:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53851:	mov word [bp + 31], @6241$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 20 218

strtoul_test$144:	; Parameter 25 text 8
x53856:	mov [bp + 33], bp	; 3: 137 110 33
x53859:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x53863:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53867:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x53871:	mov ax, [bp + 19]	; 3: 139 70 19
x53874:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x53877:	mov ax, [bp + 6]	; 3: 139 70 6
x53880:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x53883:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 142 210
x53888:	mov [bp + 27], bp	; 3: 137 110 27
x53891:	add bp, 25	; 3: 131 197 25
x53894:	mov di, bp	; 2: 137 239
x53896:	add di, 10	; 3: 131 199 10
x53899:	jmp printf	; 3: 233 118 58

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x53902:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x53907:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x53911:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x53915:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x53919:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x53923:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x53927:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x53931:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x53935:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x53939:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x53943:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x53947:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x53951:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x53955:	mov [bp + 28], bp	; 3: 137 110 28
x53958:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2775 pointer
x53962:	mov si, bp	; 2: 137 238
x53964:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2775 8
x53967:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x53970:	mov ax, [bp + 6]	; 3: 139 70 6
x53973:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x53976:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 230 210
x53981:	mov [bp + 24], bp	; 3: 137 110 24
x53984:	add bp, 22	; 3: 131 197 22
x53987:	jmp strtoul	; 3: 233 98 8

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2776

strtoul_test$171:	; Assign value £temporary2776
x53990:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53994:	mov word [bp + 32], @6288$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 42 218

strtoul_test$174:	; Parameter 26 text 8
x53999:	mov [bp + 34], bp	; 3: 137 110 34
x54002:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x54006:	mov eax, [bp + 22]	; 4: 102 139 70 22
x54010:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x54014:	mov ax, [bp + 20]	; 3: 139 70 20
x54017:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x54020:	mov ax, [bp + 6]	; 3: 139 70 6
x54023:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x54026:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 29 211
x54031:	mov [bp + 28], bp	; 3: 137 110 28
x54034:	add bp, 26	; 3: 131 197 26
x54037:	mov di, bp	; 2: 137 239
x54039:	add di, 10	; 3: 131 199 10
x54042:	jmp printf	; 3: 233 231 57

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x54045:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x54050:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x54054:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x54058:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x54062:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x54066:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x54070:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x54074:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x54078:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x54082:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x54086:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x54090:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x54094:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x54098:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x54102:	mov [bp + 29], bp	; 3: 137 110 29
x54105:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2791 pointer
x54109:	mov si, bp	; 2: 137 238
x54111:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2791 8
x54114:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x54117:	mov ax, [bp + 6]	; 3: 139 70 6
x54120:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x54123:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 121 211
x54128:	mov [bp + 25], bp	; 3: 137 110 25
x54131:	add bp, 23	; 3: 131 197 23
x54134:	jmp strtoul	; 3: 233 207 7

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2792

strtoul_test$202:	; Assign value £temporary2792
x54137:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54141:	mov word [bp + 33], @6338$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 64 218

strtoul_test$205:	; Parameter 27 text 8
x54146:	mov [bp + 35], bp	; 3: 137 110 35
x54149:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x54153:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54157:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x54161:	mov ax, [bp + 21]	; 3: 139 70 21
x54164:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x54167:	mov ax, [bp + 6]	; 3: 139 70 6
x54170:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x54173:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 176 211
x54178:	mov [bp + 29], bp	; 3: 137 110 29
x54181:	add bp, 27	; 3: 131 197 27
x54184:	mov di, bp	; 2: 137 239
x54186:	add di, 10	; 3: 131 199 10
x54189:	jmp printf	; 3: 233 84 57

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x54192:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x54197:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x54201:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x54205:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x54209:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x54213:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x54217:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x54221:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x54225:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x54229:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x54233:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x54237:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x54241:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x54245:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x54249:	mov [bp + 29], bp	; 3: 137 110 29
x54252:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2807 pointer
x54256:	mov si, bp	; 2: 137 238
x54258:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2807 8
x54261:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x54264:	mov ax, [bp + 6]	; 3: 139 70 6
x54267:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x54270:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 12 212
x54275:	mov [bp + 25], bp	; 3: 137 110 25
x54278:	add bp, 23	; 3: 131 197 23
x54281:	jmp strtoul	; 3: 233 60 7

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2808

strtoul_test$233:	; Assign value £temporary2808
x54284:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54288:	mov word [bp + 33], @6388$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 86 218

strtoul_test$236:	; Parameter 27 text 8
x54293:	mov [bp + 35], bp	; 3: 137 110 35
x54296:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x54300:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54304:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x54308:	mov ax, [bp + 21]	; 3: 139 70 21
x54311:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x54314:	mov ax, [bp + 6]	; 3: 139 70 6
x54317:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x54320:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 67 212
x54325:	mov [bp + 29], bp	; 3: 137 110 29
x54328:	add bp, 27	; 3: 131 197 27
x54331:	mov di, bp	; 2: 137 239
x54333:	add di, 10	; 3: 131 199 10
x54336:	jmp printf	; 3: 233 193 56

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x54339:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x54344:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x54348:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x54352:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x54356:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x54360:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x54364:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x54368:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x54372:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x54376:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x54380:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x54384:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x54388:	mov [bp + 27], bp	; 3: 137 110 27
x54391:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2821 pointer
x54395:	mov si, bp	; 2: 137 238
x54397:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2821 8
x54400:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x54403:	mov ax, [bp + 6]	; 3: 139 70 6
x54406:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x54409:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 151 212
x54414:	mov [bp + 23], bp	; 3: 137 110 23
x54417:	add bp, 21	; 3: 131 197 21
x54420:	jmp strtoul	; 3: 233 177 6

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2822

strtoul_test$262:	; Assign value £temporary2822
x54423:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54427:	mov word [bp + 31], @6432$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 108 218

strtoul_test$265:	; Parameter 25 text 8
x54432:	mov [bp + 33], bp	; 3: 137 110 33
x54435:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x54439:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54443:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x54447:	mov ax, [bp + 19]	; 3: 139 70 19
x54450:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x54453:	mov ax, [bp + 6]	; 3: 139 70 6
x54456:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x54459:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 206 212
x54464:	mov [bp + 27], bp	; 3: 137 110 27
x54467:	add bp, 25	; 3: 131 197 25
x54470:	mov di, bp	; 2: 137 239
x54472:	add di, 10	; 3: 131 199 10
x54475:	jmp printf	; 3: 233 54 56

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x54478:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x54483:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x54487:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x54491:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x54495:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x54499:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x54503:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x54507:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x54511:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x54515:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x54519:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x54523:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x54527:	mov [bp + 27], bp	; 3: 137 110 27
x54530:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary2835 pointer
x54534:	mov si, bp	; 2: 137 238
x54536:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary2835 8
x54539:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x54542:	mov ax, [bp + 6]	; 3: 139 70 6
x54545:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x54548:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 34 213
x54553:	mov [bp + 23], bp	; 3: 137 110 23
x54556:	add bp, 21	; 3: 131 197 21
x54559:	jmp strtoul	; 3: 233 38 6

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary2836

strtoul_test$291:	; Assign value £temporary2836
x54562:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54566:	mov word [bp + 31], @6476$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 130 218

strtoul_test$294:	; Parameter 25 text 8
x54571:	mov [bp + 33], bp	; 3: 137 110 33
x54574:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x54578:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54582:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x54586:	mov ax, [bp + 19]	; 3: 139 70 19
x54589:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x54592:	mov ax, [bp + 6]	; 3: 139 70 6
x54595:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x54598:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 89 213
x54603:	mov [bp + 27], bp	; 3: 137 110 27
x54606:	add bp, 25	; 3: 131 197 25
x54609:	mov di, bp	; 2: 137 239
x54611:	add di, 10	; 3: 131 199 10
x54614:	jmp printf	; 3: 233 171 55

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x54617:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x54622:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x54626:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x54630:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x54634:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x54638:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x54642:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x54646:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x54650:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x54654:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x54658:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x54662:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x54666:	mov [bp + 27], bp	; 3: 137 110 27
x54669:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary2849 pointer
x54673:	mov si, bp	; 2: 137 238
x54675:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary2849 8
x54678:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x54681:	mov ax, [bp + 6]	; 3: 139 70 6
x54684:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x54687:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 173 213
x54692:	mov [bp + 23], bp	; 3: 137 110 23
x54695:	add bp, 21	; 3: 131 197 21
x54698:	jmp strtoul	; 3: 233 155 5

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary2850

strtoul_test$320:	; Assign value £temporary2850
x54701:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54705:	mov word [bp + 31], @6520$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 152 218

strtoul_test$323:	; Parameter 25 text 8
x54710:	mov [bp + 33], bp	; 3: 137 110 33
x54713:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x54717:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54721:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x54725:	mov ax, [bp + 19]	; 3: 139 70 19
x54728:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x54731:	mov ax, [bp + 6]	; 3: 139 70 6
x54734:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x54737:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 228 213
x54742:	mov [bp + 27], bp	; 3: 137 110 27
x54745:	add bp, 25	; 3: 131 197 25
x54748:	mov di, bp	; 2: 137 239
x54750:	add di, 10	; 3: 131 199 10
x54753:	jmp printf	; 3: 233 32 55

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x54756:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x54761:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x54765:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x54769:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x54773:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x54777:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x54781:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x54785:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x54789:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x54793:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x54797:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x54801:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x54805:	mov [bp + 27], bp	; 3: 137 110 27
x54808:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary2863 pointer
x54812:	mov si, bp	; 2: 137 238
x54814:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary2863 8
x54817:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x54820:	mov ax, [bp + 6]	; 3: 139 70 6
x54823:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x54826:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 56 214
x54831:	mov [bp + 23], bp	; 3: 137 110 23
x54834:	add bp, 21	; 3: 131 197 21
x54837:	jmp strtoul	; 3: 233 16 5

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary2864

strtoul_test$349:	; Assign value £temporary2864
x54840:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54844:	mov word [bp + 31], @6564$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 174 218

strtoul_test$352:	; Parameter 25 text 8
x54849:	mov [bp + 33], bp	; 3: 137 110 33
x54852:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x54856:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54860:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x54864:	mov ax, [bp + 19]	; 3: 139 70 19
x54867:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x54870:	mov ax, [bp + 6]	; 3: 139 70 6
x54873:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x54876:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 111 214
x54881:	mov [bp + 27], bp	; 3: 137 110 27
x54884:	add bp, 25	; 3: 131 197 25
x54887:	mov di, bp	; 2: 137 239
x54889:	add di, 10	; 3: 131 199 10
x54892:	jmp printf	; 3: 233 149 54

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x54895:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x54900:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x54904:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x54908:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x54912:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x54916:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x54920:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x54924:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x54928:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x54932:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x54936:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x54940:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x54944:	mov [bp + 27], bp	; 3: 137 110 27
x54947:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary2877 pointer
x54951:	mov si, bp	; 2: 137 238
x54953:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary2877 8
x54956:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x54959:	mov ax, [bp + 6]	; 3: 139 70 6
x54962:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x54965:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 195 214
x54970:	mov [bp + 23], bp	; 3: 137 110 23
x54973:	add bp, 21	; 3: 131 197 21
x54976:	jmp strtoul	; 3: 233 133 4

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary2878

strtoul_test$378:	; Assign value £temporary2878
x54979:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54983:	mov word [bp + 31], @6608$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 196 218

strtoul_test$381:	; Parameter 25 text 8
x54988:	mov [bp + 33], bp	; 3: 137 110 33
x54991:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x54995:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54999:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x55003:	mov ax, [bp + 19]	; 3: 139 70 19
x55006:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x55009:	mov ax, [bp + 6]	; 3: 139 70 6
x55012:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x55015:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 250 214
x55020:	mov [bp + 27], bp	; 3: 137 110 27
x55023:	add bp, 25	; 3: 131 197 25
x55026:	mov di, bp	; 2: 137 239
x55028:	add di, 10	; 3: 131 199 10
x55031:	jmp printf	; 3: 233 10 54

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x55034:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x55039:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x55043:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x55047:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x55051:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x55055:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x55059:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x55063:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x55067:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x55071:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x55075:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x55079:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x55083:	mov [bp + 27], bp	; 3: 137 110 27
x55086:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary2891 pointer
x55090:	mov si, bp	; 2: 137 238
x55092:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary2891 8
x55095:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x55098:	mov ax, [bp + 6]	; 3: 139 70 6
x55101:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x55104:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 78 215
x55109:	mov [bp + 23], bp	; 3: 137 110 23
x55112:	add bp, 21	; 3: 131 197 21
x55115:	jmp strtoul	; 3: 233 250 3

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary2892

strtoul_test$407:	; Assign value £temporary2892
x55118:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55122:	mov word [bp + 31], @6652$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 218 218

strtoul_test$410:	; Parameter 25 text 8
x55127:	mov [bp + 33], bp	; 3: 137 110 33
x55130:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x55134:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55138:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x55142:	mov ax, [bp + 19]	; 3: 139 70 19
x55145:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x55148:	mov ax, [bp + 6]	; 3: 139 70 6
x55151:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x55154:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 133 215
x55159:	mov [bp + 27], bp	; 3: 137 110 27
x55162:	add bp, 25	; 3: 131 197 25
x55165:	mov di, bp	; 2: 137 239
x55167:	add di, 10	; 3: 131 199 10
x55170:	jmp printf	; 3: 233 127 53

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x55173:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x55178:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x55182:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x55186:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x55190:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x55194:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x55198:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x55202:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x55206:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x55210:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x55214:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x55218:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x55222:	mov [bp + 27], bp	; 3: 137 110 27
x55225:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary2905 pointer
x55229:	mov si, bp	; 2: 137 238
x55231:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary2905 8
x55234:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x55237:	mov ax, [bp + 6]	; 3: 139 70 6
x55240:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x55243:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 217 215
x55248:	mov [bp + 23], bp	; 3: 137 110 23
x55251:	add bp, 21	; 3: 131 197 21
x55254:	jmp strtoul	; 3: 233 111 3

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary2906

strtoul_test$436:	; Assign value £temporary2906
x55257:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55261:	mov word [bp + 31], @6696$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 240 218

strtoul_test$439:	; Parameter 25 text 8
x55266:	mov [bp + 33], bp	; 3: 137 110 33
x55269:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x55273:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55277:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x55281:	mov ax, [bp + 19]	; 3: 139 70 19
x55284:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x55287:	mov ax, [bp + 6]	; 3: 139 70 6
x55290:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x55293:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 16 216
x55298:	mov [bp + 27], bp	; 3: 137 110 27
x55301:	add bp, 25	; 3: 131 197 25
x55304:	mov di, bp	; 2: 137 239
x55306:	add di, 10	; 3: 131 199 10
x55309:	jmp printf	; 3: 233 244 52

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x55312:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x55317:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x55321:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x55325:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x55329:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x55333:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x55337:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x55341:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x55345:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x55349:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x55353:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x55357:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x55361:	mov [bp + 27], bp	; 3: 137 110 27
x55364:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary2919 pointer
x55368:	mov si, bp	; 2: 137 238
x55370:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary2919 8
x55373:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x55376:	mov ax, [bp + 6]	; 3: 139 70 6
x55379:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x55382:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 100 216
x55387:	mov [bp + 23], bp	; 3: 137 110 23
x55390:	add bp, 21	; 3: 131 197 21
x55393:	jmp strtoul	; 3: 233 228 2

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary2920

strtoul_test$465:	; Assign value £temporary2920
x55396:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55400:	mov word [bp + 31], @6740$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 6 219

strtoul_test$468:	; Parameter 25 text 8
x55405:	mov [bp + 33], bp	; 3: 137 110 33
x55408:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x55412:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55416:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x55420:	mov ax, [bp + 19]	; 3: 139 70 19
x55423:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x55426:	mov ax, [bp + 6]	; 3: 139 70 6
x55429:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x55432:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 155 216
x55437:	mov [bp + 27], bp	; 3: 137 110 27
x55440:	add bp, 25	; 3: 131 197 25
x55443:	mov di, bp	; 2: 137 239
x55445:	add di, 10	; 3: 131 199 10
x55448:	jmp printf	; 3: 233 105 52

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x55451:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x55456:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x55460:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x55464:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x55468:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x55472:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x55476:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x55480:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x55484:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x55488:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x55492:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x55496:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x55500:	mov [bp + 27], bp	; 3: 137 110 27
x55503:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary2933 pointer
x55507:	mov si, bp	; 2: 137 238
x55509:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary2933 8
x55512:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x55515:	mov ax, [bp + 6]	; 3: 139 70 6
x55518:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x55521:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 239 216
x55526:	mov [bp + 23], bp	; 3: 137 110 23
x55529:	add bp, 21	; 3: 131 197 21
x55532:	jmp strtoul	; 3: 233 89 2

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary2934

strtoul_test$494:	; Assign value £temporary2934
x55535:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55539:	mov word [bp + 31], @6784$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 28 219

strtoul_test$497:	; Parameter 25 text 8
x55544:	mov [bp + 33], bp	; 3: 137 110 33
x55547:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x55551:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55555:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x55559:	mov ax, [bp + 19]	; 3: 139 70 19
x55562:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x55565:	mov ax, [bp + 6]	; 3: 139 70 6
x55568:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x55571:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 38 217
x55576:	mov [bp + 27], bp	; 3: 137 110 27
x55579:	add bp, 25	; 3: 131 197 25
x55582:	mov di, bp	; 2: 137 239
x55584:	add di, 10	; 3: 131 199 10
x55587:	jmp printf	; 3: 233 222 51

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x55590:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x55595:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x55599:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x55603:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x55607:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x55611:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x55615:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x55619:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x55623:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x55627:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x55631:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x55635:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x55639:	mov [bp + 27], bp	; 3: 137 110 27
x55642:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary2947 pointer
x55646:	mov si, bp	; 2: 137 238
x55648:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary2947 8
x55651:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x55654:	mov ax, [bp + 6]	; 3: 139 70 6
x55657:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x55660:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 122 217
x55665:	mov [bp + 23], bp	; 3: 137 110 23
x55668:	add bp, 21	; 3: 131 197 21
x55671:	jmp strtoul	; 3: 233 206 1

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary2948

strtoul_test$523:	; Assign value £temporary2948
x55674:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55678:	mov word [bp + 31], @6828$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 50 219

strtoul_test$526:	; Parameter 25 text 8
x55683:	mov [bp + 33], bp	; 3: 137 110 33
x55686:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x55690:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55694:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x55698:	mov ax, [bp + 19]	; 3: 139 70 19
x55701:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x55704:	mov ax, [bp + 6]	; 3: 139 70 6
x55707:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x55710:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 177 217
x55715:	mov [bp + 27], bp	; 3: 137 110 27
x55718:	add bp, 25	; 3: 131 197 25
x55721:	mov di, bp	; 2: 137 239
x55723:	add di, 10	; 3: 131 199 10
x55726:	jmp printf	; 3: 233 83 51

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x55729:	mov ax, [bp]	; 3: 139 70 0
x55732:	mov di, [bp + 4]	; 3: 139 126 4
x55735:	mov bp, [bp + 2]	; 3: 139 110 2
x55738:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

@6050$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55740:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6097$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55762:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6147$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55784:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6197$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55806:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6241$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55828:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6288$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55850:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6338$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55872:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6388$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55894:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6432$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55916:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6476$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55938:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6520$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55960:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6564$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55982:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6608$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56004:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6652$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56026:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6696$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56048:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6740$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56070:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6784$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56092:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6828$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56114:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtoul:	; Assign g_inStatus 1
x56136:	mov word [g_inStatus], 1	; 6: 199 6 72 96 1 0

strtoul$1:	; Assign g_inDevice s
x56142:	mov ax, [bp + 6]	; 3: 139 70 6
x56145:	mov [g_inDevice], ax	; 3: 163 74 96

strtoul$2:	; Assign g_inChars 0
x56148:	mov word [g_inChars], 0	; 6: 199 6 109 101 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x56154:	mov ax, [bp + 10]	; 3: 139 70 10
x56157:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x56160:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 110 219
x56165:	mov [bp + 14], bp	; 3: 137 110 14
x56168:	add bp, 12	; 3: 131 197 12
x56171:	jmp scanUnsignedLongInt	; 3: 233 46 145

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2244

strtoul$8:	; Assign unsignedLongValue £temporary2244
x56174:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x56178:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x56182:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2246 -> endp endp 0
x56184:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2246 -> endp s g_inChars
x56187:	mov ax, [bp + 6]	; 3: 139 70 6
x56190:	add ax, [g_inChars]	; 4: 3 6 109 101
x56194:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x56196:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x56200:	mov ax, [bp]	; 3: 139 70 0
x56203:	mov di, [bp + 4]	; 3: 139 126 4
x56206:	mov bp, [bp + 2]	; 3: 139 110 2
x56209:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x56211:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x56215:	mov word [bp + 6], character_test$3	; 5: 199 70 6 165 219
x56220:	mov [bp + 8], bp	; 3: 137 110 8
x56223:	add bp, 6	; 3: 131 197 6
x56226:	nop	; 1: 144
x56227:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x56229:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x56233:	mov word [bp + 6], character_test$7	; 5: 199 70 6 183 219
x56238:	mov [bp + 8], bp	; 3: 137 110 8
x56241:	add bp, 6	; 3: 131 197 6
x56244:	nop	; 1: 144
x56245:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x56247:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x56251:	mov word [bp + 6], character_test$11	; 5: 199 70 6 201 219
x56256:	mov [bp + 8], bp	; 3: 137 110 8
x56259:	add bp, 6	; 3: 131 197 6
x56262:	nop	; 1: 144
x56263:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x56265:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x56269:	mov word [bp + 6], character_test$15	; 5: 199 70 6 219 219
x56274:	mov [bp + 8], bp	; 3: 137 110 8
x56277:	add bp, 6	; 3: 131 197 6
x56280:	nop	; 1: 144
x56281:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x56283:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x56287:	mov word [bp + 6], character_test$19	; 5: 199 70 6 237 219
x56292:	mov [bp + 8], bp	; 3: 137 110 8
x56295:	add bp, 6	; 3: 131 197 6
x56298:	nop	; 1: 144
x56299:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x56301:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x56305:	mov word [bp + 6], character_test$23	; 5: 199 70 6 255 219
x56310:	mov [bp + 8], bp	; 3: 137 110 8
x56313:	add bp, 6	; 3: 131 197 6
x56316:	nop	; 1: 144
x56317:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x56319:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x56323:	mov word [bp + 6], character_test$27	; 5: 199 70 6 17 220
x56328:	mov [bp + 8], bp	; 3: 137 110 8
x56331:	add bp, 6	; 3: 131 197 6
x56334:	nop	; 1: 144
x56335:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x56337:	mov ax, [bp]	; 3: 139 70 0
x56340:	mov di, [bp + 4]	; 3: 139 126 4
x56343:	mov bp, [bp + 2]	; 3: 139 110 2
x56346:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x56348:	mov word [bp + 13], @9038$string_ascii2025i0A#	; 5: 199 70 13 218 224

character_testX$2:	; IntegralToIntegral £temporary4061 c
x56353:	mov al, [bp + 6]	; 3: 138 70 6
x56356:	and ax, 255	; 3: 37 255 0
x56359:	cmp al, 0	; 2: 60 0
x56361:	jge character_testX$3	; 2: 125 4
x56363:	neg al	; 2: 246 216
x56365:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4061 8
x56367:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x56370:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 69 220
x56375:	mov [bp + 9], bp	; 3: 137 110 9
x56378:	add bp, 7	; 3: 131 197 7
x56381:	mov di, bp	; 2: 137 239
x56383:	add di, 2	; 3: 131 199 2
x56386:	jmp printf	; 3: 233 191 48

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x56389:	mov word [bp + 13], @9041$string_islower282725c2729203D2025s0A#	; 5: 199 70 13 228 224

character_testX$8:	; IntegralToIntegral £temporary4063 c
x56394:	mov al, [bp + 6]	; 3: 138 70 6
x56397:	and ax, 255	; 3: 37 255 0
x56400:	cmp al, 0	; 2: 60 0
x56402:	jge character_testX$9	; 2: 125 4
x56404:	neg al	; 2: 246 216
x56406:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4063 8
x56408:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4064 c
x56411:	mov al, [bp + 6]	; 3: 138 70 6
x56414:	and ax, 255	; 3: 37 255 0
x56417:	cmp al, 0	; 2: 60 0
x56419:	jge character_testX$12	; 2: 125 4
x56421:	neg al	; 2: 246 216
x56423:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4064 16
x56425:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x56428:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 122 220
x56433:	mov [bp + 19], bp	; 3: 137 110 19
x56436:	add bp, 17	; 3: 131 197 17
x56439:	jmp islower	; 3: 233 185 142

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4065

character_testX$16:	; Equal 19 £temporary4065 0
x56442:	cmp bx, 0	; 3: 131 251 0
x56445:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4070 string_Yes#
x56447:	mov ax, @9048$string_Yes#	; 3: 184 248 224

character_testX$18:	; Goto 20
x56450:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4070 string_No#
x56452:	mov ax, @9049$string_No#	; 3: 184 252 224

character_testX$20:	; Parameter 7 £temporary4070 10
x56455:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x56458:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 157 220
x56463:	mov [bp + 9], bp	; 3: 137 110 9
x56466:	add bp, 7	; 3: 131 197 7
x56469:	mov di, bp	; 2: 137 239
x56471:	add di, 4	; 3: 131 199 4
x56474:	jmp printf	; 3: 233 103 48

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x56477:	mov word [bp + 13], @9057$string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 255 224

character_testX$25:	; IntegralToIntegral £temporary4072 c
x56482:	mov al, [bp + 6]	; 3: 138 70 6
x56485:	and ax, 255	; 3: 37 255 0
x56488:	cmp al, 0	; 2: 60 0
x56490:	jge character_testX$26	; 2: 125 4
x56492:	neg al	; 2: 246 216
x56494:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4072 8
x56496:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4073 c
x56499:	mov al, [bp + 6]	; 3: 138 70 6
x56502:	and ax, 255	; 3: 37 255 0
x56505:	cmp al, 0	; 2: 60 0
x56507:	jge character_testX$29	; 2: 125 4
x56509:	neg al	; 2: 246 216
x56511:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4073 16
x56513:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x56516:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 210 220
x56521:	mov [bp + 19], bp	; 3: 137 110 19
x56524:	add bp, 17	; 3: 131 197 17
x56527:	jmp isupper	; 3: 233 58 65

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4074

character_testX$33:	; Equal 36 £temporary4074 0
x56530:	cmp bx, 0	; 3: 131 251 0
x56533:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4079 string_Yes#
x56535:	mov ax, @9064$string_Yes#	; 3: 184 19 225

character_testX$35:	; Goto 37
x56538:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4079 string_No#
x56540:	mov ax, @9065$string_No#	; 3: 184 23 225

character_testX$37:	; Parameter 7 £temporary4079 10
x56543:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x56546:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 245 220
x56551:	mov [bp + 9], bp	; 3: 137 110 9
x56554:	add bp, 7	; 3: 131 197 7
x56557:	mov di, bp	; 2: 137 239
x56559:	add di, 4	; 3: 131 199 4
x56562:	jmp printf	; 3: 233 15 48

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x56565:	mov word [bp + 13], @9073$string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 26 225

character_testX$42:	; IntegralToIntegral £temporary4081 c
x56570:	mov al, [bp + 6]	; 3: 138 70 6
x56573:	and ax, 255	; 3: 37 255 0
x56576:	cmp al, 0	; 2: 60 0
x56578:	jge character_testX$43	; 2: 125 4
x56580:	neg al	; 2: 246 216
x56582:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4081 8
x56584:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4082 c
x56587:	mov al, [bp + 6]	; 3: 138 70 6
x56590:	and ax, 255	; 3: 37 255 0
x56593:	cmp al, 0	; 2: 60 0
x56595:	jge character_testX$46	; 2: 125 4
x56597:	neg al	; 2: 246 216
x56599:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4082 16
x56601:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x56604:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 42 221
x56609:	mov [bp + 19], bp	; 3: 137 110 19
x56612:	add bp, 17	; 3: 131 197 17
x56615:	jmp isalpha	; 3: 233 17 5

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4083

character_testX$50:	; Equal 53 £temporary4083 0
x56618:	cmp bx, 0	; 3: 131 251 0
x56621:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4088 string_Yes#
x56623:	mov ax, @9080$string_Yes#	; 3: 184 46 225

character_testX$52:	; Goto 54
x56626:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4088 string_No#
x56628:	mov ax, @9081$string_No#	; 3: 184 50 225

character_testX$54:	; Parameter 7 £temporary4088 10
x56631:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x56634:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 77 221
x56639:	mov [bp + 9], bp	; 3: 137 110 9
x56642:	add bp, 7	; 3: 131 197 7
x56645:	mov di, bp	; 2: 137 239
x56647:	add di, 4	; 3: 131 199 4
x56650:	jmp printf	; 3: 233 183 47

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x56653:	mov word [bp + 13], @9089$string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 53 225

character_testX$59:	; IntegralToIntegral £temporary4090 c
x56658:	mov al, [bp + 6]	; 3: 138 70 6
x56661:	and ax, 255	; 3: 37 255 0
x56664:	cmp al, 0	; 2: 60 0
x56666:	jge character_testX$60	; 2: 125 4
x56668:	neg al	; 2: 246 216
x56670:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4090 8
x56672:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4091 c
x56675:	mov al, [bp + 6]	; 3: 138 70 6
x56678:	and ax, 255	; 3: 37 255 0
x56681:	cmp al, 0	; 2: 60 0
x56683:	jge character_testX$63	; 2: 125 4
x56685:	neg al	; 2: 246 216
x56687:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4091 16
x56689:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x56692:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 130 221
x56697:	mov [bp + 19], bp	; 3: 137 110 19
x56700:	add bp, 17	; 3: 131 197 17
x56703:	jmp isdigit	; 3: 233 234 77

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4092

character_testX$67:	; Equal 70 £temporary4092 0
x56706:	cmp bx, 0	; 3: 131 251 0
x56709:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4097 string_Yes#
x56711:	mov ax, @9096$string_Yes#	; 3: 184 73 225

character_testX$69:	; Goto 71
x56714:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4097 string_No#
x56716:	mov ax, @9097$string_No#	; 3: 184 77 225

character_testX$71:	; Parameter 7 £temporary4097 10
x56719:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x56722:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 165 221
x56727:	mov [bp + 9], bp	; 3: 137 110 9
x56730:	add bp, 7	; 3: 131 197 7
x56733:	mov di, bp	; 2: 137 239
x56735:	add di, 4	; 3: 131 199 4
x56738:	jmp printf	; 3: 233 95 47

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x56741:	mov word [bp + 13], @9105$string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 80 225

character_testX$76:	; IntegralToIntegral £temporary4099 c
x56746:	mov al, [bp + 6]	; 3: 138 70 6
x56749:	and ax, 255	; 3: 37 255 0
x56752:	cmp al, 0	; 2: 60 0
x56754:	jge character_testX$77	; 2: 125 4
x56756:	neg al	; 2: 246 216
x56758:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4099 8
x56760:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4100 c
x56763:	mov al, [bp + 6]	; 3: 138 70 6
x56766:	and ax, 255	; 3: 37 255 0
x56769:	cmp al, 0	; 2: 60 0
x56771:	jge character_testX$80	; 2: 125 4
x56773:	neg al	; 2: 246 216
x56775:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4100 16
x56777:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x56780:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 218 221
x56785:	mov [bp + 19], bp	; 3: 137 110 19
x56788:	add bp, 17	; 3: 131 197 17
x56791:	jmp isalnum	; 3: 233 166 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4101

character_testX$84:	; Equal 87 £temporary4101 0
x56794:	cmp bx, 0	; 3: 131 251 0
x56797:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4106 string_Yes#
x56799:	mov ax, @9112$string_Yes#	; 3: 184 100 225

character_testX$86:	; Goto 88
x56802:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4106 string_No#
x56804:	mov ax, @9113$string_No#	; 3: 184 104 225

character_testX$88:	; Parameter 7 £temporary4106 10
x56807:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x56810:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 253 221
x56815:	mov [bp + 9], bp	; 3: 137 110 9
x56818:	add bp, 7	; 3: 131 197 7
x56821:	mov di, bp	; 2: 137 239
x56823:	add di, 4	; 3: 131 199 4
x56826:	jmp printf	; 3: 233 7 47

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x56829:	mov word [bp + 13], @9121$string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 107 225

character_testX$93:	; IntegralToIntegral £temporary4108 c
x56834:	mov al, [bp + 6]	; 3: 138 70 6
x56837:	and ax, 255	; 3: 37 255 0
x56840:	cmp al, 0	; 2: 60 0
x56842:	jge character_testX$94	; 2: 125 4
x56844:	neg al	; 2: 246 216
x56846:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4108 8
x56848:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4109 c
x56851:	mov al, [bp + 6]	; 3: 138 70 6
x56854:	and ax, 255	; 3: 37 255 0
x56857:	cmp al, 0	; 2: 60 0
x56859:	jge character_testX$97	; 2: 125 4
x56861:	neg al	; 2: 246 216
x56863:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4109 16
x56865:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x56868:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 50 222
x56873:	mov [bp + 19], bp	; 3: 137 110 19
x56876:	add bp, 17	; 3: 131 197 17
x56879:	jmp isxdigit	; 3: 233 147 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4110

character_testX$101:	; Equal 104 £temporary4110 0
x56882:	cmp bx, 0	; 3: 131 251 0
x56885:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4115 string_Yes#
x56887:	mov ax, @9128$string_Yes#	; 3: 184 128 225

character_testX$103:	; Goto 105
x56890:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4115 string_No#
x56892:	mov ax, @9129$string_No#	; 3: 184 132 225

character_testX$105:	; Parameter 7 £temporary4115 10
x56895:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x56898:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 85 222
x56903:	mov [bp + 9], bp	; 3: 137 110 9
x56906:	add bp, 7	; 3: 131 197 7
x56909:	mov di, bp	; 2: 137 239
x56911:	add di, 4	; 3: 131 199 4
x56914:	jmp printf	; 3: 233 175 46

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x56917:	mov word [bp + 13], @9137$string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 135 225

character_testX$110:	; IntegralToIntegral £temporary4117 c
x56922:	mov al, [bp + 6]	; 3: 138 70 6
x56925:	and ax, 255	; 3: 37 255 0
x56928:	cmp al, 0	; 2: 60 0
x56930:	jge character_testX$111	; 2: 125 4
x56932:	neg al	; 2: 246 216
x56934:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4117 8
x56936:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4118 c
x56939:	mov al, [bp + 6]	; 3: 138 70 6
x56942:	and ax, 255	; 3: 37 255 0
x56945:	cmp al, 0	; 2: 60 0
x56947:	jge character_testX$114	; 2: 125 4
x56949:	neg al	; 2: 246 216
x56951:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4118 16
x56953:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x56956:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 138 222
x56961:	mov [bp + 19], bp	; 3: 137 110 19
x56964:	add bp, 17	; 3: 131 197 17
x56967:	jmp isgraph	; 3: 233 127 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4119

character_testX$118:	; Equal 121 £temporary4119 0
x56970:	cmp bx, 0	; 3: 131 251 0
x56973:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4124 string_Yes#
x56975:	mov ax, @9144$string_Yes#	; 3: 184 155 225

character_testX$120:	; Goto 122
x56978:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4124 string_No#
x56980:	mov ax, @9145$string_No#	; 3: 184 159 225

character_testX$122:	; Parameter 7 £temporary4124 10
x56983:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x56986:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 173 222
x56991:	mov [bp + 9], bp	; 3: 137 110 9
x56994:	add bp, 7	; 3: 131 197 7
x56997:	mov di, bp	; 2: 137 239
x56999:	add di, 4	; 3: 131 199 4
x57002:	jmp printf	; 3: 233 87 46

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x57005:	mov word [bp + 13], @9153$string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 162 225

character_testX$127:	; IntegralToIntegral £temporary4126 c
x57010:	mov al, [bp + 6]	; 3: 138 70 6
x57013:	and ax, 255	; 3: 37 255 0
x57016:	cmp al, 0	; 2: 60 0
x57018:	jge character_testX$128	; 2: 125 4
x57020:	neg al	; 2: 246 216
x57022:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4126 8
x57024:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4127 c
x57027:	mov al, [bp + 6]	; 3: 138 70 6
x57030:	and ax, 255	; 3: 37 255 0
x57033:	cmp al, 0	; 2: 60 0
x57035:	jge character_testX$131	; 2: 125 4
x57037:	neg al	; 2: 246 216
x57039:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4127 16
x57041:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x57044:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 226 222
x57049:	mov [bp + 19], bp	; 3: 137 110 19
x57052:	add bp, 17	; 3: 131 197 17
x57055:	jmp isprint	; 3: 233 70 4

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4128

character_testX$135:	; Equal 138 £temporary4128 0
x57058:	cmp bx, 0	; 3: 131 251 0
x57061:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4133 string_Yes#
x57063:	mov ax, @9160$string_Yes#	; 3: 184 182 225

character_testX$137:	; Goto 139
x57066:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4133 string_No#
x57068:	mov ax, @9161$string_No#	; 3: 184 186 225

character_testX$139:	; Parameter 7 £temporary4133 10
x57071:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x57074:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 5 223
x57079:	mov [bp + 9], bp	; 3: 137 110 9
x57082:	add bp, 7	; 3: 131 197 7
x57085:	mov di, bp	; 2: 137 239
x57087:	add di, 4	; 3: 131 199 4
x57090:	jmp printf	; 3: 233 255 45

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x57093:	mov word [bp + 13], @9169$string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 189 225

character_testX$144:	; IntegralToIntegral £temporary4135 c
x57098:	mov al, [bp + 6]	; 3: 138 70 6
x57101:	and ax, 255	; 3: 37 255 0
x57104:	cmp al, 0	; 2: 60 0
x57106:	jge character_testX$145	; 2: 125 4
x57108:	neg al	; 2: 246 216
x57110:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4135 8
x57112:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4136 c
x57115:	mov al, [bp + 6]	; 3: 138 70 6
x57118:	and ax, 255	; 3: 37 255 0
x57121:	cmp al, 0	; 2: 60 0
x57123:	jge character_testX$148	; 2: 125 4
x57125:	neg al	; 2: 246 216
x57127:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4136 16
x57129:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x57132:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 58 223
x57137:	mov [bp + 19], bp	; 3: 137 110 19
x57140:	add bp, 17	; 3: 131 197 17
x57143:	jmp ispunct	; 3: 233 32 4

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4137

character_testX$152:	; Equal 155 £temporary4137 0
x57146:	cmp bx, 0	; 3: 131 251 0
x57149:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4142 string_Yes#
x57151:	mov ax, @9176$string_Yes#	; 3: 184 209 225

character_testX$154:	; Goto 156
x57154:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4142 string_No#
x57156:	mov ax, @9177$string_No#	; 3: 184 213 225

character_testX$156:	; Parameter 7 £temporary4142 10
x57159:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x57162:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 93 223
x57167:	mov [bp + 9], bp	; 3: 137 110 9
x57170:	add bp, 7	; 3: 131 197 7
x57173:	mov di, bp	; 2: 137 239
x57175:	add di, 4	; 3: 131 199 4
x57178:	jmp printf	; 3: 233 167 45

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x57181:	mov word [bp + 13], @9185$string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 216 225

character_testX$161:	; IntegralToIntegral £temporary4144 c
x57186:	mov al, [bp + 6]	; 3: 138 70 6
x57189:	and ax, 255	; 3: 37 255 0
x57192:	cmp al, 0	; 2: 60 0
x57194:	jge character_testX$162	; 2: 125 4
x57196:	neg al	; 2: 246 216
x57198:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4144 8
x57200:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4145 c
x57203:	mov al, [bp + 6]	; 3: 138 70 6
x57206:	and ax, 255	; 3: 37 255 0
x57209:	cmp al, 0	; 2: 60 0
x57211:	jge character_testX$165	; 2: 125 4
x57213:	neg al	; 2: 246 216
x57215:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4145 16
x57217:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x57220:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 146 223
x57225:	mov [bp + 19], bp	; 3: 137 110 19
x57228:	add bp, 17	; 3: 131 197 17
x57231:	jmp iscntrl	; 3: 233 13 4

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4146

character_testX$169:	; Equal 172 £temporary4146 0
x57234:	cmp bx, 0	; 3: 131 251 0
x57237:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4151 string_Yes#
x57239:	mov ax, @9192$string_Yes#	; 3: 184 236 225

character_testX$171:	; Goto 173
x57242:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4151 string_No#
x57244:	mov ax, @9193$string_No#	; 3: 184 240 225

character_testX$173:	; Parameter 7 £temporary4151 10
x57247:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x57250:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 181 223
x57255:	mov [bp + 9], bp	; 3: 137 110 9
x57258:	add bp, 7	; 3: 131 197 7
x57261:	mov di, bp	; 2: 137 239
x57263:	add di, 4	; 3: 131 199 4
x57266:	jmp printf	; 3: 233 79 45

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x57269:	mov word [bp + 13], @9201$string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 243 225

character_testX$178:	; IntegralToIntegral £temporary4153 c
x57274:	mov al, [bp + 6]	; 3: 138 70 6
x57277:	and ax, 255	; 3: 37 255 0
x57280:	cmp al, 0	; 2: 60 0
x57282:	jge character_testX$179	; 2: 125 4
x57284:	neg al	; 2: 246 216
x57286:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4153 8
x57288:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4154 c
x57291:	mov al, [bp + 6]	; 3: 138 70 6
x57294:	and ax, 255	; 3: 37 255 0
x57297:	cmp al, 0	; 2: 60 0
x57299:	jge character_testX$182	; 2: 125 4
x57301:	neg al	; 2: 246 216
x57303:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4154 16
x57305:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x57308:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 234 223
x57313:	mov [bp + 19], bp	; 3: 137 110 19
x57316:	add bp, 17	; 3: 131 197 17
x57319:	jmp isspace	; 3: 233 65 136

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4155

character_testX$186:	; Equal 189 £temporary4155 0
x57322:	cmp bx, 0	; 3: 131 251 0
x57325:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4160 string_Yes#
x57327:	mov ax, @9208$string_Yes#	; 3: 184 7 226

character_testX$188:	; Goto 190
x57330:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4160 string_No#
x57332:	mov ax, @9209$string_No#	; 3: 184 11 226

character_testX$190:	; Parameter 7 £temporary4160 10
x57335:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x57338:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 13 224
x57343:	mov [bp + 9], bp	; 3: 137 110 9
x57346:	add bp, 7	; 3: 131 197 7
x57349:	mov di, bp	; 2: 137 239
x57351:	add di, 4	; 3: 131 199 4
x57354:	jmp printf	; 3: 233 247 44

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x57357:	mov word [bp + 13], @9217$string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 14 226

character_testX$195:	; IntegralToIntegral £temporary4162 c
x57362:	mov al, [bp + 6]	; 3: 138 70 6
x57365:	and ax, 255	; 3: 37 255 0
x57368:	cmp al, 0	; 2: 60 0
x57370:	jge character_testX$196	; 2: 125 4
x57372:	neg al	; 2: 246 216
x57374:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4162 8
x57376:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4163 c
x57379:	mov al, [bp + 6]	; 3: 138 70 6
x57382:	and ax, 255	; 3: 37 255 0
x57385:	cmp al, 0	; 2: 60 0
x57387:	jge character_testX$199	; 2: 125 4
x57389:	neg al	; 2: 246 216
x57391:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4163 16
x57393:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x57396:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 66 224
x57401:	mov [bp + 19], bp	; 3: 137 110 19
x57404:	add bp, 17	; 3: 131 197 17
x57407:	jmp tolower	; 3: 233 220 68

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4164

character_testX$203:	; IntegralToIntegral £temporary4165 £temporary4164
x57410:	cmp bx, 0	; 3: 131 251 0
x57413:	jge character_testX$204	; 2: 125 4
x57415:	neg bx	; 2: 247 219
x57417:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4166 £temporary4165
x57419:	and bx, 255	; 4: 129 227 255 0
x57423:	cmp bl, 0	; 3: 128 251 0
x57426:	jge character_testX$205	; 2: 125 4
x57428:	neg bl	; 2: 246 219
x57430:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4166 10
x57432:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x57435:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 110 224
x57440:	mov [bp + 9], bp	; 3: 137 110 9
x57443:	add bp, 7	; 3: 131 197 7
x57446:	mov di, bp	; 2: 137 239
x57448:	add di, 4	; 3: 131 199 4
x57451:	jmp printf	; 3: 233 150 44

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x57454:	mov word [bp + 13], @9224$string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 36 226

character_testX$210:	; IntegralToIntegral £temporary4168 c
x57459:	mov al, [bp + 6]	; 3: 138 70 6
x57462:	and ax, 255	; 3: 37 255 0
x57465:	cmp al, 0	; 2: 60 0
x57467:	jge character_testX$211	; 2: 125 4
x57469:	neg al	; 2: 246 216
x57471:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4168 8
x57473:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4169 c
x57476:	mov al, [bp + 6]	; 3: 138 70 6
x57479:	and ax, 255	; 3: 37 255 0
x57482:	cmp al, 0	; 2: 60 0
x57484:	jge character_testX$214	; 2: 125 4
x57486:	neg al	; 2: 246 216
x57488:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4169 16
x57490:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x57493:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 163 224
x57498:	mov [bp + 19], bp	; 3: 137 110 19
x57501:	add bp, 17	; 3: 131 197 17
x57504:	jmp toupper	; 3: 233 40 3

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4170

character_testX$218:	; IntegralToIntegral £temporary4171 £temporary4170
x57507:	cmp bx, 0	; 3: 131 251 0
x57510:	jge character_testX$219	; 2: 125 4
x57512:	neg bx	; 2: 247 219
x57514:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4172 £temporary4171
x57516:	and bx, 255	; 4: 129 227 255 0
x57520:	cmp bl, 0	; 3: 128 251 0
x57523:	jge character_testX$220	; 2: 125 4
x57525:	neg bl	; 2: 246 219
x57527:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4172 10
x57529:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x57532:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 207 224
x57537:	mov [bp + 9], bp	; 3: 137 110 9
x57540:	add bp, 7	; 3: 131 197 7
x57543:	mov di, bp	; 2: 137 239
x57545:	add di, 4	; 3: 131 199 4
x57548:	jmp printf	; 3: 233 53 44

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x57551:	mov ax, [bp]	; 3: 139 70 0
x57554:	mov di, [bp + 4]	; 3: 139 126 4
x57557:	mov bp, [bp + 2]	; 3: 139 110 2
x57560:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

@9038$string_ascii2025i0A#:
x57562:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

@9041$string_islower282725c2729203D2025s0A#:
x57572:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9048$string_Yes#:
x57592:	db "Yes", 0	; 4: 89 101 115 0

@9049$string_No#:
x57596:	db "No", 0	; 3: 78 111 0

@9057$string_isupper282725c2729203D2025s0A#:
x57599:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9064$string_Yes#:
x57619:	db "Yes", 0	; 4: 89 101 115 0

@9065$string_No#:
x57623:	db "No", 0	; 3: 78 111 0

@9073$string_isalpha282725c2729203D2025s0A#:
x57626:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

@9080$string_Yes#:
x57646:	db "Yes", 0	; 4: 89 101 115 0

@9081$string_No#:
x57650:	db "No", 0	; 3: 78 111 0

@9089$string_isdigit282725c2729203D2025s0A#:
x57653:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9096$string_Yes#:
x57673:	db "Yes", 0	; 4: 89 101 115 0

@9097$string_No#:
x57677:	db "No", 0	; 3: 78 111 0

@9105$string_isalnum282725c2729203D2025s0A#:
x57680:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

@9112$string_Yes#:
x57700:	db "Yes", 0	; 4: 89 101 115 0

@9113$string_No#:
x57704:	db "No", 0	; 3: 78 111 0

@9121$string_isxdigit282725c2729203D2025s0A#:
x57707:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9128$string_Yes#:
x57728:	db "Yes", 0	; 4: 89 101 115 0

@9129$string_No#:
x57732:	db "No", 0	; 3: 78 111 0

@9137$string_isgraph282725c2729203D2025s0A#:
x57735:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

@9144$string_Yes#:
x57755:	db "Yes", 0	; 4: 89 101 115 0

@9145$string_No#:
x57759:	db "No", 0	; 3: 78 111 0

@9153$string_isprint282725c2729203D2025s0A#:
x57762:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9160$string_Yes#:
x57782:	db "Yes", 0	; 4: 89 101 115 0

@9161$string_No#:
x57786:	db "No", 0	; 3: 78 111 0

@9169$string_ispunct282725c2729203D2025s0A#:
x57789:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9176$string_Yes#:
x57809:	db "Yes", 0	; 4: 89 101 115 0

@9177$string_No#:
x57813:	db "No", 0	; 3: 78 111 0

@9185$string_iscntrl282725c2729203D2025s0A#:
x57816:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

@9192$string_Yes#:
x57836:	db "Yes", 0	; 4: 89 101 115 0

@9193$string_No#:
x57840:	db "No", 0	; 3: 78 111 0

@9201$string_isspace282725c2729203D2025s0A#:
x57843:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

@9208$string_Yes#:
x57863:	db "Yes", 0	; 4: 89 101 115 0

@9209$string_No#:
x57867:	db "No", 0	; 3: 78 111 0

@9217$string_tolower282725c2729203D202725c270A#:
x57870:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

@9224$string_toupper282725c2729203D202725c270A0A#:
x57892:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x57915:	mov ax, [bp + 6]	; 3: 139 70 6
x57918:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x57921:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 79 226
x57926:	mov [bp + 10], bp	; 3: 137 110 10
x57929:	add bp, 8	; 3: 131 197 8
x57932:	jmp islower	; 3: 233 228 136

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary182

isalpha$5:	; NotEqual 12 £temporary182 0
x57935:	cmp bx, 0	; 3: 131 251 0
x57938:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x57940:	mov ax, [bp + 6]	; 3: 139 70 6
x57943:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x57946:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 104 226
x57951:	mov [bp + 10], bp	; 3: 137 110 10
x57954:	add bp, 8	; 3: 131 197 8
x57957:	jmp isupper	; 3: 233 164 59

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary183

isalpha$11:	; Equal 14 £temporary183 0
x57960:	cmp bx, 0	; 3: 131 251 0
x57963:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary187 1
x57965:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x57968:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary187 0
x57970:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary187

isalpha$16:	; Return £temporary187
x57973:	mov ax, [bp]	; 3: 139 70 0
x57976:	mov di, [bp + 4]	; 3: 139 126 4
x57979:	mov bp, [bp + 2]	; 3: 139 110 2
x57982:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x57984:	mov ax, [bp + 6]	; 3: 139 70 6
x57987:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x57990:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 148 226
x57995:	mov [bp + 10], bp	; 3: 137 110 10
x57998:	add bp, 8	; 3: 131 197 8
x58001:	nop	; 1: 144
x58002:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary194

isalnum$5:	; NotEqual 12 £temporary194 0
x58004:	cmp bx, 0	; 3: 131 251 0
x58007:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x58009:	mov ax, [bp + 6]	; 3: 139 70 6
x58012:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x58015:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 173 226
x58020:	mov [bp + 10], bp	; 3: 137 110 10
x58023:	add bp, 8	; 3: 131 197 8
x58026:	jmp isdigit	; 3: 233 191 72

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary195

isalnum$11:	; Equal 14 £temporary195 0
x58029:	cmp bx, 0	; 3: 131 251 0
x58032:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary199 1
x58034:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x58037:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary199 0
x58039:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary199

isalnum$16:	; Return £temporary199
x58042:	mov ax, [bp]	; 3: 139 70 0
x58045:	mov di, [bp + 4]	; 3: 139 126 4
x58048:	mov bp, [bp + 2]	; 3: 139 110 2
x58051:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x58053:	mov ax, [bp + 6]	; 3: 139 70 6
x58056:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x58059:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 217 226
x58064:	mov [bp + 10], bp	; 3: 137 110 10
x58067:	add bp, 8	; 3: 131 197 8
x58070:	jmp isdigit	; 3: 233 147 72

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary202

isxdigit$5:	; NotEqual 10 £temporary202 0
x58073:	cmp bx, 0	; 3: 131 251 0
x58076:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x58078:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x58082:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x58084:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x58088:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x58090:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x58094:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x58096:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x58100:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary212 1
x58102:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x58105:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary212 0
x58107:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary212

isxdigit$14:	; Return £temporary212
x58110:	mov ax, [bp]	; 3: 139 70 0
x58113:	mov di, [bp + 4]	; 3: 139 126 4
x58116:	mov bp, [bp + 2]	; 3: 139 110 2
x58119:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x58121:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58125:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x58127:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x58131:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary217 1
x58133:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x58136:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary217 0
x58138:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary217

isgraph$6:	; Return £temporary217
x58141:	mov ax, [bp]	; 3: 139 70 0
x58144:	mov di, [bp + 4]	; 3: 139 126 4
x58147:	mov bp, [bp + 2]	; 3: 139 110 2
x58150:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x58152:	mov ax, [bp + 6]	; 3: 139 70 6
x58155:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x58158:	mov word [bp + 8], isprint$3	; 5: 199 70 8 60 227
x58163:	mov [bp + 10], bp	; 3: 137 110 10
x58166:	add bp, 8	; 3: 131 197 8
x58169:	nop	; 1: 144
x58170:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary218

isprint$5:	; Equal 9 £temporary218 0
x58172:	cmp bx, 0	; 3: 131 251 0
x58175:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x58177:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58181:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary222 1
x58183:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x58186:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary222 0
x58188:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary222

isprint$11:	; Return £temporary222
x58191:	mov ax, [bp]	; 3: 139 70 0
x58194:	mov di, [bp + 4]	; 3: 139 126 4
x58197:	mov bp, [bp + 2]	; 3: 139 110 2
x58200:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x58202:	mov ax, [bp + 6]	; 3: 139 70 6
x58205:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x58208:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 110 227
x58213:	mov [bp + 10], bp	; 3: 137 110 10
x58216:	add bp, 8	; 3: 131 197 8
x58219:	nop	; 1: 144
x58220:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary224

ispunct$5:	; Equal 14 £temporary224 0
x58222:	cmp bx, 0	; 3: 131 251 0
x58225:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x58227:	mov ax, [bp + 6]	; 3: 139 70 6
x58230:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x58233:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 135 227
x58238:	mov [bp + 10], bp	; 3: 137 110 10
x58241:	add bp, 8	; 3: 131 197 8
x58244:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary225

ispunct$11:	; NotEqual 14 £temporary225 0
x58247:	cmp bx, 0	; 3: 131 251 0
x58250:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary230 1
x58252:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x58255:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary230 0
x58257:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary230

ispunct$16:	; Return £temporary230
x58260:	mov ax, [bp]	; 3: 139 70 0
x58263:	mov di, [bp + 4]	; 3: 139 126 4
x58266:	mov bp, [bp + 2]	; 3: 139 110 2
x58269:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x58271:	mov ax, [bp + 6]	; 3: 139 70 6
x58274:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x58277:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 179 227
x58282:	mov [bp + 10], bp	; 3: 137 110 10
x58285:	add bp, 8	; 3: 131 197 8
x58288:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary233

iscntrl$5:	; NotEqual 8 £temporary233 0
x58291:	cmp bx, 0	; 3: 131 251 0
x58294:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary236 1
x58296:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x58299:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary236 0
x58301:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary236

iscntrl$10:	; Return £temporary236
x58304:	mov ax, [bp]	; 3: 139 70 0
x58307:	mov di, [bp + 4]	; 3: 139 126 4
x58310:	mov bp, [bp + 2]	; 3: 139 110 2
x58313:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x58315:	mov ax, [bp + 6]	; 3: 139 70 6
x58318:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x58321:	mov word [bp + 8], toupper$3	; 5: 199 70 8 223 227
x58326:	mov [bp + 10], bp	; 3: 137 110 10
x58329:	add bp, 8	; 3: 131 197 8
x58332:	jmp islower	; 3: 233 84 135

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary265

toupper$5:	; Equal 31 £temporary265 0
x58335:	cmp bx, 0	; 3: 131 251 0
x58338:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x58340:	mov word [bp + 8], toupper$8	; 5: 199 70 8 242 227
x58345:	mov [bp + 10], bp	; 3: 137 110 10
x58348:	add bp, 8	; 3: 131 197 8
x58351:	jmp localeconv	; 3: 233 133 58

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary266

toupper$10:	; Assign localeConvPtr £temporary266
x58354:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x58357:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x58361:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary268 -> localeConvPtr localeConvPtr 12
x58363:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary268 -> localeConvPtr
x58366:	mov ax, [si + 12]	; 3: 139 68 12
x58369:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary269 -> localeConvPtr localeConvPtr 14
x58372:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary269 -> localeConvPtr
x58375:	mov ax, [si + 14]	; 3: 139 68 14
x58378:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x58381:	mov ax, [bp + 10]	; 3: 139 70 10
x58384:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x58387:	mov ax, [bp + 6]	; 3: 139 70 6
x58390:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x58393:	mov word [bp + 14], toupper$20	; 5: 199 70 14 39 228
x58398:	mov [bp + 16], bp	; 3: 137 110 16
x58401:	add bp, 14	; 3: 131 197 14
x58404:	jmp strchr	; 3: 233 150 61

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary270

toupper$22:	; BinarySubtract index £temporary270 lowerCase
x58407:	sub bx, [bp + 10]	; 3: 43 94 10
x58410:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary273 upperCase index
x58413:	mov si, [bp + 12]	; 3: 139 118 12
x58416:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary272 -> £temporary273 £temporary273 0

toupper$25:	; IntegralToIntegral £temporary274 £temporary272 -> £temporary273
x58419:	mov bl, [si]	; 2: 138 28
x58421:	and bx, 255	; 4: 129 227 255 0
x58425:	cmp bl, 0	; 3: 128 251 0
x58428:	jge toupper$26	; 2: 125 4
x58430:	neg bl	; 2: 246 219
x58432:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary274

toupper$27:	; Return £temporary274
x58434:	mov ax, [bp]	; 3: 139 70 0
x58437:	mov di, [bp + 4]	; 3: 139 126 4
x58440:	mov bp, [bp + 2]	; 3: 139 110 2
x58443:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary275 c 32
x58445:	mov bx, [bp + 6]	; 3: 139 94 6
x58448:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary275

toupper$30:	; Return £temporary275
x58451:	mov ax, [bp]	; 3: 139 70 0
x58454:	mov di, [bp + 4]	; 3: 139 126 4
x58457:	mov bp, [bp + 2]	; 3: 139 110 2
x58460:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x58462:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x58465:	mov ax, [bp]	; 3: 139 70 0
x58468:	mov di, [bp + 4]	; 3: 139 126 4
x58471:	mov bp, [bp + 2]	; 3: 139 110 2
x58474:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x58476:	mov ax, [bp]	; 3: 139 70 0
x58479:	mov di, [bp + 4]	; 3: 139 126 4
x58482:	mov bp, [bp + 2]	; 3: 139 110 2
x58485:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x58487:
