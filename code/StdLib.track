1:	

atoi:	; call header integral zero 0 stack zero 0
3:	

atoi$1:	; parameter s, offset 6
4:		mov a1542, [bp + 6]
5:		mov [bp + 14], a1542
7:	

atoi$2:	; parameter 0, offset 8
8:		mov word [bp + 16], 0
10:	

atoi$3:	; parameter 10, offset 10
11:		mov word [bp + 18], 10
13:	

atoi$4:	; call function noellipse-noellipse strtol
14:		mov word [bp + 8], atoi$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		jmp strtol
19:	

atoi$5:	; post call
21:	

atoi$6:	; £temporary2381 = return_value
26:	

atoi$7:	; £temporary2382 = int_to_int £temporary2381 (Signed_Long_Int -> Signed_Int)
29:		cmp t1544, 0
30:		jge atoi$8
31:		neg t1544
33:		neg t1544
35:	

atoi$8:	; return_value = £temporary2382
37:	

atoi$9:	; return
38:		mov t1545, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1545
43:	

atoi$10:	; function end atoi
1:	

atol:	; call header integral zero 0 stack zero 0
3:	

atol$1:	; parameter s, offset 6
4:		mov a1546, [bp + 6]
5:		mov [bp + 14], a1546
7:	

atol$2:	; parameter 0, offset 8
8:		mov word [bp + 16], 0
10:	

atol$3:	; parameter 10, offset 10
11:		mov word [bp + 18], 10
13:	

atol$4:	; call function noellipse-noellipse strtol
14:		mov word [bp + 8], atol$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		jmp strtol
19:	

atol$5:	; post call
21:	

atol$6:	; £temporary2386 = return_value
26:	

atol$7:	; return_value = £temporary2386
28:	

atol$8:	; return
29:		mov t1549, [bp]
30:		mov di, [bp + 4]
31:		mov bp, [bp + 2]
32:		jmp t1549
34:	

atol$9:	; function end atol
1:	

strtol:	; chars = 0
2:		mov word [bp + 12], 0
4:	

strtol$1:	; value = 0
5:		mov dword [bp + 14], 0
7:	

strtol$2:	; call header integral zero 0 stack zero 0
9:	

strtol$3:	; parameter s, offset 6
10:		mov a1550, [bp + 6]
11:		mov [bp + 24], a1550
13:	

strtol$4:	; parameter string_25li25n#, offset 8
14:		mov word [bp + 26], string_25li25n#
16:	

strtol$5:	; £temporary2390 = &value
17:		mov t1551, bp
18:		add t1551, 14
20:	

strtol$6:	; parameter £temporary2390, offset 10
21:		mov [bp + 28], t1551
23:	

strtol$7:	; £temporary2391 = &chars
24:		mov t1552, bp
25:		add t1552, 12
27:	

strtol$8:	; parameter £temporary2391, offset 12
28:		mov [bp + 30], t1552
30:	

strtol$9:	; call function noellipse-ellipse sscanf, extra 0
31:		mov word [bp + 18], strtol$10
32:		mov [bp + 20], bp
33:		add bp, 18
34:		mov di, bp
35:		add di, 4
36:		jmp sscanf
38:	

strtol$10:	; post call
40:	

strtol$11:	; if endp == 0 goto 14
41:		cmp word [bp + 8], 0
42:		je strtol$14
44:	

strtol$12:	; £temporary2394 -> endp = *endp
45:		mov a1553, [bp + 8]
47:	

strtol$13:	; £temporary2394 -> endp = s + chars
48:		mov a1554, [bp + 6]
49:		add a1554, [bp + 12]
50:		mov [a1553], a1554
52:	

strtol$14:	; return_value = value
53:		mov a1555, [bp + 14]
55:	

strtol$15:	; return
56:		mov t1556, [bp]
57:		mov di, [bp + 4]
58:		mov bp, [bp + 2]
59:		jmp t1556
61:	

strtol$16:	; function end strtol
1:	

strtoul:	; chars = 0
2:		mov word [bp + 12], 0
4:	

strtoul$1:	; value = 0
5:		mov dword [bp + 14], 0
7:	

strtoul$2:	; call header integral zero 0 stack zero 0
9:	

strtoul$3:	; parameter s, offset 6
10:		mov a1557, [bp + 6]
11:		mov [bp + 24], a1557
13:	

strtoul$4:	; parameter string_25lu25n#, offset 8
14:		mov word [bp + 26], string_25lu25n#
16:	

strtoul$5:	; £temporary2402 = &value
17:		mov t1558, bp
18:		add t1558, 14
20:	

strtoul$6:	; parameter £temporary2402, offset 10
21:		mov [bp + 28], t1558
23:	

strtoul$7:	; £temporary2403 = &chars
24:		mov t1559, bp
25:		add t1559, 12
27:	

strtoul$8:	; parameter £temporary2403, offset 12
28:		mov [bp + 30], t1559
30:	

strtoul$9:	; call function noellipse-ellipse sscanf, extra 0
31:		mov word [bp + 18], strtoul$10
32:		mov [bp + 20], bp
33:		add bp, 18
34:		mov di, bp
35:		add di, 4
36:		jmp sscanf
38:	

strtoul$10:	; post call
40:	

strtoul$11:	; if endp == 0 goto 14
41:		cmp word [bp + 8], 0
42:		je strtoul$14
44:	

strtoul$12:	; £temporary2406 -> endp = *endp
45:		mov a1560, [bp + 8]
47:	

strtoul$13:	; £temporary2406 -> endp = s + chars
48:		mov a1561, [bp + 6]
49:		add a1561, [bp + 12]
50:		mov [a1560], a1561
52:	

strtoul$14:	; return_value = value
53:		mov a1562, [bp + 14]
55:	

strtoul$15:	; return
56:		mov t1563, [bp]
57:		mov di, [bp + 4]
58:		mov bp, [bp + 2]
59:		jmp t1563
61:	

strtoul$16:	; function end strtoul
1:	

atof:	; call header integral zero 0 stack zero 0
3:	

atof$1:	; parameter s, offset 6
4:		mov a1564, [bp + 6]
5:		mov [bp + 14], a1564
7:	

atof$2:	; parameter 0, offset 8
8:		mov word [bp + 16], 0
10:	

atof$3:	; call function noellipse-noellipse strtod
11:		mov word [bp + 8], atof$4
12:		mov [bp + 10], bp
13:		add bp, 8
14:		jmp strtod
16:	

atof$4:	; post call
18:	

atof$5:	; £temporary2414 = return_value
20:	

atof$6:	; return_value = £temporary2414
22:	

atof$7:	; return
23:		mov t1565, [bp]
24:		mov di, [bp + 4]
25:		mov bp, [bp + 2]
26:		jmp t1565
28:	

atof$8:	; function end atof
1:	

strtod:	; chars = 0
2:		mov word [bp + 10], 0
4:	

strtod$1:	; push 0
5:		fldz
7:	

strtod$2:	; pop float value
8:		fstp qword [bp + 12]
10:	

strtod$3:	; call header integral zero 0 stack zero 0
12:	

strtod$4:	; parameter s, offset 6
13:		mov a1566, [bp + 6]
14:		mov [bp + 26], a1566
16:	

strtod$5:	; parameter string_25lf25n#, offset 8
17:		mov word [bp + 28], string_25lf25n#
19:	

strtod$6:	; £temporary2417 = &value
20:		mov t1567, bp
21:		add t1567, 12
23:	

strtod$7:	; parameter £temporary2417, offset 10
24:		mov [bp + 30], t1567
26:	

strtod$8:	; £temporary2418 = &chars
27:		mov t1568, bp
28:		add t1568, 10
30:	

strtod$9:	; parameter £temporary2418, offset 12
31:		mov [bp + 32], t1568
33:	

strtod$10:	; call function noellipse-ellipse sscanf, extra 0
34:		mov word [bp + 20], strtod$11
35:		mov [bp + 22], bp
36:		add bp, 20
37:		mov di, bp
38:		add di, 4
39:		jmp sscanf
41:	

strtod$11:	; post call
43:	

strtod$12:	; if endp == 0 goto 15
44:		cmp word [bp + 8], 0
45:		je strtod$15
47:	

strtod$13:	; £temporary2421 -> endp = *endp
48:		mov a1569, [bp + 8]
50:	

strtod$14:	; £temporary2421 -> endp = s + chars
51:		mov a1570, [bp + 6]
52:		add a1570, [bp + 10]
53:		mov [a1569], a1570
55:	

strtod$15:	; push float value
56:		fld qword [bp + 12]
58:	

strtod$16:	; return_value = value
60:	

strtod$17:	; return
61:		mov t1571, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t1571
66:	

strtod$18:	; function end strtod
1:	

abort:	; ah = 76
2:		mov a1572, 76
4:	

abort$1:	; al = -1
5:		mov a1573, -1
7:	

abort$2:	; interrupt 33
8:		int 33
10:	

abort$3:	; return
11:		mov t1574, [bp]
12:		mov di, [bp + 4]
13:		mov bp, [bp + 2]
14:		jmp t1574
16:	

abort$4:	; function end abort
1:	

getenv:	; return_value = 0
2:		mov a1575, 0
4:	

getenv$1:	; return
5:		mov t1576, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp t1576
10:	

getenv$2:	; function end getenv
1:	

system:	; return_value = -1
2:		mov a1577, -1
4:	

system$1:	; return
5:		mov t1578, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp t1578
10:	

system$2:	; function end system
1:	

memswp:	; £temporary2431 = int_to_int value1 (Pointer -> Pointer)
2:		mov a1579, [bp + 6]
5:	

memswp$1:	; charValue1 = £temporary2431
6:		mov [bp + 12], a1579
8:	

memswp$2:	; £temporary2432 = int_to_int value2 (Pointer -> Pointer)
9:		mov a1580, [bp + 8]
12:	

memswp$3:	; charValue2 = £temporary2432
13:		mov [bp + 14], a1580
15:	

memswp$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memswp$5:	; if index >= valueSize goto 19
19:		mov a1581, [bp + 10]
20:		cmp [bp + 16], a1581
21:		jge memswp$19
23:	

memswp$6:	; £temporary2436 = charValue1 + index
24:		mov a1582, [bp + 12]
25:		add a1582, [bp + 16]
27:	

memswp$7:	; £temporary2435 -> £temporary2436 = *£temporary2436
29:	

memswp$8:	; tempValue = £temporary2435 -> £temporary2436
30:		mov t1583, [a1582]
31:		mov [bp + 18], t1583
33:	

memswp$9:	; £temporary2438 = charValue1 + index
34:		mov a1584, [bp + 12]
35:		add a1584, [bp + 16]
37:	

memswp$10:	; £temporary2437 -> £temporary2438 = *£temporary2438
39:	

memswp$11:	; £temporary2440 = charValue2 + index
40:		mov a1585, [bp + 14]
41:		add a1585, [bp + 16]
43:	

memswp$12:	; £temporary2439 -> £temporary2440 = *£temporary2440
45:	

memswp$13:	; £temporary2437 -> £temporary2438 = £temporary2439 -> £temporary2440
46:		mov t1586, [a1585]
47:		mov [a1584], t1586
49:	

memswp$14:	; £temporary2442 = charValue2 + index
50:		mov a1587, [bp + 14]
51:		add a1587, [bp + 16]
53:	

memswp$15:	; £temporary2441 -> £temporary2442 = *£temporary2442
55:	

memswp$16:	; £temporary2441 -> £temporary2442 = tempValue
56:		mov a1588, [bp + 18]
57:		mov [a1587], a1588
59:	

memswp$17:	; ++index
60:		inc word [bp + 16]
62:	

memswp$18:	; goto 5
63:		jmp memswp$5
65:	

memswp$19:	; return
66:		mov t1589, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp t1589
71:	

memswp$20:	; function end memswp
1:	

bsearch:	; firstIndex = 0
2:		mov word [bp + 16], 0
4:	

bsearch$1:	; lastIndex = listSize - 1
5:		mov a1590, [bp + 10]
6:		sub a1590, 1
7:		mov [bp + 18], a1590
9:	

bsearch$2:	; if listSize != 0 goto 5
10:		cmp word [bp + 10], 0
11:		jne bsearch$5
13:	

bsearch$3:	; return_value = 0
14:		mov a1591, 0
16:	

bsearch$4:	; return
17:		mov t1592, [bp]
18:		mov di, [bp + 4]
19:		mov bp, [bp + 2]
20:		jmp t1592
22:	

bsearch$5:	; £temporary2445 = int_to_int valueList (Pointer -> Pointer)
23:		mov a1593, [bp + 8]
26:	

bsearch$6:	; £temporary2446 = firstIndex * valueSize
27:		mov a1594, [bp + 16]
29:		xor dx, dx
30:		imul word [bp + 12]
36:	

bsearch$7:	; firstValuePtr = £temporary2445 + £temporary2446
37:		add a1593, t1597
38:		mov [bp + 20], a1593
40:	

bsearch$8:	; call header integral zero 0 stack zero 0
42:	

bsearch$9:	; parameter keyPtr, offset 6
43:		mov a1598, [bp + 6]
44:		mov [bp + 28], a1598
46:	

bsearch$10:	; parameter firstValuePtr, offset 8
47:		mov a1599, [bp + 20]
48:		mov [bp + 30], a1599
50:	

bsearch$11:	; call function noellipse-noellipse compare
51:		mov word [bp + 22], bsearch$12
52:		mov [bp + 24], bp
53:		add bp, 22
54:		mov a1600, [bp + 14]
55:		jmp a1600 a1600 compare 54 55
57:	

bsearch$12:	; post call
59:	

bsearch$13:	; £temporary2448 = return_value
64:	

bsearch$14:	; firstCompare = £temporary2448
65:		mov [bp + 22], t1602
67:	

bsearch$15:	; if firstCompare >= 0 goto 18
68:		cmp word [bp + 22], 0
69:		jge bsearch$18
71:	

bsearch$16:	; return_value = 0
72:		mov a1603, 0
74:	

bsearch$17:	; return
75:		mov t1604, [bp]
76:		mov di, [bp + 4]
77:		mov bp, [bp + 2]
78:		jmp t1604
80:	

bsearch$18:	; if firstCompare != 0 goto 21
81:		cmp word [bp + 22], 0
82:		jne bsearch$21
84:	

bsearch$19:	; return_value = firstValuePtr
85:		mov a1605, [bp + 20]
87:	

bsearch$20:	; return
88:		mov t1606, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp t1606
93:	

bsearch$21:	; £temporary2451 = int_to_int valueList (Pointer -> Pointer)
94:		mov a1607, [bp + 8]
97:	

bsearch$22:	; £temporary2452 = lastIndex * valueSize
98:		mov a1608, [bp + 18]
100:		xor dx, dx
101:		imul word [bp + 12]
107:	

bsearch$23:	; lastValuePtr = £temporary2451 + £temporary2452
108:		add a1607, t1611
109:		mov [bp + 20], a1607
111:	

bsearch$24:	; call header integral zero 0 stack zero 0
113:	

bsearch$25:	; parameter keyPtr, offset 6
114:		mov a1612, [bp + 6]
115:		mov [bp + 28], a1612
117:	

bsearch$26:	; parameter lastValuePtr, offset 8
118:		mov a1613, [bp + 20]
119:		mov [bp + 30], a1613
121:	

bsearch$27:	; call function noellipse-noellipse compare
122:		mov word [bp + 22], bsearch$28
123:		mov [bp + 24], bp
124:		add bp, 22
125:		mov a1614, [bp + 14]
126:		jmp a1614 a1614 compare 125 126
128:	

bsearch$28:	; post call
130:	

bsearch$29:	; £temporary2454 = return_value
135:	

bsearch$30:	; lastCompare = £temporary2454
136:		mov [bp + 22], t1616
138:	

bsearch$31:	; if lastCompare <= 0 goto 34
139:		cmp word [bp + 22], 0
140:		jle bsearch$34
142:	

bsearch$32:	; return_value = 0
143:		mov a1617, 0
145:	

bsearch$33:	; return
146:		mov t1618, [bp]
147:		mov di, [bp + 4]
148:		mov bp, [bp + 2]
149:		jmp t1618
151:	

bsearch$34:	; if lastCompare != 0 goto 37
152:		cmp word [bp + 22], 0
153:		jne bsearch$37
155:	

bsearch$35:	; return_value = lastValuePtr
156:		mov a1619, [bp + 20]
158:	

bsearch$36:	; return
159:		mov t1620, [bp]
160:		mov di, [bp + 4]
161:		mov bp, [bp + 2]
162:		jmp t1620
164:	

bsearch$37:	; £temporary2457 = firstIndex + lastIndex
165:		mov a1621, [bp + 16]
166:		add a1621, [bp + 18]
168:	

bsearch$38:	; middleIndex = £temporary2457 / 2
170:		xor dx, dx
171:		idiv word [int2$2#]
172:		mov [bp + 20], ax
174:	

bsearch$39:	; £temporary2459 = int_to_int valueList (Pointer -> Pointer)
175:		mov a1624, [bp + 8]
178:	

bsearch$40:	; £temporary2460 = middleIndex * valueSize
179:		mov a1625, [bp + 20]
181:		xor dx, dx
182:		imul word [bp + 12]
188:	

bsearch$41:	; middleValuePtr = £temporary2459 + £temporary2460
189:		add a1624, t1628
190:		mov [bp + 22], a1624
192:	

bsearch$42:	; call header integral zero 0 stack zero 0
194:	

bsearch$43:	; parameter keyPtr, offset 6
195:		mov a1629, [bp + 6]
196:		mov [bp + 30], a1629
198:	

bsearch$44:	; parameter middleValuePtr, offset 8
199:		mov a1630, [bp + 22]
200:		mov [bp + 32], a1630
202:	

bsearch$45:	; call function noellipse-noellipse compare
203:		mov word [bp + 24], bsearch$46
204:		mov [bp + 26], bp
205:		add bp, 24
206:		mov a1631, [bp + 14]
207:		jmp a1631 a1631 compare 206 207
209:	

bsearch$46:	; post call
211:	

bsearch$47:	; £temporary2462 = return_value
216:	

bsearch$48:	; middleCompare = £temporary2462
217:		mov [bp + 24], t1633
219:	

bsearch$49:	; if middleCompare >= 0 goto 52
220:		cmp word [bp + 24], 0
221:		jge bsearch$52
223:	

bsearch$50:	; lastIndex = middleIndex
224:		mov a1634, [bp + 20]
225:		mov [bp + 18], a1634
227:	

bsearch$51:	; goto 5
228:		jmp bsearch$5
230:	

bsearch$52:	; if middleCompare <= 0 goto 55
231:		cmp word [bp + 24], 0
232:		jle bsearch$55
234:	

bsearch$53:	; firstIndex = middleIndex
235:		mov a1635, [bp + 20]
236:		mov [bp + 16], a1635
238:	

bsearch$54:	; goto 5
239:		jmp bsearch$5
241:	

bsearch$55:	; return_value = middleValuePtr
242:		mov a1636, [bp + 22]
244:	

bsearch$56:	; return
245:		mov t1637, [bp]
246:		mov di, [bp + 4]
247:		mov bp, [bp + 2]
248:		jmp t1637
250:	

bsearch$57:	; function end bsearch
1:	

rand:	; £temporary2472 = g_randValue * 1664525
2:		mov a1638, [@31$g_randValue]
4:		xor edx, edx
5:		imul dword [int4$1664525#]
11:	

rand$1:	; £temporary2473 = £temporary2472 + 1013904223
12:		add t1641, 1013904223
14:	

rand$2:	; g_randValue = £temporary2473 % 127
16:		xor edx, edx
17:		idiv dword [int4$127#]
18:		mov [@31$g_randValue], edx
20:	

rand$3:	; £temporary2475 = int_to_int g_randValue (Signed_Long_Int -> Signed_Int)
21:		mov a1643, [@31$g_randValue]
24:		cmp a1643, 0
25:		jge rand$4
26:		neg a1643
28:		neg a1643
30:	

rand$4:	; return_value = £temporary2475
32:	

rand$5:	; return
33:		mov t1644, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp t1644
38:	

rand$6:	; function end rand
1:	

srand:	; £temporary2476 = int_to_int seed (Unsigned_Int -> Signed_Long_Int)
2:		mov a1645, [bp + 6]
4:		and a1645, 65535
6:	

srand$1:	; g_randValue = £temporary2476
7:		mov [@31$g_randValue], a1645
9:	

srand$2:	; return
10:		mov t1646, [bp]
11:		mov di, [bp + 4]
12:		mov bp, [bp + 2]
13:		jmp t1646
15:	

srand$3:	; function end srand
1:	

print_heap2:	; heapBottom = (int2$32764#,0)
2:		mov t1647, [int2$32764#]
3:		mov [bp + 6], t1647
5:	

print_heap2$1:	; topStack = (int2$32766#,0)
6:		mov t1648, [int2$32766#]
7:		mov [bp + 8], t1648
9:	

print_heap2$2:	; heapTop = (int2$32762#,0)
10:		mov t1649, [int2$32762#]
11:		mov [bp + 10], t1649
13:	

print_heap2$3:	; index = 0
14:		mov word [bp + 12], 0
16:	

print_heap2$4:	; call header integral zero 0 stack zero 0
18:	

print_heap2$5:	; parameter string_stack20top2025u2C20heap20top2025u2C20heap20bottom2025u0A#, offset 6
19:		mov word [bp + 20], string_stack20top2025u2C20heap20top2025u2C20heap20bottom2025u0A#
21:	

print_heap2$6:	; parameter topStack, offset 8
22:		mov a1650, [bp + 8]
23:		mov [bp + 22], a1650
25:	

print_heap2$7:	; parameter heapTop, offset 10
26:		mov a1651, [bp + 10]
27:		mov [bp + 24], a1651
29:	

print_heap2$8:	; parameter heapBottom, offset 12
30:		mov a1652, [bp + 6]
31:		mov [bp + 26], a1652
33:	

print_heap2$9:	; call function noellipse-ellipse printf, extra 0
34:		mov word [bp + 14], print_heap2$10
35:		mov [bp + 16], bp
36:		add bp, 14
37:		mov di, bp
38:		add di, 6
39:		jmp printf
41:	

print_heap2$10:	; post call
43:	

print_heap2$11:	; if heapTop == 0 goto 29
44:		cmp word [bp + 10], 0
45:		je print_heap2$29
47:	

print_heap2$12:	; £temporary2482 = int_to_int heapTop (Unsigned_Int -> Pointer)
48:		mov a1653, [bp + 10]
51:	

print_heap2$13:	; £temporary2483 = £temporary2482 + 2
52:		add a1653, 2
54:	

print_heap2$14:	; £temporary2484 -> £temporary2483 = *£temporary2483
56:	

print_heap2$15:	; size = £temporary2484 -> £temporary2483
57:		mov t1654, [a1653]
58:		mov [bp + 14], t1654
60:	

print_heap2$16:	; call header integral zero 0 stack zero 0
62:	

print_heap2$17:	; parameter string_2020index2025u2C20address2025u2C20size2025u0A#, offset 6
63:		mov word [bp + 22], string_2020index2025u2C20address2025u2C20size2025u0A#
65:	

print_heap2$18:	; £temporary2485 = index
66:		mov t1655, [bp + 12]
68:	

print_heap2$19:	; ++index
69:		inc word [bp + 12]
71:	

print_heap2$20:	; parameter £temporary2485, offset 8
72:		mov [bp + 24], t1655
74:	

print_heap2$21:	; parameter heapTop, offset 10
75:		mov a1656, [bp + 10]
76:		mov [bp + 26], a1656
78:	

print_heap2$22:	; parameter size, offset 12
79:		mov a1657, [bp + 14]
80:		mov [bp + 28], a1657
82:	

print_heap2$23:	; call function noellipse-ellipse printf, extra 0
83:		mov word [bp + 16], print_heap2$24
84:		mov [bp + 18], bp
85:		add bp, 16
86:		mov di, bp
87:		add di, 6
88:		jmp printf
90:	

print_heap2$24:	; post call
92:	

print_heap2$25:	; £temporary2487 = int_to_int heapTop (Unsigned_Int -> Pointer)
93:		mov a1658, [bp + 10]
96:	

print_heap2$26:	; £temporary2488 -> £temporary2487 = *£temporary2487
98:	

print_heap2$27:	; heapTop = £temporary2488 -> £temporary2487
99:		mov t1659, [a1658]
100:		mov [bp + 10], t1659
102:	

print_heap2$28:	; goto 11
103:		jmp print_heap2$11
105:	

print_heap2$29:	; call header integral zero 0 stack zero 0
107:	

print_heap2$30:	; parameter string_0A#, offset 6
108:		mov word [bp + 20], string_0A#
110:	

print_heap2$31:	; call function noellipse-ellipse printf, extra 0
111:		mov word [bp + 14], print_heap2$32
112:		mov [bp + 16], bp
113:		add bp, 14
114:		mov di, bp
115:		jmp printf
117:	

print_heap2$32:	; post call
119:	

print_heap2$33:	; return
120:		mov t1660, [bp]
121:		mov di, [bp + 4]
122:		mov bp, [bp + 2]
123:		jmp t1660
125:	

print_heap2$34:	; function end print_heap2
1:	

atexit:	; call header integral zero 0 stack zero 0
3:	

atexit$1:	; parameter string_0A#, offset 6
4:		mov word [bp + 16], string_0A#
6:	

atexit$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 10], atexit$3
8:		mov [bp + 12], bp
9:		add bp, 10
10:		mov di, bp
11:		jmp printf
13:	

atexit$3:	; post call
15:	

atexit$4:	; index = 0
16:		mov word [bp + 8], 0
18:	

atexit$5:	; if index >= 256 goto 27
19:		cmp word [bp + 8], 256
20:		jge atexit$27
22:	

atexit$6:	; £temporary2503 = index * 2
23:		mov a1661, [bp + 8]
25:		xor dx, dx
26:		mul word [int2$2#]
32:	

atexit$7:	; £temporary2504 = g_funcArray + £temporary2503
33:		mov a1665, g_funcArray
34:		add a1665, t1664
36:	

atexit$8:	; £temporary2502 -> £temporary2504 = *£temporary2504
38:	

atexit$9:	; if £temporary2502 -> £temporary2504 != 0 goto 25
39:		cmp word [a1665], 0
40:		jne atexit$25
42:	

atexit$10:	; £temporary2507 = index * 2
43:		mov a1666, [bp + 8]
45:		xor dx, dx
46:		mul word [int2$2#]
52:	

atexit$11:	; £temporary2508 = g_funcArray + £temporary2507
53:		mov a1670, g_funcArray
54:		add a1670, t1669
56:	

atexit$12:	; £temporary2506 -> £temporary2508 = *£temporary2508
58:	

atexit$13:	; £temporary2506 -> £temporary2508 = fcn
59:		mov a1671, [bp + 6]
60:		mov [a1670], a1671
62:	

atexit$14:	; call header integral zero 0 stack zero 0
64:	

atexit$15:	; parameter string_Added20function20index2025i3A2025i0A#, offset 6
65:		mov word [bp + 16], string_Added20function20index2025i3A2025i0A#
67:	

atexit$16:	; parameter index, offset 8
68:		mov a1672, [bp + 8]
69:		mov [bp + 18], a1672
71:	

atexit$17:	; £temporary2510 = index * 2
72:		mov a1673, [bp + 8]
74:		xor dx, dx
75:		mul word [int2$2#]
81:	

atexit$18:	; £temporary2511 = g_funcArray + £temporary2510
82:		mov a1677, g_funcArray
83:		add a1677, t1676
85:	

atexit$19:	; £temporary2509 -> £temporary2511 = *£temporary2511
87:	

atexit$20:	; parameter £temporary2509 -> £temporary2511, offset 10
88:		mov t1678, [a1677]
89:		mov [bp + 20], t1678
91:	

atexit$21:	; call function noellipse-ellipse printf, extra 0
92:		mov word [bp + 10], atexit$22
93:		mov [bp + 12], bp
94:		add bp, 10
95:		mov di, bp
96:		add di, 4
97:		jmp printf
99:	

atexit$22:	; post call
101:	

atexit$23:	; return_value = 0
102:		mov a1679, 0
104:	

atexit$24:	; return
105:		mov t1680, [bp]
106:		mov di, [bp + 4]
107:		mov bp, [bp + 2]
108:		jmp t1680
110:	

atexit$25:	; ++index
111:		inc word [bp + 8]
113:	

atexit$26:	; goto 5
114:		jmp atexit$5
116:	

atexit$27:	; return_value = -1
117:		mov a1681, -1
119:	

atexit$28:	; return
120:		mov t1682, [bp]
121:		mov di, [bp + 4]
122:		mov bp, [bp + 2]
123:		jmp t1682
125:	

atexit$29:	; function end atexit
1:	

exit:	; call header integral zero 0 stack zero 0
3:	

exit$1:	; parameter string_0A#, offset 6
4:		mov word [bp + 16], string_0A#
6:	

exit$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 10], exit$3
8:		mov [bp + 12], bp
9:		add bp, 10
10:		mov di, bp
11:		jmp printf
13:	

exit$3:	; post call
15:	

exit$4:	; index = 255
16:		mov word [bp + 8], 255
18:	

exit$5:	; if index < 0 goto 27
19:		cmp word [bp + 8], 0
20:		jl exit$27
22:	

exit$6:	; £temporary2521 = index * 2
23:		mov a1683, [bp + 8]
25:		xor dx, dx
26:		mul word [int2$2#]
32:	

exit$7:	; £temporary2522 = g_funcArray + £temporary2521
33:		mov a1687, g_funcArray
34:		add a1687, t1686
36:	

exit$8:	; £temporary2520 -> £temporary2522 = *£temporary2522
38:	

exit$9:	; if £temporary2520 -> £temporary2522 == 0 goto 25
39:		cmp word [a1687], 0
40:		je exit$25
42:	

exit$10:	; call header integral zero 0 stack zero 0
44:	

exit$11:	; parameter string_Called20function20index2025i3A2025i0A#, offset 6
45:		mov word [bp + 16], string_Called20function20index2025i3A2025i0A#
47:	

exit$12:	; parameter index, offset 8
48:		mov a1688, [bp + 8]
49:		mov [bp + 18], a1688
51:	

exit$13:	; £temporary2525 = index * 2
52:		mov a1689, [bp + 8]
54:		xor dx, dx
55:		mul word [int2$2#]
61:	

exit$14:	; £temporary2526 = g_funcArray + £temporary2525
62:		mov a1693, g_funcArray
63:		add a1693, t1692
65:	

exit$15:	; £temporary2524 -> £temporary2526 = *£temporary2526
67:	

exit$16:	; parameter £temporary2524 -> £temporary2526, offset 10
68:		mov t1694, [a1693]
69:		mov [bp + 20], t1694
71:	

exit$17:	; call function noellipse-ellipse printf, extra 0
72:		mov word [bp + 10], exit$18
73:		mov [bp + 12], bp
74:		add bp, 10
75:		mov di, bp
76:		add di, 4
77:		jmp printf
79:	

exit$18:	; post call
81:	

exit$19:	; £temporary2529 = index * 2
82:		mov a1695, [bp + 8]
84:		xor dx, dx
85:		mul word [int2$2#]
91:	

exit$20:	; £temporary2530 = g_funcArray + £temporary2529
92:		mov a1699, g_funcArray
93:		add a1699, t1698
95:	

exit$21:	; £temporary2528 -> £temporary2530 = *£temporary2530
96:		mov t1700, [a1699]
97:		mov [bp + 10], t1700
99:	

exit$22:	; call header integral zero 0 stack zero 0
101:	

exit$23:	; call function noellipse-noellipse £temporary2528 -> £temporary2530
102:		mov word [bp + 12], exit$24
103:		mov [bp + 14], bp
104:		add bp, 12
105:		mov t1701, [bp + 10]
106:		jmp t1701 t1701 £temporary2528 105 106
108:	

exit$24:	; post call
110:	

exit$25:	; --index
111:		dec word [bp + 8]
113:	

exit$26:	; goto 5
114:		jmp exit$5
116:	

exit$27:	; £temporary2533 = int_to_int status (Signed_Int -> Signed_Short_Int)
117:		mov a1702, [bp + 6]
120:		cmp a1702, 0
121:		jge exit$28
122:		neg a1702
124:		neg a1702
126:	

exit$28:	; al = £temporary2533
128:	

exit$29:	; ah = 76
129:		mov a1703, 76
131:	

exit$30:	; interrupt 33
132:		int 33
134:	

exit$31:	; return
135:		mov t1704, [bp]
136:		mov di, [bp + 4]
137:		mov bp, [bp + 2]
138:		jmp t1704
140:	

exit$32:	; function end exit
1:	

swap:	; index = 0
2:		mov word [bp + 12], 0
4:	

swap$1:	; if index >= valueSize goto 15
5:		mov a1705, [bp + 10]
6:		cmp [bp + 12], a1705
7:		jge swap$15
9:	

swap$2:	; £temporary2542 = leftValuePtr + index
10:		mov a1706, [bp + 6]
11:		add a1706, [bp + 12]
13:	

swap$3:	; £temporary2541 -> £temporary2542 = *£temporary2542
15:	

swap$4:	; tempValue = £temporary2541 -> £temporary2542
16:		mov t1707, [a1706]
17:		mov [bp + 14], t1707
19:	

swap$5:	; £temporary2544 = leftValuePtr + index
20:		mov a1708, [bp + 6]
21:		add a1708, [bp + 12]
23:	

swap$6:	; £temporary2543 -> £temporary2544 = *£temporary2544
25:	

swap$7:	; £temporary2546 = rightValuePtr + index
26:		mov a1709, [bp + 8]
27:		add a1709, [bp + 12]
29:	

swap$8:	; £temporary2545 -> £temporary2546 = *£temporary2546
31:	

swap$9:	; £temporary2543 -> £temporary2544 = £temporary2545 -> £temporary2546
32:		mov t1710, [a1709]
33:		mov [a1708], t1710
35:	

swap$10:	; £temporary2548 = rightValuePtr + index
36:		mov a1711, [bp + 8]
37:		add a1711, [bp + 12]
39:	

swap$11:	; £temporary2547 -> £temporary2548 = *£temporary2548
41:	

swap$12:	; £temporary2547 -> £temporary2548 = tempValue
42:		mov a1712, [bp + 14]
43:		mov [a1711], a1712
45:	

swap$13:	; ++index
46:		inc word [bp + 12]
48:	

swap$14:	; goto 1
49:		jmp swap$1
51:	

swap$15:	; return
52:		mov t1713, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t1713
57:	

swap$16:	; function end swap
1:	

qsort:	; £temporary2549 = int_to_int valueList (Pointer -> Pointer)
2:		mov a1714, [bp + 6]
5:	

qsort$1:	; charList = £temporary2549
6:		mov [bp + 16], a1714
8:	

qsort$2:	; index1 = listSize - 1
9:		mov a1715, [bp + 8]
10:		sub a1715, 1
11:		mov [bp + 18], a1715
13:	

qsort$3:	; if index1 <= 0 goto 30
14:		cmp word [bp + 18], 0
15:		jle qsort$30
17:	

qsort$4:	; update = 0
18:		mov word [bp + 14], 0
20:	

qsort$5:	; index2 = 0
21:		mov word [bp + 20], 0
23:	

qsort$6:	; if index2 >= index1 goto 28
24:		mov a1716, [bp + 18]
25:		cmp [bp + 20], a1716
26:		jge qsort$28
28:	

qsort$7:	; £temporary2555 = index2 * valueSize
29:		mov a1717, [bp + 20]
31:		xor dx, dx
32:		imul word [bp + 10]
38:	

qsort$8:	; valuePtr1 = charList + £temporary2555
39:		mov a1721, [bp + 16]
40:		add a1721, t1720
41:		mov [bp + 22], a1721
43:	

qsort$9:	; £temporary2557 = index2 + 1
44:		mov a1722, [bp + 20]
45:		add a1722, 1
47:	

qsort$10:	; £temporary2558 = £temporary2557 * valueSize
49:		xor dx, dx
50:		imul word [bp + 10]
56:	

qsort$11:	; valuePtr2 = charList + £temporary2558
57:		mov a1726, [bp + 16]
58:		add a1726, t1725
59:		mov [bp + 24], a1726
61:	

qsort$12:	; call header integral zero 0 stack zero 0
63:	

qsort$13:	; parameter valuePtr1, offset 6
64:		mov a1727, [bp + 22]
65:		mov [bp + 32], a1727
67:	

qsort$14:	; parameter valuePtr2, offset 8
68:		mov a1728, [bp + 24]
69:		mov [bp + 34], a1728
71:	

qsort$15:	; call function noellipse-noellipse compare
72:		mov word [bp + 26], qsort$16
73:		mov [bp + 28], bp
74:		add bp, 26
75:		mov a1729, [bp + 12]
76:		jmp a1729 a1729 compare 75 76
78:	

qsort$16:	; post call
80:	

qsort$17:	; £temporary2560 = return_value
85:	

qsort$18:	; if £temporary2560 <= 0 goto 26
86:		cmp t1731, 0
87:		jle qsort$26
89:	

qsort$19:	; call header integral zero 0 stack zero 0
91:	

qsort$20:	; parameter valuePtr1, offset 6
92:		mov a1732, [bp + 22]
93:		mov [bp + 32], a1732
95:	

qsort$21:	; parameter valuePtr2, offset 8
96:		mov a1733, [bp + 24]
97:		mov [bp + 34], a1733
99:	

qsort$22:	; parameter valueSize, offset 10
100:		mov a1734, [bp + 10]
101:		mov [bp + 36], a1734
103:	

qsort$23:	; call function noellipse-noellipse swap
104:		mov word [bp + 26], qsort$24
105:		mov [bp + 28], bp
106:		add bp, 26
107:		jmp swap
109:	

qsort$24:	; post call
111:	

qsort$25:	; update = 1
112:		mov word [bp + 14], 1
114:	

qsort$26:	; ++index2
115:		inc word [bp + 20]
117:	

qsort$27:	; goto 6
118:		jmp qsort$6
120:	

qsort$28:	; --index1
121:		dec word [bp + 18]
123:	

qsort$29:	; goto 3
124:		jmp qsort$3
126:	

qsort$30:	; return
127:		mov t1735, [bp]
128:		mov di, [bp + 4]
129:		mov bp, [bp + 2]
130:		jmp t1735
132:	

qsort$31:	; function end qsort
1:	

abs:	; if value >= 0 goto 4
2:		cmp word [bp + 6], 0
3:		jge abs$4
5:	

abs$1:	; £temporary2571 = -value
6:		mov a1736, [bp + 6]
7:		neg a1736
9:	

abs$2:	; £temporary2575 = £temporary2571
11:	

abs$3:	; goto 5
12:		jmp abs$5
14:	

abs$4:	; £temporary2575 = value
15:		mov t1738, [bp + 6]
17:	

abs$5:	; return_value = £temporary2575
19:	

abs$6:	; return
20:		mov t1739, [bp]
21:		mov di, [bp + 4]
22:		mov bp, [bp + 2]
23:		jmp t1739
25:	

abs$7:	; function end abs
1:	

labs:	; if value >= 0 goto 4
2:		cmp dword [bp + 6], 0
3:		jge labs$4
5:	

labs$1:	; £temporary2577 = -value
6:		mov a1740, [bp + 6]
7:		neg a1740
9:	

labs$2:	; £temporary2581 = £temporary2577
11:	

labs$3:	; goto 5
12:		jmp labs$5
14:	

labs$4:	; £temporary2581 = value
15:		mov t1742, [bp + 6]
17:	

labs$5:	; return_value = £temporary2581
19:	

labs$6:	; return
20:		mov t1743, [bp]
21:		mov di, [bp + 4]
22:		mov bp, [bp + 2]
23:		jmp t1743
25:	

labs$7:	; function end labs
1:	

div:	; result$quot = 0
2:		mov word [bp + 10], 0
4:	

div$1:	; result$rem = 0
5:		mov word [bp + 12], 0
7:	

div$2:	; if denum != 0 goto 6
8:		cmp word [bp + 8], 0
9:		jne div$6
11:	

div$3:	; errno = 6
12:		mov word [errno], 6
14:	

div$4:	; return_value = result
15:		mov t1744, bp
16:		add t1744, 10
18:	

div$5:	; return
19:		mov t1745, [bp]
20:		mov di, [bp + 4]
21:		mov bp, [bp + 2]
22:		jmp t1745
24:	

div$6:	; result$quot = num / denum
25:		mov a1746, [bp + 6]
27:		xor dx, dx
28:		idiv word [bp + 8]
29:		mov [bp + 10], ax
31:	

div$7:	; result$rem = num % denum
32:		mov a1749, [bp + 6]
34:		xor dx, dx
35:		idiv word [bp + 8]
36:		mov [bp + 12], dx
38:	

div$8:	; return_value = result
39:		mov t1751, bp
40:		add t1751, 10
42:	

div$9:	; return
43:		mov t1752, [bp]
44:		mov di, [bp + 4]
45:		mov bp, [bp + 2]
46:		jmp t1752
48:	

div$10:	; function end div
1:	

ldiv:	; result$quot = 0
2:		mov dword [bp + 14], 0
4:	

ldiv$1:	; result$rem = 0
5:		mov dword [bp + 18], 0
7:	

ldiv$2:	; if denum != 0 goto 6
8:		cmp dword [bp + 10], 0
9:		jne ldiv$6
11:	

ldiv$3:	; errno = 6
12:		mov word [errno], 6
14:	

ldiv$4:	; return_value = result
15:		mov t1753, bp
16:		add t1753, 14
18:	

ldiv$5:	; return
19:		mov t1754, [bp]
20:		mov di, [bp + 4]
21:		mov bp, [bp + 2]
22:		jmp t1754
24:	

ldiv$6:	; result$quot = num / denum
25:		mov a1755, [bp + 6]
27:		xor edx, edx
28:		idiv dword [bp + 10]
29:		mov [bp + 14], eax
31:	

ldiv$7:	; result$rem = num % denum
32:		mov a1758, [bp + 6]
34:		xor edx, edx
35:		idiv dword [bp + 10]
36:		mov [bp + 18], edx
38:	

ldiv$8:	; return_value = result
39:		mov t1760, bp
40:		add t1760, 14
42:	

ldiv$9:	; return
43:		mov t1761, [bp]
44:		mov di, [bp + 4]
45:		mov bp, [bp + 2]
46:		jmp t1761
48:	

ldiv$10:	; function end ldiv
