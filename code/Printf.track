1:	

putc:	; Assign g_outStatus 0
2:		mov word [g_outStatus], 0
4:	

putc$1:	; IntegralToIntegral £temporary1589 stream
5:		mov a1152, [bp + 8]
8:	

putc$2:	; Assign g_outDevice £temporary1589
9:		mov [g_outDevice], a1152
11:	

putc$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

putc$4:	; IntegralToIntegral £temporary1590 i
14:		mov a1153, [bp + 6]
17:		cmp a1153, 0
18:		jge putc$5
19:		neg a1153
21:		neg a1153
23:	

putc$5:	; Parameter 10 £temporary1590 6
24:		mov [bp + 16], a1153
26:	

putc$6:	; Call 10 printChar 0
27:		mov word [bp + 10], putc$7
28:		mov [bp + 12], bp
29:		add bp, 10
30:		jmp printChar
32:	

putc$7:	; PostCall 10
34:	

putc$8:	; SetReturnValue 1
35:		mov a1154, 1
37:	

putc$9:	; Return 1
38:		mov t1155, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1155
43:	

putc$10:	; FunctionEnd putc
1:	

fputc:	; Assign g_outStatus 0
2:		mov word [g_outStatus], 0
4:	

fputc$1:	; IntegralToIntegral £temporary1593 stream
5:		mov a1156, [bp + 8]
8:	

fputc$2:	; Assign g_outDevice £temporary1593
9:		mov [g_outDevice], a1156
11:	

fputc$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

fputc$4:	; IntegralToIntegral £temporary1594 i
14:		mov a1157, [bp + 6]
17:		cmp a1157, 0
18:		jge fputc$5
19:		neg a1157
21:		neg a1157
23:	

fputc$5:	; Parameter 10 £temporary1594 6
24:		mov [bp + 16], a1157
26:	

fputc$6:	; Call 10 printChar 0
27:		mov word [bp + 10], fputc$7
28:		mov [bp + 12], bp
29:		add bp, 10
30:		jmp printChar
32:	

fputc$7:	; PostCall 10
34:	

fputc$8:	; SetReturnValue 1
35:		mov a1158, 1
37:	

fputc$9:	; Return 1
38:		mov t1159, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1159
43:	

fputc$10:	; FunctionEnd fputc
1:	

putchar:	; Assign g_outStatus 0
2:		mov word [g_outStatus], 0
4:	

putchar$1:	; IntegralToIntegral £temporary1597 stdout
5:		mov a1160, [stdout]
8:	

putchar$2:	; Assign g_outDevice £temporary1597
9:		mov [g_outDevice], a1160
11:	

putchar$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

putchar$4:	; IntegralToIntegral £temporary1598 i
14:		mov a1161, [bp + 6]
17:		cmp a1161, 0
18:		jge putchar$5
19:		neg a1161
21:		neg a1161
23:	

putchar$5:	; Parameter 8 £temporary1598 6
24:		mov [bp + 14], a1161
26:	

putchar$6:	; Call 8 printChar 0
27:		mov word [bp + 8], putchar$7
28:		mov [bp + 10], bp
29:		add bp, 8
30:		jmp printChar
32:	

putchar$7:	; PostCall 8
34:	

putchar$8:	; SetReturnValue 1
35:		mov a1162, 1
37:	

putchar$9:	; Return 1
38:		mov t1163, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1163
43:	

putchar$10:	; FunctionEnd putchar
1:	

printChar:	; Case 5 g_outStatus 0
2:		mov a1164, [g_outStatus]
3:		cmp a1164, 0
4:		je printChar$5
6:	

printChar$1:	; Case 16 g_outStatus 1
7:		cmp a1164, 1
8:		je printChar$16
10:	

printChar$2:	; Case 24 g_outStatus 2
11:		cmp a1164, 2
12:		je printChar$24
14:	

printChar$3:	; CaseEnd g_outStatus
16:	

printChar$4:	; Goto 25
17:		jmp printChar$25
19:	

printChar$5:	; IntegralToIntegral £temporary1601 g_outDevice
20:		mov a1165, [g_outDevice]
23:	

printChar$6:	; Assign stream £temporary1601
24:		mov [bp + 11], a1165
26:	

printChar$7:	; AssignRegister ah 64
27:		mov a1166, 64
29:	

printChar$8:	; Deref £temporary1604 -> stream stream 2
30:		mov a1167, [bp + 11]
32:	

printChar$9:	; AssignRegister bx £temporary1604 -> stream
33:		mov t1168, [a1167 + 2]
35:	

printChar$10:	; AssignRegister cx 1
36:		mov a1169, 1
38:	

printChar$11:	; address £temporary1607 c
39:		mov t1170, bp
40:		add t1170, 6
42:	

printChar$12:	; AssignRegister dx £temporary1607
44:	

printChar$13:	; Interrupt 33
45:		int 33
47:	

printChar$14:	; Increment g_outChars
48:		inc word [g_outChars]
50:	

printChar$15:	; Goto 25
51:		jmp printChar$25
53:	

printChar$16:	; IntegralToIntegral £temporary1609 g_outDevice
54:		mov a1171, [g_outDevice]
57:	

printChar$17:	; Assign outString £temporary1609
58:		mov [bp + 9], a1171
60:	

printChar$18:	; Assign £temporary1610 g_outChars
61:		mov t1172, [g_outChars]
63:	

printChar$19:	; Increment g_outChars
64:		inc word [g_outChars]
66:	

printChar$20:	; BinaryAdd £temporary1612 outString £temporary1610
67:		mov a1173, [bp + 9]
68:		add a1173, t1172
70:	

printChar$21:	; Deref £temporary1611 -> £temporary1612 £temporary1612 0
72:	

printChar$22:	; Assign £temporary1611 -> £temporary1612 c
73:		mov a1174, [bp + 6]
74:		mov [a1173], a1174
76:	

printChar$23:	; Goto 25
77:		jmp printChar$25
79:	

printChar$24:	; Increment g_outChars
80:		inc word [g_outChars]
82:	

printChar$25:	; Return 0
83:		mov t1175, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp t1175
88:	

printChar$26:	; FunctionEnd printChar
1:	

printString:	; Equal 29 s 0
2:		cmp word [bp + 6], 0
3:		je printString$29
5:	

printString$1:	; NotEqual 14 precision 0
6:		cmp word [bp + 8], 0
7:		jne printString$14
9:	

printString$2:	; Assign index 0
10:		mov word [bp + 10], 0
12:	

printString$3:	; BinaryAdd £temporary1618 s index
13:		mov a1176, [bp + 6]
14:		add a1176, [bp + 10]
16:	

printString$4:	; Deref £temporary1617 -> £temporary1618 £temporary1618 0
18:	

printString$5:	; Equal 53 £temporary1617 -> £temporary1618 0
19:		cmp byte [a1176], 0
20:		je printString$53
22:	

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
24:	

printString$7:	; BinaryAdd £temporary1622 s index
25:		mov a1177, [bp + 6]
26:		add a1177, [bp + 10]
28:	

printString$8:	; Deref £temporary1621 -> £temporary1622 £temporary1622 0
30:	

printString$9:	; Parameter 12 £temporary1621 -> £temporary1622 6
31:		mov t1178, [a1177]
32:		mov [bp + 18], t1178
34:	

printString$10:	; Call 12 printChar 0
35:		mov word [bp + 12], printString$11
36:		mov [bp + 14], bp
37:		add bp, 12
38:		jmp printChar
40:	

printString$11:	; PostCall 12
42:	

printString$12:	; Increment index
43:		inc word [bp + 10]
45:	

printString$13:	; Goto 3
46:		jmp printString$3
48:	

printString$14:	; Assign index 0
49:		mov word [bp + 10], 0
51:	

printString$15:	; Assign £temporary1624 precision
52:		mov t1179, [bp + 8]
54:	

printString$16:	; Decrement precision
55:		dec word [bp + 8]
57:	

printString$17:	; SignedLessThanEqual 53 £temporary1624 0
58:		cmp t1179, 0
59:		jle printString$53
61:	

printString$18:	; BinaryAdd £temporary1627 s index
62:		mov a1180, [bp + 6]
63:		add a1180, [bp + 10]
65:	

printString$19:	; Deref £temporary1626 -> £temporary1627 £temporary1627 0
67:	

printString$20:	; Equal 53 £temporary1626 -> £temporary1627 0
68:		cmp byte [a1180], 0
69:		je printString$53
71:	

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
73:	

printString$22:	; BinaryAdd £temporary1632 s index
74:		mov a1181, [bp + 6]
75:		add a1181, [bp + 10]
77:	

printString$23:	; Deref £temporary1631 -> £temporary1632 £temporary1632 0
79:	

printString$24:	; Parameter 12 £temporary1631 -> £temporary1632 6
80:		mov t1182, [a1181]
81:		mov [bp + 18], t1182
83:	

printString$25:	; Call 12 printChar 0
84:		mov word [bp + 12], printString$26
85:		mov [bp + 14], bp
86:		add bp, 12
87:		jmp printChar
89:	

printString$26:	; PostCall 12
91:	

printString$27:	; Increment index
92:		inc word [bp + 10]
94:	

printString$28:	; Goto 15
95:		jmp printString$15
97:	

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
99:	

printString$30:	; Parameter 10 60 6
100:		mov byte [bp + 16], 60
102:	

printString$31:	; Call 10 printChar 0
103:		mov word [bp + 10], printString$32
104:		mov [bp + 12], bp
105:		add bp, 10
106:		jmp printChar
108:	

printString$32:	; PostCall 10
110:	

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
112:	

printString$34:	; Parameter 10 78 6
113:		mov byte [bp + 16], 78
115:	

printString$35:	; Call 10 printChar 0
116:		mov word [bp + 10], printString$36
117:		mov [bp + 12], bp
118:		add bp, 10
119:		jmp printChar
121:	

printString$36:	; PostCall 10
123:	

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
125:	

printString$38:	; Parameter 10 85 6
126:		mov byte [bp + 16], 85
128:	

printString$39:	; Call 10 printChar 0
129:		mov word [bp + 10], printString$40
130:		mov [bp + 12], bp
131:		add bp, 10
132:		jmp printChar
134:	

printString$40:	; PostCall 10
136:	

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
138:	

printString$42:	; Parameter 10 76 6
139:		mov byte [bp + 16], 76
141:	

printString$43:	; Call 10 printChar 0
142:		mov word [bp + 10], printString$44
143:		mov [bp + 12], bp
144:		add bp, 10
145:		jmp printChar
147:	

printString$44:	; PostCall 10
149:	

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
151:	

printString$46:	; Parameter 10 76 6
152:		mov byte [bp + 16], 76
154:	

printString$47:	; Call 10 printChar 0
155:		mov word [bp + 10], printString$48
156:		mov [bp + 12], bp
157:		add bp, 10
158:		jmp printChar
160:	

printString$48:	; PostCall 10
162:	

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
164:	

printString$50:	; Parameter 10 62 6
165:		mov byte [bp + 16], 62
167:	

printString$51:	; Call 10 printChar 0
168:		mov word [bp + 10], printString$52
169:		mov [bp + 12], bp
170:		add bp, 10
171:		jmp printChar
173:	

printString$52:	; PostCall 10
175:	

printString$53:	; Return 0
176:		mov t1183, [bp]
177:		mov di, [bp + 4]
178:		mov bp, [bp + 2]
179:		jmp t1183
181:	

printString$54:	; FunctionEnd printString
1:	

printLongIntRec:	; Equal 15 longValue 0
2:		cmp dword [bp + 6], 0
3:		je printLongIntRec$15
5:	

printLongIntRec$1:	; SignedModulo £temporary1649 longValue 10
6:		mov a1184, [bp + 6]
8:		xor edx, edx
9:		idiv dword [@3712$int4$10#]
15:	

printLongIntRec$2:	; IntegralToIntegral £temporary1650 £temporary1649
18:		cmp t1186, 0
19:		jge printLongIntRec$3
20:		neg t1186
22:		neg t1186
24:	

printLongIntRec$3:	; Assign digit £temporary1650
25:		mov [bp + 10], t1186
27:	

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
29:	

printLongIntRec$5:	; SignedDivide £temporary1651 longValue 10
30:		mov a1187, [bp + 6]
32:		xor edx, edx
33:		idiv dword [@3717$int4$10#]
39:	

printLongIntRec$6:	; Parameter 12 £temporary1651 6
40:		mov [bp + 18], t1190
42:	

printLongIntRec$7:	; Call 12 printLongIntRec 0
43:		mov word [bp + 12], printLongIntRec$8
44:		mov [bp + 14], bp
45:		add bp, 12
46:		jmp printLongIntRec
48:	

printLongIntRec$8:	; PostCall 12
50:	

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
52:	

printLongIntRec$10:	; BinaryAdd £temporary1653 digit 48
53:		mov a1191, [bp + 10]
54:		add a1191, 48
56:	

printLongIntRec$11:	; IntegralToIntegral £temporary1654 £temporary1653
59:		cmp a1191, 0
60:		jge printLongIntRec$12
61:		neg a1191
63:		neg a1191
65:	

printLongIntRec$12:	; Parameter 12 £temporary1654 6
66:		mov [bp + 18], a1191
68:	

printLongIntRec$13:	; Call 12 printChar 0
69:		mov word [bp + 12], printLongIntRec$14
70:		mov [bp + 14], bp
71:		add bp, 12
72:		jmp printChar
74:	

printLongIntRec$14:	; PostCall 12
76:	

printLongIntRec$15:	; Return 0
77:		mov t1192, [bp]
78:		mov di, [bp + 4]
79:		mov bp, [bp + 2]
80:		jmp t1192
82:	

printLongIntRec$16:	; FunctionEnd printLongIntRec
1:	

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
2:		cmp dword [bp + 6], 0
3:		jge printLongInt$8
5:	

printLongInt$1:	; UnarySubtract £temporary1659 longValue
6:		mov a1193, [bp + 6]
7:		neg a1193
9:	

printLongInt$2:	; Assign longValue £temporary1659
10:		mov [bp + 6], a1193
12:	

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

printLongInt$4:	; Parameter 14 45 6
15:		mov byte [bp + 20], 45
17:	

printLongInt$5:	; Call 14 printChar 0
18:		mov word [bp + 14], printLongInt$6
19:		mov [bp + 16], bp
20:		add bp, 14
21:		jmp printChar
23:	

printLongInt$6:	; PostCall 14
25:	

printLongInt$7:	; Goto 19
26:		jmp printLongInt$19
28:	

printLongInt$8:	; Equal 14 space 0
29:		cmp word [bp + 12], 0
30:		je printLongInt$14
32:	

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
34:	

printLongInt$10:	; Parameter 14 32 6
35:		mov byte [bp + 20], 32
37:	

printLongInt$11:	; Call 14 printChar 0
38:		mov word [bp + 14], printLongInt$12
39:		mov [bp + 16], bp
40:		add bp, 14
41:		jmp printChar
43:	

printLongInt$12:	; PostCall 14
45:	

printLongInt$13:	; Goto 19
46:		jmp printLongInt$19
48:	

printLongInt$14:	; Equal 19 plus 0
49:		cmp word [bp + 10], 0
50:		je printLongInt$19
52:	

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
54:	

printLongInt$16:	; Parameter 14 43 6
55:		mov byte [bp + 20], 43
57:	

printLongInt$17:	; Call 14 printChar 0
58:		mov word [bp + 14], printLongInt$18
59:		mov [bp + 16], bp
60:		add bp, 14
61:		jmp printChar
63:	

printLongInt$18:	; PostCall 14
65:	

printLongInt$19:	; NotEqual 25 longValue 0
66:		cmp dword [bp + 6], 0
67:		jne printLongInt$25
69:	

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
71:	

printLongInt$21:	; Parameter 14 48 6
72:		mov byte [bp + 20], 48
74:	

printLongInt$22:	; Call 14 printChar 0
75:		mov word [bp + 14], printLongInt$23
76:		mov [bp + 16], bp
77:		add bp, 14
78:		jmp printChar
80:	

printLongInt$23:	; PostCall 14
82:	

printLongInt$24:	; Goto 29
83:		jmp printLongInt$29
85:	

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
87:	

printLongInt$26:	; Parameter 14 longValue 6
88:		mov a1194, [bp + 6]
89:		mov [bp + 20], a1194
91:	

printLongInt$27:	; Call 14 printLongIntRec 0
92:		mov word [bp + 14], printLongInt$28
93:		mov [bp + 16], bp
94:		add bp, 14
95:		jmp printLongIntRec
97:	

printLongInt$28:	; PostCall 14
99:	

printLongInt$29:	; Return 0
100:		mov t1195, [bp]
101:		mov di, [bp + 4]
102:		mov bp, [bp + 2]
103:		jmp t1195
105:	

printLongInt$30:	; FunctionEnd printLongInt
1:	

digitToChar:	; SignedGreaterThanEqual 5 digit 10
2:		cmp word [bp + 6], 10
3:		jge digitToChar$5
5:	

digitToChar$1:	; BinaryAdd £temporary1674 digit 48
6:		mov a1196, [bp + 6]
7:		add a1196, 48
9:	

digitToChar$2:	; IntegralToIntegral £temporary1675 £temporary1674
12:		cmp a1196, 0
13:		jge digitToChar$3
14:		neg a1196
16:		neg a1196
18:	

digitToChar$3:	; SetReturnValue £temporary1675
20:	

digitToChar$4:	; Return £temporary1675
21:		mov t1197, [bp]
22:		mov di, [bp + 4]
23:		mov bp, [bp + 2]
24:		jmp t1197
26:	

digitToChar$5:	; Equal 11 capital 0
27:		cmp word [bp + 8], 0
28:		je digitToChar$11
30:	

digitToChar$6:	; BinarySubtract £temporary1676 digit 10
31:		mov a1198, [bp + 6]
32:		sub a1198, 10
34:	

digitToChar$7:	; BinaryAdd £temporary1677 £temporary1676 65
35:		add a1198, 65
37:	

digitToChar$8:	; IntegralToIntegral £temporary1678 £temporary1677
40:		cmp a1198, 0
41:		jge digitToChar$9
42:		neg a1198
44:		neg a1198
46:	

digitToChar$9:	; SetReturnValue £temporary1678
48:	

digitToChar$10:	; Return £temporary1678
49:		mov t1199, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t1199
54:	

digitToChar$11:	; BinarySubtract £temporary1679 digit 10
55:		mov a1200, [bp + 6]
56:		sub a1200, 10
58:	

digitToChar$12:	; BinaryAdd £temporary1680 £temporary1679 97
59:		add a1200, 97
61:	

digitToChar$13:	; IntegralToIntegral £temporary1681 £temporary1680
64:		cmp a1200, 0
65:		jge digitToChar$14
66:		neg a1200
68:		neg a1200
70:	

digitToChar$14:	; SetReturnValue £temporary1681
72:	

digitToChar$15:	; Return £temporary1681
73:		mov t1201, [bp]
74:		mov di, [bp + 4]
75:		mov bp, [bp + 2]
76:		jmp t1201
78:	

digitToChar$16:	; FunctionEnd digitToChar
1:	

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
2:		cmp dword [bp + 6], 0
3:		jbe printUnsignedLongRec$22
5:	

printUnsignedLongRec$1:	; UnsignedModulo £temporary1684 unsignedValue base
6:		mov a1202, [bp + 6]
8:		xor edx, edx
9:		div dword [bp + 10]
15:	

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1685 £temporary1684
18:	

printUnsignedLongRec$3:	; Assign digit £temporary1685
19:		mov [bp + 16], t1204
21:	

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
23:	

printUnsignedLongRec$5:	; UnsignedDivide £temporary1686 unsignedValue base
24:		mov a1205, [bp + 6]
26:		xor edx, edx
27:		div dword [bp + 10]
33:	

printUnsignedLongRec$6:	; Parameter 18 £temporary1686 6
34:		mov [bp + 24], t1208
36:	

printUnsignedLongRec$7:	; Parameter 18 base 10
37:		mov a1209, [bp + 10]
38:		mov [bp + 28], a1209
40:	

printUnsignedLongRec$8:	; Parameter 18 capital 14
41:		mov a1210, [bp + 14]
42:		mov [bp + 32], a1210
44:	

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
45:		mov word [bp + 18], printUnsignedLongRec$10
46:		mov [bp + 20], bp
47:		add bp, 18
48:		jmp printUnsignedLongRec
50:	

printUnsignedLongRec$10:	; PostCall 18
52:	

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
54:	

printUnsignedLongRec$12:	; Parameter 18 digit 6
55:		mov a1211, [bp + 16]
56:		mov [bp + 24], a1211
58:	

printUnsignedLongRec$13:	; Parameter 18 capital 8
59:		mov a1212, [bp + 14]
60:		mov [bp + 26], a1212
62:	

printUnsignedLongRec$14:	; Call 18 digitToChar 0
63:		mov word [bp + 18], printUnsignedLongRec$15
64:		mov [bp + 20], bp
65:		add bp, 18
66:		jmp digitToChar
68:	

printUnsignedLongRec$15:	; PostCall 18
70:	

printUnsignedLongRec$16:	; GetReturnValue £temporary1688
75:	

printUnsignedLongRec$17:	; Assign c £temporary1688
76:		mov [bp + 18], t1214
78:	

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
80:	

printUnsignedLongRec$19:	; Parameter 19 c 6
81:		mov a1215, [bp + 18]
82:		mov [bp + 25], a1215
84:	

printUnsignedLongRec$20:	; Call 19 printChar 0
85:		mov word [bp + 19], printUnsignedLongRec$21
86:		mov [bp + 21], bp
87:		add bp, 19
88:		jmp printChar
90:	

printUnsignedLongRec$21:	; PostCall 19
92:	

printUnsignedLongRec$22:	; Return 0
93:		mov t1216, [bp]
94:		mov di, [bp + 4]
95:		mov bp, [bp + 2]
96:		jmp t1216
98:	

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec
1:	

printUnsignedLong:	; Equal 5 plus 0
2:		cmp word [bp + 10], 0
3:		je printUnsignedLong$5
5:	

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
7:	

printUnsignedLong$2:	; Parameter 22 43 6
8:		mov byte [bp + 28], 43
10:	

printUnsignedLong$3:	; Call 22 printChar 0
11:		mov word [bp + 22], printUnsignedLong$4
12:		mov [bp + 24], bp
13:		add bp, 22
14:		jmp printChar
16:	

printUnsignedLong$4:	; PostCall 22
18:	

printUnsignedLong$5:	; Equal 10 space 0
19:		cmp word [bp + 12], 0
20:		je printUnsignedLong$10
22:	

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
24:	

printUnsignedLong$7:	; Parameter 22 32 6
25:		mov byte [bp + 28], 32
27:	

printUnsignedLong$8:	; Call 22 printChar 0
28:		mov word [bp + 22], printUnsignedLong$9
29:		mov [bp + 24], bp
30:		add bp, 22
31:		jmp printChar
33:	

printUnsignedLong$9:	; PostCall 22
35:	

printUnsignedLong$10:	; Equal 29 grid 0
36:		cmp word [bp + 14], 0
37:		je printUnsignedLong$29
39:	

printUnsignedLong$11:	; NotEqual 16 base 8
40:		cmp dword [bp + 16], 8
41:		jne printUnsignedLong$16
43:	

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
45:	

printUnsignedLong$13:	; Parameter 22 48 6
46:		mov byte [bp + 28], 48
48:	

printUnsignedLong$14:	; Call 22 printChar 0
49:		mov word [bp + 22], printUnsignedLong$15
50:		mov [bp + 24], bp
51:		add bp, 22
52:		jmp printChar
54:	

printUnsignedLong$15:	; PostCall 22
56:	

printUnsignedLong$16:	; NotEqual 29 base 16
57:		cmp dword [bp + 16], 16
58:		jne printUnsignedLong$29
60:	

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
62:	

printUnsignedLong$18:	; Parameter 22 48 6
63:		mov byte [bp + 28], 48
65:	

printUnsignedLong$19:	; Call 22 printChar 0
66:		mov word [bp + 22], printUnsignedLong$20
67:		mov [bp + 24], bp
68:		add bp, 22
69:		jmp printChar
71:	

printUnsignedLong$20:	; PostCall 22
73:	

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
75:	

printUnsignedLong$22:	; Equal 25 capital 0
76:		cmp word [bp + 20], 0
77:		je printUnsignedLong$25
79:	

printUnsignedLong$23:	; Assign £temporary1708 88
80:		mov t1217, 88
82:	

printUnsignedLong$24:	; Goto 26
83:		jmp printUnsignedLong$26
85:	

printUnsignedLong$25:	; Assign £temporary1708 120
86:		mov t1218, 120
88:	

printUnsignedLong$26:	; Parameter 22 £temporary1708 6
89:		mov [bp + 28], t1218
91:	

printUnsignedLong$27:	; Call 22 printChar 0
92:		mov word [bp + 22], printUnsignedLong$28
93:		mov [bp + 24], bp
94:		add bp, 22
95:		jmp printChar
97:	

printUnsignedLong$28:	; PostCall 22
99:	

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
100:		cmp dword [bp + 6], 0
101:		jne printUnsignedLong$35
103:	

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
105:	

printUnsignedLong$31:	; Parameter 22 48 6
106:		mov byte [bp + 28], 48
108:	

printUnsignedLong$32:	; Call 22 printChar 0
109:		mov word [bp + 22], printUnsignedLong$33
110:		mov [bp + 24], bp
111:		add bp, 22
112:		jmp printChar
114:	

printUnsignedLong$33:	; PostCall 22
116:	

printUnsignedLong$34:	; Goto 41
117:		jmp printUnsignedLong$41
119:	

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
121:	

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
122:		mov a1219, [bp + 6]
123:		mov [bp + 28], a1219
125:	

printUnsignedLong$37:	; Parameter 22 base 10
126:		mov a1220, [bp + 16]
127:		mov [bp + 32], a1220
129:	

printUnsignedLong$38:	; Parameter 22 capital 14
130:		mov a1221, [bp + 20]
131:		mov [bp + 36], a1221
133:	

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
134:		mov word [bp + 22], printUnsignedLong$40
135:		mov [bp + 24], bp
136:		add bp, 22
137:		jmp printUnsignedLongRec
139:	

printUnsignedLong$40:	; PostCall 22
141:	

printUnsignedLong$41:	; Return 0
142:		mov t1222, [bp]
143:		mov di, [bp + 4]
144:		mov bp, [bp + 2]
145:		jmp t1222
147:	

printUnsignedLong$42:	; FunctionEnd printUnsignedLong
1:	

printLongDoubleFraction:	; PushFloat longDoubleValue
2:		fld qword [bp + 6]
4:	

printLongDoubleFraction$1:	; PushFloat longDoubleValue
5:		fld qword [bp + 6]
7:	

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1723 longDoubleValue
8:		fistp dword [container4bytes#]
9:		mov t1223, [container4bytes#]
11:	

printLongDoubleFraction$3:	; IntegralToFloating £temporary1724 £temporary1723
12:		mov [container4bytes#], t1223
13:		fild dword [container4bytes#]
15:	

printLongDoubleFraction$4:	; BinarySubtract £temporary1725 longDoubleValue £temporary1724
16:		fsub
18:	

printLongDoubleFraction$5:	; PopFloat longDoubleValue
19:		fstp qword [bp + 6]
21:	

printLongDoubleFraction$6:	; NotEqual 8 precision 0
22:		cmp word [bp + 16], 0
23:		jne printLongDoubleFraction$8
25:	

printLongDoubleFraction$7:	; Assign precision 6
26:		mov word [bp + 16], 6
28:	

printLongDoubleFraction$8:	; NotEqual 10 grid 0
29:		cmp word [bp + 14], 0
30:		jne printLongDoubleFraction$10
32:	

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
33:		cmp word [bp + 16], 0
34:		jle printLongDoubleFraction$14
36:	

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
38:	

printLongDoubleFraction$11:	; Parameter 18 46 6
39:		mov byte [bp + 24], 46
41:	

printLongDoubleFraction$12:	; Call 18 printChar 0
42:		mov word [bp + 18], printLongDoubleFraction$13
43:		mov [bp + 20], bp
44:		add bp, 18
45:		jmp printChar
47:	

printLongDoubleFraction$13:	; PostCall 18
49:	

printLongDoubleFraction$14:	; Assign £temporary1731 precision
50:		mov t1224, [bp + 16]
52:	

printLongDoubleFraction$15:	; Decrement precision
53:		dec word [bp + 16]
55:	

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1731 0
56:		cmp t1224, 0
57:		jle printLongDoubleFraction$35
59:	

printLongDoubleFraction$17:	; PushFloat 10.0
60:		fld qword [@3876$float8$10.0#]
62:	

printLongDoubleFraction$18:	; PushFloat longDoubleValue
63:		fld qword [bp + 6]
65:	

printLongDoubleFraction$19:	; SignedMultiply £temporary1733 10.0 longDoubleValue
66:		fmul
68:	

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
69:		fstp qword [bp + 18]
71:	

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
72:		fld qword [bp + 18]
74:	

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1734 longDoubleValue10
75:		fistp word [container2bytes#]
76:		mov t1225, [container2bytes#]
78:	

printLongDoubleFraction$23:	; Assign digitValue £temporary1734
79:		mov [bp + 26], t1225
81:	

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
83:	

printLongDoubleFraction$25:	; BinaryAdd £temporary1735 digitValue 48
84:		mov a1226, [bp + 26]
85:		add a1226, 48
87:	

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1736 £temporary1735
90:		cmp a1226, 0
91:		jge printLongDoubleFraction$27
92:		neg a1226
94:		neg a1226
96:	

printLongDoubleFraction$27:	; Parameter 28 £temporary1736 6
97:		mov [bp + 34], a1226
99:	

printLongDoubleFraction$28:	; Call 28 printChar 0
100:		mov word [bp + 28], printLongDoubleFraction$29
101:		mov [bp + 30], bp
102:		add bp, 28
103:		jmp printChar
105:	

printLongDoubleFraction$29:	; PostCall 28
107:	

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
108:		fld qword [bp + 18]
110:	

printLongDoubleFraction$31:	; IntegralToFloating £temporary1738 digitValue
111:		fild word [bp + 26]
113:	

printLongDoubleFraction$32:	; BinarySubtract £temporary1739 longDoubleValue10 £temporary1738
114:		fsub
116:	

printLongDoubleFraction$33:	; PopFloat longDoubleValue
117:		fstp qword [bp + 6]
119:	

printLongDoubleFraction$34:	; Goto 14
120:		jmp printLongDoubleFraction$14
122:	

printLongDoubleFraction$35:	; Return 0
123:		mov t1227, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp t1227
128:	

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction
1:	

printLongDoublePlain:	; PushFloat longDoubleValue
2:		fld qword [bp + 6]
4:	

printLongDoublePlain$1:	; PushFloat 0.0
5:		fldz
7:	

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
8:		fcompp
9:		fstsw ax
10:		sahf
11:		jbe printLongDoublePlain$12
13:	

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
15:	

printLongDoublePlain$4:	; Parameter 22 45 6
16:		mov byte [bp + 28], 45
18:	

printLongDoublePlain$5:	; Call 22 printChar 0
19:		mov word [bp + 22], printLongDoublePlain$6
20:		mov [bp + 24], bp
21:		add bp, 22
22:		jmp printChar
24:	

printLongDoublePlain$6:	; PostCall 22
26:	

printLongDoublePlain$7:	; PushFloat longDoubleValue
27:		fld qword [bp + 6]
29:	

printLongDoublePlain$8:	; UnarySubtract £temporary1744 longDoubleValue
30:		fchs
32:	

printLongDoublePlain$9:	; PopFloat longDoubleValue
33:		fstp qword [bp + 6]
35:	

printLongDoublePlain$10:	; Assign plus 0
36:		mov word [bp + 14], 0
38:	

printLongDoublePlain$11:	; Assign space 0
39:		mov word [bp + 16], 0
41:	

printLongDoublePlain$12:	; PushFloat longDoubleValue
42:		fld qword [bp + 6]
44:	

printLongDoublePlain$13:	; FloatingToIntegral £temporary1745 longDoubleValue
45:		fistp dword [container4bytes#]
46:		mov t1228, [container4bytes#]
48:	

printLongDoublePlain$14:	; Assign longValue £temporary1745
49:		mov [bp + 22], t1228
51:	

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
53:	

printLongDoublePlain$16:	; Parameter 26 longValue 6
54:		mov a1229, [bp + 22]
55:		mov [bp + 32], a1229
57:	

printLongDoublePlain$17:	; Parameter 26 plus 10
58:		mov a1230, [bp + 14]
59:		mov [bp + 36], a1230
61:	

printLongDoublePlain$18:	; Parameter 26 space 12
62:		mov a1231, [bp + 16]
63:		mov [bp + 38], a1231
65:	

printLongDoublePlain$19:	; Call 26 printLongInt 0
66:		mov word [bp + 26], printLongDoublePlain$20
67:		mov [bp + 28], bp
68:		add bp, 26
69:		jmp printLongInt
71:	

printLongDoublePlain$20:	; PostCall 26
73:	

printLongDoublePlain$21:	; PushFloat longDoubleValue
74:		fld qword [bp + 6]
76:	

printLongDoublePlain$22:	; IntegralToFloating £temporary1747 longValue
77:		fild dword [bp + 22]
79:	

printLongDoublePlain$23:	; BinarySubtract £temporary1748 longDoubleValue £temporary1747
80:		fsub
82:	

printLongDoublePlain$24:	; PopFloat longDoubleValue
83:		fstp qword [bp + 6]
85:	

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
87:	

printLongDoublePlain$26:	; PushFloat longDoubleValue
88:		fld qword [bp + 6]
90:	

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
91:		fstp qword [bp + 32]
93:	

printLongDoublePlain$28:	; Parameter 26 grid 14
94:		mov a1232, [bp + 18]
95:		mov [bp + 40], a1232
97:	

printLongDoublePlain$29:	; Parameter 26 precision 16
98:		mov a1233, [bp + 20]
99:		mov [bp + 42], a1233
101:	

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
102:		mov word [bp + 26], printLongDoublePlain$31
103:		mov [bp + 28], bp
104:		add bp, 26
105:		jmp printLongDoubleFraction
107:	

printLongDoublePlain$31:	; PostCall 26
109:	

printLongDoublePlain$32:	; Return 0
110:		mov t1234, [bp]
111:		mov di, [bp + 4]
112:		mov bp, [bp + 2]
113:		jmp t1234
115:	

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain
1:	

printLongDoubleExpo:	; PushFloat value
2:		fld qword [bp + 6]
4:	

printLongDoubleExpo$1:	; PushFloat 0.0
5:		fldz
7:	

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
8:		fcompp
9:		fstsw ax
10:		sahf
11:		jne printLongDoubleExpo$27
13:	

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
15:	

printLongDoubleExpo$4:	; Parameter 24 48 6
16:		mov byte [bp + 30], 48
18:	

printLongDoubleExpo$5:	; Call 24 printChar 0
19:		mov word [bp + 24], printLongDoubleExpo$6
20:		mov [bp + 26], bp
21:		add bp, 24
22:		jmp printChar
24:	

printLongDoubleExpo$6:	; PostCall 24
26:	

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
28:	

printLongDoubleExpo$8:	; PushFloat 0.0
29:		fldz
31:	

printLongDoubleExpo$9:	; Parameter 24 0.0 6
32:		fstp qword [bp + 30]
34:	

printLongDoubleExpo$10:	; Parameter 24 precision 14
35:		mov a1235, [bp + 20]
36:		mov [bp + 38], a1235
38:	

printLongDoubleExpo$11:	; Parameter 24 grid 16
39:		mov a1236, [bp + 18]
40:		mov [bp + 40], a1236
42:	

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
43:		mov word [bp + 24], printLongDoubleExpo$13
44:		mov [bp + 26], bp
45:		add bp, 24
46:		jmp printLongDoubleFraction
48:	

printLongDoubleExpo$13:	; PostCall 24
50:	

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
52:	

printLongDoubleExpo$15:	; Equal 18 capital 0
53:		cmp word [bp + 22], 0
54:		je printLongDoubleExpo$18
56:	

printLongDoubleExpo$16:	; Assign £temporary1764 69
57:		mov t1237, 69
59:	

printLongDoubleExpo$17:	; Goto 19
60:		jmp printLongDoubleExpo$19
62:	

printLongDoubleExpo$18:	; Assign £temporary1764 101
63:		mov t1238, 101
65:	

printLongDoubleExpo$19:	; Parameter 24 £temporary1764 6
66:		mov [bp + 30], t1238
68:	

printLongDoubleExpo$20:	; Call 24 printChar 0
69:		mov word [bp + 24], printLongDoubleExpo$21
70:		mov [bp + 26], bp
71:		add bp, 24
72:		jmp printChar
74:	

printLongDoubleExpo$21:	; PostCall 24
76:	

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
78:	

printLongDoubleExpo$23:	; Parameter 24 48 6
79:		mov byte [bp + 30], 48
81:	

printLongDoubleExpo$24:	; Call 24 printChar 0
82:		mov word [bp + 24], printLongDoubleExpo$25
83:		mov [bp + 26], bp
84:		add bp, 24
85:		jmp printChar
87:	

printLongDoubleExpo$25:	; PostCall 24
89:	

printLongDoubleExpo$26:	; Goto 80
90:		jmp printLongDoubleExpo$80
92:	

printLongDoubleExpo$27:	; PushFloat value
93:		fld qword [bp + 6]
95:	

printLongDoubleExpo$28:	; PushFloat 0.0
96:		fldz
98:	

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
99:		fcompp
100:		fstsw ax
101:		sahf
102:		jbe printLongDoubleExpo$37
104:	

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
106:	

printLongDoubleExpo$31:	; Parameter 24 45 6
107:		mov byte [bp + 30], 45
109:	

printLongDoubleExpo$32:	; Call 24 printChar 0
110:		mov word [bp + 24], printLongDoubleExpo$33
111:		mov [bp + 26], bp
112:		add bp, 24
113:		jmp printChar
115:	

printLongDoubleExpo$33:	; PostCall 24
117:	

printLongDoubleExpo$34:	; PushFloat value
118:		fld qword [bp + 6]
120:	

printLongDoubleExpo$35:	; UnarySubtract £temporary1769 value
121:		fchs
123:	

printLongDoubleExpo$36:	; PopFloat value
124:		fstp qword [bp + 6]
126:	

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
128:	

printLongDoubleExpo$38:	; PushFloat value
129:		fld qword [bp + 6]
131:	

printLongDoubleExpo$39:	; Parameter 24 value 6
132:		fstp qword [bp + 30]
134:	

printLongDoubleExpo$40:	; Call 24 log10 0
135:		mov word [bp + 24], printLongDoubleExpo$41
136:		mov [bp + 26], bp
137:		add bp, 24
138:		jmp log10
140:	

printLongDoubleExpo$41:	; PostCall 24
142:	

printLongDoubleExpo$42:	; GetReturnValue £temporary1770
144:	

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1771 £temporary1770
145:		fistp word [container2bytes#]
146:		mov t1239, [container2bytes#]
148:	

printLongDoubleExpo$44:	; Assign expo £temporary1771
149:		mov [bp + 24], t1239
151:	

printLongDoubleExpo$45:	; PushFloat value
152:		fld qword [bp + 6]
154:	

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
155:		fstp qword [bp + 26]
157:	

printLongDoubleExpo$47:	; PushFloat 10.0
158:		fld qword [@3952$float8$10.0#]
160:	

printLongDoubleExpo$48:	; Parameter 26 10.0 6
161:		fstp qword [bp + 40]
163:	

printLongDoubleExpo$49:	; IntegralToFloating £temporary1772 expo
164:		fild word [bp + 24]
166:	

printLongDoubleExpo$50:	; Parameter 26 £temporary1772 14
167:		fstp qword [bp + 48]
169:	

printLongDoubleExpo$51:	; Call 26 pow 0
170:		mov word [bp + 34], printLongDoubleExpo$52
171:		mov [bp + 36], bp
172:		add bp, 34
173:		jmp pow
175:	

printLongDoubleExpo$52:	; PostCall 26
176:		fstp qword [bp + 34]
177:		fld qword [bp + 26]
178:		fld qword [bp + 34]
180:	

printLongDoubleExpo$53:	; GetReturnValue £temporary1773
182:	

printLongDoubleExpo$54:	; SignedDivide £temporary1774 value £temporary1773
183:		fdiv
185:	

printLongDoubleExpo$55:	; PopFloat value
186:		fstp qword [bp + 6]
188:	

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
190:	

printLongDoubleExpo$57:	; PushFloat value
191:		fld qword [bp + 6]
193:	

printLongDoubleExpo$58:	; Parameter 26 value 6
194:		fstp qword [bp + 32]
196:	

printLongDoubleExpo$59:	; Parameter 26 plus 14
197:		mov a1240, [bp + 14]
198:		mov [bp + 40], a1240
200:	

printLongDoubleExpo$60:	; Parameter 26 space 16
201:		mov a1241, [bp + 16]
202:		mov [bp + 42], a1241
204:	

printLongDoubleExpo$61:	; Parameter 26 grid 18
205:		mov a1242, [bp + 18]
206:		mov [bp + 44], a1242
208:	

printLongDoubleExpo$62:	; Parameter 26 precision 20
209:		mov a1243, [bp + 20]
210:		mov [bp + 46], a1243
212:	

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
213:		mov word [bp + 26], printLongDoubleExpo$64
214:		mov [bp + 28], bp
215:		add bp, 26
216:		jmp printLongDoublePlain
218:	

printLongDoubleExpo$64:	; PostCall 26
220:	

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
222:	

printLongDoubleExpo$66:	; Equal 69 capital 0
223:		cmp word [bp + 22], 0
224:		je printLongDoubleExpo$69
226:	

printLongDoubleExpo$67:	; Assign £temporary1780 69
227:		mov t1244, 69
229:	

printLongDoubleExpo$68:	; Goto 70
230:		jmp printLongDoubleExpo$70
232:	

printLongDoubleExpo$69:	; Assign £temporary1780 101
233:		mov t1245, 101
235:	

printLongDoubleExpo$70:	; Parameter 26 £temporary1780 6
236:		mov [bp + 32], t1245
238:	

printLongDoubleExpo$71:	; Call 26 printChar 0
239:		mov word [bp + 26], printLongDoubleExpo$72
240:		mov [bp + 28], bp
241:		add bp, 26
242:		jmp printChar
244:	

printLongDoubleExpo$72:	; PostCall 26
246:	

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
248:	

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1782 expo
249:		mov a1246, [bp + 24]
251:		and a1246, 65535
253:		cmp a1246, 0
254:		jge printLongDoubleExpo$75
255:		neg a1246
257:		neg a1246
259:	

printLongDoubleExpo$75:	; Parameter 26 £temporary1782 6
260:		mov [bp + 32], a1246
262:	

printLongDoubleExpo$76:	; Parameter 26 1 10
263:		mov word [bp + 36], 1
265:	

printLongDoubleExpo$77:	; Parameter 26 0 12
266:		mov word [bp + 38], 0
268:	

printLongDoubleExpo$78:	; Call 26 printLongInt 0
269:		mov word [bp + 26], printLongDoubleExpo$79
270:		mov [bp + 28], bp
271:		add bp, 26
272:		jmp printLongInt
274:	

printLongDoubleExpo$79:	; PostCall 26
276:	

printLongDoubleExpo$80:	; Return 0
277:		mov t1247, [bp]
278:		mov di, [bp + 4]
279:		mov bp, [bp + 2]
280:		jmp t1247
282:	

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo
1:	

checkWidthAndPrecision:	; Equal 9 widthPtr 0
2:		cmp word [bp + 8], 0
3:		je checkWidthAndPrecision$9
5:	

checkWidthAndPrecision$1:	; Deref £temporary1804 -> widthPtr widthPtr 0
6:		mov a1248, [bp + 8]
8:	

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1804 -> widthPtr -1
9:		cmp word [a1248], -1
10:		jne checkWidthAndPrecision$9
12:	

checkWidthAndPrecision$3:	; Deref £temporary1807 -> widthPtr widthPtr 0
13:		mov a1249, [bp + 8]
15:	

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
16:		add word [bp + 6], 2
18:	

checkWidthAndPrecision$5:	; BinarySubtract £temporary1809 arg_list 2
19:		mov a1250, [bp + 6]
20:		sub a1250, 2
22:	

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1810 £temporary1809
25:	

checkWidthAndPrecision$7:	; Deref £temporary1811 -> £temporary1810 £temporary1810 0
27:	

checkWidthAndPrecision$8:	; Assign £temporary1807 -> widthPtr £temporary1811 -> £temporary1810
28:		mov t1251, [a1250]
29:		mov [a1249], t1251
31:	

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
32:		cmp word [bp + 10], 0
33:		je checkWidthAndPrecision$18
35:	

checkWidthAndPrecision$10:	; Deref £temporary1813 -> precisionPtr precisionPtr 0
36:		mov a1252, [bp + 10]
38:	

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1813 -> precisionPtr -1
39:		cmp word [a1252], -1
40:		jne checkWidthAndPrecision$18
42:	

checkWidthAndPrecision$12:	; Deref £temporary1816 -> precisionPtr precisionPtr 0
43:		mov a1253, [bp + 10]
45:	

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
46:		add word [bp + 6], 2
48:	

checkWidthAndPrecision$14:	; BinarySubtract £temporary1818 arg_list 2
49:		mov a1254, [bp + 6]
50:		sub a1254, 2
52:	

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1819 £temporary1818
55:	

checkWidthAndPrecision$16:	; Deref £temporary1820 -> £temporary1819 £temporary1819 0
57:	

checkWidthAndPrecision$17:	; Assign £temporary1816 -> precisionPtr £temporary1820 -> £temporary1819
58:		mov t1255, [a1254]
59:		mov [a1253], t1255
61:	

checkWidthAndPrecision$18:	; SetReturnValue arg_list
62:		mov a1256, [bp + 6]
64:	

checkWidthAndPrecision$19:	; Return arg_list
65:		mov t1257, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t1257
70:	

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision
1:	

printArgument:	; Deref £temporary1821 -> format format 0
2:		mov a1258, [bp + 6]
4:	

printArgument$1:	; Assign c £temporary1821 -> format
5:		mov t1259, [a1258]
6:		mov [bp + 30], t1259
8:	

printArgument$2:	; Case 21 c 100
9:		mov a1260, [bp + 30]
10:		cmp a1260, 100
11:		je printArgument$21
13:	

printArgument$3:	; Case 21 c 105
14:		cmp a1260, 105
15:		je printArgument$21
17:	

printArgument$4:	; Case 73 c 99
18:		cmp a1260, 99
19:		je printArgument$73
21:	

printArgument$5:	; Case 93 c 115
22:		cmp a1260, 115
23:		je printArgument$93
25:	

printArgument$6:	; Case 113 c 88
26:		cmp a1260, 88
27:		je printArgument$113
29:	

printArgument$7:	; Case 113 c 120
30:		cmp a1260, 120
31:		je printArgument$113
33:	

printArgument$8:	; Case 113 c 98
34:		cmp a1260, 98
35:		je printArgument$113
37:	

printArgument$9:	; Case 113 c 111
38:		cmp a1260, 111
39:		je printArgument$113
41:	

printArgument$10:	; Case 113 c 117
42:		cmp a1260, 117
43:		je printArgument$113
45:	

printArgument$11:	; Case 173 c 71
46:		cmp a1260, 71
47:		je printArgument$173
49:	

printArgument$12:	; Case 173 c 103
50:		cmp a1260, 103
51:		je printArgument$173
53:	

printArgument$13:	; Case 173 c 69
54:		cmp a1260, 69
55:		je printArgument$173
57:	

printArgument$14:	; Case 173 c 101
58:		cmp a1260, 101
59:		je printArgument$173
61:	

printArgument$15:	; Case 173 c 102
62:		cmp a1260, 102
63:		je printArgument$173
65:	

printArgument$16:	; Case 299 c 112
66:		cmp a1260, 112
67:		je printArgument$299
69:	

printArgument$17:	; Case 325 c 110
70:		cmp a1260, 110
71:		je printArgument$325
73:	

printArgument$18:	; Case 347 c 37
74:		cmp a1260, 37
75:		je printArgument$347
77:	

printArgument$19:	; CaseEnd c
79:	

printArgument$20:	; Goto 360
80:		jmp printArgument$360
82:	

printArgument$21:	; Equal 30 shortInt 0
83:		cmp word [bp + 20], 0
84:		je printArgument$30
86:	

printArgument$22:	; BinaryAdd arg_list arg_list 2
87:		add word [bp + 8], 2
89:	

printArgument$23:	; BinarySubtract £temporary1823 arg_list 2
90:		mov a1261, [bp + 8]
91:		sub a1261, 2
93:	

printArgument$24:	; IntegralToIntegral £temporary1824 £temporary1823
96:	

printArgument$25:	; Deref £temporary1825 -> £temporary1824 £temporary1824 0
98:	

printArgument$26:	; IntegralToIntegral £temporary1826 £temporary1825 -> £temporary1824
99:		mov t1262, [a1261]
102:		cmp t1262, 0
103:		jge printArgument$27
104:		neg t1262
106:		neg t1262
108:	

printArgument$27:	; IntegralToIntegral £temporary1827 £temporary1826
110:		and t1262, 255
112:		cmp t1262, 0
113:		jge printArgument$28
114:		neg t1262
116:		neg t1262
118:	

printArgument$28:	; Assign longValue £temporary1827
119:		mov [bp + 44], t1262
121:	

printArgument$29:	; Goto 43
122:		jmp printArgument$43
124:	

printArgument$30:	; Equal 37 longInt 0
125:		cmp word [bp + 22], 0
126:		je printArgument$37
128:	

printArgument$31:	; BinaryAdd arg_list arg_list 4
129:		add word [bp + 8], 4
131:	

printArgument$32:	; BinarySubtract £temporary1829 arg_list 4
132:		mov a1263, [bp + 8]
133:		sub a1263, 4
135:	

printArgument$33:	; IntegralToIntegral £temporary1830 £temporary1829
138:	

printArgument$34:	; Deref £temporary1831 -> £temporary1830 £temporary1830 0
140:	

printArgument$35:	; Assign longValue £temporary1831 -> £temporary1830
141:		mov t1264, [a1263]
142:		mov [bp + 44], t1264
144:	

printArgument$36:	; Goto 43
145:		jmp printArgument$43
147:	

printArgument$37:	; BinaryAdd arg_list arg_list 2
148:		add word [bp + 8], 2
150:	

printArgument$38:	; BinarySubtract £temporary1833 arg_list 2
151:		mov a1265, [bp + 8]
152:		sub a1265, 2
154:	

printArgument$39:	; IntegralToIntegral £temporary1834 £temporary1833
157:	

printArgument$40:	; Deref £temporary1835 -> £temporary1834 £temporary1834 0
159:	

printArgument$41:	; IntegralToIntegral £temporary1836 £temporary1835 -> £temporary1834
160:		mov t1266, [a1265]
162:		and t1266, 65535
164:		cmp t1266, 0
165:		jge printArgument$42
166:		neg t1266
168:		neg t1266
170:	

printArgument$42:	; Assign longValue £temporary1836
171:		mov [bp + 44], t1266
173:	

printArgument$43:	; Equal 50 negativePtr 0
174:		cmp word [bp + 28], 0
175:		je printArgument$50
177:	

printArgument$44:	; Deref £temporary1840 -> negativePtr negativePtr 0
178:		mov a1267, [bp + 28]
180:	

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
181:		cmp dword [bp + 44], 0
182:		jge printArgument$48
184:	

printArgument$46:	; Assign £temporary1842 1
185:		mov t1268, 1
187:	

printArgument$47:	; Goto 49
188:		jmp printArgument$49
190:	

printArgument$48:	; Assign £temporary1842 0
191:		mov t1269, 0
193:	

printArgument$49:	; Assign £temporary1840 -> negativePtr £temporary1842
194:		mov [a1267], t1269
196:	

printArgument$50:	; NotEqual 57 sign 0
197:		cmp word [bp + 26], 0
198:		jne printArgument$57
200:	

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
202:	

printArgument$52:	; Parameter 48 longValue 6
203:		mov a1270, [bp + 44]
204:		mov [bp + 54], a1270
206:	

printArgument$53:	; Call 48 labs 0
207:		mov word [bp + 48], printArgument$54
208:		mov [bp + 50], bp
209:		add bp, 48
210:		jmp labs
212:	

printArgument$54:	; PostCall 48
214:	

printArgument$55:	; GetReturnValue £temporary1845
219:	

printArgument$56:	; Assign longValue £temporary1845
220:		mov [bp + 44], t1272
222:	

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
224:	

printArgument$58:	; Parameter 48 arg_list 6
225:		mov a1273, [bp + 8]
226:		mov [bp + 54], a1273
228:	

printArgument$59:	; Parameter 48 widthPtr 8
229:		mov a1274, [bp + 16]
230:		mov [bp + 56], a1274
232:	

printArgument$60:	; address £temporary1846 precision
233:		mov t1275, bp
234:		add t1275, 18
236:	

printArgument$61:	; Parameter 48 £temporary1846 10
237:		mov [bp + 58], t1275
239:	

printArgument$62:	; Call 48 checkWidthAndPrecision 0
240:		mov word [bp + 48], printArgument$63
241:		mov [bp + 50], bp
242:		add bp, 48
243:		jmp checkWidthAndPrecision
245:	

printArgument$63:	; PostCall 48
247:	

printArgument$64:	; GetReturnValue £temporary1847
252:	

printArgument$65:	; Assign arg_list £temporary1847
253:		mov [bp + 8], t1277
255:	

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
257:	

printArgument$67:	; Parameter 48 longValue 6
258:		mov a1278, [bp + 44]
259:		mov [bp + 54], a1278
261:	

printArgument$68:	; Parameter 48 plus 10
262:		mov a1279, [bp + 10]
263:		mov [bp + 58], a1279
265:	

printArgument$69:	; Parameter 48 space 12
266:		mov a1280, [bp + 12]
267:		mov [bp + 60], a1280
269:	

printArgument$70:	; Call 48 printLongInt 0
270:		mov word [bp + 48], printArgument$71
271:		mov [bp + 50], bp
272:		add bp, 48
273:		jmp printLongInt
275:	

printArgument$71:	; PostCall 48
277:	

printArgument$72:	; Goto 360
278:		jmp printArgument$360
280:	

printArgument$73:	; BinaryAdd arg_list arg_list 2
281:		add word [bp + 8], 2
283:	

printArgument$74:	; BinarySubtract £temporary1850 arg_list 2
284:		mov a1281, [bp + 8]
285:		sub a1281, 2
287:	

printArgument$75:	; IntegralToIntegral £temporary1851 £temporary1850
290:	

printArgument$76:	; Deref £temporary1852 -> £temporary1851 £temporary1851 0
292:	

printArgument$77:	; IntegralToIntegral £temporary1853 £temporary1852 -> £temporary1851
293:		mov t1282, [a1281]
296:		cmp t1282, 0
297:		jge printArgument$78
298:		neg t1282
300:		neg t1282
302:	

printArgument$78:	; Assign charValue £temporary1853
303:		mov [bp + 31], t1282
305:	

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
307:	

printArgument$80:	; Parameter 44 arg_list 6
308:		mov a1283, [bp + 8]
309:		mov [bp + 50], a1283
311:	

printArgument$81:	; Parameter 44 widthPtr 8
312:		mov a1284, [bp + 16]
313:		mov [bp + 52], a1284
315:	

printArgument$82:	; address £temporary1854 precision
316:		mov t1285, bp
317:		add t1285, 18
319:	

printArgument$83:	; Parameter 44 £temporary1854 10
320:		mov [bp + 54], t1285
322:	

printArgument$84:	; Call 44 checkWidthAndPrecision 0
323:		mov word [bp + 44], printArgument$85
324:		mov [bp + 46], bp
325:		add bp, 44
326:		jmp checkWidthAndPrecision
328:	

printArgument$85:	; PostCall 44
330:	

printArgument$86:	; GetReturnValue £temporary1855
335:	

printArgument$87:	; Assign arg_list £temporary1855
336:		mov [bp + 8], t1287
338:	

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
340:	

printArgument$89:	; Parameter 44 charValue 6
341:		mov a1288, [bp + 31]
342:		mov [bp + 50], a1288
344:	

printArgument$90:	; Call 44 printChar 0
345:		mov word [bp + 44], printArgument$91
346:		mov [bp + 46], bp
347:		add bp, 44
348:		jmp printChar
350:	

printArgument$91:	; PostCall 44
352:	

printArgument$92:	; Goto 360
353:		jmp printArgument$360
355:	

printArgument$93:	; BinaryAdd arg_list arg_list 2
356:		add word [bp + 8], 2
358:	

printArgument$94:	; BinarySubtract £temporary1858 arg_list 2
359:		mov a1289, [bp + 8]
360:		sub a1289, 2
362:	

printArgument$95:	; IntegralToIntegral £temporary1859 £temporary1858
365:	

printArgument$96:	; Deref £temporary1860 -> £temporary1859 £temporary1859 0
367:	

printArgument$97:	; Assign stringValue £temporary1860 -> £temporary1859
368:		mov t1290, [a1289]
369:		mov [bp + 44], t1290
371:	

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
373:	

printArgument$99:	; Parameter 46 arg_list 6
374:		mov a1291, [bp + 8]
375:		mov [bp + 52], a1291
377:	

printArgument$100:	; Parameter 46 widthPtr 8
378:		mov a1292, [bp + 16]
379:		mov [bp + 54], a1292
381:	

printArgument$101:	; address £temporary1861 precision
382:		mov t1293, bp
383:		add t1293, 18
385:	

printArgument$102:	; Parameter 46 £temporary1861 10
386:		mov [bp + 56], t1293
388:	

printArgument$103:	; Call 46 checkWidthAndPrecision 0
389:		mov word [bp + 46], printArgument$104
390:		mov [bp + 48], bp
391:		add bp, 46
392:		jmp checkWidthAndPrecision
394:	

printArgument$104:	; PostCall 46
396:	

printArgument$105:	; GetReturnValue £temporary1862
401:	

printArgument$106:	; Assign arg_list £temporary1862
402:		mov [bp + 8], t1295
404:	

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
406:	

printArgument$108:	; Parameter 46 stringValue 6
407:		mov a1296, [bp + 44]
408:		mov [bp + 52], a1296
410:	

printArgument$109:	; Parameter 46 precision 8
411:		mov a1297, [bp + 18]
412:		mov [bp + 54], a1297
414:	

printArgument$110:	; Call 46 printString 0
415:		mov word [bp + 46], printArgument$111
416:		mov [bp + 48], bp
417:		add bp, 46
418:		jmp printString
420:	

printArgument$111:	; PostCall 46
422:	

printArgument$112:	; Goto 360
423:		jmp printArgument$360
425:	

printArgument$113:	; NotEqual 116 c 117
426:		cmp byte [bp + 30], 117
427:		jne printArgument$116
429:	

printArgument$114:	; Assign £temporary1878 10
430:		mov t1298, 10
432:	

printArgument$115:	; Goto 125
433:		jmp printArgument$125
435:	

printArgument$116:	; NotEqual 119 c 111
436:		cmp byte [bp + 30], 111
437:		jne printArgument$119
439:	

printArgument$117:	; Assign £temporary1874 8
440:		mov t1299, 8
442:	

printArgument$118:	; Goto 124
443:		jmp printArgument$124
445:	

printArgument$119:	; NotEqual 122 c 98
446:		cmp byte [bp + 30], 98
447:		jne printArgument$122
449:	

printArgument$120:	; Assign £temporary1870 2
450:		mov t1300, 2
452:	

printArgument$121:	; Goto 123
453:		jmp printArgument$123
455:	

printArgument$122:	; Assign £temporary1870 16
456:		mov t1301, 16
458:	

printArgument$123:	; Assign £temporary1874 £temporary1870
460:	

printArgument$124:	; Assign £temporary1878 £temporary1874
462:	

printArgument$125:	; Assign base £temporary1878
463:		mov [bp + 44], t1301
465:	

printArgument$126:	; Equal 135 shortInt 0
466:		cmp word [bp + 20], 0
467:		je printArgument$135
469:	

printArgument$127:	; BinaryAdd arg_list arg_list 2
470:		add word [bp + 8], 2
472:	

printArgument$128:	; BinarySubtract £temporary1880 arg_list 2
473:		mov a1304, [bp + 8]
474:		sub a1304, 2
476:	

printArgument$129:	; IntegralToIntegral £temporary1881 £temporary1880
479:	

printArgument$130:	; Deref £temporary1882 -> £temporary1881 £temporary1881 0
481:	

printArgument$131:	; IntegralToIntegral £temporary1883 £temporary1882 -> £temporary1881
482:		mov t1305, [a1304]
485:	

printArgument$132:	; IntegralToIntegral £temporary1884 £temporary1883
487:		and t1305, 255
489:	

printArgument$133:	; Assign value £temporary1884
490:		mov [bp + 48], t1305
492:	

printArgument$134:	; Goto 148
493:		jmp printArgument$148
495:	

printArgument$135:	; Equal 142 longInt 0
496:		cmp word [bp + 22], 0
497:		je printArgument$142
499:	

printArgument$136:	; BinaryAdd arg_list arg_list 4
500:		add word [bp + 8], 4
502:	

printArgument$137:	; BinarySubtract £temporary1886 arg_list 4
503:		mov a1306, [bp + 8]
504:		sub a1306, 4
506:	

printArgument$138:	; IntegralToIntegral £temporary1887 £temporary1886
509:	

printArgument$139:	; Deref £temporary1888 -> £temporary1887 £temporary1887 0
511:	

printArgument$140:	; Assign value £temporary1888 -> £temporary1887
512:		mov t1307, [a1306]
513:		mov [bp + 48], t1307
515:	

printArgument$141:	; Goto 148
516:		jmp printArgument$148
518:	

printArgument$142:	; BinaryAdd arg_list arg_list 2
519:		add word [bp + 8], 2
521:	

printArgument$143:	; BinarySubtract £temporary1890 arg_list 2
522:		mov a1308, [bp + 8]
523:		sub a1308, 2
525:	

printArgument$144:	; IntegralToIntegral £temporary1891 £temporary1890
528:	

printArgument$145:	; Deref £temporary1892 -> £temporary1891 £temporary1891 0
530:	

printArgument$146:	; IntegralToIntegral £temporary1893 £temporary1892 -> £temporary1891
531:		mov t1309, [a1308]
533:		and t1309, 65535
535:	

printArgument$147:	; Assign value £temporary1893
536:		mov [bp + 48], t1309
538:	

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
540:	

printArgument$149:	; Parameter 52 arg_list 6
541:		mov a1310, [bp + 8]
542:		mov [bp + 58], a1310
544:	

printArgument$150:	; Parameter 52 widthPtr 8
545:		mov a1311, [bp + 16]
546:		mov [bp + 60], a1311
548:	

printArgument$151:	; address £temporary1896 precision
549:		mov t1312, bp
550:		add t1312, 18
552:	

printArgument$152:	; Parameter 52 £temporary1896 10
553:		mov [bp + 62], t1312
555:	

printArgument$153:	; Call 52 checkWidthAndPrecision 0
556:		mov word [bp + 52], printArgument$154
557:		mov [bp + 54], bp
558:		add bp, 52
559:		jmp checkWidthAndPrecision
561:	

printArgument$154:	; PostCall 52
563:	

printArgument$155:	; GetReturnValue £temporary1897
568:	

printArgument$156:	; Assign arg_list £temporary1897
569:		mov [bp + 8], t1314
571:	

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
573:	

printArgument$158:	; Parameter 52 value 6
574:		mov a1315, [bp + 48]
575:		mov [bp + 58], a1315
577:	

printArgument$159:	; Parameter 52 plus 10
578:		mov a1316, [bp + 10]
579:		mov [bp + 62], a1316
581:	

printArgument$160:	; Parameter 52 space 12
582:		mov a1317, [bp + 12]
583:		mov [bp + 64], a1317
585:	

printArgument$161:	; Parameter 52 grid 14
586:		mov a1318, [bp + 14]
587:		mov [bp + 66], a1318
589:	

printArgument$162:	; Parameter 52 base 16
590:		mov a1319, [bp + 44]
591:		mov [bp + 68], a1319
593:	

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
595:	

printArgument$164:	; IntegralToIntegral £temporary1898 c
596:		mov a1320, [bp + 30]
598:		and a1320, 255
600:		cmp a1320, 0
601:		jge printArgument$165
602:		neg a1320
604:		neg a1320
606:	

printArgument$165:	; Parameter 52 £temporary1898 26
607:		mov [bp + 78], a1320
609:	

printArgument$166:	; Call 52 isupper 20
610:		mov word [bp + 72], printArgument$167
611:		mov [bp + 74], bp
612:		add bp, 72
613:		jmp isupper
615:	

printArgument$167:	; PostCall 52
617:	

printArgument$168:	; GetReturnValue £temporary1899
622:	

printArgument$169:	; Parameter 52 £temporary1899 20
623:		mov [bp + 72], t1322
625:	

printArgument$170:	; Call 52 printUnsignedLong 0
626:		mov word [bp + 52], printArgument$171
627:		mov [bp + 54], bp
628:		add bp, 52
629:		jmp printUnsignedLong
631:	

printArgument$171:	; PostCall 52
633:	

printArgument$172:	; Goto 360
634:		jmp printArgument$360
636:	

printArgument$173:	; Equal 190 longDouble 0
637:		cmp word [bp + 24], 0
638:		je printArgument$190
640:	

printArgument$174:	; BinaryAdd arg_list arg_list 8
641:		add word [bp + 8], 8
643:	

printArgument$175:	; BinarySubtract £temporary1902 arg_list 8
644:		mov a1323, [bp + 8]
645:		sub a1323, 8
647:	

printArgument$176:	; IntegralToIntegral £temporary1903 £temporary1902
650:	

printArgument$177:	; Deref £temporary1904 -> £temporary1903 £temporary1903 0
652:	

printArgument$178:	; PushFloat £temporary1904 -> £temporary1903
653:		fld qword [a1323]
655:	

printArgument$179:	; PopFloat longDoubleValue
656:		fstp qword [bp + 34]
658:	

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
660:	

printArgument$181:	; PushFloat longDoubleValue
661:		fld qword [bp + 34]
663:	

printArgument$182:	; Parameter 44 longDoubleValue 6
664:		fstp qword [bp + 50]
666:	

printArgument$183:	; Parameter 44 0 14
667:		mov word [bp + 58], 0
669:	

printArgument$184:	; Parameter 44 0 16
670:		mov word [bp + 60], 0
672:	

printArgument$185:	; Parameter 44 0 18
673:		mov word [bp + 62], 0
675:	

printArgument$186:	; Parameter 44 3 20
676:		mov word [bp + 64], 3
678:	

printArgument$187:	; Call 44 printLongDoublePlain 0
679:		mov word [bp + 44], printArgument$188
680:		mov [bp + 46], bp
681:		add bp, 44
682:		jmp printLongDoublePlain
684:	

printArgument$188:	; PostCall 44
686:	

printArgument$189:	; Goto 196
687:		jmp printArgument$196
689:	

printArgument$190:	; BinaryAdd arg_list arg_list 8
690:		add word [bp + 8], 8
692:	

printArgument$191:	; BinarySubtract £temporary1907 arg_list 8
693:		mov a1324, [bp + 8]
694:		sub a1324, 8
696:	

printArgument$192:	; IntegralToIntegral £temporary1908 £temporary1907
699:	

printArgument$193:	; Deref £temporary1909 -> £temporary1908 £temporary1908 0
701:	

printArgument$194:	; PushFloat £temporary1909 -> £temporary1908
702:		fld qword [a1324]
704:	

printArgument$195:	; PopFloat longDoubleValue
705:		fstp qword [bp + 34]
707:	

printArgument$196:	; Equal 205 negativePtr 0
708:		cmp word [bp + 28], 0
709:		je printArgument$205
711:	

printArgument$197:	; Deref £temporary1913 -> negativePtr negativePtr 0
712:		mov a1325, [bp + 28]
714:	

printArgument$198:	; PushFloat longDoubleValue
715:		fld qword [bp + 34]
717:	

printArgument$199:	; PushZero
718:		fldz
720:	

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
721:		fcompp
722:		fstsw ax
723:		sahf
724:		jbe printArgument$203
726:	

printArgument$201:	; Assign £temporary1915 1
727:		mov t1326, 1
729:	

printArgument$202:	; Goto 204
730:		jmp printArgument$204
732:	

printArgument$203:	; Assign £temporary1915 0
733:		mov t1327, 0
735:	

printArgument$204:	; Assign £temporary1913 -> negativePtr £temporary1915
736:		mov [a1325], t1327
738:	

printArgument$205:	; NotEqual 213 sign 0
739:		cmp word [bp + 26], 0
740:		jne printArgument$213
742:	

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
744:	

printArgument$207:	; PushFloat longDoubleValue
745:		fld qword [bp + 34]
747:	

printArgument$208:	; Parameter 44 longDoubleValue 6
748:		fstp qword [bp + 50]
750:	

printArgument$209:	; Call 44 fabs 0
751:		mov word [bp + 44], printArgument$210
752:		mov [bp + 46], bp
753:		add bp, 44
754:		jmp fabs
756:	

printArgument$210:	; PostCall 44
758:	

printArgument$211:	; GetReturnValue £temporary1918
760:	

printArgument$212:	; PopFloat longDoubleValue
761:		fstp qword [bp + 34]
763:	

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
765:	

printArgument$214:	; Parameter 44 arg_list 6
766:		mov a1328, [bp + 8]
767:		mov [bp + 50], a1328
769:	

printArgument$215:	; Parameter 44 widthPtr 8
770:		mov a1329, [bp + 16]
771:		mov [bp + 52], a1329
773:	

printArgument$216:	; address £temporary1919 precision
774:		mov t1330, bp
775:		add t1330, 18
777:	

printArgument$217:	; Parameter 44 £temporary1919 10
778:		mov [bp + 54], t1330
780:	

printArgument$218:	; Call 44 checkWidthAndPrecision 0
781:		mov word [bp + 44], printArgument$219
782:		mov [bp + 46], bp
783:		add bp, 44
784:		jmp checkWidthAndPrecision
786:	

printArgument$219:	; PostCall 44
788:	

printArgument$220:	; GetReturnValue £temporary1920
793:	

printArgument$221:	; Assign arg_list £temporary1920
794:		mov [bp + 8], t1332
796:	

printArgument$222:	; NotEqual 233 c 102
797:		cmp byte [bp + 30], 102
798:		jne printArgument$233
800:	

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
802:	

printArgument$224:	; PushFloat longDoubleValue
803:		fld qword [bp + 34]
805:	

printArgument$225:	; Parameter 44 longDoubleValue 6
806:		fstp qword [bp + 50]
808:	

printArgument$226:	; Parameter 44 plus 14
809:		mov a1333, [bp + 10]
810:		mov [bp + 58], a1333
812:	

printArgument$227:	; Parameter 44 space 16
813:		mov a1334, [bp + 12]
814:		mov [bp + 60], a1334
816:	

printArgument$228:	; Parameter 44 grid 18
817:		mov a1335, [bp + 14]
818:		mov [bp + 62], a1335
820:	

printArgument$229:	; Parameter 44 precision 20
821:		mov a1336, [bp + 18]
822:		mov [bp + 64], a1336
824:	

printArgument$230:	; Call 44 printLongDoublePlain 0
825:		mov word [bp + 44], printArgument$231
826:		mov [bp + 46], bp
827:		add bp, 44
828:		jmp printLongDoublePlain
830:	

printArgument$231:	; PostCall 44
832:	

printArgument$232:	; Goto 360
833:		jmp printArgument$360
835:	

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
837:	

printArgument$234:	; IntegralToIntegral £temporary1923 c
838:		mov a1337, [bp + 30]
840:		and a1337, 255
842:		cmp a1337, 0
843:		jge printArgument$235
844:		neg a1337
846:		neg a1337
848:	

printArgument$235:	; Parameter 44 £temporary1923 6
849:		mov [bp + 50], a1337
851:	

printArgument$236:	; Call 44 tolower 0
852:		mov word [bp + 44], printArgument$237
853:		mov [bp + 46], bp
854:		add bp, 44
855:		jmp tolower
857:	

printArgument$237:	; PostCall 44
859:	

printArgument$238:	; GetReturnValue £temporary1924
864:	

printArgument$239:	; NotEqual 257 £temporary1924 101
865:		cmp t1339, 101
866:		jne printArgument$257
868:	

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
870:	

printArgument$241:	; PushFloat longDoubleValue
871:		fld qword [bp + 34]
873:	

printArgument$242:	; Parameter 44 longDoubleValue 6
874:		fstp qword [bp + 50]
876:	

printArgument$243:	; Parameter 44 plus 14
877:		mov a1340, [bp + 10]
878:		mov [bp + 58], a1340
880:	

printArgument$244:	; Parameter 44 space 16
881:		mov a1341, [bp + 12]
882:		mov [bp + 60], a1341
884:	

printArgument$245:	; Parameter 44 grid 18
885:		mov a1342, [bp + 14]
886:		mov [bp + 62], a1342
888:	

printArgument$246:	; Parameter 44 precision 20
889:		mov a1343, [bp + 18]
890:		mov [bp + 64], a1343
892:	

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
894:	

printArgument$248:	; IntegralToIntegral £temporary1926 c
895:		mov a1344, [bp + 30]
897:		and a1344, 255
899:		cmp a1344, 0
900:		jge printArgument$249
901:		neg a1344
903:		neg a1344
905:	

printArgument$249:	; Parameter 44 £temporary1926 28
906:		mov [bp + 72], a1344
908:	

printArgument$250:	; Call 44 isupper 22
909:		mov word [bp + 66], printArgument$251
910:		mov [bp + 68], bp
911:		add bp, 66
912:		jmp isupper
914:	

printArgument$251:	; PostCall 44
916:	

printArgument$252:	; GetReturnValue £temporary1927
921:	

printArgument$253:	; Parameter 44 £temporary1927 22
922:		mov [bp + 66], t1346
924:	

printArgument$254:	; Call 44 printLongDoubleExpo 0
925:		mov word [bp + 44], printArgument$255
926:		mov [bp + 46], bp
927:		add bp, 44
928:		jmp printLongDoubleExpo
930:	

printArgument$255:	; PostCall 44
932:	

printArgument$256:	; Goto 360
933:		jmp printArgument$360
935:	

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
937:	

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
939:	

printArgument$259:	; PushFloat longDoubleValue
940:		fld qword [bp + 34]
942:	

printArgument$260:	; Parameter 44 longDoubleValue 6
943:		fstp qword [bp + 50]
945:	

printArgument$261:	; Call 44 fabs 0
946:		mov word [bp + 44], printArgument$262
947:		mov [bp + 46], bp
948:		add bp, 44
949:		jmp fabs
951:	

printArgument$262:	; PostCall 44
953:	

printArgument$263:	; GetReturnValue £temporary1929
955:	

printArgument$264:	; Parameter 44 £temporary1929 6
956:		fstp qword [bp + 50]
958:	

printArgument$265:	; Call 44 log10 0
959:		mov word [bp + 44], printArgument$266
960:		mov [bp + 46], bp
961:		add bp, 44
962:		jmp log10
964:	

printArgument$266:	; PostCall 44
966:	

printArgument$267:	; GetReturnValue £temporary1930
968:	

printArgument$268:	; FloatingToIntegral £temporary1931 £temporary1930
969:		fistp word [container2bytes#]
970:		mov t1347, [container2bytes#]
972:	

printArgument$269:	; Assign expo £temporary1931
973:		mov [bp + 44], t1347
975:	

printArgument$270:	; SignedLessThan 282 expo -3
976:		cmp word [bp + 44], -3
977:		jl printArgument$282
979:	

printArgument$271:	; SignedGreaterThan 282 expo 2
980:		cmp word [bp + 44], 2
981:		jg printArgument$282
983:	

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
985:	

printArgument$273:	; PushFloat longDoubleValue
986:		fld qword [bp + 34]
988:	

printArgument$274:	; Parameter 46 longDoubleValue 6
989:		fstp qword [bp + 52]
991:	

printArgument$275:	; Parameter 46 plus 14
992:		mov a1348, [bp + 10]
993:		mov [bp + 60], a1348
995:	

printArgument$276:	; Parameter 46 space 16
996:		mov a1349, [bp + 12]
997:		mov [bp + 62], a1349
999:	

printArgument$277:	; Parameter 46 grid 18
1000:		mov a1350, [bp + 14]
1001:		mov [bp + 64], a1350
1003:	

printArgument$278:	; Parameter 46 precision 20
1004:		mov a1351, [bp + 18]
1005:		mov [bp + 66], a1351
1007:	

printArgument$279:	; Call 46 printLongDoublePlain 0
1008:		mov word [bp + 46], printArgument$280
1009:		mov [bp + 48], bp
1010:		add bp, 46
1011:		jmp printLongDoublePlain
1013:	

printArgument$280:	; PostCall 46
1015:	

printArgument$281:	; Goto 360
1016:		jmp printArgument$360
1018:	

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1020:	

printArgument$283:	; PushFloat longDoubleValue
1021:		fld qword [bp + 34]
1023:	

printArgument$284:	; Parameter 46 longDoubleValue 6
1024:		fstp qword [bp + 52]
1026:	

printArgument$285:	; Parameter 46 plus 14
1027:		mov a1352, [bp + 10]
1028:		mov [bp + 60], a1352
1030:	

printArgument$286:	; Parameter 46 space 16
1031:		mov a1353, [bp + 12]
1032:		mov [bp + 62], a1353
1034:	

printArgument$287:	; Parameter 46 grid 18
1035:		mov a1354, [bp + 14]
1036:		mov [bp + 64], a1354
1038:	

printArgument$288:	; Parameter 46 precision 20
1039:		mov a1355, [bp + 18]
1040:		mov [bp + 66], a1355
1042:	

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1044:	

printArgument$290:	; IntegralToIntegral £temporary1936 c
1045:		mov a1356, [bp + 30]
1047:		and a1356, 255
1049:		cmp a1356, 0
1050:		jge printArgument$291
1051:		neg a1356
1053:		neg a1356
1055:	

printArgument$291:	; Parameter 46 £temporary1936 28
1056:		mov [bp + 74], a1356
1058:	

printArgument$292:	; Call 46 isupper 22
1059:		mov word [bp + 68], printArgument$293
1060:		mov [bp + 70], bp
1061:		add bp, 68
1062:		jmp isupper
1064:	

printArgument$293:	; PostCall 46
1066:	

printArgument$294:	; GetReturnValue £temporary1937
1071:	

printArgument$295:	; Parameter 46 £temporary1937 22
1072:		mov [bp + 68], t1358
1074:	

printArgument$296:	; Call 46 printLongDoubleExpo 0
1075:		mov word [bp + 46], printArgument$297
1076:		mov [bp + 48], bp
1077:		add bp, 46
1078:		jmp printLongDoubleExpo
1080:	

printArgument$297:	; PostCall 46
1082:	

printArgument$298:	; Goto 360
1083:		jmp printArgument$360
1085:	

printArgument$299:	; BinaryAdd arg_list arg_list 2
1086:		add word [bp + 8], 2
1088:	

printArgument$300:	; BinarySubtract £temporary1940 arg_list 2
1089:		mov a1359, [bp + 8]
1090:		sub a1359, 2
1092:	

printArgument$301:	; IntegralToIntegral £temporary1941 £temporary1940
1095:	

printArgument$302:	; Deref £temporary1942 -> £temporary1941 £temporary1941 0
1097:	

printArgument$303:	; Assign ptrValue £temporary1942 -> £temporary1941
1098:		mov t1360, [a1359]
1099:		mov [bp + 42], t1360
1101:	

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1103:	

printArgument$305:	; Parameter 44 arg_list 6
1104:		mov a1361, [bp + 8]
1105:		mov [bp + 50], a1361
1107:	

printArgument$306:	; Parameter 44 widthPtr 8
1108:		mov a1362, [bp + 16]
1109:		mov [bp + 52], a1362
1111:	

printArgument$307:	; address £temporary1943 precision
1112:		mov t1363, bp
1113:		add t1363, 18
1115:	

printArgument$308:	; Parameter 44 £temporary1943 10
1116:		mov [bp + 54], t1363
1118:	

printArgument$309:	; Call 44 checkWidthAndPrecision 0
1119:		mov word [bp + 44], printArgument$310
1120:		mov [bp + 46], bp
1121:		add bp, 44
1122:		jmp checkWidthAndPrecision
1124:	

printArgument$310:	; PostCall 44
1126:	

printArgument$311:	; GetReturnValue £temporary1944
1131:	

printArgument$312:	; Assign arg_list £temporary1944
1132:		mov [bp + 8], t1365
1134:	

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1136:	

printArgument$314:	; IntegralToIntegral £temporary1945 ptrValue
1137:		mov a1366, [bp + 42]
1140:	

printArgument$315:	; IntegralToIntegral £temporary1946 £temporary1945
1142:		and a1366, 65535
1144:	

printArgument$316:	; Parameter 44 £temporary1946 6
1145:		mov [bp + 50], a1366
1147:	

printArgument$317:	; Parameter 44 0 10
1148:		mov word [bp + 54], 0
1150:	

printArgument$318:	; Parameter 44 0 12
1151:		mov word [bp + 56], 0
1153:	

printArgument$319:	; Parameter 44 0 14
1154:		mov word [bp + 58], 0
1156:	

printArgument$320:	; Parameter 44 10 16
1157:		mov dword [bp + 60], 10
1159:	

printArgument$321:	; Parameter 44 0 20
1160:		mov word [bp + 64], 0
1162:	

printArgument$322:	; Call 44 printUnsignedLong 0
1163:		mov word [bp + 44], printArgument$323
1164:		mov [bp + 46], bp
1165:		add bp, 44
1166:		jmp printUnsignedLong
1168:	

printArgument$323:	; PostCall 44
1170:	

printArgument$324:	; Goto 360
1171:		jmp printArgument$360
1173:	

printArgument$325:	; BinaryAdd arg_list arg_list 2
1174:		add word [bp + 8], 2
1176:	

printArgument$326:	; BinarySubtract £temporary1949 arg_list 2
1177:		mov a1367, [bp + 8]
1178:		sub a1367, 2
1180:	

printArgument$327:	; IntegralToIntegral £temporary1950 £temporary1949
1183:	

printArgument$328:	; Deref £temporary1951 -> £temporary1950 £temporary1950 0
1185:	

printArgument$329:	; Assign ptrValue £temporary1951 -> £temporary1950
1186:		mov t1368, [a1367]
1187:		mov [bp + 42], t1368
1189:	

printArgument$330:	; BinaryAdd arg_list arg_list 2
1190:		add word [bp + 8], 2
1192:	

printArgument$331:	; BinarySubtract £temporary1953 arg_list 2
1193:		mov a1369, [bp + 8]
1194:		sub a1369, 2
1196:	

printArgument$332:	; IntegralToIntegral £temporary1954 £temporary1953
1199:	

printArgument$333:	; Deref £temporary1955 -> £temporary1954 £temporary1954 0
1201:	

printArgument$334:	; Assign intPtr £temporary1955 -> £temporary1954
1202:		mov t1370, [a1369]
1203:		mov [bp + 32], t1370
1205:	

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1207:	

printArgument$336:	; Parameter 44 arg_list 6
1208:		mov a1371, [bp + 8]
1209:		mov [bp + 50], a1371
1211:	

printArgument$337:	; Parameter 44 widthPtr 8
1212:		mov a1372, [bp + 16]
1213:		mov [bp + 52], a1372
1215:	

printArgument$338:	; address £temporary1956 precision
1216:		mov t1373, bp
1217:		add t1373, 18
1219:	

printArgument$339:	; Parameter 44 £temporary1956 10
1220:		mov [bp + 54], t1373
1222:	

printArgument$340:	; Call 44 checkWidthAndPrecision 0
1223:		mov word [bp + 44], printArgument$341
1224:		mov [bp + 46], bp
1225:		add bp, 44
1226:		jmp checkWidthAndPrecision
1228:	

printArgument$341:	; PostCall 44
1230:	

printArgument$342:	; GetReturnValue £temporary1957
1235:	

printArgument$343:	; Assign arg_list £temporary1957
1236:		mov [bp + 8], t1375
1238:	

printArgument$344:	; Deref £temporary1958 -> intPtr intPtr 0
1239:		mov a1376, [bp + 32]
1241:	

printArgument$345:	; Assign £temporary1958 -> intPtr g_outChars
1242:		mov a1377, [g_outChars]
1243:		mov [a1376], a1377
1245:	

printArgument$346:	; Goto 360
1246:		jmp printArgument$360
1248:	

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1250:	

printArgument$348:	; Parameter 44 arg_list 6
1251:		mov a1378, [bp + 8]
1252:		mov [bp + 50], a1378
1254:	

printArgument$349:	; Parameter 44 widthPtr 8
1255:		mov a1379, [bp + 16]
1256:		mov [bp + 52], a1379
1258:	

printArgument$350:	; address £temporary1959 precision
1259:		mov t1380, bp
1260:		add t1380, 18
1262:	

printArgument$351:	; Parameter 44 £temporary1959 10
1263:		mov [bp + 54], t1380
1265:	

printArgument$352:	; Call 44 checkWidthAndPrecision 0
1266:		mov word [bp + 44], printArgument$353
1267:		mov [bp + 46], bp
1268:		add bp, 44
1269:		jmp checkWidthAndPrecision
1271:	

printArgument$353:	; PostCall 44
1273:	

printArgument$354:	; GetReturnValue £temporary1960
1278:	

printArgument$355:	; Assign arg_list £temporary1960
1279:		mov [bp + 8], t1382
1281:	

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1283:	

printArgument$357:	; Parameter 44 37 6
1284:		mov byte [bp + 50], 37
1286:	

printArgument$358:	; Call 44 printChar 0
1287:		mov word [bp + 44], printArgument$359
1288:		mov [bp + 46], bp
1289:		add bp, 44
1290:		jmp printChar
1292:	

printArgument$359:	; PostCall 44
1294:	

printArgument$360:	; SetReturnValue arg_list
1295:		mov a1383, [bp + 8]
1297:	

printArgument$361:	; Return arg_list
1298:		mov t1384, [bp]
1299:		mov di, [bp + 4]
1300:		mov bp, [bp + 2]
1301:		jmp t1384
1303:	

printArgument$362:	; FunctionEnd printArgument
1:	

printFormat:	; Assign width 0
2:		mov word [bp + 12], 0
4:	

printFormat$1:	; Assign precision 0
5:		mov word [bp + 14], 0
7:	

printFormat$2:	; Assign percent 0
8:		mov word [bp + 16], 0
10:	

printFormat$3:	; Assign plus 0
11:		mov word [bp + 18], 0
13:	

printFormat$4:	; Assign minus 0
14:		mov word [bp + 20], 0
16:	

printFormat$5:	; Assign space 0
17:		mov word [bp + 22], 0
19:	

printFormat$6:	; Assign zero 0
20:		mov word [bp + 24], 0
22:	

printFormat$7:	; Assign grid 0
23:		mov word [bp + 26], 0
25:	

printFormat$8:	; Assign widthStar 0
26:		mov word [bp + 28], 0
28:	

printFormat$9:	; Assign period 0
29:		mov word [bp + 30], 0
31:	

printFormat$10:	; Assign precisionStar 0
32:		mov word [bp + 32], 0
34:	

printFormat$11:	; Assign shortInt 0
35:		mov word [bp + 34], 0
37:	

printFormat$12:	; Assign longInt 0
38:		mov word [bp + 36], 0
40:	

printFormat$13:	; Assign longDouble 0
41:		mov word [bp + 38], 0
43:	

printFormat$14:	; Assign g_outChars 0
44:		mov word [g_outChars], 0
46:	

printFormat$15:	; Assign index 0
47:		mov word [bp + 10], 0
49:	

printFormat$16:	; BinaryAdd £temporary2049 format index
50:		mov a1385, [bp + 6]
51:		add a1385, [bp + 10]
53:	

printFormat$17:	; Deref £temporary2048 -> £temporary2049 £temporary2049 0
55:	

printFormat$18:	; Equal 285 £temporary2048 -> £temporary2049 0
56:		cmp byte [a1385], 0
57:		je printFormat$285
59:	

printFormat$19:	; BinaryAdd £temporary2053 format index
60:		mov a1386, [bp + 6]
61:		add a1386, [bp + 10]
63:	

printFormat$20:	; Deref £temporary2052 -> £temporary2053 £temporary2053 0
65:	

printFormat$21:	; Assign c £temporary2052 -> £temporary2053
66:		mov t1387, [a1386]
67:		mov [bp + 40], t1387
69:	

printFormat$22:	; Equal 263 percent 0
70:		cmp word [bp + 16], 0
71:		je printFormat$263
73:	

printFormat$23:	; Case 52 c 43
74:		mov a1388, [bp + 40]
75:		cmp a1388, 43
76:		je printFormat$52
78:	

printFormat$24:	; Case 54 c 45
79:		cmp a1388, 45
80:		je printFormat$54
82:	

printFormat$25:	; Case 56 c 32
83:		cmp a1388, 32
84:		je printFormat$56
86:	

printFormat$26:	; Case 58 c 48
87:		cmp a1388, 48
88:		je printFormat$58
90:	

printFormat$27:	; Case 60 c 35
91:		cmp a1388, 35
92:		je printFormat$60
94:	

printFormat$28:	; Case 62 c 46
95:		cmp a1388, 46
96:		je printFormat$62
98:	

printFormat$29:	; Case 64 c 42
99:		cmp a1388, 42
100:		je printFormat$64
102:	

printFormat$30:	; Case 69 c 104
103:		cmp a1388, 104
104:		je printFormat$69
106:	

printFormat$31:	; Case 71 c 108
107:		cmp a1388, 108
108:		je printFormat$71
110:	

printFormat$32:	; Case 73 c 76
111:		cmp a1388, 76
112:		je printFormat$73
114:	

printFormat$33:	; Case 75 c 37
115:		cmp a1388, 37
116:		je printFormat$75
118:	

printFormat$34:	; Case 75 c 110
119:		cmp a1388, 110
120:		je printFormat$75
122:	

printFormat$35:	; Case 75 c 112
123:		cmp a1388, 112
124:		je printFormat$75
126:	

printFormat$36:	; Case 75 c 71
127:		cmp a1388, 71
128:		je printFormat$75
130:	

printFormat$37:	; Case 75 c 103
131:		cmp a1388, 103
132:		je printFormat$75
134:	

printFormat$38:	; Case 75 c 69
135:		cmp a1388, 69
136:		je printFormat$75
138:	

printFormat$39:	; Case 75 c 101
139:		cmp a1388, 101
140:		je printFormat$75
142:	

printFormat$40:	; Case 75 c 102
143:		cmp a1388, 102
144:		je printFormat$75
146:	

printFormat$41:	; Case 75 c 115
147:		cmp a1388, 115
148:		je printFormat$75
150:	

printFormat$42:	; Case 75 c 99
151:		cmp a1388, 99
152:		je printFormat$75
154:	

printFormat$43:	; Case 75 c 88
155:		cmp a1388, 88
156:		je printFormat$75
158:	

printFormat$44:	; Case 75 c 120
159:		cmp a1388, 120
160:		je printFormat$75
162:	

printFormat$45:	; Case 75 c 111
163:		cmp a1388, 111
164:		je printFormat$75
166:	

printFormat$46:	; Case 75 c 98
167:		cmp a1388, 98
168:		je printFormat$75
170:	

printFormat$47:	; Case 75 c 117
171:		cmp a1388, 117
172:		je printFormat$75
174:	

printFormat$48:	; Case 75 c 100
175:		cmp a1388, 100
176:		je printFormat$75
178:	

printFormat$49:	; Case 75 c 105
179:		cmp a1388, 105
180:		je printFormat$75
182:	

printFormat$50:	; CaseEnd c
184:	

printFormat$51:	; Goto 239
185:		jmp printFormat$239
187:	

printFormat$52:	; Assign plus 1
188:		mov word [bp + 18], 1
190:	

printFormat$53:	; Goto 283
191:		jmp printFormat$283
193:	

printFormat$54:	; Assign minus 1
194:		mov word [bp + 20], 1
196:	

printFormat$55:	; Goto 283
197:		jmp printFormat$283
199:	

printFormat$56:	; Assign space 1
200:		mov word [bp + 22], 1
202:	

printFormat$57:	; Goto 283
203:		jmp printFormat$283
205:	

printFormat$58:	; Assign zero 1
206:		mov word [bp + 24], 1
208:	

printFormat$59:	; Goto 283
209:		jmp printFormat$283
211:	

printFormat$60:	; Assign grid 1
212:		mov word [bp + 26], 1
214:	

printFormat$61:	; Goto 283
215:		jmp printFormat$283
217:	

printFormat$62:	; Assign period 1
218:		mov word [bp + 30], 1
220:	

printFormat$63:	; Goto 283
221:		jmp printFormat$283
223:	

printFormat$64:	; NotEqual 67 period 0
224:		cmp word [bp + 30], 0
225:		jne printFormat$67
227:	

printFormat$65:	; Assign width -1
228:		mov word [bp + 12], -1
230:	

printFormat$66:	; Goto 283
231:		jmp printFormat$283
233:	

printFormat$67:	; Assign precision -1
234:		mov word [bp + 14], -1
236:	

printFormat$68:	; Goto 283
237:		jmp printFormat$283
239:	

printFormat$69:	; Assign shortInt 1
240:		mov word [bp + 34], 1
242:	

printFormat$70:	; Goto 283
243:		jmp printFormat$283
245:	

printFormat$71:	; Assign longInt 1
246:		mov word [bp + 36], 1
248:	

printFormat$72:	; Goto 283
249:		jmp printFormat$283
251:	

printFormat$73:	; Assign longDouble 1
252:		mov word [bp + 38], 1
254:	

printFormat$74:	; Goto 283
255:		jmp printFormat$283
257:	

printFormat$75:	; Equal 107 minus 0
258:		cmp word [bp + 20], 0
259:		je printFormat$107
261:	

printFormat$76:	; Assign startChars g_outChars
262:		mov a1389, [g_outChars]
263:		mov [bp + 41], a1389
265:	

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
267:	

printFormat$78:	; BinaryAdd £temporary2057 format index
268:		mov a1390, [bp + 6]
269:		add a1390, [bp + 10]
271:	

printFormat$79:	; Deref £temporary2056 -> £temporary2057 £temporary2057 0
273:	

printFormat$80:	; address £temporary2058 £temporary2056 -> £temporary2057
275:	

printFormat$81:	; Parameter 43 £temporary2058 6
276:		mov [bp + 49], a1390
278:	

printFormat$82:	; Parameter 43 arg_list 8
279:		mov a1391, [bp + 8]
280:		mov [bp + 51], a1391
282:	

printFormat$83:	; Parameter 43 plus 10
283:		mov a1392, [bp + 18]
284:		mov [bp + 53], a1392
286:	

printFormat$84:	; Parameter 43 space 12
287:		mov a1393, [bp + 22]
288:		mov [bp + 55], a1393
290:	

printFormat$85:	; Parameter 43 grid 14
291:		mov a1394, [bp + 26]
292:		mov [bp + 57], a1394
294:	

printFormat$86:	; address £temporary2059 width
295:		mov t1395, bp
296:		add t1395, 12
298:	

printFormat$87:	; Parameter 43 £temporary2059 16
299:		mov [bp + 59], t1395
301:	

printFormat$88:	; Parameter 43 precision 18
302:		mov a1396, [bp + 14]
303:		mov [bp + 61], a1396
305:	

printFormat$89:	; Parameter 43 shortInt 20
306:		mov a1397, [bp + 34]
307:		mov [bp + 63], a1397
309:	

printFormat$90:	; Parameter 43 longInt 22
310:		mov a1398, [bp + 36]
311:		mov [bp + 65], a1398
313:	

printFormat$91:	; Parameter 43 longDouble 24
314:		mov a1399, [bp + 38]
315:		mov [bp + 67], a1399
317:	

printFormat$92:	; Parameter 43 1 26
318:		mov word [bp + 69], 1
320:	

printFormat$93:	; Parameter 43 0 28
321:		mov word [bp + 71], 0
323:	

printFormat$94:	; Call 43 printArgument 0
324:		mov word [bp + 43], printFormat$95
325:		mov [bp + 45], bp
326:		add bp, 43
327:		jmp printArgument
329:	

printFormat$95:	; PostCall 43
331:	

printFormat$96:	; GetReturnValue £temporary2060
336:	

printFormat$97:	; Assign arg_list £temporary2060
337:		mov [bp + 8], t1401
339:	

printFormat$98:	; BinarySubtract field g_outChars startChars
340:		mov a1402, [g_outChars]
341:		sub a1402, [bp + 41]
342:		mov [bp + 43], a1402
344:	

printFormat$99:	; Assign £temporary2062 field
345:		mov t1403, [bp + 43]
347:	

printFormat$100:	; Increment field
348:		inc word [bp + 43]
350:	

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2062 width
351:		cmp t1403, [bp + 12]
352:		jge printFormat$237
354:	

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
356:	

printFormat$103:	; Parameter 45 32 6
357:		mov byte [bp + 51], 32
359:	

printFormat$104:	; Call 45 printChar 0
360:		mov word [bp + 45], printFormat$105
361:		mov [bp + 47], bp
362:		add bp, 45
363:		jmp printChar
365:	

printFormat$105:	; PostCall 45
367:	

printFormat$106:	; Goto 99
368:		jmp printFormat$99
370:	

printFormat$107:	; Equal 184 zero 0
371:		cmp word [bp + 24], 0
372:		je printFormat$184
374:	

printFormat$108:	; Assign startChars g_outChars
375:		mov a1404, [g_outChars]
376:		mov [bp + 41], a1404
378:	

printFormat$109:	; Assign oldOutStatus g_outStatus
379:		mov a1405, [g_outStatus]
380:		mov [bp + 43], a1405
382:	

printFormat$110:	; Assign negative 0
383:		mov word [bp + 45], 0
385:	

printFormat$111:	; Assign g_outStatus 2
386:		mov word [g_outStatus], 2
388:	

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
390:	

printFormat$113:	; BinaryAdd £temporary2066 format index
391:		mov a1406, [bp + 6]
392:		add a1406, [bp + 10]
394:	

printFormat$114:	; Deref £temporary2065 -> £temporary2066 £temporary2066 0
396:	

printFormat$115:	; address £temporary2067 £temporary2065 -> £temporary2066
398:	

printFormat$116:	; Parameter 47 £temporary2067 6
399:		mov [bp + 53], a1406
401:	

printFormat$117:	; Parameter 47 arg_list 8
402:		mov a1407, [bp + 8]
403:		mov [bp + 55], a1407
405:	

printFormat$118:	; Parameter 47 0 10
406:		mov word [bp + 57], 0
408:	

printFormat$119:	; Parameter 47 0 12
409:		mov word [bp + 59], 0
411:	

printFormat$120:	; Parameter 47 grid 14
412:		mov a1408, [bp + 26]
413:		mov [bp + 61], a1408
415:	

printFormat$121:	; address £temporary2068 width
416:		mov t1409, bp
417:		add t1409, 12
419:	

printFormat$122:	; Parameter 47 £temporary2068 16
420:		mov [bp + 63], t1409
422:	

printFormat$123:	; Parameter 47 precision 18
423:		mov a1410, [bp + 14]
424:		mov [bp + 65], a1410
426:	

printFormat$124:	; Parameter 47 shortInt 20
427:		mov a1411, [bp + 34]
428:		mov [bp + 67], a1411
430:	

printFormat$125:	; Parameter 47 longInt 22
431:		mov a1412, [bp + 36]
432:		mov [bp + 69], a1412
434:	

printFormat$126:	; Parameter 47 longDouble 24
435:		mov a1413, [bp + 38]
436:		mov [bp + 71], a1413
438:	

printFormat$127:	; Parameter 47 0 26
439:		mov word [bp + 73], 0
441:	

printFormat$128:	; address £temporary2069 negative
442:		mov t1414, bp
443:		add t1414, 45
445:	

printFormat$129:	; Parameter 47 £temporary2069 28
446:		mov [bp + 75], t1414
448:	

printFormat$130:	; Call 47 printArgument 0
449:		mov word [bp + 47], printFormat$131
450:		mov [bp + 49], bp
451:		add bp, 47
452:		jmp printArgument
454:	

printFormat$131:	; PostCall 47
456:	

printFormat$132:	; Assign g_outStatus oldOutStatus
457:		mov a1415, [bp + 43]
458:		mov [g_outStatus], a1415
460:	

printFormat$133:	; BinarySubtract field g_outChars startChars
461:		mov a1416, [g_outChars]
462:		sub a1416, [bp + 41]
463:		mov [bp + 47], a1416
465:	

printFormat$134:	; Assign g_outChars startChars
466:		mov a1417, [bp + 41]
467:		mov [g_outChars], a1417
469:	

printFormat$135:	; Equal 142 negative 0
470:		cmp word [bp + 45], 0
471:		je printFormat$142
473:	

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
475:	

printFormat$137:	; Parameter 49 45 6
476:		mov byte [bp + 55], 45
478:	

printFormat$138:	; Call 49 printChar 0
479:		mov word [bp + 49], printFormat$139
480:		mov [bp + 51], bp
481:		add bp, 49
482:		jmp printChar
484:	

printFormat$139:	; PostCall 49
486:	

printFormat$140:	; Increment field
487:		inc word [bp + 47]
489:	

printFormat$141:	; Goto 155
490:		jmp printFormat$155
492:	

printFormat$142:	; Equal 149 plus 0
493:		cmp word [bp + 18], 0
494:		je printFormat$149
496:	

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
498:	

printFormat$144:	; Parameter 49 43 6
499:		mov byte [bp + 55], 43
501:	

printFormat$145:	; Call 49 printChar 0
502:		mov word [bp + 49], printFormat$146
503:		mov [bp + 51], bp
504:		add bp, 49
505:		jmp printChar
507:	

printFormat$146:	; PostCall 49
509:	

printFormat$147:	; Increment field
510:		inc word [bp + 47]
512:	

printFormat$148:	; Goto 155
513:		jmp printFormat$155
515:	

printFormat$149:	; Equal 155 space 0
516:		cmp word [bp + 22], 0
517:		je printFormat$155
519:	

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
521:	

printFormat$151:	; Parameter 49 32 6
522:		mov byte [bp + 55], 32
524:	

printFormat$152:	; Call 49 printChar 0
525:		mov word [bp + 49], printFormat$153
526:		mov [bp + 51], bp
527:		add bp, 49
528:		jmp printChar
530:	

printFormat$153:	; PostCall 49
532:	

printFormat$154:	; Increment field
533:		inc word [bp + 47]
535:	

printFormat$155:	; Assign £temporary2081 field
536:		mov t1418, [bp + 47]
538:	

printFormat$156:	; Increment field
539:		inc word [bp + 47]
541:	

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2081 width
542:		cmp t1418, [bp + 12]
543:		jge printFormat$163
545:	

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
547:	

printFormat$159:	; Parameter 49 48 6
548:		mov byte [bp + 55], 48
550:	

printFormat$160:	; Call 49 printChar 0
551:		mov word [bp + 49], printFormat$161
552:		mov [bp + 51], bp
553:		add bp, 49
554:		jmp printChar
556:	

printFormat$161:	; PostCall 49
558:	

printFormat$162:	; Goto 155
559:		jmp printFormat$155
561:	

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
563:	

printFormat$164:	; BinaryAdd £temporary2085 format index
564:		mov a1419, [bp + 6]
565:		add a1419, [bp + 10]
567:	

printFormat$165:	; Deref £temporary2084 -> £temporary2085 £temporary2085 0
569:	

printFormat$166:	; address £temporary2086 £temporary2084 -> £temporary2085
571:	

printFormat$167:	; Parameter 49 £temporary2086 6
572:		mov [bp + 55], a1419
574:	

printFormat$168:	; Parameter 49 arg_list 8
575:		mov a1420, [bp + 8]
576:		mov [bp + 57], a1420
578:	

printFormat$169:	; Parameter 49 0 10
579:		mov word [bp + 59], 0
581:	

printFormat$170:	; Parameter 49 0 12
582:		mov word [bp + 61], 0
584:	

printFormat$171:	; Parameter 49 grid 14
585:		mov a1421, [bp + 26]
586:		mov [bp + 63], a1421
588:	

printFormat$172:	; Parameter 49 0 16
589:		mov word [bp + 65], 0
591:	

printFormat$173:	; Parameter 49 precision 18
592:		mov a1422, [bp + 14]
593:		mov [bp + 67], a1422
595:	

printFormat$174:	; Parameter 49 shortInt 20
596:		mov a1423, [bp + 34]
597:		mov [bp + 69], a1423
599:	

printFormat$175:	; Parameter 49 longInt 22
600:		mov a1424, [bp + 36]
601:		mov [bp + 71], a1424
603:	

printFormat$176:	; Parameter 49 longDouble 24
604:		mov a1425, [bp + 38]
605:		mov [bp + 73], a1425
607:	

printFormat$177:	; Parameter 49 0 26
608:		mov word [bp + 75], 0
610:	

printFormat$178:	; Parameter 49 0 28
611:		mov word [bp + 77], 0
613:	

printFormat$179:	; Call 49 printArgument 0
614:		mov word [bp + 49], printFormat$180
615:		mov [bp + 51], bp
616:		add bp, 49
617:		jmp printArgument
619:	

printFormat$180:	; PostCall 49
621:	

printFormat$181:	; GetReturnValue £temporary2087
626:	

printFormat$182:	; Assign arg_list £temporary2087
627:		mov [bp + 8], t1427
629:	

printFormat$183:	; Goto 237
630:		jmp printFormat$237
632:	

printFormat$184:	; Assign startChars g_outChars
633:		mov a1428, [g_outChars]
634:		mov [bp + 41], a1428
636:	

printFormat$185:	; Assign oldOutStatus g_outStatus
637:		mov a1429, [g_outStatus]
638:		mov [bp + 43], a1429
640:	

printFormat$186:	; Assign g_outStatus 2
641:		mov word [g_outStatus], 2
643:	

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
645:	

printFormat$188:	; BinaryAdd £temporary2089 format index
646:		mov a1430, [bp + 6]
647:		add a1430, [bp + 10]
649:	

printFormat$189:	; Deref £temporary2088 -> £temporary2089 £temporary2089 0
651:	

printFormat$190:	; address £temporary2090 £temporary2088 -> £temporary2089
653:	

printFormat$191:	; Parameter 45 £temporary2090 6
654:		mov [bp + 51], a1430
656:	

printFormat$192:	; Parameter 45 arg_list 8
657:		mov a1431, [bp + 8]
658:		mov [bp + 53], a1431
660:	

printFormat$193:	; Parameter 45 plus 10
661:		mov a1432, [bp + 18]
662:		mov [bp + 55], a1432
664:	

printFormat$194:	; Parameter 45 space 12
665:		mov a1433, [bp + 22]
666:		mov [bp + 57], a1433
668:	

printFormat$195:	; Parameter 45 grid 14
669:		mov a1434, [bp + 26]
670:		mov [bp + 59], a1434
672:	

printFormat$196:	; address £temporary2091 width
673:		mov t1435, bp
674:		add t1435, 12
676:	

printFormat$197:	; Parameter 45 £temporary2091 16
677:		mov [bp + 61], t1435
679:	

printFormat$198:	; Parameter 45 precision 18
680:		mov a1436, [bp + 14]
681:		mov [bp + 63], a1436
683:	

printFormat$199:	; Parameter 45 shortInt 20
684:		mov a1437, [bp + 34]
685:		mov [bp + 65], a1437
687:	

printFormat$200:	; Parameter 45 longInt 22
688:		mov a1438, [bp + 36]
689:		mov [bp + 67], a1438
691:	

printFormat$201:	; Parameter 45 longDouble 24
692:		mov a1439, [bp + 38]
693:		mov [bp + 69], a1439
695:	

printFormat$202:	; Parameter 45 1 26
696:		mov word [bp + 71], 1
698:	

printFormat$203:	; Parameter 45 0 28
699:		mov word [bp + 73], 0
701:	

printFormat$204:	; Call 45 printArgument 0
702:		mov word [bp + 45], printFormat$205
703:		mov [bp + 47], bp
704:		add bp, 45
705:		jmp printArgument
707:	

printFormat$205:	; PostCall 45
709:	

printFormat$206:	; Assign g_outStatus oldOutStatus
710:		mov a1440, [bp + 43]
711:		mov [g_outStatus], a1440
713:	

printFormat$207:	; BinarySubtract field g_outChars startChars
714:		mov a1441, [g_outChars]
715:		sub a1441, [bp + 41]
716:		mov [bp + 45], a1441
718:	

printFormat$208:	; Assign g_outChars startChars
719:		mov a1442, [bp + 41]
720:		mov [g_outChars], a1442
722:	

printFormat$209:	; Assign £temporary2094 field
723:		mov t1443, [bp + 45]
725:	

printFormat$210:	; Increment field
726:		inc word [bp + 45]
728:	

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2094 width
729:		cmp t1443, [bp + 12]
730:		jge printFormat$217
732:	

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
734:	

printFormat$213:	; Parameter 47 32 6
735:		mov byte [bp + 53], 32
737:	

printFormat$214:	; Call 47 printChar 0
738:		mov word [bp + 47], printFormat$215
739:		mov [bp + 49], bp
740:		add bp, 47
741:		jmp printChar
743:	

printFormat$215:	; PostCall 47
745:	

printFormat$216:	; Goto 209
746:		jmp printFormat$209
748:	

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
750:	

printFormat$218:	; BinaryAdd £temporary2098 format index
751:		mov a1444, [bp + 6]
752:		add a1444, [bp + 10]
754:	

printFormat$219:	; Deref £temporary2097 -> £temporary2098 £temporary2098 0
756:	

printFormat$220:	; address £temporary2099 £temporary2097 -> £temporary2098
758:	

printFormat$221:	; Parameter 47 £temporary2099 6
759:		mov [bp + 53], a1444
761:	

printFormat$222:	; Parameter 47 arg_list 8
762:		mov a1445, [bp + 8]
763:		mov [bp + 55], a1445
765:	

printFormat$223:	; Parameter 47 plus 10
766:		mov a1446, [bp + 18]
767:		mov [bp + 57], a1446
769:	

printFormat$224:	; Parameter 47 space 12
770:		mov a1447, [bp + 22]
771:		mov [bp + 59], a1447
773:	

printFormat$225:	; Parameter 47 grid 14
774:		mov a1448, [bp + 26]
775:		mov [bp + 61], a1448
777:	

printFormat$226:	; Parameter 47 0 16
778:		mov word [bp + 63], 0
780:	

printFormat$227:	; Parameter 47 precision 18
781:		mov a1449, [bp + 14]
782:		mov [bp + 65], a1449
784:	

printFormat$228:	; Parameter 47 shortInt 20
785:		mov a1450, [bp + 34]
786:		mov [bp + 67], a1450
788:	

printFormat$229:	; Parameter 47 longInt 22
789:		mov a1451, [bp + 36]
790:		mov [bp + 69], a1451
792:	

printFormat$230:	; Parameter 47 longDouble 24
793:		mov a1452, [bp + 38]
794:		mov [bp + 71], a1452
796:	

printFormat$231:	; Parameter 47 1 26
797:		mov word [bp + 73], 1
799:	

printFormat$232:	; Parameter 47 0 28
800:		mov word [bp + 75], 0
802:	

printFormat$233:	; Call 47 printArgument 0
803:		mov word [bp + 47], printFormat$234
804:		mov [bp + 49], bp
805:		add bp, 47
806:		jmp printArgument
808:	

printFormat$234:	; PostCall 47
810:	

printFormat$235:	; GetReturnValue £temporary2100
815:	

printFormat$236:	; Assign arg_list £temporary2100
816:		mov [bp + 8], t1454
818:	

printFormat$237:	; Assign percent 0
819:		mov word [bp + 16], 0
821:	

printFormat$238:	; Goto 283
822:		jmp printFormat$283
824:	

printFormat$239:	; Assign value 0
825:		mov word [bp + 41], 0
827:	

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
829:	

printFormat$241:	; IntegralToIntegral £temporary2103 c
830:		mov a1455, [bp + 40]
832:		and a1455, 255
834:		cmp a1455, 0
835:		jge printFormat$242
836:		neg a1455
838:		neg a1455
840:	

printFormat$242:	; Parameter 43 £temporary2103 6
841:		mov [bp + 49], a1455
843:	

printFormat$243:	; Call 43 isdigit 0
844:		mov word [bp + 43], printFormat$244
845:		mov [bp + 45], bp
846:		add bp, 43
847:		jmp isdigit
849:	

printFormat$244:	; PostCall 43
851:	

printFormat$245:	; GetReturnValue £temporary2104
856:	

printFormat$246:	; Equal 257 £temporary2104 0
857:		cmp t1457, 0
858:		je printFormat$257
860:	

printFormat$247:	; SignedMultiply £temporary2105 value 10
861:		mov a1458, [bp + 41]
863:		xor dx, dx
864:		imul word [@4710$int2$10#]
870:	

printFormat$248:	; BinarySubtract £temporary2106 c 48
871:		mov a1462, [bp + 40]
872:		sub a1462, 48
874:	

printFormat$249:	; IntegralToIntegral £temporary2107 £temporary2106
876:		and a1462, 255
878:		cmp a1462, 0
879:		jge printFormat$250
880:		neg a1462
882:		neg a1462
884:	

printFormat$250:	; BinaryAdd value £temporary2105 £temporary2107
885:		add t1461, a1462
886:		mov [bp + 41], t1461
888:	

printFormat$251:	; Increment index
889:		inc word [bp + 10]
891:	

printFormat$252:	; Assign £temporary2109 index
892:		mov t1463, [bp + 10]
894:	

printFormat$253:	; BinaryAdd £temporary2111 format £temporary2109
895:		mov a1464, [bp + 6]
896:		add a1464, t1463
898:	

printFormat$254:	; Deref £temporary2110 -> £temporary2111 £temporary2111 0
900:	

printFormat$255:	; Assign c £temporary2110 -> £temporary2111
901:		mov t1465, [a1464]
902:		mov [bp + 40], t1465
904:	

printFormat$256:	; Goto 240
905:		jmp printFormat$240
907:	

printFormat$257:	; Decrement index
908:		dec word [bp + 10]
910:	

printFormat$258:	; NotEqual 261 period 0
911:		cmp word [bp + 30], 0
912:		jne printFormat$261
914:	

printFormat$259:	; Assign width value
915:		mov a1466, [bp + 41]
916:		mov [bp + 12], a1466
918:	

printFormat$260:	; Goto 283
919:		jmp printFormat$283
921:	

printFormat$261:	; Assign precision value
922:		mov a1467, [bp + 41]
923:		mov [bp + 14], a1467
925:	

printFormat$262:	; Goto 283
926:		jmp printFormat$283
928:	

printFormat$263:	; NotEqual 279 c 37
929:		cmp byte [bp + 40], 37
930:		jne printFormat$279
932:	

printFormat$264:	; Assign percent 1
933:		mov word [bp + 16], 1
935:	

printFormat$265:	; Assign plus 0
936:		mov word [bp + 18], 0
938:	

printFormat$266:	; Assign minus 0
939:		mov word [bp + 20], 0
941:	

printFormat$267:	; Assign space 0
942:		mov word [bp + 22], 0
944:	

printFormat$268:	; Assign zero 0
945:		mov word [bp + 24], 0
947:	

printFormat$269:	; Assign grid 0
948:		mov word [bp + 26], 0
950:	

printFormat$270:	; Assign widthStar 0
951:		mov word [bp + 28], 0
953:	

printFormat$271:	; Assign period 0
954:		mov word [bp + 30], 0
956:	

printFormat$272:	; Assign precisionStar 0
957:		mov word [bp + 32], 0
959:	

printFormat$273:	; Assign shortInt 0
960:		mov word [bp + 34], 0
962:	

printFormat$274:	; Assign longInt 0
963:		mov word [bp + 36], 0
965:	

printFormat$275:	; Assign longDouble 0
966:		mov word [bp + 38], 0
968:	

printFormat$276:	; Assign width 0
969:		mov word [bp + 12], 0
971:	

printFormat$277:	; Assign precision 0
972:		mov word [bp + 14], 0
974:	

printFormat$278:	; Goto 283
975:		jmp printFormat$283
977:	

printFormat$279:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
979:	

printFormat$280:	; Parameter 41 c 6
980:		mov a1468, [bp + 40]
981:		mov [bp + 47], a1468
983:	

printFormat$281:	; Call 41 printChar 0
984:		mov word [bp + 41], printFormat$282
985:		mov [bp + 43], bp
986:		add bp, 41
987:		jmp printChar
989:	

printFormat$282:	; PostCall 41
991:	

printFormat$283:	; Increment index
992:		inc word [bp + 10]
994:	

printFormat$284:	; Goto 16
995:		jmp printFormat$16
997:	

printFormat$285:	; NotEqual 291 g_outStatus 1
998:		cmp word [g_outStatus], 1
999:		jne printFormat$291
1001:	

printFormat$286:	; IntegralToIntegral £temporary2120 g_outDevice
1002:		mov a1469, [g_outDevice]
1005:	

printFormat$287:	; Assign outString £temporary2120
1006:		mov [bp + 40], a1469
1008:	

printFormat$288:	; BinaryAdd £temporary2122 outString g_outChars
1009:		mov a1470, [bp + 40]
1010:		add a1470, [g_outChars]
1012:	

printFormat$289:	; Deref £temporary2121 -> £temporary2122 £temporary2122 0
1014:	

printFormat$290:	; Assign £temporary2121 -> £temporary2122 0
1015:		mov byte [a1470], 0
1017:	

printFormat$291:	; SetReturnValue g_outChars
1018:		mov a1471, [g_outChars]
1020:	

printFormat$292:	; Return g_outChars
1021:		mov t1472, [bp]
1022:		mov di, [bp + 4]
1023:		mov bp, [bp + 2]
1024:		jmp t1472
1026:	

printFormat$293:	; FunctionEnd printFormat
1:	

printf:	; address £temporary2195 format
2:		mov t1473, bp
3:		add t1473, 6
5:	

printf$1:	; IntegralToIntegral £temporary2196 £temporary2195
8:	

printf$2:	; BinaryAdd arg_list £temporary2196 2
9:		add t1473, 2
10:		mov [di + 8], t1473
12:	

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

printf$4:	; Parameter 10 format 6
15:		mov a1474, [bp + 6]
16:		mov [di + 16], a1474
18:	

printf$5:	; Parameter 10 arg_list 8
19:		mov a1475, [di + 8]
20:		mov [di + 18], a1475
22:	

printf$6:	; Call 10 vprintf 0
23:		mov word [di + 10], printf$7
24:		mov [di + 12], bp
25:		mov [di + 14], di
26:		add di, 10
27:		mov bp, di
28:		jmp vprintf
30:	

printf$7:	; PostCall 10
32:	

printf$8:	; GetReturnValue £temporary2198
37:	

printf$9:	; SetReturnValue £temporary2198
39:	

printf$10:	; Return £temporary2198
40:		mov t1478, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp t1478
45:	

printf$11:	; FunctionEnd printf
1:	

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

vprintf$1:	; Parameter 10 stdout 6
4:		mov a1479, [stdout]
5:		mov [bp + 16], a1479
7:	

vprintf$2:	; Parameter 10 format 8
8:		mov a1480, [bp + 6]
9:		mov [bp + 18], a1480
11:	

vprintf$3:	; Parameter 10 arg_list 10
12:		mov a1481, [bp + 8]
13:		mov [bp + 20], a1481
15:	

vprintf$4:	; Call 10 vfprintf 0
16:		mov word [bp + 10], vprintf$5
17:		mov [bp + 12], bp
18:		add bp, 10
19:		jmp vfprintf
21:	

vprintf$5:	; PostCall 10
23:	

vprintf$6:	; GetReturnValue £temporary2202
28:	

vprintf$7:	; SetReturnValue £temporary2202
30:	

vprintf$8:	; Return £temporary2202
31:		mov t1484, [bp]
32:		mov di, [bp + 4]
33:		mov bp, [bp + 2]
34:		jmp t1484
36:	

vprintf$9:	; FunctionEnd vprintf
1:	

fprintf:	; address £temporary2206 format
2:		mov t1485, bp
3:		add t1485, 8
5:	

fprintf$1:	; IntegralToIntegral £temporary2207 £temporary2206
8:	

fprintf$2:	; BinaryAdd arg_list £temporary2207 2
9:		add t1485, 2
10:		mov [di + 10], t1485
12:	

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

fprintf$4:	; Parameter 12 outStream 6
15:		mov a1486, [bp + 6]
16:		mov [di + 18], a1486
18:	

fprintf$5:	; Parameter 12 format 8
19:		mov a1487, [bp + 8]
20:		mov [di + 20], a1487
22:	

fprintf$6:	; Parameter 12 arg_list 10
23:		mov a1488, [di + 10]
24:		mov [di + 22], a1488
26:	

fprintf$7:	; Call 12 vfprintf 0
27:		mov word [di + 12], fprintf$8
28:		mov [di + 14], bp
29:		mov [di + 16], di
30:		add di, 12
31:		mov bp, di
32:		jmp vfprintf
34:	

fprintf$8:	; PostCall 12
36:	

fprintf$9:	; GetReturnValue £temporary2209
41:	

fprintf$10:	; SetReturnValue £temporary2209
43:	

fprintf$11:	; Return £temporary2209
44:		mov t1491, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t1491
49:	

fprintf$12:	; FunctionEnd fprintf
1:	

vfprintf:	; Assign g_outStatus 0
2:		mov word [g_outStatus], 0
4:	

vfprintf$1:	; IntegralToIntegral £temporary2214 outStream
5:		mov a1492, [bp + 6]
8:	

vfprintf$2:	; Assign g_outDevice £temporary2214
9:		mov [g_outDevice], a1492
11:	

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

vfprintf$4:	; Parameter 12 format 6
14:		mov a1493, [bp + 8]
15:		mov [bp + 18], a1493
17:	

vfprintf$5:	; Parameter 12 arg_list 8
18:		mov a1494, [bp + 10]
19:		mov [bp + 20], a1494
21:	

vfprintf$6:	; Call 12 printFormat 0
22:		mov word [bp + 12], vfprintf$7
23:		mov [bp + 14], bp
24:		add bp, 12
25:		jmp printFormat
27:	

vfprintf$7:	; PostCall 12
29:	

vfprintf$8:	; GetReturnValue £temporary2215
34:	

vfprintf$9:	; SetReturnValue £temporary2215
36:	

vfprintf$10:	; Return £temporary2215
37:		mov t1497, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp t1497
42:	

vfprintf$11:	; FunctionEnd vfprintf
1:	

sprintf:	; address £temporary2218 format
2:		mov t1498, bp
3:		add t1498, 8
5:	

sprintf$1:	; IntegralToIntegral £temporary2219 £temporary2218
8:	

sprintf$2:	; BinaryAdd arg_list £temporary2219 2
9:		add t1498, 2
10:		mov [di + 10], t1498
12:	

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

sprintf$4:	; Parameter 12 outString 6
15:		mov a1499, [bp + 6]
16:		mov [di + 18], a1499
18:	

sprintf$5:	; Parameter 12 format 8
19:		mov a1500, [bp + 8]
20:		mov [di + 20], a1500
22:	

sprintf$6:	; Parameter 12 arg_list 10
23:		mov a1501, [di + 10]
24:		mov [di + 22], a1501
26:	

sprintf$7:	; Call 12 vsprintf 0
27:		mov word [di + 12], sprintf$8
28:		mov [di + 14], bp
29:		mov [di + 16], di
30:		add di, 12
31:		mov bp, di
32:		jmp vsprintf
34:	

sprintf$8:	; PostCall 12
36:	

sprintf$9:	; GetReturnValue £temporary2221
41:	

sprintf$10:	; SetReturnValue £temporary2221
43:	

sprintf$11:	; Return £temporary2221
44:		mov t1504, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t1504
49:	

sprintf$12:	; FunctionEnd sprintf
1:	

vsprintf:	; Assign g_outStatus 1
2:		mov word [g_outStatus], 1
4:	

vsprintf$1:	; IntegralToIntegral £temporary2226 outString
5:		mov a1505, [bp + 6]
8:	

vsprintf$2:	; Assign g_outDevice £temporary2226
9:		mov [g_outDevice], a1505
11:	

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

vsprintf$4:	; Parameter 12 format 6
14:		mov a1506, [bp + 8]
15:		mov [bp + 18], a1506
17:	

vsprintf$5:	; Parameter 12 arg_list 8
18:		mov a1507, [bp + 10]
19:		mov [bp + 20], a1507
21:	

vsprintf$6:	; Call 12 printFormat 0
22:		mov word [bp + 12], vsprintf$7
23:		mov [bp + 14], bp
24:		add bp, 12
25:		jmp printFormat
27:	

vsprintf$7:	; PostCall 12
29:	

vsprintf$8:	; GetReturnValue £temporary2227
34:	

vsprintf$9:	; SetReturnValue £temporary2227
36:	

vsprintf$10:	; Return £temporary2227
37:		mov t1510, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp t1510
42:	

vsprintf$11:	; FunctionEnd vsprintf
