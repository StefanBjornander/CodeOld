1:	

putc:	; Assign g_outStatus 0
2:		mov word [g_outStatus], 0
4:	

putc$1:	; IntegralToIntegral £temporary1589 stream
5:		mov a1018, [bp + 8]
8:	

putc$2:	; Assign g_outDevice £temporary1589
9:		mov [g_outDevice], a1018
11:	

putc$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

putc$4:	; IntegralToIntegral £temporary1590 i
14:		mov a1019, [bp + 6]
17:		cmp a1019, 0
18:		jge putc$5
19:		neg a1019
21:		neg a1019
23:	

putc$5:	; Parameter 10 £temporary1590 6
24:		mov [bp + 16], a1019
26:	

putc$6:	; Call 10 printChar 0
27:		mov word [bp + 10], putc$7
28:		mov [bp + 12], bp
29:		add bp, 10
30:		jmp printChar
32:	

putc$7:	; PostCall 10
34:	

putc$8:	; SetReturnValue 1
35:		mov a1020, 1
37:	

putc$9:	; Return 1
38:		mov t1021, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1021
43:	

putc$10:	; FunctionEnd putc
1:	

fputc:	; Assign g_outStatus 0
2:		mov word [g_outStatus], 0
4:	

fputc$1:	; IntegralToIntegral £temporary1593 stream
5:		mov a1022, [bp + 8]
8:	

fputc$2:	; Assign g_outDevice £temporary1593
9:		mov [g_outDevice], a1022
11:	

fputc$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

fputc$4:	; IntegralToIntegral £temporary1594 i
14:		mov a1023, [bp + 6]
17:		cmp a1023, 0
18:		jge fputc$5
19:		neg a1023
21:		neg a1023
23:	

fputc$5:	; Parameter 10 £temporary1594 6
24:		mov [bp + 16], a1023
26:	

fputc$6:	; Call 10 printChar 0
27:		mov word [bp + 10], fputc$7
28:		mov [bp + 12], bp
29:		add bp, 10
30:		jmp printChar
32:	

fputc$7:	; PostCall 10
34:	

fputc$8:	; SetReturnValue 1
35:		mov a1024, 1
37:	

fputc$9:	; Return 1
38:		mov t1025, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1025
43:	

fputc$10:	; FunctionEnd fputc
1:	

putchar:	; Assign g_outStatus 0
2:		mov word [g_outStatus], 0
4:	

putchar$1:	; IntegralToIntegral £temporary1597 stdout
5:		mov a1026, [stdout]
8:	

putchar$2:	; Assign g_outDevice £temporary1597
9:		mov [g_outDevice], a1026
11:	

putchar$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

putchar$4:	; IntegralToIntegral £temporary1598 i
14:		mov a1027, [bp + 6]
17:		cmp a1027, 0
18:		jge putchar$5
19:		neg a1027
21:		neg a1027
23:	

putchar$5:	; Parameter 8 £temporary1598 6
24:		mov [bp + 14], a1027
26:	

putchar$6:	; Call 8 printChar 0
27:		mov word [bp + 8], putchar$7
28:		mov [bp + 10], bp
29:		add bp, 8
30:		jmp printChar
32:	

putchar$7:	; PostCall 8
34:	

putchar$8:	; SetReturnValue 1
35:		mov a1028, 1
37:	

putchar$9:	; Return 1
38:		mov t1029, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1029
43:	

putchar$10:	; FunctionEnd putchar
1:	

printChar:	; Case 5 g_outStatus 0
2:		mov a1030, [g_outStatus]
3:		cmp a1030, 0
4:		je printChar$5
6:	

printChar$1:	; Case 16 g_outStatus 1
7:		cmp a1030, 1
8:		je printChar$16
10:	

printChar$2:	; Case 24 g_outStatus 2
11:		cmp a1030, 2
12:		je printChar$24
14:	

printChar$3:	; CaseEnd g_outStatus
16:	

printChar$4:	; Goto 26
17:		jmp printChar$26
19:	

printChar$5:	; IntegralToIntegral £temporary1601 g_outDevice
20:		mov a1031, [g_outDevice]
23:	

printChar$6:	; Assign stream £temporary1601
24:		mov [bp + 11], a1031
26:	

printChar$7:	; AssignRegister ah 64
27:		mov a1032, 64
29:	

printChar$8:	; Deref £temporary1604 -> stream stream 2
30:		mov a1033, [bp + 11]
32:	

printChar$9:	; AssignRegister bx £temporary1604 -> stream
33:		mov t1034, [a1033 + 2]
35:	

printChar$10:	; AssignRegister cx 1
36:		mov a1035, 1
38:	

printChar$11:	; address £temporary1607 c
39:		mov t1036, bp
40:		add t1036, 6
42:	

printChar$12:	; AssignRegister dx £temporary1607
44:	

printChar$13:	; Interrupt 33
45:		int 33
47:	

printChar$14:	; Increment g_outChars
48:		inc word [g_outChars]
50:	

printChar$15:	; Goto 26
51:		jmp printChar$26
53:	

printChar$16:	; IntegralToIntegral £temporary1609 g_outDevice
54:		mov a1037, [g_outDevice]
57:	

printChar$17:	; Assign outString £temporary1609
58:		mov [bp + 9], a1037
60:	

printChar$18:	; Assign £temporary1610 g_outChars
61:		mov t1038, [g_outChars]
63:	

printChar$19:	; Increment g_outChars
64:		inc word [g_outChars]
66:	

printChar$20:	; BinaryAdd £temporary1613 outString £temporary1610
67:		mov a1039, [bp + 9]
68:		add a1039, t1038
70:	

printChar$21:	; Deref £temporary1612 -> £temporary1613 £temporary1613 0
72:	

printChar$22:	; Assign £temporary1612 -> £temporary1613 c
73:		mov a1040, [bp + 6]
74:		mov [a1039], a1040
76:	

printChar$23:	; Goto 26
77:		jmp printChar$26
79:	

printChar$24:	; Assign £temporary1614 g_outChars
80:		mov t1041, [g_outChars]
82:	

printChar$25:	; Increment g_outChars
83:		inc word [g_outChars]
85:	

printChar$26:	; Return 0
86:		mov t1042, [bp]
87:		mov di, [bp + 4]
88:		mov bp, [bp + 2]
89:		jmp t1042
91:	

printChar$27:	; FunctionEnd printChar
1:	

printString:	; Equal 29 s 0
2:		cmp word [bp + 6], 0
3:		je printString$29
5:	

printString$1:	; NotEqual 14 precision 0
6:		cmp word [bp + 8], 0
7:		jne printString$14
9:	

printString$2:	; Assign index 0
10:		mov word [bp + 10], 0
12:	

printString$3:	; BinaryAdd £temporary1620 s index
13:		mov a1043, [bp + 6]
14:		add a1043, [bp + 10]
16:	

printString$4:	; Deref £temporary1619 -> £temporary1620 £temporary1620 0
18:	

printString$5:	; Equal 53 £temporary1619 -> £temporary1620 0
19:		cmp byte [a1043], 0
20:		je printString$53
22:	

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
24:	

printString$7:	; BinaryAdd £temporary1624 s index
25:		mov a1044, [bp + 6]
26:		add a1044, [bp + 10]
28:	

printString$8:	; Deref £temporary1623 -> £temporary1624 £temporary1624 0
30:	

printString$9:	; Parameter 12 £temporary1623 -> £temporary1624 6
31:		mov t1045, [a1044]
32:		mov [bp + 18], t1045
34:	

printString$10:	; Call 12 printChar 0
35:		mov word [bp + 12], printString$11
36:		mov [bp + 14], bp
37:		add bp, 12
38:		jmp printChar
40:	

printString$11:	; PostCall 12
42:	

printString$12:	; Increment index
43:		inc word [bp + 10]
45:	

printString$13:	; Goto 3
46:		jmp printString$3
48:	

printString$14:	; Assign index 0
49:		mov word [bp + 10], 0
51:	

printString$15:	; Assign £temporary1626 precision
52:		mov t1046, [bp + 8]
54:	

printString$16:	; Decrement precision
55:		dec word [bp + 8]
57:	

printString$17:	; SignedLessThanEqual 53 £temporary1626 0
58:		cmp t1046, 0
59:		jle printString$53
61:	

printString$18:	; BinaryAdd £temporary1630 s index
62:		mov a1047, [bp + 6]
63:		add a1047, [bp + 10]
65:	

printString$19:	; Deref £temporary1629 -> £temporary1630 £temporary1630 0
67:	

printString$20:	; Equal 53 £temporary1629 -> £temporary1630 0
68:		cmp byte [a1047], 0
69:		je printString$53
71:	

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
73:	

printString$22:	; BinaryAdd £temporary1635 s index
74:		mov a1048, [bp + 6]
75:		add a1048, [bp + 10]
77:	

printString$23:	; Deref £temporary1634 -> £temporary1635 £temporary1635 0
79:	

printString$24:	; Parameter 12 £temporary1634 -> £temporary1635 6
80:		mov t1049, [a1048]
81:		mov [bp + 18], t1049
83:	

printString$25:	; Call 12 printChar 0
84:		mov word [bp + 12], printString$26
85:		mov [bp + 14], bp
86:		add bp, 12
87:		jmp printChar
89:	

printString$26:	; PostCall 12
91:	

printString$27:	; Increment index
92:		inc word [bp + 10]
94:	

printString$28:	; Goto 15
95:		jmp printString$15
97:	

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
99:	

printString$30:	; Parameter 10 60 6
100:		mov byte [bp + 16], 60
102:	

printString$31:	; Call 10 printChar 0
103:		mov word [bp + 10], printString$32
104:		mov [bp + 12], bp
105:		add bp, 10
106:		jmp printChar
108:	

printString$32:	; PostCall 10
110:	

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
112:	

printString$34:	; Parameter 10 78 6
113:		mov byte [bp + 16], 78
115:	

printString$35:	; Call 10 printChar 0
116:		mov word [bp + 10], printString$36
117:		mov [bp + 12], bp
118:		add bp, 10
119:		jmp printChar
121:	

printString$36:	; PostCall 10
123:	

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
125:	

printString$38:	; Parameter 10 85 6
126:		mov byte [bp + 16], 85
128:	

printString$39:	; Call 10 printChar 0
129:		mov word [bp + 10], printString$40
130:		mov [bp + 12], bp
131:		add bp, 10
132:		jmp printChar
134:	

printString$40:	; PostCall 10
136:	

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
138:	

printString$42:	; Parameter 10 76 6
139:		mov byte [bp + 16], 76
141:	

printString$43:	; Call 10 printChar 0
142:		mov word [bp + 10], printString$44
143:		mov [bp + 12], bp
144:		add bp, 10
145:		jmp printChar
147:	

printString$44:	; PostCall 10
149:	

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
151:	

printString$46:	; Parameter 10 76 6
152:		mov byte [bp + 16], 76
154:	

printString$47:	; Call 10 printChar 0
155:		mov word [bp + 10], printString$48
156:		mov [bp + 12], bp
157:		add bp, 10
158:		jmp printChar
160:	

printString$48:	; PostCall 10
162:	

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
164:	

printString$50:	; Parameter 10 62 6
165:		mov byte [bp + 16], 62
167:	

printString$51:	; Call 10 printChar 0
168:		mov word [bp + 10], printString$52
169:		mov [bp + 12], bp
170:		add bp, 10
171:		jmp printChar
173:	

printString$52:	; PostCall 10
175:	

printString$53:	; Return 0
176:		mov t1050, [bp]
177:		mov di, [bp + 4]
178:		mov bp, [bp + 2]
179:		jmp t1050
181:	

printString$54:	; FunctionEnd printString
1:	

printLongIntRec:	; Equal 15 longValue 0
2:		cmp dword [bp + 6], 0
3:		je printLongIntRec$15
5:	

printLongIntRec$1:	; SignedModulo £temporary1652 longValue 10
6:		mov a1051, [bp + 6]
8:		xor edx, edx
9:		idiv dword [@3780$int4$10#]
15:	

printLongIntRec$2:	; IntegralToIntegral £temporary1653 £temporary1652
18:		cmp t1053, 0
19:		jge printLongIntRec$3
20:		neg t1053
22:		neg t1053
24:	

printLongIntRec$3:	; Assign digit £temporary1653
25:		mov [bp + 10], t1053
27:	

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
29:	

printLongIntRec$5:	; SignedDivide £temporary1654 longValue 10
30:		mov a1054, [bp + 6]
32:		xor edx, edx
33:		idiv dword [@3785$int4$10#]
39:	

printLongIntRec$6:	; Parameter 12 £temporary1654 6
40:		mov [bp + 18], t1057
42:	

printLongIntRec$7:	; Call 12 printLongIntRec 0
43:		mov word [bp + 12], printLongIntRec$8
44:		mov [bp + 14], bp
45:		add bp, 12
46:		jmp printLongIntRec
48:	

printLongIntRec$8:	; PostCall 12
50:	

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
52:	

printLongIntRec$10:	; BinaryAdd £temporary1656 digit 48
53:		mov a1058, [bp + 10]
54:		add a1058, 48
56:	

printLongIntRec$11:	; IntegralToIntegral £temporary1657 £temporary1656
59:		cmp a1058, 0
60:		jge printLongIntRec$12
61:		neg a1058
63:		neg a1058
65:	

printLongIntRec$12:	; Parameter 12 £temporary1657 6
66:		mov [bp + 18], a1058
68:	

printLongIntRec$13:	; Call 12 printChar 0
69:		mov word [bp + 12], printLongIntRec$14
70:		mov [bp + 14], bp
71:		add bp, 12
72:		jmp printChar
74:	

printLongIntRec$14:	; PostCall 12
76:	

printLongIntRec$15:	; Return 0
77:		mov t1059, [bp]
78:		mov di, [bp + 4]
79:		mov bp, [bp + 2]
80:		jmp t1059
82:	

printLongIntRec$16:	; FunctionEnd printLongIntRec
1:	

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
2:		cmp dword [bp + 6], 0
3:		jge printLongInt$8
5:	

printLongInt$1:	; UnarySubtract £temporary1662 longValue
6:		mov a1060, [bp + 6]
7:		neg a1060
9:	

printLongInt$2:	; Assign longValue £temporary1662
10:		mov [bp + 6], a1060
12:	

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

printLongInt$4:	; Parameter 14 45 6
15:		mov byte [bp + 20], 45
17:	

printLongInt$5:	; Call 14 printChar 0
18:		mov word [bp + 14], printLongInt$6
19:		mov [bp + 16], bp
20:		add bp, 14
21:		jmp printChar
23:	

printLongInt$6:	; PostCall 14
25:	

printLongInt$7:	; Goto 19
26:		jmp printLongInt$19
28:	

printLongInt$8:	; Equal 14 space 0
29:		cmp word [bp + 12], 0
30:		je printLongInt$14
32:	

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
34:	

printLongInt$10:	; Parameter 14 32 6
35:		mov byte [bp + 20], 32
37:	

printLongInt$11:	; Call 14 printChar 0
38:		mov word [bp + 14], printLongInt$12
39:		mov [bp + 16], bp
40:		add bp, 14
41:		jmp printChar
43:	

printLongInt$12:	; PostCall 14
45:	

printLongInt$13:	; Goto 19
46:		jmp printLongInt$19
48:	

printLongInt$14:	; Equal 19 plus 0
49:		cmp word [bp + 10], 0
50:		je printLongInt$19
52:	

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
54:	

printLongInt$16:	; Parameter 14 43 6
55:		mov byte [bp + 20], 43
57:	

printLongInt$17:	; Call 14 printChar 0
58:		mov word [bp + 14], printLongInt$18
59:		mov [bp + 16], bp
60:		add bp, 14
61:		jmp printChar
63:	

printLongInt$18:	; PostCall 14
65:	

printLongInt$19:	; NotEqual 25 longValue 0
66:		cmp dword [bp + 6], 0
67:		jne printLongInt$25
69:	

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
71:	

printLongInt$21:	; Parameter 14 48 6
72:		mov byte [bp + 20], 48
74:	

printLongInt$22:	; Call 14 printChar 0
75:		mov word [bp + 14], printLongInt$23
76:		mov [bp + 16], bp
77:		add bp, 14
78:		jmp printChar
80:	

printLongInt$23:	; PostCall 14
82:	

printLongInt$24:	; Goto 29
83:		jmp printLongInt$29
85:	

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
87:	

printLongInt$26:	; Parameter 14 longValue 6
88:		mov a1061, [bp + 6]
89:		mov [bp + 20], a1061
91:	

printLongInt$27:	; Call 14 printLongIntRec 0
92:		mov word [bp + 14], printLongInt$28
93:		mov [bp + 16], bp
94:		add bp, 14
95:		jmp printLongIntRec
97:	

printLongInt$28:	; PostCall 14
99:	

printLongInt$29:	; Return 0
100:		mov t1062, [bp]
101:		mov di, [bp + 4]
102:		mov bp, [bp + 2]
103:		jmp t1062
105:	

printLongInt$30:	; FunctionEnd printLongInt
1:	

digitToChar:	; SignedGreaterThanEqual 5 digit 10
2:		cmp word [bp + 6], 10
3:		jge digitToChar$5
5:	

digitToChar$1:	; BinaryAdd £temporary1677 digit 48
6:		mov a1063, [bp + 6]
7:		add a1063, 48
9:	

digitToChar$2:	; IntegralToIntegral £temporary1678 £temporary1677
12:		cmp a1063, 0
13:		jge digitToChar$3
14:		neg a1063
16:		neg a1063
18:	

digitToChar$3:	; SetReturnValue £temporary1678
20:	

digitToChar$4:	; Return £temporary1678
21:		mov t1064, [bp]
22:		mov di, [bp + 4]
23:		mov bp, [bp + 2]
24:		jmp t1064
26:	

digitToChar$5:	; Equal 11 capital 0
27:		cmp word [bp + 8], 0
28:		je digitToChar$11
30:	

digitToChar$6:	; BinarySubtract £temporary1679 digit 10
31:		mov a1065, [bp + 6]
32:		sub a1065, 10
34:	

digitToChar$7:	; BinaryAdd £temporary1680 £temporary1679 65
35:		add a1065, 65
37:	

digitToChar$8:	; IntegralToIntegral £temporary1681 £temporary1680
40:		cmp a1065, 0
41:		jge digitToChar$9
42:		neg a1065
44:		neg a1065
46:	

digitToChar$9:	; SetReturnValue £temporary1681
48:	

digitToChar$10:	; Return £temporary1681
49:		mov t1066, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t1066
54:	

digitToChar$11:	; BinarySubtract £temporary1682 digit 10
55:		mov a1067, [bp + 6]
56:		sub a1067, 10
58:	

digitToChar$12:	; BinaryAdd £temporary1683 £temporary1682 97
59:		add a1067, 97
61:	

digitToChar$13:	; IntegralToIntegral £temporary1684 £temporary1683
64:		cmp a1067, 0
65:		jge digitToChar$14
66:		neg a1067
68:		neg a1067
70:	

digitToChar$14:	; SetReturnValue £temporary1684
72:	

digitToChar$15:	; Return £temporary1684
73:		mov t1068, [bp]
74:		mov di, [bp + 4]
75:		mov bp, [bp + 2]
76:		jmp t1068
78:	

digitToChar$16:	; FunctionEnd digitToChar
1:	

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
2:		cmp dword [bp + 6], 0
3:		jbe printUnsignedLongRec$22
5:	

printUnsignedLongRec$1:	; UnsignedModulo £temporary1687 unsignedValue base
6:		mov a1069, [bp + 6]
8:		xor edx, edx
9:		div dword [bp + 10]
15:	

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1688 £temporary1687
18:	

printUnsignedLongRec$3:	; Assign digit £temporary1688
19:		mov [bp + 16], t1071
21:	

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
23:	

printUnsignedLongRec$5:	; UnsignedDivide £temporary1689 unsignedValue base
24:		mov a1072, [bp + 6]
26:		xor edx, edx
27:		div dword [bp + 10]
33:	

printUnsignedLongRec$6:	; Parameter 18 £temporary1689 6
34:		mov [bp + 24], t1075
36:	

printUnsignedLongRec$7:	; Parameter 18 base 10
37:		mov a1076, [bp + 10]
38:		mov [bp + 28], a1076
40:	

printUnsignedLongRec$8:	; Parameter 18 capital 14
41:		mov a1077, [bp + 14]
42:		mov [bp + 32], a1077
44:	

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
45:		mov word [bp + 18], printUnsignedLongRec$10
46:		mov [bp + 20], bp
47:		add bp, 18
48:		jmp printUnsignedLongRec
50:	

printUnsignedLongRec$10:	; PostCall 18
52:	

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
54:	

printUnsignedLongRec$12:	; Parameter 18 digit 6
55:		mov a1078, [bp + 16]
56:		mov [bp + 24], a1078
58:	

printUnsignedLongRec$13:	; Parameter 18 capital 8
59:		mov a1079, [bp + 14]
60:		mov [bp + 26], a1079
62:	

printUnsignedLongRec$14:	; Call 18 digitToChar 0
63:		mov word [bp + 18], printUnsignedLongRec$15
64:		mov [bp + 20], bp
65:		add bp, 18
66:		jmp digitToChar
68:	

printUnsignedLongRec$15:	; PostCall 18
70:	

printUnsignedLongRec$16:	; GetReturnValue £temporary1691
72:	

printUnsignedLongRec$17:	; Assign c £temporary1691
73:		mov [bp + 18], type1080
75:	

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
77:	

printUnsignedLongRec$19:	; Parameter 19 c 6
78:		mov a1081, [bp + 18]
79:		mov [bp + 25], a1081
81:	

printUnsignedLongRec$20:	; Call 19 printChar 0
82:		mov word [bp + 19], printUnsignedLongRec$21
83:		mov [bp + 21], bp
84:		add bp, 19
85:		jmp printChar
87:	

printUnsignedLongRec$21:	; PostCall 19
89:	

printUnsignedLongRec$22:	; Return 0
90:		mov t1082, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp t1082
95:	

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec
1:	

printUnsignedLong:	; Equal 5 plus 0
2:		cmp word [bp + 10], 0
3:		je printUnsignedLong$5
5:	

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
7:	

printUnsignedLong$2:	; Parameter 22 43 6
8:		mov byte [bp + 28], 43
10:	

printUnsignedLong$3:	; Call 22 printChar 0
11:		mov word [bp + 22], printUnsignedLong$4
12:		mov [bp + 24], bp
13:		add bp, 22
14:		jmp printChar
16:	

printUnsignedLong$4:	; PostCall 22
18:	

printUnsignedLong$5:	; Equal 10 space 0
19:		cmp word [bp + 12], 0
20:		je printUnsignedLong$10
22:	

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
24:	

printUnsignedLong$7:	; Parameter 22 32 6
25:		mov byte [bp + 28], 32
27:	

printUnsignedLong$8:	; Call 22 printChar 0
28:		mov word [bp + 22], printUnsignedLong$9
29:		mov [bp + 24], bp
30:		add bp, 22
31:		jmp printChar
33:	

printUnsignedLong$9:	; PostCall 22
35:	

printUnsignedLong$10:	; Equal 29 grid 0
36:		cmp word [bp + 14], 0
37:		je printUnsignedLong$29
39:	

printUnsignedLong$11:	; NotEqual 16 base 8
40:		cmp dword [bp + 16], 8
41:		jne printUnsignedLong$16
43:	

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
45:	

printUnsignedLong$13:	; Parameter 22 48 6
46:		mov byte [bp + 28], 48
48:	

printUnsignedLong$14:	; Call 22 printChar 0
49:		mov word [bp + 22], printUnsignedLong$15
50:		mov [bp + 24], bp
51:		add bp, 22
52:		jmp printChar
54:	

printUnsignedLong$15:	; PostCall 22
56:	

printUnsignedLong$16:	; NotEqual 29 base 16
57:		cmp dword [bp + 16], 16
58:		jne printUnsignedLong$29
60:	

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
62:	

printUnsignedLong$18:	; Parameter 22 48 6
63:		mov byte [bp + 28], 48
65:	

printUnsignedLong$19:	; Call 22 printChar 0
66:		mov word [bp + 22], printUnsignedLong$20
67:		mov [bp + 24], bp
68:		add bp, 22
69:		jmp printChar
71:	

printUnsignedLong$20:	; PostCall 22
73:	

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
75:	

printUnsignedLong$22:	; Equal 25 capital 0
76:		cmp word [bp + 20], 0
77:		je printUnsignedLong$25
79:	

printUnsignedLong$23:	; Assign £temporary1711 88
80:		mov t1083, 88
82:	

printUnsignedLong$24:	; Goto 26
83:		jmp printUnsignedLong$26
85:	

printUnsignedLong$25:	; Assign £temporary1711 120
86:		mov t1084, 120
88:	

printUnsignedLong$26:	; Parameter 22 £temporary1711 6
89:		mov [bp + 28], t1084
91:	

printUnsignedLong$27:	; Call 22 printChar 0
92:		mov word [bp + 22], printUnsignedLong$28
93:		mov [bp + 24], bp
94:		add bp, 22
95:		jmp printChar
97:	

printUnsignedLong$28:	; PostCall 22
99:	

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
100:		cmp dword [bp + 6], 0
101:		jne printUnsignedLong$35
103:	

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
105:	

printUnsignedLong$31:	; Parameter 22 48 6
106:		mov byte [bp + 28], 48
108:	

printUnsignedLong$32:	; Call 22 printChar 0
109:		mov word [bp + 22], printUnsignedLong$33
110:		mov [bp + 24], bp
111:		add bp, 22
112:		jmp printChar
114:	

printUnsignedLong$33:	; PostCall 22
116:	

printUnsignedLong$34:	; Goto 41
117:		jmp printUnsignedLong$41
119:	

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
121:	

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
122:		mov a1085, [bp + 6]
123:		mov [bp + 28], a1085
125:	

printUnsignedLong$37:	; Parameter 22 base 10
126:		mov a1086, [bp + 16]
127:		mov [bp + 32], a1086
129:	

printUnsignedLong$38:	; Parameter 22 capital 14
130:		mov a1087, [bp + 20]
131:		mov [bp + 36], a1087
133:	

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
134:		mov word [bp + 22], printUnsignedLong$40
135:		mov [bp + 24], bp
136:		add bp, 22
137:		jmp printUnsignedLongRec
139:	

printUnsignedLong$40:	; PostCall 22
141:	

printUnsignedLong$41:	; Return 0
142:		mov t1088, [bp]
143:		mov di, [bp + 4]
144:		mov bp, [bp + 2]
145:		jmp t1088
147:	

printUnsignedLong$42:	; FunctionEnd printUnsignedLong
1:	

printLongDoubleFraction:	; PushFloat longDoubleValue
2:		fld qword [bp + 6]
4:	

printLongDoubleFraction$1:	; PushFloat longDoubleValue
5:		fld qword [bp + 6]
7:	

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1726 longDoubleValue
8:		fistp dword [container4bytes#]
9:		mov t1089, [container4bytes#]
11:	

printLongDoubleFraction$3:	; IntegralToFloating £temporary1727 £temporary1726
12:		mov [container4bytes#], t1089
13:		fild dword [container4bytes#]
15:	

printLongDoubleFraction$4:	; BinarySubtract £temporary1728 longDoubleValue £temporary1727
16:		fsub
18:	

printLongDoubleFraction$5:	; PopFloat longDoubleValue
19:		fstp qword [bp + 6]
21:	

printLongDoubleFraction$6:	; NotEqual 8 precision 0
22:		cmp word [bp + 16], 0
23:		jne printLongDoubleFraction$8
25:	

printLongDoubleFraction$7:	; Assign precision 6
26:		mov word [bp + 16], 6
28:	

printLongDoubleFraction$8:	; NotEqual 10 grid 0
29:		cmp word [bp + 14], 0
30:		jne printLongDoubleFraction$10
32:	

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
33:		cmp word [bp + 16], 0
34:		jle printLongDoubleFraction$14
36:	

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
38:	

printLongDoubleFraction$11:	; Parameter 18 46 6
39:		mov byte [bp + 24], 46
41:	

printLongDoubleFraction$12:	; Call 18 printChar 0
42:		mov word [bp + 18], printLongDoubleFraction$13
43:		mov [bp + 20], bp
44:		add bp, 18
45:		jmp printChar
47:	

printLongDoubleFraction$13:	; PostCall 18
49:	

printLongDoubleFraction$14:	; Assign £temporary1734 precision
50:		mov t1090, [bp + 16]
52:	

printLongDoubleFraction$15:	; Decrement precision
53:		dec word [bp + 16]
55:	

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1734 0
56:		cmp t1090, 0
57:		jle printLongDoubleFraction$35
59:	

printLongDoubleFraction$17:	; PushFloat 10.0
60:		fld qword [@3956$float8$10.0#]
62:	

printLongDoubleFraction$18:	; PushFloat longDoubleValue
63:		fld qword [bp + 6]
65:	

printLongDoubleFraction$19:	; SignedMultiply £temporary1737 10.0 longDoubleValue
66:		fmul
68:	

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
69:		fstp qword [bp + 18]
71:	

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
72:		fld qword [bp + 18]
74:	

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1738 longDoubleValue10
75:		fistp word [container2bytes#]
76:		mov t1091, [container2bytes#]
78:	

printLongDoubleFraction$23:	; Assign digitValue £temporary1738
79:		mov [bp + 26], t1091
81:	

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
83:	

printLongDoubleFraction$25:	; BinaryAdd £temporary1739 digitValue 48
84:		mov a1092, [bp + 26]
85:		add a1092, 48
87:	

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1740 £temporary1739
90:		cmp a1092, 0
91:		jge printLongDoubleFraction$27
92:		neg a1092
94:		neg a1092
96:	

printLongDoubleFraction$27:	; Parameter 28 £temporary1740 6
97:		mov [bp + 34], a1092
99:	

printLongDoubleFraction$28:	; Call 28 printChar 0
100:		mov word [bp + 28], printLongDoubleFraction$29
101:		mov [bp + 30], bp
102:		add bp, 28
103:		jmp printChar
105:	

printLongDoubleFraction$29:	; PostCall 28
107:	

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
108:		fld qword [bp + 18]
110:	

printLongDoubleFraction$31:	; IntegralToFloating £temporary1742 digitValue
111:		fild word [bp + 26]
113:	

printLongDoubleFraction$32:	; BinarySubtract £temporary1743 longDoubleValue10 £temporary1742
114:		fsub
116:	

printLongDoubleFraction$33:	; PopFloat longDoubleValue
117:		fstp qword [bp + 6]
119:	

printLongDoubleFraction$34:	; Goto 14
120:		jmp printLongDoubleFraction$14
122:	

printLongDoubleFraction$35:	; Return 0
123:		mov t1093, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp t1093
128:	

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction
1:	

printLongDoublePlain:	; PushFloat longDoubleValue
2:		fld qword [bp + 6]
4:	

printLongDoublePlain$1:	; PushFloat 0.0
5:		fldz
7:	

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
8:		fcompp
9:		fstsw ax
10:		sahf
11:		jbe printLongDoublePlain$12
13:	

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
15:	

printLongDoublePlain$4:	; Parameter 22 45 6
16:		mov byte [bp + 28], 45
18:	

printLongDoublePlain$5:	; Call 22 printChar 0
19:		mov word [bp + 22], printLongDoublePlain$6
20:		mov [bp + 24], bp
21:		add bp, 22
22:		jmp printChar
24:	

printLongDoublePlain$6:	; PostCall 22
26:	

printLongDoublePlain$7:	; PushFloat longDoubleValue
27:		fld qword [bp + 6]
29:	

printLongDoublePlain$8:	; UnarySubtract £temporary1748 longDoubleValue
30:		fchs
32:	

printLongDoublePlain$9:	; PopFloat longDoubleValue
33:		fstp qword [bp + 6]
35:	

printLongDoublePlain$10:	; Assign plus 0
36:		mov word [bp + 14], 0
38:	

printLongDoublePlain$11:	; Assign space 0
39:		mov word [bp + 16], 0
41:	

printLongDoublePlain$12:	; PushFloat longDoubleValue
42:		fld qword [bp + 6]
44:	

printLongDoublePlain$13:	; FloatingToIntegral £temporary1749 longDoubleValue
45:		fistp dword [container4bytes#]
46:		mov t1094, [container4bytes#]
48:	

printLongDoublePlain$14:	; Assign longValue £temporary1749
49:		mov [bp + 22], t1094
51:	

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
53:	

printLongDoublePlain$16:	; Parameter 26 longValue 6
54:		mov a1095, [bp + 22]
55:		mov [bp + 32], a1095
57:	

printLongDoublePlain$17:	; Parameter 26 plus 10
58:		mov a1096, [bp + 14]
59:		mov [bp + 36], a1096
61:	

printLongDoublePlain$18:	; Parameter 26 space 12
62:		mov a1097, [bp + 16]
63:		mov [bp + 38], a1097
65:	

printLongDoublePlain$19:	; Call 26 printLongInt 0
66:		mov word [bp + 26], printLongDoublePlain$20
67:		mov [bp + 28], bp
68:		add bp, 26
69:		jmp printLongInt
71:	

printLongDoublePlain$20:	; PostCall 26
73:	

printLongDoublePlain$21:	; PushFloat longDoubleValue
74:		fld qword [bp + 6]
76:	

printLongDoublePlain$22:	; IntegralToFloating £temporary1751 longValue
77:		fild dword [bp + 22]
79:	

printLongDoublePlain$23:	; BinarySubtract £temporary1752 longDoubleValue £temporary1751
80:		fsub
82:	

printLongDoublePlain$24:	; PopFloat longDoubleValue
83:		fstp qword [bp + 6]
85:	

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
87:	

printLongDoublePlain$26:	; PushFloat longDoubleValue
88:		fld qword [bp + 6]
90:	

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
91:		fstp qword [bp + 32]
93:	

printLongDoublePlain$28:	; Parameter 26 grid 14
94:		mov a1098, [bp + 18]
95:		mov [bp + 40], a1098
97:	

printLongDoublePlain$29:	; Parameter 26 precision 16
98:		mov a1099, [bp + 20]
99:		mov [bp + 42], a1099
101:	

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
102:		mov word [bp + 26], printLongDoublePlain$31
103:		mov [bp + 28], bp
104:		add bp, 26
105:		jmp printLongDoubleFraction
107:	

printLongDoublePlain$31:	; PostCall 26
109:	

printLongDoublePlain$32:	; Return 0
110:		mov t1100, [bp]
111:		mov di, [bp + 4]
112:		mov bp, [bp + 2]
113:		jmp t1100
115:	

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain
1:	

printLongDoubleExpo:	; PushFloat value
2:		fld qword [bp + 6]
4:	

printLongDoubleExpo$1:	; PushFloat 0.0
5:		fldz
7:	

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
8:		fcompp
9:		fstsw ax
10:		sahf
11:		jne printLongDoubleExpo$27
13:	

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
15:	

printLongDoubleExpo$4:	; Parameter 24 48 6
16:		mov byte [bp + 30], 48
18:	

printLongDoubleExpo$5:	; Call 24 printChar 0
19:		mov word [bp + 24], printLongDoubleExpo$6
20:		mov [bp + 26], bp
21:		add bp, 24
22:		jmp printChar
24:	

printLongDoubleExpo$6:	; PostCall 24
26:	

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
28:	

printLongDoubleExpo$8:	; PushFloat 0.0
29:		fldz
31:	

printLongDoubleExpo$9:	; Parameter 24 0.0 6
32:		fstp qword [bp + 30]
34:	

printLongDoubleExpo$10:	; Parameter 24 precision 14
35:		mov a1101, [bp + 20]
36:		mov [bp + 38], a1101
38:	

printLongDoubleExpo$11:	; Parameter 24 grid 16
39:		mov a1102, [bp + 18]
40:		mov [bp + 40], a1102
42:	

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
43:		mov word [bp + 24], printLongDoubleExpo$13
44:		mov [bp + 26], bp
45:		add bp, 24
46:		jmp printLongDoubleFraction
48:	

printLongDoubleExpo$13:	; PostCall 24
50:	

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
52:	

printLongDoubleExpo$15:	; Equal 18 capital 0
53:		cmp word [bp + 22], 0
54:		je printLongDoubleExpo$18
56:	

printLongDoubleExpo$16:	; Assign £temporary1768 69
57:		mov t1103, 69
59:	

printLongDoubleExpo$17:	; Goto 19
60:		jmp printLongDoubleExpo$19
62:	

printLongDoubleExpo$18:	; Assign £temporary1768 101
63:		mov t1104, 101
65:	

printLongDoubleExpo$19:	; Parameter 24 £temporary1768 6
66:		mov [bp + 30], t1104
68:	

printLongDoubleExpo$20:	; Call 24 printChar 0
69:		mov word [bp + 24], printLongDoubleExpo$21
70:		mov [bp + 26], bp
71:		add bp, 24
72:		jmp printChar
74:	

printLongDoubleExpo$21:	; PostCall 24
76:	

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
78:	

printLongDoubleExpo$23:	; Parameter 24 48 6
79:		mov byte [bp + 30], 48
81:	

printLongDoubleExpo$24:	; Call 24 printChar 0
82:		mov word [bp + 24], printLongDoubleExpo$25
83:		mov [bp + 26], bp
84:		add bp, 24
85:		jmp printChar
87:	

printLongDoubleExpo$25:	; PostCall 24
89:	

printLongDoubleExpo$26:	; Goto 80
90:		jmp printLongDoubleExpo$80
92:	

printLongDoubleExpo$27:	; PushFloat value
93:		fld qword [bp + 6]
95:	

printLongDoubleExpo$28:	; PushFloat 0.0
96:		fldz
98:	

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
99:		fcompp
100:		fstsw ax
101:		sahf
102:		jbe printLongDoubleExpo$37
104:	

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
106:	

printLongDoubleExpo$31:	; Parameter 24 45 6
107:		mov byte [bp + 30], 45
109:	

printLongDoubleExpo$32:	; Call 24 printChar 0
110:		mov word [bp + 24], printLongDoubleExpo$33
111:		mov [bp + 26], bp
112:		add bp, 24
113:		jmp printChar
115:	

printLongDoubleExpo$33:	; PostCall 24
117:	

printLongDoubleExpo$34:	; PushFloat value
118:		fld qword [bp + 6]
120:	

printLongDoubleExpo$35:	; UnarySubtract £temporary1773 value
121:		fchs
123:	

printLongDoubleExpo$36:	; PopFloat value
124:		fstp qword [bp + 6]
126:	

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
128:	

printLongDoubleExpo$38:	; PushFloat value
129:		fld qword [bp + 6]
131:	

printLongDoubleExpo$39:	; Parameter 24 value 6
132:		fstp qword [bp + 30]
134:	

printLongDoubleExpo$40:	; Call 24 log10 0
135:		mov word [bp + 24], printLongDoubleExpo$41
136:		mov [bp + 26], bp
137:		add bp, 24
138:		jmp log10
140:	

printLongDoubleExpo$41:	; PostCall 24
142:	

printLongDoubleExpo$42:	; GetReturnValue £temporary1774
144:	

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1775 £temporary1774
145:		fistp word [container2bytes#]
146:		mov t1105, [container2bytes#]
148:	

printLongDoubleExpo$44:	; Assign expo £temporary1775
149:		mov [bp + 24], t1105
151:	

printLongDoubleExpo$45:	; PushFloat value
152:		fld qword [bp + 6]
154:	

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
155:		fstp qword [bp + 26]
157:	

printLongDoubleExpo$47:	; PushFloat 10.0
158:		fld qword [@4037$float8$10.0#]
160:	

printLongDoubleExpo$48:	; Parameter 26 10.0 6
161:		fstp qword [bp + 40]
163:	

printLongDoubleExpo$49:	; IntegralToFloating £temporary1776 expo
164:		fild word [bp + 24]
166:	

printLongDoubleExpo$50:	; Parameter 26 £temporary1776 14
167:		fstp qword [bp + 48]
169:	

printLongDoubleExpo$51:	; Call 26 pow 0
170:		mov word [bp + 34], printLongDoubleExpo$52
171:		mov [bp + 36], bp
172:		add bp, 34
173:		jmp pow
175:	

printLongDoubleExpo$52:	; PostCall 26
176:		fstp qword [bp + 34]
177:		fld qword [bp + 26]
178:		fld qword [bp + 34]
180:	

printLongDoubleExpo$53:	; GetReturnValue £temporary1777
182:	

printLongDoubleExpo$54:	; SignedDivide £temporary1778 value £temporary1777
183:		fdiv
185:	

printLongDoubleExpo$55:	; PopFloat value
186:		fstp qword [bp + 6]
188:	

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
190:	

printLongDoubleExpo$57:	; PushFloat value
191:		fld qword [bp + 6]
193:	

printLongDoubleExpo$58:	; Parameter 26 value 6
194:		fstp qword [bp + 32]
196:	

printLongDoubleExpo$59:	; Parameter 26 plus 14
197:		mov a1106, [bp + 14]
198:		mov [bp + 40], a1106
200:	

printLongDoubleExpo$60:	; Parameter 26 space 16
201:		mov a1107, [bp + 16]
202:		mov [bp + 42], a1107
204:	

printLongDoubleExpo$61:	; Parameter 26 grid 18
205:		mov a1108, [bp + 18]
206:		mov [bp + 44], a1108
208:	

printLongDoubleExpo$62:	; Parameter 26 precision 20
209:		mov a1109, [bp + 20]
210:		mov [bp + 46], a1109
212:	

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
213:		mov word [bp + 26], printLongDoubleExpo$64
214:		mov [bp + 28], bp
215:		add bp, 26
216:		jmp printLongDoublePlain
218:	

printLongDoubleExpo$64:	; PostCall 26
220:	

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
222:	

printLongDoubleExpo$66:	; Equal 69 capital 0
223:		cmp word [bp + 22], 0
224:		je printLongDoubleExpo$69
226:	

printLongDoubleExpo$67:	; Assign £temporary1784 69
227:		mov t1110, 69
229:	

printLongDoubleExpo$68:	; Goto 70
230:		jmp printLongDoubleExpo$70
232:	

printLongDoubleExpo$69:	; Assign £temporary1784 101
233:		mov t1111, 101
235:	

printLongDoubleExpo$70:	; Parameter 26 £temporary1784 6
236:		mov [bp + 32], t1111
238:	

printLongDoubleExpo$71:	; Call 26 printChar 0
239:		mov word [bp + 26], printLongDoubleExpo$72
240:		mov [bp + 28], bp
241:		add bp, 26
242:		jmp printChar
244:	

printLongDoubleExpo$72:	; PostCall 26
246:	

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
248:	

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1786 expo
249:		mov a1112, [bp + 24]
251:		and a1112, 65535
253:		cmp a1112, 0
254:		jge printLongDoubleExpo$75
255:		neg a1112
257:		neg a1112
259:	

printLongDoubleExpo$75:	; Parameter 26 £temporary1786 6
260:		mov [bp + 32], a1112
262:	

printLongDoubleExpo$76:	; Parameter 26 1 10
263:		mov word [bp + 36], 1
265:	

printLongDoubleExpo$77:	; Parameter 26 0 12
266:		mov word [bp + 38], 0
268:	

printLongDoubleExpo$78:	; Call 26 printLongInt 0
269:		mov word [bp + 26], printLongDoubleExpo$79
270:		mov [bp + 28], bp
271:		add bp, 26
272:		jmp printLongInt
274:	

printLongDoubleExpo$79:	; PostCall 26
276:	

printLongDoubleExpo$80:	; Return 0
277:		mov t1113, [bp]
278:		mov di, [bp + 4]
279:		mov bp, [bp + 2]
280:		jmp t1113
282:	

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo
1:	

checkWidthAndPrecision:	; Equal 9 widthPtr 0
2:		cmp word [bp + 8], 0
3:		je checkWidthAndPrecision$9
5:	

checkWidthAndPrecision$1:	; Deref £temporary1808 -> widthPtr widthPtr 0
6:		mov a1114, [bp + 8]
8:	

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1808 -> widthPtr -1
9:		cmp word [a1114], -1
10:		jne checkWidthAndPrecision$9
12:	

checkWidthAndPrecision$3:	; Deref £temporary1811 -> widthPtr widthPtr 0
13:		mov a1115, [bp + 8]
15:	

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
16:		add word [bp + 6], 2
18:	

checkWidthAndPrecision$5:	; BinarySubtract £temporary1813 arg_list 2
19:		mov a1116, [bp + 6]
20:		sub a1116, 2
22:	

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1814 £temporary1813
25:	

checkWidthAndPrecision$7:	; Deref £temporary1815 -> £temporary1814 £temporary1814 0
27:	

checkWidthAndPrecision$8:	; Assign £temporary1811 -> widthPtr £temporary1815 -> £temporary1814
28:		mov t1117, [a1116]
29:		mov [a1115], t1117
31:	

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
32:		cmp word [bp + 10], 0
33:		je checkWidthAndPrecision$18
35:	

checkWidthAndPrecision$10:	; Deref £temporary1817 -> precisionPtr precisionPtr 0
36:		mov a1118, [bp + 10]
38:	

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1817 -> precisionPtr -1
39:		cmp word [a1118], -1
40:		jne checkWidthAndPrecision$18
42:	

checkWidthAndPrecision$12:	; Deref £temporary1820 -> precisionPtr precisionPtr 0
43:		mov a1119, [bp + 10]
45:	

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
46:		add word [bp + 6], 2
48:	

checkWidthAndPrecision$14:	; BinarySubtract £temporary1822 arg_list 2
49:		mov a1120, [bp + 6]
50:		sub a1120, 2
52:	

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1823 £temporary1822
55:	

checkWidthAndPrecision$16:	; Deref £temporary1824 -> £temporary1823 £temporary1823 0
57:	

checkWidthAndPrecision$17:	; Assign £temporary1820 -> precisionPtr £temporary1824 -> £temporary1823
58:		mov t1121, [a1120]
59:		mov [a1119], t1121
61:	

checkWidthAndPrecision$18:	; SetReturnValue arg_list
62:		mov a1122, [bp + 6]
64:	

checkWidthAndPrecision$19:	; Return arg_list
65:		mov t1123, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t1123
70:	

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision
1:	

printArgument:	; Deref £temporary1825 -> format format 0
2:		mov a1124, [bp + 6]
4:	

printArgument$1:	; Assign c £temporary1825 -> format
5:		mov t1125, [a1124]
6:		mov [bp + 30], t1125
8:	

printArgument$2:	; Case 21 c 100
9:		mov a1126, [bp + 30]
10:		cmp a1126, 100
11:		je printArgument$21
13:	

printArgument$3:	; Case 21 c 105
14:		cmp a1126, 105
15:		je printArgument$21
17:	

printArgument$4:	; Case 73 c 99
18:		cmp a1126, 99
19:		je printArgument$73
21:	

printArgument$5:	; Case 93 c 115
22:		cmp a1126, 115
23:		je printArgument$93
25:	

printArgument$6:	; Case 113 c 88
26:		cmp a1126, 88
27:		je printArgument$113
29:	

printArgument$7:	; Case 113 c 120
30:		cmp a1126, 120
31:		je printArgument$113
33:	

printArgument$8:	; Case 113 c 98
34:		cmp a1126, 98
35:		je printArgument$113
37:	

printArgument$9:	; Case 113 c 111
38:		cmp a1126, 111
39:		je printArgument$113
41:	

printArgument$10:	; Case 113 c 117
42:		cmp a1126, 117
43:		je printArgument$113
45:	

printArgument$11:	; Case 173 c 71
46:		cmp a1126, 71
47:		je printArgument$173
49:	

printArgument$12:	; Case 173 c 103
50:		cmp a1126, 103
51:		je printArgument$173
53:	

printArgument$13:	; Case 173 c 69
54:		cmp a1126, 69
55:		je printArgument$173
57:	

printArgument$14:	; Case 173 c 101
58:		cmp a1126, 101
59:		je printArgument$173
61:	

printArgument$15:	; Case 173 c 102
62:		cmp a1126, 102
63:		je printArgument$173
65:	

printArgument$16:	; Case 299 c 112
66:		cmp a1126, 112
67:		je printArgument$299
69:	

printArgument$17:	; Case 325 c 110
70:		cmp a1126, 110
71:		je printArgument$325
73:	

printArgument$18:	; Case 347 c 37
74:		cmp a1126, 37
75:		je printArgument$347
77:	

printArgument$19:	; CaseEnd c
79:	

printArgument$20:	; Goto 360
80:		jmp printArgument$360
82:	

printArgument$21:	; Equal 30 shortInt 0
83:		cmp word [bp + 20], 0
84:		je printArgument$30
86:	

printArgument$22:	; BinaryAdd arg_list arg_list 2
87:		add word [bp + 8], 2
89:	

printArgument$23:	; BinarySubtract £temporary1827 arg_list 2
90:		mov a1127, [bp + 8]
91:		sub a1127, 2
93:	

printArgument$24:	; IntegralToIntegral £temporary1828 £temporary1827
96:	

printArgument$25:	; Deref £temporary1829 -> £temporary1828 £temporary1828 0
98:	

printArgument$26:	; IntegralToIntegral £temporary1830 £temporary1829 -> £temporary1828
99:		mov t1128, [a1127]
102:		cmp t1128, 0
103:		jge printArgument$27
104:		neg t1128
106:		neg t1128
108:	

printArgument$27:	; IntegralToIntegral £temporary1831 £temporary1830
110:		and t1128, 255
112:		cmp t1128, 0
113:		jge printArgument$28
114:		neg t1128
116:		neg t1128
118:	

printArgument$28:	; Assign longValue £temporary1831
119:		mov [bp + 44], t1128
121:	

printArgument$29:	; Goto 43
122:		jmp printArgument$43
124:	

printArgument$30:	; Equal 37 longInt 0
125:		cmp word [bp + 22], 0
126:		je printArgument$37
128:	

printArgument$31:	; BinaryAdd arg_list arg_list 4
129:		add word [bp + 8], 4
131:	

printArgument$32:	; BinarySubtract £temporary1833 arg_list 4
132:		mov a1129, [bp + 8]
133:		sub a1129, 4
135:	

printArgument$33:	; IntegralToIntegral £temporary1834 £temporary1833
138:	

printArgument$34:	; Deref £temporary1835 -> £temporary1834 £temporary1834 0
140:	

printArgument$35:	; Assign longValue £temporary1835 -> £temporary1834
141:		mov t1130, [a1129]
142:		mov [bp + 44], t1130
144:	

printArgument$36:	; Goto 43
145:		jmp printArgument$43
147:	

printArgument$37:	; BinaryAdd arg_list arg_list 2
148:		add word [bp + 8], 2
150:	

printArgument$38:	; BinarySubtract £temporary1837 arg_list 2
151:		mov a1131, [bp + 8]
152:		sub a1131, 2
154:	

printArgument$39:	; IntegralToIntegral £temporary1838 £temporary1837
157:	

printArgument$40:	; Deref £temporary1839 -> £temporary1838 £temporary1838 0
159:	

printArgument$41:	; IntegralToIntegral £temporary1840 £temporary1839 -> £temporary1838
160:		mov t1132, [a1131]
162:		and t1132, 65535
164:		cmp t1132, 0
165:		jge printArgument$42
166:		neg t1132
168:		neg t1132
170:	

printArgument$42:	; Assign longValue £temporary1840
171:		mov [bp + 44], t1132
173:	

printArgument$43:	; Equal 50 negativePtr 0
174:		cmp word [bp + 28], 0
175:		je printArgument$50
177:	

printArgument$44:	; Deref £temporary1844 -> negativePtr negativePtr 0
178:		mov a1133, [bp + 28]
180:	

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
181:		cmp dword [bp + 44], 0
182:		jge printArgument$48
184:	

printArgument$46:	; Assign £temporary1846 1
185:		mov t1134, 1
187:	

printArgument$47:	; Goto 49
188:		jmp printArgument$49
190:	

printArgument$48:	; Assign £temporary1846 0
191:		mov t1135, 0
193:	

printArgument$49:	; Assign £temporary1844 -> negativePtr £temporary1846
194:		mov [a1133], t1135
196:	

printArgument$50:	; NotEqual 57 sign 0
197:		cmp word [bp + 26], 0
198:		jne printArgument$57
200:	

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
202:	

printArgument$52:	; Parameter 48 longValue 6
203:		mov a1136, [bp + 44]
204:		mov [bp + 54], a1136
206:	

printArgument$53:	; Call 48 labs 0
207:		mov word [bp + 48], printArgument$54
208:		mov [bp + 50], bp
209:		add bp, 48
210:		jmp labs
212:	

printArgument$54:	; PostCall 48
214:	

printArgument$55:	; GetReturnValue £temporary1849
216:	

printArgument$56:	; Assign longValue £temporary1849
217:		mov [bp + 44], type1137
219:	

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
221:	

printArgument$58:	; Parameter 48 arg_list 6
222:		mov a1138, [bp + 8]
223:		mov [bp + 54], a1138
225:	

printArgument$59:	; Parameter 48 widthPtr 8
226:		mov a1139, [bp + 16]
227:		mov [bp + 56], a1139
229:	

printArgument$60:	; address £temporary1850 precision
230:		mov t1140, bp
231:		add t1140, 18
233:	

printArgument$61:	; Parameter 48 £temporary1850 10
234:		mov [bp + 58], t1140
236:	

printArgument$62:	; Call 48 checkWidthAndPrecision 0
237:		mov word [bp + 48], printArgument$63
238:		mov [bp + 50], bp
239:		add bp, 48
240:		jmp checkWidthAndPrecision
242:	

printArgument$63:	; PostCall 48
244:	

printArgument$64:	; GetReturnValue £temporary1851
246:	

printArgument$65:	; Assign arg_list £temporary1851
247:		mov [bp + 8], type1141
249:	

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
251:	

printArgument$67:	; Parameter 48 longValue 6
252:		mov a1142, [bp + 44]
253:		mov [bp + 54], a1142
255:	

printArgument$68:	; Parameter 48 plus 10
256:		mov a1143, [bp + 10]
257:		mov [bp + 58], a1143
259:	

printArgument$69:	; Parameter 48 space 12
260:		mov a1144, [bp + 12]
261:		mov [bp + 60], a1144
263:	

printArgument$70:	; Call 48 printLongInt 0
264:		mov word [bp + 48], printArgument$71
265:		mov [bp + 50], bp
266:		add bp, 48
267:		jmp printLongInt
269:	

printArgument$71:	; PostCall 48
271:	

printArgument$72:	; Goto 360
272:		jmp printArgument$360
274:	

printArgument$73:	; BinaryAdd arg_list arg_list 2
275:		add word [bp + 8], 2
277:	

printArgument$74:	; BinarySubtract £temporary1854 arg_list 2
278:		mov a1145, [bp + 8]
279:		sub a1145, 2
281:	

printArgument$75:	; IntegralToIntegral £temporary1855 £temporary1854
284:	

printArgument$76:	; Deref £temporary1856 -> £temporary1855 £temporary1855 0
286:	

printArgument$77:	; IntegralToIntegral £temporary1857 £temporary1856 -> £temporary1855
287:		mov t1146, [a1145]
290:		cmp t1146, 0
291:		jge printArgument$78
292:		neg t1146
294:		neg t1146
296:	

printArgument$78:	; Assign charValue £temporary1857
297:		mov [bp + 31], t1146
299:	

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
301:	

printArgument$80:	; Parameter 44 arg_list 6
302:		mov a1147, [bp + 8]
303:		mov [bp + 50], a1147
305:	

printArgument$81:	; Parameter 44 widthPtr 8
306:		mov a1148, [bp + 16]
307:		mov [bp + 52], a1148
309:	

printArgument$82:	; address £temporary1858 precision
310:		mov t1149, bp
311:		add t1149, 18
313:	

printArgument$83:	; Parameter 44 £temporary1858 10
314:		mov [bp + 54], t1149
316:	

printArgument$84:	; Call 44 checkWidthAndPrecision 0
317:		mov word [bp + 44], printArgument$85
318:		mov [bp + 46], bp
319:		add bp, 44
320:		jmp checkWidthAndPrecision
322:	

printArgument$85:	; PostCall 44
324:	

printArgument$86:	; GetReturnValue £temporary1859
326:	

printArgument$87:	; Assign arg_list £temporary1859
327:		mov [bp + 8], type1150
329:	

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
331:	

printArgument$89:	; Parameter 44 charValue 6
332:		mov a1151, [bp + 31]
333:		mov [bp + 50], a1151
335:	

printArgument$90:	; Call 44 printChar 0
336:		mov word [bp + 44], printArgument$91
337:		mov [bp + 46], bp
338:		add bp, 44
339:		jmp printChar
341:	

printArgument$91:	; PostCall 44
343:	

printArgument$92:	; Goto 360
344:		jmp printArgument$360
346:	

printArgument$93:	; BinaryAdd arg_list arg_list 2
347:		add word [bp + 8], 2
349:	

printArgument$94:	; BinarySubtract £temporary1862 arg_list 2
350:		mov a1152, [bp + 8]
351:		sub a1152, 2
353:	

printArgument$95:	; IntegralToIntegral £temporary1863 £temporary1862
356:	

printArgument$96:	; Deref £temporary1864 -> £temporary1863 £temporary1863 0
358:	

printArgument$97:	; Assign stringValue £temporary1864 -> £temporary1863
359:		mov t1153, [a1152]
360:		mov [bp + 44], t1153
362:	

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
364:	

printArgument$99:	; Parameter 46 arg_list 6
365:		mov a1154, [bp + 8]
366:		mov [bp + 52], a1154
368:	

printArgument$100:	; Parameter 46 widthPtr 8
369:		mov a1155, [bp + 16]
370:		mov [bp + 54], a1155
372:	

printArgument$101:	; address £temporary1865 precision
373:		mov t1156, bp
374:		add t1156, 18
376:	

printArgument$102:	; Parameter 46 £temporary1865 10
377:		mov [bp + 56], t1156
379:	

printArgument$103:	; Call 46 checkWidthAndPrecision 0
380:		mov word [bp + 46], printArgument$104
381:		mov [bp + 48], bp
382:		add bp, 46
383:		jmp checkWidthAndPrecision
385:	

printArgument$104:	; PostCall 46
387:	

printArgument$105:	; GetReturnValue £temporary1866
389:	

printArgument$106:	; Assign arg_list £temporary1866
390:		mov [bp + 8], type1157
392:	

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
394:	

printArgument$108:	; Parameter 46 stringValue 6
395:		mov a1158, [bp + 44]
396:		mov [bp + 52], a1158
398:	

printArgument$109:	; Parameter 46 precision 8
399:		mov a1159, [bp + 18]
400:		mov [bp + 54], a1159
402:	

printArgument$110:	; Call 46 printString 0
403:		mov word [bp + 46], printArgument$111
404:		mov [bp + 48], bp
405:		add bp, 46
406:		jmp printString
408:	

printArgument$111:	; PostCall 46
410:	

printArgument$112:	; Goto 360
411:		jmp printArgument$360
413:	

printArgument$113:	; NotEqual 116 c 117
414:		cmp byte [bp + 30], 117
415:		jne printArgument$116
417:	

printArgument$114:	; Assign £temporary1882 10
418:		mov t1160, 10
420:	

printArgument$115:	; Goto 125
421:		jmp printArgument$125
423:	

printArgument$116:	; NotEqual 119 c 111
424:		cmp byte [bp + 30], 111
425:		jne printArgument$119
427:	

printArgument$117:	; Assign £temporary1878 8
428:		mov t1161, 8
430:	

printArgument$118:	; Goto 124
431:		jmp printArgument$124
433:	

printArgument$119:	; NotEqual 122 c 98
434:		cmp byte [bp + 30], 98
435:		jne printArgument$122
437:	

printArgument$120:	; Assign £temporary1874 2
438:		mov t1162, 2
440:	

printArgument$121:	; Goto 123
441:		jmp printArgument$123
443:	

printArgument$122:	; Assign £temporary1874 16
444:		mov t1163, 16
446:	

printArgument$123:	; Assign £temporary1878 £temporary1874
448:	

printArgument$124:	; Assign £temporary1882 £temporary1878
450:	

printArgument$125:	; Assign base £temporary1882
451:		mov [bp + 44], t1163
453:	

printArgument$126:	; Equal 135 shortInt 0
454:		cmp word [bp + 20], 0
455:		je printArgument$135
457:	

printArgument$127:	; BinaryAdd arg_list arg_list 2
458:		add word [bp + 8], 2
460:	

printArgument$128:	; BinarySubtract £temporary1884 arg_list 2
461:		mov a1166, [bp + 8]
462:		sub a1166, 2
464:	

printArgument$129:	; IntegralToIntegral £temporary1885 £temporary1884
467:	

printArgument$130:	; Deref £temporary1886 -> £temporary1885 £temporary1885 0
469:	

printArgument$131:	; IntegralToIntegral £temporary1887 £temporary1886 -> £temporary1885
470:		mov t1167, [a1166]
473:	

printArgument$132:	; IntegralToIntegral £temporary1888 £temporary1887
475:		and t1167, 255
477:	

printArgument$133:	; Assign value £temporary1888
478:		mov [bp + 48], t1167
480:	

printArgument$134:	; Goto 148
481:		jmp printArgument$148
483:	

printArgument$135:	; Equal 142 longInt 0
484:		cmp word [bp + 22], 0
485:		je printArgument$142
487:	

printArgument$136:	; BinaryAdd arg_list arg_list 4
488:		add word [bp + 8], 4
490:	

printArgument$137:	; BinarySubtract £temporary1890 arg_list 4
491:		mov a1168, [bp + 8]
492:		sub a1168, 4
494:	

printArgument$138:	; IntegralToIntegral £temporary1891 £temporary1890
497:	

printArgument$139:	; Deref £temporary1892 -> £temporary1891 £temporary1891 0
499:	

printArgument$140:	; Assign value £temporary1892 -> £temporary1891
500:		mov t1169, [a1168]
501:		mov [bp + 48], t1169
503:	

printArgument$141:	; Goto 148
504:		jmp printArgument$148
506:	

printArgument$142:	; BinaryAdd arg_list arg_list 2
507:		add word [bp + 8], 2
509:	

printArgument$143:	; BinarySubtract £temporary1894 arg_list 2
510:		mov a1170, [bp + 8]
511:		sub a1170, 2
513:	

printArgument$144:	; IntegralToIntegral £temporary1895 £temporary1894
516:	

printArgument$145:	; Deref £temporary1896 -> £temporary1895 £temporary1895 0
518:	

printArgument$146:	; IntegralToIntegral £temporary1897 £temporary1896 -> £temporary1895
519:		mov t1171, [a1170]
521:		and t1171, 65535
523:	

printArgument$147:	; Assign value £temporary1897
524:		mov [bp + 48], t1171
526:	

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
528:	

printArgument$149:	; Parameter 52 arg_list 6
529:		mov a1172, [bp + 8]
530:		mov [bp + 58], a1172
532:	

printArgument$150:	; Parameter 52 widthPtr 8
533:		mov a1173, [bp + 16]
534:		mov [bp + 60], a1173
536:	

printArgument$151:	; address £temporary1900 precision
537:		mov t1174, bp
538:		add t1174, 18
540:	

printArgument$152:	; Parameter 52 £temporary1900 10
541:		mov [bp + 62], t1174
543:	

printArgument$153:	; Call 52 checkWidthAndPrecision 0
544:		mov word [bp + 52], printArgument$154
545:		mov [bp + 54], bp
546:		add bp, 52
547:		jmp checkWidthAndPrecision
549:	

printArgument$154:	; PostCall 52
551:	

printArgument$155:	; GetReturnValue £temporary1901
553:	

printArgument$156:	; Assign arg_list £temporary1901
554:		mov [bp + 8], type1175
556:	

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
558:	

printArgument$158:	; Parameter 52 value 6
559:		mov a1176, [bp + 48]
560:		mov [bp + 58], a1176
562:	

printArgument$159:	; Parameter 52 plus 10
563:		mov a1177, [bp + 10]
564:		mov [bp + 62], a1177
566:	

printArgument$160:	; Parameter 52 space 12
567:		mov a1178, [bp + 12]
568:		mov [bp + 64], a1178
570:	

printArgument$161:	; Parameter 52 grid 14
571:		mov a1179, [bp + 14]
572:		mov [bp + 66], a1179
574:	

printArgument$162:	; Parameter 52 base 16
575:		mov a1180, [bp + 44]
576:		mov [bp + 68], a1180
578:	

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
580:	

printArgument$164:	; IntegralToIntegral £temporary1902 c
581:		mov a1181, [bp + 30]
583:		and a1181, 255
585:		cmp a1181, 0
586:		jge printArgument$165
587:		neg a1181
589:		neg a1181
591:	

printArgument$165:	; Parameter 52 £temporary1902 26
592:		mov [bp + 78], a1181
594:	

printArgument$166:	; Call 52 isupper 20
595:		mov word [bp + 72], printArgument$167
596:		mov [bp + 74], bp
597:		add bp, 72
598:		jmp isupper
600:	

printArgument$167:	; PostCall 52
602:	

printArgument$168:	; GetReturnValue £temporary1903
604:	

printArgument$169:	; Parameter 52 £temporary1903 20
605:		mov [bp + 72], type1182
607:	

printArgument$170:	; Call 52 printUnsignedLong 0
608:		mov word [bp + 52], printArgument$171
609:		mov [bp + 54], bp
610:		add bp, 52
611:		jmp printUnsignedLong
613:	

printArgument$171:	; PostCall 52
615:	

printArgument$172:	; Goto 360
616:		jmp printArgument$360
618:	

printArgument$173:	; Equal 190 longDouble 0
619:		cmp word [bp + 24], 0
620:		je printArgument$190
622:	

printArgument$174:	; BinaryAdd arg_list arg_list 8
623:		add word [bp + 8], 8
625:	

printArgument$175:	; BinarySubtract £temporary1906 arg_list 8
626:		mov a1183, [bp + 8]
627:		sub a1183, 8
629:	

printArgument$176:	; IntegralToIntegral £temporary1907 £temporary1906
632:	

printArgument$177:	; Deref £temporary1908 -> £temporary1907 £temporary1907 0
634:	

printArgument$178:	; PushFloat £temporary1908 -> £temporary1907
635:		fld qword [a1183]
637:	

printArgument$179:	; PopFloat longDoubleValue
638:		fstp qword [bp + 34]
640:	

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
642:	

printArgument$181:	; PushFloat longDoubleValue
643:		fld qword [bp + 34]
645:	

printArgument$182:	; Parameter 44 longDoubleValue 6
646:		fstp qword [bp + 50]
648:	

printArgument$183:	; Parameter 44 0 14
649:		mov word [bp + 58], 0
651:	

printArgument$184:	; Parameter 44 0 16
652:		mov word [bp + 60], 0
654:	

printArgument$185:	; Parameter 44 0 18
655:		mov word [bp + 62], 0
657:	

printArgument$186:	; Parameter 44 3 20
658:		mov word [bp + 64], 3
660:	

printArgument$187:	; Call 44 printLongDoublePlain 0
661:		mov word [bp + 44], printArgument$188
662:		mov [bp + 46], bp
663:		add bp, 44
664:		jmp printLongDoublePlain
666:	

printArgument$188:	; PostCall 44
668:	

printArgument$189:	; Goto 196
669:		jmp printArgument$196
671:	

printArgument$190:	; BinaryAdd arg_list arg_list 8
672:		add word [bp + 8], 8
674:	

printArgument$191:	; BinarySubtract £temporary1911 arg_list 8
675:		mov a1184, [bp + 8]
676:		sub a1184, 8
678:	

printArgument$192:	; IntegralToIntegral £temporary1912 £temporary1911
681:	

printArgument$193:	; Deref £temporary1913 -> £temporary1912 £temporary1912 0
683:	

printArgument$194:	; PushFloat £temporary1913 -> £temporary1912
684:		fld qword [a1184]
686:	

printArgument$195:	; PopFloat longDoubleValue
687:		fstp qword [bp + 34]
689:	

printArgument$196:	; Equal 205 negativePtr 0
690:		cmp word [bp + 28], 0
691:		je printArgument$205
693:	

printArgument$197:	; Deref £temporary1917 -> negativePtr negativePtr 0
694:		mov a1185, [bp + 28]
696:	

printArgument$198:	; PushFloat longDoubleValue
697:		fld qword [bp + 34]
699:	

printArgument$199:	; PushZero
700:		fldz
702:	

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
703:		fcompp
704:		fstsw ax
705:		sahf
706:		jbe printArgument$203
708:	

printArgument$201:	; Assign £temporary1919 1
709:		mov t1186, 1
711:	

printArgument$202:	; Goto 204
712:		jmp printArgument$204
714:	

printArgument$203:	; Assign £temporary1919 0
715:		mov t1187, 0
717:	

printArgument$204:	; Assign £temporary1917 -> negativePtr £temporary1919
718:		mov [a1185], t1187
720:	

printArgument$205:	; NotEqual 213 sign 0
721:		cmp word [bp + 26], 0
722:		jne printArgument$213
724:	

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
726:	

printArgument$207:	; PushFloat longDoubleValue
727:		fld qword [bp + 34]
729:	

printArgument$208:	; Parameter 44 longDoubleValue 6
730:		fstp qword [bp + 50]
732:	

printArgument$209:	; Call 44 fabs 0
733:		mov word [bp + 44], printArgument$210
734:		mov [bp + 46], bp
735:		add bp, 44
736:		jmp fabs
738:	

printArgument$210:	; PostCall 44
740:	

printArgument$211:	; GetReturnValue £temporary1922
742:	

printArgument$212:	; PopFloat longDoubleValue
743:		fstp qword [bp + 34]
745:	

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
747:	

printArgument$214:	; Parameter 44 arg_list 6
748:		mov a1188, [bp + 8]
749:		mov [bp + 50], a1188
751:	

printArgument$215:	; Parameter 44 widthPtr 8
752:		mov a1189, [bp + 16]
753:		mov [bp + 52], a1189
755:	

printArgument$216:	; address £temporary1923 precision
756:		mov t1190, bp
757:		add t1190, 18
759:	

printArgument$217:	; Parameter 44 £temporary1923 10
760:		mov [bp + 54], t1190
762:	

printArgument$218:	; Call 44 checkWidthAndPrecision 0
763:		mov word [bp + 44], printArgument$219
764:		mov [bp + 46], bp
765:		add bp, 44
766:		jmp checkWidthAndPrecision
768:	

printArgument$219:	; PostCall 44
770:	

printArgument$220:	; GetReturnValue £temporary1924
772:	

printArgument$221:	; Assign arg_list £temporary1924
773:		mov [bp + 8], type1191
775:	

printArgument$222:	; NotEqual 233 c 102
776:		cmp byte [bp + 30], 102
777:		jne printArgument$233
779:	

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
781:	

printArgument$224:	; PushFloat longDoubleValue
782:		fld qword [bp + 34]
784:	

printArgument$225:	; Parameter 44 longDoubleValue 6
785:		fstp qword [bp + 50]
787:	

printArgument$226:	; Parameter 44 plus 14
788:		mov a1192, [bp + 10]
789:		mov [bp + 58], a1192
791:	

printArgument$227:	; Parameter 44 space 16
792:		mov a1193, [bp + 12]
793:		mov [bp + 60], a1193
795:	

printArgument$228:	; Parameter 44 grid 18
796:		mov a1194, [bp + 14]
797:		mov [bp + 62], a1194
799:	

printArgument$229:	; Parameter 44 precision 20
800:		mov a1195, [bp + 18]
801:		mov [bp + 64], a1195
803:	

printArgument$230:	; Call 44 printLongDoublePlain 0
804:		mov word [bp + 44], printArgument$231
805:		mov [bp + 46], bp
806:		add bp, 44
807:		jmp printLongDoublePlain
809:	

printArgument$231:	; PostCall 44
811:	

printArgument$232:	; Goto 360
812:		jmp printArgument$360
814:	

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
816:	

printArgument$234:	; IntegralToIntegral £temporary1927 c
817:		mov a1196, [bp + 30]
819:		and a1196, 255
821:		cmp a1196, 0
822:		jge printArgument$235
823:		neg a1196
825:		neg a1196
827:	

printArgument$235:	; Parameter 44 £temporary1927 6
828:		mov [bp + 50], a1196
830:	

printArgument$236:	; Call 44 tolower 0
831:		mov word [bp + 44], printArgument$237
832:		mov [bp + 46], bp
833:		add bp, 44
834:		jmp tolower
836:	

printArgument$237:	; PostCall 44
838:	

printArgument$238:	; GetReturnValue £temporary1928
840:	

printArgument$239:	; NotEqual 257 £temporary1928 101
841:		cmp type1197, 101
842:		jne printArgument$257
844:	

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
846:	

printArgument$241:	; PushFloat longDoubleValue
847:		fld qword [bp + 34]
849:	

printArgument$242:	; Parameter 44 longDoubleValue 6
850:		fstp qword [bp + 50]
852:	

printArgument$243:	; Parameter 44 plus 14
853:		mov a1198, [bp + 10]
854:		mov [bp + 58], a1198
856:	

printArgument$244:	; Parameter 44 space 16
857:		mov a1199, [bp + 12]
858:		mov [bp + 60], a1199
860:	

printArgument$245:	; Parameter 44 grid 18
861:		mov a1200, [bp + 14]
862:		mov [bp + 62], a1200
864:	

printArgument$246:	; Parameter 44 precision 20
865:		mov a1201, [bp + 18]
866:		mov [bp + 64], a1201
868:	

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
870:	

printArgument$248:	; IntegralToIntegral £temporary1930 c
871:		mov a1202, [bp + 30]
873:		and a1202, 255
875:		cmp a1202, 0
876:		jge printArgument$249
877:		neg a1202
879:		neg a1202
881:	

printArgument$249:	; Parameter 44 £temporary1930 28
882:		mov [bp + 72], a1202
884:	

printArgument$250:	; Call 44 isupper 22
885:		mov word [bp + 66], printArgument$251
886:		mov [bp + 68], bp
887:		add bp, 66
888:		jmp isupper
890:	

printArgument$251:	; PostCall 44
892:	

printArgument$252:	; GetReturnValue £temporary1931
894:	

printArgument$253:	; Parameter 44 £temporary1931 22
895:		mov [bp + 66], type1203
897:	

printArgument$254:	; Call 44 printLongDoubleExpo 0
898:		mov word [bp + 44], printArgument$255
899:		mov [bp + 46], bp
900:		add bp, 44
901:		jmp printLongDoubleExpo
903:	

printArgument$255:	; PostCall 44
905:	

printArgument$256:	; Goto 360
906:		jmp printArgument$360
908:	

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
910:	

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
912:	

printArgument$259:	; PushFloat longDoubleValue
913:		fld qword [bp + 34]
915:	

printArgument$260:	; Parameter 44 longDoubleValue 6
916:		fstp qword [bp + 50]
918:	

printArgument$261:	; Call 44 fabs 0
919:		mov word [bp + 44], printArgument$262
920:		mov [bp + 46], bp
921:		add bp, 44
922:		jmp fabs
924:	

printArgument$262:	; PostCall 44
926:	

printArgument$263:	; GetReturnValue £temporary1933
928:	

printArgument$264:	; Parameter 44 £temporary1933 6
929:		fstp qword [bp + 50]
931:	

printArgument$265:	; Call 44 log10 0
932:		mov word [bp + 44], printArgument$266
933:		mov [bp + 46], bp
934:		add bp, 44
935:		jmp log10
937:	

printArgument$266:	; PostCall 44
939:	

printArgument$267:	; GetReturnValue £temporary1934
941:	

printArgument$268:	; FloatingToIntegral £temporary1935 £temporary1934
942:		fistp word [container2bytes#]
943:		mov t1204, [container2bytes#]
945:	

printArgument$269:	; Assign expo £temporary1935
946:		mov [bp + 44], t1204
948:	

printArgument$270:	; SignedLessThan 282 expo -3
949:		cmp word [bp + 44], -3
950:		jl printArgument$282
952:	

printArgument$271:	; SignedGreaterThan 282 expo 2
953:		cmp word [bp + 44], 2
954:		jg printArgument$282
956:	

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
958:	

printArgument$273:	; PushFloat longDoubleValue
959:		fld qword [bp + 34]
961:	

printArgument$274:	; Parameter 46 longDoubleValue 6
962:		fstp qword [bp + 52]
964:	

printArgument$275:	; Parameter 46 plus 14
965:		mov a1205, [bp + 10]
966:		mov [bp + 60], a1205
968:	

printArgument$276:	; Parameter 46 space 16
969:		mov a1206, [bp + 12]
970:		mov [bp + 62], a1206
972:	

printArgument$277:	; Parameter 46 grid 18
973:		mov a1207, [bp + 14]
974:		mov [bp + 64], a1207
976:	

printArgument$278:	; Parameter 46 precision 20
977:		mov a1208, [bp + 18]
978:		mov [bp + 66], a1208
980:	

printArgument$279:	; Call 46 printLongDoublePlain 0
981:		mov word [bp + 46], printArgument$280
982:		mov [bp + 48], bp
983:		add bp, 46
984:		jmp printLongDoublePlain
986:	

printArgument$280:	; PostCall 46
988:	

printArgument$281:	; Goto 360
989:		jmp printArgument$360
991:	

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
993:	

printArgument$283:	; PushFloat longDoubleValue
994:		fld qword [bp + 34]
996:	

printArgument$284:	; Parameter 46 longDoubleValue 6
997:		fstp qword [bp + 52]
999:	

printArgument$285:	; Parameter 46 plus 14
1000:		mov a1209, [bp + 10]
1001:		mov [bp + 60], a1209
1003:	

printArgument$286:	; Parameter 46 space 16
1004:		mov a1210, [bp + 12]
1005:		mov [bp + 62], a1210
1007:	

printArgument$287:	; Parameter 46 grid 18
1008:		mov a1211, [bp + 14]
1009:		mov [bp + 64], a1211
1011:	

printArgument$288:	; Parameter 46 precision 20
1012:		mov a1212, [bp + 18]
1013:		mov [bp + 66], a1212
1015:	

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1017:	

printArgument$290:	; IntegralToIntegral £temporary1940 c
1018:		mov a1213, [bp + 30]
1020:		and a1213, 255
1022:		cmp a1213, 0
1023:		jge printArgument$291
1024:		neg a1213
1026:		neg a1213
1028:	

printArgument$291:	; Parameter 46 £temporary1940 28
1029:		mov [bp + 74], a1213
1031:	

printArgument$292:	; Call 46 isupper 22
1032:		mov word [bp + 68], printArgument$293
1033:		mov [bp + 70], bp
1034:		add bp, 68
1035:		jmp isupper
1037:	

printArgument$293:	; PostCall 46
1039:	

printArgument$294:	; GetReturnValue £temporary1941
1041:	

printArgument$295:	; Parameter 46 £temporary1941 22
1042:		mov [bp + 68], type1214
1044:	

printArgument$296:	; Call 46 printLongDoubleExpo 0
1045:		mov word [bp + 46], printArgument$297
1046:		mov [bp + 48], bp
1047:		add bp, 46
1048:		jmp printLongDoubleExpo
1050:	

printArgument$297:	; PostCall 46
1052:	

printArgument$298:	; Goto 360
1053:		jmp printArgument$360
1055:	

printArgument$299:	; BinaryAdd arg_list arg_list 2
1056:		add word [bp + 8], 2
1058:	

printArgument$300:	; BinarySubtract £temporary1944 arg_list 2
1059:		mov a1215, [bp + 8]
1060:		sub a1215, 2
1062:	

printArgument$301:	; IntegralToIntegral £temporary1945 £temporary1944
1065:	

printArgument$302:	; Deref £temporary1946 -> £temporary1945 £temporary1945 0
1067:	

printArgument$303:	; Assign ptrValue £temporary1946 -> £temporary1945
1068:		mov t1216, [a1215]
1069:		mov [bp + 42], t1216
1071:	

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1073:	

printArgument$305:	; Parameter 44 arg_list 6
1074:		mov a1217, [bp + 8]
1075:		mov [bp + 50], a1217
1077:	

printArgument$306:	; Parameter 44 widthPtr 8
1078:		mov a1218, [bp + 16]
1079:		mov [bp + 52], a1218
1081:	

printArgument$307:	; address £temporary1947 precision
1082:		mov t1219, bp
1083:		add t1219, 18
1085:	

printArgument$308:	; Parameter 44 £temporary1947 10
1086:		mov [bp + 54], t1219
1088:	

printArgument$309:	; Call 44 checkWidthAndPrecision 0
1089:		mov word [bp + 44], printArgument$310
1090:		mov [bp + 46], bp
1091:		add bp, 44
1092:		jmp checkWidthAndPrecision
1094:	

printArgument$310:	; PostCall 44
1096:	

printArgument$311:	; GetReturnValue £temporary1948
1098:	

printArgument$312:	; Assign arg_list £temporary1948
1099:		mov [bp + 8], type1220
1101:	

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1103:	

printArgument$314:	; IntegralToIntegral £temporary1949 ptrValue
1104:		mov a1221, [bp + 42]
1107:	

printArgument$315:	; IntegralToIntegral £temporary1950 £temporary1949
1109:		and a1221, 65535
1111:	

printArgument$316:	; Parameter 44 £temporary1950 6
1112:		mov [bp + 50], a1221
1114:	

printArgument$317:	; Parameter 44 0 10
1115:		mov word [bp + 54], 0
1117:	

printArgument$318:	; Parameter 44 0 12
1118:		mov word [bp + 56], 0
1120:	

printArgument$319:	; Parameter 44 0 14
1121:		mov word [bp + 58], 0
1123:	

printArgument$320:	; Parameter 44 10 16
1124:		mov dword [bp + 60], 10
1126:	

printArgument$321:	; Parameter 44 0 20
1127:		mov word [bp + 64], 0
1129:	

printArgument$322:	; Call 44 printUnsignedLong 0
1130:		mov word [bp + 44], printArgument$323
1131:		mov [bp + 46], bp
1132:		add bp, 44
1133:		jmp printUnsignedLong
1135:	

printArgument$323:	; PostCall 44
1137:	

printArgument$324:	; Goto 360
1138:		jmp printArgument$360
1140:	

printArgument$325:	; BinaryAdd arg_list arg_list 2
1141:		add word [bp + 8], 2
1143:	

printArgument$326:	; BinarySubtract £temporary1953 arg_list 2
1144:		mov a1222, [bp + 8]
1145:		sub a1222, 2
1147:	

printArgument$327:	; IntegralToIntegral £temporary1954 £temporary1953
1150:	

printArgument$328:	; Deref £temporary1955 -> £temporary1954 £temporary1954 0
1152:	

printArgument$329:	; Assign ptrValue £temporary1955 -> £temporary1954
1153:		mov t1223, [a1222]
1154:		mov [bp + 42], t1223
1156:	

printArgument$330:	; BinaryAdd arg_list arg_list 2
1157:		add word [bp + 8], 2
1159:	

printArgument$331:	; BinarySubtract £temporary1957 arg_list 2
1160:		mov a1224, [bp + 8]
1161:		sub a1224, 2
1163:	

printArgument$332:	; IntegralToIntegral £temporary1958 £temporary1957
1166:	

printArgument$333:	; Deref £temporary1959 -> £temporary1958 £temporary1958 0
1168:	

printArgument$334:	; Assign intPtr £temporary1959 -> £temporary1958
1169:		mov t1225, [a1224]
1170:		mov [bp + 32], t1225
1172:	

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1174:	

printArgument$336:	; Parameter 44 arg_list 6
1175:		mov a1226, [bp + 8]
1176:		mov [bp + 50], a1226
1178:	

printArgument$337:	; Parameter 44 widthPtr 8
1179:		mov a1227, [bp + 16]
1180:		mov [bp + 52], a1227
1182:	

printArgument$338:	; address £temporary1960 precision
1183:		mov t1228, bp
1184:		add t1228, 18
1186:	

printArgument$339:	; Parameter 44 £temporary1960 10
1187:		mov [bp + 54], t1228
1189:	

printArgument$340:	; Call 44 checkWidthAndPrecision 0
1190:		mov word [bp + 44], printArgument$341
1191:		mov [bp + 46], bp
1192:		add bp, 44
1193:		jmp checkWidthAndPrecision
1195:	

printArgument$341:	; PostCall 44
1197:	

printArgument$342:	; GetReturnValue £temporary1961
1199:	

printArgument$343:	; Assign arg_list £temporary1961
1200:		mov [bp + 8], type1229
1202:	

printArgument$344:	; Deref £temporary1962 -> intPtr intPtr 0
1203:		mov a1230, [bp + 32]
1205:	

printArgument$345:	; Assign £temporary1962 -> intPtr g_outChars
1206:		mov a1231, [g_outChars]
1207:		mov [a1230], a1231
1209:	

printArgument$346:	; Goto 360
1210:		jmp printArgument$360
1212:	

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1214:	

printArgument$348:	; Parameter 44 arg_list 6
1215:		mov a1232, [bp + 8]
1216:		mov [bp + 50], a1232
1218:	

printArgument$349:	; Parameter 44 widthPtr 8
1219:		mov a1233, [bp + 16]
1220:		mov [bp + 52], a1233
1222:	

printArgument$350:	; address £temporary1963 precision
1223:		mov t1234, bp
1224:		add t1234, 18
1226:	

printArgument$351:	; Parameter 44 £temporary1963 10
1227:		mov [bp + 54], t1234
1229:	

printArgument$352:	; Call 44 checkWidthAndPrecision 0
1230:		mov word [bp + 44], printArgument$353
1231:		mov [bp + 46], bp
1232:		add bp, 44
1233:		jmp checkWidthAndPrecision
1235:	

printArgument$353:	; PostCall 44
1237:	

printArgument$354:	; GetReturnValue £temporary1964
1239:	

printArgument$355:	; Assign arg_list £temporary1964
1240:		mov [bp + 8], type1235
1242:	

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
1244:	

printArgument$357:	; Parameter 44 37 6
1245:		mov byte [bp + 50], 37
1247:	

printArgument$358:	; Call 44 printChar 0
1248:		mov word [bp + 44], printArgument$359
1249:		mov [bp + 46], bp
1250:		add bp, 44
1251:		jmp printChar
1253:	

printArgument$359:	; PostCall 44
1255:	

printArgument$360:	; SetReturnValue arg_list
1256:		mov a1236, [bp + 8]
1258:	

printArgument$361:	; Return arg_list
1259:		mov t1237, [bp]
1260:		mov di, [bp + 4]
1261:		mov bp, [bp + 2]
1262:		jmp t1237
1264:	

printArgument$362:	; FunctionEnd printArgument
1:	

printFormat:	; Assign width 0
2:		mov word [bp + 12], 0
4:	

printFormat$1:	; Assign precision 0
5:		mov word [bp + 14], 0
7:	

printFormat$2:	; Assign percent 0
8:		mov word [bp + 16], 0
10:	

printFormat$3:	; Assign plus 0
11:		mov word [bp + 18], 0
13:	

printFormat$4:	; Assign minus 0
14:		mov word [bp + 20], 0
16:	

printFormat$5:	; Assign space 0
17:		mov word [bp + 22], 0
19:	

printFormat$6:	; Assign zero 0
20:		mov word [bp + 24], 0
22:	

printFormat$7:	; Assign grid 0
23:		mov word [bp + 26], 0
25:	

printFormat$8:	; Assign widthStar 0
26:		mov word [bp + 28], 0
28:	

printFormat$9:	; Assign period 0
29:		mov word [bp + 30], 0
31:	

printFormat$10:	; Assign precisionStar 0
32:		mov word [bp + 32], 0
34:	

printFormat$11:	; Assign shortInt 0
35:		mov word [bp + 34], 0
37:	

printFormat$12:	; Assign longInt 0
38:		mov word [bp + 36], 0
40:	

printFormat$13:	; Assign longDouble 0
41:		mov word [bp + 38], 0
43:	

printFormat$14:	; Assign g_outChars 0
44:		mov word [g_outChars], 0
46:	

printFormat$15:	; Assign index 0
47:		mov word [bp + 10], 0
49:	

printFormat$16:	; BinaryAdd £temporary2053 format index
50:		mov a1238, [bp + 6]
51:		add a1238, [bp + 10]
53:	

printFormat$17:	; Deref £temporary2052 -> £temporary2053 £temporary2053 0
55:	

printFormat$18:	; Equal 284 £temporary2052 -> £temporary2053 0
56:		cmp byte [a1238], 0
57:		je printFormat$284
59:	

printFormat$19:	; BinaryAdd £temporary2057 format index
60:		mov a1239, [bp + 6]
61:		add a1239, [bp + 10]
63:	

printFormat$20:	; Deref £temporary2056 -> £temporary2057 £temporary2057 0
65:	

printFormat$21:	; Assign c £temporary2056 -> £temporary2057
66:		mov t1240, [a1239]
67:		mov [bp + 40], t1240
69:	

printFormat$22:	; Equal 262 percent 0
70:		cmp word [bp + 16], 0
71:		je printFormat$262
73:	

printFormat$23:	; Case 52 c 43
74:		mov a1241, [bp + 40]
75:		cmp a1241, 43
76:		je printFormat$52
78:	

printFormat$24:	; Case 54 c 45
79:		cmp a1241, 45
80:		je printFormat$54
82:	

printFormat$25:	; Case 56 c 32
83:		cmp a1241, 32
84:		je printFormat$56
86:	

printFormat$26:	; Case 58 c 48
87:		cmp a1241, 48
88:		je printFormat$58
90:	

printFormat$27:	; Case 60 c 35
91:		cmp a1241, 35
92:		je printFormat$60
94:	

printFormat$28:	; Case 62 c 46
95:		cmp a1241, 46
96:		je printFormat$62
98:	

printFormat$29:	; Case 64 c 42
99:		cmp a1241, 42
100:		je printFormat$64
102:	

printFormat$30:	; Case 69 c 104
103:		cmp a1241, 104
104:		je printFormat$69
106:	

printFormat$31:	; Case 71 c 108
107:		cmp a1241, 108
108:		je printFormat$71
110:	

printFormat$32:	; Case 73 c 76
111:		cmp a1241, 76
112:		je printFormat$73
114:	

printFormat$33:	; Case 75 c 37
115:		cmp a1241, 37
116:		je printFormat$75
118:	

printFormat$34:	; Case 75 c 110
119:		cmp a1241, 110
120:		je printFormat$75
122:	

printFormat$35:	; Case 75 c 112
123:		cmp a1241, 112
124:		je printFormat$75
126:	

printFormat$36:	; Case 75 c 71
127:		cmp a1241, 71
128:		je printFormat$75
130:	

printFormat$37:	; Case 75 c 103
131:		cmp a1241, 103
132:		je printFormat$75
134:	

printFormat$38:	; Case 75 c 69
135:		cmp a1241, 69
136:		je printFormat$75
138:	

printFormat$39:	; Case 75 c 101
139:		cmp a1241, 101
140:		je printFormat$75
142:	

printFormat$40:	; Case 75 c 102
143:		cmp a1241, 102
144:		je printFormat$75
146:	

printFormat$41:	; Case 75 c 115
147:		cmp a1241, 115
148:		je printFormat$75
150:	

printFormat$42:	; Case 75 c 99
151:		cmp a1241, 99
152:		je printFormat$75
154:	

printFormat$43:	; Case 75 c 88
155:		cmp a1241, 88
156:		je printFormat$75
158:	

printFormat$44:	; Case 75 c 120
159:		cmp a1241, 120
160:		je printFormat$75
162:	

printFormat$45:	; Case 75 c 111
163:		cmp a1241, 111
164:		je printFormat$75
166:	

printFormat$46:	; Case 75 c 98
167:		cmp a1241, 98
168:		je printFormat$75
170:	

printFormat$47:	; Case 75 c 117
171:		cmp a1241, 117
172:		je printFormat$75
174:	

printFormat$48:	; Case 75 c 100
175:		cmp a1241, 100
176:		je printFormat$75
178:	

printFormat$49:	; Case 75 c 105
179:		cmp a1241, 105
180:		je printFormat$75
182:	

printFormat$50:	; CaseEnd c
184:	

printFormat$51:	; Goto 239
185:		jmp printFormat$239
187:	

printFormat$52:	; Assign plus 1
188:		mov word [bp + 18], 1
190:	

printFormat$53:	; Goto 282
191:		jmp printFormat$282
193:	

printFormat$54:	; Assign minus 1
194:		mov word [bp + 20], 1
196:	

printFormat$55:	; Goto 282
197:		jmp printFormat$282
199:	

printFormat$56:	; Assign space 1
200:		mov word [bp + 22], 1
202:	

printFormat$57:	; Goto 282
203:		jmp printFormat$282
205:	

printFormat$58:	; Assign zero 1
206:		mov word [bp + 24], 1
208:	

printFormat$59:	; Goto 282
209:		jmp printFormat$282
211:	

printFormat$60:	; Assign grid 1
212:		mov word [bp + 26], 1
214:	

printFormat$61:	; Goto 282
215:		jmp printFormat$282
217:	

printFormat$62:	; Assign period 1
218:		mov word [bp + 30], 1
220:	

printFormat$63:	; Goto 282
221:		jmp printFormat$282
223:	

printFormat$64:	; NotEqual 67 period 0
224:		cmp word [bp + 30], 0
225:		jne printFormat$67
227:	

printFormat$65:	; Assign width -1
228:		mov word [bp + 12], -1
230:	

printFormat$66:	; Goto 282
231:		jmp printFormat$282
233:	

printFormat$67:	; Assign precision -1
234:		mov word [bp + 14], -1
236:	

printFormat$68:	; Goto 282
237:		jmp printFormat$282
239:	

printFormat$69:	; Assign shortInt 1
240:		mov word [bp + 34], 1
242:	

printFormat$70:	; Goto 282
243:		jmp printFormat$282
245:	

printFormat$71:	; Assign longInt 1
246:		mov word [bp + 36], 1
248:	

printFormat$72:	; Goto 282
249:		jmp printFormat$282
251:	

printFormat$73:	; Assign longDouble 1
252:		mov word [bp + 38], 1
254:	

printFormat$74:	; Goto 282
255:		jmp printFormat$282
257:	

printFormat$75:	; Equal 107 minus 0
258:		cmp word [bp + 20], 0
259:		je printFormat$107
261:	

printFormat$76:	; Assign startChars g_outChars
262:		mov a1242, [g_outChars]
263:		mov [bp + 41], a1242
265:	

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
267:	

printFormat$78:	; BinaryAdd £temporary2061 format index
268:		mov a1243, [bp + 6]
269:		add a1243, [bp + 10]
271:	

printFormat$79:	; Deref £temporary2060 -> £temporary2061 £temporary2061 0
273:	

printFormat$80:	; address £temporary2062 £temporary2060 -> £temporary2061
275:	

printFormat$81:	; Parameter 43 £temporary2062 6
276:		mov [bp + 49], a1243
278:	

printFormat$82:	; Parameter 43 arg_list 8
279:		mov a1244, [bp + 8]
280:		mov [bp + 51], a1244
282:	

printFormat$83:	; Parameter 43 plus 10
283:		mov a1245, [bp + 18]
284:		mov [bp + 53], a1245
286:	

printFormat$84:	; Parameter 43 space 12
287:		mov a1246, [bp + 22]
288:		mov [bp + 55], a1246
290:	

printFormat$85:	; Parameter 43 grid 14
291:		mov a1247, [bp + 26]
292:		mov [bp + 57], a1247
294:	

printFormat$86:	; address £temporary2063 width
295:		mov t1248, bp
296:		add t1248, 12
298:	

printFormat$87:	; Parameter 43 £temporary2063 16
299:		mov [bp + 59], t1248
301:	

printFormat$88:	; Parameter 43 precision 18
302:		mov a1249, [bp + 14]
303:		mov [bp + 61], a1249
305:	

printFormat$89:	; Parameter 43 shortInt 20
306:		mov a1250, [bp + 34]
307:		mov [bp + 63], a1250
309:	

printFormat$90:	; Parameter 43 longInt 22
310:		mov a1251, [bp + 36]
311:		mov [bp + 65], a1251
313:	

printFormat$91:	; Parameter 43 longDouble 24
314:		mov a1252, [bp + 38]
315:		mov [bp + 67], a1252
317:	

printFormat$92:	; Parameter 43 1 26
318:		mov word [bp + 69], 1
320:	

printFormat$93:	; Parameter 43 0 28
321:		mov word [bp + 71], 0
323:	

printFormat$94:	; Call 43 printArgument 0
324:		mov word [bp + 43], printFormat$95
325:		mov [bp + 45], bp
326:		add bp, 43
327:		jmp printArgument
329:	

printFormat$95:	; PostCall 43
331:	

printFormat$96:	; GetReturnValue £temporary2064
333:	

printFormat$97:	; Assign arg_list £temporary2064
334:		mov [bp + 8], type1253
336:	

printFormat$98:	; BinarySubtract field g_outChars startChars
337:		mov a1254, [g_outChars]
338:		sub a1254, [bp + 41]
339:		mov [bp + 43], a1254
341:	

printFormat$99:	; Assign £temporary2066 field
342:		mov t1255, [bp + 43]
344:	

printFormat$100:	; Increment field
345:		inc word [bp + 43]
347:	

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2066 width
348:		cmp t1255, [bp + 12]
349:		jge printFormat$237
351:	

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
353:	

printFormat$103:	; Parameter 45 32 6
354:		mov byte [bp + 51], 32
356:	

printFormat$104:	; Call 45 printChar 0
357:		mov word [bp + 45], printFormat$105
358:		mov [bp + 47], bp
359:		add bp, 45
360:		jmp printChar
362:	

printFormat$105:	; PostCall 45
364:	

printFormat$106:	; Goto 99
365:		jmp printFormat$99
367:	

printFormat$107:	; Equal 184 zero 0
368:		cmp word [bp + 24], 0
369:		je printFormat$184
371:	

printFormat$108:	; Assign startChars g_outChars
372:		mov a1256, [g_outChars]
373:		mov [bp + 41], a1256
375:	

printFormat$109:	; Assign oldOutStatus g_outStatus
376:		mov a1257, [g_outStatus]
377:		mov [bp + 43], a1257
379:	

printFormat$110:	; Assign negative 0
380:		mov word [bp + 45], 0
382:	

printFormat$111:	; Assign g_outStatus 2
383:		mov word [g_outStatus], 2
385:	

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
387:	

printFormat$113:	; BinaryAdd £temporary2071 format index
388:		mov a1258, [bp + 6]
389:		add a1258, [bp + 10]
391:	

printFormat$114:	; Deref £temporary2070 -> £temporary2071 £temporary2071 0
393:	

printFormat$115:	; address £temporary2072 £temporary2070 -> £temporary2071
395:	

printFormat$116:	; Parameter 47 £temporary2072 6
396:		mov [bp + 53], a1258
398:	

printFormat$117:	; Parameter 47 arg_list 8
399:		mov a1259, [bp + 8]
400:		mov [bp + 55], a1259
402:	

printFormat$118:	; Parameter 47 0 10
403:		mov word [bp + 57], 0
405:	

printFormat$119:	; Parameter 47 0 12
406:		mov word [bp + 59], 0
408:	

printFormat$120:	; Parameter 47 grid 14
409:		mov a1260, [bp + 26]
410:		mov [bp + 61], a1260
412:	

printFormat$121:	; address £temporary2073 width
413:		mov t1261, bp
414:		add t1261, 12
416:	

printFormat$122:	; Parameter 47 £temporary2073 16
417:		mov [bp + 63], t1261
419:	

printFormat$123:	; Parameter 47 precision 18
420:		mov a1262, [bp + 14]
421:		mov [bp + 65], a1262
423:	

printFormat$124:	; Parameter 47 shortInt 20
424:		mov a1263, [bp + 34]
425:		mov [bp + 67], a1263
427:	

printFormat$125:	; Parameter 47 longInt 22
428:		mov a1264, [bp + 36]
429:		mov [bp + 69], a1264
431:	

printFormat$126:	; Parameter 47 longDouble 24
432:		mov a1265, [bp + 38]
433:		mov [bp + 71], a1265
435:	

printFormat$127:	; Parameter 47 0 26
436:		mov word [bp + 73], 0
438:	

printFormat$128:	; address £temporary2074 negative
439:		mov t1266, bp
440:		add t1266, 45
442:	

printFormat$129:	; Parameter 47 £temporary2074 28
443:		mov [bp + 75], t1266
445:	

printFormat$130:	; Call 47 printArgument 0
446:		mov word [bp + 47], printFormat$131
447:		mov [bp + 49], bp
448:		add bp, 47
449:		jmp printArgument
451:	

printFormat$131:	; PostCall 47
453:	

printFormat$132:	; Assign g_outStatus oldOutStatus
454:		mov a1268, [bp + 43]
455:		mov [g_outStatus], a1268
457:	

printFormat$133:	; BinarySubtract field g_outChars startChars
458:		mov a1269, [g_outChars]
459:		sub a1269, [bp + 41]
460:		mov [bp + 47], a1269
462:	

printFormat$134:	; Assign g_outChars startChars
463:		mov a1270, [bp + 41]
464:		mov [g_outChars], a1270
466:	

printFormat$135:	; Equal 142 negative 0
467:		cmp word [bp + 45], 0
468:		je printFormat$142
470:	

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
472:	

printFormat$137:	; Parameter 49 45 6
473:		mov byte [bp + 55], 45
475:	

printFormat$138:	; Call 49 printChar 0
476:		mov word [bp + 49], printFormat$139
477:		mov [bp + 51], bp
478:		add bp, 49
479:		jmp printChar
481:	

printFormat$139:	; PostCall 49
483:	

printFormat$140:	; Increment field
484:		inc word [bp + 47]
486:	

printFormat$141:	; Goto 155
487:		jmp printFormat$155
489:	

printFormat$142:	; Equal 149 plus 0
490:		cmp word [bp + 18], 0
491:		je printFormat$149
493:	

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
495:	

printFormat$144:	; Parameter 49 43 6
496:		mov byte [bp + 55], 43
498:	

printFormat$145:	; Call 49 printChar 0
499:		mov word [bp + 49], printFormat$146
500:		mov [bp + 51], bp
501:		add bp, 49
502:		jmp printChar
504:	

printFormat$146:	; PostCall 49
506:	

printFormat$147:	; Increment field
507:		inc word [bp + 47]
509:	

printFormat$148:	; Goto 155
510:		jmp printFormat$155
512:	

printFormat$149:	; Equal 155 space 0
513:		cmp word [bp + 22], 0
514:		je printFormat$155
516:	

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
518:	

printFormat$151:	; Parameter 49 32 6
519:		mov byte [bp + 55], 32
521:	

printFormat$152:	; Call 49 printChar 0
522:		mov word [bp + 49], printFormat$153
523:		mov [bp + 51], bp
524:		add bp, 49
525:		jmp printChar
527:	

printFormat$153:	; PostCall 49
529:	

printFormat$154:	; Increment field
530:		inc word [bp + 47]
532:	

printFormat$155:	; Assign £temporary2086 field
533:		mov t1271, [bp + 47]
535:	

printFormat$156:	; Increment field
536:		inc word [bp + 47]
538:	

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2086 width
539:		cmp t1271, [bp + 12]
540:		jge printFormat$163
542:	

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
544:	

printFormat$159:	; Parameter 49 48 6
545:		mov byte [bp + 55], 48
547:	

printFormat$160:	; Call 49 printChar 0
548:		mov word [bp + 49], printFormat$161
549:		mov [bp + 51], bp
550:		add bp, 49
551:		jmp printChar
553:	

printFormat$161:	; PostCall 49
555:	

printFormat$162:	; Goto 155
556:		jmp printFormat$155
558:	

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
560:	

printFormat$164:	; BinaryAdd £temporary2091 format index
561:		mov a1272, [bp + 6]
562:		add a1272, [bp + 10]
564:	

printFormat$165:	; Deref £temporary2090 -> £temporary2091 £temporary2091 0
566:	

printFormat$166:	; address £temporary2092 £temporary2090 -> £temporary2091
568:	

printFormat$167:	; Parameter 49 £temporary2092 6
569:		mov [bp + 55], a1272
571:	

printFormat$168:	; Parameter 49 arg_list 8
572:		mov a1273, [bp + 8]
573:		mov [bp + 57], a1273
575:	

printFormat$169:	; Parameter 49 0 10
576:		mov word [bp + 59], 0
578:	

printFormat$170:	; Parameter 49 0 12
579:		mov word [bp + 61], 0
581:	

printFormat$171:	; Parameter 49 grid 14
582:		mov a1274, [bp + 26]
583:		mov [bp + 63], a1274
585:	

printFormat$172:	; Parameter 49 0 16
586:		mov word [bp + 65], 0
588:	

printFormat$173:	; Parameter 49 precision 18
589:		mov a1275, [bp + 14]
590:		mov [bp + 67], a1275
592:	

printFormat$174:	; Parameter 49 shortInt 20
593:		mov a1276, [bp + 34]
594:		mov [bp + 69], a1276
596:	

printFormat$175:	; Parameter 49 longInt 22
597:		mov a1277, [bp + 36]
598:		mov [bp + 71], a1277
600:	

printFormat$176:	; Parameter 49 longDouble 24
601:		mov a1278, [bp + 38]
602:		mov [bp + 73], a1278
604:	

printFormat$177:	; Parameter 49 0 26
605:		mov word [bp + 75], 0
607:	

printFormat$178:	; Parameter 49 0 28
608:		mov word [bp + 77], 0
610:	

printFormat$179:	; Call 49 printArgument 0
611:		mov word [bp + 49], printFormat$180
612:		mov [bp + 51], bp
613:		add bp, 49
614:		jmp printArgument
616:	

printFormat$180:	; PostCall 49
618:	

printFormat$181:	; GetReturnValue £temporary2093
620:	

printFormat$182:	; Assign arg_list £temporary2093
621:		mov [bp + 8], type1279
623:	

printFormat$183:	; Goto 237
624:		jmp printFormat$237
626:	

printFormat$184:	; Assign startChars g_outChars
627:		mov a1280, [g_outChars]
628:		mov [bp + 41], a1280
630:	

printFormat$185:	; Assign oldOutStatus g_outStatus
631:		mov a1281, [g_outStatus]
632:		mov [bp + 43], a1281
634:	

printFormat$186:	; Assign g_outStatus 2
635:		mov word [g_outStatus], 2
637:	

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
639:	

printFormat$188:	; BinaryAdd £temporary2095 format index
640:		mov a1282, [bp + 6]
641:		add a1282, [bp + 10]
643:	

printFormat$189:	; Deref £temporary2094 -> £temporary2095 £temporary2095 0
645:	

printFormat$190:	; address £temporary2096 £temporary2094 -> £temporary2095
647:	

printFormat$191:	; Parameter 45 £temporary2096 6
648:		mov [bp + 51], a1282
650:	

printFormat$192:	; Parameter 45 arg_list 8
651:		mov a1283, [bp + 8]
652:		mov [bp + 53], a1283
654:	

printFormat$193:	; Parameter 45 plus 10
655:		mov a1284, [bp + 18]
656:		mov [bp + 55], a1284
658:	

printFormat$194:	; Parameter 45 space 12
659:		mov a1285, [bp + 22]
660:		mov [bp + 57], a1285
662:	

printFormat$195:	; Parameter 45 grid 14
663:		mov a1286, [bp + 26]
664:		mov [bp + 59], a1286
666:	

printFormat$196:	; address £temporary2097 width
667:		mov t1287, bp
668:		add t1287, 12
670:	

printFormat$197:	; Parameter 45 £temporary2097 16
671:		mov [bp + 61], t1287
673:	

printFormat$198:	; Parameter 45 precision 18
674:		mov a1288, [bp + 14]
675:		mov [bp + 63], a1288
677:	

printFormat$199:	; Parameter 45 shortInt 20
678:		mov a1289, [bp + 34]
679:		mov [bp + 65], a1289
681:	

printFormat$200:	; Parameter 45 longInt 22
682:		mov a1290, [bp + 36]
683:		mov [bp + 67], a1290
685:	

printFormat$201:	; Parameter 45 longDouble 24
686:		mov a1291, [bp + 38]
687:		mov [bp + 69], a1291
689:	

printFormat$202:	; Parameter 45 1 26
690:		mov word [bp + 71], 1
692:	

printFormat$203:	; Parameter 45 0 28
693:		mov word [bp + 73], 0
695:	

printFormat$204:	; Call 45 printArgument 0
696:		mov word [bp + 45], printFormat$205
697:		mov [bp + 47], bp
698:		add bp, 45
699:		jmp printArgument
701:	

printFormat$205:	; PostCall 45
703:	

printFormat$206:	; Assign g_outStatus oldOutStatus
704:		mov a1293, [bp + 43]
705:		mov [g_outStatus], a1293
707:	

printFormat$207:	; BinarySubtract field g_outChars startChars
708:		mov a1294, [g_outChars]
709:		sub a1294, [bp + 41]
710:		mov [bp + 45], a1294
712:	

printFormat$208:	; Assign g_outChars startChars
713:		mov a1295, [bp + 41]
714:		mov [g_outChars], a1295
716:	

printFormat$209:	; Assign £temporary2100 field
717:		mov t1296, [bp + 45]
719:	

printFormat$210:	; Increment field
720:		inc word [bp + 45]
722:	

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2100 width
723:		cmp t1296, [bp + 12]
724:		jge printFormat$217
726:	

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
728:	

printFormat$213:	; Parameter 47 32 6
729:		mov byte [bp + 53], 32
731:	

printFormat$214:	; Call 47 printChar 0
732:		mov word [bp + 47], printFormat$215
733:		mov [bp + 49], bp
734:		add bp, 47
735:		jmp printChar
737:	

printFormat$215:	; PostCall 47
739:	

printFormat$216:	; Goto 209
740:		jmp printFormat$209
742:	

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
744:	

printFormat$218:	; BinaryAdd £temporary2105 format index
745:		mov a1297, [bp + 6]
746:		add a1297, [bp + 10]
748:	

printFormat$219:	; Deref £temporary2104 -> £temporary2105 £temporary2105 0
750:	

printFormat$220:	; address £temporary2106 £temporary2104 -> £temporary2105
752:	

printFormat$221:	; Parameter 47 £temporary2106 6
753:		mov [bp + 53], a1297
755:	

printFormat$222:	; Parameter 47 arg_list 8
756:		mov a1298, [bp + 8]
757:		mov [bp + 55], a1298
759:	

printFormat$223:	; Parameter 47 plus 10
760:		mov a1299, [bp + 18]
761:		mov [bp + 57], a1299
763:	

printFormat$224:	; Parameter 47 space 12
764:		mov a1300, [bp + 22]
765:		mov [bp + 59], a1300
767:	

printFormat$225:	; Parameter 47 grid 14
768:		mov a1301, [bp + 26]
769:		mov [bp + 61], a1301
771:	

printFormat$226:	; Parameter 47 0 16
772:		mov word [bp + 63], 0
774:	

printFormat$227:	; Parameter 47 precision 18
775:		mov a1302, [bp + 14]
776:		mov [bp + 65], a1302
778:	

printFormat$228:	; Parameter 47 shortInt 20
779:		mov a1303, [bp + 34]
780:		mov [bp + 67], a1303
782:	

printFormat$229:	; Parameter 47 longInt 22
783:		mov a1304, [bp + 36]
784:		mov [bp + 69], a1304
786:	

printFormat$230:	; Parameter 47 longDouble 24
787:		mov a1305, [bp + 38]
788:		mov [bp + 71], a1305
790:	

printFormat$231:	; Parameter 47 1 26
791:		mov word [bp + 73], 1
793:	

printFormat$232:	; Parameter 47 0 28
794:		mov word [bp + 75], 0
796:	

printFormat$233:	; Call 47 printArgument 0
797:		mov word [bp + 47], printFormat$234
798:		mov [bp + 49], bp
799:		add bp, 47
800:		jmp printArgument
802:	

printFormat$234:	; PostCall 47
804:	

printFormat$235:	; GetReturnValue £temporary2107
806:	

printFormat$236:	; Assign arg_list £temporary2107
807:		mov [bp + 8], type1306
809:	

printFormat$237:	; Assign percent 0
810:		mov word [bp + 16], 0
812:	

printFormat$238:	; Goto 282
813:		jmp printFormat$282
815:	

printFormat$239:	; Assign value 0
816:		mov word [bp + 41], 0
818:	

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
820:	

printFormat$241:	; IntegralToIntegral £temporary2110 c
821:		mov a1307, [bp + 40]
823:		and a1307, 255
825:		cmp a1307, 0
826:		jge printFormat$242
827:		neg a1307
829:		neg a1307
831:	

printFormat$242:	; Parameter 43 £temporary2110 6
832:		mov [bp + 49], a1307
834:	

printFormat$243:	; Call 43 isdigit 0
835:		mov word [bp + 43], printFormat$244
836:		mov [bp + 45], bp
837:		add bp, 43
838:		jmp isdigit
840:	

printFormat$244:	; PostCall 43
842:	

printFormat$245:	; GetReturnValue £temporary2111
844:	

printFormat$246:	; Equal 256 £temporary2111 0
845:		cmp type1308, 0
846:		je printFormat$256
848:	

printFormat$247:	; SignedMultiply £temporary2112 value 10
849:		mov a1309, [bp + 41]
851:		xor dx, dx
852:		imul word [@4839$int2$10#]
858:	

printFormat$248:	; BinarySubtract £temporary2113 c 48
859:		mov a1313, [bp + 40]
860:		sub a1313, 48
862:	

printFormat$249:	; IntegralToIntegral £temporary2114 £temporary2113
864:		and a1313, 255
866:		cmp a1313, 0
867:		jge printFormat$250
868:		neg a1313
870:		neg a1313
872:	

printFormat$250:	; BinaryAdd value £temporary2112 £temporary2114
873:		add t1312, a1313
874:		mov [bp + 41], t1312
876:	

printFormat$251:	; Increment index
877:		inc word [bp + 10]
879:	

printFormat$252:	; BinaryAdd £temporary2118 format index
880:		mov a1314, [bp + 6]
881:		add a1314, [bp + 10]
883:	

printFormat$253:	; Deref £temporary2117 -> £temporary2118 £temporary2118 0
885:	

printFormat$254:	; Assign c £temporary2117 -> £temporary2118
886:		mov t1315, [a1314]
887:		mov [bp + 40], t1315
889:	

printFormat$255:	; Goto 240
890:		jmp printFormat$240
892:	

printFormat$256:	; Decrement index
893:		dec word [bp + 10]
895:	

printFormat$257:	; NotEqual 260 period 0
896:		cmp word [bp + 30], 0
897:		jne printFormat$260
899:	

printFormat$258:	; Assign width value
900:		mov a1316, [bp + 41]
901:		mov [bp + 12], a1316
903:	

printFormat$259:	; Goto 282
904:		jmp printFormat$282
906:	

printFormat$260:	; Assign precision value
907:		mov a1317, [bp + 41]
908:		mov [bp + 14], a1317
910:	

printFormat$261:	; Goto 282
911:		jmp printFormat$282
913:	

printFormat$262:	; NotEqual 278 c 37
914:		cmp byte [bp + 40], 37
915:		jne printFormat$278
917:	

printFormat$263:	; Assign percent 1
918:		mov word [bp + 16], 1
920:	

printFormat$264:	; Assign plus 0
921:		mov word [bp + 18], 0
923:	

printFormat$265:	; Assign minus 0
924:		mov word [bp + 20], 0
926:	

printFormat$266:	; Assign space 0
927:		mov word [bp + 22], 0
929:	

printFormat$267:	; Assign zero 0
930:		mov word [bp + 24], 0
932:	

printFormat$268:	; Assign grid 0
933:		mov word [bp + 26], 0
935:	

printFormat$269:	; Assign widthStar 0
936:		mov word [bp + 28], 0
938:	

printFormat$270:	; Assign period 0
939:		mov word [bp + 30], 0
941:	

printFormat$271:	; Assign precisionStar 0
942:		mov word [bp + 32], 0
944:	

printFormat$272:	; Assign shortInt 0
945:		mov word [bp + 34], 0
947:	

printFormat$273:	; Assign longInt 0
948:		mov word [bp + 36], 0
950:	

printFormat$274:	; Assign longDouble 0
951:		mov word [bp + 38], 0
953:	

printFormat$275:	; Assign width 0
954:		mov word [bp + 12], 0
956:	

printFormat$276:	; Assign precision 0
957:		mov word [bp + 14], 0
959:	

printFormat$277:	; Goto 282
960:		jmp printFormat$282
962:	

printFormat$278:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
964:	

printFormat$279:	; Parameter 41 c 6
965:		mov a1318, [bp + 40]
966:		mov [bp + 47], a1318
968:	

printFormat$280:	; Call 41 printChar 0
969:		mov word [bp + 41], printFormat$281
970:		mov [bp + 43], bp
971:		add bp, 41
972:		jmp printChar
974:	

printFormat$281:	; PostCall 41
976:	

printFormat$282:	; Increment index
977:		inc word [bp + 10]
979:	

printFormat$283:	; Goto 16
980:		jmp printFormat$16
982:	

printFormat$284:	; NotEqual 290 g_outStatus 1
983:		cmp word [g_outStatus], 1
984:		jne printFormat$290
986:	

printFormat$285:	; IntegralToIntegral £temporary2127 g_outDevice
987:		mov a1319, [g_outDevice]
990:	

printFormat$286:	; Assign outString £temporary2127
991:		mov [bp + 40], a1319
993:	

printFormat$287:	; BinaryAdd £temporary2129 outString g_outChars
994:		mov a1320, [bp + 40]
995:		add a1320, [g_outChars]
997:	

printFormat$288:	; Deref £temporary2128 -> £temporary2129 £temporary2129 0
999:	

printFormat$289:	; Assign £temporary2128 -> £temporary2129 0
1000:		mov byte [a1320], 0
1002:	

printFormat$290:	; SetReturnValue g_outChars
1003:		mov a1321, [g_outChars]
1005:	

printFormat$291:	; Return g_outChars
1006:		mov t1322, [bp]
1007:		mov di, [bp + 4]
1008:		mov bp, [bp + 2]
1009:		jmp t1322
1011:	

printFormat$292:	; FunctionEnd printFormat
1:	

printf:	; address £temporary2202 format
2:		mov t1323, bp
3:		add t1323, 6
5:	

printf$1:	; IntegralToIntegral £temporary2203 £temporary2202
8:	

printf$2:	; BinaryAdd arg_list £temporary2203 2
9:		add t1323, 2
10:		mov [di + 8], t1323
12:	

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

printf$4:	; Parameter 10 format 6
15:		mov a1324, [bp + 6]
16:		mov [di + 16], a1324
18:	

printf$5:	; Parameter 10 arg_list 8
19:		mov a1325, [di + 8]
20:		mov [di + 18], a1325
22:	

printf$6:	; Call 10 vprintf 0
23:		mov word [di + 10], printf$7
24:		mov [di + 12], bp
25:		mov [di + 14], di
26:		add di, 10
27:		mov bp, di
28:		jmp vprintf
30:	

printf$7:	; PostCall 10
32:	

printf$8:	; GetReturnValue £temporary2205
34:	

printf$9:	; SetReturnValue £temporary2205
36:	

printf$10:	; Return £temporary2205
37:		mov t1327, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp t1327
42:	

printf$11:	; FunctionEnd printf
1:	

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

vprintf$1:	; Parameter 10 stdout 6
4:		mov a1328, [stdout]
5:		mov [bp + 16], a1328
7:	

vprintf$2:	; Parameter 10 format 8
8:		mov a1329, [bp + 6]
9:		mov [bp + 18], a1329
11:	

vprintf$3:	; Parameter 10 arg_list 10
12:		mov a1330, [bp + 8]
13:		mov [bp + 20], a1330
15:	

vprintf$4:	; Call 10 vfprintf 0
16:		mov word [bp + 10], vprintf$5
17:		mov [bp + 12], bp
18:		add bp, 10
19:		jmp vfprintf
21:	

vprintf$5:	; PostCall 10
23:	

vprintf$6:	; GetReturnValue £temporary2209
25:	

vprintf$7:	; SetReturnValue £temporary2209
27:	

vprintf$8:	; Return £temporary2209
28:		mov t1332, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp t1332
33:	

vprintf$9:	; FunctionEnd vprintf
1:	

fprintf:	; address £temporary2213 format
2:		mov t1333, bp
3:		add t1333, 8
5:	

fprintf$1:	; IntegralToIntegral £temporary2214 £temporary2213
8:	

fprintf$2:	; BinaryAdd arg_list £temporary2214 2
9:		add t1333, 2
10:		mov [di + 10], t1333
12:	

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

fprintf$4:	; Parameter 12 outStream 6
15:		mov a1334, [bp + 6]
16:		mov [di + 18], a1334
18:	

fprintf$5:	; Parameter 12 format 8
19:		mov a1335, [bp + 8]
20:		mov [di + 20], a1335
22:	

fprintf$6:	; Parameter 12 arg_list 10
23:		mov a1336, [di + 10]
24:		mov [di + 22], a1336
26:	

fprintf$7:	; Call 12 vfprintf 0
27:		mov word [di + 12], fprintf$8
28:		mov [di + 14], bp
29:		mov [di + 16], di
30:		add di, 12
31:		mov bp, di
32:		jmp vfprintf
34:	

fprintf$8:	; PostCall 12
36:	

fprintf$9:	; GetReturnValue £temporary2216
38:	

fprintf$10:	; SetReturnValue £temporary2216
40:	

fprintf$11:	; Return £temporary2216
41:		mov t1338, [bp]
42:		mov di, [bp + 4]
43:		mov bp, [bp + 2]
44:		jmp t1338
46:	

fprintf$12:	; FunctionEnd fprintf
1:	

vfprintf:	; Assign g_outStatus 0
2:		mov word [g_outStatus], 0
4:	

vfprintf$1:	; IntegralToIntegral £temporary2221 outStream
5:		mov a1339, [bp + 6]
8:	

vfprintf$2:	; Assign g_outDevice £temporary2221
9:		mov [g_outDevice], a1339
11:	

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

vfprintf$4:	; Parameter 12 format 6
14:		mov a1340, [bp + 8]
15:		mov [bp + 18], a1340
17:	

vfprintf$5:	; Parameter 12 arg_list 8
18:		mov a1341, [bp + 10]
19:		mov [bp + 20], a1341
21:	

vfprintf$6:	; Call 12 printFormat 0
22:		mov word [bp + 12], vfprintf$7
23:		mov [bp + 14], bp
24:		add bp, 12
25:		jmp printFormat
27:	

vfprintf$7:	; PostCall 12
29:	

vfprintf$8:	; GetReturnValue £temporary2222
31:	

vfprintf$9:	; SetReturnValue £temporary2222
33:	

vfprintf$10:	; Return £temporary2222
34:		mov t1343, [bp]
35:		mov di, [bp + 4]
36:		mov bp, [bp + 2]
37:		jmp t1343
39:	

vfprintf$11:	; FunctionEnd vfprintf
1:	

sprintf:	; address £temporary2225 format
2:		mov t1344, bp
3:		add t1344, 8
5:	

sprintf$1:	; IntegralToIntegral £temporary2226 £temporary2225
8:	

sprintf$2:	; BinaryAdd arg_list £temporary2226 2
9:		add t1344, 2
10:		mov [di + 10], t1344
12:	

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
14:	

sprintf$4:	; Parameter 12 outString 6
15:		mov a1345, [bp + 6]
16:		mov [di + 18], a1345
18:	

sprintf$5:	; Parameter 12 format 8
19:		mov a1346, [bp + 8]
20:		mov [di + 20], a1346
22:	

sprintf$6:	; Parameter 12 arg_list 10
23:		mov a1347, [di + 10]
24:		mov [di + 22], a1347
26:	

sprintf$7:	; Call 12 vsprintf 0
27:		mov word [di + 12], sprintf$8
28:		mov [di + 14], bp
29:		mov [di + 16], di
30:		add di, 12
31:		mov bp, di
32:		jmp vsprintf
34:	

sprintf$8:	; PostCall 12
36:	

sprintf$9:	; GetReturnValue £temporary2228
38:	

sprintf$10:	; SetReturnValue £temporary2228
40:	

sprintf$11:	; Return £temporary2228
41:		mov t1349, [bp]
42:		mov di, [bp + 4]
43:		mov bp, [bp + 2]
44:		jmp t1349
46:	

sprintf$12:	; FunctionEnd sprintf
1:	

vsprintf:	; Assign g_outStatus 1
2:		mov word [g_outStatus], 1
4:	

vsprintf$1:	; IntegralToIntegral £temporary2233 outString
5:		mov a1350, [bp + 6]
8:	

vsprintf$2:	; Assign g_outDevice £temporary2233
9:		mov [g_outDevice], a1350
11:	

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
13:	

vsprintf$4:	; Parameter 12 format 6
14:		mov a1351, [bp + 8]
15:		mov [bp + 18], a1351
17:	

vsprintf$5:	; Parameter 12 arg_list 8
18:		mov a1352, [bp + 10]
19:		mov [bp + 20], a1352
21:	

vsprintf$6:	; Call 12 printFormat 0
22:		mov word [bp + 12], vsprintf$7
23:		mov [bp + 14], bp
24:		add bp, 12
25:		jmp printFormat
27:	

vsprintf$7:	; PostCall 12
29:	

vsprintf$8:	; GetReturnValue £temporary2234
31:	

vsprintf$9:	; SetReturnValue £temporary2234
33:	

vsprintf$10:	; Return £temporary2234
34:		mov t1354, [bp]
35:		mov di, [bp + 4]
36:		mov bp, [bp + 2]
37:		jmp t1354
39:	

vsprintf$11:	; FunctionEnd vsprintf
