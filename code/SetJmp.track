1:	

setjmp:	; InspectRegister £temporary621 bp
3:	

setjmp$1:	; Assign bp_pointer £temporary621
4:		mov [bp + 8], t331
6:	

setjmp$2:	; Deref £temporary622 -> buf buf 0
7:		mov a332, [bp + 6]
9:	

setjmp$3:	; Deref £temporary623 -> bp_pointer bp_pointer 0
10:		mov a333, [bp + 8]
12:	

setjmp$4:	; Assign £temporary622 -> buf £temporary623 -> bp_pointer
13:		mov t334, [a333]
14:		mov [a332], t334
16:	

setjmp$5:	; Deref £temporary624 -> buf buf 2
17:		mov a335, [bp + 6]
19:	

setjmp$6:	; Deref £temporary625 -> bp_pointer bp_pointer 2
20:		mov a336, [bp + 8]
22:	

setjmp$7:	; Assign £temporary624 -> buf £temporary625 -> bp_pointer
23:		mov t337, [a336 + 2]
24:		mov [a335 + 2], t337
26:	

setjmp$8:	; Deref £temporary626 -> buf buf 4
27:		mov a338, [bp + 6]
29:	

setjmp$9:	; Deref £temporary627 -> bp_pointer bp_pointer 4
30:		mov a339, [bp + 8]
32:	

setjmp$10:	; Assign £temporary626 -> buf £temporary627 -> bp_pointer
33:		mov t340, [a339 + 4]
34:		mov [a338 + 4], t340
36:	

setjmp$11:	; SetReturnValue 0
37:		mov a341, 0
39:	

setjmp$12:	; Return 0
40:		mov t342, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp t342
45:	

setjmp$13:	; FunctionEnd setjmp
1:	

longjmp:	; AssignRegister bx return_value
2:		mov a343, [bp + 8]
4:	

longjmp$1:	; Deref £temporary630 -> buf buf 0
5:		mov a344, [bp + 6]
7:	

longjmp$2:	; AssignRegister cx £temporary630 -> buf
8:		mov t345, [a344]
10:	

longjmp$3:	; Deref £temporary632 -> buf buf 4
11:		mov a346, [bp + 6]
13:	

longjmp$4:	; AssignRegister di £temporary632 -> buf
14:		mov t347, [a346 + 4]
16:	

longjmp$5:	; Deref £temporary634 -> buf buf 2
17:		mov a348, [bp + 6]
19:	

longjmp$6:	; AssignRegister bp £temporary634 -> buf
20:		mov t349, [a348 + 2]
22:	

longjmp$7:	; JumpRegister cx
23:		jmp cx
25:	

longjmp$8:	; Return 0
26:		mov t350, [bp]
27:		mov di, [bp + 4]
28:		mov bp, [bp + 2]
29:		jmp t350
31:	

longjmp$9:	; FunctionEnd longjmp
