1:	

setjmp:	; £temporary925 = bp
3:	

setjmp$1:	; bp_pointer = £temporary925
4:		mov [bp + 8], t425
6:	

setjmp$2:	; £temporary926 -> buf = *buf
7:		mov a426, [bp + 6]
9:	

setjmp$3:	; £temporary927 -> bp_pointer = *bp_pointer
10:		mov a427, [bp + 8]
12:	

setjmp$4:	; £temporary926 -> buf = £temporary927 -> bp_pointer
13:		mov t428, [a427]
14:		mov [a426], t428
16:	

setjmp$5:	; £temporary928 -> buf = *buf, offset 2
17:		mov a429, [bp + 6]
19:	

setjmp$6:	; £temporary929 -> bp_pointer = *bp_pointer, offset 2
20:		mov a430, [bp + 8]
22:	

setjmp$7:	; £temporary928 -> buf = £temporary929 -> bp_pointer
23:		mov t431, [a430 + 2]
24:		mov [a429 + 2], t431
26:	

setjmp$8:	; £temporary930 -> buf = *buf, offset 4
27:		mov a432, [bp + 6]
29:	

setjmp$9:	; £temporary931 -> bp_pointer = *bp_pointer, offset 4
30:		mov a433, [bp + 8]
32:	

setjmp$10:	; £temporary930 -> buf = £temporary931 -> bp_pointer
33:		mov t434, [a433 + 4]
34:		mov [a432 + 4], t434
36:	

setjmp$11:	; return_value = 0
37:		mov a435, 0
39:	

setjmp$12:	; return
40:		mov t436, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp t436
45:	

setjmp$13:	; function end setjmp
1:	

longjmp:	; bx = return_value
2:		mov a437, [bp + 8]
4:	

longjmp$1:	; £temporary934 -> buf = *buf
5:		mov a438, [bp + 6]
7:	

longjmp$2:	; cx = £temporary934 -> buf
8:		mov t439, [a438]
10:	

longjmp$3:	; £temporary936 -> buf = *buf, offset 2
11:		mov a440, [bp + 6]
13:	

longjmp$4:	; bp = £temporary936 -> buf
14:		mov t441, [a440 + 2]
16:	

longjmp$5:	; £temporary938 -> buf = *buf, offset 4
17:		mov a442, [bp + 6]
19:	

longjmp$6:	; di = £temporary938 -> buf
20:		mov t443, [a442 + 4]
22:	

longjmp$7:	; jump to 
23:		jmp cx
25:	

longjmp$8:	; return
26:		mov t444, [bp]
27:		mov di, [bp + 4]
28:		mov bp, [bp + 2]
29:		jmp t444
31:	

longjmp$9:	; function end longjmp
