1:	

compare:	; £temporary5945 = int_to_int valuePtr1 (Pointer -> Pointer)
2:		mov a3088, [bp + 6]
5:	

compare$1:	; £temporary5946 -> £temporary5945 = *£temporary5945
7:	

compare$2:	; intValue1 = £temporary5946 -> £temporary5945
8:		mov t3089, [a3088]
9:		mov [bp + 10], t3089
11:	

compare$3:	; £temporary5947 = int_to_int valuePtr2 (Pointer -> Pointer)
12:		mov a3090, [bp + 8]
15:	

compare$4:	; £temporary5948 -> £temporary5947 = *£temporary5947
17:	

compare$5:	; intValue2 = £temporary5948 -> £temporary5947
18:		mov t3091, [a3090]
19:		mov [bp + 12], t3091
21:	

compare$6:	; if intValue1 >= intValue2 goto 9
22:		mov a3092, [bp + 12]
23:		cmp [bp + 10], a3092
24:		jge compare$9
26:	

compare$7:	; £temporary5958 = -1
27:		mov t3093, -1
29:	

compare$8:	; goto 14
30:		jmp compare$14
32:	

compare$9:	; if intValue1 != intValue2 goto 12
33:		mov a3094, [bp + 12]
34:		cmp [bp + 10], a3094
35:		jne compare$12
37:	

compare$10:	; £temporary5954 = 0
38:		mov t3095, 0
40:	

compare$11:	; goto 13
41:		jmp compare$13
43:	

compare$12:	; £temporary5954 = 1
44:		mov t3096, 1
46:	

compare$13:	; £temporary5958 = £temporary5954
48:	

compare$14:	; return_value = £temporary5958
50:	

compare$15:	; return
51:		mov t3098, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3098
56:	

compare$16:	; function end compare
1:	

reverse_compare:	; £temporary5959 = int_to_int valuePtr1 (Pointer -> Pointer)
2:		mov a3099, [bp + 6]
5:	

reverse_compare$1:	; £temporary5960 -> £temporary5959 = *£temporary5959
7:	

reverse_compare$2:	; intValue1 = £temporary5960 -> £temporary5959
8:		mov t3100, [a3099]
9:		mov [bp + 10], t3100
11:	

reverse_compare$3:	; £temporary5961 = int_to_int valuePtr2 (Pointer -> Pointer)
12:		mov a3101, [bp + 8]
15:	

reverse_compare$4:	; £temporary5962 -> £temporary5961 = *£temporary5961
17:	

reverse_compare$5:	; intValue2 = £temporary5962 -> £temporary5961
18:		mov t3102, [a3101]
19:		mov [bp + 12], t3102
21:	

reverse_compare$6:	; if intValue1 >= intValue2 goto 9
22:		mov a3103, [bp + 12]
23:		cmp [bp + 10], a3103
24:		jge reverse_compare$9
26:	

reverse_compare$7:	; £temporary5972 = 1
27:		mov t3104, 1
29:	

reverse_compare$8:	; goto 14
30:		jmp reverse_compare$14
32:	

reverse_compare$9:	; if intValue1 != intValue2 goto 12
33:		mov a3105, [bp + 12]
34:		cmp [bp + 10], a3105
35:		jne reverse_compare$12
37:	

reverse_compare$10:	; £temporary5968 = 0
38:		mov t3106, 0
40:	

reverse_compare$11:	; goto 13
41:		jmp reverse_compare$13
43:	

reverse_compare$12:	; £temporary5968 = -1
44:		mov t3107, -1
46:	

reverse_compare$13:	; £temporary5972 = £temporary5968
48:	

reverse_compare$14:	; return_value = £temporary5972
50:	

reverse_compare$15:	; return
51:		mov t3109, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3109
56:	

reverse_compare$16:	; function end reverse_compare
1:	

print_div:	; call header integral zero 0 stack zero 0
3:	

print_div$1:	; parameter string_div_t20quot2025i20rem2025i0A#, offset 6
4:		mov word [bp + 16], string_div_t20quot2025i20rem2025i0A#
6:	

print_div$2:	; parameter d$quot, offset 8
7:		mov a3110, [bp + 6]
8:		mov [bp + 18], a3110
10:	

print_div$3:	; parameter d$rem, offset 10
11:		mov a3111, [bp + 8]
12:		mov [bp + 20], a3111
14:	

print_div$4:	; call function noellipse-ellipse printf, extra 0
15:		mov word [bp + 10], print_div$5
16:		mov [bp + 12], bp
17:		add bp, 10
18:		mov di, bp
19:		add di, 4
20:		jmp printf
22:	

print_div$5:	; post call
24:	

print_div$6:	; return
25:		mov t3112, [bp]
26:		mov di, [bp + 4]
27:		mov bp, [bp + 2]
28:		jmp t3112
30:	

print_div$7:	; function end print_div
1:	

print_ldiv:	; call header integral zero 0 stack zero 0
3:	

print_ldiv$1:	; parameter string_ldiv_t20quot2025li20rem2025li0A#, offset 6
4:		mov word [bp + 20], string_ldiv_t20quot2025li20rem2025li0A#
6:	

print_ldiv$2:	; parameter ld$quot, offset 8
7:		mov a3113, [bp + 6]
8:		mov [bp + 22], a3113
10:	

print_ldiv$3:	; parameter ld$rem, offset 12
11:		mov a3114, [bp + 10]
12:		mov [bp + 26], a3114
14:	

print_ldiv$4:	; call function noellipse-ellipse printf, extra 0
15:		mov word [bp + 14], print_ldiv$5
16:		mov [bp + 16], bp
17:		add bp, 14
18:		mov di, bp
19:		add di, 8
20:		jmp printf
22:	

print_ldiv$5:	; post call
24:	

print_ldiv$6:	; return
25:		mov t3115, [bp]
26:		mov di, [bp + 4]
27:		mov bp, [bp + 2]
28:		jmp t3115
30:	

print_ldiv$7:	; function end print_ldiv
1:	

exit_handle1x:	; call header integral zero 0 stack zero 0
3:	

exit_handle1x$1:	; parameter string_exit10A#, offset 6
4:		mov word [bp + 12], string_exit10A#
6:	

exit_handle1x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle1x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle1x$3:	; post call
15:	

exit_handle1x$4:	; return
16:		mov t3116, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3116
21:	

exit_handle1x$5:	; function end exit_handle1x
1:	

exit_handle2x:	; call header integral zero 0 stack zero 0
3:	

exit_handle2x$1:	; parameter string_exit20A#, offset 6
4:		mov word [bp + 12], string_exit20A#
6:	

exit_handle2x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle2x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle2x$3:	; post call
15:	

exit_handle2x$4:	; return
16:		mov t3117, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3117
21:	

exit_handle2x$5:	; function end exit_handle2x
1:	

exit_handle3x:	; call header integral zero 0 stack zero 0
3:	

exit_handle3x$1:	; parameter string_exit30A#, offset 6
4:		mov word [bp + 12], string_exit30A#
6:	

exit_handle3x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle3x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle3x$3:	; post call
15:	

exit_handle3x$4:	; return
16:		mov t3118, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3118
21:	

exit_handle3x$5:	; function end exit_handle3x
1:	

hello:	; empty
3:	

hello$1:	; return
4:		mov t3119, [bp]
5:		mov di, [bp + 4]
6:		mov bp, [bp + 2]
7:		jmp t3119
9:	

hello$2:	; function end hello
1:	

qtest:	; call header integral zero 0 stack zero 0
3:	

qtest$1:	; parameter string_f3A2025u0A#, offset 6
4:		mov word [bp + 14], string_f3A2025u0A#
6:	

qtest$2:	; £temporary5991 = int_to_int f (Pointer -> Unsigned_Int)
7:		mov a3120, [bp + 6]
10:	

qtest$3:	; parameter £temporary5991, offset 8
11:		mov [bp + 16], a3120
13:	

qtest$4:	; call function noellipse-ellipse printf, extra 0
14:		mov word [bp + 8], qtest$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		mov di, bp
18:		add di, 2
19:		jmp printf
21:	

qtest$5:	; post call
23:	

qtest$6:	; call header integral zero 0 stack zero 0
25:	

qtest$7:	; call function noellipse-noellipse f
26:		mov word [bp + 8], qtest$8
27:		mov [bp + 10], bp
28:		mov a3121, [bp + 6]
29:		add bp, 8
30:		jmp a3121 a3121 f 28 30
32:	

qtest$8:	; post call
34:	

qtest$9:	; return
35:		mov t3122, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t3122
40:	

qtest$10:	; function end qtest
1:	

stdlib_test:	; call header integral zero 0 stack zero 0
3:	

stdlib_test$1:	; parameter string_hello3A2025u0A#, offset 6
4:		mov word [bp + 12], string_hello3A2025u0A#
6:	

stdlib_test$2:	; £temporary5996 = int_to_int hello (Function -> Unsigned_Int)
7:		mov a3123, hello
10:	

stdlib_test$3:	; parameter £temporary5996, offset 8
11:		mov [bp + 14], a3123
13:	

stdlib_test$4:	; call function noellipse-ellipse printf, extra 0
14:		mov word [bp + 6], stdlib_test$5
15:		mov [bp + 8], bp
16:		add bp, 6
17:		mov di, bp
18:		add di, 2
19:		jmp printf
21:	

stdlib_test$5:	; post call
23:	

stdlib_test$6:	; call header integral zero 0 stack zero 0
25:	

stdlib_test$7:	; parameter hello, offset 6
26:		mov word [bp + 12], hello
28:	

stdlib_test$8:	; call function noellipse-noellipse qtest
29:		mov word [bp + 6], stdlib_test$9
30:		mov [bp + 8], bp
31:		add bp, 6
32:		jmp qtest
34:	

stdlib_test$9:	; post call
36:	

stdlib_test$10:	; call header integral zero 0 stack zero 0
38:	

stdlib_test$11:	; parameter string_Y#, offset 6
39:		mov word [bp + 12], string_Y#
41:	

stdlib_test$12:	; call function noellipse-ellipse printf, extra 0
42:		mov word [bp + 6], stdlib_test$13
43:		mov [bp + 8], bp
44:		add bp, 6
45:		mov di, bp
46:		jmp printf
48:	

stdlib_test$13:	; post call
50:	

stdlib_test$14:	; return
51:		mov t3124, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3124
56:	

stdlib_test$15:	; function end stdlib_test
1:	

stdlib_testZ:	; call header integral zero 0 stack zero 0
3:	

stdlib_testZ$1:	; parameter string_X#, offset 6
4:		mov word [bp + 12], string_X#
6:	

stdlib_testZ$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], stdlib_testZ$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

stdlib_testZ$3:	; post call
15:	

stdlib_testZ$4:	; call header integral zero 0 stack zero 0
17:	

stdlib_testZ$5:	; parameter hello, offset 6
18:		mov word [bp + 12], hello
20:	

stdlib_testZ$6:	; call function noellipse-noellipse qtest
21:		mov word [bp + 6], stdlib_testZ$7
22:		mov [bp + 8], bp
23:		add bp, 6
24:		jmp qtest
26:	

stdlib_testZ$7:	; post call
28:	

stdlib_testZ$8:	; call header integral zero 0 stack zero 0
30:	

stdlib_testZ$9:	; parameter string_Y#, offset 6
31:		mov word [bp + 12], string_Y#
33:	

stdlib_testZ$10:	; call function noellipse-ellipse printf, extra 0
34:		mov word [bp + 6], stdlib_testZ$11
35:		mov [bp + 8], bp
36:		add bp, 6
37:		mov di, bp
38:		jmp printf
40:	

stdlib_testZ$11:	; post call
42:	

stdlib_testZ$12:	; list[0] = 3
43:		mov word [bp + 6], 3
45:	

stdlib_testZ$13:	; list[1] = 4
46:		mov word [bp + 8], 4
48:	

stdlib_testZ$14:	; list[2] = 2
49:		mov word [bp + 10], 2
51:	

stdlib_testZ$15:	; list[3] = 1
52:		mov word [bp + 12], 1
54:	

stdlib_testZ$16:	; size = 4
55:		mov word [bp + 14], 4
57:	

stdlib_testZ$17:	; call header integral zero 0 stack zero 0
59:	

stdlib_testZ$18:	; parameter string_0AA20List2013A20#, offset 6
60:		mov word [bp + 24], string_0AA20List2013A20#
62:	

stdlib_testZ$19:	; call function noellipse-ellipse printf, extra 0
63:		mov word [bp + 18], stdlib_testZ$20
64:		mov [bp + 20], bp
65:		add bp, 18
66:		mov di, bp
67:		jmp printf
69:	

stdlib_testZ$20:	; post call
71:	

stdlib_testZ$21:	; index = 0
72:		mov word [bp + 16], 0
74:	

stdlib_testZ$22:	; if index >= size goto 33
75:		mov a3125, [bp + 14]
76:		cmp [bp + 16], a3125
77:		jge stdlib_testZ$33
79:	

stdlib_testZ$23:	; call header integral zero 0 stack zero 0
81:	

stdlib_testZ$24:	; parameter string_25i20#, offset 6
82:		mov word [bp + 24], string_25i20#
84:	

stdlib_testZ$25:	; £temporary6015 = index * 2
85:		mov a3126, [bp + 16]
87:		xor dx, dx
88:		mul word [int2$2#]
94:	

stdlib_testZ$26:	; £temporary6016 = list + £temporary6015
95:		mov a3130, bp
96:		add a3130, 6
97:		add a3130, t3129
99:	

stdlib_testZ$27:	; £temporary6017 -> £temporary6016 = *£temporary6016
101:	

stdlib_testZ$28:	; parameter £temporary6017 -> £temporary6016, offset 8
102:		mov t3131, [a3130]
103:		mov [bp + 26], t3131
105:	

stdlib_testZ$29:	; call function noellipse-ellipse printf, extra 0
106:		mov word [bp + 18], stdlib_testZ$30
107:		mov [bp + 20], bp
108:		add bp, 18
109:		mov di, bp
110:		add di, 2
111:		jmp printf
113:	

stdlib_testZ$30:	; post call
115:	

stdlib_testZ$31:	; ++index
116:		inc word [bp + 16]
118:	

stdlib_testZ$32:	; goto 22
119:		jmp stdlib_testZ$22
121:	

stdlib_testZ$33:	; call header integral zero 0 stack zero 0
123:	

stdlib_testZ$34:	; parameter string_0AB20List2023A20#, offset 6
124:		mov word [bp + 24], string_0AB20List2023A20#
126:	

stdlib_testZ$35:	; call function noellipse-ellipse printf, extra 0
127:		mov word [bp + 18], stdlib_testZ$36
128:		mov [bp + 20], bp
129:		add bp, 18
130:		mov di, bp
131:		jmp printf
133:	

stdlib_testZ$36:	; post call
135:	

stdlib_testZ$37:	; call header integral zero 0 stack zero 0
137:	

stdlib_testZ$38:	; parameter string_0ACompare2013A2025i0A#, offset 6
138:		mov word [bp + 24], string_0ACompare2013A2025i0A#
140:	

stdlib_testZ$39:	; £temporary6020 = int_to_int compare (Function -> Signed_Int)
141:		mov a3132, compare
144:	

stdlib_testZ$40:	; parameter £temporary6020, offset 8
145:		mov [bp + 26], a3132
147:	

stdlib_testZ$41:	; call function noellipse-ellipse printf, extra 0
148:		mov word [bp + 18], stdlib_testZ$42
149:		mov [bp + 20], bp
150:		add bp, 18
151:		mov di, bp
152:		add di, 2
153:		jmp printf
155:	

stdlib_testZ$42:	; post call
157:	

stdlib_testZ$43:	; call header integral zero 0 stack zero 0
159:	

stdlib_testZ$44:	; parameter list, offset 6
160:		mov [bp + 24], bp
161:		add word [bp + 24], 6
163:	

stdlib_testZ$45:	; parameter size, offset 8
164:		mov a3133, [bp + 14]
165:		mov [bp + 26], a3133
167:	

stdlib_testZ$46:	; parameter 2, offset 10
168:		mov word [bp + 28], 2
170:	

stdlib_testZ$47:	; parameter compare, offset 12
171:		mov word [bp + 30], compare
173:	

stdlib_testZ$48:	; call function noellipse-ellipse qsort, extra 0
174:		mov word [bp + 18], stdlib_testZ$49
175:		mov [bp + 20], bp
176:		add bp, 18
177:		mov di, bp
178:		jmp qsort
180:	

stdlib_testZ$49:	; post call
182:	

stdlib_testZ$50:	; index = 0
183:		mov word [bp + 16], 0
185:	

stdlib_testZ$51:	; if index >= size goto 62
186:		mov a3134, [bp + 14]
187:		cmp [bp + 16], a3134
188:		jge stdlib_testZ$62
190:	

stdlib_testZ$52:	; call header integral zero 0 stack zero 0
192:	

stdlib_testZ$53:	; parameter string_25i20#, offset 6
193:		mov word [bp + 24], string_25i20#
195:	

stdlib_testZ$54:	; £temporary6026 = index * 2
196:		mov a3135, [bp + 16]
198:		xor dx, dx
199:		mul word [int2$2#]
205:	

stdlib_testZ$55:	; £temporary6027 = list + £temporary6026
206:		mov a3139, bp
207:		add a3139, 6
208:		add a3139, t3138
210:	

stdlib_testZ$56:	; £temporary6028 -> £temporary6027 = *£temporary6027
212:	

stdlib_testZ$57:	; parameter £temporary6028 -> £temporary6027, offset 8
213:		mov t3140, [a3139]
214:		mov [bp + 26], t3140
216:	

stdlib_testZ$58:	; call function noellipse-ellipse printf, extra 0
217:		mov word [bp + 18], stdlib_testZ$59
218:		mov [bp + 20], bp
219:		add bp, 18
220:		mov di, bp
221:		add di, 2
222:		jmp printf
224:	

stdlib_testZ$59:	; post call
226:	

stdlib_testZ$60:	; ++index
227:		inc word [bp + 16]
229:	

stdlib_testZ$61:	; goto 51
230:		jmp stdlib_testZ$51
232:	

stdlib_testZ$62:	; call header integral zero 0 stack zero 0
234:	

stdlib_testZ$63:	; parameter string_0A#, offset 6
235:		mov word [bp + 24], string_0A#
237:	

stdlib_testZ$64:	; call function noellipse-ellipse printf, extra 0
238:		mov word [bp + 18], stdlib_testZ$65
239:		mov [bp + 20], bp
240:		add bp, 18
241:		mov di, bp
242:		jmp printf
244:	

stdlib_testZ$65:	; post call
246:	

stdlib_testZ$66:	; return
247:		mov t3141, [bp]
248:		mov di, [bp + 4]
249:		mov bp, [bp + 2]
250:		jmp t3141
252:	

stdlib_testZ$67:	; function end stdlib_testZ
1:	

stdlib_testX:	; p = s
2:		mov [bp + 306], bp
3:		add word [bp + 306], 6
5:	

stdlib_testX$1:	; q = t
6:		mov [bp + 308], bp
7:		add word [bp + 308], 106
9:	

stdlib_testX$2:	; r = w
10:		mov [bp + 310], bp
11:		add word [bp + 310], 206
13:	

stdlib_testX$3:	; call header integral zero 0 stack zero 0
15:	

stdlib_testX$4:	; parameter string_1232E456abc#, offset 6
16:		mov word [bp + 318], string_1232E456abc#
18:	

stdlib_testX$5:	; £temporary6047 = &p
19:		mov t3142, bp
20:		add t3142, 306
22:	

stdlib_testX$6:	; parameter £temporary6047, offset 8
23:		mov [bp + 320], t3142
25:	

stdlib_testX$7:	; call function noellipse-noellipse strtod
26:		mov word [bp + 312], stdlib_testX$8
27:		mov [bp + 314], bp
28:		add bp, 312
29:		jmp strtod
31:	

stdlib_testX$8:	; post call
33:	

stdlib_testX$9:	; £temporary6048 = return_value
35:	

stdlib_testX$10:	; pop float x
36:		fstp qword [bp + 312]
38:	

stdlib_testX$11:	; call header integral zero 0 stack zero 0
40:	

stdlib_testX$12:	; parameter string_1232E456#, offset 6
41:		mov word [bp + 326], string_1232E456#
43:	

stdlib_testX$13:	; call function noellipse-noellipse atof
44:		mov word [bp + 320], stdlib_testX$14
45:		mov [bp + 322], bp
46:		add bp, 320
47:		jmp atof
49:	

stdlib_testX$14:	; post call
51:	

stdlib_testX$15:	; £temporary6049 = return_value
53:	

stdlib_testX$16:	; pop float y
54:		fstp qword [bp + 320]
56:	

stdlib_testX$17:	; call header integral zero 0 stack zero 0
58:	

stdlib_testX$18:	; parameter string_123abc#, offset 6
59:		mov word [bp + 334], string_123abc#
61:	

stdlib_testX$19:	; £temporary6050 = &q
62:		mov t3143, bp
63:		add t3143, 308
65:	

stdlib_testX$20:	; parameter £temporary6050, offset 8
66:		mov [bp + 336], t3143
68:	

stdlib_testX$21:	; parameter 8, offset 10
69:		mov word [bp + 338], 8
71:	

stdlib_testX$22:	; call function noellipse-noellipse strtol
72:		mov word [bp + 328], stdlib_testX$23
73:		mov [bp + 330], bp
74:		add bp, 328
75:		jmp strtol
77:	

stdlib_testX$23:	; post call
79:	

stdlib_testX$24:	; £temporary6051 = return_value
84:	

stdlib_testX$25:	; l = £temporary6051
85:		mov [bp + 328], t3145
87:	

stdlib_testX$26:	; call header integral zero 0 stack zero 0
89:	

stdlib_testX$27:	; parameter string_123abc#, offset 6
90:		mov word [bp + 338], string_123abc#
92:	

stdlib_testX$28:	; £temporary6052 = &r
93:		mov t3146, bp
94:		add t3146, 310
96:	

stdlib_testX$29:	; parameter £temporary6052, offset 8
97:		mov [bp + 340], t3146
99:	

stdlib_testX$30:	; parameter 8, offset 10
100:		mov word [bp + 342], 8
102:	

stdlib_testX$31:	; call function noellipse-noellipse strtoul
103:		mov word [bp + 332], stdlib_testX$32
104:		mov [bp + 334], bp
105:		add bp, 332
106:		jmp strtoul
108:	

stdlib_testX$32:	; post call
110:	

stdlib_testX$33:	; £temporary6053 = return_value
115:	

stdlib_testX$34:	; ul = £temporary6053
116:		mov [bp + 332], t3148
118:	

stdlib_testX$35:	; call header integral zero 0 stack zero 0
120:	

stdlib_testX$36:	; parameter string_atof28221232E4562229203D2025f0A#, offset 6
121:		mov word [bp + 342], string_atof28221232E4562229203D2025f0A#
123:	

stdlib_testX$37:	; push float y
124:		fld qword [bp + 320]
126:	

stdlib_testX$38:	; parameter y, offset 8
127:		fstp qword [bp + 344]
129:	

stdlib_testX$39:	; call function noellipse-ellipse printf, extra 0
130:		mov word [bp + 336], stdlib_testX$40
131:		mov [bp + 338], bp
132:		add bp, 336
133:		mov di, bp
134:		add di, 8
135:		jmp printf
137:	

stdlib_testX$40:	; post call
139:	

stdlib_testX$41:	; call header integral zero 0 stack zero 0
141:	

stdlib_testX$42:	; parameter string_atoi28221232229203D2025i0A#, offset 6
142:		mov word [bp + 342], string_atoi28221232229203D2025i0A#
144:	

stdlib_testX$43:	; call header integral zero 0 stack zero 0
146:	

stdlib_testX$44:	; parameter string_123#, offset 14
147:		mov word [bp + 350], string_123#
149:	

stdlib_testX$45:	; call function noellipse-noellipse atoi
150:		mov word [bp + 344], stdlib_testX$46
151:		mov [bp + 346], bp
152:		add bp, 344
153:		jmp atoi
155:	

stdlib_testX$46:	; post call
157:	

stdlib_testX$47:	; £temporary6055 = return_value
162:	

stdlib_testX$48:	; parameter £temporary6055, offset 8
163:		mov [bp + 344], t3150
165:	

stdlib_testX$49:	; call function noellipse-ellipse printf, extra 0
166:		mov word [bp + 336], stdlib_testX$50
167:		mov [bp + 338], bp
168:		add bp, 336
169:		mov di, bp
170:		add di, 2
171:		jmp printf
173:	

stdlib_testX$50:	; post call
175:	

stdlib_testX$51:	; call header integral zero 0 stack zero 0
177:	

stdlib_testX$52:	; parameter string_atol28221232229203D2025li0A0A#, offset 6
178:		mov word [bp + 342], string_atol28221232229203D2025li0A0A#
180:	

stdlib_testX$53:	; call header integral zero 0 stack zero 0
182:	

stdlib_testX$54:	; parameter string_123#, offset 14
183:		mov word [bp + 350], string_123#
185:	

stdlib_testX$55:	; call function noellipse-noellipse atol
186:		mov word [bp + 344], stdlib_testX$56
187:		mov [bp + 346], bp
188:		add bp, 344
189:		jmp atol
191:	

stdlib_testX$56:	; post call
193:	

stdlib_testX$57:	; £temporary6057 = return_value
198:	

stdlib_testX$58:	; parameter £temporary6057, offset 8
199:		mov [bp + 344], t3152
201:	

stdlib_testX$59:	; call function noellipse-ellipse printf, extra 0
202:		mov word [bp + 336], stdlib_testX$60
203:		mov [bp + 338], bp
204:		add bp, 336
205:		mov di, bp
206:		add di, 4
207:		jmp printf
209:	

stdlib_testX$60:	; post call
211:	

stdlib_testX$61:	; call header integral zero 0 stack zero 0
213:	

stdlib_testX$62:	; parameter string_strtod28221232E456abc222C2026endp29203D202825f2C2025s290A#, offset 6
214:		mov word [bp + 342], string_strtod28221232E456abc222C2026endp29203D202825f2C2025s290A#
216:	

stdlib_testX$63:	; push float x
217:		fld qword [bp + 312]
219:	

stdlib_testX$64:	; parameter x, offset 8
220:		fstp qword [bp + 344]
222:	

stdlib_testX$65:	; parameter p, offset 16
223:		mov a3153, [bp + 306]
224:		mov [bp + 352], a3153
226:	

stdlib_testX$66:	; call function noellipse-ellipse printf, extra 0
227:		mov word [bp + 336], stdlib_testX$67
228:		mov [bp + 338], bp
229:		add bp, 336
230:		mov di, bp
231:		add di, 10
232:		jmp printf
234:	

stdlib_testX$67:	; post call
236:	

stdlib_testX$68:	; call header integral zero 0 stack zero 0
238:	

stdlib_testX$69:	; parameter string_strtol2822123abc222C2026endp29203D202825li2C2025s290A#, offset 6
239:		mov word [bp + 342], string_strtol2822123abc222C2026endp29203D202825li2C2025s290A#
241:	

stdlib_testX$70:	; parameter l, offset 8
242:		mov a3154, [bp + 328]
243:		mov [bp + 344], a3154
245:	

stdlib_testX$71:	; parameter q, offset 12
246:		mov a3155, [bp + 308]
247:		mov [bp + 348], a3155
249:	

stdlib_testX$72:	; call function noellipse-ellipse printf, extra 0
250:		mov word [bp + 336], stdlib_testX$73
251:		mov [bp + 338], bp
252:		add bp, 336
253:		mov di, bp
254:		add di, 6
255:		jmp printf
257:	

stdlib_testX$73:	; post call
259:	

stdlib_testX$74:	; call header integral zero 0 stack zero 0
261:	

stdlib_testX$75:	; parameter string_strtoul2822123abc222C2026endp29203D202825lu2C2025s290A#, offset 6
262:		mov word [bp + 342], string_strtoul2822123abc222C2026endp29203D202825lu2C2025s290A#
264:	

stdlib_testX$76:	; parameter ul, offset 8
265:		mov a3156, [bp + 332]
266:		mov [bp + 344], a3156
268:	

stdlib_testX$77:	; parameter r, offset 12
269:		mov a3157, [bp + 310]
270:		mov [bp + 348], a3157
272:	

stdlib_testX$78:	; call function noellipse-ellipse printf, extra 0
273:		mov word [bp + 336], stdlib_testX$79
274:		mov [bp + 338], bp
275:		add bp, 336
276:		mov di, bp
277:		add di, 6
278:		jmp printf
280:	

stdlib_testX$79:	; post call
282:	

stdlib_testX$80:	; call header integral zero 0 stack zero 0
284:	

stdlib_testX$81:	; parameter string_0Agetenv2822path2229203D2025s0A#, offset 6
285:		mov word [bp + 12], string_0Agetenv2822path2229203D2025s0A#
287:	

stdlib_testX$82:	; call header integral zero 0 stack zero 0
289:	

stdlib_testX$83:	; parameter string_path#, offset 14
290:		mov word [bp + 20], string_path#
292:	

stdlib_testX$84:	; call function noellipse-noellipse getenv
293:		mov word [bp + 14], stdlib_testX$85
294:		mov [bp + 16], bp
295:		add bp, 14
296:		jmp getenv
298:	

stdlib_testX$85:	; post call
300:	

stdlib_testX$86:	; £temporary6062 = return_value
305:	

stdlib_testX$87:	; parameter £temporary6062, offset 8
306:		mov [bp + 14], t3159
308:	

stdlib_testX$88:	; call function noellipse-ellipse printf, extra 0
309:		mov word [bp + 6], stdlib_testX$89
310:		mov [bp + 8], bp
311:		add bp, 6
312:		mov di, bp
313:		add di, 2
314:		jmp printf
316:	

stdlib_testX$89:	; post call
318:	

stdlib_testX$90:	; call header integral zero 0 stack zero 0
320:	

stdlib_testX$91:	; parameter string_system2822dir22290A#, offset 6
321:		mov word [bp + 12], string_system2822dir22290A#
323:	

stdlib_testX$92:	; call function noellipse-ellipse printf, extra 0
324:		mov word [bp + 6], stdlib_testX$93
325:		mov [bp + 8], bp
326:		add bp, 6
327:		mov di, bp
328:		jmp printf
330:	

stdlib_testX$93:	; post call
332:	

stdlib_testX$94:	; call header integral zero 0 stack zero 0
334:	

stdlib_testX$95:	; parameter string_dir#, offset 6
335:		mov word [bp + 12], string_dir#
337:	

stdlib_testX$96:	; call function noellipse-noellipse system
338:		mov word [bp + 6], stdlib_testX$97
339:		mov [bp + 8], bp
340:		add bp, 6
341:		jmp system
343:	

stdlib_testX$97:	; post call
345:	

stdlib_testX$98:	; call header integral zero 0 stack zero 0
347:	

stdlib_testX$99:	; parameter string_abs282D329203D2025i2C20abs28329203D2025i2C20labs282D3l29203D2025li2C20labs283l29203D2025li0A#, offset 6
348:		mov word [bp + 12], string_abs282D329203D2025i2C20abs28329203D2025i2C20labs282D3l29203D2025li2C20labs283l29203D2025li0A#
350:	

stdlib_testX$100:	; call header integral zero 0 stack zero 0
352:	

stdlib_testX$101:	; parameter -3, offset 14
353:		mov word [bp + 20], -3
355:	

stdlib_testX$102:	; call function noellipse-noellipse _abs
356:		mov word [bp + 14], stdlib_testX$103
357:		mov [bp + 16], bp
358:		add bp, 14
359:		jmp _abs
361:	

stdlib_testX$103:	; post call
363:	

stdlib_testX$104:	; £temporary6066 = return_value
368:	

stdlib_testX$105:	; parameter £temporary6066, offset 8
369:		mov [bp + 14], t3161
371:	

stdlib_testX$106:	; call header integral zero 0 stack zero 0
373:	

stdlib_testX$107:	; parameter 3, offset 16
374:		mov word [bp + 22], 3
376:	

stdlib_testX$108:	; call function noellipse-noellipse _abs
377:		mov word [bp + 16], stdlib_testX$109
378:		mov [bp + 18], bp
379:		add bp, 16
380:		jmp _abs
382:	

stdlib_testX$109:	; post call
384:	

stdlib_testX$110:	; £temporary6067 = return_value
389:	

stdlib_testX$111:	; parameter £temporary6067, offset 10
390:		mov [bp + 16], t3163
392:	

stdlib_testX$112:	; call header integral zero 0 stack zero 0
394:	

stdlib_testX$113:	; parameter -3, offset 18
395:		mov dword [bp + 24], -3
397:	

stdlib_testX$114:	; call function noellipse-noellipse labs
398:		mov word [bp + 18], stdlib_testX$115
399:		mov [bp + 20], bp
400:		add bp, 18
401:		jmp labs
403:	

stdlib_testX$115:	; post call
405:	

stdlib_testX$116:	; £temporary6068 = return_value
410:	

stdlib_testX$117:	; parameter £temporary6068, offset 12
411:		mov [bp + 18], t3165
413:	

stdlib_testX$118:	; call header integral zero 0 stack zero 0
415:	

stdlib_testX$119:	; parameter 3, offset 22
416:		mov dword [bp + 28], 3
418:	

stdlib_testX$120:	; call function noellipse-noellipse labs
419:		mov word [bp + 22], stdlib_testX$121
420:		mov [bp + 24], bp
421:		add bp, 22
422:		jmp labs
424:	

stdlib_testX$121:	; post call
426:	

stdlib_testX$122:	; £temporary6069 = return_value
431:	

stdlib_testX$123:	; parameter £temporary6069, offset 16
432:		mov [bp + 22], t3167
434:	

stdlib_testX$124:	; call function noellipse-ellipse printf, extra 0
435:		mov word [bp + 6], stdlib_testX$125
436:		mov [bp + 8], bp
437:		add bp, 6
438:		mov di, bp
439:		add di, 12
440:		jmp printf
442:	

stdlib_testX$125:	; post call
444:	

stdlib_testX$126:	; call header integral zero 0 stack zero 0
446:	

stdlib_testX$127:	; parameter 10, offset 6
447:		mov word [bp + 12], 10
449:	

stdlib_testX$128:	; parameter 3, offset 8
450:		mov word [bp + 14], 3
452:	

stdlib_testX$129:	; call function noellipse-noellipse div
453:		mov word [bp + 6], stdlib_testX$130
454:		mov [bp + 8], bp
455:		add bp, 6
456:		jmp div
458:	

stdlib_testX$130:	; post call
460:	

stdlib_testX$131:	; £temporary6071 -> £temporary6072 = return_value
462:	

stdlib_testX$132:	; i = £temporary6071 -> £temporary6072
463:		mov t3169, bp
464:		add t3169, 6
465:		mov t3170, 4
466:	

stdlib_testX$132$Loop:
467:		mov t3171, [t3168]
468:		mov [t3169], t3171
469:		inc t3168
470:		inc t3169
471:		dec t3170
472:		cmp t3170, 0
473:		jne stdlib_testX$132$Loop
475:	

stdlib_testX$133:	; call header integral zero 0 stack zero 0
477:	

stdlib_testX$134:	; parameter string_div_t28102C20329203D202825i2C2025i292C0A#, offset 6
478:		mov word [bp + 16], string_div_t28102C20329203D202825i2C2025i292C0A#
480:	

stdlib_testX$135:	; parameter i$quot, offset 8
481:		mov a3172, [bp + 6]
482:		mov [bp + 18], a3172
484:	

stdlib_testX$136:	; parameter i$rem, offset 10
485:		mov a3173, [bp + 8]
486:		mov [bp + 20], a3173
488:	

stdlib_testX$137:	; call function noellipse-ellipse printf, extra 0
489:		mov word [bp + 10], stdlib_testX$138
490:		mov [bp + 12], bp
491:		add bp, 10
492:		mov di, bp
493:		add di, 4
494:		jmp printf
496:	

stdlib_testX$138:	; post call
498:	

stdlib_testX$139:	; call header integral zero 0 stack zero 0
500:	

stdlib_testX$140:	; parameter i, offset 6
501:		mov t3174, bp
502:		add t3174, 6
503:		mov t3175, bp
504:		add t3175, 16
505:		mov t3176, 4
506:	

stdlib_testX$140$Loop:
507:		mov t3177, [t3174]
508:		mov [t3175], t3177
509:		inc t3174
510:		inc t3175
511:		dec t3176
512:		cmp t3176, 0
513:		jne stdlib_testX$140$Loop
515:	

stdlib_testX$141:	; call function noellipse-noellipse print_div
516:		mov word [bp + 10], stdlib_testX$142
517:		mov [bp + 12], bp
518:		add bp, 10
519:		jmp print_div
521:	

stdlib_testX$142:	; post call
523:	

stdlib_testX$143:	; call header integral zero 0 stack zero 0
525:	

stdlib_testX$144:	; parameter 10, offset 6
526:		mov dword [bp + 12], 10
528:	

stdlib_testX$145:	; parameter 3, offset 10
529:		mov dword [bp + 16], 3
531:	

stdlib_testX$146:	; call function noellipse-noellipse ldiv
532:		mov word [bp + 6], stdlib_testX$147
533:		mov [bp + 8], bp
534:		add bp, 6
535:		jmp ldiv
537:	

stdlib_testX$147:	; post call
539:	

stdlib_testX$148:	; £temporary6077 -> £temporary6078 = return_value
541:	

stdlib_testX$149:	; li = £temporary6077 -> £temporary6078
542:		mov t3179, bp
543:		add t3179, 6
544:		mov t3180, 8
545:	

stdlib_testX$149$Loop:
546:		mov t3181, [t3178]
547:		mov [t3179], t3181
548:		inc t3178
549:		inc t3179
550:		dec t3180
551:		cmp t3180, 0
552:		jne stdlib_testX$149$Loop
554:	

stdlib_testX$150:	; call header integral zero 0 stack zero 0
556:	

stdlib_testX$151:	; parameter string_ldiv_t28102C20329203D202825li2C2025li290A#, offset 6
557:		mov word [bp + 20], string_ldiv_t28102C20329203D202825li2C2025li290A#
559:	

stdlib_testX$152:	; parameter li$quot, offset 8
560:		mov a3182, [bp + 6]
561:		mov [bp + 22], a3182
563:	

stdlib_testX$153:	; parameter li$rem, offset 12
564:		mov a3183, [bp + 10]
565:		mov [bp + 26], a3183
567:	

stdlib_testX$154:	; call function noellipse-ellipse printf, extra 0
568:		mov word [bp + 14], stdlib_testX$155
569:		mov [bp + 16], bp
570:		add bp, 14
571:		mov di, bp
572:		add di, 8
573:		jmp printf
575:	

stdlib_testX$155:	; post call
577:	

stdlib_testX$156:	; call header integral zero 0 stack zero 0
579:	

stdlib_testX$157:	; parameter li, offset 6
580:		mov t3184, bp
581:		add t3184, 6
582:		mov t3185, bp
583:		add t3185, 20
584:		mov t3186, 8
585:	

stdlib_testX$157$Loop:
586:		mov t3187, [t3184]
587:		mov [t3185], t3187
588:		inc t3184
589:		inc t3185
590:		dec t3186
591:		cmp t3186, 0
592:		jne stdlib_testX$157$Loop
594:	

stdlib_testX$158:	; call function noellipse-noellipse print_ldiv
595:		mov word [bp + 14], stdlib_testX$159
596:		mov [bp + 16], bp
597:		add bp, 14
598:		jmp print_ldiv
600:	

stdlib_testX$159:	; post call
602:	

stdlib_testX$160:	; list[0] = 3
603:		mov word [bp + 6], 3
605:	

stdlib_testX$161:	; list[1] = 4
606:		mov word [bp + 8], 4
608:	

stdlib_testX$162:	; list[2] = 2
609:		mov word [bp + 10], 2
611:	

stdlib_testX$163:	; list[3] = 1
612:		mov word [bp + 12], 1
614:	

stdlib_testX$164:	; size = 4
615:		mov word [bp + 14], 4
617:	

stdlib_testX$165:	; call header integral zero 0 stack zero 0
619:	

stdlib_testX$166:	; parameter string_0AA20List2013A20#, offset 6
620:		mov word [bp + 24], string_0AA20List2013A20#
622:	

stdlib_testX$167:	; call function noellipse-ellipse printf, extra 0
623:		mov word [bp + 18], stdlib_testX$168
624:		mov [bp + 20], bp
625:		add bp, 18
626:		mov di, bp
627:		jmp printf
629:	

stdlib_testX$168:	; post call
631:	

stdlib_testX$169:	; index = 0
632:		mov word [bp + 16], 0
634:	

stdlib_testX$170:	; if index >= size goto 181
635:		mov a3188, [bp + 14]
636:		cmp [bp + 16], a3188
637:		jge stdlib_testX$181
639:	

stdlib_testX$171:	; call header integral zero 0 stack zero 0
641:	

stdlib_testX$172:	; parameter string_25i20#, offset 6
642:		mov word [bp + 24], string_25i20#
644:	

stdlib_testX$173:	; £temporary6091 = index * 2
645:		mov a3189, [bp + 16]
647:		xor dx, dx
648:		mul word [int2$2#]
654:	

stdlib_testX$174:	; £temporary6092 = list + £temporary6091
655:		mov a3193, bp
656:		add a3193, 6
657:		add a3193, t3192
659:	

stdlib_testX$175:	; £temporary6093 -> £temporary6092 = *£temporary6092
661:	

stdlib_testX$176:	; parameter £temporary6093 -> £temporary6092, offset 8
662:		mov t3194, [a3193]
663:		mov [bp + 26], t3194
665:	

stdlib_testX$177:	; call function noellipse-ellipse printf, extra 0
666:		mov word [bp + 18], stdlib_testX$178
667:		mov [bp + 20], bp
668:		add bp, 18
669:		mov di, bp
670:		add di, 2
671:		jmp printf
673:	

stdlib_testX$178:	; post call
675:	

stdlib_testX$179:	; ++index
676:		inc word [bp + 16]
678:	

stdlib_testX$180:	; goto 170
679:		jmp stdlib_testX$170
681:	

stdlib_testX$181:	; call header integral zero 0 stack zero 0
683:	

stdlib_testX$182:	; parameter string_0AB20List2023A20#, offset 6
684:		mov word [bp + 24], string_0AB20List2023A20#
686:	

stdlib_testX$183:	; call function noellipse-ellipse printf, extra 0
687:		mov word [bp + 18], stdlib_testX$184
688:		mov [bp + 20], bp
689:		add bp, 18
690:		mov di, bp
691:		jmp printf
693:	

stdlib_testX$184:	; post call
695:	

stdlib_testX$185:	; call header integral zero 0 stack zero 0
697:	

stdlib_testX$186:	; parameter list, offset 6
698:		mov [bp + 24], bp
699:		add word [bp + 24], 6
701:	

stdlib_testX$187:	; parameter size, offset 8
702:		mov a3195, [bp + 14]
703:		mov [bp + 26], a3195
705:	

stdlib_testX$188:	; parameter 2, offset 10
706:		mov word [bp + 28], 2
708:	

stdlib_testX$189:	; parameter reverse_compare, offset 12
709:		mov word [bp + 30], reverse_compare
711:	

stdlib_testX$190:	; call function noellipse-ellipse qsort, extra 0
712:		mov word [bp + 18], stdlib_testX$191
713:		mov [bp + 20], bp
714:		add bp, 18
715:		mov di, bp
716:		jmp qsort
718:	

stdlib_testX$191:	; post call
720:	

stdlib_testX$192:	; index = 0
721:		mov word [bp + 16], 0
723:	

stdlib_testX$193:	; if index >= size goto 204
724:		mov a3196, [bp + 14]
725:		cmp [bp + 16], a3196
726:		jge stdlib_testX$204
728:	

stdlib_testX$194:	; call header integral zero 0 stack zero 0
730:	

stdlib_testX$195:	; parameter string_25i20#, offset 6
731:		mov word [bp + 24], string_25i20#
733:	

stdlib_testX$196:	; £temporary6100 = index * 2
734:		mov a3197, [bp + 16]
736:		xor dx, dx
737:		mul word [int2$2#]
743:	

stdlib_testX$197:	; £temporary6101 = list + £temporary6100
744:		mov a3201, bp
745:		add a3201, 6
746:		add a3201, t3200
748:	

stdlib_testX$198:	; £temporary6102 -> £temporary6101 = *£temporary6101
750:	

stdlib_testX$199:	; parameter £temporary6102 -> £temporary6101, offset 8
751:		mov t3202, [a3201]
752:		mov [bp + 26], t3202
754:	

stdlib_testX$200:	; call function noellipse-ellipse printf, extra 0
755:		mov word [bp + 18], stdlib_testX$201
756:		mov [bp + 20], bp
757:		add bp, 18
758:		mov di, bp
759:		add di, 2
760:		jmp printf
762:	

stdlib_testX$201:	; post call
764:	

stdlib_testX$202:	; ++index
765:		inc word [bp + 16]
767:	

stdlib_testX$203:	; goto 193
768:		jmp stdlib_testX$193
770:	

stdlib_testX$204:	; call header integral zero 0 stack zero 0
772:	

stdlib_testX$205:	; parameter string_0AC20List2033A20#, offset 6
773:		mov word [bp + 24], string_0AC20List2033A20#
775:	

stdlib_testX$206:	; call function noellipse-ellipse printf, extra 0
776:		mov word [bp + 18], stdlib_testX$207
777:		mov [bp + 20], bp
778:		add bp, 18
779:		mov di, bp
780:		jmp printf
782:	

stdlib_testX$207:	; post call
784:	

stdlib_testX$208:	; call header integral zero 0 stack zero 0
786:	

stdlib_testX$209:	; parameter list, offset 6
787:		mov [bp + 24], bp
788:		add word [bp + 24], 6
790:	

stdlib_testX$210:	; parameter size, offset 8
791:		mov a3203, [bp + 14]
792:		mov [bp + 26], a3203
794:	

stdlib_testX$211:	; parameter 2, offset 10
795:		mov word [bp + 28], 2
797:	

stdlib_testX$212:	; parameter compare, offset 12
798:		mov word [bp + 30], compare
800:	

stdlib_testX$213:	; call function noellipse-ellipse qsort, extra 0
801:		mov word [bp + 18], stdlib_testX$214
802:		mov [bp + 20], bp
803:		add bp, 18
804:		mov di, bp
805:		jmp qsort
807:	

stdlib_testX$214:	; post call
809:	

stdlib_testX$215:	; index = 0
810:		mov word [bp + 16], 0
812:	

stdlib_testX$216:	; if index >= size goto 227
813:		mov a3204, [bp + 14]
814:		cmp [bp + 16], a3204
815:		jge stdlib_testX$227
817:	

stdlib_testX$217:	; call header integral zero 0 stack zero 0
819:	

stdlib_testX$218:	; parameter string_25i20#, offset 6
820:		mov word [bp + 24], string_25i20#
822:	

stdlib_testX$219:	; £temporary6109 = index * 2
823:		mov a3205, [bp + 16]
825:		xor dx, dx
826:		mul word [int2$2#]
832:	

stdlib_testX$220:	; £temporary6110 = list + £temporary6109
833:		mov a3209, bp
834:		add a3209, 6
835:		add a3209, t3208
837:	

stdlib_testX$221:	; £temporary6111 -> £temporary6110 = *£temporary6110
839:	

stdlib_testX$222:	; parameter £temporary6111 -> £temporary6110, offset 8
840:		mov t3210, [a3209]
841:		mov [bp + 26], t3210
843:	

stdlib_testX$223:	; call function noellipse-ellipse printf, extra 0
844:		mov word [bp + 18], stdlib_testX$224
845:		mov [bp + 20], bp
846:		add bp, 18
847:		mov di, bp
848:		add di, 2
849:		jmp printf
851:	

stdlib_testX$224:	; post call
853:	

stdlib_testX$225:	; ++index
854:		inc word [bp + 16]
856:	

stdlib_testX$226:	; goto 216
857:		jmp stdlib_testX$216
859:	

stdlib_testX$227:	; call header integral zero 0 stack zero 0
861:	

stdlib_testX$228:	; parameter string_0A0ASearch3A0A#, offset 6
862:		mov word [bp + 24], string_0A0ASearch3A0A#
864:	

stdlib_testX$229:	; call function noellipse-ellipse printf, extra 0
865:		mov word [bp + 18], stdlib_testX$230
866:		mov [bp + 20], bp
867:		add bp, 18
868:		mov di, bp
869:		jmp printf
871:	

stdlib_testX$230:	; post call
873:	

stdlib_testX$231:	; key = 0
874:		mov word [bp + 16], 0
876:	

stdlib_testX$232:	; if key >= 6 goto 259
877:		cmp word [bp + 16], 6
878:		jge stdlib_testX$259
880:	

stdlib_testX$233:	; call header integral zero 0 stack zero 0
882:	

stdlib_testX$234:	; £temporary6116 = &key
883:		mov t3211, bp
884:		add t3211, 16
886:	

stdlib_testX$235:	; parameter £temporary6116, offset 6
887:		mov [bp + 24], t3211
889:	

stdlib_testX$236:	; parameter list, offset 8
890:		mov [bp + 26], bp
891:		add word [bp + 26], 6
893:	

stdlib_testX$237:	; parameter size, offset 10
894:		mov a3212, [bp + 14]
895:		mov [bp + 28], a3212
897:	

stdlib_testX$238:	; parameter 2, offset 12
898:		mov word [bp + 30], 2
900:	

stdlib_testX$239:	; parameter compare, offset 14
901:		mov word [bp + 32], compare
903:	

stdlib_testX$240:	; call function noellipse-noellipse bsearch
904:		mov word [bp + 18], stdlib_testX$241
905:		mov [bp + 20], bp
906:		add bp, 18
907:		jmp bsearch
909:	

stdlib_testX$241:	; post call
911:	

stdlib_testX$242:	; £temporary6118 = return_value
916:	

stdlib_testX$243:	; £temporary6119 = int_to_int £temporary6118 (Pointer -> Pointer)
919:	

stdlib_testX$244:	; p = £temporary6119
920:		mov [bp + 18], t3214
922:	

stdlib_testX$245:	; if p == 0 goto 249
923:		cmp word [bp + 18], 0
924:		je stdlib_testX$249
926:	

stdlib_testX$246:	; £temporary6121 = p - list
927:		mov a3215, [bp + 18]
928:		mov a3216, bp
929:		add a3216, 6
930:		sub a3215, a3216
932:	

stdlib_testX$247:	; £temporary6126 = £temporary6121 / 2
934:		xor dx, dx
935:		div word [int2$2#]
941:	

stdlib_testX$248:	; goto 250
942:		jmp stdlib_testX$250
944:	

stdlib_testX$249:	; £temporary6126 = -1
945:		mov t3220, -1
947:	

stdlib_testX$250:	; index = £temporary6126
948:		mov [bp + 20], t3220
950:	

stdlib_testX$251:	; call header integral zero 0 stack zero 0
952:	

stdlib_testX$252:	; parameter string_20202825i2C2025i290A#, offset 6
953:		mov word [bp + 28], string_20202825i2C2025i290A#
955:	

stdlib_testX$253:	; parameter key, offset 8
956:		mov a3221, [bp + 16]
957:		mov [bp + 30], a3221
959:	

stdlib_testX$254:	; parameter index, offset 10
960:		mov a3222, [bp + 20]
961:		mov [bp + 32], a3222
963:	

stdlib_testX$255:	; call function noellipse-ellipse printf, extra 0
964:		mov word [bp + 22], stdlib_testX$256
965:		mov [bp + 24], bp
966:		add bp, 22
967:		mov di, bp
968:		add di, 4
969:		jmp printf
971:	

stdlib_testX$256:	; post call
973:	

stdlib_testX$257:	; ++key
974:		inc word [bp + 16]
976:	

stdlib_testX$258:	; goto 232
977:		jmp stdlib_testX$232
979:	

stdlib_testX$259:	; call header integral zero 0 stack zero 0
981:	

stdlib_testX$260:	; parameter string_0A#, offset 6
982:		mov word [bp + 24], string_0A#
984:	

stdlib_testX$261:	; call function noellipse-ellipse printf, extra 0
985:		mov word [bp + 18], stdlib_testX$262
986:		mov [bp + 20], bp
987:		add bp, 18
988:		mov di, bp
989:		jmp printf
991:	

stdlib_testX$262:	; post call
993:	

stdlib_testX$263:	; return
994:		mov t3223, [bp]
995:		mov di, [bp + 4]
996:		mov bp, [bp + 2]
997:		jmp t3223
999:	

stdlib_testX$264:	; function end stdlib_testX
