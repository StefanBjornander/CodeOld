1:	

compare:	; £temporary5942 = int_to_int valuePtr1 (Pointer -> Pointer)
2:		mov a3088, [bp + 6]
5:	

compare$1:	; £temporary5943 -> £temporary5942 = *£temporary5942
7:	

compare$2:	; intValue1 = £temporary5943 -> £temporary5942
8:		mov t3089, [a3088]
9:		mov [bp + 10], t3089
11:	

compare$3:	; £temporary5944 = int_to_int valuePtr2 (Pointer -> Pointer)
12:		mov a3090, [bp + 8]
15:	

compare$4:	; £temporary5945 -> £temporary5944 = *£temporary5944
17:	

compare$5:	; intValue2 = £temporary5945 -> £temporary5944
18:		mov t3091, [a3090]
19:		mov [bp + 12], t3091
21:	

compare$6:	; if intValue1 >= intValue2 goto 9
22:		mov a3092, [bp + 12]
23:		cmp [bp + 10], a3092
24:		jge compare$9
26:	

compare$7:	; £temporary5955 = -1
27:		mov t3093, -1
29:	

compare$8:	; goto 14
30:		jmp compare$14
32:	

compare$9:	; if intValue1 != intValue2 goto 12
33:		mov a3094, [bp + 12]
34:		cmp [bp + 10], a3094
35:		jne compare$12
37:	

compare$10:	; £temporary5951 = 0
38:		mov t3095, 0
40:	

compare$11:	; goto 13
41:		jmp compare$13
43:	

compare$12:	; £temporary5951 = 1
44:		mov t3096, 1
46:	

compare$13:	; £temporary5955 = £temporary5951
48:	

compare$14:	; return_value = £temporary5955
50:	

compare$15:	; return
51:		mov t3098, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3098
56:	

compare$16:	; function end compare
1:	

reverse_compare:	; £temporary5956 = int_to_int valuePtr1 (Pointer -> Pointer)
2:		mov a3099, [bp + 6]
5:	

reverse_compare$1:	; £temporary5957 -> £temporary5956 = *£temporary5956
7:	

reverse_compare$2:	; intValue1 = £temporary5957 -> £temporary5956
8:		mov t3100, [a3099]
9:		mov [bp + 10], t3100
11:	

reverse_compare$3:	; £temporary5958 = int_to_int valuePtr2 (Pointer -> Pointer)
12:		mov a3101, [bp + 8]
15:	

reverse_compare$4:	; £temporary5959 -> £temporary5958 = *£temporary5958
17:	

reverse_compare$5:	; intValue2 = £temporary5959 -> £temporary5958
18:		mov t3102, [a3101]
19:		mov [bp + 12], t3102
21:	

reverse_compare$6:	; if intValue1 >= intValue2 goto 9
22:		mov a3103, [bp + 12]
23:		cmp [bp + 10], a3103
24:		jge reverse_compare$9
26:	

reverse_compare$7:	; £temporary5969 = 1
27:		mov t3104, 1
29:	

reverse_compare$8:	; goto 14
30:		jmp reverse_compare$14
32:	

reverse_compare$9:	; if intValue1 != intValue2 goto 12
33:		mov a3105, [bp + 12]
34:		cmp [bp + 10], a3105
35:		jne reverse_compare$12
37:	

reverse_compare$10:	; £temporary5965 = 0
38:		mov t3106, 0
40:	

reverse_compare$11:	; goto 13
41:		jmp reverse_compare$13
43:	

reverse_compare$12:	; £temporary5965 = -1
44:		mov t3107, -1
46:	

reverse_compare$13:	; £temporary5969 = £temporary5965
48:	

reverse_compare$14:	; return_value = £temporary5969
50:	

reverse_compare$15:	; return
51:		mov t3109, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3109
56:	

reverse_compare$16:	; function end reverse_compare
1:	

print_div:	; call header integral zero 0 stack zero 0
3:	

print_div$1:	; parameter string_div_t20quot2025i20rem2025i0A#, offset 6
4:		mov word [bp + 16], string_div_t20quot2025i20rem2025i0A#
6:	

print_div$2:	; parameter d$quot, offset 8
7:		mov a3110, [bp + 6]
8:		mov [bp + 18], a3110
10:	

print_div$3:	; parameter d$rem, offset 10
11:		mov a3111, [bp + 8]
12:		mov [bp + 20], a3111
14:	

print_div$4:	; call function noellipse-ellipse printf, extra 0
15:		mov word [bp + 10], print_div$5
16:		mov [bp + 12], bp
17:		add bp, 10
18:		mov di, bp
19:		add di, 4
20:		jmp printf
22:	

print_div$5:	; post call
24:	

print_div$6:	; ++d$quot
25:		inc word [bp + 6]
27:	

print_div$7:	; ++d$rem
28:		inc word [bp + 8]
30:	

print_div$8:	; return_value = d
31:		mov t3112, bp
32:		add t3112, 6
34:	

print_div$9:	; return
35:		mov t3113, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t3113
40:	

print_div$10:	; function end print_div
1:	

print_ldiv:	; call header integral zero 0 stack zero 0
3:	

print_ldiv$1:	; parameter string_ldiv_t20quot2025li20rem2025li0A#, offset 6
4:		mov word [bp + 20], string_ldiv_t20quot2025li20rem2025li0A#
6:	

print_ldiv$2:	; parameter ld$quot, offset 8
7:		mov a3114, [bp + 6]
8:		mov [bp + 22], a3114
10:	

print_ldiv$3:	; parameter ld$rem, offset 12
11:		mov a3115, [bp + 10]
12:		mov [bp + 26], a3115
14:	

print_ldiv$4:	; call function noellipse-ellipse printf, extra 0
15:		mov word [bp + 14], print_ldiv$5
16:		mov [bp + 16], bp
17:		add bp, 14
18:		mov di, bp
19:		add di, 8
20:		jmp printf
22:	

print_ldiv$5:	; post call
24:	

print_ldiv$6:	; --ld$quot
25:		dec dword [bp + 6]
27:	

print_ldiv$7:	; --ld$rem
28:		dec dword [bp + 10]
30:	

print_ldiv$8:	; return_value = ld
31:		mov t3116, bp
32:		add t3116, 6
34:	

print_ldiv$9:	; return
35:		mov t3117, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t3117
40:	

print_ldiv$10:	; function end print_ldiv
1:	

exit_handle1x:	; call header integral zero 0 stack zero 0
3:	

exit_handle1x$1:	; parameter string_exit10A#, offset 6
4:		mov word [bp + 12], string_exit10A#
6:	

exit_handle1x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle1x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle1x$3:	; post call
15:	

exit_handle1x$4:	; return
16:		mov t3118, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3118
21:	

exit_handle1x$5:	; function end exit_handle1x
1:	

exit_handle2x:	; call header integral zero 0 stack zero 0
3:	

exit_handle2x$1:	; parameter string_exit20A#, offset 6
4:		mov word [bp + 12], string_exit20A#
6:	

exit_handle2x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle2x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle2x$3:	; post call
15:	

exit_handle2x$4:	; return
16:		mov t3119, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3119
21:	

exit_handle2x$5:	; function end exit_handle2x
1:	

exit_handle3x:	; call header integral zero 0 stack zero 0
3:	

exit_handle3x$1:	; parameter string_exit30A#, offset 6
4:		mov word [bp + 12], string_exit30A#
6:	

exit_handle3x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle3x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle3x$3:	; post call
15:	

exit_handle3x$4:	; return
16:		mov t3120, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3120
21:	

exit_handle3x$5:	; function end exit_handle3x
1:	

hello:	; call header integral zero 0 stack zero 0
3:	

hello$1:	; parameter string_HelloFFF#, offset 6
4:		mov word [bp + 12], string_HelloFFF#
6:	

hello$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], hello$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

hello$3:	; post call
15:	

hello$4:	; return
16:		mov t3121, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3121
21:	

hello$5:	; function end hello
1:	

qtest:	; call header integral zero 0 stack zero 0
3:	

qtest$1:	; parameter string_f3A2025u0A#, offset 6
4:		mov word [bp + 14], string_f3A2025u0A#
6:	

qtest$2:	; £temporary6000 = int_to_int f (Pointer -> Unsigned_Int)
7:		mov a3122, [bp + 6]
10:	

qtest$3:	; parameter £temporary6000, offset 8
11:		mov [bp + 16], a3122
13:	

qtest$4:	; call function noellipse-ellipse printf, extra 0
14:		mov word [bp + 8], qtest$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		mov di, bp
18:		add di, 2
19:		jmp printf
21:	

qtest$5:	; post call
23:	

qtest$6:	; call header integral zero 0 stack zero 0
25:	

qtest$7:	; call function noellipse-noellipse f
26:		mov word [bp + 8], qtest$8
27:		mov [bp + 10], bp
28:		mov a3123, [bp + 6]
29:		add bp, 8
30:		jmp a3123 a3123 f 28 30
32:	

qtest$8:	; post call
34:	

qtest$9:	; return
35:		mov t3124, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t3124
40:	

qtest$10:	; function end qtest
1:	

stdlib_testZ:	; call header integral zero 0 stack zero 0
3:	

stdlib_testZ$1:	; parameter string_hello3A2025u0A#, offset 6
4:		mov word [bp + 12], string_hello3A2025u0A#
6:	

stdlib_testZ$2:	; £temporary6005 = int_to_int hello (Function -> Unsigned_Int)
7:		mov a3125, hello
10:	

stdlib_testZ$3:	; parameter £temporary6005, offset 8
11:		mov [bp + 14], a3125
13:	

stdlib_testZ$4:	; call function noellipse-ellipse printf, extra 0
14:		mov word [bp + 6], stdlib_testZ$5
15:		mov [bp + 8], bp
16:		add bp, 6
17:		mov di, bp
18:		add di, 2
19:		jmp printf
21:	

stdlib_testZ$5:	; post call
23:	

stdlib_testZ$6:	; call header integral zero 0 stack zero 0
25:	

stdlib_testZ$7:	; parameter hello, offset 6
26:		mov word [bp + 12], hello
28:	

stdlib_testZ$8:	; call function noellipse-noellipse qtest
29:		mov word [bp + 6], stdlib_testZ$9
30:		mov [bp + 8], bp
31:		add bp, 6
32:		jmp qtest
34:	

stdlib_testZ$9:	; post call
36:	

stdlib_testZ$10:	; call header integral zero 0 stack zero 0
38:	

stdlib_testZ$11:	; parameter string_Y#, offset 6
39:		mov word [bp + 12], string_Y#
41:	

stdlib_testZ$12:	; call function noellipse-ellipse printf, extra 0
42:		mov word [bp + 6], stdlib_testZ$13
43:		mov [bp + 8], bp
44:		add bp, 6
45:		mov di, bp
46:		jmp printf
48:	

stdlib_testZ$13:	; post call
50:	

stdlib_testZ$14:	; return
51:		mov t3126, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3126
56:	

stdlib_testZ$15:	; function end stdlib_testZ
1:	

stdlib_test:	; call header integral zero 0 stack zero 0
3:	

stdlib_test$1:	; parameter string_atof28221232E4562229203D2025f0A#, offset 6
4:		mov word [bp + 14], string_atof28221232E4562229203D2025f0A#
6:	

stdlib_test$2:	; call header integral zero 0 stack zero 0
8:	

stdlib_test$3:	; parameter string_1232E456#, offset 14
9:		mov word [bp + 22], string_1232E456#
11:	

stdlib_test$4:	; call function noellipse-noellipse atof
12:		mov word [bp + 16], stdlib_test$5
13:		mov [bp + 18], bp
14:		add bp, 16
15:		jmp atof
17:	

stdlib_test$5:	; post call
19:	

stdlib_test$6:	; £temporary6013 = return_value
21:	

stdlib_test$7:	; parameter £temporary6013, offset 8
22:		fstp qword [bp + 16]
24:	

stdlib_test$8:	; call function noellipse-ellipse printf, extra 0
25:		mov word [bp + 8], stdlib_test$9
26:		mov [bp + 10], bp
27:		add bp, 8
28:		mov di, bp
29:		add di, 8
30:		jmp printf
32:	

stdlib_test$9:	; post call
34:	

stdlib_test$10:	; call header integral zero 0 stack zero 0
36:	

stdlib_test$11:	; parameter string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#, offset 6
37:		mov word [bp + 14], string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#
39:	

stdlib_test$12:	; call header integral zero 0 stack zero 0
41:	

stdlib_test$13:	; parameter string_1232E456789abc#, offset 14
42:		mov word [bp + 22], string_1232E456789abc#
44:	

stdlib_test$14:	; £temporary6015 = &p
45:		mov t3127, bp
46:		add t3127, 6
48:	

stdlib_test$15:	; parameter £temporary6015, offset 16
49:		mov [bp + 24], t3127
51:	

stdlib_test$16:	; call function noellipse-noellipse strtod
52:		mov word [bp + 16], stdlib_test$17
53:		mov [bp + 18], bp
54:		add bp, 16
55:		jmp strtod
57:	

stdlib_test$17:	; post call
59:	

stdlib_test$18:	; £temporary6016 = return_value
61:	

stdlib_test$19:	; parameter £temporary6016, offset 8
62:		fstp qword [bp + 16]
64:	

stdlib_test$20:	; parameter p, offset 16
65:		mov a3128, [bp + 6]
66:		mov [bp + 24], a3128
68:	

stdlib_test$21:	; call function noellipse-ellipse printf, extra 0
69:		mov word [bp + 8], stdlib_test$22
70:		mov [bp + 10], bp
71:		add bp, 8
72:		mov di, bp
73:		add di, 10
74:		jmp printf
76:	

stdlib_test$22:	; post call
78:	

stdlib_test$23:	; call header integral zero 0 stack zero 0
80:	

stdlib_test$24:	; parameter string_0Agetenv2822path2229203D2025s0A#, offset 6
81:		mov word [bp + 12], string_0Agetenv2822path2229203D2025s0A#
83:	

stdlib_test$25:	; call header integral zero 0 stack zero 0
85:	

stdlib_test$26:	; parameter string_path#, offset 14
86:		mov word [bp + 20], string_path#
88:	

stdlib_test$27:	; call function noellipse-noellipse getenv
89:		mov word [bp + 14], stdlib_test$28
90:		mov [bp + 16], bp
91:		add bp, 14
92:		jmp getenv
94:	

stdlib_test$28:	; post call
96:	

stdlib_test$29:	; £temporary6018 = return_value
101:	

stdlib_test$30:	; parameter £temporary6018, offset 8
102:		mov [bp + 14], t3130
104:	

stdlib_test$31:	; call function noellipse-ellipse printf, extra 0
105:		mov word [bp + 6], stdlib_test$32
106:		mov [bp + 8], bp
107:		add bp, 6
108:		mov di, bp
109:		add di, 2
110:		jmp printf
112:	

stdlib_test$32:	; post call
114:	

stdlib_test$33:	; call header integral zero 0 stack zero 0
116:	

stdlib_test$34:	; parameter string_system2822dir22290A#, offset 6
117:		mov word [bp + 12], string_system2822dir22290A#
119:	

stdlib_test$35:	; call function noellipse-ellipse printf, extra 0
120:		mov word [bp + 6], stdlib_test$36
121:		mov [bp + 8], bp
122:		add bp, 6
123:		mov di, bp
124:		jmp printf
126:	

stdlib_test$36:	; post call
128:	

stdlib_test$37:	; call header integral zero 0 stack zero 0
130:	

stdlib_test$38:	; parameter string_dir#, offset 6
131:		mov word [bp + 12], string_dir#
133:	

stdlib_test$39:	; call function noellipse-noellipse system
134:		mov word [bp + 6], stdlib_test$40
135:		mov [bp + 8], bp
136:		add bp, 6
137:		jmp system
139:	

stdlib_test$40:	; post call
141:	

stdlib_test$41:	; call header integral zero 0 stack zero 0
143:	

stdlib_test$42:	; parameter string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#, offset 6
144:		mov word [bp + 12], string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#
146:	

stdlib_test$43:	; call header integral zero 0 stack zero 0
148:	

stdlib_test$44:	; parameter -3, offset 14
149:		mov word [bp + 20], -3
151:	

stdlib_test$45:	; call function noellipse-noellipse _abs
152:		mov word [bp + 14], stdlib_test$46
153:		mov [bp + 16], bp
154:		add bp, 14
155:		jmp _abs
157:	

stdlib_test$46:	; post call
159:	

stdlib_test$47:	; £temporary6022 = return_value
164:	

stdlib_test$48:	; parameter £temporary6022, offset 8
165:		mov [bp + 14], t3132
167:	

stdlib_test$49:	; call header integral zero 0 stack zero 0
169:	

stdlib_test$50:	; parameter 3, offset 16
170:		mov word [bp + 22], 3
172:	

stdlib_test$51:	; call function noellipse-noellipse _abs
173:		mov word [bp + 16], stdlib_test$52
174:		mov [bp + 18], bp
175:		add bp, 16
176:		jmp _abs
178:	

stdlib_test$52:	; post call
180:	

stdlib_test$53:	; £temporary6023 = return_value
185:	

stdlib_test$54:	; parameter £temporary6023, offset 10
186:		mov [bp + 16], t3134
188:	

stdlib_test$55:	; call function noellipse-ellipse printf, extra 0
189:		mov word [bp + 6], stdlib_test$56
190:		mov [bp + 8], bp
191:		add bp, 6
192:		mov di, bp
193:		add di, 4
194:		jmp printf
196:	

stdlib_test$56:	; post call
198:	

stdlib_test$57:	; call header integral zero 0 stack zero 0
200:	

stdlib_test$58:	; parameter string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#, offset 6
201:		mov word [bp + 12], string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#
203:	

stdlib_test$59:	; call header integral zero 0 stack zero 0
205:	

stdlib_test$60:	; parameter -3, offset 14
206:		mov dword [bp + 20], -3
208:	

stdlib_test$61:	; call function noellipse-noellipse labs
209:		mov word [bp + 14], stdlib_test$62
210:		mov [bp + 16], bp
211:		add bp, 14
212:		jmp labs
214:	

stdlib_test$62:	; post call
216:	

stdlib_test$63:	; £temporary6025 = return_value
221:	

stdlib_test$64:	; parameter £temporary6025, offset 8
222:		mov [bp + 14], t3136
224:	

stdlib_test$65:	; call header integral zero 0 stack zero 0
226:	

stdlib_test$66:	; parameter 3, offset 18
227:		mov dword [bp + 24], 3
229:	

stdlib_test$67:	; call function noellipse-noellipse labs
230:		mov word [bp + 18], stdlib_test$68
231:		mov [bp + 20], bp
232:		add bp, 18
233:		jmp labs
235:	

stdlib_test$68:	; post call
237:	

stdlib_test$69:	; £temporary6026 = return_value
242:	

stdlib_test$70:	; parameter £temporary6026, offset 12
243:		mov [bp + 18], t3138
245:	

stdlib_test$71:	; call function noellipse-ellipse printf, extra 0
246:		mov word [bp + 6], stdlib_test$72
247:		mov [bp + 8], bp
248:		add bp, 6
249:		mov di, bp
250:		add di, 8
251:		jmp printf
253:	

stdlib_test$72:	; post call
255:	

stdlib_test$73:	; call header integral zero 0 stack zero 0
257:	

stdlib_test$74:	; parameter 10, offset 6
258:		mov word [bp + 12], 10
260:	

stdlib_test$75:	; parameter 3, offset 8
261:		mov word [bp + 14], 3
263:	

stdlib_test$76:	; call function noellipse-noellipse div
264:		mov word [bp + 6], stdlib_test$77
265:		mov [bp + 8], bp
266:		add bp, 6
267:		jmp div
269:	

stdlib_test$77:	; post call
271:	

stdlib_test$78:	; £temporary6028 -> £temporary6029 = return_value
273:	

stdlib_test$79:	; i = £temporary6028 -> £temporary6029
274:		mov t3140, bp
275:		add t3140, 6
276:		mov t3141, 4
277:	

stdlib_test$79$Loop:
278:		mov t3142, [t3139]
279:		mov [t3140], t3142
280:		inc t3139
281:		inc t3140
282:		dec t3141
283:		cmp t3141, 0
284:		jne stdlib_test$79$Loop
286:	

stdlib_test$80:	; call header integral zero 0 stack zero 0
288:	

stdlib_test$81:	; parameter string_div_t28102C20329203D202825i2C2025i290A#, offset 6
289:		mov word [bp + 16], string_div_t28102C20329203D202825i2C2025i290A#
291:	

stdlib_test$82:	; parameter i$quot, offset 8
292:		mov a3143, [bp + 6]
293:		mov [bp + 18], a3143
295:	

stdlib_test$83:	; parameter i$rem, offset 10
296:		mov a3144, [bp + 8]
297:		mov [bp + 20], a3144
299:	

stdlib_test$84:	; call function noellipse-ellipse printf, extra 0
300:		mov word [bp + 10], stdlib_test$85
301:		mov [bp + 12], bp
302:		add bp, 10
303:		mov di, bp
304:		add di, 4
305:		jmp printf
307:	

stdlib_test$85:	; post call
309:	

stdlib_test$86:	; call header integral zero 0 stack zero 0
311:	

stdlib_test$87:	; parameter i, offset 6
312:		mov t3145, bp
313:		add t3145, 6
314:		mov t3146, bp
315:		add t3146, 16
316:		mov t3147, 4
317:	

stdlib_test$87$Loop:
318:		mov t3148, [t3145]
319:		mov [t3146], t3148
320:		inc t3145
321:		inc t3146
322:		dec t3147
323:		cmp t3147, 0
324:		jne stdlib_test$87$Loop
326:	

stdlib_test$88:	; call function noellipse-noellipse print_div
327:		mov word [bp + 10], stdlib_test$89
328:		mov [bp + 12], bp
329:		add bp, 10
330:		jmp print_div
332:	

stdlib_test$89:	; post call
334:	

stdlib_test$90:	; £temporary6033 -> £temporary6034 = return_value
336:	

stdlib_test$91:	; j = £temporary6033 -> £temporary6034
337:		mov t3150, bp
338:		add t3150, 10
339:		mov t3151, 4
340:	

stdlib_test$91$Loop:
341:		mov t3152, [t3149]
342:		mov [t3150], t3152
343:		inc t3149
344:		inc t3150
345:		dec t3151
346:		cmp t3151, 0
347:		jne stdlib_test$91$Loop
349:	

stdlib_test$92:	; call header integral zero 0 stack zero 0
351:	

stdlib_test$93:	; parameter string_div_t28102C20329203D202825i2C2025i290A0A#, offset 6
352:		mov word [bp + 20], string_div_t28102C20329203D202825i2C2025i290A0A#
354:	

stdlib_test$94:	; parameter j$quot, offset 8
355:		mov a3153, [bp + 10]
356:		mov [bp + 22], a3153
358:	

stdlib_test$95:	; parameter j$rem, offset 10
359:		mov a3154, [bp + 12]
360:		mov [bp + 24], a3154
362:	

stdlib_test$96:	; call function noellipse-ellipse printf, extra 0
363:		mov word [bp + 14], stdlib_test$97
364:		mov [bp + 16], bp
365:		add bp, 14
366:		mov di, bp
367:		add di, 4
368:		jmp printf
370:	

stdlib_test$97:	; post call
372:	

stdlib_test$98:	; call header integral zero 0 stack zero 0
374:	

stdlib_test$99:	; parameter 10, offset 6
375:		mov dword [bp + 12], 10
377:	

stdlib_test$100:	; parameter 3, offset 10
378:		mov dword [bp + 16], 3
380:	

stdlib_test$101:	; call function noellipse-noellipse ldiv
381:		mov word [bp + 6], stdlib_test$102
382:		mov [bp + 8], bp
383:		add bp, 6
384:		jmp ldiv
386:	

stdlib_test$102:	; post call
388:	

stdlib_test$103:	; £temporary6038 -> £temporary6039 = return_value
390:	

stdlib_test$104:	; li = £temporary6038 -> £temporary6039
391:		mov t3156, bp
392:		add t3156, 6
393:		mov t3157, 8
394:	

stdlib_test$104$Loop:
395:		mov t3158, [t3155]
396:		mov [t3156], t3158
397:		inc t3155
398:		inc t3156
399:		dec t3157
400:		cmp t3157, 0
401:		jne stdlib_test$104$Loop
403:	

stdlib_test$105:	; call header integral zero 0 stack zero 0
405:	

stdlib_test$106:	; parameter string_ldiv_t28102C20329203D202825li2C2025li290A#, offset 6
406:		mov word [bp + 20], string_ldiv_t28102C20329203D202825li2C2025li290A#
408:	

stdlib_test$107:	; parameter li$quot, offset 8
409:		mov a3159, [bp + 6]
410:		mov [bp + 22], a3159
412:	

stdlib_test$108:	; parameter li$rem, offset 12
413:		mov a3160, [bp + 10]
414:		mov [bp + 26], a3160
416:	

stdlib_test$109:	; call function noellipse-ellipse printf, extra 0
417:		mov word [bp + 14], stdlib_test$110
418:		mov [bp + 16], bp
419:		add bp, 14
420:		mov di, bp
421:		add di, 8
422:		jmp printf
424:	

stdlib_test$110:	; post call
426:	

stdlib_test$111:	; call header integral zero 0 stack zero 0
428:	

stdlib_test$112:	; parameter li, offset 6
429:		mov t3161, bp
430:		add t3161, 6
431:		mov t3162, bp
432:		add t3162, 20
433:		mov t3163, 8
434:	

stdlib_test$112$Loop:
435:		mov t3164, [t3161]
436:		mov [t3162], t3164
437:		inc t3161
438:		inc t3162
439:		dec t3163
440:		cmp t3163, 0
441:		jne stdlib_test$112$Loop
443:	

stdlib_test$113:	; call function noellipse-noellipse print_ldiv
444:		mov word [bp + 14], stdlib_test$114
445:		mov [bp + 16], bp
446:		add bp, 14
447:		jmp print_ldiv
449:	

stdlib_test$114:	; post call
451:	

stdlib_test$115:	; £temporary6043 -> £temporary6044 = return_value
453:	

stdlib_test$116:	; lj = £temporary6043 -> £temporary6044
454:		mov t3166, bp
455:		add t3166, 14
456:		mov t3167, 8
457:	

stdlib_test$116$Loop:
458:		mov t3168, [t3165]
459:		mov [t3166], t3168
460:		inc t3165
461:		inc t3166
462:		dec t3167
463:		cmp t3167, 0
464:		jne stdlib_test$116$Loop
466:	

stdlib_test$117:	; call header integral zero 0 stack zero 0
468:	

stdlib_test$118:	; parameter string_ldiv_t28102C20329203D202825li2C2025li290A0A#, offset 6
469:		mov word [bp + 28], string_ldiv_t28102C20329203D202825li2C2025li290A0A#
471:	

stdlib_test$119:	; parameter lj$quot, offset 8
472:		mov a3169, [bp + 14]
473:		mov [bp + 30], a3169
475:	

stdlib_test$120:	; parameter lj$rem, offset 12
476:		mov a3170, [bp + 18]
477:		mov [bp + 34], a3170
479:	

stdlib_test$121:	; call function noellipse-ellipse printf, extra 0
480:		mov word [bp + 22], stdlib_test$122
481:		mov [bp + 24], bp
482:		add bp, 22
483:		mov di, bp
484:		add di, 8
485:		jmp printf
487:	

stdlib_test$122:	; post call
489:	

stdlib_test$123:	; list[0] = 3
490:		mov word [bp + 6], 3
492:	

stdlib_test$124:	; list[1] = 4
493:		mov word [bp + 8], 4
495:	

stdlib_test$125:	; list[2] = 2
496:		mov word [bp + 10], 2
498:	

stdlib_test$126:	; list[3] = 1
499:		mov word [bp + 12], 1
501:	

stdlib_test$127:	; size = 4
502:		mov word [bp + 14], 4
504:	

stdlib_test$128:	; call header integral zero 0 stack zero 0
506:	

stdlib_test$129:	; parameter string_0AA20List2013A20#, offset 6
507:		mov word [bp + 24], string_0AA20List2013A20#
509:	

stdlib_test$130:	; call function noellipse-ellipse printf, extra 0
510:		mov word [bp + 18], stdlib_test$131
511:		mov [bp + 20], bp
512:		add bp, 18
513:		mov di, bp
514:		jmp printf
516:	

stdlib_test$131:	; post call
518:	

stdlib_test$132:	; index = 0
519:		mov word [bp + 16], 0
521:	

stdlib_test$133:	; if index >= size goto 144
522:		mov a3171, [bp + 14]
523:		cmp [bp + 16], a3171
524:		jge stdlib_test$144
526:	

stdlib_test$134:	; call header integral zero 0 stack zero 0
528:	

stdlib_test$135:	; parameter string_25i20#, offset 6
529:		mov word [bp + 24], string_25i20#
531:	

stdlib_test$136:	; £temporary6056 = index * 2
532:		mov a3172, [bp + 16]
534:		xor dx, dx
535:		mul word [int2$2#]
541:	

stdlib_test$137:	; £temporary6057 = list + £temporary6056
542:		mov a3176, bp
543:		add a3176, 6
544:		add a3176, t3175
546:	

stdlib_test$138:	; £temporary6058 -> £temporary6057 = *£temporary6057
548:	

stdlib_test$139:	; parameter £temporary6058 -> £temporary6057, offset 8
549:		mov t3177, [a3176]
550:		mov [bp + 26], t3177
552:	

stdlib_test$140:	; call function noellipse-ellipse printf, extra 0
553:		mov word [bp + 18], stdlib_test$141
554:		mov [bp + 20], bp
555:		add bp, 18
556:		mov di, bp
557:		add di, 2
558:		jmp printf
560:	

stdlib_test$141:	; post call
562:	

stdlib_test$142:	; ++index
563:		inc word [bp + 16]
565:	

stdlib_test$143:	; goto 133
566:		jmp stdlib_test$133
568:	

stdlib_test$144:	; call header integral zero 0 stack zero 0
570:	

stdlib_test$145:	; parameter string_0AB20List2023A20#, offset 6
571:		mov word [bp + 24], string_0AB20List2023A20#
573:	

stdlib_test$146:	; call function noellipse-ellipse printf, extra 0
574:		mov word [bp + 18], stdlib_test$147
575:		mov [bp + 20], bp
576:		add bp, 18
577:		mov di, bp
578:		jmp printf
580:	

stdlib_test$147:	; post call
582:	

stdlib_test$148:	; call header integral zero 0 stack zero 0
584:	

stdlib_test$149:	; parameter list, offset 6
585:		mov [bp + 24], bp
586:		add word [bp + 24], 6
588:	

stdlib_test$150:	; parameter size, offset 8
589:		mov a3178, [bp + 14]
590:		mov [bp + 26], a3178
592:	

stdlib_test$151:	; parameter 2, offset 10
593:		mov word [bp + 28], 2
595:	

stdlib_test$152:	; parameter compare, offset 12
596:		mov word [bp + 30], compare
598:	

stdlib_test$153:	; call function noellipse-ellipse qsort, extra 0
599:		mov word [bp + 18], stdlib_test$154
600:		mov [bp + 20], bp
601:		add bp, 18
602:		mov di, bp
603:		jmp qsort
605:	

stdlib_test$154:	; post call
607:	

stdlib_test$155:	; index = 0
608:		mov word [bp + 16], 0
610:	

stdlib_test$156:	; if index >= size goto 167
611:		mov a3179, [bp + 14]
612:		cmp [bp + 16], a3179
613:		jge stdlib_test$167
615:	

stdlib_test$157:	; call header integral zero 0 stack zero 0
617:	

stdlib_test$158:	; parameter string_25i20#, offset 6
618:		mov word [bp + 24], string_25i20#
620:	

stdlib_test$159:	; £temporary6065 = index * 2
621:		mov a3180, [bp + 16]
623:		xor dx, dx
624:		mul word [int2$2#]
630:	

stdlib_test$160:	; £temporary6066 = list + £temporary6065
631:		mov a3184, bp
632:		add a3184, 6
633:		add a3184, t3183
635:	

stdlib_test$161:	; £temporary6067 -> £temporary6066 = *£temporary6066
637:	

stdlib_test$162:	; parameter £temporary6067 -> £temporary6066, offset 8
638:		mov t3185, [a3184]
639:		mov [bp + 26], t3185
641:	

stdlib_test$163:	; call function noellipse-ellipse printf, extra 0
642:		mov word [bp + 18], stdlib_test$164
643:		mov [bp + 20], bp
644:		add bp, 18
645:		mov di, bp
646:		add di, 2
647:		jmp printf
649:	

stdlib_test$164:	; post call
651:	

stdlib_test$165:	; ++index
652:		inc word [bp + 16]
654:	

stdlib_test$166:	; goto 156
655:		jmp stdlib_test$156
657:	

stdlib_test$167:	; call header integral zero 0 stack zero 0
659:	

stdlib_test$168:	; parameter string_0AC20List2033A20#, offset 6
660:		mov word [bp + 24], string_0AC20List2033A20#
662:	

stdlib_test$169:	; call function noellipse-ellipse printf, extra 0
663:		mov word [bp + 18], stdlib_test$170
664:		mov [bp + 20], bp
665:		add bp, 18
666:		mov di, bp
667:		jmp printf
669:	

stdlib_test$170:	; post call
671:	

stdlib_test$171:	; call header integral zero 0 stack zero 0
673:	

stdlib_test$172:	; parameter list, offset 6
674:		mov [bp + 24], bp
675:		add word [bp + 24], 6
677:	

stdlib_test$173:	; parameter size, offset 8
678:		mov a3186, [bp + 14]
679:		mov [bp + 26], a3186
681:	

stdlib_test$174:	; parameter 2, offset 10
682:		mov word [bp + 28], 2
684:	

stdlib_test$175:	; parameter reverse_compare, offset 12
685:		mov word [bp + 30], reverse_compare
687:	

stdlib_test$176:	; call function noellipse-ellipse qsort, extra 0
688:		mov word [bp + 18], stdlib_test$177
689:		mov [bp + 20], bp
690:		add bp, 18
691:		mov di, bp
692:		jmp qsort
694:	

stdlib_test$177:	; post call
696:	

stdlib_test$178:	; index = 0
697:		mov word [bp + 16], 0
699:	

stdlib_test$179:	; if index >= size goto 190
700:		mov a3187, [bp + 14]
701:		cmp [bp + 16], a3187
702:		jge stdlib_test$190
704:	

stdlib_test$180:	; call header integral zero 0 stack zero 0
706:	

stdlib_test$181:	; parameter string_25i20#, offset 6
707:		mov word [bp + 24], string_25i20#
709:	

stdlib_test$182:	; £temporary6074 = index * 2
710:		mov a3188, [bp + 16]
712:		xor dx, dx
713:		mul word [int2$2#]
719:	

stdlib_test$183:	; £temporary6075 = list + £temporary6074
720:		mov a3192, bp
721:		add a3192, 6
722:		add a3192, t3191
724:	

stdlib_test$184:	; £temporary6076 -> £temporary6075 = *£temporary6075
726:	

stdlib_test$185:	; parameter £temporary6076 -> £temporary6075, offset 8
727:		mov t3193, [a3192]
728:		mov [bp + 26], t3193
730:	

stdlib_test$186:	; call function noellipse-ellipse printf, extra 0
731:		mov word [bp + 18], stdlib_test$187
732:		mov [bp + 20], bp
733:		add bp, 18
734:		mov di, bp
735:		add di, 2
736:		jmp printf
738:	

stdlib_test$187:	; post call
740:	

stdlib_test$188:	; ++index
741:		inc word [bp + 16]
743:	

stdlib_test$189:	; goto 179
744:		jmp stdlib_test$179
746:	

stdlib_test$190:	; call header integral zero 0 stack zero 0
748:	

stdlib_test$191:	; parameter string_0A0ASearch3A0A#, offset 6
749:		mov word [bp + 24], string_0A0ASearch3A0A#
751:	

stdlib_test$192:	; call function noellipse-ellipse printf, extra 0
752:		mov word [bp + 18], stdlib_test$193
753:		mov [bp + 20], bp
754:		add bp, 18
755:		mov di, bp
756:		jmp printf
758:	

stdlib_test$193:	; post call
760:	

stdlib_test$194:	; key = 0
761:		mov word [bp + 16], 0
763:	

stdlib_test$195:	; if key >= 6 goto 222
764:		cmp word [bp + 16], 6
765:		jge stdlib_test$222
767:	

stdlib_test$196:	; call header integral zero 0 stack zero 0
769:	

stdlib_test$197:	; £temporary6081 = &key
770:		mov t3194, bp
771:		add t3194, 16
773:	

stdlib_test$198:	; parameter £temporary6081, offset 6
774:		mov [bp + 24], t3194
776:	

stdlib_test$199:	; parameter list, offset 8
777:		mov [bp + 26], bp
778:		add word [bp + 26], 6
780:	

stdlib_test$200:	; parameter size, offset 10
781:		mov a3195, [bp + 14]
782:		mov [bp + 28], a3195
784:	

stdlib_test$201:	; parameter 2, offset 12
785:		mov word [bp + 30], 2
787:	

stdlib_test$202:	; parameter compare, offset 14
788:		mov word [bp + 32], compare
790:	

stdlib_test$203:	; call function noellipse-noellipse bsearch
791:		mov word [bp + 18], stdlib_test$204
792:		mov [bp + 20], bp
793:		add bp, 18
794:		jmp bsearch
796:	

stdlib_test$204:	; post call
798:	

stdlib_test$205:	; £temporary6083 = return_value
803:	

stdlib_test$206:	; £temporary6084 = int_to_int £temporary6083 (Pointer -> Pointer)
806:	

stdlib_test$207:	; p = £temporary6084
807:		mov [bp + 18], t3197
809:	

stdlib_test$208:	; if p == 0 goto 212
810:		cmp word [bp + 18], 0
811:		je stdlib_test$212
813:	

stdlib_test$209:	; £temporary6086 = p - list
814:		mov a3198, [bp + 18]
815:		mov a3199, bp
816:		add a3199, 6
817:		sub a3198, a3199
819:	

stdlib_test$210:	; £temporary6091 = £temporary6086 / 2
821:		xor dx, dx
822:		div word [int2$2#]
828:	

stdlib_test$211:	; goto 213
829:		jmp stdlib_test$213
831:	

stdlib_test$212:	; £temporary6091 = -1
832:		mov t3203, -1
834:	

stdlib_test$213:	; index = £temporary6091
835:		mov [bp + 20], t3203
837:	

stdlib_test$214:	; call header integral zero 0 stack zero 0
839:	

stdlib_test$215:	; parameter string_20202825i2C2025i290A#, offset 6
840:		mov word [bp + 28], string_20202825i2C2025i290A#
842:	

stdlib_test$216:	; parameter key, offset 8
843:		mov a3204, [bp + 16]
844:		mov [bp + 30], a3204
846:	

stdlib_test$217:	; parameter index, offset 10
847:		mov a3205, [bp + 20]
848:		mov [bp + 32], a3205
850:	

stdlib_test$218:	; call function noellipse-ellipse printf, extra 0
851:		mov word [bp + 22], stdlib_test$219
852:		mov [bp + 24], bp
853:		add bp, 22
854:		mov di, bp
855:		add di, 4
856:		jmp printf
858:	

stdlib_test$219:	; post call
860:	

stdlib_test$220:	; ++key
861:		inc word [bp + 16]
863:	

stdlib_test$221:	; goto 195
864:		jmp stdlib_test$195
866:	

stdlib_test$222:	; call header integral zero 0 stack zero 0
868:	

stdlib_test$223:	; parameter string_0A#, offset 6
869:		mov word [bp + 24], string_0A#
871:	

stdlib_test$224:	; call function noellipse-ellipse printf, extra 0
872:		mov word [bp + 18], stdlib_test$225
873:		mov [bp + 20], bp
874:		add bp, 18
875:		mov di, bp
876:		jmp printf
878:	

stdlib_test$225:	; post call
880:	

stdlib_test$226:	; return
881:		mov t3206, [bp]
882:		mov di, [bp + 4]
883:		mov bp, [bp + 2]
884:		jmp t3206
886:	

stdlib_test$227:	; function end stdlib_test
