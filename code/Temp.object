1:	

@23$existsTempName:	; index = 0
2:		mov word [bp + 8], 0
4:	

@23$existsTempName$1:	; if index >= g_tempSize goto 16
5:		mov ax, [@22$g_tempSize]
6:		cmp [bp + 8], ax
7:		jge @23$existsTempName$16
9:	

@23$existsTempName$2:	; call header integral zero 0 stack zero 0
11:	

@23$existsTempName$3:	; parameter name, offset 6
12:		mov ax, [bp + 6]
13:		mov [bp + 16], ax
15:	

@23$existsTempName$4:	; £temporary1180 = index * 2
16:		mov ax, [bp + 8]
18:		xor dx, dx
19:		mul word [int2$2#]
25:	

@23$existsTempName$5:	; £temporary1181 = g_tempArray + £temporary1180
26:		mov si, @21$g_tempArray
27:		add si, ax
29:	

@23$existsTempName$6:	; £temporary1179 -> £temporary1181 = *£temporary1181
31:	

@23$existsTempName$7:	; parameter £temporary1179 -> £temporary1181, offset 8
32:		mov ax, [si]
33:		mov [bp + 18], ax
35:	

@23$existsTempName$8:	; call function noellipse-noellipse strcmp
36:		mov word [bp + 10], @23$existsTempName$9
37:		mov [bp + 12], bp
38:		add bp, 10
39:		jmp strcmp
41:	

@23$existsTempName$9:	; post call
43:	

@23$existsTempName$10:	; £temporary1182 = return_value
48:	

@23$existsTempName$11:	; if £temporary1182 != 0 goto 14
49:		cmp bx, 0
50:		jne @23$existsTempName$14
52:	

@23$existsTempName$12:	; return_value = 1
53:		mov bx, 1
55:	

@23$existsTempName$13:	; return
56:		mov ax, [bp]
57:		mov di, [bp + 4]
58:		mov bp, [bp + 2]
59:		jmp ax
61:	

@23$existsTempName$14:	; ++index
62:		inc word [bp + 8]
64:	

@23$existsTempName$15:	; goto 1
65:		jmp @23$existsTempName$1
67:	

@23$existsTempName$16:	; return_value = 0
68:		mov bx, 0
70:	

@23$existsTempName$17:	; return
71:		mov ax, [bp]
72:		mov di, [bp + 4]
73:		mov bp, [bp + 2]
74:		jmp ax
76:	

@23$existsTempName$18:	; function end existsTempName
1:	

@24$generateTempName:	; if size >= 3 goto 57
2:		cmp word [bp + 8], 3
3:		jge @24$generateTempName$57
5:	

@24$generateTempName$1:	; c = 97
6:		mov byte [bp + 12], 97
8:	

@24$generateTempName$2:	; if c > 122 goto 57
9:		cmp byte [bp + 12], 122
10:		jg @24$generateTempName$57
12:	

@24$generateTempName$3:	; £temporary1190 = name + size
13:		mov si, [bp + 6]
14:		add si, [bp + 8]
16:	

@24$generateTempName$4:	; £temporary1189 -> £temporary1190 = *£temporary1190
18:	

@24$generateTempName$5:	; £temporary1189 -> £temporary1190 = c
19:		mov al, [bp + 12]
20:		mov [si], al
22:	

@24$generateTempName$6:	; £temporary1191 = size + 1
23:		mov ax, [bp + 8]
24:		add ax, 1
26:	

@24$generateTempName$7:	; £temporary1193 = name + £temporary1191
27:		mov si, [bp + 6]
28:		add si, ax
30:	

@24$generateTempName$8:	; £temporary1192 -> £temporary1193 = *£temporary1193
32:	

@24$generateTempName$9:	; £temporary1192 -> £temporary1193 = 0
33:		mov byte [si], 0
35:	

@24$generateTempName$10:	; call header integral zero 0 stack zero 0
37:	

@24$generateTempName$11:	; parameter name, offset 6
38:		mov ax, [bp + 6]
39:		mov [bp + 19], ax
41:	

@24$generateTempName$12:	; call function noellipse-noellipse fileexists
42:		mov word [bp + 13], @24$generateTempName$13
43:		mov [bp + 15], bp
44:		add bp, 13
45:		jmp fileexists
47:	

@24$generateTempName$13:	; post call
49:	

@24$generateTempName$14:	; £temporary1194 = return_value
54:	

@24$generateTempName$15:	; if £temporary1194 != 0 goto 43
55:		cmp bx, 0
56:		jne @24$generateTempName$43
58:	

@24$generateTempName$16:	; case status == 0 goto 20
59:		mov ax, [bp + 10]
60:		cmp ax, 0
61:		je @24$generateTempName$20
63:	

@24$generateTempName$17:	; case status == 1 goto 22
64:		cmp ax, 1
65:		je @24$generateTempName$22
67:	

@24$generateTempName$18:	; case end status
69:	

@24$generateTempName$19:	; goto 43
70:		jmp @24$generateTempName$43
72:	

@24$generateTempName$20:	; return_value = name
73:		mov bx, [bp + 6]
75:	

@24$generateTempName$21:	; return
76:		mov ax, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp ax
81:	

@24$generateTempName$22:	; call header integral zero 0 stack zero 0
83:	

@24$generateTempName$23:	; parameter name, offset 6
84:		mov ax, [bp + 6]
85:		mov [bp + 19], ax
87:	

@24$generateTempName$24:	; call function noellipse-noellipse existsTempName
88:		mov word [bp + 13], @24$generateTempName$25
89:		mov [bp + 15], bp
90:		add bp, 13
91:		jmp @23$existsTempName
93:	

@24$generateTempName$25:	; post call
95:	

@24$generateTempName$26:	; £temporary1197 = return_value
100:	

@24$generateTempName$27:	; if £temporary1197 != 0 goto 43
101:		cmp bx, 0
102:		jne @24$generateTempName$43
104:	

@24$generateTempName$28:	; call header integral zero 0 stack zero 0
106:	

@24$generateTempName$29:	; £temporary1201 = g_tempSize * 2
107:		mov ax, [@22$g_tempSize]
109:		xor dx, dx
110:		mul word [int2$2#]
116:	

@24$generateTempName$30:	; £temporary1202 = g_tempArray + £temporary1201
117:		mov si, @21$g_tempArray
118:		add si, ax
120:	

@24$generateTempName$31:	; £temporary1200 -> £temporary1202 = *£temporary1202
122:	

@24$generateTempName$32:	; parameter £temporary1200 -> £temporary1202, offset 6
123:		mov ax, [si]
124:		mov [bp + 19], ax
126:	

@24$generateTempName$33:	; parameter name, offset 8
127:		mov ax, [bp + 6]
128:		mov [bp + 21], ax
130:	

@24$generateTempName$34:	; call function noellipse-noellipse strcpy
131:		mov word [bp + 13], @24$generateTempName$35
132:		mov [bp + 15], bp
133:		add bp, 13
134:		jmp strcpy
136:	

@24$generateTempName$35:	; post call
138:	

@24$generateTempName$36:	; £temporary1204 = g_tempSize
139:		mov ax, [@22$g_tempSize]
141:	

@24$generateTempName$37:	; ++g_tempSize
142:		inc word [@22$g_tempSize]
144:	

@24$generateTempName$38:	; £temporary1206 = £temporary1204 * 2
146:		xor dx, dx
147:		mul word [int2$2#]
153:	

@24$generateTempName$39:	; £temporary1207 = g_tempArray + £temporary1206
154:		mov si, @21$g_tempArray
155:		add si, ax
157:	

@24$generateTempName$40:	; £temporary1205 -> £temporary1207 = *£temporary1207
159:	

@24$generateTempName$41:	; return_value = £temporary1205 -> £temporary1207
160:		mov bx, [si]
162:	

@24$generateTempName$42:	; return
163:		mov ax, [bp]
164:		mov di, [bp + 4]
165:		mov bp, [bp + 2]
166:		jmp ax
168:	

@24$generateTempName$43:	; call header integral zero 0 stack zero 0
170:	

@24$generateTempName$44:	; parameter name, offset 6
171:		mov ax, [bp + 6]
172:		mov [bp + 19], ax
174:	

@24$generateTempName$45:	; £temporary1208 = size + 1
175:		mov ax, [bp + 8]
176:		add ax, 1
178:	

@24$generateTempName$46:	; parameter £temporary1208, offset 8
179:		mov [bp + 21], ax
181:	

@24$generateTempName$47:	; parameter status, offset 10
182:		mov ax, [bp + 10]
183:		mov [bp + 23], ax
185:	

@24$generateTempName$48:	; call function noellipse-noellipse generateTempName
186:		mov word [bp + 13], @24$generateTempName$49
187:		mov [bp + 15], bp
188:		add bp, 13
189:		jmp @24$generateTempName
191:	

@24$generateTempName$49:	; post call
193:	

@24$generateTempName$50:	; £temporary1209 = return_value
198:	

@24$generateTempName$51:	; result = £temporary1209
199:		mov [bp + 13], bx
201:	

@24$generateTempName$52:	; if result == 0 goto 55
202:		cmp word [bp + 13], 0
203:		je @24$generateTempName$55
205:	

@24$generateTempName$53:	; return_value = result
206:		mov bx, [bp + 13]
208:	

@24$generateTempName$54:	; return
209:		mov ax, [bp]
210:		mov di, [bp + 4]
211:		mov bp, [bp + 2]
212:		jmp ax
214:	

@24$generateTempName$55:	; ++c
215:		inc byte [bp + 12]
217:	

@24$generateTempName$56:	; goto 2
218:		jmp @24$generateTempName$2
220:	

@24$generateTempName$57:	; return_value = 0
221:		mov bx, 0
223:	

@24$generateTempName$58:	; return
224:		mov ax, [bp]
225:		mov di, [bp + 4]
226:		mov bp, [bp + 2]
227:		jmp ax
229:	

@24$generateTempName$59:	; function end generateTempName
1:	

tmpfile:	; call header integral zero 0 stack zero 0
3:	

tmpfile$1:	; parameter name, offset 6
4:		mov [bp + 18], bp
5:		add word [bp + 18], 8
7:	

tmpfile$2:	; parameter 0, offset 8
8:		mov word [bp + 20], 0
10:	

tmpfile$3:	; parameter 0, offset 10
11:		mov word [bp + 22], 0
13:	

tmpfile$4:	; call function noellipse-noellipse generateTempName
14:		mov word [bp + 12], tmpfile$5
15:		mov [bp + 14], bp
16:		add bp, 12
17:		jmp @24$generateTempName
19:	

tmpfile$5:	; post call
21:	

tmpfile$6:	; £temporary1218 = return_value
26:	

tmpfile$7:	; if £temporary1218 == 0 goto 20
27:		cmp bx, 0
28:		je tmpfile$20
30:	

tmpfile$8:	; call header integral zero 0 stack zero 0
32:	

tmpfile$9:	; parameter name, offset 6
33:		mov [bp + 18], bp
34:		add word [bp + 18], 8
36:	

tmpfile$10:	; parameter string_w#, offset 8
37:		mov word [bp + 20], string_w#
39:	

tmpfile$11:	; call function noellipse-noellipse fopen
40:		mov word [bp + 12], tmpfile$12
41:		mov [bp + 14], bp
42:		add bp, 12
43:		jmp fopen
45:	

tmpfile$12:	; post call
47:	

tmpfile$13:	; £temporary1219 = return_value
52:	

tmpfile$14:	; stream = £temporary1219
53:		mov [bp + 6], bx
55:	

tmpfile$15:	; if stream == 0 goto 20
56:		cmp word [bp + 6], 0
57:		je tmpfile$20
59:	

tmpfile$16:	; £temporary1223 -> stream = *stream, offset 27
60:		mov si, [bp + 6]
62:	

tmpfile$17:	; £temporary1223 -> stream = 1
63:		mov word [si + 27], 1
65:	

tmpfile$18:	; return_value = stream
66:		mov bx, [bp + 6]
68:	

tmpfile$19:	; return
69:		mov ax, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp ax
74:	

tmpfile$20:	; return_value = 0
75:		mov bx, 0
77:	

tmpfile$21:	; return
78:		mov ax, [bp]
79:		mov di, [bp + 4]
80:		mov bp, [bp + 2]
81:		jmp ax
83:	

tmpfile$22:	; function end tmpfile
1:	

tmpnam:	; if g_tempSize >= 16 goto 10
2:		cmp word [@22$g_tempSize], 16
3:		jge tmpnam$10
5:	

tmpnam$1:	; call header integral zero 0 stack zero 0
7:	

tmpnam$2:	; parameter name, offset 6
8:		mov ax, [bp + 6]
9:		mov [bp + 14], ax
11:	

tmpnam$3:	; parameter 0, offset 8
12:		mov word [bp + 16], 0
14:	

tmpnam$4:	; parameter 1, offset 10
15:		mov word [bp + 18], 1
17:	

tmpnam$5:	; call function noellipse-noellipse generateTempName
18:		mov word [bp + 8], tmpnam$6
19:		mov [bp + 10], bp
20:		add bp, 8
21:		jmp @24$generateTempName
23:	

tmpnam$6:	; post call
25:	

tmpnam$7:	; £temporary1230 = return_value
30:	

tmpnam$8:	; return_value = £temporary1230
32:	

tmpnam$9:	; return
33:		mov ax, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp ax
38:	

tmpnam$10:	; return_value = 0
39:		mov bx, 0
41:	

tmpnam$11:	; return
42:		mov ax, [bp]
43:		mov di, [bp + 4]
44:		mov bp, [bp + 2]
45:		jmp ax
47:	

tmpnam$12:	; function end tmpnam
