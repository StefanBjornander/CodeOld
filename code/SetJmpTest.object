0:		; Initialize Stack Pointer
1:		mov bp, $StackTop
2:		; Initialize Heap Pointer
3:		mov word [65534], 65534
4:		; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
5:		fstcw [bp]
6:		or word [bp], 3072
7:		fldcw [bp]
8:		mov word [$StackTop], 0
10:	

@9734$main:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
12:	

@9734$main$1:	; Parameter 16 string_Please20input20a20value3A20# 6
13:		mov word [bp + 22], @9737$string_Please20input20a20value3A20#
15:	

@9734$main$2:	; Call 16 printf 0
16:		mov word [bp + 16], @9734$main$3
17:		mov [bp + 18], bp
18:		add bp, 16
19:		mov di, bp
20:		jmp printf
22:	

@9734$main$3:	; PostCall 16
24:	

@9734$main$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
26:	

@9734$main$5:	; Parameter 16 string_25lf# 6
27:		mov word [bp + 22], @9739$string_25lf#
29:	

@9734$main$6:	; address £temporary4455 x
30:		mov si, bp
31:		add si, 8
33:	

@9734$main$7:	; Parameter 16 £temporary4455 8
34:		mov [bp + 24], si
36:	

@9734$main$8:	; Call 16 scanf 0
37:		mov word [bp + 16], @9734$main$9
38:		mov [bp + 18], bp
39:		add bp, 16
40:		mov di, bp
41:		add di, 2
42:		jmp scanf
44:	

@9734$main$9:	; PostCall 16
46:	

@9734$main$10:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
48:	

@9734$main$11:	; Parameter 16 buffer 6
49:		mov word [bp + 22], buffer
51:	

@9734$main$12:	; Call 16 setjmp 0
52:		mov word [bp + 16], @9734$main$13
53:		mov [bp + 18], bp
54:		add bp, 16
55:		jmp setjmp
57:	

@9734$main$13:	; PostCall 16
59:	

@9734$main$14:	; GetReturnValue £temporary4457
64:	

@9734$main$15:	; Assign message £temporary4457
65:		mov [bp + 6], bx
67:	

@9734$main$16:	; NotEqual 31 message 0
68:		cmp word [bp + 6], 0
69:		jne @9734$main$31
71:	

@9734$main$17:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
73:	

@9734$main$18:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
74:		mov word [bp + 22], @9746$string_12E0202F2025f203D2025f0A#
76:	

@9734$main$19:	; PushFloat x
77:		fld qword [bp + 8]
79:	

@9734$main$20:	; Parameter 16 x 8
80:		fstp qword [bp + 24]
82:	

@9734$main$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
84:	

@9734$main$22:	; PushFloat x
85:		fld qword [bp + 8]
87:	

@9734$main$23:	; Parameter 16 x 22
88:		fstp qword [bp + 38]
90:	

@9734$main$24:	; Call 16 inverse 16
91:		mov word [bp + 32], @9734$main$25
92:		mov [bp + 34], bp
93:		add bp, 32
94:		jmp inverse
96:	

@9734$main$25:	; PostCall 16
98:	

@9734$main$26:	; GetReturnValue £temporary4459
100:	

@9734$main$27:	; Parameter 16 £temporary4459 16
101:		fstp qword [bp + 32]
103:	

@9734$main$28:	; Call 16 printf 0
104:		mov word [bp + 16], @9734$main$29
105:		mov [bp + 18], bp
106:		add bp, 16
107:		mov di, bp
108:		add di, 16
109:		jmp printf
111:	

@9734$main$29:	; PostCall 16
113:	

@9734$main$30:	; Goto 36
114:		jmp @9734$main$36
116:	

@9734$main$31:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
118:	

@9734$main$32:	; Parameter 16 string_25s0A# 6
119:		mov word [bp + 22], @9749$string_25s0A#
121:	

@9734$main$33:	; Parameter 16 message 8
122:		mov ax, [bp + 6]
123:		mov [bp + 24], ax
125:	

@9734$main$34:	; Call 16 printf 0
126:		mov word [bp + 16], @9734$main$35
127:		mov [bp + 18], bp
128:		add bp, 16
129:		mov di, bp
130:		add di, 2
131:		jmp printf
133:	

@9734$main$35:	; PostCall 16
135:	

@9734$main$36:	; Return 0
136:		mov ax, [bp]
137:		mov di, [bp + 4]
138:		mov bp, [bp + 2]
139:		jmp ax
141:	

@9734$main$37:	; FunctionEnd main
1:	

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

inverse$1:	; PushOne
4:		fld1
6:	

inverse$2:	; Parameter 14 1 6
7:		fstp qword [bp + 20]
9:	

inverse$3:	; PushFloat x
10:		fld qword [bp + 6]
12:	

inverse$4:	; Parameter 14 x 14
13:		fstp qword [bp + 28]
15:	

inverse$5:	; Call 14 divide 0
16:		mov word [bp + 14], inverse$6
17:		mov [bp + 16], bp
18:		add bp, 14
19:		jmp divide
21:	

inverse$6:	; PostCall 14
23:	

inverse$7:	; GetReturnValue £temporary4473
25:	

inverse$8:	; SetReturnValue £temporary4473
27:	

inverse$9:	; Return £temporary4473
28:		mov ax, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp ax
33:	

inverse$10:	; FunctionEnd inverse
1:	

divide:	; PushFloat y
2:		fld qword [bp + 14]
4:	

divide$1:	; PushZero
5:		fldz
7:	

divide$2:	; Equal 8 y 0
8:		fcompp
9:		fstsw ax
10:		sahf
11:		je divide$8
13:	

divide$3:	; PushFloat x
14:		fld qword [bp + 6]
16:	

divide$4:	; PushFloat y
17:		fld qword [bp + 14]
19:	

divide$5:	; SignedDivide £temporary4477 x y
20:		fdiv
22:	

divide$6:	; SetReturnValue £temporary4477
24:	

divide$7:	; Return £temporary4477
25:		mov ax, [bp]
26:		mov di, [bp + 4]
27:		mov bp, [bp + 2]
28:		jmp ax
30:	

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
32:	

divide$9:	; Parameter 22 buffer 6
33:		mov word [bp + 28], buffer
35:	

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
36:		mov word [bp + 30], @9773$string_Division20by20Zero2E#
38:	

divide$11:	; Call 22 longjmp 0
39:		mov word [bp + 22], divide$12
40:		mov [bp + 24], bp
41:		add bp, 22
42:		jmp longjmp
44:	

divide$12:	; PostCall 22
46:	

divide$13:	; PushZero
47:		fldz
49:	

divide$14:	; SetReturnValue 0
51:	

divide$15:	; Return 0
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

divide$16:	; FunctionEnd divide
1:	

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

test$1:	; Parameter 16 buffer 6
4:		mov word [bp + 22], buffer
6:	

test$2:	; Call 16 setjmp 0
7:		mov word [bp + 16], test$3
8:		mov [bp + 18], bp
9:		add bp, 16
10:		jmp setjmp
12:	

test$3:	; PostCall 16
14:	

test$4:	; GetReturnValue £temporary4481
19:	

test$5:	; Assign message £temporary4481
20:		mov [bp + 14], bx
22:	

test$6:	; NotEqual 21 message 0
23:		cmp word [bp + 14], 0
24:		jne test$21
26:	

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
28:	

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
29:		mov word [bp + 22], @9785$string_12E0202F2025f203D2025f0A#
31:	

test$9:	; PushFloat x
32:		fld qword [bp + 6]
34:	

test$10:	; Parameter 16 x 8
35:		fstp qword [bp + 24]
37:	

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
39:	

test$12:	; PushFloat x
40:		fld qword [bp + 6]
42:	

test$13:	; Parameter 16 x 22
43:		fstp qword [bp + 38]
45:	

test$14:	; Call 16 inverse 16
46:		mov word [bp + 32], test$15
47:		mov [bp + 34], bp
48:		add bp, 32
49:		jmp inverse
51:	

test$15:	; PostCall 16
53:	

test$16:	; GetReturnValue £temporary4483
55:	

test$17:	; Parameter 16 £temporary4483 16
56:		fstp qword [bp + 32]
58:	

test$18:	; Call 16 printf 0
59:		mov word [bp + 16], test$19
60:		mov [bp + 18], bp
61:		add bp, 16
62:		mov di, bp
63:		add di, 16
64:		jmp printf
66:	

test$19:	; PostCall 16
68:	

test$20:	; Goto 26
69:		jmp test$26
71:	

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
73:	

test$22:	; Parameter 16 string_25s0A# 6
74:		mov word [bp + 22], @9788$string_25s0A#
76:	

test$23:	; Parameter 16 message 8
77:		mov ax, [bp + 14]
78:		mov [bp + 24], ax
80:	

test$24:	; Call 16 printf 0
81:		mov word [bp + 16], test$25
82:		mov [bp + 18], bp
83:		add bp, 16
84:		mov di, bp
85:		add di, 2
86:		jmp printf
88:	

test$25:	; PostCall 16
90:	

test$26:	; Return 0
91:		mov ax, [bp]
92:		mov di, [bp + 4]
93:		mov bp, [bp + 2]
94:		jmp ax
96:	

test$27:	; FunctionEnd test
1:	

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

setjmp_test$1:	; PushFloat 10
4:		fld qword [@9799$float8$10#]
6:	

setjmp_test$2:	; Parameter 6 10 6
7:		fstp qword [bp + 12]
9:	

setjmp_test$3:	; Call 6 test 0
10:		mov word [bp + 6], setjmp_test$4
11:		mov [bp + 8], bp
12:		add bp, 6
13:		jmp test
15:	

setjmp_test$4:	; PostCall 6
17:	

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
19:	

setjmp_test$6:	; PushZero
20:		fldz
22:	

setjmp_test$7:	; Parameter 6 0 6
23:		fstp qword [bp + 12]
25:	

setjmp_test$8:	; Call 6 test 0
26:		mov word [bp + 6], setjmp_test$9
27:		mov [bp + 8], bp
28:		add bp, 6
29:		jmp test
31:	

setjmp_test$9:	; PostCall 6
33:	

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
35:	

setjmp_test$11:	; PushFloat 0.1
36:		fld qword [@9804$float8$0.1#]
38:	

setjmp_test$12:	; Parameter 6 0.1 6
39:		fstp qword [bp + 12]
41:	

setjmp_test$13:	; Call 6 test 0
42:		mov word [bp + 6], setjmp_test$14
43:		mov [bp + 8], bp
44:		add bp, 6
45:		jmp test
47:	

setjmp_test$14:	; PostCall 6
49:	

setjmp_test$15:	; Return 0
50:		mov ax, [bp]
51:		mov di, [bp + 4]
52:		mov bp, [bp + 2]
53:		jmp ax
55:	

setjmp_test$16:	; FunctionEnd setjmp_test
