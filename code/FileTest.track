1:	

file_test:	; call header integral zero 0 stack zero 0
3:	

file_test$1:	; parameter inFilePtrName, offset 6
4:		mov a2654, [bp + 6]
5:		mov [bp + 16], a2654
7:	

file_test$2:	; parameter string_r#, offset 8
8:		mov word [bp + 18], string_r#
10:	

file_test$3:	; call function noellipse-noellipse fopen
11:		mov word [bp + 10], file_test$4
12:		mov [bp + 12], bp
13:		add bp, 10
14:		jmp fopen
16:	

file_test$4:	; post call
18:	

file_test$5:	; £temporary4407 = return_value
23:	

file_test$6:	; inFilePtrPtr = £temporary4407
24:		mov [bp + 10], t2656
26:	

file_test$7:	; if inFilePtrPtr != 0 goto 19
27:		cmp word [bp + 10], 0
28:		jne file_test$19
30:	

file_test$8:	; call header integral zero 0 stack zero 0
32:	

file_test$9:	; parameter stderr, offset 6
33:		mov a2657, [stderr]
34:		mov [bp + 18], a2657
36:	

file_test$10:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
37:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
39:	

file_test$11:	; parameter string_inFilePtrPtr20213D20NULL#, offset 10
40:		mov word [bp + 22], string_inFilePtrPtr20213D20NULL#
42:	

file_test$12:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
43:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
45:	

file_test$13:	; parameter 10, offset 14
46:		mov word [bp + 26], 10
48:	

file_test$14:	; call function noellipse-ellipse fprintf, extra 0
49:		mov word [bp + 12], file_test$15
50:		mov [bp + 14], bp
51:		add bp, 12
52:		mov di, bp
53:		add di, 6
54:		jmp fprintf
56:	

file_test$15:	; post call
58:	

file_test$16:	; call header integral zero 0 stack zero 0
60:	

file_test$17:	; call function noellipse-noellipse abort
61:		mov word [bp + 12], file_test$18
62:		mov [bp + 14], bp
63:		add bp, 12
64:		jmp abort
66:	

file_test$18:	; post call
68:	

file_test$19:	; call header integral zero 0 stack zero 0
70:	

file_test$20:	; parameter outFilePtrName, offset 6
71:		mov a2658, [bp + 8]
72:		mov [bp + 18], a2658
74:	

file_test$21:	; parameter string_w#, offset 8
75:		mov word [bp + 20], string_w#
77:	

file_test$22:	; call function noellipse-noellipse fopen
78:		mov word [bp + 12], file_test$23
79:		mov [bp + 14], bp
80:		add bp, 12
81:		jmp fopen
83:	

file_test$23:	; post call
85:	

file_test$24:	; £temporary4412 = return_value
90:	

file_test$25:	; outFilePtrPtr = £temporary4412
91:		mov [bp + 12], t2660
93:	

file_test$26:	; if outFilePtrPtr != 0 goto 38
94:		cmp word [bp + 12], 0
95:		jne file_test$38
97:	

file_test$27:	; call header integral zero 0 stack zero 0
99:	

file_test$28:	; parameter stderr, offset 6
100:		mov a2661, [stderr]
101:		mov [bp + 20], a2661
103:	

file_test$29:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
104:		mov word [bp + 22], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
106:	

file_test$30:	; parameter string_outFilePtrPtr20213D20NULL#, offset 10
107:		mov word [bp + 24], string_outFilePtrPtr20213D20NULL#
109:	

file_test$31:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
110:		mov word [bp + 26], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
112:	

file_test$32:	; parameter 12, offset 14
113:		mov word [bp + 28], 12
115:	

file_test$33:	; call function noellipse-ellipse fprintf, extra 0
116:		mov word [bp + 14], file_test$34
117:		mov [bp + 16], bp
118:		add bp, 14
119:		mov di, bp
120:		add di, 6
121:		jmp fprintf
123:	

file_test$34:	; post call
125:	

file_test$35:	; call header integral zero 0 stack zero 0
127:	

file_test$36:	; call function noellipse-noellipse abort
128:		mov word [bp + 14], file_test$37
129:		mov [bp + 16], bp
130:		add bp, 14
131:		jmp abort
133:	

file_test$37:	; post call
135:	

file_test$38:	; size = 0
136:		mov word [bp + 14], 0
138:	

file_test$39:	; call header integral zero 0 stack zero 0
140:	

file_test$40:	; parameter inFilePtrPtr, offset 6
141:		mov a2662, [bp + 10]
142:		mov [bp + 24], a2662
144:	

file_test$41:	; parameter string_25i#, offset 8
145:		mov word [bp + 26], string_25i#
147:	

file_test$42:	; £temporary4417 = &size
148:		mov t2663, bp
149:		add t2663, 14
151:	

file_test$43:	; parameter £temporary4417, offset 10
152:		mov [bp + 28], t2663
154:	

file_test$44:	; call function noellipse-ellipse fscanf, extra 0
155:		mov word [bp + 18], file_test$45
156:		mov [bp + 20], bp
157:		add bp, 18
158:		mov di, bp
159:		add di, 2
160:		jmp fscanf
162:	

file_test$45:	; post call
164:	

file_test$46:	; index = 0
165:		mov word [bp + 16], 0
167:	

file_test$47:	; if index >= size goto 73
168:		mov a2664, [bp + 14]
169:		cmp [bp + 16], a2664
170:		jge file_test$73
172:	

file_test$48:	; push 0
173:		fldz
175:	

file_test$49:	; pop float inValue
176:		fstp qword [bp + 18]
178:	

file_test$50:	; call header integral zero 0 stack zero 0
180:	

file_test$51:	; parameter inFilePtrPtr, offset 6
181:		mov a2665, [bp + 10]
182:		mov [bp + 32], a2665
184:	

file_test$52:	; parameter string_25lf#, offset 8
185:		mov word [bp + 34], string_25lf#
187:	

file_test$53:	; £temporary4421 = &inValue
188:		mov t2666, bp
189:		add t2666, 18
191:	

file_test$54:	; parameter £temporary4421, offset 10
192:		mov [bp + 36], t2666
194:	

file_test$55:	; call function noellipse-ellipse fscanf, extra 0
195:		mov word [bp + 26], file_test$56
196:		mov [bp + 28], bp
197:		add bp, 26
198:		mov di, bp
199:		add di, 2
200:		jmp fscanf
202:	

file_test$56:	; post call
204:	

file_test$57:	; call header integral zero 0 stack zero 0
206:	

file_test$58:	; push float inValue
207:		fld qword [bp + 18]
209:	

file_test$59:	; parameter £temporary4423, offset 6
210:		fstp qword [bp + 32]
212:	

file_test$60:	; call function noellipse-noellipse sqrt
213:		mov word [bp + 26], file_test$61
214:		mov [bp + 28], bp
215:		add bp, 26
216:		jmp sqrt
218:	

file_test$61:	; post call
220:	

file_test$62:	; £temporary4424 = return_value
222:	

file_test$63:	; pop float outValue
223:		fstp qword [bp + 26]
225:	

file_test$64:	; call header integral zero 0 stack zero 0
227:	

file_test$65:	; parameter outFilePtrPtr, offset 6
228:		mov a2667, [bp + 12]
229:		mov [bp + 40], a2667
231:	

file_test$66:	; parameter string_25f0A#, offset 8
232:		mov word [bp + 42], string_25f0A#
234:	

file_test$67:	; push float outValue
235:		fld qword [bp + 26]
237:	

file_test$68:	; parameter outValue, offset 10
238:		fstp qword [bp + 44]
240:	

file_test$69:	; call function noellipse-ellipse fprintf, extra 0
241:		mov word [bp + 34], file_test$70
242:		mov [bp + 36], bp
243:		add bp, 34
244:		mov di, bp
245:		add di, 8
246:		jmp fprintf
248:	

file_test$70:	; post call
250:	

file_test$71:	; ++index
251:		inc word [bp + 16]
253:	

file_test$72:	; goto 47
254:		jmp file_test$47
256:	

file_test$73:	; call header integral zero 0 stack zero 0
258:	

file_test$74:	; parameter inFilePtrPtr, offset 6
259:		mov a2668, [bp + 10]
260:		mov [bp + 24], a2668
262:	

file_test$75:	; call function noellipse-noellipse fclose
263:		mov word [bp + 18], file_test$76
264:		mov [bp + 20], bp
265:		add bp, 18
266:		jmp fclose
268:	

file_test$76:	; post call
270:	

file_test$77:	; call header integral zero 0 stack zero 0
272:	

file_test$78:	; parameter outFilePtrPtr, offset 6
273:		mov a2669, [bp + 12]
274:		mov [bp + 24], a2669
276:	

file_test$79:	; call function noellipse-noellipse fclose
277:		mov word [bp + 18], file_test$80
278:		mov [bp + 20], bp
279:		add bp, 18
280:		jmp fclose
282:	

file_test$80:	; post call
284:	

file_test$81:	; sourceFilePtr = string_X#
285:		mov word [bp + 10], string_X#
287:	

file_test$82:	; targetFilePtr = string_Y#
288:		mov word [bp + 12], string_Y#
290:	

file_test$83:	; call header integral zero 0 stack zero 0
292:	

file_test$84:	; parameter sourceFilePtr, offset 6
293:		mov a2670, [bp + 10]
294:		mov [bp + 20], a2670
296:	

file_test$85:	; parameter targetFilePtr, offset 8
297:		mov a2671, [bp + 12]
298:		mov [bp + 22], a2671
300:	

file_test$86:	; call function noellipse-noellipse rename
301:		mov word [bp + 14], file_test$87
302:		mov [bp + 16], bp
303:		add bp, 14
304:		jmp rename
306:	

file_test$87:	; post call
308:	

file_test$88:	; £temporary4428 = return_value
313:	

file_test$89:	; if £temporary4428 != 0 goto 97
314:		cmp t2673, 0
315:		jne file_test$97
317:	

file_test$90:	; call header integral zero 0 stack zero 0
319:	

file_test$91:	; parameter string_2225s2220has20been20renamed20to202225s222E0A#, offset 6
320:		mov word [bp + 20], string_2225s2220has20been20renamed20to202225s222E0A#
322:	

file_test$92:	; parameter sourceFilePtr, offset 8
323:		mov a2674, [bp + 10]
324:		mov [bp + 22], a2674
326:	

file_test$93:	; parameter targetFilePtr, offset 10
327:		mov a2675, [bp + 12]
328:		mov [bp + 24], a2675
330:	

file_test$94:	; call function noellipse-ellipse printf, extra 0
331:		mov word [bp + 14], file_test$95
332:		mov [bp + 16], bp
333:		add bp, 14
334:		mov di, bp
335:		add di, 4
336:		jmp printf
338:	

file_test$95:	; post call
340:	

file_test$96:	; goto 108
341:		jmp file_test$108
343:	

file_test$97:	; call header integral zero 0 stack zero 0
345:	

file_test$98:	; parameter string_Error2025i3A2025s2E0A#, offset 6
346:		mov word [bp + 20], string_Error2025i3A2025s2E0A#
348:	

file_test$99:	; parameter errno, offset 8
349:		mov a2676, [errno]
350:		mov [bp + 22], a2676
352:	

file_test$100:	; call header integral zero 0 stack zero 0
354:	

file_test$101:	; parameter errno, offset 16
355:		mov a2677, [errno]
356:		mov [bp + 30], a2677
358:	

file_test$102:	; call function noellipse-noellipse strerror
359:		mov word [bp + 24], file_test$103
360:		mov [bp + 26], bp
361:		add bp, 24
362:		jmp strerror
364:	

file_test$103:	; post call
366:	

file_test$104:	; £temporary4431 = return_value
371:	

file_test$105:	; parameter £temporary4431, offset 10
372:		mov [bp + 24], t2679
374:	

file_test$106:	; call function noellipse-ellipse printf, extra 0
375:		mov word [bp + 14], file_test$107
376:		mov [bp + 16], bp
377:		add bp, 14
378:		mov di, bp
379:		add di, 4
380:		jmp printf
382:	

file_test$107:	; post call
384:	

file_test$108:	; targetFilePtr = string_Z#
385:		mov word [bp + 10], string_Z#
387:	

file_test$109:	; call header integral zero 0 stack zero 0
389:	

file_test$110:	; parameter targetFilePtr, offset 6
390:		mov a2680, [bp + 10]
391:		mov [bp + 18], a2680
393:	

file_test$111:	; call function noellipse-noellipse remove
394:		mov word [bp + 12], file_test$112
395:		mov [bp + 14], bp
396:		add bp, 12
397:		jmp remove
399:	

file_test$112:	; post call
401:	

file_test$113:	; £temporary4433 = return_value
406:	

file_test$114:	; if £temporary4433 != 0 goto 121
407:		cmp t2682, 0
408:		jne file_test$121
410:	

file_test$115:	; call header integral zero 0 stack zero 0
412:	

file_test$116:	; parameter string_2225s2220has20been20removed2E0A#, offset 6
413:		mov word [bp + 18], string_2225s2220has20been20removed2E0A#
415:	

file_test$117:	; parameter targetFilePtr, offset 8
416:		mov a2683, [bp + 10]
417:		mov [bp + 20], a2683
419:	

file_test$118:	; call function noellipse-ellipse printf, extra 0
420:		mov word [bp + 12], file_test$119
421:		mov [bp + 14], bp
422:		add bp, 12
423:		mov di, bp
424:		add di, 2
425:		jmp printf
427:	

file_test$119:	; post call
429:	

file_test$120:	; goto 132
430:		jmp file_test$132
432:	

file_test$121:	; call header integral zero 0 stack zero 0
434:	

file_test$122:	; parameter string_Error2025i3A2025s2E0A#, offset 6
435:		mov word [bp + 18], string_Error2025i3A2025s2E0A#
437:	

file_test$123:	; parameter errno, offset 8
438:		mov a2684, [errno]
439:		mov [bp + 20], a2684
441:	

file_test$124:	; call header integral zero 0 stack zero 0
443:	

file_test$125:	; parameter errno, offset 16
444:		mov a2685, [errno]
445:		mov [bp + 28], a2685
447:	

file_test$126:	; call function noellipse-noellipse strerror
448:		mov word [bp + 22], file_test$127
449:		mov [bp + 24], bp
450:		add bp, 22
451:		jmp strerror
453:	

file_test$127:	; post call
455:	

file_test$128:	; £temporary4436 = return_value
460:	

file_test$129:	; parameter £temporary4436, offset 10
461:		mov [bp + 22], t2687
463:	

file_test$130:	; call function noellipse-ellipse printf, extra 0
464:		mov word [bp + 12], file_test$131
465:		mov [bp + 14], bp
466:		add bp, 12
467:		mov di, bp
468:		add di, 4
469:		jmp printf
471:	

file_test$131:	; post call
473:	

file_test$132:	; call header integral zero 0 stack zero 0
475:	

file_test$133:	; parameter string_PBook2Etxt#, offset 6
476:		mov word [bp + 16], string_PBook2Etxt#
478:	

file_test$134:	; parameter string_r#, offset 8
479:		mov word [bp + 18], string_r#
481:	

file_test$135:	; call function noellipse-noellipse fopen
482:		mov word [bp + 10], file_test$136
483:		mov [bp + 12], bp
484:		add bp, 10
485:		jmp fopen
487:	

file_test$136:	; post call
489:	

file_test$137:	; £temporary4438 = return_value
494:	

file_test$138:	; inFilePtr = £temporary4438
495:		mov [bp + 10], t2689
497:	

file_test$139:	; if inFilePtr != 0 goto 151
498:		cmp word [bp + 10], 0
499:		jne file_test$151
501:	

file_test$140:	; call header integral zero 0 stack zero 0
503:	

file_test$141:	; parameter stderr, offset 6
504:		mov a2690, [stderr]
505:		mov [bp + 18], a2690
507:	

file_test$142:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
508:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
510:	

file_test$143:	; parameter string_inFilePtr20213D20NULL#, offset 10
511:		mov word [bp + 22], string_inFilePtr20213D20NULL#
513:	

file_test$144:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
514:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
516:	

file_test$145:	; parameter 50, offset 14
517:		mov word [bp + 26], 50
519:	

file_test$146:	; call function noellipse-ellipse fprintf, extra 0
520:		mov word [bp + 12], file_test$147
521:		mov [bp + 14], bp
522:		add bp, 12
523:		mov di, bp
524:		add di, 6
525:		jmp fprintf
527:	

file_test$147:	; post call
529:	

file_test$148:	; call header integral zero 0 stack zero 0
531:	

file_test$149:	; call function noellipse-noellipse abort
532:		mov word [bp + 12], file_test$150
533:		mov [bp + 14], bp
534:		add bp, 12
535:		jmp abort
537:	

file_test$150:	; post call
539:	

file_test$151:	; call header integral zero 0 stack zero 0
541:	

file_test$152:	; parameter string_0A252D24s20252D24s0A#, offset 6
542:		mov word [bp + 18], string_0A252D24s20252D24s0A#
544:	

file_test$153:	; parameter string_Name#, offset 8
545:		mov word [bp + 20], string_Name#
547:	

file_test$154:	; parameter string_Phone#, offset 10
548:		mov word [bp + 22], string_Phone#
550:	

file_test$155:	; call function noellipse-ellipse printf, extra 0
551:		mov word [bp + 12], file_test$156
552:		mov [bp + 14], bp
553:		add bp, 12
554:		mov di, bp
555:		add di, 4
556:		jmp printf
558:	

file_test$156:	; post call
560:	

file_test$157:	; call header integral zero 0 stack zero 0
562:	

file_test$158:	; parameter string_252D24s20252D24s0A#, offset 6
563:		mov word [bp + 18], string_252D24s20252D24s0A#
565:	

file_test$159:	; parameter string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#, offset 8
566:		mov word [bp + 20], string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#
568:	

file_test$160:	; parameter string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#, offset 10
569:		mov word [bp + 22], string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#
571:	

file_test$161:	; call function noellipse-ellipse printf, extra 0
572:		mov word [bp + 12], file_test$162
573:		mov [bp + 14], bp
574:		add bp, 12
575:		mov di, bp
576:		add di, 4
577:		jmp printf
579:	

file_test$162:	; post call
581:	

file_test$163:	; call header integral zero 0 stack zero 0
583:	

file_test$164:	; parameter inFilePtr, offset 6
584:		mov a2691, [bp + 10]
585:		mov [bp + 22], a2691
587:	

file_test$165:	; parameter string_25i#, offset 8
588:		mov word [bp + 24], string_25i#
590:	

file_test$166:	; £temporary4445 = &size
591:		mov t2692, bp
592:		add t2692, 14
594:	

file_test$167:	; parameter £temporary4445, offset 10
595:		mov [bp + 26], t2692
597:	

file_test$168:	; call function noellipse-ellipse fscanf, extra 0
598:		mov word [bp + 16], file_test$169
599:		mov [bp + 18], bp
600:		add bp, 16
601:		mov di, bp
602:		add di, 2
603:		jmp fscanf
605:	

file_test$169:	; post call
607:	

file_test$170:	; count = 0
608:		mov word [bp + 12], 0
610:	

file_test$171:	; if count >= size goto 187
611:		mov a2693, [bp + 14]
612:		cmp [bp + 12], a2693
613:		jge file_test$187
615:	

file_test$172:	; call header integral zero 0 stack zero 0
617:	

file_test$173:	; parameter inFilePtr, offset 6
618:		mov a2694, [bp + 10]
619:		mov [bp + 62], a2694
621:	

file_test$174:	; parameter string_25s25s#, offset 8
622:		mov word [bp + 64], string_25s25s#
624:	

file_test$175:	; parameter name, offset 10
625:		mov [bp + 66], bp
626:		add word [bp + 66], 16
628:	

file_test$176:	; parameter phone, offset 12
629:		mov [bp + 68], bp
630:		add word [bp + 68], 36
632:	

file_test$177:	; call function noellipse-ellipse fscanf, extra 0
633:		mov word [bp + 56], file_test$178
634:		mov [bp + 58], bp
635:		add bp, 56
636:		mov di, bp
637:		add di, 4
638:		jmp fscanf
640:	

file_test$178:	; post call
642:	

file_test$179:	; call header integral zero 0 stack zero 0
644:	

file_test$180:	; parameter string_252D24s20252D24s0A#, offset 6
645:		mov word [bp + 62], string_252D24s20252D24s0A#
647:	

file_test$181:	; parameter name, offset 8
648:		mov [bp + 64], bp
649:		add word [bp + 64], 16
651:	

file_test$182:	; parameter phone, offset 10
652:		mov [bp + 66], bp
653:		add word [bp + 66], 36
655:	

file_test$183:	; call function noellipse-ellipse printf, extra 0
656:		mov word [bp + 56], file_test$184
657:		mov [bp + 58], bp
658:		add bp, 56
659:		mov di, bp
660:		add di, 4
661:		jmp printf
663:	

file_test$184:	; post call
665:	

file_test$185:	; ++count
666:		inc word [bp + 12]
668:	

file_test$186:	; goto 171
669:		jmp file_test$171
671:	

file_test$187:	; call header integral zero 0 stack zero 0
673:	

file_test$188:	; parameter string_0A#, offset 6
674:		mov word [bp + 22], string_0A#
676:	

file_test$189:	; call function noellipse-ellipse printf, extra 0
677:		mov word [bp + 16], file_test$190
678:		mov [bp + 18], bp
679:		add bp, 16
680:		mov di, bp
681:		jmp printf
683:	

file_test$190:	; post call
685:	

file_test$191:	; call header integral zero 0 stack zero 0
687:	

file_test$192:	; parameter inFilePtr, offset 6
688:		mov a2695, [bp + 10]
689:		mov [bp + 22], a2695
691:	

file_test$193:	; call function noellipse-noellipse fclose
692:		mov word [bp + 16], file_test$194
693:		mov [bp + 18], bp
694:		add bp, 16
695:		jmp fclose
697:	

file_test$194:	; post call
699:	

file_test$195:	; sourceFilePtr = string_Flow12Etxt#
700:		mov word [bp + 10], string_Flow12Etxt#
702:	

file_test$196:	; targetFilePtr = string_Flow22Etxt#
703:		mov word [bp + 12], string_Flow22Etxt#
705:	

file_test$197:	; call header integral zero 0 stack zero 0
707:	

file_test$198:	; parameter sourceFilePtr, offset 6
708:		mov a2696, [bp + 10]
709:		mov [bp + 20], a2696
711:	

file_test$199:	; parameter string_r#, offset 8
712:		mov word [bp + 22], string_r#
714:	

file_test$200:	; call function noellipse-noellipse fopen
715:		mov word [bp + 14], file_test$201
716:		mov [bp + 16], bp
717:		add bp, 14
718:		jmp fopen
720:	

file_test$201:	; post call
722:	

file_test$202:	; £temporary4453 = return_value
727:	

file_test$203:	; inFilePtr = £temporary4453
728:		mov [bp + 14], t2698
730:	

file_test$204:	; if inFilePtr != 0 goto 216
731:		cmp word [bp + 14], 0
732:		jne file_test$216
734:	

file_test$205:	; call header integral zero 0 stack zero 0
736:	

file_test$206:	; parameter stderr, offset 6
737:		mov a2699, [stderr]
738:		mov [bp + 22], a2699
740:	

file_test$207:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
741:		mov word [bp + 24], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
743:	

file_test$208:	; parameter string_inFilePtr20213D20NULL#, offset 10
744:		mov word [bp + 26], string_inFilePtr20213D20NULL#
746:	

file_test$209:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
747:		mov word [bp + 28], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
749:	

file_test$210:	; parameter 76, offset 14
750:		mov word [bp + 30], 76
752:	

file_test$211:	; call function noellipse-ellipse fprintf, extra 0
753:		mov word [bp + 16], file_test$212
754:		mov [bp + 18], bp
755:		add bp, 16
756:		mov di, bp
757:		add di, 6
758:		jmp fprintf
760:	

file_test$212:	; post call
762:	

file_test$213:	; call header integral zero 0 stack zero 0
764:	

file_test$214:	; call function noellipse-noellipse abort
765:		mov word [bp + 16], file_test$215
766:		mov [bp + 18], bp
767:		add bp, 16
768:		jmp abort
770:	

file_test$215:	; post call
772:	

file_test$216:	; call header integral zero 0 stack zero 0
774:	

file_test$217:	; parameter targetFilePtr, offset 6
775:		mov a2700, [bp + 12]
776:		mov [bp + 22], a2700
778:	

file_test$218:	; parameter string_w#, offset 8
779:		mov word [bp + 24], string_w#
781:	

file_test$219:	; call function noellipse-noellipse fopen
782:		mov word [bp + 16], file_test$220
783:		mov [bp + 18], bp
784:		add bp, 16
785:		jmp fopen
787:	

file_test$220:	; post call
789:	

file_test$221:	; £temporary4458 = return_value
794:	

file_test$222:	; outFilePtr = £temporary4458
795:		mov [bp + 16], t2702
797:	

file_test$223:	; if outFilePtr != 0 goto 235
798:		cmp word [bp + 16], 0
799:		jne file_test$235
801:	

file_test$224:	; call header integral zero 0 stack zero 0
803:	

file_test$225:	; parameter stderr, offset 6
804:		mov a2703, [stderr]
805:		mov [bp + 24], a2703
807:	

file_test$226:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
808:		mov word [bp + 26], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
810:	

file_test$227:	; parameter string_outFilePtr20213D20NULL#, offset 10
811:		mov word [bp + 28], string_outFilePtr20213D20NULL#
813:	

file_test$228:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
814:		mov word [bp + 30], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
816:	

file_test$229:	; parameter 79, offset 14
817:		mov word [bp + 32], 79
819:	

file_test$230:	; call function noellipse-ellipse fprintf, extra 0
820:		mov word [bp + 18], file_test$231
821:		mov [bp + 20], bp
822:		add bp, 18
823:		mov di, bp
824:		add di, 6
825:		jmp fprintf
827:	

file_test$231:	; post call
829:	

file_test$232:	; call header integral zero 0 stack zero 0
831:	

file_test$233:	; call function noellipse-noellipse abort
832:		mov word [bp + 18], file_test$234
833:		mov [bp + 20], bp
834:		add bp, 18
835:		jmp abort
837:	

file_test$234:	; post call
839:	

file_test$235:	; call header integral zero 0 stack zero 0
841:	

file_test$236:	; parameter inFilePtr, offset 6
842:		mov a2704, [bp + 14]
843:		mov [bp + 24], a2704
845:	

file_test$237:	; call function noellipse-noellipse fgetc
846:		mov word [bp + 18], file_test$238
847:		mov [bp + 20], bp
848:		add bp, 18
849:		jmp fgetc
851:	

file_test$238:	; post call
853:	

file_test$239:	; £temporary4463 = return_value
858:	

file_test$240:	; £temporary4464 = int_to_int £temporary4463 (Signed_Int -> Signed_Char)
861:		cmp t2706, 0
862:		jge file_test$241
863:		neg t2706
865:		neg t2706
867:	

file_test$241:	; c = £temporary4464
868:		mov [bp + 18], t2706
870:	

file_test$242:	; £temporary4465 = int_to_int c (Signed_Char -> Signed_Int)
871:		mov a2707, [bp + 18]
873:		and a2707, 255
875:		cmp a2707, 0
876:		jge file_test$243
877:		neg a2707
879:		neg a2707
881:	

file_test$243:	; if £temporary4465 == -1 goto 257
882:		cmp a2707, -1
883:		je file_test$257
885:	

file_test$244:	; call header integral zero 0 stack zero 0
887:	

file_test$245:	; £temporary4467 = int_to_int c (Signed_Char -> Signed_Int)
888:		mov a2708, [bp + 18]
890:		and a2708, 255
892:		cmp a2708, 0
893:		jge file_test$246
894:		neg a2708
896:		neg a2708
898:	

file_test$246:	; parameter £temporary4467, offset 6
899:		mov [bp + 25], a2708
901:	

file_test$247:	; parameter outFilePtr, offset 8
902:		mov a2709, [bp + 16]
903:		mov [bp + 27], a2709
905:	

file_test$248:	; call function noellipse-noellipse putc
906:		mov word [bp + 19], file_test$249
907:		mov [bp + 21], bp
908:		add bp, 19
909:		jmp putc
911:	

file_test$249:	; post call
913:	

file_test$250:	; if c != 10 goto 235
914:		cmp byte [bp + 18], 10
915:		jne file_test$235
917:	

file_test$251:	; call header integral zero 0 stack zero 0
919:	

file_test$252:	; parameter 10, offset 6
920:		mov word [bp + 25], 10
922:	

file_test$253:	; parameter outFilePtr, offset 8
923:		mov a2710, [bp + 16]
924:		mov [bp + 27], a2710
926:	

file_test$254:	; call function noellipse-noellipse putc
927:		mov word [bp + 19], file_test$255
928:		mov [bp + 21], bp
929:		add bp, 19
930:		jmp putc
932:	

file_test$255:	; post call
934:	

file_test$256:	; goto 235
935:		jmp file_test$235
937:	

file_test$257:	; call header integral zero 0 stack zero 0
939:	

file_test$258:	; parameter inFilePtr, offset 6
940:		mov a2711, [bp + 14]
941:		mov [bp + 24], a2711
943:	

file_test$259:	; call function noellipse-noellipse fclose
944:		mov word [bp + 18], file_test$260
945:		mov [bp + 20], bp
946:		add bp, 18
947:		jmp fclose
949:	

file_test$260:	; post call
951:	

file_test$261:	; call header integral zero 0 stack zero 0
953:	

file_test$262:	; parameter outFilePtr, offset 6
954:		mov a2712, [bp + 16]
955:		mov [bp + 24], a2712
957:	

file_test$263:	; call function noellipse-noellipse fclose
958:		mov word [bp + 18], file_test$264
959:		mov [bp + 20], bp
960:		add bp, 18
961:		jmp fclose
963:	

file_test$264:	; post call
965:	

file_test$265:	; call header integral zero 0 stack zero 0
967:	

file_test$266:	; parameter string_Test2Ebin#, offset 6
968:		mov word [bp + 16], string_Test2Ebin#
970:	

file_test$267:	; parameter string_w#, offset 8
971:		mov word [bp + 18], string_w#
973:	

file_test$268:	; call function noellipse-noellipse fopen
974:		mov word [bp + 10], file_test$269
975:		mov [bp + 12], bp
976:		add bp, 10
977:		jmp fopen
979:	

file_test$269:	; post call
981:	

file_test$270:	; £temporary4474 = return_value
986:	

file_test$271:	; outFilePtr = £temporary4474
987:		mov [bp + 10], t2714
989:	

file_test$272:	; if outFilePtr != 0 goto 284
990:		cmp word [bp + 10], 0
991:		jne file_test$284
993:	

file_test$273:	; call header integral zero 0 stack zero 0
995:	

file_test$274:	; parameter stderr, offset 6
996:		mov a2715, [stderr]
997:		mov [bp + 18], a2715
999:	

file_test$275:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1000:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1002:	

file_test$276:	; parameter string_outFilePtr20213D20NULL#, offset 10
1003:		mov word [bp + 22], string_outFilePtr20213D20NULL#
1005:	

file_test$277:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1006:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1008:	

file_test$278:	; parameter 100, offset 14
1009:		mov word [bp + 26], 100
1011:	

file_test$279:	; call function noellipse-ellipse fprintf, extra 0
1012:		mov word [bp + 12], file_test$280
1013:		mov [bp + 14], bp
1014:		add bp, 12
1015:		mov di, bp
1016:		add di, 6
1017:		jmp fprintf
1019:	

file_test$280:	; post call
1021:	

file_test$281:	; call header integral zero 0 stack zero 0
1023:	

file_test$282:	; call function noellipse-noellipse abort
1024:		mov word [bp + 12], file_test$283
1025:		mov [bp + 14], bp
1026:		add bp, 12
1027:		jmp abort
1029:	

file_test$283:	; post call
1031:	

file_test$284:	; size = 10
1032:		mov word [bp + 12], 10
1034:	

file_test$285:	; call header integral zero 0 stack zero 0
1036:	

file_test$286:	; £temporary4479 = &size
1037:		mov t2716, bp
1038:		add t2716, 12
1040:	

file_test$287:	; parameter £temporary4479, offset 6
1041:		mov [bp + 20], t2716
1043:	

file_test$288:	; parameter 2, offset 8
1044:		mov word [bp + 22], 2
1046:	

file_test$289:	; parameter 1, offset 10
1047:		mov word [bp + 24], 1
1049:	

file_test$290:	; parameter outFilePtr, offset 12
1050:		mov a2717, [bp + 10]
1051:		mov [bp + 26], a2717
1053:	

file_test$291:	; call function noellipse-noellipse fwrite
1054:		mov word [bp + 14], file_test$292
1055:		mov [bp + 16], bp
1056:		add bp, 14
1057:		jmp fwrite
1059:	

file_test$292:	; post call
1061:	

file_test$293:	; index = 0
1062:		mov word [bp + 14], 0
1064:	

file_test$294:	; if index >= size goto 308
1065:		mov a2718, [bp + 12]
1066:		cmp [bp + 14], a2718
1067:		jge file_test$308
1069:	

file_test$295:	; £temporary4483 = index * index
1070:		mov a2719, [bp + 14]
1072:		xor dx, dx
1073:		imul word [bp + 14]
1079:	

file_test$296:	; £temporary4484 = int_to_float £temporary4483 (Signed_Int -> Double)
1080:		mov [container2bytes#], t2722
1081:		fild word [container2bytes#]
1083:	

file_test$297:	; pop float value
1084:		fstp qword [bp + 16]
1086:	

file_test$298:	; call header integral zero 0 stack zero 0
1088:	

file_test$299:	; £temporary4485 = &value
1089:		mov t2723, bp
1090:		add t2723, 16
1092:	

file_test$300:	; parameter £temporary4485, offset 6
1093:		mov [bp + 30], t2723
1095:	

file_test$301:	; parameter 8, offset 8
1096:		mov word [bp + 32], 8
1098:	

file_test$302:	; parameter 1, offset 10
1099:		mov word [bp + 34], 1
1101:	

file_test$303:	; parameter outFilePtr, offset 12
1102:		mov a2724, [bp + 10]
1103:		mov [bp + 36], a2724
1105:	

file_test$304:	; call function noellipse-noellipse fwrite
1106:		mov word [bp + 24], file_test$305
1107:		mov [bp + 26], bp
1108:		add bp, 24
1109:		jmp fwrite
1111:	

file_test$305:	; post call
1113:	

file_test$306:	; ++index
1114:		inc word [bp + 14]
1116:	

file_test$307:	; goto 294
1117:		jmp file_test$294
1119:	

file_test$308:	; call header integral zero 0 stack zero 0
1121:	

file_test$309:	; parameter outFilePtr, offset 6
1122:		mov a2725, [bp + 10]
1123:		mov [bp + 22], a2725
1125:	

file_test$310:	; call function noellipse-noellipse fclose
1126:		mov word [bp + 16], file_test$311
1127:		mov [bp + 18], bp
1128:		add bp, 16
1129:		jmp fclose
1131:	

file_test$311:	; post call
1133:	

file_test$312:	; call header integral zero 0 stack zero 0
1135:	

file_test$313:	; parameter string_Test2Ebin#, offset 6
1136:		mov word [bp + 16], string_Test2Ebin#
1138:	

file_test$314:	; parameter string_r#, offset 8
1139:		mov word [bp + 18], string_r#
1141:	

file_test$315:	; call function noellipse-noellipse fopen
1142:		mov word [bp + 10], file_test$316
1143:		mov [bp + 12], bp
1144:		add bp, 10
1145:		jmp fopen
1147:	

file_test$316:	; post call
1149:	

file_test$317:	; £temporary4488 = return_value
1154:	

file_test$318:	; inFilePtr = £temporary4488
1155:		mov [bp + 10], t2727
1157:	

file_test$319:	; if inFilePtr != 0 goto 331
1158:		cmp word [bp + 10], 0
1159:		jne file_test$331
1161:	

file_test$320:	; call header integral zero 0 stack zero 0
1163:	

file_test$321:	; parameter stderr, offset 6
1164:		mov a2728, [stderr]
1165:		mov [bp + 18], a2728
1167:	

file_test$322:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1168:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1170:	

file_test$323:	; parameter string_inFilePtr20213D20NULL#, offset 10
1171:		mov word [bp + 22], string_inFilePtr20213D20NULL#
1173:	

file_test$324:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1174:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1176:	

file_test$325:	; parameter 115, offset 14
1177:		mov word [bp + 26], 115
1179:	

file_test$326:	; call function noellipse-ellipse fprintf, extra 0
1180:		mov word [bp + 12], file_test$327
1181:		mov [bp + 14], bp
1182:		add bp, 12
1183:		mov di, bp
1184:		add di, 6
1185:		jmp fprintf
1187:	

file_test$327:	; post call
1189:	

file_test$328:	; call header integral zero 0 stack zero 0
1191:	

file_test$329:	; call function noellipse-noellipse abort
1192:		mov word [bp + 12], file_test$330
1193:		mov [bp + 14], bp
1194:		add bp, 12
1195:		jmp abort
1197:	

file_test$330:	; post call
1199:	

file_test$331:	; call header integral zero 0 stack zero 0
1201:	

file_test$332:	; £temporary4493 = &size
1202:		mov t2729, bp
1203:		add t2729, 12
1205:	

file_test$333:	; parameter £temporary4493, offset 6
1206:		mov [bp + 20], t2729
1208:	

file_test$334:	; parameter 2, offset 8
1209:		mov word [bp + 22], 2
1211:	

file_test$335:	; parameter 1, offset 10
1212:		mov word [bp + 24], 1
1214:	

file_test$336:	; parameter inFilePtr, offset 12
1215:		mov a2730, [bp + 10]
1216:		mov [bp + 26], a2730
1218:	

file_test$337:	; call function noellipse-noellipse fread
1219:		mov word [bp + 14], file_test$338
1220:		mov [bp + 16], bp
1221:		add bp, 14
1222:		jmp fread
1224:	

file_test$338:	; post call
1226:	

file_test$339:	; call header integral zero 0 stack zero 0
1228:	

file_test$340:	; parameter string_size12025i0A#, offset 6
1229:		mov word [bp + 20], string_size12025i0A#
1231:	

file_test$341:	; parameter size, offset 8
1232:		mov a2731, [bp + 12]
1233:		mov [bp + 22], a2731
1235:	

file_test$342:	; call function noellipse-ellipse printf, extra 0
1236:		mov word [bp + 14], file_test$343
1237:		mov [bp + 16], bp
1238:		add bp, 14
1239:		mov di, bp
1240:		add di, 2
1241:		jmp printf
1243:	

file_test$343:	; post call
1245:	

file_test$344:	; call header integral zero 0 stack zero 0
1247:	

file_test$345:	; £temporary4496 = &arr
1248:		mov t2732, bp
1249:		add t2732, 14
1251:	

file_test$346:	; parameter £temporary4496, offset 6
1252:		mov [bp + 100], t2732
1254:	

file_test$347:	; parameter 80, offset 8
1255:		mov word [bp + 102], 80
1257:	

file_test$348:	; parameter 1, offset 10
1258:		mov word [bp + 104], 1
1260:	

file_test$349:	; parameter inFilePtr, offset 12
1261:		mov a2733, [bp + 10]
1262:		mov [bp + 106], a2733
1264:	

file_test$350:	; call function noellipse-noellipse fread
1265:		mov word [bp + 94], file_test$351
1266:		mov [bp + 96], bp
1267:		add bp, 94
1268:		jmp fread
1270:	

file_test$351:	; post call
1272:	

file_test$352:	; call header integral zero 0 stack zero 0
1274:	

file_test$353:	; parameter inFilePtr, offset 6
1275:		mov a2734, [bp + 10]
1276:		mov [bp + 100], a2734
1278:	

file_test$354:	; call function noellipse-noellipse fclose
1279:		mov word [bp + 94], file_test$355
1280:		mov [bp + 96], bp
1281:		add bp, 94
1282:		jmp fclose
1284:	

file_test$355:	; post call
1286:	

file_test$356:	; index = 0
1287:		mov word [bp + 94], 0
1289:	

file_test$357:	; if index >= 10 goto 370
1290:		cmp word [bp + 94], 10
1291:		jge file_test$370
1293:	

file_test$358:	; call header integral zero 0 stack zero 0
1295:	

file_test$359:	; parameter string_index12025i3A20value2025f0A#, offset 6
1296:		mov word [bp + 102], string_index12025i3A20value2025f0A#
1298:	

file_test$360:	; parameter index, offset 8
1299:		mov a2735, [bp + 94]
1300:		mov [bp + 104], a2735
1302:	

file_test$361:	; £temporary4502 = index * 8
1303:		mov a2736, [bp + 94]
1305:		xor dx, dx
1306:		mul word [int2$8#]
1312:	

file_test$362:	; £temporary4503 = arr + £temporary4502
1313:		mov a2740, bp
1314:		add a2740, 14
1315:		add a2740, t2739
1317:	

file_test$363:	; £temporary4501 -> £temporary4503 = *£temporary4503
1319:	

file_test$364:	; push float £temporary4501 -> £temporary4503
1320:		fld qword [a2740]
1322:	

file_test$365:	; parameter £temporary4501 -> £temporary4503, offset 10
1323:		fstp qword [bp + 106]
1325:	

file_test$366:	; call function noellipse-ellipse printf, extra 0
1326:		mov word [bp + 96], file_test$367
1327:		mov [bp + 98], bp
1328:		add bp, 96
1329:		mov di, bp
1330:		add di, 10
1331:		jmp printf
1333:	

file_test$367:	; post call
1335:	

file_test$368:	; ++index
1336:		inc word [bp + 94]
1338:	

file_test$369:	; goto 357
1339:		jmp file_test$357
1341:	

file_test$370:	; call header integral zero 0 stack zero 0
1343:	

file_test$371:	; parameter string_0A#, offset 6
1344:		mov word [bp + 102], string_0A#
1346:	

file_test$372:	; call function noellipse-ellipse printf, extra 0
1347:		mov word [bp + 96], file_test$373
1348:		mov [bp + 98], bp
1349:		add bp, 96
1350:		mov di, bp
1351:		jmp printf
1353:	

file_test$373:	; post call
1355:	

file_test$374:	; call header integral zero 0 stack zero 0
1357:	

file_test$375:	; parameter string_Test2Ebin#, offset 6
1358:		mov word [bp + 16], string_Test2Ebin#
1360:	

file_test$376:	; parameter string_r#, offset 8
1361:		mov word [bp + 18], string_r#
1363:	

file_test$377:	; call function noellipse-noellipse fopen
1364:		mov word [bp + 10], file_test$378
1365:		mov [bp + 12], bp
1366:		add bp, 10
1367:		jmp fopen
1369:	

file_test$378:	; post call
1371:	

file_test$379:	; £temporary4506 = return_value
1376:	

file_test$380:	; inFilePtr = £temporary4506
1377:		mov [bp + 10], t2742
1379:	

file_test$381:	; if inFilePtr != 0 goto 393
1380:		cmp word [bp + 10], 0
1381:		jne file_test$393
1383:	

file_test$382:	; call header integral zero 0 stack zero 0
1385:	

file_test$383:	; parameter stderr, offset 6
1386:		mov a2743, [stderr]
1387:		mov [bp + 18], a2743
1389:	

file_test$384:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1390:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1392:	

file_test$385:	; parameter string_inFilePtr20213D20NULL#, offset 10
1393:		mov word [bp + 22], string_inFilePtr20213D20NULL#
1395:	

file_test$386:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1396:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1398:	

file_test$387:	; parameter 133, offset 14
1399:		mov word [bp + 26], 133
1401:	

file_test$388:	; call function noellipse-ellipse fprintf, extra 0
1402:		mov word [bp + 12], file_test$389
1403:		mov [bp + 14], bp
1404:		add bp, 12
1405:		mov di, bp
1406:		add di, 6
1407:		jmp fprintf
1409:	

file_test$389:	; post call
1411:	

file_test$390:	; call header integral zero 0 stack zero 0
1413:	

file_test$391:	; call function noellipse-noellipse abort
1414:		mov word [bp + 12], file_test$392
1415:		mov [bp + 14], bp
1416:		add bp, 12
1417:		jmp abort
1419:	

file_test$392:	; post call
1421:	

file_test$393:	; call header integral zero 0 stack zero 0
1423:	

file_test$394:	; £temporary4511 = &size
1424:		mov t2744, bp
1425:		add t2744, 12
1427:	

file_test$395:	; parameter £temporary4511, offset 6
1428:		mov [bp + 20], t2744
1430:	

file_test$396:	; parameter 2, offset 8
1431:		mov word [bp + 22], 2
1433:	

file_test$397:	; parameter 1, offset 10
1434:		mov word [bp + 24], 1
1436:	

file_test$398:	; parameter inFilePtr, offset 12
1437:		mov a2745, [bp + 10]
1438:		mov [bp + 26], a2745
1440:	

file_test$399:	; call function noellipse-noellipse fread
1441:		mov word [bp + 14], file_test$400
1442:		mov [bp + 16], bp
1443:		add bp, 14
1444:		jmp fread
1446:	

file_test$400:	; post call
1448:	

file_test$401:	; call header integral zero 0 stack zero 0
1450:	

file_test$402:	; parameter string_size22025i0A#, offset 6
1451:		mov word [bp + 20], string_size22025i0A#
1453:	

file_test$403:	; parameter size, offset 8
1454:		mov a2746, [bp + 12]
1455:		mov [bp + 22], a2746
1457:	

file_test$404:	; call function noellipse-ellipse printf, extra 0
1458:		mov word [bp + 14], file_test$405
1459:		mov [bp + 16], bp
1460:		add bp, 14
1461:		mov di, bp
1462:		add di, 2
1463:		jmp printf
1465:	

file_test$405:	; post call
1467:	

file_test$406:	; index = 0
1468:		mov word [bp + 14], 0
1470:	

file_test$407:	; if index >= size goto 425
1471:		mov a2747, [bp + 12]
1472:		cmp [bp + 14], a2747
1473:		jge file_test$425
1475:	

file_test$408:	; call header integral zero 0 stack zero 0
1477:	

file_test$409:	; £temporary4516 = &value
1478:		mov t2748, bp
1479:		add t2748, 16
1481:	

file_test$410:	; parameter £temporary4516, offset 6
1482:		mov [bp + 30], t2748
1484:	

file_test$411:	; parameter 8, offset 8
1485:		mov word [bp + 32], 8
1487:	

file_test$412:	; parameter 1, offset 10
1488:		mov word [bp + 34], 1
1490:	

file_test$413:	; parameter inFilePtr, offset 12
1491:		mov a2749, [bp + 10]
1492:		mov [bp + 36], a2749
1494:	

file_test$414:	; call function noellipse-noellipse fread
1495:		mov word [bp + 24], file_test$415
1496:		mov [bp + 26], bp
1497:		add bp, 24
1498:		jmp fread
1500:	

file_test$415:	; post call
1502:	

file_test$416:	; call header integral zero 0 stack zero 0
1504:	

file_test$417:	; parameter string_index22025i3A20value2025f0A#, offset 6
1505:		mov word [bp + 30], string_index22025i3A20value2025f0A#
1507:	

file_test$418:	; parameter index, offset 8
1508:		mov a2750, [bp + 14]
1509:		mov [bp + 32], a2750
1511:	

file_test$419:	; push float value
1512:		fld qword [bp + 16]
1514:	

file_test$420:	; parameter value, offset 10
1515:		fstp qword [bp + 34]
1517:	

file_test$421:	; call function noellipse-ellipse printf, extra 0
1518:		mov word [bp + 24], file_test$422
1519:		mov [bp + 26], bp
1520:		add bp, 24
1521:		mov di, bp
1522:		add di, 10
1523:		jmp printf
1525:	

file_test$422:	; post call
1527:	

file_test$423:	; ++index
1528:		inc word [bp + 14]
1530:	

file_test$424:	; goto 407
1531:		jmp file_test$407
1533:	

file_test$425:	; call header integral zero 0 stack zero 0
1535:	

file_test$426:	; parameter string_0A#, offset 6
1536:		mov word [bp + 22], string_0A#
1538:	

file_test$427:	; call function noellipse-ellipse printf, extra 0
1539:		mov word [bp + 16], file_test$428
1540:		mov [bp + 18], bp
1541:		add bp, 16
1542:		mov di, bp
1543:		jmp printf
1545:	

file_test$428:	; post call
1547:	

file_test$429:	; call header integral zero 0 stack zero 0
1549:	

file_test$430:	; parameter inFilePtr, offset 6
1550:		mov a2751, [bp + 10]
1551:		mov [bp + 22], a2751
1553:	

file_test$431:	; call function noellipse-noellipse fclose
1554:		mov word [bp + 16], file_test$432
1555:		mov [bp + 18], bp
1556:		add bp, 16
1557:		jmp fclose
1559:	

file_test$432:	; post call
1561:	

file_test$433:	; call header integral zero 0 stack zero 0
1563:	

file_test$434:	; parameter string_Test2Ebin#, offset 6
1564:		mov word [bp + 16], string_Test2Ebin#
1566:	

file_test$435:	; parameter string_r#, offset 8
1567:		mov word [bp + 18], string_r#
1569:	

file_test$436:	; call function noellipse-noellipse fopen
1570:		mov word [bp + 10], file_test$437
1571:		mov [bp + 12], bp
1572:		add bp, 10
1573:		jmp fopen
1575:	

file_test$437:	; post call
1577:	

file_test$438:	; £temporary4521 = return_value
1582:	

file_test$439:	; inFilePtr = £temporary4521
1583:		mov [bp + 10], t2753
1585:	

file_test$440:	; if inFilePtr != 0 goto 452
1586:		cmp word [bp + 10], 0
1587:		jne file_test$452
1589:	

file_test$441:	; call header integral zero 0 stack zero 0
1591:	

file_test$442:	; parameter stderr, offset 6
1592:		mov a2754, [stderr]
1593:		mov [bp + 18], a2754
1595:	

file_test$443:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1596:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1598:	

file_test$444:	; parameter string_inFilePtr20213D20NULL#, offset 10
1599:		mov word [bp + 22], string_inFilePtr20213D20NULL#
1601:	

file_test$445:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1602:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1604:	

file_test$446:	; parameter 151, offset 14
1605:		mov word [bp + 26], 151
1607:	

file_test$447:	; call function noellipse-ellipse fprintf, extra 0
1608:		mov word [bp + 12], file_test$448
1609:		mov [bp + 14], bp
1610:		add bp, 12
1611:		mov di, bp
1612:		add di, 6
1613:		jmp fprintf
1615:	

file_test$448:	; post call
1617:	

file_test$449:	; call header integral zero 0 stack zero 0
1619:	

file_test$450:	; call function noellipse-noellipse abort
1620:		mov word [bp + 12], file_test$451
1621:		mov [bp + 14], bp
1622:		add bp, 12
1623:		jmp abort
1625:	

file_test$451:	; post call
1627:	

file_test$452:	; call header integral zero 0 stack zero 0
1629:	

file_test$453:	; £temporary4526 = &size
1630:		mov t2755, bp
1631:		add t2755, 12
1633:	

file_test$454:	; parameter £temporary4526, offset 6
1634:		mov [bp + 20], t2755
1636:	

file_test$455:	; parameter 2, offset 8
1637:		mov word [bp + 22], 2
1639:	

file_test$456:	; parameter 1, offset 10
1640:		mov word [bp + 24], 1
1642:	

file_test$457:	; parameter inFilePtr, offset 12
1643:		mov a2756, [bp + 10]
1644:		mov [bp + 26], a2756
1646:	

file_test$458:	; call function noellipse-noellipse fread
1647:		mov word [bp + 14], file_test$459
1648:		mov [bp + 16], bp
1649:		add bp, 14
1650:		jmp fread
1652:	

file_test$459:	; post call
1654:	

file_test$460:	; call header integral zero 0 stack zero 0
1656:	

file_test$461:	; parameter string_size32025i20total2025i0A#, offset 6
1657:		mov word [bp + 20], string_size32025i20total2025i0A#
1659:	

file_test$462:	; parameter size, offset 8
1660:		mov a2757, [bp + 12]
1661:		mov [bp + 22], a2757
1663:	

file_test$463:	; £temporary4528 = size * 8
1664:		mov a2758, [bp + 12]
1666:		xor dx, dx
1667:		imul word [int2$8#]
1673:	

file_test$464:	; parameter £temporary4528, offset 10
1674:		mov [bp + 24], t2761
1676:	

file_test$465:	; call function noellipse-ellipse printf, extra 0
1677:		mov word [bp + 14], file_test$466
1678:		mov [bp + 16], bp
1679:		add bp, 14
1680:		mov di, bp
1681:		add di, 4
1682:		jmp printf
1684:	

file_test$466:	; post call
1686:	

file_test$467:	; total = size * 8
1687:		mov a2762, [bp + 12]
1689:		xor dx, dx
1690:		imul word [int2$8#]
1691:		mov [bp + 14], ax
1693:	

file_test$468:	; call header integral zero 0 stack zero 0
1695:	

file_test$469:	; parameter total, offset 6
1696:		mov a2765, [bp + 14]
1697:		mov [bp + 22], a2765
1699:	

file_test$470:	; call function noellipse-noellipse malloc
1700:		mov word [bp + 16], file_test$471
1701:		mov [bp + 18], bp
1702:		add bp, 16
1703:		jmp malloc
1705:	

file_test$471:	; post call
1707:	

file_test$472:	; £temporary4531 = return_value
1712:	

file_test$473:	; p = £temporary4531
1713:		mov [bp + 16], t2767
1715:	

file_test$474:	; if p != 0 goto 486
1716:		cmp word [bp + 16], 0
1717:		jne file_test$486
1719:	

file_test$475:	; call header integral zero 0 stack zero 0
1721:	

file_test$476:	; parameter stderr, offset 6
1722:		mov a2768, [stderr]
1723:		mov [bp + 24], a2768
1725:	

file_test$477:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
1726:		mov word [bp + 26], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
1728:	

file_test$478:	; parameter string_p20213D20NULL#, offset 10
1729:		mov word [bp + 28], string_p20213D20NULL#
1731:	

file_test$479:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
1732:		mov word [bp + 30], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
1734:	

file_test$480:	; parameter 159, offset 14
1735:		mov word [bp + 32], 159
1737:	

file_test$481:	; call function noellipse-ellipse fprintf, extra 0
1738:		mov word [bp + 18], file_test$482
1739:		mov [bp + 20], bp
1740:		add bp, 18
1741:		mov di, bp
1742:		add di, 6
1743:		jmp fprintf
1745:	

file_test$482:	; post call
1747:	

file_test$483:	; call header integral zero 0 stack zero 0
1749:	

file_test$484:	; call function noellipse-noellipse abort
1750:		mov word [bp + 18], file_test$485
1751:		mov [bp + 20], bp
1752:		add bp, 18
1753:		jmp abort
1755:	

file_test$485:	; post call
1757:	

file_test$486:	; £temporary4536 = size * 8
1758:		mov a2769, [bp + 12]
1760:		xor dx, dx
1761:		mul word [int2$8#]
1767:	

file_test$487:	; endPtr = p + £temporary4536
1768:		mov a2773, [bp + 16]
1769:		add a2773, t2772
1770:		mov [bp + 18], a2773
1772:	

file_test$488:	; call header integral zero 0 stack zero 0
1774:	

file_test$489:	; parameter string_malloc2025u2025u2025u0A#, offset 6
1775:		mov word [bp + 26], string_malloc2025u2025u2025u0A#
1777:	

file_test$490:	; parameter p, offset 8
1778:		mov a2774, [bp + 16]
1779:		mov [bp + 28], a2774
1781:	

file_test$491:	; parameter total, offset 10
1782:		mov a2775, [bp + 14]
1783:		mov [bp + 30], a2775
1785:	

file_test$492:	; parameter endPtr, offset 12
1786:		mov a2776, [bp + 18]
1787:		mov [bp + 32], a2776
1789:	

file_test$493:	; call function noellipse-ellipse printf, extra 0
1790:		mov word [bp + 20], file_test$494
1791:		mov [bp + 22], bp
1792:		add bp, 20
1793:		mov di, bp
1794:		add di, 6
1795:		jmp printf
1797:	

file_test$494:	; post call
1799:	

file_test$495:	; call header integral zero 0 stack zero 0
1801:	

file_test$496:	; parameter p, offset 6
1802:		mov a2777, [bp + 16]
1803:		mov [bp + 26], a2777
1805:	

file_test$497:	; parameter total, offset 8
1806:		mov a2778, [bp + 14]
1807:		mov [bp + 28], a2778
1809:	

file_test$498:	; parameter 1, offset 10
1810:		mov word [bp + 30], 1
1812:	

file_test$499:	; parameter inFilePtr, offset 12
1813:		mov a2779, [bp + 10]
1814:		mov [bp + 32], a2779
1816:	

file_test$500:	; call function noellipse-noellipse fread
1817:		mov word [bp + 20], file_test$501
1818:		mov [bp + 22], bp
1819:		add bp, 20
1820:		jmp fread
1822:	

file_test$501:	; post call
1824:	

file_test$502:	; index = 0
1825:		mov word [bp + 20], 0
1827:	

file_test$503:	; if index >= size goto 516
1828:		mov a2780, [bp + 12]
1829:		cmp [bp + 20], a2780
1830:		jge file_test$516
1832:	

file_test$504:	; call header integral zero 0 stack zero 0
1834:	

file_test$505:	; parameter string_index32025i3A20value2025f0A#, offset 6
1835:		mov word [bp + 28], string_index32025i3A20value2025f0A#
1837:	

file_test$506:	; parameter index, offset 8
1838:		mov a2781, [bp + 20]
1839:		mov [bp + 30], a2781
1841:	

file_test$507:	; £temporary4543 = index * 8
1842:		mov a2782, [bp + 20]
1844:		xor dx, dx
1845:		mul word [int2$8#]
1851:	

file_test$508:	; £temporary4544 = p + £temporary4543
1852:		mov a2786, [bp + 16]
1853:		add a2786, t2785
1855:	

file_test$509:	; £temporary4542 -> £temporary4544 = *£temporary4544
1857:	

file_test$510:	; push float £temporary4542 -> £temporary4544
1858:		fld qword [a2786]
1860:	

file_test$511:	; parameter £temporary4542 -> £temporary4544, offset 10
1861:		fstp qword [bp + 32]
1863:	

file_test$512:	; call function noellipse-ellipse printf, extra 0
1864:		mov word [bp + 22], file_test$513
1865:		mov [bp + 24], bp
1866:		add bp, 22
1867:		mov di, bp
1868:		add di, 10
1869:		jmp printf
1871:	

file_test$513:	; post call
1873:	

file_test$514:	; ++index
1874:		inc word [bp + 20]
1876:	

file_test$515:	; goto 503
1877:		jmp file_test$503
1879:	

file_test$516:	; call header integral zero 0 stack zero 0
1881:	

file_test$517:	; parameter string_0A#, offset 6
1882:		mov word [bp + 28], string_0A#
1884:	

file_test$518:	; call function noellipse-ellipse printf, extra 0
1885:		mov word [bp + 22], file_test$519
1886:		mov [bp + 24], bp
1887:		add bp, 22
1888:		mov di, bp
1889:		jmp printf
1891:	

file_test$519:	; post call
1893:	

file_test$520:	; call header integral zero 0 stack zero 0
1895:	

file_test$521:	; parameter p, offset 6
1896:		mov a2787, [bp + 16]
1897:		mov [bp + 28], a2787
1899:	

file_test$522:	; call function noellipse-noellipse free
1900:		mov word [bp + 22], file_test$523
1901:		mov [bp + 24], bp
1902:		add bp, 22
1903:		jmp free
1905:	

file_test$523:	; post call
1907:	

file_test$524:	; call header integral zero 0 stack zero 0
1909:	

file_test$525:	; parameter inFilePtr, offset 6
1910:		mov a2788, [bp + 10]
1911:		mov [bp + 28], a2788
1913:	

file_test$526:	; call function noellipse-noellipse fclose
1914:		mov word [bp + 22], file_test$527
1915:		mov [bp + 24], bp
1916:		add bp, 22
1917:		jmp fclose
1919:	

file_test$527:	; post call
1921:	

file_test$528:	; personVector[0]$name[0] = 65
1922:		mov byte [bp + 10], 65
1924:	

file_test$529:	; personVector[0]$name[1] = 100
1925:		mov byte [bp + 11], 100
1927:	

file_test$530:	; personVector[0]$name[2] = 97
1928:		mov byte [bp + 12], 97
1930:	

file_test$531:	; personVector[0]$name[3] = 109
1931:		mov byte [bp + 13], 109
1933:	

file_test$532:	; personVector[0]$name[4] = 32
1934:		mov byte [bp + 14], 32
1936:	

file_test$533:	; personVector[0]$name[5] = 66
1937:		mov byte [bp + 15], 66
1939:	

file_test$534:	; personVector[0]$name[6] = 101
1940:		mov byte [bp + 16], 101
1942:	

file_test$535:	; personVector[0]$name[7] = 114
1943:		mov byte [bp + 17], 114
1945:	

file_test$536:	; personVector[0]$name[8] = 116
1946:		mov byte [bp + 18], 116
1948:	

file_test$537:	; personVector[0]$name[9] = 105
1949:		mov byte [bp + 19], 105
1951:	

file_test$538:	; personVector[0]$name[10] = 108
1952:		mov byte [bp + 20], 108
1954:	

file_test$539:	; personVector[0]$name[11] = 115
1955:		mov byte [bp + 21], 115
1957:	

file_test$540:	; personVector[0]$name[12] = 115
1958:		mov byte [bp + 22], 115
1960:	

file_test$541:	; personVector[0]$name[13] = 111
1961:		mov byte [bp + 23], 111
1963:	

file_test$542:	; personVector[0]$name[14] = 110
1964:		mov byte [bp + 24], 110
1966:	

file_test$543:	; personVector[0]$name[15] = 0
1967:		mov byte [bp + 25], 0
1969:	

file_test$544:	; personVector[0]$phone = 12345
1970:		mov word [bp + 58], 12345
1972:	

file_test$545:	; personVector[1]$name[0] = 66
1973:		mov byte [bp + 60], 66
1975:	

file_test$546:	; personVector[1]$name[1] = 101
1976:		mov byte [bp + 61], 101
1978:	

file_test$547:	; personVector[1]$name[2] = 114
1979:		mov byte [bp + 62], 114
1981:	

file_test$548:	; personVector[1]$name[3] = 116
1982:		mov byte [bp + 63], 116
1984:	

file_test$549:	; personVector[1]$name[4] = 105
1985:		mov byte [bp + 64], 105
1987:	

file_test$550:	; personVector[1]$name[5] = 108
1988:		mov byte [bp + 65], 108
1990:	

file_test$551:	; personVector[1]$name[6] = 32
1991:		mov byte [bp + 66], 32
1993:	

file_test$552:	; personVector[1]$name[7] = 67
1994:		mov byte [bp + 67], 67
1996:	

file_test$553:	; personVector[1]$name[8] = 101
1997:		mov byte [bp + 68], 101
1999:	

file_test$554:	; personVector[1]$name[9] = 97
2000:		mov byte [bp + 69], 97
2002:	

file_test$555:	; personVector[1]$name[10] = 115
2003:		mov byte [bp + 70], 115
2005:	

file_test$556:	; personVector[1]$name[11] = 97
2006:		mov byte [bp + 71], 97
2008:	

file_test$557:	; personVector[1]$name[12] = 114
2009:		mov byte [bp + 72], 114
2011:	

file_test$558:	; personVector[1]$name[13] = 115
2012:		mov byte [bp + 73], 115
2014:	

file_test$559:	; personVector[1]$name[14] = 115
2015:		mov byte [bp + 74], 115
2017:	

file_test$560:	; personVector[1]$name[15] = 111
2018:		mov byte [bp + 75], 111
2020:	

file_test$561:	; personVector[1]$name[16] = 110
2021:		mov byte [bp + 76], 110
2023:	

file_test$562:	; personVector[1]$name[17] = 0
2024:		mov byte [bp + 77], 0
2026:	

file_test$563:	; personVector[1]$phone = 23456
2027:		mov word [bp + 108], 23456
2029:	

file_test$564:	; personVector[2]$name[0] = 67
2030:		mov byte [bp + 110], 67
2032:	

file_test$565:	; personVector[2]$name[1] = 101
2033:		mov byte [bp + 111], 101
2035:	

file_test$566:	; personVector[2]$name[2] = 97
2036:		mov byte [bp + 112], 97
2038:	

file_test$567:	; personVector[2]$name[3] = 115
2039:		mov byte [bp + 113], 115
2041:	

file_test$568:	; personVector[2]$name[4] = 97
2042:		mov byte [bp + 114], 97
2044:	

file_test$569:	; personVector[2]$name[5] = 114
2045:		mov byte [bp + 115], 114
2047:	

file_test$570:	; personVector[2]$name[6] = 32
2048:		mov byte [bp + 116], 32
2050:	

file_test$571:	; personVector[2]$name[7] = 68
2051:		mov byte [bp + 117], 68
2053:	

file_test$572:	; personVector[2]$name[8] = 97
2054:		mov byte [bp + 118], 97
2056:	

file_test$573:	; personVector[2]$name[9] = 118
2057:		mov byte [bp + 119], 118
2059:	

file_test$574:	; personVector[2]$name[10] = 105
2060:		mov byte [bp + 120], 105
2062:	

file_test$575:	; personVector[2]$name[11] = 100
2063:		mov byte [bp + 121], 100
2065:	

file_test$576:	; personVector[2]$name[12] = 115
2066:		mov byte [bp + 122], 115
2068:	

file_test$577:	; personVector[2]$name[13] = 115
2069:		mov byte [bp + 123], 115
2071:	

file_test$578:	; personVector[2]$name[14] = 111
2072:		mov byte [bp + 124], 111
2074:	

file_test$579:	; personVector[2]$name[15] = 110
2075:		mov byte [bp + 125], 110
2077:	

file_test$580:	; personVector[2]$name[16] = 0
2078:		mov byte [bp + 126], 0
2080:	

file_test$581:	; personVector[2]$phone = 24567
2081:		mov word [bp + 158], 24567
2083:	

file_test$582:	; call header integral zero 0 stack zero 0
2085:	

file_test$583:	; parameter string_Block2Ebin#, offset 6
2086:		mov word [bp + 216], string_Block2Ebin#
2088:	

file_test$584:	; parameter string_w#, offset 8
2089:		mov word [bp + 218], string_w#
2091:	

file_test$585:	; call function noellipse-noellipse fopen
2092:		mov word [bp + 210], file_test$586
2093:		mov [bp + 212], bp
2094:		add bp, 210
2095:		jmp fopen
2097:	

file_test$586:	; post call
2099:	

file_test$587:	; £temporary4609 = return_value
2104:	

file_test$588:	; outFilePtr = £temporary4609
2105:		mov [bp + 210], t2790
2107:	

file_test$589:	; if outFilePtr != 0 goto 601
2108:		cmp word [bp + 210], 0
2109:		jne file_test$601
2111:	

file_test$590:	; call header integral zero 0 stack zero 0
2113:	

file_test$591:	; parameter stderr, offset 6
2114:		mov a2791, [stderr]
2115:		mov [bp + 218], a2791
2117:	

file_test$592:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2118:		mov word [bp + 220], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2120:	

file_test$593:	; parameter string_outFilePtr20213D20NULL#, offset 10
2121:		mov word [bp + 222], string_outFilePtr20213D20NULL#
2123:	

file_test$594:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2124:		mov word [bp + 224], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2126:	

file_test$595:	; parameter 185, offset 14
2127:		mov word [bp + 226], 185
2129:	

file_test$596:	; call function noellipse-ellipse fprintf, extra 0
2130:		mov word [bp + 212], file_test$597
2131:		mov [bp + 214], bp
2132:		add bp, 212
2133:		mov di, bp
2134:		add di, 6
2135:		jmp fprintf
2137:	

file_test$597:	; post call
2139:	

file_test$598:	; call header integral zero 0 stack zero 0
2141:	

file_test$599:	; call function noellipse-noellipse abort
2142:		mov word [bp + 212], file_test$600
2143:		mov [bp + 214], bp
2144:		add bp, 212
2145:		jmp abort
2147:	

file_test$600:	; post call
2149:	

file_test$601:	; call header integral zero 0 stack zero 0
2151:	

file_test$602:	; parameter personVector, offset 6
2152:		mov [bp + 218], bp
2153:		add word [bp + 218], 10
2155:	

file_test$603:	; parameter 150, offset 8
2156:		mov word [bp + 220], 150
2158:	

file_test$604:	; parameter 1, offset 10
2159:		mov word [bp + 222], 1
2161:	

file_test$605:	; parameter outFilePtr, offset 12
2162:		mov a2792, [bp + 210]
2163:		mov [bp + 224], a2792
2165:	

file_test$606:	; call function noellipse-noellipse fwrite
2166:		mov word [bp + 212], file_test$607
2167:		mov [bp + 214], bp
2168:		add bp, 212
2169:		jmp fwrite
2171:	

file_test$607:	; post call
2173:	

file_test$608:	; call header integral zero 0 stack zero 0
2175:	

file_test$609:	; parameter outFilePtr, offset 6
2176:		mov a2793, [bp + 210]
2177:		mov [bp + 218], a2793
2179:	

file_test$610:	; call function noellipse-noellipse fclose
2180:		mov word [bp + 212], file_test$611
2181:		mov [bp + 214], bp
2182:		add bp, 212
2183:		jmp fclose
2185:	

file_test$611:	; post call
2187:	

file_test$612:	; call header integral zero 0 stack zero 0
2189:	

file_test$613:	; parameter string_Block2Ebin#, offset 6
2190:		mov word [bp + 218], string_Block2Ebin#
2192:	

file_test$614:	; parameter string_r#, offset 8
2193:		mov word [bp + 220], string_r#
2195:	

file_test$615:	; call function noellipse-noellipse fopen
2196:		mov word [bp + 212], file_test$616
2197:		mov [bp + 214], bp
2198:		add bp, 212
2199:		jmp fopen
2201:	

file_test$616:	; post call
2203:	

file_test$617:	; £temporary4616 = return_value
2208:	

file_test$618:	; inFilePtr = £temporary4616
2209:		mov [bp + 212], t2795
2211:	

file_test$619:	; if inFilePtr != 0 goto 631
2212:		cmp word [bp + 212], 0
2213:		jne file_test$631
2215:	

file_test$620:	; call header integral zero 0 stack zero 0
2217:	

file_test$621:	; parameter stderr, offset 6
2218:		mov a2796, [stderr]
2219:		mov [bp + 220], a2796
2221:	

file_test$622:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2222:		mov word [bp + 222], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2224:	

file_test$623:	; parameter string_inFilePtr20213D20NULL#, offset 10
2225:		mov word [bp + 224], string_inFilePtr20213D20NULL#
2227:	

file_test$624:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2228:		mov word [bp + 226], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2230:	

file_test$625:	; parameter 191, offset 14
2231:		mov word [bp + 228], 191
2233:	

file_test$626:	; call function noellipse-ellipse fprintf, extra 0
2234:		mov word [bp + 214], file_test$627
2235:		mov [bp + 216], bp
2236:		add bp, 214
2237:		mov di, bp
2238:		add di, 6
2239:		jmp fprintf
2241:	

file_test$627:	; post call
2243:	

file_test$628:	; call header integral zero 0 stack zero 0
2245:	

file_test$629:	; call function noellipse-noellipse abort
2246:		mov word [bp + 214], file_test$630
2247:		mov [bp + 216], bp
2248:		add bp, 214
2249:		jmp abort
2251:	

file_test$630:	; post call
2253:	

file_test$631:	; call header integral zero 0 stack zero 0
2255:	

file_test$632:	; parameter inFilePtr, offset 6
2256:		mov a2797, [bp + 212]
2257:		mov [bp + 220], a2797
2259:	

file_test$633:	; call function noellipse-noellipse feof
2260:		mov word [bp + 214], file_test$634
2261:		mov [bp + 216], bp
2262:		add bp, 214
2263:		jmp feof
2265:	

file_test$634:	; post call
2267:	

file_test$635:	; £temporary4621 = return_value
2272:	

file_test$636:	; if £temporary4621 != 0 goto 656
2273:		cmp t2799, 0
2274:		jne file_test$656
2276:	

file_test$637:	; call header integral zero 0 stack zero 0
2278:	

file_test$638:	; £temporary4624 = &person
2279:		mov t2800, bp
2280:		add t2800, 160
2282:	

file_test$639:	; parameter £temporary4624, offset 6
2283:		mov [bp + 220], t2800
2285:	

file_test$640:	; parameter 50, offset 8
2286:		mov word [bp + 222], 50
2288:	

file_test$641:	; parameter 1, offset 10
2289:		mov word [bp + 224], 1
2291:	

file_test$642:	; parameter inFilePtr, offset 12
2292:		mov a2801, [bp + 212]
2293:		mov [bp + 226], a2801
2295:	

file_test$643:	; call function noellipse-noellipse fread
2296:		mov word [bp + 214], file_test$644
2297:		mov [bp + 216], bp
2298:		add bp, 214
2299:		jmp fread
2301:	

file_test$644:	; post call
2303:	

file_test$645:	; call header integral zero 0 stack zero 0
2305:	

file_test$646:	; parameter string_Name20203A2025s0A#, offset 6
2306:		mov word [bp + 220], string_Name20203A2025s0A#
2308:	

file_test$647:	; parameter person$name, offset 8
2309:		mov [bp + 222], bp
2310:		add word [bp + 222], 160
2312:	

file_test$648:	; call function noellipse-ellipse printf, extra 0
2313:		mov word [bp + 214], file_test$649
2314:		mov [bp + 216], bp
2315:		add bp, 214
2316:		mov di, bp
2317:		add di, 2
2318:		jmp printf
2320:	

file_test$649:	; post call
2322:	

file_test$650:	; call header integral zero 0 stack zero 0
2324:	

file_test$651:	; parameter string_Phone203A2025d0A#, offset 6
2325:		mov word [bp + 220], string_Phone203A2025d0A#
2327:	

file_test$652:	; parameter person$phone, offset 8
2328:		mov a2802, [bp + 208]
2329:		mov [bp + 222], a2802
2331:	

file_test$653:	; call function noellipse-ellipse printf, extra 0
2332:		mov word [bp + 214], file_test$654
2333:		mov [bp + 216], bp
2334:		add bp, 214
2335:		mov di, bp
2336:		add di, 2
2337:		jmp printf
2339:	

file_test$654:	; post call
2341:	

file_test$655:	; goto 631
2342:		jmp file_test$631
2344:	

file_test$656:	; call header integral zero 0 stack zero 0
2346:	

file_test$657:	; parameter inFilePtr, offset 6
2347:		mov a2803, [bp + 212]
2348:		mov [bp + 220], a2803
2350:	

file_test$658:	; call function noellipse-noellipse fclose
2351:		mov word [bp + 214], file_test$659
2352:		mov [bp + 216], bp
2353:		add bp, 214
2354:		jmp fclose
2356:	

file_test$659:	; post call
2358:	

file_test$660:	; call header integral zero 0 stack zero 0
2360:	

file_test$661:	; parameter string_Test12Etxt#, offset 6
2361:		mov word [bp + 16], string_Test12Etxt#
2363:	

file_test$662:	; parameter string_r#, offset 8
2364:		mov word [bp + 18], string_r#
2366:	

file_test$663:	; call function noellipse-noellipse fopen
2367:		mov word [bp + 10], file_test$664
2368:		mov [bp + 12], bp
2369:		add bp, 10
2370:		jmp fopen
2372:	

file_test$664:	; post call
2374:	

file_test$665:	; £temporary4631 = return_value
2379:	

file_test$666:	; inFilePtr = £temporary4631
2380:		mov [bp + 10], t2805
2382:	

file_test$667:	; if inFilePtr != 0 goto 679
2383:		cmp word [bp + 10], 0
2384:		jne file_test$679
2386:	

file_test$668:	; call header integral zero 0 stack zero 0
2388:	

file_test$669:	; parameter stderr, offset 6
2389:		mov a2806, [stderr]
2390:		mov [bp + 18], a2806
2392:	

file_test$670:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2393:		mov word [bp + 20], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2395:	

file_test$671:	; parameter string_inFilePtr20213D20NULL#, offset 10
2396:		mov word [bp + 22], string_inFilePtr20213D20NULL#
2398:	

file_test$672:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2399:		mov word [bp + 24], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2401:	

file_test$673:	; parameter 204, offset 14
2402:		mov word [bp + 26], 204
2404:	

file_test$674:	; call function noellipse-ellipse fprintf, extra 0
2405:		mov word [bp + 12], file_test$675
2406:		mov [bp + 14], bp
2407:		add bp, 12
2408:		mov di, bp
2409:		add di, 6
2410:		jmp fprintf
2412:	

file_test$675:	; post call
2414:	

file_test$676:	; call header integral zero 0 stack zero 0
2416:	

file_test$677:	; call function noellipse-noellipse abort
2417:		mov word [bp + 12], file_test$678
2418:		mov [bp + 14], bp
2419:		add bp, 12
2420:		jmp abort
2422:	

file_test$678:	; post call
2424:	

file_test$679:	; call header integral zero 0 stack zero 0
2426:	

file_test$680:	; parameter inFilePtr, offset 6
2427:		mov a2807, [bp + 10]
2428:		mov [bp + 18], a2807
2430:	

file_test$681:	; parameter -1, offset 8
2431:		mov word [bp + 20], -1
2433:	

file_test$682:	; parameter 2, offset 10
2434:		mov word [bp + 22], 2
2436:	

file_test$683:	; call function noellipse-noellipse fseek
2437:		mov word [bp + 12], file_test$684
2438:		mov [bp + 14], bp
2439:		add bp, 12
2440:		jmp fseek
2442:	

file_test$684:	; post call
2444:	

file_test$685:	; call header integral zero 0 stack zero 0
2446:	

file_test$686:	; parameter inFilePtr, offset 6
2447:		mov a2808, [bp + 10]
2448:		mov [bp + 20], a2808
2450:	

file_test$687:	; call function noellipse-noellipse ftell
2451:		mov word [bp + 14], file_test$688
2452:		mov [bp + 16], bp
2453:		add bp, 14
2454:		jmp ftell
2456:	

file_test$688:	; post call
2458:	

file_test$689:	; £temporary4637 = return_value
2463:	

file_test$690:	; £temporary4638 = int_to_int £temporary4637 (Signed_Int -> Unsigned_Int)
2466:	

file_test$691:	; u = £temporary4638
2467:		mov [bp + 12], t2810
2469:	

file_test$692:	; if u < 0 goto 713
2470:		cmp word [bp + 12], 0
2471:		jb file_test$713
2473:	

file_test$693:	; call header integral zero 0 stack zero 0
2475:	

file_test$694:	; parameter inFilePtr, offset 6
2476:		mov a2811, [bp + 10]
2477:		mov [bp + 20], a2811
2479:	

file_test$695:	; call function noellipse-noellipse fgetc
2480:		mov word [bp + 14], file_test$696
2481:		mov [bp + 16], bp
2482:		add bp, 14
2483:		jmp fgetc
2485:	

file_test$696:	; post call
2487:	

file_test$697:	; £temporary4640 = return_value
2492:	

file_test$698:	; £temporary4641 = int_to_int £temporary4640 (Signed_Int -> Signed_Char)
2495:		cmp t2813, 0
2496:		jge file_test$699
2497:		neg t2813
2499:		neg t2813
2501:	

file_test$699:	; c = £temporary4641
2502:		mov [bp + 14], t2813
2504:	

file_test$700:	; call header integral zero 0 stack zero 0
2506:	

file_test$701:	; £temporary4642 = int_to_int c (Signed_Char -> Signed_Int)
2507:		mov a2814, [bp + 14]
2509:		and a2814, 255
2511:		cmp a2814, 0
2512:		jge file_test$702
2513:		neg a2814
2515:		neg a2814
2517:	

file_test$702:	; parameter £temporary4642, offset 6
2518:		mov [bp + 21], a2814
2520:	

file_test$703:	; call function noellipse-noellipse putchar
2521:		mov word [bp + 15], file_test$704
2522:		mov [bp + 17], bp
2523:		add bp, 15
2524:		jmp putchar
2526:	

file_test$704:	; post call
2528:	

file_test$705:	; if u == 0 goto 713
2529:		cmp word [bp + 12], 0
2530:		je file_test$713
2532:	

file_test$706:	; call header integral zero 0 stack zero 0
2534:	

file_test$707:	; parameter inFilePtr, offset 6
2535:		mov a2815, [bp + 10]
2536:		mov [bp + 21], a2815
2538:	

file_test$708:	; parameter -2, offset 8
2539:		mov word [bp + 23], -2
2541:	

file_test$709:	; parameter 1, offset 10
2542:		mov word [bp + 25], 1
2544:	

file_test$710:	; call function noellipse-noellipse fseek
2545:		mov word [bp + 15], file_test$711
2546:		mov [bp + 17], bp
2547:		add bp, 15
2548:		jmp fseek
2550:	

file_test$711:	; post call
2552:	

file_test$712:	; goto 685
2553:		jmp file_test$685
2555:	

file_test$713:	; call header integral zero 0 stack zero 0
2557:	

file_test$714:	; parameter string_0A0A#, offset 6
2558:		mov word [bp + 20], string_0A0A#
2560:	

file_test$715:	; call function noellipse-ellipse printf, extra 0
2561:		mov word [bp + 14], file_test$716
2562:		mov [bp + 16], bp
2563:		add bp, 14
2564:		mov di, bp
2565:		jmp printf
2567:	

file_test$716:	; post call
2569:	

file_test$717:	; call header integral zero 0 stack zero 0
2571:	

file_test$718:	; parameter inFilePtr, offset 6
2572:		mov a2816, [bp + 10]
2573:		mov [bp + 20], a2816
2575:	

file_test$719:	; call function noellipse-noellipse fclose
2576:		mov word [bp + 14], file_test$720
2577:		mov [bp + 16], bp
2578:		add bp, 14
2579:		jmp fclose
2581:	

file_test$720:	; post call
2583:	

file_test$721:	; call header integral zero 0 stack zero 0
2585:	

file_test$722:	; parameter string_fileexists20X2025s0A#, offset 6
2586:		mov word [bp + 16], string_fileexists20X2025s0A#
2588:	

file_test$723:	; call header integral zero 0 stack zero 0
2590:	

file_test$724:	; parameter string_X#, offset 14
2591:		mov word [bp + 24], string_X#
2593:	

file_test$725:	; call function noellipse-noellipse fileexists
2594:		mov word [bp + 18], file_test$726
2595:		mov [bp + 20], bp
2596:		add bp, 18
2597:		jmp fileexists
2599:	

file_test$726:	; post call
2601:	

file_test$727:	; £temporary4648 = return_value
2606:	

file_test$728:	; if £temporary4648 == 0 goto 731
2607:		cmp t2818, 0
2608:		je file_test$731
2610:	

file_test$729:	; £temporary4653 = string_Yes#
2611:		mov t2819, string_Yes#
2613:	

file_test$730:	; goto 732
2614:		jmp file_test$732
2616:	

file_test$731:	; £temporary4653 = string_No#
2617:		mov t2820, string_No#
2619:	

file_test$732:	; parameter £temporary4653, offset 8
2620:		mov [bp + 18], t2820
2622:	

file_test$733:	; call function noellipse-ellipse printf, extra 0
2623:		mov word [bp + 10], file_test$734
2624:		mov [bp + 12], bp
2625:		add bp, 10
2626:		mov di, bp
2627:		add di, 2
2628:		jmp printf
2630:	

file_test$734:	; post call
2632:	

file_test$735:	; call header integral zero 0 stack zero 0
2634:	

file_test$736:	; parameter string_fileexists20Y2025s0A0A#, offset 6
2635:		mov word [bp + 16], string_fileexists20Y2025s0A0A#
2637:	

file_test$737:	; call header integral zero 0 stack zero 0
2639:	

file_test$738:	; parameter string_Y#, offset 14
2640:		mov word [bp + 24], string_Y#
2642:	

file_test$739:	; call function noellipse-noellipse fileexists
2643:		mov word [bp + 18], file_test$740
2644:		mov [bp + 20], bp
2645:		add bp, 18
2646:		jmp fileexists
2648:	

file_test$740:	; post call
2650:	

file_test$741:	; £temporary4655 = return_value
2655:	

file_test$742:	; if £temporary4655 == 0 goto 745
2656:		cmp t2822, 0
2657:		je file_test$745
2659:	

file_test$743:	; £temporary4660 = string_Yes#
2660:		mov t2823, string_Yes#
2662:	

file_test$744:	; goto 746
2663:		jmp file_test$746
2665:	

file_test$745:	; £temporary4660 = string_No#
2666:		mov t2824, string_No#
2668:	

file_test$746:	; parameter £temporary4660, offset 8
2669:		mov [bp + 18], t2824
2671:	

file_test$747:	; call function noellipse-ellipse printf, extra 0
2672:		mov word [bp + 10], file_test$748
2673:		mov [bp + 12], bp
2674:		add bp, 10
2675:		mov di, bp
2676:		add di, 2
2677:		jmp printf
2679:	

file_test$748:	; post call
2681:	

file_test$749:	; call header integral zero 0 stack zero 0
2683:	

file_test$750:	; parameter string_PBookX2Etxt#, offset 6
2684:		mov word [bp + 18], string_PBookX2Etxt#
2686:	

file_test$751:	; parameter string_r2B#, offset 8
2687:		mov word [bp + 20], string_r2B#
2689:	

file_test$752:	; call function noellipse-noellipse fopen
2690:		mov word [bp + 12], file_test$753
2691:		mov [bp + 14], bp
2692:		add bp, 12
2693:		jmp fopen
2695:	

file_test$753:	; post call
2697:	

file_test$754:	; £temporary4662 = return_value
2702:	

file_test$755:	; inOutFilePtr = £temporary4662
2703:		mov [bp + 12], t2826
2705:	

file_test$756:	; if inOutFilePtr != 0 goto 768
2706:		cmp word [bp + 12], 0
2707:		jne file_test$768
2709:	

file_test$757:	; call header integral zero 0 stack zero 0
2711:	

file_test$758:	; parameter stderr, offset 6
2712:		mov a2827, [stderr]
2713:		mov [bp + 20], a2827
2715:	

file_test$759:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2716:		mov word [bp + 22], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2718:	

file_test$760:	; parameter string_inOutFilePtr20213D20NULL#, offset 10
2719:		mov word [bp + 24], string_inOutFilePtr20213D20NULL#
2721:	

file_test$761:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2722:		mov word [bp + 26], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2724:	

file_test$762:	; parameter 228, offset 14
2725:		mov word [bp + 28], 228
2727:	

file_test$763:	; call function noellipse-ellipse fprintf, extra 0
2728:		mov word [bp + 14], file_test$764
2729:		mov [bp + 16], bp
2730:		add bp, 14
2731:		mov di, bp
2732:		add di, 6
2733:		jmp fprintf
2735:	

file_test$764:	; post call
2737:	

file_test$765:	; call header integral zero 0 stack zero 0
2739:	

file_test$766:	; call function noellipse-noellipse abort
2740:		mov word [bp + 14], file_test$767
2741:		mov [bp + 16], bp
2742:		add bp, 14
2743:		jmp abort
2745:	

file_test$767:	; post call
2747:	

file_test$768:	; call header integral zero 0 stack zero 0
2749:	

file_test$769:	; call function noellipse-noellipse tmpfile
2750:		mov word [bp + 14], file_test$770
2751:		mov [bp + 16], bp
2752:		add bp, 14
2753:		jmp tmpfile
2755:	

file_test$770:	; post call
2757:	

file_test$771:	; £temporary4667 = return_value
2762:	

file_test$772:	; tempFilePtr = £temporary4667
2763:		mov [bp + 10], t2829
2765:	

file_test$773:	; if tempFilePtr != 0 goto 785
2766:		cmp word [bp + 10], 0
2767:		jne file_test$785
2769:	

file_test$774:	; call header integral zero 0 stack zero 0
2771:	

file_test$775:	; parameter stderr, offset 6
2772:		mov a2830, [stderr]
2773:		mov [bp + 20], a2830
2775:	

file_test$776:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
2776:		mov word [bp + 22], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
2778:	

file_test$777:	; parameter string_tempFilePtr20213D20NULL#, offset 10
2779:		mov word [bp + 24], string_tempFilePtr20213D20NULL#
2781:	

file_test$778:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#, offset 12
2782:		mov word [bp + 26], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#
2784:	

file_test$779:	; parameter 231, offset 14
2785:		mov word [bp + 28], 231
2787:	

file_test$780:	; call function noellipse-ellipse fprintf, extra 0
2788:		mov word [bp + 14], file_test$781
2789:		mov [bp + 16], bp
2790:		add bp, 14
2791:		mov di, bp
2792:		add di, 6
2793:		jmp fprintf
2795:	

file_test$781:	; post call
2797:	

file_test$782:	; call header integral zero 0 stack zero 0
2799:	

file_test$783:	; call function noellipse-noellipse abort
2800:		mov word [bp + 14], file_test$784
2801:		mov [bp + 16], bp
2802:		add bp, 14
2803:		jmp abort
2805:	

file_test$784:	; post call
2807:	

file_test$785:	; call header integral zero 0 stack zero 0
2809:	

file_test$786:	; parameter inOutFilePtr, offset 6
2810:		mov a2831, [bp + 12]
2811:		mov [bp + 20], a2831
2813:	

file_test$787:	; call function noellipse-noellipse fgetc
2814:		mov word [bp + 14], file_test$788
2815:		mov [bp + 16], bp
2816:		add bp, 14
2817:		jmp fgetc
2819:	

file_test$788:	; post call
2821:	

file_test$789:	; £temporary4672 = return_value
2826:	

file_test$790:	; £temporary4673 = int_to_int £temporary4672 (Signed_Int -> Signed_Char)
2829:		cmp t2833, 0
2830:		jge file_test$791
2831:		neg t2833
2833:		neg t2833
2835:	

file_test$791:	; c = £temporary4673
2836:		mov [bp + 14], t2833
2838:	

file_test$792:	; £temporary4674 = int_to_int c (Signed_Char -> Signed_Int)
2839:		mov a2834, [bp + 14]
2841:		and a2834, 255
2843:		cmp a2834, 0
2844:		jge file_test$793
2845:		neg a2834
2847:		neg a2834
2849:	

file_test$793:	; if £temporary4674 == -1 goto 806
2850:		cmp a2834, -1
2851:		je file_test$806
2853:	

file_test$794:	; call header integral zero 0 stack zero 0
2855:	

file_test$795:	; call header integral zero 0 stack zero 0
2857:	

file_test$796:	; £temporary4676 = int_to_int c (Signed_Char -> Signed_Int)
2858:		mov a2835, [bp + 14]
2860:		and a2835, 255
2862:		cmp a2835, 0
2863:		jge file_test$797
2864:		neg a2835
2866:		neg a2835
2868:	

file_test$797:	; parameter £temporary4676, offset 6
2869:		mov [bp + 21], a2835
2871:	

file_test$798:	; call function noellipse-noellipse toupper
2872:		mov word [bp + 15], file_test$799
2873:		mov [bp + 17], bp
2874:		add bp, 15
2875:		jmp toupper
2877:	

file_test$799:	; post call
2879:	

file_test$800:	; £temporary4677 = return_value
2884:	

file_test$801:	; parameter £temporary4677, offset 6
2885:		mov [bp + 21], t2837
2887:	

file_test$802:	; parameter tempFilePtr, offset 8
2888:		mov a2838, [bp + 10]
2889:		mov [bp + 23], a2838
2891:	

file_test$803:	; call function noellipse-noellipse putc
2892:		mov word [bp + 15], file_test$804
2893:		mov [bp + 17], bp
2894:		add bp, 15
2895:		jmp putc
2897:	

file_test$804:	; post call
2899:	

file_test$805:	; goto 785
2900:		jmp file_test$785
2902:	

file_test$806:	; call header integral zero 0 stack zero 0
2904:	

file_test$807:	; parameter tempFilePtr, offset 6
2905:		mov a2839, [bp + 10]
2906:		mov [bp + 20], a2839
2908:	

file_test$808:	; call function noellipse-noellipse rewind
2909:		mov word [bp + 14], file_test$809
2910:		mov [bp + 16], bp
2911:		add bp, 14
2912:		jmp rewind
2914:	

file_test$809:	; post call
2916:	

file_test$810:	; call header integral zero 0 stack zero 0
2918:	

file_test$811:	; parameter inOutFilePtr, offset 6
2919:		mov a2840, [bp + 12]
2920:		mov [bp + 20], a2840
2922:	

file_test$812:	; parameter string_0A2D2D2D2D2D2D2D2D2D2D2D2D0A#, offset 8
2923:		mov word [bp + 22], string_0A2D2D2D2D2D2D2D2D2D2D2D2D0A#
2925:	

file_test$813:	; call function noellipse-ellipse fprintf, extra 0
2926:		mov word [bp + 14], file_test$814
2927:		mov [bp + 16], bp
2928:		add bp, 14
2929:		mov di, bp
2930:		jmp fprintf
2932:	

file_test$814:	; post call
2934:	

file_test$815:	; call header integral zero 0 stack zero 0
2936:	

file_test$816:	; parameter tempFilePtr, offset 6
2937:		mov a2841, [bp + 10]
2938:		mov [bp + 20], a2841
2940:	

file_test$817:	; call function noellipse-noellipse fgetc
2941:		mov word [bp + 14], file_test$818
2942:		mov [bp + 16], bp
2943:		add bp, 14
2944:		jmp fgetc
2946:	

file_test$818:	; post call
2948:	

file_test$819:	; £temporary4682 = return_value
2953:	

file_test$820:	; £temporary4683 = int_to_int £temporary4682 (Signed_Int -> Signed_Char)
2956:		cmp t2843, 0
2957:		jge file_test$821
2958:		neg t2843
2960:		neg t2843
2962:	

file_test$821:	; c = £temporary4683
2963:		mov [bp + 14], t2843
2965:	

file_test$822:	; £temporary4684 = int_to_int c (Signed_Char -> Signed_Int)
2966:		mov a2844, [bp + 14]
2968:		and a2844, 255
2970:		cmp a2844, 0
2971:		jge file_test$823
2972:		neg a2844
2974:		neg a2844
2976:	

file_test$823:	; if £temporary4684 == -1 goto 831
2977:		cmp a2844, -1
2978:		je file_test$831
2980:	

file_test$824:	; call header integral zero 0 stack zero 0
2982:	

file_test$825:	; £temporary4686 = int_to_int c (Signed_Char -> Signed_Int)
2983:		mov a2845, [bp + 14]
2985:		and a2845, 255
2987:		cmp a2845, 0
2988:		jge file_test$826
2989:		neg a2845
2991:		neg a2845
2993:	

file_test$826:	; parameter £temporary4686, offset 6
2994:		mov [bp + 21], a2845
2996:	

file_test$827:	; parameter inOutFilePtr, offset 8
2997:		mov a2846, [bp + 12]
2998:		mov [bp + 23], a2846
3000:	

file_test$828:	; call function noellipse-noellipse putc
3001:		mov word [bp + 15], file_test$829
3002:		mov [bp + 17], bp
3003:		add bp, 15
3004:		jmp putc
3006:	

file_test$829:	; post call
3008:	

file_test$830:	; goto 815
3009:		jmp file_test$815
3011:	

file_test$831:	; call header integral zero 0 stack zero 0
3013:	

file_test$832:	; parameter inOutFilePtr, offset 6
3014:		mov a2847, [bp + 12]
3015:		mov [bp + 20], a2847
3017:	

file_test$833:	; call function noellipse-noellipse fclose
3018:		mov word [bp + 14], file_test$834
3019:		mov [bp + 16], bp
3020:		add bp, 14
3021:		jmp fclose
3023:	

file_test$834:	; post call
3025:	

file_test$835:	; call header integral zero 0 stack zero 0
3027:	

file_test$836:	; parameter tempFilePtr, offset 6
3028:		mov a2848, [bp + 10]
3029:		mov [bp + 20], a2848
3031:	

file_test$837:	; call function noellipse-noellipse fclose
3032:		mov word [bp + 14], file_test$838
3033:		mov [bp + 16], bp
3034:		add bp, 14
3035:		jmp fclose
3037:	

file_test$838:	; post call
3039:	

file_test$839:	; return
3040:		mov t2849, [bp]
3041:		mov di, [bp + 4]
3042:		mov bp, [bp + 2]
3043:		jmp t2849
3045:	

file_test$840:	; function end file_test
