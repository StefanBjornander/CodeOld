1:	

strcpy:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; £temporary3907 = source + index
5:		mov si, [bp + 8]
6:		add si, [bp + 10]
8:	

strcpy$2:	; £temporary3906 -> £temporary3907 = *£temporary3907
10:	

strcpy$3:	; if £temporary3906 -> £temporary3907 == 0 goto 11
11:		cmp byte [si], 0
12:		je strcpy$11
14:	

strcpy$4:	; £temporary3911 = target + index
15:		mov si, [bp + 6]
16:		add si, [bp + 10]
18:	

strcpy$5:	; £temporary3910 -> £temporary3911 = *£temporary3911
20:	

strcpy$6:	; £temporary3913 = source + index
21:		mov di, [bp + 8]
22:		add di, [bp + 10]
24:	

strcpy$7:	; £temporary3912 -> £temporary3913 = *£temporary3913
26:	

strcpy$8:	; £temporary3910 -> £temporary3911 = £temporary3912 -> £temporary3913
27:		mov al, [di]
28:		mov [si], al
30:	

strcpy$9:	; ++index
31:		inc word [bp + 10]
33:	

strcpy$10:	; goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; £temporary3915 = target + index
37:		mov si, [bp + 6]
38:		add si, [bp + 10]
40:	

strcpy$12:	; £temporary3914 -> £temporary3915 = *£temporary3915
42:	

strcpy$13:	; £temporary3914 -> £temporary3915 = 0
43:		mov byte [si], 0
45:	

strcpy$14:	; return_value = target
46:		mov bx, [bp + 6]
48:	

strcpy$15:	; return
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

strcpy$16:	; function end strcpy
1:	

strncpy:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; if index >= size goto 12
5:		mov ax, [bp + 10]
6:		cmp [bp + 12], ax
7:		jge strncpy$12
9:	

strncpy$2:	; £temporary3918 = source + index
10:		mov si, [bp + 8]
11:		add si, [bp + 12]
13:	

strncpy$3:	; £temporary3917 -> £temporary3918 = *£temporary3918
15:	

strncpy$4:	; if £temporary3917 -> £temporary3918 == 0 goto 12
16:		cmp byte [si], 0
17:		je strncpy$12
19:	

strncpy$5:	; £temporary3923 = target + index
20:		mov si, [bp + 6]
21:		add si, [bp + 12]
23:	

strncpy$6:	; £temporary3922 -> £temporary3923 = *£temporary3923
25:	

strncpy$7:	; £temporary3925 = source + index
26:		mov di, [bp + 8]
27:		add di, [bp + 12]
29:	

strncpy$8:	; £temporary3924 -> £temporary3925 = *£temporary3925
31:	

strncpy$9:	; £temporary3922 -> £temporary3923 = £temporary3924 -> £temporary3925
32:		mov al, [di]
33:		mov [si], al
35:	

strncpy$10:	; ++index
36:		inc word [bp + 12]
38:	

strncpy$11:	; goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; if index >= size goto 18
42:		mov ax, [bp + 10]
43:		cmp [bp + 12], ax
44:		jge strncpy$18
46:	

strncpy$13:	; £temporary3929 = target + index
47:		mov si, [bp + 6]
48:		add si, [bp + 12]
50:	

strncpy$14:	; £temporary3928 -> £temporary3929 = *£temporary3929
52:	

strncpy$15:	; £temporary3928 -> £temporary3929 = 0
53:		mov byte [si], 0
55:	

strncpy$16:	; ++index
56:		inc word [bp + 12]
58:	

strncpy$17:	; goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; return_value = target
62:		mov bx, [bp + 6]
64:	

strncpy$19:	; return
65:		mov ax, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp ax
70:	

strncpy$20:	; function end strncpy
1:	

strcat:	; call header integral zero 0 stack zero 0
3:	

strcat$1:	; parameter target, offset 6
4:		mov ax, [bp + 6]
5:		mov [bp + 18], ax
7:	

strcat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; post call
15:	

strcat$4:	; £temporary3930 = return_value
20:	

strcat$5:	; targetLength = £temporary3930
21:		mov [bp + 12], bx
23:	

strcat$6:	; index = 0
24:		mov word [bp + 10], 0
26:	

strcat$7:	; £temporary3932 = source + index
27:		mov si, [bp + 8]
28:		add si, [bp + 10]
30:	

strcat$8:	; £temporary3931 -> £temporary3932 = *£temporary3932
32:	

strcat$9:	; if £temporary3931 -> £temporary3932 == 0 goto 18
33:		cmp byte [si], 0
34:		je strcat$18
36:	

strcat$10:	; £temporary3935 = targetLength + index
37:		mov ax, [bp + 12]
38:		add ax, [bp + 10]
40:	

strcat$11:	; £temporary3937 = target + £temporary3935
41:		mov si, [bp + 6]
42:		add si, ax
44:	

strcat$12:	; £temporary3936 -> £temporary3937 = *£temporary3937
46:	

strcat$13:	; £temporary3939 = source + index
47:		mov di, [bp + 8]
48:		add di, [bp + 10]
50:	

strcat$14:	; £temporary3938 -> £temporary3939 = *£temporary3939
52:	

strcat$15:	; £temporary3936 -> £temporary3937 = £temporary3938 -> £temporary3939
53:		mov al, [di]
54:		mov [si], al
56:	

strcat$16:	; ++index
57:		inc word [bp + 10]
59:	

strcat$17:	; goto 7
60:		jmp strcat$7
62:	

strcat$18:	; £temporary3940 = targetLength + index
63:		mov ax, [bp + 12]
64:		add ax, [bp + 10]
66:	

strcat$19:	; £temporary3942 = target + £temporary3940
67:		mov si, [bp + 6]
68:		add si, ax
70:	

strcat$20:	; £temporary3941 -> £temporary3942 = *£temporary3942
72:	

strcat$21:	; £temporary3941 -> £temporary3942 = 0
73:		mov byte [si], 0
75:	

strcat$22:	; return_value = target
76:		mov bx, [bp + 6]
78:	

strcat$23:	; return
79:		mov ax, [bp]
80:		mov di, [bp + 4]
81:		mov bp, [bp + 2]
82:		jmp ax
84:	

strcat$24:	; function end strcat
1:	

strncat:	; call header integral zero 0 stack zero 0
3:	

strncat$1:	; parameter target, offset 6
4:		mov ax, [bp + 6]
5:		mov [bp + 20], ax
7:	

strncat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; post call
15:	

strncat$4:	; £temporary3944 = return_value
20:	

strncat$5:	; targetLength = £temporary3944
21:		mov [bp + 14], bx
23:	

strncat$6:	; index = 0
24:		mov word [bp + 12], 0
26:	

strncat$7:	; £temporary3945 = size - 1
27:		mov ax, [bp + 10]
28:		sub ax, 1
30:	

strncat$8:	; if index >= £temporary3945 goto 20
31:		cmp [bp + 12], ax
32:		jge strncat$20
34:	

strncat$9:	; £temporary3948 = source + index
35:		mov si, [bp + 8]
36:		add si, [bp + 12]
38:	

strncat$10:	; £temporary3947 -> £temporary3948 = *£temporary3948
40:	

strncat$11:	; if £temporary3947 -> £temporary3948 == 0 goto 20
41:		cmp byte [si], 0
42:		je strncat$20
44:	

strncat$12:	; £temporary3952 = targetLength + index
45:		mov ax, [bp + 14]
46:		add ax, [bp + 12]
48:	

strncat$13:	; £temporary3954 = target + £temporary3952
49:		mov si, [bp + 6]
50:		add si, ax
52:	

strncat$14:	; £temporary3953 -> £temporary3954 = *£temporary3954
54:	

strncat$15:	; £temporary3956 = source + index
55:		mov di, [bp + 8]
56:		add di, [bp + 12]
58:	

strncat$16:	; £temporary3955 -> £temporary3956 = *£temporary3956
60:	

strncat$17:	; £temporary3953 -> £temporary3954 = £temporary3955 -> £temporary3956
61:		mov al, [di]
62:		mov [si], al
64:	

strncat$18:	; ++index
65:		inc word [bp + 12]
67:	

strncat$19:	; goto 7
68:		jmp strncat$7
70:	

strncat$20:	; £temporary3957 = targetLength + size
71:		mov ax, [bp + 14]
72:		add ax, [bp + 10]
74:	

strncat$21:	; £temporary3958 = £temporary3957 - 1
75:		sub ax, 1
77:	

strncat$22:	; £temporary3960 = target + £temporary3958
78:		mov si, [bp + 6]
79:		add si, ax
81:	

strncat$23:	; £temporary3959 -> £temporary3960 = *£temporary3960
83:	

strncat$24:	; £temporary3959 -> £temporary3960 = 0
84:		mov byte [si], 0
86:	

strncat$25:	; return_value = target
87:		mov bx, [bp + 6]
89:	

strncat$26:	; return
90:		mov ax, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp ax
95:	

strncat$27:	; function end strncat
1:	

strcmp:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; £temporary3964 = left + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strcmp$2:	; £temporary3963 -> £temporary3964 = *£temporary3964
10:	

strcmp$3:	; if £temporary3963 -> £temporary3964 != 0 goto 9
11:		cmp byte [si], 0
12:		jne strcmp$9
14:	

strcmp$4:	; £temporary3967 = right + index
15:		mov si, [bp + 8]
16:		add si, [bp + 10]
18:	

strcmp$5:	; £temporary3966 -> £temporary3967 = *£temporary3967
20:	

strcmp$6:	; if £temporary3966 -> £temporary3967 != 0 goto 9
21:		cmp byte [si], 0
22:		jne strcmp$9
24:	

strcmp$7:	; return_value = 0
25:		mov bx, 0
27:	

strcmp$8:	; return
28:		mov ax, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp ax
33:	

strcmp$9:	; £temporary3971 = left + index
34:		mov si, [bp + 6]
35:		add si, [bp + 10]
37:	

strcmp$10:	; £temporary3970 -> £temporary3971 = *£temporary3971
39:	

strcmp$11:	; if £temporary3970 -> £temporary3971 != 0 goto 14
40:		cmp byte [si], 0
41:		jne strcmp$14
43:	

strcmp$12:	; return_value = -1
44:		mov bx, -1
46:	

strcmp$13:	; return
47:		mov ax, [bp]
48:		mov di, [bp + 4]
49:		mov bp, [bp + 2]
50:		jmp ax
52:	

strcmp$14:	; £temporary3974 = right + index
53:		mov si, [bp + 8]
54:		add si, [bp + 10]
56:	

strcmp$15:	; £temporary3973 -> £temporary3974 = *£temporary3974
58:	

strcmp$16:	; if £temporary3973 -> £temporary3974 != 0 goto 19
59:		cmp byte [si], 0
60:		jne strcmp$19
62:	

strcmp$17:	; return_value = 1
63:		mov bx, 1
65:	

strcmp$18:	; return
66:		mov ax, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp ax
71:	

strcmp$19:	; £temporary3977 = left + index
72:		mov si, [bp + 6]
73:		add si, [bp + 10]
75:	

strcmp$20:	; £temporary3976 -> £temporary3977 = *£temporary3977
77:	

strcmp$21:	; £temporary3979 = right + index
78:		mov di, [bp + 8]
79:		add di, [bp + 10]
81:	

strcmp$22:	; £temporary3978 -> £temporary3979 = *£temporary3979
83:	

strcmp$23:	; if £temporary3976 -> £temporary3977 >= £temporary3978 -> £temporary3979 goto 26
84:		mov al, [di]
85:		cmp [si], al
86:		jge strcmp$26
88:	

strcmp$24:	; return_value = -1
89:		mov bx, -1
91:	

strcmp$25:	; return
92:		mov ax, [bp]
93:		mov di, [bp + 4]
94:		mov bp, [bp + 2]
95:		jmp ax
97:	

strcmp$26:	; £temporary3982 = left + index
98:		mov si, [bp + 6]
99:		add si, [bp + 10]
101:	

strcmp$27:	; £temporary3981 -> £temporary3982 = *£temporary3982
103:	

strcmp$28:	; £temporary3984 = right + index
104:		mov di, [bp + 8]
105:		add di, [bp + 10]
107:	

strcmp$29:	; £temporary3983 -> £temporary3984 = *£temporary3984
109:	

strcmp$30:	; if £temporary3981 -> £temporary3982 <= £temporary3983 -> £temporary3984 goto 33
110:		mov al, [di]
111:		cmp [si], al
112:		jle strcmp$33
114:	

strcmp$31:	; return_value = 1
115:		mov bx, 1
117:	

strcmp$32:	; return
118:		mov ax, [bp]
119:		mov di, [bp + 4]
120:		mov bp, [bp + 2]
121:		jmp ax
123:	

strcmp$33:	; ++index
124:		inc word [bp + 10]
126:	

strcmp$34:	; goto 1
127:		jmp strcmp$1
129:	

strcmp$35:	; function end strcmp
1:	

strncmp:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; if index >= size goto 36
5:		mov ax, [bp + 10]
6:		cmp [bp + 12], ax
7:		jge strncmp$36
9:	

strncmp$2:	; £temporary3990 = left + index
10:		mov si, [bp + 6]
11:		add si, [bp + 12]
13:	

strncmp$3:	; £temporary3989 -> £temporary3990 = *£temporary3990
15:	

strncmp$4:	; if £temporary3989 -> £temporary3990 != 0 goto 10
16:		cmp byte [si], 0
17:		jne strncmp$10
19:	

strncmp$5:	; £temporary3993 = right + index
20:		mov si, [bp + 8]
21:		add si, [bp + 12]
23:	

strncmp$6:	; £temporary3992 -> £temporary3993 = *£temporary3993
25:	

strncmp$7:	; if £temporary3992 -> £temporary3993 != 0 goto 10
26:		cmp byte [si], 0
27:		jne strncmp$10
29:	

strncmp$8:	; return_value = 0
30:		mov bx, 0
32:	

strncmp$9:	; return
33:		mov ax, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp ax
38:	

strncmp$10:	; £temporary3997 = left + index
39:		mov si, [bp + 6]
40:		add si, [bp + 12]
42:	

strncmp$11:	; £temporary3996 -> £temporary3997 = *£temporary3997
44:	

strncmp$12:	; if £temporary3996 -> £temporary3997 != 0 goto 15
45:		cmp byte [si], 0
46:		jne strncmp$15
48:	

strncmp$13:	; return_value = -1
49:		mov bx, -1
51:	

strncmp$14:	; return
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

strncmp$15:	; £temporary4000 = right + index
58:		mov si, [bp + 8]
59:		add si, [bp + 12]
61:	

strncmp$16:	; £temporary3999 -> £temporary4000 = *£temporary4000
63:	

strncmp$17:	; if £temporary3999 -> £temporary4000 != 0 goto 20
64:		cmp byte [si], 0
65:		jne strncmp$20
67:	

strncmp$18:	; return_value = 1
68:		mov bx, 1
70:	

strncmp$19:	; return
71:		mov ax, [bp]
72:		mov di, [bp + 4]
73:		mov bp, [bp + 2]
74:		jmp ax
76:	

strncmp$20:	; £temporary4003 = left + index
77:		mov si, [bp + 6]
78:		add si, [bp + 12]
80:	

strncmp$21:	; £temporary4002 -> £temporary4003 = *£temporary4003
82:	

strncmp$22:	; £temporary4005 = right + index
83:		mov di, [bp + 8]
84:		add di, [bp + 12]
86:	

strncmp$23:	; £temporary4004 -> £temporary4005 = *£temporary4005
88:	

strncmp$24:	; if £temporary4002 -> £temporary4003 >= £temporary4004 -> £temporary4005 goto 27
89:		mov al, [di]
90:		cmp [si], al
91:		jge strncmp$27
93:	

strncmp$25:	; return_value = -1
94:		mov bx, -1
96:	

strncmp$26:	; return
97:		mov ax, [bp]
98:		mov di, [bp + 4]
99:		mov bp, [bp + 2]
100:		jmp ax
102:	

strncmp$27:	; £temporary4008 = left + index
103:		mov si, [bp + 6]
104:		add si, [bp + 12]
106:	

strncmp$28:	; £temporary4007 -> £temporary4008 = *£temporary4008
108:	

strncmp$29:	; £temporary4010 = right + index
109:		mov di, [bp + 8]
110:		add di, [bp + 12]
112:	

strncmp$30:	; £temporary4009 -> £temporary4010 = *£temporary4010
114:	

strncmp$31:	; if £temporary4007 -> £temporary4008 <= £temporary4009 -> £temporary4010 goto 34
115:		mov al, [di]
116:		cmp [si], al
117:		jle strncmp$34
119:	

strncmp$32:	; return_value = 1
120:		mov bx, 1
122:	

strncmp$33:	; return
123:		mov ax, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp ax
128:	

strncmp$34:	; ++index
129:		inc word [bp + 12]
131:	

strncmp$35:	; goto 1
132:		jmp strncmp$1
134:	

strncmp$36:	; return_value = 0
135:		mov bx, 0
137:	

strncmp$37:	; return
138:		mov ax, [bp]
139:		mov di, [bp + 4]
140:		mov bp, [bp + 2]
141:		jmp ax
143:	

strncmp$38:	; function end strncmp
1:	

strchr:	; £temporary4012 = int_to_int i (Signed_Int -> Signed_Char)
2:		mov ax, [bp + 8]
5:		cmp ax, 0
6:		jge strchr$1
7:		neg ax
9:		neg al
11:	

strchr$1:	; c = £temporary4012
12:		mov [bp + 12], al
14:	

strchr$2:	; index = 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; £temporary4014 = text + index
18:		mov si, [bp + 6]
19:		add si, [bp + 10]
21:	

strchr$4:	; £temporary4013 -> £temporary4014 = *£temporary4014
23:	

strchr$5:	; if £temporary4013 -> £temporary4014 == 0 goto 16
24:		cmp byte [si], 0
25:		je strchr$16
27:	

strchr$6:	; £temporary4018 = text + index
28:		mov si, [bp + 6]
29:		add si, [bp + 10]
31:	

strchr$7:	; £temporary4017 -> £temporary4018 = *£temporary4018
33:	

strchr$8:	; if £temporary4017 -> £temporary4018 != c goto 14
34:		mov al, [bp + 12]
35:		cmp [si], al
36:		jne strchr$14
38:	

strchr$9:	; £temporary4021 = text + index
39:		mov bx, [bp + 6]
40:		add bx, [bp + 10]
42:	

strchr$10:	; £temporary4020 -> £temporary4021 = *£temporary4021
44:	

strchr$11:	; £temporary4022 = &£temporary4020 -> £temporary4021
46:	

strchr$12:	; return_value = £temporary4022
48:	

strchr$13:	; return
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

strchr$14:	; ++index
55:		inc word [bp + 10]
57:	

strchr$15:	; goto 3
58:		jmp strchr$3
60:	

strchr$16:	; return_value = 0
61:		mov bx, 0
63:	

strchr$17:	; return
64:		mov ax, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp ax
69:	

strchr$18:	; function end strchr
1:	

strrchr:	; result = 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; £temporary4023 = int_to_int i (Signed_Int -> Signed_Char)
5:		mov ax, [bp + 8]
8:		cmp ax, 0
9:		jge strrchr$2
10:		neg ax
12:		neg al
14:	

strrchr$2:	; c = £temporary4023
15:		mov [bp + 14], al
17:	

strrchr$3:	; index = 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; £temporary4025 = text + index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strrchr$5:	; £temporary4024 -> £temporary4025 = *£temporary4025
26:	

strrchr$6:	; if £temporary4024 -> £temporary4025 == 0 goto 16
27:		cmp byte [si], 0
28:		je strrchr$16
30:	

strrchr$7:	; £temporary4029 = text + index
31:		mov si, [bp + 6]
32:		add si, [bp + 10]
34:	

strrchr$8:	; £temporary4028 -> £temporary4029 = *£temporary4029
36:	

strrchr$9:	; if £temporary4028 -> £temporary4029 != c goto 14
37:		mov al, [bp + 14]
38:		cmp [si], al
39:		jne strrchr$14
41:	

strrchr$10:	; £temporary4032 = text + index
42:		mov si, [bp + 6]
43:		add si, [bp + 10]
45:	

strrchr$11:	; £temporary4031 -> £temporary4032 = *£temporary4032
47:	

strrchr$12:	; £temporary4033 = &£temporary4031 -> £temporary4032
49:	

strrchr$13:	; result = £temporary4033
50:		mov [bp + 12], si
52:	

strrchr$14:	; ++index
53:		inc word [bp + 10]
55:	

strrchr$15:	; goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; return_value = result
59:		mov bx, [bp + 12]
61:	

strrchr$17:	; return
62:		mov ax, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp ax
67:	

strrchr$18:	; function end strrchr
1:	

strspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; £temporary4035 = mainString + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strspn$2:	; £temporary4034 -> £temporary4035 = *£temporary4035
10:	

strspn$3:	; if £temporary4034 -> £temporary4035 == 0 goto 18
11:		cmp byte [si], 0
12:		je strspn$18
14:	

strspn$4:	; call header integral zero 0 stack zero 0
16:	

strspn$5:	; parameter charSet, offset 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strspn$6:	; £temporary4039 = mainString + index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strspn$7:	; £temporary4038 -> £temporary4039 = *£temporary4039
26:	

strspn$8:	; £temporary4040 = int_to_int £temporary4038 -> £temporary4039 (Signed_Char -> Signed_Int)
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strspn$9
33:		neg al
35:		neg ax
37:	

strspn$9:	; parameter £temporary4040, offset 8
38:		mov [bp + 20], ax
40:	

strspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; post call
48:	

strspn$12:	; £temporary4041 = return_value
53:	

strspn$13:	; if £temporary4041 != 0 goto 16
54:		cmp bx, 0
55:		jne strspn$16
57:	

strspn$14:	; return_value = index
58:		mov bx, [bp + 10]
60:	

strspn$15:	; return
61:		mov ax, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp ax
66:	

strspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strspn$17:	; goto 1
70:		jmp strspn$1
72:	

strspn$18:	; return_value = -1
73:		mov bx, -1
75:	

strspn$19:	; return
76:		mov ax, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp ax
81:	

strspn$20:	; function end strspn
1:	

strcspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; £temporary4046 = mainString + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strcspn$2:	; £temporary4045 -> £temporary4046 = *£temporary4046
10:	

strcspn$3:	; if £temporary4045 -> £temporary4046 == 0 goto 18
11:		cmp byte [si], 0
12:		je strcspn$18
14:	

strcspn$4:	; call header integral zero 0 stack zero 0
16:	

strcspn$5:	; parameter charSet, offset 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strcspn$6:	; £temporary4050 = mainString + index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strcspn$7:	; £temporary4049 -> £temporary4050 = *£temporary4050
26:	

strcspn$8:	; £temporary4051 = int_to_int £temporary4049 -> £temporary4050 (Signed_Char -> Signed_Int)
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strcspn$9
33:		neg al
35:		neg ax
37:	

strcspn$9:	; parameter £temporary4051, offset 8
38:		mov [bp + 20], ax
40:	

strcspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; post call
48:	

strcspn$12:	; £temporary4052 = return_value
53:	

strcspn$13:	; if £temporary4052 == 0 goto 16
54:		cmp bx, 0
55:		je strcspn$16
57:	

strcspn$14:	; return_value = index
58:		mov bx, [bp + 10]
60:	

strcspn$15:	; return
61:		mov ax, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp ax
66:	

strcspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strcspn$17:	; goto 1
70:		jmp strcspn$1
72:	

strcspn$18:	; return_value = -1
73:		mov bx, -1
75:	

strcspn$19:	; return
76:		mov ax, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp ax
81:	

strcspn$20:	; function end strcspn
1:	

strpbrk:	; index = 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; £temporary4057 = mainString + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strpbrk$2:	; £temporary4056 -> £temporary4057 = *£temporary4057
10:	

strpbrk$3:	; if £temporary4056 -> £temporary4057 == 0 goto 21
11:		cmp byte [si], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; call header integral zero 0 stack zero 0
16:	

strpbrk$5:	; parameter charSet, offset 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strpbrk$6:	; £temporary4061 = mainString + index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strpbrk$7:	; £temporary4060 -> £temporary4061 = *£temporary4061
26:	

strpbrk$8:	; £temporary4062 = int_to_int £temporary4060 -> £temporary4061 (Signed_Char -> Signed_Int)
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strpbrk$9
33:		neg al
35:		neg ax
37:	

strpbrk$9:	; parameter £temporary4062, offset 8
38:		mov [bp + 20], ax
40:	

strpbrk$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; post call
48:	

strpbrk$12:	; £temporary4063 = return_value
53:	

strpbrk$13:	; if £temporary4063 == 0 goto 19
54:		cmp bx, 0
55:		je strpbrk$19
57:	

strpbrk$14:	; £temporary4066 = mainString + index
58:		mov bx, [bp + 6]
59:		add bx, [bp + 10]
61:	

strpbrk$15:	; £temporary4065 -> £temporary4066 = *£temporary4066
63:	

strpbrk$16:	; £temporary4067 = &£temporary4065 -> £temporary4066
65:	

strpbrk$17:	; return_value = £temporary4067
67:	

strpbrk$18:	; return
68:		mov ax, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp ax
73:	

strpbrk$19:	; ++index
74:		inc word [bp + 10]
76:	

strpbrk$20:	; goto 1
77:		jmp strpbrk$1
79:	

strpbrk$21:	; return_value = 0
80:		mov bx, 0
82:	

strpbrk$22:	; return
83:		mov ax, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp ax
88:	

strpbrk$23:	; function end strpbrk
1:	

strstr:	; index = 0
2:		mov word [bp + 10], 0
4:	

strstr$1:	; £temporary4071 = mainString + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strstr$2:	; £temporary4070 -> £temporary4071 = *£temporary4071
10:	

strstr$3:	; if £temporary4070 -> £temporary4071 == 0 goto 19
11:		cmp byte [si], 0
12:		je strstr$19
14:	

strstr$4:	; call header integral zero 0 stack zero 0
16:	

strstr$5:	; £temporary4074 = mainString + index
17:		mov ax, [bp + 6]
18:		add ax, [bp + 10]
20:	

strstr$6:	; parameter £temporary4074, offset 6
21:		mov [bp + 18], ax
23:	

strstr$7:	; parameter subString, offset 8
24:		mov ax, [bp + 8]
25:		mov [bp + 20], ax
27:	

strstr$8:	; call function noellipse-noellipse strcmp
28:		mov word [bp + 12], strstr$9
29:		mov [bp + 14], bp
30:		add bp, 12
31:		jmp strcmp
33:	

strstr$9:	; post call
35:	

strstr$10:	; £temporary4075 = return_value
40:	

strstr$11:	; if £temporary4075 != 0 goto 17
41:		cmp bx, 0
42:		jne strstr$17
44:	

strstr$12:	; £temporary4078 = mainString + index
45:		mov bx, [bp + 6]
46:		add bx, [bp + 10]
48:	

strstr$13:	; £temporary4077 -> £temporary4078 = *£temporary4078
50:	

strstr$14:	; £temporary4079 = &£temporary4077 -> £temporary4078
52:	

strstr$15:	; return_value = £temporary4079
54:	

strstr$16:	; return
55:		mov ax, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp ax
60:	

strstr$17:	; ++index
61:		inc word [bp + 10]
63:	

strstr$18:	; goto 1
64:		jmp strstr$1
66:	

strstr$19:	; return_value = 0
67:		mov bx, 0
69:	

strstr$20:	; return
70:		mov ax, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp ax
75:	

strstr$21:	; function end strstr
1:	

strlen:	; index = 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; £temporary4083 = string + index
5:		mov si, [bp + 6]
6:		add si, [bp + 8]
8:	

strlen$2:	; £temporary4082 -> £temporary4083 = *£temporary4083
10:	

strlen$3:	; if £temporary4082 -> £temporary4083 == 0 goto 6
11:		cmp byte [si], 0
12:		je strlen$6
14:	

strlen$4:	; ++index
15:		inc word [bp + 8]
17:	

strlen$5:	; goto 1
18:		jmp strlen$1
20:	

strlen$6:	; return_value = index
21:		mov bx, [bp + 8]
23:	

strlen$7:	; return
24:		mov ax, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp ax
29:	

strlen$8:	; function end strlen
1:	

strerror:	; call header integral zero 0 stack zero 0
3:	

strerror$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; post call
11:	

strerror$3:	; £temporary4086 = return_value
16:	

strerror$4:	; localeConvPtr = £temporary4086
17:		mov [bp + 8], bx
19:	

strerror$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 8], 0
21:		je strerror$9
23:	

strerror$6:	; £temporary4088 -> localeConvPtr = *localeConvPtr, offset 16
24:		mov si, [bp + 8]
26:	

strerror$7:	; £temporary4092 = £temporary4088 -> localeConvPtr
27:		mov ax, [si + 16]
29:	

strerror$8:	; goto 10
30:		jmp strerror$10
32:	

strerror$9:	; £temporary4092 = 0
33:		mov ax, 0
35:	

strerror$10:	; messageList = £temporary4092
36:		mov [bp + 10], ax
38:	

strerror$11:	; if messageList == 0 goto 14
39:		cmp word [bp + 10], 0
40:		je strerror$14
42:	

strerror$12:	; £temporary4097 = messageList
43:		mov ax, [bp + 10]
45:	

strerror$13:	; goto 15
46:		jmp strerror$15
48:	

strerror$14:	; £temporary4097 = enMessageList
49:		mov ax, enMessageList
51:	

strerror$15:	; messageList = £temporary4097
52:		mov [bp + 10], ax
54:	

strerror$16:	; £temporary4099 = errno * 2
55:		mov ax, [bp + 6]
57:		xor dx, dx
58:		mul word [int2$2#]
64:	

strerror$17:	; £temporary4100 = messageList + £temporary4099
65:		mov si, [bp + 10]
66:		add si, ax
68:	

strerror$18:	; £temporary4098 -> £temporary4100 = *£temporary4100
70:	

strerror$19:	; return_value = £temporary4098 -> £temporary4100
71:		mov bx, [si]
73:	

strerror$20:	; return
74:		mov ax, [bp]
75:		mov di, [bp + 4]
76:		mov bp, [bp + 2]
77:		jmp ax
79:	

strerror$21:	; function end strerror
1:	

strtok:	; if string == 0 goto 37
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; £temporary4102 -> string = *string
6:		mov si, [bp + 6]
8:	

strtok$2:	; if £temporary4102 -> string != 0 goto 5
9:		cmp byte [si], 0
10:		jne strtok$5
12:	

strtok$3:	; return_value = 0
13:		mov bx, 0
15:	

strtok$4:	; return
16:		mov ax, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp ax
21:	

strtok$5:	; index = 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; £temporary4105 = string + index
25:		mov si, [bp + 6]
26:		add si, [bp + 10]
28:	

strtok$7:	; £temporary4104 -> £temporary4105 = *£temporary4105
30:	

strtok$8:	; if £temporary4104 -> £temporary4105 == 0 goto 31
31:		cmp byte [si], 0
32:		je strtok$31
34:	

strtok$9:	; call header integral zero 0 stack zero 0
36:	

strtok$10:	; parameter charSet, offset 6
37:		mov ax, [bp + 8]
38:		mov [bp + 20], ax
40:	

strtok$11:	; £temporary4109 = string + index
41:		mov si, [bp + 6]
42:		add si, [bp + 10]
44:	

strtok$12:	; £temporary4108 -> £temporary4109 = *£temporary4109
46:	

strtok$13:	; £temporary4110 = int_to_int £temporary4108 -> £temporary4109 (Signed_Char -> Signed_Int)
47:		mov al, [si]
49:		and ax, 255
51:		cmp al, 0
52:		jge strtok$14
53:		neg al
55:		neg ax
57:	

strtok$14:	; parameter £temporary4110, offset 8
58:		mov [bp + 22], ax
60:	

strtok$15:	; call function noellipse-noellipse strchr
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; post call
68:	

strtok$17:	; £temporary4111 = return_value
73:	

strtok$18:	; if £temporary4111 == 0 goto 29
74:		cmp bx, 0
75:		je strtok$29
77:	

strtok$19:	; £temporary4114 = string + index
78:		mov si, [bp + 6]
79:		add si, [bp + 10]
81:	

strtok$20:	; £temporary4113 -> £temporary4114 = *£temporary4114
83:	

strtok$21:	; £temporary4113 -> £temporary4114 = 0
84:		mov byte [si], 0
86:	

strtok$22:	; £temporary4115 = index + 1
87:		mov ax, [bp + 10]
88:		add ax, 1
90:	

strtok$23:	; £temporary4117 = string + £temporary4115
91:		mov si, [bp + 6]
92:		add si, ax
94:	

strtok$24:	; £temporary4116 -> £temporary4117 = *£temporary4117
96:	

strtok$25:	; £temporary4118 = &£temporary4116 -> £temporary4117
98:	

strtok$26:	; token = £temporary4118
99:		mov [token], si
101:	

strtok$27:	; return_value = string
102:		mov bx, [bp + 6]
104:	

strtok$28:	; return
105:		mov ax, [bp]
106:		mov di, [bp + 4]
107:		mov bp, [bp + 2]
108:		jmp ax
110:	

strtok$29:	; ++index
111:		inc word [bp + 10]
113:	

strtok$30:	; goto 6
114:		jmp strtok$6
116:	

strtok$31:	; £temporary4120 = string + index
117:		mov si, [bp + 6]
118:		add si, [bp + 10]
120:	

strtok$32:	; £temporary4119 -> £temporary4120 = *£temporary4120
122:	

strtok$33:	; £temporary4121 = &£temporary4119 -> £temporary4120
124:	

strtok$34:	; token = £temporary4121
125:		mov [token], si
127:	

strtok$35:	; return_value = string
128:		mov bx, [bp + 6]
130:	

strtok$36:	; return
131:		mov ax, [bp]
132:		mov di, [bp + 4]
133:		mov bp, [bp + 2]
134:		jmp ax
136:	

strtok$37:	; if token != 0 goto 40
137:		cmp word [token], 0
138:		jne strtok$40
140:	

strtok$38:	; return_value = 0
141:		mov bx, 0
143:	

strtok$39:	; return
144:		mov ax, [bp]
145:		mov di, [bp + 4]
146:		mov bp, [bp + 2]
147:		jmp ax
149:	

strtok$40:	; if (token,0) != 0 goto 43
150:		mov si, [token]
151:		cmp byte [si], 0
152:		jne strtok$43
154:	

strtok$41:	; return_value = 0
155:		mov bx, 0
157:	

strtok$42:	; return
158:		mov ax, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp ax
163:	

strtok$43:	; index = 0
164:		mov word [bp + 10], 0
166:	

strtok$44:	; £temporary4126 = token + index
167:		mov si, [token]
168:		add si, [bp + 10]
170:	

strtok$45:	; £temporary4125 -> £temporary4126 = *£temporary4126
172:	

strtok$46:	; if £temporary4125 -> £temporary4126 == 0 goto 70
173:		cmp byte [si], 0
174:		je strtok$70
176:	

strtok$47:	; call header integral zero 0 stack zero 0
178:	

strtok$48:	; parameter charSet, offset 6
179:		mov ax, [bp + 8]
180:		mov [bp + 20], ax
182:	

strtok$49:	; £temporary4130 = token + index
183:		mov si, [token]
184:		add si, [bp + 10]
186:	

strtok$50:	; £temporary4129 -> £temporary4130 = *£temporary4130
188:	

strtok$51:	; £temporary4131 = int_to_int £temporary4129 -> £temporary4130 (Signed_Char -> Signed_Int)
189:		mov al, [si]
191:		and ax, 255
193:		cmp al, 0
194:		jge strtok$52
195:		neg al
197:		neg ax
199:	

strtok$52:	; parameter £temporary4131, offset 8
200:		mov [bp + 22], ax
202:	

strtok$53:	; call function noellipse-noellipse strchr
203:		mov word [bp + 14], strtok$54
204:		mov [bp + 16], bp
205:		add bp, 14
206:		jmp strchr
208:	

strtok$54:	; post call
210:	

strtok$55:	; £temporary4132 = return_value
215:	

strtok$56:	; if £temporary4132 == 0 goto 68
216:		cmp bx, 0
217:		je strtok$68
219:	

strtok$57:	; tokenStart2 = token
220:		mov ax, [token]
221:		mov [bp + 14], ax
223:	

strtok$58:	; £temporary4135 = token + index
224:		mov si, [token]
225:		add si, [bp + 10]
227:	

strtok$59:	; £temporary4134 -> £temporary4135 = *£temporary4135
229:	

strtok$60:	; £temporary4134 -> £temporary4135 = 0
230:		mov byte [si], 0
232:	

strtok$61:	; £temporary4136 = index + 1
233:		mov ax, [bp + 10]
234:		add ax, 1
236:	

strtok$62:	; £temporary4138 = token + £temporary4136
237:		mov si, [token]
238:		add si, ax
240:	

strtok$63:	; £temporary4137 -> £temporary4138 = *£temporary4138
242:	

strtok$64:	; £temporary4139 = &£temporary4137 -> £temporary4138
244:	

strtok$65:	; token = £temporary4139
245:		mov [token], si
247:	

strtok$66:	; return_value = tokenStart2
248:		mov bx, [bp + 14]
250:	

strtok$67:	; return
251:		mov ax, [bp]
252:		mov di, [bp + 4]
253:		mov bp, [bp + 2]
254:		jmp ax
256:	

strtok$68:	; ++index
257:		inc word [bp + 10]
259:	

strtok$69:	; goto 44
260:		jmp strtok$44
262:	

strtok$70:	; tokenStart = token
263:		mov ax, [token]
264:		mov [bp + 12], ax
266:	

strtok$71:	; £temporary4141 = token + index
267:		mov si, [token]
268:		add si, [bp + 10]
270:	

strtok$72:	; £temporary4140 -> £temporary4141 = *£temporary4141
272:	

strtok$73:	; £temporary4142 = &£temporary4140 -> £temporary4141
274:	

strtok$74:	; token = £temporary4142
275:		mov [token], si
277:	

strtok$75:	; return_value = tokenStart
278:		mov bx, [bp + 12]
280:	

strtok$76:	; return
281:		mov ax, [bp]
282:		mov di, [bp + 4]
283:		mov bp, [bp + 2]
284:		jmp ax
286:	

strtok$77:	; function end strtok
1:	

memcpy:	; £temporary4147 = int_to_int target (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memcpy$1:	; charTarget = £temporary4147
6:		mov [bp + 12], ax
8:	

memcpy$2:	; £temporary4148 = int_to_int source (Pointer -> Pointer)
9:		mov ax, [bp + 8]
12:	

memcpy$3:	; charSource = £temporary4148
13:		mov [bp + 14], ax
15:	

memcpy$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; if index >= size goto 13
19:		mov ax, [bp + 10]
20:		cmp [bp + 16], ax
21:		jge memcpy$13
23:	

memcpy$6:	; £temporary4152 = charTarget + index
24:		mov si, [bp + 12]
25:		add si, [bp + 16]
27:	

memcpy$7:	; £temporary4151 -> £temporary4152 = *£temporary4152
29:	

memcpy$8:	; £temporary4154 = charSource + index
30:		mov di, [bp + 14]
31:		add di, [bp + 16]
33:	

memcpy$9:	; £temporary4153 -> £temporary4154 = *£temporary4154
35:	

memcpy$10:	; £temporary4151 -> £temporary4152 = £temporary4153 -> £temporary4154
36:		mov al, [di]
37:		mov [si], al
39:	

memcpy$11:	; ++index
40:		inc word [bp + 16]
42:	

memcpy$12:	; goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; £temporary4155 = int_to_int target (Pointer -> Pointer)
46:		mov bx, [bp + 6]
49:	

memcpy$14:	; return_value = £temporary4155
51:	

memcpy$15:	; return
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

memcpy$16:	; function end memcpy
1:	

memmove:	; £temporary4156 = int_to_int target (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memmove$1:	; charTarget = £temporary4156
6:		mov [bp + 12], ax
8:	

memmove$2:	; £temporary4157 = int_to_int source (Pointer -> Pointer)
9:		mov ax, [bp + 8]
12:	

memmove$3:	; charSource = £temporary4157
13:		mov [bp + 14], ax
15:	

memmove$4:	; if source >= target goto 14
16:		mov ax, [bp + 6]
17:		cmp [bp + 8], ax
18:		jge memmove$14
20:	

memmove$5:	; index = size - 1
21:		mov ax, [bp + 10]
22:		sub ax, 1
23:		mov [bp + 16], ax
25:	

memmove$6:	; if index < 0 goto 23
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; £temporary4163 = charTarget + index
30:		mov si, [bp + 12]
31:		add si, [bp + 16]
33:	

memmove$8:	; £temporary4162 -> £temporary4163 = *£temporary4163
35:	

memmove$9:	; £temporary4165 = charSource + index
36:		mov di, [bp + 14]
37:		add di, [bp + 16]
39:	

memmove$10:	; £temporary4164 -> £temporary4165 = *£temporary4165
41:	

memmove$11:	; £temporary4162 -> £temporary4163 = £temporary4164 -> £temporary4165
42:		mov al, [di]
43:		mov [si], al
45:	

memmove$12:	; --index
46:		dec word [bp + 16]
48:	

memmove$13:	; goto 6
49:		jmp memmove$6
51:	

memmove$14:	; index = 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; if index >= size goto 23
55:		mov ax, [bp + 10]
56:		cmp [bp + 16], ax
57:		jge memmove$23
59:	

memmove$16:	; £temporary4169 = charTarget + index
60:		mov si, [bp + 12]
61:		add si, [bp + 16]
63:	

memmove$17:	; £temporary4168 -> £temporary4169 = *£temporary4169
65:	

memmove$18:	; £temporary4171 = charSource + index
66:		mov di, [bp + 14]
67:		add di, [bp + 16]
69:	

memmove$19:	; £temporary4170 -> £temporary4171 = *£temporary4171
71:	

memmove$20:	; £temporary4168 -> £temporary4169 = £temporary4170 -> £temporary4171
72:		mov al, [di]
73:		mov [si], al
75:	

memmove$21:	; ++index
76:		inc word [bp + 16]
78:	

memmove$22:	; goto 15
79:		jmp memmove$15
81:	

memmove$23:	; £temporary4172 = int_to_int target (Pointer -> Pointer)
82:		mov bx, [bp + 6]
85:	

memmove$24:	; return_value = £temporary4172
87:	

memmove$25:	; return
88:		mov ax, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp ax
93:	

memmove$26:	; function end memmove
1:	

memcmp:	; £temporary4173 = int_to_int left (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memcmp$1:	; charLeft = £temporary4173
6:		mov [bp + 12], ax
8:	

memcmp$2:	; £temporary4174 = int_to_int right (Pointer -> Pointer)
9:		mov ax, [bp + 8]
12:	

memcmp$3:	; charRight = £temporary4174
13:		mov [bp + 14], ax
15:	

memcmp$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; if index >= size goto 22
19:		mov ax, [bp + 10]
20:		cmp [bp + 16], ax
21:		jge memcmp$22
23:	

memcmp$6:	; £temporary4178 = charLeft + index
24:		mov si, [bp + 12]
25:		add si, [bp + 16]
27:	

memcmp$7:	; £temporary4177 -> £temporary4178 = *£temporary4178
29:	

memcmp$8:	; £temporary4180 = charRight + index
30:		mov di, [bp + 14]
31:		add di, [bp + 16]
33:	

memcmp$9:	; £temporary4179 -> £temporary4180 = *£temporary4180
35:	

memcmp$10:	; if £temporary4177 -> £temporary4178 >= £temporary4179 -> £temporary4180 goto 13
36:		mov al, [di]
37:		cmp [si], al
38:		jge memcmp$13
40:	

memcmp$11:	; return_value = -1
41:		mov bx, -1
43:	

memcmp$12:	; return
44:		mov ax, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp ax
49:	

memcmp$13:	; £temporary4183 = charLeft + index
50:		mov si, [bp + 12]
51:		add si, [bp + 16]
53:	

memcmp$14:	; £temporary4182 -> £temporary4183 = *£temporary4183
55:	

memcmp$15:	; £temporary4185 = charRight + index
56:		mov di, [bp + 14]
57:		add di, [bp + 16]
59:	

memcmp$16:	; £temporary4184 -> £temporary4185 = *£temporary4185
61:	

memcmp$17:	; if £temporary4182 -> £temporary4183 <= £temporary4184 -> £temporary4185 goto 20
62:		mov al, [di]
63:		cmp [si], al
64:		jle memcmp$20
66:	

memcmp$18:	; return_value = 1
67:		mov bx, 1
69:	

memcmp$19:	; return
70:		mov ax, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp ax
75:	

memcmp$20:	; ++index
76:		inc word [bp + 16]
78:	

memcmp$21:	; goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; return_value = 0
82:		mov bx, 0
84:	

memcmp$23:	; return
85:		mov ax, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp ax
90:	

memcmp$24:	; function end memcmp
1:	

memchr:	; £temporary4187 = int_to_int block (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memchr$1:	; charBlock = £temporary4187
6:		mov [bp + 14], ax
8:	

memchr$2:	; £temporary4188 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov ax, [bp + 8]
12:		cmp ax, 0
13:		jge memchr$3
14:		neg ax
16:		neg al
18:	

memchr$3:	; c = £temporary4188
19:		mov [bp + 16], al
21:	

memchr$4:	; index = 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; if index >= size goto 17
25:		mov ax, [bp + 10]
26:		cmp [bp + 12], ax
27:		jge memchr$17
29:	

memchr$6:	; £temporary4192 = charBlock + index
30:		mov si, [bp + 14]
31:		add si, [bp + 12]
33:	

memchr$7:	; £temporary4191 -> £temporary4192 = *£temporary4192
35:	

memchr$8:	; if £temporary4191 -> £temporary4192 != c goto 15
36:		mov al, [bp + 16]
37:		cmp [si], al
38:		jne memchr$15
40:	

memchr$9:	; £temporary4195 = charBlock + index
41:		mov bx, [bp + 14]
42:		add bx, [bp + 12]
44:	

memchr$10:	; £temporary4194 -> £temporary4195 = *£temporary4195
46:	

memchr$11:	; £temporary4196 = &£temporary4194 -> £temporary4195
48:	

memchr$12:	; £temporary4197 = int_to_int £temporary4196 (Pointer -> Pointer)
51:	

memchr$13:	; return_value = £temporary4197
53:	

memchr$14:	; return
54:		mov ax, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp ax
59:	

memchr$15:	; ++index
60:		inc word [bp + 12]
62:	

memchr$16:	; goto 5
63:		jmp memchr$5
65:	

memchr$17:	; return_value = 0
66:		mov bx, 0
68:	

memchr$18:	; return
69:		mov ax, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp ax
74:	

memchr$19:	; function end memchr
1:	

memset:	; £temporary4198 = int_to_int block (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memset$1:	; charBlock = £temporary4198
6:		mov [bp + 12], ax
8:	

memset$2:	; £temporary4199 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov ax, [bp + 8]
12:		cmp ax, 0
13:		jge memset$3
14:		neg ax
16:		neg al
18:	

memset$3:	; c = £temporary4199
19:		mov [bp + 14], al
21:	

memset$4:	; index = 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; if index >= size goto 11
25:		mov ax, [bp + 10]
26:		cmp [bp + 15], ax
27:		jge memset$11
29:	

memset$6:	; £temporary4203 = charBlock + index
30:		mov si, [bp + 12]
31:		add si, [bp + 15]
33:	

memset$7:	; £temporary4202 -> £temporary4203 = *£temporary4203
35:	

memset$8:	; £temporary4202 -> £temporary4203 = c
36:		mov al, [bp + 14]
37:		mov [si], al
39:	

memset$9:	; ++index
40:		inc word [bp + 15]
42:	

memset$10:	; goto 5
43:		jmp memset$5
45:	

memset$11:	; return_value = block
46:		mov bx, [bp + 6]
48:	

memset$12:	; return
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

memset$13:	; function end memset
