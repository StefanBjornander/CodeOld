1:	

strcpy:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; BinaryAdd £temporary3695 source index
5:		mov si, [bp + 8]
6:		add si, [bp + 10]
8:	

strcpy$2:	; Deref £temporary3694 -> £temporary3695 £temporary3695 0
10:	

strcpy$3:	; Equal 11 £temporary3694 -> £temporary3695 0
11:		cmp byte [si], 0
12:		je strcpy$11
14:	

strcpy$4:	; BinaryAdd £temporary3699 target index
15:		mov si, [bp + 6]
16:		add si, [bp + 10]
18:	

strcpy$5:	; Deref £temporary3698 -> £temporary3699 £temporary3699 0
20:	

strcpy$6:	; BinaryAdd £temporary3701 source index
21:		mov di, [bp + 8]
22:		add di, [bp + 10]
24:	

strcpy$7:	; Deref £temporary3700 -> £temporary3701 £temporary3701 0
26:	

strcpy$8:	; Assign £temporary3698 -> £temporary3699 £temporary3700 -> £temporary3701
27:		mov al, [di]
28:		mov [si], al
30:	

strcpy$9:	; Increment index
31:		inc word [bp + 10]
33:	

strcpy$10:	; Goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; BinaryAdd £temporary3703 target index
37:		mov si, [bp + 6]
38:		add si, [bp + 10]
40:	

strcpy$12:	; Deref £temporary3702 -> £temporary3703 £temporary3703 0
42:	

strcpy$13:	; Assign £temporary3702 -> £temporary3703 0
43:		mov byte [si], 0
45:	

strcpy$14:	; SetReturnValue target
46:		mov bx, [bp + 6]
48:	

strcpy$15:	; Return target
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

strcpy$16:	; FunctionEnd strcpy
1:	

strncpy:	; Assign index 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; SignedGreaterThanEqual 12 index size
5:		mov ax, [bp + 10]
6:		cmp [bp + 12], ax
7:		jge strncpy$12
9:	

strncpy$2:	; BinaryAdd £temporary3706 source index
10:		mov si, [bp + 8]
11:		add si, [bp + 12]
13:	

strncpy$3:	; Deref £temporary3705 -> £temporary3706 £temporary3706 0
15:	

strncpy$4:	; Equal 12 £temporary3705 -> £temporary3706 0
16:		cmp byte [si], 0
17:		je strncpy$12
19:	

strncpy$5:	; BinaryAdd £temporary3711 target index
20:		mov si, [bp + 6]
21:		add si, [bp + 12]
23:	

strncpy$6:	; Deref £temporary3710 -> £temporary3711 £temporary3711 0
25:	

strncpy$7:	; BinaryAdd £temporary3713 source index
26:		mov di, [bp + 8]
27:		add di, [bp + 12]
29:	

strncpy$8:	; Deref £temporary3712 -> £temporary3713 £temporary3713 0
31:	

strncpy$9:	; Assign £temporary3710 -> £temporary3711 £temporary3712 -> £temporary3713
32:		mov al, [di]
33:		mov [si], al
35:	

strncpy$10:	; Increment index
36:		inc word [bp + 12]
38:	

strncpy$11:	; Goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; SignedGreaterThanEqual 18 index size
42:		mov ax, [bp + 10]
43:		cmp [bp + 12], ax
44:		jge strncpy$18
46:	

strncpy$13:	; BinaryAdd £temporary3717 target index
47:		mov si, [bp + 6]
48:		add si, [bp + 12]
50:	

strncpy$14:	; Deref £temporary3716 -> £temporary3717 £temporary3717 0
52:	

strncpy$15:	; Assign £temporary3716 -> £temporary3717 0
53:		mov byte [si], 0
55:	

strncpy$16:	; Increment index
56:		inc word [bp + 12]
58:	

strncpy$17:	; Goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; SetReturnValue target
62:		mov bx, [bp + 6]
64:	

strncpy$19:	; Return target
65:		mov ax, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp ax
70:	

strncpy$20:	; FunctionEnd strncpy
1:	

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strcat$1:	; Parameter 12 target 6
4:		mov ax, [bp + 6]
5:		mov [bp + 18], ax
7:	

strcat$2:	; Call 12 strlen 0
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; PostCall 12
15:	

strcat$4:	; GetReturnValue £temporary3718
17:	

strcat$5:	; Assign targetLength £temporary3718
18:		mov [bp + 12], bx
20:	

strcat$6:	; Assign index 0
21:		mov word [bp + 10], 0
23:	

strcat$7:	; BinaryAdd £temporary3720 source index
24:		mov si, [bp + 8]
25:		add si, [bp + 10]
27:	

strcat$8:	; Deref £temporary3719 -> £temporary3720 £temporary3720 0
29:	

strcat$9:	; Equal 18 £temporary3719 -> £temporary3720 0
30:		cmp byte [si], 0
31:		je strcat$18
33:	

strcat$10:	; BinaryAdd £temporary3723 targetLength index
34:		mov ax, [bp + 12]
35:		add ax, [bp + 10]
37:	

strcat$11:	; BinaryAdd £temporary3725 target £temporary3723
38:		mov si, [bp + 6]
39:		add si, ax
41:	

strcat$12:	; Deref £temporary3724 -> £temporary3725 £temporary3725 0
43:	

strcat$13:	; BinaryAdd £temporary3727 source index
44:		mov di, [bp + 8]
45:		add di, [bp + 10]
47:	

strcat$14:	; Deref £temporary3726 -> £temporary3727 £temporary3727 0
49:	

strcat$15:	; Assign £temporary3724 -> £temporary3725 £temporary3726 -> £temporary3727
50:		mov al, [di]
51:		mov [si], al
53:	

strcat$16:	; Increment index
54:		inc word [bp + 10]
56:	

strcat$17:	; Goto 7
57:		jmp strcat$7
59:	

strcat$18:	; BinaryAdd £temporary3728 targetLength index
60:		mov ax, [bp + 12]
61:		add ax, [bp + 10]
63:	

strcat$19:	; BinaryAdd £temporary3730 target £temporary3728
64:		mov si, [bp + 6]
65:		add si, ax
67:	

strcat$20:	; Deref £temporary3729 -> £temporary3730 £temporary3730 0
69:	

strcat$21:	; Assign £temporary3729 -> £temporary3730 0
70:		mov byte [si], 0
72:	

strcat$22:	; SetReturnValue target
73:		mov bx, [bp + 6]
75:	

strcat$23:	; Return target
76:		mov ax, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp ax
81:	

strcat$24:	; FunctionEnd strcat
1:	

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strncat$1:	; Parameter 14 target 6
4:		mov ax, [bp + 6]
5:		mov [bp + 20], ax
7:	

strncat$2:	; Call 14 strlen 0
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; PostCall 14
15:	

strncat$4:	; GetReturnValue £temporary3732
17:	

strncat$5:	; Assign targetLength £temporary3732
18:		mov [bp + 14], bx
20:	

strncat$6:	; Assign index 0
21:		mov word [bp + 12], 0
23:	

strncat$7:	; BinarySubtract £temporary3733 size 1
24:		mov ax, [bp + 10]
25:		sub ax, 1
27:	

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3733
28:		cmp [bp + 12], ax
29:		jge strncat$20
31:	

strncat$9:	; BinaryAdd £temporary3736 source index
32:		mov si, [bp + 8]
33:		add si, [bp + 12]
35:	

strncat$10:	; Deref £temporary3735 -> £temporary3736 £temporary3736 0
37:	

strncat$11:	; Equal 20 £temporary3735 -> £temporary3736 0
38:		cmp byte [si], 0
39:		je strncat$20
41:	

strncat$12:	; BinaryAdd £temporary3740 targetLength index
42:		mov ax, [bp + 14]
43:		add ax, [bp + 12]
45:	

strncat$13:	; BinaryAdd £temporary3742 target £temporary3740
46:		mov si, [bp + 6]
47:		add si, ax
49:	

strncat$14:	; Deref £temporary3741 -> £temporary3742 £temporary3742 0
51:	

strncat$15:	; BinaryAdd £temporary3744 source index
52:		mov di, [bp + 8]
53:		add di, [bp + 12]
55:	

strncat$16:	; Deref £temporary3743 -> £temporary3744 £temporary3744 0
57:	

strncat$17:	; Assign £temporary3741 -> £temporary3742 £temporary3743 -> £temporary3744
58:		mov al, [di]
59:		mov [si], al
61:	

strncat$18:	; Increment index
62:		inc word [bp + 12]
64:	

strncat$19:	; Goto 7
65:		jmp strncat$7
67:	

strncat$20:	; BinaryAdd £temporary3745 targetLength size
68:		mov ax, [bp + 14]
69:		add ax, [bp + 10]
71:	

strncat$21:	; BinarySubtract £temporary3746 £temporary3745 1
72:		sub ax, 1
74:	

strncat$22:	; BinaryAdd £temporary3748 target £temporary3746
75:		mov si, [bp + 6]
76:		add si, ax
78:	

strncat$23:	; Deref £temporary3747 -> £temporary3748 £temporary3748 0
80:	

strncat$24:	; Assign £temporary3747 -> £temporary3748 0
81:		mov byte [si], 0
83:	

strncat$25:	; SetReturnValue target
84:		mov bx, [bp + 6]
86:	

strncat$26:	; Return target
87:		mov ax, [bp]
88:		mov di, [bp + 4]
89:		mov bp, [bp + 2]
90:		jmp ax
92:	

strncat$27:	; FunctionEnd strncat
1:	

strcmp:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; BinaryAdd £temporary3752 left index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strcmp$2:	; Deref £temporary3751 -> £temporary3752 £temporary3752 0
10:	

strcmp$3:	; NotEqual 9 £temporary3751 -> £temporary3752 0
11:		cmp byte [si], 0
12:		jne strcmp$9
14:	

strcmp$4:	; BinaryAdd £temporary3755 right index
15:		mov si, [bp + 8]
16:		add si, [bp + 10]
18:	

strcmp$5:	; Deref £temporary3754 -> £temporary3755 £temporary3755 0
20:	

strcmp$6:	; NotEqual 9 £temporary3754 -> £temporary3755 0
21:		cmp byte [si], 0
22:		jne strcmp$9
24:	

strcmp$7:	; SetReturnValue 0
25:		mov bx, 0
27:	

strcmp$8:	; Return 0
28:		mov ax, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp ax
33:	

strcmp$9:	; BinaryAdd £temporary3759 left index
34:		mov si, [bp + 6]
35:		add si, [bp + 10]
37:	

strcmp$10:	; Deref £temporary3758 -> £temporary3759 £temporary3759 0
39:	

strcmp$11:	; BinaryAdd £temporary3761 right index
40:		mov di, [bp + 8]
41:		add di, [bp + 10]
43:	

strcmp$12:	; Deref £temporary3760 -> £temporary3761 £temporary3761 0
45:	

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3758 -> £temporary3759 £temporary3760 -> £temporary3761
46:		mov al, [di]
47:		cmp [si], al
48:		jge strcmp$16
50:	

strcmp$14:	; SetReturnValue -1
51:		mov bx, -1
53:	

strcmp$15:	; Return -1
54:		mov ax, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp ax
59:	

strcmp$16:	; BinaryAdd £temporary3764 left index
60:		mov si, [bp + 6]
61:		add si, [bp + 10]
63:	

strcmp$17:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0
65:	

strcmp$18:	; BinaryAdd £temporary3766 right index
66:		mov di, [bp + 8]
67:		add di, [bp + 10]
69:	

strcmp$19:	; Deref £temporary3765 -> £temporary3766 £temporary3766 0
71:	

strcmp$20:	; SignedLessThanEqual 23 £temporary3763 -> £temporary3764 £temporary3765 -> £temporary3766
72:		mov al, [di]
73:		cmp [si], al
74:		jle strcmp$23
76:	

strcmp$21:	; SetReturnValue 1
77:		mov bx, 1
79:	

strcmp$22:	; Return 1
80:		mov ax, [bp]
81:		mov di, [bp + 4]
82:		mov bp, [bp + 2]
83:		jmp ax
85:	

strcmp$23:	; Increment index
86:		inc word [bp + 10]
88:	

strcmp$24:	; Goto 1
89:		jmp strcmp$1
91:	

strcmp$25:	; FunctionEnd strcmp
1:	

strncmp:	; Assign index 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; SignedGreaterThanEqual 26 index size
5:		mov ax, [bp + 10]
6:		cmp [bp + 12], ax
7:		jge strncmp$26
9:	

strncmp$2:	; BinaryAdd £temporary3772 left index
10:		mov si, [bp + 6]
11:		add si, [bp + 12]
13:	

strncmp$3:	; Deref £temporary3771 -> £temporary3772 £temporary3772 0
15:	

strncmp$4:	; NotEqual 10 £temporary3771 -> £temporary3772 0
16:		cmp byte [si], 0
17:		jne strncmp$10
19:	

strncmp$5:	; BinaryAdd £temporary3775 right index
20:		mov si, [bp + 8]
21:		add si, [bp + 12]
23:	

strncmp$6:	; Deref £temporary3774 -> £temporary3775 £temporary3775 0
25:	

strncmp$7:	; NotEqual 10 £temporary3774 -> £temporary3775 0
26:		cmp byte [si], 0
27:		jne strncmp$10
29:	

strncmp$8:	; SetReturnValue 0
30:		mov bx, 0
32:	

strncmp$9:	; Return 0
33:		mov ax, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp ax
38:	

strncmp$10:	; BinaryAdd £temporary3779 left index
39:		mov si, [bp + 6]
40:		add si, [bp + 12]
42:	

strncmp$11:	; Deref £temporary3778 -> £temporary3779 £temporary3779 0
44:	

strncmp$12:	; BinaryAdd £temporary3781 right index
45:		mov di, [bp + 8]
46:		add di, [bp + 12]
48:	

strncmp$13:	; Deref £temporary3780 -> £temporary3781 £temporary3781 0
50:	

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3778 -> £temporary3779 £temporary3780 -> £temporary3781
51:		mov al, [di]
52:		cmp [si], al
53:		jge strncmp$17
55:	

strncmp$15:	; SetReturnValue -1
56:		mov bx, -1
58:	

strncmp$16:	; Return -1
59:		mov ax, [bp]
60:		mov di, [bp + 4]
61:		mov bp, [bp + 2]
62:		jmp ax
64:	

strncmp$17:	; BinaryAdd £temporary3784 left index
65:		mov si, [bp + 6]
66:		add si, [bp + 12]
68:	

strncmp$18:	; Deref £temporary3783 -> £temporary3784 £temporary3784 0
70:	

strncmp$19:	; BinaryAdd £temporary3786 right index
71:		mov di, [bp + 8]
72:		add di, [bp + 12]
74:	

strncmp$20:	; Deref £temporary3785 -> £temporary3786 £temporary3786 0
76:	

strncmp$21:	; SignedLessThanEqual 24 £temporary3783 -> £temporary3784 £temporary3785 -> £temporary3786
77:		mov al, [di]
78:		cmp [si], al
79:		jle strncmp$24
81:	

strncmp$22:	; SetReturnValue 1
82:		mov bx, 1
84:	

strncmp$23:	; Return 1
85:		mov ax, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp ax
90:	

strncmp$24:	; Increment index
91:		inc word [bp + 12]
93:	

strncmp$25:	; Goto 1
94:		jmp strncmp$1
96:	

strncmp$26:	; SetReturnValue 0
97:		mov bx, 0
99:	

strncmp$27:	; Return 0
100:		mov ax, [bp]
101:		mov di, [bp + 4]
102:		mov bp, [bp + 2]
103:		jmp ax
105:	

strncmp$28:	; FunctionEnd strncmp
1:	

strchr:	; IntegralToIntegral £temporary3788 i
2:		mov ax, [bp + 8]
5:		cmp ax, 0
6:		jge strchr$1
7:		neg ax
9:		neg al
11:	

strchr$1:	; Assign c £temporary3788
12:		mov [bp + 12], al
14:	

strchr$2:	; Assign index 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; BinaryAdd £temporary3790 text index
18:		mov si, [bp + 6]
19:		add si, [bp + 10]
21:	

strchr$4:	; Deref £temporary3789 -> £temporary3790 £temporary3790 0
23:	

strchr$5:	; Equal 16 £temporary3789 -> £temporary3790 0
24:		cmp byte [si], 0
25:		je strchr$16
27:	

strchr$6:	; BinaryAdd £temporary3794 text index
28:		mov si, [bp + 6]
29:		add si, [bp + 10]
31:	

strchr$7:	; Deref £temporary3793 -> £temporary3794 £temporary3794 0
33:	

strchr$8:	; NotEqual 14 £temporary3793 -> £temporary3794 c
34:		mov al, [bp + 12]
35:		cmp [si], al
36:		jne strchr$14
38:	

strchr$9:	; BinaryAdd £temporary3797 text index
39:		mov bx, [bp + 6]
40:		add bx, [bp + 10]
42:	

strchr$10:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0
44:	

strchr$11:	; address £temporary3798 £temporary3796 -> £temporary3797
46:	

strchr$12:	; SetReturnValue £temporary3798
48:	

strchr$13:	; Return £temporary3798
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

strchr$14:	; Increment index
55:		inc word [bp + 10]
57:	

strchr$15:	; Goto 3
58:		jmp strchr$3
60:	

strchr$16:	; SetReturnValue 0
61:		mov bx, 0
63:	

strchr$17:	; Return 0
64:		mov ax, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp ax
69:	

strchr$18:	; FunctionEnd strchr
1:	

strrchr:	; Assign result 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; IntegralToIntegral £temporary3799 i
5:		mov ax, [bp + 8]
8:		cmp ax, 0
9:		jge strrchr$2
10:		neg ax
12:		neg al
14:	

strrchr$2:	; Assign c £temporary3799
15:		mov [bp + 14], al
17:	

strrchr$3:	; Assign index 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; BinaryAdd £temporary3801 text index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strrchr$5:	; Deref £temporary3800 -> £temporary3801 £temporary3801 0
26:	

strrchr$6:	; Equal 16 £temporary3800 -> £temporary3801 0
27:		cmp byte [si], 0
28:		je strrchr$16
30:	

strrchr$7:	; BinaryAdd £temporary3805 text index
31:		mov si, [bp + 6]
32:		add si, [bp + 10]
34:	

strrchr$8:	; Deref £temporary3804 -> £temporary3805 £temporary3805 0
36:	

strrchr$9:	; NotEqual 14 £temporary3804 -> £temporary3805 c
37:		mov al, [bp + 14]
38:		cmp [si], al
39:		jne strrchr$14
41:	

strrchr$10:	; BinaryAdd £temporary3808 text index
42:		mov si, [bp + 6]
43:		add si, [bp + 10]
45:	

strrchr$11:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0
47:	

strrchr$12:	; address £temporary3809 £temporary3807 -> £temporary3808
49:	

strrchr$13:	; Assign result £temporary3809
50:		mov [bp + 12], si
52:	

strrchr$14:	; Increment index
53:		inc word [bp + 10]
55:	

strrchr$15:	; Goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; SetReturnValue result
59:		mov bx, [bp + 12]
61:	

strrchr$17:	; Return result
62:		mov ax, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp ax
67:	

strrchr$18:	; FunctionEnd strrchr
1:	

strspn:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; BinaryAdd £temporary3811 mainString index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strspn$2:	; Deref £temporary3810 -> £temporary3811 £temporary3811 0
10:	

strspn$3:	; Equal 18 £temporary3810 -> £temporary3811 0
11:		cmp byte [si], 0
12:		je strspn$18
14:	

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strspn$5:	; Parameter 12 charSet 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strspn$6:	; BinaryAdd £temporary3815 mainString index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strspn$7:	; Deref £temporary3814 -> £temporary3815 £temporary3815 0
26:	

strspn$8:	; IntegralToIntegral £temporary3816 £temporary3814 -> £temporary3815
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strspn$9
33:		neg al
35:		neg ax
37:	

strspn$9:	; Parameter 12 £temporary3816 8
38:		mov [bp + 20], ax
40:	

strspn$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; PostCall 12
48:	

strspn$12:	; GetReturnValue £temporary3817
50:	

strspn$13:	; NotEqual 16 £temporary3817 0
51:		cmp bx, 0
52:		jne strspn$16
54:	

strspn$14:	; SetReturnValue index
55:		mov bx, [bp + 10]
57:	

strspn$15:	; Return index
58:		mov ax, [bp]
59:		mov di, [bp + 4]
60:		mov bp, [bp + 2]
61:		jmp ax
63:	

strspn$16:	; Increment index
64:		inc word [bp + 10]
66:	

strspn$17:	; Goto 1
67:		jmp strspn$1
69:	

strspn$18:	; SetReturnValue -1
70:		mov bx, -1
72:	

strspn$19:	; Return -1
73:		mov ax, [bp]
74:		mov di, [bp + 4]
75:		mov bp, [bp + 2]
76:		jmp ax
78:	

strspn$20:	; FunctionEnd strspn
1:	

strcspn:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; BinaryAdd £temporary3822 mainString index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strcspn$2:	; Deref £temporary3821 -> £temporary3822 £temporary3822 0
10:	

strcspn$3:	; Equal 18 £temporary3821 -> £temporary3822 0
11:		cmp byte [si], 0
12:		je strcspn$18
14:	

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strcspn$5:	; Parameter 12 charSet 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strcspn$6:	; BinaryAdd £temporary3826 mainString index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strcspn$7:	; Deref £temporary3825 -> £temporary3826 £temporary3826 0
26:	

strcspn$8:	; IntegralToIntegral £temporary3827 £temporary3825 -> £temporary3826
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strcspn$9
33:		neg al
35:		neg ax
37:	

strcspn$9:	; Parameter 12 £temporary3827 8
38:		mov [bp + 20], ax
40:	

strcspn$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; PostCall 12
48:	

strcspn$12:	; GetReturnValue £temporary3828
50:	

strcspn$13:	; Equal 16 £temporary3828 0
51:		cmp bx, 0
52:		je strcspn$16
54:	

strcspn$14:	; SetReturnValue index
55:		mov bx, [bp + 10]
57:	

strcspn$15:	; Return index
58:		mov ax, [bp]
59:		mov di, [bp + 4]
60:		mov bp, [bp + 2]
61:		jmp ax
63:	

strcspn$16:	; Increment index
64:		inc word [bp + 10]
66:	

strcspn$17:	; Goto 1
67:		jmp strcspn$1
69:	

strcspn$18:	; SetReturnValue -1
70:		mov bx, -1
72:	

strcspn$19:	; Return -1
73:		mov ax, [bp]
74:		mov di, [bp + 4]
75:		mov bp, [bp + 2]
76:		jmp ax
78:	

strcspn$20:	; FunctionEnd strcspn
1:	

strpbrk:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; BinaryAdd £temporary3833 mainString index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strpbrk$2:	; Deref £temporary3832 -> £temporary3833 £temporary3833 0
10:	

strpbrk$3:	; Equal 21 £temporary3832 -> £temporary3833 0
11:		cmp byte [si], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strpbrk$5:	; Parameter 12 charSet 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strpbrk$6:	; BinaryAdd £temporary3837 mainString index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strpbrk$7:	; Deref £temporary3836 -> £temporary3837 £temporary3837 0
26:	

strpbrk$8:	; IntegralToIntegral £temporary3838 £temporary3836 -> £temporary3837
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strpbrk$9
33:		neg al
35:		neg ax
37:	

strpbrk$9:	; Parameter 12 £temporary3838 8
38:		mov [bp + 20], ax
40:	

strpbrk$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; PostCall 12
48:	

strpbrk$12:	; GetReturnValue £temporary3839
50:	

strpbrk$13:	; Equal 19 £temporary3839 0
51:		cmp bx, 0
52:		je strpbrk$19
54:	

strpbrk$14:	; BinaryAdd £temporary3842 mainString index
55:		mov bx, [bp + 6]
56:		add bx, [bp + 10]
58:	

strpbrk$15:	; Deref £temporary3841 -> £temporary3842 £temporary3842 0
60:	

strpbrk$16:	; address £temporary3843 £temporary3841 -> £temporary3842
62:	

strpbrk$17:	; SetReturnValue £temporary3843
64:	

strpbrk$18:	; Return £temporary3843
65:		mov ax, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp ax
70:	

strpbrk$19:	; Increment index
71:		inc word [bp + 10]
73:	

strpbrk$20:	; Goto 1
74:		jmp strpbrk$1
76:	

strpbrk$21:	; SetReturnValue 0
77:		mov bx, 0
79:	

strpbrk$22:	; Return 0
80:		mov ax, [bp]
81:		mov di, [bp + 4]
82:		mov bp, [bp + 2]
83:		jmp ax
85:	

strpbrk$23:	; FunctionEnd strpbrk
1:	

strstr:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strstr$1:	; Parameter 12 subString 6
4:		mov ax, [bp + 8]
5:		mov [bp + 18], ax
7:	

strstr$2:	; Call 12 strlen 0
8:		mov word [bp + 12], strstr$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strstr$3:	; PostCall 12
15:	

strstr$4:	; GetReturnValue £temporary3846
17:	

strstr$5:	; Assign subStringSize £temporary3846
18:		mov [bp + 12], bx
20:	

strstr$6:	; Assign index 0
21:		mov word [bp + 10], 0
23:	

strstr$7:	; BinaryAdd £temporary3848 mainString index
24:		mov si, [bp + 6]
25:		add si, [bp + 10]
27:	

strstr$8:	; Deref £temporary3847 -> £temporary3848 £temporary3848 0
29:	

strstr$9:	; Equal 26 £temporary3847 -> £temporary3848 0
30:		cmp byte [si], 0
31:		je strstr$26
33:	

strstr$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
35:	

strstr$11:	; BinaryAdd £temporary3851 mainString index
36:		mov ax, [bp + 6]
37:		add ax, [bp + 10]
39:	

strstr$12:	; Parameter 14 £temporary3851 6
40:		mov [bp + 20], ax
42:	

strstr$13:	; Parameter 14 subString 8
43:		mov ax, [bp + 8]
44:		mov [bp + 22], ax
46:	

strstr$14:	; Parameter 14 subStringSize 10
47:		mov ax, [bp + 12]
48:		mov [bp + 24], ax
50:	

strstr$15:	; Call 14 strncmp 0
51:		mov word [bp + 14], strstr$16
52:		mov [bp + 16], bp
53:		add bp, 14
54:		jmp strncmp
56:	

strstr$16:	; PostCall 14
58:	

strstr$17:	; GetReturnValue £temporary3852
60:	

strstr$18:	; NotEqual 24 £temporary3852 0
61:		cmp bx, 0
62:		jne strstr$24
64:	

strstr$19:	; BinaryAdd £temporary3855 mainString index
65:		mov bx, [bp + 6]
66:		add bx, [bp + 10]
68:	

strstr$20:	; Deref £temporary3854 -> £temporary3855 £temporary3855 0
70:	

strstr$21:	; address £temporary3856 £temporary3854 -> £temporary3855
72:	

strstr$22:	; SetReturnValue £temporary3856
74:	

strstr$23:	; Return £temporary3856
75:		mov ax, [bp]
76:		mov di, [bp + 4]
77:		mov bp, [bp + 2]
78:		jmp ax
80:	

strstr$24:	; Increment index
81:		inc word [bp + 10]
83:	

strstr$25:	; Goto 7
84:		jmp strstr$7
86:	

strstr$26:	; SetReturnValue 0
87:		mov bx, 0
89:	

strstr$27:	; Return 0
90:		mov ax, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp ax
95:	

strstr$28:	; FunctionEnd strstr
1:	

strlen:	; Assign index 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; BinaryAdd £temporary3862 string index
5:		mov si, [bp + 6]
6:		add si, [bp + 8]
8:	

strlen$2:	; Deref £temporary3861 -> £temporary3862 £temporary3862 0
10:	

strlen$3:	; Equal 6 £temporary3861 -> £temporary3862 0
11:		cmp byte [si], 0
12:		je strlen$6
14:	

strlen$4:	; Increment index
15:		inc word [bp + 8]
17:	

strlen$5:	; Goto 1
18:		jmp strlen$1
20:	

strlen$6:	; SetReturnValue index
21:		mov bx, [bp + 8]
23:	

strlen$7:	; Return index
24:		mov ax, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp ax
29:	

strlen$8:	; FunctionEnd strlen
1:	

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strerror$1:	; Call 8 localeconv 0
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; PostCall 8
11:	

strerror$3:	; GetReturnValue £temporary3865
13:	

strerror$4:	; Assign localeConvPtr £temporary3865
14:		mov [bp + 8], bx
16:	

strerror$5:	; Equal 14 localeConvPtr 0
17:		cmp word [bp + 8], 0
18:		je strerror$14
20:	

strerror$6:	; Deref £temporary3867 -> localeConvPtr localeConvPtr 16
21:		mov si, [bp + 8]
23:	

strerror$7:	; Assign messageList £temporary3867 -> localeConvPtr
24:		mov ax, [si + 16]
25:		mov [bp + 10], ax
27:	

strerror$8:	; Equal 14 messageList 0
28:		cmp word [bp + 10], 0
29:		je strerror$14
31:	

strerror$9:	; SignedMultiply £temporary3870 errno 2
32:		mov ax, [bp + 6]
34:		xor dx, dx
35:		imul word [@8618$int2$2#]
41:	

strerror$10:	; BinaryAdd £temporary3871 messageList £temporary3870
42:		mov si, [bp + 10]
43:		add si, ax
45:	

strerror$11:	; Deref £temporary3869 -> £temporary3871 £temporary3871 0
47:	

strerror$12:	; SetReturnValue £temporary3869 -> £temporary3871
48:		mov bx, [si]
50:	

strerror$13:	; Return £temporary3869 -> £temporary3871
51:		mov ax, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp ax
56:	

strerror$14:	; SetReturnValue 0
57:		mov bx, 0
59:	

strerror$15:	; Return 0
60:		mov ax, [bp]
61:		mov di, [bp + 4]
62:		mov bp, [bp + 2]
63:		jmp ax
65:	

strerror$16:	; FunctionEnd strerror
1:	

strtok:	; Equal 37 string 0
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; Deref £temporary3873 -> string string 0
6:		mov si, [bp + 6]
8:	

strtok$2:	; NotEqual 5 £temporary3873 -> string 0
9:		cmp byte [si], 0
10:		jne strtok$5
12:	

strtok$3:	; SetReturnValue 0
13:		mov bx, 0
15:	

strtok$4:	; Return 0
16:		mov ax, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp ax
21:	

strtok$5:	; Assign index 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; BinaryAdd £temporary3876 string index
25:		mov si, [bp + 6]
26:		add si, [bp + 10]
28:	

strtok$7:	; Deref £temporary3875 -> £temporary3876 £temporary3876 0
30:	

strtok$8:	; Equal 31 £temporary3875 -> £temporary3876 0
31:		cmp byte [si], 0
32:		je strtok$31
34:	

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
36:	

strtok$10:	; Parameter 14 charSet 6
37:		mov ax, [bp + 8]
38:		mov [bp + 20], ax
40:	

strtok$11:	; BinaryAdd £temporary3880 string index
41:		mov si, [bp + 6]
42:		add si, [bp + 10]
44:	

strtok$12:	; Deref £temporary3879 -> £temporary3880 £temporary3880 0
46:	

strtok$13:	; IntegralToIntegral £temporary3881 £temporary3879 -> £temporary3880
47:		mov al, [si]
49:		and ax, 255
51:		cmp al, 0
52:		jge strtok$14
53:		neg al
55:		neg ax
57:	

strtok$14:	; Parameter 14 £temporary3881 8
58:		mov [bp + 22], ax
60:	

strtok$15:	; Call 14 strchr 0
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; PostCall 14
68:	

strtok$17:	; GetReturnValue £temporary3882
70:	

strtok$18:	; Equal 29 £temporary3882 0
71:		cmp bx, 0
72:		je strtok$29
74:	

strtok$19:	; BinaryAdd £temporary3885 string index
75:		mov si, [bp + 6]
76:		add si, [bp + 10]
78:	

strtok$20:	; Deref £temporary3884 -> £temporary3885 £temporary3885 0
80:	

strtok$21:	; Assign £temporary3884 -> £temporary3885 0
81:		mov byte [si], 0
83:	

strtok$22:	; BinaryAdd £temporary3886 index 1
84:		mov ax, [bp + 10]
85:		add ax, 1
87:	

strtok$23:	; BinaryAdd £temporary3888 string £temporary3886
88:		mov si, [bp + 6]
89:		add si, ax
91:	

strtok$24:	; Deref £temporary3887 -> £temporary3888 £temporary3888 0
93:	

strtok$25:	; address £temporary3889 £temporary3887 -> £temporary3888
95:	

strtok$26:	; Assign token £temporary3889
96:		mov [@8627$token], si
98:	

strtok$27:	; SetReturnValue string
99:		mov bx, [bp + 6]
101:	

strtok$28:	; Return string
102:		mov ax, [bp]
103:		mov di, [bp + 4]
104:		mov bp, [bp + 2]
105:		jmp ax
107:	

strtok$29:	; Increment index
108:		inc word [bp + 10]
110:	

strtok$30:	; Goto 6
111:		jmp strtok$6
113:	

strtok$31:	; BinaryAdd £temporary3891 string index
114:		mov si, [bp + 6]
115:		add si, [bp + 10]
117:	

strtok$32:	; Deref £temporary3890 -> £temporary3891 £temporary3891 0
119:	

strtok$33:	; address £temporary3892 £temporary3890 -> £temporary3891
121:	

strtok$34:	; Assign token £temporary3892
122:		mov [@8627$token], si
124:	

strtok$35:	; SetReturnValue string
125:		mov bx, [bp + 6]
127:	

strtok$36:	; Return string
128:		mov ax, [bp]
129:		mov di, [bp + 4]
130:		mov bp, [bp + 2]
131:		jmp ax
133:	

strtok$37:	; NotEqual 40 token 0
134:		cmp word [@8627$token], 0
135:		jne strtok$40
137:	

strtok$38:	; SetReturnValue 0
138:		mov bx, 0
140:	

strtok$39:	; Return 0
141:		mov ax, [bp]
142:		mov di, [bp + 4]
143:		mov bp, [bp + 2]
144:		jmp ax
146:	

strtok$40:	; NotEqual 43 (@8627$token,0) 0
147:		mov si, [@8627$token]
148:		cmp byte [si], 0
149:		jne strtok$43
151:	

strtok$41:	; SetReturnValue 0
152:		mov bx, 0
154:	

strtok$42:	; Return 0
155:		mov ax, [bp]
156:		mov di, [bp + 4]
157:		mov bp, [bp + 2]
158:		jmp ax
160:	

strtok$43:	; Assign index 0
161:		mov word [bp + 10], 0
163:	

strtok$44:	; BinaryAdd £temporary3897 token index
164:		mov si, [@8627$token]
165:		add si, [bp + 10]
167:	

strtok$45:	; Deref £temporary3896 -> £temporary3897 £temporary3897 0
169:	

strtok$46:	; Equal 70 £temporary3896 -> £temporary3897 0
170:		cmp byte [si], 0
171:		je strtok$70
173:	

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
175:	

strtok$48:	; Parameter 14 charSet 6
176:		mov ax, [bp + 8]
177:		mov [bp + 20], ax
179:	

strtok$49:	; BinaryAdd £temporary3901 token index
180:		mov si, [@8627$token]
181:		add si, [bp + 10]
183:	

strtok$50:	; Deref £temporary3900 -> £temporary3901 £temporary3901 0
185:	

strtok$51:	; IntegralToIntegral £temporary3902 £temporary3900 -> £temporary3901
186:		mov al, [si]
188:		and ax, 255
190:		cmp al, 0
191:		jge strtok$52
192:		neg al
194:		neg ax
196:	

strtok$52:	; Parameter 14 £temporary3902 8
197:		mov [bp + 22], ax
199:	

strtok$53:	; Call 14 strchr 0
200:		mov word [bp + 14], strtok$54
201:		mov [bp + 16], bp
202:		add bp, 14
203:		jmp strchr
205:	

strtok$54:	; PostCall 14
207:	

strtok$55:	; GetReturnValue £temporary3903
209:	

strtok$56:	; Equal 68 £temporary3903 0
210:		cmp bx, 0
211:		je strtok$68
213:	

strtok$57:	; Assign tokenStart2 token
214:		mov ax, [@8627$token]
215:		mov [bp + 14], ax
217:	

strtok$58:	; BinaryAdd £temporary3906 token index
218:		mov si, [@8627$token]
219:		add si, [bp + 10]
221:	

strtok$59:	; Deref £temporary3905 -> £temporary3906 £temporary3906 0
223:	

strtok$60:	; Assign £temporary3905 -> £temporary3906 0
224:		mov byte [si], 0
226:	

strtok$61:	; BinaryAdd £temporary3907 index 1
227:		mov ax, [bp + 10]
228:		add ax, 1
230:	

strtok$62:	; BinaryAdd £temporary3909 token £temporary3907
231:		mov si, [@8627$token]
232:		add si, ax
234:	

strtok$63:	; Deref £temporary3908 -> £temporary3909 £temporary3909 0
236:	

strtok$64:	; address £temporary3910 £temporary3908 -> £temporary3909
238:	

strtok$65:	; Assign token £temporary3910
239:		mov [@8627$token], si
241:	

strtok$66:	; SetReturnValue tokenStart2
242:		mov bx, [bp + 14]
244:	

strtok$67:	; Return tokenStart2
245:		mov ax, [bp]
246:		mov di, [bp + 4]
247:		mov bp, [bp + 2]
248:		jmp ax
250:	

strtok$68:	; Increment index
251:		inc word [bp + 10]
253:	

strtok$69:	; Goto 44
254:		jmp strtok$44
256:	

strtok$70:	; Assign tokenStart token
257:		mov ax, [@8627$token]
258:		mov [bp + 12], ax
260:	

strtok$71:	; BinaryAdd £temporary3912 token index
261:		mov si, [@8627$token]
262:		add si, [bp + 10]
264:	

strtok$72:	; Deref £temporary3911 -> £temporary3912 £temporary3912 0
266:	

strtok$73:	; address £temporary3913 £temporary3911 -> £temporary3912
268:	

strtok$74:	; Assign token £temporary3913
269:		mov [@8627$token], si
271:	

strtok$75:	; SetReturnValue tokenStart
272:		mov bx, [bp + 12]
274:	

strtok$76:	; Return tokenStart
275:		mov ax, [bp]
276:		mov di, [bp + 4]
277:		mov bp, [bp + 2]
278:		jmp ax
280:	

strtok$77:	; FunctionEnd strtok
1:	

memcpy:	; IntegralToIntegral £temporary3918 target
2:		mov ax, [bp + 6]
5:	

memcpy$1:	; Assign charTarget £temporary3918
6:		mov [bp + 12], ax
8:	

memcpy$2:	; IntegralToIntegral £temporary3919 source
9:		mov ax, [bp + 8]
12:	

memcpy$3:	; Assign charSource £temporary3919
13:		mov [bp + 14], ax
15:	

memcpy$4:	; Assign index 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; SignedGreaterThanEqual 13 index size
19:		mov ax, [bp + 10]
20:		cmp [bp + 16], ax
21:		jge memcpy$13
23:	

memcpy$6:	; BinaryAdd £temporary3923 charTarget index
24:		mov si, [bp + 12]
25:		add si, [bp + 16]
27:	

memcpy$7:	; Deref £temporary3922 -> £temporary3923 £temporary3923 0
29:	

memcpy$8:	; BinaryAdd £temporary3925 charSource index
30:		mov di, [bp + 14]
31:		add di, [bp + 16]
33:	

memcpy$9:	; Deref £temporary3924 -> £temporary3925 £temporary3925 0
35:	

memcpy$10:	; Assign £temporary3922 -> £temporary3923 £temporary3924 -> £temporary3925
36:		mov al, [di]
37:		mov [si], al
39:	

memcpy$11:	; Increment index
40:		inc word [bp + 16]
42:	

memcpy$12:	; Goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; IntegralToIntegral £temporary3926 target
46:		mov bx, [bp + 6]
49:	

memcpy$14:	; SetReturnValue £temporary3926
51:	

memcpy$15:	; Return £temporary3926
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

memcpy$16:	; FunctionEnd memcpy
1:	

memmove:	; IntegralToIntegral £temporary3927 target
2:		mov ax, [bp + 6]
5:	

memmove$1:	; Assign charTarget £temporary3927
6:		mov [bp + 12], ax
8:	

memmove$2:	; IntegralToIntegral £temporary3928 source
9:		mov ax, [bp + 8]
12:	

memmove$3:	; Assign charSource £temporary3928
13:		mov [bp + 14], ax
15:	

memmove$4:	; SignedGreaterThanEqual 14 source target
16:		mov ax, [bp + 6]
17:		cmp [bp + 8], ax
18:		jge memmove$14
20:	

memmove$5:	; BinarySubtract index size 1
21:		mov ax, [bp + 10]
22:		sub ax, 1
23:		mov [bp + 16], ax
25:	

memmove$6:	; SignedLessThan 23 index 0
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; BinaryAdd £temporary3934 charTarget index
30:		mov si, [bp + 12]
31:		add si, [bp + 16]
33:	

memmove$8:	; Deref £temporary3933 -> £temporary3934 £temporary3934 0
35:	

memmove$9:	; BinaryAdd £temporary3936 charSource index
36:		mov di, [bp + 14]
37:		add di, [bp + 16]
39:	

memmove$10:	; Deref £temporary3935 -> £temporary3936 £temporary3936 0
41:	

memmove$11:	; Assign £temporary3933 -> £temporary3934 £temporary3935 -> £temporary3936
42:		mov al, [di]
43:		mov [si], al
45:	

memmove$12:	; Decrement index
46:		dec word [bp + 16]
48:	

memmove$13:	; Goto 6
49:		jmp memmove$6
51:	

memmove$14:	; Assign index 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; SignedGreaterThanEqual 23 index size
55:		mov ax, [bp + 10]
56:		cmp [bp + 16], ax
57:		jge memmove$23
59:	

memmove$16:	; BinaryAdd £temporary3940 charTarget index
60:		mov si, [bp + 12]
61:		add si, [bp + 16]
63:	

memmove$17:	; Deref £temporary3939 -> £temporary3940 £temporary3940 0
65:	

memmove$18:	; BinaryAdd £temporary3942 charSource index
66:		mov di, [bp + 14]
67:		add di, [bp + 16]
69:	

memmove$19:	; Deref £temporary3941 -> £temporary3942 £temporary3942 0
71:	

memmove$20:	; Assign £temporary3939 -> £temporary3940 £temporary3941 -> £temporary3942
72:		mov al, [di]
73:		mov [si], al
75:	

memmove$21:	; Increment index
76:		inc word [bp + 16]
78:	

memmove$22:	; Goto 15
79:		jmp memmove$15
81:	

memmove$23:	; IntegralToIntegral £temporary3943 target
82:		mov bx, [bp + 6]
85:	

memmove$24:	; SetReturnValue £temporary3943
87:	

memmove$25:	; Return £temporary3943
88:		mov ax, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp ax
93:	

memmove$26:	; FunctionEnd memmove
1:	

memcmp:	; IntegralToIntegral £temporary3944 left
2:		mov ax, [bp + 6]
5:	

memcmp$1:	; Assign charLeft £temporary3944
6:		mov [bp + 12], ax
8:	

memcmp$2:	; IntegralToIntegral £temporary3945 right
9:		mov ax, [bp + 8]
12:	

memcmp$3:	; Assign charRight £temporary3945
13:		mov [bp + 14], ax
15:	

memcmp$4:	; Assign index 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; SignedGreaterThanEqual 22 index size
19:		mov ax, [bp + 10]
20:		cmp [bp + 16], ax
21:		jge memcmp$22
23:	

memcmp$6:	; BinaryAdd £temporary3949 charLeft index
24:		mov si, [bp + 12]
25:		add si, [bp + 16]
27:	

memcmp$7:	; Deref £temporary3948 -> £temporary3949 £temporary3949 0
29:	

memcmp$8:	; BinaryAdd £temporary3951 charRight index
30:		mov di, [bp + 14]
31:		add di, [bp + 16]
33:	

memcmp$9:	; Deref £temporary3950 -> £temporary3951 £temporary3951 0
35:	

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3948 -> £temporary3949 £temporary3950 -> £temporary3951
36:		mov al, [di]
37:		cmp [si], al
38:		jge memcmp$13
40:	

memcmp$11:	; SetReturnValue -1
41:		mov bx, -1
43:	

memcmp$12:	; Return -1
44:		mov ax, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp ax
49:	

memcmp$13:	; BinaryAdd £temporary3954 charLeft index
50:		mov si, [bp + 12]
51:		add si, [bp + 16]
53:	

memcmp$14:	; Deref £temporary3953 -> £temporary3954 £temporary3954 0
55:	

memcmp$15:	; BinaryAdd £temporary3956 charRight index
56:		mov di, [bp + 14]
57:		add di, [bp + 16]
59:	

memcmp$16:	; Deref £temporary3955 -> £temporary3956 £temporary3956 0
61:	

memcmp$17:	; SignedLessThanEqual 20 £temporary3953 -> £temporary3954 £temporary3955 -> £temporary3956
62:		mov al, [di]
63:		cmp [si], al
64:		jle memcmp$20
66:	

memcmp$18:	; SetReturnValue 1
67:		mov bx, 1
69:	

memcmp$19:	; Return 1
70:		mov ax, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp ax
75:	

memcmp$20:	; Increment index
76:		inc word [bp + 16]
78:	

memcmp$21:	; Goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; SetReturnValue 0
82:		mov bx, 0
84:	

memcmp$23:	; Return 0
85:		mov ax, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp ax
90:	

memcmp$24:	; FunctionEnd memcmp
1:	

memchr:	; IntegralToIntegral £temporary3958 block
2:		mov ax, [bp + 6]
5:	

memchr$1:	; Assign charBlock £temporary3958
6:		mov [bp + 14], ax
8:	

memchr$2:	; IntegralToIntegral £temporary3959 i
9:		mov ax, [bp + 8]
12:		cmp ax, 0
13:		jge memchr$3
14:		neg ax
16:		neg al
18:	

memchr$3:	; Assign c £temporary3959
19:		mov [bp + 16], al
21:	

memchr$4:	; Assign index 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; SignedGreaterThanEqual 17 index size
25:		mov ax, [bp + 10]
26:		cmp [bp + 12], ax
27:		jge memchr$17
29:	

memchr$6:	; BinaryAdd £temporary3963 charBlock index
30:		mov si, [bp + 14]
31:		add si, [bp + 12]
33:	

memchr$7:	; Deref £temporary3962 -> £temporary3963 £temporary3963 0
35:	

memchr$8:	; NotEqual 15 £temporary3962 -> £temporary3963 c
36:		mov al, [bp + 16]
37:		cmp [si], al
38:		jne memchr$15
40:	

memchr$9:	; BinaryAdd £temporary3966 charBlock index
41:		mov bx, [bp + 14]
42:		add bx, [bp + 12]
44:	

memchr$10:	; Deref £temporary3965 -> £temporary3966 £temporary3966 0
46:	

memchr$11:	; address £temporary3967 £temporary3965 -> £temporary3966
48:	

memchr$12:	; IntegralToIntegral £temporary3968 £temporary3967
51:	

memchr$13:	; SetReturnValue £temporary3968
53:	

memchr$14:	; Return £temporary3968
54:		mov ax, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp ax
59:	

memchr$15:	; Increment index
60:		inc word [bp + 12]
62:	

memchr$16:	; Goto 5
63:		jmp memchr$5
65:	

memchr$17:	; SetReturnValue 0
66:		mov bx, 0
68:	

memchr$18:	; Return 0
69:		mov ax, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp ax
74:	

memchr$19:	; FunctionEnd memchr
1:	

memset:	; IntegralToIntegral £temporary3969 block
2:		mov ax, [bp + 6]
5:	

memset$1:	; Assign charBlock £temporary3969
6:		mov [bp + 12], ax
8:	

memset$2:	; IntegralToIntegral £temporary3970 i
9:		mov ax, [bp + 8]
12:		cmp ax, 0
13:		jge memset$3
14:		neg ax
16:		neg al
18:	

memset$3:	; Assign c £temporary3970
19:		mov [bp + 14], al
21:	

memset$4:	; Assign index 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; SignedGreaterThanEqual 11 index size
25:		mov ax, [bp + 10]
26:		cmp [bp + 15], ax
27:		jge memset$11
29:	

memset$6:	; BinaryAdd £temporary3974 charBlock index
30:		mov si, [bp + 12]
31:		add si, [bp + 15]
33:	

memset$7:	; Deref £temporary3973 -> £temporary3974 £temporary3974 0
35:	

memset$8:	; Assign £temporary3973 -> £temporary3974 c
36:		mov al, [bp + 14]
37:		mov [si], al
39:	

memset$9:	; Increment index
40:		inc word [bp + 15]
42:	

memset$10:	; Goto 5
43:		jmp memset$5
45:	

memset$11:	; SetReturnValue block
46:		mov bx, [bp + 6]
48:	

memset$12:	; Return block
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

memset$13:	; FunctionEnd memset
