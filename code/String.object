1:	

strcpy:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; BinaryAdd £temporary3717 source index
5:		mov si, [bp + 8]
6:		add si, [bp + 10]
8:	

strcpy$2:	; Deref £temporary3716 -> £temporary3717 £temporary3717 0
10:	

strcpy$3:	; Equal 11 £temporary3716 -> £temporary3717 0
11:		cmp byte [si], 0
12:		je strcpy$11
14:	

strcpy$4:	; BinaryAdd £temporary3721 target index
15:		mov si, [bp + 6]
16:		add si, [bp + 10]
18:	

strcpy$5:	; Deref £temporary3720 -> £temporary3721 £temporary3721 0
20:	

strcpy$6:	; BinaryAdd £temporary3723 source index
21:		mov di, [bp + 8]
22:		add di, [bp + 10]
24:	

strcpy$7:	; Deref £temporary3722 -> £temporary3723 £temporary3723 0
26:	

strcpy$8:	; Assign £temporary3720 -> £temporary3721 £temporary3722 -> £temporary3723
27:		mov al, [di]
28:		mov [si], al
30:	

strcpy$9:	; Increment index
31:		inc word [bp + 10]
33:	

strcpy$10:	; Goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; BinaryAdd £temporary3725 target index
37:		mov si, [bp + 6]
38:		add si, [bp + 10]
40:	

strcpy$12:	; Deref £temporary3724 -> £temporary3725 £temporary3725 0
42:	

strcpy$13:	; Assign £temporary3724 -> £temporary3725 0
43:		mov byte [si], 0
45:	

strcpy$14:	; SetReturnValue target
46:		mov bx, [bp + 6]
48:	

strcpy$15:	; Return target
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

strcpy$16:	; FunctionEnd strcpy
1:	

strncpy:	; Assign index 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; SignedGreaterThanEqual 12 index size
5:		mov ax, [bp + 10]
6:		cmp [bp + 12], ax
7:		jge strncpy$12
9:	

strncpy$2:	; BinaryAdd £temporary3728 source index
10:		mov si, [bp + 8]
11:		add si, [bp + 12]
13:	

strncpy$3:	; Deref £temporary3727 -> £temporary3728 £temporary3728 0
15:	

strncpy$4:	; Equal 12 £temporary3727 -> £temporary3728 0
16:		cmp byte [si], 0
17:		je strncpy$12
19:	

strncpy$5:	; BinaryAdd £temporary3733 target index
20:		mov si, [bp + 6]
21:		add si, [bp + 12]
23:	

strncpy$6:	; Deref £temporary3732 -> £temporary3733 £temporary3733 0
25:	

strncpy$7:	; BinaryAdd £temporary3735 source index
26:		mov di, [bp + 8]
27:		add di, [bp + 12]
29:	

strncpy$8:	; Deref £temporary3734 -> £temporary3735 £temporary3735 0
31:	

strncpy$9:	; Assign £temporary3732 -> £temporary3733 £temporary3734 -> £temporary3735
32:		mov al, [di]
33:		mov [si], al
35:	

strncpy$10:	; Increment index
36:		inc word [bp + 12]
38:	

strncpy$11:	; Goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; SignedGreaterThanEqual 18 index size
42:		mov ax, [bp + 10]
43:		cmp [bp + 12], ax
44:		jge strncpy$18
46:	

strncpy$13:	; BinaryAdd £temporary3739 target index
47:		mov si, [bp + 6]
48:		add si, [bp + 12]
50:	

strncpy$14:	; Deref £temporary3738 -> £temporary3739 £temporary3739 0
52:	

strncpy$15:	; Assign £temporary3738 -> £temporary3739 0
53:		mov byte [si], 0
55:	

strncpy$16:	; Increment index
56:		inc word [bp + 12]
58:	

strncpy$17:	; Goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; SetReturnValue target
62:		mov bx, [bp + 6]
64:	

strncpy$19:	; Return target
65:		mov ax, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp ax
70:	

strncpy$20:	; FunctionEnd strncpy
1:	

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strcat$1:	; Parameter 12 target 6
4:		mov ax, [bp + 6]
5:		mov [bp + 18], ax
7:	

strcat$2:	; Call 12 strlen 0
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; PostCall 12
15:	

strcat$4:	; GetReturnValue £temporary3740
20:	

strcat$5:	; Assign targetLength £temporary3740
21:		mov [bp + 12], bx
23:	

strcat$6:	; Assign index 0
24:		mov word [bp + 10], 0
26:	

strcat$7:	; BinaryAdd £temporary3742 source index
27:		mov si, [bp + 8]
28:		add si, [bp + 10]
30:	

strcat$8:	; Deref £temporary3741 -> £temporary3742 £temporary3742 0
32:	

strcat$9:	; Equal 18 £temporary3741 -> £temporary3742 0
33:		cmp byte [si], 0
34:		je strcat$18
36:	

strcat$10:	; BinaryAdd £temporary3745 targetLength index
37:		mov ax, [bp + 12]
38:		add ax, [bp + 10]
40:	

strcat$11:	; BinaryAdd £temporary3747 target £temporary3745
41:		mov si, [bp + 6]
42:		add si, ax
44:	

strcat$12:	; Deref £temporary3746 -> £temporary3747 £temporary3747 0
46:	

strcat$13:	; BinaryAdd £temporary3749 source index
47:		mov di, [bp + 8]
48:		add di, [bp + 10]
50:	

strcat$14:	; Deref £temporary3748 -> £temporary3749 £temporary3749 0
52:	

strcat$15:	; Assign £temporary3746 -> £temporary3747 £temporary3748 -> £temporary3749
53:		mov al, [di]
54:		mov [si], al
56:	

strcat$16:	; Increment index
57:		inc word [bp + 10]
59:	

strcat$17:	; Goto 7
60:		jmp strcat$7
62:	

strcat$18:	; BinaryAdd £temporary3750 targetLength index
63:		mov ax, [bp + 12]
64:		add ax, [bp + 10]
66:	

strcat$19:	; BinaryAdd £temporary3752 target £temporary3750
67:		mov si, [bp + 6]
68:		add si, ax
70:	

strcat$20:	; Deref £temporary3751 -> £temporary3752 £temporary3752 0
72:	

strcat$21:	; Assign £temporary3751 -> £temporary3752 0
73:		mov byte [si], 0
75:	

strcat$22:	; SetReturnValue target
76:		mov bx, [bp + 6]
78:	

strcat$23:	; Return target
79:		mov ax, [bp]
80:		mov di, [bp + 4]
81:		mov bp, [bp + 2]
82:		jmp ax
84:	

strcat$24:	; FunctionEnd strcat
1:	

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strncat$1:	; Parameter 14 target 6
4:		mov ax, [bp + 6]
5:		mov [bp + 20], ax
7:	

strncat$2:	; Call 14 strlen 0
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; PostCall 14
15:	

strncat$4:	; GetReturnValue £temporary3754
20:	

strncat$5:	; Assign targetLength £temporary3754
21:		mov [bp + 14], bx
23:	

strncat$6:	; Assign index 0
24:		mov word [bp + 12], 0
26:	

strncat$7:	; BinarySubtract £temporary3755 size 1
27:		mov ax, [bp + 10]
28:		sub ax, 1
30:	

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3755
31:		cmp [bp + 12], ax
32:		jge strncat$20
34:	

strncat$9:	; BinaryAdd £temporary3758 source index
35:		mov si, [bp + 8]
36:		add si, [bp + 12]
38:	

strncat$10:	; Deref £temporary3757 -> £temporary3758 £temporary3758 0
40:	

strncat$11:	; Equal 20 £temporary3757 -> £temporary3758 0
41:		cmp byte [si], 0
42:		je strncat$20
44:	

strncat$12:	; BinaryAdd £temporary3762 targetLength index
45:		mov ax, [bp + 14]
46:		add ax, [bp + 12]
48:	

strncat$13:	; BinaryAdd £temporary3764 target £temporary3762
49:		mov si, [bp + 6]
50:		add si, ax
52:	

strncat$14:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0
54:	

strncat$15:	; BinaryAdd £temporary3766 source index
55:		mov di, [bp + 8]
56:		add di, [bp + 12]
58:	

strncat$16:	; Deref £temporary3765 -> £temporary3766 £temporary3766 0
60:	

strncat$17:	; Assign £temporary3763 -> £temporary3764 £temporary3765 -> £temporary3766
61:		mov al, [di]
62:		mov [si], al
64:	

strncat$18:	; Increment index
65:		inc word [bp + 12]
67:	

strncat$19:	; Goto 7
68:		jmp strncat$7
70:	

strncat$20:	; BinaryAdd £temporary3767 targetLength size
71:		mov ax, [bp + 14]
72:		add ax, [bp + 10]
74:	

strncat$21:	; BinarySubtract £temporary3768 £temporary3767 1
75:		sub ax, 1
77:	

strncat$22:	; BinaryAdd £temporary3770 target £temporary3768
78:		mov si, [bp + 6]
79:		add si, ax
81:	

strncat$23:	; Deref £temporary3769 -> £temporary3770 £temporary3770 0
83:	

strncat$24:	; Assign £temporary3769 -> £temporary3770 0
84:		mov byte [si], 0
86:	

strncat$25:	; SetReturnValue target
87:		mov bx, [bp + 6]
89:	

strncat$26:	; Return target
90:		mov ax, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp ax
95:	

strncat$27:	; FunctionEnd strncat
1:	

strcmp:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; BinaryAdd £temporary3774 left index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strcmp$2:	; Deref £temporary3773 -> £temporary3774 £temporary3774 0
10:	

strcmp$3:	; NotEqual 9 £temporary3773 -> £temporary3774 0
11:		cmp byte [si], 0
12:		jne strcmp$9
14:	

strcmp$4:	; BinaryAdd £temporary3777 right index
15:		mov si, [bp + 8]
16:		add si, [bp + 10]
18:	

strcmp$5:	; Deref £temporary3776 -> £temporary3777 £temporary3777 0
20:	

strcmp$6:	; NotEqual 9 £temporary3776 -> £temporary3777 0
21:		cmp byte [si], 0
22:		jne strcmp$9
24:	

strcmp$7:	; SetReturnValue 0
25:		mov bx, 0
27:	

strcmp$8:	; Return 0
28:		mov ax, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp ax
33:	

strcmp$9:	; BinaryAdd £temporary3781 left index
34:		mov si, [bp + 6]
35:		add si, [bp + 10]
37:	

strcmp$10:	; Deref £temporary3780 -> £temporary3781 £temporary3781 0
39:	

strcmp$11:	; BinaryAdd £temporary3783 right index
40:		mov di, [bp + 8]
41:		add di, [bp + 10]
43:	

strcmp$12:	; Deref £temporary3782 -> £temporary3783 £temporary3783 0
45:	

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3780 -> £temporary3781 £temporary3782 -> £temporary3783
46:		mov al, [di]
47:		cmp [si], al
48:		jge strcmp$16
50:	

strcmp$14:	; SetReturnValue -1
51:		mov bx, -1
53:	

strcmp$15:	; Return -1
54:		mov ax, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp ax
59:	

strcmp$16:	; BinaryAdd £temporary3786 left index
60:		mov si, [bp + 6]
61:		add si, [bp + 10]
63:	

strcmp$17:	; Deref £temporary3785 -> £temporary3786 £temporary3786 0
65:	

strcmp$18:	; BinaryAdd £temporary3788 right index
66:		mov di, [bp + 8]
67:		add di, [bp + 10]
69:	

strcmp$19:	; Deref £temporary3787 -> £temporary3788 £temporary3788 0
71:	

strcmp$20:	; SignedLessThanEqual 23 £temporary3785 -> £temporary3786 £temporary3787 -> £temporary3788
72:		mov al, [di]
73:		cmp [si], al
74:		jle strcmp$23
76:	

strcmp$21:	; SetReturnValue 1
77:		mov bx, 1
79:	

strcmp$22:	; Return 1
80:		mov ax, [bp]
81:		mov di, [bp + 4]
82:		mov bp, [bp + 2]
83:		jmp ax
85:	

strcmp$23:	; Increment index
86:		inc word [bp + 10]
88:	

strcmp$24:	; Goto 1
89:		jmp strcmp$1
91:	

strcmp$25:	; FunctionEnd strcmp
1:	

strncmp:	; Assign index 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; SignedGreaterThanEqual 26 index size
5:		mov ax, [bp + 10]
6:		cmp [bp + 12], ax
7:		jge strncmp$26
9:	

strncmp$2:	; BinaryAdd £temporary3794 left index
10:		mov si, [bp + 6]
11:		add si, [bp + 12]
13:	

strncmp$3:	; Deref £temporary3793 -> £temporary3794 £temporary3794 0
15:	

strncmp$4:	; NotEqual 10 £temporary3793 -> £temporary3794 0
16:		cmp byte [si], 0
17:		jne strncmp$10
19:	

strncmp$5:	; BinaryAdd £temporary3797 right index
20:		mov si, [bp + 8]
21:		add si, [bp + 12]
23:	

strncmp$6:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0
25:	

strncmp$7:	; NotEqual 10 £temporary3796 -> £temporary3797 0
26:		cmp byte [si], 0
27:		jne strncmp$10
29:	

strncmp$8:	; SetReturnValue 0
30:		mov bx, 0
32:	

strncmp$9:	; Return 0
33:		mov ax, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp ax
38:	

strncmp$10:	; BinaryAdd £temporary3801 left index
39:		mov si, [bp + 6]
40:		add si, [bp + 12]
42:	

strncmp$11:	; Deref £temporary3800 -> £temporary3801 £temporary3801 0
44:	

strncmp$12:	; BinaryAdd £temporary3803 right index
45:		mov di, [bp + 8]
46:		add di, [bp + 12]
48:	

strncmp$13:	; Deref £temporary3802 -> £temporary3803 £temporary3803 0
50:	

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3800 -> £temporary3801 £temporary3802 -> £temporary3803
51:		mov al, [di]
52:		cmp [si], al
53:		jge strncmp$17
55:	

strncmp$15:	; SetReturnValue -1
56:		mov bx, -1
58:	

strncmp$16:	; Return -1
59:		mov ax, [bp]
60:		mov di, [bp + 4]
61:		mov bp, [bp + 2]
62:		jmp ax
64:	

strncmp$17:	; BinaryAdd £temporary3806 left index
65:		mov si, [bp + 6]
66:		add si, [bp + 12]
68:	

strncmp$18:	; Deref £temporary3805 -> £temporary3806 £temporary3806 0
70:	

strncmp$19:	; BinaryAdd £temporary3808 right index
71:		mov di, [bp + 8]
72:		add di, [bp + 12]
74:	

strncmp$20:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0
76:	

strncmp$21:	; SignedLessThanEqual 24 £temporary3805 -> £temporary3806 £temporary3807 -> £temporary3808
77:		mov al, [di]
78:		cmp [si], al
79:		jle strncmp$24
81:	

strncmp$22:	; SetReturnValue 1
82:		mov bx, 1
84:	

strncmp$23:	; Return 1
85:		mov ax, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp ax
90:	

strncmp$24:	; Increment index
91:		inc word [bp + 12]
93:	

strncmp$25:	; Goto 1
94:		jmp strncmp$1
96:	

strncmp$26:	; SetReturnValue 0
97:		mov bx, 0
99:	

strncmp$27:	; Return 0
100:		mov ax, [bp]
101:		mov di, [bp + 4]
102:		mov bp, [bp + 2]
103:		jmp ax
105:	

strncmp$28:	; FunctionEnd strncmp
1:	

strchr:	; IntegralToIntegral £temporary3810 i
2:		mov ax, [bp + 8]
5:		cmp ax, 0
6:		jge strchr$1
7:		neg ax
9:		neg al
11:	

strchr$1:	; Assign c £temporary3810
12:		mov [bp + 12], al
14:	

strchr$2:	; Assign index 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; BinaryAdd £temporary3812 text index
18:		mov si, [bp + 6]
19:		add si, [bp + 10]
21:	

strchr$4:	; Deref £temporary3811 -> £temporary3812 £temporary3812 0
23:	

strchr$5:	; Equal 16 £temporary3811 -> £temporary3812 0
24:		cmp byte [si], 0
25:		je strchr$16
27:	

strchr$6:	; BinaryAdd £temporary3816 text index
28:		mov si, [bp + 6]
29:		add si, [bp + 10]
31:	

strchr$7:	; Deref £temporary3815 -> £temporary3816 £temporary3816 0
33:	

strchr$8:	; NotEqual 14 £temporary3815 -> £temporary3816 c
34:		mov al, [bp + 12]
35:		cmp [si], al
36:		jne strchr$14
38:	

strchr$9:	; BinaryAdd £temporary3819 text index
39:		mov bx, [bp + 6]
40:		add bx, [bp + 10]
42:	

strchr$10:	; Deref £temporary3818 -> £temporary3819 £temporary3819 0
44:	

strchr$11:	; address £temporary3820 £temporary3818 -> £temporary3819
46:	

strchr$12:	; SetReturnValue £temporary3820
48:	

strchr$13:	; Return £temporary3820
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

strchr$14:	; Increment index
55:		inc word [bp + 10]
57:	

strchr$15:	; Goto 3
58:		jmp strchr$3
60:	

strchr$16:	; SetReturnValue 0
61:		mov bx, 0
63:	

strchr$17:	; Return 0
64:		mov ax, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp ax
69:	

strchr$18:	; FunctionEnd strchr
1:	

strrchr:	; Assign result 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; IntegralToIntegral £temporary3821 i
5:		mov ax, [bp + 8]
8:		cmp ax, 0
9:		jge strrchr$2
10:		neg ax
12:		neg al
14:	

strrchr$2:	; Assign c £temporary3821
15:		mov [bp + 14], al
17:	

strrchr$3:	; Assign index 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; BinaryAdd £temporary3823 text index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strrchr$5:	; Deref £temporary3822 -> £temporary3823 £temporary3823 0
26:	

strrchr$6:	; Equal 16 £temporary3822 -> £temporary3823 0
27:		cmp byte [si], 0
28:		je strrchr$16
30:	

strrchr$7:	; BinaryAdd £temporary3827 text index
31:		mov si, [bp + 6]
32:		add si, [bp + 10]
34:	

strrchr$8:	; Deref £temporary3826 -> £temporary3827 £temporary3827 0
36:	

strrchr$9:	; NotEqual 14 £temporary3826 -> £temporary3827 c
37:		mov al, [bp + 14]
38:		cmp [si], al
39:		jne strrchr$14
41:	

strrchr$10:	; BinaryAdd £temporary3830 text index
42:		mov si, [bp + 6]
43:		add si, [bp + 10]
45:	

strrchr$11:	; Deref £temporary3829 -> £temporary3830 £temporary3830 0
47:	

strrchr$12:	; address £temporary3831 £temporary3829 -> £temporary3830
49:	

strrchr$13:	; Assign result £temporary3831
50:		mov [bp + 12], si
52:	

strrchr$14:	; Increment index
53:		inc word [bp + 10]
55:	

strrchr$15:	; Goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; SetReturnValue result
59:		mov bx, [bp + 12]
61:	

strrchr$17:	; Return result
62:		mov ax, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp ax
67:	

strrchr$18:	; FunctionEnd strrchr
1:	

strspn:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; BinaryAdd £temporary3833 mainString index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strspn$2:	; Deref £temporary3832 -> £temporary3833 £temporary3833 0
10:	

strspn$3:	; Equal 18 £temporary3832 -> £temporary3833 0
11:		cmp byte [si], 0
12:		je strspn$18
14:	

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strspn$5:	; Parameter 12 charSet 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strspn$6:	; BinaryAdd £temporary3837 mainString index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strspn$7:	; Deref £temporary3836 -> £temporary3837 £temporary3837 0
26:	

strspn$8:	; IntegralToIntegral £temporary3838 £temporary3836 -> £temporary3837
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strspn$9
33:		neg al
35:		neg ax
37:	

strspn$9:	; Parameter 12 £temporary3838 8
38:		mov [bp + 20], ax
40:	

strspn$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; PostCall 12
48:	

strspn$12:	; GetReturnValue £temporary3839
53:	

strspn$13:	; NotEqual 16 £temporary3839 0
54:		cmp bx, 0
55:		jne strspn$16
57:	

strspn$14:	; SetReturnValue index
58:		mov bx, [bp + 10]
60:	

strspn$15:	; Return index
61:		mov ax, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp ax
66:	

strspn$16:	; Increment index
67:		inc word [bp + 10]
69:	

strspn$17:	; Goto 1
70:		jmp strspn$1
72:	

strspn$18:	; SetReturnValue -1
73:		mov bx, -1
75:	

strspn$19:	; Return -1
76:		mov ax, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp ax
81:	

strspn$20:	; FunctionEnd strspn
1:	

strcspn:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; BinaryAdd £temporary3844 mainString index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strcspn$2:	; Deref £temporary3843 -> £temporary3844 £temporary3844 0
10:	

strcspn$3:	; Equal 18 £temporary3843 -> £temporary3844 0
11:		cmp byte [si], 0
12:		je strcspn$18
14:	

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strcspn$5:	; Parameter 12 charSet 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strcspn$6:	; BinaryAdd £temporary3848 mainString index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strcspn$7:	; Deref £temporary3847 -> £temporary3848 £temporary3848 0
26:	

strcspn$8:	; IntegralToIntegral £temporary3849 £temporary3847 -> £temporary3848
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strcspn$9
33:		neg al
35:		neg ax
37:	

strcspn$9:	; Parameter 12 £temporary3849 8
38:		mov [bp + 20], ax
40:	

strcspn$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; PostCall 12
48:	

strcspn$12:	; GetReturnValue £temporary3850
53:	

strcspn$13:	; Equal 16 £temporary3850 0
54:		cmp bx, 0
55:		je strcspn$16
57:	

strcspn$14:	; SetReturnValue index
58:		mov bx, [bp + 10]
60:	

strcspn$15:	; Return index
61:		mov ax, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp ax
66:	

strcspn$16:	; Increment index
67:		inc word [bp + 10]
69:	

strcspn$17:	; Goto 1
70:		jmp strcspn$1
72:	

strcspn$18:	; SetReturnValue -1
73:		mov bx, -1
75:	

strcspn$19:	; Return -1
76:		mov ax, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp ax
81:	

strcspn$20:	; FunctionEnd strcspn
1:	

strpbrk:	; Assign index 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; BinaryAdd £temporary3855 mainString index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strpbrk$2:	; Deref £temporary3854 -> £temporary3855 £temporary3855 0
10:	

strpbrk$3:	; Equal 21 £temporary3854 -> £temporary3855 0
11:		cmp byte [si], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
16:	

strpbrk$5:	; Parameter 12 charSet 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strpbrk$6:	; BinaryAdd £temporary3859 mainString index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strpbrk$7:	; Deref £temporary3858 -> £temporary3859 £temporary3859 0
26:	

strpbrk$8:	; IntegralToIntegral £temporary3860 £temporary3858 -> £temporary3859
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strpbrk$9
33:		neg al
35:		neg ax
37:	

strpbrk$9:	; Parameter 12 £temporary3860 8
38:		mov [bp + 20], ax
40:	

strpbrk$10:	; Call 12 strchr 0
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; PostCall 12
48:	

strpbrk$12:	; GetReturnValue £temporary3861
53:	

strpbrk$13:	; Equal 19 £temporary3861 0
54:		cmp bx, 0
55:		je strpbrk$19
57:	

strpbrk$14:	; BinaryAdd £temporary3864 mainString index
58:		mov bx, [bp + 6]
59:		add bx, [bp + 10]
61:	

strpbrk$15:	; Deref £temporary3863 -> £temporary3864 £temporary3864 0
63:	

strpbrk$16:	; address £temporary3865 £temporary3863 -> £temporary3864
65:	

strpbrk$17:	; SetReturnValue £temporary3865
67:	

strpbrk$18:	; Return £temporary3865
68:		mov ax, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp ax
73:	

strpbrk$19:	; Increment index
74:		inc word [bp + 10]
76:	

strpbrk$20:	; Goto 1
77:		jmp strpbrk$1
79:	

strpbrk$21:	; SetReturnValue 0
80:		mov bx, 0
82:	

strpbrk$22:	; Return 0
83:		mov ax, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp ax
88:	

strpbrk$23:	; FunctionEnd strpbrk
1:	

strstr:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strstr$1:	; Parameter 12 subString 6
4:		mov ax, [bp + 8]
5:		mov [bp + 18], ax
7:	

strstr$2:	; Call 12 strlen 0
8:		mov word [bp + 12], strstr$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strstr$3:	; PostCall 12
15:	

strstr$4:	; GetReturnValue £temporary3868
20:	

strstr$5:	; Assign subStringSize £temporary3868
21:		mov [bp + 12], bx
23:	

strstr$6:	; Assign index 0
24:		mov word [bp + 10], 0
26:	

strstr$7:	; BinaryAdd £temporary3870 mainString index
27:		mov si, [bp + 6]
28:		add si, [bp + 10]
30:	

strstr$8:	; Deref £temporary3869 -> £temporary3870 £temporary3870 0
32:	

strstr$9:	; Equal 26 £temporary3869 -> £temporary3870 0
33:		cmp byte [si], 0
34:		je strstr$26
36:	

strstr$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
38:	

strstr$11:	; BinaryAdd £temporary3873 mainString index
39:		mov ax, [bp + 6]
40:		add ax, [bp + 10]
42:	

strstr$12:	; Parameter 14 £temporary3873 6
43:		mov [bp + 20], ax
45:	

strstr$13:	; Parameter 14 subString 8
46:		mov ax, [bp + 8]
47:		mov [bp + 22], ax
49:	

strstr$14:	; Parameter 14 subStringSize 10
50:		mov ax, [bp + 12]
51:		mov [bp + 24], ax
53:	

strstr$15:	; Call 14 strncmp 0
54:		mov word [bp + 14], strstr$16
55:		mov [bp + 16], bp
56:		add bp, 14
57:		jmp strncmp
59:	

strstr$16:	; PostCall 14
61:	

strstr$17:	; GetReturnValue £temporary3874
66:	

strstr$18:	; NotEqual 24 £temporary3874 0
67:		cmp bx, 0
68:		jne strstr$24
70:	

strstr$19:	; BinaryAdd £temporary3877 mainString index
71:		mov bx, [bp + 6]
72:		add bx, [bp + 10]
74:	

strstr$20:	; Deref £temporary3876 -> £temporary3877 £temporary3877 0
76:	

strstr$21:	; address £temporary3878 £temporary3876 -> £temporary3877
78:	

strstr$22:	; SetReturnValue £temporary3878
80:	

strstr$23:	; Return £temporary3878
81:		mov ax, [bp]
82:		mov di, [bp + 4]
83:		mov bp, [bp + 2]
84:		jmp ax
86:	

strstr$24:	; Increment index
87:		inc word [bp + 10]
89:	

strstr$25:	; Goto 7
90:		jmp strstr$7
92:	

strstr$26:	; SetReturnValue 0
93:		mov bx, 0
95:	

strstr$27:	; Return 0
96:		mov ax, [bp]
97:		mov di, [bp + 4]
98:		mov bp, [bp + 2]
99:		jmp ax
101:	

strstr$28:	; FunctionEnd strstr
1:	

strlen:	; Assign index 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; BinaryAdd £temporary3884 string index
5:		mov si, [bp + 6]
6:		add si, [bp + 8]
8:	

strlen$2:	; Deref £temporary3883 -> £temporary3884 £temporary3884 0
10:	

strlen$3:	; Equal 6 £temporary3883 -> £temporary3884 0
11:		cmp byte [si], 0
12:		je strlen$6
14:	

strlen$4:	; Increment index
15:		inc word [bp + 8]
17:	

strlen$5:	; Goto 1
18:		jmp strlen$1
20:	

strlen$6:	; SetReturnValue index
21:		mov bx, [bp + 8]
23:	

strlen$7:	; Return index
24:		mov ax, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp ax
29:	

strlen$8:	; FunctionEnd strlen
1:	

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

strerror$1:	; Call 8 localeconv 0
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; PostCall 8
11:	

strerror$3:	; GetReturnValue £temporary3887
16:	

strerror$4:	; Assign localeConvPtr £temporary3887
17:		mov [bp + 8], bx
19:	

strerror$5:	; Equal 9 localeConvPtr 0
20:		cmp word [bp + 8], 0
21:		je strerror$9
23:	

strerror$6:	; Deref £temporary3889 -> localeConvPtr localeConvPtr 16
24:		mov si, [bp + 8]
26:	

strerror$7:	; Assign £temporary3893 £temporary3889 -> localeConvPtr
27:		mov ax, [si + 16]
29:	

strerror$8:	; Goto 10
30:		jmp strerror$10
32:	

strerror$9:	; Assign £temporary3893 0
33:		mov ax, 0
35:	

strerror$10:	; Assign messageList £temporary3893
36:		mov [bp + 10], ax
38:	

strerror$11:	; Equal 14 messageList 0
39:		cmp word [bp + 10], 0
40:		je strerror$14
42:	

strerror$12:	; Assign £temporary3898 messageList
43:		mov ax, [bp + 10]
45:	

strerror$13:	; Goto 15
46:		jmp strerror$15
48:	

strerror$14:	; Assign £temporary3898 enMessageList
49:		mov ax, enMessageList
51:	

strerror$15:	; Assign messageList £temporary3898
52:		mov [bp + 10], ax
54:	

strerror$16:	; UnsignedMultiply £temporary3900 errno 2
55:		mov ax, [bp + 6]
57:		xor dx, dx
58:		mul word [@8696$int2$2#]
64:	

strerror$17:	; BinaryAdd £temporary3901 messageList £temporary3900
65:		mov si, [bp + 10]
66:		add si, ax
68:	

strerror$18:	; Deref £temporary3899 -> £temporary3901 £temporary3901 0
70:	

strerror$19:	; SetReturnValue £temporary3899 -> £temporary3901
71:		mov bx, [si]
73:	

strerror$20:	; Return £temporary3899 -> £temporary3901
74:		mov ax, [bp]
75:		mov di, [bp + 4]
76:		mov bp, [bp + 2]
77:		jmp ax
79:	

strerror$21:	; FunctionEnd strerror
1:	

strtok:	; Equal 37 string 0
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; Deref £temporary3903 -> string string 0
6:		mov si, [bp + 6]
8:	

strtok$2:	; NotEqual 5 £temporary3903 -> string 0
9:		cmp byte [si], 0
10:		jne strtok$5
12:	

strtok$3:	; SetReturnValue 0
13:		mov bx, 0
15:	

strtok$4:	; Return 0
16:		mov ax, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp ax
21:	

strtok$5:	; Assign index 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; BinaryAdd £temporary3906 string index
25:		mov si, [bp + 6]
26:		add si, [bp + 10]
28:	

strtok$7:	; Deref £temporary3905 -> £temporary3906 £temporary3906 0
30:	

strtok$8:	; Equal 31 £temporary3905 -> £temporary3906 0
31:		cmp byte [si], 0
32:		je strtok$31
34:	

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
36:	

strtok$10:	; Parameter 14 charSet 6
37:		mov ax, [bp + 8]
38:		mov [bp + 20], ax
40:	

strtok$11:	; BinaryAdd £temporary3910 string index
41:		mov si, [bp + 6]
42:		add si, [bp + 10]
44:	

strtok$12:	; Deref £temporary3909 -> £temporary3910 £temporary3910 0
46:	

strtok$13:	; IntegralToIntegral £temporary3911 £temporary3909 -> £temporary3910
47:		mov al, [si]
49:		and ax, 255
51:		cmp al, 0
52:		jge strtok$14
53:		neg al
55:		neg ax
57:	

strtok$14:	; Parameter 14 £temporary3911 8
58:		mov [bp + 22], ax
60:	

strtok$15:	; Call 14 strchr 0
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; PostCall 14
68:	

strtok$17:	; GetReturnValue £temporary3912
73:	

strtok$18:	; Equal 29 £temporary3912 0
74:		cmp bx, 0
75:		je strtok$29
77:	

strtok$19:	; BinaryAdd £temporary3915 string index
78:		mov si, [bp + 6]
79:		add si, [bp + 10]
81:	

strtok$20:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0
83:	

strtok$21:	; Assign £temporary3914 -> £temporary3915 0
84:		mov byte [si], 0
86:	

strtok$22:	; BinaryAdd £temporary3916 index 1
87:		mov ax, [bp + 10]
88:		add ax, 1
90:	

strtok$23:	; BinaryAdd £temporary3918 string £temporary3916
91:		mov si, [bp + 6]
92:		add si, ax
94:	

strtok$24:	; Deref £temporary3917 -> £temporary3918 £temporary3918 0
96:	

strtok$25:	; address £temporary3919 £temporary3917 -> £temporary3918
98:	

strtok$26:	; Assign token £temporary3919
99:		mov [token], si
101:	

strtok$27:	; SetReturnValue string
102:		mov bx, [bp + 6]
104:	

strtok$28:	; Return string
105:		mov ax, [bp]
106:		mov di, [bp + 4]
107:		mov bp, [bp + 2]
108:		jmp ax
110:	

strtok$29:	; Increment index
111:		inc word [bp + 10]
113:	

strtok$30:	; Goto 6
114:		jmp strtok$6
116:	

strtok$31:	; BinaryAdd £temporary3921 string index
117:		mov si, [bp + 6]
118:		add si, [bp + 10]
120:	

strtok$32:	; Deref £temporary3920 -> £temporary3921 £temporary3921 0
122:	

strtok$33:	; address £temporary3922 £temporary3920 -> £temporary3921
124:	

strtok$34:	; Assign token £temporary3922
125:		mov [token], si
127:	

strtok$35:	; SetReturnValue string
128:		mov bx, [bp + 6]
130:	

strtok$36:	; Return string
131:		mov ax, [bp]
132:		mov di, [bp + 4]
133:		mov bp, [bp + 2]
134:		jmp ax
136:	

strtok$37:	; NotEqual 40 token 0
137:		cmp word [token], 0
138:		jne strtok$40
140:	

strtok$38:	; SetReturnValue 0
141:		mov bx, 0
143:	

strtok$39:	; Return 0
144:		mov ax, [bp]
145:		mov di, [bp + 4]
146:		mov bp, [bp + 2]
147:		jmp ax
149:	

strtok$40:	; NotEqual 43 (token,0) 0
150:		mov si, [token]
151:		cmp byte [si], 0
152:		jne strtok$43
154:	

strtok$41:	; SetReturnValue 0
155:		mov bx, 0
157:	

strtok$42:	; Return 0
158:		mov ax, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp ax
163:	

strtok$43:	; Assign index 0
164:		mov word [bp + 10], 0
166:	

strtok$44:	; BinaryAdd £temporary3927 token index
167:		mov si, [token]
168:		add si, [bp + 10]
170:	

strtok$45:	; Deref £temporary3926 -> £temporary3927 £temporary3927 0
172:	

strtok$46:	; Equal 70 £temporary3926 -> £temporary3927 0
173:		cmp byte [si], 0
174:		je strtok$70
176:	

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
178:	

strtok$48:	; Parameter 14 charSet 6
179:		mov ax, [bp + 8]
180:		mov [bp + 20], ax
182:	

strtok$49:	; BinaryAdd £temporary3931 token index
183:		mov si, [token]
184:		add si, [bp + 10]
186:	

strtok$50:	; Deref £temporary3930 -> £temporary3931 £temporary3931 0
188:	

strtok$51:	; IntegralToIntegral £temporary3932 £temporary3930 -> £temporary3931
189:		mov al, [si]
191:		and ax, 255
193:		cmp al, 0
194:		jge strtok$52
195:		neg al
197:		neg ax
199:	

strtok$52:	; Parameter 14 £temporary3932 8
200:		mov [bp + 22], ax
202:	

strtok$53:	; Call 14 strchr 0
203:		mov word [bp + 14], strtok$54
204:		mov [bp + 16], bp
205:		add bp, 14
206:		jmp strchr
208:	

strtok$54:	; PostCall 14
210:	

strtok$55:	; GetReturnValue £temporary3933
215:	

strtok$56:	; Equal 68 £temporary3933 0
216:		cmp bx, 0
217:		je strtok$68
219:	

strtok$57:	; Assign tokenStart2 token
220:		mov ax, [token]
221:		mov [bp + 14], ax
223:	

strtok$58:	; BinaryAdd £temporary3936 token index
224:		mov si, [token]
225:		add si, [bp + 10]
227:	

strtok$59:	; Deref £temporary3935 -> £temporary3936 £temporary3936 0
229:	

strtok$60:	; Assign £temporary3935 -> £temporary3936 0
230:		mov byte [si], 0
232:	

strtok$61:	; BinaryAdd £temporary3937 index 1
233:		mov ax, [bp + 10]
234:		add ax, 1
236:	

strtok$62:	; BinaryAdd £temporary3939 token £temporary3937
237:		mov si, [token]
238:		add si, ax
240:	

strtok$63:	; Deref £temporary3938 -> £temporary3939 £temporary3939 0
242:	

strtok$64:	; address £temporary3940 £temporary3938 -> £temporary3939
244:	

strtok$65:	; Assign token £temporary3940
245:		mov [token], si
247:	

strtok$66:	; SetReturnValue tokenStart2
248:		mov bx, [bp + 14]
250:	

strtok$67:	; Return tokenStart2
251:		mov ax, [bp]
252:		mov di, [bp + 4]
253:		mov bp, [bp + 2]
254:		jmp ax
256:	

strtok$68:	; Increment index
257:		inc word [bp + 10]
259:	

strtok$69:	; Goto 44
260:		jmp strtok$44
262:	

strtok$70:	; Assign tokenStart token
263:		mov ax, [token]
264:		mov [bp + 12], ax
266:	

strtok$71:	; BinaryAdd £temporary3942 token index
267:		mov si, [token]
268:		add si, [bp + 10]
270:	

strtok$72:	; Deref £temporary3941 -> £temporary3942 £temporary3942 0
272:	

strtok$73:	; address £temporary3943 £temporary3941 -> £temporary3942
274:	

strtok$74:	; Assign token £temporary3943
275:		mov [token], si
277:	

strtok$75:	; SetReturnValue tokenStart
278:		mov bx, [bp + 12]
280:	

strtok$76:	; Return tokenStart
281:		mov ax, [bp]
282:		mov di, [bp + 4]
283:		mov bp, [bp + 2]
284:		jmp ax
286:	

strtok$77:	; FunctionEnd strtok
1:	

memcpy:	; IntegralToIntegral £temporary3948 target
2:		mov ax, [bp + 6]
5:	

memcpy$1:	; Assign charTarget £temporary3948
6:		mov [bp + 12], ax
8:	

memcpy$2:	; IntegralToIntegral £temporary3949 source
9:		mov ax, [bp + 8]
12:	

memcpy$3:	; Assign charSource £temporary3949
13:		mov [bp + 14], ax
15:	

memcpy$4:	; Assign index 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; SignedGreaterThanEqual 13 index size
19:		mov ax, [bp + 10]
20:		cmp [bp + 16], ax
21:		jge memcpy$13
23:	

memcpy$6:	; BinaryAdd £temporary3953 charTarget index
24:		mov si, [bp + 12]
25:		add si, [bp + 16]
27:	

memcpy$7:	; Deref £temporary3952 -> £temporary3953 £temporary3953 0
29:	

memcpy$8:	; BinaryAdd £temporary3955 charSource index
30:		mov di, [bp + 14]
31:		add di, [bp + 16]
33:	

memcpy$9:	; Deref £temporary3954 -> £temporary3955 £temporary3955 0
35:	

memcpy$10:	; Assign £temporary3952 -> £temporary3953 £temporary3954 -> £temporary3955
36:		mov al, [di]
37:		mov [si], al
39:	

memcpy$11:	; Increment index
40:		inc word [bp + 16]
42:	

memcpy$12:	; Goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; IntegralToIntegral £temporary3956 target
46:		mov bx, [bp + 6]
49:	

memcpy$14:	; SetReturnValue £temporary3956
51:	

memcpy$15:	; Return £temporary3956
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

memcpy$16:	; FunctionEnd memcpy
1:	

memmove:	; IntegralToIntegral £temporary3957 target
2:		mov ax, [bp + 6]
5:	

memmove$1:	; Assign charTarget £temporary3957
6:		mov [bp + 12], ax
8:	

memmove$2:	; IntegralToIntegral £temporary3958 source
9:		mov ax, [bp + 8]
12:	

memmove$3:	; Assign charSource £temporary3958
13:		mov [bp + 14], ax
15:	

memmove$4:	; SignedGreaterThanEqual 14 source target
16:		mov ax, [bp + 6]
17:		cmp [bp + 8], ax
18:		jge memmove$14
20:	

memmove$5:	; BinarySubtract index size 1
21:		mov ax, [bp + 10]
22:		sub ax, 1
23:		mov [bp + 16], ax
25:	

memmove$6:	; SignedLessThan 23 index 0
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; BinaryAdd £temporary3964 charTarget index
30:		mov si, [bp + 12]
31:		add si, [bp + 16]
33:	

memmove$8:	; Deref £temporary3963 -> £temporary3964 £temporary3964 0
35:	

memmove$9:	; BinaryAdd £temporary3966 charSource index
36:		mov di, [bp + 14]
37:		add di, [bp + 16]
39:	

memmove$10:	; Deref £temporary3965 -> £temporary3966 £temporary3966 0
41:	

memmove$11:	; Assign £temporary3963 -> £temporary3964 £temporary3965 -> £temporary3966
42:		mov al, [di]
43:		mov [si], al
45:	

memmove$12:	; Decrement index
46:		dec word [bp + 16]
48:	

memmove$13:	; Goto 6
49:		jmp memmove$6
51:	

memmove$14:	; Assign index 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; SignedGreaterThanEqual 23 index size
55:		mov ax, [bp + 10]
56:		cmp [bp + 16], ax
57:		jge memmove$23
59:	

memmove$16:	; BinaryAdd £temporary3970 charTarget index
60:		mov si, [bp + 12]
61:		add si, [bp + 16]
63:	

memmove$17:	; Deref £temporary3969 -> £temporary3970 £temporary3970 0
65:	

memmove$18:	; BinaryAdd £temporary3972 charSource index
66:		mov di, [bp + 14]
67:		add di, [bp + 16]
69:	

memmove$19:	; Deref £temporary3971 -> £temporary3972 £temporary3972 0
71:	

memmove$20:	; Assign £temporary3969 -> £temporary3970 £temporary3971 -> £temporary3972
72:		mov al, [di]
73:		mov [si], al
75:	

memmove$21:	; Increment index
76:		inc word [bp + 16]
78:	

memmove$22:	; Goto 15
79:		jmp memmove$15
81:	

memmove$23:	; IntegralToIntegral £temporary3973 target
82:		mov bx, [bp + 6]
85:	

memmove$24:	; SetReturnValue £temporary3973
87:	

memmove$25:	; Return £temporary3973
88:		mov ax, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp ax
93:	

memmove$26:	; FunctionEnd memmove
1:	

memcmp:	; IntegralToIntegral £temporary3974 left
2:		mov ax, [bp + 6]
5:	

memcmp$1:	; Assign charLeft £temporary3974
6:		mov [bp + 12], ax
8:	

memcmp$2:	; IntegralToIntegral £temporary3975 right
9:		mov ax, [bp + 8]
12:	

memcmp$3:	; Assign charRight £temporary3975
13:		mov [bp + 14], ax
15:	

memcmp$4:	; Assign index 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; SignedGreaterThanEqual 22 index size
19:		mov ax, [bp + 10]
20:		cmp [bp + 16], ax
21:		jge memcmp$22
23:	

memcmp$6:	; BinaryAdd £temporary3979 charLeft index
24:		mov si, [bp + 12]
25:		add si, [bp + 16]
27:	

memcmp$7:	; Deref £temporary3978 -> £temporary3979 £temporary3979 0
29:	

memcmp$8:	; BinaryAdd £temporary3981 charRight index
30:		mov di, [bp + 14]
31:		add di, [bp + 16]
33:	

memcmp$9:	; Deref £temporary3980 -> £temporary3981 £temporary3981 0
35:	

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3978 -> £temporary3979 £temporary3980 -> £temporary3981
36:		mov al, [di]
37:		cmp [si], al
38:		jge memcmp$13
40:	

memcmp$11:	; SetReturnValue -1
41:		mov bx, -1
43:	

memcmp$12:	; Return -1
44:		mov ax, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp ax
49:	

memcmp$13:	; BinaryAdd £temporary3984 charLeft index
50:		mov si, [bp + 12]
51:		add si, [bp + 16]
53:	

memcmp$14:	; Deref £temporary3983 -> £temporary3984 £temporary3984 0
55:	

memcmp$15:	; BinaryAdd £temporary3986 charRight index
56:		mov di, [bp + 14]
57:		add di, [bp + 16]
59:	

memcmp$16:	; Deref £temporary3985 -> £temporary3986 £temporary3986 0
61:	

memcmp$17:	; SignedLessThanEqual 20 £temporary3983 -> £temporary3984 £temporary3985 -> £temporary3986
62:		mov al, [di]
63:		cmp [si], al
64:		jle memcmp$20
66:	

memcmp$18:	; SetReturnValue 1
67:		mov bx, 1
69:	

memcmp$19:	; Return 1
70:		mov ax, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp ax
75:	

memcmp$20:	; Increment index
76:		inc word [bp + 16]
78:	

memcmp$21:	; Goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; SetReturnValue 0
82:		mov bx, 0
84:	

memcmp$23:	; Return 0
85:		mov ax, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp ax
90:	

memcmp$24:	; FunctionEnd memcmp
1:	

memchr:	; IntegralToIntegral £temporary3988 block
2:		mov ax, [bp + 6]
5:	

memchr$1:	; Assign charBlock £temporary3988
6:		mov [bp + 14], ax
8:	

memchr$2:	; IntegralToIntegral £temporary3989 i
9:		mov ax, [bp + 8]
12:		cmp ax, 0
13:		jge memchr$3
14:		neg ax
16:		neg al
18:	

memchr$3:	; Assign c £temporary3989
19:		mov [bp + 16], al
21:	

memchr$4:	; Assign index 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; SignedGreaterThanEqual 17 index size
25:		mov ax, [bp + 10]
26:		cmp [bp + 12], ax
27:		jge memchr$17
29:	

memchr$6:	; BinaryAdd £temporary3993 charBlock index
30:		mov si, [bp + 14]
31:		add si, [bp + 12]
33:	

memchr$7:	; Deref £temporary3992 -> £temporary3993 £temporary3993 0
35:	

memchr$8:	; NotEqual 15 £temporary3992 -> £temporary3993 c
36:		mov al, [bp + 16]
37:		cmp [si], al
38:		jne memchr$15
40:	

memchr$9:	; BinaryAdd £temporary3996 charBlock index
41:		mov bx, [bp + 14]
42:		add bx, [bp + 12]
44:	

memchr$10:	; Deref £temporary3995 -> £temporary3996 £temporary3996 0
46:	

memchr$11:	; address £temporary3997 £temporary3995 -> £temporary3996
48:	

memchr$12:	; IntegralToIntegral £temporary3998 £temporary3997
51:	

memchr$13:	; SetReturnValue £temporary3998
53:	

memchr$14:	; Return £temporary3998
54:		mov ax, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp ax
59:	

memchr$15:	; Increment index
60:		inc word [bp + 12]
62:	

memchr$16:	; Goto 5
63:		jmp memchr$5
65:	

memchr$17:	; SetReturnValue 0
66:		mov bx, 0
68:	

memchr$18:	; Return 0
69:		mov ax, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp ax
74:	

memchr$19:	; FunctionEnd memchr
1:	

memset:	; IntegralToIntegral £temporary3999 block
2:		mov ax, [bp + 6]
5:	

memset$1:	; Assign charBlock £temporary3999
6:		mov [bp + 12], ax
8:	

memset$2:	; IntegralToIntegral £temporary4000 i
9:		mov ax, [bp + 8]
12:		cmp ax, 0
13:		jge memset$3
14:		neg ax
16:		neg al
18:	

memset$3:	; Assign c £temporary4000
19:		mov [bp + 14], al
21:	

memset$4:	; Assign index 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; SignedGreaterThanEqual 11 index size
25:		mov ax, [bp + 10]
26:		cmp [bp + 15], ax
27:		jge memset$11
29:	

memset$6:	; BinaryAdd £temporary4004 charBlock index
30:		mov si, [bp + 12]
31:		add si, [bp + 15]
33:	

memset$7:	; Deref £temporary4003 -> £temporary4004 £temporary4004 0
35:	

memset$8:	; Assign £temporary4003 -> £temporary4004 c
36:		mov al, [bp + 14]
37:		mov [si], al
39:	

memset$9:	; Increment index
40:		inc word [bp + 15]
42:	

memset$10:	; Goto 5
43:		jmp memset$5
45:	

memset$11:	; SetReturnValue block
46:		mov bx, [bp + 6]
48:	

memset$12:	; Return block
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

memset$13:	; FunctionEnd memset
