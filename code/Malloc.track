1:	

malloc:	; IntegralToIntegral £temporary23 memorySize
2:		mov a4, [bp + 6]
5:	

malloc$1:	; BinaryAdd newBlockSize £temporary23 4
6:		add a4, 4
7:		mov [bp + 8], a4
9:	

malloc$2:	; Assign minGap 0
10:		mov word [bp + 10], 0
12:	

malloc$3:	; Assign lastAddress 65528
13:		mov word [bp + 12], 65528
15:	

malloc$4:	; Assign minBlockPtr 0
16:		mov word [bp + 14], 0
18:	

malloc$5:	; Assign minPrevBlockPtr 0
19:		mov word [bp + 16], 0
21:	

malloc$6:	; Assign prevBlockPtr 0
22:		mov word [bp + 18], 0
24:	

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
25:		mov a5, [g_firstBlockPtr]
26:		mov [bp + 20], a5
28:	

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
29:		cmp word [bp + 6], 0
30:		jge malloc$20
32:	

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
34:	

malloc$10:	; Parameter 22 stderr 6
35:		mov a6, [stderr]
36:		mov [bp + 28], a6
38:	

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
39:		mov word [bp + 30], @111$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
41:	

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
42:		mov word [bp + 32], @112$string_memorySize203E3D200#
44:	

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
45:		mov word [bp + 34], @113$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#
47:	

malloc$14:	; Parameter 22 41 14
48:		mov word [bp + 36], 41
50:	

malloc$15:	; Call 22 fprintf 0
51:		mov word [bp + 22], malloc$16
52:		mov [bp + 24], bp
53:		add bp, 22
54:		mov di, bp
55:		add di, 6
56:		jmp fprintf
58:	

malloc$16:	; PostCall 22
60:	

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
62:	

malloc$18:	; Call 22 abort 0
63:		mov word [bp + 22], malloc$19
64:		mov [bp + 24], bp
65:		add bp, 22
66:		jmp abort
68:	

malloc$19:	; PostCall 22
70:	

malloc$20:	; NotEqual 23 memorySize 0
71:		cmp word [bp + 6], 0
72:		jne malloc$23
74:	

malloc$21:	; SetReturnValue 0
75:		mov a8, 0
77:	

malloc$22:	; Return 0
78:		mov t9, [bp]
79:		mov di, [bp + 4]
80:		mov bp, [bp + 2]
81:		jmp t9
83:	

malloc$23:	; Equal 41 currBlockPtr 0
84:		cmp word [bp + 20], 0
85:		je malloc$41
87:	

malloc$24:	; IntegralToIntegral £temporary31 currBlockPtr
88:		mov a10, [bp + 20]
91:	

malloc$25:	; Assign currAddress £temporary31
92:		mov [bp + 22], a10
94:	

malloc$26:	; Deref £temporary32 -> currBlockPtr currBlockPtr 0
95:		mov a11, [bp + 20]
97:	

malloc$27:	; BinaryAdd £temporary33 currAddress £temporary32 -> currBlockPtr
98:		mov a12, [bp + 22]
99:		add a12, [a11]
101:	

malloc$28:	; BinaryAdd £temporary34 £temporary33 4
102:		add a12, 4
104:	

malloc$29:	; BinarySubtract currGap lastAddress £temporary34
105:		mov a13, [bp + 12]
106:		sub a13, a12
107:		mov [bp + 24], a13
109:	

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
110:		mov a14, [bp + 24]
111:		cmp [bp + 8], a14
112:		ja malloc$36
114:	

malloc$31:	; Equal 33 minGap 0
115:		cmp word [bp + 10], 0
116:		je malloc$33
118:	

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
119:		mov a15, [bp + 10]
120:		cmp [bp + 24], a15
121:		jae malloc$36
123:	

malloc$33:	; Assign minGap currGap
124:		mov a16, [bp + 24]
125:		mov [bp + 10], a16
127:	

malloc$34:	; Assign minBlockPtr currBlockPtr
128:		mov a17, [bp + 20]
129:		mov [bp + 14], a17
131:	

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
132:		mov a18, [bp + 18]
133:		mov [bp + 16], a18
135:	

malloc$36:	; Assign lastAddress currAddress
136:		mov a19, [bp + 22]
137:		mov [bp + 12], a19
139:	

malloc$37:	; Assign prevBlockPtr currBlockPtr
140:		mov a20, [bp + 20]
141:		mov [bp + 18], a20
143:	

malloc$38:	; Deref £temporary41 -> currBlockPtr currBlockPtr 2
144:		mov a21, [bp + 20]
146:	

malloc$39:	; Assign currBlockPtr £temporary41 -> currBlockPtr
147:		mov t22, [a21 + 2]
148:		mov [bp + 20], t22
150:	

malloc$40:	; Goto 23
151:		jmp malloc$23
153:	

malloc$41:	; Equal 61 minBlockPtr 0
154:		cmp word [bp + 14], 0
155:		je malloc$61
157:	

malloc$42:	; IntegralToIntegral £temporary43 minBlockPtr
158:		mov a23, [bp + 14]
161:	

malloc$43:	; Deref £temporary44 -> minBlockPtr minBlockPtr 0
162:		mov a24, [bp + 14]
164:	

malloc$44:	; BinaryAdd £temporary45 £temporary43 £temporary44 -> minBlockPtr
165:		add a23, [a24]
167:	

malloc$45:	; BinaryAdd newAddress £temporary45 4
168:		add a23, 4
169:		mov [bp + 22], a23
171:	

malloc$46:	; IntegralToIntegral £temporary47 newAddress
172:		mov a25, [bp + 22]
175:	

malloc$47:	; Assign newBlockPtr £temporary47
176:		mov [bp + 24], a25
178:	

malloc$48:	; Deref £temporary48 -> newBlockPtr newBlockPtr 0
179:		mov a26, [bp + 24]
181:	

malloc$49:	; Assign £temporary48 -> newBlockPtr memorySize
182:		mov a27, [bp + 6]
183:		mov [a26], a27
185:	

malloc$50:	; Deref £temporary49 -> newBlockPtr newBlockPtr 2
186:		mov a28, [bp + 24]
188:	

malloc$51:	; Assign £temporary49 -> newBlockPtr minBlockPtr
189:		mov a29, [bp + 14]
190:		mov [a28 + 2], a29
192:	

malloc$52:	; Equal 56 minPrevBlockPtr 0
193:		cmp word [bp + 16], 0
194:		je malloc$56
196:	

malloc$53:	; Deref £temporary51 -> minPrevBlockPtr minPrevBlockPtr 2
197:		mov a30, [bp + 16]
199:	

malloc$54:	; Assign £temporary51 -> minPrevBlockPtr newBlockPtr
200:		mov a31, [bp + 24]
201:		mov [a30 + 2], a31
203:	

malloc$55:	; Goto 57
204:		jmp malloc$57
206:	

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
207:		mov a32, [bp + 24]
208:		mov [g_firstBlockPtr], a32
210:	

malloc$57:	; BinaryAdd £temporary52 newAddress 4
211:		mov a33, [bp + 22]
212:		add a33, 4
214:	

malloc$58:	; IntegralToIntegral £temporary53 £temporary52
217:	

malloc$59:	; SetReturnValue £temporary53
219:	

malloc$60:	; Return £temporary53
220:		mov t34, [bp]
221:		mov di, [bp + 4]
222:		mov bp, [bp + 2]
223:		jmp t34
225:	

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
226:		mov a35, [bp + 12]
227:		sub a35, [bp + 8]
228:		mov [bp + 22], a35
230:	

malloc$62:	; InspectRegister £temporary55 bp
232:	

malloc$63:	; Assign stackTop £temporary55
233:		mov [bp + 24], t36
235:	

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
236:		mov a37, [bp + 22]
237:		cmp [bp + 24], a37
238:		ja malloc$80
240:	

malloc$65:	; IntegralToIntegral £temporary57 newAddress
241:		mov a38, [bp + 22]
244:	

malloc$66:	; Assign newBlockPtr £temporary57
245:		mov [bp + 26], a38
247:	

malloc$67:	; Deref £temporary58 -> newBlockPtr newBlockPtr 0
248:		mov a39, [bp + 26]
250:	

malloc$68:	; Assign £temporary58 -> newBlockPtr memorySize
251:		mov a40, [bp + 6]
252:		mov [a39], a40
254:	

malloc$69:	; Deref £temporary59 -> newBlockPtr newBlockPtr 2
255:		mov a41, [bp + 26]
257:	

malloc$70:	; Assign £temporary59 -> newBlockPtr 0
258:		mov word [a41 + 2], 0
260:	

malloc$71:	; Equal 75 prevBlockPtr 0
261:		cmp word [bp + 18], 0
262:		je malloc$75
264:	

malloc$72:	; Deref £temporary61 -> prevBlockPtr prevBlockPtr 2
265:		mov a42, [bp + 18]
267:	

malloc$73:	; Assign £temporary61 -> prevBlockPtr newBlockPtr
268:		mov a43, [bp + 26]
269:		mov [a42 + 2], a43
271:	

malloc$74:	; Goto 76
272:		jmp malloc$76
274:	

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
275:		mov a44, [bp + 26]
276:		mov [g_firstBlockPtr], a44
278:	

malloc$76:	; BinaryAdd £temporary62 newAddress 4
279:		mov a45, [bp + 22]
280:		add a45, 4
282:	

malloc$77:	; IntegralToIntegral £temporary63 £temporary62
285:	

malloc$78:	; SetReturnValue £temporary63
287:	

malloc$79:	; Return £temporary63
288:		mov t46, [bp]
289:		mov di, [bp + 4]
290:		mov bp, [bp + 2]
291:		jmp t46
293:	

malloc$80:	; SetReturnValue 0
294:		mov a47, 0
296:	

malloc$81:	; Return 0
297:		mov t48, [bp]
298:		mov di, [bp + 4]
299:		mov bp, [bp + 2]
300:		jmp t48
302:	

malloc$82:	; FunctionEnd malloc
1:	

calloc:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
3:	

calloc$1:	; SignedMultiply £temporary69 number size
4:		mov a49, [bp + 6]
6:		xor dx, dx
7:		imul word [bp + 8]
13:	

calloc$2:	; Parameter 10 £temporary69 6
14:		mov [bp + 16], t52
16:	

calloc$3:	; Call 10 malloc 0
17:		mov word [bp + 10], calloc$4
18:		mov [bp + 12], bp
19:		add bp, 10
20:		jmp malloc
22:	

calloc$4:	; PostCall 10
24:	

calloc$5:	; GetReturnValue £temporary70
26:	

calloc$6:	; Assign pointer £temporary70
27:		mov [bp + 10], type53
29:	

calloc$7:	; Equal 14 pointer 0
30:		cmp word [bp + 10], 0
31:		je calloc$14
33:	

calloc$8:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
35:	

calloc$9:	; Parameter 12 pointer 6
36:		mov a54, [bp + 10]
37:		mov [bp + 18], a54
39:	

calloc$10:	; Parameter 12 0 8
40:		mov word [bp + 20], 0
42:	

calloc$11:	; Parameter 12 size 10
43:		mov a55, [bp + 8]
44:		mov [bp + 22], a55
46:	

calloc$12:	; Call 12 memset 0
47:		mov word [bp + 12], calloc$13
48:		mov [bp + 14], bp
49:		add bp, 12
50:		jmp memset
52:	

calloc$13:	; PostCall 12
54:	

calloc$14:	; SetReturnValue pointer
55:		mov a57, [bp + 10]
57:	

calloc$15:	; Return pointer
58:		mov t58, [bp]
59:		mov di, [bp + 4]
60:		mov bp, [bp + 2]
61:		jmp t58
63:	

calloc$16:	; FunctionEnd calloc
1:	

free:	; IntegralToIntegral £temporary77 freeMemoryPtr
2:		mov a59, [bp + 6]
5:	

free$1:	; BinarySubtract £temporary78 £temporary77 4
6:		sub a59, 4
8:	

free$2:	; IntegralToIntegral £temporary79 £temporary78
11:	

free$3:	; Assign freeBlockPtr £temporary79
12:		mov [bp + 8], a59
14:	

free$4:	; Assign prevBlockPtr 0
15:		mov word [bp + 10], 0
17:	

free$5:	; Assign currBlockPtr g_firstBlockPtr
18:		mov a60, [g_firstBlockPtr]
19:		mov [bp + 12], a60
21:	

free$6:	; NotEqual 8 freeMemoryPtr 0
22:		cmp word [bp + 6], 0
23:		jne free$8
25:	

free$7:	; Return
26:		mov t61, [bp]
27:		mov di, [bp + 4]
28:		mov bp, [bp + 2]
29:		jmp t61
31:	

free$8:	; Equal 32 currBlockPtr 0
32:		cmp word [bp + 12], 0
33:		je free$32
35:	

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
36:		mov a62, [bp + 8]
37:		cmp [bp + 12], a62
38:		jne free$28
40:	

free$10:	; NotEqual 15 prevBlockPtr 0
41:		cmp word [bp + 10], 0
42:		jne free$15
44:	

free$11:	; Deref £temporary84 -> currBlockPtr currBlockPtr 2
45:		mov a63, [bp + 12]
47:	

free$12:	; NotEqual 15 £temporary84 -> currBlockPtr 0
48:		cmp word [a63 + 2], 0
49:		jne free$15
51:	

free$13:	; Assign g_firstBlockPtr 0
52:		mov word [g_firstBlockPtr], 0
54:	

free$14:	; Goto 27
55:		jmp free$27
57:	

free$15:	; NotEqual 19 prevBlockPtr 0
58:		cmp word [bp + 10], 0
59:		jne free$19
61:	

free$16:	; Deref £temporary88 -> currBlockPtr currBlockPtr 2
62:		mov a64, [bp + 12]
64:	

free$17:	; Assign g_firstBlockPtr £temporary88 -> currBlockPtr
65:		mov t65, [a64 + 2]
66:		mov [g_firstBlockPtr], t65
68:	

free$18:	; Goto 27
69:		jmp free$27
71:	

free$19:	; Deref £temporary89 -> currBlockPtr currBlockPtr 2
72:		mov a66, [bp + 12]
74:	

free$20:	; NotEqual 24 £temporary89 -> currBlockPtr 0
75:		cmp word [a66 + 2], 0
76:		jne free$24
78:	

free$21:	; Deref £temporary91 -> prevBlockPtr prevBlockPtr 2
79:		mov a67, [bp + 10]
81:	

free$22:	; Assign £temporary91 -> prevBlockPtr 0
82:		mov word [a67 + 2], 0
84:	

free$23:	; Goto 27
85:		jmp free$27
87:	

free$24:	; Deref £temporary92 -> prevBlockPtr prevBlockPtr 2
88:		mov a68, [bp + 10]
90:	

free$25:	; Deref £temporary93 -> currBlockPtr currBlockPtr 2
91:		mov a69, [bp + 12]
93:	

free$26:	; Assign £temporary92 -> prevBlockPtr £temporary93 -> currBlockPtr
94:		mov t70, [a69 + 2]
95:		mov [a68 + 2], t70
97:	

free$27:	; Return
98:		mov t71, [bp]
99:		mov di, [bp + 4]
100:		mov bp, [bp + 2]
101:		jmp t71
103:	

free$28:	; Assign prevBlockPtr currBlockPtr
104:		mov a72, [bp + 12]
105:		mov [bp + 10], a72
107:	

free$29:	; Deref £temporary94 -> currBlockPtr currBlockPtr 2
108:		mov a73, [bp + 12]
110:	

free$30:	; Assign currBlockPtr £temporary94 -> currBlockPtr
111:		mov t74, [a73 + 2]
112:		mov [bp + 12], t74
114:	

free$31:	; Goto 8
115:		jmp free$8
117:	

free$32:	; Return 0
118:		mov t75, [bp]
119:		mov di, [bp + 4]
120:		mov bp, [bp + 2]
121:		jmp t75
123:	

free$33:	; FunctionEnd free
1:	

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
2:		cmp word [bp + 8], 0
3:		jge realloc$12
5:	

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
7:	

realloc$2:	; Parameter 10 stderr 6
8:		mov a76, [stderr]
9:		mov [bp + 16], a76
11:	

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
12:		mov word [bp + 18], @273$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
14:	

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
15:		mov word [bp + 20], @274$string_newMemorySize203E3D200#
17:	

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
18:		mov word [bp + 22], @275$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#
20:	

realloc$6:	; Parameter 10 259 14
21:		mov word [bp + 24], 259
23:	

realloc$7:	; Call 10 fprintf 0
24:		mov word [bp + 10], realloc$8
25:		mov [bp + 12], bp
26:		add bp, 10
27:		mov di, bp
28:		add di, 6
29:		jmp fprintf
31:	

realloc$8:	; PostCall 10
33:	

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
35:	

realloc$10:	; Call 10 abort 0
36:		mov word [bp + 10], realloc$11
37:		mov [bp + 12], bp
38:		add bp, 10
39:		jmp abort
41:	

realloc$11:	; PostCall 10
43:	

realloc$12:	; NotEqual 25 oldMemoryPtr 0
44:		cmp word [bp + 6], 0
45:		jne realloc$25
47:	

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
48:		cmp word [bp + 8], 0
49:		jg realloc$25
51:	

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
53:	

realloc$15:	; Parameter 10 stderr 6
54:		mov a78, [stderr]
55:		mov [bp + 16], a78
57:	

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
58:		mov word [bp + 18], @288$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
60:	

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
61:		mov word [bp + 20], @289$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#
63:	

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
64:		mov word [bp + 22], @290$string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#
66:	

realloc$19:	; Parameter 10 260 14
67:		mov word [bp + 24], 260
69:	

realloc$20:	; Call 10 fprintf 0
70:		mov word [bp + 10], realloc$21
71:		mov [bp + 12], bp
72:		add bp, 10
73:		mov di, bp
74:		add di, 6
75:		jmp fprintf
77:	

realloc$21:	; PostCall 10
79:	

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
81:	

realloc$23:	; Call 10 abort 0
82:		mov word [bp + 10], realloc$24
83:		mov [bp + 12], bp
84:		add bp, 10
85:		jmp abort
87:	

realloc$24:	; PostCall 10
89:	

realloc$25:	; NotEqual 33 oldMemoryPtr 0
90:		cmp word [bp + 6], 0
91:		jne realloc$33
93:	

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
95:	

realloc$27:	; Parameter 10 newMemorySize 6
96:		mov a80, [bp + 8]
97:		mov [bp + 16], a80
99:	

realloc$28:	; Call 10 malloc 0
100:		mov word [bp + 10], realloc$29
101:		mov [bp + 12], bp
102:		add bp, 10
103:		jmp malloc
105:	

realloc$29:	; PostCall 10
107:	

realloc$30:	; GetReturnValue £temporary106
109:	

realloc$31:	; SetReturnValue £temporary106
111:	

realloc$32:	; Return £temporary106
112:		mov t82, [bp]
113:		mov di, [bp + 4]
114:		mov bp, [bp + 2]
115:		jmp t82
117:	

realloc$33:	; NotEqual 40 newMemorySize 0
118:		cmp word [bp + 8], 0
119:		jne realloc$40
121:	

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
123:	

realloc$35:	; Parameter 10 oldMemoryPtr 6
124:		mov a83, [bp + 6]
125:		mov [bp + 16], a83
127:	

realloc$36:	; Call 10 free 0
128:		mov word [bp + 10], realloc$37
129:		mov [bp + 12], bp
130:		add bp, 10
131:		jmp free
133:	

realloc$37:	; PostCall 10
135:	

realloc$38:	; SetReturnValue 0
136:		mov a84, 0
138:	

realloc$39:	; Return 0
139:		mov t85, [bp]
140:		mov di, [bp + 4]
141:		mov bp, [bp + 2]
142:		jmp t85
144:	

realloc$40:	; IntegralToIntegral £temporary109 newMemorySize
145:		mov a86, [bp + 8]
148:	

realloc$41:	; BinaryAdd newBlockSize £temporary109 4
149:		add a86, 4
150:		mov [bp + 10], a86
152:	

realloc$42:	; IntegralToIntegral £temporary111 oldMemoryPtr
153:		mov a87, [bp + 6]
156:	

realloc$43:	; BinarySubtract £temporary112 £temporary111 4
157:		sub a87, 4
159:	

realloc$44:	; IntegralToIntegral £temporary113 £temporary112
162:	

realloc$45:	; Assign oldBlockPtr £temporary113
163:		mov [bp + 12], a87
165:	

realloc$46:	; Deref £temporary114 -> oldBlockPtr oldBlockPtr 0
166:		mov a88, [bp + 12]
168:	

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary114 -> oldBlockPtr
169:		mov t89, [a88]
170:		cmp [bp + 10], t89
171:		ja realloc$52
173:	

realloc$48:	; Deref £temporary116 -> oldBlockPtr oldBlockPtr 0
174:		mov a90, [bp + 12]
176:	

realloc$49:	; Assign £temporary116 -> oldBlockPtr newBlockSize
177:		mov a91, [bp + 10]
178:		mov [a90], a91
180:	

realloc$50:	; SetReturnValue oldMemoryPtr
181:		mov a92, [bp + 6]
183:	

realloc$51:	; Return oldMemoryPtr
184:		mov t93, [bp]
185:		mov di, [bp + 4]
186:		mov bp, [bp + 2]
187:		jmp t93
189:	

realloc$52:	; Assign lastAddress 65528
190:		mov word [bp + 14], 65528
192:	

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
193:		mov a94, [g_firstBlockPtr]
194:		mov [bp + 16], a94
196:	

realloc$54:	; Equal 68 currBlockPtr 0
197:		cmp word [bp + 16], 0
198:		je realloc$68
200:	

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
201:		mov a95, [bp + 12]
202:		cmp [bp + 16], a95
203:		jne realloc$63
205:	

realloc$56:	; IntegralToIntegral £temporary119 currBlockPtr
206:		mov a96, [bp + 16]
209:	

realloc$57:	; BinarySubtract availableSize lastAddress £temporary119
210:		mov a97, [bp + 14]
211:		sub a97, a96
212:		mov [bp + 18], a97
214:	

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
215:		mov a98, [bp + 10]
216:		cmp [bp + 18], a98
217:		jb realloc$68
219:	

realloc$59:	; Deref £temporary122 -> oldBlockPtr oldBlockPtr 0
220:		mov a99, [bp + 12]
222:	

realloc$60:	; Assign £temporary122 -> oldBlockPtr newBlockSize
223:		mov a100, [bp + 10]
224:		mov [a99], a100
226:	

realloc$61:	; SetReturnValue oldMemoryPtr
227:		mov a101, [bp + 6]
229:	

realloc$62:	; Return oldMemoryPtr
230:		mov t102, [bp]
231:		mov di, [bp + 4]
232:		mov bp, [bp + 2]
233:		jmp t102
235:	

realloc$63:	; IntegralToIntegral £temporary123 currBlockPtr
236:		mov a103, [bp + 16]
239:	

realloc$64:	; Assign lastAddress £temporary123
240:		mov [bp + 14], a103
242:	

realloc$65:	; Deref £temporary124 -> currBlockPtr currBlockPtr 2
243:		mov a104, [bp + 16]
245:	

realloc$66:	; Assign currBlockPtr £temporary124 -> currBlockPtr
246:		mov t105, [a104 + 2]
247:		mov [bp + 16], t105
249:	

realloc$67:	; Goto 54
250:		jmp realloc$54
252:	

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
254:	

realloc$69:	; Parameter 14 newMemorySize 6
255:		mov a106, [bp + 8]
256:		mov [bp + 20], a106
258:	

realloc$70:	; Call 14 malloc 0
259:		mov word [bp + 14], realloc$71
260:		mov [bp + 16], bp
261:		add bp, 14
262:		jmp malloc
264:	

realloc$71:	; PostCall 14
266:	

realloc$72:	; GetReturnValue £temporary125
268:	

realloc$73:	; Assign newMemoryPtr £temporary125
269:		mov [bp + 14], type107
271:	

realloc$74:	; Equal 87 newMemoryPtr 0
272:		cmp word [bp + 14], 0
273:		je realloc$87
275:	

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
277:	

realloc$76:	; Parameter 16 newMemoryPtr 6
278:		mov a108, [bp + 14]
279:		mov [bp + 22], a108
281:	

realloc$77:	; Parameter 16 oldMemoryPtr 8
282:		mov a109, [bp + 6]
283:		mov [bp + 24], a109
285:	

realloc$78:	; Parameter 16 newMemorySize 10
286:		mov a110, [bp + 8]
287:		mov [bp + 26], a110
289:	

realloc$79:	; Call 16 memcpy 0
290:		mov word [bp + 16], realloc$80
291:		mov [bp + 18], bp
292:		add bp, 16
293:		jmp memcpy
295:	

realloc$80:	; PostCall 16
297:	

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
299:	

realloc$82:	; Parameter 16 oldMemoryPtr 6
300:		mov a112, [bp + 6]
301:		mov [bp + 22], a112
303:	

realloc$83:	; Call 16 free 0
304:		mov word [bp + 16], realloc$84
305:		mov [bp + 18], bp
306:		add bp, 16
307:		jmp free
309:	

realloc$84:	; PostCall 16
311:	

realloc$85:	; SetReturnValue newMemoryPtr
312:		mov a113, [bp + 14]
314:	

realloc$86:	; Return newMemoryPtr
315:		mov t114, [bp]
316:		mov di, [bp + 4]
317:		mov bp, [bp + 2]
318:		jmp t114
320:	

realloc$87:	; SetReturnValue 0
321:		mov a115, 0
323:	

realloc$88:	; Return 0
324:		mov t116, [bp]
325:		mov di, [bp + 4]
326:		mov bp, [bp + 2]
327:		jmp t116
329:	

realloc$89:	; FunctionEnd realloc
1:	

print_heap:	; Assign currBlockPtr g_firstBlockPtr
2:		mov a117, [g_firstBlockPtr]
3:		mov [bp + 6], a117
5:	

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
7:	

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
8:		mov word [bp + 14], @368$string_Heap3A0A#
10:	

print_heap$3:	; Call 8 printf 0
11:		mov word [bp + 8], print_heap$4
12:		mov [bp + 10], bp
13:		add bp, 8
14:		mov di, bp
15:		jmp printf
17:	

print_heap$4:	; PostCall 8
19:	

print_heap$5:	; Equal 17 currBlockPtr 0
20:		cmp word [bp + 6], 0
21:		je print_heap$17
23:	

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
25:	

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
26:		mov word [bp + 14], @374$string_2020Address2025u2C20Size2025u0A#
28:	

print_heap$8:	; IntegralToIntegral £temporary148 currBlockPtr
29:		mov a119, [bp + 6]
32:	

print_heap$9:	; Parameter 8 £temporary148 8
33:		mov [bp + 16], a119
35:	

print_heap$10:	; Deref £temporary149 -> currBlockPtr currBlockPtr 0
36:		mov a120, [bp + 6]
38:	

print_heap$11:	; Parameter 8 £temporary149 -> currBlockPtr 10
39:		mov t121, [a120]
40:		mov [bp + 18], t121
42:	

print_heap$12:	; Call 8 printf 0
43:		mov word [bp + 8], print_heap$13
44:		mov [bp + 10], bp
45:		add bp, 8
46:		mov di, bp
47:		add di, 4
48:		jmp printf
50:	

print_heap$13:	; PostCall 8
52:	

print_heap$14:	; Deref £temporary151 -> currBlockPtr currBlockPtr 2
53:		mov a123, [bp + 6]
55:	

print_heap$15:	; Assign currBlockPtr £temporary151 -> currBlockPtr
56:		mov t124, [a123 + 2]
57:		mov [bp + 6], t124
59:	

print_heap$16:	; Goto 5
60:		jmp print_heap$5
62:	

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
64:	

print_heap$18:	; Parameter 8 string_0A# 6
65:		mov word [bp + 14], @379$string_0A#
67:	

print_heap$19:	; Call 8 printf 0
68:		mov word [bp + 8], print_heap$20
69:		mov [bp + 10], bp
70:		add bp, 8
71:		mov di, bp
72:		jmp printf
74:	

print_heap$20:	; PostCall 8
76:	

print_heap$21:	; Return 0
77:		mov t126, [bp]
78:		mov di, [bp + 4]
79:		mov bp, [bp + 2]
80:		jmp t126
82:	

print_heap$22:	; FunctionEnd print_heap
