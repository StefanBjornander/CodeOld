1:	

@0$malloc:	; return_value = 0
2:		mov a0, 0
4:	

@0$malloc$1:	; return
5:		mov t1, [bp]
6:		mov di, [bp + 4]
7:		mov bp, [bp + 2]
8:		jmp t1
10:	

@0$malloc$2:	; function end malloc
1:	

main2:	; a$p = 0
2:		mov word [a], 0
4:	

main2$1:	; a$q = 0
5:		mov word [a + 2], 0
7:	

main2$2:	; call header integral zero 0 stack zero 0
9:	

main2$3:	; parameter string_test12Etxt#, offset 6
10:		mov word [bp + 12], string_test12Etxt#
12:	

main2$4:	; parameter string_test22Etxt#, offset 8
13:		mov word [bp + 14], string_test22Etxt#
15:	

main2$5:	; call function noellipse-noellipse file_test
16:		mov word [bp + 6], main2$6
17:		mov [bp + 8], bp
18:		add bp, 6
19:		jmp file_test
21:	

main2$6:	; post call
23:	

main2$7:	; return
24:		mov t2, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp t2
29:	

main2$8:	; function end main2
1:	

main33:	; s[0] = 72
2:		mov byte [bp + 6], 72
4:	

main33$1:	; s[1] = 101
5:		mov byte [bp + 7], 101
7:	

main33$2:	; s[2] = 108
8:		mov byte [bp + 8], 108
10:	

main33$3:	; s[3] = 108
11:		mov byte [bp + 9], 108
13:	

main33$4:	; s[4] = 111
14:		mov byte [bp + 10], 111
16:	

main33$5:	; s[5] = 0
17:		mov byte [bp + 11], 0
19:	

main33$6:	; t[0] = 87
20:		mov byte [bp + 26], 87
22:	

main33$7:	; t[1] = 111
23:		mov byte [bp + 27], 111
25:	

main33$8:	; t[2] = 114
26:		mov byte [bp + 28], 114
28:	

main33$9:	; t[3] = 108
29:		mov byte [bp + 29], 108
31:	

main33$10:	; t[4] = 100
32:		mov byte [bp + 30], 100
34:	

main33$11:	; t[5] = 0
35:		mov byte [bp + 31], 0
37:	

main33$12:	; call header integral zero 0 stack zero 0
39:	

main33$13:	; parameter string_3C25s3E203C25s3E0A#, offset 6
40:		mov word [bp + 52], string_3C25s3E203C25s3E0A#
42:	

main33$14:	; parameter s, offset 8
43:		mov [bp + 54], bp
44:		add word [bp + 54], 6
46:	

main33$15:	; parameter t, offset 10
47:		mov [bp + 56], bp
48:		add word [bp + 56], 26
50:	

main33$16:	; call function noellipse-ellipse printf, extra 0
51:		mov word [bp + 46], main33$17
52:		mov [bp + 48], bp
53:		add bp, 46
54:		mov di, bp
55:		add di, 4
56:		jmp printf
58:	

main33$17:	; post call
60:	

main33$18:	; return
61:		mov t3, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t3
66:	

main33$19:	; function end main33
1:	

main34:	; g_outDevice = stdout
2:		mov a4, [stdout]
3:		mov [g_outDevice], a4
5:	

main34$1:	; call header integral zero 0 stack zero 0
7:	

main34$2:	; parameter 88, offset 6
8:		mov byte [bp + 12], 88
10:	

main34$3:	; call function noellipse-noellipse printChar
11:		mov word [bp + 6], main34$4
12:		mov [bp + 8], bp
13:		add bp, 6
14:		jmp printChar
16:	

main34$4:	; post call
18:	

main34$5:	; call header integral zero 0 stack zero 0
20:	

main34$6:	; parameter 10, offset 6
21:		mov byte [bp + 12], 10
23:	

main34$7:	; call function noellipse-noellipse printChar
24:		mov word [bp + 6], main34$8
25:		mov [bp + 8], bp
26:		add bp, 6
27:		jmp printChar
29:	

main34$8:	; post call
31:	

main34$9:	; return
32:		mov t5, [bp]
33:		mov di, [bp + 4]
34:		mov bp, [bp + 2]
35:		jmp t5
37:	

main34$10:	; function end main34
1:	

mainc:	; call header integral zero 0 stack zero 0
3:	

mainc$1:	; parameter string_Please20write20a20character3A20#, offset 6
4:		mov word [bp + 13], string_Please20write20a20character3A20#
6:	

mainc$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 7], mainc$3
8:		mov [bp + 9], bp
9:		add bp, 7
10:		mov di, bp
11:		jmp printf
13:	

mainc$3:	; post call
15:	

mainc$4:	; call header integral zero 0 stack zero 0
17:	

mainc$5:	; parameter string_25c#, offset 6
18:		mov word [bp + 13], string_25c#
20:	

mainc$6:	; £temporary26 = &c
21:		mov t6, bp
22:		add t6, 6
24:	

mainc$7:	; parameter £temporary26, offset 8
25:		mov [bp + 15], t6
27:	

mainc$8:	; call function noellipse-ellipse scanf, extra 0
28:		mov word [bp + 7], mainc$9
29:		mov [bp + 9], bp
30:		add bp, 7
31:		mov di, bp
32:		add di, 2
33:		jmp scanf
35:	

mainc$9:	; post call
37:	

mainc$10:	; call header integral zero 0 stack zero 0
39:	

mainc$11:	; parameter string_You20wrote20the20character202725c272E0A#, offset 6
40:		mov word [bp + 13], string_You20wrote20the20character202725c272E0A#
42:	

mainc$12:	; £temporary28 = int_to_int c (Signed_Char -> Signed_Int)
43:		mov a7, [bp + 6]
45:		and a7, 255
47:		cmp a7, 0
48:		jge mainc$13
49:		neg a7
51:		neg a7
53:	

mainc$13:	; parameter £temporary28, offset 8
54:		mov [bp + 15], a7
56:	

mainc$14:	; call function noellipse-ellipse printf, extra 0
57:		mov word [bp + 7], mainc$15
58:		mov [bp + 9], bp
59:		add bp, 7
60:		mov di, bp
61:		add di, 2
62:		jmp printf
64:	

mainc$15:	; post call
66:	

mainc$16:	; return
67:		mov t8, [bp]
68:		mov di, [bp + 4]
69:		mov bp, [bp + 2]
70:		jmp t8
72:	

mainc$17:	; function end mainc
1:	

maini:	; call header integral zero 0 stack zero 0
3:	

maini$1:	; parameter string_Please20write20an20integer3A20#, offset 6
4:		mov word [bp + 14], string_Please20write20an20integer3A20#
6:	

maini$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 8], maini$3
8:		mov [bp + 10], bp
9:		add bp, 8
10:		mov di, bp
11:		jmp printf
13:	

maini$3:	; post call
15:	

maini$4:	; call header integral zero 0 stack zero 0
17:	

maini$5:	; parameter string_25i#, offset 6
18:		mov word [bp + 14], string_25i#
20:	

maini$6:	; £temporary37 = &i
21:		mov t9, bp
22:		add t9, 6
24:	

maini$7:	; parameter £temporary37, offset 8
25:		mov [bp + 16], t9
27:	

maini$8:	; call function noellipse-ellipse scanf, extra 0
28:		mov word [bp + 8], maini$9
29:		mov [bp + 10], bp
30:		add bp, 8
31:		mov di, bp
32:		add di, 2
33:		jmp scanf
35:	

maini$9:	; post call
37:	

maini$10:	; call header integral zero 0 stack zero 0
39:	

maini$11:	; parameter string_You20wrote20the20integer2025i2E0A#, offset 6
40:		mov word [bp + 14], string_You20wrote20the20integer2025i2E0A#
42:	

maini$12:	; parameter i, offset 8
43:		mov a10, [bp + 6]
44:		mov [bp + 16], a10
46:	

maini$13:	; call function noellipse-ellipse printf, extra 0
47:		mov word [bp + 8], maini$14
48:		mov [bp + 10], bp
49:		add bp, 8
50:		mov di, bp
51:		add di, 2
52:		jmp printf
54:	

maini$14:	; post call
56:	

maini$15:	; return
57:		mov t11, [bp]
58:		mov di, [bp + 4]
59:		mov bp, [bp + 2]
60:		jmp t11
62:	

maini$16:	; function end maini
1:	

mains:	; call header integral zero 0 stack zero 0
3:	

mains$1:	; parameter string_Please20write20a20string3A20#, offset 6
4:		mov word [bp + 32], string_Please20write20a20string3A20#
6:	

mains$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 26], mains$3
8:		mov [bp + 28], bp
9:		add bp, 26
10:		mov di, bp
11:		jmp printf
13:	

mains$3:	; post call
15:	

mains$4:	; call header integral zero 0 stack zero 0
17:	

mains$5:	; parameter string_25s#, offset 6
18:		mov word [bp + 32], string_25s#
20:	

mains$6:	; parameter s, offset 8
21:		mov [bp + 34], bp
22:		add word [bp + 34], 6
24:	

mains$7:	; call function noellipse-ellipse scanf, extra 0
25:		mov word [bp + 26], mains$8
26:		mov [bp + 28], bp
27:		add bp, 26
28:		mov di, bp
29:		add di, 2
30:		jmp scanf
32:	

mains$8:	; post call
34:	

mains$9:	; call header integral zero 0 stack zero 0
36:	

mains$10:	; parameter string_You20wrote20the20string202225s222E0A#, offset 6
37:		mov word [bp + 32], string_You20wrote20the20string202225s222E0A#
39:	

mains$11:	; parameter s, offset 8
40:		mov [bp + 34], bp
41:		add word [bp + 34], 6
43:	

mains$12:	; call function noellipse-ellipse printf, extra 0
44:		mov word [bp + 26], mains$13
45:		mov [bp + 28], bp
46:		add bp, 26
47:		mov di, bp
48:		add di, 2
49:		jmp printf
51:	

mains$13:	; post call
53:	

mains$14:	; return
54:		mov t12, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp t12
59:	

mains$15:	; function end mains
1:	

maint:	; call header integral zero 0 stack zero 0
3:	

maint$1:	; call function noellipse-noellipse limits_test
4:		mov word [bp + 6], maint$2
5:		mov [bp + 8], bp
6:		add bp, 6
7:		jmp limits_test
9:	

maint$2:	; post call
11:	

maint$3:	; call header integral zero 0 stack zero 0
13:	

maint$4:	; call function noellipse-noellipse time_test
14:		mov word [bp + 6], maint$5
15:		mov [bp + 8], bp
16:		add bp, 6
17:		jmp time_test
19:	

maint$5:	; post call
21:	

maint$6:	; return
22:		mov t13, [bp]
23:		mov di, [bp + 4]
24:		mov bp, [bp + 2]
25:		jmp t13
27:	

maint$7:	; function end maint
1:	

mainY:	; call header integral zero 0 stack zero 0
3:	

mainY$1:	; call function noellipse-noellipse malloc_test
4:		mov word [bp + 6], mainY$2
5:		mov [bp + 8], bp
6:		add bp, 6
7:		jmp malloc_test
9:	

mainY$2:	; post call
11:	

mainY$3:	; call header integral zero 0 stack zero 0
13:	

mainY$4:	; push float 10
14:		fld qword [float8$10#]
16:	

mainY$5:	; parameter 10, offset 6
17:		fstp qword [bp + 12]
19:	

mainY$6:	; call function noellipse-noellipse setjmp_test
20:		mov word [bp + 6], mainY$7
21:		mov [bp + 8], bp
22:		add bp, 6
23:		jmp setjmp_test
25:	

mainY$7:	; post call
27:	

mainY$8:	; call header integral zero 0 stack zero 0
29:	

mainY$9:	; push 0
30:		fldz
32:	

mainY$10:	; parameter 0, offset 6
33:		fstp qword [bp + 12]
35:	

mainY$11:	; call function noellipse-noellipse setjmp_test
36:		mov word [bp + 6], mainY$12
37:		mov [bp + 8], bp
38:		add bp, 6
39:		jmp setjmp_test
41:	

mainY$12:	; post call
43:	

mainY$13:	; return
44:		mov t14, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t14
49:	

mainY$14:	; function end mainY
1:	

mainX:	; index = 129
2:		mov word [bp + 10], 129
4:	

mainX$1:	; if index >= 255 goto 16
5:		cmp word [bp + 10], 255
6:		jge mainX$16
8:	

mainX$2:	; £temporary63 = int_to_int index (Signed_Int -> Pointer)
9:		mov a15, [bp + 10]
12:	

mainX$3:	; £temporary64 -> £temporary63 = *£temporary63
14:	

mainX$4:	; c = £temporary64 -> £temporary63
15:		mov t16, [a15]
16:		mov [bp + 12], t16
18:	

mainX$5:	; call header integral zero 0 stack zero 0
20:	

mainX$6:	; parameter string_25i3A2025i203C25c3E0A#, offset 6
21:		mov word [bp + 19], string_25i3A2025i203C25c3E0A#
23:	

mainX$7:	; parameter index, offset 8
24:		mov a17, [bp + 10]
25:		mov [bp + 21], a17
27:	

mainX$8:	; £temporary65 = int_to_int c (Signed_Char -> Signed_Int)
28:		mov a18, [bp + 12]
30:		and a18, 255
32:		cmp a18, 0
33:		jge mainX$9
34:		neg a18
36:		neg a18
38:	

mainX$9:	; parameter £temporary65, offset 10
39:		mov [bp + 23], a18
41:	

mainX$10:	; £temporary66 = int_to_int c (Signed_Char -> Signed_Int)
42:		mov a19, [bp + 12]
44:		and a19, 255
46:		cmp a19, 0
47:		jge mainX$11
48:		neg a19
50:		neg a19
52:	

mainX$11:	; parameter £temporary66, offset 12
53:		mov [bp + 25], a19
55:	

mainX$12:	; call function noellipse-ellipse printf, extra 0
56:		mov word [bp + 13], mainX$13
57:		mov [bp + 15], bp
58:		add bp, 13
59:		mov di, bp
60:		add di, 6
61:		jmp printf
63:	

mainX$13:	; post call
65:	

mainX$14:	; ++index
66:		inc word [bp + 10]
68:	

mainX$15:	; goto 1
69:		jmp mainX$1
71:	

mainX$16:	; call header integral zero 0 stack zero 0
73:	

mainX$17:	; parameter string_0Aargc3A2025i0A#, offset 6
74:		mov word [bp + 18], string_0Aargc3A2025i0A#
76:	

mainX$18:	; parameter argc, offset 8
77:		mov a20, [bp + 6]
78:		mov [bp + 20], a20
80:	

mainX$19:	; call function noellipse-ellipse printf, extra 0
81:		mov word [bp + 12], mainX$20
82:		mov [bp + 14], bp
83:		add bp, 12
84:		mov di, bp
85:		add di, 2
86:		jmp printf
88:	

mainX$20:	; post call
90:	

mainX$21:	; index = 0
91:		mov word [bp + 10], 0
93:	

mainX$22:	; if index >= argc goto 34
94:		mov a21, [bp + 6]
95:		cmp [bp + 10], a21
96:		jge mainX$34
98:	

mainX$23:	; call header integral zero 0 stack zero 0
100:	

mainX$24:	; parameter string_25i3A203C25s3E0A#, offset 6
101:		mov word [bp + 18], string_25i3A203C25s3E0A#
103:	

mainX$25:	; parameter index, offset 8
104:		mov a22, [bp + 10]
105:		mov [bp + 20], a22
107:	

mainX$26:	; £temporary72 = index * 2
108:		mov a23, [bp + 10]
110:		xor dx, dx
111:		mul word [int2$2#]
117:	

mainX$27:	; £temporary73 = argv + £temporary72
118:		mov a27, [bp + 8]
119:		add a27, t26
121:	

mainX$28:	; £temporary71 -> £temporary73 = *£temporary73
123:	

mainX$29:	; parameter £temporary71 -> £temporary73, offset 10
124:		mov t28, [a27]
125:		mov [bp + 22], t28
127:	

mainX$30:	; call function noellipse-ellipse printf, extra 0
128:		mov word [bp + 12], mainX$31
129:		mov [bp + 14], bp
130:		add bp, 12
131:		mov di, bp
132:		add di, 4
133:		jmp printf
135:	

mainX$31:	; post call
137:	

mainX$32:	; ++index
138:		inc word [bp + 10]
140:	

mainX$33:	; goto 22
141:		jmp mainX$22
143:	

mainX$34:	; call header integral zero 0 stack zero 0
145:	

mainX$35:	; parameter string_0A#, offset 6
146:		mov word [bp + 18], string_0A#
148:	

mainX$36:	; call function noellipse-ellipse printf, extra 0
149:		mov word [bp + 12], mainX$37
150:		mov [bp + 14], bp
151:		add bp, 12
152:		mov di, bp
153:		jmp printf
155:	

mainX$37:	; post call
157:	

mainX$38:	; index = 0
158:		mov word [bp + 10], 0
160:	

mainX$39:	; £temporary77 = index * 2
161:		mov a29, [bp + 10]
163:		xor dx, dx
164:		mul word [int2$2#]
170:	

mainX$40:	; £temporary78 = argv + £temporary77
171:		mov a33, [bp + 8]
172:		add a33, t32
174:	

mainX$41:	; £temporary76 -> £temporary78 = *£temporary78
176:	

mainX$42:	; if £temporary76 -> £temporary78 == 0 goto 54
177:		cmp word [a33], 0
178:		je mainX$54
180:	

mainX$43:	; call header integral zero 0 stack zero 0
182:	

mainX$44:	; parameter string_25i3A203C25s3E0A#, offset 6
183:		mov word [bp + 18], string_25i3A203C25s3E0A#
185:	

mainX$45:	; parameter index, offset 8
186:		mov a34, [bp + 10]
187:		mov [bp + 20], a34
189:	

mainX$46:	; £temporary82 = index * 2
190:		mov a35, [bp + 10]
192:		xor dx, dx
193:		mul word [int2$2#]
199:	

mainX$47:	; £temporary83 = argv + £temporary82
200:		mov a39, [bp + 8]
201:		add a39, t38
203:	

mainX$48:	; £temporary81 -> £temporary83 = *£temporary83
205:	

mainX$49:	; parameter £temporary81 -> £temporary83, offset 10
206:		mov t40, [a39]
207:		mov [bp + 22], t40
209:	

mainX$50:	; call function noellipse-ellipse printf, extra 0
210:		mov word [bp + 12], mainX$51
211:		mov [bp + 14], bp
212:		add bp, 12
213:		mov di, bp
214:		add di, 4
215:		jmp printf
217:	

mainX$51:	; post call
219:	

mainX$52:	; ++index
220:		inc word [bp + 10]
222:	

mainX$53:	; goto 39
223:		jmp mainX$39
225:	

mainX$54:	; return
226:		mov t41, [bp]
227:		mov di, [bp + 4]
228:		mov bp, [bp + 2]
229:		jmp t41
231:	

mainX$55:	; function end mainX
0:		; Initialize Stack Pointer
1:		mov bp, $StackTop
2:		; Initialize Heap Pointer
3:		mov word [65534], 65534
4:		; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
5:		fstcw [bp]
6:		or word [bp], 3072
7:		fldcw [bp]
8:		mov word [$StackTop], 0
9:		; Initialize Argument List
10:		mov si, bp
11:		mov word [bp], $Path
12:		add bp, 2
13:		mov ax, 1
14:		mov bx, 129
15:		cmp byte [bx], 13
16:		je $ListDone
17:	

$SpaceLoop:
18:		cmp byte [bx], 32
19:		jne $WordStart
20:		inc bx
21:		jmp $SpaceLoop
22:	

$WordStart:
23:		inc ax
24:		mov [bp], bx
25:		add bp, 2
26:	

$WordLoop:
27:		cmp byte [bx], 32
28:		je $WordDone
29:		cmp byte [bx], 13
30:		je $ListDone
31:		inc bx
32:		jmp $WordLoop
33:	

$WordDone:
34:		mov byte [bx], 0
35:		inc bx
36:		jmp $SpaceLoop
37:	

$ListDone:
38:		mov byte [bx], 0
39:		mov word [bp], 0
40:		add bp, 2
41:		mov word [bp], 0
42:		mov [bp + 6], ax
43:		mov [bp + 8], si
45:	

main:	; call header integral zero 0 stack zero 0
47:	

main$1:	; call function noellipse-noellipse main_math
48:		mov word [bp + 10], main$2
49:		mov [bp + 12], bp
50:		add bp, 10
51:		jmp main_math
53:	

main$2:	; post call
55:	

main$3:	; return
56:		cmp word [bp], 0
57:		je return_label$0
58:		mov t42, [bp]
59:		mov di, [bp + 4]
60:		mov bp, [bp + 2]
61:		jmp t42
62:	

return_label$0:
63:		mov al, 0
64:		mov ah, 76
65:		int 33
67:	

main$4:	; function end main
1:	

mainX2:	; call header integral zero 0 stack zero 0
3:	

mainX2$1:	; parameter string_argc3A2025i0A#, offset 6
4:		mov word [bp + 16], string_argc3A2025i0A#
6:	

mainX2$2:	; parameter argc, offset 8
7:		mov a43, [bp + 6]
8:		mov [bp + 18], a43
10:	

mainX2$3:	; call function noellipse-ellipse printf, extra 0
11:		mov word [bp + 10], mainX2$4
12:		mov [bp + 12], bp
13:		add bp, 10
14:		mov di, bp
15:		add di, 2
16:		jmp printf
18:	

mainX2$4:	; post call
20:	

mainX2$5:	; index = 0
21:		mov word [bp + 10], 0
23:	

mainX2$6:	; if index >= argc goto 18
24:		mov a44, [bp + 6]
25:		cmp [bp + 10], a44
26:		jge mainX2$18
28:	

mainX2$7:	; call header integral zero 0 stack zero 0
30:	

mainX2$8:	; parameter string_25i3A203C25s3E0A#, offset 6
31:		mov word [bp + 18], string_25i3A203C25s3E0A#
33:	

mainX2$9:	; parameter index, offset 8
34:		mov a45, [bp + 10]
35:		mov [bp + 20], a45
37:	

mainX2$10:	; £temporary103 = index * 2
38:		mov a46, [bp + 10]
40:		xor dx, dx
41:		mul word [int2$2#]
47:	

mainX2$11:	; £temporary104 = argv + £temporary103
48:		mov a50, [bp + 8]
49:		add a50, t49
51:	

mainX2$12:	; £temporary102 -> £temporary104 = *£temporary104
53:	

mainX2$13:	; parameter £temporary102 -> £temporary104, offset 10
54:		mov t51, [a50]
55:		mov [bp + 22], t51
57:	

mainX2$14:	; call function noellipse-ellipse printf, extra 0
58:		mov word [bp + 12], mainX2$15
59:		mov [bp + 14], bp
60:		add bp, 12
61:		mov di, bp
62:		add di, 4
63:		jmp printf
65:	

mainX2$15:	; post call
67:	

mainX2$16:	; ++index
68:		inc word [bp + 10]
70:	

mainX2$17:	; goto 6
71:		jmp mainX2$6
73:	

mainX2$18:	; call header integral zero 0 stack zero 0
75:	

mainX2$19:	; parameter string_0A#, offset 6
76:		mov word [bp + 18], string_0A#
78:	

mainX2$20:	; call function noellipse-ellipse printf, extra 0
79:		mov word [bp + 12], mainX2$21
80:		mov [bp + 14], bp
81:		add bp, 12
82:		mov di, bp
83:		jmp printf
85:	

mainX2$21:	; post call
87:	

mainX2$22:	; index = 0
88:		mov word [bp + 10], 0
90:	

mainX2$23:	; £temporary108 = index * 2
91:		mov a52, [bp + 10]
93:		xor dx, dx
94:		mul word [int2$2#]
100:	

mainX2$24:	; £temporary109 = argv + £temporary108
101:		mov a56, [bp + 8]
102:		add a56, t55
104:	

mainX2$25:	; £temporary107 -> £temporary109 = *£temporary109
106:	

mainX2$26:	; if £temporary107 -> £temporary109 == 0 goto 38
107:		cmp word [a56], 0
108:		je mainX2$38
110:	

mainX2$27:	; call header integral zero 0 stack zero 0
112:	

mainX2$28:	; parameter string_25i3A203C25s3E0A#, offset 6
113:		mov word [bp + 18], string_25i3A203C25s3E0A#
115:	

mainX2$29:	; parameter index, offset 8
116:		mov a57, [bp + 10]
117:		mov [bp + 20], a57
119:	

mainX2$30:	; £temporary113 = index * 2
120:		mov a58, [bp + 10]
122:		xor dx, dx
123:		mul word [int2$2#]
129:	

mainX2$31:	; £temporary114 = argv + £temporary113
130:		mov a62, [bp + 8]
131:		add a62, t61
133:	

mainX2$32:	; £temporary112 -> £temporary114 = *£temporary114
135:	

mainX2$33:	; parameter £temporary112 -> £temporary114, offset 10
136:		mov t63, [a62]
137:		mov [bp + 22], t63
139:	

mainX2$34:	; call function noellipse-ellipse printf, extra 0
140:		mov word [bp + 12], mainX2$35
141:		mov [bp + 14], bp
142:		add bp, 12
143:		mov di, bp
144:		add di, 4
145:		jmp printf
147:	

mainX2$35:	; post call
149:	

mainX2$36:	; ++index
150:		inc word [bp + 10]
152:	

mainX2$37:	; goto 23
153:		jmp mainX2$23
155:	

mainX2$38:	; call header integral zero 0 stack zero 0
157:	

mainX2$39:	; parameter string_0A#, offset 6
158:		mov word [bp + 18], string_0A#
160:	

mainX2$40:	; call function noellipse-ellipse printf, extra 0
161:		mov word [bp + 12], mainX2$41
162:		mov [bp + 14], bp
163:		add bp, 12
164:		mov di, bp
165:		jmp printf
167:	

mainX2$41:	; post call
169:	

mainX2$42:	; call header integral zero 0 stack zero 0
171:	

mainX2$43:	; parameter 0, offset 6
172:		mov word [bp + 49], 0
174:	

mainX2$44:	; call function noellipse-noellipse mktime
175:		mov word [bp + 43], mainX2$45
176:		mov [bp + 45], bp
177:		add bp, 43
178:		jmp mktime
180:	

mainX2$45:	; post call
182:	

mainX2$46:	; call header integral zero 0 stack zero 0
184:	

mainX2$47:	; parameter string_Hello210A#, offset 6
185:		mov word [bp + 49], string_Hello210A#
187:	

mainX2$48:	; call function noellipse-ellipse printf, extra 0
188:		mov word [bp + 43], mainX2$49
189:		mov [bp + 45], bp
190:		add bp, 43
191:		mov di, bp
192:		jmp printf
194:	

mainX2$49:	; post call
196:	

mainX2$50:	; call header integral zero 0 stack zero 0
198:	

mainX2$51:	; parameter string_Please20write20a20character2C20a20string2C20an20integer2C20and20a20double3A20#, offset 6
199:		mov word [bp + 49], string_Please20write20a20character2C20a20string2C20an20integer2C20and20a20double3A20#
201:	

mainX2$52:	; call function noellipse-ellipse printf, extra 0
202:		mov word [bp + 43], mainX2$53
203:		mov [bp + 45], bp
204:		add bp, 43
205:		mov di, bp
206:		jmp printf
208:	

mainX2$53:	; post call
210:	

mainX2$54:	; call header integral zero 0 stack zero 0
212:	

mainX2$55:	; parameter string_25c2025s2025i2025lf#, offset 6
213:		mov word [bp + 49], string_25c2025s2025i2025lf#
215:	

mainX2$56:	; £temporary120 = &c
216:		mov t64, bp
217:		add t64, 22
219:	

mainX2$57:	; parameter £temporary120, offset 8
220:		mov [bp + 51], t64
222:	

mainX2$58:	; parameter s, offset 10
223:		mov [bp + 53], bp
224:		add word [bp + 53], 23
226:	

mainX2$59:	; £temporary121 = &i
227:		mov t65, bp
228:		add t65, 12
230:	

mainX2$60:	; parameter £temporary121, offset 12
231:		mov [bp + 55], t65
233:	

mainX2$61:	; £temporary122 = &d
234:		mov t66, bp
235:		add t66, 14
237:	

mainX2$62:	; parameter £temporary122, offset 14
238:		mov [bp + 57], t66
240:	

mainX2$63:	; call function noellipse-ellipse scanf, extra 0
241:		mov word [bp + 43], mainX2$64
242:		mov [bp + 45], bp
243:		add bp, 43
244:		mov di, bp
245:		add di, 8
246:		jmp scanf
248:	

mainX2$64:	; post call
250:	

mainX2$65:	; call header integral zero 0 stack zero 0
252:	

mainX2$66:	; parameter string_You20wrote20the20character202725c272C20the20string202225s222C20the20integer2025i2C20and20the20double2025f2E0A#, offset 6
253:		mov word [bp + 49], string_You20wrote20the20character202725c272C20the20string202225s222C20the20integer2025i2C20and20the20double2025f2E0A#
255:	

mainX2$67:	; £temporary124 = int_to_int c (Signed_Char -> Signed_Int)
256:		mov a67, [bp + 22]
258:		and a67, 255
260:		cmp a67, 0
261:		jge mainX2$68
262:		neg a67
264:		neg a67
266:	

mainX2$68:	; parameter £temporary124, offset 8
267:		mov [bp + 51], a67
269:	

mainX2$69:	; parameter s, offset 10
270:		mov [bp + 53], bp
271:		add word [bp + 53], 23
273:	

mainX2$70:	; parameter i, offset 12
274:		mov a68, [bp + 12]
275:		mov [bp + 55], a68
277:	

mainX2$71:	; push float d
278:		fld qword [bp + 14]
280:	

mainX2$72:	; parameter d, offset 14
281:		fstp qword [bp + 57]
283:	

mainX2$73:	; call function noellipse-ellipse printf, extra 0
284:		mov word [bp + 43], mainX2$74
285:		mov [bp + 45], bp
286:		add bp, 43
287:		mov di, bp
288:		add di, 14
289:		jmp printf
291:	

mainX2$74:	; post call
293:	

mainX2$75:	; return
294:		mov t69, [bp]
295:		mov di, [bp + 4]
296:		mov bp, [bp + 2]
297:		jmp t69
299:	

mainX2$76:	; function end mainX2
1:	

main3:	; call header integral zero 0 stack zero 0
3:	

main3$1:	; parameter string_3A20#, offset 6
4:		mov word [bp + 20], string_3A20#
6:	

main3$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 14], main3$3
8:		mov [bp + 16], bp
9:		add bp, 14
10:		mov di, bp
11:		jmp printf
13:	

main3$3:	; post call
15:	

main3$4:	; call header integral zero 0 stack zero 0
17:	

main3$5:	; parameter string_25lf#, offset 6
18:		mov word [bp + 20], string_25lf#
20:	

main3$6:	; £temporary153 = &x
21:		mov t70, bp
22:		add t70, 6
24:	

main3$7:	; parameter £temporary153, offset 8
25:		mov [bp + 22], t70
27:	

main3$8:	; call function noellipse-ellipse scanf, extra 0
28:		mov word [bp + 14], main3$9
29:		mov [bp + 16], bp
30:		add bp, 14
31:		mov di, bp
32:		add di, 2
33:		jmp scanf
35:	

main3$9:	; post call
37:	

main3$10:	; call header integral zero 0 stack zero 0
39:	

main3$11:	; parameter string_3C25f3E#, offset 6
40:		mov word [bp + 20], string_3C25f3E#
42:	

main3$12:	; push float x
43:		fld qword [bp + 6]
45:	

main3$13:	; parameter x, offset 8
46:		fstp qword [bp + 22]
48:	

main3$14:	; call function noellipse-ellipse printf, extra 0
49:		mov word [bp + 14], main3$15
50:		mov [bp + 16], bp
51:		add bp, 14
52:		mov di, bp
53:		add di, 8
54:		jmp printf
56:	

main3$15:	; post call
58:	

main3$16:	; return
59:		mov t71, [bp]
60:		mov di, [bp + 4]
61:		mov bp, [bp + 2]
62:		jmp t71
64:	

main3$17:	; function end main3
1:	

mains2:	; call header integral zero 0 stack zero 0
3:	

mains2$1:	; push float 3.14
4:		fld qword [float8$3.14#]
6:	

mains2$2:	; parameter 3.14, offset 6
7:		fstp qword [bp + 12]
9:	

mains2$3:	; call function noellipse-noellipse setjmp_test
10:		mov word [bp + 6], mains2$4
11:		mov [bp + 8], bp
12:		add bp, 6
13:		jmp setjmp_test
15:	

mains2$4:	; post call
17:	

mains2$5:	; call header integral zero 0 stack zero 0
19:	

mains2$6:	; parameter string_2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D0A#, offset 6
20:		mov word [bp + 12], string_2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D0A#
22:	

mains2$7:	; call function noellipse-ellipse printf, extra 0
23:		mov word [bp + 6], mains2$8
24:		mov [bp + 8], bp
25:		add bp, 6
26:		mov di, bp
27:		jmp printf
29:	

mains2$8:	; post call
31:	

mains2$9:	; call header integral zero 0 stack zero 0
33:	

mains2$10:	; push 0
34:		fldz
36:	

mains2$11:	; parameter 0, offset 6
37:		fstp qword [bp + 12]
39:	

mains2$12:	; call function noellipse-noellipse setjmp_test
40:		mov word [bp + 6], mains2$13
41:		mov [bp + 8], bp
42:		add bp, 6
43:		jmp setjmp_test
45:	

mains2$13:	; post call
47:	

mains2$14:	; call header integral zero 0 stack zero 0
49:	

mains2$15:	; parameter string_2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D0A#, offset 6
50:		mov word [bp + 12], string_2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D0A#
52:	

mains2$16:	; call function noellipse-ellipse printf, extra 0
53:		mov word [bp + 6], mains2$17
54:		mov [bp + 8], bp
55:		add bp, 6
56:		mov di, bp
57:		jmp printf
59:	

mains2$17:	; post call
61:	

mains2$18:	; call header integral zero 0 stack zero 0
63:	

mains2$19:	; push float 2.71
64:		fld qword [float8$2.71#]
66:	

mains2$20:	; parameter 2.71, offset 6
67:		fstp qword [bp + 12]
69:	

mains2$21:	; call function noellipse-noellipse setjmp_test
70:		mov word [bp + 6], mains2$22
71:		mov [bp + 8], bp
72:		add bp, 6
73:		jmp setjmp_test
75:	

mains2$22:	; post call
77:	

mains2$23:	; call header integral zero 0 stack zero 0
79:	

mains2$24:	; parameter string_2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D0A#, offset 6
80:		mov word [bp + 12], string_2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D0A#
82:	

mains2$25:	; call function noellipse-ellipse printf, extra 0
83:		mov word [bp + 6], mains2$26
84:		mov [bp + 8], bp
85:		add bp, 6
86:		mov di, bp
87:		jmp printf
89:	

mains2$26:	; post call
91:	

mains2$27:	; call header integral zero 0 stack zero 0
93:	

mains2$28:	; push 0
94:		fldz
96:	

mains2$29:	; parameter 0, offset 6
97:		fstp qword [bp + 12]
99:	

mains2$30:	; call function noellipse-noellipse setjmp_test
100:		mov word [bp + 6], mains2$31
101:		mov [bp + 8], bp
102:		add bp, 6
103:		jmp setjmp_test
105:	

mains2$31:	; post call
107:	

mains2$32:	; return
108:		mov t72, [bp]
109:		mov di, [bp + 4]
110:		mov bp, [bp + 2]
111:		jmp t72
113:	

mains2$33:	; function end mains2
1:	

char_main:	; call header integral zero 0 stack zero 0
3:	

char_main$1:	; parameter 97, offset 6
4:		mov byte [bp + 12], 97
6:	

char_main$2:	; call function noellipse-noellipse character_test
7:		mov word [bp + 6], char_main$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		jmp character_test
12:	

char_main$3:	; post call
14:	

char_main$4:	; call header integral zero 0 stack zero 0
16:	

char_main$5:	; parameter 66, offset 6
17:		mov byte [bp + 12], 66
19:	

char_main$6:	; call function noellipse-noellipse character_test
20:		mov word [bp + 6], char_main$7
21:		mov [bp + 8], bp
22:		add bp, 6
23:		jmp character_test
25:	

char_main$7:	; post call
27:	

char_main$8:	; call header integral zero 0 stack zero 0
29:	

char_main$9:	; parameter 49, offset 6
30:		mov byte [bp + 12], 49
32:	

char_main$10:	; call function noellipse-noellipse character_test
33:		mov word [bp + 6], char_main$11
34:		mov [bp + 8], bp
35:		add bp, 6
36:		jmp character_test
38:	

char_main$11:	; post call
40:	

char_main$12:	; call header integral zero 0 stack zero 0
42:	

char_main$13:	; parameter 46, offset 6
43:		mov byte [bp + 12], 46
45:	

char_main$14:	; call function noellipse-noellipse character_test
46:		mov word [bp + 6], char_main$15
47:		mov [bp + 8], bp
48:		add bp, 6
49:		jmp character_test
51:	

char_main$15:	; post call
53:	

char_main$16:	; call header integral zero 0 stack zero 0
55:	

char_main$17:	; parameter 10, offset 6
56:		mov byte [bp + 12], 10
58:	

char_main$18:	; call function noellipse-noellipse character_test
59:		mov word [bp + 6], char_main$19
60:		mov [bp + 8], bp
61:		add bp, 6
62:		jmp character_test
64:	

char_main$19:	; post call
66:	

char_main$20:	; call header integral zero 0 stack zero 0
68:	

char_main$21:	; parameter 102, offset 6
69:		mov byte [bp + 12], 102
71:	

char_main$22:	; call function noellipse-noellipse character_test
72:		mov word [bp + 6], char_main$23
73:		mov [bp + 8], bp
74:		add bp, 6
75:		jmp character_test
77:	

char_main$23:	; post call
79:	

char_main$24:	; call header integral zero 0 stack zero 0
81:	

char_main$25:	; parameter 103, offset 6
82:		mov byte [bp + 12], 103
84:	

char_main$26:	; call function noellipse-noellipse character_test
85:		mov word [bp + 6], char_main$27
86:		mov [bp + 8], bp
87:		add bp, 6
88:		jmp character_test
90:	

char_main$27:	; post call
92:	

char_main$28:	; return
93:		mov t73, [bp]
94:		mov di, [bp + 4]
95:		mov bp, [bp + 2]
96:		jmp t73
98:	

char_main$29:	; function end char_main
1:	

assert_test:	; n = 0
2:		mov word [bp + 6], 0
4:	

assert_test$1:	; call header integral zero 0 stack zero 0
6:	

assert_test$2:	; parameter string_Please20write20a20number2028not20620or207293A20#, offset 6
7:		mov word [bp + 14], string_Please20write20a20number2028not20620or207293A20#
9:	

assert_test$3:	; call function noellipse-ellipse printf, extra 0
10:		mov word [bp + 8], assert_test$4
11:		mov [bp + 10], bp
12:		add bp, 8
13:		mov di, bp
14:		jmp printf
16:	

assert_test$4:	; post call
18:	

assert_test$5:	; call header integral zero 0 stack zero 0
20:	

assert_test$6:	; parameter string_25i#, offset 6
21:		mov word [bp + 14], string_25i#
23:	

assert_test$7:	; £temporary191 = &n
24:		mov t74, bp
25:		add t74, 6
27:	

assert_test$8:	; parameter £temporary191, offset 8
28:		mov [bp + 16], t74
30:	

assert_test$9:	; call function noellipse-ellipse scanf, extra 0
31:		mov word [bp + 8], assert_test$10
32:		mov [bp + 10], bp
33:		add bp, 8
34:		mov di, bp
35:		add di, 2
36:		jmp scanf
38:	

assert_test$10:	; post call
40:	

assert_test$11:	; if n != 6 goto 23
41:		cmp word [bp + 6], 6
42:		jne assert_test$23
44:	

assert_test$12:	; call header integral zero 0 stack zero 0
46:	

assert_test$13:	; parameter stderr, offset 6
47:		mov a75, [stderr]
48:		mov [bp + 14], a75
50:	

assert_test$14:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
51:		mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
53:	

assert_test$15:	; parameter string_n20213D206#, offset 10
54:		mov word [bp + 18], string_n20213D206#
56:	

assert_test$16:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMain2Ec#, offset 12
57:		mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMain2Ec#
59:	

assert_test$17:	; parameter 848, offset 14
60:		mov word [bp + 22], 848
62:	

assert_test$18:	; call function noellipse-ellipse fprintf, extra 0
63:		mov word [bp + 8], assert_test$19
64:		mov [bp + 10], bp
65:		add bp, 8
66:		mov di, bp
67:		add di, 6
68:		jmp fprintf
70:	

assert_test$19:	; post call
72:	

assert_test$20:	; call header integral zero 0 stack zero 0
74:	

assert_test$21:	; call function noellipse-noellipse abort
75:		mov word [bp + 8], assert_test$22
76:		mov [bp + 10], bp
77:		add bp, 8
78:		jmp abort
80:	

assert_test$22:	; post call
82:	

assert_test$23:	; call header integral zero 0 stack zero 0
84:	

assert_test$24:	; parameter n, offset 6
85:		mov a76, [bp + 6]
86:		mov [bp + 14], a76
88:	

assert_test$25:	; call function noellipse-noellipse assert_test2
89:		mov word [bp + 8], assert_test$26
90:		mov [bp + 10], bp
91:		add bp, 8
92:		jmp assert_test2
94:	

assert_test$26:	; post call
96:	

assert_test$27:	; return
97:		mov t77, [bp]
98:		mov di, [bp + 4]
99:		mov bp, [bp + 2]
100:		jmp t77
102:	

assert_test$28:	; function end assert_test
1:	

assert_test2:	; if n != 7 goto 12
2:		cmp word [bp + 6], 7
3:		jne assert_test2$12
5:	

assert_test2$1:	; call header integral zero 0 stack zero 0
7:	

assert_test2$2:	; parameter stderr, offset 6
8:		mov a78, [stderr]
9:		mov [bp + 14], a78
11:	

assert_test2$3:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
12:		mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
14:	

assert_test2$4:	; parameter string_n20213D207#, offset 10
15:		mov word [bp + 18], string_n20213D207#
17:	

assert_test2$5:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMain2Ec#, offset 12
18:		mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMain2Ec#
20:	

assert_test2$6:	; parameter 853, offset 14
21:		mov word [bp + 22], 853
23:	

assert_test2$7:	; call function noellipse-ellipse fprintf, extra 0
24:		mov word [bp + 8], assert_test2$8
25:		mov [bp + 10], bp
26:		add bp, 8
27:		mov di, bp
28:		add di, 6
29:		jmp fprintf
31:	

assert_test2$8:	; post call
33:	

assert_test2$9:	; call header integral zero 0 stack zero 0
35:	

assert_test2$10:	; call function noellipse-noellipse abort
36:		mov word [bp + 8], assert_test2$11
37:		mov [bp + 10], bp
38:		add bp, 8
39:		jmp abort
41:	

assert_test2$11:	; post call
43:	

assert_test2$12:	; return
44:		mov t79, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t79
49:	

assert_test2$13:	; function end assert_test2
