1:	

character_test:	; call header integral zero 0 stack zero 0
3:	

character_test$1:	; parameter string_ascii2025i0A#, offset 6
4:		mov word [bp + 13], string_ascii2025i0A#
6:	

character_test$2:	; £temporary3544 = int_to_int c (Signed_Char -> Signed_Int)
7:		mov a2358, [bp + 6]
9:		and a2358, 255
11:		cmp a2358, 0
12:		jge character_test$3
13:		neg a2358
15:		neg a2358
17:	

character_test$3:	; parameter £temporary3544, offset 8
18:		mov [bp + 15], a2358
20:	

character_test$4:	; call function noellipse-ellipse printf, extra 0
21:		mov word [bp + 7], character_test$5
22:		mov [bp + 9], bp
23:		add bp, 7
24:		mov di, bp
25:		add di, 2
26:		jmp printf
28:	

character_test$5:	; post call
30:	

character_test$6:	; call header integral zero 0 stack zero 0
32:	

character_test$7:	; parameter string_islower282725c2729203D2025s0A#, offset 6
33:		mov word [bp + 13], string_islower282725c2729203D2025s0A#
35:	

character_test$8:	; £temporary3546 = int_to_int c (Signed_Char -> Signed_Int)
36:		mov a2359, [bp + 6]
38:		and a2359, 255
40:		cmp a2359, 0
41:		jge character_test$9
42:		neg a2359
44:		neg a2359
46:	

character_test$9:	; parameter £temporary3546, offset 8
47:		mov [bp + 15], a2359
49:	

character_test$10:	; call header integral zero 0 stack zero 0
51:	

character_test$11:	; £temporary3547 = int_to_int c (Signed_Char -> Signed_Int)
52:		mov a2360, [bp + 6]
54:		and a2360, 255
56:		cmp a2360, 0
57:		jge character_test$12
58:		neg a2360
60:		neg a2360
62:	

character_test$12:	; parameter £temporary3547, offset 16
63:		mov [bp + 23], a2360
65:	

character_test$13:	; call function noellipse-noellipse islower
66:		mov word [bp + 17], character_test$14
67:		mov [bp + 19], bp
68:		add bp, 17
69:		jmp islower
71:	

character_test$14:	; post call
73:	

character_test$15:	; £temporary3548 = return_value
78:	

character_test$16:	; if £temporary3548 == 0 goto 19
79:		cmp t2362, 0
80:		je character_test$19
82:	

character_test$17:	; £temporary3553 = string_Yes#
83:		mov t2363, string_Yes#
85:	

character_test$18:	; goto 20
86:		jmp character_test$20
88:	

character_test$19:	; £temporary3553 = string_No#
89:		mov t2364, string_No#
91:	

character_test$20:	; parameter £temporary3553, offset 10
92:		mov [bp + 17], t2364
94:	

character_test$21:	; call function noellipse-ellipse printf, extra 0
95:		mov word [bp + 7], character_test$22
96:		mov [bp + 9], bp
97:		add bp, 7
98:		mov di, bp
99:		add di, 4
100:		jmp printf
102:	

character_test$22:	; post call
104:	

character_test$23:	; call header integral zero 0 stack zero 0
106:	

character_test$24:	; parameter string_isupper282725c2729203D2025s0A#, offset 6
107:		mov word [bp + 13], string_isupper282725c2729203D2025s0A#
109:	

character_test$25:	; £temporary3555 = int_to_int c (Signed_Char -> Signed_Int)
110:		mov a2365, [bp + 6]
112:		and a2365, 255
114:		cmp a2365, 0
115:		jge character_test$26
116:		neg a2365
118:		neg a2365
120:	

character_test$26:	; parameter £temporary3555, offset 8
121:		mov [bp + 15], a2365
123:	

character_test$27:	; call header integral zero 0 stack zero 0
125:	

character_test$28:	; £temporary3556 = int_to_int c (Signed_Char -> Signed_Int)
126:		mov a2366, [bp + 6]
128:		and a2366, 255
130:		cmp a2366, 0
131:		jge character_test$29
132:		neg a2366
134:		neg a2366
136:	

character_test$29:	; parameter £temporary3556, offset 16
137:		mov [bp + 23], a2366
139:	

character_test$30:	; call function noellipse-noellipse isupper
140:		mov word [bp + 17], character_test$31
141:		mov [bp + 19], bp
142:		add bp, 17
143:		jmp isupper
145:	

character_test$31:	; post call
147:	

character_test$32:	; £temporary3557 = return_value
152:	

character_test$33:	; if £temporary3557 == 0 goto 36
153:		cmp t2368, 0
154:		je character_test$36
156:	

character_test$34:	; £temporary3562 = string_Yes#
157:		mov t2369, string_Yes#
159:	

character_test$35:	; goto 37
160:		jmp character_test$37
162:	

character_test$36:	; £temporary3562 = string_No#
163:		mov t2370, string_No#
165:	

character_test$37:	; parameter £temporary3562, offset 10
166:		mov [bp + 17], t2370
168:	

character_test$38:	; call function noellipse-ellipse printf, extra 0
169:		mov word [bp + 7], character_test$39
170:		mov [bp + 9], bp
171:		add bp, 7
172:		mov di, bp
173:		add di, 4
174:		jmp printf
176:	

character_test$39:	; post call
178:	

character_test$40:	; call header integral zero 0 stack zero 0
180:	

character_test$41:	; parameter string_isalpha282725c2729203D2025s0A#, offset 6
181:		mov word [bp + 13], string_isalpha282725c2729203D2025s0A#
183:	

character_test$42:	; £temporary3564 = int_to_int c (Signed_Char -> Signed_Int)
184:		mov a2371, [bp + 6]
186:		and a2371, 255
188:		cmp a2371, 0
189:		jge character_test$43
190:		neg a2371
192:		neg a2371
194:	

character_test$43:	; parameter £temporary3564, offset 8
195:		mov [bp + 15], a2371
197:	

character_test$44:	; call header integral zero 0 stack zero 0
199:	

character_test$45:	; £temporary3565 = int_to_int c (Signed_Char -> Signed_Int)
200:		mov a2372, [bp + 6]
202:		and a2372, 255
204:		cmp a2372, 0
205:		jge character_test$46
206:		neg a2372
208:		neg a2372
210:	

character_test$46:	; parameter £temporary3565, offset 16
211:		mov [bp + 23], a2372
213:	

character_test$47:	; call function noellipse-noellipse isalpha
214:		mov word [bp + 17], character_test$48
215:		mov [bp + 19], bp
216:		add bp, 17
217:		jmp isalpha
219:	

character_test$48:	; post call
221:	

character_test$49:	; £temporary3566 = return_value
226:	

character_test$50:	; if £temporary3566 == 0 goto 53
227:		cmp t2374, 0
228:		je character_test$53
230:	

character_test$51:	; £temporary3571 = string_Yes#
231:		mov t2375, string_Yes#
233:	

character_test$52:	; goto 54
234:		jmp character_test$54
236:	

character_test$53:	; £temporary3571 = string_No#
237:		mov t2376, string_No#
239:	

character_test$54:	; parameter £temporary3571, offset 10
240:		mov [bp + 17], t2376
242:	

character_test$55:	; call function noellipse-ellipse printf, extra 0
243:		mov word [bp + 7], character_test$56
244:		mov [bp + 9], bp
245:		add bp, 7
246:		mov di, bp
247:		add di, 4
248:		jmp printf
250:	

character_test$56:	; post call
252:	

character_test$57:	; call header integral zero 0 stack zero 0
254:	

character_test$58:	; parameter string_isdigit282725c2729203D2025s0A#, offset 6
255:		mov word [bp + 13], string_isdigit282725c2729203D2025s0A#
257:	

character_test$59:	; £temporary3573 = int_to_int c (Signed_Char -> Signed_Int)
258:		mov a2377, [bp + 6]
260:		and a2377, 255
262:		cmp a2377, 0
263:		jge character_test$60
264:		neg a2377
266:		neg a2377
268:	

character_test$60:	; parameter £temporary3573, offset 8
269:		mov [bp + 15], a2377
271:	

character_test$61:	; call header integral zero 0 stack zero 0
273:	

character_test$62:	; £temporary3574 = int_to_int c (Signed_Char -> Signed_Int)
274:		mov a2378, [bp + 6]
276:		and a2378, 255
278:		cmp a2378, 0
279:		jge character_test$63
280:		neg a2378
282:		neg a2378
284:	

character_test$63:	; parameter £temporary3574, offset 16
285:		mov [bp + 23], a2378
287:	

character_test$64:	; call function noellipse-noellipse isdigit
288:		mov word [bp + 17], character_test$65
289:		mov [bp + 19], bp
290:		add bp, 17
291:		jmp isdigit
293:	

character_test$65:	; post call
295:	

character_test$66:	; £temporary3575 = return_value
300:	

character_test$67:	; if £temporary3575 == 0 goto 70
301:		cmp t2380, 0
302:		je character_test$70
304:	

character_test$68:	; £temporary3580 = string_Yes#
305:		mov t2381, string_Yes#
307:	

character_test$69:	; goto 71
308:		jmp character_test$71
310:	

character_test$70:	; £temporary3580 = string_No#
311:		mov t2382, string_No#
313:	

character_test$71:	; parameter £temporary3580, offset 10
314:		mov [bp + 17], t2382
316:	

character_test$72:	; call function noellipse-ellipse printf, extra 0
317:		mov word [bp + 7], character_test$73
318:		mov [bp + 9], bp
319:		add bp, 7
320:		mov di, bp
321:		add di, 4
322:		jmp printf
324:	

character_test$73:	; post call
326:	

character_test$74:	; call header integral zero 0 stack zero 0
328:	

character_test$75:	; parameter string_isalnum282725c2729203D2025s0A#, offset 6
329:		mov word [bp + 13], string_isalnum282725c2729203D2025s0A#
331:	

character_test$76:	; £temporary3582 = int_to_int c (Signed_Char -> Signed_Int)
332:		mov a2383, [bp + 6]
334:		and a2383, 255
336:		cmp a2383, 0
337:		jge character_test$77
338:		neg a2383
340:		neg a2383
342:	

character_test$77:	; parameter £temporary3582, offset 8
343:		mov [bp + 15], a2383
345:	

character_test$78:	; call header integral zero 0 stack zero 0
347:	

character_test$79:	; £temporary3583 = int_to_int c (Signed_Char -> Signed_Int)
348:		mov a2384, [bp + 6]
350:		and a2384, 255
352:		cmp a2384, 0
353:		jge character_test$80
354:		neg a2384
356:		neg a2384
358:	

character_test$80:	; parameter £temporary3583, offset 16
359:		mov [bp + 23], a2384
361:	

character_test$81:	; call function noellipse-noellipse isalnum
362:		mov word [bp + 17], character_test$82
363:		mov [bp + 19], bp
364:		add bp, 17
365:		jmp isalnum
367:	

character_test$82:	; post call
369:	

character_test$83:	; £temporary3584 = return_value
374:	

character_test$84:	; if £temporary3584 == 0 goto 87
375:		cmp t2386, 0
376:		je character_test$87
378:	

character_test$85:	; £temporary3589 = string_Yes#
379:		mov t2387, string_Yes#
381:	

character_test$86:	; goto 88
382:		jmp character_test$88
384:	

character_test$87:	; £temporary3589 = string_No#
385:		mov t2388, string_No#
387:	

character_test$88:	; parameter £temporary3589, offset 10
388:		mov [bp + 17], t2388
390:	

character_test$89:	; call function noellipse-ellipse printf, extra 0
391:		mov word [bp + 7], character_test$90
392:		mov [bp + 9], bp
393:		add bp, 7
394:		mov di, bp
395:		add di, 4
396:		jmp printf
398:	

character_test$90:	; post call
400:	

character_test$91:	; call header integral zero 0 stack zero 0
402:	

character_test$92:	; parameter string_isxdigit282725c2729203D2025s0A#, offset 6
403:		mov word [bp + 13], string_isxdigit282725c2729203D2025s0A#
405:	

character_test$93:	; £temporary3591 = int_to_int c (Signed_Char -> Signed_Int)
406:		mov a2389, [bp + 6]
408:		and a2389, 255
410:		cmp a2389, 0
411:		jge character_test$94
412:		neg a2389
414:		neg a2389
416:	

character_test$94:	; parameter £temporary3591, offset 8
417:		mov [bp + 15], a2389
419:	

character_test$95:	; call header integral zero 0 stack zero 0
421:	

character_test$96:	; £temporary3592 = int_to_int c (Signed_Char -> Signed_Int)
422:		mov a2390, [bp + 6]
424:		and a2390, 255
426:		cmp a2390, 0
427:		jge character_test$97
428:		neg a2390
430:		neg a2390
432:	

character_test$97:	; parameter £temporary3592, offset 16
433:		mov [bp + 23], a2390
435:	

character_test$98:	; call function noellipse-noellipse isxdigit
436:		mov word [bp + 17], character_test$99
437:		mov [bp + 19], bp
438:		add bp, 17
439:		jmp isxdigit
441:	

character_test$99:	; post call
443:	

character_test$100:	; £temporary3593 = return_value
448:	

character_test$101:	; if £temporary3593 == 0 goto 104
449:		cmp t2392, 0
450:		je character_test$104
452:	

character_test$102:	; £temporary3598 = string_Yes#
453:		mov t2393, string_Yes#
455:	

character_test$103:	; goto 105
456:		jmp character_test$105
458:	

character_test$104:	; £temporary3598 = string_No#
459:		mov t2394, string_No#
461:	

character_test$105:	; parameter £temporary3598, offset 10
462:		mov [bp + 17], t2394
464:	

character_test$106:	; call function noellipse-ellipse printf, extra 0
465:		mov word [bp + 7], character_test$107
466:		mov [bp + 9], bp
467:		add bp, 7
468:		mov di, bp
469:		add di, 4
470:		jmp printf
472:	

character_test$107:	; post call
474:	

character_test$108:	; call header integral zero 0 stack zero 0
476:	

character_test$109:	; parameter string_isgraph282725c2729203D2025s0A#, offset 6
477:		mov word [bp + 13], string_isgraph282725c2729203D2025s0A#
479:	

character_test$110:	; £temporary3600 = int_to_int c (Signed_Char -> Signed_Int)
480:		mov a2395, [bp + 6]
482:		and a2395, 255
484:		cmp a2395, 0
485:		jge character_test$111
486:		neg a2395
488:		neg a2395
490:	

character_test$111:	; parameter £temporary3600, offset 8
491:		mov [bp + 15], a2395
493:	

character_test$112:	; call header integral zero 0 stack zero 0
495:	

character_test$113:	; £temporary3601 = int_to_int c (Signed_Char -> Signed_Int)
496:		mov a2396, [bp + 6]
498:		and a2396, 255
500:		cmp a2396, 0
501:		jge character_test$114
502:		neg a2396
504:		neg a2396
506:	

character_test$114:	; parameter £temporary3601, offset 16
507:		mov [bp + 23], a2396
509:	

character_test$115:	; call function noellipse-noellipse isgraph
510:		mov word [bp + 17], character_test$116
511:		mov [bp + 19], bp
512:		add bp, 17
513:		jmp isgraph
515:	

character_test$116:	; post call
517:	

character_test$117:	; £temporary3602 = return_value
522:	

character_test$118:	; if £temporary3602 == 0 goto 121
523:		cmp t2398, 0
524:		je character_test$121
526:	

character_test$119:	; £temporary3607 = string_Yes#
527:		mov t2399, string_Yes#
529:	

character_test$120:	; goto 122
530:		jmp character_test$122
532:	

character_test$121:	; £temporary3607 = string_No#
533:		mov t2400, string_No#
535:	

character_test$122:	; parameter £temporary3607, offset 10
536:		mov [bp + 17], t2400
538:	

character_test$123:	; call function noellipse-ellipse printf, extra 0
539:		mov word [bp + 7], character_test$124
540:		mov [bp + 9], bp
541:		add bp, 7
542:		mov di, bp
543:		add di, 4
544:		jmp printf
546:	

character_test$124:	; post call
548:	

character_test$125:	; call header integral zero 0 stack zero 0
550:	

character_test$126:	; parameter string_isprint282725c2729203D2025s0A#, offset 6
551:		mov word [bp + 13], string_isprint282725c2729203D2025s0A#
553:	

character_test$127:	; £temporary3609 = int_to_int c (Signed_Char -> Signed_Int)
554:		mov a2401, [bp + 6]
556:		and a2401, 255
558:		cmp a2401, 0
559:		jge character_test$128
560:		neg a2401
562:		neg a2401
564:	

character_test$128:	; parameter £temporary3609, offset 8
565:		mov [bp + 15], a2401
567:	

character_test$129:	; call header integral zero 0 stack zero 0
569:	

character_test$130:	; £temporary3610 = int_to_int c (Signed_Char -> Signed_Int)
570:		mov a2402, [bp + 6]
572:		and a2402, 255
574:		cmp a2402, 0
575:		jge character_test$131
576:		neg a2402
578:		neg a2402
580:	

character_test$131:	; parameter £temporary3610, offset 16
581:		mov [bp + 23], a2402
583:	

character_test$132:	; call function noellipse-noellipse isprint
584:		mov word [bp + 17], character_test$133
585:		mov [bp + 19], bp
586:		add bp, 17
587:		jmp isprint
589:	

character_test$133:	; post call
591:	

character_test$134:	; £temporary3611 = return_value
596:	

character_test$135:	; if £temporary3611 == 0 goto 138
597:		cmp t2404, 0
598:		je character_test$138
600:	

character_test$136:	; £temporary3616 = string_Yes#
601:		mov t2405, string_Yes#
603:	

character_test$137:	; goto 139
604:		jmp character_test$139
606:	

character_test$138:	; £temporary3616 = string_No#
607:		mov t2406, string_No#
609:	

character_test$139:	; parameter £temporary3616, offset 10
610:		mov [bp + 17], t2406
612:	

character_test$140:	; call function noellipse-ellipse printf, extra 0
613:		mov word [bp + 7], character_test$141
614:		mov [bp + 9], bp
615:		add bp, 7
616:		mov di, bp
617:		add di, 4
618:		jmp printf
620:	

character_test$141:	; post call
622:	

character_test$142:	; call header integral zero 0 stack zero 0
624:	

character_test$143:	; parameter string_ispunct282725c2729203D2025s0A#, offset 6
625:		mov word [bp + 13], string_ispunct282725c2729203D2025s0A#
627:	

character_test$144:	; £temporary3618 = int_to_int c (Signed_Char -> Signed_Int)
628:		mov a2407, [bp + 6]
630:		and a2407, 255
632:		cmp a2407, 0
633:		jge character_test$145
634:		neg a2407
636:		neg a2407
638:	

character_test$145:	; parameter £temporary3618, offset 8
639:		mov [bp + 15], a2407
641:	

character_test$146:	; call header integral zero 0 stack zero 0
643:	

character_test$147:	; £temporary3619 = int_to_int c (Signed_Char -> Signed_Int)
644:		mov a2408, [bp + 6]
646:		and a2408, 255
648:		cmp a2408, 0
649:		jge character_test$148
650:		neg a2408
652:		neg a2408
654:	

character_test$148:	; parameter £temporary3619, offset 16
655:		mov [bp + 23], a2408
657:	

character_test$149:	; call function noellipse-noellipse ispunct
658:		mov word [bp + 17], character_test$150
659:		mov [bp + 19], bp
660:		add bp, 17
661:		jmp ispunct
663:	

character_test$150:	; post call
665:	

character_test$151:	; £temporary3620 = return_value
670:	

character_test$152:	; if £temporary3620 == 0 goto 155
671:		cmp t2410, 0
672:		je character_test$155
674:	

character_test$153:	; £temporary3625 = string_Yes#
675:		mov t2411, string_Yes#
677:	

character_test$154:	; goto 156
678:		jmp character_test$156
680:	

character_test$155:	; £temporary3625 = string_No#
681:		mov t2412, string_No#
683:	

character_test$156:	; parameter £temporary3625, offset 10
684:		mov [bp + 17], t2412
686:	

character_test$157:	; call function noellipse-ellipse printf, extra 0
687:		mov word [bp + 7], character_test$158
688:		mov [bp + 9], bp
689:		add bp, 7
690:		mov di, bp
691:		add di, 4
692:		jmp printf
694:	

character_test$158:	; post call
696:	

character_test$159:	; call header integral zero 0 stack zero 0
698:	

character_test$160:	; parameter string_iscntrl282725c2729203D2025s0A#, offset 6
699:		mov word [bp + 13], string_iscntrl282725c2729203D2025s0A#
701:	

character_test$161:	; £temporary3627 = int_to_int c (Signed_Char -> Signed_Int)
702:		mov a2413, [bp + 6]
704:		and a2413, 255
706:		cmp a2413, 0
707:		jge character_test$162
708:		neg a2413
710:		neg a2413
712:	

character_test$162:	; parameter £temporary3627, offset 8
713:		mov [bp + 15], a2413
715:	

character_test$163:	; call header integral zero 0 stack zero 0
717:	

character_test$164:	; £temporary3628 = int_to_int c (Signed_Char -> Signed_Int)
718:		mov a2414, [bp + 6]
720:		and a2414, 255
722:		cmp a2414, 0
723:		jge character_test$165
724:		neg a2414
726:		neg a2414
728:	

character_test$165:	; parameter £temporary3628, offset 16
729:		mov [bp + 23], a2414
731:	

character_test$166:	; call function noellipse-noellipse iscntrl
732:		mov word [bp + 17], character_test$167
733:		mov [bp + 19], bp
734:		add bp, 17
735:		jmp iscntrl
737:	

character_test$167:	; post call
739:	

character_test$168:	; £temporary3629 = return_value
744:	

character_test$169:	; if £temporary3629 == 0 goto 172
745:		cmp t2416, 0
746:		je character_test$172
748:	

character_test$170:	; £temporary3634 = string_Yes#
749:		mov t2417, string_Yes#
751:	

character_test$171:	; goto 173
752:		jmp character_test$173
754:	

character_test$172:	; £temporary3634 = string_No#
755:		mov t2418, string_No#
757:	

character_test$173:	; parameter £temporary3634, offset 10
758:		mov [bp + 17], t2418
760:	

character_test$174:	; call function noellipse-ellipse printf, extra 0
761:		mov word [bp + 7], character_test$175
762:		mov [bp + 9], bp
763:		add bp, 7
764:		mov di, bp
765:		add di, 4
766:		jmp printf
768:	

character_test$175:	; post call
770:	

character_test$176:	; call header integral zero 0 stack zero 0
772:	

character_test$177:	; parameter string_isspace282725c2729203D2025s0A#, offset 6
773:		mov word [bp + 13], string_isspace282725c2729203D2025s0A#
775:	

character_test$178:	; £temporary3636 = int_to_int c (Signed_Char -> Signed_Int)
776:		mov a2419, [bp + 6]
778:		and a2419, 255
780:		cmp a2419, 0
781:		jge character_test$179
782:		neg a2419
784:		neg a2419
786:	

character_test$179:	; parameter £temporary3636, offset 8
787:		mov [bp + 15], a2419
789:	

character_test$180:	; call header integral zero 0 stack zero 0
791:	

character_test$181:	; £temporary3637 = int_to_int c (Signed_Char -> Signed_Int)
792:		mov a2420, [bp + 6]
794:		and a2420, 255
796:		cmp a2420, 0
797:		jge character_test$182
798:		neg a2420
800:		neg a2420
802:	

character_test$182:	; parameter £temporary3637, offset 16
803:		mov [bp + 23], a2420
805:	

character_test$183:	; call function noellipse-noellipse isspace
806:		mov word [bp + 17], character_test$184
807:		mov [bp + 19], bp
808:		add bp, 17
809:		jmp isspace
811:	

character_test$184:	; post call
813:	

character_test$185:	; £temporary3638 = return_value
818:	

character_test$186:	; if £temporary3638 == 0 goto 189
819:		cmp t2422, 0
820:		je character_test$189
822:	

character_test$187:	; £temporary3643 = string_Yes#
823:		mov t2423, string_Yes#
825:	

character_test$188:	; goto 190
826:		jmp character_test$190
828:	

character_test$189:	; £temporary3643 = string_No#
829:		mov t2424, string_No#
831:	

character_test$190:	; parameter £temporary3643, offset 10
832:		mov [bp + 17], t2424
834:	

character_test$191:	; call function noellipse-ellipse printf, extra 0
835:		mov word [bp + 7], character_test$192
836:		mov [bp + 9], bp
837:		add bp, 7
838:		mov di, bp
839:		add di, 4
840:		jmp printf
842:	

character_test$192:	; post call
844:	

character_test$193:	; call header integral zero 0 stack zero 0
846:	

character_test$194:	; parameter string_tolower282725c2729203D202725c270A#, offset 6
847:		mov word [bp + 13], string_tolower282725c2729203D202725c270A#
849:	

character_test$195:	; £temporary3645 = int_to_int c (Signed_Char -> Signed_Int)
850:		mov a2425, [bp + 6]
852:		and a2425, 255
854:		cmp a2425, 0
855:		jge character_test$196
856:		neg a2425
858:		neg a2425
860:	

character_test$196:	; parameter £temporary3645, offset 8
861:		mov [bp + 15], a2425
863:	

character_test$197:	; call header integral zero 0 stack zero 0
865:	

character_test$198:	; £temporary3646 = int_to_int c (Signed_Char -> Signed_Int)
866:		mov a2426, [bp + 6]
868:		and a2426, 255
870:		cmp a2426, 0
871:		jge character_test$199
872:		neg a2426
874:		neg a2426
876:	

character_test$199:	; parameter £temporary3646, offset 16
877:		mov [bp + 23], a2426
879:	

character_test$200:	; call function noellipse-noellipse tolower
880:		mov word [bp + 17], character_test$201
881:		mov [bp + 19], bp
882:		add bp, 17
883:		jmp tolower
885:	

character_test$201:	; post call
887:	

character_test$202:	; £temporary3647 = return_value
892:	

character_test$203:	; £temporary3648 = int_to_int £temporary3647 (Signed_Int -> Signed_Char)
895:		cmp t2428, 0
896:		jge character_test$204
897:		neg t2428
899:		neg t2428
901:	

character_test$204:	; £temporary3649 = int_to_int £temporary3648 (Signed_Char -> Signed_Int)
903:		and t2428, 255
905:		cmp t2428, 0
906:		jge character_test$205
907:		neg t2428
909:		neg t2428
911:	

character_test$205:	; parameter £temporary3649, offset 10
912:		mov [bp + 17], t2428
914:	

character_test$206:	; call function noellipse-ellipse printf, extra 0
915:		mov word [bp + 7], character_test$207
916:		mov [bp + 9], bp
917:		add bp, 7
918:		mov di, bp
919:		add di, 4
920:		jmp printf
922:	

character_test$207:	; post call
924:	

character_test$208:	; call header integral zero 0 stack zero 0
926:	

character_test$209:	; parameter string_toupper282725c2729203D202725c270A0A#, offset 6
927:		mov word [bp + 13], string_toupper282725c2729203D202725c270A0A#
929:	

character_test$210:	; £temporary3651 = int_to_int c (Signed_Char -> Signed_Int)
930:		mov a2429, [bp + 6]
932:		and a2429, 255
934:		cmp a2429, 0
935:		jge character_test$211
936:		neg a2429
938:		neg a2429
940:	

character_test$211:	; parameter £temporary3651, offset 8
941:		mov [bp + 15], a2429
943:	

character_test$212:	; call header integral zero 0 stack zero 0
945:	

character_test$213:	; £temporary3652 = int_to_int c (Signed_Char -> Signed_Int)
946:		mov a2430, [bp + 6]
948:		and a2430, 255
950:		cmp a2430, 0
951:		jge character_test$214
952:		neg a2430
954:		neg a2430
956:	

character_test$214:	; parameter £temporary3652, offset 16
957:		mov [bp + 23], a2430
959:	

character_test$215:	; call function noellipse-noellipse toupper
960:		mov word [bp + 17], character_test$216
961:		mov [bp + 19], bp
962:		add bp, 17
963:		jmp toupper
965:	

character_test$216:	; post call
967:	

character_test$217:	; £temporary3653 = return_value
972:	

character_test$218:	; £temporary3654 = int_to_int £temporary3653 (Signed_Int -> Signed_Char)
975:		cmp t2432, 0
976:		jge character_test$219
977:		neg t2432
979:		neg t2432
981:	

character_test$219:	; £temporary3655 = int_to_int £temporary3654 (Signed_Char -> Signed_Int)
983:		and t2432, 255
985:		cmp t2432, 0
986:		jge character_test$220
987:		neg t2432
989:		neg t2432
991:	

character_test$220:	; parameter £temporary3655, offset 10
992:		mov [bp + 17], t2432
994:	

character_test$221:	; call function noellipse-ellipse printf, extra 0
995:		mov word [bp + 7], character_test$222
996:		mov [bp + 9], bp
997:		add bp, 7
998:		mov di, bp
999:		add di, 4
1000:		jmp printf
1002:	

character_test$222:	; post call
1004:	

character_test$223:	; return
1005:		mov t2433, [bp]
1006:		mov di, [bp + 4]
1007:		mov bp, [bp + 2]
1008:		jmp t2433
1010:	

character_test$224:	; function end character_test
