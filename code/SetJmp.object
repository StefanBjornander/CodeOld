1:	

setjmp:	; InspectRegister £temporary836 bp
3:	

setjmp$1:	; Assign bp_pointer £temporary836
4:		mov [bp + 8], bp
6:	

setjmp$2:	; Deref £temporary837 -> buf buf 0
7:		mov si, [bp + 6]
9:	

setjmp$3:	; Deref £temporary838 -> bp_pointer bp_pointer 0
10:		mov di, [bp + 8]
12:	

setjmp$4:	; Assign £temporary837 -> buf £temporary838 -> bp_pointer
13:		mov ax, [di]
14:		mov [si], ax
16:	

setjmp$5:	; Deref £temporary839 -> buf buf 2
17:		mov si, [bp + 6]
19:	

setjmp$6:	; Deref £temporary840 -> bp_pointer bp_pointer 2
20:		mov di, [bp + 8]
22:	

setjmp$7:	; Assign £temporary839 -> buf £temporary840 -> bp_pointer
23:		mov ax, [di + 2]
24:		mov [si + 2], ax
26:	

setjmp$8:	; Deref £temporary841 -> buf buf 4
27:		mov si, [bp + 6]
29:	

setjmp$9:	; Deref £temporary842 -> bp_pointer bp_pointer 4
30:		mov di, [bp + 8]
32:	

setjmp$10:	; Assign £temporary841 -> buf £temporary842 -> bp_pointer
33:		mov ax, [di + 4]
34:		mov [si + 4], ax
36:	

setjmp$11:	; SetReturnValue 0
37:		mov bx, 0
39:	

setjmp$12:	; Return 0
40:		mov ax, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp ax
45:	

setjmp$13:	; FunctionEnd setjmp
1:	

longjmp:	; AssignRegister bx return_value
2:		mov bx, [bp + 8]
4:	

longjmp$1:	; Deref £temporary845 -> buf buf 0
5:		mov si, [bp + 6]
7:	

longjmp$2:	; AssignRegister cx £temporary845 -> buf
8:		mov cx, [si]
10:	

longjmp$3:	; Deref £temporary847 -> buf buf 4
11:		mov si, [bp + 6]
13:	

longjmp$4:	; AssignRegister di £temporary847 -> buf
14:		mov di, [si + 4]
16:	

longjmp$5:	; Deref £temporary849 -> buf buf 2
17:		mov si, [bp + 6]
19:	

longjmp$6:	; AssignRegister bp £temporary849 -> buf
20:		mov bp, [si + 2]
22:	

longjmp$7:	; JumpRegister cx
23:		jmp cx
25:	

longjmp$8:	; Return 0
26:		mov ax, [bp]
27:		mov di, [bp + 4]
28:		mov bp, [bp + 2]
29:		jmp ax
31:	

longjmp$9:	; FunctionEnd longjmp
