1:	

setlocale:	; if g_currStructPtr == 0 goto 4
2:		cmp word [@23$g_currStructPtr], 0
3:		je setlocale$4
5:	

setlocale$1:	; £temporary495 -> g_currStructPtr = *g_currStructPtr
6:		mov si, [@23$g_currStructPtr]
8:	

setlocale$2:	; £temporary499 = £temporary495 -> g_currStructPtr
9:		mov ax, [si]
11:	

setlocale$3:	; goto 5
12:		jmp setlocale$5
14:	

setlocale$4:	; £temporary499 = 0
15:		mov ax, 0
17:	

setlocale$5:	; oldName = £temporary499
18:		mov [bp + 12], ax
20:	

setlocale$6:	; g_currStructPtr = 0
21:		mov word [@23$g_currStructPtr], 0
23:	

setlocale$7:	; if newName == 0 goto 28
24:		cmp word [bp + 8], 0
25:		je setlocale$28
27:	

setlocale$8:	; index = 0
28:		mov word [bp + 10], 0
30:	

setlocale$9:	; if index >= sSize goto 28
31:		mov ax, [@22$sSize]
32:		cmp [bp + 10], ax
33:		jge setlocale$28
35:	

setlocale$10:	; call header integral zero 0 stack zero 0
37:	

setlocale$11:	; parameter newName, offset 6
38:		mov ax, [bp + 8]
39:		mov [bp + 20], ax
41:	

setlocale$12:	; £temporary504 = index * 4
42:		mov ax, [bp + 10]
44:		xor dx, dx
45:		mul word [int2$4#]
51:	

setlocale$13:	; £temporary505 = sArray + £temporary504
52:		mov si, @21$sArray
53:		add si, ax
55:	

setlocale$14:	; £temporary503 -> £temporary505 = *£temporary505
57:	

setlocale$15:	; parameter £temporary503.name$0 -> £temporary505, offset 8
58:		mov ax, [si]
59:		mov [bp + 22], ax
61:	

setlocale$16:	; call function noellipse-noellipse strcmp
62:		mov word [bp + 14], setlocale$17
63:		mov [bp + 16], bp
64:		add bp, 14
65:		jmp strcmp
67:	

setlocale$17:	; post call
69:	

setlocale$18:	; £temporary506 = return_value
74:	

setlocale$19:	; if £temporary506 != 0 goto 26
75:		cmp bx, 0
76:		jne setlocale$26
78:	

setlocale$20:	; £temporary509 = index * 4
79:		mov ax, [bp + 10]
81:		xor dx, dx
82:		mul word [int2$4#]
88:	

setlocale$21:	; £temporary510 = sArray + £temporary509
89:		mov si, @21$sArray
90:		add si, ax
92:	

setlocale$22:	; £temporary508 -> £temporary510 = *£temporary510
94:	

setlocale$23:	; £temporary511 = &£temporary508 -> £temporary510
96:	

setlocale$24:	; g_currStructPtr = £temporary511
97:		mov [@23$g_currStructPtr], si
99:	

setlocale$25:	; goto 28
100:		jmp setlocale$28
102:	

setlocale$26:	; ++index
103:		inc word [bp + 10]
105:	

setlocale$27:	; goto 9
106:		jmp setlocale$9
108:	

setlocale$28:	; return_value = oldName
109:		mov bx, [bp + 12]
111:	

setlocale$29:	; return
112:		mov ax, [bp]
113:		mov di, [bp + 4]
114:		mov bp, [bp + 2]
115:		jmp ax
117:	

setlocale$30:	; function end setlocale
1:	

localeconv:	; if g_currStructPtr == 0 goto 4
2:		cmp word [@23$g_currStructPtr], 0
3:		je localeconv$4
5:	

localeconv$1:	; £temporary515 -> g_currStructPtr = *g_currStructPtr, offset 2
6:		mov si, [@23$g_currStructPtr]
8:	

localeconv$2:	; £temporary519 = £temporary515 -> g_currStructPtr
9:		mov bx, [si + 2]
11:	

localeconv$3:	; goto 5
12:		jmp localeconv$5
14:	

localeconv$4:	; £temporary519 = 0
15:		mov bx, 0
17:	

localeconv$5:	; return_value = £temporary519
19:	

localeconv$6:	; return
20:		mov ax, [bp]
21:		mov di, [bp + 4]
22:		mov bp, [bp + 2]
23:		jmp ax
25:	

localeconv$7:	; function end localeconv
