0: if newMemorySize >= int2$0# goto 12
1: call header integral zero 0 stack zero 0
2: parameter stderr, offset 16
3: parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 18
4: parameter string_newMemorySize203E3D200#, offset 20
5: parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5CMalloc2Ec#, offset 22
6: parameter int2$239#, offset 24
7: call function noellipse-ellipse fprintf, extra 6
8: post call
9: call header integral zero 0 stack zero 0
10: call function noellipse-noellipse abort
11: post call
12: if oldMemoryPtr != int2$0# goto 25
13: if newMemorySize > int2$0# goto 25
14: call header integral zero 0 stack zero 0
15: parameter stderr, offset 16
16: parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 18
17: parameter string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#, offset 20
18: parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5CMalloc2Ec#, offset 22
19: parameter int2$240#, offset 24
20: call function noellipse-ellipse fprintf, extra 6
21: post call
22: call header integral zero 0 stack zero 0
23: call function noellipse-noellipse abort
24: post call
25: if oldMemoryPtr != int2$0# goto 33
26: call header integral zero 0 stack zero 0
27: parameter newMemorySize, offset 16
28: call function noellipse-noellipse malloc
29: post call
30: £temporary228 = return_value
31: return_value = £temporary228
32: return
33: if newMemorySize != int2$0# goto 40
34: call header integral zero 0 stack zero 0
35: parameter oldMemoryPtr, offset 16
36: call function noellipse-noellipse free
37: post call
38: return_value = int2$0#
39: return
40: £temporary231 = int_to_int newMemorySize (Signed_Int -> Unsigned_Int)
41: £temporary232 = £temporary231 + int2$4#
42: newBlockSize = £temporary232
43: £temporary233 = int_to_int oldMemoryPtr (Pointer -> Unsigned_Int)
44: £temporary234 = £temporary233 - int2$4#
45: £temporary235 = int_to_int £temporary234 (Unsigned_Int -> Pointer)
46: oldBlockPtr = £temporary235
47: £temporary236 -> oldBlockPtr = *oldBlockPtr
48: if newBlockSize > £temporary236 -> oldBlockPtr goto 53
49: £temporary238 -> oldBlockPtr = *oldBlockPtr
50: £temporary238 -> oldBlockPtr = newBlockSize
51: return_value = oldMemoryPtr
52: return
53: lastAddress = int2$65528#
54: currBlockPtr = g_firstBlockPtr
55: if currBlockPtr == int2$0# goto 70
56: if currBlockPtr != oldBlockPtr goto 65
57: £temporary241 = int_to_int currBlockPtr (Pointer -> Unsigned_Int)
58: £temporary242 = lastAddress - £temporary241
59: availableSize = £temporary242
60: if availableSize < newBlockSize goto 70
61: £temporary244 -> oldBlockPtr = *oldBlockPtr
62: £temporary244 -> oldBlockPtr = newBlockSize
63: return_value = oldMemoryPtr
64: return
65: £temporary245 = int_to_int currBlockPtr (Pointer -> Unsigned_Int)
66: lastAddress = £temporary245
67: £temporary246 -> currBlockPtr = *currBlockPtr, offset 2
68: currBlockPtr = £temporary246 -> currBlockPtr
69: goto 55
70: call header integral zero 0 stack zero 0
71: parameter newMemorySize, offset 24
72: call function noellipse-noellipse malloc
73: post call
74: £temporary247 = return_value
75: newMemoryPtr = £temporary247
76: if newMemoryPtr == int2$0# goto 89
77: call header integral zero 0 stack zero 0
78: parameter newMemoryPtr, offset 26
79: parameter oldMemoryPtr, offset 28
80: parameter newMemorySize, offset 30
81: call function noellipse-noellipse memcpy
82: post call
83: call header integral zero 0 stack zero 0
84: parameter oldMemoryPtr, offset 26
85: call function noellipse-noellipse free
86: post call
87: return_value = newMemoryPtr
88: return
89: return_value = int2$0#
90: return
91: function end realloc
