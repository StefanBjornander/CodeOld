1:	

compare:	; £temporary5892 = int_to_int valuePtr1 (Pointer -> Pointer)
2:		mov a3054, [bp + 6]
5:	

compare$1:	; £temporary5893 -> £temporary5892 = *£temporary5892
7:	

compare$2:	; intValue1 = £temporary5893 -> £temporary5892
8:		mov t3055, [a3054]
9:		mov [bp + 10], t3055
11:	

compare$3:	; £temporary5894 = int_to_int valuePtr2 (Pointer -> Pointer)
12:		mov a3056, [bp + 8]
15:	

compare$4:	; £temporary5895 -> £temporary5894 = *£temporary5894
17:	

compare$5:	; intValue2 = £temporary5895 -> £temporary5894
18:		mov t3057, [a3056]
19:		mov [bp + 12], t3057
21:	

compare$6:	; if intValue1 >= intValue2 goto 9
22:		mov a3058, [bp + 12]
23:		cmp [bp + 10], a3058
24:		jge compare$9
26:	

compare$7:	; £temporary5905 = -1
27:		mov t3059, -1
29:	

compare$8:	; goto 14
30:		jmp compare$14
32:	

compare$9:	; if intValue1 != intValue2 goto 12
33:		mov a3060, [bp + 12]
34:		cmp [bp + 10], a3060
35:		jne compare$12
37:	

compare$10:	; £temporary5901 = 0
38:		mov t3061, 0
40:	

compare$11:	; goto 13
41:		jmp compare$13
43:	

compare$12:	; £temporary5901 = 1
44:		mov t3062, 1
46:	

compare$13:	; £temporary5905 = £temporary5901
48:	

compare$14:	; return_value = £temporary5905
50:	

compare$15:	; return
51:		mov t3064, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3064
56:	

compare$16:	; function end compare
1:	

reverse_compare:	; £temporary5906 = int_to_int valuePtr1 (Pointer -> Pointer)
2:		mov a3065, [bp + 6]
5:	

reverse_compare$1:	; £temporary5907 -> £temporary5906 = *£temporary5906
7:	

reverse_compare$2:	; intValue1 = £temporary5907 -> £temporary5906
8:		mov t3066, [a3065]
9:		mov [bp + 10], t3066
11:	

reverse_compare$3:	; £temporary5908 = int_to_int valuePtr2 (Pointer -> Pointer)
12:		mov a3067, [bp + 8]
15:	

reverse_compare$4:	; £temporary5909 -> £temporary5908 = *£temporary5908
17:	

reverse_compare$5:	; intValue2 = £temporary5909 -> £temporary5908
18:		mov t3068, [a3067]
19:		mov [bp + 12], t3068
21:	

reverse_compare$6:	; if intValue1 >= intValue2 goto 9
22:		mov a3069, [bp + 12]
23:		cmp [bp + 10], a3069
24:		jge reverse_compare$9
26:	

reverse_compare$7:	; £temporary5919 = 1
27:		mov t3070, 1
29:	

reverse_compare$8:	; goto 14
30:		jmp reverse_compare$14
32:	

reverse_compare$9:	; if intValue1 != intValue2 goto 12
33:		mov a3071, [bp + 12]
34:		cmp [bp + 10], a3071
35:		jne reverse_compare$12
37:	

reverse_compare$10:	; £temporary5915 = 0
38:		mov t3072, 0
40:	

reverse_compare$11:	; goto 13
41:		jmp reverse_compare$13
43:	

reverse_compare$12:	; £temporary5915 = -1
44:		mov t3073, -1
46:	

reverse_compare$13:	; £temporary5919 = £temporary5915
48:	

reverse_compare$14:	; return_value = £temporary5919
50:	

reverse_compare$15:	; return
51:		mov t3075, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3075
56:	

reverse_compare$16:	; function end reverse_compare
1:	

print_div:	; call header integral zero 0 stack zero 0
3:	

print_div$1:	; parameter string_div_t20quot2025i20rem2025i0A#, offset 6
4:		mov word [bp + 16], string_div_t20quot2025i20rem2025i0A#
6:	

print_div$2:	; parameter d$quot, offset 8
7:		mov a3076, [bp + 6]
8:		mov [bp + 18], a3076
10:	

print_div$3:	; parameter d$rem, offset 10
11:		mov a3077, [bp + 8]
12:		mov [bp + 20], a3077
14:	

print_div$4:	; call function noellipse-ellipse printf, extra 0
15:		mov word [bp + 10], print_div$5
16:		mov [bp + 12], bp
17:		add bp, 10
18:		mov di, bp
19:		add di, 4
20:		jmp printf
22:	

print_div$5:	; post call
24:	

print_div$6:	; ++d$quot
25:		inc word [bp + 6]
27:	

print_div$7:	; ++d$rem
28:		inc word [bp + 8]
30:	

print_div$8:	; return_value = d
31:		mov t3078, bp
32:		add t3078, 6
34:	

print_div$9:	; return
35:		mov t3079, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t3079
40:	

print_div$10:	; function end print_div
1:	

print_ldiv:	; call header integral zero 0 stack zero 0
3:	

print_ldiv$1:	; parameter string_ldiv_t20quot2025li20rem2025li0A#, offset 6
4:		mov word [bp + 20], string_ldiv_t20quot2025li20rem2025li0A#
6:	

print_ldiv$2:	; parameter ld$quot, offset 8
7:		mov a3080, [bp + 6]
8:		mov [bp + 22], a3080
10:	

print_ldiv$3:	; parameter ld$rem, offset 12
11:		mov a3081, [bp + 10]
12:		mov [bp + 26], a3081
14:	

print_ldiv$4:	; call function noellipse-ellipse printf, extra 0
15:		mov word [bp + 14], print_ldiv$5
16:		mov [bp + 16], bp
17:		add bp, 14
18:		mov di, bp
19:		add di, 8
20:		jmp printf
22:	

print_ldiv$5:	; post call
24:	

print_ldiv$6:	; --ld$quot
25:		dec dword [bp + 6]
27:	

print_ldiv$7:	; --ld$rem
28:		dec dword [bp + 10]
30:	

print_ldiv$8:	; return_value = ld
31:		mov t3082, bp
32:		add t3082, 6
34:	

print_ldiv$9:	; return
35:		mov t3083, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t3083
40:	

print_ldiv$10:	; function end print_ldiv
1:	

exit_handle1x:	; call header integral zero 0 stack zero 0
3:	

exit_handle1x$1:	; parameter string_exit10A#, offset 6
4:		mov word [bp + 12], string_exit10A#
6:	

exit_handle1x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle1x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle1x$3:	; post call
15:	

exit_handle1x$4:	; return
16:		mov t3084, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3084
21:	

exit_handle1x$5:	; function end exit_handle1x
1:	

exit_handle2x:	; call header integral zero 0 stack zero 0
3:	

exit_handle2x$1:	; parameter string_exit20A#, offset 6
4:		mov word [bp + 12], string_exit20A#
6:	

exit_handle2x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle2x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle2x$3:	; post call
15:	

exit_handle2x$4:	; return
16:		mov t3085, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3085
21:	

exit_handle2x$5:	; function end exit_handle2x
1:	

exit_handle3x:	; call header integral zero 0 stack zero 0
3:	

exit_handle3x$1:	; parameter string_exit30A#, offset 6
4:		mov word [bp + 12], string_exit30A#
6:	

exit_handle3x$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], exit_handle3x$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

exit_handle3x$3:	; post call
15:	

exit_handle3x$4:	; return
16:		mov t3086, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3086
21:	

exit_handle3x$5:	; function end exit_handle3x
1:	

hello:	; call header integral zero 0 stack zero 0
3:	

hello$1:	; parameter string_HelloFFF#, offset 6
4:		mov word [bp + 12], string_HelloFFF#
6:	

hello$2:	; call function noellipse-ellipse printf, extra 0
7:		mov word [bp + 6], hello$3
8:		mov [bp + 8], bp
9:		add bp, 6
10:		mov di, bp
11:		jmp printf
13:	

hello$3:	; post call
15:	

hello$4:	; return
16:		mov t3087, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t3087
21:	

hello$5:	; function end hello
1:	

qtest:	; call header integral zero 0 stack zero 0
3:	

qtest$1:	; parameter string_f3A2025u0A#, offset 6
4:		mov word [bp + 14], string_f3A2025u0A#
6:	

qtest$2:	; £temporary5950 = int_to_int f (Pointer -> Unsigned_Int)
7:		mov a3088, [bp + 6]
10:	

qtest$3:	; parameter £temporary5950, offset 8
11:		mov [bp + 16], a3088
13:	

qtest$4:	; call function noellipse-ellipse printf, extra 0
14:		mov word [bp + 8], qtest$5
15:		mov [bp + 10], bp
16:		add bp, 8
17:		mov di, bp
18:		add di, 2
19:		jmp printf
21:	

qtest$5:	; post call
23:	

qtest$6:	; call header integral zero 0 stack zero 0
25:	

qtest$7:	; call function noellipse-noellipse f
26:		mov word [bp + 8], qtest$8
27:		mov [bp + 10], bp
28:		mov a3089, [bp + 6]
29:		add bp, 8
30:		jmp a3089 a3089 f 28 30
32:	

qtest$8:	; post call
34:	

qtest$9:	; return
35:		mov t3090, [bp]
36:		mov di, [bp + 4]
37:		mov bp, [bp + 2]
38:		jmp t3090
40:	

qtest$10:	; function end qtest
1:	

stdlib_testZ:	; call header integral zero 0 stack zero 0
3:	

stdlib_testZ$1:	; parameter string_hello3A2025u0A#, offset 6
4:		mov word [bp + 12], string_hello3A2025u0A#
6:	

stdlib_testZ$2:	; £temporary5955 = int_to_int hello (Function -> Unsigned_Int)
7:		mov a3091, hello
10:	

stdlib_testZ$3:	; parameter £temporary5955, offset 8
11:		mov [bp + 14], a3091
13:	

stdlib_testZ$4:	; call function noellipse-ellipse printf, extra 0
14:		mov word [bp + 6], stdlib_testZ$5
15:		mov [bp + 8], bp
16:		add bp, 6
17:		mov di, bp
18:		add di, 2
19:		jmp printf
21:	

stdlib_testZ$5:	; post call
23:	

stdlib_testZ$6:	; call header integral zero 0 stack zero 0
25:	

stdlib_testZ$7:	; parameter hello, offset 6
26:		mov word [bp + 12], hello
28:	

stdlib_testZ$8:	; call function noellipse-noellipse qtest
29:		mov word [bp + 6], stdlib_testZ$9
30:		mov [bp + 8], bp
31:		add bp, 6
32:		jmp qtest
34:	

stdlib_testZ$9:	; post call
36:	

stdlib_testZ$10:	; call header integral zero 0 stack zero 0
38:	

stdlib_testZ$11:	; parameter string_Y#, offset 6
39:		mov word [bp + 12], string_Y#
41:	

stdlib_testZ$12:	; call function noellipse-ellipse printf, extra 0
42:		mov word [bp + 6], stdlib_testZ$13
43:		mov [bp + 8], bp
44:		add bp, 6
45:		mov di, bp
46:		jmp printf
48:	

stdlib_testZ$13:	; post call
50:	

stdlib_testZ$14:	; return
51:		mov t3092, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp t3092
56:	

stdlib_testZ$15:	; function end stdlib_testZ
1:	

stdlib_test:	; call header integral zero 0 stack zero 0
3:	

stdlib_test$1:	; parameter string_atof28221232E4562229203D2025f0A#, offset 6
4:		mov word [bp + 14], string_atof28221232E4562229203D2025f0A#
6:	

stdlib_test$2:	; call header integral zero 0 stack zero 0
8:	

stdlib_test$3:	; parameter string_1232E456#, offset 14
9:		mov word [bp + 22], string_1232E456#
11:	

stdlib_test$4:	; call function noellipse-noellipse atof
12:		mov word [bp + 16], stdlib_test$5
13:		mov [bp + 18], bp
14:		add bp, 16
15:		jmp atof
17:	

stdlib_test$5:	; post call
19:	

stdlib_test$6:	; £temporary5963 = return_value
21:	

stdlib_test$7:	; parameter £temporary5963, offset 8
22:		fstp qword [bp + 16]
24:	

stdlib_test$8:	; call function noellipse-ellipse printf, extra 0
25:		mov word [bp + 8], stdlib_test$9
26:		mov [bp + 10], bp
27:		add bp, 8
28:		mov di, bp
29:		add di, 8
30:		jmp printf
32:	

stdlib_test$9:	; post call
34:	

stdlib_test$10:	; call header integral zero 0 stack zero 0
36:	

stdlib_test$11:	; parameter string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#, offset 6
37:		mov word [bp + 14], string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#
39:	

stdlib_test$12:	; call header integral zero 0 stack zero 0
41:	

stdlib_test$13:	; parameter string_1232E456789abc#, offset 14
42:		mov word [bp + 22], string_1232E456789abc#
44:	

stdlib_test$14:	; £temporary5965 = &p
45:		mov t3093, bp
46:		add t3093, 6
48:	

stdlib_test$15:	; parameter £temporary5965, offset 16
49:		mov [bp + 24], t3093
51:	

stdlib_test$16:	; call function noellipse-noellipse strtod
52:		mov word [bp + 16], stdlib_test$17
53:		mov [bp + 18], bp
54:		add bp, 16
55:		jmp strtod
57:	

stdlib_test$17:	; post call
59:	

stdlib_test$18:	; £temporary5966 = return_value
61:	

stdlib_test$19:	; parameter £temporary5966, offset 8
62:		fstp qword [bp + 16]
64:	

stdlib_test$20:	; parameter p, offset 16
65:		mov a3094, [bp + 6]
66:		mov [bp + 24], a3094
68:	

stdlib_test$21:	; call function noellipse-ellipse printf, extra 0
69:		mov word [bp + 8], stdlib_test$22
70:		mov [bp + 10], bp
71:		add bp, 8
72:		mov di, bp
73:		add di, 10
74:		jmp printf
76:	

stdlib_test$22:	; post call
78:	

stdlib_test$23:	; call header integral zero 0 stack zero 0
80:	

stdlib_test$24:	; parameter string_0Agetenv2822path2229203D2025s0A#, offset 6
81:		mov word [bp + 12], string_0Agetenv2822path2229203D2025s0A#
83:	

stdlib_test$25:	; call header integral zero 0 stack zero 0
85:	

stdlib_test$26:	; parameter string_path#, offset 14
86:		mov word [bp + 20], string_path#
88:	

stdlib_test$27:	; call function noellipse-noellipse getenv
89:		mov word [bp + 14], stdlib_test$28
90:		mov [bp + 16], bp
91:		add bp, 14
92:		jmp getenv
94:	

stdlib_test$28:	; post call
96:	

stdlib_test$29:	; £temporary5968 = return_value
101:	

stdlib_test$30:	; parameter £temporary5968, offset 8
102:		mov [bp + 14], t3096
104:	

stdlib_test$31:	; call function noellipse-ellipse printf, extra 0
105:		mov word [bp + 6], stdlib_test$32
106:		mov [bp + 8], bp
107:		add bp, 6
108:		mov di, bp
109:		add di, 2
110:		jmp printf
112:	

stdlib_test$32:	; post call
114:	

stdlib_test$33:	; call header integral zero 0 stack zero 0
116:	

stdlib_test$34:	; parameter string_system2822dir22290A#, offset 6
117:		mov word [bp + 12], string_system2822dir22290A#
119:	

stdlib_test$35:	; call function noellipse-ellipse printf, extra 0
120:		mov word [bp + 6], stdlib_test$36
121:		mov [bp + 8], bp
122:		add bp, 6
123:		mov di, bp
124:		jmp printf
126:	

stdlib_test$36:	; post call
128:	

stdlib_test$37:	; call header integral zero 0 stack zero 0
130:	

stdlib_test$38:	; parameter string_dir#, offset 6
131:		mov word [bp + 12], string_dir#
133:	

stdlib_test$39:	; call function noellipse-noellipse system
134:		mov word [bp + 6], stdlib_test$40
135:		mov [bp + 8], bp
136:		add bp, 6
137:		jmp system
139:	

stdlib_test$40:	; post call
141:	

stdlib_test$41:	; call header integral zero 0 stack zero 0
143:	

stdlib_test$42:	; parameter string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#, offset 6
144:		mov word [bp + 12], string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#
146:	

stdlib_test$43:	; call header integral zero 0 stack zero 0
148:	

stdlib_test$44:	; parameter -3, offset 14
149:		mov word [bp + 20], -3
151:	

stdlib_test$45:	; call function noellipse-noellipse _abs
152:		mov word [bp + 14], stdlib_test$46
153:		mov [bp + 16], bp
154:		add bp, 14
155:		jmp _abs
157:	

stdlib_test$46:	; post call
159:	

stdlib_test$47:	; £temporary5972 = return_value
164:	

stdlib_test$48:	; parameter £temporary5972, offset 8
165:		mov [bp + 14], t3098
167:	

stdlib_test$49:	; call header integral zero 0 stack zero 0
169:	

stdlib_test$50:	; parameter 3, offset 16
170:		mov word [bp + 22], 3
172:	

stdlib_test$51:	; call function noellipse-noellipse _abs
173:		mov word [bp + 16], stdlib_test$52
174:		mov [bp + 18], bp
175:		add bp, 16
176:		jmp _abs
178:	

stdlib_test$52:	; post call
180:	

stdlib_test$53:	; £temporary5973 = return_value
185:	

stdlib_test$54:	; parameter £temporary5973, offset 10
186:		mov [bp + 16], t3100
188:	

stdlib_test$55:	; call function noellipse-ellipse printf, extra 0
189:		mov word [bp + 6], stdlib_test$56
190:		mov [bp + 8], bp
191:		add bp, 6
192:		mov di, bp
193:		add di, 4
194:		jmp printf
196:	

stdlib_test$56:	; post call
198:	

stdlib_test$57:	; call header integral zero 0 stack zero 0
200:	

stdlib_test$58:	; parameter string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#, offset 6
201:		mov word [bp + 12], string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#
203:	

stdlib_test$59:	; call header integral zero 0 stack zero 0
205:	

stdlib_test$60:	; parameter -3, offset 14
206:		mov dword [bp + 20], -3
208:	

stdlib_test$61:	; call function noellipse-noellipse labs
209:		mov word [bp + 14], stdlib_test$62
210:		mov [bp + 16], bp
211:		add bp, 14
212:		jmp labs
214:	

stdlib_test$62:	; post call
216:	

stdlib_test$63:	; £temporary5975 = return_value
221:	

stdlib_test$64:	; parameter £temporary5975, offset 8
222:		mov [bp + 14], t3102
224:	

stdlib_test$65:	; call header integral zero 0 stack zero 0
226:	

stdlib_test$66:	; parameter 3, offset 18
227:		mov dword [bp + 24], 3
229:	

stdlib_test$67:	; call function noellipse-noellipse labs
230:		mov word [bp + 18], stdlib_test$68
231:		mov [bp + 20], bp
232:		add bp, 18
233:		jmp labs
235:	

stdlib_test$68:	; post call
237:	

stdlib_test$69:	; £temporary5976 = return_value
242:	

stdlib_test$70:	; parameter £temporary5976, offset 12
243:		mov [bp + 18], t3104
245:	

stdlib_test$71:	; call function noellipse-ellipse printf, extra 0
246:		mov word [bp + 6], stdlib_test$72
247:		mov [bp + 8], bp
248:		add bp, 6
249:		mov di, bp
250:		add di, 8
251:		jmp printf
253:	

stdlib_test$72:	; post call
255:	

stdlib_test$73:	; call header integral zero 0 stack zero 0
257:	

stdlib_test$74:	; parameter 10, offset 6
258:		mov word [bp + 12], 10
260:	

stdlib_test$75:	; parameter 3, offset 8
261:		mov word [bp + 14], 3
263:	

stdlib_test$76:	; call function noellipse-noellipse div
264:		mov word [bp + 6], stdlib_test$77
265:		mov [bp + 8], bp
266:		add bp, 6
267:		jmp div
269:	

stdlib_test$77:	; post call
271:	

stdlib_test$78:	; £temporary5978 -> £temporary5979 = return_value
273:	

stdlib_test$79:	; i = £temporary5978 -> £temporary5979
274:		mov t3106, bp
275:		add t3106, 6
276:		mov t3107, 4
277:	

stdlib_test$79$Loop:
278:		mov t3108, [t3105]
279:		mov [t3106], t3108
280:		inc t3105
281:		inc t3106
282:		dec t3107
283:		cmp t3107, 0
284:		jne stdlib_test$79$Loop
286:	

stdlib_test$80:	; call header integral zero 0 stack zero 0
288:	

stdlib_test$81:	; parameter string_div_t28102C20329203D202825i2C2025i290A#, offset 6
289:		mov word [bp + 16], string_div_t28102C20329203D202825i2C2025i290A#
291:	

stdlib_test$82:	; parameter i$quot, offset 8
292:		mov a3109, [bp + 6]
293:		mov [bp + 18], a3109
295:	

stdlib_test$83:	; parameter i$rem, offset 10
296:		mov a3110, [bp + 8]
297:		mov [bp + 20], a3110
299:	

stdlib_test$84:	; call function noellipse-ellipse printf, extra 0
300:		mov word [bp + 10], stdlib_test$85
301:		mov [bp + 12], bp
302:		add bp, 10
303:		mov di, bp
304:		add di, 4
305:		jmp printf
307:	

stdlib_test$85:	; post call
309:	

stdlib_test$86:	; call header integral zero 0 stack zero 0
311:	

stdlib_test$87:	; parameter i, offset 6
312:		mov t3111, bp
313:		add t3111, 6
314:		mov t3112, bp
315:		add t3112, 16
316:		mov t3113, 4
317:	

stdlib_test$87$Loop:
318:		mov t3114, [t3111]
319:		mov [t3112], t3114
320:		inc t3111
321:		inc t3112
322:		dec t3113
323:		cmp t3113, 0
324:		jne stdlib_test$87$Loop
326:	

stdlib_test$88:	; call function noellipse-noellipse print_div
327:		mov word [bp + 10], stdlib_test$89
328:		mov [bp + 12], bp
329:		add bp, 10
330:		jmp print_div
332:	

stdlib_test$89:	; post call
334:	

stdlib_test$90:	; £temporary5983 -> £temporary5984 = return_value
336:	

stdlib_test$91:	; j = £temporary5983 -> £temporary5984
337:		mov t3116, bp
338:		add t3116, 10
339:		mov t3117, 4
340:	

stdlib_test$91$Loop:
341:		mov t3118, [t3115]
342:		mov [t3116], t3118
343:		inc t3115
344:		inc t3116
345:		dec t3117
346:		cmp t3117, 0
347:		jne stdlib_test$91$Loop
349:	

stdlib_test$92:	; call header integral zero 0 stack zero 0
351:	

stdlib_test$93:	; parameter string_div_t28102C20329203D202825i2C2025i290A0A#, offset 6
352:		mov word [bp + 20], string_div_t28102C20329203D202825i2C2025i290A0A#
354:	

stdlib_test$94:	; parameter j$quot, offset 8
355:		mov a3119, [bp + 10]
356:		mov [bp + 22], a3119
358:	

stdlib_test$95:	; parameter j$rem, offset 10
359:		mov a3120, [bp + 12]
360:		mov [bp + 24], a3120
362:	

stdlib_test$96:	; call function noellipse-ellipse printf, extra 0
363:		mov word [bp + 14], stdlib_test$97
364:		mov [bp + 16], bp
365:		add bp, 14
366:		mov di, bp
367:		add di, 4
368:		jmp printf
370:	

stdlib_test$97:	; post call
372:	

stdlib_test$98:	; call header integral zero 0 stack zero 0
374:	

stdlib_test$99:	; parameter 10, offset 6
375:		mov dword [bp + 12], 10
377:	

stdlib_test$100:	; parameter 3, offset 10
378:		mov dword [bp + 16], 3
380:	

stdlib_test$101:	; call function noellipse-noellipse ldiv
381:		mov word [bp + 6], stdlib_test$102
382:		mov [bp + 8], bp
383:		add bp, 6
384:		jmp ldiv
386:	

stdlib_test$102:	; post call
388:	

stdlib_test$103:	; £temporary5988 -> £temporary5989 = return_value
390:	

stdlib_test$104:	; li = £temporary5988 -> £temporary5989
391:		mov t3122, bp
392:		add t3122, 6
393:		mov t3123, 8
394:	

stdlib_test$104$Loop:
395:		mov t3124, [t3121]
396:		mov [t3122], t3124
397:		inc t3121
398:		inc t3122
399:		dec t3123
400:		cmp t3123, 0
401:		jne stdlib_test$104$Loop
403:	

stdlib_test$105:	; call header integral zero 0 stack zero 0
405:	

stdlib_test$106:	; parameter string_ldiv_t28102C20329203D202825li2C2025li290A#, offset 6
406:		mov word [bp + 20], string_ldiv_t28102C20329203D202825li2C2025li290A#
408:	

stdlib_test$107:	; parameter li$quot, offset 8
409:		mov a3125, [bp + 6]
410:		mov [bp + 22], a3125
412:	

stdlib_test$108:	; parameter li$rem, offset 12
413:		mov a3126, [bp + 10]
414:		mov [bp + 26], a3126
416:	

stdlib_test$109:	; call function noellipse-ellipse printf, extra 0
417:		mov word [bp + 14], stdlib_test$110
418:		mov [bp + 16], bp
419:		add bp, 14
420:		mov di, bp
421:		add di, 8
422:		jmp printf
424:	

stdlib_test$110:	; post call
426:	

stdlib_test$111:	; call header integral zero 0 stack zero 0
428:	

stdlib_test$112:	; parameter li, offset 6
429:		mov t3127, bp
430:		add t3127, 6
431:		mov t3128, bp
432:		add t3128, 20
433:		mov t3129, 8
434:	

stdlib_test$112$Loop:
435:		mov t3130, [t3127]
436:		mov [t3128], t3130
437:		inc t3127
438:		inc t3128
439:		dec t3129
440:		cmp t3129, 0
441:		jne stdlib_test$112$Loop
443:	

stdlib_test$113:	; call function noellipse-noellipse print_ldiv
444:		mov word [bp + 14], stdlib_test$114
445:		mov [bp + 16], bp
446:		add bp, 14
447:		jmp print_ldiv
449:	

stdlib_test$114:	; post call
451:	

stdlib_test$115:	; £temporary5993 -> £temporary5994 = return_value
453:	

stdlib_test$116:	; lj = £temporary5993 -> £temporary5994
454:		mov t3132, bp
455:		add t3132, 14
456:		mov t3133, 8
457:	

stdlib_test$116$Loop:
458:		mov t3134, [t3131]
459:		mov [t3132], t3134
460:		inc t3131
461:		inc t3132
462:		dec t3133
463:		cmp t3133, 0
464:		jne stdlib_test$116$Loop
466:	

stdlib_test$117:	; call header integral zero 0 stack zero 0
468:	

stdlib_test$118:	; parameter string_ldiv_t28102C20329203D202825li2C2025li290A0A#, offset 6
469:		mov word [bp + 28], string_ldiv_t28102C20329203D202825li2C2025li290A0A#
471:	

stdlib_test$119:	; parameter lj$quot, offset 8
472:		mov a3135, [bp + 14]
473:		mov [bp + 30], a3135
475:	

stdlib_test$120:	; parameter lj$rem, offset 12
476:		mov a3136, [bp + 18]
477:		mov [bp + 34], a3136
479:	

stdlib_test$121:	; call function noellipse-ellipse printf, extra 0
480:		mov word [bp + 22], stdlib_test$122
481:		mov [bp + 24], bp
482:		add bp, 22
483:		mov di, bp
484:		add di, 8
485:		jmp printf
487:	

stdlib_test$122:	; post call
489:	

stdlib_test$123:	; list[0] = 3
490:		mov word [bp + 6], 3
492:	

stdlib_test$124:	; list[1] = 4
493:		mov word [bp + 8], 4
495:	

stdlib_test$125:	; list[2] = 2
496:		mov word [bp + 10], 2
498:	

stdlib_test$126:	; list[3] = 1
499:		mov word [bp + 12], 1
501:	

stdlib_test$127:	; size = 4
502:		mov word [bp + 14], 4
504:	

stdlib_test$128:	; call header integral zero 0 stack zero 0
506:	

stdlib_test$129:	; parameter string_0AA20List2013A20#, offset 6
507:		mov word [bp + 24], string_0AA20List2013A20#
509:	

stdlib_test$130:	; call function noellipse-ellipse printf, extra 0
510:		mov word [bp + 18], stdlib_test$131
511:		mov [bp + 20], bp
512:		add bp, 18
513:		mov di, bp
514:		jmp printf
516:	

stdlib_test$131:	; post call
518:	

stdlib_test$132:	; index = 0
519:		mov word [bp + 16], 0
521:	

stdlib_test$133:	; if index >= size goto 144
522:		mov a3137, [bp + 14]
523:		cmp [bp + 16], a3137
524:		jge stdlib_test$144
526:	

stdlib_test$134:	; call header integral zero 0 stack zero 0
528:	

stdlib_test$135:	; parameter string_25i20#, offset 6
529:		mov word [bp + 24], string_25i20#
531:	

stdlib_test$136:	; £temporary6006 = index * 2
532:		mov a3138, [bp + 16]
534:		xor dx, dx
535:		mul word [int2$2#]
541:	

stdlib_test$137:	; £temporary6007 = list + £temporary6006
542:		mov a3142, bp
543:		add a3142, 6
544:		add a3142, t3141
546:	

stdlib_test$138:	; £temporary6008 -> £temporary6007 = *£temporary6007
548:	

stdlib_test$139:	; parameter £temporary6008 -> £temporary6007, offset 8
549:		mov t3143, [a3142]
550:		mov [bp + 26], t3143
552:	

stdlib_test$140:	; call function noellipse-ellipse printf, extra 0
553:		mov word [bp + 18], stdlib_test$141
554:		mov [bp + 20], bp
555:		add bp, 18
556:		mov di, bp
557:		add di, 2
558:		jmp printf
560:	

stdlib_test$141:	; post call
562:	

stdlib_test$142:	; ++index
563:		inc word [bp + 16]
565:	

stdlib_test$143:	; goto 133
566:		jmp stdlib_test$133
568:	

stdlib_test$144:	; call header integral zero 0 stack zero 0
570:	

stdlib_test$145:	; parameter string_0AB20List2023A20#, offset 6
571:		mov word [bp + 24], string_0AB20List2023A20#
573:	

stdlib_test$146:	; call function noellipse-ellipse printf, extra 0
574:		mov word [bp + 18], stdlib_test$147
575:		mov [bp + 20], bp
576:		add bp, 18
577:		mov di, bp
578:		jmp printf
580:	

stdlib_test$147:	; post call
582:	

stdlib_test$148:	; call header integral zero 0 stack zero 0
584:	

stdlib_test$149:	; parameter list, offset 6
585:		mov [bp + 24], bp
586:		add word [bp + 24], 6
588:	

stdlib_test$150:	; parameter size, offset 8
589:		mov a3144, [bp + 14]
590:		mov [bp + 26], a3144
592:	

stdlib_test$151:	; parameter 2, offset 10
593:		mov word [bp + 28], 2
595:	

stdlib_test$152:	; parameter compare, offset 12
596:		mov word [bp + 30], compare
598:	

stdlib_test$153:	; call function noellipse-noellipse qsort
599:		mov word [bp + 18], stdlib_test$154
600:		mov [bp + 20], bp
601:		add bp, 18
602:		jmp qsort
604:	

stdlib_test$154:	; post call
606:	

stdlib_test$155:	; index = 0
607:		mov word [bp + 16], 0
609:	

stdlib_test$156:	; if index >= size goto 167
610:		mov a3145, [bp + 14]
611:		cmp [bp + 16], a3145
612:		jge stdlib_test$167
614:	

stdlib_test$157:	; call header integral zero 0 stack zero 0
616:	

stdlib_test$158:	; parameter string_25i20#, offset 6
617:		mov word [bp + 24], string_25i20#
619:	

stdlib_test$159:	; £temporary6015 = index * 2
620:		mov a3146, [bp + 16]
622:		xor dx, dx
623:		mul word [int2$2#]
629:	

stdlib_test$160:	; £temporary6016 = list + £temporary6015
630:		mov a3150, bp
631:		add a3150, 6
632:		add a3150, t3149
634:	

stdlib_test$161:	; £temporary6017 -> £temporary6016 = *£temporary6016
636:	

stdlib_test$162:	; parameter £temporary6017 -> £temporary6016, offset 8
637:		mov t3151, [a3150]
638:		mov [bp + 26], t3151
640:	

stdlib_test$163:	; call function noellipse-ellipse printf, extra 0
641:		mov word [bp + 18], stdlib_test$164
642:		mov [bp + 20], bp
643:		add bp, 18
644:		mov di, bp
645:		add di, 2
646:		jmp printf
648:	

stdlib_test$164:	; post call
650:	

stdlib_test$165:	; ++index
651:		inc word [bp + 16]
653:	

stdlib_test$166:	; goto 156
654:		jmp stdlib_test$156
656:	

stdlib_test$167:	; call header integral zero 0 stack zero 0
658:	

stdlib_test$168:	; parameter string_0AC20List2033A20#, offset 6
659:		mov word [bp + 24], string_0AC20List2033A20#
661:	

stdlib_test$169:	; call function noellipse-ellipse printf, extra 0
662:		mov word [bp + 18], stdlib_test$170
663:		mov [bp + 20], bp
664:		add bp, 18
665:		mov di, bp
666:		jmp printf
668:	

stdlib_test$170:	; post call
670:	

stdlib_test$171:	; call header integral zero 0 stack zero 0
672:	

stdlib_test$172:	; parameter list, offset 6
673:		mov [bp + 24], bp
674:		add word [bp + 24], 6
676:	

stdlib_test$173:	; parameter size, offset 8
677:		mov a3152, [bp + 14]
678:		mov [bp + 26], a3152
680:	

stdlib_test$174:	; parameter 2, offset 10
681:		mov word [bp + 28], 2
683:	

stdlib_test$175:	; parameter reverse_compare, offset 12
684:		mov word [bp + 30], reverse_compare
686:	

stdlib_test$176:	; call function noellipse-noellipse qsort
687:		mov word [bp + 18], stdlib_test$177
688:		mov [bp + 20], bp
689:		add bp, 18
690:		jmp qsort
692:	

stdlib_test$177:	; post call
694:	

stdlib_test$178:	; index = 0
695:		mov word [bp + 16], 0
697:	

stdlib_test$179:	; if index >= size goto 190
698:		mov a3153, [bp + 14]
699:		cmp [bp + 16], a3153
700:		jge stdlib_test$190
702:	

stdlib_test$180:	; call header integral zero 0 stack zero 0
704:	

stdlib_test$181:	; parameter string_25i20#, offset 6
705:		mov word [bp + 24], string_25i20#
707:	

stdlib_test$182:	; £temporary6024 = index * 2
708:		mov a3154, [bp + 16]
710:		xor dx, dx
711:		mul word [int2$2#]
717:	

stdlib_test$183:	; £temporary6025 = list + £temporary6024
718:		mov a3158, bp
719:		add a3158, 6
720:		add a3158, t3157
722:	

stdlib_test$184:	; £temporary6026 -> £temporary6025 = *£temporary6025
724:	

stdlib_test$185:	; parameter £temporary6026 -> £temporary6025, offset 8
725:		mov t3159, [a3158]
726:		mov [bp + 26], t3159
728:	

stdlib_test$186:	; call function noellipse-ellipse printf, extra 0
729:		mov word [bp + 18], stdlib_test$187
730:		mov [bp + 20], bp
731:		add bp, 18
732:		mov di, bp
733:		add di, 2
734:		jmp printf
736:	

stdlib_test$187:	; post call
738:	

stdlib_test$188:	; ++index
739:		inc word [bp + 16]
741:	

stdlib_test$189:	; goto 179
742:		jmp stdlib_test$179
744:	

stdlib_test$190:	; call header integral zero 0 stack zero 0
746:	

stdlib_test$191:	; parameter string_0A0ASearch3A0A#, offset 6
747:		mov word [bp + 24], string_0A0ASearch3A0A#
749:	

stdlib_test$192:	; call function noellipse-ellipse printf, extra 0
750:		mov word [bp + 18], stdlib_test$193
751:		mov [bp + 20], bp
752:		add bp, 18
753:		mov di, bp
754:		jmp printf
756:	

stdlib_test$193:	; post call
758:	

stdlib_test$194:	; key = 0
759:		mov word [bp + 16], 0
761:	

stdlib_test$195:	; if key >= 6 goto 222
762:		cmp word [bp + 16], 6
763:		jge stdlib_test$222
765:	

stdlib_test$196:	; call header integral zero 0 stack zero 0
767:	

stdlib_test$197:	; £temporary6031 = &key
768:		mov t3160, bp
769:		add t3160, 16
771:	

stdlib_test$198:	; parameter £temporary6031, offset 6
772:		mov [bp + 24], t3160
774:	

stdlib_test$199:	; parameter list, offset 8
775:		mov [bp + 26], bp
776:		add word [bp + 26], 6
778:	

stdlib_test$200:	; parameter size, offset 10
779:		mov a3161, [bp + 14]
780:		mov [bp + 28], a3161
782:	

stdlib_test$201:	; parameter 2, offset 12
783:		mov word [bp + 30], 2
785:	

stdlib_test$202:	; parameter compare, offset 14
786:		mov word [bp + 32], compare
788:	

stdlib_test$203:	; call function noellipse-noellipse bsearch
789:		mov word [bp + 18], stdlib_test$204
790:		mov [bp + 20], bp
791:		add bp, 18
792:		jmp bsearch
794:	

stdlib_test$204:	; post call
796:	

stdlib_test$205:	; £temporary6033 = return_value
801:	

stdlib_test$206:	; £temporary6034 = int_to_int £temporary6033 (Pointer -> Pointer)
804:	

stdlib_test$207:	; p = £temporary6034
805:		mov [bp + 18], t3163
807:	

stdlib_test$208:	; if p == 0 goto 212
808:		cmp word [bp + 18], 0
809:		je stdlib_test$212
811:	

stdlib_test$209:	; £temporary6036 = p - list
812:		mov a3164, [bp + 18]
813:		mov a3165, bp
814:		add a3165, 6
815:		sub a3164, a3165
817:	

stdlib_test$210:	; £temporary6041 = £temporary6036 / 2
819:		xor dx, dx
820:		div word [int2$2#]
826:	

stdlib_test$211:	; goto 213
827:		jmp stdlib_test$213
829:	

stdlib_test$212:	; £temporary6041 = -1
830:		mov t3169, -1
832:	

stdlib_test$213:	; index = £temporary6041
833:		mov [bp + 20], t3169
835:	

stdlib_test$214:	; call header integral zero 0 stack zero 0
837:	

stdlib_test$215:	; parameter string_20202825i2C2025i290A#, offset 6
838:		mov word [bp + 28], string_20202825i2C2025i290A#
840:	

stdlib_test$216:	; parameter key, offset 8
841:		mov a3170, [bp + 16]
842:		mov [bp + 30], a3170
844:	

stdlib_test$217:	; parameter index, offset 10
845:		mov a3171, [bp + 20]
846:		mov [bp + 32], a3171
848:	

stdlib_test$218:	; call function noellipse-ellipse printf, extra 0
849:		mov word [bp + 22], stdlib_test$219
850:		mov [bp + 24], bp
851:		add bp, 22
852:		mov di, bp
853:		add di, 4
854:		jmp printf
856:	

stdlib_test$219:	; post call
858:	

stdlib_test$220:	; ++key
859:		inc word [bp + 16]
861:	

stdlib_test$221:	; goto 195
862:		jmp stdlib_test$195
864:	

stdlib_test$222:	; call header integral zero 0 stack zero 0
866:	

stdlib_test$223:	; parameter string_0A#, offset 6
867:		mov word [bp + 22], string_0A#
869:	

stdlib_test$224:	; call function noellipse-ellipse printf, extra 0
870:		mov word [bp + 16], stdlib_test$225
871:		mov [bp + 18], bp
872:		add bp, 16
873:		mov di, bp
874:		jmp printf
876:	

stdlib_test$225:	; post call
878:	

stdlib_test$226:	; return
879:		mov t3172, [bp]
880:		mov di, [bp + 4]
881:		mov bp, [bp + 2]
882:		jmp t3172
884:	

stdlib_test$227:	; function end stdlib_test
