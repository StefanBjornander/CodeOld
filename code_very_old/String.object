1:	

strcpy:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; £temporary3060 = source + index
5:		mov si, [bp + 8]
6:		add si, [bp + 10]
8:	

strcpy$2:	; £temporary3059 -> £temporary3060 = *£temporary3060
10:	

strcpy$3:	; if £temporary3059 -> £temporary3060 == 0 goto 11
11:		cmp byte [si], 0
12:		je strcpy$11
14:	

strcpy$4:	; £temporary3064 = target + index
15:		mov si, [bp + 6]
16:		add si, [bp + 10]
18:	

strcpy$5:	; £temporary3063 -> £temporary3064 = *£temporary3064
20:	

strcpy$6:	; £temporary3066 = source + index
21:		mov di, [bp + 8]
22:		add di, [bp + 10]
24:	

strcpy$7:	; £temporary3065 -> £temporary3066 = *£temporary3066
26:	

strcpy$8:	; £temporary3063 -> £temporary3064 = £temporary3065 -> £temporary3066
27:		mov al, [di]
28:		mov [si], al
30:	

strcpy$9:	; ++index
31:		inc word [bp + 10]
33:	

strcpy$10:	; goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; £temporary3068 = target + index
37:		mov si, [bp + 6]
38:		add si, [bp + 10]
40:	

strcpy$12:	; £temporary3067 -> £temporary3068 = *£temporary3068
42:	

strcpy$13:	; £temporary3067 -> £temporary3068 = 0
43:		mov byte [si], 0
45:	

strcpy$14:	; return_value = target
46:		mov bx, [bp + 6]
48:	

strcpy$15:	; return
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

strcpy$16:	; function end strcpy
1:	

strncpy:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; if index >= size goto 12
5:		mov ax, [bp + 10]
6:		cmp [bp + 12], ax
7:		jge strncpy$12
9:	

strncpy$2:	; £temporary3071 = source + index
10:		mov si, [bp + 8]
11:		add si, [bp + 12]
13:	

strncpy$3:	; £temporary3070 -> £temporary3071 = *£temporary3071
15:	

strncpy$4:	; if £temporary3070 -> £temporary3071 == 0 goto 12
16:		cmp byte [si], 0
17:		je strncpy$12
19:	

strncpy$5:	; £temporary3076 = target + index
20:		mov si, [bp + 6]
21:		add si, [bp + 12]
23:	

strncpy$6:	; £temporary3075 -> £temporary3076 = *£temporary3076
25:	

strncpy$7:	; £temporary3078 = source + index
26:		mov di, [bp + 8]
27:		add di, [bp + 12]
29:	

strncpy$8:	; £temporary3077 -> £temporary3078 = *£temporary3078
31:	

strncpy$9:	; £temporary3075 -> £temporary3076 = £temporary3077 -> £temporary3078
32:		mov al, [di]
33:		mov [si], al
35:	

strncpy$10:	; ++index
36:		inc word [bp + 12]
38:	

strncpy$11:	; goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; if index >= size goto 18
42:		mov ax, [bp + 10]
43:		cmp [bp + 12], ax
44:		jge strncpy$18
46:	

strncpy$13:	; £temporary3082 = target + index
47:		mov si, [bp + 6]
48:		add si, [bp + 12]
50:	

strncpy$14:	; £temporary3081 -> £temporary3082 = *£temporary3082
52:	

strncpy$15:	; £temporary3081 -> £temporary3082 = 0
53:		mov byte [si], 0
55:	

strncpy$16:	; ++index
56:		inc word [bp + 12]
58:	

strncpy$17:	; goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; return_value = target
62:		mov bx, [bp + 6]
64:	

strncpy$19:	; return
65:		mov ax, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp ax
70:	

strncpy$20:	; function end strncpy
1:	

strcat:	; call header integral zero 0 stack zero 0
3:	

strcat$1:	; parameter target, offset 6
4:		mov ax, [bp + 6]
5:		mov [bp + 18], ax
7:	

strcat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; post call
15:	

strcat$4:	; £temporary3083 = return_value
20:	

strcat$5:	; targetLength = £temporary3083
21:		mov [bp + 12], bx
23:	

strcat$6:	; index = 0
24:		mov word [bp + 10], 0
26:	

strcat$7:	; £temporary3085 = source + index
27:		mov si, [bp + 8]
28:		add si, [bp + 10]
30:	

strcat$8:	; £temporary3084 -> £temporary3085 = *£temporary3085
32:	

strcat$9:	; if £temporary3084 -> £temporary3085 == 0 goto 18
33:		cmp byte [si], 0
34:		je strcat$18
36:	

strcat$10:	; £temporary3088 = targetLength + index
37:		mov ax, [bp + 12]
38:		add ax, [bp + 10]
40:	

strcat$11:	; £temporary3090 = target + £temporary3088
41:		mov si, [bp + 6]
42:		add si, ax
44:	

strcat$12:	; £temporary3089 -> £temporary3090 = *£temporary3090
46:	

strcat$13:	; £temporary3092 = source + index
47:		mov di, [bp + 8]
48:		add di, [bp + 10]
50:	

strcat$14:	; £temporary3091 -> £temporary3092 = *£temporary3092
52:	

strcat$15:	; £temporary3089 -> £temporary3090 = £temporary3091 -> £temporary3092
53:		mov al, [di]
54:		mov [si], al
56:	

strcat$16:	; ++index
57:		inc word [bp + 10]
59:	

strcat$17:	; goto 7
60:		jmp strcat$7
62:	

strcat$18:	; £temporary3093 = targetLength + index
63:		mov ax, [bp + 12]
64:		add ax, [bp + 10]
66:	

strcat$19:	; £temporary3095 = target + £temporary3093
67:		mov si, [bp + 6]
68:		add si, ax
70:	

strcat$20:	; £temporary3094 -> £temporary3095 = *£temporary3095
72:	

strcat$21:	; £temporary3094 -> £temporary3095 = 0
73:		mov byte [si], 0
75:	

strcat$22:	; return_value = target
76:		mov bx, [bp + 6]
78:	

strcat$23:	; return
79:		mov ax, [bp]
80:		mov di, [bp + 4]
81:		mov bp, [bp + 2]
82:		jmp ax
84:	

strcat$24:	; function end strcat
1:	

strncat:	; call header integral zero 0 stack zero 0
3:	

strncat$1:	; parameter target, offset 6
4:		mov ax, [bp + 6]
5:		mov [bp + 20], ax
7:	

strncat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; post call
15:	

strncat$4:	; £temporary3097 = return_value
20:	

strncat$5:	; targetLength = £temporary3097
21:		mov [bp + 14], bx
23:	

strncat$6:	; index = 0
24:		mov word [bp + 12], 0
26:	

strncat$7:	; £temporary3098 = size - 1
27:		mov ax, [bp + 10]
28:		sub ax, 1
30:	

strncat$8:	; if index >= £temporary3098 goto 20
31:		cmp [bp + 12], ax
32:		jge strncat$20
34:	

strncat$9:	; £temporary3101 = source + index
35:		mov si, [bp + 8]
36:		add si, [bp + 12]
38:	

strncat$10:	; £temporary3100 -> £temporary3101 = *£temporary3101
40:	

strncat$11:	; if £temporary3100 -> £temporary3101 == 0 goto 20
41:		cmp byte [si], 0
42:		je strncat$20
44:	

strncat$12:	; £temporary3105 = targetLength + index
45:		mov ax, [bp + 14]
46:		add ax, [bp + 12]
48:	

strncat$13:	; £temporary3107 = target + £temporary3105
49:		mov si, [bp + 6]
50:		add si, ax
52:	

strncat$14:	; £temporary3106 -> £temporary3107 = *£temporary3107
54:	

strncat$15:	; £temporary3109 = source + index
55:		mov di, [bp + 8]
56:		add di, [bp + 12]
58:	

strncat$16:	; £temporary3108 -> £temporary3109 = *£temporary3109
60:	

strncat$17:	; £temporary3106 -> £temporary3107 = £temporary3108 -> £temporary3109
61:		mov al, [di]
62:		mov [si], al
64:	

strncat$18:	; ++index
65:		inc word [bp + 12]
67:	

strncat$19:	; goto 7
68:		jmp strncat$7
70:	

strncat$20:	; £temporary3110 = targetLength + size
71:		mov ax, [bp + 14]
72:		add ax, [bp + 10]
74:	

strncat$21:	; £temporary3111 = £temporary3110 - 1
75:		sub ax, 1
77:	

strncat$22:	; £temporary3113 = target + £temporary3111
78:		mov si, [bp + 6]
79:		add si, ax
81:	

strncat$23:	; £temporary3112 -> £temporary3113 = *£temporary3113
83:	

strncat$24:	; £temporary3112 -> £temporary3113 = 0
84:		mov byte [si], 0
86:	

strncat$25:	; return_value = target
87:		mov bx, [bp + 6]
89:	

strncat$26:	; return
90:		mov ax, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp ax
95:	

strncat$27:	; function end strncat
1:	

strcmp:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; £temporary3117 = left + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strcmp$2:	; £temporary3116 -> £temporary3117 = *£temporary3117
10:	

strcmp$3:	; if £temporary3116 -> £temporary3117 != 0 goto 9
11:		cmp byte [si], 0
12:		jne strcmp$9
14:	

strcmp$4:	; £temporary3120 = right + index
15:		mov si, [bp + 8]
16:		add si, [bp + 10]
18:	

strcmp$5:	; £temporary3119 -> £temporary3120 = *£temporary3120
20:	

strcmp$6:	; if £temporary3119 -> £temporary3120 != 0 goto 9
21:		cmp byte [si], 0
22:		jne strcmp$9
24:	

strcmp$7:	; return_value = 0
25:		mov bx, 0
27:	

strcmp$8:	; return
28:		mov ax, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp ax
33:	

strcmp$9:	; £temporary3124 = left + index
34:		mov si, [bp + 6]
35:		add si, [bp + 10]
37:	

strcmp$10:	; £temporary3123 -> £temporary3124 = *£temporary3124
39:	

strcmp$11:	; if £temporary3123 -> £temporary3124 != 0 goto 14
40:		cmp byte [si], 0
41:		jne strcmp$14
43:	

strcmp$12:	; return_value = -1
44:		mov bx, -1
46:	

strcmp$13:	; return
47:		mov ax, [bp]
48:		mov di, [bp + 4]
49:		mov bp, [bp + 2]
50:		jmp ax
52:	

strcmp$14:	; £temporary3127 = right + index
53:		mov si, [bp + 8]
54:		add si, [bp + 10]
56:	

strcmp$15:	; £temporary3126 -> £temporary3127 = *£temporary3127
58:	

strcmp$16:	; if £temporary3126 -> £temporary3127 != 0 goto 19
59:		cmp byte [si], 0
60:		jne strcmp$19
62:	

strcmp$17:	; return_value = 1
63:		mov bx, 1
65:	

strcmp$18:	; return
66:		mov ax, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp ax
71:	

strcmp$19:	; £temporary3130 = left + index
72:		mov si, [bp + 6]
73:		add si, [bp + 10]
75:	

strcmp$20:	; £temporary3129 -> £temporary3130 = *£temporary3130
77:	

strcmp$21:	; £temporary3132 = right + index
78:		mov di, [bp + 8]
79:		add di, [bp + 10]
81:	

strcmp$22:	; £temporary3131 -> £temporary3132 = *£temporary3132
83:	

strcmp$23:	; if £temporary3129 -> £temporary3130 >= £temporary3131 -> £temporary3132 goto 26
84:		mov al, [di]
85:		cmp [si], al
86:		jge strcmp$26
88:	

strcmp$24:	; return_value = -1
89:		mov bx, -1
91:	

strcmp$25:	; return
92:		mov ax, [bp]
93:		mov di, [bp + 4]
94:		mov bp, [bp + 2]
95:		jmp ax
97:	

strcmp$26:	; £temporary3135 = left + index
98:		mov si, [bp + 6]
99:		add si, [bp + 10]
101:	

strcmp$27:	; £temporary3134 -> £temporary3135 = *£temporary3135
103:	

strcmp$28:	; £temporary3137 = right + index
104:		mov di, [bp + 8]
105:		add di, [bp + 10]
107:	

strcmp$29:	; £temporary3136 -> £temporary3137 = *£temporary3137
109:	

strcmp$30:	; if £temporary3134 -> £temporary3135 <= £temporary3136 -> £temporary3137 goto 33
110:		mov al, [di]
111:		cmp [si], al
112:		jle strcmp$33
114:	

strcmp$31:	; return_value = 1
115:		mov bx, 1
117:	

strcmp$32:	; return
118:		mov ax, [bp]
119:		mov di, [bp + 4]
120:		mov bp, [bp + 2]
121:		jmp ax
123:	

strcmp$33:	; ++index
124:		inc word [bp + 10]
126:	

strcmp$34:	; goto 1
127:		jmp strcmp$1
129:	

strcmp$35:	; function end strcmp
1:	

strncmp:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; if index >= size goto 36
5:		mov ax, [bp + 10]
6:		cmp [bp + 12], ax
7:		jge strncmp$36
9:	

strncmp$2:	; £temporary3143 = left + index
10:		mov si, [bp + 6]
11:		add si, [bp + 12]
13:	

strncmp$3:	; £temporary3142 -> £temporary3143 = *£temporary3143
15:	

strncmp$4:	; if £temporary3142 -> £temporary3143 != 0 goto 10
16:		cmp byte [si], 0
17:		jne strncmp$10
19:	

strncmp$5:	; £temporary3146 = right + index
20:		mov si, [bp + 8]
21:		add si, [bp + 12]
23:	

strncmp$6:	; £temporary3145 -> £temporary3146 = *£temporary3146
25:	

strncmp$7:	; if £temporary3145 -> £temporary3146 != 0 goto 10
26:		cmp byte [si], 0
27:		jne strncmp$10
29:	

strncmp$8:	; return_value = 0
30:		mov bx, 0
32:	

strncmp$9:	; return
33:		mov ax, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp ax
38:	

strncmp$10:	; £temporary3150 = left + index
39:		mov si, [bp + 6]
40:		add si, [bp + 12]
42:	

strncmp$11:	; £temporary3149 -> £temporary3150 = *£temporary3150
44:	

strncmp$12:	; if £temporary3149 -> £temporary3150 != 0 goto 15
45:		cmp byte [si], 0
46:		jne strncmp$15
48:	

strncmp$13:	; return_value = -1
49:		mov bx, -1
51:	

strncmp$14:	; return
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

strncmp$15:	; £temporary3153 = right + index
58:		mov si, [bp + 8]
59:		add si, [bp + 12]
61:	

strncmp$16:	; £temporary3152 -> £temporary3153 = *£temporary3153
63:	

strncmp$17:	; if £temporary3152 -> £temporary3153 != 0 goto 20
64:		cmp byte [si], 0
65:		jne strncmp$20
67:	

strncmp$18:	; return_value = 1
68:		mov bx, 1
70:	

strncmp$19:	; return
71:		mov ax, [bp]
72:		mov di, [bp + 4]
73:		mov bp, [bp + 2]
74:		jmp ax
76:	

strncmp$20:	; £temporary3156 = left + index
77:		mov si, [bp + 6]
78:		add si, [bp + 12]
80:	

strncmp$21:	; £temporary3155 -> £temporary3156 = *£temporary3156
82:	

strncmp$22:	; £temporary3158 = right + index
83:		mov di, [bp + 8]
84:		add di, [bp + 12]
86:	

strncmp$23:	; £temporary3157 -> £temporary3158 = *£temporary3158
88:	

strncmp$24:	; if £temporary3155 -> £temporary3156 >= £temporary3157 -> £temporary3158 goto 27
89:		mov al, [di]
90:		cmp [si], al
91:		jge strncmp$27
93:	

strncmp$25:	; return_value = -1
94:		mov bx, -1
96:	

strncmp$26:	; return
97:		mov ax, [bp]
98:		mov di, [bp + 4]
99:		mov bp, [bp + 2]
100:		jmp ax
102:	

strncmp$27:	; £temporary3161 = left + index
103:		mov si, [bp + 6]
104:		add si, [bp + 12]
106:	

strncmp$28:	; £temporary3160 -> £temporary3161 = *£temporary3161
108:	

strncmp$29:	; £temporary3163 = right + index
109:		mov di, [bp + 8]
110:		add di, [bp + 12]
112:	

strncmp$30:	; £temporary3162 -> £temporary3163 = *£temporary3163
114:	

strncmp$31:	; if £temporary3160 -> £temporary3161 <= £temporary3162 -> £temporary3163 goto 34
115:		mov al, [di]
116:		cmp [si], al
117:		jle strncmp$34
119:	

strncmp$32:	; return_value = 1
120:		mov bx, 1
122:	

strncmp$33:	; return
123:		mov ax, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp ax
128:	

strncmp$34:	; ++index
129:		inc word [bp + 12]
131:	

strncmp$35:	; goto 1
132:		jmp strncmp$1
134:	

strncmp$36:	; return_value = 0
135:		mov bx, 0
137:	

strncmp$37:	; return
138:		mov ax, [bp]
139:		mov di, [bp + 4]
140:		mov bp, [bp + 2]
141:		jmp ax
143:	

strncmp$38:	; function end strncmp
1:	

strchr:	; £temporary3165 = int_to_int i (Signed_Int -> Signed_Char)
2:		mov ax, [bp + 8]
5:		cmp ax, 0
6:		jge strchr$1
7:		neg ax
9:		neg al
11:	

strchr$1:	; c = £temporary3165
12:		mov [bp + 12], al
14:	

strchr$2:	; index = 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; £temporary3167 = text + index
18:		mov si, [bp + 6]
19:		add si, [bp + 10]
21:	

strchr$4:	; £temporary3166 -> £temporary3167 = *£temporary3167
23:	

strchr$5:	; if £temporary3166 -> £temporary3167 == 0 goto 16
24:		cmp byte [si], 0
25:		je strchr$16
27:	

strchr$6:	; £temporary3171 = text + index
28:		mov si, [bp + 6]
29:		add si, [bp + 10]
31:	

strchr$7:	; £temporary3170 -> £temporary3171 = *£temporary3171
33:	

strchr$8:	; if £temporary3170 -> £temporary3171 != c goto 14
34:		mov al, [bp + 12]
35:		cmp [si], al
36:		jne strchr$14
38:	

strchr$9:	; £temporary3174 = text + index
39:		mov bx, [bp + 6]
40:		add bx, [bp + 10]
42:	

strchr$10:	; £temporary3173 -> £temporary3174 = *£temporary3174
44:	

strchr$11:	; £temporary3175 = &£temporary3173 -> £temporary3174
46:	

strchr$12:	; return_value = £temporary3175
48:	

strchr$13:	; return
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

strchr$14:	; ++index
55:		inc word [bp + 10]
57:	

strchr$15:	; goto 3
58:		jmp strchr$3
60:	

strchr$16:	; return_value = 0
61:		mov bx, 0
63:	

strchr$17:	; return
64:		mov ax, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp ax
69:	

strchr$18:	; function end strchr
1:	

strrchr:	; result = 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; £temporary3176 = int_to_int i (Signed_Int -> Signed_Char)
5:		mov ax, [bp + 8]
8:		cmp ax, 0
9:		jge strrchr$2
10:		neg ax
12:		neg al
14:	

strrchr$2:	; c = £temporary3176
15:		mov [bp + 14], al
17:	

strrchr$3:	; index = 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; £temporary3178 = text + index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strrchr$5:	; £temporary3177 -> £temporary3178 = *£temporary3178
26:	

strrchr$6:	; if £temporary3177 -> £temporary3178 == 0 goto 16
27:		cmp byte [si], 0
28:		je strrchr$16
30:	

strrchr$7:	; £temporary3182 = text + index
31:		mov si, [bp + 6]
32:		add si, [bp + 10]
34:	

strrchr$8:	; £temporary3181 -> £temporary3182 = *£temporary3182
36:	

strrchr$9:	; if £temporary3181 -> £temporary3182 != c goto 14
37:		mov al, [bp + 14]
38:		cmp [si], al
39:		jne strrchr$14
41:	

strrchr$10:	; £temporary3185 = text + index
42:		mov si, [bp + 6]
43:		add si, [bp + 10]
45:	

strrchr$11:	; £temporary3184 -> £temporary3185 = *£temporary3185
47:	

strrchr$12:	; £temporary3186 = &£temporary3184 -> £temporary3185
49:	

strrchr$13:	; result = £temporary3186
50:		mov [bp + 12], si
52:	

strrchr$14:	; ++index
53:		inc word [bp + 10]
55:	

strrchr$15:	; goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; return_value = result
59:		mov bx, [bp + 12]
61:	

strrchr$17:	; return
62:		mov ax, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp ax
67:	

strrchr$18:	; function end strrchr
1:	

strspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; £temporary3188 = mainString + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strspn$2:	; £temporary3187 -> £temporary3188 = *£temporary3188
10:	

strspn$3:	; if £temporary3187 -> £temporary3188 == 0 goto 18
11:		cmp byte [si], 0
12:		je strspn$18
14:	

strspn$4:	; call header integral zero 0 stack zero 0
16:	

strspn$5:	; parameter charSet, offset 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strspn$6:	; £temporary3192 = mainString + index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strspn$7:	; £temporary3191 -> £temporary3192 = *£temporary3192
26:	

strspn$8:	; £temporary3193 = int_to_int £temporary3191 -> £temporary3192 (Signed_Char -> Signed_Int)
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strspn$9
33:		neg al
35:		neg ax
37:	

strspn$9:	; parameter £temporary3193, offset 8
38:		mov [bp + 20], ax
40:	

strspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; post call
48:	

strspn$12:	; £temporary3194 = return_value
53:	

strspn$13:	; if £temporary3194 != 0 goto 16
54:		cmp bx, 0
55:		jne strspn$16
57:	

strspn$14:	; return_value = index
58:		mov bx, [bp + 10]
60:	

strspn$15:	; return
61:		mov ax, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp ax
66:	

strspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strspn$17:	; goto 1
70:		jmp strspn$1
72:	

strspn$18:	; return_value = -1
73:		mov bx, -1
75:	

strspn$19:	; return
76:		mov ax, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp ax
81:	

strspn$20:	; function end strspn
1:	

strcspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; £temporary3199 = mainString + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strcspn$2:	; £temporary3198 -> £temporary3199 = *£temporary3199
10:	

strcspn$3:	; if £temporary3198 -> £temporary3199 == 0 goto 18
11:		cmp byte [si], 0
12:		je strcspn$18
14:	

strcspn$4:	; call header integral zero 0 stack zero 0
16:	

strcspn$5:	; parameter charSet, offset 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strcspn$6:	; £temporary3203 = mainString + index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strcspn$7:	; £temporary3202 -> £temporary3203 = *£temporary3203
26:	

strcspn$8:	; £temporary3204 = int_to_int £temporary3202 -> £temporary3203 (Signed_Char -> Signed_Int)
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strcspn$9
33:		neg al
35:		neg ax
37:	

strcspn$9:	; parameter £temporary3204, offset 8
38:		mov [bp + 20], ax
40:	

strcspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; post call
48:	

strcspn$12:	; £temporary3205 = return_value
53:	

strcspn$13:	; if £temporary3205 == 0 goto 16
54:		cmp bx, 0
55:		je strcspn$16
57:	

strcspn$14:	; return_value = index
58:		mov bx, [bp + 10]
60:	

strcspn$15:	; return
61:		mov ax, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp ax
66:	

strcspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strcspn$17:	; goto 1
70:		jmp strcspn$1
72:	

strcspn$18:	; return_value = -1
73:		mov bx, -1
75:	

strcspn$19:	; return
76:		mov ax, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp ax
81:	

strcspn$20:	; function end strcspn
1:	

strpbrk:	; index = 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; £temporary3210 = mainString + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strpbrk$2:	; £temporary3209 -> £temporary3210 = *£temporary3210
10:	

strpbrk$3:	; if £temporary3209 -> £temporary3210 == 0 goto 21
11:		cmp byte [si], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; call header integral zero 0 stack zero 0
16:	

strpbrk$5:	; parameter charSet, offset 6
17:		mov ax, [bp + 8]
18:		mov [bp + 18], ax
20:	

strpbrk$6:	; £temporary3214 = mainString + index
21:		mov si, [bp + 6]
22:		add si, [bp + 10]
24:	

strpbrk$7:	; £temporary3213 -> £temporary3214 = *£temporary3214
26:	

strpbrk$8:	; £temporary3215 = int_to_int £temporary3213 -> £temporary3214 (Signed_Char -> Signed_Int)
27:		mov al, [si]
29:		and ax, 255
31:		cmp al, 0
32:		jge strpbrk$9
33:		neg al
35:		neg ax
37:	

strpbrk$9:	; parameter £temporary3215, offset 8
38:		mov [bp + 20], ax
40:	

strpbrk$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; post call
48:	

strpbrk$12:	; £temporary3216 = return_value
53:	

strpbrk$13:	; if £temporary3216 == 0 goto 19
54:		cmp bx, 0
55:		je strpbrk$19
57:	

strpbrk$14:	; £temporary3219 = mainString + index
58:		mov bx, [bp + 6]
59:		add bx, [bp + 10]
61:	

strpbrk$15:	; £temporary3218 -> £temporary3219 = *£temporary3219
63:	

strpbrk$16:	; £temporary3220 = &£temporary3218 -> £temporary3219
65:	

strpbrk$17:	; return_value = £temporary3220
67:	

strpbrk$18:	; return
68:		mov ax, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp ax
73:	

strpbrk$19:	; ++index
74:		inc word [bp + 10]
76:	

strpbrk$20:	; goto 1
77:		jmp strpbrk$1
79:	

strpbrk$21:	; return_value = 0
80:		mov bx, 0
82:	

strpbrk$22:	; return
83:		mov ax, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp ax
88:	

strpbrk$23:	; function end strpbrk
1:	

strstr:	; index = 0
2:		mov word [bp + 10], 0
4:	

strstr$1:	; £temporary3224 = mainString + index
5:		mov si, [bp + 6]
6:		add si, [bp + 10]
8:	

strstr$2:	; £temporary3223 -> £temporary3224 = *£temporary3224
10:	

strstr$3:	; if £temporary3223 -> £temporary3224 == 0 goto 19
11:		cmp byte [si], 0
12:		je strstr$19
14:	

strstr$4:	; call header integral zero 0 stack zero 0
16:	

strstr$5:	; £temporary3227 = mainString + index
17:		mov ax, [bp + 6]
18:		add ax, [bp + 10]
20:	

strstr$6:	; parameter £temporary3227, offset 6
21:		mov [bp + 18], ax
23:	

strstr$7:	; parameter subString, offset 8
24:		mov ax, [bp + 8]
25:		mov [bp + 20], ax
27:	

strstr$8:	; call function noellipse-noellipse strcmp
28:		mov word [bp + 12], strstr$9
29:		mov [bp + 14], bp
30:		add bp, 12
31:		jmp strcmp
33:	

strstr$9:	; post call
35:	

strstr$10:	; £temporary3228 = return_value
40:	

strstr$11:	; if £temporary3228 != 0 goto 17
41:		cmp bx, 0
42:		jne strstr$17
44:	

strstr$12:	; £temporary3231 = mainString + index
45:		mov bx, [bp + 6]
46:		add bx, [bp + 10]
48:	

strstr$13:	; £temporary3230 -> £temporary3231 = *£temporary3231
50:	

strstr$14:	; £temporary3232 = &£temporary3230 -> £temporary3231
52:	

strstr$15:	; return_value = £temporary3232
54:	

strstr$16:	; return
55:		mov ax, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp ax
60:	

strstr$17:	; ++index
61:		inc word [bp + 10]
63:	

strstr$18:	; goto 1
64:		jmp strstr$1
66:	

strstr$19:	; return_value = 0
67:		mov bx, 0
69:	

strstr$20:	; return
70:		mov ax, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp ax
75:	

strstr$21:	; function end strstr
1:	

strlen:	; index = 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; £temporary3236 = string + index
5:		mov si, [bp + 6]
6:		add si, [bp + 8]
8:	

strlen$2:	; £temporary3235 -> £temporary3236 = *£temporary3236
10:	

strlen$3:	; if £temporary3235 -> £temporary3236 == 0 goto 6
11:		cmp byte [si], 0
12:		je strlen$6
14:	

strlen$4:	; ++index
15:		inc word [bp + 8]
17:	

strlen$5:	; goto 1
18:		jmp strlen$1
20:	

strlen$6:	; return_value = index
21:		mov bx, [bp + 8]
23:	

strlen$7:	; return
24:		mov ax, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp ax
29:	

strlen$8:	; function end strlen
1:	

strerror:	; call header integral zero 0 stack zero 0
3:	

strerror$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; post call
11:	

strerror$3:	; £temporary3239 = return_value
16:	

strerror$4:	; localeConvPtr = £temporary3239
17:		mov [bp + 8], bx
19:	

strerror$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 8], 0
21:		je strerror$9
23:	

strerror$6:	; £temporary3241 -> localeConvPtr = *localeConvPtr, offset 16
24:		mov si, [bp + 8]
26:	

strerror$7:	; £temporary3245 = £temporary3241 -> localeConvPtr
27:		mov ax, [si + 16]
29:	

strerror$8:	; goto 10
30:		jmp strerror$10
32:	

strerror$9:	; £temporary3245 = 0
33:		mov ax, 0
35:	

strerror$10:	; messageList = £temporary3245
36:		mov [bp + 10], ax
38:	

strerror$11:	; if messageList == 0 goto 14
39:		cmp word [bp + 10], 0
40:		je strerror$14
42:	

strerror$12:	; £temporary3250 = messageList
43:		mov ax, [bp + 10]
45:	

strerror$13:	; goto 15
46:		jmp strerror$15
48:	

strerror$14:	; £temporary3250 = enMessageList
49:		mov ax, enMessageList
51:	

strerror$15:	; messageList = £temporary3250
52:		mov [bp + 10], ax
54:	

strerror$16:	; £temporary3252 = errno * 2
55:		mov ax, [bp + 6]
57:		xor dx, dx
58:		mul word [int2$2#]
64:	

strerror$17:	; £temporary3253 = messageList + £temporary3252
65:		mov si, [bp + 10]
66:		add si, ax
68:	

strerror$18:	; £temporary3251 -> £temporary3253 = *£temporary3253
70:	

strerror$19:	; return_value = £temporary3251 -> £temporary3253
71:		mov bx, [si]
73:	

strerror$20:	; return
74:		mov ax, [bp]
75:		mov di, [bp + 4]
76:		mov bp, [bp + 2]
77:		jmp ax
79:	

strerror$21:	; function end strerror
1:	

strtok:	; if string == 0 goto 37
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; £temporary3255 -> string = *string
6:		mov si, [bp + 6]
8:	

strtok$2:	; if £temporary3255 -> string != 0 goto 5
9:		cmp byte [si], 0
10:		jne strtok$5
12:	

strtok$3:	; return_value = 0
13:		mov bx, 0
15:	

strtok$4:	; return
16:		mov ax, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp ax
21:	

strtok$5:	; index = 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; £temporary3258 = string + index
25:		mov si, [bp + 6]
26:		add si, [bp + 10]
28:	

strtok$7:	; £temporary3257 -> £temporary3258 = *£temporary3258
30:	

strtok$8:	; if £temporary3257 -> £temporary3258 == 0 goto 31
31:		cmp byte [si], 0
32:		je strtok$31
34:	

strtok$9:	; call header integral zero 0 stack zero 0
36:	

strtok$10:	; parameter charSet, offset 6
37:		mov ax, [bp + 8]
38:		mov [bp + 20], ax
40:	

strtok$11:	; £temporary3262 = string + index
41:		mov si, [bp + 6]
42:		add si, [bp + 10]
44:	

strtok$12:	; £temporary3261 -> £temporary3262 = *£temporary3262
46:	

strtok$13:	; £temporary3263 = int_to_int £temporary3261 -> £temporary3262 (Signed_Char -> Signed_Int)
47:		mov al, [si]
49:		and ax, 255
51:		cmp al, 0
52:		jge strtok$14
53:		neg al
55:		neg ax
57:	

strtok$14:	; parameter £temporary3263, offset 8
58:		mov [bp + 22], ax
60:	

strtok$15:	; call function noellipse-noellipse strchr
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; post call
68:	

strtok$17:	; £temporary3264 = return_value
73:	

strtok$18:	; if £temporary3264 == 0 goto 29
74:		cmp bx, 0
75:		je strtok$29
77:	

strtok$19:	; £temporary3267 = string + index
78:		mov si, [bp + 6]
79:		add si, [bp + 10]
81:	

strtok$20:	; £temporary3266 -> £temporary3267 = *£temporary3267
83:	

strtok$21:	; £temporary3266 -> £temporary3267 = 0
84:		mov byte [si], 0
86:	

strtok$22:	; £temporary3268 = index + 1
87:		mov ax, [bp + 10]
88:		add ax, 1
90:	

strtok$23:	; £temporary3270 = string + £temporary3268
91:		mov si, [bp + 6]
92:		add si, ax
94:	

strtok$24:	; £temporary3269 -> £temporary3270 = *£temporary3270
96:	

strtok$25:	; £temporary3271 = &£temporary3269 -> £temporary3270
98:	

strtok$26:	; token = £temporary3271
99:		mov [token], si
101:	

strtok$27:	; return_value = string
102:		mov bx, [bp + 6]
104:	

strtok$28:	; return
105:		mov ax, [bp]
106:		mov di, [bp + 4]
107:		mov bp, [bp + 2]
108:		jmp ax
110:	

strtok$29:	; ++index
111:		inc word [bp + 10]
113:	

strtok$30:	; goto 6
114:		jmp strtok$6
116:	

strtok$31:	; £temporary3273 = string + index
117:		mov si, [bp + 6]
118:		add si, [bp + 10]
120:	

strtok$32:	; £temporary3272 -> £temporary3273 = *£temporary3273
122:	

strtok$33:	; £temporary3274 = &£temporary3272 -> £temporary3273
124:	

strtok$34:	; token = £temporary3274
125:		mov [token], si
127:	

strtok$35:	; return_value = string
128:		mov bx, [bp + 6]
130:	

strtok$36:	; return
131:		mov ax, [bp]
132:		mov di, [bp + 4]
133:		mov bp, [bp + 2]
134:		jmp ax
136:	

strtok$37:	; if token != 0 goto 40
137:		cmp word [token], 0
138:		jne strtok$40
140:	

strtok$38:	; return_value = 0
141:		mov bx, 0
143:	

strtok$39:	; return
144:		mov ax, [bp]
145:		mov di, [bp + 4]
146:		mov bp, [bp + 2]
147:		jmp ax
149:	

strtok$40:	; if (token,0) != 0 goto 43
150:		mov si, [token]
151:		cmp byte [si], 0
152:		jne strtok$43
154:	

strtok$41:	; return_value = 0
155:		mov bx, 0
157:	

strtok$42:	; return
158:		mov ax, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp ax
163:	

strtok$43:	; index = 0
164:		mov word [bp + 10], 0
166:	

strtok$44:	; £temporary3279 = token + index
167:		mov si, [token]
168:		add si, [bp + 10]
170:	

strtok$45:	; £temporary3278 -> £temporary3279 = *£temporary3279
172:	

strtok$46:	; if £temporary3278 -> £temporary3279 == 0 goto 70
173:		cmp byte [si], 0
174:		je strtok$70
176:	

strtok$47:	; call header integral zero 0 stack zero 0
178:	

strtok$48:	; parameter charSet, offset 6
179:		mov ax, [bp + 8]
180:		mov [bp + 20], ax
182:	

strtok$49:	; £temporary3283 = token + index
183:		mov si, [token]
184:		add si, [bp + 10]
186:	

strtok$50:	; £temporary3282 -> £temporary3283 = *£temporary3283
188:	

strtok$51:	; £temporary3284 = int_to_int £temporary3282 -> £temporary3283 (Signed_Char -> Signed_Int)
189:		mov al, [si]
191:		and ax, 255
193:		cmp al, 0
194:		jge strtok$52
195:		neg al
197:		neg ax
199:	

strtok$52:	; parameter £temporary3284, offset 8
200:		mov [bp + 22], ax
202:	

strtok$53:	; call function noellipse-noellipse strchr
203:		mov word [bp + 14], strtok$54
204:		mov [bp + 16], bp
205:		add bp, 14
206:		jmp strchr
208:	

strtok$54:	; post call
210:	

strtok$55:	; £temporary3285 = return_value
215:	

strtok$56:	; if £temporary3285 == 0 goto 68
216:		cmp bx, 0
217:		je strtok$68
219:	

strtok$57:	; tokenStart2 = token
220:		mov ax, [token]
221:		mov [bp + 14], ax
223:	

strtok$58:	; £temporary3288 = token + index
224:		mov si, [token]
225:		add si, [bp + 10]
227:	

strtok$59:	; £temporary3287 -> £temporary3288 = *£temporary3288
229:	

strtok$60:	; £temporary3287 -> £temporary3288 = 0
230:		mov byte [si], 0
232:	

strtok$61:	; £temporary3289 = index + 1
233:		mov ax, [bp + 10]
234:		add ax, 1
236:	

strtok$62:	; £temporary3291 = token + £temporary3289
237:		mov si, [token]
238:		add si, ax
240:	

strtok$63:	; £temporary3290 -> £temporary3291 = *£temporary3291
242:	

strtok$64:	; £temporary3292 = &£temporary3290 -> £temporary3291
244:	

strtok$65:	; token = £temporary3292
245:		mov [token], si
247:	

strtok$66:	; return_value = tokenStart2
248:		mov bx, [bp + 14]
250:	

strtok$67:	; return
251:		mov ax, [bp]
252:		mov di, [bp + 4]
253:		mov bp, [bp + 2]
254:		jmp ax
256:	

strtok$68:	; ++index
257:		inc word [bp + 10]
259:	

strtok$69:	; goto 44
260:		jmp strtok$44
262:	

strtok$70:	; tokenStart = token
263:		mov ax, [token]
264:		mov [bp + 12], ax
266:	

strtok$71:	; £temporary3294 = token + index
267:		mov si, [token]
268:		add si, [bp + 10]
270:	

strtok$72:	; £temporary3293 -> £temporary3294 = *£temporary3294
272:	

strtok$73:	; £temporary3295 = &£temporary3293 -> £temporary3294
274:	

strtok$74:	; token = £temporary3295
275:		mov [token], si
277:	

strtok$75:	; return_value = tokenStart
278:		mov bx, [bp + 12]
280:	

strtok$76:	; return
281:		mov ax, [bp]
282:		mov di, [bp + 4]
283:		mov bp, [bp + 2]
284:		jmp ax
286:	

strtok$77:	; function end strtok
1:	

memcpy:	; £temporary3300 = int_to_int target (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memcpy$1:	; charTarget = £temporary3300
6:		mov [bp + 12], ax
8:	

memcpy$2:	; £temporary3301 = int_to_int source (Pointer -> Pointer)
9:		mov ax, [bp + 8]
12:	

memcpy$3:	; charSource = £temporary3301
13:		mov [bp + 14], ax
15:	

memcpy$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; if index >= size goto 13
19:		mov ax, [bp + 10]
20:		cmp [bp + 16], ax
21:		jge memcpy$13
23:	

memcpy$6:	; £temporary3305 = charTarget + index
24:		mov si, [bp + 12]
25:		add si, [bp + 16]
27:	

memcpy$7:	; £temporary3304 -> £temporary3305 = *£temporary3305
29:	

memcpy$8:	; £temporary3307 = charSource + index
30:		mov di, [bp + 14]
31:		add di, [bp + 16]
33:	

memcpy$9:	; £temporary3306 -> £temporary3307 = *£temporary3307
35:	

memcpy$10:	; £temporary3304 -> £temporary3305 = £temporary3306 -> £temporary3307
36:		mov al, [di]
37:		mov [si], al
39:	

memcpy$11:	; ++index
40:		inc word [bp + 16]
42:	

memcpy$12:	; goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; £temporary3308 = int_to_int target (Pointer -> Pointer)
46:		mov bx, [bp + 6]
49:	

memcpy$14:	; return_value = £temporary3308
51:	

memcpy$15:	; return
52:		mov ax, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp ax
57:	

memcpy$16:	; function end memcpy
1:	

memmove:	; £temporary3309 = int_to_int target (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memmove$1:	; charTarget = £temporary3309
6:		mov [bp + 12], ax
8:	

memmove$2:	; £temporary3310 = int_to_int source (Pointer -> Pointer)
9:		mov ax, [bp + 8]
12:	

memmove$3:	; charSource = £temporary3310
13:		mov [bp + 14], ax
15:	

memmove$4:	; if source >= target goto 14
16:		mov ax, [bp + 6]
17:		cmp [bp + 8], ax
18:		jge memmove$14
20:	

memmove$5:	; index = size - 1
21:		mov ax, [bp + 10]
22:		sub ax, 1
23:		mov [bp + 16], ax
25:	

memmove$6:	; if index < 0 goto 23
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; £temporary3316 = charTarget + index
30:		mov si, [bp + 12]
31:		add si, [bp + 16]
33:	

memmove$8:	; £temporary3315 -> £temporary3316 = *£temporary3316
35:	

memmove$9:	; £temporary3318 = charSource + index
36:		mov di, [bp + 14]
37:		add di, [bp + 16]
39:	

memmove$10:	; £temporary3317 -> £temporary3318 = *£temporary3318
41:	

memmove$11:	; £temporary3315 -> £temporary3316 = £temporary3317 -> £temporary3318
42:		mov al, [di]
43:		mov [si], al
45:	

memmove$12:	; --index
46:		dec word [bp + 16]
48:	

memmove$13:	; goto 6
49:		jmp memmove$6
51:	

memmove$14:	; index = 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; if index >= size goto 23
55:		mov ax, [bp + 10]
56:		cmp [bp + 16], ax
57:		jge memmove$23
59:	

memmove$16:	; £temporary3322 = charTarget + index
60:		mov si, [bp + 12]
61:		add si, [bp + 16]
63:	

memmove$17:	; £temporary3321 -> £temporary3322 = *£temporary3322
65:	

memmove$18:	; £temporary3324 = charSource + index
66:		mov di, [bp + 14]
67:		add di, [bp + 16]
69:	

memmove$19:	; £temporary3323 -> £temporary3324 = *£temporary3324
71:	

memmove$20:	; £temporary3321 -> £temporary3322 = £temporary3323 -> £temporary3324
72:		mov al, [di]
73:		mov [si], al
75:	

memmove$21:	; ++index
76:		inc word [bp + 16]
78:	

memmove$22:	; goto 15
79:		jmp memmove$15
81:	

memmove$23:	; £temporary3325 = int_to_int target (Pointer -> Pointer)
82:		mov bx, [bp + 6]
85:	

memmove$24:	; return_value = £temporary3325
87:	

memmove$25:	; return
88:		mov ax, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp ax
93:	

memmove$26:	; function end memmove
1:	

memcmp:	; £temporary3326 = int_to_int left (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memcmp$1:	; charLeft = £temporary3326
6:		mov [bp + 12], ax
8:	

memcmp$2:	; £temporary3327 = int_to_int right (Pointer -> Pointer)
9:		mov ax, [bp + 8]
12:	

memcmp$3:	; charRight = £temporary3327
13:		mov [bp + 14], ax
15:	

memcmp$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; if index >= size goto 22
19:		mov ax, [bp + 10]
20:		cmp [bp + 16], ax
21:		jge memcmp$22
23:	

memcmp$6:	; £temporary3331 = charLeft + index
24:		mov si, [bp + 12]
25:		add si, [bp + 16]
27:	

memcmp$7:	; £temporary3330 -> £temporary3331 = *£temporary3331
29:	

memcmp$8:	; £temporary3333 = charRight + index
30:		mov di, [bp + 14]
31:		add di, [bp + 16]
33:	

memcmp$9:	; £temporary3332 -> £temporary3333 = *£temporary3333
35:	

memcmp$10:	; if £temporary3330 -> £temporary3331 >= £temporary3332 -> £temporary3333 goto 13
36:		mov al, [di]
37:		cmp [si], al
38:		jge memcmp$13
40:	

memcmp$11:	; return_value = -1
41:		mov bx, -1
43:	

memcmp$12:	; return
44:		mov ax, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp ax
49:	

memcmp$13:	; £temporary3336 = charLeft + index
50:		mov si, [bp + 12]
51:		add si, [bp + 16]
53:	

memcmp$14:	; £temporary3335 -> £temporary3336 = *£temporary3336
55:	

memcmp$15:	; £temporary3338 = charRight + index
56:		mov di, [bp + 14]
57:		add di, [bp + 16]
59:	

memcmp$16:	; £temporary3337 -> £temporary3338 = *£temporary3338
61:	

memcmp$17:	; if £temporary3335 -> £temporary3336 <= £temporary3337 -> £temporary3338 goto 20
62:		mov al, [di]
63:		cmp [si], al
64:		jle memcmp$20
66:	

memcmp$18:	; return_value = 1
67:		mov bx, 1
69:	

memcmp$19:	; return
70:		mov ax, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp ax
75:	

memcmp$20:	; ++index
76:		inc word [bp + 16]
78:	

memcmp$21:	; goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; return_value = 0
82:		mov bx, 0
84:	

memcmp$23:	; return
85:		mov ax, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp ax
90:	

memcmp$24:	; function end memcmp
1:	

memchr:	; £temporary3340 = int_to_int block (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memchr$1:	; charBlock = £temporary3340
6:		mov [bp + 14], ax
8:	

memchr$2:	; £temporary3341 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov ax, [bp + 8]
12:		cmp ax, 0
13:		jge memchr$3
14:		neg ax
16:		neg al
18:	

memchr$3:	; c = £temporary3341
19:		mov [bp + 16], al
21:	

memchr$4:	; index = 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; if index >= size goto 17
25:		mov ax, [bp + 10]
26:		cmp [bp + 12], ax
27:		jge memchr$17
29:	

memchr$6:	; £temporary3345 = charBlock + index
30:		mov si, [bp + 14]
31:		add si, [bp + 12]
33:	

memchr$7:	; £temporary3344 -> £temporary3345 = *£temporary3345
35:	

memchr$8:	; if £temporary3344 -> £temporary3345 != c goto 15
36:		mov al, [bp + 16]
37:		cmp [si], al
38:		jne memchr$15
40:	

memchr$9:	; £temporary3348 = charBlock + index
41:		mov bx, [bp + 14]
42:		add bx, [bp + 12]
44:	

memchr$10:	; £temporary3347 -> £temporary3348 = *£temporary3348
46:	

memchr$11:	; £temporary3349 = &£temporary3347 -> £temporary3348
48:	

memchr$12:	; £temporary3350 = int_to_int £temporary3349 (Pointer -> Pointer)
51:	

memchr$13:	; return_value = £temporary3350
53:	

memchr$14:	; return
54:		mov ax, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp ax
59:	

memchr$15:	; ++index
60:		inc word [bp + 12]
62:	

memchr$16:	; goto 5
63:		jmp memchr$5
65:	

memchr$17:	; return_value = 0
66:		mov bx, 0
68:	

memchr$18:	; return
69:		mov ax, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp ax
74:	

memchr$19:	; function end memchr
1:	

memset:	; £temporary3351 = int_to_int block (Pointer -> Pointer)
2:		mov ax, [bp + 6]
5:	

memset$1:	; charBlock = £temporary3351
6:		mov [bp + 12], ax
8:	

memset$2:	; £temporary3352 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov ax, [bp + 8]
12:		cmp ax, 0
13:		jge memset$3
14:		neg ax
16:		neg al
18:	

memset$3:	; c = £temporary3352
19:		mov [bp + 14], al
21:	

memset$4:	; index = 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; if index >= size goto 11
25:		mov ax, [bp + 10]
26:		cmp [bp + 15], ax
27:		jge memset$11
29:	

memset$6:	; £temporary3356 = charBlock + index
30:		mov si, [bp + 12]
31:		add si, [bp + 15]
33:	

memset$7:	; £temporary3355 -> £temporary3356 = *£temporary3356
35:	

memset$8:	; £temporary3355 -> £temporary3356 = c
36:		mov al, [bp + 14]
37:		mov [si], al
39:	

memset$9:	; ++index
40:		inc word [bp + 15]
42:	

memset$10:	; goto 5
43:		jmp memset$5
45:	

memset$11:	; return_value = block
46:		mov bx, [bp + 6]
48:	

memset$12:	; return
49:		mov ax, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp ax
54:	

memset$13:	; function end memset
