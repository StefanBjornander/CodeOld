1:	

putc:	; g_outStatus = 0
2:		mov word [g_outStatus], 0
4:	

putc$1:	; £temporary1774 = int_to_int stream (Pointer -> Pointer)
5:		mov a1203, [bp + 8]
8:	

putc$2:	; g_outDevice = £temporary1774
9:		mov [g_outDevice], a1203
11:	

putc$3:	; call header integral zero 0 stack zero 0
13:	

putc$4:	; £temporary1775 = int_to_int i (Signed_Int -> Signed_Char)
14:		mov a1204, [bp + 6]
17:		cmp a1204, 0
18:		jge putc$5
19:		neg a1204
21:		neg a1204
23:	

putc$5:	; parameter £temporary1775, offset 6
24:		mov [bp + 16], a1204
26:	

putc$6:	; call function noellipse-noellipse printChar
27:		mov word [bp + 10], putc$7
28:		mov [bp + 12], bp
29:		add bp, 10
30:		jmp printChar
32:	

putc$7:	; post call
34:	

putc$8:	; return_value = 1
35:		mov a1205, 1
37:	

putc$9:	; return
38:		mov t1206, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1206
43:	

putc$10:	; function end putc
1:	

fputc:	; g_outStatus = 0
2:		mov word [g_outStatus], 0
4:	

fputc$1:	; £temporary1778 = int_to_int stream (Pointer -> Pointer)
5:		mov a1207, [bp + 8]
8:	

fputc$2:	; g_outDevice = £temporary1778
9:		mov [g_outDevice], a1207
11:	

fputc$3:	; call header integral zero 0 stack zero 0
13:	

fputc$4:	; £temporary1779 = int_to_int i (Signed_Int -> Signed_Char)
14:		mov a1208, [bp + 6]
17:		cmp a1208, 0
18:		jge fputc$5
19:		neg a1208
21:		neg a1208
23:	

fputc$5:	; parameter £temporary1779, offset 6
24:		mov [bp + 16], a1208
26:	

fputc$6:	; call function noellipse-noellipse printChar
27:		mov word [bp + 10], fputc$7
28:		mov [bp + 12], bp
29:		add bp, 10
30:		jmp printChar
32:	

fputc$7:	; post call
34:	

fputc$8:	; return_value = 1
35:		mov a1209, 1
37:	

fputc$9:	; return
38:		mov t1210, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1210
43:	

fputc$10:	; function end fputc
1:	

putchar:	; g_outStatus = 0
2:		mov word [g_outStatus], 0
4:	

putchar$1:	; £temporary1782 = int_to_int stdout (Pointer -> Pointer)
5:		mov a1211, [stdout]
8:	

putchar$2:	; g_outDevice = £temporary1782
9:		mov [g_outDevice], a1211
11:	

putchar$3:	; call header integral zero 0 stack zero 0
13:	

putchar$4:	; £temporary1783 = int_to_int i (Signed_Int -> Signed_Char)
14:		mov a1212, [bp + 6]
17:		cmp a1212, 0
18:		jge putchar$5
19:		neg a1212
21:		neg a1212
23:	

putchar$5:	; parameter £temporary1783, offset 6
24:		mov [bp + 14], a1212
26:	

putchar$6:	; call function noellipse-noellipse printChar
27:		mov word [bp + 8], putchar$7
28:		mov [bp + 10], bp
29:		add bp, 8
30:		jmp printChar
32:	

putchar$7:	; post call
34:	

putchar$8:	; return_value = 1
35:		mov a1213, 1
37:	

putchar$9:	; return
38:		mov t1214, [bp]
39:		mov di, [bp + 4]
40:		mov bp, [bp + 2]
41:		jmp t1214
43:	

putchar$10:	; function end putchar
1:	

printChar:	; case g_outStatus == 0 goto 5
2:		mov a1215, [g_outStatus]
3:		cmp a1215, 0
4:		je printChar$5
6:	

printChar$1:	; case g_outStatus == 1 goto 16
7:		cmp a1215, 1
8:		je printChar$16
10:	

printChar$2:	; case g_outStatus == 2 goto 24
11:		cmp a1215, 2
12:		je printChar$24
14:	

printChar$3:	; case end g_outStatus
16:	

printChar$4:	; goto 25
17:		jmp printChar$25
19:	

printChar$5:	; £temporary1786 = int_to_int g_outDevice (Pointer -> Pointer)
20:		mov a1216, [g_outDevice]
23:	

printChar$6:	; stream = £temporary1786
24:		mov [bp + 11], a1216
26:	

printChar$7:	; ah = 64
27:		mov a1217, 64
29:	

printChar$8:	; £temporary1789 -> stream = *stream, offset 2
30:		mov a1218, [bp + 11]
32:	

printChar$9:	; bx = £temporary1789 -> stream
33:		mov t1219, [a1218 + 2]
35:	

printChar$10:	; cx = 1
36:		mov a1220, 1
38:	

printChar$11:	; £temporary1792 = &c
39:		mov t1221, bp
40:		add t1221, 6
42:	

printChar$12:	; dx = £temporary1792
44:	

printChar$13:	; interrupt 33
45:		int 33
47:	

printChar$14:	; ++g_outChars
48:		inc word [g_outChars]
50:	

printChar$15:	; goto 25
51:		jmp printChar$25
53:	

printChar$16:	; £temporary1794 = int_to_int g_outDevice (Pointer -> Pointer)
54:		mov a1222, [g_outDevice]
57:	

printChar$17:	; outString = £temporary1794
58:		mov [bp + 9], a1222
60:	

printChar$18:	; £temporary1795 = g_outChars
61:		mov t1223, [g_outChars]
63:	

printChar$19:	; ++g_outChars
64:		inc word [g_outChars]
66:	

printChar$20:	; £temporary1797 = outString + £temporary1795
67:		mov a1224, [bp + 9]
68:		add a1224, t1223
70:	

printChar$21:	; £temporary1796 -> £temporary1797 = *£temporary1797
72:	

printChar$22:	; £temporary1796 -> £temporary1797 = c
73:		mov a1225, [bp + 6]
74:		mov [a1224], a1225
76:	

printChar$23:	; goto 25
77:		jmp printChar$25
79:	

printChar$24:	; ++g_outChars
80:		inc word [g_outChars]
82:	

printChar$25:	; return
83:		mov t1226, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp t1226
88:	

printChar$26:	; function end printChar
1:	

printString:	; if s == 0 goto 29
2:		cmp word [bp + 6], 0
3:		je printString$29
5:	

printString$1:	; if precision != 0 goto 14
6:		cmp word [bp + 8], 0
7:		jne printString$14
9:	

printString$2:	; index = 0
10:		mov word [bp + 10], 0
12:	

printString$3:	; £temporary1803 = s + index
13:		mov a1227, [bp + 6]
14:		add a1227, [bp + 10]
16:	

printString$4:	; £temporary1802 -> £temporary1803 = *£temporary1803
18:	

printString$5:	; if £temporary1802 -> £temporary1803 == 0 goto 53
19:		cmp byte [a1227], 0
20:		je printString$53
22:	

printString$6:	; call header integral zero 0 stack zero 0
24:	

printString$7:	; £temporary1807 = s + index
25:		mov a1228, [bp + 6]
26:		add a1228, [bp + 10]
28:	

printString$8:	; £temporary1806 -> £temporary1807 = *£temporary1807
30:	

printString$9:	; parameter £temporary1806 -> £temporary1807, offset 6
31:		mov t1229, [a1228]
32:		mov [bp + 18], t1229
34:	

printString$10:	; call function noellipse-noellipse printChar
35:		mov word [bp + 12], printString$11
36:		mov [bp + 14], bp
37:		add bp, 12
38:		jmp printChar
40:	

printString$11:	; post call
42:	

printString$12:	; ++index
43:		inc word [bp + 10]
45:	

printString$13:	; goto 3
46:		jmp printString$3
48:	

printString$14:	; index = 0
49:		mov word [bp + 10], 0
51:	

printString$15:	; £temporary1809 = precision
52:		mov t1230, [bp + 8]
54:	

printString$16:	; --precision
55:		dec word [bp + 8]
57:	

printString$17:	; if £temporary1809 <= 0 goto 53
58:		cmp t1230, 0
59:		jle printString$53
61:	

printString$18:	; £temporary1812 = s + index
62:		mov a1231, [bp + 6]
63:		add a1231, [bp + 10]
65:	

printString$19:	; £temporary1811 -> £temporary1812 = *£temporary1812
67:	

printString$20:	; if £temporary1811 -> £temporary1812 == 0 goto 53
68:		cmp byte [a1231], 0
69:		je printString$53
71:	

printString$21:	; call header integral zero 0 stack zero 0
73:	

printString$22:	; £temporary1817 = s + index
74:		mov a1232, [bp + 6]
75:		add a1232, [bp + 10]
77:	

printString$23:	; £temporary1816 -> £temporary1817 = *£temporary1817
79:	

printString$24:	; parameter £temporary1816 -> £temporary1817, offset 6
80:		mov t1233, [a1232]
81:		mov [bp + 18], t1233
83:	

printString$25:	; call function noellipse-noellipse printChar
84:		mov word [bp + 12], printString$26
85:		mov [bp + 14], bp
86:		add bp, 12
87:		jmp printChar
89:	

printString$26:	; post call
91:	

printString$27:	; ++index
92:		inc word [bp + 10]
94:	

printString$28:	; goto 15
95:		jmp printString$15
97:	

printString$29:	; call header integral zero 0 stack zero 0
99:	

printString$30:	; parameter 60, offset 6
100:		mov byte [bp + 16], 60
102:	

printString$31:	; call function noellipse-noellipse printChar
103:		mov word [bp + 10], printString$32
104:		mov [bp + 12], bp
105:		add bp, 10
106:		jmp printChar
108:	

printString$32:	; post call
110:	

printString$33:	; call header integral zero 0 stack zero 0
112:	

printString$34:	; parameter 78, offset 6
113:		mov byte [bp + 16], 78
115:	

printString$35:	; call function noellipse-noellipse printChar
116:		mov word [bp + 10], printString$36
117:		mov [bp + 12], bp
118:		add bp, 10
119:		jmp printChar
121:	

printString$36:	; post call
123:	

printString$37:	; call header integral zero 0 stack zero 0
125:	

printString$38:	; parameter 85, offset 6
126:		mov byte [bp + 16], 85
128:	

printString$39:	; call function noellipse-noellipse printChar
129:		mov word [bp + 10], printString$40
130:		mov [bp + 12], bp
131:		add bp, 10
132:		jmp printChar
134:	

printString$40:	; post call
136:	

printString$41:	; call header integral zero 0 stack zero 0
138:	

printString$42:	; parameter 76, offset 6
139:		mov byte [bp + 16], 76
141:	

printString$43:	; call function noellipse-noellipse printChar
142:		mov word [bp + 10], printString$44
143:		mov [bp + 12], bp
144:		add bp, 10
145:		jmp printChar
147:	

printString$44:	; post call
149:	

printString$45:	; call header integral zero 0 stack zero 0
151:	

printString$46:	; parameter 76, offset 6
152:		mov byte [bp + 16], 76
154:	

printString$47:	; call function noellipse-noellipse printChar
155:		mov word [bp + 10], printString$48
156:		mov [bp + 12], bp
157:		add bp, 10
158:		jmp printChar
160:	

printString$48:	; post call
162:	

printString$49:	; call header integral zero 0 stack zero 0
164:	

printString$50:	; parameter 62, offset 6
165:		mov byte [bp + 16], 62
167:	

printString$51:	; call function noellipse-noellipse printChar
168:		mov word [bp + 10], printString$52
169:		mov [bp + 12], bp
170:		add bp, 10
171:		jmp printChar
173:	

printString$52:	; post call
175:	

printString$53:	; return
176:		mov t1234, [bp]
177:		mov di, [bp + 4]
178:		mov bp, [bp + 2]
179:		jmp t1234
181:	

printString$54:	; function end printString
1:	

printLongIntRec:	; if longValue == 0 goto 15
2:		cmp dword [bp + 6], 0
3:		je printLongIntRec$15
5:	

printLongIntRec$1:	; £temporary1834 = longValue % 10
6:		mov a1235, [bp + 6]
8:		xor edx, edx
9:		idiv dword [int4$10#]
15:	

printLongIntRec$2:	; £temporary1835 = int_to_int £temporary1834 (Signed_Long_Int -> Signed_Int)
18:		cmp t1237, 0
19:		jge printLongIntRec$3
20:		neg t1237
22:		neg t1237
24:	

printLongIntRec$3:	; digit = £temporary1835
25:		mov [bp + 10], t1237
27:	

printLongIntRec$4:	; call header integral zero 0 stack zero 0
29:	

printLongIntRec$5:	; £temporary1836 = longValue / 10
30:		mov a1238, [bp + 6]
32:		xor edx, edx
33:		idiv dword [int4$10#]
39:	

printLongIntRec$6:	; parameter £temporary1836, offset 6
40:		mov [bp + 18], t1241
42:	

printLongIntRec$7:	; call function noellipse-noellipse printLongIntRec
43:		mov word [bp + 12], printLongIntRec$8
44:		mov [bp + 14], bp
45:		add bp, 12
46:		jmp printLongIntRec
48:	

printLongIntRec$8:	; post call
50:	

printLongIntRec$9:	; call header integral zero 0 stack zero 0
52:	

printLongIntRec$10:	; £temporary1838 = digit + 48
53:		mov a1242, [bp + 10]
54:		add a1242, 48
56:	

printLongIntRec$11:	; £temporary1839 = int_to_int £temporary1838 (Signed_Int -> Signed_Char)
59:		cmp a1242, 0
60:		jge printLongIntRec$12
61:		neg a1242
63:		neg a1242
65:	

printLongIntRec$12:	; parameter £temporary1839, offset 6
66:		mov [bp + 18], a1242
68:	

printLongIntRec$13:	; call function noellipse-noellipse printChar
69:		mov word [bp + 12], printLongIntRec$14
70:		mov [bp + 14], bp
71:		add bp, 12
72:		jmp printChar
74:	

printLongIntRec$14:	; post call
76:	

printLongIntRec$15:	; return
77:		mov t1243, [bp]
78:		mov di, [bp + 4]
79:		mov bp, [bp + 2]
80:		jmp t1243
82:	

printLongIntRec$16:	; function end printLongIntRec
1:	

printLongInt:	; if longValue >= 0 goto 8
2:		cmp dword [bp + 6], 0
3:		jge printLongInt$8
5:	

printLongInt$1:	; £temporary1844 = -longValue
6:		mov a1244, [bp + 6]
7:		neg a1244
9:	

printLongInt$2:	; longValue = £temporary1844
10:		mov [bp + 6], a1244
12:	

printLongInt$3:	; call header integral zero 0 stack zero 0
14:	

printLongInt$4:	; parameter 45, offset 6
15:		mov byte [bp + 20], 45
17:	

printLongInt$5:	; call function noellipse-noellipse printChar
18:		mov word [bp + 14], printLongInt$6
19:		mov [bp + 16], bp
20:		add bp, 14
21:		jmp printChar
23:	

printLongInt$6:	; post call
25:	

printLongInt$7:	; goto 19
26:		jmp printLongInt$19
28:	

printLongInt$8:	; if space == 0 goto 14
29:		cmp word [bp + 12], 0
30:		je printLongInt$14
32:	

printLongInt$9:	; call header integral zero 0 stack zero 0
34:	

printLongInt$10:	; parameter 32, offset 6
35:		mov byte [bp + 20], 32
37:	

printLongInt$11:	; call function noellipse-noellipse printChar
38:		mov word [bp + 14], printLongInt$12
39:		mov [bp + 16], bp
40:		add bp, 14
41:		jmp printChar
43:	

printLongInt$12:	; post call
45:	

printLongInt$13:	; goto 19
46:		jmp printLongInt$19
48:	

printLongInt$14:	; if plus == 0 goto 19
49:		cmp word [bp + 10], 0
50:		je printLongInt$19
52:	

printLongInt$15:	; call header integral zero 0 stack zero 0
54:	

printLongInt$16:	; parameter 43, offset 6
55:		mov byte [bp + 20], 43
57:	

printLongInt$17:	; call function noellipse-noellipse printChar
58:		mov word [bp + 14], printLongInt$18
59:		mov [bp + 16], bp
60:		add bp, 14
61:		jmp printChar
63:	

printLongInt$18:	; post call
65:	

printLongInt$19:	; if longValue != 0 goto 25
66:		cmp dword [bp + 6], 0
67:		jne printLongInt$25
69:	

printLongInt$20:	; call header integral zero 0 stack zero 0
71:	

printLongInt$21:	; parameter 48, offset 6
72:		mov byte [bp + 20], 48
74:	

printLongInt$22:	; call function noellipse-noellipse printChar
75:		mov word [bp + 14], printLongInt$23
76:		mov [bp + 16], bp
77:		add bp, 14
78:		jmp printChar
80:	

printLongInt$23:	; post call
82:	

printLongInt$24:	; goto 29
83:		jmp printLongInt$29
85:	

printLongInt$25:	; call header integral zero 0 stack zero 0
87:	

printLongInt$26:	; parameter longValue, offset 6
88:		mov a1245, [bp + 6]
89:		mov [bp + 20], a1245
91:	

printLongInt$27:	; call function noellipse-noellipse printLongIntRec
92:		mov word [bp + 14], printLongInt$28
93:		mov [bp + 16], bp
94:		add bp, 14
95:		jmp printLongIntRec
97:	

printLongInt$28:	; post call
99:	

printLongInt$29:	; return
100:		mov t1246, [bp]
101:		mov di, [bp + 4]
102:		mov bp, [bp + 2]
103:		jmp t1246
105:	

printLongInt$30:	; function end printLongInt
1:	

digitToChar:	; if digit >= 10 goto 5
2:		cmp word [bp + 6], 10
3:		jge digitToChar$5
5:	

digitToChar$1:	; £temporary1859 = digit + 48
6:		mov a1247, [bp + 6]
7:		add a1247, 48
9:	

digitToChar$2:	; £temporary1860 = int_to_int £temporary1859 (Signed_Int -> Signed_Char)
12:		cmp a1247, 0
13:		jge digitToChar$3
14:		neg a1247
16:		neg a1247
18:	

digitToChar$3:	; return_value = £temporary1860
20:	

digitToChar$4:	; return
21:		mov t1248, [bp]
22:		mov di, [bp + 4]
23:		mov bp, [bp + 2]
24:		jmp t1248
26:	

digitToChar$5:	; if capital == 0 goto 11
27:		cmp word [bp + 8], 0
28:		je digitToChar$11
30:	

digitToChar$6:	; £temporary1861 = digit - 10
31:		mov a1249, [bp + 6]
32:		sub a1249, 10
34:	

digitToChar$7:	; £temporary1862 = £temporary1861 + 65
35:		add a1249, 65
37:	

digitToChar$8:	; £temporary1863 = int_to_int £temporary1862 (Signed_Int -> Signed_Char)
40:		cmp a1249, 0
41:		jge digitToChar$9
42:		neg a1249
44:		neg a1249
46:	

digitToChar$9:	; return_value = £temporary1863
48:	

digitToChar$10:	; return
49:		mov t1250, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t1250
54:	

digitToChar$11:	; £temporary1864 = digit - 10
55:		mov a1251, [bp + 6]
56:		sub a1251, 10
58:	

digitToChar$12:	; £temporary1865 = £temporary1864 + 97
59:		add a1251, 97
61:	

digitToChar$13:	; £temporary1866 = int_to_int £temporary1865 (Signed_Int -> Signed_Char)
64:		cmp a1251, 0
65:		jge digitToChar$14
66:		neg a1251
68:		neg a1251
70:	

digitToChar$14:	; return_value = £temporary1866
72:	

digitToChar$15:	; return
73:		mov t1252, [bp]
74:		mov di, [bp + 4]
75:		mov bp, [bp + 2]
76:		jmp t1252
78:	

digitToChar$16:	; function end digitToChar
1:	

printUnsignedLongRec:	; if unsignedValue <= 0 goto 22
2:		cmp dword [bp + 6], 0
3:		jbe printUnsignedLongRec$22
5:	

printUnsignedLongRec$1:	; £temporary1869 = unsignedValue % base
6:		mov a1253, [bp + 6]
8:		xor edx, edx
9:		div dword [bp + 10]
15:	

printUnsignedLongRec$2:	; £temporary1870 = int_to_int £temporary1869 (Unsigned_Long_Int -> Signed_Int)
18:	

printUnsignedLongRec$3:	; digit = £temporary1870
19:		mov [bp + 16], t1255
21:	

printUnsignedLongRec$4:	; call header integral zero 0 stack zero 0
23:	

printUnsignedLongRec$5:	; £temporary1871 = unsignedValue / base
24:		mov a1256, [bp + 6]
26:		xor edx, edx
27:		div dword [bp + 10]
33:	

printUnsignedLongRec$6:	; parameter £temporary1871, offset 6
34:		mov [bp + 24], t1259
36:	

printUnsignedLongRec$7:	; parameter base, offset 10
37:		mov a1260, [bp + 10]
38:		mov [bp + 28], a1260
40:	

printUnsignedLongRec$8:	; parameter capital, offset 14
41:		mov a1261, [bp + 14]
42:		mov [bp + 32], a1261
44:	

printUnsignedLongRec$9:	; call function noellipse-noellipse printUnsignedLongRec
45:		mov word [bp + 18], printUnsignedLongRec$10
46:		mov [bp + 20], bp
47:		add bp, 18
48:		jmp printUnsignedLongRec
50:	

printUnsignedLongRec$10:	; post call
52:	

printUnsignedLongRec$11:	; call header integral zero 0 stack zero 0
54:	

printUnsignedLongRec$12:	; parameter digit, offset 6
55:		mov a1262, [bp + 16]
56:		mov [bp + 24], a1262
58:	

printUnsignedLongRec$13:	; parameter capital, offset 8
59:		mov a1263, [bp + 14]
60:		mov [bp + 26], a1263
62:	

printUnsignedLongRec$14:	; call function noellipse-noellipse digitToChar
63:		mov word [bp + 18], printUnsignedLongRec$15
64:		mov [bp + 20], bp
65:		add bp, 18
66:		jmp digitToChar
68:	

printUnsignedLongRec$15:	; post call
70:	

printUnsignedLongRec$16:	; £temporary1873 = return_value
75:	

printUnsignedLongRec$17:	; c = £temporary1873
76:		mov [bp + 18], t1265
78:	

printUnsignedLongRec$18:	; call header integral zero 0 stack zero 0
80:	

printUnsignedLongRec$19:	; parameter c, offset 6
81:		mov a1266, [bp + 18]
82:		mov [bp + 25], a1266
84:	

printUnsignedLongRec$20:	; call function noellipse-noellipse printChar
85:		mov word [bp + 19], printUnsignedLongRec$21
86:		mov [bp + 21], bp
87:		add bp, 19
88:		jmp printChar
90:	

printUnsignedLongRec$21:	; post call
92:	

printUnsignedLongRec$22:	; return
93:		mov t1267, [bp]
94:		mov di, [bp + 4]
95:		mov bp, [bp + 2]
96:		jmp t1267
98:	

printUnsignedLongRec$23:	; function end printUnsignedLongRec
1:	

printUnsignedLong:	; if plus == 0 goto 5
2:		cmp word [bp + 10], 0
3:		je printUnsignedLong$5
5:	

printUnsignedLong$1:	; call header integral zero 0 stack zero 0
7:	

printUnsignedLong$2:	; parameter 43, offset 6
8:		mov byte [bp + 28], 43
10:	

printUnsignedLong$3:	; call function noellipse-noellipse printChar
11:		mov word [bp + 22], printUnsignedLong$4
12:		mov [bp + 24], bp
13:		add bp, 22
14:		jmp printChar
16:	

printUnsignedLong$4:	; post call
18:	

printUnsignedLong$5:	; if space == 0 goto 10
19:		cmp word [bp + 12], 0
20:		je printUnsignedLong$10
22:	

printUnsignedLong$6:	; call header integral zero 0 stack zero 0
24:	

printUnsignedLong$7:	; parameter 32, offset 6
25:		mov byte [bp + 28], 32
27:	

printUnsignedLong$8:	; call function noellipse-noellipse printChar
28:		mov word [bp + 22], printUnsignedLong$9
29:		mov [bp + 24], bp
30:		add bp, 22
31:		jmp printChar
33:	

printUnsignedLong$9:	; post call
35:	

printUnsignedLong$10:	; if grid == 0 goto 29
36:		cmp word [bp + 14], 0
37:		je printUnsignedLong$29
39:	

printUnsignedLong$11:	; if base != 8 goto 16
40:		cmp dword [bp + 16], 8
41:		jne printUnsignedLong$16
43:	

printUnsignedLong$12:	; call header integral zero 0 stack zero 0
45:	

printUnsignedLong$13:	; parameter 48, offset 6
46:		mov byte [bp + 28], 48
48:	

printUnsignedLong$14:	; call function noellipse-noellipse printChar
49:		mov word [bp + 22], printUnsignedLong$15
50:		mov [bp + 24], bp
51:		add bp, 22
52:		jmp printChar
54:	

printUnsignedLong$15:	; post call
56:	

printUnsignedLong$16:	; if base != 16 goto 29
57:		cmp dword [bp + 16], 16
58:		jne printUnsignedLong$29
60:	

printUnsignedLong$17:	; call header integral zero 0 stack zero 0
62:	

printUnsignedLong$18:	; parameter 48, offset 6
63:		mov byte [bp + 28], 48
65:	

printUnsignedLong$19:	; call function noellipse-noellipse printChar
66:		mov word [bp + 22], printUnsignedLong$20
67:		mov [bp + 24], bp
68:		add bp, 22
69:		jmp printChar
71:	

printUnsignedLong$20:	; post call
73:	

printUnsignedLong$21:	; call header integral zero 0 stack zero 0
75:	

printUnsignedLong$22:	; if capital == 0 goto 25
76:		cmp word [bp + 20], 0
77:		je printUnsignedLong$25
79:	

printUnsignedLong$23:	; £temporary1893 = 88
80:		mov t1268, 88
82:	

printUnsignedLong$24:	; goto 26
83:		jmp printUnsignedLong$26
85:	

printUnsignedLong$25:	; £temporary1893 = 120
86:		mov t1269, 120
88:	

printUnsignedLong$26:	; parameter £temporary1893, offset 6
89:		mov [bp + 28], t1269
91:	

printUnsignedLong$27:	; call function noellipse-noellipse printChar
92:		mov word [bp + 22], printUnsignedLong$28
93:		mov [bp + 24], bp
94:		add bp, 22
95:		jmp printChar
97:	

printUnsignedLong$28:	; post call
99:	

printUnsignedLong$29:	; if unsignedValue != 0 goto 35
100:		cmp dword [bp + 6], 0
101:		jne printUnsignedLong$35
103:	

printUnsignedLong$30:	; call header integral zero 0 stack zero 0
105:	

printUnsignedLong$31:	; parameter 48, offset 6
106:		mov byte [bp + 28], 48
108:	

printUnsignedLong$32:	; call function noellipse-noellipse printChar
109:		mov word [bp + 22], printUnsignedLong$33
110:		mov [bp + 24], bp
111:		add bp, 22
112:		jmp printChar
114:	

printUnsignedLong$33:	; post call
116:	

printUnsignedLong$34:	; goto 41
117:		jmp printUnsignedLong$41
119:	

printUnsignedLong$35:	; call header integral zero 0 stack zero 0
121:	

printUnsignedLong$36:	; parameter unsignedValue, offset 6
122:		mov a1270, [bp + 6]
123:		mov [bp + 28], a1270
125:	

printUnsignedLong$37:	; parameter base, offset 10
126:		mov a1271, [bp + 16]
127:		mov [bp + 32], a1271
129:	

printUnsignedLong$38:	; parameter capital, offset 14
130:		mov a1272, [bp + 20]
131:		mov [bp + 36], a1272
133:	

printUnsignedLong$39:	; call function noellipse-noellipse printUnsignedLongRec
134:		mov word [bp + 22], printUnsignedLong$40
135:		mov [bp + 24], bp
136:		add bp, 22
137:		jmp printUnsignedLongRec
139:	

printUnsignedLong$40:	; post call
141:	

printUnsignedLong$41:	; return
142:		mov t1273, [bp]
143:		mov di, [bp + 4]
144:		mov bp, [bp + 2]
145:		jmp t1273
147:	

printUnsignedLong$42:	; function end printUnsignedLong
1:	

printLongDoubleFraction:	; push float longDoubleValue
2:		fld qword [bp + 6]
4:	

printLongDoubleFraction$1:	; push float longDoubleValue
5:		fld qword [bp + 6]
7:	

printLongDoubleFraction$2:	; £temporary1908 = float_to_int longDoubleValue (Long_Double -> Signed_Long_Int)
8:		fistp dword [container4bytes#]
9:		mov t1274, [container4bytes#]
11:	

printLongDoubleFraction$3:	; £temporary1909 = int_to_float £temporary1908 (Signed_Long_Int -> Long_Double)
12:		mov [container4bytes#], t1274
13:		fild dword [container4bytes#]
15:	

printLongDoubleFraction$4:	; £temporary1910 = longDoubleValue - £temporary1909
16:		fsub
18:	

printLongDoubleFraction$5:	; pop float longDoubleValue
19:		fstp qword [bp + 6]
21:	

printLongDoubleFraction$6:	; if precision != 0 goto 8
22:		cmp word [bp + 16], 0
23:		jne printLongDoubleFraction$8
25:	

printLongDoubleFraction$7:	; precision = 6
26:		mov word [bp + 16], 6
28:	

printLongDoubleFraction$8:	; if grid != 0 goto 10
29:		cmp word [bp + 14], 0
30:		jne printLongDoubleFraction$10
32:	

printLongDoubleFraction$9:	; if precision <= 0 goto 14
33:		cmp word [bp + 16], 0
34:		jle printLongDoubleFraction$14
36:	

printLongDoubleFraction$10:	; call header integral zero 0 stack zero 0
38:	

printLongDoubleFraction$11:	; parameter 46, offset 6
39:		mov byte [bp + 24], 46
41:	

printLongDoubleFraction$12:	; call function noellipse-noellipse printChar
42:		mov word [bp + 18], printLongDoubleFraction$13
43:		mov [bp + 20], bp
44:		add bp, 18
45:		jmp printChar
47:	

printLongDoubleFraction$13:	; post call
49:	

printLongDoubleFraction$14:	; £temporary1916 = precision
50:		mov t1275, [bp + 16]
52:	

printLongDoubleFraction$15:	; --precision
53:		dec word [bp + 16]
55:	

printLongDoubleFraction$16:	; if £temporary1916 <= 0 goto 35
56:		cmp t1275, 0
57:		jle printLongDoubleFraction$35
59:	

printLongDoubleFraction$17:	; push float 10.0
60:		fld qword [float8$10.0#]
62:	

printLongDoubleFraction$18:	; push float longDoubleValue
63:		fld qword [bp + 6]
65:	

printLongDoubleFraction$19:	; £temporary1918 = 10.0 * longDoubleValue
66:		fmul
68:	

printLongDoubleFraction$20:	; pop float longDoubleValue10
69:		fstp qword [bp + 18]
71:	

printLongDoubleFraction$21:	; push float longDoubleValue10
72:		fld qword [bp + 18]
74:	

printLongDoubleFraction$22:	; £temporary1919 = float_to_int longDoubleValue10 (Long_Double -> Signed_Int)
75:		fistp word [container2bytes#]
76:		mov t1276, [container2bytes#]
78:	

printLongDoubleFraction$23:	; digitValue = £temporary1919
79:		mov [bp + 26], t1276
81:	

printLongDoubleFraction$24:	; call header integral zero 0 stack zero 0
83:	

printLongDoubleFraction$25:	; £temporary1920 = digitValue + 48
84:		mov a1277, [bp + 26]
85:		add a1277, 48
87:	

printLongDoubleFraction$26:	; £temporary1921 = int_to_int £temporary1920 (Signed_Int -> Signed_Char)
90:		cmp a1277, 0
91:		jge printLongDoubleFraction$27
92:		neg a1277
94:		neg a1277
96:	

printLongDoubleFraction$27:	; parameter £temporary1921, offset 6
97:		mov [bp + 34], a1277
99:	

printLongDoubleFraction$28:	; call function noellipse-noellipse printChar
100:		mov word [bp + 28], printLongDoubleFraction$29
101:		mov [bp + 30], bp
102:		add bp, 28
103:		jmp printChar
105:	

printLongDoubleFraction$29:	; post call
107:	

printLongDoubleFraction$30:	; push float longDoubleValue10
108:		fld qword [bp + 18]
110:	

printLongDoubleFraction$31:	; £temporary1923 = int_to_float digitValue (Signed_Int -> Long_Double)
111:		fild word [bp + 26]
113:	

printLongDoubleFraction$32:	; £temporary1924 = longDoubleValue10 - £temporary1923
114:		fsub
116:	

printLongDoubleFraction$33:	; pop float longDoubleValue
117:		fstp qword [bp + 6]
119:	

printLongDoubleFraction$34:	; goto 14
120:		jmp printLongDoubleFraction$14
122:	

printLongDoubleFraction$35:	; return
123:		mov t1278, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp t1278
128:	

printLongDoubleFraction$36:	; function end printLongDoubleFraction
1:	

printLongDoublePlain:	; push float longDoubleValue
2:		fld qword [bp + 6]
4:	

printLongDoublePlain$1:	; push float 0.0
5:		fldz
7:	

printLongDoublePlain$2:	; if longDoubleValue >= 0.0 goto 12
8:		fcompp
9:		fstsw ax
10:		sahf
11:		jbe printLongDoublePlain$12
13:	

printLongDoublePlain$3:	; call header integral zero 0 stack zero 0
15:	

printLongDoublePlain$4:	; parameter 45, offset 6
16:		mov byte [bp + 28], 45
18:	

printLongDoublePlain$5:	; call function noellipse-noellipse printChar
19:		mov word [bp + 22], printLongDoublePlain$6
20:		mov [bp + 24], bp
21:		add bp, 22
22:		jmp printChar
24:	

printLongDoublePlain$6:	; post call
26:	

printLongDoublePlain$7:	; push float longDoubleValue
27:		fld qword [bp + 6]
29:	

printLongDoublePlain$8:	; £temporary1929 = -longDoubleValue
30:		fchs
32:	

printLongDoublePlain$9:	; pop float longDoubleValue
33:		fstp qword [bp + 6]
35:	

printLongDoublePlain$10:	; plus = 0
36:		mov word [bp + 14], 0
38:	

printLongDoublePlain$11:	; space = 0
39:		mov word [bp + 16], 0
41:	

printLongDoublePlain$12:	; push float longDoubleValue
42:		fld qword [bp + 6]
44:	

printLongDoublePlain$13:	; £temporary1930 = float_to_int longDoubleValue (Long_Double -> Signed_Long_Int)
45:		fistp dword [container4bytes#]
46:		mov t1279, [container4bytes#]
48:	

printLongDoublePlain$14:	; longValue = £temporary1930
49:		mov [bp + 22], t1279
51:	

printLongDoublePlain$15:	; call header integral zero 0 stack zero 0
53:	

printLongDoublePlain$16:	; parameter longValue, offset 6
54:		mov a1280, [bp + 22]
55:		mov [bp + 32], a1280
57:	

printLongDoublePlain$17:	; parameter plus, offset 10
58:		mov a1281, [bp + 14]
59:		mov [bp + 36], a1281
61:	

printLongDoublePlain$18:	; parameter space, offset 12
62:		mov a1282, [bp + 16]
63:		mov [bp + 38], a1282
65:	

printLongDoublePlain$19:	; call function noellipse-noellipse printLongInt
66:		mov word [bp + 26], printLongDoublePlain$20
67:		mov [bp + 28], bp
68:		add bp, 26
69:		jmp printLongInt
71:	

printLongDoublePlain$20:	; post call
73:	

printLongDoublePlain$21:	; push float longDoubleValue
74:		fld qword [bp + 6]
76:	

printLongDoublePlain$22:	; £temporary1932 = int_to_float longValue (Signed_Long_Int -> Long_Double)
77:		fild dword [bp + 22]
79:	

printLongDoublePlain$23:	; £temporary1933 = longDoubleValue - £temporary1932
80:		fsub
82:	

printLongDoublePlain$24:	; pop float longDoubleValue
83:		fstp qword [bp + 6]
85:	

printLongDoublePlain$25:	; call header integral zero 0 stack zero 0
87:	

printLongDoublePlain$26:	; push float longDoubleValue
88:		fld qword [bp + 6]
90:	

printLongDoublePlain$27:	; parameter longDoubleValue, offset 6
91:		fstp qword [bp + 32]
93:	

printLongDoublePlain$28:	; parameter grid, offset 14
94:		mov a1283, [bp + 18]
95:		mov [bp + 40], a1283
97:	

printLongDoublePlain$29:	; parameter precision, offset 16
98:		mov a1284, [bp + 20]
99:		mov [bp + 42], a1284
101:	

printLongDoublePlain$30:	; call function noellipse-noellipse printLongDoubleFraction
102:		mov word [bp + 26], printLongDoublePlain$31
103:		mov [bp + 28], bp
104:		add bp, 26
105:		jmp printLongDoubleFraction
107:	

printLongDoublePlain$31:	; post call
109:	

printLongDoublePlain$32:	; return
110:		mov t1285, [bp]
111:		mov di, [bp + 4]
112:		mov bp, [bp + 2]
113:		jmp t1285
115:	

printLongDoublePlain$33:	; function end printLongDoublePlain
1:	

printLongDoubleExpo:	; push float value
2:		fld qword [bp + 6]
4:	

printLongDoubleExpo$1:	; push float 0.0
5:		fldz
7:	

printLongDoubleExpo$2:	; if value != 0.0 goto 27
8:		fcompp
9:		fstsw ax
10:		sahf
11:		jne printLongDoubleExpo$27
13:	

printLongDoubleExpo$3:	; call header integral zero 0 stack zero 0
15:	

printLongDoubleExpo$4:	; parameter 48, offset 6
16:		mov byte [bp + 30], 48
18:	

printLongDoubleExpo$5:	; call function noellipse-noellipse printChar
19:		mov word [bp + 24], printLongDoubleExpo$6
20:		mov [bp + 26], bp
21:		add bp, 24
22:		jmp printChar
24:	

printLongDoubleExpo$6:	; post call
26:	

printLongDoubleExpo$7:	; call header integral zero 0 stack zero 0
28:	

printLongDoubleExpo$8:	; push float 0.0
29:		fldz
31:	

printLongDoubleExpo$9:	; parameter 0.0, offset 6
32:		fstp qword [bp + 30]
34:	

printLongDoubleExpo$10:	; parameter precision, offset 14
35:		mov a1286, [bp + 20]
36:		mov [bp + 38], a1286
38:	

printLongDoubleExpo$11:	; parameter grid, offset 16
39:		mov a1287, [bp + 18]
40:		mov [bp + 40], a1287
42:	

printLongDoubleExpo$12:	; call function noellipse-noellipse printLongDoubleFraction
43:		mov word [bp + 24], printLongDoubleExpo$13
44:		mov [bp + 26], bp
45:		add bp, 24
46:		jmp printLongDoubleFraction
48:	

printLongDoubleExpo$13:	; post call
50:	

printLongDoubleExpo$14:	; call header integral zero 0 stack zero 0
52:	

printLongDoubleExpo$15:	; if capital == 0 goto 18
53:		cmp word [bp + 22], 0
54:		je printLongDoubleExpo$18
56:	

printLongDoubleExpo$16:	; £temporary1949 = 69
57:		mov t1288, 69
59:	

printLongDoubleExpo$17:	; goto 19
60:		jmp printLongDoubleExpo$19
62:	

printLongDoubleExpo$18:	; £temporary1949 = 101
63:		mov t1289, 101
65:	

printLongDoubleExpo$19:	; parameter £temporary1949, offset 6
66:		mov [bp + 30], t1289
68:	

printLongDoubleExpo$20:	; call function noellipse-noellipse printChar
69:		mov word [bp + 24], printLongDoubleExpo$21
70:		mov [bp + 26], bp
71:		add bp, 24
72:		jmp printChar
74:	

printLongDoubleExpo$21:	; post call
76:	

printLongDoubleExpo$22:	; call header integral zero 0 stack zero 0
78:	

printLongDoubleExpo$23:	; parameter 48, offset 6
79:		mov byte [bp + 30], 48
81:	

printLongDoubleExpo$24:	; call function noellipse-noellipse printChar
82:		mov word [bp + 24], printLongDoubleExpo$25
83:		mov [bp + 26], bp
84:		add bp, 24
85:		jmp printChar
87:	

printLongDoubleExpo$25:	; post call
89:	

printLongDoubleExpo$26:	; goto 80
90:		jmp printLongDoubleExpo$80
92:	

printLongDoubleExpo$27:	; push float value
93:		fld qword [bp + 6]
95:	

printLongDoubleExpo$28:	; push float 0.0
96:		fldz
98:	

printLongDoubleExpo$29:	; if value >= 0.0 goto 37
99:		fcompp
100:		fstsw ax
101:		sahf
102:		jbe printLongDoubleExpo$37
104:	

printLongDoubleExpo$30:	; call header integral zero 0 stack zero 0
106:	

printLongDoubleExpo$31:	; parameter 45, offset 6
107:		mov byte [bp + 30], 45
109:	

printLongDoubleExpo$32:	; call function noellipse-noellipse printChar
110:		mov word [bp + 24], printLongDoubleExpo$33
111:		mov [bp + 26], bp
112:		add bp, 24
113:		jmp printChar
115:	

printLongDoubleExpo$33:	; post call
117:	

printLongDoubleExpo$34:	; push float value
118:		fld qword [bp + 6]
120:	

printLongDoubleExpo$35:	; £temporary1954 = -value
121:		fchs
123:	

printLongDoubleExpo$36:	; pop float value
124:		fstp qword [bp + 6]
126:	

printLongDoubleExpo$37:	; call header integral zero 0 stack zero 0
128:	

printLongDoubleExpo$38:	; push float value
129:		fld qword [bp + 6]
131:	

printLongDoubleExpo$39:	; parameter value, offset 6
132:		fstp qword [bp + 30]
134:	

printLongDoubleExpo$40:	; call function noellipse-noellipse log10
135:		mov word [bp + 24], printLongDoubleExpo$41
136:		mov [bp + 26], bp
137:		add bp, 24
138:		jmp log10
140:	

printLongDoubleExpo$41:	; post call
142:	

printLongDoubleExpo$42:	; £temporary1955 = return_value
144:	

printLongDoubleExpo$43:	; £temporary1956 = float_to_int £temporary1955 (Double -> Signed_Int)
145:		fistp word [container2bytes#]
146:		mov t1290, [container2bytes#]
148:	

printLongDoubleExpo$44:	; expo = £temporary1956
149:		mov [bp + 24], t1290
151:	

printLongDoubleExpo$45:	; push float value
152:		fld qword [bp + 6]
154:	

printLongDoubleExpo$46:	; call header integral zero 0 stack no zero 1
155:		fstp qword [bp + 26]
157:	

printLongDoubleExpo$47:	; push float 10.0
158:		fld qword [float8$10.0#]
160:	

printLongDoubleExpo$48:	; parameter 10.0, offset 6
161:		fstp qword [bp + 40]
163:	

printLongDoubleExpo$49:	; £temporary1957 = int_to_float expo (Signed_Int -> Double)
164:		fild word [bp + 24]
166:	

printLongDoubleExpo$50:	; parameter £temporary1957, offset 14
167:		fstp qword [bp + 48]
169:	

printLongDoubleExpo$51:	; call function noellipse-noellipse pow
170:		mov word [bp + 34], printLongDoubleExpo$52
171:		mov [bp + 36], bp
172:		add bp, 34
173:		jmp pow
175:	

printLongDoubleExpo$52:	; post call
176:		fstp qword [bp + 34]
177:		fld qword [bp + 26]
178:		fld qword [bp + 34]
180:	

printLongDoubleExpo$53:	; £temporary1958 = return_value
182:	

printLongDoubleExpo$54:	; £temporary1959 = value / £temporary1958
183:		fdiv
185:	

printLongDoubleExpo$55:	; pop float value
186:		fstp qword [bp + 6]
188:	

printLongDoubleExpo$56:	; call header integral zero 0 stack zero 0
190:	

printLongDoubleExpo$57:	; push float value
191:		fld qword [bp + 6]
193:	

printLongDoubleExpo$58:	; parameter value, offset 6
194:		fstp qword [bp + 32]
196:	

printLongDoubleExpo$59:	; parameter plus, offset 14
197:		mov a1291, [bp + 14]
198:		mov [bp + 40], a1291
200:	

printLongDoubleExpo$60:	; parameter space, offset 16
201:		mov a1292, [bp + 16]
202:		mov [bp + 42], a1292
204:	

printLongDoubleExpo$61:	; parameter grid, offset 18
205:		mov a1293, [bp + 18]
206:		mov [bp + 44], a1293
208:	

printLongDoubleExpo$62:	; parameter precision, offset 20
209:		mov a1294, [bp + 20]
210:		mov [bp + 46], a1294
212:	

printLongDoubleExpo$63:	; call function noellipse-noellipse printLongDoublePlain
213:		mov word [bp + 26], printLongDoubleExpo$64
214:		mov [bp + 28], bp
215:		add bp, 26
216:		jmp printLongDoublePlain
218:	

printLongDoubleExpo$64:	; post call
220:	

printLongDoubleExpo$65:	; call header integral zero 0 stack zero 0
222:	

printLongDoubleExpo$66:	; if capital == 0 goto 69
223:		cmp word [bp + 22], 0
224:		je printLongDoubleExpo$69
226:	

printLongDoubleExpo$67:	; £temporary1965 = 69
227:		mov t1295, 69
229:	

printLongDoubleExpo$68:	; goto 70
230:		jmp printLongDoubleExpo$70
232:	

printLongDoubleExpo$69:	; £temporary1965 = 101
233:		mov t1296, 101
235:	

printLongDoubleExpo$70:	; parameter £temporary1965, offset 6
236:		mov [bp + 32], t1296
238:	

printLongDoubleExpo$71:	; call function noellipse-noellipse printChar
239:		mov word [bp + 26], printLongDoubleExpo$72
240:		mov [bp + 28], bp
241:		add bp, 26
242:		jmp printChar
244:	

printLongDoubleExpo$72:	; post call
246:	

printLongDoubleExpo$73:	; call header integral zero 0 stack zero 0
248:	

printLongDoubleExpo$74:	; £temporary1967 = int_to_int expo (Signed_Int -> Signed_Long_Int)
249:		mov a1297, [bp + 24]
251:		and a1297, 65535
253:		cmp a1297, 0
254:		jge printLongDoubleExpo$75
255:		neg a1297
257:		neg a1297
259:	

printLongDoubleExpo$75:	; parameter £temporary1967, offset 6
260:		mov [bp + 32], a1297
262:	

printLongDoubleExpo$76:	; parameter 1, offset 10
263:		mov word [bp + 36], 1
265:	

printLongDoubleExpo$77:	; parameter 0, offset 12
266:		mov word [bp + 38], 0
268:	

printLongDoubleExpo$78:	; call function noellipse-noellipse printLongInt
269:		mov word [bp + 26], printLongDoubleExpo$79
270:		mov [bp + 28], bp
271:		add bp, 26
272:		jmp printLongInt
274:	

printLongDoubleExpo$79:	; post call
276:	

printLongDoubleExpo$80:	; return
277:		mov t1298, [bp]
278:		mov di, [bp + 4]
279:		mov bp, [bp + 2]
280:		jmp t1298
282:	

printLongDoubleExpo$81:	; function end printLongDoubleExpo
1:	

checkWidthAndPrecision:	; if widthPtr == 0 goto 9
2:		cmp word [bp + 8], 0
3:		je checkWidthAndPrecision$9
5:	

checkWidthAndPrecision$1:	; £temporary1989 -> widthPtr = *widthPtr
6:		mov a1299, [bp + 8]
8:	

checkWidthAndPrecision$2:	; if £temporary1989 -> widthPtr != -1 goto 9
9:		cmp word [a1299], -1
10:		jne checkWidthAndPrecision$9
12:	

checkWidthAndPrecision$3:	; £temporary1992 -> widthPtr = *widthPtr
13:		mov a1300, [bp + 8]
15:	

checkWidthAndPrecision$4:	; arg_list = arg_list + 2
16:		add word [bp + 6], 2
18:	

checkWidthAndPrecision$5:	; £temporary1994 = arg_list - 2
19:		mov a1301, [bp + 6]
20:		sub a1301, 2
22:	

checkWidthAndPrecision$6:	; £temporary1995 = int_to_int £temporary1994 (Signed_Int -> Pointer)
25:	

checkWidthAndPrecision$7:	; £temporary1996 -> £temporary1995 = *£temporary1995
27:	

checkWidthAndPrecision$8:	; £temporary1992 -> widthPtr = £temporary1996 -> £temporary1995
28:		mov t1302, [a1301]
29:		mov [a1300], t1302
31:	

checkWidthAndPrecision$9:	; if precisionPtr == 0 goto 18
32:		cmp word [bp + 10], 0
33:		je checkWidthAndPrecision$18
35:	

checkWidthAndPrecision$10:	; £temporary1998 -> precisionPtr = *precisionPtr
36:		mov a1303, [bp + 10]
38:	

checkWidthAndPrecision$11:	; if £temporary1998 -> precisionPtr != -1 goto 18
39:		cmp word [a1303], -1
40:		jne checkWidthAndPrecision$18
42:	

checkWidthAndPrecision$12:	; £temporary2001 -> precisionPtr = *precisionPtr
43:		mov a1304, [bp + 10]
45:	

checkWidthAndPrecision$13:	; arg_list = arg_list + 2
46:		add word [bp + 6], 2
48:	

checkWidthAndPrecision$14:	; £temporary2003 = arg_list - 2
49:		mov a1305, [bp + 6]
50:		sub a1305, 2
52:	

checkWidthAndPrecision$15:	; £temporary2004 = int_to_int £temporary2003 (Signed_Int -> Pointer)
55:	

checkWidthAndPrecision$16:	; £temporary2005 -> £temporary2004 = *£temporary2004
57:	

checkWidthAndPrecision$17:	; £temporary2001 -> precisionPtr = £temporary2005 -> £temporary2004
58:		mov t1306, [a1305]
59:		mov [a1304], t1306
61:	

checkWidthAndPrecision$18:	; return_value = arg_list
62:		mov a1307, [bp + 6]
64:	

checkWidthAndPrecision$19:	; return
65:		mov t1308, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t1308
70:	

checkWidthAndPrecision$20:	; function end checkWidthAndPrecision
1:	

printArgument:	; £temporary2006 -> format = *format
2:		mov a1309, [bp + 6]
4:	

printArgument$1:	; c = £temporary2006 -> format
5:		mov t1310, [a1309]
6:		mov [bp + 30], t1310
8:	

printArgument$2:	; case c == 100 goto 21
9:		mov a1311, [bp + 30]
10:		cmp a1311, 100
11:		je printArgument$21
13:	

printArgument$3:	; case c == 105 goto 21
14:		cmp a1311, 105
15:		je printArgument$21
17:	

printArgument$4:	; case c == 99 goto 73
18:		cmp a1311, 99
19:		je printArgument$73
21:	

printArgument$5:	; case c == 115 goto 93
22:		cmp a1311, 115
23:		je printArgument$93
25:	

printArgument$6:	; case c == 88 goto 113
26:		cmp a1311, 88
27:		je printArgument$113
29:	

printArgument$7:	; case c == 120 goto 113
30:		cmp a1311, 120
31:		je printArgument$113
33:	

printArgument$8:	; case c == 98 goto 113
34:		cmp a1311, 98
35:		je printArgument$113
37:	

printArgument$9:	; case c == 111 goto 113
38:		cmp a1311, 111
39:		je printArgument$113
41:	

printArgument$10:	; case c == 117 goto 113
42:		cmp a1311, 117
43:		je printArgument$113
45:	

printArgument$11:	; case c == 71 goto 173
46:		cmp a1311, 71
47:		je printArgument$173
49:	

printArgument$12:	; case c == 103 goto 173
50:		cmp a1311, 103
51:		je printArgument$173
53:	

printArgument$13:	; case c == 69 goto 173
54:		cmp a1311, 69
55:		je printArgument$173
57:	

printArgument$14:	; case c == 101 goto 173
58:		cmp a1311, 101
59:		je printArgument$173
61:	

printArgument$15:	; case c == 102 goto 173
62:		cmp a1311, 102
63:		je printArgument$173
65:	

printArgument$16:	; case c == 112 goto 299
66:		cmp a1311, 112
67:		je printArgument$299
69:	

printArgument$17:	; case c == 110 goto 324
70:		cmp a1311, 110
71:		je printArgument$324
73:	

printArgument$18:	; case c == 37 goto 346
74:		cmp a1311, 37
75:		je printArgument$346
77:	

printArgument$19:	; case end c
79:	

printArgument$20:	; goto 359
80:		jmp printArgument$359
82:	

printArgument$21:	; if shortInt == 0 goto 30
83:		cmp word [bp + 20], 0
84:		je printArgument$30
86:	

printArgument$22:	; arg_list = arg_list + 2
87:		add word [bp + 8], 2
89:	

printArgument$23:	; £temporary2008 = arg_list - 2
90:		mov a1312, [bp + 8]
91:		sub a1312, 2
93:	

printArgument$24:	; £temporary2009 = int_to_int £temporary2008 (Signed_Int -> Pointer)
96:	

printArgument$25:	; £temporary2010 -> £temporary2009 = *£temporary2009
98:	

printArgument$26:	; £temporary2011 = int_to_int £temporary2010 -> £temporary2009 (Signed_Int -> Signed_Short_Int)
99:		mov t1313, [a1312]
102:		cmp t1313, 0
103:		jge printArgument$27
104:		neg t1313
106:		neg t1313
108:	

printArgument$27:	; £temporary2012 = int_to_int £temporary2011 (Signed_Short_Int -> Signed_Long_Int)
110:		and t1313, 255
112:		cmp t1313, 0
113:		jge printArgument$28
114:		neg t1313
116:		neg t1313
118:	

printArgument$28:	; longValue = £temporary2012
119:		mov [bp + 44], t1313
121:	

printArgument$29:	; goto 43
122:		jmp printArgument$43
124:	

printArgument$30:	; if longInt == 0 goto 37
125:		cmp word [bp + 22], 0
126:		je printArgument$37
128:	

printArgument$31:	; arg_list = arg_list + 4
129:		add word [bp + 8], 4
131:	

printArgument$32:	; £temporary2014 = arg_list - 4
132:		mov a1314, [bp + 8]
133:		sub a1314, 4
135:	

printArgument$33:	; £temporary2015 = int_to_int £temporary2014 (Signed_Int -> Pointer)
138:	

printArgument$34:	; £temporary2016 -> £temporary2015 = *£temporary2015
140:	

printArgument$35:	; longValue = £temporary2016 -> £temporary2015
141:		mov t1315, [a1314]
142:		mov [bp + 44], t1315
144:	

printArgument$36:	; goto 43
145:		jmp printArgument$43
147:	

printArgument$37:	; arg_list = arg_list + 2
148:		add word [bp + 8], 2
150:	

printArgument$38:	; £temporary2018 = arg_list - 2
151:		mov a1316, [bp + 8]
152:		sub a1316, 2
154:	

printArgument$39:	; £temporary2019 = int_to_int £temporary2018 (Signed_Int -> Pointer)
157:	

printArgument$40:	; £temporary2020 -> £temporary2019 = *£temporary2019
159:	

printArgument$41:	; £temporary2021 = int_to_int £temporary2020 -> £temporary2019 (Signed_Int -> Signed_Long_Int)
160:		mov t1317, [a1316]
162:		and t1317, 65535
164:		cmp t1317, 0
165:		jge printArgument$42
166:		neg t1317
168:		neg t1317
170:	

printArgument$42:	; longValue = £temporary2021
171:		mov [bp + 44], t1317
173:	

printArgument$43:	; if negativePtr == 0 goto 50
174:		cmp word [bp + 28], 0
175:		je printArgument$50
177:	

printArgument$44:	; £temporary2025 -> negativePtr = *negativePtr
178:		mov a1318, [bp + 28]
180:	

printArgument$45:	; if longValue >= 0 goto 48
181:		cmp dword [bp + 44], 0
182:		jge printArgument$48
184:	

printArgument$46:	; £temporary2027 = 1
185:		mov t1319, 1
187:	

printArgument$47:	; goto 49
188:		jmp printArgument$49
190:	

printArgument$48:	; £temporary2027 = 0
191:		mov t1320, 0
193:	

printArgument$49:	; £temporary2025 -> negativePtr = £temporary2027
194:		mov [a1318], t1320
196:	

printArgument$50:	; if sign != 0 goto 57
197:		cmp word [bp + 26], 0
198:		jne printArgument$57
200:	

printArgument$51:	; call header integral zero 0 stack zero 0
202:	

printArgument$52:	; parameter longValue, offset 6
203:		mov a1321, [bp + 44]
204:		mov [bp + 54], a1321
206:	

printArgument$53:	; call function noellipse-noellipse labs
207:		mov word [bp + 48], printArgument$54
208:		mov [bp + 50], bp
209:		add bp, 48
210:		jmp labs
212:	

printArgument$54:	; post call
214:	

printArgument$55:	; £temporary2030 = return_value
219:	

printArgument$56:	; longValue = £temporary2030
220:		mov [bp + 44], t1323
222:	

printArgument$57:	; call header integral zero 0 stack zero 0
224:	

printArgument$58:	; parameter arg_list, offset 6
225:		mov a1324, [bp + 8]
226:		mov [bp + 54], a1324
228:	

printArgument$59:	; parameter widthPtr, offset 8
229:		mov a1325, [bp + 16]
230:		mov [bp + 56], a1325
232:	

printArgument$60:	; £temporary2031 = &precision
233:		mov t1326, bp
234:		add t1326, 18
236:	

printArgument$61:	; parameter £temporary2031, offset 10
237:		mov [bp + 58], t1326
239:	

printArgument$62:	; call function noellipse-noellipse checkWidthAndPrecision
240:		mov word [bp + 48], printArgument$63
241:		mov [bp + 50], bp
242:		add bp, 48
243:		jmp checkWidthAndPrecision
245:	

printArgument$63:	; post call
247:	

printArgument$64:	; £temporary2032 = return_value
252:	

printArgument$65:	; arg_list = £temporary2032
253:		mov [bp + 8], t1328
255:	

printArgument$66:	; call header integral zero 0 stack zero 0
257:	

printArgument$67:	; parameter longValue, offset 6
258:		mov a1329, [bp + 44]
259:		mov [bp + 54], a1329
261:	

printArgument$68:	; parameter plus, offset 10
262:		mov a1330, [bp + 10]
263:		mov [bp + 58], a1330
265:	

printArgument$69:	; parameter space, offset 12
266:		mov a1331, [bp + 12]
267:		mov [bp + 60], a1331
269:	

printArgument$70:	; call function noellipse-noellipse printLongInt
270:		mov word [bp + 48], printArgument$71
271:		mov [bp + 50], bp
272:		add bp, 48
273:		jmp printLongInt
275:	

printArgument$71:	; post call
277:	

printArgument$72:	; goto 359
278:		jmp printArgument$359
280:	

printArgument$73:	; arg_list = arg_list + 2
281:		add word [bp + 8], 2
283:	

printArgument$74:	; £temporary2035 = arg_list - 2
284:		mov a1332, [bp + 8]
285:		sub a1332, 2
287:	

printArgument$75:	; £temporary2036 = int_to_int £temporary2035 (Signed_Int -> Pointer)
290:	

printArgument$76:	; £temporary2037 -> £temporary2036 = *£temporary2036
292:	

printArgument$77:	; £temporary2038 = int_to_int £temporary2037 -> £temporary2036 (Signed_Int -> Signed_Char)
293:		mov t1333, [a1332]
296:		cmp t1333, 0
297:		jge printArgument$78
298:		neg t1333
300:		neg t1333
302:	

printArgument$78:	; charValue = £temporary2038
303:		mov [bp + 31], t1333
305:	

printArgument$79:	; call header integral zero 0 stack zero 0
307:	

printArgument$80:	; parameter arg_list, offset 6
308:		mov a1334, [bp + 8]
309:		mov [bp + 50], a1334
311:	

printArgument$81:	; parameter widthPtr, offset 8
312:		mov a1335, [bp + 16]
313:		mov [bp + 52], a1335
315:	

printArgument$82:	; £temporary2039 = &precision
316:		mov t1336, bp
317:		add t1336, 18
319:	

printArgument$83:	; parameter £temporary2039, offset 10
320:		mov [bp + 54], t1336
322:	

printArgument$84:	; call function noellipse-noellipse checkWidthAndPrecision
323:		mov word [bp + 44], printArgument$85
324:		mov [bp + 46], bp
325:		add bp, 44
326:		jmp checkWidthAndPrecision
328:	

printArgument$85:	; post call
330:	

printArgument$86:	; £temporary2040 = return_value
335:	

printArgument$87:	; arg_list = £temporary2040
336:		mov [bp + 8], t1338
338:	

printArgument$88:	; call header integral zero 0 stack zero 0
340:	

printArgument$89:	; parameter charValue, offset 6
341:		mov a1339, [bp + 31]
342:		mov [bp + 50], a1339
344:	

printArgument$90:	; call function noellipse-noellipse printChar
345:		mov word [bp + 44], printArgument$91
346:		mov [bp + 46], bp
347:		add bp, 44
348:		jmp printChar
350:	

printArgument$91:	; post call
352:	

printArgument$92:	; goto 359
353:		jmp printArgument$359
355:	

printArgument$93:	; arg_list = arg_list + 2
356:		add word [bp + 8], 2
358:	

printArgument$94:	; £temporary2043 = arg_list - 2
359:		mov a1340, [bp + 8]
360:		sub a1340, 2
362:	

printArgument$95:	; £temporary2044 = int_to_int £temporary2043 (Signed_Int -> Pointer)
365:	

printArgument$96:	; £temporary2045 -> £temporary2044 = *£temporary2044
367:	

printArgument$97:	; stringValue = £temporary2045 -> £temporary2044
368:		mov t1341, [a1340]
369:		mov [bp + 44], t1341
371:	

printArgument$98:	; call header integral zero 0 stack zero 0
373:	

printArgument$99:	; parameter arg_list, offset 6
374:		mov a1342, [bp + 8]
375:		mov [bp + 52], a1342
377:	

printArgument$100:	; parameter widthPtr, offset 8
378:		mov a1343, [bp + 16]
379:		mov [bp + 54], a1343
381:	

printArgument$101:	; £temporary2046 = &precision
382:		mov t1344, bp
383:		add t1344, 18
385:	

printArgument$102:	; parameter £temporary2046, offset 10
386:		mov [bp + 56], t1344
388:	

printArgument$103:	; call function noellipse-noellipse checkWidthAndPrecision
389:		mov word [bp + 46], printArgument$104
390:		mov [bp + 48], bp
391:		add bp, 46
392:		jmp checkWidthAndPrecision
394:	

printArgument$104:	; post call
396:	

printArgument$105:	; £temporary2047 = return_value
401:	

printArgument$106:	; arg_list = £temporary2047
402:		mov [bp + 8], t1346
404:	

printArgument$107:	; call header integral zero 0 stack zero 0
406:	

printArgument$108:	; parameter stringValue, offset 6
407:		mov a1347, [bp + 44]
408:		mov [bp + 52], a1347
410:	

printArgument$109:	; parameter precision, offset 8
411:		mov a1348, [bp + 18]
412:		mov [bp + 54], a1348
414:	

printArgument$110:	; call function noellipse-noellipse printString
415:		mov word [bp + 46], printArgument$111
416:		mov [bp + 48], bp
417:		add bp, 46
418:		jmp printString
420:	

printArgument$111:	; post call
422:	

printArgument$112:	; goto 359
423:		jmp printArgument$359
425:	

printArgument$113:	; if c != 117 goto 116
426:		cmp byte [bp + 30], 117
427:		jne printArgument$116
429:	

printArgument$114:	; £temporary2063 = 10
430:		mov t1349, 10
432:	

printArgument$115:	; goto 125
433:		jmp printArgument$125
435:	

printArgument$116:	; if c != 111 goto 119
436:		cmp byte [bp + 30], 111
437:		jne printArgument$119
439:	

printArgument$117:	; £temporary2059 = 8
440:		mov t1350, 8
442:	

printArgument$118:	; goto 124
443:		jmp printArgument$124
445:	

printArgument$119:	; if c != 98 goto 122
446:		cmp byte [bp + 30], 98
447:		jne printArgument$122
449:	

printArgument$120:	; £temporary2055 = 2
450:		mov t1351, 2
452:	

printArgument$121:	; goto 123
453:		jmp printArgument$123
455:	

printArgument$122:	; £temporary2055 = 16
456:		mov t1352, 16
458:	

printArgument$123:	; £temporary2059 = £temporary2055
460:	

printArgument$124:	; £temporary2063 = £temporary2059
462:	

printArgument$125:	; base = £temporary2063
463:		mov [bp + 44], t1352
465:	

printArgument$126:	; if shortInt == 0 goto 135
466:		cmp word [bp + 20], 0
467:		je printArgument$135
469:	

printArgument$127:	; arg_list = arg_list + 2
470:		add word [bp + 8], 2
472:	

printArgument$128:	; £temporary2065 = arg_list - 2
473:		mov a1355, [bp + 8]
474:		sub a1355, 2
476:	

printArgument$129:	; £temporary2066 = int_to_int £temporary2065 (Signed_Int -> Pointer)
479:	

printArgument$130:	; £temporary2067 -> £temporary2066 = *£temporary2066
481:	

printArgument$131:	; £temporary2068 = int_to_int £temporary2067 -> £temporary2066 (Unsigned_Int -> Unsigned_Short_Int)
482:		mov t1356, [a1355]
485:	

printArgument$132:	; £temporary2069 = int_to_int £temporary2068 (Unsigned_Short_Int -> Unsigned_Long_Int)
487:		and t1356, 255
489:	

printArgument$133:	; value = £temporary2069
490:		mov [bp + 48], t1356
492:	

printArgument$134:	; goto 148
493:		jmp printArgument$148
495:	

printArgument$135:	; if longInt == 0 goto 142
496:		cmp word [bp + 22], 0
497:		je printArgument$142
499:	

printArgument$136:	; arg_list = arg_list + 4
500:		add word [bp + 8], 4
502:	

printArgument$137:	; £temporary2071 = arg_list - 4
503:		mov a1357, [bp + 8]
504:		sub a1357, 4
506:	

printArgument$138:	; £temporary2072 = int_to_int £temporary2071 (Signed_Int -> Pointer)
509:	

printArgument$139:	; £temporary2073 -> £temporary2072 = *£temporary2072
511:	

printArgument$140:	; value = £temporary2073 -> £temporary2072
512:		mov t1358, [a1357]
513:		mov [bp + 48], t1358
515:	

printArgument$141:	; goto 148
516:		jmp printArgument$148
518:	

printArgument$142:	; arg_list = arg_list + 2
519:		add word [bp + 8], 2
521:	

printArgument$143:	; £temporary2075 = arg_list - 2
522:		mov a1359, [bp + 8]
523:		sub a1359, 2
525:	

printArgument$144:	; £temporary2076 = int_to_int £temporary2075 (Signed_Int -> Pointer)
528:	

printArgument$145:	; £temporary2077 -> £temporary2076 = *£temporary2076
530:	

printArgument$146:	; £temporary2078 = int_to_int £temporary2077 -> £temporary2076 (Unsigned_Int -> Unsigned_Long_Int)
531:		mov t1360, [a1359]
533:		and t1360, 65535
535:	

printArgument$147:	; value = £temporary2078
536:		mov [bp + 48], t1360
538:	

printArgument$148:	; call header integral zero 0 stack zero 0
540:	

printArgument$149:	; parameter arg_list, offset 6
541:		mov a1361, [bp + 8]
542:		mov [bp + 58], a1361
544:	

printArgument$150:	; parameter widthPtr, offset 8
545:		mov a1362, [bp + 16]
546:		mov [bp + 60], a1362
548:	

printArgument$151:	; £temporary2081 = &precision
549:		mov t1363, bp
550:		add t1363, 18
552:	

printArgument$152:	; parameter £temporary2081, offset 10
553:		mov [bp + 62], t1363
555:	

printArgument$153:	; call function noellipse-noellipse checkWidthAndPrecision
556:		mov word [bp + 52], printArgument$154
557:		mov [bp + 54], bp
558:		add bp, 52
559:		jmp checkWidthAndPrecision
561:	

printArgument$154:	; post call
563:	

printArgument$155:	; £temporary2082 = return_value
568:	

printArgument$156:	; arg_list = £temporary2082
569:		mov [bp + 8], t1365
571:	

printArgument$157:	; call header integral zero 0 stack zero 0
573:	

printArgument$158:	; parameter value, offset 6
574:		mov a1366, [bp + 48]
575:		mov [bp + 58], a1366
577:	

printArgument$159:	; parameter plus, offset 10
578:		mov a1367, [bp + 10]
579:		mov [bp + 62], a1367
581:	

printArgument$160:	; parameter space, offset 12
582:		mov a1368, [bp + 12]
583:		mov [bp + 64], a1368
585:	

printArgument$161:	; parameter grid, offset 14
586:		mov a1369, [bp + 14]
587:		mov [bp + 66], a1369
589:	

printArgument$162:	; parameter base, offset 16
590:		mov a1370, [bp + 44]
591:		mov [bp + 68], a1370
593:	

printArgument$163:	; call header integral zero 0 stack zero 0
595:	

printArgument$164:	; £temporary2083 = int_to_int c (Signed_Char -> Signed_Int)
596:		mov a1371, [bp + 30]
598:		and a1371, 255
600:		cmp a1371, 0
601:		jge printArgument$165
602:		neg a1371
604:		neg a1371
606:	

printArgument$165:	; parameter £temporary2083, offset 26
607:		mov [bp + 78], a1371
609:	

printArgument$166:	; call function noellipse-noellipse isupper
610:		mov word [bp + 72], printArgument$167
611:		mov [bp + 74], bp
612:		add bp, 72
613:		jmp isupper
615:	

printArgument$167:	; post call
617:	

printArgument$168:	; £temporary2084 = return_value
622:	

printArgument$169:	; parameter £temporary2084, offset 20
623:		mov [bp + 72], t1373
625:	

printArgument$170:	; call function noellipse-noellipse printUnsignedLong
626:		mov word [bp + 52], printArgument$171
627:		mov [bp + 54], bp
628:		add bp, 52
629:		jmp printUnsignedLong
631:	

printArgument$171:	; post call
633:	

printArgument$172:	; goto 359
634:		jmp printArgument$359
636:	

printArgument$173:	; if longDouble == 0 goto 190
637:		cmp word [bp + 24], 0
638:		je printArgument$190
640:	

printArgument$174:	; arg_list = arg_list + 8
641:		add word [bp + 8], 8
643:	

printArgument$175:	; £temporary2087 = arg_list - 8
644:		mov a1374, [bp + 8]
645:		sub a1374, 8
647:	

printArgument$176:	; £temporary2088 = int_to_int £temporary2087 (Signed_Int -> Pointer)
650:	

printArgument$177:	; £temporary2089 -> £temporary2088 = *£temporary2088
652:	

printArgument$178:	; push float £temporary2089 -> £temporary2088
653:		fld qword [a1374]
655:	

printArgument$179:	; pop float longDoubleValue
656:		fstp qword [bp + 34]
658:	

printArgument$180:	; call header integral zero 0 stack zero 0
660:	

printArgument$181:	; push float longDoubleValue
661:		fld qword [bp + 34]
663:	

printArgument$182:	; parameter longDoubleValue, offset 6
664:		fstp qword [bp + 50]
666:	

printArgument$183:	; parameter 0, offset 14
667:		mov word [bp + 58], 0
669:	

printArgument$184:	; parameter 0, offset 16
670:		mov word [bp + 60], 0
672:	

printArgument$185:	; parameter 0, offset 18
673:		mov word [bp + 62], 0
675:	

printArgument$186:	; parameter 3, offset 20
676:		mov word [bp + 64], 3
678:	

printArgument$187:	; call function noellipse-noellipse printLongDoublePlain
679:		mov word [bp + 44], printArgument$188
680:		mov [bp + 46], bp
681:		add bp, 44
682:		jmp printLongDoublePlain
684:	

printArgument$188:	; post call
686:	

printArgument$189:	; goto 196
687:		jmp printArgument$196
689:	

printArgument$190:	; arg_list = arg_list + 8
690:		add word [bp + 8], 8
692:	

printArgument$191:	; £temporary2092 = arg_list - 8
693:		mov a1375, [bp + 8]
694:		sub a1375, 8
696:	

printArgument$192:	; £temporary2093 = int_to_int £temporary2092 (Signed_Int -> Pointer)
699:	

printArgument$193:	; £temporary2094 -> £temporary2093 = *£temporary2093
701:	

printArgument$194:	; push float £temporary2094 -> £temporary2093
702:		fld qword [a1375]
704:	

printArgument$195:	; pop float longDoubleValue
705:		fstp qword [bp + 34]
707:	

printArgument$196:	; if negativePtr == 0 goto 205
708:		cmp word [bp + 28], 0
709:		je printArgument$205
711:	

printArgument$197:	; £temporary2098 -> negativePtr = *negativePtr
712:		mov a1376, [bp + 28]
714:	

printArgument$198:	; push float longDoubleValue
715:		fld qword [bp + 34]
717:	

printArgument$199:	; push 0
718:		fldz
720:	

printArgument$200:	; if longDoubleValue >= 0 goto 203
721:		fcompp
722:		fstsw ax
723:		sahf
724:		jbe printArgument$203
726:	

printArgument$201:	; £temporary2100 = 1
727:		mov t1377, 1
729:	

printArgument$202:	; goto 204
730:		jmp printArgument$204
732:	

printArgument$203:	; £temporary2100 = 0
733:		mov t1378, 0
735:	

printArgument$204:	; £temporary2098 -> negativePtr = £temporary2100
736:		mov [a1376], t1378
738:	

printArgument$205:	; if sign != 0 goto 213
739:		cmp word [bp + 26], 0
740:		jne printArgument$213
742:	

printArgument$206:	; call header integral zero 0 stack zero 0
744:	

printArgument$207:	; push float longDoubleValue
745:		fld qword [bp + 34]
747:	

printArgument$208:	; parameter longDoubleValue, offset 6
748:		fstp qword [bp + 50]
750:	

printArgument$209:	; call function noellipse-noellipse fabs
751:		mov word [bp + 44], printArgument$210
752:		mov [bp + 46], bp
753:		add bp, 44
754:		jmp fabs
756:	

printArgument$210:	; post call
758:	

printArgument$211:	; £temporary2103 = return_value
760:	

printArgument$212:	; pop float longDoubleValue
761:		fstp qword [bp + 34]
763:	

printArgument$213:	; call header integral zero 0 stack zero 0
765:	

printArgument$214:	; parameter arg_list, offset 6
766:		mov a1379, [bp + 8]
767:		mov [bp + 50], a1379
769:	

printArgument$215:	; parameter widthPtr, offset 8
770:		mov a1380, [bp + 16]
771:		mov [bp + 52], a1380
773:	

printArgument$216:	; £temporary2104 = &precision
774:		mov t1381, bp
775:		add t1381, 18
777:	

printArgument$217:	; parameter £temporary2104, offset 10
778:		mov [bp + 54], t1381
780:	

printArgument$218:	; call function noellipse-noellipse checkWidthAndPrecision
781:		mov word [bp + 44], printArgument$219
782:		mov [bp + 46], bp
783:		add bp, 44
784:		jmp checkWidthAndPrecision
786:	

printArgument$219:	; post call
788:	

printArgument$220:	; £temporary2105 = return_value
793:	

printArgument$221:	; arg_list = £temporary2105
794:		mov [bp + 8], t1383
796:	

printArgument$222:	; if c != 102 goto 233
797:		cmp byte [bp + 30], 102
798:		jne printArgument$233
800:	

printArgument$223:	; call header integral zero 0 stack zero 0
802:	

printArgument$224:	; push float longDoubleValue
803:		fld qword [bp + 34]
805:	

printArgument$225:	; parameter longDoubleValue, offset 6
806:		fstp qword [bp + 50]
808:	

printArgument$226:	; parameter plus, offset 14
809:		mov a1384, [bp + 10]
810:		mov [bp + 58], a1384
812:	

printArgument$227:	; parameter space, offset 16
813:		mov a1385, [bp + 12]
814:		mov [bp + 60], a1385
816:	

printArgument$228:	; parameter grid, offset 18
817:		mov a1386, [bp + 14]
818:		mov [bp + 62], a1386
820:	

printArgument$229:	; parameter precision, offset 20
821:		mov a1387, [bp + 18]
822:		mov [bp + 64], a1387
824:	

printArgument$230:	; call function noellipse-noellipse printLongDoublePlain
825:		mov word [bp + 44], printArgument$231
826:		mov [bp + 46], bp
827:		add bp, 44
828:		jmp printLongDoublePlain
830:	

printArgument$231:	; post call
832:	

printArgument$232:	; goto 359
833:		jmp printArgument$359
835:	

printArgument$233:	; call header integral zero 0 stack zero 0
837:	

printArgument$234:	; £temporary2108 = int_to_int c (Signed_Char -> Signed_Int)
838:		mov a1388, [bp + 30]
840:		and a1388, 255
842:		cmp a1388, 0
843:		jge printArgument$235
844:		neg a1388
846:		neg a1388
848:	

printArgument$235:	; parameter £temporary2108, offset 6
849:		mov [bp + 50], a1388
851:	

printArgument$236:	; call function noellipse-noellipse tolower
852:		mov word [bp + 44], printArgument$237
853:		mov [bp + 46], bp
854:		add bp, 44
855:		jmp tolower
857:	

printArgument$237:	; post call
859:	

printArgument$238:	; £temporary2109 = return_value
864:	

printArgument$239:	; if £temporary2109 != 101 goto 257
865:		cmp t1390, 101
866:		jne printArgument$257
868:	

printArgument$240:	; call header integral zero 0 stack zero 0
870:	

printArgument$241:	; push float longDoubleValue
871:		fld qword [bp + 34]
873:	

printArgument$242:	; parameter longDoubleValue, offset 6
874:		fstp qword [bp + 50]
876:	

printArgument$243:	; parameter plus, offset 14
877:		mov a1391, [bp + 10]
878:		mov [bp + 58], a1391
880:	

printArgument$244:	; parameter space, offset 16
881:		mov a1392, [bp + 12]
882:		mov [bp + 60], a1392
884:	

printArgument$245:	; parameter grid, offset 18
885:		mov a1393, [bp + 14]
886:		mov [bp + 62], a1393
888:	

printArgument$246:	; parameter precision, offset 20
889:		mov a1394, [bp + 18]
890:		mov [bp + 64], a1394
892:	

printArgument$247:	; call header integral zero 0 stack zero 0
894:	

printArgument$248:	; £temporary2111 = int_to_int c (Signed_Char -> Signed_Int)
895:		mov a1395, [bp + 30]
897:		and a1395, 255
899:		cmp a1395, 0
900:		jge printArgument$249
901:		neg a1395
903:		neg a1395
905:	

printArgument$249:	; parameter £temporary2111, offset 28
906:		mov [bp + 72], a1395
908:	

printArgument$250:	; call function noellipse-noellipse isupper
909:		mov word [bp + 66], printArgument$251
910:		mov [bp + 68], bp
911:		add bp, 66
912:		jmp isupper
914:	

printArgument$251:	; post call
916:	

printArgument$252:	; £temporary2112 = return_value
921:	

printArgument$253:	; parameter £temporary2112, offset 22
922:		mov [bp + 66], t1397
924:	

printArgument$254:	; call function noellipse-noellipse printLongDoubleExpo
925:		mov word [bp + 44], printArgument$255
926:		mov [bp + 46], bp
927:		add bp, 44
928:		jmp printLongDoubleExpo
930:	

printArgument$255:	; post call
932:	

printArgument$256:	; goto 359
933:		jmp printArgument$359
935:	

printArgument$257:	; call header integral zero 0 stack zero 0
937:	

printArgument$258:	; call header integral zero 0 stack zero 0
939:	

printArgument$259:	; push float longDoubleValue
940:		fld qword [bp + 34]
942:	

printArgument$260:	; parameter longDoubleValue, offset 6
943:		fstp qword [bp + 50]
945:	

printArgument$261:	; call function noellipse-noellipse fabs
946:		mov word [bp + 44], printArgument$262
947:		mov [bp + 46], bp
948:		add bp, 44
949:		jmp fabs
951:	

printArgument$262:	; post call
953:	

printArgument$263:	; £temporary2114 = return_value
955:	

printArgument$264:	; parameter £temporary2114, offset 6
956:		fstp qword [bp + 50]
958:	

printArgument$265:	; call function noellipse-noellipse log10
959:		mov word [bp + 44], printArgument$266
960:		mov [bp + 46], bp
961:		add bp, 44
962:		jmp log10
964:	

printArgument$266:	; post call
966:	

printArgument$267:	; £temporary2115 = return_value
968:	

printArgument$268:	; £temporary2116 = float_to_int £temporary2115 (Double -> Signed_Int)
969:		fistp word [container2bytes#]
970:		mov t1398, [container2bytes#]
972:	

printArgument$269:	; expo = £temporary2116
973:		mov [bp + 44], t1398
975:	

printArgument$270:	; if expo < -3 goto 282
976:		cmp word [bp + 44], -3
977:		jl printArgument$282
979:	

printArgument$271:	; if expo > 2 goto 282
980:		cmp word [bp + 44], 2
981:		jg printArgument$282
983:	

printArgument$272:	; call header integral zero 0 stack zero 0
985:	

printArgument$273:	; push float longDoubleValue
986:		fld qword [bp + 34]
988:	

printArgument$274:	; parameter longDoubleValue, offset 6
989:		fstp qword [bp + 52]
991:	

printArgument$275:	; parameter plus, offset 14
992:		mov a1399, [bp + 10]
993:		mov [bp + 60], a1399
995:	

printArgument$276:	; parameter space, offset 16
996:		mov a1400, [bp + 12]
997:		mov [bp + 62], a1400
999:	

printArgument$277:	; parameter grid, offset 18
1000:		mov a1401, [bp + 14]
1001:		mov [bp + 64], a1401
1003:	

printArgument$278:	; parameter precision, offset 20
1004:		mov a1402, [bp + 18]
1005:		mov [bp + 66], a1402
1007:	

printArgument$279:	; call function noellipse-noellipse printLongDoublePlain
1008:		mov word [bp + 46], printArgument$280
1009:		mov [bp + 48], bp
1010:		add bp, 46
1011:		jmp printLongDoublePlain
1013:	

printArgument$280:	; post call
1015:	

printArgument$281:	; goto 359
1016:		jmp printArgument$359
1018:	

printArgument$282:	; call header integral zero 0 stack zero 0
1020:	

printArgument$283:	; push float longDoubleValue
1021:		fld qword [bp + 34]
1023:	

printArgument$284:	; parameter longDoubleValue, offset 6
1024:		fstp qword [bp + 52]
1026:	

printArgument$285:	; parameter plus, offset 14
1027:		mov a1403, [bp + 10]
1028:		mov [bp + 60], a1403
1030:	

printArgument$286:	; parameter space, offset 16
1031:		mov a1404, [bp + 12]
1032:		mov [bp + 62], a1404
1034:	

printArgument$287:	; parameter grid, offset 18
1035:		mov a1405, [bp + 14]
1036:		mov [bp + 64], a1405
1038:	

printArgument$288:	; parameter precision, offset 20
1039:		mov a1406, [bp + 18]
1040:		mov [bp + 66], a1406
1042:	

printArgument$289:	; call header integral zero 0 stack zero 0
1044:	

printArgument$290:	; £temporary2121 = int_to_int c (Signed_Char -> Signed_Int)
1045:		mov a1407, [bp + 30]
1047:		and a1407, 255
1049:		cmp a1407, 0
1050:		jge printArgument$291
1051:		neg a1407
1053:		neg a1407
1055:	

printArgument$291:	; parameter £temporary2121, offset 28
1056:		mov [bp + 74], a1407
1058:	

printArgument$292:	; call function noellipse-noellipse isupper
1059:		mov word [bp + 68], printArgument$293
1060:		mov [bp + 70], bp
1061:		add bp, 68
1062:		jmp isupper
1064:	

printArgument$293:	; post call
1066:	

printArgument$294:	; £temporary2122 = return_value
1071:	

printArgument$295:	; parameter £temporary2122, offset 22
1072:		mov [bp + 68], t1409
1074:	

printArgument$296:	; call function noellipse-noellipse printLongDoubleExpo
1075:		mov word [bp + 46], printArgument$297
1076:		mov [bp + 48], bp
1077:		add bp, 46
1078:		jmp printLongDoubleExpo
1080:	

printArgument$297:	; post call
1082:	

printArgument$298:	; goto 359
1083:		jmp printArgument$359
1085:	

printArgument$299:	; arg_list = arg_list + 2
1086:		add word [bp + 8], 2
1088:	

printArgument$300:	; £temporary2125 = arg_list - 2
1089:		mov a1410, [bp + 8]
1090:		sub a1410, 2
1092:	

printArgument$301:	; £temporary2126 = int_to_int £temporary2125 (Signed_Int -> Pointer)
1095:	

printArgument$302:	; £temporary2127 -> £temporary2126 = *£temporary2126
1097:	

printArgument$303:	; ptrValue = £temporary2127 -> £temporary2126
1098:		mov t1411, [a1410]
1099:		mov [bp + 42], t1411
1101:	

printArgument$304:	; call header integral zero 0 stack zero 0
1103:	

printArgument$305:	; parameter arg_list, offset 6
1104:		mov a1412, [bp + 8]
1105:		mov [bp + 50], a1412
1107:	

printArgument$306:	; parameter widthPtr, offset 8
1108:		mov a1413, [bp + 16]
1109:		mov [bp + 52], a1413
1111:	

printArgument$307:	; £temporary2128 = &precision
1112:		mov t1414, bp
1113:		add t1414, 18
1115:	

printArgument$308:	; parameter £temporary2128, offset 10
1116:		mov [bp + 54], t1414
1118:	

printArgument$309:	; call function noellipse-noellipse checkWidthAndPrecision
1119:		mov word [bp + 44], printArgument$310
1120:		mov [bp + 46], bp
1121:		add bp, 44
1122:		jmp checkWidthAndPrecision
1124:	

printArgument$310:	; post call
1126:	

printArgument$311:	; £temporary2129 = return_value
1131:	

printArgument$312:	; arg_list = £temporary2129
1132:		mov [bp + 8], t1416
1134:	

printArgument$313:	; call header integral zero 0 stack zero 0
1136:	

printArgument$314:	; £temporary2130 = int_to_int ptrValue (Pointer -> Unsigned_Long_Int)
1137:		mov a1417, [bp + 42]
1139:		and a1417, 65535
1141:	

printArgument$315:	; parameter £temporary2130, offset 6
1142:		mov [bp + 50], a1417
1144:	

printArgument$316:	; parameter 0, offset 10
1145:		mov word [bp + 54], 0
1147:	

printArgument$317:	; parameter 0, offset 12
1148:		mov word [bp + 56], 0
1150:	

printArgument$318:	; parameter 0, offset 14
1151:		mov word [bp + 58], 0
1153:	

printArgument$319:	; parameter 10, offset 16
1154:		mov dword [bp + 60], 10
1156:	

printArgument$320:	; parameter 0, offset 20
1157:		mov word [bp + 64], 0
1159:	

printArgument$321:	; call function noellipse-noellipse printUnsignedLong
1160:		mov word [bp + 44], printArgument$322
1161:		mov [bp + 46], bp
1162:		add bp, 44
1163:		jmp printUnsignedLong
1165:	

printArgument$322:	; post call
1167:	

printArgument$323:	; goto 359
1168:		jmp printArgument$359
1170:	

printArgument$324:	; arg_list = arg_list + 2
1171:		add word [bp + 8], 2
1173:	

printArgument$325:	; £temporary2133 = arg_list - 2
1174:		mov a1418, [bp + 8]
1175:		sub a1418, 2
1177:	

printArgument$326:	; £temporary2134 = int_to_int £temporary2133 (Signed_Int -> Pointer)
1180:	

printArgument$327:	; £temporary2135 -> £temporary2134 = *£temporary2134
1182:	

printArgument$328:	; ptrValue = £temporary2135 -> £temporary2134
1183:		mov t1419, [a1418]
1184:		mov [bp + 42], t1419
1186:	

printArgument$329:	; arg_list = arg_list + 2
1187:		add word [bp + 8], 2
1189:	

printArgument$330:	; £temporary2137 = arg_list - 2
1190:		mov a1420, [bp + 8]
1191:		sub a1420, 2
1193:	

printArgument$331:	; £temporary2138 = int_to_int £temporary2137 (Signed_Int -> Pointer)
1196:	

printArgument$332:	; £temporary2139 -> £temporary2138 = *£temporary2138
1198:	

printArgument$333:	; intPtr = £temporary2139 -> £temporary2138
1199:		mov t1421, [a1420]
1200:		mov [bp + 32], t1421
1202:	

printArgument$334:	; call header integral zero 0 stack zero 0
1204:	

printArgument$335:	; parameter arg_list, offset 6
1205:		mov a1422, [bp + 8]
1206:		mov [bp + 50], a1422
1208:	

printArgument$336:	; parameter widthPtr, offset 8
1209:		mov a1423, [bp + 16]
1210:		mov [bp + 52], a1423
1212:	

printArgument$337:	; £temporary2140 = &precision
1213:		mov t1424, bp
1214:		add t1424, 18
1216:	

printArgument$338:	; parameter £temporary2140, offset 10
1217:		mov [bp + 54], t1424
1219:	

printArgument$339:	; call function noellipse-noellipse checkWidthAndPrecision
1220:		mov word [bp + 44], printArgument$340
1221:		mov [bp + 46], bp
1222:		add bp, 44
1223:		jmp checkWidthAndPrecision
1225:	

printArgument$340:	; post call
1227:	

printArgument$341:	; £temporary2141 = return_value
1232:	

printArgument$342:	; arg_list = £temporary2141
1233:		mov [bp + 8], t1426
1235:	

printArgument$343:	; £temporary2142 -> intPtr = *intPtr
1236:		mov a1427, [bp + 32]
1238:	

printArgument$344:	; £temporary2142 -> intPtr = g_outChars
1239:		mov a1428, [g_outChars]
1240:		mov [a1427], a1428
1242:	

printArgument$345:	; goto 359
1243:		jmp printArgument$359
1245:	

printArgument$346:	; call header integral zero 0 stack zero 0
1247:	

printArgument$347:	; parameter arg_list, offset 6
1248:		mov a1429, [bp + 8]
1249:		mov [bp + 50], a1429
1251:	

printArgument$348:	; parameter widthPtr, offset 8
1252:		mov a1430, [bp + 16]
1253:		mov [bp + 52], a1430
1255:	

printArgument$349:	; £temporary2143 = &precision
1256:		mov t1431, bp
1257:		add t1431, 18
1259:	

printArgument$350:	; parameter £temporary2143, offset 10
1260:		mov [bp + 54], t1431
1262:	

printArgument$351:	; call function noellipse-noellipse checkWidthAndPrecision
1263:		mov word [bp + 44], printArgument$352
1264:		mov [bp + 46], bp
1265:		add bp, 44
1266:		jmp checkWidthAndPrecision
1268:	

printArgument$352:	; post call
1270:	

printArgument$353:	; £temporary2144 = return_value
1275:	

printArgument$354:	; arg_list = £temporary2144
1276:		mov [bp + 8], t1433
1278:	

printArgument$355:	; call header integral zero 0 stack zero 0
1280:	

printArgument$356:	; parameter 37, offset 6
1281:		mov byte [bp + 50], 37
1283:	

printArgument$357:	; call function noellipse-noellipse printChar
1284:		mov word [bp + 44], printArgument$358
1285:		mov [bp + 46], bp
1286:		add bp, 44
1287:		jmp printChar
1289:	

printArgument$358:	; post call
1291:	

printArgument$359:	; return_value = arg_list
1292:		mov a1434, [bp + 8]
1294:	

printArgument$360:	; return
1295:		mov t1435, [bp]
1296:		mov di, [bp + 4]
1297:		mov bp, [bp + 2]
1298:		jmp t1435
1300:	

printArgument$361:	; function end printArgument
1:	

printFormat:	; width = 0
2:		mov word [bp + 12], 0
4:	

printFormat$1:	; precision = 0
5:		mov word [bp + 14], 0
7:	

printFormat$2:	; percent = 0
8:		mov word [bp + 16], 0
10:	

printFormat$3:	; plus = 0
11:		mov word [bp + 18], 0
13:	

printFormat$4:	; minus = 0
14:		mov word [bp + 20], 0
16:	

printFormat$5:	; space = 0
17:		mov word [bp + 22], 0
19:	

printFormat$6:	; zero = 0
20:		mov word [bp + 24], 0
22:	

printFormat$7:	; grid = 0
23:		mov word [bp + 26], 0
25:	

printFormat$8:	; widthStar = 0
26:		mov word [bp + 28], 0
28:	

printFormat$9:	; period = 0
29:		mov word [bp + 30], 0
31:	

printFormat$10:	; precisionStar = 0
32:		mov word [bp + 32], 0
34:	

printFormat$11:	; shortInt = 0
35:		mov word [bp + 34], 0
37:	

printFormat$12:	; longInt = 0
38:		mov word [bp + 36], 0
40:	

printFormat$13:	; longDouble = 0
41:		mov word [bp + 38], 0
43:	

printFormat$14:	; g_outChars = 0
44:		mov word [g_outChars], 0
46:	

printFormat$15:	; index = 0
47:		mov word [bp + 10], 0
49:	

printFormat$16:	; £temporary2233 = format + index
50:		mov a1436, [bp + 6]
51:		add a1436, [bp + 10]
53:	

printFormat$17:	; £temporary2232 -> £temporary2233 = *£temporary2233
55:	

printFormat$18:	; if £temporary2232 -> £temporary2233 == 0 goto 286
56:		cmp byte [a1436], 0
57:		je printFormat$286
59:	

printFormat$19:	; £temporary2237 = format + index
60:		mov a1437, [bp + 6]
61:		add a1437, [bp + 10]
63:	

printFormat$20:	; £temporary2236 -> £temporary2237 = *£temporary2237
65:	

printFormat$21:	; c = £temporary2236 -> £temporary2237
66:		mov t1438, [a1437]
67:		mov [bp + 40], t1438
69:	

printFormat$22:	; if percent == 0 goto 264
70:		cmp word [bp + 16], 0
71:		je printFormat$264
73:	

printFormat$23:	; case c == 43 goto 52
74:		mov a1439, [bp + 40]
75:		cmp a1439, 43
76:		je printFormat$52
78:	

printFormat$24:	; case c == 45 goto 54
79:		cmp a1439, 45
80:		je printFormat$54
82:	

printFormat$25:	; case c == 32 goto 56
83:		cmp a1439, 32
84:		je printFormat$56
86:	

printFormat$26:	; case c == 48 goto 58
87:		cmp a1439, 48
88:		je printFormat$58
90:	

printFormat$27:	; case c == 35 goto 60
91:		cmp a1439, 35
92:		je printFormat$60
94:	

printFormat$28:	; case c == 46 goto 62
95:		cmp a1439, 46
96:		je printFormat$62
98:	

printFormat$29:	; case c == 42 goto 64
99:		cmp a1439, 42
100:		je printFormat$64
102:	

printFormat$30:	; case c == 104 goto 69
103:		cmp a1439, 104
104:		je printFormat$69
106:	

printFormat$31:	; case c == 108 goto 71
107:		cmp a1439, 108
108:		je printFormat$71
110:	

printFormat$32:	; case c == 76 goto 73
111:		cmp a1439, 76
112:		je printFormat$73
114:	

printFormat$33:	; case c == 37 goto 75
115:		cmp a1439, 37
116:		je printFormat$75
118:	

printFormat$34:	; case c == 110 goto 75
119:		cmp a1439, 110
120:		je printFormat$75
122:	

printFormat$35:	; case c == 112 goto 75
123:		cmp a1439, 112
124:		je printFormat$75
126:	

printFormat$36:	; case c == 71 goto 75
127:		cmp a1439, 71
128:		je printFormat$75
130:	

printFormat$37:	; case c == 103 goto 75
131:		cmp a1439, 103
132:		je printFormat$75
134:	

printFormat$38:	; case c == 69 goto 75
135:		cmp a1439, 69
136:		je printFormat$75
138:	

printFormat$39:	; case c == 101 goto 75
139:		cmp a1439, 101
140:		je printFormat$75
142:	

printFormat$40:	; case c == 102 goto 75
143:		cmp a1439, 102
144:		je printFormat$75
146:	

printFormat$41:	; case c == 115 goto 75
147:		cmp a1439, 115
148:		je printFormat$75
150:	

printFormat$42:	; case c == 99 goto 75
151:		cmp a1439, 99
152:		je printFormat$75
154:	

printFormat$43:	; case c == 88 goto 75
155:		cmp a1439, 88
156:		je printFormat$75
158:	

printFormat$44:	; case c == 120 goto 75
159:		cmp a1439, 120
160:		je printFormat$75
162:	

printFormat$45:	; case c == 111 goto 75
163:		cmp a1439, 111
164:		je printFormat$75
166:	

printFormat$46:	; case c == 98 goto 75
167:		cmp a1439, 98
168:		je printFormat$75
170:	

printFormat$47:	; case c == 117 goto 75
171:		cmp a1439, 117
172:		je printFormat$75
174:	

printFormat$48:	; case c == 100 goto 75
175:		cmp a1439, 100
176:		je printFormat$75
178:	

printFormat$49:	; case c == 105 goto 75
179:		cmp a1439, 105
180:		je printFormat$75
182:	

printFormat$50:	; case end c
184:	

printFormat$51:	; goto 241
185:		jmp printFormat$241
187:	

printFormat$52:	; plus = 1
188:		mov word [bp + 18], 1
190:	

printFormat$53:	; goto 284
191:		jmp printFormat$284
193:	

printFormat$54:	; minus = 1
194:		mov word [bp + 20], 1
196:	

printFormat$55:	; goto 284
197:		jmp printFormat$284
199:	

printFormat$56:	; space = 1
200:		mov word [bp + 22], 1
202:	

printFormat$57:	; goto 284
203:		jmp printFormat$284
205:	

printFormat$58:	; zero = 1
206:		mov word [bp + 24], 1
208:	

printFormat$59:	; goto 284
209:		jmp printFormat$284
211:	

printFormat$60:	; grid = 1
212:		mov word [bp + 26], 1
214:	

printFormat$61:	; goto 284
215:		jmp printFormat$284
217:	

printFormat$62:	; period = 1
218:		mov word [bp + 30], 1
220:	

printFormat$63:	; goto 284
221:		jmp printFormat$284
223:	

printFormat$64:	; if period != 0 goto 67
224:		cmp word [bp + 30], 0
225:		jne printFormat$67
227:	

printFormat$65:	; width = -1
228:		mov word [bp + 12], -1
230:	

printFormat$66:	; goto 284
231:		jmp printFormat$284
233:	

printFormat$67:	; precision = -1
234:		mov word [bp + 14], -1
236:	

printFormat$68:	; goto 284
237:		jmp printFormat$284
239:	

printFormat$69:	; shortInt = 1
240:		mov word [bp + 34], 1
242:	

printFormat$70:	; goto 284
243:		jmp printFormat$284
245:	

printFormat$71:	; longInt = 1
246:		mov word [bp + 36], 1
248:	

printFormat$72:	; goto 284
249:		jmp printFormat$284
251:	

printFormat$73:	; longDouble = 1
252:		mov word [bp + 38], 1
254:	

printFormat$74:	; goto 284
255:		jmp printFormat$284
257:	

printFormat$75:	; if minus == 0 goto 106
258:		cmp word [bp + 20], 0
259:		je printFormat$106
261:	

printFormat$76:	; startChars = g_outChars
262:		mov a1440, [g_outChars]
263:		mov [bp + 41], a1440
265:	

printFormat$77:	; call header integral zero 0 stack zero 0
267:	

printFormat$78:	; £temporary2241 = format + index
268:		mov a1441, [bp + 6]
269:		add a1441, [bp + 10]
271:	

printFormat$79:	; £temporary2240 -> £temporary2241 = *£temporary2241
273:	

printFormat$80:	; £temporary2242 = &£temporary2240 -> £temporary2241
275:	

printFormat$81:	; parameter £temporary2242, offset 6
276:		mov [bp + 49], a1441
278:	

printFormat$82:	; parameter arg_list, offset 8
279:		mov a1442, [bp + 8]
280:		mov [bp + 51], a1442
282:	

printFormat$83:	; parameter plus, offset 10
283:		mov a1443, [bp + 18]
284:		mov [bp + 53], a1443
286:	

printFormat$84:	; parameter space, offset 12
287:		mov a1444, [bp + 22]
288:		mov [bp + 55], a1444
290:	

printFormat$85:	; parameter grid, offset 14
291:		mov a1445, [bp + 26]
292:		mov [bp + 57], a1445
294:	

printFormat$86:	; £temporary2243 = &width
295:		mov t1446, bp
296:		add t1446, 12
298:	

printFormat$87:	; parameter £temporary2243, offset 16
299:		mov [bp + 59], t1446
301:	

printFormat$88:	; parameter precision, offset 18
302:		mov a1447, [bp + 14]
303:		mov [bp + 61], a1447
305:	

printFormat$89:	; parameter shortInt, offset 20
306:		mov a1448, [bp + 34]
307:		mov [bp + 63], a1448
309:	

printFormat$90:	; parameter longInt, offset 22
310:		mov a1449, [bp + 36]
311:		mov [bp + 65], a1449
313:	

printFormat$91:	; parameter longDouble, offset 24
314:		mov a1450, [bp + 38]
315:		mov [bp + 67], a1450
317:	

printFormat$92:	; parameter 1, offset 26
318:		mov word [bp + 69], 1
320:	

printFormat$93:	; parameter 0, offset 28
321:		mov word [bp + 71], 0
323:	

printFormat$94:	; call function noellipse-noellipse printArgument
324:		mov word [bp + 43], printFormat$95
325:		mov [bp + 45], bp
326:		add bp, 43
327:		jmp printArgument
329:	

printFormat$95:	; post call
331:	

printFormat$96:	; £temporary2244 = return_value
336:	

printFormat$97:	; arg_list = £temporary2244
337:		mov [bp + 8], t1452
339:	

printFormat$98:	; £temporary2246 = g_outChars - startChars
340:		mov a1453, [g_outChars]
341:		sub a1453, [bp + 41]
343:	

printFormat$99:	; ++field
344:		inc word [bp + 43]
346:	

printFormat$100:	; if £temporary2246 >= width goto 239
347:		cmp a1453, [bp + 12]
348:		jge printFormat$239
350:	

printFormat$101:	; call header integral zero 0 stack zero 0
352:	

printFormat$102:	; parameter 32, offset 6
353:		mov byte [bp + 51], 32
355:	

printFormat$103:	; call function noellipse-noellipse printChar
356:		mov word [bp + 45], printFormat$104
357:		mov [bp + 47], bp
358:		add bp, 45
359:		jmp printChar
361:	

printFormat$104:	; post call
363:	

printFormat$105:	; goto 99
364:		jmp printFormat$99
366:	

printFormat$106:	; if zero == 0 goto 186
367:		cmp word [bp + 24], 0
368:		je printFormat$186
370:	

printFormat$107:	; startChars = g_outChars
371:		mov a1454, [g_outChars]
372:		mov [bp + 41], a1454
374:	

printFormat$108:	; oldOutStatus = g_outStatus
375:		mov a1455, [g_outStatus]
376:		mov [bp + 43], a1455
378:	

printFormat$109:	; negative = 0
379:		mov word [bp + 45], 0
381:	

printFormat$110:	; g_outStatus = 2
382:		mov word [g_outStatus], 2
384:	

printFormat$111:	; call header integral zero 0 stack zero 0
386:	

printFormat$112:	; £temporary2250 = format + index
387:		mov a1456, [bp + 6]
388:		add a1456, [bp + 10]
390:	

printFormat$113:	; £temporary2249 -> £temporary2250 = *£temporary2250
392:	

printFormat$114:	; £temporary2251 = &£temporary2249 -> £temporary2250
394:	

printFormat$115:	; parameter £temporary2251, offset 6
395:		mov [bp + 53], a1456
397:	

printFormat$116:	; parameter arg_list, offset 8
398:		mov a1457, [bp + 8]
399:		mov [bp + 55], a1457
401:	

printFormat$117:	; parameter 0, offset 10
402:		mov word [bp + 57], 0
404:	

printFormat$118:	; parameter 0, offset 12
405:		mov word [bp + 59], 0
407:	

printFormat$119:	; parameter grid, offset 14
408:		mov a1458, [bp + 26]
409:		mov [bp + 61], a1458
411:	

printFormat$120:	; £temporary2252 = &width
412:		mov t1459, bp
413:		add t1459, 12
415:	

printFormat$121:	; parameter £temporary2252, offset 16
416:		mov [bp + 63], t1459
418:	

printFormat$122:	; parameter precision, offset 18
419:		mov a1460, [bp + 14]
420:		mov [bp + 65], a1460
422:	

printFormat$123:	; parameter shortInt, offset 20
423:		mov a1461, [bp + 34]
424:		mov [bp + 67], a1461
426:	

printFormat$124:	; parameter longInt, offset 22
427:		mov a1462, [bp + 36]
428:		mov [bp + 69], a1462
430:	

printFormat$125:	; parameter longDouble, offset 24
431:		mov a1463, [bp + 38]
432:		mov [bp + 71], a1463
434:	

printFormat$126:	; parameter 0, offset 26
435:		mov word [bp + 73], 0
437:	

printFormat$127:	; £temporary2253 = &negative
438:		mov t1464, bp
439:		add t1464, 45
441:	

printFormat$128:	; parameter £temporary2253, offset 28
442:		mov [bp + 75], t1464
444:	

printFormat$129:	; call function noellipse-noellipse printArgument
445:		mov word [bp + 47], printFormat$130
446:		mov [bp + 49], bp
447:		add bp, 47
448:		jmp printArgument
450:	

printFormat$130:	; post call
452:	

printFormat$131:	; g_outStatus = oldOutStatus
453:		mov a1465, [bp + 43]
454:		mov [g_outStatus], a1465
456:	

printFormat$132:	; field = g_outChars - startChars
457:		mov a1466, [g_outChars]
458:		sub a1466, [bp + 41]
459:		mov [bp + 47], a1466
461:	

printFormat$133:	; g_outChars = startChars
462:		mov a1467, [bp + 41]
463:		mov [g_outChars], a1467
465:	

printFormat$134:	; if negative == 0 goto 145
466:		cmp word [bp + 45], 0
467:		je printFormat$145
469:	

printFormat$135:	; call header integral zero 0 stack zero 0
471:	

printFormat$136:	; parameter 88, offset 6
472:		mov byte [bp + 55], 88
474:	

printFormat$137:	; call function noellipse-noellipse printChar
475:		mov word [bp + 49], printFormat$138
476:		mov [bp + 51], bp
477:		add bp, 49
478:		jmp printChar
480:	

printFormat$138:	; post call
482:	

printFormat$139:	; call header integral zero 0 stack zero 0
484:	

printFormat$140:	; parameter 45, offset 6
485:		mov byte [bp + 55], 45
487:	

printFormat$141:	; call function noellipse-noellipse printChar
488:		mov word [bp + 49], printFormat$142
489:		mov [bp + 51], bp
490:		add bp, 49
491:		jmp printChar
493:	

printFormat$142:	; post call
495:	

printFormat$143:	; ++field
496:		inc word [bp + 47]
498:	

printFormat$144:	; goto 158
499:		jmp printFormat$158
501:	

printFormat$145:	; if plus == 0 goto 152
502:		cmp word [bp + 18], 0
503:		je printFormat$152
505:	

printFormat$146:	; call header integral zero 0 stack zero 0
507:	

printFormat$147:	; parameter 43, offset 6
508:		mov byte [bp + 55], 43
510:	

printFormat$148:	; call function noellipse-noellipse printChar
511:		mov word [bp + 49], printFormat$149
512:		mov [bp + 51], bp
513:		add bp, 49
514:		jmp printChar
516:	

printFormat$149:	; post call
518:	

printFormat$150:	; ++field
519:		inc word [bp + 47]
521:	

printFormat$151:	; goto 158
522:		jmp printFormat$158
524:	

printFormat$152:	; if space == 0 goto 158
525:		cmp word [bp + 22], 0
526:		je printFormat$158
528:	

printFormat$153:	; call header integral zero 0 stack zero 0
530:	

printFormat$154:	; parameter 32, offset 6
531:		mov byte [bp + 55], 32
533:	

printFormat$155:	; call function noellipse-noellipse printChar
534:		mov word [bp + 49], printFormat$156
535:		mov [bp + 51], bp
536:		add bp, 49
537:		jmp printChar
539:	

printFormat$156:	; post call
541:	

printFormat$157:	; £temporary2266 = field + 1
542:		mov a1468, [bp + 47]
543:		add a1468, 1
545:	

printFormat$158:	; ++field
546:		inc word [bp + 47]
548:	

printFormat$159:	; if £temporary2266 >= width goto 165
549:		cmp a1468, [bp + 12]
550:		jge printFormat$165
552:	

printFormat$160:	; call header integral zero 0 stack zero 0
554:	

printFormat$161:	; parameter 48, offset 6
555:		mov byte [bp + 55], 48
557:	

printFormat$162:	; call function noellipse-noellipse printChar
558:		mov word [bp + 49], printFormat$163
559:		mov [bp + 51], bp
560:		add bp, 49
561:		jmp printChar
563:	

printFormat$163:	; post call
565:	

printFormat$164:	; goto 158
566:		jmp printFormat$158
568:	

printFormat$165:	; call header integral zero 0 stack zero 0
570:	

printFormat$166:	; £temporary2270 = format + index
571:		mov a1469, [bp + 6]
572:		add a1469, [bp + 10]
574:	

printFormat$167:	; £temporary2269 -> £temporary2270 = *£temporary2270
576:	

printFormat$168:	; £temporary2271 = &£temporary2269 -> £temporary2270
578:	

printFormat$169:	; parameter £temporary2271, offset 6
579:		mov [bp + 55], a1469
581:	

printFormat$170:	; parameter arg_list, offset 8
582:		mov a1470, [bp + 8]
583:		mov [bp + 57], a1470
585:	

printFormat$171:	; parameter 0, offset 10
586:		mov word [bp + 59], 0
588:	

printFormat$172:	; parameter 0, offset 12
589:		mov word [bp + 61], 0
591:	

printFormat$173:	; parameter grid, offset 14
592:		mov a1471, [bp + 26]
593:		mov [bp + 63], a1471
595:	

printFormat$174:	; parameter 0, offset 16
596:		mov word [bp + 65], 0
598:	

printFormat$175:	; parameter precision, offset 18
599:		mov a1472, [bp + 14]
600:		mov [bp + 67], a1472
602:	

printFormat$176:	; parameter shortInt, offset 20
603:		mov a1473, [bp + 34]
604:		mov [bp + 69], a1473
606:	

printFormat$177:	; parameter longInt, offset 22
607:		mov a1474, [bp + 36]
608:		mov [bp + 71], a1474
610:	

printFormat$178:	; parameter longDouble, offset 24
611:		mov a1475, [bp + 38]
612:		mov [bp + 73], a1475
614:	

printFormat$179:	; parameter 0, offset 26
615:		mov word [bp + 75], 0
617:	

printFormat$180:	; parameter 0, offset 28
618:		mov word [bp + 77], 0
620:	

printFormat$181:	; call function noellipse-noellipse printArgument
621:		mov word [bp + 49], printFormat$182
622:		mov [bp + 51], bp
623:		add bp, 49
624:		jmp printArgument
626:	

printFormat$182:	; post call
628:	

printFormat$183:	; £temporary2272 = return_value
633:	

printFormat$184:	; arg_list = £temporary2272
634:		mov [bp + 8], t1477
636:	

printFormat$185:	; goto 239
637:		jmp printFormat$239
639:	

printFormat$186:	; startChars = g_outChars
640:		mov a1478, [g_outChars]
641:		mov [bp + 41], a1478
643:	

printFormat$187:	; oldOutStatus = g_outStatus
644:		mov a1479, [g_outStatus]
645:		mov [bp + 43], a1479
647:	

printFormat$188:	; g_outStatus = 2
648:		mov word [g_outStatus], 2
650:	

printFormat$189:	; call header integral zero 0 stack zero 0
652:	

printFormat$190:	; £temporary2274 = format + index
653:		mov a1480, [bp + 6]
654:		add a1480, [bp + 10]
656:	

printFormat$191:	; £temporary2273 -> £temporary2274 = *£temporary2274
658:	

printFormat$192:	; £temporary2275 = &£temporary2273 -> £temporary2274
660:	

printFormat$193:	; parameter £temporary2275, offset 6
661:		mov [bp + 51], a1480
663:	

printFormat$194:	; parameter arg_list, offset 8
664:		mov a1481, [bp + 8]
665:		mov [bp + 53], a1481
667:	

printFormat$195:	; parameter plus, offset 10
668:		mov a1482, [bp + 18]
669:		mov [bp + 55], a1482
671:	

printFormat$196:	; parameter space, offset 12
672:		mov a1483, [bp + 22]
673:		mov [bp + 57], a1483
675:	

printFormat$197:	; parameter grid, offset 14
676:		mov a1484, [bp + 26]
677:		mov [bp + 59], a1484
679:	

printFormat$198:	; £temporary2276 = &width
680:		mov t1485, bp
681:		add t1485, 12
683:	

printFormat$199:	; parameter £temporary2276, offset 16
684:		mov [bp + 61], t1485
686:	

printFormat$200:	; parameter precision, offset 18
687:		mov a1486, [bp + 14]
688:		mov [bp + 63], a1486
690:	

printFormat$201:	; parameter shortInt, offset 20
691:		mov a1487, [bp + 34]
692:		mov [bp + 65], a1487
694:	

printFormat$202:	; parameter longInt, offset 22
695:		mov a1488, [bp + 36]
696:		mov [bp + 67], a1488
698:	

printFormat$203:	; parameter longDouble, offset 24
699:		mov a1489, [bp + 38]
700:		mov [bp + 69], a1489
702:	

printFormat$204:	; parameter 1, offset 26
703:		mov word [bp + 71], 1
705:	

printFormat$205:	; parameter 0, offset 28
706:		mov word [bp + 73], 0
708:	

printFormat$206:	; call function noellipse-noellipse printArgument
709:		mov word [bp + 45], printFormat$207
710:		mov [bp + 47], bp
711:		add bp, 45
712:		jmp printArgument
714:	

printFormat$207:	; post call
716:	

printFormat$208:	; g_outStatus = oldOutStatus
717:		mov a1490, [bp + 43]
718:		mov [g_outStatus], a1490
720:	

printFormat$209:	; field = g_outChars - startChars
721:		mov a1491, [g_outChars]
722:		sub a1491, [bp + 41]
723:		mov [bp + 45], a1491
725:	

printFormat$210:	; g_outChars = startChars
726:		mov a1492, [bp + 41]
727:		mov [g_outChars], a1492
729:	

printFormat$211:	; £temporary2279 = field
730:		mov t1493, [bp + 45]
732:	

printFormat$212:	; ++field
733:		inc word [bp + 45]
735:	

printFormat$213:	; if £temporary2279 >= width goto 219
736:		cmp t1493, [bp + 12]
737:		jge printFormat$219
739:	

printFormat$214:	; call header integral zero 0 stack zero 0
741:	

printFormat$215:	; parameter 32, offset 6
742:		mov byte [bp + 53], 32
744:	

printFormat$216:	; call function noellipse-noellipse printChar
745:		mov word [bp + 47], printFormat$217
746:		mov [bp + 49], bp
747:		add bp, 47
748:		jmp printChar
750:	

printFormat$217:	; post call
752:	

printFormat$218:	; goto 211
753:		jmp printFormat$211
755:	

printFormat$219:	; call header integral zero 0 stack zero 0
757:	

printFormat$220:	; £temporary2283 = format + index
758:		mov a1494, [bp + 6]
759:		add a1494, [bp + 10]
761:	

printFormat$221:	; £temporary2282 -> £temporary2283 = *£temporary2283
763:	

printFormat$222:	; £temporary2284 = &£temporary2282 -> £temporary2283
765:	

printFormat$223:	; parameter £temporary2284, offset 6
766:		mov [bp + 53], a1494
768:	

printFormat$224:	; parameter arg_list, offset 8
769:		mov a1495, [bp + 8]
770:		mov [bp + 55], a1495
772:	

printFormat$225:	; parameter plus, offset 10
773:		mov a1496, [bp + 18]
774:		mov [bp + 57], a1496
776:	

printFormat$226:	; parameter space, offset 12
777:		mov a1497, [bp + 22]
778:		mov [bp + 59], a1497
780:	

printFormat$227:	; parameter grid, offset 14
781:		mov a1498, [bp + 26]
782:		mov [bp + 61], a1498
784:	

printFormat$228:	; parameter 0, offset 16
785:		mov word [bp + 63], 0
787:	

printFormat$229:	; parameter precision, offset 18
788:		mov a1499, [bp + 14]
789:		mov [bp + 65], a1499
791:	

printFormat$230:	; parameter shortInt, offset 20
792:		mov a1500, [bp + 34]
793:		mov [bp + 67], a1500
795:	

printFormat$231:	; parameter longInt, offset 22
796:		mov a1501, [bp + 36]
797:		mov [bp + 69], a1501
799:	

printFormat$232:	; parameter longDouble, offset 24
800:		mov a1502, [bp + 38]
801:		mov [bp + 71], a1502
803:	

printFormat$233:	; parameter 1, offset 26
804:		mov word [bp + 73], 1
806:	

printFormat$234:	; parameter 0, offset 28
807:		mov word [bp + 75], 0
809:	

printFormat$235:	; call function noellipse-noellipse printArgument
810:		mov word [bp + 47], printFormat$236
811:		mov [bp + 49], bp
812:		add bp, 47
813:		jmp printArgument
815:	

printFormat$236:	; post call
817:	

printFormat$237:	; £temporary2285 = return_value
822:	

printFormat$238:	; arg_list = £temporary2285
823:		mov [bp + 8], t1504
825:	

printFormat$239:	; percent = 0
826:		mov word [bp + 16], 0
828:	

printFormat$240:	; goto 284
829:		jmp printFormat$284
831:	

printFormat$241:	; value = 0
832:		mov word [bp + 41], 0
834:	

printFormat$242:	; call header integral zero 0 stack zero 0
836:	

printFormat$243:	; £temporary2288 = int_to_int c (Signed_Char -> Signed_Int)
837:		mov a1505, [bp + 40]
839:		and a1505, 255
841:		cmp a1505, 0
842:		jge printFormat$244
843:		neg a1505
845:		neg a1505
847:	

printFormat$244:	; parameter £temporary2288, offset 6
848:		mov [bp + 49], a1505
850:	

printFormat$245:	; call function noellipse-noellipse isdigit
851:		mov word [bp + 43], printFormat$246
852:		mov [bp + 45], bp
853:		add bp, 43
854:		jmp isdigit
856:	

printFormat$246:	; post call
858:	

printFormat$247:	; £temporary2289 = return_value
863:	

printFormat$248:	; if £temporary2289 == 0 goto 258
864:		cmp t1507, 0
865:		je printFormat$258
867:	

printFormat$249:	; £temporary2290 = value * 10
868:		mov a1508, [bp + 41]
870:		xor dx, dx
871:		imul word [int2$10#]
877:	

printFormat$250:	; £temporary2291 = c - 48
878:		mov a1512, [bp + 40]
879:		sub a1512, 48
881:	

printFormat$251:	; £temporary2292 = int_to_int £temporary2291 (Signed_Char -> Signed_Int)
883:		and a1512, 255
885:		cmp a1512, 0
886:		jge printFormat$252
887:		neg a1512
889:		neg a1512
891:	

printFormat$252:	; value = £temporary2290 + £temporary2292
892:		add t1511, a1512
893:		mov [bp + 41], t1511
895:	

printFormat$253:	; £temporary2294 = index + 1
896:		mov a1513, [bp + 10]
897:		add a1513, 1
899:	

printFormat$254:	; £temporary2296 = format + £temporary2294
900:		mov a1514, [bp + 6]
901:		add a1514, a1513
903:	

printFormat$255:	; £temporary2295 -> £temporary2296 = *£temporary2296
905:	

printFormat$256:	; c = £temporary2295 -> £temporary2296
906:		mov t1515, [a1514]
907:		mov [bp + 40], t1515
909:	

printFormat$257:	; goto 242
910:		jmp printFormat$242
912:	

printFormat$258:	; --index
913:		dec word [bp + 10]
915:	

printFormat$259:	; if period != 0 goto 262
916:		cmp word [bp + 30], 0
917:		jne printFormat$262
919:	

printFormat$260:	; width = value
920:		mov a1516, [bp + 41]
921:		mov [bp + 12], a1516
923:	

printFormat$261:	; goto 284
924:		jmp printFormat$284
926:	

printFormat$262:	; precision = value
927:		mov a1517, [bp + 41]
928:		mov [bp + 14], a1517
930:	

printFormat$263:	; goto 284
931:		jmp printFormat$284
933:	

printFormat$264:	; if c != 37 goto 280
934:		cmp byte [bp + 40], 37
935:		jne printFormat$280
937:	

printFormat$265:	; percent = 1
938:		mov word [bp + 16], 1
940:	

printFormat$266:	; plus = 0
941:		mov word [bp + 18], 0
943:	

printFormat$267:	; minus = 0
944:		mov word [bp + 20], 0
946:	

printFormat$268:	; space = 0
947:		mov word [bp + 22], 0
949:	

printFormat$269:	; zero = 0
950:		mov word [bp + 24], 0
952:	

printFormat$270:	; grid = 0
953:		mov word [bp + 26], 0
955:	

printFormat$271:	; widthStar = 0
956:		mov word [bp + 28], 0
958:	

printFormat$272:	; period = 0
959:		mov word [bp + 30], 0
961:	

printFormat$273:	; precisionStar = 0
962:		mov word [bp + 32], 0
964:	

printFormat$274:	; shortInt = 0
965:		mov word [bp + 34], 0
967:	

printFormat$275:	; longInt = 0
968:		mov word [bp + 36], 0
970:	

printFormat$276:	; longDouble = 0
971:		mov word [bp + 38], 0
973:	

printFormat$277:	; width = 0
974:		mov word [bp + 12], 0
976:	

printFormat$278:	; precision = 0
977:		mov word [bp + 14], 0
979:	

printFormat$279:	; goto 284
980:		jmp printFormat$284
982:	

printFormat$280:	; call header integral zero 0 stack zero 0
984:	

printFormat$281:	; parameter c, offset 6
985:		mov a1518, [bp + 40]
986:		mov [bp + 47], a1518
988:	

printFormat$282:	; call function noellipse-noellipse printChar
989:		mov word [bp + 41], printFormat$283
990:		mov [bp + 43], bp
991:		add bp, 41
992:		jmp printChar
994:	

printFormat$283:	; post call
996:	

printFormat$284:	; ++index
997:		inc word [bp + 10]
999:	

printFormat$285:	; goto 16
1000:		jmp printFormat$16
1002:	

printFormat$286:	; if g_outStatus != 1 goto 292
1003:		cmp word [g_outStatus], 1
1004:		jne printFormat$292
1006:	

printFormat$287:	; £temporary2305 = int_to_int g_outDevice (Pointer -> Pointer)
1007:		mov a1519, [g_outDevice]
1010:	

printFormat$288:	; outString = £temporary2305
1011:		mov [bp + 40], a1519
1013:	

printFormat$289:	; £temporary2307 = outString + g_outChars
1014:		mov a1520, [bp + 40]
1015:		add a1520, [g_outChars]
1017:	

printFormat$290:	; £temporary2306 -> £temporary2307 = *£temporary2307
1019:	

printFormat$291:	; £temporary2306 -> £temporary2307 = 0
1020:		mov byte [a1520], 0
1022:	

printFormat$292:	; return_value = g_outChars
1023:		mov a1521, [g_outChars]
1025:	

printFormat$293:	; return
1026:		mov t1522, [bp]
1027:		mov di, [bp + 4]
1028:		mov bp, [bp + 2]
1029:		jmp t1522
1031:	

printFormat$294:	; function end printFormat
1:	

printf:	; £temporary2381 = &format
2:		mov t1523, bp
3:		add t1523, 6
5:	

printf$1:	; £temporary2382 = int_to_int £temporary2381 (Pointer -> Pointer)
8:	

printf$2:	; arg_list = £temporary2382 + 2
9:		add t1523, 2
10:		mov [di + 8], t1523
12:	

printf$3:	; call header integral zero 0 stack zero 0
14:	

printf$4:	; parameter format, offset 6
15:		mov a1524, [bp + 6]
16:		mov [di + 16], a1524
18:	

printf$5:	; parameter arg_list, offset 8
19:		mov a1525, [di + 8]
20:		mov [di + 18], a1525
22:	

printf$6:	; call function ellipse-noellipse vprintf
23:		mov word [di + 10], printf$7
24:		mov [di + 12], bp
25:		mov [di + 14], di
26:		add di, 10
27:		mov bp, di
28:		jmp vprintf
30:	

printf$7:	; post call
32:	

printf$8:	; £temporary2384 = return_value
37:	

printf$9:	; return_value = £temporary2384
39:	

printf$10:	; return
40:		mov t1528, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp t1528
45:	

printf$11:	; function end printf
1:	

vprintf:	; call header integral zero 0 stack zero 0
3:	

vprintf$1:	; parameter stdout, offset 6
4:		mov a1529, [stdout]
5:		mov [bp + 16], a1529
7:	

vprintf$2:	; parameter format, offset 8
8:		mov a1530, [bp + 6]
9:		mov [bp + 18], a1530
11:	

vprintf$3:	; parameter arg_list, offset 10
12:		mov a1531, [bp + 8]
13:		mov [bp + 20], a1531
15:	

vprintf$4:	; call function noellipse-noellipse vfprintf
16:		mov word [bp + 10], vprintf$5
17:		mov [bp + 12], bp
18:		add bp, 10
19:		jmp vfprintf
21:	

vprintf$5:	; post call
23:	

vprintf$6:	; £temporary2388 = return_value
28:	

vprintf$7:	; return_value = £temporary2388
30:	

vprintf$8:	; return
31:		mov t1534, [bp]
32:		mov di, [bp + 4]
33:		mov bp, [bp + 2]
34:		jmp t1534
36:	

vprintf$9:	; function end vprintf
1:	

fprintf:	; £temporary2392 = &format
2:		mov t1535, bp
3:		add t1535, 8
5:	

fprintf$1:	; £temporary2393 = int_to_int £temporary2392 (Pointer -> Pointer)
8:	

fprintf$2:	; arg_list = £temporary2393 + 2
9:		add t1535, 2
10:		mov [di + 10], t1535
12:	

fprintf$3:	; call header integral zero 0 stack zero 0
14:	

fprintf$4:	; parameter outStream, offset 6
15:		mov a1536, [bp + 6]
16:		mov [di + 18], a1536
18:	

fprintf$5:	; parameter format, offset 8
19:		mov a1537, [bp + 8]
20:		mov [di + 20], a1537
22:	

fprintf$6:	; parameter arg_list, offset 10
23:		mov a1538, [di + 10]
24:		mov [di + 22], a1538
26:	

fprintf$7:	; call function ellipse-noellipse vfprintf
27:		mov word [di + 12], fprintf$8
28:		mov [di + 14], bp
29:		mov [di + 16], di
30:		add di, 12
31:		mov bp, di
32:		jmp vfprintf
34:	

fprintf$8:	; post call
36:	

fprintf$9:	; £temporary2395 = return_value
41:	

fprintf$10:	; return_value = £temporary2395
43:	

fprintf$11:	; return
44:		mov t1541, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t1541
49:	

fprintf$12:	; function end fprintf
1:	

vfprintf:	; g_outStatus = 0
2:		mov word [g_outStatus], 0
4:	

vfprintf$1:	; £temporary2400 = int_to_int outStream (Pointer -> Pointer)
5:		mov a1542, [bp + 6]
8:	

vfprintf$2:	; g_outDevice = £temporary2400
9:		mov [g_outDevice], a1542
11:	

vfprintf$3:	; call header integral zero 0 stack zero 0
13:	

vfprintf$4:	; parameter format, offset 6
14:		mov a1543, [bp + 8]
15:		mov [bp + 18], a1543
17:	

vfprintf$5:	; parameter arg_list, offset 8
18:		mov a1544, [bp + 10]
19:		mov [bp + 20], a1544
21:	

vfprintf$6:	; call function noellipse-noellipse printFormat
22:		mov word [bp + 12], vfprintf$7
23:		mov [bp + 14], bp
24:		add bp, 12
25:		jmp printFormat
27:	

vfprintf$7:	; post call
29:	

vfprintf$8:	; £temporary2401 = return_value
34:	

vfprintf$9:	; return_value = £temporary2401
36:	

vfprintf$10:	; return
37:		mov t1547, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp t1547
42:	

vfprintf$11:	; function end vfprintf
1:	

sprintf:	; £temporary2404 = &format
2:		mov t1548, bp
3:		add t1548, 8
5:	

sprintf$1:	; £temporary2405 = int_to_int £temporary2404 (Pointer -> Pointer)
8:	

sprintf$2:	; arg_list = £temporary2405 + 2
9:		add t1548, 2
10:		mov [di + 10], t1548
12:	

sprintf$3:	; call header integral zero 0 stack zero 0
14:	

sprintf$4:	; parameter outString, offset 6
15:		mov a1549, [bp + 6]
16:		mov [di + 18], a1549
18:	

sprintf$5:	; parameter format, offset 8
19:		mov a1550, [bp + 8]
20:		mov [di + 20], a1550
22:	

sprintf$6:	; parameter arg_list, offset 10
23:		mov a1551, [di + 10]
24:		mov [di + 22], a1551
26:	

sprintf$7:	; call function ellipse-noellipse vsprintf
27:		mov word [di + 12], sprintf$8
28:		mov [di + 14], bp
29:		mov [di + 16], di
30:		add di, 12
31:		mov bp, di
32:		jmp vsprintf
34:	

sprintf$8:	; post call
36:	

sprintf$9:	; £temporary2407 = return_value
41:	

sprintf$10:	; return_value = £temporary2407
43:	

sprintf$11:	; return
44:		mov t1554, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t1554
49:	

sprintf$12:	; function end sprintf
1:	

vsprintf:	; g_outStatus = 1
2:		mov word [g_outStatus], 1
4:	

vsprintf$1:	; £temporary2412 = int_to_int outString (Pointer -> Pointer)
5:		mov a1555, [bp + 6]
8:	

vsprintf$2:	; g_outDevice = £temporary2412
9:		mov [g_outDevice], a1555
11:	

vsprintf$3:	; call header integral zero 0 stack zero 0
13:	

vsprintf$4:	; parameter format, offset 6
14:		mov a1556, [bp + 8]
15:		mov [bp + 18], a1556
17:	

vsprintf$5:	; parameter arg_list, offset 8
18:		mov a1557, [bp + 10]
19:		mov [bp + 20], a1557
21:	

vsprintf$6:	; call function noellipse-noellipse printFormat
22:		mov word [bp + 12], vsprintf$7
23:		mov [bp + 14], bp
24:		add bp, 12
25:		jmp printFormat
27:	

vsprintf$7:	; post call
29:	

vsprintf$8:	; £temporary2413 = return_value
34:	

vsprintf$9:	; return_value = £temporary2413
36:	

vsprintf$10:	; return
37:		mov t1560, [bp]
38:		mov di, [bp + 4]
39:		mov bp, [bp + 2]
40:		jmp t1560
42:	

vsprintf$11:	; function end vsprintf
