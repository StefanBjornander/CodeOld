1:	

strcpy:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcpy$1:	; £temporary3030 = source + index
5:		mov a2059, [bp + 8]
6:		add a2059, [bp + 10]
8:	

strcpy$2:	; £temporary3029 -> £temporary3030 = *£temporary3030
10:	

strcpy$3:	; if £temporary3029 -> £temporary3030 == 0 goto 11
11:		cmp byte [a2059], 0
12:		je strcpy$11
14:	

strcpy$4:	; £temporary3034 = target + index
15:		mov a2060, [bp + 6]
16:		add a2060, [bp + 10]
18:	

strcpy$5:	; £temporary3033 -> £temporary3034 = *£temporary3034
20:	

strcpy$6:	; £temporary3036 = source + index
21:		mov a2061, [bp + 8]
22:		add a2061, [bp + 10]
24:	

strcpy$7:	; £temporary3035 -> £temporary3036 = *£temporary3036
26:	

strcpy$8:	; £temporary3033 -> £temporary3034 = £temporary3035 -> £temporary3036
27:		mov t2062, [a2061]
28:		mov [a2060], t2062
30:	

strcpy$9:	; ++index
31:		inc word [bp + 10]
33:	

strcpy$10:	; goto 1
34:		jmp strcpy$1
36:	

strcpy$11:	; £temporary3038 = target + index
37:		mov a2063, [bp + 6]
38:		add a2063, [bp + 10]
40:	

strcpy$12:	; £temporary3037 -> £temporary3038 = *£temporary3038
42:	

strcpy$13:	; £temporary3037 -> £temporary3038 = 0
43:		mov byte [a2063], 0
45:	

strcpy$14:	; return_value = target
46:		mov a2064, [bp + 6]
48:	

strcpy$15:	; return
49:		mov t2065, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2065
54:	

strcpy$16:	; function end strcpy
1:	

strncpy:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncpy$1:	; if index >= size goto 12
5:		mov a2066, [bp + 10]
6:		cmp [bp + 12], a2066
7:		jge strncpy$12
9:	

strncpy$2:	; £temporary3041 = source + index
10:		mov a2067, [bp + 8]
11:		add a2067, [bp + 12]
13:	

strncpy$3:	; £temporary3040 -> £temporary3041 = *£temporary3041
15:	

strncpy$4:	; if £temporary3040 -> £temporary3041 == 0 goto 12
16:		cmp byte [a2067], 0
17:		je strncpy$12
19:	

strncpy$5:	; £temporary3046 = target + index
20:		mov a2068, [bp + 6]
21:		add a2068, [bp + 12]
23:	

strncpy$6:	; £temporary3045 -> £temporary3046 = *£temporary3046
25:	

strncpy$7:	; £temporary3048 = source + index
26:		mov a2069, [bp + 8]
27:		add a2069, [bp + 12]
29:	

strncpy$8:	; £temporary3047 -> £temporary3048 = *£temporary3048
31:	

strncpy$9:	; £temporary3045 -> £temporary3046 = £temporary3047 -> £temporary3048
32:		mov t2070, [a2069]
33:		mov [a2068], t2070
35:	

strncpy$10:	; ++index
36:		inc word [bp + 12]
38:	

strncpy$11:	; goto 1
39:		jmp strncpy$1
41:	

strncpy$12:	; if index >= size goto 18
42:		mov a2071, [bp + 10]
43:		cmp [bp + 12], a2071
44:		jge strncpy$18
46:	

strncpy$13:	; £temporary3052 = target + index
47:		mov a2072, [bp + 6]
48:		add a2072, [bp + 12]
50:	

strncpy$14:	; £temporary3051 -> £temporary3052 = *£temporary3052
52:	

strncpy$15:	; £temporary3051 -> £temporary3052 = 0
53:		mov byte [a2072], 0
55:	

strncpy$16:	; ++index
56:		inc word [bp + 12]
58:	

strncpy$17:	; goto 12
59:		jmp strncpy$12
61:	

strncpy$18:	; return_value = target
62:		mov a2073, [bp + 6]
64:	

strncpy$19:	; return
65:		mov t2074, [bp]
66:		mov di, [bp + 4]
67:		mov bp, [bp + 2]
68:		jmp t2074
70:	

strncpy$20:	; function end strncpy
1:	

strcat:	; call header integral zero 0 stack zero 0
3:	

strcat$1:	; parameter target, offset 6
4:		mov a2075, [bp + 6]
5:		mov [bp + 18], a2075
7:	

strcat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 12], strcat$3
9:		mov [bp + 14], bp
10:		add bp, 12
11:		jmp strlen
13:	

strcat$3:	; post call
15:	

strcat$4:	; £temporary3053 = return_value
20:	

strcat$5:	; targetLength = £temporary3053
21:		mov [bp + 12], t2077
23:	

strcat$6:	; index = 0
24:		mov word [bp + 10], 0
26:	

strcat$7:	; £temporary3055 = source + index
27:		mov a2078, [bp + 8]
28:		add a2078, [bp + 10]
30:	

strcat$8:	; £temporary3054 -> £temporary3055 = *£temporary3055
32:	

strcat$9:	; if £temporary3054 -> £temporary3055 == 0 goto 18
33:		cmp byte [a2078], 0
34:		je strcat$18
36:	

strcat$10:	; £temporary3058 = targetLength + index
37:		mov a2079, [bp + 12]
38:		add a2079, [bp + 10]
40:	

strcat$11:	; £temporary3060 = target + £temporary3058
41:		mov a2080, [bp + 6]
42:		add a2080, a2079
44:	

strcat$12:	; £temporary3059 -> £temporary3060 = *£temporary3060
46:	

strcat$13:	; £temporary3062 = source + index
47:		mov a2081, [bp + 8]
48:		add a2081, [bp + 10]
50:	

strcat$14:	; £temporary3061 -> £temporary3062 = *£temporary3062
52:	

strcat$15:	; £temporary3059 -> £temporary3060 = £temporary3061 -> £temporary3062
53:		mov t2082, [a2081]
54:		mov [a2080], t2082
56:	

strcat$16:	; ++index
57:		inc word [bp + 10]
59:	

strcat$17:	; goto 7
60:		jmp strcat$7
62:	

strcat$18:	; £temporary3063 = targetLength + index
63:		mov a2083, [bp + 12]
64:		add a2083, [bp + 10]
66:	

strcat$19:	; £temporary3065 = target + £temporary3063
67:		mov a2084, [bp + 6]
68:		add a2084, a2083
70:	

strcat$20:	; £temporary3064 -> £temporary3065 = *£temporary3065
72:	

strcat$21:	; £temporary3064 -> £temporary3065 = 0
73:		mov byte [a2084], 0
75:	

strcat$22:	; return_value = target
76:		mov a2085, [bp + 6]
78:	

strcat$23:	; return
79:		mov t2086, [bp]
80:		mov di, [bp + 4]
81:		mov bp, [bp + 2]
82:		jmp t2086
84:	

strcat$24:	; function end strcat
1:	

strncat:	; call header integral zero 0 stack zero 0
3:	

strncat$1:	; parameter target, offset 6
4:		mov a2087, [bp + 6]
5:		mov [bp + 20], a2087
7:	

strncat$2:	; call function noellipse-noellipse strlen
8:		mov word [bp + 14], strncat$3
9:		mov [bp + 16], bp
10:		add bp, 14
11:		jmp strlen
13:	

strncat$3:	; post call
15:	

strncat$4:	; £temporary3067 = return_value
20:	

strncat$5:	; targetLength = £temporary3067
21:		mov [bp + 14], t2089
23:	

strncat$6:	; index = 0
24:		mov word [bp + 12], 0
26:	

strncat$7:	; £temporary3068 = size - 1
27:		mov a2090, [bp + 10]
28:		sub a2090, 1
30:	

strncat$8:	; if index >= £temporary3068 goto 20
31:		cmp [bp + 12], a2090
32:		jge strncat$20
34:	

strncat$9:	; £temporary3071 = source + index
35:		mov a2091, [bp + 8]
36:		add a2091, [bp + 12]
38:	

strncat$10:	; £temporary3070 -> £temporary3071 = *£temporary3071
40:	

strncat$11:	; if £temporary3070 -> £temporary3071 == 0 goto 20
41:		cmp byte [a2091], 0
42:		je strncat$20
44:	

strncat$12:	; £temporary3075 = targetLength + index
45:		mov a2092, [bp + 14]
46:		add a2092, [bp + 12]
48:	

strncat$13:	; £temporary3077 = target + £temporary3075
49:		mov a2093, [bp + 6]
50:		add a2093, a2092
52:	

strncat$14:	; £temporary3076 -> £temporary3077 = *£temporary3077
54:	

strncat$15:	; £temporary3079 = source + index
55:		mov a2094, [bp + 8]
56:		add a2094, [bp + 12]
58:	

strncat$16:	; £temporary3078 -> £temporary3079 = *£temporary3079
60:	

strncat$17:	; £temporary3076 -> £temporary3077 = £temporary3078 -> £temporary3079
61:		mov t2095, [a2094]
62:		mov [a2093], t2095
64:	

strncat$18:	; ++index
65:		inc word [bp + 12]
67:	

strncat$19:	; goto 7
68:		jmp strncat$7
70:	

strncat$20:	; £temporary3080 = targetLength + size
71:		mov a2096, [bp + 14]
72:		add a2096, [bp + 10]
74:	

strncat$21:	; £temporary3081 = £temporary3080 - 1
75:		sub a2096, 1
77:	

strncat$22:	; £temporary3083 = target + £temporary3081
78:		mov a2097, [bp + 6]
79:		add a2097, a2096
81:	

strncat$23:	; £temporary3082 -> £temporary3083 = *£temporary3083
83:	

strncat$24:	; £temporary3082 -> £temporary3083 = 0
84:		mov byte [a2097], 0
86:	

strncat$25:	; return_value = target
87:		mov a2098, [bp + 6]
89:	

strncat$26:	; return
90:		mov t2099, [bp]
91:		mov di, [bp + 4]
92:		mov bp, [bp + 2]
93:		jmp t2099
95:	

strncat$27:	; function end strncat
1:	

strcmp:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcmp$1:	; £temporary3087 = left + index
5:		mov a2100, [bp + 6]
6:		add a2100, [bp + 10]
8:	

strcmp$2:	; £temporary3086 -> £temporary3087 = *£temporary3087
10:	

strcmp$3:	; if £temporary3086 -> £temporary3087 != 0 goto 9
11:		cmp byte [a2100], 0
12:		jne strcmp$9
14:	

strcmp$4:	; £temporary3090 = right + index
15:		mov a2101, [bp + 8]
16:		add a2101, [bp + 10]
18:	

strcmp$5:	; £temporary3089 -> £temporary3090 = *£temporary3090
20:	

strcmp$6:	; if £temporary3089 -> £temporary3090 != 0 goto 9
21:		cmp byte [a2101], 0
22:		jne strcmp$9
24:	

strcmp$7:	; return_value = 0
25:		mov a2102, 0
27:	

strcmp$8:	; return
28:		mov t2103, [bp]
29:		mov di, [bp + 4]
30:		mov bp, [bp + 2]
31:		jmp t2103
33:	

strcmp$9:	; £temporary3094 = left + index
34:		mov a2104, [bp + 6]
35:		add a2104, [bp + 10]
37:	

strcmp$10:	; £temporary3093 -> £temporary3094 = *£temporary3094
39:	

strcmp$11:	; if £temporary3093 -> £temporary3094 != 0 goto 14
40:		cmp byte [a2104], 0
41:		jne strcmp$14
43:	

strcmp$12:	; return_value = -1
44:		mov a2105, -1
46:	

strcmp$13:	; return
47:		mov t2106, [bp]
48:		mov di, [bp + 4]
49:		mov bp, [bp + 2]
50:		jmp t2106
52:	

strcmp$14:	; £temporary3097 = right + index
53:		mov a2107, [bp + 8]
54:		add a2107, [bp + 10]
56:	

strcmp$15:	; £temporary3096 -> £temporary3097 = *£temporary3097
58:	

strcmp$16:	; if £temporary3096 -> £temporary3097 != 0 goto 19
59:		cmp byte [a2107], 0
60:		jne strcmp$19
62:	

strcmp$17:	; return_value = 1
63:		mov a2108, 1
65:	

strcmp$18:	; return
66:		mov t2109, [bp]
67:		mov di, [bp + 4]
68:		mov bp, [bp + 2]
69:		jmp t2109
71:	

strcmp$19:	; £temporary3100 = left + index
72:		mov a2110, [bp + 6]
73:		add a2110, [bp + 10]
75:	

strcmp$20:	; £temporary3099 -> £temporary3100 = *£temporary3100
77:	

strcmp$21:	; £temporary3102 = right + index
78:		mov a2111, [bp + 8]
79:		add a2111, [bp + 10]
81:	

strcmp$22:	; £temporary3101 -> £temporary3102 = *£temporary3102
83:	

strcmp$23:	; if £temporary3099 -> £temporary3100 >= £temporary3101 -> £temporary3102 goto 26
84:		mov t2112, [a2111]
85:		cmp [a2110], t2112
86:		jge strcmp$26
88:	

strcmp$24:	; return_value = -1
89:		mov a2113, -1
91:	

strcmp$25:	; return
92:		mov t2114, [bp]
93:		mov di, [bp + 4]
94:		mov bp, [bp + 2]
95:		jmp t2114
97:	

strcmp$26:	; £temporary3105 = left + index
98:		mov a2115, [bp + 6]
99:		add a2115, [bp + 10]
101:	

strcmp$27:	; £temporary3104 -> £temporary3105 = *£temporary3105
103:	

strcmp$28:	; £temporary3107 = right + index
104:		mov a2116, [bp + 8]
105:		add a2116, [bp + 10]
107:	

strcmp$29:	; £temporary3106 -> £temporary3107 = *£temporary3107
109:	

strcmp$30:	; if £temporary3104 -> £temporary3105 <= £temporary3106 -> £temporary3107 goto 33
110:		mov t2117, [a2116]
111:		cmp [a2115], t2117
112:		jle strcmp$33
114:	

strcmp$31:	; return_value = 1
115:		mov a2118, 1
117:	

strcmp$32:	; return
118:		mov t2119, [bp]
119:		mov di, [bp + 4]
120:		mov bp, [bp + 2]
121:		jmp t2119
123:	

strcmp$33:	; ++index
124:		inc word [bp + 10]
126:	

strcmp$34:	; goto 1
127:		jmp strcmp$1
129:	

strcmp$35:	; function end strcmp
1:	

strncmp:	; index = 0
2:		mov word [bp + 12], 0
4:	

strncmp$1:	; if index >= size goto 36
5:		mov a2120, [bp + 10]
6:		cmp [bp + 12], a2120
7:		jge strncmp$36
9:	

strncmp$2:	; £temporary3113 = left + index
10:		mov a2121, [bp + 6]
11:		add a2121, [bp + 12]
13:	

strncmp$3:	; £temporary3112 -> £temporary3113 = *£temporary3113
15:	

strncmp$4:	; if £temporary3112 -> £temporary3113 != 0 goto 10
16:		cmp byte [a2121], 0
17:		jne strncmp$10
19:	

strncmp$5:	; £temporary3116 = right + index
20:		mov a2122, [bp + 8]
21:		add a2122, [bp + 12]
23:	

strncmp$6:	; £temporary3115 -> £temporary3116 = *£temporary3116
25:	

strncmp$7:	; if £temporary3115 -> £temporary3116 != 0 goto 10
26:		cmp byte [a2122], 0
27:		jne strncmp$10
29:	

strncmp$8:	; return_value = 0
30:		mov a2123, 0
32:	

strncmp$9:	; return
33:		mov t2124, [bp]
34:		mov di, [bp + 4]
35:		mov bp, [bp + 2]
36:		jmp t2124
38:	

strncmp$10:	; £temporary3120 = left + index
39:		mov a2125, [bp + 6]
40:		add a2125, [bp + 12]
42:	

strncmp$11:	; £temporary3119 -> £temporary3120 = *£temporary3120
44:	

strncmp$12:	; if £temporary3119 -> £temporary3120 != 0 goto 15
45:		cmp byte [a2125], 0
46:		jne strncmp$15
48:	

strncmp$13:	; return_value = -1
49:		mov a2126, -1
51:	

strncmp$14:	; return
52:		mov t2127, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2127
57:	

strncmp$15:	; £temporary3123 = right + index
58:		mov a2128, [bp + 8]
59:		add a2128, [bp + 12]
61:	

strncmp$16:	; £temporary3122 -> £temporary3123 = *£temporary3123
63:	

strncmp$17:	; if £temporary3122 -> £temporary3123 != 0 goto 20
64:		cmp byte [a2128], 0
65:		jne strncmp$20
67:	

strncmp$18:	; return_value = 1
68:		mov a2129, 1
70:	

strncmp$19:	; return
71:		mov t2130, [bp]
72:		mov di, [bp + 4]
73:		mov bp, [bp + 2]
74:		jmp t2130
76:	

strncmp$20:	; £temporary3126 = left + index
77:		mov a2131, [bp + 6]
78:		add a2131, [bp + 12]
80:	

strncmp$21:	; £temporary3125 -> £temporary3126 = *£temporary3126
82:	

strncmp$22:	; £temporary3128 = right + index
83:		mov a2132, [bp + 8]
84:		add a2132, [bp + 12]
86:	

strncmp$23:	; £temporary3127 -> £temporary3128 = *£temporary3128
88:	

strncmp$24:	; if £temporary3125 -> £temporary3126 >= £temporary3127 -> £temporary3128 goto 27
89:		mov t2133, [a2132]
90:		cmp [a2131], t2133
91:		jge strncmp$27
93:	

strncmp$25:	; return_value = -1
94:		mov a2134, -1
96:	

strncmp$26:	; return
97:		mov t2135, [bp]
98:		mov di, [bp + 4]
99:		mov bp, [bp + 2]
100:		jmp t2135
102:	

strncmp$27:	; £temporary3131 = left + index
103:		mov a2136, [bp + 6]
104:		add a2136, [bp + 12]
106:	

strncmp$28:	; £temporary3130 -> £temporary3131 = *£temporary3131
108:	

strncmp$29:	; £temporary3133 = right + index
109:		mov a2137, [bp + 8]
110:		add a2137, [bp + 12]
112:	

strncmp$30:	; £temporary3132 -> £temporary3133 = *£temporary3133
114:	

strncmp$31:	; if £temporary3130 -> £temporary3131 <= £temporary3132 -> £temporary3133 goto 34
115:		mov t2138, [a2137]
116:		cmp [a2136], t2138
117:		jle strncmp$34
119:	

strncmp$32:	; return_value = 1
120:		mov a2139, 1
122:	

strncmp$33:	; return
123:		mov t2140, [bp]
124:		mov di, [bp + 4]
125:		mov bp, [bp + 2]
126:		jmp t2140
128:	

strncmp$34:	; ++index
129:		inc word [bp + 12]
131:	

strncmp$35:	; goto 1
132:		jmp strncmp$1
134:	

strncmp$36:	; return_value = 0
135:		mov a2141, 0
137:	

strncmp$37:	; return
138:		mov t2142, [bp]
139:		mov di, [bp + 4]
140:		mov bp, [bp + 2]
141:		jmp t2142
143:	

strncmp$38:	; function end strncmp
1:	

strchr:	; £temporary3135 = int_to_int i (Signed_Int -> Signed_Char)
2:		mov a2143, [bp + 8]
5:		cmp a2143, 0
6:		jge strchr$1
7:		neg a2143
9:		neg a2143
11:	

strchr$1:	; c = £temporary3135
12:		mov [bp + 12], a2143
14:	

strchr$2:	; index = 0
15:		mov word [bp + 10], 0
17:	

strchr$3:	; £temporary3137 = text + index
18:		mov a2144, [bp + 6]
19:		add a2144, [bp + 10]
21:	

strchr$4:	; £temporary3136 -> £temporary3137 = *£temporary3137
23:	

strchr$5:	; if £temporary3136 -> £temporary3137 == 0 goto 16
24:		cmp byte [a2144], 0
25:		je strchr$16
27:	

strchr$6:	; £temporary3141 = text + index
28:		mov a2145, [bp + 6]
29:		add a2145, [bp + 10]
31:	

strchr$7:	; £temporary3140 -> £temporary3141 = *£temporary3141
33:	

strchr$8:	; if £temporary3140 -> £temporary3141 != c goto 14
34:		mov a2146, [bp + 12]
35:		cmp [a2145], a2146
36:		jne strchr$14
38:	

strchr$9:	; £temporary3144 = text + index
39:		mov a2147, [bp + 6]
40:		add a2147, [bp + 10]
42:	

strchr$10:	; £temporary3143 -> £temporary3144 = *£temporary3144
44:	

strchr$11:	; £temporary3145 = &£temporary3143 -> £temporary3144
46:	

strchr$12:	; return_value = £temporary3145
48:	

strchr$13:	; return
49:		mov t2148, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2148
54:	

strchr$14:	; ++index
55:		inc word [bp + 10]
57:	

strchr$15:	; goto 3
58:		jmp strchr$3
60:	

strchr$16:	; return_value = 0
61:		mov a2149, 0
63:	

strchr$17:	; return
64:		mov t2150, [bp]
65:		mov di, [bp + 4]
66:		mov bp, [bp + 2]
67:		jmp t2150
69:	

strchr$18:	; function end strchr
1:	

strrchr:	; result = 0
2:		mov word [bp + 12], 0
4:	

strrchr$1:	; £temporary3146 = int_to_int i (Signed_Int -> Signed_Char)
5:		mov a2151, [bp + 8]
8:		cmp a2151, 0
9:		jge strrchr$2
10:		neg a2151
12:		neg a2151
14:	

strrchr$2:	; c = £temporary3146
15:		mov [bp + 14], a2151
17:	

strrchr$3:	; index = 0
18:		mov word [bp + 10], 0
20:	

strrchr$4:	; £temporary3148 = text + index
21:		mov a2152, [bp + 6]
22:		add a2152, [bp + 10]
24:	

strrchr$5:	; £temporary3147 -> £temporary3148 = *£temporary3148
26:	

strrchr$6:	; if £temporary3147 -> £temporary3148 == 0 goto 16
27:		cmp byte [a2152], 0
28:		je strrchr$16
30:	

strrchr$7:	; £temporary3152 = text + index
31:		mov a2153, [bp + 6]
32:		add a2153, [bp + 10]
34:	

strrchr$8:	; £temporary3151 -> £temporary3152 = *£temporary3152
36:	

strrchr$9:	; if £temporary3151 -> £temporary3152 != c goto 14
37:		mov a2154, [bp + 14]
38:		cmp [a2153], a2154
39:		jne strrchr$14
41:	

strrchr$10:	; £temporary3155 = text + index
42:		mov a2155, [bp + 6]
43:		add a2155, [bp + 10]
45:	

strrchr$11:	; £temporary3154 -> £temporary3155 = *£temporary3155
47:	

strrchr$12:	; £temporary3156 = &£temporary3154 -> £temporary3155
49:	

strrchr$13:	; result = £temporary3156
50:		mov [bp + 12], a2155
52:	

strrchr$14:	; ++index
53:		inc word [bp + 10]
55:	

strrchr$15:	; goto 4
56:		jmp strrchr$4
58:	

strrchr$16:	; return_value = result
59:		mov a2156, [bp + 12]
61:	

strrchr$17:	; return
62:		mov t2157, [bp]
63:		mov di, [bp + 4]
64:		mov bp, [bp + 2]
65:		jmp t2157
67:	

strrchr$18:	; function end strrchr
1:	

strspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strspn$1:	; £temporary3158 = mainString + index
5:		mov a2158, [bp + 6]
6:		add a2158, [bp + 10]
8:	

strspn$2:	; £temporary3157 -> £temporary3158 = *£temporary3158
10:	

strspn$3:	; if £temporary3157 -> £temporary3158 == 0 goto 18
11:		cmp byte [a2158], 0
12:		je strspn$18
14:	

strspn$4:	; call header integral zero 0 stack zero 0
16:	

strspn$5:	; parameter charSet, offset 6
17:		mov a2159, [bp + 8]
18:		mov [bp + 18], a2159
20:	

strspn$6:	; £temporary3162 = mainString + index
21:		mov a2160, [bp + 6]
22:		add a2160, [bp + 10]
24:	

strspn$7:	; £temporary3161 -> £temporary3162 = *£temporary3162
26:	

strspn$8:	; £temporary3163 = int_to_int £temporary3161 -> £temporary3162 (Signed_Char -> Signed_Int)
27:		mov t2161, [a2160]
29:		and t2161, 255
31:		cmp t2161, 0
32:		jge strspn$9
33:		neg t2161
35:		neg t2161
37:	

strspn$9:	; parameter £temporary3163, offset 8
38:		mov [bp + 20], t2161
40:	

strspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strspn$11:	; post call
48:	

strspn$12:	; £temporary3164 = return_value
53:	

strspn$13:	; if £temporary3164 != 0 goto 16
54:		cmp t2163, 0
55:		jne strspn$16
57:	

strspn$14:	; return_value = index
58:		mov a2164, [bp + 10]
60:	

strspn$15:	; return
61:		mov t2165, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t2165
66:	

strspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strspn$17:	; goto 1
70:		jmp strspn$1
72:	

strspn$18:	; return_value = -1
73:		mov a2166, -1
75:	

strspn$19:	; return
76:		mov t2167, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2167
81:	

strspn$20:	; function end strspn
1:	

strcspn:	; index = 0
2:		mov word [bp + 10], 0
4:	

strcspn$1:	; £temporary3169 = mainString + index
5:		mov a2168, [bp + 6]
6:		add a2168, [bp + 10]
8:	

strcspn$2:	; £temporary3168 -> £temporary3169 = *£temporary3169
10:	

strcspn$3:	; if £temporary3168 -> £temporary3169 == 0 goto 18
11:		cmp byte [a2168], 0
12:		je strcspn$18
14:	

strcspn$4:	; call header integral zero 0 stack zero 0
16:	

strcspn$5:	; parameter charSet, offset 6
17:		mov a2169, [bp + 8]
18:		mov [bp + 18], a2169
20:	

strcspn$6:	; £temporary3173 = mainString + index
21:		mov a2170, [bp + 6]
22:		add a2170, [bp + 10]
24:	

strcspn$7:	; £temporary3172 -> £temporary3173 = *£temporary3173
26:	

strcspn$8:	; £temporary3174 = int_to_int £temporary3172 -> £temporary3173 (Signed_Char -> Signed_Int)
27:		mov t2171, [a2170]
29:		and t2171, 255
31:		cmp t2171, 0
32:		jge strcspn$9
33:		neg t2171
35:		neg t2171
37:	

strcspn$9:	; parameter £temporary3174, offset 8
38:		mov [bp + 20], t2171
40:	

strcspn$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strcspn$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strcspn$11:	; post call
48:	

strcspn$12:	; £temporary3175 = return_value
53:	

strcspn$13:	; if £temporary3175 == 0 goto 16
54:		cmp t2173, 0
55:		je strcspn$16
57:	

strcspn$14:	; return_value = index
58:		mov a2174, [bp + 10]
60:	

strcspn$15:	; return
61:		mov t2175, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp t2175
66:	

strcspn$16:	; ++index
67:		inc word [bp + 10]
69:	

strcspn$17:	; goto 1
70:		jmp strcspn$1
72:	

strcspn$18:	; return_value = -1
73:		mov a2176, -1
75:	

strcspn$19:	; return
76:		mov t2177, [bp]
77:		mov di, [bp + 4]
78:		mov bp, [bp + 2]
79:		jmp t2177
81:	

strcspn$20:	; function end strcspn
1:	

strpbrk:	; index = 0
2:		mov word [bp + 10], 0
4:	

strpbrk$1:	; £temporary3180 = mainString + index
5:		mov a2178, [bp + 6]
6:		add a2178, [bp + 10]
8:	

strpbrk$2:	; £temporary3179 -> £temporary3180 = *£temporary3180
10:	

strpbrk$3:	; if £temporary3179 -> £temporary3180 == 0 goto 21
11:		cmp byte [a2178], 0
12:		je strpbrk$21
14:	

strpbrk$4:	; call header integral zero 0 stack zero 0
16:	

strpbrk$5:	; parameter charSet, offset 6
17:		mov a2179, [bp + 8]
18:		mov [bp + 18], a2179
20:	

strpbrk$6:	; £temporary3184 = mainString + index
21:		mov a2180, [bp + 6]
22:		add a2180, [bp + 10]
24:	

strpbrk$7:	; £temporary3183 -> £temporary3184 = *£temporary3184
26:	

strpbrk$8:	; £temporary3185 = int_to_int £temporary3183 -> £temporary3184 (Signed_Char -> Signed_Int)
27:		mov t2181, [a2180]
29:		and t2181, 255
31:		cmp t2181, 0
32:		jge strpbrk$9
33:		neg t2181
35:		neg t2181
37:	

strpbrk$9:	; parameter £temporary3185, offset 8
38:		mov [bp + 20], t2181
40:	

strpbrk$10:	; call function noellipse-noellipse strchr
41:		mov word [bp + 12], strpbrk$11
42:		mov [bp + 14], bp
43:		add bp, 12
44:		jmp strchr
46:	

strpbrk$11:	; post call
48:	

strpbrk$12:	; £temporary3186 = return_value
53:	

strpbrk$13:	; if £temporary3186 == 0 goto 19
54:		cmp t2183, 0
55:		je strpbrk$19
57:	

strpbrk$14:	; £temporary3189 = mainString + index
58:		mov a2184, [bp + 6]
59:		add a2184, [bp + 10]
61:	

strpbrk$15:	; £temporary3188 -> £temporary3189 = *£temporary3189
63:	

strpbrk$16:	; £temporary3190 = &£temporary3188 -> £temporary3189
65:	

strpbrk$17:	; return_value = £temporary3190
67:	

strpbrk$18:	; return
68:		mov t2185, [bp]
69:		mov di, [bp + 4]
70:		mov bp, [bp + 2]
71:		jmp t2185
73:	

strpbrk$19:	; ++index
74:		inc word [bp + 10]
76:	

strpbrk$20:	; goto 1
77:		jmp strpbrk$1
79:	

strpbrk$21:	; return_value = 0
80:		mov a2186, 0
82:	

strpbrk$22:	; return
83:		mov t2187, [bp]
84:		mov di, [bp + 4]
85:		mov bp, [bp + 2]
86:		jmp t2187
88:	

strpbrk$23:	; function end strpbrk
1:	

strstr:	; index = 0
2:		mov word [bp + 10], 0
4:	

strstr$1:	; £temporary3194 = mainString + index
5:		mov a2188, [bp + 6]
6:		add a2188, [bp + 10]
8:	

strstr$2:	; £temporary3193 -> £temporary3194 = *£temporary3194
10:	

strstr$3:	; if £temporary3193 -> £temporary3194 == 0 goto 19
11:		cmp byte [a2188], 0
12:		je strstr$19
14:	

strstr$4:	; call header integral zero 0 stack zero 0
16:	

strstr$5:	; £temporary3197 = mainString + index
17:		mov a2189, [bp + 6]
18:		add a2189, [bp + 10]
20:	

strstr$6:	; parameter £temporary3197, offset 6
21:		mov [bp + 18], a2189
23:	

strstr$7:	; parameter subString, offset 8
24:		mov a2190, [bp + 8]
25:		mov [bp + 20], a2190
27:	

strstr$8:	; call function noellipse-noellipse strcmp
28:		mov word [bp + 12], strstr$9
29:		mov [bp + 14], bp
30:		add bp, 12
31:		jmp strcmp
33:	

strstr$9:	; post call
35:	

strstr$10:	; £temporary3198 = return_value
40:	

strstr$11:	; if £temporary3198 != 0 goto 17
41:		cmp t2192, 0
42:		jne strstr$17
44:	

strstr$12:	; £temporary3201 = mainString + index
45:		mov a2193, [bp + 6]
46:		add a2193, [bp + 10]
48:	

strstr$13:	; £temporary3200 -> £temporary3201 = *£temporary3201
50:	

strstr$14:	; £temporary3202 = &£temporary3200 -> £temporary3201
52:	

strstr$15:	; return_value = £temporary3202
54:	

strstr$16:	; return
55:		mov t2194, [bp]
56:		mov di, [bp + 4]
57:		mov bp, [bp + 2]
58:		jmp t2194
60:	

strstr$17:	; ++index
61:		inc word [bp + 10]
63:	

strstr$18:	; goto 1
64:		jmp strstr$1
66:	

strstr$19:	; return_value = 0
67:		mov a2195, 0
69:	

strstr$20:	; return
70:		mov t2196, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2196
75:	

strstr$21:	; function end strstr
1:	

strlen:	; index = 0
2:		mov word [bp + 8], 0
4:	

strlen$1:	; £temporary3206 = string + index
5:		mov a2197, [bp + 6]
6:		add a2197, [bp + 8]
8:	

strlen$2:	; £temporary3205 -> £temporary3206 = *£temporary3206
10:	

strlen$3:	; if £temporary3205 -> £temporary3206 == 0 goto 6
11:		cmp byte [a2197], 0
12:		je strlen$6
14:	

strlen$4:	; ++index
15:		inc word [bp + 8]
17:	

strlen$5:	; goto 1
18:		jmp strlen$1
20:	

strlen$6:	; return_value = index
21:		mov a2198, [bp + 8]
23:	

strlen$7:	; return
24:		mov t2199, [bp]
25:		mov di, [bp + 4]
26:		mov bp, [bp + 2]
27:		jmp t2199
29:	

strlen$8:	; function end strlen
1:	

strerror:	; call header integral zero 0 stack zero 0
3:	

strerror$1:	; call function noellipse-noellipse localeconv
4:		mov word [bp + 8], strerror$2
5:		mov [bp + 10], bp
6:		add bp, 8
7:		jmp localeconv
9:	

strerror$2:	; post call
11:	

strerror$3:	; £temporary3209 = return_value
16:	

strerror$4:	; localeConvPtr = £temporary3209
17:		mov [bp + 8], t2201
19:	

strerror$5:	; if localeConvPtr == 0 goto 9
20:		cmp word [bp + 8], 0
21:		je strerror$9
23:	

strerror$6:	; £temporary3211 -> localeConvPtr = *localeConvPtr, offset 16
24:		mov a2202, [bp + 8]
26:	

strerror$7:	; £temporary3215 = £temporary3211 -> localeConvPtr
27:		mov t2203, [a2202 + 16]
29:	

strerror$8:	; goto 10
30:		jmp strerror$10
32:	

strerror$9:	; £temporary3215 = 0
33:		mov t2204, 0
35:	

strerror$10:	; messageList = £temporary3215
36:		mov [bp + 10], t2204
38:	

strerror$11:	; if messageList == 0 goto 14
39:		cmp word [bp + 10], 0
40:		je strerror$14
42:	

strerror$12:	; £temporary3220 = messageList
43:		mov t2205, [bp + 10]
45:	

strerror$13:	; goto 15
46:		jmp strerror$15
48:	

strerror$14:	; £temporary3220 = enMessageList
49:		mov t2206, enMessageList
51:	

strerror$15:	; messageList = £temporary3220
52:		mov [bp + 10], t2206
54:	

strerror$16:	; £temporary3222 = errno * 2
55:		mov a2207, [bp + 6]
57:		xor dx, dx
58:		mul word [int2$2#]
64:	

strerror$17:	; £temporary3223 = messageList + £temporary3222
65:		mov a2211, [bp + 10]
66:		add a2211, t2210
68:	

strerror$18:	; £temporary3221 -> £temporary3223 = *£temporary3223
70:	

strerror$19:	; return_value = £temporary3221 -> £temporary3223
71:		mov t2212, [a2211]
73:	

strerror$20:	; return
74:		mov t2213, [bp]
75:		mov di, [bp + 4]
76:		mov bp, [bp + 2]
77:		jmp t2213
79:	

strerror$21:	; function end strerror
1:	

strtok:	; if string == 0 goto 37
2:		cmp word [bp + 6], 0
3:		je strtok$37
5:	

strtok$1:	; £temporary3225 -> string = *string
6:		mov a2214, [bp + 6]
8:	

strtok$2:	; if £temporary3225 -> string != 0 goto 5
9:		cmp byte [a2214], 0
10:		jne strtok$5
12:	

strtok$3:	; return_value = 0
13:		mov a2215, 0
15:	

strtok$4:	; return
16:		mov t2216, [bp]
17:		mov di, [bp + 4]
18:		mov bp, [bp + 2]
19:		jmp t2216
21:	

strtok$5:	; index = 0
22:		mov word [bp + 10], 0
24:	

strtok$6:	; £temporary3228 = string + index
25:		mov a2217, [bp + 6]
26:		add a2217, [bp + 10]
28:	

strtok$7:	; £temporary3227 -> £temporary3228 = *£temporary3228
30:	

strtok$8:	; if £temporary3227 -> £temporary3228 == 0 goto 31
31:		cmp byte [a2217], 0
32:		je strtok$31
34:	

strtok$9:	; call header integral zero 0 stack zero 0
36:	

strtok$10:	; parameter charSet, offset 6
37:		mov a2218, [bp + 8]
38:		mov [bp + 20], a2218
40:	

strtok$11:	; £temporary3232 = string + index
41:		mov a2219, [bp + 6]
42:		add a2219, [bp + 10]
44:	

strtok$12:	; £temporary3231 -> £temporary3232 = *£temporary3232
46:	

strtok$13:	; £temporary3233 = int_to_int £temporary3231 -> £temporary3232 (Signed_Char -> Signed_Int)
47:		mov t2220, [a2219]
49:		and t2220, 255
51:		cmp t2220, 0
52:		jge strtok$14
53:		neg t2220
55:		neg t2220
57:	

strtok$14:	; parameter £temporary3233, offset 8
58:		mov [bp + 22], t2220
60:	

strtok$15:	; call function noellipse-noellipse strchr
61:		mov word [bp + 14], strtok$16
62:		mov [bp + 16], bp
63:		add bp, 14
64:		jmp strchr
66:	

strtok$16:	; post call
68:	

strtok$17:	; £temporary3234 = return_value
73:	

strtok$18:	; if £temporary3234 == 0 goto 29
74:		cmp t2222, 0
75:		je strtok$29
77:	

strtok$19:	; £temporary3237 = string + index
78:		mov a2223, [bp + 6]
79:		add a2223, [bp + 10]
81:	

strtok$20:	; £temporary3236 -> £temporary3237 = *£temporary3237
83:	

strtok$21:	; £temporary3236 -> £temporary3237 = 0
84:		mov byte [a2223], 0
86:	

strtok$22:	; £temporary3238 = index + 1
87:		mov a2224, [bp + 10]
88:		add a2224, 1
90:	

strtok$23:	; £temporary3240 = string + £temporary3238
91:		mov a2225, [bp + 6]
92:		add a2225, a2224
94:	

strtok$24:	; £temporary3239 -> £temporary3240 = *£temporary3240
96:	

strtok$25:	; £temporary3241 = &£temporary3239 -> £temporary3240
98:	

strtok$26:	; token = £temporary3241
99:		mov [token], a2225
101:	

strtok$27:	; return_value = string
102:		mov a2226, [bp + 6]
104:	

strtok$28:	; return
105:		mov t2227, [bp]
106:		mov di, [bp + 4]
107:		mov bp, [bp + 2]
108:		jmp t2227
110:	

strtok$29:	; ++index
111:		inc word [bp + 10]
113:	

strtok$30:	; goto 6
114:		jmp strtok$6
116:	

strtok$31:	; £temporary3243 = string + index
117:		mov a2228, [bp + 6]
118:		add a2228, [bp + 10]
120:	

strtok$32:	; £temporary3242 -> £temporary3243 = *£temporary3243
122:	

strtok$33:	; £temporary3244 = &£temporary3242 -> £temporary3243
124:	

strtok$34:	; token = £temporary3244
125:		mov [token], a2228
127:	

strtok$35:	; return_value = string
128:		mov a2229, [bp + 6]
130:	

strtok$36:	; return
131:		mov t2230, [bp]
132:		mov di, [bp + 4]
133:		mov bp, [bp + 2]
134:		jmp t2230
136:	

strtok$37:	; if token != 0 goto 40
137:		cmp word [token], 0
138:		jne strtok$40
140:	

strtok$38:	; return_value = 0
141:		mov a2231, 0
143:	

strtok$39:	; return
144:		mov t2232, [bp]
145:		mov di, [bp + 4]
146:		mov bp, [bp + 2]
147:		jmp t2232
149:	

strtok$40:	; if (token,0) != 0 goto 43
150:		mov a2233, [token]
151:		cmp byte [a2233], 0
152:		jne strtok$43
154:	

strtok$41:	; return_value = 0
155:		mov a2234, 0
157:	

strtok$42:	; return
158:		mov t2235, [bp]
159:		mov di, [bp + 4]
160:		mov bp, [bp + 2]
161:		jmp t2235
163:	

strtok$43:	; index = 0
164:		mov word [bp + 10], 0
166:	

strtok$44:	; £temporary3249 = token + index
167:		mov a2236, [token]
168:		add a2236, [bp + 10]
170:	

strtok$45:	; £temporary3248 -> £temporary3249 = *£temporary3249
172:	

strtok$46:	; if £temporary3248 -> £temporary3249 == 0 goto 70
173:		cmp byte [a2236], 0
174:		je strtok$70
176:	

strtok$47:	; call header integral zero 0 stack zero 0
178:	

strtok$48:	; parameter charSet, offset 6
179:		mov a2237, [bp + 8]
180:		mov [bp + 20], a2237
182:	

strtok$49:	; £temporary3253 = token + index
183:		mov a2238, [token]
184:		add a2238, [bp + 10]
186:	

strtok$50:	; £temporary3252 -> £temporary3253 = *£temporary3253
188:	

strtok$51:	; £temporary3254 = int_to_int £temporary3252 -> £temporary3253 (Signed_Char -> Signed_Int)
189:		mov t2239, [a2238]
191:		and t2239, 255
193:		cmp t2239, 0
194:		jge strtok$52
195:		neg t2239
197:		neg t2239
199:	

strtok$52:	; parameter £temporary3254, offset 8
200:		mov [bp + 22], t2239
202:	

strtok$53:	; call function noellipse-noellipse strchr
203:		mov word [bp + 14], strtok$54
204:		mov [bp + 16], bp
205:		add bp, 14
206:		jmp strchr
208:	

strtok$54:	; post call
210:	

strtok$55:	; £temporary3255 = return_value
215:	

strtok$56:	; if £temporary3255 == 0 goto 68
216:		cmp t2241, 0
217:		je strtok$68
219:	

strtok$57:	; tokenStart2 = token
220:		mov a2242, [token]
221:		mov [bp + 14], a2242
223:	

strtok$58:	; £temporary3258 = token + index
224:		mov a2243, [token]
225:		add a2243, [bp + 10]
227:	

strtok$59:	; £temporary3257 -> £temporary3258 = *£temporary3258
229:	

strtok$60:	; £temporary3257 -> £temporary3258 = 0
230:		mov byte [a2243], 0
232:	

strtok$61:	; £temporary3259 = index + 1
233:		mov a2244, [bp + 10]
234:		add a2244, 1
236:	

strtok$62:	; £temporary3261 = token + £temporary3259
237:		mov a2245, [token]
238:		add a2245, a2244
240:	

strtok$63:	; £temporary3260 -> £temporary3261 = *£temporary3261
242:	

strtok$64:	; £temporary3262 = &£temporary3260 -> £temporary3261
244:	

strtok$65:	; token = £temporary3262
245:		mov [token], a2245
247:	

strtok$66:	; return_value = tokenStart2
248:		mov a2246, [bp + 14]
250:	

strtok$67:	; return
251:		mov t2247, [bp]
252:		mov di, [bp + 4]
253:		mov bp, [bp + 2]
254:		jmp t2247
256:	

strtok$68:	; ++index
257:		inc word [bp + 10]
259:	

strtok$69:	; goto 44
260:		jmp strtok$44
262:	

strtok$70:	; tokenStart = token
263:		mov a2248, [token]
264:		mov [bp + 12], a2248
266:	

strtok$71:	; £temporary3264 = token + index
267:		mov a2249, [token]
268:		add a2249, [bp + 10]
270:	

strtok$72:	; £temporary3263 -> £temporary3264 = *£temporary3264
272:	

strtok$73:	; £temporary3265 = &£temporary3263 -> £temporary3264
274:	

strtok$74:	; token = £temporary3265
275:		mov [token], a2249
277:	

strtok$75:	; return_value = tokenStart
278:		mov a2250, [bp + 12]
280:	

strtok$76:	; return
281:		mov t2251, [bp]
282:		mov di, [bp + 4]
283:		mov bp, [bp + 2]
284:		jmp t2251
286:	

strtok$77:	; function end strtok
1:	

memcpy:	; £temporary3270 = int_to_int target (Pointer -> Pointer)
2:		mov a2252, [bp + 6]
5:	

memcpy$1:	; charTarget = £temporary3270
6:		mov [bp + 12], a2252
8:	

memcpy$2:	; £temporary3271 = int_to_int source (Pointer -> Pointer)
9:		mov a2253, [bp + 8]
12:	

memcpy$3:	; charSource = £temporary3271
13:		mov [bp + 14], a2253
15:	

memcpy$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcpy$5:	; if index >= size goto 13
19:		mov a2254, [bp + 10]
20:		cmp [bp + 16], a2254
21:		jge memcpy$13
23:	

memcpy$6:	; £temporary3275 = charTarget + index
24:		mov a2255, [bp + 12]
25:		add a2255, [bp + 16]
27:	

memcpy$7:	; £temporary3274 -> £temporary3275 = *£temporary3275
29:	

memcpy$8:	; £temporary3277 = charSource + index
30:		mov a2256, [bp + 14]
31:		add a2256, [bp + 16]
33:	

memcpy$9:	; £temporary3276 -> £temporary3277 = *£temporary3277
35:	

memcpy$10:	; £temporary3274 -> £temporary3275 = £temporary3276 -> £temporary3277
36:		mov t2257, [a2256]
37:		mov [a2255], t2257
39:	

memcpy$11:	; ++index
40:		inc word [bp + 16]
42:	

memcpy$12:	; goto 5
43:		jmp memcpy$5
45:	

memcpy$13:	; £temporary3278 = int_to_int target (Pointer -> Pointer)
46:		mov a2258, [bp + 6]
49:	

memcpy$14:	; return_value = £temporary3278
51:	

memcpy$15:	; return
52:		mov t2259, [bp]
53:		mov di, [bp + 4]
54:		mov bp, [bp + 2]
55:		jmp t2259
57:	

memcpy$16:	; function end memcpy
1:	

memmove:	; £temporary3279 = int_to_int target (Pointer -> Pointer)
2:		mov a2260, [bp + 6]
5:	

memmove$1:	; charTarget = £temporary3279
6:		mov [bp + 12], a2260
8:	

memmove$2:	; £temporary3280 = int_to_int source (Pointer -> Pointer)
9:		mov a2261, [bp + 8]
12:	

memmove$3:	; charSource = £temporary3280
13:		mov [bp + 14], a2261
15:	

memmove$4:	; if source >= target goto 14
16:		mov a2262, [bp + 6]
17:		cmp [bp + 8], a2262
18:		jge memmove$14
20:	

memmove$5:	; index = size - 1
21:		mov a2263, [bp + 10]
22:		sub a2263, 1
23:		mov [bp + 16], a2263
25:	

memmove$6:	; if index < 0 goto 23
26:		cmp word [bp + 16], 0
27:		jl memmove$23
29:	

memmove$7:	; £temporary3286 = charTarget + index
30:		mov a2264, [bp + 12]
31:		add a2264, [bp + 16]
33:	

memmove$8:	; £temporary3285 -> £temporary3286 = *£temporary3286
35:	

memmove$9:	; £temporary3288 = charSource + index
36:		mov a2265, [bp + 14]
37:		add a2265, [bp + 16]
39:	

memmove$10:	; £temporary3287 -> £temporary3288 = *£temporary3288
41:	

memmove$11:	; £temporary3285 -> £temporary3286 = £temporary3287 -> £temporary3288
42:		mov t2266, [a2265]
43:		mov [a2264], t2266
45:	

memmove$12:	; --index
46:		dec word [bp + 16]
48:	

memmove$13:	; goto 6
49:		jmp memmove$6
51:	

memmove$14:	; index = 0
52:		mov word [bp + 16], 0
54:	

memmove$15:	; if index >= size goto 23
55:		mov a2267, [bp + 10]
56:		cmp [bp + 16], a2267
57:		jge memmove$23
59:	

memmove$16:	; £temporary3292 = charTarget + index
60:		mov a2268, [bp + 12]
61:		add a2268, [bp + 16]
63:	

memmove$17:	; £temporary3291 -> £temporary3292 = *£temporary3292
65:	

memmove$18:	; £temporary3294 = charSource + index
66:		mov a2269, [bp + 14]
67:		add a2269, [bp + 16]
69:	

memmove$19:	; £temporary3293 -> £temporary3294 = *£temporary3294
71:	

memmove$20:	; £temporary3291 -> £temporary3292 = £temporary3293 -> £temporary3294
72:		mov t2270, [a2269]
73:		mov [a2268], t2270
75:	

memmove$21:	; ++index
76:		inc word [bp + 16]
78:	

memmove$22:	; goto 15
79:		jmp memmove$15
81:	

memmove$23:	; £temporary3295 = int_to_int target (Pointer -> Pointer)
82:		mov a2271, [bp + 6]
85:	

memmove$24:	; return_value = £temporary3295
87:	

memmove$25:	; return
88:		mov t2272, [bp]
89:		mov di, [bp + 4]
90:		mov bp, [bp + 2]
91:		jmp t2272
93:	

memmove$26:	; function end memmove
1:	

memcmp:	; £temporary3296 = int_to_int left (Pointer -> Pointer)
2:		mov a2273, [bp + 6]
5:	

memcmp$1:	; charLeft = £temporary3296
6:		mov [bp + 12], a2273
8:	

memcmp$2:	; £temporary3297 = int_to_int right (Pointer -> Pointer)
9:		mov a2274, [bp + 8]
12:	

memcmp$3:	; charRight = £temporary3297
13:		mov [bp + 14], a2274
15:	

memcmp$4:	; index = 0
16:		mov word [bp + 16], 0
18:	

memcmp$5:	; if index >= size goto 22
19:		mov a2275, [bp + 10]
20:		cmp [bp + 16], a2275
21:		jge memcmp$22
23:	

memcmp$6:	; £temporary3301 = charLeft + index
24:		mov a2276, [bp + 12]
25:		add a2276, [bp + 16]
27:	

memcmp$7:	; £temporary3300 -> £temporary3301 = *£temporary3301
29:	

memcmp$8:	; £temporary3303 = charRight + index
30:		mov a2277, [bp + 14]
31:		add a2277, [bp + 16]
33:	

memcmp$9:	; £temporary3302 -> £temporary3303 = *£temporary3303
35:	

memcmp$10:	; if £temporary3300 -> £temporary3301 >= £temporary3302 -> £temporary3303 goto 13
36:		mov t2278, [a2277]
37:		cmp [a2276], t2278
38:		jge memcmp$13
40:	

memcmp$11:	; return_value = -1
41:		mov a2279, -1
43:	

memcmp$12:	; return
44:		mov t2280, [bp]
45:		mov di, [bp + 4]
46:		mov bp, [bp + 2]
47:		jmp t2280
49:	

memcmp$13:	; £temporary3306 = charLeft + index
50:		mov a2281, [bp + 12]
51:		add a2281, [bp + 16]
53:	

memcmp$14:	; £temporary3305 -> £temporary3306 = *£temporary3306
55:	

memcmp$15:	; £temporary3308 = charRight + index
56:		mov a2282, [bp + 14]
57:		add a2282, [bp + 16]
59:	

memcmp$16:	; £temporary3307 -> £temporary3308 = *£temporary3308
61:	

memcmp$17:	; if £temporary3305 -> £temporary3306 <= £temporary3307 -> £temporary3308 goto 20
62:		mov t2283, [a2282]
63:		cmp [a2281], t2283
64:		jle memcmp$20
66:	

memcmp$18:	; return_value = 1
67:		mov a2284, 1
69:	

memcmp$19:	; return
70:		mov t2285, [bp]
71:		mov di, [bp + 4]
72:		mov bp, [bp + 2]
73:		jmp t2285
75:	

memcmp$20:	; ++index
76:		inc word [bp + 16]
78:	

memcmp$21:	; goto 5
79:		jmp memcmp$5
81:	

memcmp$22:	; return_value = 0
82:		mov a2286, 0
84:	

memcmp$23:	; return
85:		mov t2287, [bp]
86:		mov di, [bp + 4]
87:		mov bp, [bp + 2]
88:		jmp t2287
90:	

memcmp$24:	; function end memcmp
1:	

memchr:	; £temporary3310 = int_to_int block (Pointer -> Pointer)
2:		mov a2288, [bp + 6]
5:	

memchr$1:	; charBlock = £temporary3310
6:		mov [bp + 14], a2288
8:	

memchr$2:	; £temporary3311 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov a2289, [bp + 8]
12:		cmp a2289, 0
13:		jge memchr$3
14:		neg a2289
16:		neg a2289
18:	

memchr$3:	; c = £temporary3311
19:		mov [bp + 16], a2289
21:	

memchr$4:	; index = 0
22:		mov word [bp + 12], 0
24:	

memchr$5:	; if index >= size goto 17
25:		mov a2290, [bp + 10]
26:		cmp [bp + 12], a2290
27:		jge memchr$17
29:	

memchr$6:	; £temporary3315 = charBlock + index
30:		mov a2291, [bp + 14]
31:		add a2291, [bp + 12]
33:	

memchr$7:	; £temporary3314 -> £temporary3315 = *£temporary3315
35:	

memchr$8:	; if £temporary3314 -> £temporary3315 != c goto 15
36:		mov a2292, [bp + 16]
37:		cmp [a2291], a2292
38:		jne memchr$15
40:	

memchr$9:	; £temporary3318 = charBlock + index
41:		mov a2293, [bp + 14]
42:		add a2293, [bp + 12]
44:	

memchr$10:	; £temporary3317 -> £temporary3318 = *£temporary3318
46:	

memchr$11:	; £temporary3319 = &£temporary3317 -> £temporary3318
48:	

memchr$12:	; £temporary3320 = int_to_int £temporary3319 (Pointer -> Pointer)
51:	

memchr$13:	; return_value = £temporary3320
53:	

memchr$14:	; return
54:		mov t2294, [bp]
55:		mov di, [bp + 4]
56:		mov bp, [bp + 2]
57:		jmp t2294
59:	

memchr$15:	; ++index
60:		inc word [bp + 12]
62:	

memchr$16:	; goto 5
63:		jmp memchr$5
65:	

memchr$17:	; return_value = 0
66:		mov a2295, 0
68:	

memchr$18:	; return
69:		mov t2296, [bp]
70:		mov di, [bp + 4]
71:		mov bp, [bp + 2]
72:		jmp t2296
74:	

memchr$19:	; function end memchr
1:	

memset:	; £temporary3321 = int_to_int block (Pointer -> Pointer)
2:		mov a2297, [bp + 6]
5:	

memset$1:	; charBlock = £temporary3321
6:		mov [bp + 12], a2297
8:	

memset$2:	; £temporary3322 = int_to_int i (Signed_Int -> Signed_Char)
9:		mov a2298, [bp + 8]
12:		cmp a2298, 0
13:		jge memset$3
14:		neg a2298
16:		neg a2298
18:	

memset$3:	; c = £temporary3322
19:		mov [bp + 14], a2298
21:	

memset$4:	; index = 0
22:		mov word [bp + 15], 0
24:	

memset$5:	; if index >= size goto 11
25:		mov a2299, [bp + 10]
26:		cmp [bp + 15], a2299
27:		jge memset$11
29:	

memset$6:	; £temporary3326 = charBlock + index
30:		mov a2300, [bp + 12]
31:		add a2300, [bp + 15]
33:	

memset$7:	; £temporary3325 -> £temporary3326 = *£temporary3326
35:	

memset$8:	; £temporary3325 -> £temporary3326 = c
36:		mov a2301, [bp + 14]
37:		mov [a2300], a2301
39:	

memset$9:	; ++index
40:		inc word [bp + 15]
42:	

memset$10:	; goto 5
43:		jmp memset$5
45:	

memset$11:	; return_value = block
46:		mov a2302, [bp + 6]
48:	

memset$12:	; return
49:		mov t2303, [bp]
50:		mov di, [bp + 4]
51:		mov bp, [bp + 2]
52:		jmp t2303
54:	

memset$13:	; function end memset
