1:	

malloc:	; if memorySize >= 0 goto 12
2:		cmp word [bp + 6], 0
3:		jge malloc$12
5:	

malloc$1:	; call header integral zero 0 stack zero 0
7:	

malloc$2:	; parameter stderr, offset 6
8:		mov ax, [stderr]
9:		mov [bp + 14], ax
11:	

malloc$3:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
12:		mov word [bp + 16], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
14:	

malloc$4:	; parameter string_memorySize203E3D200#, offset 10
15:		mov word [bp + 18], string_memorySize203E3D200#
17:	

malloc$5:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#, offset 12
18:		mov word [bp + 20], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#
20:	

malloc$6:	; parameter 25, offset 14
21:		mov word [bp + 22], 25
23:	

malloc$7:	; call function noellipse-ellipse fprintf, extra 0
24:		mov word [bp + 8], malloc$8
25:		mov [bp + 10], bp
26:		add bp, 8
27:		mov di, bp
28:		add di, 6
29:		jmp fprintf
31:	

malloc$8:	; post call
33:	

malloc$9:	; call header integral zero 0 stack zero 0
35:	

malloc$10:	; call function noellipse-noellipse abort
36:		mov word [bp + 8], malloc$11
37:		mov [bp + 10], bp
38:		add bp, 8
39:		jmp abort
41:	

malloc$11:	; post call
43:	

malloc$12:	; if memorySize != 0 goto 15
44:		cmp word [bp + 6], 0
45:		jne malloc$15
47:	

malloc$13:	; return_value = 0
48:		mov bx, 0
50:	

malloc$14:	; return
51:		mov ax, [bp]
52:		mov di, [bp + 4]
53:		mov bp, [bp + 2]
54:		jmp ax
56:	

malloc$15:	; £temporary179 = int_to_int memorySize (Signed_Int -> Unsigned_Int)
57:		mov ax, [bp + 6]
60:	

malloc$16:	; newBlockSize = £temporary179 + 4
61:		add ax, 4
62:		mov [bp + 8], ax
64:	

malloc$17:	; minGap = 0
65:		mov word [bp + 10], 0
67:	

malloc$18:	; lastAddress = 65528
68:		mov word [bp + 12], 65528
70:	

malloc$19:	; minBlockPtr = 0
71:		mov word [bp + 14], 0
73:	

malloc$20:	; minPrevBlockPtr = 0
74:		mov word [bp + 16], 0
76:	

malloc$21:	; prevBlockPtr = 0
77:		mov word [bp + 18], 0
79:	

malloc$22:	; currBlockPtr = g_firstBlockPtr
80:		mov ax, [g_firstBlockPtr]
81:		mov [bp + 20], ax
83:	

malloc$23:	; if currBlockPtr == 0 goto 41
84:		cmp word [bp + 20], 0
85:		je malloc$41
87:	

malloc$24:	; £temporary182 = int_to_int currBlockPtr (Pointer -> Unsigned_Int)
88:		mov ax, [bp + 20]
91:	

malloc$25:	; currAddress = £temporary182
92:		mov [bp + 22], ax
94:	

malloc$26:	; £temporary183 -> currBlockPtr = *currBlockPtr
95:		mov si, [bp + 20]
97:	

malloc$27:	; £temporary184 = currAddress + £temporary183 -> currBlockPtr
98:		mov ax, [bp + 22]
99:		add ax, [si]
101:	

malloc$28:	; £temporary185 = £temporary184 + 4
102:		add ax, 4
104:	

malloc$29:	; currGap = lastAddress - £temporary185
105:		mov bx, [bp + 12]
106:		sub bx, ax
107:		mov [bp + 24], bx
109:	

malloc$30:	; if newBlockSize > currGap goto 36
110:		mov ax, [bp + 24]
111:		cmp [bp + 8], ax
112:		ja malloc$36
114:	

malloc$31:	; if minGap == 0 goto 33
115:		cmp word [bp + 10], 0
116:		je malloc$33
118:	

malloc$32:	; if currGap >= minGap goto 36
119:		mov ax, [bp + 10]
120:		cmp [bp + 24], ax
121:		jae malloc$36
123:	

malloc$33:	; minGap = currGap
124:		mov ax, [bp + 24]
125:		mov [bp + 10], ax
127:	

malloc$34:	; minBlockPtr = currBlockPtr
128:		mov ax, [bp + 20]
129:		mov [bp + 14], ax
131:	

malloc$35:	; minPrevBlockPtr = prevBlockPtr
132:		mov ax, [bp + 18]
133:		mov [bp + 16], ax
135:	

malloc$36:	; lastAddress = currAddress
136:		mov ax, [bp + 22]
137:		mov [bp + 12], ax
139:	

malloc$37:	; prevBlockPtr = currBlockPtr
140:		mov ax, [bp + 20]
141:		mov [bp + 18], ax
143:	

malloc$38:	; £temporary192 -> currBlockPtr = *currBlockPtr, offset 2
144:		mov si, [bp + 20]
146:	

malloc$39:	; currBlockPtr = £temporary192 -> currBlockPtr
147:		mov ax, [si + 2]
148:		mov [bp + 20], ax
150:	

malloc$40:	; goto 23
151:		jmp malloc$23
153:	

malloc$41:	; if minBlockPtr == 0 goto 61
154:		cmp word [bp + 14], 0
155:		je malloc$61
157:	

malloc$42:	; £temporary194 = int_to_int minBlockPtr (Pointer -> Unsigned_Int)
158:		mov ax, [bp + 14]
161:	

malloc$43:	; £temporary195 -> minBlockPtr = *minBlockPtr
162:		mov si, [bp + 14]
164:	

malloc$44:	; £temporary196 = £temporary194 + £temporary195 -> minBlockPtr
165:		add ax, [si]
167:	

malloc$45:	; newAddress = £temporary196 + 4
168:		add ax, 4
169:		mov [bp + 22], ax
171:	

malloc$46:	; £temporary198 = int_to_int newAddress (Unsigned_Int -> Pointer)
172:		mov ax, [bp + 22]
175:	

malloc$47:	; newBlockPtr = £temporary198
176:		mov [bp + 24], ax
178:	

malloc$48:	; £temporary199 -> newBlockPtr = *newBlockPtr
179:		mov si, [bp + 24]
181:	

malloc$49:	; £temporary199 -> newBlockPtr = memorySize
182:		mov ax, [bp + 6]
183:		mov [si], ax
185:	

malloc$50:	; £temporary200 -> newBlockPtr = *newBlockPtr, offset 2
186:		mov si, [bp + 24]
188:	

malloc$51:	; £temporary200 -> newBlockPtr = minBlockPtr
189:		mov ax, [bp + 14]
190:		mov [si + 2], ax
192:	

malloc$52:	; if minPrevBlockPtr == 0 goto 56
193:		cmp word [bp + 16], 0
194:		je malloc$56
196:	

malloc$53:	; £temporary202 -> minPrevBlockPtr = *minPrevBlockPtr, offset 2
197:		mov si, [bp + 16]
199:	

malloc$54:	; £temporary202 -> minPrevBlockPtr = newBlockPtr
200:		mov ax, [bp + 24]
201:		mov [si + 2], ax
203:	

malloc$55:	; goto 57
204:		jmp malloc$57
206:	

malloc$56:	; g_firstBlockPtr = newBlockPtr
207:		mov ax, [bp + 24]
208:		mov [g_firstBlockPtr], ax
210:	

malloc$57:	; £temporary203 = newAddress + 4
211:		mov bx, [bp + 22]
212:		add bx, 4
214:	

malloc$58:	; £temporary204 = int_to_int £temporary203 (Unsigned_Int -> Pointer)
217:	

malloc$59:	; return_value = £temporary204
219:	

malloc$60:	; return
220:		mov ax, [bp]
221:		mov di, [bp + 4]
222:		mov bp, [bp + 2]
223:		jmp ax
225:	

malloc$61:	; newAddress = lastAddress - newBlockSize
226:		mov ax, [bp + 12]
227:		sub ax, [bp + 8]
228:		mov [bp + 22], ax
230:	

malloc$62:	; £temporary206 = bp
232:	

malloc$63:	; stackTop = £temporary206
233:		mov [bp + 24], bp
235:	

malloc$64:	; if stackTop > newAddress goto 80
236:		mov ax, [bp + 22]
237:		cmp [bp + 24], ax
238:		ja malloc$80
240:	

malloc$65:	; £temporary208 = int_to_int newAddress (Unsigned_Int -> Pointer)
241:		mov ax, [bp + 22]
244:	

malloc$66:	; newBlockPtr = £temporary208
245:		mov [bp + 26], ax
247:	

malloc$67:	; £temporary209 -> newBlockPtr = *newBlockPtr
248:		mov si, [bp + 26]
250:	

malloc$68:	; £temporary209 -> newBlockPtr = memorySize
251:		mov ax, [bp + 6]
252:		mov [si], ax
254:	

malloc$69:	; £temporary210 -> newBlockPtr = *newBlockPtr, offset 2
255:		mov si, [bp + 26]
257:	

malloc$70:	; £temporary210 -> newBlockPtr = 0
258:		mov word [si + 2], 0
260:	

malloc$71:	; if prevBlockPtr == 0 goto 75
261:		cmp word [bp + 18], 0
262:		je malloc$75
264:	

malloc$72:	; £temporary212 -> prevBlockPtr = *prevBlockPtr, offset 2
265:		mov si, [bp + 18]
267:	

malloc$73:	; £temporary212 -> prevBlockPtr = newBlockPtr
268:		mov ax, [bp + 26]
269:		mov [si + 2], ax
271:	

malloc$74:	; goto 76
272:		jmp malloc$76
274:	

malloc$75:	; g_firstBlockPtr = newBlockPtr
275:		mov ax, [bp + 26]
276:		mov [g_firstBlockPtr], ax
278:	

malloc$76:	; £temporary213 = newAddress + 4
279:		mov bx, [bp + 22]
280:		add bx, 4
282:	

malloc$77:	; £temporary214 = int_to_int £temporary213 (Unsigned_Int -> Pointer)
285:	

malloc$78:	; return_value = £temporary214
287:	

malloc$79:	; return
288:		mov ax, [bp]
289:		mov di, [bp + 4]
290:		mov bp, [bp + 2]
291:		jmp ax
293:	

malloc$80:	; return_value = 0
294:		mov bx, 0
296:	

malloc$81:	; return
297:		mov ax, [bp]
298:		mov di, [bp + 4]
299:		mov bp, [bp + 2]
300:		jmp ax
302:	

malloc$82:	; function end malloc
1:	

calloc:	; call header integral zero 0 stack zero 0
3:	

calloc$1:	; £temporary220 = number * size
4:		mov ax, [bp + 6]
6:		xor dx, dx
7:		imul word [bp + 8]
13:	

calloc$2:	; parameter £temporary220, offset 6
14:		mov [bp + 16], ax
16:	

calloc$3:	; call function noellipse-noellipse malloc
17:		mov word [bp + 10], calloc$4
18:		mov [bp + 12], bp
19:		add bp, 10
20:		jmp malloc
22:	

calloc$4:	; post call
24:	

calloc$5:	; £temporary221 = return_value
29:	

calloc$6:	; pointer = £temporary221
30:		mov [bp + 10], bx
32:	

calloc$7:	; if pointer == 0 goto 14
33:		cmp word [bp + 10], 0
34:		je calloc$14
36:	

calloc$8:	; call header integral zero 0 stack zero 0
38:	

calloc$9:	; parameter pointer, offset 6
39:		mov ax, [bp + 10]
40:		mov [bp + 18], ax
42:	

calloc$10:	; parameter 0, offset 8
43:		mov word [bp + 20], 0
45:	

calloc$11:	; parameter size, offset 10
46:		mov ax, [bp + 8]
47:		mov [bp + 22], ax
49:	

calloc$12:	; call function noellipse-noellipse memset
50:		mov word [bp + 12], calloc$13
51:		mov [bp + 14], bp
52:		add bp, 12
53:		jmp memset
55:	

calloc$13:	; post call
57:	

calloc$14:	; return_value = pointer
58:		mov bx, [bp + 10]
60:	

calloc$15:	; return
61:		mov ax, [bp]
62:		mov di, [bp + 4]
63:		mov bp, [bp + 2]
64:		jmp ax
66:	

calloc$16:	; function end calloc
1:	

free:	; if freeMemoryPtr != 0 goto 2
2:		cmp word [bp + 6], 0
3:		jne free$2
5:	

free$1:	; return
6:		mov ax, [bp]
7:		mov di, [bp + 4]
8:		mov bp, [bp + 2]
9:		jmp ax
11:	

free$2:	; £temporary229 = int_to_int freeMemoryPtr (Pointer -> Unsigned_Int)
12:		mov ax, [bp + 6]
15:	

free$3:	; £temporary230 = £temporary229 - 4
16:		sub ax, 4
18:	

free$4:	; £temporary231 = int_to_int £temporary230 (Unsigned_Int -> Pointer)
21:	

free$5:	; freeBlockPtr = £temporary231
22:		mov [bp + 8], ax
24:	

free$6:	; prevBlockPtr = 0
25:		mov word [bp + 10], 0
27:	

free$7:	; currBlockPtr = g_firstBlockPtr
28:		mov ax, [g_firstBlockPtr]
29:		mov [bp + 12], ax
31:	

free$8:	; if currBlockPtr == 0 goto 32
32:		cmp word [bp + 12], 0
33:		je free$32
35:	

free$9:	; if currBlockPtr != freeBlockPtr goto 28
36:		mov ax, [bp + 8]
37:		cmp [bp + 12], ax
38:		jne free$28
40:	

free$10:	; if prevBlockPtr != 0 goto 15
41:		cmp word [bp + 10], 0
42:		jne free$15
44:	

free$11:	; £temporary235 -> currBlockPtr = *currBlockPtr, offset 2
45:		mov si, [bp + 12]
47:	

free$12:	; if £temporary235 -> currBlockPtr != 0 goto 15
48:		cmp word [si + 2], 0
49:		jne free$15
51:	

free$13:	; g_firstBlockPtr = 0
52:		mov word [g_firstBlockPtr], 0
54:	

free$14:	; goto 27
55:		jmp free$27
57:	

free$15:	; if prevBlockPtr != 0 goto 19
58:		cmp word [bp + 10], 0
59:		jne free$19
61:	

free$16:	; £temporary239 -> currBlockPtr = *currBlockPtr, offset 2
62:		mov si, [bp + 12]
64:	

free$17:	; g_firstBlockPtr = £temporary239 -> currBlockPtr
65:		mov ax, [si + 2]
66:		mov [g_firstBlockPtr], ax
68:	

free$18:	; goto 27
69:		jmp free$27
71:	

free$19:	; £temporary240 -> currBlockPtr = *currBlockPtr, offset 2
72:		mov si, [bp + 12]
74:	

free$20:	; if £temporary240 -> currBlockPtr != 0 goto 24
75:		cmp word [si + 2], 0
76:		jne free$24
78:	

free$21:	; £temporary242 -> prevBlockPtr = *prevBlockPtr, offset 2
79:		mov si, [bp + 10]
81:	

free$22:	; £temporary242 -> prevBlockPtr = 0
82:		mov word [si + 2], 0
84:	

free$23:	; goto 27
85:		jmp free$27
87:	

free$24:	; £temporary243 -> prevBlockPtr = *prevBlockPtr, offset 2
88:		mov si, [bp + 10]
90:	

free$25:	; £temporary244 -> currBlockPtr = *currBlockPtr, offset 2
91:		mov di, [bp + 12]
93:	

free$26:	; £temporary243 -> prevBlockPtr = £temporary244 -> currBlockPtr
94:		mov ax, [di + 2]
95:		mov [si + 2], ax
97:	

free$27:	; return
98:		mov ax, [bp]
99:		mov di, [bp + 4]
100:		mov bp, [bp + 2]
101:		jmp ax
103:	

free$28:	; prevBlockPtr = currBlockPtr
104:		mov ax, [bp + 12]
105:		mov [bp + 10], ax
107:	

free$29:	; £temporary245 -> currBlockPtr = *currBlockPtr, offset 2
108:		mov si, [bp + 12]
110:	

free$30:	; currBlockPtr = £temporary245 -> currBlockPtr
111:		mov ax, [si + 2]
112:		mov [bp + 12], ax
114:	

free$31:	; goto 8
115:		jmp free$8
117:	

free$32:	; return
118:		mov ax, [bp]
119:		mov di, [bp + 4]
120:		mov bp, [bp + 2]
121:		jmp ax
123:	

free$33:	; function end free
1:	

realloc:	; if newMemorySize >= 0 goto 12
2:		cmp word [bp + 8], 0
3:		jge realloc$12
5:	

realloc$1:	; call header integral zero 0 stack zero 0
7:	

realloc$2:	; parameter stderr, offset 6
8:		mov ax, [stderr]
9:		mov [bp + 16], ax
11:	

realloc$3:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
12:		mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
14:	

realloc$4:	; parameter string_newMemorySize203E3D200#, offset 10
15:		mov word [bp + 20], string_newMemorySize203E3D200#
17:	

realloc$5:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#, offset 12
18:		mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#
20:	

realloc$6:	; parameter 239, offset 14
21:		mov word [bp + 24], 239
23:	

realloc$7:	; call function noellipse-ellipse fprintf, extra 0
24:		mov word [bp + 10], realloc$8
25:		mov [bp + 12], bp
26:		add bp, 10
27:		mov di, bp
28:		add di, 6
29:		jmp fprintf
31:	

realloc$8:	; post call
33:	

realloc$9:	; call header integral zero 0 stack zero 0
35:	

realloc$10:	; call function noellipse-noellipse abort
36:		mov word [bp + 10], realloc$11
37:		mov [bp + 12], bp
38:		add bp, 10
39:		jmp abort
41:	

realloc$11:	; post call
43:	

realloc$12:	; if oldMemoryPtr != 0 goto 25
44:		cmp word [bp + 6], 0
45:		jne realloc$25
47:	

realloc$13:	; if newMemorySize > 0 goto 25
48:		cmp word [bp + 8], 0
49:		jg realloc$25
51:	

realloc$14:	; call header integral zero 0 stack zero 0
53:	

realloc$15:	; parameter stderr, offset 6
54:		mov ax, [stderr]
55:		mov [bp + 16], ax
57:	

realloc$16:	; parameter string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#, offset 8
58:		mov word [bp + 18], string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#
60:	

realloc$17:	; parameter string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#, offset 10
61:		mov word [bp + 20], string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#
63:	

realloc$18:	; parameter string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#, offset 12
64:		mov word [bp + 22], string_C3A5CUsers5CStefan5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#
66:	

realloc$19:	; parameter 240, offset 14
67:		mov word [bp + 24], 240
69:	

realloc$20:	; call function noellipse-ellipse fprintf, extra 0
70:		mov word [bp + 10], realloc$21
71:		mov [bp + 12], bp
72:		add bp, 10
73:		mov di, bp
74:		add di, 6
75:		jmp fprintf
77:	

realloc$21:	; post call
79:	

realloc$22:	; call header integral zero 0 stack zero 0
81:	

realloc$23:	; call function noellipse-noellipse abort
82:		mov word [bp + 10], realloc$24
83:		mov [bp + 12], bp
84:		add bp, 10
85:		jmp abort
87:	

realloc$24:	; post call
89:	

realloc$25:	; if oldMemoryPtr != 0 goto 33
90:		cmp word [bp + 6], 0
91:		jne realloc$33
93:	

realloc$26:	; call header integral zero 0 stack zero 0
95:	

realloc$27:	; parameter newMemorySize, offset 6
96:		mov ax, [bp + 8]
97:		mov [bp + 16], ax
99:	

realloc$28:	; call function noellipse-noellipse malloc
100:		mov word [bp + 10], realloc$29
101:		mov [bp + 12], bp
102:		add bp, 10
103:		jmp malloc
105:	

realloc$29:	; post call
107:	

realloc$30:	; £temporary257 = return_value
112:	

realloc$31:	; return_value = £temporary257
114:	

realloc$32:	; return
115:		mov ax, [bp]
116:		mov di, [bp + 4]
117:		mov bp, [bp + 2]
118:		jmp ax
120:	

realloc$33:	; if newMemorySize != 0 goto 40
121:		cmp word [bp + 8], 0
122:		jne realloc$40
124:	

realloc$34:	; call header integral zero 0 stack zero 0
126:	

realloc$35:	; parameter oldMemoryPtr, offset 6
127:		mov ax, [bp + 6]
128:		mov [bp + 16], ax
130:	

realloc$36:	; call function noellipse-noellipse free
131:		mov word [bp + 10], realloc$37
132:		mov [bp + 12], bp
133:		add bp, 10
134:		jmp free
136:	

realloc$37:	; post call
138:	

realloc$38:	; return_value = 0
139:		mov bx, 0
141:	

realloc$39:	; return
142:		mov ax, [bp]
143:		mov di, [bp + 4]
144:		mov bp, [bp + 2]
145:		jmp ax
147:	

realloc$40:	; £temporary260 = int_to_int newMemorySize (Signed_Int -> Unsigned_Int)
148:		mov ax, [bp + 8]
151:	

realloc$41:	; newBlockSize = £temporary260 + 4
152:		add ax, 4
153:		mov [bp + 10], ax
155:	

realloc$42:	; £temporary262 = int_to_int oldMemoryPtr (Pointer -> Unsigned_Int)
156:		mov ax, [bp + 6]
159:	

realloc$43:	; £temporary263 = £temporary262 - 4
160:		sub ax, 4
162:	

realloc$44:	; £temporary264 = int_to_int £temporary263 (Unsigned_Int -> Pointer)
165:	

realloc$45:	; oldBlockPtr = £temporary264
166:		mov [bp + 12], ax
168:	

realloc$46:	; £temporary265 -> oldBlockPtr = *oldBlockPtr
169:		mov si, [bp + 12]
171:	

realloc$47:	; if newBlockSize > £temporary265 -> oldBlockPtr goto 52
172:		mov ax, [si]
173:		cmp [bp + 10], ax
174:		ja realloc$52
176:	

realloc$48:	; £temporary267 -> oldBlockPtr = *oldBlockPtr
177:		mov si, [bp + 12]
179:	

realloc$49:	; £temporary267 -> oldBlockPtr = newBlockSize
180:		mov ax, [bp + 10]
181:		mov [si], ax
183:	

realloc$50:	; return_value = oldMemoryPtr
184:		mov bx, [bp + 6]
186:	

realloc$51:	; return
187:		mov ax, [bp]
188:		mov di, [bp + 4]
189:		mov bp, [bp + 2]
190:		jmp ax
192:	

realloc$52:	; lastAddress = 65528
193:		mov word [bp + 14], 65528
195:	

realloc$53:	; currBlockPtr = g_firstBlockPtr
196:		mov ax, [g_firstBlockPtr]
197:		mov [bp + 16], ax
199:	

realloc$54:	; if currBlockPtr == 0 goto 68
200:		cmp word [bp + 16], 0
201:		je realloc$68
203:	

realloc$55:	; if currBlockPtr != oldBlockPtr goto 63
204:		mov ax, [bp + 12]
205:		cmp [bp + 16], ax
206:		jne realloc$63
208:	

realloc$56:	; £temporary270 = int_to_int currBlockPtr (Pointer -> Unsigned_Int)
209:		mov ax, [bp + 16]
212:	

realloc$57:	; availableSize = lastAddress - £temporary270
213:		mov bx, [bp + 14]
214:		sub bx, ax
215:		mov [bp + 18], bx
217:	

realloc$58:	; if availableSize < newBlockSize goto 68
218:		mov ax, [bp + 10]
219:		cmp [bp + 18], ax
220:		jb realloc$68
222:	

realloc$59:	; £temporary273 -> oldBlockPtr = *oldBlockPtr
223:		mov si, [bp + 12]
225:	

realloc$60:	; £temporary273 -> oldBlockPtr = newBlockSize
226:		mov ax, [bp + 10]
227:		mov [si], ax
229:	

realloc$61:	; return_value = oldMemoryPtr
230:		mov bx, [bp + 6]
232:	

realloc$62:	; return
233:		mov ax, [bp]
234:		mov di, [bp + 4]
235:		mov bp, [bp + 2]
236:		jmp ax
238:	

realloc$63:	; £temporary274 = int_to_int currBlockPtr (Pointer -> Unsigned_Int)
239:		mov ax, [bp + 16]
242:	

realloc$64:	; lastAddress = £temporary274
243:		mov [bp + 14], ax
245:	

realloc$65:	; £temporary275 -> currBlockPtr = *currBlockPtr, offset 2
246:		mov si, [bp + 16]
248:	

realloc$66:	; currBlockPtr = £temporary275 -> currBlockPtr
249:		mov ax, [si + 2]
250:		mov [bp + 16], ax
252:	

realloc$67:	; goto 54
253:		jmp realloc$54
255:	

realloc$68:	; call header integral zero 0 stack zero 0
257:	

realloc$69:	; parameter newMemorySize, offset 6
258:		mov ax, [bp + 8]
259:		mov [bp + 24], ax
261:	

realloc$70:	; call function noellipse-noellipse malloc
262:		mov word [bp + 18], realloc$71
263:		mov [bp + 20], bp
264:		add bp, 18
265:		jmp malloc
267:	

realloc$71:	; post call
269:	

realloc$72:	; £temporary276 = return_value
274:	

realloc$73:	; newMemoryPtr = £temporary276
275:		mov [bp + 18], bx
277:	

realloc$74:	; if newMemoryPtr == 0 goto 87
278:		cmp word [bp + 18], 0
279:		je realloc$87
281:	

realloc$75:	; call header integral zero 0 stack zero 0
283:	

realloc$76:	; parameter newMemoryPtr, offset 6
284:		mov ax, [bp + 18]
285:		mov [bp + 26], ax
287:	

realloc$77:	; parameter oldMemoryPtr, offset 8
288:		mov ax, [bp + 6]
289:		mov [bp + 28], ax
291:	

realloc$78:	; parameter newMemorySize, offset 10
292:		mov ax, [bp + 8]
293:		mov [bp + 30], ax
295:	

realloc$79:	; call function noellipse-noellipse memcpy
296:		mov word [bp + 20], realloc$80
297:		mov [bp + 22], bp
298:		add bp, 20
299:		jmp memcpy
301:	

realloc$80:	; post call
303:	

realloc$81:	; call header integral zero 0 stack zero 0
305:	

realloc$82:	; parameter oldMemoryPtr, offset 6
306:		mov ax, [bp + 6]
307:		mov [bp + 26], ax
309:	

realloc$83:	; call function noellipse-noellipse free
310:		mov word [bp + 20], realloc$84
311:		mov [bp + 22], bp
312:		add bp, 20
313:		jmp free
315:	

realloc$84:	; post call
317:	

realloc$85:	; return_value = newMemoryPtr
318:		mov bx, [bp + 18]
320:	

realloc$86:	; return
321:		mov ax, [bp]
322:		mov di, [bp + 4]
323:		mov bp, [bp + 2]
324:		jmp ax
326:	

realloc$87:	; return_value = 0
327:		mov bx, 0
329:	

realloc$88:	; return
330:		mov ax, [bp]
331:		mov di, [bp + 4]
332:		mov bp, [bp + 2]
333:		jmp ax
335:	

realloc$89:	; function end realloc
1:	

print_heap:	; currBlockPtr = g_firstBlockPtr
2:		mov ax, [g_firstBlockPtr]
3:		mov [bp + 6], ax
5:	

print_heap$1:	; call header integral zero 0 stack zero 0
7:	

print_heap$2:	; parameter string_Heap3A0A#, offset 6
8:		mov word [bp + 14], string_Heap3A0A#
10:	

print_heap$3:	; call function noellipse-ellipse printf, extra 0
11:		mov word [bp + 8], print_heap$4
12:		mov [bp + 10], bp
13:		add bp, 8
14:		mov di, bp
15:		jmp printf
17:	

print_heap$4:	; post call
19:	

print_heap$5:	; if currBlockPtr == 0 goto 17
20:		cmp word [bp + 6], 0
21:		je print_heap$17
23:	

print_heap$6:	; call header integral zero 0 stack zero 0
25:	

print_heap$7:	; parameter string_2020Address2025u2C20Size2025u0A#, offset 6
26:		mov word [bp + 14], string_2020Address2025u2C20Size2025u0A#
28:	

print_heap$8:	; £temporary299 = int_to_int currBlockPtr (Pointer -> Unsigned_Int)
29:		mov ax, [bp + 6]
32:	

print_heap$9:	; parameter £temporary299, offset 8
33:		mov [bp + 16], ax
35:	

print_heap$10:	; £temporary300 -> currBlockPtr = *currBlockPtr
36:		mov si, [bp + 6]
38:	

print_heap$11:	; parameter £temporary300 -> currBlockPtr, offset 10
39:		mov ax, [si]
40:		mov [bp + 18], ax
42:	

print_heap$12:	; call function noellipse-ellipse printf, extra 0
43:		mov word [bp + 8], print_heap$13
44:		mov [bp + 10], bp
45:		add bp, 8
46:		mov di, bp
47:		add di, 4
48:		jmp printf
50:	

print_heap$13:	; post call
52:	

print_heap$14:	; £temporary302 -> currBlockPtr = *currBlockPtr, offset 2
53:		mov si, [bp + 6]
55:	

print_heap$15:	; currBlockPtr = £temporary302 -> currBlockPtr
56:		mov ax, [si + 2]
57:		mov [bp + 6], ax
59:	

print_heap$16:	; goto 5
60:		jmp print_heap$5
62:	

print_heap$17:	; call header integral zero 0 stack zero 0
64:	

print_heap$18:	; parameter string_0A#, offset 6
65:		mov word [bp + 14], string_0A#
67:	

print_heap$19:	; call function noellipse-ellipse printf, extra 0
68:		mov word [bp + 8], print_heap$20
69:		mov [bp + 10], bp
70:		add bp, 8
71:		mov di, bp
72:		jmp printf
74:	

print_heap$20:	; post call
76:	

print_heap$21:	; return
77:		mov ax, [bp]
78:		mov di, [bp + 4]
79:		mov bp, [bp + 2]
80:		jmp ax
82:	

print_heap$22:	; function end print_heap
