1:	

setjmp:	; £temporary967 = bp
3:	

setjmp$1:	; bp_pointer = £temporary967
4:		mov [bp + 8], t451
6:	

setjmp$2:	; £temporary968 -> buf = *buf
7:		mov a452, [bp + 6]
9:	

setjmp$3:	; £temporary969 -> bp_pointer = *bp_pointer
10:		mov a453, [bp + 8]
12:	

setjmp$4:	; £temporary968 -> buf = £temporary969 -> bp_pointer
13:		mov t454, [a453]
14:		mov [a452], t454
16:	

setjmp$5:	; £temporary970 -> buf = *buf, offset 2
17:		mov a455, [bp + 6]
19:	

setjmp$6:	; £temporary971 -> bp_pointer = *bp_pointer, offset 2
20:		mov a456, [bp + 8]
22:	

setjmp$7:	; £temporary970 -> buf = £temporary971 -> bp_pointer
23:		mov t457, [a456 + 2]
24:		mov [a455 + 2], t457
26:	

setjmp$8:	; £temporary972 -> buf = *buf, offset 4
27:		mov a458, [bp + 6]
29:	

setjmp$9:	; £temporary973 -> bp_pointer = *bp_pointer, offset 4
30:		mov a459, [bp + 8]
32:	

setjmp$10:	; £temporary972 -> buf = £temporary973 -> bp_pointer
33:		mov t460, [a459 + 4]
34:		mov [a458 + 4], t460
36:	

setjmp$11:	; return_value = 0
37:		mov a461, 0
39:	

setjmp$12:	; return
40:		mov t462, [bp]
41:		mov di, [bp + 4]
42:		mov bp, [bp + 2]
43:		jmp t462
45:	

setjmp$13:	; function end setjmp
1:	

longjmp:	; bx = return_value
2:		mov a463, [bp + 8]
4:	

longjmp$1:	; £temporary976 -> buf = *buf
5:		mov a464, [bp + 6]
7:	

longjmp$2:	; cx = £temporary976 -> buf
8:		mov t465, [a464]
10:	

longjmp$3:	; £temporary978 -> buf = *buf, offset 4
11:		mov a466, [bp + 6]
13:	

longjmp$4:	; di = £temporary978 -> buf
14:		mov t467, [a466 + 4]
16:	

longjmp$5:	; £temporary980 -> buf = *buf, offset 2
17:		mov a468, [bp + 6]
19:	

longjmp$6:	; bp = £temporary980 -> buf
20:		mov t469, [a468 + 2]
22:	

longjmp$7:	; jump to 
23:		jmp cx
25:	

longjmp$8:	; return
26:		mov t470, [bp]
27:		mov di, [bp + 4]
28:		mov bp, [bp + 2]
29:		jmp t470
31:	

longjmp$9:	; function end longjmp
